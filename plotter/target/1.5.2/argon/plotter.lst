
c:/Users/IoTPa/Documents/jarvis/plotter/target/1.5.2/argon/plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004a30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8a50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003df20  000d8a54  0001df20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000458  2003e398  2003e398  0002e398  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8ecc  000d8ecc  00028ecc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8ef4  000d8ef4  00028ef4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cf5e9  00000000  00000000  00028ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001090f  00000000  00000000  000f84e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c987  00000000  00000000  00108df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002458  00000000  00000000  00125777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004238  00000000  00000000  00127bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035a54  00000000  00000000  0012be07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002888d  00000000  00000000  0016185b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101129  00000000  00000000  0018a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ccc4  00000000  00000000  0028b214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ff75 	bl	d7f20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ff7a 	bl	d7f36 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df20 	.word	0x2003df20
   d404c:	000d8a54 	.word	0x000d8a54
   d4050:	2003e398 	.word	0x2003e398
   d4054:	2003e398 	.word	0x2003e398
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fae7 	bl	d5630 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8a44 	.word	0x000d8a44
   d4084:	000d8a04 	.word	0x000d8a04

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b820 	b.w	d40cc <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f863 	bl	d4158 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 ba8d 	b.w	d55b4 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f001 b853 	b.w	d5144 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b851 	b.w	d5144 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 ffbe 	bl	d502c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4e1d 	.word	0x000d4e1d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr
	...

000d40cc <setup>:
const unsigned int plotPeriod = 5; //x-axis steps in ms
float data;
unsigned int currentTime;
unsigned int lastTime;

void setup() {
   d40cc:	b510      	push	{r4, lr}
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
   d40ce:	4c0e      	ldr	r4, [pc, #56]	; (d4108 <setup+0x3c>)
float data;
unsigned int currentTime;
unsigned int lastTime;

void setup() {
  Serial.begin(9600);
   d40d0:	f001 fbae 	bl	d5830 <_Z16_fetch_usbserialv>
   d40d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d8:	f001 fb9e 	bl	d5818 <_ZN9USBSerial5beginEl>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
   d40dc:	223c      	movs	r2, #60	; 0x3c
   d40de:	4620      	mov	r0, r4
   d40e0:	2102      	movs	r1, #2
   d40e2:	f000 faf3 	bl	d46cc <_ZN16Adafruit_SSD13065beginEhh>
  display.setRotation(2);
   d40e6:	2102      	movs	r1, #2
   d40e8:	4620      	mov	r0, r4
   d40ea:	f000 fdf8 	bl	d4cde <_ZN12Adafruit_GFX11setRotationEh>
  display.display(); // show splashscreen
   d40ee:	4620      	mov	r0, r4
   d40f0:	f000 fbbe 	bl	d4870 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d40f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d40f8:	f001 fa1e 	bl	d5538 <delay>
  display.clearDisplay();   // clears the screen and buffer
   d40fc:	4620      	mov	r0, r4
}
   d40fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
  display.setRotation(2);
  display.display(); // show splashscreen
  delay(2000);
  display.clearDisplay();   // clears the screen and buffer
   d4102:	f000 ba7b 	b.w	d45fc <_ZN16Adafruit_SSD130612clearDisplayEv>
   d4106:	bf00      	nop
   d4108:	2003e3a4 	.word	0x2003e3a4

000d410c <_Z8oledPloti>:
    lastTime = currentTime;
    Serial.printf("Time = %f, Data = %i \n",currentTime/1000.0,data);
  }
}

void oledPlot(int y) {
   d410c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  static int x=0;

  y = map(y,yMin,yMax,63,0);
   d410e:	2500      	movs	r5, #0
   d4110:	233f      	movs	r3, #63	; 0x3f
   d4112:	2264      	movs	r2, #100	; 0x64
   d4114:	4629      	mov	r1, r5
   d4116:	9500      	str	r5, [sp, #0]
   d4118:	f001 fa02 	bl	d5520 <_Z3mapiiiii>
  display.drawPixel(x, y, WHITE);
   d411c:	4c0c      	ldr	r4, [pc, #48]	; (d4150 <_Z8oledPloti+0x44>)
   d411e:	2301      	movs	r3, #1
   d4120:	b202      	sxth	r2, r0
   d4122:	f9b4 1000 	ldrsh.w	r1, [r4]
   d4126:	480b      	ldr	r0, [pc, #44]	; (d4154 <_Z8oledPloti+0x48>)
   d4128:	f000 fa08 	bl	d453c <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.display();
   d412c:	4809      	ldr	r0, [pc, #36]	; (d4154 <_Z8oledPloti+0x48>)
   d412e:	f000 fb9f 	bl	d4870 <_ZN16Adafruit_SSD13067displayEv>
  x++;
   d4132:	6823      	ldr	r3, [r4, #0]
   d4134:	3301      	adds	r3, #1
  if(x>127) {
   d4136:	2b7f      	cmp	r3, #127	; 0x7f
   d4138:	dc02      	bgt.n	d4140 <_Z8oledPloti+0x34>
  static int x=0;

  y = map(y,yMin,yMax,63,0);
  display.drawPixel(x, y, WHITE);
  display.display();
  x++;
   d413a:	6023      	str	r3, [r4, #0]
  if(x>127) {
    x=0;
    display.clearDisplay();
  }
}
   d413c:	b003      	add	sp, #12
   d413e:	bd30      	pop	{r4, r5, pc}
  display.drawPixel(x, y, WHITE);
  display.display();
  x++;
  if(x>127) {
    x=0;
    display.clearDisplay();
   d4140:	4804      	ldr	r0, [pc, #16]	; (d4154 <_Z8oledPloti+0x48>)
  y = map(y,yMin,yMax,63,0);
  display.drawPixel(x, y, WHITE);
  display.display();
  x++;
  if(x>127) {
    x=0;
   d4142:	6025      	str	r5, [r4, #0]
    display.clearDisplay();
  }
}
   d4144:	b003      	add	sp, #12
   d4146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.drawPixel(x, y, WHITE);
  display.display();
  x++;
  if(x>127) {
    x=0;
    display.clearDisplay();
   d414a:	f000 ba57 	b.w	d45fc <_ZN16Adafruit_SSD130612clearDisplayEv>
   d414e:	bf00      	nop
   d4150:	2003e3a0 	.word	0x2003e3a0
   d4154:	2003e3a4 	.word	0x2003e3a4

000d4158 <loop>:
  delay(2000);
  display.clearDisplay();   // clears the screen and buffer
}


void loop() {
   d4158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  currentTime = millis();
  if((currentTime-lastTime)>plotPeriod) {
   d415a:	4e27      	ldr	r6, [pc, #156]	; (d41f8 <loop+0xa0>)
  display.clearDisplay();   // clears the screen and buffer
}


void loop() {
  currentTime = millis();
   d415c:	4c27      	ldr	r4, [pc, #156]	; (d41fc <loop+0xa4>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d415e:	f000 fe65 	bl	d4e2c <HAL_Timer_Get_Milli_Seconds>
  if((currentTime-lastTime)>plotPeriod) {
   d4162:	6832      	ldr	r2, [r6, #0]
  display.clearDisplay();   // clears the screen and buffer
}


void loop() {
  currentTime = millis();
   d4164:	6020      	str	r0, [r4, #0]
  if((currentTime-lastTime)>plotPeriod) {
   d4166:	1a83      	subs	r3, r0, r2
   d4168:	2b05      	cmp	r3, #5
   d416a:	d93c      	bls.n	d41e6 <loop+0x8e>
    data = amp*sin(2*M_PI*freq*(currentTime/1000.0))+offset;
   d416c:	f003 fb42 	bl	d77f4 <__aeabi_ui2d>
   d4170:	2200      	movs	r2, #0
   d4172:	4b23      	ldr	r3, [pc, #140]	; (d4200 <loop+0xa8>)
   d4174:	4d23      	ldr	r5, [pc, #140]	; (d4204 <loop+0xac>)
   d4176:	f003 fcdd 	bl	d7b34 <__aeabi_ddiv>
   d417a:	a31d      	add	r3, pc, #116	; (adr r3, d41f0 <loop+0x98>)
   d417c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4180:	f003 fbae 	bl	d78e0 <__aeabi_dmul>
   d4184:	ec41 0b10 	vmov	d0, r0, r1
   d4188:	f002 f81e 	bl	d61c8 <sin>
   d418c:	2200      	movs	r2, #0
   d418e:	ec51 0b10 	vmov	r0, r1, d0
   d4192:	4b1d      	ldr	r3, [pc, #116]	; (d4208 <loop+0xb0>)
   d4194:	f003 fba4 	bl	d78e0 <__aeabi_dmul>
   d4198:	2200      	movs	r2, #0
   d419a:	4b1c      	ldr	r3, [pc, #112]	; (d420c <loop+0xb4>)
   d419c:	f003 f9ee 	bl	d757c <__adddf3>
   d41a0:	f003 fe60 	bl	d7e64 <__aeabi_d2f>
   d41a4:	ee07 0a90 	vmov	s15, r0
    oledPlot(data);
   d41a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15


void loop() {
  currentTime = millis();
  if((currentTime-lastTime)>plotPeriod) {
    data = amp*sin(2*M_PI*freq*(currentTime/1000.0))+offset;
   d41ac:	6028      	str	r0, [r5, #0]
    oledPlot(data);
   d41ae:	ee17 0a90 	vmov	r0, s15
   d41b2:	f7ff ffab 	bl	d410c <_Z8oledPloti>
    lastTime = currentTime;
   d41b6:	6823      	ldr	r3, [r4, #0]
   d41b8:	6033      	str	r3, [r6, #0]
    Serial.printf("Time = %f, Data = %i \n",currentTime/1000.0,data);
   d41ba:	f001 fb39 	bl	d5830 <_Z16_fetch_usbserialv>
   d41be:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41c0:	6828      	ldr	r0, [r5, #0]
   d41c2:	f003 fb39 	bl	d7838 <__aeabi_f2d>
   d41c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d41ca:	6820      	ldr	r0, [r4, #0]
   d41cc:	f003 fb12 	bl	d77f4 <__aeabi_ui2d>
   d41d0:	2200      	movs	r2, #0
   d41d2:	4b0b      	ldr	r3, [pc, #44]	; (d4200 <loop+0xa8>)
   d41d4:	f003 fcae 	bl	d7b34 <__aeabi_ddiv>
   d41d8:	4a0d      	ldr	r2, [pc, #52]	; (d4210 <loop+0xb8>)
   d41da:	e9cd 0100 	strd	r0, r1, [sp]
   d41de:	2100      	movs	r1, #0
   d41e0:	4630      	mov	r0, r6
   d41e2:	f001 f950 	bl	d5486 <_ZN5Print11printf_implEbPKcz>
  }
}
   d41e6:	b004      	add	sp, #16
   d41e8:	bd70      	pop	{r4, r5, r6, pc}
   d41ea:	bf00      	nop
   d41ec:	f3af 8000 	nop.w
   d41f0:	7ba3bcbe 	.word	0x7ba3bcbe
   d41f4:	3fe41b2f 	.word	0x3fe41b2f
   d41f8:	2003e3cc 	.word	0x2003e3cc
   d41fc:	2003e39c 	.word	0x2003e39c
   d4200:	408f4000 	.word	0x408f4000
   d4204:	2003e3c8 	.word	0x2003e3c8
   d4208:	40440000 	.word	0x40440000
   d420c:	40490000 	.word	0x40490000
   d4210:	000d7fbc 	.word	0x000d7fbc

000d4214 <_ZN16Adafruit_SSD1306D0Ev>:
   d4214:	b510      	push	{r4, lr}
   d4216:	2124      	movs	r1, #36	; 0x24
   d4218:	4604      	mov	r4, r0
   d421a:	f001 fe79 	bl	d5f10 <_ZdlPvj>
   d421e:	4620      	mov	r0, r4
   d4220:	bd10      	pop	{r4, pc}
	...

000d4224 <_GLOBAL__sub_I_display>:
  }
}

int mapFloat(float fromY, float fromMin, float fromMax, float toMin, float toMax) {
  return (fromY - fromMin) * (toMax - toMin) / (fromMax - fromMin) + fromMin;
   d4224:	b510      	push	{r4, lr}

#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d4226:	4c07      	ldr	r4, [pc, #28]	; (d4244 <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4228:	f000 fd80 	bl	d4d2c <HAL_Pin_Map>
   d422c:	2104      	movs	r1, #4
   d422e:	4620      	mov	r0, r4
   d4230:	f000 f9ce 	bl	d45d0 <_ZN16Adafruit_SSD1306C1Ea>
   d4234:	4620      	mov	r0, r4
   d4236:	4a04      	ldr	r2, [pc, #16]	; (d4248 <_GLOBAL__sub_I_display+0x24>)
   d4238:	4904      	ldr	r1, [pc, #16]	; (d424c <_GLOBAL__sub_I_display+0x28>)
  }
}

int mapFloat(float fromY, float fromMin, float fromMax, float toMin, float toMax) {
  return (fromY - fromMin) * (toMax - toMin) / (fromMax - fromMin) + fromMin;
   d423a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d423e:	f001 be59 	b.w	d5ef4 <__aeabi_atexit>
   d4242:	bf00      	nop
   d4244:	2003e3a4 	.word	0x2003e3a4
   d4248:	2003e398 	.word	0x2003e398
   d424c:	000d40c9 	.word	0x000d40c9

000d4250 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4250:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4252:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4254:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4258:	2c02      	cmp	r4, #2
   d425a:	d008      	beq.n	d426e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d425c:	2c03      	cmp	r4, #3
   d425e:	d00f      	beq.n	d4280 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4260:	2c01      	cmp	r4, #1
   d4262:	d170      	bne.n	d4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4264:	8904      	ldrh	r4, [r0, #8]
   d4266:	3c01      	subs	r4, #1
   d4268:	1aa2      	subs	r2, r4, r2
   d426a:	b212      	sxth	r2, r2
      break;
   d426c:	e00c      	b.n	d4288 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d426e:	8944      	ldrh	r4, [r0, #10]
   d4270:	3c01      	subs	r4, #1
   d4272:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4274:	8904      	ldrh	r4, [r0, #8]
   d4276:	1ae4      	subs	r4, r4, r3
   d4278:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d427a:	b212      	sxth	r2, r2
      x -= (w-1);
   d427c:	b209      	sxth	r1, r1
      break;
   d427e:	e062      	b.n	d4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4280:	8944      	ldrh	r4, [r0, #10]
   d4282:	1ae4      	subs	r4, r4, r3
   d4284:	1a61      	subs	r1, r4, r1
   d4286:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4288:	2a00      	cmp	r2, #0
   d428a:	db5b      	blt.n	d4344 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d428c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4290:	4294      	cmp	r4, r2
   d4292:	f340 8090 	ble.w	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4296:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4298:	bfbe      	ittt	lt
   d429a:	185b      	addlt	r3, r3, r1
   d429c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d429e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d42a0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d42a4:	18cc      	adds	r4, r1, r3
   d42a6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d42a8:	bfc4      	itt	gt
   d42aa:	1a43      	subgt	r3, r0, r1
   d42ac:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d42ae:	2b00      	cmp	r3, #0
   d42b0:	f340 8081 	ble.w	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d42b4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d42b6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d42b8:	4f3f      	ldr	r7, [pc, #252]	; (d43b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d42ba:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d42be:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d42c2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d42c4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d42c8:	d017      	beq.n	d42fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d42ca:	f1c1 0108 	rsb	r1, r1, #8
   d42ce:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d42d0:	493a      	ldr	r1, [pc, #232]	; (d43bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d42d2:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d42d4:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d42d6:	bf3f      	itttt	cc
   d42d8:	ebc3 0e00 	rsbcc	lr, r3, r0
   d42dc:	21ff      	movcc	r1, #255	; 0xff
   d42de:	fa41 f10e 	asrcc.w	r1, r1, lr
   d42e2:	400e      	andcc	r6, r1
   d42e4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d42e6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d42e8:	bf0c      	ite	eq
   d42ea:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d42ec:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42ee:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d42f0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42f2:	d360      	bcc.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d42f4:	1a18      	subs	r0, r3, r0
   d42f6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d42f8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d42fa:	2b07      	cmp	r3, #7
   d42fc:	d917      	bls.n	d432e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d42fe:	2d01      	cmp	r5, #1
   d4300:	bf0c      	ite	eq
   d4302:	20ff      	moveq	r0, #255	; 0xff
   d4304:	2000      	movne	r0, #0
   d4306:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d430a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d430c:	3a08      	subs	r2, #8
   d430e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4310:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4312:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4316:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d431a:	d8f7      	bhi.n	d430c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d431c:	f1a3 0208 	sub.w	r2, r3, #8
   d4320:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4324:	3201      	adds	r2, #1
   d4326:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d432a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d432e:	2b00      	cmp	r3, #0
   d4330:	d041      	beq.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4332:	4a23      	ldr	r2, [pc, #140]	; (d43c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4334:	5cd2      	ldrb	r2, [r2, r3]
   d4336:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4338:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d433a:	bf0c      	ite	eq
   d433c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d433e:	4393      	bicne	r3, r2
   d4340:	7023      	strb	r3, [r4, #0]
   d4342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4344:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4346:	2a00      	cmp	r2, #0
   d4348:	db35      	blt.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d434a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d434e:	4294      	cmp	r4, r2
   d4350:	dd31      	ble.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4352:	2900      	cmp	r1, #0
    w += x;
   d4354:	bfbc      	itt	lt
   d4356:	18c9      	addlt	r1, r1, r3
   d4358:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d435a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d435e:	bfb8      	it	lt
   d4360:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4362:	18ce      	adds	r6, r1, r3
   d4364:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4366:	bfc4      	itt	gt
   d4368:	1a63      	subgt	r3, r4, r1
   d436a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d436c:	2b00      	cmp	r3, #0
   d436e:	dd22      	ble.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4370:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4372:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4376:	4810      	ldr	r0, [pc, #64]	; (d43b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4378:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d437c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d437e:	2001      	movs	r0, #1
   d4380:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4384:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4386:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4388:	d109      	bne.n	d439e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d438a:	3b01      	subs	r3, #1
   d438c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d438e:	1c5c      	adds	r4, r3, #1
   d4390:	d011      	beq.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4392:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4396:	4310      	orrs	r0, r2
   d4398:	f801 0c01 	strb.w	r0, [r1, #-1]
   d439c:	e7f5      	b.n	d438a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d439e:	43d2      	mvns	r2, r2
   d43a0:	b2d2      	uxtb	r2, r2
   d43a2:	3b01      	subs	r3, #1
   d43a4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d43a6:	1c58      	adds	r0, r3, #1
   d43a8:	d005      	beq.n	d43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d43aa:	f811 0b01 	ldrb.w	r0, [r1], #1
   d43ae:	4010      	ands	r0, r2
   d43b0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d43b4:	e7f5      	b.n	d43a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d43b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43b8:	2003df30 	.word	0x2003df30
   d43bc:	2003df28 	.word	0x2003df28
   d43c0:	2003df20 	.word	0x2003df20

000d43c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d43c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d43c6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d43c8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d43cc:	2c02      	cmp	r4, #2
   d43ce:	d008      	beq.n	d43e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d43d0:	2c03      	cmp	r4, #3
   d43d2:	d00f      	beq.n	d43f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d43d4:	2c01      	cmp	r4, #1
   d43d6:	d112      	bne.n	d43fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d43d8:	8904      	ldrh	r4, [r0, #8]
   d43da:	1ae4      	subs	r4, r4, r3
   d43dc:	1aa2      	subs	r2, r4, r2
   d43de:	b212      	sxth	r2, r2
      break;
   d43e0:	e06d      	b.n	d44be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d43e2:	8904      	ldrh	r4, [r0, #8]
   d43e4:	3c01      	subs	r4, #1
   d43e6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d43e8:	8944      	ldrh	r4, [r0, #10]
   d43ea:	1ae4      	subs	r4, r4, r3
   d43ec:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d43ee:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d43f0:	b212      	sxth	r2, r2
      break;
   d43f2:	e004      	b.n	d43fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d43f4:	8944      	ldrh	r4, [r0, #10]
   d43f6:	3c01      	subs	r4, #1
   d43f8:	1a61      	subs	r1, r4, r1
   d43fa:	b209      	sxth	r1, r1
      break;
   d43fc:	e05f      	b.n	d44be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d43fe:	2900      	cmp	r1, #0
   d4400:	db5c      	blt.n	d44bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4402:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4406:	428c      	cmp	r4, r1
   d4408:	f340 8091 	ble.w	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d440c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d440e:	bfbc      	itt	lt
   d4410:	18d2      	addlt	r2, r2, r3
   d4412:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4414:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4418:	bfb8      	it	lt
   d441a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d441c:	18d4      	adds	r4, r2, r3
   d441e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4420:	bfc4      	itt	gt
   d4422:	1a83      	subgt	r3, r0, r2
   d4424:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4426:	2b00      	cmp	r3, #0
   d4428:	f340 8081 	ble.w	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d442c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d442e:	4e40      	ldr	r6, [pc, #256]	; (d4530 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4430:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4432:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4434:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4438:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d443c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4440:	d017      	beq.n	d4472 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4442:	f1c4 0408 	rsb	r4, r4, #8
   d4446:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4448:	4c3a      	ldr	r4, [pc, #232]	; (d4534 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d444a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d444c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d444e:	bf3f      	itttt	cc
   d4450:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4454:	24ff      	movcc	r4, #255	; 0xff
   d4456:	fa44 f40e 	asrcc.w	r4, r4, lr
   d445a:	4027      	andcc	r7, r4
   d445c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d445e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4460:	bf0c      	ite	eq
   d4462:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4464:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4466:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4468:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d446a:	d360      	bcc.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d446c:	1a10      	subs	r0, r2, r0
   d446e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4470:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4472:	2a07      	cmp	r2, #7
   d4474:	d917      	bls.n	d44a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4476:	2d01      	cmp	r5, #1
   d4478:	bf0c      	ite	eq
   d447a:	24ff      	moveq	r4, #255	; 0xff
   d447c:	2400      	movne	r4, #0
   d447e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4482:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4484:	3908      	subs	r1, #8
   d4486:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4488:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d448a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d448e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4492:	d8f7      	bhi.n	d4484 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4494:	f1a2 0108 	sub.w	r1, r2, #8
   d4498:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d449c:	3101      	adds	r1, #1
   d449e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d44a2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d44a6:	2a00      	cmp	r2, #0
   d44a8:	d041      	beq.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d44aa:	4923      	ldr	r1, [pc, #140]	; (d4538 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d44ac:	5c89      	ldrb	r1, [r1, r2]
   d44ae:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d44b0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d44b2:	bf0c      	ite	eq
   d44b4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d44b6:	438a      	bicne	r2, r1
   d44b8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d44ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d44be:	2900      	cmp	r1, #0
   d44c0:	db35      	blt.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d44c2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d44c6:	428c      	cmp	r4, r1
   d44c8:	dd31      	ble.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d44ca:	2a00      	cmp	r2, #0
    w += x;
   d44cc:	bfbc      	itt	lt
   d44ce:	18d2      	addlt	r2, r2, r3
   d44d0:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d44d2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d44d6:	bfb8      	it	lt
   d44d8:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d44da:	18d6      	adds	r6, r2, r3
   d44dc:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d44de:	bfc4      	itt	gt
   d44e0:	1aa3      	subgt	r3, r4, r2
   d44e2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d44e4:	2b00      	cmp	r3, #0
   d44e6:	dd22      	ble.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d44e8:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d44ea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d44ee:	4810      	ldr	r0, [pc, #64]	; (d4530 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d44f0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d44f4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d44f6:	2201      	movs	r2, #1
   d44f8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d44fc:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d44fe:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4500:	d109      	bne.n	d4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4502:	1e5a      	subs	r2, r3, #1
   d4504:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4506:	1c5c      	adds	r4, r3, #1
   d4508:	d011      	beq.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d450a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d450e:	430a      	orrs	r2, r1
   d4510:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4514:	e7f5      	b.n	d4502 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4516:	43c9      	mvns	r1, r1
   d4518:	b2c9      	uxtb	r1, r1
   d451a:	1e5a      	subs	r2, r3, #1
   d451c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d451e:	1c5a      	adds	r2, r3, #1
   d4520:	d005      	beq.n	d452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4522:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4526:	400a      	ands	r2, r1
   d4528:	f800 2c01 	strb.w	r2, [r0, #-1]
   d452c:	e7f5      	b.n	d451a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4530:	2003df30 	.word	0x2003df30
   d4534:	2003df28 	.word	0x2003df28
   d4538:	2003df20 	.word	0x2003df20

000d453c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d453e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4540:	4606      	mov	r6, r0
   d4542:	4614      	mov	r4, r2
   d4544:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4546:	db3f      	blt.n	d45c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4548:	f000 fbd8 	bl	d4cfc <_ZN12Adafruit_GFX5widthEv>
   d454c:	4285      	cmp	r5, r0
   d454e:	da3b      	bge.n	d45c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4550:	2c00      	cmp	r4, #0
   d4552:	db39      	blt.n	d45c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4554:	4630      	mov	r0, r6
   d4556:	f000 fbd4 	bl	d4d02 <_ZN12Adafruit_GFX6heightEv>
   d455a:	4284      	cmp	r4, r0
   d455c:	da34      	bge.n	d45c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d455e:	4630      	mov	r0, r6
   d4560:	f000 fbbb 	bl	d4cda <_ZN12Adafruit_GFX11getRotationEv>
   d4564:	2802      	cmp	r0, #2
   d4566:	d127      	bne.n	d45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4568:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d456a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d456c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d456e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4570:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4572:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4574:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4576:	b204      	sxth	r4, r0
   d4578:	e006      	b.n	d4588 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d457a:	2801      	cmp	r0, #1
   d457c:	d104      	bne.n	d4588 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d457e:	8933      	ldrh	r3, [r6, #8]
   d4580:	3b01      	subs	r3, #1
   d4582:	1b1b      	subs	r3, r3, r4
   d4584:	462c      	mov	r4, r5
   d4586:	b21d      	sxth	r5, r3
   d4588:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d458a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d458c:	fb94 f0f0 	sdiv	r0, r4, r0
   d4590:	b200      	sxth	r0, r0
   d4592:	4b0e      	ldr	r3, [pc, #56]	; (d45cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4594:	f004 0207 	and.w	r2, r4, #7
   d4598:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d459c:	d104      	bne.n	d45a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d459e:	4097      	lsls	r7, r2
   d45a0:	5c5a      	ldrb	r2, [r3, r1]
   d45a2:	4317      	orrs	r7, r2
   d45a4:	545f      	strb	r7, [r3, r1]
   d45a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d45a8:	5c58      	ldrb	r0, [r3, r1]
   d45aa:	2701      	movs	r7, #1
   d45ac:	fa07 f202 	lsl.w	r2, r7, r2
   d45b0:	ea20 0202 	bic.w	r2, r0, r2
   d45b4:	545a      	strb	r2, [r3, r1]
   d45b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d45b8:	2803      	cmp	r0, #3
   d45ba:	d1de      	bne.n	d457a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d45bc:	8973      	ldrh	r3, [r6, #10]
   d45be:	3b01      	subs	r3, #1
   d45c0:	1b5b      	subs	r3, r3, r5
   d45c2:	4625      	mov	r5, r4
   d45c4:	b21c      	sxth	r4, r3
   d45c6:	e7df      	b.n	d4588 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d45c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d45ca:	bf00      	nop
   d45cc:	2003df30 	.word	0x2003df30

000d45d0 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45d0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45d2:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45d4:	4604      	mov	r4, r0
   d45d6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45d8:	2180      	movs	r1, #128	; 0x80
   d45da:	f000 fa9f 	bl	d4b1c <_ZN12Adafruit_GFXC1Ess>
   d45de:	4b06      	ldr	r3, [pc, #24]	; (d45f8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d45e0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d45e2:	23ff      	movs	r3, #255	; 0xff
   d45e4:	7763      	strb	r3, [r4, #29]
   d45e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d45ea:	77e3      	strb	r3, [r4, #31]
   d45ec:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d45ee:	f884 5020 	strb.w	r5, [r4, #32]
}
   d45f2:	4620      	mov	r0, r4
   d45f4:	bd38      	pop	{r3, r4, r5, pc}
   d45f6:	bf00      	nop
   d45f8:	000d7fdc 	.word	0x000d7fdc

000d45fc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d45fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4600:	2100      	movs	r1, #0
   d4602:	4801      	ldr	r0, [pc, #4]	; (d4608 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4604:	f003 bc97 	b.w	d7f36 <memset>
   d4608:	2003df30 	.word	0x2003df30

000d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d460c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d460e:	4d09      	ldr	r5, [pc, #36]	; (d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4610:	6829      	ldr	r1, [r5, #0]
   d4612:	f011 0401 	ands.w	r4, r1, #1
   d4616:	d10a      	bne.n	d462e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4618:	4628      	mov	r0, r5
   d461a:	f7ff fd4d 	bl	d40b8 <__cxa_guard_acquire>
   d461e:	b130      	cbz	r0, d462e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4620:	4621      	mov	r1, r4
   d4622:	4805      	ldr	r0, [pc, #20]	; (d4638 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4624:	f000 fde2 	bl	d51ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4628:	4628      	mov	r0, r5
   d462a:	f7ff fd4a 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d462e:	4802      	ldr	r0, [pc, #8]	; (d4638 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4630:	bd38      	pop	{r3, r4, r5, pc}
   d4632:	bf00      	nop
   d4634:	2003e3d0 	.word	0x2003e3d0
   d4638:	2003e3d4 	.word	0x2003e3d4

000d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d463c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d463e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4642:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4644:	4604      	mov	r4, r0
   d4646:	460d      	mov	r5, r1
  if (sid != -1)
   d4648:	d028      	beq.n	d469c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d464a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d464e:	2101      	movs	r1, #1
   d4650:	b280      	uxth	r0, r0
   d4652:	f001 fbd2 	bl	d5dfa <digitalWrite>
    digitalWrite(dc, LOW);
   d4656:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d465a:	2100      	movs	r1, #0
   d465c:	b280      	uxth	r0, r0
   d465e:	f001 fbcc 	bl	d5dfa <digitalWrite>
    digitalWrite(cs, LOW);
   d4662:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4666:	2100      	movs	r1, #0
   d4668:	b280      	uxth	r0, r0
   d466a:	f001 fbc6 	bl	d5dfa <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d466e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4672:	b12b      	cbz	r3, d4680 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4674:	f7ff ffca 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4678:	4629      	mov	r1, r5
   d467a:	f000 fe61 	bl	d5340 <_ZN8SPIClass8transferEh>
   d467e:	e005      	b.n	d468c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4680:	462b      	mov	r3, r5
   d4682:	2201      	movs	r2, #1
   d4684:	7fa1      	ldrb	r1, [r4, #30]
   d4686:	7f60      	ldrb	r0, [r4, #29]
   d4688:	f001 fbd0 	bl	d5e2c <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d468c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4690:	2101      	movs	r1, #1
   d4692:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4698:	f001 bbaf 	b.w	d5dfa <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d469c:	f001 fc04 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d46a0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d46a4:	f001 f9b4 	bl	d5a10 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d46a8:	f001 fbfe 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d46ac:	6803      	ldr	r3, [r0, #0]
   d46ae:	2100      	movs	r1, #0
   d46b0:	689b      	ldr	r3, [r3, #8]
   d46b2:	4798      	blx	r3
    Wire.write(c);
   d46b4:	f001 fbf8 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d46b8:	6803      	ldr	r3, [r0, #0]
   d46ba:	4629      	mov	r1, r5
   d46bc:	689b      	ldr	r3, [r3, #8]
   d46be:	4798      	blx	r3
    Wire.endTransmission();
   d46c0:	f001 fbf2 	bl	d5ea8 <_Z19__fetch_global_Wirev>
  }
}
   d46c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d46c8:	f001 b9a9 	b.w	d5a1e <_ZN7TwoWire15endTransmissionEv>

000d46cc <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d46cc:	b538      	push	{r3, r4, r5, lr}
   d46ce:	4604      	mov	r4, r0
   d46d0:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d46d2:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d46d4:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d46d8:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d46da:	3301      	adds	r3, #1
   d46dc:	d037      	beq.n	d474e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d46de:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d46e2:	2101      	movs	r1, #1
   d46e4:	b280      	uxth	r0, r0
   d46e6:	f001 fb77 	bl	d5dd8 <pinMode>
    pinMode(cs, OUTPUT);
   d46ea:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d46ee:	2101      	movs	r1, #1
   d46f0:	b280      	uxth	r0, r0
   d46f2:	f001 fb71 	bl	d5dd8 <pinMode>
    if (!hwSPI){
   d46f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d46fa:	b95b      	cbnz	r3, d4714 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d46fc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4700:	2101      	movs	r1, #1
   d4702:	b280      	uxth	r0, r0
   d4704:	f001 fb68 	bl	d5dd8 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4708:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d470c:	2101      	movs	r1, #1
   d470e:	b280      	uxth	r0, r0
   d4710:	f001 fb62 	bl	d5dd8 <pinMode>
    	}
    if (hwSPI){
   d4714:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4718:	b1eb      	cbz	r3, d4756 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d471a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d471e:	2101      	movs	r1, #1
   d4720:	b280      	uxth	r0, r0
   d4722:	f001 fb6a 	bl	d5dfa <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4726:	f7ff ff71 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d472a:	2101      	movs	r1, #1
   d472c:	f000 fd79 	bl	d5222 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4730:	f7ff ff6c 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4734:	2110      	movs	r1, #16
   d4736:	f000 fddf 	bl	d52f8 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d473a:	f7ff ff67 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d473e:	2100      	movs	r1, #0
   d4740:	f000 fd80 	bl	d5244 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4744:	f7ff ff62 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4748:	f000 fd5a 	bl	d5200 <_ZN8SPIClass5beginEv>
   d474c:	e003      	b.n	d4756 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d474e:	f001 fbab 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d4752:	f001 f953 	bl	d59fc <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4756:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d475a:	2101      	movs	r1, #1
   d475c:	b280      	uxth	r0, r0
   d475e:	f001 fb3b 	bl	d5dd8 <pinMode>
  digitalWrite(rst, HIGH);
   d4762:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4766:	2101      	movs	r1, #1
   d4768:	b280      	uxth	r0, r0
   d476a:	f001 fb46 	bl	d5dfa <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d476e:	2001      	movs	r0, #1
   d4770:	f000 fee2 	bl	d5538 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4774:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4778:	2100      	movs	r1, #0
   d477a:	b280      	uxth	r0, r0
   d477c:	f001 fb3d 	bl	d5dfa <digitalWrite>
  // wait 10ms
  delay(10);
   d4780:	200a      	movs	r0, #10
   d4782:	f000 fed9 	bl	d5538 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4786:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d478a:	2101      	movs	r1, #1
   d478c:	b280      	uxth	r0, r0
   d478e:	f001 fb34 	bl	d5dfa <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4792:	4620      	mov	r0, r4
   d4794:	21ae      	movs	r1, #174	; 0xae
   d4796:	f7ff ff51 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d479a:	4620      	mov	r0, r4
   d479c:	21d5      	movs	r1, #213	; 0xd5
   d479e:	f7ff ff4d 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d47a2:	4620      	mov	r0, r4
   d47a4:	2180      	movs	r1, #128	; 0x80
   d47a6:	f7ff ff49 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d47aa:	4620      	mov	r0, r4
   d47ac:	21a8      	movs	r1, #168	; 0xa8
   d47ae:	f7ff ff45 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d47b2:	4620      	mov	r0, r4
   d47b4:	213f      	movs	r1, #63	; 0x3f
   d47b6:	f7ff ff41 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d47ba:	4620      	mov	r0, r4
   d47bc:	21d3      	movs	r1, #211	; 0xd3
   d47be:	f7ff ff3d 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d47c2:	4620      	mov	r0, r4
   d47c4:	2100      	movs	r1, #0
   d47c6:	f7ff ff39 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d47ca:	4620      	mov	r0, r4
   d47cc:	2140      	movs	r1, #64	; 0x40
   d47ce:	f7ff ff35 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d47d2:	218d      	movs	r1, #141	; 0x8d
   d47d4:	4620      	mov	r0, r4
   d47d6:	f7ff ff31 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d47da:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d47dc:	bf0c      	ite	eq
   d47de:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d47e0:	2114      	movne	r1, #20
   d47e2:	4620      	mov	r0, r4
   d47e4:	f7ff ff2a 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d47e8:	4620      	mov	r0, r4
   d47ea:	2120      	movs	r1, #32
   d47ec:	f7ff ff26 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d47f0:	4620      	mov	r0, r4
   d47f2:	2100      	movs	r1, #0
   d47f4:	f7ff ff22 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d47f8:	4620      	mov	r0, r4
   d47fa:	21a1      	movs	r1, #161	; 0xa1
   d47fc:	f7ff ff1e 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4800:	4620      	mov	r0, r4
   d4802:	21c8      	movs	r1, #200	; 0xc8
   d4804:	f7ff ff1a 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4808:	4620      	mov	r0, r4
   d480a:	21da      	movs	r1, #218	; 0xda
   d480c:	f7ff ff16 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4810:	4620      	mov	r0, r4
   d4812:	2112      	movs	r1, #18
   d4814:	f7ff ff12 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4818:	2181      	movs	r1, #129	; 0x81
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff ff0e 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4820:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4822:	bf0c      	ite	eq
   d4824:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4826:	21cf      	movne	r1, #207	; 0xcf
   d4828:	4620      	mov	r0, r4
   d482a:	f7ff ff07 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d482e:	21d9      	movs	r1, #217	; 0xd9
   d4830:	4620      	mov	r0, r4
   d4832:	f7ff ff03 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4836:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4838:	bf0c      	ite	eq
   d483a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d483c:	21f1      	movne	r1, #241	; 0xf1
   d483e:	4620      	mov	r0, r4
   d4840:	f7ff fefc 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4844:	4620      	mov	r0, r4
   d4846:	21db      	movs	r1, #219	; 0xdb
   d4848:	f7ff fef8 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d484c:	4620      	mov	r0, r4
   d484e:	2140      	movs	r1, #64	; 0x40
   d4850:	f7ff fef4 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4854:	4620      	mov	r0, r4
   d4856:	21a4      	movs	r1, #164	; 0xa4
   d4858:	f7ff fef0 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d485c:	4620      	mov	r0, r4
   d485e:	21a6      	movs	r1, #166	; 0xa6
   d4860:	f7ff feec 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4864:	4620      	mov	r0, r4
   d4866:	21af      	movs	r1, #175	; 0xaf
}
   d4868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d486c:	f7ff bee6 	b.w	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4870 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4874:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4876:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4878:	f7ff fee0 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d487c:	2100      	movs	r1, #0
   d487e:	4620      	mov	r0, r4
   d4880:	f7ff fedc 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4884:	217f      	movs	r1, #127	; 0x7f
   d4886:	4620      	mov	r0, r4
   d4888:	f7ff fed8 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d488c:	2122      	movs	r1, #34	; 0x22
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff fed4 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4894:	2100      	movs	r1, #0
   d4896:	4620      	mov	r0, r4
   d4898:	f7ff fed0 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d489c:	2107      	movs	r1, #7
   d489e:	4620      	mov	r0, r4
   d48a0:	f7ff fecc 	bl	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d48a4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d48a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4968 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d48ac:	3301      	adds	r3, #1
   d48ae:	d035      	beq.n	d491c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d48b0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d48b4:	2101      	movs	r1, #1
   d48b6:	b280      	uxth	r0, r0
   d48b8:	f001 fa9f 	bl	d5dfa <digitalWrite>
    digitalWrite(dc, HIGH);
   d48bc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d48c0:	2101      	movs	r1, #1
   d48c2:	b280      	uxth	r0, r0
   d48c4:	f001 fa99 	bl	d5dfa <digitalWrite>
    digitalWrite(cs, LOW);
   d48c8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d48cc:	2100      	movs	r1, #0
   d48ce:	b280      	uxth	r0, r0
   d48d0:	f001 fa93 	bl	d5dfa <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d48d4:	2001      	movs	r0, #1
   d48d6:	f000 faa1 	bl	d4e1c <HAL_Delay_Microseconds>
   d48da:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d48dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d48e0:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d48e4:	b12b      	cbz	r3, d48f2 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d48e6:	f7ff fe91 	bl	d460c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d48ea:	4631      	mov	r1, r6
   d48ec:	f000 fd28 	bl	d5340 <_ZN8SPIClass8transferEh>
   d48f0:	e005      	b.n	d48fe <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d48f2:	4633      	mov	r3, r6
   d48f4:	2201      	movs	r2, #1
   d48f6:	7fa1      	ldrb	r1, [r4, #30]
   d48f8:	7f60      	ldrb	r0, [r4, #29]
   d48fa:	f001 fa97 	bl	d5e2c <shiftOut>
   d48fe:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4900:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4904:	d1ea      	bne.n	d48dc <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4906:	2001      	movs	r0, #1
   d4908:	f000 fa88 	bl	d4e1c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d490c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4910:	2101      	movs	r1, #1
   d4912:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4918:	f001 ba6f 	b.w	d5dfa <digitalWrite>
   d491c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d491e:	f001 fac3 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d4922:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4926:	f001 f873 	bl	d5a10 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d492a:	f001 fabd 	bl	d5ea8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d492e:	6803      	ldr	r3, [r0, #0]
   d4930:	2140      	movs	r1, #64	; 0x40
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	4798      	blx	r3
   d4936:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4938:	f001 fab6 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d493c:	19af      	adds	r7, r5, r6
   d493e:	6803      	ldr	r3, [r0, #0]
   d4940:	b2bf      	uxth	r7, r7
   d4942:	689b      	ldr	r3, [r3, #8]
   d4944:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4948:	3601      	adds	r6, #1
   d494a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d494c:	2e10      	cmp	r6, #16
   d494e:	d1f3      	bne.n	d4938 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4950:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4952:	f001 faa9 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d4956:	b2ad      	uxth	r5, r5
   d4958:	f001 f861 	bl	d5a1e <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d495c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4960:	d1dd      	bne.n	d491e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4966:	bf00      	nop
   d4968:	2003df30 	.word	0x2003df30

000d496c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d496c:	f000 b9de 	b.w	d4d2c <HAL_Pin_Map>

000d4970 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4974:	b085      	sub	sp, #20
   d4976:	461e      	mov	r6, r3
   d4978:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d497c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4980:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4982:	1a9a      	subs	r2, r3, r2
   d4984:	2a00      	cmp	r2, #0
   d4986:	bfb8      	it	lt
   d4988:	4252      	neglt	r2, r2
   d498a:	9200      	str	r2, [sp, #0]
   d498c:	1a72      	subs	r2, r6, r1
   d498e:	2a00      	cmp	r2, #0
   d4990:	bfb8      	it	lt
   d4992:	4252      	neglt	r2, r2
   d4994:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4996:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4998:	9a00      	ldr	r2, [sp, #0]
   d499a:	9901      	ldr	r1, [sp, #4]
   d499c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d499e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d49a0:	dd05      	ble.n	d49ae <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d49a2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d49a4:	461e      	mov	r6, r3
   d49a6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d49a8:	4622      	mov	r2, r4
    swap(x0, y0);
   d49aa:	462c      	mov	r4, r5
   d49ac:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d49ae:	42b4      	cmp	r4, r6
   d49b0:	dd05      	ble.n	d49be <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d49b2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d49b4:	461d      	mov	r5, r3
   d49b6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d49b8:	4622      	mov	r2, r4
   d49ba:	4634      	mov	r4, r6
   d49bc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d49be:	1b5a      	subs	r2, r3, r5
   d49c0:	2a00      	cmp	r2, #0
   d49c2:	bfb8      	it	lt
   d49c4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d49c6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d49ca:	429d      	cmp	r5, r3
   d49cc:	bfb4      	ite	lt
   d49ce:	2301      	movlt	r3, #1
   d49d0:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d49d4:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d49d8:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d49da:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d49dc:	fa0f f788 	sxth.w	r7, r8
   d49e0:	2202      	movs	r2, #2
   d49e2:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d49e6:	42b4      	cmp	r4, r6
   d49e8:	dc1f      	bgt.n	d4a2a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d49ea:	9a01      	ldr	r2, [sp, #4]
   d49ec:	9b00      	ldr	r3, [sp, #0]
   d49ee:	4293      	cmp	r3, r2
   d49f0:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d49f4:	bfc8      	it	gt
   d49f6:	4622      	movgt	r2, r4
   d49f8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d49fc:	bfc8      	it	gt
   d49fe:	4629      	movgt	r1, r5
   d4a00:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4a02:	bfdc      	itt	le
   d4a04:	462a      	movle	r2, r5
   d4a06:	4621      	movle	r1, r4
   d4a08:	4648      	mov	r0, r9
   d4a0a:	47d8      	blx	fp
    }
    err -= dy;
   d4a0c:	9b03      	ldr	r3, [sp, #12]
   d4a0e:	1aff      	subs	r7, r7, r3
   d4a10:	b2bb      	uxth	r3, r7
   d4a12:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4a14:	2f00      	cmp	r7, #0
   d4a16:	da05      	bge.n	d4a24 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4a18:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4a1a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4a1e:	4415      	add	r5, r2
   d4a20:	b22d      	sxth	r5, r5
      err += dx;
   d4a22:	b23f      	sxth	r7, r7
   d4a24:	3401      	adds	r4, #1
   d4a26:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4a28:	e7dd      	b.n	d49e6 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4a2a:	b005      	add	sp, #20
   d4a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4a30 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4a30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4a34:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4a38:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4a3a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4a3e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4a40:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4a42:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4a44:	4691      	mov	r9, r2
   d4a46:	460d      	mov	r5, r1
   d4a48:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4a4a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4a4c:	6823      	ldr	r3, [r4, #0]
   d4a4e:	9600      	str	r6, [sp, #0]
   d4a50:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4a54:	444a      	add	r2, r9
   d4a56:	69df      	ldr	r7, [r3, #28]
   d4a58:	4629      	mov	r1, r5
   d4a5a:	4643      	mov	r3, r8
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	b212      	sxth	r2, r2
   d4a60:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4a62:	6823      	ldr	r3, [r4, #0]
   d4a64:	9600      	str	r6, [sp, #0]
   d4a66:	699f      	ldr	r7, [r3, #24]
   d4a68:	464a      	mov	r2, r9
   d4a6a:	4653      	mov	r3, sl
   d4a6c:	4629      	mov	r1, r5
   d4a6e:	4620      	mov	r0, r4
   d4a70:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4a72:	6823      	ldr	r3, [r4, #0]
   d4a74:	960a      	str	r6, [sp, #40]	; 0x28
   d4a76:	f108 31ff 	add.w	r1, r8, #4294967295
   d4a7a:	4429      	add	r1, r5
   d4a7c:	699d      	ldr	r5, [r3, #24]
   d4a7e:	464a      	mov	r2, r9
   d4a80:	4653      	mov	r3, sl
   d4a82:	b209      	sxth	r1, r1
   d4a84:	4620      	mov	r0, r4
   d4a86:	46ac      	mov	ip, r5
}
   d4a88:	b002      	add	sp, #8
   d4a8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4a8e:	4760      	bx	ip

000d4a90 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4a92:	3b01      	subs	r3, #1
   d4a94:	4413      	add	r3, r2
   d4a96:	6804      	ldr	r4, [r0, #0]
   d4a98:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a9c:	9501      	str	r5, [sp, #4]
   d4a9e:	b21b      	sxth	r3, r3
   d4aa0:	9300      	str	r3, [sp, #0]
   d4aa2:	6964      	ldr	r4, [r4, #20]
   d4aa4:	460b      	mov	r3, r1
   d4aa6:	47a0      	blx	r4
}
   d4aa8:	b003      	add	sp, #12
   d4aaa:	bd30      	pop	{r4, r5, pc}

000d4aac <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4aae:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4ab2:	6804      	ldr	r4, [r0, #0]
   d4ab4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4ab8:	3b01      	subs	r3, #1
   d4aba:	440b      	add	r3, r1
   d4abc:	6964      	ldr	r4, [r4, #20]
   d4abe:	b21b      	sxth	r3, r3
   d4ac0:	47a0      	blx	r4
}
   d4ac2:	b003      	add	sp, #12
   d4ac4:	bd30      	pop	{r4, r5, pc}

000d4ac6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4ac6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4aca:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4ace:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4ad2:	4605      	mov	r5, r0
   d4ad4:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4ad6:	460c      	mov	r4, r1
   d4ad8:	eb01 0a03 	add.w	sl, r1, r3
   d4adc:	4554      	cmp	r4, sl
   d4ade:	da0b      	bge.n	d4af8 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4ae0:	682b      	ldr	r3, [r5, #0]
   d4ae2:	f8cd 9000 	str.w	r9, [sp]
   d4ae6:	699e      	ldr	r6, [r3, #24]
   d4ae8:	4621      	mov	r1, r4
   d4aea:	4643      	mov	r3, r8
   d4aec:	463a      	mov	r2, r7
   d4aee:	4628      	mov	r0, r5
   d4af0:	3401      	adds	r4, #1
   d4af2:	47b0      	blx	r6
   d4af4:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4af6:	e7f1      	b.n	d4adc <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4af8:	b002      	add	sp, #8
   d4afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4afe <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4afe:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4b00:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4b04:	6804      	ldr	r4, [r0, #0]
   d4b06:	9101      	str	r1, [sp, #4]
   d4b08:	9200      	str	r2, [sp, #0]
   d4b0a:	2200      	movs	r2, #0
   d4b0c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4b10:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4b12:	4611      	mov	r1, r2
   d4b14:	47a0      	blx	r4
}
   d4b16:	b002      	add	sp, #8
   d4b18:	bd10      	pop	{r4, pc}

000d4b1a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4b1a:	4770      	bx	lr

000d4b1c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4b1c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4b1e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b20:	2400      	movs	r4, #0
   d4b22:	4d08      	ldr	r5, [pc, #32]	; (d4b44 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4b24:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4b26:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4b28:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4b2e:	2201      	movs	r2, #1
   d4b30:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4b32:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4b34:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4b36:	8204      	strh	r4, [r0, #16]
   d4b38:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4b3a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4b3c:	82c1      	strh	r1, [r0, #22]
   d4b3e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4b40:	7682      	strb	r2, [r0, #26]
}
   d4b42:	bd30      	pop	{r4, r5, pc}
   d4b44:	000d8014 	.word	0x000d8014

000d4b48 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b4c:	b08f      	sub	sp, #60	; 0x3c
   d4b4e:	4605      	mov	r5, r0
   d4b50:	9106      	str	r1, [sp, #24]
   d4b52:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4b56:	9107      	str	r1, [sp, #28]
   d4b58:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4b5c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4b5e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4b62:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b64:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4b68:	4281      	cmp	r1, r0
   d4b6a:	dd7c      	ble.n	d4c66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4b6c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4b70:	4291      	cmp	r1, r2
   d4b72:	dd78      	ble.n	d4c66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b74:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4b76:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4b7a:	2800      	cmp	r0, #0
   d4b7c:	dd73      	ble.n	d4c66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b7e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4b82:	2800      	cmp	r0, #0
   d4b84:	dd6f      	ble.n	d4c66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4b8a:	b296      	uxth	r6, r2
   d4b8c:	930c      	str	r3, [sp, #48]	; 0x30
   d4b8e:	f106 0308 	add.w	r3, r6, #8
   d4b92:	b29b      	uxth	r3, r3
   d4b94:	9109      	str	r1, [sp, #36]	; 0x24
   d4b96:	2400      	movs	r4, #0
   d4b98:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4b9a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b9c:	bf1c      	itt	ne
   d4b9e:	4b33      	ldrne	r3, [pc, #204]	; (d4c6c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4ba0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ba2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4ba4:	bf16      	itet	ne
   d4ba6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4ba8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4bac:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bb0:	9604      	str	r6, [sp, #16]
   d4bb2:	fa1f f388 	uxth.w	r3, r8
   d4bb6:	9303      	str	r3, [sp, #12]
   d4bb8:	9a03      	ldr	r2, [sp, #12]
   d4bba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4bbe:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4bc2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bc6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4bc8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bca:	920a      	str	r2, [sp, #40]	; 0x28
   d4bcc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4bce:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4bd2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4bd4:	f019 0f01 	tst.w	r9, #1
   d4bd8:	d011      	beq.n	d4bfe <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4bda:	f1b8 0f01 	cmp.w	r8, #1
   d4bde:	682b      	ldr	r3, [r5, #0]
   d4be0:	d103      	bne.n	d4bea <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4be2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4be6:	9b07      	ldr	r3, [sp, #28]
   d4be8:	e014      	b.n	d4c14 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bea:	9a07      	ldr	r2, [sp, #28]
   d4bec:	9201      	str	r2, [sp, #4]
   d4bee:	f8cd a000 	str.w	sl, [sp]
   d4bf2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4bf6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4bfa:	4653      	mov	r3, sl
   d4bfc:	e018      	b.n	d4c30 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4bfe:	9b07      	ldr	r3, [sp, #28]
   d4c00:	9a08      	ldr	r2, [sp, #32]
   d4c02:	4293      	cmp	r3, r2
   d4c04:	d017      	beq.n	d4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4c06:	f1b8 0f01 	cmp.w	r8, #1
   d4c0a:	682b      	ldr	r3, [r5, #0]
   d4c0c:	d107      	bne.n	d4c1e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4c0e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c12:	4613      	mov	r3, r2
   d4c14:	b23a      	sxth	r2, r7
   d4c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4c18:	4628      	mov	r0, r5
   d4c1a:	47d8      	blx	fp
   d4c1c:	e00b      	b.n	d4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4c1e:	9a08      	ldr	r2, [sp, #32]
   d4c20:	9201      	str	r2, [sp, #4]
   d4c22:	f8cd a000 	str.w	sl, [sp]
   d4c26:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4c2a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4c2e:	4653      	mov	r3, sl
   d4c30:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4c32:	4628      	mov	r0, r5
   d4c34:	47d8      	blx	fp
   d4c36:	9b04      	ldr	r3, [sp, #16]
   d4c38:	9a03      	ldr	r2, [sp, #12]
   d4c3a:	4413      	add	r3, r2
   d4c3c:	b29b      	uxth	r3, r3
   d4c3e:	9304      	str	r3, [sp, #16]
   d4c40:	9b05      	ldr	r3, [sp, #20]
   d4c42:	4413      	add	r3, r2
   d4c44:	b29b      	uxth	r3, r3
   d4c46:	3701      	adds	r7, #1
   d4c48:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4c4c:	b2bf      	uxth	r7, r7
   d4c4e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4c50:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4c54:	d1be      	bne.n	d4bd4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4c58:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4c5a:	3401      	adds	r4, #1
   d4c5c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4c60:	b264      	sxtb	r4, r4
   d4c62:	9309      	str	r3, [sp, #36]	; 0x24
   d4c64:	d199      	bne.n	d4b9a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4c66:	b00f      	add	sp, #60	; 0x3c
   d4c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c6c:	000d8044 	.word	0x000d8044

000d4c70 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4c70:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4c72:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4c74:	b085      	sub	sp, #20
   d4c76:	4604      	mov	r4, r0
   d4c78:	460b      	mov	r3, r1

  if (c == '\n') {
   d4c7a:	d104      	bne.n	d4c86 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4c7c:	7e02      	ldrb	r2, [r0, #24]
   d4c7e:	8a43      	ldrh	r3, [r0, #18]
   d4c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4c84:	e023      	b.n	d4cce <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4c86:	290d      	cmp	r1, #13
   d4c88:	d024      	beq.n	d4cd4 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4c8a:	7e05      	ldrb	r5, [r0, #24]
   d4c8c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4c90:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4c94:	9502      	str	r5, [sp, #8]
   d4c96:	8ac5      	ldrh	r5, [r0, #22]
   d4c98:	9501      	str	r5, [sp, #4]
   d4c9a:	8a85      	ldrh	r5, [r0, #20]
   d4c9c:	9500      	str	r5, [sp, #0]
   d4c9e:	f7ff ff53 	bl	d4b48 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4ca2:	7e22      	ldrb	r2, [r4, #24]
   d4ca4:	8a23      	ldrh	r3, [r4, #16]
   d4ca6:	b291      	uxth	r1, r2
   d4ca8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4cac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4cb0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4cb2:	b21b      	sxth	r3, r3
   d4cb4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4cb6:	b168      	cbz	r0, d4cd4 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4cb8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4cbc:	f06f 0505 	mvn.w	r5, #5
   d4cc0:	fb05 0202 	mla	r2, r5, r2, r0
   d4cc4:	4293      	cmp	r3, r2
   d4cc6:	dd05      	ble.n	d4cd4 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4cc8:	8a63      	ldrh	r3, [r4, #18]
   d4cca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4cce:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4cd0:	2300      	movs	r3, #0
   d4cd2:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4cd4:	2001      	movs	r0, #1
   d4cd6:	b005      	add	sp, #20
   d4cd8:	bd30      	pop	{r4, r5, pc}

000d4cda <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4cda:	7e40      	ldrb	r0, [r0, #25]
   d4cdc:	4770      	bx	lr

000d4cde <_ZN12Adafruit_GFX11setRotationEh>:

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d4cde:	f001 0103 	and.w	r1, r1, #3
  switch(rotation) {
   d4ce2:	2901      	cmp	r1, #1
uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d4ce4:	7641      	strb	r1, [r0, #25]
   d4ce6:	8903      	ldrh	r3, [r0, #8]
   d4ce8:	8942      	ldrh	r2, [r0, #10]
  switch(rotation) {
   d4cea:	d004      	beq.n	d4cf6 <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d4cec:	2903      	cmp	r1, #3
   d4cee:	d002      	beq.n	d4cf6 <_ZN12Adafruit_GFX11setRotationEh+0x18>
   case 0:
   case 2:
    _width  = WIDTH;
   d4cf0:	8183      	strh	r3, [r0, #12]
    _height = HEIGHT;
   d4cf2:	81c2      	strh	r2, [r0, #14]
    break;
   d4cf4:	4770      	bx	lr
   case 1:
   case 3:
    _width  = HEIGHT;
   d4cf6:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
   d4cf8:	81c3      	strh	r3, [r0, #14]
   d4cfa:	4770      	bx	lr

000d4cfc <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4cfc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4d00:	4770      	bx	lr

000d4d02 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4d02:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4d06:	4770      	bx	lr

000d4d08 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4d08:	f000 b810 	b.w	d4d2c <HAL_Pin_Map>

000d4d0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <netdb_freeaddrinfo+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	689b      	ldr	r3, [r3, #8]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030268 	.word	0x00030268

000d4d1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <netdb_getaddrinfo+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	68db      	ldr	r3, [r3, #12]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030268 	.word	0x00030268

000d4d2c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_Pin_Map+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	681b      	ldr	r3, [r3, #0]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003022c 	.word	0x0003022c

000d4d3c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_Pin_Mode+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	689b      	ldr	r3, [r3, #8]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003022c 	.word	0x0003022c

000d4d4c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_Get_Pin_Mode+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	68db      	ldr	r3, [r3, #12]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003022c 	.word	0x0003022c

000d4d5c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_GPIO_Write+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	691b      	ldr	r3, [r3, #16]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003022c 	.word	0x0003022c

000d4d6c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_SPI_Begin+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	681b      	ldr	r3, [r3, #0]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030230 	.word	0x00030230

000d4d7c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_SPI_Set_Bit_Order+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	689b      	ldr	r3, [r3, #8]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030230 	.word	0x00030230

000d4d8c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_SPI_Set_Data_Mode+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	68db      	ldr	r3, [r3, #12]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030230 	.word	0x00030230

000d4d9c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	691b      	ldr	r3, [r3, #16]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030230 	.word	0x00030230

000d4dac <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_SPI_Send_Receive_Data+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	695b      	ldr	r3, [r3, #20]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030230 	.word	0x00030230

000d4dbc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_SPI_Init+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	69db      	ldr	r3, [r3, #28]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030230 	.word	0x00030230

000d4dcc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <HAL_SPI_Is_Enabled+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6a1b      	ldr	r3, [r3, #32]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030230 	.word	0x00030230

000d4ddc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <HAL_SPI_Info+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030230 	.word	0x00030230

000d4dec <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_SPI_Acquire+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030230 	.word	0x00030230

000d4dfc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_SPI_Release+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030230 	.word	0x00030230

000d4e0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_RNG_GetRandomNumber+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030218 	.word	0x00030218

000d4e1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_Delay_Microseconds+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	68db      	ldr	r3, [r3, #12]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030218 	.word	0x00030218

000d4e2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	695b      	ldr	r3, [r3, #20]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030218 	.word	0x00030218

000d4e3c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <os_thread_is_current+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	689b      	ldr	r3, [r3, #8]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030248 	.word	0x00030248

000d4e4c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <os_thread_join+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	691b      	ldr	r3, [r3, #16]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030248 	.word	0x00030248

000d4e5c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <os_thread_cleanup+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030248 	.word	0x00030248

000d4e6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <os_mutex_recursive_create+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030248 	.word	0x00030248

000d4e7c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <os_mutex_recursive_destroy+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030248 	.word	0x00030248

000d4e8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <inet_inet_ntop+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	695b      	ldr	r3, [r3, #20]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030264 	.word	0x00030264

000d4e9c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_USART_Init+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	681b      	ldr	r3, [r3, #0]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003023c 	.word	0x0003023c

000d4eac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_USART_Write_Data+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	68db      	ldr	r3, [r3, #12]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	0003023c 	.word	0x0003023c

000d4ebc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_USART_Available_Data+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	691b      	ldr	r3, [r3, #16]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	0003023c 	.word	0x0003023c

000d4ecc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_USART_Read_Data+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	695b      	ldr	r3, [r3, #20]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	0003023c 	.word	0x0003023c

000d4edc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_USART_Peek_Data+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	699b      	ldr	r3, [r3, #24]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	0003023c 	.word	0x0003023c

000d4eec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <HAL_USART_Flush_Data+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	69db      	ldr	r3, [r3, #28]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	0003023c 	.word	0x0003023c

000d4efc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <HAL_USART_Is_Enabled+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6a1b      	ldr	r3, [r3, #32]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003023c 	.word	0x0003023c

000d4f0c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <HAL_USART_Available_Data_For_Write+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003023c 	.word	0x0003023c

000d4f1c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <HAL_I2C_Begin+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	68db      	ldr	r3, [r3, #12]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030228 	.word	0x00030228

000d4f2c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_I2C_Begin_Transmission+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	699b      	ldr	r3, [r3, #24]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030228 	.word	0x00030228

000d4f3c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <HAL_I2C_End_Transmission+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	69db      	ldr	r3, [r3, #28]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030228 	.word	0x00030228

000d4f4c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <HAL_I2C_Write_Data+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6a1b      	ldr	r3, [r3, #32]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030228 	.word	0x00030228

000d4f5c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <HAL_I2C_Available_Data+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030228 	.word	0x00030228

000d4f6c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <HAL_I2C_Read_Data+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030228 	.word	0x00030228

000d4f7c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <HAL_I2C_Peek_Data+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030228 	.word	0x00030228

000d4f8c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <HAL_I2C_Flush_Data+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030228 	.word	0x00030228

000d4f9c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <HAL_I2C_Is_Enabled+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030228 	.word	0x00030228

000d4fac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_I2C_Init+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030228 	.word	0x00030228

000d4fbc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <HAL_USB_USART_Init+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	681b      	ldr	r3, [r3, #0]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	0003024c 	.word	0x0003024c

000d4fcc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <HAL_USB_USART_Begin+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	685b      	ldr	r3, [r3, #4]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003024c 	.word	0x0003024c

000d4fdc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <HAL_USB_USART_Available_Data+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	691b      	ldr	r3, [r3, #16]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	0003024c 	.word	0x0003024c

000d4fec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	695b      	ldr	r3, [r3, #20]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	0003024c 	.word	0x0003024c

000d4ffc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <HAL_USB_USART_Receive_Data+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	699b      	ldr	r3, [r3, #24]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	0003024c 	.word	0x0003024c

000d500c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <HAL_USB_USART_Send_Data+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	69db      	ldr	r3, [r3, #28]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003024c 	.word	0x0003024c

000d501c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <HAL_USB_USART_Flush_Data+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6a1b      	ldr	r3, [r3, #32]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003024c 	.word	0x0003024c

000d502c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <panic_+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030260 	.word	0x00030260

000d503c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <set_system_mode+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	685b      	ldr	r3, [r3, #4]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030220 	.word	0x00030220

000d504c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <system_delay_ms+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	695b      	ldr	r3, [r3, #20]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030220 	.word	0x00030220

000d505c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b03      	ldr	r3, [pc, #12]	; (d506c <system_ctrl_set_app_request_handler+0x10>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5066:	9301      	str	r3, [sp, #4]
   d5068:	bd08      	pop	{r3, pc}
   d506a:	0000      	.short	0x0000
   d506c:	00030220 	.word	0x00030220

000d5070 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b03      	ldr	r3, [pc, #12]	; (d5080 <system_ctrl_set_result+0x10>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d507a:	9301      	str	r3, [sp, #4]
   d507c:	bd08      	pop	{r3, pc}
   d507e:	0000      	.short	0x0000
   d5080:	00030220 	.word	0x00030220

000d5084 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <network_connect+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	685b      	ldr	r3, [r3, #4]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030240 	.word	0x00030240

000d5094 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <network_connecting+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	689b      	ldr	r3, [r3, #8]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030240 	.word	0x00030240

000d50a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <network_disconnect+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	68db      	ldr	r3, [r3, #12]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030240 	.word	0x00030240

000d50b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <network_ready+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	691b      	ldr	r3, [r3, #16]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030240 	.word	0x00030240

000d50c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <network_on+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	695b      	ldr	r3, [r3, #20]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030240 	.word	0x00030240

000d50d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <network_off+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	699b      	ldr	r3, [r3, #24]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030240 	.word	0x00030240

000d50e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <network_listen+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	69db      	ldr	r3, [r3, #28]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030240 	.word	0x00030240

000d50f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <network_listening+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a1b      	ldr	r3, [r3, #32]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030240 	.word	0x00030240

000d5104 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <network_set_listen_timeout+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030240 	.word	0x00030240

000d5114 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <network_get_listen_timeout+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030240 	.word	0x00030240

000d5124 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030244 	.word	0x00030244

000d5134 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <malloc+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	681b      	ldr	r3, [r3, #0]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003021c 	.word	0x0003021c

000d5144 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <free+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	685b      	ldr	r3, [r3, #4]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003021c 	.word	0x0003021c

000d5154 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <vsnprintf+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003021c 	.word	0x0003021c

000d5164 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5164:	2200      	movs	r2, #0
   d5166:	4611      	mov	r1, r2
   d5168:	6840      	ldr	r0, [r0, #4]
   d516a:	f7ff bfc3 	b.w	d50f4 <network_listening>

000d516e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d516e:	2200      	movs	r2, #0
   d5170:	4611      	mov	r1, r2
   d5172:	6840      	ldr	r0, [r0, #4]
   d5174:	f7ff bfce 	b.w	d5114 <network_get_listen_timeout>

000d5178 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5178:	2200      	movs	r2, #0
   d517a:	6840      	ldr	r0, [r0, #4]
   d517c:	f7ff bfc2 	b.w	d5104 <network_set_listen_timeout>

000d5180 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5180:	2200      	movs	r2, #0
   d5182:	f081 0101 	eor.w	r1, r1, #1
   d5186:	6840      	ldr	r0, [r0, #4]
   d5188:	f7ff bfac 	b.w	d50e4 <network_listen>

000d518c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d518c:	2300      	movs	r3, #0
   d518e:	461a      	mov	r2, r3
   d5190:	4619      	mov	r1, r3
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff bf9e 	b.w	d50d4 <network_off>

000d5198 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5198:	2300      	movs	r3, #0
   d519a:	461a      	mov	r2, r3
   d519c:	4619      	mov	r1, r3
   d519e:	6840      	ldr	r0, [r0, #4]
   d51a0:	f7ff bf90 	b.w	d50c4 <network_on>

000d51a4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51a4:	2200      	movs	r2, #0
   d51a6:	4611      	mov	r1, r2
   d51a8:	6840      	ldr	r0, [r0, #4]
   d51aa:	f7ff bf83 	b.w	d50b4 <network_ready>

000d51ae <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51ae:	2200      	movs	r2, #0
   d51b0:	4611      	mov	r1, r2
   d51b2:	6840      	ldr	r0, [r0, #4]
   d51b4:	f7ff bf6e 	b.w	d5094 <network_connecting>

000d51b8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51b8:	2200      	movs	r2, #0
   d51ba:	2102      	movs	r1, #2
   d51bc:	6840      	ldr	r0, [r0, #4]
   d51be:	f7ff bf71 	b.w	d50a4 <network_disconnect>

000d51c2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51c2:	2300      	movs	r3, #0
   d51c4:	461a      	mov	r2, r3
   d51c6:	6840      	ldr	r0, [r0, #4]
   d51c8:	f7ff bf5c 	b.w	d5084 <network_connect>

000d51cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51cc:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51ce:	2203      	movs	r2, #3
   d51d0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51d2:	4a02      	ldr	r2, [pc, #8]	; (d51dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51d4:	601a      	str	r2, [r3, #0]
   d51d6:	4770      	bx	lr
   d51d8:	2003e3dc 	.word	0x2003e3dc
   d51dc:	000d8548 	.word	0x000d8548

000d51e0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d51e0:	2100      	movs	r1, #0
   d51e2:	f7ff be03 	b.w	d4dec <HAL_SPI_Acquire>

000d51e6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d51e6:	2100      	movs	r1, #0
   d51e8:	f7ff be08 	b.w	d4dfc <HAL_SPI_Release>

000d51ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d51ec:	b510      	push	{r4, lr}
   d51ee:	4604      	mov	r4, r0
{
    _spi = spi;
   d51f0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d51f2:	4608      	mov	r0, r1
   d51f4:	f7ff fde2 	bl	d4dbc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d51f8:	2300      	movs	r3, #0
   d51fa:	6063      	str	r3, [r4, #4]
}
   d51fc:	4620      	mov	r0, r4
   d51fe:	bd10      	pop	{r4, pc}

000d5200 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5200:	b510      	push	{r4, lr}
   d5202:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5204:	7800      	ldrb	r0, [r0, #0]
   d5206:	f7ff ffeb 	bl	d51e0 <_ZN8SPIClass4lockEv.isra.0>
   d520a:	b948      	cbnz	r0, d5220 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d520c:	7820      	ldrb	r0, [r4, #0]
   d520e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5212:	f7ff fdab 	bl	d4d6c <HAL_SPI_Begin>
        unlock();
   d5216:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d521c:	f7ff bfe3 	b.w	d51e6 <_ZN8SPIClass6unlockEv.isra.1>
   d5220:	bd10      	pop	{r4, pc}

000d5222 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5222:	b538      	push	{r3, r4, r5, lr}
   d5224:	4604      	mov	r4, r0
    if (!lock())
   d5226:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5228:	460d      	mov	r5, r1
    if (!lock())
   d522a:	f7ff ffd9 	bl	d51e0 <_ZN8SPIClass4lockEv.isra.0>
   d522e:	b940      	cbnz	r0, d5242 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5230:	7820      	ldrb	r0, [r4, #0]
   d5232:	4629      	mov	r1, r5
   d5234:	f7ff fda2 	bl	d4d7c <HAL_SPI_Set_Bit_Order>
        unlock();
   d5238:	7820      	ldrb	r0, [r4, #0]
    }
}
   d523a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d523e:	f7ff bfd2 	b.w	d51e6 <_ZN8SPIClass6unlockEv.isra.1>
   d5242:	bd38      	pop	{r3, r4, r5, pc}

000d5244 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5244:	b538      	push	{r3, r4, r5, lr}
   d5246:	4604      	mov	r4, r0
    if (!lock())
   d5248:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d524a:	460d      	mov	r5, r1
    if (!lock())
   d524c:	f7ff ffc8 	bl	d51e0 <_ZN8SPIClass4lockEv.isra.0>
   d5250:	b940      	cbnz	r0, d5264 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5252:	7820      	ldrb	r0, [r4, #0]
   d5254:	4629      	mov	r1, r5
   d5256:	f7ff fd99 	bl	d4d8c <HAL_SPI_Set_Data_Mode>
        unlock();
   d525a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d525c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5260:	f7ff bfc1 	b.w	d51e6 <_ZN8SPIClass6unlockEv.isra.1>
   d5264:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5268 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5268:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d526a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d526c:	6018      	str	r0, [r3, #0]
   d526e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5270:	6818      	ldr	r0, [r3, #0]
   d5272:	4288      	cmp	r0, r1
   d5274:	b2e5      	uxtb	r5, r4
   d5276:	d906      	bls.n	d5286 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5278:	3401      	adds	r4, #1
   d527a:	2c08      	cmp	r4, #8
   d527c:	d002      	beq.n	d5284 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d527e:	0840      	lsrs	r0, r0, #1
   d5280:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5282:	e7f5      	b.n	d5270 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5284:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5288:	5d5b      	ldrb	r3, [r3, r5]
   d528a:	7013      	strb	r3, [r2, #0]
   d528c:	bd30      	pop	{r4, r5, pc}
   d528e:	bf00      	nop
   d5290:	000d8574 	.word	0x000d8574

000d5294 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5298:	b088      	sub	sp, #32
    unsigned clock = 0;
   d529a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d529c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d529e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d52a0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d52a2:	460e      	mov	r6, r1
   d52a4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d52a6:	f7ff ff9b 	bl	d51e0 <_ZN8SPIClass4lockEv.isra.0>
   d52aa:	4605      	mov	r5, r0
   d52ac:	bb00      	cbnz	r0, d52f0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d52ae:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d52b2:	4601      	mov	r1, r0
   d52b4:	2214      	movs	r2, #20
   d52b6:	a803      	add	r0, sp, #12
   d52b8:	f002 fe3d 	bl	d7f36 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d52bc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d52be:	462a      	mov	r2, r5
   d52c0:	a903      	add	r1, sp, #12
   d52c2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d52c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d52c8:	f7ff fd88 	bl	d4ddc <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d52cc:	ab02      	add	r3, sp, #8
   d52ce:	f10d 0207 	add.w	r2, sp, #7
   d52d2:	fb07 f106 	mul.w	r1, r7, r6
   d52d6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d52d8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d52dc:	f7ff ffc4 	bl	d5268 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d52e0:	7820      	ldrb	r0, [r4, #0]
   d52e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d52e6:	f7ff fd59 	bl	d4d9c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d52ea:	7820      	ldrb	r0, [r4, #0]
   d52ec:	f7ff ff7b 	bl	d51e6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d52f0:	9802      	ldr	r0, [sp, #8]
   d52f2:	b008      	add	sp, #32
   d52f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d52f8 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d52f8:	b538      	push	{r3, r4, r5, lr}
   d52fa:	4604      	mov	r4, r0
    if (!lock())
   d52fc:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d52fe:	460d      	mov	r5, r1
    if (!lock())
   d5300:	f7ff ff6e 	bl	d51e0 <_ZN8SPIClass4lockEv.isra.0>
   d5304:	b9c8      	cbnz	r0, d533a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5306:	6861      	ldr	r1, [r4, #4]
   d5308:	b171      	cbz	r1, d5328 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d530a:	4b0c      	ldr	r3, [pc, #48]	; (d533c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d530c:	5cc2      	ldrb	r2, [r0, r3]
   d530e:	42aa      	cmp	r2, r5
   d5310:	d002      	beq.n	d5318 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5312:	3001      	adds	r0, #1
   d5314:	2808      	cmp	r0, #8
   d5316:	d1f9      	bne.n	d530c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5318:	3001      	adds	r0, #1
   d531a:	b2c0      	uxtb	r0, r0
   d531c:	40c1      	lsrs	r1, r0
   d531e:	2201      	movs	r2, #1
   d5320:	4620      	mov	r0, r4
   d5322:	f7ff ffb7 	bl	d5294 <_ZN8SPIClass13setClockSpeedEjj>
   d5326:	e003      	b.n	d5330 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5328:	4629      	mov	r1, r5
   d532a:	7820      	ldrb	r0, [r4, #0]
   d532c:	f7ff fd36 	bl	d4d9c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5330:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5336:	f7ff bf56 	b.w	d51e6 <_ZN8SPIClass6unlockEv.isra.1>
   d533a:	bd38      	pop	{r3, r4, r5, pc}
   d533c:	000d8574 	.word	0x000d8574

000d5340 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5340:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5342:	7800      	ldrb	r0, [r0, #0]
   d5344:	f7ff fd32 	bl	d4dac <HAL_SPI_Send_Receive_Data>
}
   d5348:	b2c0      	uxtb	r0, r0
   d534a:	bd08      	pop	{r3, pc}

000d534c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d534c:	7800      	ldrb	r0, [r0, #0]
   d534e:	f7ff bd3d 	b.w	d4dcc <HAL_SPI_Is_Enabled>

000d5352 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5352:	b510      	push	{r4, lr}
   d5354:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5356:	6800      	ldr	r0, [r0, #0]
   d5358:	b118      	cbz	r0, d5362 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d535a:	f7ff fef3 	bl	d5144 <free>
            wakeupSource_ = nullptr;
   d535e:	2300      	movs	r3, #0
   d5360:	6023      	str	r3, [r4, #0]
   d5362:	bd10      	pop	{r4, pc}

000d5364 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5364:	b510      	push	{r4, lr}
   d5366:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5368:	f7ff fff3 	bl	d5352 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d536c:	4620      	mov	r0, r4
   d536e:	bd10      	pop	{r4, pc}

000d5370 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5370:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5372:	4c09      	ldr	r4, [pc, #36]	; (d5398 <_GLOBAL__sub_I_System+0x28>)
   d5374:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5376:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d537a:	6020      	str	r0, [r4, #0]
   d537c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d537e:	71a0      	strb	r0, [r4, #6]
   d5380:	8120      	strh	r0, [r4, #8]
   d5382:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5384:	f7ff fe5a 	bl	d503c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5388:	4620      	mov	r0, r4
   d538a:	4a04      	ldr	r2, [pc, #16]	; (d539c <_GLOBAL__sub_I_System+0x2c>)
   d538c:	4904      	ldr	r1, [pc, #16]	; (d53a0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5392:	f000 bdaf 	b.w	d5ef4 <__aeabi_atexit>
   d5396:	bf00      	nop
   d5398:	2003e3e4 	.word	0x2003e3e4
   d539c:	2003e398 	.word	0x2003e398
   d53a0:	000d5365 	.word	0x000d5365

000d53a4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d53a4:	b510      	push	{r4, lr}
   d53a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53a8:	6800      	ldr	r0, [r0, #0]
   d53aa:	b108      	cbz	r0, d53b0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d53ac:	f7ff fd66 	bl	d4e7c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d53b0:	4620      	mov	r0, r4
   d53b2:	bd10      	pop	{r4, pc}

000d53b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53b4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53b6:	4c06      	ldr	r4, [pc, #24]	; (d53d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d53b8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d53ba:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53bc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d53be:	f7ff fd55 	bl	d4e6c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53c2:	4620      	mov	r0, r4
   d53c4:	4a03      	ldr	r2, [pc, #12]	; (d53d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d53c6:	4904      	ldr	r1, [pc, #16]	; (d53d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53cc:	f000 bd92 	b.w	d5ef4 <__aeabi_atexit>
   d53d0:	2003e3f0 	.word	0x2003e3f0
   d53d4:	2003e398 	.word	0x2003e398
   d53d8:	000d53a5 	.word	0x000d53a5

000d53dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53de:	4606      	mov	r6, r0
   d53e0:	460d      	mov	r5, r1
   d53e2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53e4:	2400      	movs	r4, #0
  while (size--) {
   d53e6:	42bd      	cmp	r5, r7
   d53e8:	d00c      	beq.n	d5404 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53ea:	6833      	ldr	r3, [r6, #0]
   d53ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53f0:	689b      	ldr	r3, [r3, #8]
   d53f2:	4630      	mov	r0, r6
   d53f4:	4798      	blx	r3
     if (chunk>=0)
   d53f6:	2800      	cmp	r0, #0
   d53f8:	db01      	blt.n	d53fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53fa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53fc:	e7f3      	b.n	d53e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53fe:	2c00      	cmp	r4, #0
   d5400:	bf08      	it	eq
   d5402:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5404:	4620      	mov	r0, r4
   d5406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5408 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5408:	b570      	push	{r4, r5, r6, lr}
   d540a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d540c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d540e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5410:	b149      	cbz	r1, d5426 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5412:	f002 fdc1 	bl	d7f98 <strlen>
   d5416:	682b      	ldr	r3, [r5, #0]
   d5418:	4602      	mov	r2, r0
   d541a:	4621      	mov	r1, r4
   d541c:	4628      	mov	r0, r5
   d541e:	68db      	ldr	r3, [r3, #12]
    }
   d5420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5424:	4718      	bx	r3
    }
   d5426:	bd70      	pop	{r4, r5, r6, pc}

000d5428 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5428:	6803      	ldr	r3, [r0, #0]
   d542a:	689b      	ldr	r3, [r3, #8]
   d542c:	4718      	bx	r3

000d542e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d542e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5430:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5432:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5434:	f7ff fff8 	bl	d5428 <_ZN5Print5printEc>
  n += print('\n');
   d5438:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d543a:	4604      	mov	r4, r0
  n += print('\n');
   d543c:	4628      	mov	r0, r5
   d543e:	f7ff fff3 	bl	d5428 <_ZN5Print5printEc>
  return n;
}
   d5442:	4420      	add	r0, r4
   d5444:	bd38      	pop	{r3, r4, r5, pc}

000d5446 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5446:	b530      	push	{r4, r5, lr}
   d5448:	b08b      	sub	sp, #44	; 0x2c
   d544a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d544c:	2100      	movs	r1, #0
   d544e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5452:	2a01      	cmp	r2, #1
   d5454:	bf98      	it	ls
   d5456:	220a      	movls	r2, #10
   d5458:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d545c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5460:	fb05 3312 	mls	r3, r5, r2, r3
   d5464:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5468:	2b09      	cmp	r3, #9
   d546a:	bf94      	ite	ls
   d546c:	3330      	addls	r3, #48	; 0x30
   d546e:	3337      	addhi	r3, #55	; 0x37
   d5470:	b2db      	uxtb	r3, r3
   d5472:	4621      	mov	r1, r4
   d5474:	f804 3901 	strb.w	r3, [r4], #-1
   d5478:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d547a:	2d00      	cmp	r5, #0
   d547c:	d1ee      	bne.n	d545c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d547e:	f7ff ffc3 	bl	d5408 <_ZN5Print5writeEPKc>
}
   d5482:	b00b      	add	sp, #44	; 0x2c
   d5484:	bd30      	pop	{r4, r5, pc}

000d5486 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5486:	b40c      	push	{r2, r3}
   d5488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d548c:	b087      	sub	sp, #28
   d548e:	af00      	add	r7, sp, #0
   d5490:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5494:	4605      	mov	r5, r0
   d5496:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d549a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d549c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d549e:	4623      	mov	r3, r4
   d54a0:	464a      	mov	r2, r9
   d54a2:	2114      	movs	r1, #20
   d54a4:	1d38      	adds	r0, r7, #4
   d54a6:	f7ff fe55 	bl	d5154 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d54aa:	2813      	cmp	r0, #19
   d54ac:	d805      	bhi.n	d54ba <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54ae:	1d39      	adds	r1, r7, #4
   d54b0:	4628      	mov	r0, r5
   d54b2:	f7ff ffa9 	bl	d5408 <_ZN5Print5writeEPKc>
   d54b6:	4604      	mov	r4, r0
   d54b8:	e013      	b.n	d54e2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d54ba:	f100 0308 	add.w	r3, r0, #8
   d54be:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d54c2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d54c4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d54c8:	1c41      	adds	r1, r0, #1
   d54ca:	4623      	mov	r3, r4
   d54cc:	464a      	mov	r2, r9
   d54ce:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d54d0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d54d2:	f7ff fe3f 	bl	d5154 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54d6:	4669      	mov	r1, sp
   d54d8:	4628      	mov	r0, r5
   d54da:	f7ff ff95 	bl	d5408 <_ZN5Print5writeEPKc>
   d54de:	4604      	mov	r4, r0
   d54e0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d54e2:	b11e      	cbz	r6, d54ec <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d54e4:	4628      	mov	r0, r5
   d54e6:	f7ff ffa2 	bl	d542e <_ZN5Print7printlnEv>
   d54ea:	4404      	add	r4, r0
    return n;
}
   d54ec:	4620      	mov	r0, r4
   d54ee:	371c      	adds	r7, #28
   d54f0:	46bd      	mov	sp, r7
   d54f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54f6:	b002      	add	sp, #8
   d54f8:	4770      	bx	lr
	...

000d54fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d54fc:	4b01      	ldr	r3, [pc, #4]	; (d5504 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d54fe:	4a02      	ldr	r2, [pc, #8]	; (d5508 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5500:	601a      	str	r2, [r3, #0]
   d5502:	4770      	bx	lr
   d5504:	2003e3f4 	.word	0x2003e3f4
   d5508:	000d85ef 	.word	0x000d85ef

000d550c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d550c:	4b02      	ldr	r3, [pc, #8]	; (d5518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	4b02      	ldr	r3, [pc, #8]	; (d551c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5512:	601a      	str	r2, [r3, #0]
   d5514:	4770      	bx	lr
   d5516:	bf00      	nop
   d5518:	2003e330 	.word	0x2003e330
   d551c:	2003e3f8 	.word	0x2003e3f8

000d5520 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d5520:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d5522:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d5524:	d007      	beq.n	d5536 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d5526:	9d03      	ldr	r5, [sp, #12]
   d5528:	1a44      	subs	r4, r0, r1
   d552a:	1aed      	subs	r5, r5, r3
   d552c:	436c      	muls	r4, r5
   d552e:	1a52      	subs	r2, r2, r1
   d5530:	fb94 f4f2 	sdiv	r4, r4, r2
   d5534:	18e0      	adds	r0, r4, r3
}
   d5536:	bd30      	pop	{r4, r5, pc}

000d5538 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5538:	2100      	movs	r1, #0
   d553a:	f7ff bd87 	b.w	d504c <system_delay_ms>

000d553e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d553e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5540:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5542:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5544:	b113      	cbz	r3, d554c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5546:	2203      	movs	r2, #3
   d5548:	4601      	mov	r1, r0
   d554a:	4798      	blx	r3
    }
   d554c:	4620      	mov	r0, r4
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5550:	b510      	push	{r4, lr}
   d5552:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5554:	f7ff fff3 	bl	d553e <_ZNSt14_Function_baseD1Ev>
   d5558:	4620      	mov	r0, r4
   d555a:	bd10      	pop	{r4, pc}

000d555c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d555c:	4803      	ldr	r0, [pc, #12]	; (d556c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d555e:	4a04      	ldr	r2, [pc, #16]	; (d5570 <_GLOBAL__sub_I_RGB+0x14>)
   d5560:	4904      	ldr	r1, [pc, #16]	; (d5574 <_GLOBAL__sub_I_RGB+0x18>)
   d5562:	2300      	movs	r3, #0
   d5564:	6083      	str	r3, [r0, #8]
   d5566:	f000 bcc5 	b.w	d5ef4 <__aeabi_atexit>
   d556a:	bf00      	nop
   d556c:	2003e3fc 	.word	0x2003e3fc
   d5570:	2003e398 	.word	0x2003e398
   d5574:	000d5551 	.word	0x000d5551

000d5578 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5578:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d557a:	4b0c      	ldr	r3, [pc, #48]	; (d55ac <serialEventRun+0x34>)
   d557c:	b133      	cbz	r3, d558c <serialEventRun+0x14>
   d557e:	f000 f957 	bl	d5830 <_Z16_fetch_usbserialv>
   d5582:	6803      	ldr	r3, [r0, #0]
   d5584:	691b      	ldr	r3, [r3, #16]
   d5586:	4798      	blx	r3
   d5588:	2800      	cmp	r0, #0
   d558a:	dc09      	bgt.n	d55a0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d558c:	4b08      	ldr	r3, [pc, #32]	; (d55b0 <serialEventRun+0x38>)
   d558e:	b163      	cbz	r3, d55aa <serialEventRun+0x32>
   d5590:	f000 f9d0 	bl	d5934 <_Z22__fetch_global_Serial1v>
   d5594:	6803      	ldr	r3, [r0, #0]
   d5596:	691b      	ldr	r3, [r3, #16]
   d5598:	4798      	blx	r3
   d559a:	2800      	cmp	r0, #0
   d559c:	dc03      	bgt.n	d55a6 <serialEventRun+0x2e>
   d559e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d55a0:	f3af 8000 	nop.w
   d55a4:	e7f2      	b.n	d558c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d55a6:	f3af 8000 	nop.w
   d55aa:	bd08      	pop	{r3, pc}
	...

000d55b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d55b4:	b508      	push	{r3, lr}
	serialEventRun();
   d55b6:	f7ff ffdf 	bl	d5578 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55ba:	f7ff fc37 	bl	d4e2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55be:	4b01      	ldr	r3, [pc, #4]	; (d55c4 <_post_loop+0x10>)
   d55c0:	6018      	str	r0, [r3, #0]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	2003e730 	.word	0x2003e730

000d55c8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d55c8:	4802      	ldr	r0, [pc, #8]	; (d55d4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d55ca:	4a03      	ldr	r2, [pc, #12]	; (d55d8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d55cc:	4903      	ldr	r1, [pc, #12]	; (d55dc <_Z33system_initialize_user_backup_ramv+0x14>)
   d55ce:	1a12      	subs	r2, r2, r0
   d55d0:	f002 bca6 	b.w	d7f20 <memcpy>
   d55d4:	2003f400 	.word	0x2003f400
   d55d8:	2003f404 	.word	0x2003f404
   d55dc:	000d8a50 	.word	0x000d8a50

000d55e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55e2:	2300      	movs	r3, #0
   d55e4:	9300      	str	r3, [sp, #0]
   d55e6:	461a      	mov	r2, r3
   d55e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55ec:	f7ff fd40 	bl	d5070 <system_ctrl_set_result>
}
   d55f0:	b003      	add	sp, #12
   d55f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55fa:	8843      	ldrh	r3, [r0, #2]
   d55fc:	2b0a      	cmp	r3, #10
   d55fe:	d008      	beq.n	d5612 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5600:	2b50      	cmp	r3, #80	; 0x50
   d5602:	d109      	bne.n	d5618 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5604:	4b09      	ldr	r3, [pc, #36]	; (d562c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5606:	681b      	ldr	r3, [r3, #0]
   d5608:	b13b      	cbz	r3, d561a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d560a:	b003      	add	sp, #12
   d560c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5610:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5612:	f7ff ffe5 	bl	d55e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5616:	e006      	b.n	d5626 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5618:	2300      	movs	r3, #0
   d561a:	9300      	str	r3, [sp, #0]
   d561c:	461a      	mov	r2, r3
   d561e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5622:	f7ff fd25 	bl	d5070 <system_ctrl_set_result>
        break;
    }
}
   d5626:	b003      	add	sp, #12
   d5628:	f85d fb04 	ldr.w	pc, [sp], #4
   d562c:	2003e40c 	.word	0x2003e40c

000d5630 <module_user_init_hook>:

void module_user_init_hook()
{
   d5630:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5632:	4c10      	ldr	r4, [pc, #64]	; (d5674 <module_user_init_hook+0x44>)
   d5634:	4d10      	ldr	r5, [pc, #64]	; (d5678 <module_user_init_hook+0x48>)
   d5636:	6823      	ldr	r3, [r4, #0]
   d5638:	42ab      	cmp	r3, r5
   d563a:	4b10      	ldr	r3, [pc, #64]	; (d567c <module_user_init_hook+0x4c>)
   d563c:	bf0c      	ite	eq
   d563e:	2201      	moveq	r2, #1
   d5640:	2200      	movne	r2, #0
   d5642:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5644:	d002      	beq.n	d564c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5646:	f7ff ffbf 	bl	d55c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d564a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d564c:	f7ff fbde 	bl	d4e0c <HAL_RNG_GetRandomNumber>
   d5650:	4604      	mov	r4, r0
    srand(seed);
   d5652:	f002 fc79 	bl	d7f48 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5656:	4b0a      	ldr	r3, [pc, #40]	; (d5680 <module_user_init_hook+0x50>)
   d5658:	b113      	cbz	r3, d5660 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d565a:	4620      	mov	r0, r4
   d565c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5660:	2100      	movs	r1, #0
   d5662:	4807      	ldr	r0, [pc, #28]	; (d5680 <module_user_init_hook+0x50>)
   d5664:	f7ff fd5e 	bl	d5124 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5668:	2100      	movs	r1, #0
   d566a:	4806      	ldr	r0, [pc, #24]	; (d5684 <module_user_init_hook+0x54>)
}
   d566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5670:	f7ff bcf4 	b.w	d505c <system_ctrl_set_app_request_handler>
   d5674:	2003f400 	.word	0x2003f400
   d5678:	9a271c1e 	.word	0x9a271c1e
   d567c:	2003e410 	.word	0x2003e410
   d5680:	00000000 	.word	0x00000000
   d5684:	000d55f9 	.word	0x000d55f9

000d5688 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5688:	4770      	bx	lr

000d568a <_ZN9IPAddressD0Ev>:
   d568a:	b510      	push	{r4, lr}
   d568c:	2118      	movs	r1, #24
   d568e:	4604      	mov	r4, r0
   d5690:	f000 fc3e 	bl	d5f10 <_ZdlPvj>
   d5694:	4620      	mov	r0, r4
   d5696:	bd10      	pop	{r4, pc}

000d5698 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5698:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d569a:	7d03      	ldrb	r3, [r0, #20]
   d569c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d569e:	b08d      	sub	sp, #52	; 0x34
   d56a0:	460e      	mov	r6, r1
   d56a2:	f100 0704 	add.w	r7, r0, #4
   d56a6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d56aa:	d002      	beq.n	d56b2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d56ac:	f100 0508 	add.w	r5, r0, #8
   d56b0:	e018      	b.n	d56e4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56b2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56b4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56b6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56ba:	232f      	movs	r3, #47	; 0x2f
   d56bc:	462a      	mov	r2, r5
   d56be:	200a      	movs	r0, #10
   d56c0:	f7ff fbe4 	bl	d4e8c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56c4:	4628      	mov	r0, r5
   d56c6:	f002 fc67 	bl	d7f98 <strlen>
   d56ca:	6833      	ldr	r3, [r6, #0]
   d56cc:	4602      	mov	r2, r0
   d56ce:	68db      	ldr	r3, [r3, #12]
   d56d0:	4629      	mov	r1, r5
   d56d2:	4630      	mov	r0, r6
   d56d4:	4798      	blx	r3
   d56d6:	e00f      	b.n	d56f8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56d8:	b124      	cbz	r4, d56e4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56da:	212e      	movs	r1, #46	; 0x2e
   d56dc:	4630      	mov	r0, r6
   d56de:	f7ff fea3 	bl	d5428 <_ZN5Print5printEc>
   d56e2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d56e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56e8:	220a      	movs	r2, #10
   d56ea:	4630      	mov	r0, r6
   d56ec:	f7ff feab 	bl	d5446 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56f0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56f4:	d1f0      	bne.n	d56d8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56f6:	4620      	mov	r0, r4
    }
    return n;
}
   d56f8:	b00d      	add	sp, #52	; 0x34
   d56fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56fc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d56fc:	b510      	push	{r4, lr}
   d56fe:	4b05      	ldr	r3, [pc, #20]	; (d5714 <_ZN9IPAddressC1Ev+0x18>)
   d5700:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5702:	2211      	movs	r2, #17
   d5704:	f840 3b04 	str.w	r3, [r0], #4
   d5708:	2100      	movs	r1, #0
   d570a:	f002 fc14 	bl	d7f36 <memset>
{
    clear();
}
   d570e:	4620      	mov	r0, r4
   d5710:	bd10      	pop	{r4, pc}
   d5712:	bf00      	nop
   d5714:	000d8690 	.word	0x000d8690

000d5718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5718:	4603      	mov	r3, r0
   d571a:	4a07      	ldr	r2, [pc, #28]	; (d5738 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d571c:	b510      	push	{r4, lr}
   d571e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5722:	f101 0210 	add.w	r2, r1, #16
   d5726:	f851 4b04 	ldr.w	r4, [r1], #4
   d572a:	f843 4b04 	str.w	r4, [r3], #4
   d572e:	4291      	cmp	r1, r2
   d5730:	d1f9      	bne.n	d5726 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5732:	780a      	ldrb	r2, [r1, #0]
   d5734:	701a      	strb	r2, [r3, #0]
}
   d5736:	bd10      	pop	{r4, pc}
   d5738:	000d8690 	.word	0x000d8690

000d573c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d573c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d573e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5742:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5746:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d574a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d574e:	2304      	movs	r3, #4
   d5750:	6041      	str	r1, [r0, #4]
   d5752:	7503      	strb	r3, [r0, #20]
   d5754:	bd10      	pop	{r4, pc}

000d5756 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5756:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5758:	780d      	ldrb	r5, [r1, #0]
   d575a:	788b      	ldrb	r3, [r1, #2]
   d575c:	784a      	ldrb	r2, [r1, #1]
   d575e:	78c9      	ldrb	r1, [r1, #3]
   d5760:	9100      	str	r1, [sp, #0]
   d5762:	4629      	mov	r1, r5
   d5764:	f7ff ffea 	bl	d573c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5768:	b003      	add	sp, #12
   d576a:	bd30      	pop	{r4, r5, pc}

000d576c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d576c:	7441      	strb	r1, [r0, #17]
   d576e:	4770      	bx	lr

000d5770 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5770:	4770      	bx	lr

000d5772 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5772:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5774:	2100      	movs	r1, #0
   d5776:	7c00      	ldrb	r0, [r0, #16]
   d5778:	f7ff fc40 	bl	d4ffc <HAL_USB_USART_Receive_Data>
}
   d577c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5780:	bf28      	it	cs
   d5782:	f04f 30ff 	movcs.w	r0, #4294967295
   d5786:	bd08      	pop	{r3, pc}

000d5788 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5788:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d578a:	2101      	movs	r1, #1
   d578c:	7c00      	ldrb	r0, [r0, #16]
   d578e:	f7ff fc35 	bl	d4ffc <HAL_USB_USART_Receive_Data>
}
   d5792:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5796:	bf28      	it	cs
   d5798:	f04f 30ff 	movcs.w	r0, #4294967295
   d579c:	bd08      	pop	{r3, pc}

000d579e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d579e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d57a0:	7c00      	ldrb	r0, [r0, #16]
   d57a2:	f7ff fc23 	bl	d4fec <HAL_USB_USART_Available_Data_For_Write>
}
   d57a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57aa:	bd08      	pop	{r3, pc}

000d57ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d57ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d57ae:	7c00      	ldrb	r0, [r0, #16]
   d57b0:	f7ff fc14 	bl	d4fdc <HAL_USB_USART_Available_Data>
}
   d57b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57b8:	bd08      	pop	{r3, pc}

000d57ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d57ba:	7c00      	ldrb	r0, [r0, #16]
   d57bc:	f7ff bc2e 	b.w	d501c <HAL_USB_USART_Flush_Data>

000d57c0 <_ZN9USBSerialD0Ev>:
   d57c0:	b510      	push	{r4, lr}
   d57c2:	2114      	movs	r1, #20
   d57c4:	4604      	mov	r4, r0
   d57c6:	f000 fba3 	bl	d5f10 <_ZdlPvj>
   d57ca:	4620      	mov	r0, r4
   d57cc:	bd10      	pop	{r4, pc}

000d57ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57ce:	b538      	push	{r3, r4, r5, lr}
   d57d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57d6:	f7ff fc09 	bl	d4fec <HAL_USB_USART_Available_Data_For_Write>
   d57da:	2800      	cmp	r0, #0
   d57dc:	dc01      	bgt.n	d57e2 <_ZN9USBSerial5writeEh+0x14>
   d57de:	7c60      	ldrb	r0, [r4, #17]
   d57e0:	b128      	cbz	r0, d57ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d57e2:	4629      	mov	r1, r5
   d57e4:	7c20      	ldrb	r0, [r4, #16]
   d57e6:	f7ff fc11 	bl	d500c <HAL_USB_USART_Send_Data>
   d57ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d57ee:	bd38      	pop	{r3, r4, r5, pc}

000d57f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57f4:	2300      	movs	r3, #0
   d57f6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57fc:	60a3      	str	r3, [r4, #8]
   d57fe:	4b05      	ldr	r3, [pc, #20]	; (d5814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5800:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5802:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5804:	4608      	mov	r0, r1
{
  _serial = serial;
   d5806:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5808:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d580a:	4611      	mov	r1, r2
   d580c:	f7ff fbd6 	bl	d4fbc <HAL_USB_USART_Init>
}
   d5810:	4620      	mov	r0, r4
   d5812:	bd10      	pop	{r4, pc}
   d5814:	000d86a4 	.word	0x000d86a4

000d5818 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5818:	2200      	movs	r2, #0
   d581a:	7c00      	ldrb	r0, [r0, #16]
   d581c:	f7ff bbd6 	b.w	d4fcc <HAL_USB_USART_Begin>

000d5820 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5820:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5822:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5824:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5826:	2100      	movs	r1, #0
   d5828:	f002 fb85 	bl	d7f36 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d582c:	4620      	mov	r0, r4
   d582e:	bd10      	pop	{r4, pc}

000d5830 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5830:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5832:	4d0e      	ldr	r5, [pc, #56]	; (d586c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5834:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5836:	a801      	add	r0, sp, #4
   d5838:	f7ff fff2 	bl	d5820 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d583c:	6829      	ldr	r1, [r5, #0]
   d583e:	f011 0401 	ands.w	r4, r1, #1
   d5842:	d110      	bne.n	d5866 <_Z16_fetch_usbserialv+0x36>
   d5844:	4628      	mov	r0, r5
   d5846:	f7fe fc37 	bl	d40b8 <__cxa_guard_acquire>
   d584a:	b160      	cbz	r0, d5866 <_Z16_fetch_usbserialv+0x36>
   d584c:	aa01      	add	r2, sp, #4
   d584e:	4621      	mov	r1, r4
   d5850:	4807      	ldr	r0, [pc, #28]	; (d5870 <_Z16_fetch_usbserialv+0x40>)
   d5852:	f7ff ffcd 	bl	d57f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5856:	4628      	mov	r0, r5
   d5858:	f7fe fc33 	bl	d40c2 <__cxa_guard_release>
   d585c:	4a05      	ldr	r2, [pc, #20]	; (d5874 <_Z16_fetch_usbserialv+0x44>)
   d585e:	4906      	ldr	r1, [pc, #24]	; (d5878 <_Z16_fetch_usbserialv+0x48>)
   d5860:	4803      	ldr	r0, [pc, #12]	; (d5870 <_Z16_fetch_usbserialv+0x40>)
   d5862:	f000 fb47 	bl	d5ef4 <__aeabi_atexit>
	return _usbserial;
}
   d5866:	4802      	ldr	r0, [pc, #8]	; (d5870 <_Z16_fetch_usbserialv+0x40>)
   d5868:	b007      	add	sp, #28
   d586a:	bd30      	pop	{r4, r5, pc}
   d586c:	2003e414 	.word	0x2003e414
   d5870:	2003e418 	.word	0x2003e418
   d5874:	2003e398 	.word	0x2003e398
   d5878:	000d5771 	.word	0x000d5771

000d587c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d587c:	4770      	bx	lr

000d587e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d587e:	7441      	strb	r1, [r0, #17]
   d5880:	4770      	bx	lr

000d5882 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5882:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5884:	7c00      	ldrb	r0, [r0, #16]
   d5886:	f7ff fb41 	bl	d4f0c <HAL_USART_Available_Data_For_Write>
}
   d588a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d588e:	bd08      	pop	{r3, pc}

000d5890 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5890:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5892:	7c00      	ldrb	r0, [r0, #16]
   d5894:	f7ff fb12 	bl	d4ebc <HAL_USART_Available_Data>
}
   d5898:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d589c:	bd08      	pop	{r3, pc}

000d589e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d589e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d58a0:	7c00      	ldrb	r0, [r0, #16]
   d58a2:	f7ff fb1b 	bl	d4edc <HAL_USART_Peek_Data>
}
   d58a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58aa:	bf28      	it	cs
   d58ac:	f04f 30ff 	movcs.w	r0, #4294967295
   d58b0:	bd08      	pop	{r3, pc}

000d58b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d58b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d58b4:	7c00      	ldrb	r0, [r0, #16]
   d58b6:	f7ff fb09 	bl	d4ecc <HAL_USART_Read_Data>
}
   d58ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58be:	bf28      	it	cs
   d58c0:	f04f 30ff 	movcs.w	r0, #4294967295
   d58c4:	bd08      	pop	{r3, pc}

000d58c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d58c6:	7c00      	ldrb	r0, [r0, #16]
   d58c8:	f7ff bb10 	b.w	d4eec <HAL_USART_Flush_Data>

000d58cc <_ZN11USARTSerialD0Ev>:
   d58cc:	b510      	push	{r4, lr}
   d58ce:	2114      	movs	r1, #20
   d58d0:	4604      	mov	r4, r0
   d58d2:	f000 fb1d 	bl	d5f10 <_ZdlPvj>
   d58d6:	4620      	mov	r0, r4
   d58d8:	bd10      	pop	{r4, pc}

000d58da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d58da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d58de:	4604      	mov	r4, r0
   d58e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58e2:	b925      	cbnz	r5, d58ee <_ZN11USARTSerial5writeEh+0x14>
   d58e4:	7c00      	ldrb	r0, [r0, #16]
   d58e6:	f7ff fb11 	bl	d4f0c <HAL_USART_Available_Data_For_Write>
   d58ea:	2800      	cmp	r0, #0
   d58ec:	dd05      	ble.n	d58fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58ee:	4631      	mov	r1, r6
   d58f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d58f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58f6:	f7ff bad9 	b.w	d4eac <HAL_USART_Write_Data>
  }
  return 0;
}
   d58fa:	4628      	mov	r0, r5
   d58fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5900 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5900:	b510      	push	{r4, lr}
   d5902:	4604      	mov	r4, r0
   d5904:	4608      	mov	r0, r1
   d5906:	4611      	mov	r1, r2
   d5908:	2200      	movs	r2, #0
   d590a:	6062      	str	r2, [r4, #4]
   d590c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5910:	60a2      	str	r2, [r4, #8]
   d5912:	4a05      	ldr	r2, [pc, #20]	; (d5928 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5914:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5916:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5918:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d591a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d591c:	461a      	mov	r2, r3
   d591e:	f7ff fabd 	bl	d4e9c <HAL_USART_Init>
}
   d5922:	4620      	mov	r0, r4
   d5924:	bd10      	pop	{r4, pc}
   d5926:	bf00      	nop
   d5928:	000d86d4 	.word	0x000d86d4

000d592c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d592c:	7c00      	ldrb	r0, [r0, #16]
   d592e:	f7ff bae5 	b.w	d4efc <HAL_USART_Is_Enabled>
	...

000d5934 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5934:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5936:	4d0c      	ldr	r5, [pc, #48]	; (d5968 <_Z22__fetch_global_Serial1v+0x34>)
   d5938:	6829      	ldr	r1, [r5, #0]
   d593a:	f011 0401 	ands.w	r4, r1, #1
   d593e:	d111      	bne.n	d5964 <_Z22__fetch_global_Serial1v+0x30>
   d5940:	4628      	mov	r0, r5
   d5942:	f7fe fbb9 	bl	d40b8 <__cxa_guard_acquire>
   d5946:	b168      	cbz	r0, d5964 <_Z22__fetch_global_Serial1v+0x30>
   d5948:	4a08      	ldr	r2, [pc, #32]	; (d596c <_Z22__fetch_global_Serial1v+0x38>)
   d594a:	4b09      	ldr	r3, [pc, #36]	; (d5970 <_Z22__fetch_global_Serial1v+0x3c>)
   d594c:	4809      	ldr	r0, [pc, #36]	; (d5974 <_Z22__fetch_global_Serial1v+0x40>)
   d594e:	4621      	mov	r1, r4
   d5950:	f7ff ffd6 	bl	d5900 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5954:	4628      	mov	r0, r5
   d5956:	f7fe fbb4 	bl	d40c2 <__cxa_guard_release>
   d595a:	4a07      	ldr	r2, [pc, #28]	; (d5978 <_Z22__fetch_global_Serial1v+0x44>)
   d595c:	4907      	ldr	r1, [pc, #28]	; (d597c <_Z22__fetch_global_Serial1v+0x48>)
   d595e:	4805      	ldr	r0, [pc, #20]	; (d5974 <_Z22__fetch_global_Serial1v+0x40>)
   d5960:	f000 fac8 	bl	d5ef4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5964:	4803      	ldr	r0, [pc, #12]	; (d5974 <_Z22__fetch_global_Serial1v+0x40>)
   d5966:	bd38      	pop	{r3, r4, r5, pc}
   d5968:	2003e4c4 	.word	0x2003e4c4
   d596c:	2003e4c8 	.word	0x2003e4c8
   d5970:	2003e440 	.word	0x2003e440
   d5974:	2003e42c 	.word	0x2003e42c
   d5978:	2003e398 	.word	0x2003e398
   d597c:	000d587d 	.word	0x000d587d

000d5980 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5980:	4770      	bx	lr

000d5982 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5984:	4606      	mov	r6, r0
   d5986:	4615      	mov	r5, r2
   d5988:	460c      	mov	r4, r1
   d598a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d598c:	42bc      	cmp	r4, r7
   d598e:	d006      	beq.n	d599e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5990:	6833      	ldr	r3, [r6, #0]
   d5992:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	4630      	mov	r0, r6
   d599a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d599c:	e7f6      	b.n	d598c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d599e:	4628      	mov	r0, r5
   d59a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59a2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d59a2:	2200      	movs	r2, #0
   d59a4:	7c00      	ldrb	r0, [r0, #16]
   d59a6:	f7ff bad1 	b.w	d4f4c <HAL_I2C_Write_Data>

000d59aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d59aa:	2100      	movs	r1, #0
   d59ac:	7c00      	ldrb	r0, [r0, #16]
   d59ae:	f7ff bad5 	b.w	d4f5c <HAL_I2C_Available_Data>

000d59b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d59b2:	2100      	movs	r1, #0
   d59b4:	7c00      	ldrb	r0, [r0, #16]
   d59b6:	f7ff bad9 	b.w	d4f6c <HAL_I2C_Read_Data>

000d59ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d59ba:	2100      	movs	r1, #0
   d59bc:	7c00      	ldrb	r0, [r0, #16]
   d59be:	f7ff badd 	b.w	d4f7c <HAL_I2C_Peek_Data>

000d59c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d59c2:	2100      	movs	r1, #0
   d59c4:	7c00      	ldrb	r0, [r0, #16]
   d59c6:	f7ff bae1 	b.w	d4f8c <HAL_I2C_Flush_Data>

000d59ca <_ZN7TwoWireD0Ev>:
   d59ca:	b510      	push	{r4, lr}
   d59cc:	2114      	movs	r1, #20
   d59ce:	4604      	mov	r4, r0
   d59d0:	f000 fa9e 	bl	d5f10 <_ZdlPvj>
   d59d4:	4620      	mov	r0, r4
   d59d6:	bd10      	pop	{r4, pc}

000d59d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d59d8:	b510      	push	{r4, lr}
   d59da:	4604      	mov	r4, r0
   d59dc:	2300      	movs	r3, #0
   d59de:	6063      	str	r3, [r4, #4]
   d59e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59e4:	60a3      	str	r3, [r4, #8]
   d59e6:	4b04      	ldr	r3, [pc, #16]	; (d59f8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d59e8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d59ea:	4608      	mov	r0, r1
   d59ec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d59ee:	4611      	mov	r1, r2
   d59f0:	f7ff fadc 	bl	d4fac <HAL_I2C_Init>
}
   d59f4:	4620      	mov	r0, r4
   d59f6:	bd10      	pop	{r4, pc}
   d59f8:	000d8704 	.word	0x000d8704

000d59fc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d59fc:	2300      	movs	r3, #0
   d59fe:	461a      	mov	r2, r3
   d5a00:	4619      	mov	r1, r3
   d5a02:	7c00      	ldrb	r0, [r0, #16]
   d5a04:	f7ff ba8a 	b.w	d4f1c <HAL_I2C_Begin>

000d5a08 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5a08:	2200      	movs	r2, #0
   d5a0a:	7c00      	ldrb	r0, [r0, #16]
   d5a0c:	f7ff ba8e 	b.w	d4f2c <HAL_I2C_Begin_Transmission>

000d5a10 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5a10:	b2c9      	uxtb	r1, r1
   d5a12:	f7ff bff9 	b.w	d5a08 <_ZN7TwoWire17beginTransmissionEh>

000d5a16 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5a16:	2200      	movs	r2, #0
   d5a18:	7c00      	ldrb	r0, [r0, #16]
   d5a1a:	f7ff ba8f 	b.w	d4f3c <HAL_I2C_End_Transmission>

000d5a1e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5a1e:	2101      	movs	r1, #1
   d5a20:	f7ff bff9 	b.w	d5a16 <_ZN7TwoWire15endTransmissionEh>

000d5a24 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5a24:	2100      	movs	r1, #0
   d5a26:	7c00      	ldrb	r0, [r0, #16]
   d5a28:	f7ff bab8 	b.w	d4f9c <HAL_I2C_Is_Enabled>

000d5a2c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a2c:	2200      	movs	r2, #0
   d5a2e:	4611      	mov	r1, r2
   d5a30:	6840      	ldr	r0, [r0, #4]
   d5a32:	f7ff bb5f 	b.w	d50f4 <network_listening>

000d5a36 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a36:	2200      	movs	r2, #0
   d5a38:	4611      	mov	r1, r2
   d5a3a:	6840      	ldr	r0, [r0, #4]
   d5a3c:	f7ff bb6a 	b.w	d5114 <network_get_listen_timeout>

000d5a40 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a40:	2200      	movs	r2, #0
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	f7ff bb5e 	b.w	d5104 <network_set_listen_timeout>

000d5a48 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a48:	2200      	movs	r2, #0
   d5a4a:	f081 0101 	eor.w	r1, r1, #1
   d5a4e:	6840      	ldr	r0, [r0, #4]
   d5a50:	f7ff bb48 	b.w	d50e4 <network_listen>

000d5a54 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5a54:	2300      	movs	r3, #0
   d5a56:	461a      	mov	r2, r3
   d5a58:	2101      	movs	r1, #1
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	f7ff bb3a 	b.w	d50d4 <network_off>

000d5a60 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a60:	2300      	movs	r3, #0
   d5a62:	461a      	mov	r2, r3
   d5a64:	4619      	mov	r1, r3
   d5a66:	6840      	ldr	r0, [r0, #4]
   d5a68:	f7ff bb2c 	b.w	d50c4 <network_on>

000d5a6c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a6c:	2200      	movs	r2, #0
   d5a6e:	4611      	mov	r1, r2
   d5a70:	6840      	ldr	r0, [r0, #4]
   d5a72:	f7ff bb1f 	b.w	d50b4 <network_ready>

000d5a76 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a76:	2200      	movs	r2, #0
   d5a78:	4611      	mov	r1, r2
   d5a7a:	6840      	ldr	r0, [r0, #4]
   d5a7c:	f7ff bb0a 	b.w	d5094 <network_connecting>

000d5a80 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a80:	2200      	movs	r2, #0
   d5a82:	2102      	movs	r1, #2
   d5a84:	6840      	ldr	r0, [r0, #4]
   d5a86:	f7ff bb0d 	b.w	d50a4 <network_disconnect>

000d5a8a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a8a:	2300      	movs	r3, #0
   d5a8c:	461a      	mov	r2, r3
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	f7ff baf8 	b.w	d5084 <network_connect>

000d5a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5a94:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a96:	4605      	mov	r5, r0
   d5a98:	b188      	cbz	r0, d5abe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a9a:	6804      	ldr	r4, [r0, #0]
   d5a9c:	b14c      	cbz	r4, d5ab2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5a9e:	68a3      	ldr	r3, [r4, #8]
   d5aa0:	b11b      	cbz	r3, d5aaa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5aa2:	2203      	movs	r2, #3
   d5aa4:	4621      	mov	r1, r4
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5aaa:	2110      	movs	r1, #16
   d5aac:	4620      	mov	r0, r4
   d5aae:	f000 fa2f 	bl	d5f10 <_ZdlPvj>
   d5ab2:	4628      	mov	r0, r5
   d5ab4:	2114      	movs	r1, #20
      }
   d5ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5aba:	f000 ba29 	b.w	d5f10 <_ZdlPvj>
   d5abe:	bd38      	pop	{r3, r4, r5, pc}

000d5ac0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5ac0:	b110      	cbz	r0, d5ac8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	685b      	ldr	r3, [r3, #4]
   d5ac6:	4718      	bx	r3
   d5ac8:	4770      	bx	lr

000d5aca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5aca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5acc:	6803      	ldr	r3, [r0, #0]
   d5ace:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5ad0:	b1bb      	cbz	r3, d5b02 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5ad2:	6858      	ldr	r0, [r3, #4]
   d5ad4:	f7ff f9b2 	bl	d4e3c <os_thread_is_current>
   d5ad8:	b978      	cbnz	r0, d5afa <_ZN6ThreadD1Ev+0x30>
   d5ada:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5adc:	7c5a      	ldrb	r2, [r3, #17]
   d5ade:	b912      	cbnz	r2, d5ae6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5ae0:	6858      	ldr	r0, [r3, #4]
   d5ae2:	f7ff f9b3 	bl	d4e4c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5ae6:	6823      	ldr	r3, [r4, #0]
   d5ae8:	6858      	ldr	r0, [r3, #4]
   d5aea:	f7ff f9b7 	bl	d4e5c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5aee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5af0:	2300      	movs	r3, #0
   d5af2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5af4:	b128      	cbz	r0, d5b02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5af6:	f7ff ffcd 	bl	d5a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5afa:	6820      	ldr	r0, [r4, #0]
   d5afc:	b108      	cbz	r0, d5b02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5afe:	f7ff ffc9 	bl	d5a94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5b02:	4620      	mov	r0, r4
   d5b04:	bd10      	pop	{r4, pc}

000d5b06 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5b06:	b538      	push	{r3, r4, r5, lr}
   d5b08:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b0a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5b0e:	b108      	cbz	r0, d5b14 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b10:	f7fe fac5 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b14:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5b18:	b108      	cbz	r0, d5b1e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5b1a:	f7ff f9af 	bl	d4e7c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b1e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5b22:	b135      	cbz	r5, d5b32 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b24:	4628      	mov	r0, r5
   d5b26:	f7ff ffd0 	bl	d5aca <_ZN6ThreadD1Ev>
   d5b2a:	2104      	movs	r1, #4
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	f000 f9ef 	bl	d5f10 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b32:	6820      	ldr	r0, [r4, #0]
   d5b34:	b108      	cbz	r0, d5b3a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5b36:	f7ff ffc3 	bl	d5ac0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b40 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5b40:	b510      	push	{r4, lr}
   d5b42:	4b04      	ldr	r3, [pc, #16]	; (d5b54 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5b44:	4604      	mov	r4, r0
   d5b46:	f840 3b08 	str.w	r3, [r0], #8
   d5b4a:	f7ff ffdc 	bl	d5b06 <_ZN5spark11MeshPublishD1Ev>
   d5b4e:	4620      	mov	r0, r4
   d5b50:	bd10      	pop	{r4, pc}
   d5b52:	bf00      	nop
   d5b54:	000d872c 	.word	0x000d872c

000d5b58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b58:	b538      	push	{r3, r4, r5, lr}
   d5b5a:	4c0e      	ldr	r4, [pc, #56]	; (d5b94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5b5c:	4b0e      	ldr	r3, [pc, #56]	; (d5b98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5b5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b60:	2500      	movs	r5, #0
   d5b62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b68:	6063      	str	r3, [r4, #4]
   d5b6a:	60a5      	str	r5, [r4, #8]
   d5b6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b74:	f7ff f97a 	bl	d4e6c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b78:	4b08      	ldr	r3, [pc, #32]	; (d5b9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5b7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5b82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b84:	4620      	mov	r0, r4
   d5b86:	4a06      	ldr	r2, [pc, #24]	; (d5ba0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5b88:	4906      	ldr	r1, [pc, #24]	; (d5ba4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5b8e:	f000 b9b1 	b.w	d5ef4 <__aeabi_atexit>
   d5b92:	bf00      	nop
   d5b94:	2003e54c 	.word	0x2003e54c
   d5b98:	000d8794 	.word	0x000d8794
   d5b9c:	000d872c 	.word	0x000d872c
   d5ba0:	2003e398 	.word	0x2003e398
   d5ba4:	000d5b41 	.word	0x000d5b41

000d5ba8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ba8:	2200      	movs	r2, #0
   d5baa:	4611      	mov	r1, r2
   d5bac:	6840      	ldr	r0, [r0, #4]
   d5bae:	f7ff ba81 	b.w	d50b4 <network_ready>

000d5bb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bb2:	2200      	movs	r2, #0
   d5bb4:	4611      	mov	r1, r2
   d5bb6:	6840      	ldr	r0, [r0, #4]
   d5bb8:	f7ff ba9c 	b.w	d50f4 <network_listening>

000d5bbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bbc:	2200      	movs	r2, #0
   d5bbe:	4611      	mov	r1, r2
   d5bc0:	6840      	ldr	r0, [r0, #4]
   d5bc2:	f7ff baa7 	b.w	d5114 <network_get_listen_timeout>

000d5bc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bc6:	2200      	movs	r2, #0
   d5bc8:	6840      	ldr	r0, [r0, #4]
   d5bca:	f7ff ba9b 	b.w	d5104 <network_set_listen_timeout>

000d5bce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bce:	2200      	movs	r2, #0
   d5bd0:	f081 0101 	eor.w	r1, r1, #1
   d5bd4:	6840      	ldr	r0, [r0, #4]
   d5bd6:	f7ff ba85 	b.w	d50e4 <network_listen>

000d5bda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5bda:	2300      	movs	r3, #0
   d5bdc:	461a      	mov	r2, r3
   d5bde:	4619      	mov	r1, r3
   d5be0:	6840      	ldr	r0, [r0, #4]
   d5be2:	f7ff ba77 	b.w	d50d4 <network_off>

000d5be6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5be6:	2300      	movs	r3, #0
   d5be8:	461a      	mov	r2, r3
   d5bea:	4619      	mov	r1, r3
   d5bec:	6840      	ldr	r0, [r0, #4]
   d5bee:	f7ff ba69 	b.w	d50c4 <network_on>

000d5bf2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bf2:	2200      	movs	r2, #0
   d5bf4:	4611      	mov	r1, r2
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	f7ff ba4c 	b.w	d5094 <network_connecting>

000d5bfc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bfc:	2200      	movs	r2, #0
   d5bfe:	2102      	movs	r1, #2
   d5c00:	6840      	ldr	r0, [r0, #4]
   d5c02:	f7ff ba4f 	b.w	d50a4 <network_disconnect>

000d5c06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c06:	2300      	movs	r3, #0
   d5c08:	461a      	mov	r2, r3
   d5c0a:	6840      	ldr	r0, [r0, #4]
   d5c0c:	f7ff ba3a 	b.w	d5084 <network_connect>

000d5c10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5c10:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5c12:	2204      	movs	r2, #4
   d5c14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5c16:	4a02      	ldr	r2, [pc, #8]	; (d5c20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5c18:	601a      	str	r2, [r3, #0]
   d5c1a:	4770      	bx	lr
   d5c1c:	2003e720 	.word	0x2003e720
   d5c20:	000d8760 	.word	0x000d8760

000d5c24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c24:	2300      	movs	r3, #0
   d5c26:	461a      	mov	r2, r3
   d5c28:	6840      	ldr	r0, [r0, #4]
   d5c2a:	f7ff ba2b 	b.w	d5084 <network_connect>

000d5c2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c2e:	2200      	movs	r2, #0
   d5c30:	2102      	movs	r1, #2
   d5c32:	6840      	ldr	r0, [r0, #4]
   d5c34:	f7ff ba36 	b.w	d50a4 <network_disconnect>

000d5c38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c38:	2200      	movs	r2, #0
   d5c3a:	4611      	mov	r1, r2
   d5c3c:	6840      	ldr	r0, [r0, #4]
   d5c3e:	f7ff ba29 	b.w	d5094 <network_connecting>

000d5c42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c42:	2200      	movs	r2, #0
   d5c44:	4611      	mov	r1, r2
   d5c46:	6840      	ldr	r0, [r0, #4]
   d5c48:	f7ff ba34 	b.w	d50b4 <network_ready>

000d5c4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	461a      	mov	r2, r3
   d5c50:	4619      	mov	r1, r3
   d5c52:	6840      	ldr	r0, [r0, #4]
   d5c54:	f7ff ba36 	b.w	d50c4 <network_on>

000d5c58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c58:	2300      	movs	r3, #0
   d5c5a:	461a      	mov	r2, r3
   d5c5c:	4619      	mov	r1, r3
   d5c5e:	6840      	ldr	r0, [r0, #4]
   d5c60:	f7ff ba38 	b.w	d50d4 <network_off>

000d5c64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c64:	2200      	movs	r2, #0
   d5c66:	f081 0101 	eor.w	r1, r1, #1
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	f7ff ba3a 	b.w	d50e4 <network_listen>

000d5c70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c70:	2200      	movs	r2, #0
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	f7ff ba46 	b.w	d5104 <network_set_listen_timeout>

000d5c78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	4611      	mov	r1, r2
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	f7ff ba49 	b.w	d5114 <network_get_listen_timeout>

000d5c82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c82:	2200      	movs	r2, #0
   d5c84:	4611      	mov	r1, r2
   d5c86:	6840      	ldr	r0, [r0, #4]
   d5c88:	f7ff ba34 	b.w	d50f4 <network_listening>

000d5c8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c90:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c92:	b095      	sub	sp, #84	; 0x54
   d5c94:	4616      	mov	r6, r2
   d5c96:	460d      	mov	r5, r1
   d5c98:	4607      	mov	r7, r0
    IPAddress addr;
   d5c9a:	f7ff fd2f 	bl	d56fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5c9e:	4621      	mov	r1, r4
   d5ca0:	2220      	movs	r2, #32
   d5ca2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ca4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ca6:	f002 f946 	bl	d7f36 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5caa:	2340      	movs	r3, #64	; 0x40
   d5cac:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cae:	4621      	mov	r1, r4
   d5cb0:	466b      	mov	r3, sp
   d5cb2:	aa0c      	add	r2, sp, #48	; 0x30
   d5cb4:	4630      	mov	r0, r6
   d5cb6:	f7ff f831 	bl	d4d1c <netdb_getaddrinfo>
    if (!r) {
   d5cba:	4604      	mov	r4, r0
   d5cbc:	2800      	cmp	r0, #0
   d5cbe:	d144      	bne.n	d5d4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cc0:	4602      	mov	r2, r0
   d5cc2:	2101      	movs	r1, #1
   d5cc4:	6868      	ldr	r0, [r5, #4]
   d5cc6:	f7ff f9f5 	bl	d50b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cca:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ccc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cce:	4622      	mov	r2, r4
   d5cd0:	6868      	ldr	r0, [r5, #4]
   d5cd2:	f7ff f9ef 	bl	d50b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cd6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cd8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5cda:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cdc:	2e00      	cmp	r6, #0
   d5cde:	d034      	beq.n	d5d4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ce0:	2900      	cmp	r1, #0
   d5ce2:	d132      	bne.n	d5d4a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ce4:	6873      	ldr	r3, [r6, #4]
   d5ce6:	2b02      	cmp	r3, #2
   d5ce8:	d002      	beq.n	d5cf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5cea:	2b0a      	cmp	r3, #10
   d5cec:	d009      	beq.n	d5d02 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5cee:	e02a      	b.n	d5d46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5cf0:	f1b8 0f00 	cmp.w	r8, #0
   d5cf4:	d027      	beq.n	d5d46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5cf6:	6971      	ldr	r1, [r6, #20]
   d5cf8:	4638      	mov	r0, r7
   d5cfa:	3104      	adds	r1, #4
   d5cfc:	f7ff fd2b 	bl	d5756 <_ZN9IPAddressaSEPKh>
   d5d00:	e020      	b.n	d5d44 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d02:	f1b9 0f00 	cmp.w	r9, #0
   d5d06:	d01e      	beq.n	d5d46 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d08:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d0a:	2211      	movs	r2, #17
   d5d0c:	a801      	add	r0, sp, #4
   d5d0e:	f002 f912 	bl	d7f36 <memset>
                    a.v = 6;
   d5d12:	2306      	movs	r3, #6
   d5d14:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d18:	ad01      	add	r5, sp, #4
   d5d1a:	f104 0308 	add.w	r3, r4, #8
   d5d1e:	3418      	adds	r4, #24
   d5d20:	6818      	ldr	r0, [r3, #0]
   d5d22:	6859      	ldr	r1, [r3, #4]
   d5d24:	462a      	mov	r2, r5
   d5d26:	c203      	stmia	r2!, {r0, r1}
   d5d28:	3308      	adds	r3, #8
   d5d2a:	42a3      	cmp	r3, r4
   d5d2c:	4615      	mov	r5, r2
   d5d2e:	d1f7      	bne.n	d5d20 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5d30:	a901      	add	r1, sp, #4
   d5d32:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d34:	ad07      	add	r5, sp, #28
   d5d36:	f7ff fcef 	bl	d5718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d3c:	1d3c      	adds	r4, r7, #4
   d5d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d40:	682b      	ldr	r3, [r5, #0]
   d5d42:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5d44:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d46:	69f6      	ldr	r6, [r6, #28]
   d5d48:	e7c8      	b.n	d5cdc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d4a:	9800      	ldr	r0, [sp, #0]
   d5d4c:	f7fe ffde 	bl	d4d0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d50:	4638      	mov	r0, r7
   d5d52:	b015      	add	sp, #84	; 0x54
   d5d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d58:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d5a:	4a03      	ldr	r2, [pc, #12]	; (d5d68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d5c:	601a      	str	r2, [r3, #0]
   d5d5e:	2200      	movs	r2, #0
   d5d60:	605a      	str	r2, [r3, #4]
   d5d62:	4770      	bx	lr
   d5d64:	2003e728 	.word	0x2003e728
   d5d68:	000d8794 	.word	0x000d8794

000d5d6c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5d6c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5d6e:	4e18      	ldr	r6, [pc, #96]	; (d5dd0 <pinAvailable+0x64>)
   d5d70:	6831      	ldr	r1, [r6, #0]
   d5d72:	f011 0501 	ands.w	r5, r1, #1
   d5d76:	4604      	mov	r4, r0
   d5d78:	d10a      	bne.n	d5d90 <pinAvailable+0x24>
   d5d7a:	4630      	mov	r0, r6
   d5d7c:	f7fe f99c 	bl	d40b8 <__cxa_guard_acquire>
   d5d80:	b130      	cbz	r0, d5d90 <pinAvailable+0x24>
   d5d82:	4629      	mov	r1, r5
   d5d84:	4813      	ldr	r0, [pc, #76]	; (d5dd4 <pinAvailable+0x68>)
   d5d86:	f7ff fa31 	bl	d51ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5d8a:	4630      	mov	r0, r6
   d5d8c:	f7fe f999 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5d90:	4810      	ldr	r0, [pc, #64]	; (d5dd4 <pinAvailable+0x68>)
   d5d92:	f7ff fadb 	bl	d534c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5d96:	b128      	cbz	r0, d5da4 <pinAvailable+0x38>
   d5d98:	f1a4 030b 	sub.w	r3, r4, #11
   d5d9c:	2b02      	cmp	r3, #2
   d5d9e:	d801      	bhi.n	d5da4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5da0:	2000      	movs	r0, #0
   d5da2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5da4:	f000 f880 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d5da8:	f7ff fe3c 	bl	d5a24 <_ZN7TwoWire9isEnabledEv>
   d5dac:	b108      	cbz	r0, d5db2 <pinAvailable+0x46>
   d5dae:	2c01      	cmp	r4, #1
   d5db0:	d9f6      	bls.n	d5da0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5db2:	f7ff fdbf 	bl	d5934 <_Z22__fetch_global_Serial1v>
   d5db6:	f7ff fdb9 	bl	d592c <_ZN11USARTSerial9isEnabledEv>
   d5dba:	b118      	cbz	r0, d5dc4 <pinAvailable+0x58>
   d5dbc:	f1a4 0309 	sub.w	r3, r4, #9
   d5dc0:	2b01      	cmp	r3, #1
   d5dc2:	d9ed      	bls.n	d5da0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5dc4:	2c23      	cmp	r4, #35	; 0x23
   d5dc6:	bf8c      	ite	hi
   d5dc8:	2000      	movhi	r0, #0
   d5dca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5dcc:	bd70      	pop	{r4, r5, r6, pc}
   d5dce:	bf00      	nop
   d5dd0:	2003e3d0 	.word	0x2003e3d0
   d5dd4:	2003e3d4 	.word	0x2003e3d4

000d5dd8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dd8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5dda:	b538      	push	{r3, r4, r5, lr}
   d5ddc:	4604      	mov	r4, r0
   d5dde:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5de0:	d80a      	bhi.n	d5df8 <pinMode+0x20>
   d5de2:	29ff      	cmp	r1, #255	; 0xff
   d5de4:	d008      	beq.n	d5df8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5de6:	f7ff ffc1 	bl	d5d6c <pinAvailable>
   d5dea:	b128      	cbz	r0, d5df8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5dec:	4629      	mov	r1, r5
   d5dee:	4620      	mov	r0, r4
}
   d5df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5df4:	f7fe bfa2 	b.w	d4d3c <HAL_Pin_Mode>
   d5df8:	bd38      	pop	{r3, r4, r5, pc}

000d5dfa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5dfa:	b538      	push	{r3, r4, r5, lr}
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e00:	f7fe ffa4 	bl	d4d4c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e04:	28ff      	cmp	r0, #255	; 0xff
   d5e06:	d010      	beq.n	d5e2a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5e08:	2806      	cmp	r0, #6
   d5e0a:	d804      	bhi.n	d5e16 <digitalWrite+0x1c>
   d5e0c:	234d      	movs	r3, #77	; 0x4d
   d5e0e:	fa23 f000 	lsr.w	r0, r3, r0
   d5e12:	07c3      	lsls	r3, r0, #31
   d5e14:	d409      	bmi.n	d5e2a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e16:	4620      	mov	r0, r4
   d5e18:	f7ff ffa8 	bl	d5d6c <pinAvailable>
   d5e1c:	b128      	cbz	r0, d5e2a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e1e:	4629      	mov	r1, r5
   d5e20:	4620      	mov	r0, r4
}
   d5e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e26:	f7fe bf99 	b.w	d4d5c <HAL_GPIO_Write>
   d5e2a:	bd38      	pop	{r3, r4, r5, pc}

000d5e2c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e30:	4690      	mov	r8, r2
   d5e32:	461e      	mov	r6, r3
   d5e34:	2407      	movs	r4, #7
   d5e36:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5e38:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d5e3a:	f1b8 0f00 	cmp.w	r8, #0
   d5e3e:	d104      	bne.n	d5e4a <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5e40:	f1c4 0107 	rsb	r1, r4, #7
   d5e44:	fa46 f101 	asr.w	r1, r6, r1
   d5e48:	e001      	b.n	d5e4e <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5e4a:	fa46 f104 	asr.w	r1, r6, r4
   d5e4e:	f001 0101 	and.w	r1, r1, #1
   d5e52:	4638      	mov	r0, r7
   d5e54:	f7ff ffd1 	bl	d5dfa <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d5e58:	2101      	movs	r1, #1
   d5e5a:	4628      	mov	r0, r5
   d5e5c:	f7ff ffcd 	bl	d5dfa <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5e60:	2100      	movs	r1, #0
   d5e62:	4628      	mov	r0, r5
   d5e64:	f7ff ffc9 	bl	d5dfa <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d5e68:	f114 34ff 	adds.w	r4, r4, #4294967295
   d5e6c:	d2e5      	bcs.n	d5e3a <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d5e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5e74 <_Z17acquireWireBufferv>:
   d5e74:	b570      	push	{r4, r5, r6, lr}
   d5e76:	4604      	mov	r4, r0
   d5e78:	2514      	movs	r5, #20
   d5e7a:	462a      	mov	r2, r5
   d5e7c:	4e09      	ldr	r6, [pc, #36]	; (d5ea4 <_Z17acquireWireBufferv+0x30>)
   d5e7e:	2100      	movs	r1, #0
   d5e80:	f002 f859 	bl	d7f36 <memset>
   d5e84:	8025      	strh	r5, [r4, #0]
   d5e86:	2520      	movs	r5, #32
   d5e88:	4631      	mov	r1, r6
   d5e8a:	60a5      	str	r5, [r4, #8]
   d5e8c:	6125      	str	r5, [r4, #16]
   d5e8e:	4628      	mov	r0, r5
   d5e90:	f000 f840 	bl	d5f14 <_ZnajRKSt9nothrow_t>
   d5e94:	4631      	mov	r1, r6
   d5e96:	6060      	str	r0, [r4, #4]
   d5e98:	4628      	mov	r0, r5
   d5e9a:	f000 f83b 	bl	d5f14 <_ZnajRKSt9nothrow_t>
   d5e9e:	60e0      	str	r0, [r4, #12]
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	bd70      	pop	{r4, r5, r6, pc}
   d5ea4:	000d87c0 	.word	0x000d87c0

000d5ea8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ea8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5eaa:	4d0e      	ldr	r5, [pc, #56]	; (d5ee4 <_Z19__fetch_global_Wirev+0x3c>)
   d5eac:	6829      	ldr	r1, [r5, #0]
   d5eae:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5eb2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5eb4:	d113      	bne.n	d5ede <_Z19__fetch_global_Wirev+0x36>
   d5eb6:	4628      	mov	r0, r5
   d5eb8:	f7fe f8fe 	bl	d40b8 <__cxa_guard_acquire>
   d5ebc:	b178      	cbz	r0, d5ede <_Z19__fetch_global_Wirev+0x36>
   d5ebe:	a801      	add	r0, sp, #4
   d5ec0:	f7ff ffd8 	bl	d5e74 <_Z17acquireWireBufferv>
   d5ec4:	aa01      	add	r2, sp, #4
   d5ec6:	4621      	mov	r1, r4
   d5ec8:	4807      	ldr	r0, [pc, #28]	; (d5ee8 <_Z19__fetch_global_Wirev+0x40>)
   d5eca:	f7ff fd85 	bl	d59d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5ece:	4628      	mov	r0, r5
   d5ed0:	f7fe f8f7 	bl	d40c2 <__cxa_guard_release>
   d5ed4:	4a05      	ldr	r2, [pc, #20]	; (d5eec <_Z19__fetch_global_Wirev+0x44>)
   d5ed6:	4906      	ldr	r1, [pc, #24]	; (d5ef0 <_Z19__fetch_global_Wirev+0x48>)
   d5ed8:	4803      	ldr	r0, [pc, #12]	; (d5ee8 <_Z19__fetch_global_Wirev+0x40>)
   d5eda:	f000 f80b 	bl	d5ef4 <__aeabi_atexit>
	return wire;
}
   d5ede:	4802      	ldr	r0, [pc, #8]	; (d5ee8 <_Z19__fetch_global_Wirev+0x40>)
   d5ee0:	b007      	add	sp, #28
   d5ee2:	bd30      	pop	{r4, r5, pc}
   d5ee4:	2003e734 	.word	0x2003e734
   d5ee8:	2003e738 	.word	0x2003e738
   d5eec:	2003e398 	.word	0x2003e398
   d5ef0:	000d5981 	.word	0x000d5981

000d5ef4 <__aeabi_atexit>:
   d5ef4:	460b      	mov	r3, r1
   d5ef6:	4601      	mov	r1, r0
   d5ef8:	4618      	mov	r0, r3
   d5efa:	f002 b803 	b.w	d7f04 <__cxa_atexit>
	...

000d5f00 <_ZSt15get_new_handlerv>:
   d5f00:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <_ZSt15get_new_handlerv+0xc>)
   d5f02:	6818      	ldr	r0, [r3, #0]
   d5f04:	f3bf 8f5f 	dmb	sy
   d5f08:	4770      	bx	lr
   d5f0a:	bf00      	nop
   d5f0c:	2003e74c 	.word	0x2003e74c

000d5f10 <_ZdlPvj>:
   d5f10:	f7fe b8c3 	b.w	d409a <_ZdlPv>

000d5f14 <_ZnajRKSt9nothrow_t>:
   d5f14:	f000 b800 	b.w	d5f18 <_ZnwjRKSt9nothrow_t>

000d5f18 <_ZnwjRKSt9nothrow_t>:
   d5f18:	b510      	push	{r4, lr}
   d5f1a:	2800      	cmp	r0, #0
   d5f1c:	bf14      	ite	ne
   d5f1e:	4604      	movne	r4, r0
   d5f20:	2401      	moveq	r4, #1
   d5f22:	4620      	mov	r0, r4
   d5f24:	f7ff f906 	bl	d5134 <malloc>
   d5f28:	b920      	cbnz	r0, d5f34 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f2a:	f7ff ffe9 	bl	d5f00 <_ZSt15get_new_handlerv>
   d5f2e:	b108      	cbz	r0, d5f34 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f30:	4780      	blx	r0
   d5f32:	e7f6      	b.n	d5f22 <_ZnwjRKSt9nothrow_t+0xa>
   d5f34:	bd10      	pop	{r4, pc}
	...

000d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f38:	4b18      	ldr	r3, [pc, #96]	; (d5f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	07d1      	lsls	r1, r2, #31
   d5f3e:	bf5c      	itt	pl
   d5f40:	2201      	movpl	r2, #1
   d5f42:	601a      	strpl	r2, [r3, #0]
   d5f44:	4b16      	ldr	r3, [pc, #88]	; (d5fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f46:	681a      	ldr	r2, [r3, #0]
   d5f48:	07d2      	lsls	r2, r2, #31
   d5f4a:	bf5c      	itt	pl
   d5f4c:	2201      	movpl	r2, #1
   d5f4e:	601a      	strpl	r2, [r3, #0]
   d5f50:	4b14      	ldr	r3, [pc, #80]	; (d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	07d0      	lsls	r0, r2, #31
   d5f56:	bf5c      	itt	pl
   d5f58:	2201      	movpl	r2, #1
   d5f5a:	601a      	strpl	r2, [r3, #0]
   d5f5c:	4b12      	ldr	r3, [pc, #72]	; (d5fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	07d1      	lsls	r1, r2, #31
   d5f62:	bf5c      	itt	pl
   d5f64:	2201      	movpl	r2, #1
   d5f66:	601a      	strpl	r2, [r3, #0]
   d5f68:	4b10      	ldr	r3, [pc, #64]	; (d5fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d2      	lsls	r2, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b0e      	ldr	r3, [pc, #56]	; (d5fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d0      	lsls	r0, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b0c      	ldr	r3, [pc, #48]	; (d5fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d1      	lsls	r1, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b0a      	ldr	r3, [pc, #40]	; (d5fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d2      	lsls	r2, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4770      	bx	lr
   d5f9a:	bf00      	nop
   d5f9c:	2003e76c 	.word	0x2003e76c
   d5fa0:	2003e768 	.word	0x2003e768
   d5fa4:	2003e764 	.word	0x2003e764
   d5fa8:	2003e760 	.word	0x2003e760
   d5fac:	2003e75c 	.word	0x2003e75c
   d5fb0:	2003e758 	.word	0x2003e758
   d5fb4:	2003e754 	.word	0x2003e754
   d5fb8:	2003e750 	.word	0x2003e750

000d5fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5fbc:	4b24      	ldr	r3, [pc, #144]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d0      	lsls	r0, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b22      	ldr	r3, [pc, #136]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d1      	lsls	r1, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b20      	ldr	r3, [pc, #128]	; (d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d2      	lsls	r2, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b1e      	ldr	r3, [pc, #120]	; (d605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d0      	lsls	r0, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b1c      	ldr	r3, [pc, #112]	; (d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d1      	lsls	r1, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b1a      	ldr	r3, [pc, #104]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d2      	lsls	r2, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b18      	ldr	r3, [pc, #96]	; (d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d0      	lsls	r0, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b16      	ldr	r3, [pc, #88]	; (d606c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b14      	ldr	r3, [pc, #80]	; (d6070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b12      	ldr	r3, [pc, #72]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b10      	ldr	r3, [pc, #64]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b0e      	ldr	r3, [pc, #56]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4770      	bx	lr
   d604e:	bf00      	nop
   d6050:	2003e79c 	.word	0x2003e79c
   d6054:	2003e798 	.word	0x2003e798
   d6058:	2003e794 	.word	0x2003e794
   d605c:	2003e790 	.word	0x2003e790
   d6060:	2003e78c 	.word	0x2003e78c
   d6064:	2003e788 	.word	0x2003e788
   d6068:	2003e784 	.word	0x2003e784
   d606c:	2003e780 	.word	0x2003e780
   d6070:	2003e77c 	.word	0x2003e77c
   d6074:	2003e778 	.word	0x2003e778
   d6078:	2003e774 	.word	0x2003e774
   d607c:	2003e770 	.word	0x2003e770

000d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6080:	4b24      	ldr	r3, [pc, #144]	; (d6114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d0      	lsls	r0, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b22      	ldr	r3, [pc, #136]	; (d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d1      	lsls	r1, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b20      	ldr	r3, [pc, #128]	; (d611c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d2      	lsls	r2, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b1e      	ldr	r3, [pc, #120]	; (d6120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d0      	lsls	r0, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4b1c      	ldr	r3, [pc, #112]	; (d6124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d1      	lsls	r1, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b1a      	ldr	r3, [pc, #104]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d2      	lsls	r2, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4b18      	ldr	r3, [pc, #96]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d0      	lsls	r0, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b16      	ldr	r3, [pc, #88]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d1      	lsls	r1, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b14      	ldr	r3, [pc, #80]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d2      	lsls	r2, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b12      	ldr	r3, [pc, #72]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d0      	lsls	r0, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b10      	ldr	r3, [pc, #64]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d1      	lsls	r1, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b0e      	ldr	r3, [pc, #56]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d2      	lsls	r2, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4770      	bx	lr
   d6112:	bf00      	nop
   d6114:	2003e7cc 	.word	0x2003e7cc
   d6118:	2003e7c8 	.word	0x2003e7c8
   d611c:	2003e7c4 	.word	0x2003e7c4
   d6120:	2003e7c0 	.word	0x2003e7c0
   d6124:	2003e7bc 	.word	0x2003e7bc
   d6128:	2003e7b8 	.word	0x2003e7b8
   d612c:	2003e7b4 	.word	0x2003e7b4
   d6130:	2003e7b0 	.word	0x2003e7b0
   d6134:	2003e7ac 	.word	0x2003e7ac
   d6138:	2003e7a8 	.word	0x2003e7a8
   d613c:	2003e7a4 	.word	0x2003e7a4
   d6140:	2003e7a0 	.word	0x2003e7a0

000d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6144:	4b18      	ldr	r3, [pc, #96]	; (d61a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6146:	681a      	ldr	r2, [r3, #0]
   d6148:	07d1      	lsls	r1, r2, #31
   d614a:	bf5c      	itt	pl
   d614c:	2201      	movpl	r2, #1
   d614e:	601a      	strpl	r2, [r3, #0]
   d6150:	4b16      	ldr	r3, [pc, #88]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6152:	681a      	ldr	r2, [r3, #0]
   d6154:	07d2      	lsls	r2, r2, #31
   d6156:	bf5c      	itt	pl
   d6158:	2201      	movpl	r2, #1
   d615a:	601a      	strpl	r2, [r3, #0]
   d615c:	4b14      	ldr	r3, [pc, #80]	; (d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d615e:	681a      	ldr	r2, [r3, #0]
   d6160:	07d0      	lsls	r0, r2, #31
   d6162:	bf5c      	itt	pl
   d6164:	2201      	movpl	r2, #1
   d6166:	601a      	strpl	r2, [r3, #0]
   d6168:	4b12      	ldr	r3, [pc, #72]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d616a:	681a      	ldr	r2, [r3, #0]
   d616c:	07d1      	lsls	r1, r2, #31
   d616e:	bf5c      	itt	pl
   d6170:	2201      	movpl	r2, #1
   d6172:	601a      	strpl	r2, [r3, #0]
   d6174:	4b10      	ldr	r3, [pc, #64]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6176:	681a      	ldr	r2, [r3, #0]
   d6178:	07d2      	lsls	r2, r2, #31
   d617a:	bf5c      	itt	pl
   d617c:	2201      	movpl	r2, #1
   d617e:	601a      	strpl	r2, [r3, #0]
   d6180:	4b0e      	ldr	r3, [pc, #56]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d0      	lsls	r0, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b0c      	ldr	r3, [pc, #48]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d1      	lsls	r1, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b0a      	ldr	r3, [pc, #40]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d2      	lsls	r2, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4770      	bx	lr
   d61a6:	bf00      	nop
   d61a8:	2003e7ec 	.word	0x2003e7ec
   d61ac:	2003e7e8 	.word	0x2003e7e8
   d61b0:	2003e7e4 	.word	0x2003e7e4
   d61b4:	2003e7e0 	.word	0x2003e7e0
   d61b8:	2003e7dc 	.word	0x2003e7dc
   d61bc:	2003e7d8 	.word	0x2003e7d8
   d61c0:	2003e7d4 	.word	0x2003e7d4
   d61c4:	2003e7d0 	.word	0x2003e7d0

000d61c8 <sin>:
   d61c8:	b500      	push	{lr}
   d61ca:	ec51 0b10 	vmov	r0, r1, d0
   d61ce:	4a2c      	ldr	r2, [pc, #176]	; (d6280 <sin+0xb8>)
   d61d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d61d4:	4293      	cmp	r3, r2
   d61d6:	b085      	sub	sp, #20
   d61d8:	dd27      	ble.n	d622a <sin+0x62>
   d61da:	4a2a      	ldr	r2, [pc, #168]	; (d6284 <sin+0xbc>)
   d61dc:	4293      	cmp	r3, r2
   d61de:	dd09      	ble.n	d61f4 <sin+0x2c>
   d61e0:	ee10 2a10 	vmov	r2, s0
   d61e4:	460b      	mov	r3, r1
   d61e6:	f001 f9c7 	bl	d7578 <__aeabi_dsub>
   d61ea:	ec41 0b10 	vmov	d0, r0, r1
   d61ee:	b005      	add	sp, #20
   d61f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d61f4:	4668      	mov	r0, sp
   d61f6:	f000 f847 	bl	d6288 <__ieee754_rem_pio2>
   d61fa:	f000 0003 	and.w	r0, r0, #3
   d61fe:	2801      	cmp	r0, #1
   d6200:	d027      	beq.n	d6252 <sin+0x8a>
   d6202:	2802      	cmp	r0, #2
   d6204:	d01d      	beq.n	d6242 <sin+0x7a>
   d6206:	b368      	cbz	r0, d6264 <sin+0x9c>
   d6208:	ed9d 1b02 	vldr	d1, [sp, #8]
   d620c:	ed9d 0b00 	vldr	d0, [sp]
   d6210:	f000 fa62 	bl	d66d8 <__kernel_cos>
   d6214:	ec53 2b10 	vmov	r2, r3, d0
   d6218:	ee10 0a10 	vmov	r0, s0
   d621c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   d6220:	ec41 0b10 	vmov	d0, r0, r1
   d6224:	b005      	add	sp, #20
   d6226:	f85d fb04 	ldr.w	pc, [sp], #4
   d622a:	2000      	movs	r0, #0
   d622c:	ed9f 1b12 	vldr	d1, [pc, #72]	; d6278 <sin+0xb0>
   d6230:	f000 ffa6 	bl	d7180 <__kernel_sin>
   d6234:	ec51 0b10 	vmov	r0, r1, d0
   d6238:	ec41 0b10 	vmov	d0, r0, r1
   d623c:	b005      	add	sp, #20
   d623e:	f85d fb04 	ldr.w	pc, [sp], #4
   d6242:	2001      	movs	r0, #1
   d6244:	ed9d 1b02 	vldr	d1, [sp, #8]
   d6248:	ed9d 0b00 	vldr	d0, [sp]
   d624c:	f000 ff98 	bl	d7180 <__kernel_sin>
   d6250:	e7e0      	b.n	d6214 <sin+0x4c>
   d6252:	ed9d 1b02 	vldr	d1, [sp, #8]
   d6256:	ed9d 0b00 	vldr	d0, [sp]
   d625a:	f000 fa3d 	bl	d66d8 <__kernel_cos>
   d625e:	ec51 0b10 	vmov	r0, r1, d0
   d6262:	e7c2      	b.n	d61ea <sin+0x22>
   d6264:	2001      	movs	r0, #1
   d6266:	ed9d 1b02 	vldr	d1, [sp, #8]
   d626a:	ed9d 0b00 	vldr	d0, [sp]
   d626e:	f000 ff87 	bl	d7180 <__kernel_sin>
   d6272:	ec51 0b10 	vmov	r0, r1, d0
   d6276:	e7b8      	b.n	d61ea <sin+0x22>
	...
   d6280:	3fe921fb 	.word	0x3fe921fb
   d6284:	7fefffff 	.word	0x7fefffff

000d6288 <__ieee754_rem_pio2>:
   d6288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d628c:	ec53 2b10 	vmov	r2, r3, d0
   d6290:	4997      	ldr	r1, [pc, #604]	; (d64f0 <__ieee754_rem_pio2+0x268>)
   d6292:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   d6296:	458b      	cmp	fp, r1
   d6298:	b08f      	sub	sp, #60	; 0x3c
   d629a:	f340 8087 	ble.w	d63ac <__ieee754_rem_pio2+0x124>
   d629e:	4995      	ldr	r1, [pc, #596]	; (d64f4 <__ieee754_rem_pio2+0x26c>)
   d62a0:	458b      	cmp	fp, r1
   d62a2:	461c      	mov	r4, r3
   d62a4:	4682      	mov	sl, r0
   d62a6:	dc29      	bgt.n	d62fc <__ieee754_rem_pio2+0x74>
   d62a8:	2c00      	cmp	r4, #0
   d62aa:	4619      	mov	r1, r3
   d62ac:	ee10 0a10 	vmov	r0, s0
   d62b0:	a385      	add	r3, pc, #532	; (adr r3, d64c8 <__ieee754_rem_pio2+0x240>)
   d62b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d62b6:	f340 81a5 	ble.w	d6604 <__ieee754_rem_pio2+0x37c>
   d62ba:	f001 f95d 	bl	d7578 <__aeabi_dsub>
   d62be:	4b8e      	ldr	r3, [pc, #568]	; (d64f8 <__ieee754_rem_pio2+0x270>)
   d62c0:	459b      	cmp	fp, r3
   d62c2:	4604      	mov	r4, r0
   d62c4:	460d      	mov	r5, r1
   d62c6:	f000 8087 	beq.w	d63d8 <__ieee754_rem_pio2+0x150>
   d62ca:	a381      	add	r3, pc, #516	; (adr r3, d64d0 <__ieee754_rem_pio2+0x248>)
   d62cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d62d0:	f001 f952 	bl	d7578 <__aeabi_dsub>
   d62d4:	4602      	mov	r2, r0
   d62d6:	460b      	mov	r3, r1
   d62d8:	e9ca 2300 	strd	r2, r3, [sl]
   d62dc:	4620      	mov	r0, r4
   d62de:	4629      	mov	r1, r5
   d62e0:	f001 f94a 	bl	d7578 <__aeabi_dsub>
   d62e4:	a37a      	add	r3, pc, #488	; (adr r3, d64d0 <__ieee754_rem_pio2+0x248>)
   d62e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d62ea:	f001 f945 	bl	d7578 <__aeabi_dsub>
   d62ee:	2501      	movs	r5, #1
   d62f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d62f4:	4628      	mov	r0, r5
   d62f6:	b00f      	add	sp, #60	; 0x3c
   d62f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62fc:	497f      	ldr	r1, [pc, #508]	; (d64fc <__ieee754_rem_pio2+0x274>)
   d62fe:	458b      	cmp	fp, r1
   d6300:	f340 8087 	ble.w	d6412 <__ieee754_rem_pio2+0x18a>
   d6304:	497e      	ldr	r1, [pc, #504]	; (d6500 <__ieee754_rem_pio2+0x278>)
   d6306:	458b      	cmp	fp, r1
   d6308:	dc5b      	bgt.n	d63c2 <__ieee754_rem_pio2+0x13a>
   d630a:	ea4f 552b 	mov.w	r5, fp, asr #20
   d630e:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   d6312:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   d6316:	4610      	mov	r0, r2
   d6318:	4639      	mov	r1, r7
   d631a:	ee10 6a10 	vmov	r6, s0
   d631e:	f001 fd79 	bl	d7e14 <__aeabi_d2iz>
   d6322:	f001 fa77 	bl	d7814 <__aeabi_i2d>
   d6326:	4680      	mov	r8, r0
   d6328:	4689      	mov	r9, r1
   d632a:	4642      	mov	r2, r8
   d632c:	464b      	mov	r3, r9
   d632e:	4630      	mov	r0, r6
   d6330:	4639      	mov	r1, r7
   d6332:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6336:	f001 f91f 	bl	d7578 <__aeabi_dsub>
   d633a:	2200      	movs	r2, #0
   d633c:	4b71      	ldr	r3, [pc, #452]	; (d6504 <__ieee754_rem_pio2+0x27c>)
   d633e:	f001 facf 	bl	d78e0 <__aeabi_dmul>
   d6342:	4689      	mov	r9, r1
   d6344:	4680      	mov	r8, r0
   d6346:	f001 fd65 	bl	d7e14 <__aeabi_d2iz>
   d634a:	f001 fa63 	bl	d7814 <__aeabi_i2d>
   d634e:	4606      	mov	r6, r0
   d6350:	460f      	mov	r7, r1
   d6352:	4632      	mov	r2, r6
   d6354:	463b      	mov	r3, r7
   d6356:	4640      	mov	r0, r8
   d6358:	4649      	mov	r1, r9
   d635a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   d635e:	f001 f90b 	bl	d7578 <__aeabi_dsub>
   d6362:	2200      	movs	r2, #0
   d6364:	4b67      	ldr	r3, [pc, #412]	; (d6504 <__ieee754_rem_pio2+0x27c>)
   d6366:	f001 fabb 	bl	d78e0 <__aeabi_dmul>
   d636a:	2200      	movs	r2, #0
   d636c:	2300      	movs	r3, #0
   d636e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d6372:	f001 fd1d 	bl	d7db0 <__aeabi_dcmpeq>
   d6376:	2800      	cmp	r0, #0
   d6378:	f000 8170 	beq.w	d665c <__ieee754_rem_pio2+0x3d4>
   d637c:	2300      	movs	r3, #0
   d637e:	4630      	mov	r0, r6
   d6380:	4639      	mov	r1, r7
   d6382:	2200      	movs	r2, #0
   d6384:	f001 fd14 	bl	d7db0 <__aeabi_dcmpeq>
   d6388:	2800      	cmp	r0, #0
   d638a:	bf14      	ite	ne
   d638c:	2301      	movne	r3, #1
   d638e:	2302      	moveq	r3, #2
   d6390:	4a5d      	ldr	r2, [pc, #372]	; (d6508 <__ieee754_rem_pio2+0x280>)
   d6392:	9201      	str	r2, [sp, #4]
   d6394:	2102      	movs	r1, #2
   d6396:	9100      	str	r1, [sp, #0]
   d6398:	462a      	mov	r2, r5
   d639a:	4651      	mov	r1, sl
   d639c:	a808      	add	r0, sp, #32
   d639e:	f000 fadf 	bl	d6960 <__kernel_rem_pio2>
   d63a2:	2c00      	cmp	r4, #0
   d63a4:	f2c0 814c 	blt.w	d6640 <__ieee754_rem_pio2+0x3b8>
   d63a8:	4605      	mov	r5, r0
   d63aa:	e006      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d63ac:	ed80 0b00 	vstr	d0, [r0]
   d63b0:	2500      	movs	r5, #0
   d63b2:	2400      	movs	r4, #0
   d63b4:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d63b8:	2500      	movs	r5, #0
   d63ba:	4628      	mov	r0, r5
   d63bc:	b00f      	add	sp, #60	; 0x3c
   d63be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63c2:	ee10 0a10 	vmov	r0, s0
   d63c6:	4619      	mov	r1, r3
   d63c8:	f001 f8d6 	bl	d7578 <__aeabi_dsub>
   d63cc:	2500      	movs	r5, #0
   d63ce:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d63d2:	e9ca 0100 	strd	r0, r1, [sl]
   d63d6:	e7f0      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d63d8:	a33f      	add	r3, pc, #252	; (adr r3, d64d8 <__ieee754_rem_pio2+0x250>)
   d63da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63de:	f001 f8cb 	bl	d7578 <__aeabi_dsub>
   d63e2:	a33f      	add	r3, pc, #252	; (adr r3, d64e0 <__ieee754_rem_pio2+0x258>)
   d63e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63e8:	460d      	mov	r5, r1
   d63ea:	4604      	mov	r4, r0
   d63ec:	f001 f8c4 	bl	d7578 <__aeabi_dsub>
   d63f0:	4602      	mov	r2, r0
   d63f2:	460b      	mov	r3, r1
   d63f4:	e9ca 2300 	strd	r2, r3, [sl]
   d63f8:	4629      	mov	r1, r5
   d63fa:	4620      	mov	r0, r4
   d63fc:	f001 f8bc 	bl	d7578 <__aeabi_dsub>
   d6400:	a337      	add	r3, pc, #220	; (adr r3, d64e0 <__ieee754_rem_pio2+0x258>)
   d6402:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6406:	f001 f8b7 	bl	d7578 <__aeabi_dsub>
   d640a:	2501      	movs	r5, #1
   d640c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d6410:	e7d3      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d6412:	f000 ff7f 	bl	d7314 <fabs>
   d6416:	ec57 6b10 	vmov	r6, r7, d0
   d641a:	ee10 0a10 	vmov	r0, s0
   d641e:	a332      	add	r3, pc, #200	; (adr r3, d64e8 <__ieee754_rem_pio2+0x260>)
   d6420:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6424:	4639      	mov	r1, r7
   d6426:	f001 fa5b 	bl	d78e0 <__aeabi_dmul>
   d642a:	2200      	movs	r2, #0
   d642c:	4b37      	ldr	r3, [pc, #220]	; (d650c <__ieee754_rem_pio2+0x284>)
   d642e:	f001 f8a5 	bl	d757c <__adddf3>
   d6432:	f001 fcef 	bl	d7e14 <__aeabi_d2iz>
   d6436:	4605      	mov	r5, r0
   d6438:	f001 f9ec 	bl	d7814 <__aeabi_i2d>
   d643c:	a322      	add	r3, pc, #136	; (adr r3, d64c8 <__ieee754_rem_pio2+0x240>)
   d643e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6442:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d6446:	f001 fa4b 	bl	d78e0 <__aeabi_dmul>
   d644a:	4602      	mov	r2, r0
   d644c:	460b      	mov	r3, r1
   d644e:	4630      	mov	r0, r6
   d6450:	4639      	mov	r1, r7
   d6452:	f001 f891 	bl	d7578 <__aeabi_dsub>
   d6456:	a31e      	add	r3, pc, #120	; (adr r3, d64d0 <__ieee754_rem_pio2+0x248>)
   d6458:	e9d3 2300 	ldrd	r2, r3, [r3]
   d645c:	4680      	mov	r8, r0
   d645e:	4689      	mov	r9, r1
   d6460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6464:	f001 fa3c 	bl	d78e0 <__aeabi_dmul>
   d6468:	2d1f      	cmp	r5, #31
   d646a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d646e:	dc51      	bgt.n	d6514 <__ieee754_rem_pio2+0x28c>
   d6470:	4b27      	ldr	r3, [pc, #156]	; (d6510 <__ieee754_rem_pio2+0x288>)
   d6472:	1e6a      	subs	r2, r5, #1
   d6474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   d6478:	459b      	cmp	fp, r3
   d647a:	d04b      	beq.n	d6514 <__ieee754_rem_pio2+0x28c>
   d647c:	4602      	mov	r2, r0
   d647e:	460b      	mov	r3, r1
   d6480:	4640      	mov	r0, r8
   d6482:	4649      	mov	r1, r9
   d6484:	f001 f878 	bl	d7578 <__aeabi_dsub>
   d6488:	4606      	mov	r6, r0
   d648a:	460f      	mov	r7, r1
   d648c:	e9ca 6700 	strd	r6, r7, [sl]
   d6490:	4632      	mov	r2, r6
   d6492:	463b      	mov	r3, r7
   d6494:	4640      	mov	r0, r8
   d6496:	4649      	mov	r1, r9
   d6498:	f001 f86e 	bl	d7578 <__aeabi_dsub>
   d649c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d64a0:	f001 f86a 	bl	d7578 <__aeabi_dsub>
   d64a4:	2c00      	cmp	r4, #0
   d64a6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d64aa:	da86      	bge.n	d63ba <__ieee754_rem_pio2+0x132>
   d64ac:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   d64b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d64b4:	426d      	negs	r5, r5
   d64b6:	f8ca 6000 	str.w	r6, [sl]
   d64ba:	f8ca 4004 	str.w	r4, [sl, #4]
   d64be:	f8ca 0008 	str.w	r0, [sl, #8]
   d64c2:	f8ca 300c 	str.w	r3, [sl, #12]
   d64c6:	e778      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d64c8:	54400000 	.word	0x54400000
   d64cc:	3ff921fb 	.word	0x3ff921fb
   d64d0:	1a626331 	.word	0x1a626331
   d64d4:	3dd0b461 	.word	0x3dd0b461
   d64d8:	1a600000 	.word	0x1a600000
   d64dc:	3dd0b461 	.word	0x3dd0b461
   d64e0:	2e037073 	.word	0x2e037073
   d64e4:	3ba3198a 	.word	0x3ba3198a
   d64e8:	6dc9c883 	.word	0x6dc9c883
   d64ec:	3fe45f30 	.word	0x3fe45f30
   d64f0:	3fe921fb 	.word	0x3fe921fb
   d64f4:	4002d97b 	.word	0x4002d97b
   d64f8:	3ff921fb 	.word	0x3ff921fb
   d64fc:	413921fb 	.word	0x413921fb
   d6500:	7fefffff 	.word	0x7fefffff
   d6504:	41700000 	.word	0x41700000
   d6508:	000d8844 	.word	0x000d8844
   d650c:	3fe00000 	.word	0x3fe00000
   d6510:	000d87c4 	.word	0x000d87c4
   d6514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6518:	4640      	mov	r0, r8
   d651a:	4649      	mov	r1, r9
   d651c:	f001 f82c 	bl	d7578 <__aeabi_dsub>
   d6520:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   d6524:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d6528:	ebc3 030b 	rsb	r3, r3, fp
   d652c:	4606      	mov	r6, r0
   d652e:	460f      	mov	r7, r1
   d6530:	2b10      	cmp	r3, #16
   d6532:	e9ca 6700 	strd	r6, r7, [sl]
   d6536:	ddab      	ble.n	d6490 <__ieee754_rem_pio2+0x208>
   d6538:	a35d      	add	r3, pc, #372	; (adr r3, d66b0 <__ieee754_rem_pio2+0x428>)
   d653a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d653e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6542:	f001 f9cd 	bl	d78e0 <__aeabi_dmul>
   d6546:	4606      	mov	r6, r0
   d6548:	460f      	mov	r7, r1
   d654a:	4602      	mov	r2, r0
   d654c:	460b      	mov	r3, r1
   d654e:	4640      	mov	r0, r8
   d6550:	4649      	mov	r1, r9
   d6552:	f001 f811 	bl	d7578 <__aeabi_dsub>
   d6556:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d655a:	4602      	mov	r2, r0
   d655c:	460b      	mov	r3, r1
   d655e:	4640      	mov	r0, r8
   d6560:	4649      	mov	r1, r9
   d6562:	f001 f809 	bl	d7578 <__aeabi_dsub>
   d6566:	4632      	mov	r2, r6
   d6568:	463b      	mov	r3, r7
   d656a:	f001 f805 	bl	d7578 <__aeabi_dsub>
   d656e:	a352      	add	r3, pc, #328	; (adr r3, d66b8 <__ieee754_rem_pio2+0x430>)
   d6570:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6574:	4606      	mov	r6, r0
   d6576:	460f      	mov	r7, r1
   d6578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d657c:	f001 f9b0 	bl	d78e0 <__aeabi_dmul>
   d6580:	4632      	mov	r2, r6
   d6582:	463b      	mov	r3, r7
   d6584:	f000 fff8 	bl	d7578 <__aeabi_dsub>
   d6588:	460b      	mov	r3, r1
   d658a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d658e:	4602      	mov	r2, r0
   d6590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6594:	f000 fff0 	bl	d7578 <__aeabi_dsub>
   d6598:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d659c:	ebc3 0b0b 	rsb	fp, r3, fp
   d65a0:	4606      	mov	r6, r0
   d65a2:	460f      	mov	r7, r1
   d65a4:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   d65a8:	e9ca 6700 	strd	r6, r7, [sl]
   d65ac:	dd76      	ble.n	d669c <__ieee754_rem_pio2+0x414>
   d65ae:	a345      	add	r3, pc, #276	; (adr r3, d66c4 <__ieee754_rem_pio2+0x43c>)
   d65b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d65b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d65b8:	f001 f992 	bl	d78e0 <__aeabi_dmul>
   d65bc:	4606      	mov	r6, r0
   d65be:	460f      	mov	r7, r1
   d65c0:	4602      	mov	r2, r0
   d65c2:	460b      	mov	r3, r1
   d65c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d65c8:	f000 ffd6 	bl	d7578 <__aeabi_dsub>
   d65cc:	4602      	mov	r2, r0
   d65ce:	460b      	mov	r3, r1
   d65d0:	4680      	mov	r8, r0
   d65d2:	4689      	mov	r9, r1
   d65d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d65d8:	f000 ffce 	bl	d7578 <__aeabi_dsub>
   d65dc:	4632      	mov	r2, r6
   d65de:	463b      	mov	r3, r7
   d65e0:	f000 ffca 	bl	d7578 <__aeabi_dsub>
   d65e4:	a339      	add	r3, pc, #228	; (adr r3, d66cc <__ieee754_rem_pio2+0x444>)
   d65e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d65ea:	4606      	mov	r6, r0
   d65ec:	460f      	mov	r7, r1
   d65ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d65f2:	f001 f975 	bl	d78e0 <__aeabi_dmul>
   d65f6:	4632      	mov	r2, r6
   d65f8:	463b      	mov	r3, r7
   d65fa:	f000 ffbd 	bl	d7578 <__aeabi_dsub>
   d65fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6602:	e73b      	b.n	d647c <__ieee754_rem_pio2+0x1f4>
   d6604:	f000 ffba 	bl	d757c <__adddf3>
   d6608:	4b2d      	ldr	r3, [pc, #180]	; (d66c0 <__ieee754_rem_pio2+0x438>)
   d660a:	459b      	cmp	fp, r3
   d660c:	4604      	mov	r4, r0
   d660e:	460d      	mov	r5, r1
   d6610:	d026      	beq.n	d6660 <__ieee754_rem_pio2+0x3d8>
   d6612:	a325      	add	r3, pc, #148	; (adr r3, d66a8 <__ieee754_rem_pio2+0x420>)
   d6614:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6618:	f000 ffb0 	bl	d757c <__adddf3>
   d661c:	4602      	mov	r2, r0
   d661e:	460b      	mov	r3, r1
   d6620:	e9ca 2300 	strd	r2, r3, [sl]
   d6624:	4629      	mov	r1, r5
   d6626:	4620      	mov	r0, r4
   d6628:	f000 ffa6 	bl	d7578 <__aeabi_dsub>
   d662c:	a31e      	add	r3, pc, #120	; (adr r3, d66a8 <__ieee754_rem_pio2+0x420>)
   d662e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6632:	f000 ffa3 	bl	d757c <__adddf3>
   d6636:	f04f 35ff 	mov.w	r5, #4294967295
   d663a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d663e:	e6bc      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d6640:	f8da 2004 	ldr.w	r2, [sl, #4]
   d6644:	f8da 300c 	ldr.w	r3, [sl, #12]
   d6648:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   d664c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   d6650:	4245      	negs	r5, r0
   d6652:	f8ca 2004 	str.w	r2, [sl, #4]
   d6656:	f8ca 300c 	str.w	r3, [sl, #12]
   d665a:	e6ae      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d665c:	2303      	movs	r3, #3
   d665e:	e697      	b.n	d6390 <__ieee754_rem_pio2+0x108>
   d6660:	a313      	add	r3, pc, #76	; (adr r3, d66b0 <__ieee754_rem_pio2+0x428>)
   d6662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6666:	f000 ff89 	bl	d757c <__adddf3>
   d666a:	a313      	add	r3, pc, #76	; (adr r3, d66b8 <__ieee754_rem_pio2+0x430>)
   d666c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6670:	460d      	mov	r5, r1
   d6672:	4604      	mov	r4, r0
   d6674:	f000 ff82 	bl	d757c <__adddf3>
   d6678:	4602      	mov	r2, r0
   d667a:	460b      	mov	r3, r1
   d667c:	e9ca 2300 	strd	r2, r3, [sl]
   d6680:	4629      	mov	r1, r5
   d6682:	4620      	mov	r0, r4
   d6684:	f000 ff78 	bl	d7578 <__aeabi_dsub>
   d6688:	a30b      	add	r3, pc, #44	; (adr r3, d66b8 <__ieee754_rem_pio2+0x430>)
   d668a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d668e:	f000 ff75 	bl	d757c <__adddf3>
   d6692:	f04f 35ff 	mov.w	r5, #4294967295
   d6696:	e9ca 0102 	strd	r0, r1, [sl, #8]
   d669a:	e68e      	b.n	d63ba <__ieee754_rem_pio2+0x132>
   d669c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   d66a0:	e6f6      	b.n	d6490 <__ieee754_rem_pio2+0x208>
   d66a2:	bf00      	nop
   d66a4:	f3af 8000 	nop.w
   d66a8:	1a626331 	.word	0x1a626331
   d66ac:	3dd0b461 	.word	0x3dd0b461
   d66b0:	1a600000 	.word	0x1a600000
   d66b4:	3dd0b461 	.word	0x3dd0b461
   d66b8:	2e037073 	.word	0x2e037073
   d66bc:	3ba3198a 	.word	0x3ba3198a
   d66c0:	3ff921fb 	.word	0x3ff921fb
   d66c4:	2e000000 	.word	0x2e000000
   d66c8:	3ba3198a 	.word	0x3ba3198a
   d66cc:	252049c1 	.word	0x252049c1
   d66d0:	397b839a 	.word	0x397b839a
   d66d4:	00000000 	.word	0x00000000

000d66d8 <__kernel_cos>:
   d66d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66dc:	ec57 6b10 	vmov	r6, r7, d0
   d66e0:	ed2d 8b02 	vpush	{d8}
   d66e4:	eeb0 8a41 	vmov.f32	s16, s2
   d66e8:	eef0 8a61 	vmov.f32	s17, s3
   d66ec:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d66f0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   d66f4:	b083      	sub	sp, #12
   d66f6:	da72      	bge.n	d67de <__kernel_cos+0x106>
   d66f8:	ee10 0a10 	vmov	r0, s0
   d66fc:	4639      	mov	r1, r7
   d66fe:	f001 fb89 	bl	d7e14 <__aeabi_d2iz>
   d6702:	2800      	cmp	r0, #0
   d6704:	f000 80f6 	beq.w	d68f4 <__kernel_cos+0x21c>
   d6708:	4632      	mov	r2, r6
   d670a:	463b      	mov	r3, r7
   d670c:	4630      	mov	r0, r6
   d670e:	4639      	mov	r1, r7
   d6710:	f001 f8e6 	bl	d78e0 <__aeabi_dmul>
   d6714:	a37c      	add	r3, pc, #496	; (adr r3, d6908 <__kernel_cos+0x230>)
   d6716:	e9d3 2300 	ldrd	r2, r3, [r3]
   d671a:	4604      	mov	r4, r0
   d671c:	460d      	mov	r5, r1
   d671e:	f001 f8df 	bl	d78e0 <__aeabi_dmul>
   d6722:	a37b      	add	r3, pc, #492	; (adr r3, d6910 <__kernel_cos+0x238>)
   d6724:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6728:	f000 ff28 	bl	d757c <__adddf3>
   d672c:	4622      	mov	r2, r4
   d672e:	462b      	mov	r3, r5
   d6730:	f001 f8d6 	bl	d78e0 <__aeabi_dmul>
   d6734:	a378      	add	r3, pc, #480	; (adr r3, d6918 <__kernel_cos+0x240>)
   d6736:	e9d3 2300 	ldrd	r2, r3, [r3]
   d673a:	f000 ff1d 	bl	d7578 <__aeabi_dsub>
   d673e:	4622      	mov	r2, r4
   d6740:	462b      	mov	r3, r5
   d6742:	f001 f8cd 	bl	d78e0 <__aeabi_dmul>
   d6746:	a376      	add	r3, pc, #472	; (adr r3, d6920 <__kernel_cos+0x248>)
   d6748:	e9d3 2300 	ldrd	r2, r3, [r3]
   d674c:	f000 ff16 	bl	d757c <__adddf3>
   d6750:	4622      	mov	r2, r4
   d6752:	462b      	mov	r3, r5
   d6754:	f001 f8c4 	bl	d78e0 <__aeabi_dmul>
   d6758:	a373      	add	r3, pc, #460	; (adr r3, d6928 <__kernel_cos+0x250>)
   d675a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d675e:	f000 ff0b 	bl	d7578 <__aeabi_dsub>
   d6762:	4622      	mov	r2, r4
   d6764:	462b      	mov	r3, r5
   d6766:	f001 f8bb 	bl	d78e0 <__aeabi_dmul>
   d676a:	a371      	add	r3, pc, #452	; (adr r3, d6930 <__kernel_cos+0x258>)
   d676c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6770:	f000 ff04 	bl	d757c <__adddf3>
   d6774:	4622      	mov	r2, r4
   d6776:	462b      	mov	r3, r5
   d6778:	f001 f8b2 	bl	d78e0 <__aeabi_dmul>
   d677c:	4682      	mov	sl, r0
   d677e:	468b      	mov	fp, r1
   d6780:	2200      	movs	r2, #0
   d6782:	4b71      	ldr	r3, [pc, #452]	; (d6948 <__kernel_cos+0x270>)
   d6784:	4620      	mov	r0, r4
   d6786:	4629      	mov	r1, r5
   d6788:	f001 f8aa 	bl	d78e0 <__aeabi_dmul>
   d678c:	4652      	mov	r2, sl
   d678e:	4680      	mov	r8, r0
   d6790:	4689      	mov	r9, r1
   d6792:	465b      	mov	r3, fp
   d6794:	4620      	mov	r0, r4
   d6796:	4629      	mov	r1, r5
   d6798:	f001 f8a2 	bl	d78e0 <__aeabi_dmul>
   d679c:	ec53 2b18 	vmov	r2, r3, d8
   d67a0:	4604      	mov	r4, r0
   d67a2:	460d      	mov	r5, r1
   d67a4:	4630      	mov	r0, r6
   d67a6:	4639      	mov	r1, r7
   d67a8:	f001 f89a 	bl	d78e0 <__aeabi_dmul>
   d67ac:	4602      	mov	r2, r0
   d67ae:	460b      	mov	r3, r1
   d67b0:	4620      	mov	r0, r4
   d67b2:	4629      	mov	r1, r5
   d67b4:	f000 fee0 	bl	d7578 <__aeabi_dsub>
   d67b8:	4602      	mov	r2, r0
   d67ba:	460b      	mov	r3, r1
   d67bc:	4640      	mov	r0, r8
   d67be:	4649      	mov	r1, r9
   d67c0:	f000 feda 	bl	d7578 <__aeabi_dsub>
   d67c4:	4602      	mov	r2, r0
   d67c6:	460b      	mov	r3, r1
   d67c8:	2000      	movs	r0, #0
   d67ca:	4960      	ldr	r1, [pc, #384]	; (d694c <__kernel_cos+0x274>)
   d67cc:	f000 fed4 	bl	d7578 <__aeabi_dsub>
   d67d0:	ec41 0b10 	vmov	d0, r0, r1
   d67d4:	b003      	add	sp, #12
   d67d6:	ecbd 8b02 	vpop	{d8}
   d67da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67de:	ee10 2a10 	vmov	r2, s0
   d67e2:	ee10 0a10 	vmov	r0, s0
   d67e6:	463b      	mov	r3, r7
   d67e8:	4639      	mov	r1, r7
   d67ea:	f001 f879 	bl	d78e0 <__aeabi_dmul>
   d67ee:	a346      	add	r3, pc, #280	; (adr r3, d6908 <__kernel_cos+0x230>)
   d67f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67f4:	4604      	mov	r4, r0
   d67f6:	460d      	mov	r5, r1
   d67f8:	f001 f872 	bl	d78e0 <__aeabi_dmul>
   d67fc:	a344      	add	r3, pc, #272	; (adr r3, d6910 <__kernel_cos+0x238>)
   d67fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6802:	f000 febb 	bl	d757c <__adddf3>
   d6806:	4622      	mov	r2, r4
   d6808:	462b      	mov	r3, r5
   d680a:	f001 f869 	bl	d78e0 <__aeabi_dmul>
   d680e:	a342      	add	r3, pc, #264	; (adr r3, d6918 <__kernel_cos+0x240>)
   d6810:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6814:	f000 feb0 	bl	d7578 <__aeabi_dsub>
   d6818:	4622      	mov	r2, r4
   d681a:	462b      	mov	r3, r5
   d681c:	f001 f860 	bl	d78e0 <__aeabi_dmul>
   d6820:	a33f      	add	r3, pc, #252	; (adr r3, d6920 <__kernel_cos+0x248>)
   d6822:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6826:	f000 fea9 	bl	d757c <__adddf3>
   d682a:	4622      	mov	r2, r4
   d682c:	462b      	mov	r3, r5
   d682e:	f001 f857 	bl	d78e0 <__aeabi_dmul>
   d6832:	a33d      	add	r3, pc, #244	; (adr r3, d6928 <__kernel_cos+0x250>)
   d6834:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6838:	f000 fe9e 	bl	d7578 <__aeabi_dsub>
   d683c:	4622      	mov	r2, r4
   d683e:	462b      	mov	r3, r5
   d6840:	f001 f84e 	bl	d78e0 <__aeabi_dmul>
   d6844:	a33a      	add	r3, pc, #232	; (adr r3, d6930 <__kernel_cos+0x258>)
   d6846:	e9d3 2300 	ldrd	r2, r3, [r3]
   d684a:	f000 fe97 	bl	d757c <__adddf3>
   d684e:	462b      	mov	r3, r5
   d6850:	4622      	mov	r2, r4
   d6852:	f001 f845 	bl	d78e0 <__aeabi_dmul>
   d6856:	4b3e      	ldr	r3, [pc, #248]	; (d6950 <__kernel_cos+0x278>)
   d6858:	4599      	cmp	r9, r3
   d685a:	4682      	mov	sl, r0
   d685c:	468b      	mov	fp, r1
   d685e:	dd8f      	ble.n	d6780 <__kernel_cos+0xa8>
   d6860:	4b3c      	ldr	r3, [pc, #240]	; (d6954 <__kernel_cos+0x27c>)
   d6862:	4599      	cmp	r9, r3
   d6864:	dc3d      	bgt.n	d68e2 <__kernel_cos+0x20a>
   d6866:	2200      	movs	r2, #0
   d6868:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   d686c:	2000      	movs	r0, #0
   d686e:	4937      	ldr	r1, [pc, #220]	; (d694c <__kernel_cos+0x274>)
   d6870:	4690      	mov	r8, r2
   d6872:	4699      	mov	r9, r3
   d6874:	f000 fe80 	bl	d7578 <__aeabi_dsub>
   d6878:	e9cd 0100 	strd	r0, r1, [sp]
   d687c:	2200      	movs	r2, #0
   d687e:	4b32      	ldr	r3, [pc, #200]	; (d6948 <__kernel_cos+0x270>)
   d6880:	4620      	mov	r0, r4
   d6882:	4629      	mov	r1, r5
   d6884:	f001 f82c 	bl	d78e0 <__aeabi_dmul>
   d6888:	4642      	mov	r2, r8
   d688a:	464b      	mov	r3, r9
   d688c:	f000 fe74 	bl	d7578 <__aeabi_dsub>
   d6890:	4652      	mov	r2, sl
   d6892:	4680      	mov	r8, r0
   d6894:	4689      	mov	r9, r1
   d6896:	465b      	mov	r3, fp
   d6898:	4620      	mov	r0, r4
   d689a:	4629      	mov	r1, r5
   d689c:	f001 f820 	bl	d78e0 <__aeabi_dmul>
   d68a0:	ec53 2b18 	vmov	r2, r3, d8
   d68a4:	4604      	mov	r4, r0
   d68a6:	460d      	mov	r5, r1
   d68a8:	4630      	mov	r0, r6
   d68aa:	4639      	mov	r1, r7
   d68ac:	f001 f818 	bl	d78e0 <__aeabi_dmul>
   d68b0:	4602      	mov	r2, r0
   d68b2:	460b      	mov	r3, r1
   d68b4:	4620      	mov	r0, r4
   d68b6:	4629      	mov	r1, r5
   d68b8:	f000 fe5e 	bl	d7578 <__aeabi_dsub>
   d68bc:	4602      	mov	r2, r0
   d68be:	460b      	mov	r3, r1
   d68c0:	4640      	mov	r0, r8
   d68c2:	4649      	mov	r1, r9
   d68c4:	f000 fe58 	bl	d7578 <__aeabi_dsub>
   d68c8:	4602      	mov	r2, r0
   d68ca:	460b      	mov	r3, r1
   d68cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   d68d0:	f000 fe52 	bl	d7578 <__aeabi_dsub>
   d68d4:	ec41 0b10 	vmov	d0, r0, r1
   d68d8:	b003      	add	sp, #12
   d68da:	ecbd 8b02 	vpop	{d8}
   d68de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; d6938 <__kernel_cos+0x260>
   d68e6:	f04f 0800 	mov.w	r8, #0
   d68ea:	ed8d 7b00 	vstr	d7, [sp]
   d68ee:	f8df 9068 	ldr.w	r9, [pc, #104]	; d6958 <__kernel_cos+0x280>
   d68f2:	e7c3      	b.n	d687c <__kernel_cos+0x1a4>
   d68f4:	ed9f 0b12 	vldr	d0, [pc, #72]	; d6940 <__kernel_cos+0x268>
   d68f8:	b003      	add	sp, #12
   d68fa:	ecbd 8b02 	vpop	{d8}
   d68fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6902:	bf00      	nop
   d6904:	f3af 8000 	nop.w
   d6908:	be8838d4 	.word	0xbe8838d4
   d690c:	bda8fae9 	.word	0xbda8fae9
   d6910:	bdb4b1c4 	.word	0xbdb4b1c4
   d6914:	3e21ee9e 	.word	0x3e21ee9e
   d6918:	809c52ad 	.word	0x809c52ad
   d691c:	3e927e4f 	.word	0x3e927e4f
   d6920:	19cb1590 	.word	0x19cb1590
   d6924:	3efa01a0 	.word	0x3efa01a0
   d6928:	16c15177 	.word	0x16c15177
   d692c:	3f56c16c 	.word	0x3f56c16c
   d6930:	5555554c 	.word	0x5555554c
   d6934:	3fa55555 	.word	0x3fa55555
   d6938:	00000000 	.word	0x00000000
   d693c:	3fe70000 	.word	0x3fe70000
   d6940:	00000000 	.word	0x00000000
   d6944:	3ff00000 	.word	0x3ff00000
   d6948:	3fe00000 	.word	0x3fe00000
   d694c:	3ff00000 	.word	0x3ff00000
   d6950:	3fd33332 	.word	0x3fd33332
   d6954:	3fe90000 	.word	0x3fe90000
   d6958:	3fd20000 	.word	0x3fd20000
   d695c:	00000000 	.word	0x00000000

000d6960 <__kernel_rem_pio2>:
   d6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6964:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   d6968:	4c81      	ldr	r4, [pc, #516]	; (d6b70 <__kernel_rem_pio2+0x210>)
   d696a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   d696c:	4d81      	ldr	r5, [pc, #516]	; (d6b74 <__kernel_rem_pio2+0x214>)
   d696e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   d6972:	9407      	str	r4, [sp, #28]
   d6974:	4626      	mov	r6, r4
   d6976:	1ed4      	subs	r4, r2, #3
   d6978:	fb85 7504 	smull	r7, r5, r5, r4
   d697c:	17e4      	asrs	r4, r4, #31
   d697e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   d6982:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   d6986:	461d      	mov	r5, r3
   d6988:	930a      	str	r3, [sp, #40]	; 0x28
   d698a:	1c63      	adds	r3, r4, #1
   d698c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d6990:	3d01      	subs	r5, #1
   d6992:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   d6996:	9306      	str	r3, [sp, #24]
   d6998:	462b      	mov	r3, r5
   d699a:	940b      	str	r4, [sp, #44]	; 0x2c
   d699c:	9500      	str	r5, [sp, #0]
   d699e:	1b65      	subs	r5, r4, r5
   d69a0:	18f4      	adds	r4, r6, r3
   d69a2:	9003      	str	r0, [sp, #12]
   d69a4:	9108      	str	r1, [sp, #32]
   d69a6:	d416      	bmi.n	d69d6 <__kernel_rem_pio2+0x76>
   d69a8:	442c      	add	r4, r5
   d69aa:	3401      	adds	r4, #1
   d69ac:	ae22      	add	r6, sp, #136	; 0x88
   d69ae:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   d69b0:	e008      	b.n	d69c4 <__kernel_rem_pio2+0x64>
   d69b2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   d69b6:	f000 ff2d 	bl	d7814 <__aeabi_i2d>
   d69ba:	3501      	adds	r5, #1
   d69bc:	42a5      	cmp	r5, r4
   d69be:	e8e6 0102 	strd	r0, r1, [r6], #8
   d69c2:	d008      	beq.n	d69d6 <__kernel_rem_pio2+0x76>
   d69c4:	2d00      	cmp	r5, #0
   d69c6:	daf4      	bge.n	d69b2 <__kernel_rem_pio2+0x52>
   d69c8:	3501      	adds	r5, #1
   d69ca:	2000      	movs	r0, #0
   d69cc:	2100      	movs	r1, #0
   d69ce:	42a5      	cmp	r5, r4
   d69d0:	e8e6 0102 	strd	r0, r1, [r6], #8
   d69d4:	d1f6      	bne.n	d69c4 <__kernel_rem_pio2+0x64>
   d69d6:	9b07      	ldr	r3, [sp, #28]
   d69d8:	2b00      	cmp	r3, #0
   d69da:	f2c0 83c2 	blt.w	d7162 <__kernel_rem_pio2+0x802>
   d69de:	9b07      	ldr	r3, [sp, #28]
   d69e0:	f103 0b01 	add.w	fp, r3, #1
   d69e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d69e6:	a922      	add	r1, sp, #136	; 0x88
   d69e8:	00db      	lsls	r3, r3, #3
   d69ea:	461a      	mov	r2, r3
   d69ec:	eb01 0903 	add.w	r9, r1, r3
   d69f0:	9304      	str	r3, [sp, #16]
   d69f2:	9b03      	ldr	r3, [sp, #12]
   d69f4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   d69f8:	4619      	mov	r1, r3
   d69fa:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   d69fe:	eb01 0802 	add.w	r8, r1, r2
   d6a02:	9b00      	ldr	r3, [sp, #0]
   d6a04:	2b00      	cmp	r3, #0
   d6a06:	f2c0 818f 	blt.w	d6d28 <__kernel_rem_pio2+0x3c8>
   d6a0a:	9c03      	ldr	r4, [sp, #12]
   d6a0c:	464d      	mov	r5, r9
   d6a0e:	2600      	movs	r6, #0
   d6a10:	2700      	movs	r7, #0
   d6a12:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   d6a16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   d6a1a:	f000 ff61 	bl	d78e0 <__aeabi_dmul>
   d6a1e:	4602      	mov	r2, r0
   d6a20:	460b      	mov	r3, r1
   d6a22:	4630      	mov	r0, r6
   d6a24:	4639      	mov	r1, r7
   d6a26:	f000 fda9 	bl	d757c <__adddf3>
   d6a2a:	4544      	cmp	r4, r8
   d6a2c:	4606      	mov	r6, r0
   d6a2e:	460f      	mov	r7, r1
   d6a30:	d1ef      	bne.n	d6a12 <__kernel_rem_pio2+0xb2>
   d6a32:	e8ea 6702 	strd	r6, r7, [sl], #8
   d6a36:	45da      	cmp	sl, fp
   d6a38:	f109 0908 	add.w	r9, r9, #8
   d6a3c:	d1e1      	bne.n	d6a02 <__kernel_rem_pio2+0xa2>
   d6a3e:	9907      	ldr	r1, [sp, #28]
   d6a40:	9804      	ldr	r0, [sp, #16]
   d6a42:	9c03      	ldr	r4, [sp, #12]
   d6a44:	9104      	str	r1, [sp, #16]
   d6a46:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   d6a4a:	3b02      	subs	r3, #2
   d6a4c:	009b      	lsls	r3, r3, #2
   d6a4e:	4420      	add	r0, r4
   d6a50:	1d1a      	adds	r2, r3, #4
   d6a52:	4683      	mov	fp, r0
   d6a54:	a80e      	add	r0, sp, #56	; 0x38
   d6a56:	4402      	add	r2, r0
   d6a58:	4403      	add	r3, r0
   d6a5a:	920d      	str	r2, [sp, #52]	; 0x34
   d6a5c:	930c      	str	r3, [sp, #48]	; 0x30
   d6a5e:	9a04      	ldr	r2, [sp, #16]
   d6a60:	a99a      	add	r1, sp, #616	; 0x268
   d6a62:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   d6a66:	2a00      	cmp	r2, #0
   d6a68:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   d6a6c:	dd29      	ble.n	d6ac2 <__kernel_rem_pio2+0x162>
   d6a6e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   d6a72:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   d6a76:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   d6a7a:	2200      	movs	r2, #0
   d6a7c:	4b3e      	ldr	r3, [pc, #248]	; (d6b78 <__kernel_rem_pio2+0x218>)
   d6a7e:	4620      	mov	r0, r4
   d6a80:	4629      	mov	r1, r5
   d6a82:	f000 ff2d 	bl	d78e0 <__aeabi_dmul>
   d6a86:	f001 f9c5 	bl	d7e14 <__aeabi_d2iz>
   d6a8a:	f000 fec3 	bl	d7814 <__aeabi_i2d>
   d6a8e:	2200      	movs	r2, #0
   d6a90:	4b3a      	ldr	r3, [pc, #232]	; (d6b7c <__kernel_rem_pio2+0x21c>)
   d6a92:	4606      	mov	r6, r0
   d6a94:	460f      	mov	r7, r1
   d6a96:	f000 ff23 	bl	d78e0 <__aeabi_dmul>
   d6a9a:	4602      	mov	r2, r0
   d6a9c:	460b      	mov	r3, r1
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	4629      	mov	r1, r5
   d6aa2:	f000 fd69 	bl	d7578 <__aeabi_dsub>
   d6aa6:	f001 f9b5 	bl	d7e14 <__aeabi_d2iz>
   d6aaa:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   d6aae:	f849 0f04 	str.w	r0, [r9, #4]!
   d6ab2:	4639      	mov	r1, r7
   d6ab4:	4630      	mov	r0, r6
   d6ab6:	f000 fd61 	bl	d757c <__adddf3>
   d6aba:	45d0      	cmp	r8, sl
   d6abc:	4604      	mov	r4, r0
   d6abe:	460d      	mov	r5, r1
   d6ac0:	d1db      	bne.n	d6a7a <__kernel_rem_pio2+0x11a>
   d6ac2:	f8dd 9018 	ldr.w	r9, [sp, #24]
   d6ac6:	ec45 4b10 	vmov	d0, r4, r5
   d6aca:	4648      	mov	r0, r9
   d6acc:	f000 fcbc 	bl	d7448 <scalbn>
   d6ad0:	ec55 4b10 	vmov	r4, r5, d0
   d6ad4:	2200      	movs	r2, #0
   d6ad6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   d6ada:	ee10 0a10 	vmov	r0, s0
   d6ade:	4629      	mov	r1, r5
   d6ae0:	f000 fefe 	bl	d78e0 <__aeabi_dmul>
   d6ae4:	ec41 0b10 	vmov	d0, r0, r1
   d6ae8:	f000 fc1e 	bl	d7328 <floor>
   d6aec:	2200      	movs	r2, #0
   d6aee:	ec51 0b10 	vmov	r0, r1, d0
   d6af2:	4b23      	ldr	r3, [pc, #140]	; (d6b80 <__kernel_rem_pio2+0x220>)
   d6af4:	f000 fef4 	bl	d78e0 <__aeabi_dmul>
   d6af8:	4602      	mov	r2, r0
   d6afa:	460b      	mov	r3, r1
   d6afc:	4620      	mov	r0, r4
   d6afe:	4629      	mov	r1, r5
   d6b00:	f000 fd3a 	bl	d7578 <__aeabi_dsub>
   d6b04:	460d      	mov	r5, r1
   d6b06:	4604      	mov	r4, r0
   d6b08:	f001 f984 	bl	d7e14 <__aeabi_d2iz>
   d6b0c:	4680      	mov	r8, r0
   d6b0e:	f000 fe81 	bl	d7814 <__aeabi_i2d>
   d6b12:	460b      	mov	r3, r1
   d6b14:	4602      	mov	r2, r0
   d6b16:	4629      	mov	r1, r5
   d6b18:	4620      	mov	r0, r4
   d6b1a:	f000 fd2d 	bl	d7578 <__aeabi_dsub>
   d6b1e:	464b      	mov	r3, r9
   d6b20:	2b00      	cmp	r3, #0
   d6b22:	4606      	mov	r6, r0
   d6b24:	460f      	mov	r7, r1
   d6b26:	f340 80e5 	ble.w	d6cf4 <__kernel_rem_pio2+0x394>
   d6b2a:	9a04      	ldr	r2, [sp, #16]
   d6b2c:	a90e      	add	r1, sp, #56	; 0x38
   d6b2e:	3a01      	subs	r2, #1
   d6b30:	f1c9 0318 	rsb	r3, r9, #24
   d6b34:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   d6b38:	fa45 f103 	asr.w	r1, r5, r3
   d6b3c:	fa01 f303 	lsl.w	r3, r1, r3
   d6b40:	a80e      	add	r0, sp, #56	; 0x38
   d6b42:	1aeb      	subs	r3, r5, r3
   d6b44:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   d6b48:	f1c9 0517 	rsb	r5, r9, #23
   d6b4c:	4488      	add	r8, r1
   d6b4e:	fa43 f505 	asr.w	r5, r3, r5
   d6b52:	2d00      	cmp	r5, #0
   d6b54:	dd41      	ble.n	d6bda <__kernel_rem_pio2+0x27a>
   d6b56:	9b04      	ldr	r3, [sp, #16]
   d6b58:	2b00      	cmp	r3, #0
   d6b5a:	f108 0801 	add.w	r8, r8, #1
   d6b5e:	f340 82c9 	ble.w	d70f4 <__kernel_rem_pio2+0x794>
   d6b62:	2200      	movs	r2, #0
   d6b64:	4614      	mov	r4, r2
   d6b66:	a90d      	add	r1, sp, #52	; 0x34
   d6b68:	9804      	ldr	r0, [sp, #16]
   d6b6a:	46ae      	mov	lr, r5
   d6b6c:	e012      	b.n	d6b94 <__kernel_rem_pio2+0x234>
   d6b6e:	bf00      	nop
   d6b70:	000d894c 	.word	0x000d894c
   d6b74:	2aaaaaab 	.word	0x2aaaaaab
   d6b78:	3e700000 	.word	0x3e700000
   d6b7c:	41700000 	.word	0x41700000
   d6b80:	40200000 	.word	0x40200000
   d6b84:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   d6b88:	b10b      	cbz	r3, d6b8e <__kernel_rem_pio2+0x22e>
   d6b8a:	600d      	str	r5, [r1, #0]
   d6b8c:	2401      	movs	r4, #1
   d6b8e:	3201      	adds	r2, #1
   d6b90:	4290      	cmp	r0, r2
   d6b92:	dd0d      	ble.n	d6bb0 <__kernel_rem_pio2+0x250>
   d6b94:	f851 3f04 	ldr.w	r3, [r1, #4]!
   d6b98:	2c00      	cmp	r4, #0
   d6b9a:	d0f3      	beq.n	d6b84 <__kernel_rem_pio2+0x224>
   d6b9c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   d6ba0:	3201      	adds	r2, #1
   d6ba2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   d6ba6:	4290      	cmp	r0, r2
   d6ba8:	600b      	str	r3, [r1, #0]
   d6baa:	f04f 0401 	mov.w	r4, #1
   d6bae:	dcf1      	bgt.n	d6b94 <__kernel_rem_pio2+0x234>
   d6bb0:	4675      	mov	r5, lr
   d6bb2:	9b06      	ldr	r3, [sp, #24]
   d6bb4:	2b00      	cmp	r3, #0
   d6bb6:	dd0e      	ble.n	d6bd6 <__kernel_rem_pio2+0x276>
   d6bb8:	2b01      	cmp	r3, #1
   d6bba:	f000 80a3 	beq.w	d6d04 <__kernel_rem_pio2+0x3a4>
   d6bbe:	2b02      	cmp	r3, #2
   d6bc0:	d109      	bne.n	d6bd6 <__kernel_rem_pio2+0x276>
   d6bc2:	9b04      	ldr	r3, [sp, #16]
   d6bc4:	1e5a      	subs	r2, r3, #1
   d6bc6:	ab0e      	add	r3, sp, #56	; 0x38
   d6bc8:	a90e      	add	r1, sp, #56	; 0x38
   d6bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   d6bce:	f3c3 0315 	ubfx	r3, r3, #0, #22
   d6bd2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   d6bd6:	2d02      	cmp	r5, #2
   d6bd8:	d074      	beq.n	d6cc4 <__kernel_rem_pio2+0x364>
   d6bda:	2200      	movs	r2, #0
   d6bdc:	2300      	movs	r3, #0
   d6bde:	4630      	mov	r0, r6
   d6be0:	4639      	mov	r1, r7
   d6be2:	f001 f8e5 	bl	d7db0 <__aeabi_dcmpeq>
   d6be6:	2800      	cmp	r0, #0
   d6be8:	f000 8249 	beq.w	d707e <__kernel_rem_pio2+0x71e>
   d6bec:	9a04      	ldr	r2, [sp, #16]
   d6bee:	9b07      	ldr	r3, [sp, #28]
   d6bf0:	1e50      	subs	r0, r2, #1
   d6bf2:	4283      	cmp	r3, r0
   d6bf4:	dc10      	bgt.n	d6c18 <__kernel_rem_pio2+0x2b8>
   d6bf6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   d6bfa:	3b01      	subs	r3, #1
   d6bfc:	aa0e      	add	r2, sp, #56	; 0x38
   d6bfe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   d6c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d6c04:	2200      	movs	r2, #0
   d6c06:	f853 1904 	ldr.w	r1, [r3], #-4
   d6c0a:	42a3      	cmp	r3, r4
   d6c0c:	ea42 0201 	orr.w	r2, r2, r1
   d6c10:	d1f9      	bne.n	d6c06 <__kernel_rem_pio2+0x2a6>
   d6c12:	2a00      	cmp	r2, #0
   d6c14:	f040 80a4 	bne.w	d6d60 <__kernel_rem_pio2+0x400>
   d6c18:	9b07      	ldr	r3, [sp, #28]
   d6c1a:	aa0e      	add	r2, sp, #56	; 0x38
   d6c1c:	3b01      	subs	r3, #1
   d6c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   d6c22:	2b00      	cmp	r3, #0
   d6c24:	f040 8264 	bne.w	d70f0 <__kernel_rem_pio2+0x790>
   d6c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d6c2a:	2301      	movs	r3, #1
   d6c2c:	f852 1904 	ldr.w	r1, [r2], #-4
   d6c30:	3301      	adds	r3, #1
   d6c32:	2900      	cmp	r1, #0
   d6c34:	d0fa      	beq.n	d6c2c <__kernel_rem_pio2+0x2cc>
   d6c36:	9a04      	ldr	r2, [sp, #16]
   d6c38:	18d3      	adds	r3, r2, r3
   d6c3a:	f102 0a01 	add.w	sl, r2, #1
   d6c3e:	459a      	cmp	sl, r3
   d6c40:	9309      	str	r3, [sp, #36]	; 0x24
   d6c42:	dc3c      	bgt.n	d6cbe <__kernel_rem_pio2+0x35e>
   d6c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d6c48:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6c4a:	eb0a 0903 	add.w	r9, sl, r3
   d6c4e:	9b04      	ldr	r3, [sp, #16]
   d6c50:	4698      	mov	r8, r3
   d6c52:	4490      	add	r8, r2
   d6c54:	188b      	adds	r3, r1, r2
   d6c56:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   d6c5a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   d6c5c:	f109 39ff 	add.w	r9, r9, #4294967295
   d6c60:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   d6c64:	aa22      	add	r2, sp, #136	; 0x88
   d6c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   d6c6a:	9304      	str	r3, [sp, #16]
   d6c6c:	ab72      	add	r3, sp, #456	; 0x1c8
   d6c6e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   d6c72:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   d6c76:	f859 0f04 	ldr.w	r0, [r9, #4]!
   d6c7a:	f000 fdcb 	bl	d7814 <__aeabi_i2d>
   d6c7e:	9b00      	ldr	r3, [sp, #0]
   d6c80:	2b00      	cmp	r3, #0
   d6c82:	e8e8 0102 	strd	r0, r1, [r8], #8
   d6c86:	f04f 0600 	mov.w	r6, #0
   d6c8a:	f04f 0700 	mov.w	r7, #0
   d6c8e:	db11      	blt.n	d6cb4 <__kernel_rem_pio2+0x354>
   d6c90:	9c03      	ldr	r4, [sp, #12]
   d6c92:	4645      	mov	r5, r8
   d6c94:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   d6c98:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   d6c9c:	f000 fe20 	bl	d78e0 <__aeabi_dmul>
   d6ca0:	4602      	mov	r2, r0
   d6ca2:	460b      	mov	r3, r1
   d6ca4:	4630      	mov	r0, r6
   d6ca6:	4639      	mov	r1, r7
   d6ca8:	f000 fc68 	bl	d757c <__adddf3>
   d6cac:	455c      	cmp	r4, fp
   d6cae:	4606      	mov	r6, r0
   d6cb0:	460f      	mov	r7, r1
   d6cb2:	d1ef      	bne.n	d6c94 <__kernel_rem_pio2+0x334>
   d6cb4:	9b04      	ldr	r3, [sp, #16]
   d6cb6:	4598      	cmp	r8, r3
   d6cb8:	e8ea 6702 	strd	r6, r7, [sl], #8
   d6cbc:	d1db      	bne.n	d6c76 <__kernel_rem_pio2+0x316>
   d6cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6cc0:	9304      	str	r3, [sp, #16]
   d6cc2:	e6cc      	b.n	d6a5e <__kernel_rem_pio2+0xfe>
   d6cc4:	4632      	mov	r2, r6
   d6cc6:	463b      	mov	r3, r7
   d6cc8:	2000      	movs	r0, #0
   d6cca:	49b3      	ldr	r1, [pc, #716]	; (d6f98 <__kernel_rem_pio2+0x638>)
   d6ccc:	f000 fc54 	bl	d7578 <__aeabi_dsub>
   d6cd0:	4606      	mov	r6, r0
   d6cd2:	460f      	mov	r7, r1
   d6cd4:	2c00      	cmp	r4, #0
   d6cd6:	d080      	beq.n	d6bda <__kernel_rem_pio2+0x27a>
   d6cd8:	9806      	ldr	r0, [sp, #24]
   d6cda:	ed9f 0bab 	vldr	d0, [pc, #684]	; d6f88 <__kernel_rem_pio2+0x628>
   d6cde:	f000 fbb3 	bl	d7448 <scalbn>
   d6ce2:	4630      	mov	r0, r6
   d6ce4:	4639      	mov	r1, r7
   d6ce6:	ec53 2b10 	vmov	r2, r3, d0
   d6cea:	f000 fc45 	bl	d7578 <__aeabi_dsub>
   d6cee:	4606      	mov	r6, r0
   d6cf0:	460f      	mov	r7, r1
   d6cf2:	e772      	b.n	d6bda <__kernel_rem_pio2+0x27a>
   d6cf4:	d111      	bne.n	d6d1a <__kernel_rem_pio2+0x3ba>
   d6cf6:	9b04      	ldr	r3, [sp, #16]
   d6cf8:	aa0e      	add	r2, sp, #56	; 0x38
   d6cfa:	3b01      	subs	r3, #1
   d6cfc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   d6d00:	15ed      	asrs	r5, r5, #23
   d6d02:	e726      	b.n	d6b52 <__kernel_rem_pio2+0x1f2>
   d6d04:	9b04      	ldr	r3, [sp, #16]
   d6d06:	1e5a      	subs	r2, r3, #1
   d6d08:	ab0e      	add	r3, sp, #56	; 0x38
   d6d0a:	a90e      	add	r1, sp, #56	; 0x38
   d6d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   d6d10:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6d14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   d6d18:	e75d      	b.n	d6bd6 <__kernel_rem_pio2+0x276>
   d6d1a:	2200      	movs	r2, #0
   d6d1c:	4b9f      	ldr	r3, [pc, #636]	; (d6f9c <__kernel_rem_pio2+0x63c>)
   d6d1e:	f001 f865 	bl	d7dec <__aeabi_dcmpge>
   d6d22:	b958      	cbnz	r0, d6d3c <__kernel_rem_pio2+0x3dc>
   d6d24:	4605      	mov	r5, r0
   d6d26:	e758      	b.n	d6bda <__kernel_rem_pio2+0x27a>
   d6d28:	2600      	movs	r6, #0
   d6d2a:	2700      	movs	r7, #0
   d6d2c:	e8ea 6702 	strd	r6, r7, [sl], #8
   d6d30:	45da      	cmp	sl, fp
   d6d32:	f109 0908 	add.w	r9, r9, #8
   d6d36:	f47f ae64 	bne.w	d6a02 <__kernel_rem_pio2+0xa2>
   d6d3a:	e680      	b.n	d6a3e <__kernel_rem_pio2+0xde>
   d6d3c:	9b04      	ldr	r3, [sp, #16]
   d6d3e:	2b00      	cmp	r3, #0
   d6d40:	f108 0801 	add.w	r8, r8, #1
   d6d44:	bfc8      	it	gt
   d6d46:	2502      	movgt	r5, #2
   d6d48:	f73f af0b 	bgt.w	d6b62 <__kernel_rem_pio2+0x202>
   d6d4c:	4632      	mov	r2, r6
   d6d4e:	463b      	mov	r3, r7
   d6d50:	2000      	movs	r0, #0
   d6d52:	4991      	ldr	r1, [pc, #580]	; (d6f98 <__kernel_rem_pio2+0x638>)
   d6d54:	f000 fc10 	bl	d7578 <__aeabi_dsub>
   d6d58:	2502      	movs	r5, #2
   d6d5a:	4606      	mov	r6, r0
   d6d5c:	460f      	mov	r7, r1
   d6d5e:	e73c      	b.n	d6bda <__kernel_rem_pio2+0x27a>
   d6d60:	a90e      	add	r1, sp, #56	; 0x38
   d6d62:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   d6d66:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   d6d6a:	9906      	ldr	r1, [sp, #24]
   d6d6c:	9000      	str	r0, [sp, #0]
   d6d6e:	3918      	subs	r1, #24
   d6d70:	4602      	mov	r2, r0
   d6d72:	9503      	str	r5, [sp, #12]
   d6d74:	9106      	str	r1, [sp, #24]
   d6d76:	b96b      	cbnz	r3, d6d94 <__kernel_rem_pio2+0x434>
   d6d78:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   d6d7c:	3b01      	subs	r3, #1
   d6d7e:	a80e      	add	r0, sp, #56	; 0x38
   d6d80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   d6d84:	f853 0904 	ldr.w	r0, [r3], #-4
   d6d88:	3a01      	subs	r2, #1
   d6d8a:	3918      	subs	r1, #24
   d6d8c:	2800      	cmp	r0, #0
   d6d8e:	d0f9      	beq.n	d6d84 <__kernel_rem_pio2+0x424>
   d6d90:	9200      	str	r2, [sp, #0]
   d6d92:	9106      	str	r1, [sp, #24]
   d6d94:	9806      	ldr	r0, [sp, #24]
   d6d96:	ed9f 0b7c 	vldr	d0, [pc, #496]	; d6f88 <__kernel_rem_pio2+0x628>
   d6d9a:	f000 fb55 	bl	d7448 <scalbn>
   d6d9e:	9b00      	ldr	r3, [sp, #0]
   d6da0:	2b00      	cmp	r3, #0
   d6da2:	ec55 4b10 	vmov	r4, r5, d0
   d6da6:	f2c0 81c1 	blt.w	d712c <__kernel_rem_pio2+0x7cc>
   d6daa:	00da      	lsls	r2, r3, #3
   d6dac:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   d6db0:	a90e      	add	r1, sp, #56	; 0x38
   d6db2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   d6db6:	eb08 0b02 	add.w	fp, r8, r2
   d6dba:	9206      	str	r2, [sp, #24]
   d6dbc:	3604      	adds	r6, #4
   d6dbe:	f10b 0708 	add.w	r7, fp, #8
   d6dc2:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   d6dc6:	f000 fd25 	bl	d7814 <__aeabi_i2d>
   d6dca:	4622      	mov	r2, r4
   d6dcc:	462b      	mov	r3, r5
   d6dce:	f000 fd87 	bl	d78e0 <__aeabi_dmul>
   d6dd2:	2200      	movs	r2, #0
   d6dd4:	e967 0102 	strd	r0, r1, [r7, #-8]!
   d6dd8:	4b71      	ldr	r3, [pc, #452]	; (d6fa0 <__kernel_rem_pio2+0x640>)
   d6dda:	4620      	mov	r0, r4
   d6ddc:	4629      	mov	r1, r5
   d6dde:	f000 fd7f 	bl	d78e0 <__aeabi_dmul>
   d6de2:	4547      	cmp	r7, r8
   d6de4:	4604      	mov	r4, r0
   d6de6:	460d      	mov	r5, r1
   d6de8:	d1eb      	bne.n	d6dc2 <__kernel_rem_pio2+0x462>
   d6dea:	ac4a      	add	r4, sp, #296	; 0x128
   d6dec:	f8dd 901c 	ldr.w	r9, [sp, #28]
   d6df0:	9404      	str	r4, [sp, #16]
   d6df2:	f04f 0a00 	mov.w	sl, #0
   d6df6:	f1b9 0f00 	cmp.w	r9, #0
   d6dfa:	f2c0 812b 	blt.w	d7054 <__kernel_rem_pio2+0x6f4>
   d6dfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; d6fa4 <__kernel_rem_pio2+0x644>
   d6e02:	465d      	mov	r5, fp
   d6e04:	a362      	add	r3, pc, #392	; (adr r3, d6f90 <__kernel_rem_pio2+0x630>)
   d6e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e0a:	2600      	movs	r6, #0
   d6e0c:	2700      	movs	r7, #0
   d6e0e:	2400      	movs	r4, #0
   d6e10:	e003      	b.n	d6e1a <__kernel_rem_pio2+0x4ba>
   d6e12:	45a2      	cmp	sl, r4
   d6e14:	db10      	blt.n	d6e38 <__kernel_rem_pio2+0x4d8>
   d6e16:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   d6e1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   d6e1e:	f000 fd5f 	bl	d78e0 <__aeabi_dmul>
   d6e22:	4602      	mov	r2, r0
   d6e24:	460b      	mov	r3, r1
   d6e26:	4630      	mov	r0, r6
   d6e28:	4639      	mov	r1, r7
   d6e2a:	f000 fba7 	bl	d757c <__adddf3>
   d6e2e:	3401      	adds	r4, #1
   d6e30:	45a1      	cmp	r9, r4
   d6e32:	4606      	mov	r6, r0
   d6e34:	460f      	mov	r7, r1
   d6e36:	daec      	bge.n	d6e12 <__kernel_rem_pio2+0x4b2>
   d6e38:	9b04      	ldr	r3, [sp, #16]
   d6e3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   d6e3e:	f1ab 0b08 	sub.w	fp, fp, #8
   d6e42:	e9c3 6700 	strd	r6, r7, [r3]
   d6e46:	ab70      	add	r3, sp, #448	; 0x1c0
   d6e48:	459b      	cmp	fp, r3
   d6e4a:	f10a 0a01 	add.w	sl, sl, #1
   d6e4e:	d1d2      	bne.n	d6df6 <__kernel_rem_pio2+0x496>
   d6e50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   d6e52:	9c04      	ldr	r4, [sp, #16]
   d6e54:	2b03      	cmp	r3, #3
   d6e56:	f200 808d 	bhi.w	d6f74 <__kernel_rem_pio2+0x614>
   d6e5a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6e5e:	00dd      	.short	0x00dd
   d6e60:	00a500a5 	.word	0x00a500a5
   d6e64:	0004      	.short	0x0004
   d6e66:	9b00      	ldr	r3, [sp, #0]
   d6e68:	2b00      	cmp	r3, #0
   d6e6a:	f340 815c 	ble.w	d7126 <__kernel_rem_pio2+0x7c6>
   d6e6e:	9b00      	ldr	r3, [sp, #0]
   d6e70:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   d6e74:	9b06      	ldr	r3, [sp, #24]
   d6e76:	f10b 3bff 	add.w	fp, fp, #4294967295
   d6e7a:	18e2      	adds	r2, r4, r3
   d6e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   d6e80:	e9d2 8900 	ldrd	r8, r9, [r2]
   d6e84:	f103 0208 	add.w	r2, r3, #8
   d6e88:	3310      	adds	r3, #16
   d6e8a:	eb04 0a02 	add.w	sl, r4, r2
   d6e8e:	18e5      	adds	r5, r4, r3
   d6e90:	ed3a 7b02 	vldmdb	sl!, {d7}
   d6e94:	4642      	mov	r2, r8
   d6e96:	464b      	mov	r3, r9
   d6e98:	ec51 0b17 	vmov	r0, r1, d7
   d6e9c:	ed8d 7b04 	vstr	d7, [sp, #16]
   d6ea0:	f000 fb6c 	bl	d757c <__adddf3>
   d6ea4:	4606      	mov	r6, r0
   d6ea6:	460f      	mov	r7, r1
   d6ea8:	4602      	mov	r2, r0
   d6eaa:	460b      	mov	r3, r1
   d6eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6eb0:	f000 fb62 	bl	d7578 <__aeabi_dsub>
   d6eb4:	464b      	mov	r3, r9
   d6eb6:	4642      	mov	r2, r8
   d6eb8:	f000 fb60 	bl	d757c <__adddf3>
   d6ebc:	e965 0102 	strd	r0, r1, [r5, #-8]!
   d6ec0:	ab4c      	add	r3, sp, #304	; 0x130
   d6ec2:	429d      	cmp	r5, r3
   d6ec4:	46b0      	mov	r8, r6
   d6ec6:	46b9      	mov	r9, r7
   d6ec8:	e9ca 6700 	strd	r6, r7, [sl]
   d6ecc:	d1e0      	bne.n	d6e90 <__kernel_rem_pio2+0x530>
   d6ece:	9b00      	ldr	r3, [sp, #0]
   d6ed0:	2b01      	cmp	r3, #1
   d6ed2:	f340 8128 	ble.w	d7126 <__kernel_rem_pio2+0x7c6>
   d6ed6:	9b06      	ldr	r3, [sp, #24]
   d6ed8:	4423      	add	r3, r4
   d6eda:	ed93 7b00 	vldr	d7, [r3]
   d6ede:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   d6ee2:	f10b 0a10 	add.w	sl, fp, #16
   d6ee6:	ed8d 7b00 	vstr	d7, [sp]
   d6eea:	44a2      	add	sl, r4
   d6eec:	f10b 0b08 	add.w	fp, fp, #8
   d6ef0:	eb04 050b 	add.w	r5, r4, fp
   d6ef4:	46d0      	mov	r8, sl
   d6ef6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   d6efa:	f8cd a010 	str.w	sl, [sp, #16]
   d6efe:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   d6f02:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6f06:	464a      	mov	r2, r9
   d6f08:	4653      	mov	r3, sl
   d6f0a:	f000 fb37 	bl	d757c <__adddf3>
   d6f0e:	4606      	mov	r6, r0
   d6f10:	460f      	mov	r7, r1
   d6f12:	4602      	mov	r2, r0
   d6f14:	460b      	mov	r3, r1
   d6f16:	4648      	mov	r0, r9
   d6f18:	4651      	mov	r1, sl
   d6f1a:	f000 fb2d 	bl	d7578 <__aeabi_dsub>
   d6f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6f22:	f000 fb2b 	bl	d757c <__adddf3>
   d6f26:	e968 0102 	strd	r0, r1, [r8, #-8]!
   d6f2a:	45c3      	cmp	fp, r8
   d6f2c:	e9cd 6700 	strd	r6, r7, [sp]
   d6f30:	e9c5 6700 	strd	r6, r7, [r5]
   d6f34:	d1e3      	bne.n	d6efe <__kernel_rem_pio2+0x59e>
   d6f36:	f8dd a010 	ldr.w	sl, [sp, #16]
   d6f3a:	2000      	movs	r0, #0
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   d6f42:	f000 fb1b 	bl	d757c <__adddf3>
   d6f46:	45d3      	cmp	fp, sl
   d6f48:	d1f9      	bne.n	d6f3e <__kernel_rem_pio2+0x5de>
   d6f4a:	9b03      	ldr	r3, [sp, #12]
   d6f4c:	2b00      	cmp	r3, #0
   d6f4e:	f000 80d3 	beq.w	d70f8 <__kernel_rem_pio2+0x798>
   d6f52:	6862      	ldr	r2, [r4, #4]
   d6f54:	68e3      	ldr	r3, [r4, #12]
   d6f56:	9f08      	ldr	r7, [sp, #32]
   d6f58:	6825      	ldr	r5, [r4, #0]
   d6f5a:	68a4      	ldr	r4, [r4, #8]
   d6f5c:	603d      	str	r5, [r7, #0]
   d6f5e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   d6f62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   d6f66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d6f6a:	607a      	str	r2, [r7, #4]
   d6f6c:	60fb      	str	r3, [r7, #12]
   d6f6e:	60bc      	str	r4, [r7, #8]
   d6f70:	6138      	str	r0, [r7, #16]
   d6f72:	6179      	str	r1, [r7, #20]
   d6f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6f76:	f003 0007 	and.w	r0, r3, #7
   d6f7a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   d6f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f82:	bf00      	nop
   d6f84:	f3af 8000 	nop.w
   d6f88:	00000000 	.word	0x00000000
   d6f8c:	3ff00000 	.word	0x3ff00000
   d6f90:	40000000 	.word	0x40000000
   d6f94:	3ff921fb 	.word	0x3ff921fb
   d6f98:	3ff00000 	.word	0x3ff00000
   d6f9c:	3fe00000 	.word	0x3fe00000
   d6fa0:	3e700000 	.word	0x3e700000
   d6fa4:	000d8968 	.word	0x000d8968
   d6fa8:	9d06      	ldr	r5, [sp, #24]
   d6faa:	3508      	adds	r5, #8
   d6fac:	4425      	add	r5, r4
   d6fae:	2000      	movs	r0, #0
   d6fb0:	2100      	movs	r1, #0
   d6fb2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   d6fb6:	f000 fae1 	bl	d757c <__adddf3>
   d6fba:	42a5      	cmp	r5, r4
   d6fbc:	d1f9      	bne.n	d6fb2 <__kernel_rem_pio2+0x652>
   d6fbe:	9b03      	ldr	r3, [sp, #12]
   d6fc0:	2b00      	cmp	r3, #0
   d6fc2:	d04a      	beq.n	d705a <__kernel_rem_pio2+0x6fa>
   d6fc4:	9e08      	ldr	r6, [sp, #32]
   d6fc6:	4602      	mov	r2, r0
   d6fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6fcc:	e886 000c 	stmia.w	r6, {r2, r3}
   d6fd0:	460b      	mov	r3, r1
   d6fd2:	4602      	mov	r2, r0
   d6fd4:	e9d4 0100 	ldrd	r0, r1, [r4]
   d6fd8:	f000 face 	bl	d7578 <__aeabi_dsub>
   d6fdc:	9b00      	ldr	r3, [sp, #0]
   d6fde:	2b00      	cmp	r3, #0
   d6fe0:	dd0d      	ble.n	d6ffe <__kernel_rem_pio2+0x69e>
   d6fe2:	ad4c      	add	r5, sp, #304	; 0x130
   d6fe4:	2401      	movs	r4, #1
   d6fe6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   d6fea:	f000 fac7 	bl	d757c <__adddf3>
   d6fee:	9b00      	ldr	r3, [sp, #0]
   d6ff0:	3401      	adds	r4, #1
   d6ff2:	42a3      	cmp	r3, r4
   d6ff4:	daf7      	bge.n	d6fe6 <__kernel_rem_pio2+0x686>
   d6ff6:	9b03      	ldr	r3, [sp, #12]
   d6ff8:	2b00      	cmp	r3, #0
   d6ffa:	f000 80a7 	beq.w	d714c <__kernel_rem_pio2+0x7ec>
   d6ffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7002:	9908      	ldr	r1, [sp, #32]
   d7004:	4602      	mov	r2, r0
   d7006:	e9c1 2302 	strd	r2, r3, [r1, #8]
   d700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d700c:	f003 0007 	and.w	r0, r3, #7
   d7010:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   d7014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7018:	9b06      	ldr	r3, [sp, #24]
   d701a:	9d00      	ldr	r5, [sp, #0]
   d701c:	3308      	adds	r3, #8
   d701e:	2000      	movs	r0, #0
   d7020:	2100      	movs	r1, #0
   d7022:	441c      	add	r4, r3
   d7024:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   d7028:	3d01      	subs	r5, #1
   d702a:	f000 faa7 	bl	d757c <__adddf3>
   d702e:	1c6b      	adds	r3, r5, #1
   d7030:	d1f8      	bne.n	d7024 <__kernel_rem_pio2+0x6c4>
   d7032:	9b03      	ldr	r3, [sp, #12]
   d7034:	4602      	mov	r2, r0
   d7036:	2b00      	cmp	r3, #0
   d7038:	f000 808e 	beq.w	d7158 <__kernel_rem_pio2+0x7f8>
   d703c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7040:	9908      	ldr	r1, [sp, #32]
   d7042:	e9c1 2300 	strd	r2, r3, [r1]
   d7046:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7048:	f003 0007 	and.w	r0, r3, #7
   d704c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   d7050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7054:	2600      	movs	r6, #0
   d7056:	2700      	movs	r7, #0
   d7058:	e6ee      	b.n	d6e38 <__kernel_rem_pio2+0x4d8>
   d705a:	9b08      	ldr	r3, [sp, #32]
   d705c:	4602      	mov	r2, r0
   d705e:	e9c3 0100 	strd	r0, r1, [r3]
   d7062:	460b      	mov	r3, r1
   d7064:	e9d4 0100 	ldrd	r0, r1, [r4]
   d7068:	f000 fa86 	bl	d7578 <__aeabi_dsub>
   d706c:	9c00      	ldr	r4, [sp, #0]
   d706e:	2c00      	cmp	r4, #0
   d7070:	4602      	mov	r2, r0
   d7072:	460b      	mov	r3, r1
   d7074:	dcb5      	bgt.n	d6fe2 <__kernel_rem_pio2+0x682>
   d7076:	9908      	ldr	r1, [sp, #32]
   d7078:	e9c1 2302 	strd	r2, r3, [r1, #8]
   d707c:	e7c5      	b.n	d700a <__kernel_rem_pio2+0x6aa>
   d707e:	9b06      	ldr	r3, [sp, #24]
   d7080:	9503      	str	r5, [sp, #12]
   d7082:	4258      	negs	r0, r3
   d7084:	ec47 6b10 	vmov	d0, r6, r7
   d7088:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   d708c:	f000 f9dc 	bl	d7448 <scalbn>
   d7090:	ec55 4b10 	vmov	r4, r5, d0
   d7094:	2200      	movs	r2, #0
   d7096:	4b38      	ldr	r3, [pc, #224]	; (d7178 <__kernel_rem_pio2+0x818>)
   d7098:	ee10 0a10 	vmov	r0, s0
   d709c:	4629      	mov	r1, r5
   d709e:	f000 fea5 	bl	d7dec <__aeabi_dcmpge>
   d70a2:	2800      	cmp	r0, #0
   d70a4:	d034      	beq.n	d7110 <__kernel_rem_pio2+0x7b0>
   d70a6:	2200      	movs	r2, #0
   d70a8:	4b34      	ldr	r3, [pc, #208]	; (d717c <__kernel_rem_pio2+0x81c>)
   d70aa:	4620      	mov	r0, r4
   d70ac:	4629      	mov	r1, r5
   d70ae:	f000 fc17 	bl	d78e0 <__aeabi_dmul>
   d70b2:	f000 feaf 	bl	d7e14 <__aeabi_d2iz>
   d70b6:	4606      	mov	r6, r0
   d70b8:	f000 fbac 	bl	d7814 <__aeabi_i2d>
   d70bc:	2200      	movs	r2, #0
   d70be:	4b2e      	ldr	r3, [pc, #184]	; (d7178 <__kernel_rem_pio2+0x818>)
   d70c0:	f000 fc0e 	bl	d78e0 <__aeabi_dmul>
   d70c4:	4602      	mov	r2, r0
   d70c6:	460b      	mov	r3, r1
   d70c8:	4620      	mov	r0, r4
   d70ca:	4629      	mov	r1, r5
   d70cc:	f000 fa54 	bl	d7578 <__aeabi_dsub>
   d70d0:	f000 fea0 	bl	d7e14 <__aeabi_d2iz>
   d70d4:	9904      	ldr	r1, [sp, #16]
   d70d6:	9b06      	ldr	r3, [sp, #24]
   d70d8:	460a      	mov	r2, r1
   d70da:	3318      	adds	r3, #24
   d70dc:	3201      	adds	r2, #1
   d70de:	9306      	str	r3, [sp, #24]
   d70e0:	460b      	mov	r3, r1
   d70e2:	a90e      	add	r1, sp, #56	; 0x38
   d70e4:	9200      	str	r2, [sp, #0]
   d70e6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   d70ea:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   d70ee:	e651      	b.n	d6d94 <__kernel_rem_pio2+0x434>
   d70f0:	2301      	movs	r3, #1
   d70f2:	e5a0      	b.n	d6c36 <__kernel_rem_pio2+0x2d6>
   d70f4:	2400      	movs	r4, #0
   d70f6:	e55c      	b.n	d6bb2 <__kernel_rem_pio2+0x252>
   d70f8:	e9d4 6700 	ldrd	r6, r7, [r4]
   d70fc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d7100:	9d08      	ldr	r5, [sp, #32]
   d7102:	e9c5 0104 	strd	r0, r1, [r5, #16]
   d7106:	e9c5 6700 	strd	r6, r7, [r5]
   d710a:	e9c5 2302 	strd	r2, r3, [r5, #8]
   d710e:	e731      	b.n	d6f74 <__kernel_rem_pio2+0x614>
   d7110:	4629      	mov	r1, r5
   d7112:	4620      	mov	r0, r4
   d7114:	f000 fe7e 	bl	d7e14 <__aeabi_d2iz>
   d7118:	9a04      	ldr	r2, [sp, #16]
   d711a:	9200      	str	r2, [sp, #0]
   d711c:	a90e      	add	r1, sp, #56	; 0x38
   d711e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   d7122:	e637      	b.n	d6d94 <__kernel_rem_pio2+0x434>
   d7124:	ac4a      	add	r4, sp, #296	; 0x128
   d7126:	2000      	movs	r0, #0
   d7128:	2100      	movs	r1, #0
   d712a:	e70e      	b.n	d6f4a <__kernel_rem_pio2+0x5ea>
   d712c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   d712e:	2b03      	cmp	r3, #3
   d7130:	f63f af20 	bhi.w	d6f74 <__kernel_rem_pio2+0x614>
   d7134:	a201      	add	r2, pc, #4	; (adr r2, d713c <__kernel_rem_pio2+0x7dc>)
   d7136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d713a:	bf00      	nop
   d713c:	000d7173 	.word	0x000d7173
   d7140:	000d716b 	.word	0x000d716b
   d7144:	000d716b 	.word	0x000d716b
   d7148:	000d7125 	.word	0x000d7125
   d714c:	460b      	mov	r3, r1
   d714e:	9908      	ldr	r1, [sp, #32]
   d7150:	4602      	mov	r2, r0
   d7152:	e9c1 2302 	strd	r2, r3, [r1, #8]
   d7156:	e758      	b.n	d700a <__kernel_rem_pio2+0x6aa>
   d7158:	460b      	mov	r3, r1
   d715a:	9908      	ldr	r1, [sp, #32]
   d715c:	e9c1 2300 	strd	r2, r3, [r1]
   d7160:	e771      	b.n	d7046 <__kernel_rem_pio2+0x6e6>
   d7162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7164:	00db      	lsls	r3, r3, #3
   d7166:	9304      	str	r3, [sp, #16]
   d7168:	e469      	b.n	d6a3e <__kernel_rem_pio2+0xde>
   d716a:	2000      	movs	r0, #0
   d716c:	2100      	movs	r1, #0
   d716e:	ac4a      	add	r4, sp, #296	; 0x128
   d7170:	e725      	b.n	d6fbe <__kernel_rem_pio2+0x65e>
   d7172:	2000      	movs	r0, #0
   d7174:	2100      	movs	r1, #0
   d7176:	e75c      	b.n	d7032 <__kernel_rem_pio2+0x6d2>
   d7178:	41700000 	.word	0x41700000
   d717c:	3e700000 	.word	0x3e700000

000d7180 <__kernel_sin>:
   d7180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7184:	ec55 4b10 	vmov	r4, r5, d0
   d7188:	ed2d 8b02 	vpush	{d8}
   d718c:	eeb0 8a41 	vmov.f32	s16, s2
   d7190:	eef0 8a61 	vmov.f32	s17, s3
   d7194:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   d7198:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   d719c:	b083      	sub	sp, #12
   d719e:	4682      	mov	sl, r0
   d71a0:	da07      	bge.n	d71b2 <__kernel_sin+0x32>
   d71a2:	ee10 0a10 	vmov	r0, s0
   d71a6:	4629      	mov	r1, r5
   d71a8:	f000 fe34 	bl	d7e14 <__aeabi_d2iz>
   d71ac:	2800      	cmp	r0, #0
   d71ae:	f000 808e 	beq.w	d72ce <__kernel_sin+0x14e>
   d71b2:	4622      	mov	r2, r4
   d71b4:	462b      	mov	r3, r5
   d71b6:	4620      	mov	r0, r4
   d71b8:	4629      	mov	r1, r5
   d71ba:	f000 fb91 	bl	d78e0 <__aeabi_dmul>
   d71be:	4606      	mov	r6, r0
   d71c0:	460f      	mov	r7, r1
   d71c2:	4602      	mov	r2, r0
   d71c4:	460b      	mov	r3, r1
   d71c6:	4620      	mov	r0, r4
   d71c8:	4629      	mov	r1, r5
   d71ca:	f000 fb89 	bl	d78e0 <__aeabi_dmul>
   d71ce:	a347      	add	r3, pc, #284	; (adr r3, d72ec <__kernel_sin+0x16c>)
   d71d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71d4:	4680      	mov	r8, r0
   d71d6:	4689      	mov	r9, r1
   d71d8:	4630      	mov	r0, r6
   d71da:	4639      	mov	r1, r7
   d71dc:	f000 fb80 	bl	d78e0 <__aeabi_dmul>
   d71e0:	a344      	add	r3, pc, #272	; (adr r3, d72f4 <__kernel_sin+0x174>)
   d71e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71e6:	f000 f9c7 	bl	d7578 <__aeabi_dsub>
   d71ea:	4632      	mov	r2, r6
   d71ec:	463b      	mov	r3, r7
   d71ee:	f000 fb77 	bl	d78e0 <__aeabi_dmul>
   d71f2:	a342      	add	r3, pc, #264	; (adr r3, d72fc <__kernel_sin+0x17c>)
   d71f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71f8:	f000 f9c0 	bl	d757c <__adddf3>
   d71fc:	4632      	mov	r2, r6
   d71fe:	463b      	mov	r3, r7
   d7200:	f000 fb6e 	bl	d78e0 <__aeabi_dmul>
   d7204:	a33f      	add	r3, pc, #252	; (adr r3, d7304 <__kernel_sin+0x184>)
   d7206:	e9d3 2300 	ldrd	r2, r3, [r3]
   d720a:	f000 f9b5 	bl	d7578 <__aeabi_dsub>
   d720e:	4632      	mov	r2, r6
   d7210:	463b      	mov	r3, r7
   d7212:	f000 fb65 	bl	d78e0 <__aeabi_dmul>
   d7216:	a33d      	add	r3, pc, #244	; (adr r3, d730c <__kernel_sin+0x18c>)
   d7218:	e9d3 2300 	ldrd	r2, r3, [r3]
   d721c:	f000 f9ae 	bl	d757c <__adddf3>
   d7220:	e9cd 0100 	strd	r0, r1, [sp]
   d7224:	f1ba 0f00 	cmp.w	sl, #0
   d7228:	d037      	beq.n	d729a <__kernel_sin+0x11a>
   d722a:	2200      	movs	r2, #0
   d722c:	4b2e      	ldr	r3, [pc, #184]	; (d72e8 <__kernel_sin+0x168>)
   d722e:	ec51 0b18 	vmov	r0, r1, d8
   d7232:	f000 fb55 	bl	d78e0 <__aeabi_dmul>
   d7236:	e9dd 2300 	ldrd	r2, r3, [sp]
   d723a:	4682      	mov	sl, r0
   d723c:	468b      	mov	fp, r1
   d723e:	4640      	mov	r0, r8
   d7240:	4649      	mov	r1, r9
   d7242:	f000 fb4d 	bl	d78e0 <__aeabi_dmul>
   d7246:	4602      	mov	r2, r0
   d7248:	460b      	mov	r3, r1
   d724a:	4650      	mov	r0, sl
   d724c:	4659      	mov	r1, fp
   d724e:	f000 f993 	bl	d7578 <__aeabi_dsub>
   d7252:	4632      	mov	r2, r6
   d7254:	463b      	mov	r3, r7
   d7256:	f000 fb43 	bl	d78e0 <__aeabi_dmul>
   d725a:	ec53 2b18 	vmov	r2, r3, d8
   d725e:	f000 f98b 	bl	d7578 <__aeabi_dsub>
   d7262:	a31f      	add	r3, pc, #124	; (adr r3, d72e0 <__kernel_sin+0x160>)
   d7264:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7268:	4606      	mov	r6, r0
   d726a:	460f      	mov	r7, r1
   d726c:	4640      	mov	r0, r8
   d726e:	4649      	mov	r1, r9
   d7270:	f000 fb36 	bl	d78e0 <__aeabi_dmul>
   d7274:	4602      	mov	r2, r0
   d7276:	460b      	mov	r3, r1
   d7278:	4630      	mov	r0, r6
   d727a:	4639      	mov	r1, r7
   d727c:	f000 f97e 	bl	d757c <__adddf3>
   d7280:	4602      	mov	r2, r0
   d7282:	460b      	mov	r3, r1
   d7284:	4620      	mov	r0, r4
   d7286:	4629      	mov	r1, r5
   d7288:	f000 f976 	bl	d7578 <__aeabi_dsub>
   d728c:	ec41 0b10 	vmov	d0, r0, r1
   d7290:	b003      	add	sp, #12
   d7292:	ecbd 8b02 	vpop	{d8}
   d7296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d729a:	4602      	mov	r2, r0
   d729c:	460b      	mov	r3, r1
   d729e:	4630      	mov	r0, r6
   d72a0:	4639      	mov	r1, r7
   d72a2:	f000 fb1d 	bl	d78e0 <__aeabi_dmul>
   d72a6:	a30e      	add	r3, pc, #56	; (adr r3, d72e0 <__kernel_sin+0x160>)
   d72a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d72ac:	f000 f964 	bl	d7578 <__aeabi_dsub>
   d72b0:	4642      	mov	r2, r8
   d72b2:	464b      	mov	r3, r9
   d72b4:	f000 fb14 	bl	d78e0 <__aeabi_dmul>
   d72b8:	4622      	mov	r2, r4
   d72ba:	462b      	mov	r3, r5
   d72bc:	f000 f95e 	bl	d757c <__adddf3>
   d72c0:	ec41 0b10 	vmov	d0, r0, r1
   d72c4:	b003      	add	sp, #12
   d72c6:	ecbd 8b02 	vpop	{d8}
   d72ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72ce:	ec45 4b10 	vmov	d0, r4, r5
   d72d2:	b003      	add	sp, #12
   d72d4:	ecbd 8b02 	vpop	{d8}
   d72d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72dc:	f3af 8000 	nop.w
   d72e0:	55555549 	.word	0x55555549
   d72e4:	3fc55555 	.word	0x3fc55555
   d72e8:	3fe00000 	.word	0x3fe00000
   d72ec:	5acfd57c 	.word	0x5acfd57c
   d72f0:	3de5d93a 	.word	0x3de5d93a
   d72f4:	8a2b9ceb 	.word	0x8a2b9ceb
   d72f8:	3e5ae5e6 	.word	0x3e5ae5e6
   d72fc:	57b1fe7d 	.word	0x57b1fe7d
   d7300:	3ec71de3 	.word	0x3ec71de3
   d7304:	19c161d5 	.word	0x19c161d5
   d7308:	3f2a01a0 	.word	0x3f2a01a0
   d730c:	1110f8a6 	.word	0x1110f8a6
   d7310:	3f811111 	.word	0x3f811111

000d7314 <fabs>:
   d7314:	ec53 2b10 	vmov	r2, r3, d0
   d7318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d731c:	ec43 2b10 	vmov	d0, r2, r3
   d7320:	4770      	bx	lr
   d7322:	bf00      	nop
   d7324:	0000      	movs	r0, r0
	...

000d7328 <floor>:
   d7328:	ec51 0b10 	vmov	r0, r1, d0
   d732c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   d7330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7334:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   d7338:	2d13      	cmp	r5, #19
   d733a:	460c      	mov	r4, r1
   d733c:	460f      	mov	r7, r1
   d733e:	ee10 6a10 	vmov	r6, s0
   d7342:	dc1d      	bgt.n	d7380 <floor+0x58>
   d7344:	2d00      	cmp	r5, #0
   d7346:	db43      	blt.n	d73d0 <floor+0xa8>
   d7348:	4b3d      	ldr	r3, [pc, #244]	; (d7440 <floor+0x118>)
   d734a:	fa43 f805 	asr.w	r8, r3, r5
   d734e:	ea01 0308 	and.w	r3, r1, r8
   d7352:	4303      	orrs	r3, r0
   d7354:	d019      	beq.n	d738a <floor+0x62>
   d7356:	a338      	add	r3, pc, #224	; (adr r3, d7438 <floor+0x110>)
   d7358:	e9d3 2300 	ldrd	r2, r3, [r3]
   d735c:	f000 f90e 	bl	d757c <__adddf3>
   d7360:	2200      	movs	r2, #0
   d7362:	2300      	movs	r3, #0
   d7364:	f000 fd4c 	bl	d7e00 <__aeabi_dcmpgt>
   d7368:	b120      	cbz	r0, d7374 <floor+0x4c>
   d736a:	2c00      	cmp	r4, #0
   d736c:	db49      	blt.n	d7402 <floor+0xda>
   d736e:	ea27 0408 	bic.w	r4, r7, r8
   d7372:	2600      	movs	r6, #0
   d7374:	4623      	mov	r3, r4
   d7376:	4632      	mov	r2, r6
   d7378:	ec43 2b10 	vmov	d0, r2, r3
   d737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7380:	2d33      	cmp	r5, #51	; 0x33
   d7382:	dd06      	ble.n	d7392 <floor+0x6a>
   d7384:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d7388:	d032      	beq.n	d73f0 <floor+0xc8>
   d738a:	ec41 0b10 	vmov	d0, r0, r1
   d738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7392:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   d7396:	f04f 38ff 	mov.w	r8, #4294967295
   d739a:	fa28 f803 	lsr.w	r8, r8, r3
   d739e:	ea10 0f08 	tst.w	r0, r8
   d73a2:	d0f2      	beq.n	d738a <floor+0x62>
   d73a4:	a324      	add	r3, pc, #144	; (adr r3, d7438 <floor+0x110>)
   d73a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73aa:	f000 f8e7 	bl	d757c <__adddf3>
   d73ae:	2200      	movs	r2, #0
   d73b0:	2300      	movs	r3, #0
   d73b2:	f000 fd25 	bl	d7e00 <__aeabi_dcmpgt>
   d73b6:	2800      	cmp	r0, #0
   d73b8:	d0dc      	beq.n	d7374 <floor+0x4c>
   d73ba:	2c00      	cmp	r4, #0
   d73bc:	db27      	blt.n	d740e <floor+0xe6>
   d73be:	463c      	mov	r4, r7
   d73c0:	ea26 0608 	bic.w	r6, r6, r8
   d73c4:	4623      	mov	r3, r4
   d73c6:	4632      	mov	r2, r6
   d73c8:	ec43 2b10 	vmov	d0, r2, r3
   d73cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73d0:	a319      	add	r3, pc, #100	; (adr r3, d7438 <floor+0x110>)
   d73d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73d6:	f000 f8d1 	bl	d757c <__adddf3>
   d73da:	2200      	movs	r2, #0
   d73dc:	2300      	movs	r3, #0
   d73de:	f000 fd0f 	bl	d7e00 <__aeabi_dcmpgt>
   d73e2:	2800      	cmp	r0, #0
   d73e4:	d0c6      	beq.n	d7374 <floor+0x4c>
   d73e6:	2c00      	cmp	r4, #0
   d73e8:	db1c      	blt.n	d7424 <floor+0xfc>
   d73ea:	2600      	movs	r6, #0
   d73ec:	4634      	mov	r4, r6
   d73ee:	e7c1      	b.n	d7374 <floor+0x4c>
   d73f0:	ee10 2a10 	vmov	r2, s0
   d73f4:	460b      	mov	r3, r1
   d73f6:	f000 f8c1 	bl	d757c <__adddf3>
   d73fa:	ec41 0b10 	vmov	d0, r0, r1
   d73fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7402:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   d7406:	fa43 f505 	asr.w	r5, r3, r5
   d740a:	442f      	add	r7, r5
   d740c:	e7af      	b.n	d736e <floor+0x46>
   d740e:	2d14      	cmp	r5, #20
   d7410:	d010      	beq.n	d7434 <floor+0x10c>
   d7412:	2301      	movs	r3, #1
   d7414:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   d7418:	fa03 f505 	lsl.w	r5, r3, r5
   d741c:	19ae      	adds	r6, r5, r6
   d741e:	bf28      	it	cs
   d7420:	18ff      	addcs	r7, r7, r3
   d7422:	e7cc      	b.n	d73be <floor+0x96>
   d7424:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   d7428:	4b06      	ldr	r3, [pc, #24]	; (d7444 <floor+0x11c>)
   d742a:	4332      	orrs	r2, r6
   d742c:	bf18      	it	ne
   d742e:	461c      	movne	r4, r3
   d7430:	2600      	movs	r6, #0
   d7432:	e79f      	b.n	d7374 <floor+0x4c>
   d7434:	3701      	adds	r7, #1
   d7436:	e7c2      	b.n	d73be <floor+0x96>
   d7438:	8800759c 	.word	0x8800759c
   d743c:	7e37e43c 	.word	0x7e37e43c
   d7440:	000fffff 	.word	0x000fffff
   d7444:	bff00000 	.word	0xbff00000

000d7448 <scalbn>:
   d7448:	ec53 2b10 	vmov	r2, r3, d0
   d744c:	b570      	push	{r4, r5, r6, lr}
   d744e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d7452:	4619      	mov	r1, r3
   d7454:	4605      	mov	r5, r0
   d7456:	bb14      	cbnz	r4, d749e <scalbn+0x56>
   d7458:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d745c:	4311      	orrs	r1, r2
   d745e:	d02a      	beq.n	d74b6 <scalbn+0x6e>
   d7460:	4619      	mov	r1, r3
   d7462:	2200      	movs	r2, #0
   d7464:	4b38      	ldr	r3, [pc, #224]	; (d7548 <scalbn+0x100>)
   d7466:	4e39      	ldr	r6, [pc, #228]	; (d754c <scalbn+0x104>)
   d7468:	ee10 0a10 	vmov	r0, s0
   d746c:	f000 fa38 	bl	d78e0 <__aeabi_dmul>
   d7470:	42b5      	cmp	r5, r6
   d7472:	4602      	mov	r2, r0
   d7474:	460b      	mov	r3, r1
   d7476:	db1f      	blt.n	d74b8 <scalbn+0x70>
   d7478:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d747c:	3c36      	subs	r4, #54	; 0x36
   d747e:	442c      	add	r4, r5
   d7480:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7484:	4284      	cmp	r4, r0
   d7486:	dc1f      	bgt.n	d74c8 <scalbn+0x80>
   d7488:	2c00      	cmp	r4, #0
   d748a:	dd2d      	ble.n	d74e8 <scalbn+0xa0>
   d748c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d7490:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d7494:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7498:	ec43 2b10 	vmov	d0, r2, r3
   d749c:	bd70      	pop	{r4, r5, r6, pc}
   d749e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d74a2:	4284      	cmp	r4, r0
   d74a4:	d1eb      	bne.n	d747e <scalbn+0x36>
   d74a6:	ee10 0a10 	vmov	r0, s0
   d74aa:	4619      	mov	r1, r3
   d74ac:	f000 f866 	bl	d757c <__adddf3>
   d74b0:	ec41 0b10 	vmov	d0, r0, r1
   d74b4:	bd70      	pop	{r4, r5, r6, pc}
   d74b6:	bd70      	pop	{r4, r5, r6, pc}
   d74b8:	a31f      	add	r3, pc, #124	; (adr r3, d7538 <scalbn+0xf0>)
   d74ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74be:	f000 fa0f 	bl	d78e0 <__aeabi_dmul>
   d74c2:	ec41 0b10 	vmov	d0, r0, r1
   d74c6:	bd70      	pop	{r4, r5, r6, pc}
   d74c8:	ec43 2b11 	vmov	d1, r2, r3
   d74cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d7540 <scalbn+0xf8>
   d74d0:	f000 f840 	bl	d7554 <copysign>
   d74d4:	a31a      	add	r3, pc, #104	; (adr r3, d7540 <scalbn+0xf8>)
   d74d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74da:	ec51 0b10 	vmov	r0, r1, d0
   d74de:	f000 f9ff 	bl	d78e0 <__aeabi_dmul>
   d74e2:	ec41 0b10 	vmov	d0, r0, r1
   d74e6:	bd70      	pop	{r4, r5, r6, pc}
   d74e8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d74ec:	da13      	bge.n	d7516 <scalbn+0xce>
   d74ee:	f24c 3150 	movw	r1, #50000	; 0xc350
   d74f2:	428d      	cmp	r5, r1
   d74f4:	ec43 2b11 	vmov	d1, r2, r3
   d74f8:	dce8      	bgt.n	d74cc <scalbn+0x84>
   d74fa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d7538 <scalbn+0xf0>
   d74fe:	f000 f829 	bl	d7554 <copysign>
   d7502:	a30d      	add	r3, pc, #52	; (adr r3, d7538 <scalbn+0xf0>)
   d7504:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7508:	ec51 0b10 	vmov	r0, r1, d0
   d750c:	f000 f9e8 	bl	d78e0 <__aeabi_dmul>
   d7510:	ec41 0b10 	vmov	d0, r0, r1
   d7514:	bd70      	pop	{r4, r5, r6, pc}
   d7516:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d751a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d751e:	3436      	adds	r4, #54	; 0x36
   d7520:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7524:	4610      	mov	r0, r2
   d7526:	4619      	mov	r1, r3
   d7528:	2200      	movs	r2, #0
   d752a:	4b09      	ldr	r3, [pc, #36]	; (d7550 <scalbn+0x108>)
   d752c:	f000 f9d8 	bl	d78e0 <__aeabi_dmul>
   d7530:	ec41 0b10 	vmov	d0, r0, r1
   d7534:	bd70      	pop	{r4, r5, r6, pc}
   d7536:	bf00      	nop
   d7538:	c2f8f359 	.word	0xc2f8f359
   d753c:	01a56e1f 	.word	0x01a56e1f
   d7540:	8800759c 	.word	0x8800759c
   d7544:	7e37e43c 	.word	0x7e37e43c
   d7548:	43500000 	.word	0x43500000
   d754c:	ffff3cb0 	.word	0xffff3cb0
   d7550:	3c900000 	.word	0x3c900000

000d7554 <copysign>:
   d7554:	ec53 2b10 	vmov	r2, r3, d0
   d7558:	ee11 0a90 	vmov	r0, s3
   d755c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d7560:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d7564:	ea41 0300 	orr.w	r3, r1, r0
   d7568:	ec43 2b10 	vmov	d0, r2, r3
   d756c:	4770      	bx	lr
   d756e:	bf00      	nop

000d7570 <__aeabi_drsub>:
   d7570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7574:	e002      	b.n	d757c <__adddf3>
   d7576:	bf00      	nop

000d7578 <__aeabi_dsub>:
   d7578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d757c <__adddf3>:
   d757c:	b530      	push	{r4, r5, lr}
   d757e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7582:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7586:	ea94 0f05 	teq	r4, r5
   d758a:	bf08      	it	eq
   d758c:	ea90 0f02 	teqeq	r0, r2
   d7590:	bf1f      	itttt	ne
   d7592:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7596:	ea55 0c02 	orrsne.w	ip, r5, r2
   d759a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d759e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d75a2:	f000 80e2 	beq.w	d776a <__adddf3+0x1ee>
   d75a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d75aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d75ae:	bfb8      	it	lt
   d75b0:	426d      	neglt	r5, r5
   d75b2:	dd0c      	ble.n	d75ce <__adddf3+0x52>
   d75b4:	442c      	add	r4, r5
   d75b6:	ea80 0202 	eor.w	r2, r0, r2
   d75ba:	ea81 0303 	eor.w	r3, r1, r3
   d75be:	ea82 0000 	eor.w	r0, r2, r0
   d75c2:	ea83 0101 	eor.w	r1, r3, r1
   d75c6:	ea80 0202 	eor.w	r2, r0, r2
   d75ca:	ea81 0303 	eor.w	r3, r1, r3
   d75ce:	2d36      	cmp	r5, #54	; 0x36
   d75d0:	bf88      	it	hi
   d75d2:	bd30      	pophi	{r4, r5, pc}
   d75d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d75d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d75dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d75e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d75e4:	d002      	beq.n	d75ec <__adddf3+0x70>
   d75e6:	4240      	negs	r0, r0
   d75e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d75ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d75f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d75f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d75f8:	d002      	beq.n	d7600 <__adddf3+0x84>
   d75fa:	4252      	negs	r2, r2
   d75fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7600:	ea94 0f05 	teq	r4, r5
   d7604:	f000 80a7 	beq.w	d7756 <__adddf3+0x1da>
   d7608:	f1a4 0401 	sub.w	r4, r4, #1
   d760c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7610:	db0d      	blt.n	d762e <__adddf3+0xb2>
   d7612:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7616:	fa22 f205 	lsr.w	r2, r2, r5
   d761a:	1880      	adds	r0, r0, r2
   d761c:	f141 0100 	adc.w	r1, r1, #0
   d7620:	fa03 f20e 	lsl.w	r2, r3, lr
   d7624:	1880      	adds	r0, r0, r2
   d7626:	fa43 f305 	asr.w	r3, r3, r5
   d762a:	4159      	adcs	r1, r3
   d762c:	e00e      	b.n	d764c <__adddf3+0xd0>
   d762e:	f1a5 0520 	sub.w	r5, r5, #32
   d7632:	f10e 0e20 	add.w	lr, lr, #32
   d7636:	2a01      	cmp	r2, #1
   d7638:	fa03 fc0e 	lsl.w	ip, r3, lr
   d763c:	bf28      	it	cs
   d763e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7642:	fa43 f305 	asr.w	r3, r3, r5
   d7646:	18c0      	adds	r0, r0, r3
   d7648:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d764c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7650:	d507      	bpl.n	d7662 <__adddf3+0xe6>
   d7652:	f04f 0e00 	mov.w	lr, #0
   d7656:	f1dc 0c00 	rsbs	ip, ip, #0
   d765a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d765e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7662:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7666:	d31b      	bcc.n	d76a0 <__adddf3+0x124>
   d7668:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d766c:	d30c      	bcc.n	d7688 <__adddf3+0x10c>
   d766e:	0849      	lsrs	r1, r1, #1
   d7670:	ea5f 0030 	movs.w	r0, r0, rrx
   d7674:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7678:	f104 0401 	add.w	r4, r4, #1
   d767c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7680:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7684:	f080 809a 	bcs.w	d77bc <__adddf3+0x240>
   d7688:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d768c:	bf08      	it	eq
   d768e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7692:	f150 0000 	adcs.w	r0, r0, #0
   d7696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d769a:	ea41 0105 	orr.w	r1, r1, r5
   d769e:	bd30      	pop	{r4, r5, pc}
   d76a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d76a4:	4140      	adcs	r0, r0
   d76a6:	eb41 0101 	adc.w	r1, r1, r1
   d76aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76ae:	f1a4 0401 	sub.w	r4, r4, #1
   d76b2:	d1e9      	bne.n	d7688 <__adddf3+0x10c>
   d76b4:	f091 0f00 	teq	r1, #0
   d76b8:	bf04      	itt	eq
   d76ba:	4601      	moveq	r1, r0
   d76bc:	2000      	moveq	r0, #0
   d76be:	fab1 f381 	clz	r3, r1
   d76c2:	bf08      	it	eq
   d76c4:	3320      	addeq	r3, #32
   d76c6:	f1a3 030b 	sub.w	r3, r3, #11
   d76ca:	f1b3 0220 	subs.w	r2, r3, #32
   d76ce:	da0c      	bge.n	d76ea <__adddf3+0x16e>
   d76d0:	320c      	adds	r2, #12
   d76d2:	dd08      	ble.n	d76e6 <__adddf3+0x16a>
   d76d4:	f102 0c14 	add.w	ip, r2, #20
   d76d8:	f1c2 020c 	rsb	r2, r2, #12
   d76dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d76e0:	fa21 f102 	lsr.w	r1, r1, r2
   d76e4:	e00c      	b.n	d7700 <__adddf3+0x184>
   d76e6:	f102 0214 	add.w	r2, r2, #20
   d76ea:	bfd8      	it	le
   d76ec:	f1c2 0c20 	rsble	ip, r2, #32
   d76f0:	fa01 f102 	lsl.w	r1, r1, r2
   d76f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d76f8:	bfdc      	itt	le
   d76fa:	ea41 010c 	orrle.w	r1, r1, ip
   d76fe:	4090      	lslle	r0, r2
   d7700:	1ae4      	subs	r4, r4, r3
   d7702:	bfa2      	ittt	ge
   d7704:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7708:	4329      	orrge	r1, r5
   d770a:	bd30      	popge	{r4, r5, pc}
   d770c:	ea6f 0404 	mvn.w	r4, r4
   d7710:	3c1f      	subs	r4, #31
   d7712:	da1c      	bge.n	d774e <__adddf3+0x1d2>
   d7714:	340c      	adds	r4, #12
   d7716:	dc0e      	bgt.n	d7736 <__adddf3+0x1ba>
   d7718:	f104 0414 	add.w	r4, r4, #20
   d771c:	f1c4 0220 	rsb	r2, r4, #32
   d7720:	fa20 f004 	lsr.w	r0, r0, r4
   d7724:	fa01 f302 	lsl.w	r3, r1, r2
   d7728:	ea40 0003 	orr.w	r0, r0, r3
   d772c:	fa21 f304 	lsr.w	r3, r1, r4
   d7730:	ea45 0103 	orr.w	r1, r5, r3
   d7734:	bd30      	pop	{r4, r5, pc}
   d7736:	f1c4 040c 	rsb	r4, r4, #12
   d773a:	f1c4 0220 	rsb	r2, r4, #32
   d773e:	fa20 f002 	lsr.w	r0, r0, r2
   d7742:	fa01 f304 	lsl.w	r3, r1, r4
   d7746:	ea40 0003 	orr.w	r0, r0, r3
   d774a:	4629      	mov	r1, r5
   d774c:	bd30      	pop	{r4, r5, pc}
   d774e:	fa21 f004 	lsr.w	r0, r1, r4
   d7752:	4629      	mov	r1, r5
   d7754:	bd30      	pop	{r4, r5, pc}
   d7756:	f094 0f00 	teq	r4, #0
   d775a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d775e:	bf06      	itte	eq
   d7760:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7764:	3401      	addeq	r4, #1
   d7766:	3d01      	subne	r5, #1
   d7768:	e74e      	b.n	d7608 <__adddf3+0x8c>
   d776a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d776e:	bf18      	it	ne
   d7770:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7774:	d029      	beq.n	d77ca <__adddf3+0x24e>
   d7776:	ea94 0f05 	teq	r4, r5
   d777a:	bf08      	it	eq
   d777c:	ea90 0f02 	teqeq	r0, r2
   d7780:	d005      	beq.n	d778e <__adddf3+0x212>
   d7782:	ea54 0c00 	orrs.w	ip, r4, r0
   d7786:	bf04      	itt	eq
   d7788:	4619      	moveq	r1, r3
   d778a:	4610      	moveq	r0, r2
   d778c:	bd30      	pop	{r4, r5, pc}
   d778e:	ea91 0f03 	teq	r1, r3
   d7792:	bf1e      	ittt	ne
   d7794:	2100      	movne	r1, #0
   d7796:	2000      	movne	r0, #0
   d7798:	bd30      	popne	{r4, r5, pc}
   d779a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d779e:	d105      	bne.n	d77ac <__adddf3+0x230>
   d77a0:	0040      	lsls	r0, r0, #1
   d77a2:	4149      	adcs	r1, r1
   d77a4:	bf28      	it	cs
   d77a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d77aa:	bd30      	pop	{r4, r5, pc}
   d77ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d77b0:	bf3c      	itt	cc
   d77b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d77b6:	bd30      	popcc	{r4, r5, pc}
   d77b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d77c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77c4:	f04f 0000 	mov.w	r0, #0
   d77c8:	bd30      	pop	{r4, r5, pc}
   d77ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d77ce:	bf1a      	itte	ne
   d77d0:	4619      	movne	r1, r3
   d77d2:	4610      	movne	r0, r2
   d77d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d77d8:	bf1c      	itt	ne
   d77da:	460b      	movne	r3, r1
   d77dc:	4602      	movne	r2, r0
   d77de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77e2:	bf06      	itte	eq
   d77e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d77e8:	ea91 0f03 	teqeq	r1, r3
   d77ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d77f0:	bd30      	pop	{r4, r5, pc}
   d77f2:	bf00      	nop

000d77f4 <__aeabi_ui2d>:
   d77f4:	f090 0f00 	teq	r0, #0
   d77f8:	bf04      	itt	eq
   d77fa:	2100      	moveq	r1, #0
   d77fc:	4770      	bxeq	lr
   d77fe:	b530      	push	{r4, r5, lr}
   d7800:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7804:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7808:	f04f 0500 	mov.w	r5, #0
   d780c:	f04f 0100 	mov.w	r1, #0
   d7810:	e750      	b.n	d76b4 <__adddf3+0x138>
   d7812:	bf00      	nop

000d7814 <__aeabi_i2d>:
   d7814:	f090 0f00 	teq	r0, #0
   d7818:	bf04      	itt	eq
   d781a:	2100      	moveq	r1, #0
   d781c:	4770      	bxeq	lr
   d781e:	b530      	push	{r4, r5, lr}
   d7820:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7824:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7828:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d782c:	bf48      	it	mi
   d782e:	4240      	negmi	r0, r0
   d7830:	f04f 0100 	mov.w	r1, #0
   d7834:	e73e      	b.n	d76b4 <__adddf3+0x138>
   d7836:	bf00      	nop

000d7838 <__aeabi_f2d>:
   d7838:	0042      	lsls	r2, r0, #1
   d783a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d783e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7842:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7846:	bf1f      	itttt	ne
   d7848:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d784c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7850:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7854:	4770      	bxne	lr
   d7856:	f092 0f00 	teq	r2, #0
   d785a:	bf14      	ite	ne
   d785c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7860:	4770      	bxeq	lr
   d7862:	b530      	push	{r4, r5, lr}
   d7864:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7868:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d786c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7870:	e720      	b.n	d76b4 <__adddf3+0x138>
   d7872:	bf00      	nop

000d7874 <__aeabi_ul2d>:
   d7874:	ea50 0201 	orrs.w	r2, r0, r1
   d7878:	bf08      	it	eq
   d787a:	4770      	bxeq	lr
   d787c:	b530      	push	{r4, r5, lr}
   d787e:	f04f 0500 	mov.w	r5, #0
   d7882:	e00a      	b.n	d789a <__aeabi_l2d+0x16>

000d7884 <__aeabi_l2d>:
   d7884:	ea50 0201 	orrs.w	r2, r0, r1
   d7888:	bf08      	it	eq
   d788a:	4770      	bxeq	lr
   d788c:	b530      	push	{r4, r5, lr}
   d788e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7892:	d502      	bpl.n	d789a <__aeabi_l2d+0x16>
   d7894:	4240      	negs	r0, r0
   d7896:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d789a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d789e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d78a6:	f43f aedc 	beq.w	d7662 <__adddf3+0xe6>
   d78aa:	f04f 0203 	mov.w	r2, #3
   d78ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78b2:	bf18      	it	ne
   d78b4:	3203      	addne	r2, #3
   d78b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78ba:	bf18      	it	ne
   d78bc:	3203      	addne	r2, #3
   d78be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d78c2:	f1c2 0320 	rsb	r3, r2, #32
   d78c6:	fa00 fc03 	lsl.w	ip, r0, r3
   d78ca:	fa20 f002 	lsr.w	r0, r0, r2
   d78ce:	fa01 fe03 	lsl.w	lr, r1, r3
   d78d2:	ea40 000e 	orr.w	r0, r0, lr
   d78d6:	fa21 f102 	lsr.w	r1, r1, r2
   d78da:	4414      	add	r4, r2
   d78dc:	e6c1      	b.n	d7662 <__adddf3+0xe6>
   d78de:	bf00      	nop

000d78e0 <__aeabi_dmul>:
   d78e0:	b570      	push	{r4, r5, r6, lr}
   d78e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d78e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d78ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d78ee:	bf1d      	ittte	ne
   d78f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d78f4:	ea94 0f0c 	teqne	r4, ip
   d78f8:	ea95 0f0c 	teqne	r5, ip
   d78fc:	f000 f8de 	bleq	d7abc <__aeabi_dmul+0x1dc>
   d7900:	442c      	add	r4, r5
   d7902:	ea81 0603 	eor.w	r6, r1, r3
   d7906:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d790a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d790e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7912:	bf18      	it	ne
   d7914:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d791c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7920:	d038      	beq.n	d7994 <__aeabi_dmul+0xb4>
   d7922:	fba0 ce02 	umull	ip, lr, r0, r2
   d7926:	f04f 0500 	mov.w	r5, #0
   d792a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d792e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7932:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7936:	f04f 0600 	mov.w	r6, #0
   d793a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d793e:	f09c 0f00 	teq	ip, #0
   d7942:	bf18      	it	ne
   d7944:	f04e 0e01 	orrne.w	lr, lr, #1
   d7948:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d794c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7950:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7954:	d204      	bcs.n	d7960 <__aeabi_dmul+0x80>
   d7956:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d795a:	416d      	adcs	r5, r5
   d795c:	eb46 0606 	adc.w	r6, r6, r6
   d7960:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7964:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7968:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d796c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7970:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7974:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7978:	bf88      	it	hi
   d797a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d797e:	d81e      	bhi.n	d79be <__aeabi_dmul+0xde>
   d7980:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7984:	bf08      	it	eq
   d7986:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d798a:	f150 0000 	adcs.w	r0, r0, #0
   d798e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7992:	bd70      	pop	{r4, r5, r6, pc}
   d7994:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7998:	ea46 0101 	orr.w	r1, r6, r1
   d799c:	ea40 0002 	orr.w	r0, r0, r2
   d79a0:	ea81 0103 	eor.w	r1, r1, r3
   d79a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d79a8:	bfc2      	ittt	gt
   d79aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d79ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d79b2:	bd70      	popgt	{r4, r5, r6, pc}
   d79b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79b8:	f04f 0e00 	mov.w	lr, #0
   d79bc:	3c01      	subs	r4, #1
   d79be:	f300 80ab 	bgt.w	d7b18 <__aeabi_dmul+0x238>
   d79c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d79c6:	bfde      	ittt	le
   d79c8:	2000      	movle	r0, #0
   d79ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d79ce:	bd70      	pople	{r4, r5, r6, pc}
   d79d0:	f1c4 0400 	rsb	r4, r4, #0
   d79d4:	3c20      	subs	r4, #32
   d79d6:	da35      	bge.n	d7a44 <__aeabi_dmul+0x164>
   d79d8:	340c      	adds	r4, #12
   d79da:	dc1b      	bgt.n	d7a14 <__aeabi_dmul+0x134>
   d79dc:	f104 0414 	add.w	r4, r4, #20
   d79e0:	f1c4 0520 	rsb	r5, r4, #32
   d79e4:	fa00 f305 	lsl.w	r3, r0, r5
   d79e8:	fa20 f004 	lsr.w	r0, r0, r4
   d79ec:	fa01 f205 	lsl.w	r2, r1, r5
   d79f0:	ea40 0002 	orr.w	r0, r0, r2
   d79f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d79f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d79fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a00:	fa21 f604 	lsr.w	r6, r1, r4
   d7a04:	eb42 0106 	adc.w	r1, r2, r6
   d7a08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a0c:	bf08      	it	eq
   d7a0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a12:	bd70      	pop	{r4, r5, r6, pc}
   d7a14:	f1c4 040c 	rsb	r4, r4, #12
   d7a18:	f1c4 0520 	rsb	r5, r4, #32
   d7a1c:	fa00 f304 	lsl.w	r3, r0, r4
   d7a20:	fa20 f005 	lsr.w	r0, r0, r5
   d7a24:	fa01 f204 	lsl.w	r2, r1, r4
   d7a28:	ea40 0002 	orr.w	r0, r0, r2
   d7a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a34:	f141 0100 	adc.w	r1, r1, #0
   d7a38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a3c:	bf08      	it	eq
   d7a3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a42:	bd70      	pop	{r4, r5, r6, pc}
   d7a44:	f1c4 0520 	rsb	r5, r4, #32
   d7a48:	fa00 f205 	lsl.w	r2, r0, r5
   d7a4c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7a50:	fa20 f304 	lsr.w	r3, r0, r4
   d7a54:	fa01 f205 	lsl.w	r2, r1, r5
   d7a58:	ea43 0302 	orr.w	r3, r3, r2
   d7a5c:	fa21 f004 	lsr.w	r0, r1, r4
   d7a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a64:	fa21 f204 	lsr.w	r2, r1, r4
   d7a68:	ea20 0002 	bic.w	r0, r0, r2
   d7a6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a74:	bf08      	it	eq
   d7a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a7a:	bd70      	pop	{r4, r5, r6, pc}
   d7a7c:	f094 0f00 	teq	r4, #0
   d7a80:	d10f      	bne.n	d7aa2 <__aeabi_dmul+0x1c2>
   d7a82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7a86:	0040      	lsls	r0, r0, #1
   d7a88:	eb41 0101 	adc.w	r1, r1, r1
   d7a8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a90:	bf08      	it	eq
   d7a92:	3c01      	subeq	r4, #1
   d7a94:	d0f7      	beq.n	d7a86 <__aeabi_dmul+0x1a6>
   d7a96:	ea41 0106 	orr.w	r1, r1, r6
   d7a9a:	f095 0f00 	teq	r5, #0
   d7a9e:	bf18      	it	ne
   d7aa0:	4770      	bxne	lr
   d7aa2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7aa6:	0052      	lsls	r2, r2, #1
   d7aa8:	eb43 0303 	adc.w	r3, r3, r3
   d7aac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ab0:	bf08      	it	eq
   d7ab2:	3d01      	subeq	r5, #1
   d7ab4:	d0f7      	beq.n	d7aa6 <__aeabi_dmul+0x1c6>
   d7ab6:	ea43 0306 	orr.w	r3, r3, r6
   d7aba:	4770      	bx	lr
   d7abc:	ea94 0f0c 	teq	r4, ip
   d7ac0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ac4:	bf18      	it	ne
   d7ac6:	ea95 0f0c 	teqne	r5, ip
   d7aca:	d00c      	beq.n	d7ae6 <__aeabi_dmul+0x206>
   d7acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ad0:	bf18      	it	ne
   d7ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ad6:	d1d1      	bne.n	d7a7c <__aeabi_dmul+0x19c>
   d7ad8:	ea81 0103 	eor.w	r1, r1, r3
   d7adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ae0:	f04f 0000 	mov.w	r0, #0
   d7ae4:	bd70      	pop	{r4, r5, r6, pc}
   d7ae6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7aea:	bf06      	itte	eq
   d7aec:	4610      	moveq	r0, r2
   d7aee:	4619      	moveq	r1, r3
   d7af0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7af4:	d019      	beq.n	d7b2a <__aeabi_dmul+0x24a>
   d7af6:	ea94 0f0c 	teq	r4, ip
   d7afa:	d102      	bne.n	d7b02 <__aeabi_dmul+0x222>
   d7afc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7b00:	d113      	bne.n	d7b2a <__aeabi_dmul+0x24a>
   d7b02:	ea95 0f0c 	teq	r5, ip
   d7b06:	d105      	bne.n	d7b14 <__aeabi_dmul+0x234>
   d7b08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7b0c:	bf1c      	itt	ne
   d7b0e:	4610      	movne	r0, r2
   d7b10:	4619      	movne	r1, r3
   d7b12:	d10a      	bne.n	d7b2a <__aeabi_dmul+0x24a>
   d7b14:	ea81 0103 	eor.w	r1, r1, r3
   d7b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b24:	f04f 0000 	mov.w	r0, #0
   d7b28:	bd70      	pop	{r4, r5, r6, pc}
   d7b2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7b32:	bd70      	pop	{r4, r5, r6, pc}

000d7b34 <__aeabi_ddiv>:
   d7b34:	b570      	push	{r4, r5, r6, lr}
   d7b36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7b3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7b3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7b42:	bf1d      	ittte	ne
   d7b44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7b48:	ea94 0f0c 	teqne	r4, ip
   d7b4c:	ea95 0f0c 	teqne	r5, ip
   d7b50:	f000 f8a7 	bleq	d7ca2 <__aeabi_ddiv+0x16e>
   d7b54:	eba4 0405 	sub.w	r4, r4, r5
   d7b58:	ea81 0e03 	eor.w	lr, r1, r3
   d7b5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b64:	f000 8088 	beq.w	d7c78 <__aeabi_ddiv+0x144>
   d7b68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7b70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7b74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7b78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7b7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7b80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7b84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7b88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7b8c:	429d      	cmp	r5, r3
   d7b8e:	bf08      	it	eq
   d7b90:	4296      	cmpeq	r6, r2
   d7b92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7b96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7b9a:	d202      	bcs.n	d7ba2 <__aeabi_ddiv+0x6e>
   d7b9c:	085b      	lsrs	r3, r3, #1
   d7b9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ba2:	1ab6      	subs	r6, r6, r2
   d7ba4:	eb65 0503 	sbc.w	r5, r5, r3
   d7ba8:	085b      	lsrs	r3, r3, #1
   d7baa:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7bb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7bb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bbe:	bf22      	ittt	cs
   d7bc0:	1ab6      	subcs	r6, r6, r2
   d7bc2:	4675      	movcs	r5, lr
   d7bc4:	ea40 000c 	orrcs.w	r0, r0, ip
   d7bc8:	085b      	lsrs	r3, r3, #1
   d7bca:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bce:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bd6:	bf22      	ittt	cs
   d7bd8:	1ab6      	subcs	r6, r6, r2
   d7bda:	4675      	movcs	r5, lr
   d7bdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7be0:	085b      	lsrs	r3, r3, #1
   d7be2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7be6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bee:	bf22      	ittt	cs
   d7bf0:	1ab6      	subcs	r6, r6, r2
   d7bf2:	4675      	movcs	r5, lr
   d7bf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7bf8:	085b      	lsrs	r3, r3, #1
   d7bfa:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c06:	bf22      	ittt	cs
   d7c08:	1ab6      	subcs	r6, r6, r2
   d7c0a:	4675      	movcs	r5, lr
   d7c0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7c10:	ea55 0e06 	orrs.w	lr, r5, r6
   d7c14:	d018      	beq.n	d7c48 <__aeabi_ddiv+0x114>
   d7c16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7c1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7c1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7c22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7c26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7c2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7c2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7c32:	d1c0      	bne.n	d7bb6 <__aeabi_ddiv+0x82>
   d7c34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c38:	d10b      	bne.n	d7c52 <__aeabi_ddiv+0x11e>
   d7c3a:	ea41 0100 	orr.w	r1, r1, r0
   d7c3e:	f04f 0000 	mov.w	r0, #0
   d7c42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7c46:	e7b6      	b.n	d7bb6 <__aeabi_ddiv+0x82>
   d7c48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c4c:	bf04      	itt	eq
   d7c4e:	4301      	orreq	r1, r0
   d7c50:	2000      	moveq	r0, #0
   d7c52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c56:	bf88      	it	hi
   d7c58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c5c:	f63f aeaf 	bhi.w	d79be <__aeabi_dmul+0xde>
   d7c60:	ebb5 0c03 	subs.w	ip, r5, r3
   d7c64:	bf04      	itt	eq
   d7c66:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7c6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c6e:	f150 0000 	adcs.w	r0, r0, #0
   d7c72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c76:	bd70      	pop	{r4, r5, r6, pc}
   d7c78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7c7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7c80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7c84:	bfc2      	ittt	gt
   d7c86:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7c8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7c8e:	bd70      	popgt	{r4, r5, r6, pc}
   d7c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c94:	f04f 0e00 	mov.w	lr, #0
   d7c98:	3c01      	subs	r4, #1
   d7c9a:	e690      	b.n	d79be <__aeabi_dmul+0xde>
   d7c9c:	ea45 0e06 	orr.w	lr, r5, r6
   d7ca0:	e68d      	b.n	d79be <__aeabi_dmul+0xde>
   d7ca2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ca6:	ea94 0f0c 	teq	r4, ip
   d7caa:	bf08      	it	eq
   d7cac:	ea95 0f0c 	teqeq	r5, ip
   d7cb0:	f43f af3b 	beq.w	d7b2a <__aeabi_dmul+0x24a>
   d7cb4:	ea94 0f0c 	teq	r4, ip
   d7cb8:	d10a      	bne.n	d7cd0 <__aeabi_ddiv+0x19c>
   d7cba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7cbe:	f47f af34 	bne.w	d7b2a <__aeabi_dmul+0x24a>
   d7cc2:	ea95 0f0c 	teq	r5, ip
   d7cc6:	f47f af25 	bne.w	d7b14 <__aeabi_dmul+0x234>
   d7cca:	4610      	mov	r0, r2
   d7ccc:	4619      	mov	r1, r3
   d7cce:	e72c      	b.n	d7b2a <__aeabi_dmul+0x24a>
   d7cd0:	ea95 0f0c 	teq	r5, ip
   d7cd4:	d106      	bne.n	d7ce4 <__aeabi_ddiv+0x1b0>
   d7cd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7cda:	f43f aefd 	beq.w	d7ad8 <__aeabi_dmul+0x1f8>
   d7cde:	4610      	mov	r0, r2
   d7ce0:	4619      	mov	r1, r3
   d7ce2:	e722      	b.n	d7b2a <__aeabi_dmul+0x24a>
   d7ce4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ce8:	bf18      	it	ne
   d7cea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7cee:	f47f aec5 	bne.w	d7a7c <__aeabi_dmul+0x19c>
   d7cf2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7cf6:	f47f af0d 	bne.w	d7b14 <__aeabi_dmul+0x234>
   d7cfa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7cfe:	f47f aeeb 	bne.w	d7ad8 <__aeabi_dmul+0x1f8>
   d7d02:	e712      	b.n	d7b2a <__aeabi_dmul+0x24a>

000d7d04 <__gedf2>:
   d7d04:	f04f 3cff 	mov.w	ip, #4294967295
   d7d08:	e006      	b.n	d7d18 <__cmpdf2+0x4>
   d7d0a:	bf00      	nop

000d7d0c <__ledf2>:
   d7d0c:	f04f 0c01 	mov.w	ip, #1
   d7d10:	e002      	b.n	d7d18 <__cmpdf2+0x4>
   d7d12:	bf00      	nop

000d7d14 <__cmpdf2>:
   d7d14:	f04f 0c01 	mov.w	ip, #1
   d7d18:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7d1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d28:	bf18      	it	ne
   d7d2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7d2e:	d01b      	beq.n	d7d68 <__cmpdf2+0x54>
   d7d30:	b001      	add	sp, #4
   d7d32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7d36:	bf0c      	ite	eq
   d7d38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7d3c:	ea91 0f03 	teqne	r1, r3
   d7d40:	bf02      	ittt	eq
   d7d42:	ea90 0f02 	teqeq	r0, r2
   d7d46:	2000      	moveq	r0, #0
   d7d48:	4770      	bxeq	lr
   d7d4a:	f110 0f00 	cmn.w	r0, #0
   d7d4e:	ea91 0f03 	teq	r1, r3
   d7d52:	bf58      	it	pl
   d7d54:	4299      	cmppl	r1, r3
   d7d56:	bf08      	it	eq
   d7d58:	4290      	cmpeq	r0, r2
   d7d5a:	bf2c      	ite	cs
   d7d5c:	17d8      	asrcs	r0, r3, #31
   d7d5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7d62:	f040 0001 	orr.w	r0, r0, #1
   d7d66:	4770      	bx	lr
   d7d68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d70:	d102      	bne.n	d7d78 <__cmpdf2+0x64>
   d7d72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7d76:	d107      	bne.n	d7d88 <__cmpdf2+0x74>
   d7d78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d80:	d1d6      	bne.n	d7d30 <__cmpdf2+0x1c>
   d7d82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7d86:	d0d3      	beq.n	d7d30 <__cmpdf2+0x1c>
   d7d88:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7d8c:	4770      	bx	lr
   d7d8e:	bf00      	nop

000d7d90 <__aeabi_cdrcmple>:
   d7d90:	4684      	mov	ip, r0
   d7d92:	4610      	mov	r0, r2
   d7d94:	4662      	mov	r2, ip
   d7d96:	468c      	mov	ip, r1
   d7d98:	4619      	mov	r1, r3
   d7d9a:	4663      	mov	r3, ip
   d7d9c:	e000      	b.n	d7da0 <__aeabi_cdcmpeq>
   d7d9e:	bf00      	nop

000d7da0 <__aeabi_cdcmpeq>:
   d7da0:	b501      	push	{r0, lr}
   d7da2:	f7ff ffb7 	bl	d7d14 <__cmpdf2>
   d7da6:	2800      	cmp	r0, #0
   d7da8:	bf48      	it	mi
   d7daa:	f110 0f00 	cmnmi.w	r0, #0
   d7dae:	bd01      	pop	{r0, pc}

000d7db0 <__aeabi_dcmpeq>:
   d7db0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7db4:	f7ff fff4 	bl	d7da0 <__aeabi_cdcmpeq>
   d7db8:	bf0c      	ite	eq
   d7dba:	2001      	moveq	r0, #1
   d7dbc:	2000      	movne	r0, #0
   d7dbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dc2:	bf00      	nop

000d7dc4 <__aeabi_dcmplt>:
   d7dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7dc8:	f7ff ffea 	bl	d7da0 <__aeabi_cdcmpeq>
   d7dcc:	bf34      	ite	cc
   d7dce:	2001      	movcc	r0, #1
   d7dd0:	2000      	movcs	r0, #0
   d7dd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dd6:	bf00      	nop

000d7dd8 <__aeabi_dcmple>:
   d7dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7ddc:	f7ff ffe0 	bl	d7da0 <__aeabi_cdcmpeq>
   d7de0:	bf94      	ite	ls
   d7de2:	2001      	movls	r0, #1
   d7de4:	2000      	movhi	r0, #0
   d7de6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dea:	bf00      	nop

000d7dec <__aeabi_dcmpge>:
   d7dec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7df0:	f7ff ffce 	bl	d7d90 <__aeabi_cdrcmple>
   d7df4:	bf94      	ite	ls
   d7df6:	2001      	movls	r0, #1
   d7df8:	2000      	movhi	r0, #0
   d7dfa:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dfe:	bf00      	nop

000d7e00 <__aeabi_dcmpgt>:
   d7e00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e04:	f7ff ffc4 	bl	d7d90 <__aeabi_cdrcmple>
   d7e08:	bf34      	ite	cc
   d7e0a:	2001      	movcc	r0, #1
   d7e0c:	2000      	movcs	r0, #0
   d7e0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e12:	bf00      	nop

000d7e14 <__aeabi_d2iz>:
   d7e14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7e18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7e1c:	d215      	bcs.n	d7e4a <__aeabi_d2iz+0x36>
   d7e1e:	d511      	bpl.n	d7e44 <__aeabi_d2iz+0x30>
   d7e20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7e24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7e28:	d912      	bls.n	d7e50 <__aeabi_d2iz+0x3c>
   d7e2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7e32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7e36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7e3a:	fa23 f002 	lsr.w	r0, r3, r2
   d7e3e:	bf18      	it	ne
   d7e40:	4240      	negne	r0, r0
   d7e42:	4770      	bx	lr
   d7e44:	f04f 0000 	mov.w	r0, #0
   d7e48:	4770      	bx	lr
   d7e4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7e4e:	d105      	bne.n	d7e5c <__aeabi_d2iz+0x48>
   d7e50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7e54:	bf08      	it	eq
   d7e56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7e5a:	4770      	bx	lr
   d7e5c:	f04f 0000 	mov.w	r0, #0
   d7e60:	4770      	bx	lr
   d7e62:	bf00      	nop

000d7e64 <__aeabi_d2f>:
   d7e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7e68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7e6c:	bf24      	itt	cs
   d7e6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7e72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7e76:	d90d      	bls.n	d7e94 <__aeabi_d2f+0x30>
   d7e78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7e7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7e80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7e84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7e88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7e8c:	bf08      	it	eq
   d7e8e:	f020 0001 	biceq.w	r0, r0, #1
   d7e92:	4770      	bx	lr
   d7e94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7e98:	d121      	bne.n	d7ede <__aeabi_d2f+0x7a>
   d7e9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7e9e:	bfbc      	itt	lt
   d7ea0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7ea4:	4770      	bxlt	lr
   d7ea6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7eaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7eae:	f1c2 0218 	rsb	r2, r2, #24
   d7eb2:	f1c2 0c20 	rsb	ip, r2, #32
   d7eb6:	fa10 f30c 	lsls.w	r3, r0, ip
   d7eba:	fa20 f002 	lsr.w	r0, r0, r2
   d7ebe:	bf18      	it	ne
   d7ec0:	f040 0001 	orrne.w	r0, r0, #1
   d7ec4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ec8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7ecc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7ed0:	ea40 000c 	orr.w	r0, r0, ip
   d7ed4:	fa23 f302 	lsr.w	r3, r3, r2
   d7ed8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7edc:	e7cc      	b.n	d7e78 <__aeabi_d2f+0x14>
   d7ede:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7ee2:	d107      	bne.n	d7ef4 <__aeabi_d2f+0x90>
   d7ee4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7ee8:	bf1e      	ittt	ne
   d7eea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7eee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7ef2:	4770      	bxne	lr
   d7ef4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7f00:	4770      	bx	lr
   d7f02:	bf00      	nop

000d7f04 <__cxa_atexit>:
   d7f04:	b510      	push	{r4, lr}
   d7f06:	4c05      	ldr	r4, [pc, #20]	; (d7f1c <__cxa_atexit+0x18>)
   d7f08:	4613      	mov	r3, r2
   d7f0a:	b12c      	cbz	r4, d7f18 <__cxa_atexit+0x14>
   d7f0c:	460a      	mov	r2, r1
   d7f0e:	4601      	mov	r1, r0
   d7f10:	2002      	movs	r0, #2
   d7f12:	f3af 8000 	nop.w
   d7f16:	bd10      	pop	{r4, pc}
   d7f18:	4620      	mov	r0, r4
   d7f1a:	bd10      	pop	{r4, pc}
   d7f1c:	00000000 	.word	0x00000000

000d7f20 <memcpy>:
   d7f20:	b510      	push	{r4, lr}
   d7f22:	1e43      	subs	r3, r0, #1
   d7f24:	440a      	add	r2, r1
   d7f26:	4291      	cmp	r1, r2
   d7f28:	d004      	beq.n	d7f34 <memcpy+0x14>
   d7f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7f32:	e7f8      	b.n	d7f26 <memcpy+0x6>
   d7f34:	bd10      	pop	{r4, pc}

000d7f36 <memset>:
   d7f36:	4402      	add	r2, r0
   d7f38:	4603      	mov	r3, r0
   d7f3a:	4293      	cmp	r3, r2
   d7f3c:	d002      	beq.n	d7f44 <memset+0xe>
   d7f3e:	f803 1b01 	strb.w	r1, [r3], #1
   d7f42:	e7fa      	b.n	d7f3a <memset+0x4>
   d7f44:	4770      	bx	lr
	...

000d7f48 <srand>:
   d7f48:	b538      	push	{r3, r4, r5, lr}
   d7f4a:	4b12      	ldr	r3, [pc, #72]	; (d7f94 <srand+0x4c>)
   d7f4c:	681c      	ldr	r4, [r3, #0]
   d7f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7f50:	4605      	mov	r5, r0
   d7f52:	b9d3      	cbnz	r3, d7f8a <srand+0x42>
   d7f54:	2018      	movs	r0, #24
   d7f56:	f7fd f8ed 	bl	d5134 <malloc>
   d7f5a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7f5e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7f60:	8003      	strh	r3, [r0, #0]
   d7f62:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7f66:	8043      	strh	r3, [r0, #2]
   d7f68:	f241 2334 	movw	r3, #4660	; 0x1234
   d7f6c:	8083      	strh	r3, [r0, #4]
   d7f6e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7f72:	80c3      	strh	r3, [r0, #6]
   d7f74:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7f78:	8103      	strh	r3, [r0, #8]
   d7f7a:	2305      	movs	r3, #5
   d7f7c:	8143      	strh	r3, [r0, #10]
   d7f7e:	230b      	movs	r3, #11
   d7f80:	8183      	strh	r3, [r0, #12]
   d7f82:	2201      	movs	r2, #1
   d7f84:	2300      	movs	r3, #0
   d7f86:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7f8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7f8c:	2200      	movs	r2, #0
   d7f8e:	611d      	str	r5, [r3, #16]
   d7f90:	615a      	str	r2, [r3, #20]
   d7f92:	bd38      	pop	{r3, r4, r5, pc}
   d7f94:	2003e394 	.word	0x2003e394

000d7f98 <strlen>:
   d7f98:	4603      	mov	r3, r0
   d7f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f9e:	2a00      	cmp	r2, #0
   d7fa0:	d1fb      	bne.n	d7f9a <strlen+0x2>
   d7fa2:	1a18      	subs	r0, r3, r0
   d7fa4:	3801      	subs	r0, #1
   d7fa6:	4770      	bx	lr

000d7fa8 <dynalib_user>:
   d7fa8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7fb8:	0000 0000 6954 656d 3d20 2520 2c66 4420     ....Time = %f, D
   d7fc8:	7461 2061 203d 6925 0a20 0000               ata = %i ...

000d7fd4 <_ZTV16Adafruit_SSD1306>:
	...
   d7fdc:	40c9 000d 4215 000d 4c71 000d 53dd 000d     .@...B..qL...S..
   d7fec:	453d 000d 4971 000d 43c5 000d 4251 000d     =E..qI...C..QB..
   d7ffc:	4a31 000d 4ac7 000d 4aff 000d 4b1b 000d     1J...J...J...K..

000d800c <_ZTV12Adafruit_GFX>:
	...
   d801c:	4c71 000d 53dd 000d 40a5 000d 4971 000d     qL...S...@..qI..
   d802c:	4a91 000d 4aad 000d 4a31 000d 4ac7 000d     .J...J..1J...J..
   d803c:	4aff 000d 4b1b 000d                         .J...K..

000d8044 <_ZL4font>:
   d8044:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d8054:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d8064:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d8074:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d8084:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d8094:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d80a4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d80b4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d80c4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d80d4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d80e4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d80f4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8104:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8114:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8124:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8134:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8144:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d8154:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d8164:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d8174:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8184:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8194:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d81a4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d81b4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d81c4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d81d4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d81e4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d81f4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8204:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8214:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8224:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8234:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8244:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d8254:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d8264:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d8274:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8284:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8294:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d82a4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d82b4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d82c4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d82d4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d82e4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d82f4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8304:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8314:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8324:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d8334:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8344:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d8354:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d8364:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d8374:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8384:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8394:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d83a4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d83b4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d83c4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d83d4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d83e4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d83f4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8404:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8414:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8424:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d8434:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8444:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d8454:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d8464:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d8474:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d8484:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8494:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d84a4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d84b4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d84c4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d84d4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d84e4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d84f4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8504:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8514:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8524:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d8534:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8540 <_ZTVN5spark13EthernetClassE>:
	...
   d8548:	51c3 000d 51b9 000d 51af 000d 51a5 000d     .Q...Q...Q...Q..
   d8558:	5199 000d 518d 000d 5181 000d 5179 000d     .Q...Q...Q..yQ..
   d8568:	516f 000d 5165 000d 5c8d 000d               oQ..eQ...\..

000d8574 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8574:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8584:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8594:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d85a4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d85b4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d85c4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d85d4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d85e4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d85f4:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d8604:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d8614:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d8624:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d8634:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d8644:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d8654:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d8664:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d8674:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d8684:	0065 0000                                   e...

000d8688 <_ZTV9IPAddress>:
	...
   d8690:	5699 000d 5689 000d 568b 000d               .V...V...V..

000d869c <_ZTV9USBSerial>:
	...
   d86a4:	5771 000d 57c1 000d 57cf 000d 53dd 000d     qW...W...W...S..
   d86b4:	57ad 000d 5773 000d 5789 000d 57bb 000d     .W..sW...W...W..
   d86c4:	579f 000d 576d 000d                         .W..mW..

000d86cc <_ZTV11USARTSerial>:
	...
   d86d4:	587d 000d 58cd 000d 58db 000d 53dd 000d     }X...X...X...S..
   d86e4:	5891 000d 58b3 000d 589f 000d 58c7 000d     .X...X...X...X..
   d86f4:	587f 000d 5883 000d                         .X...X..

000d86fc <_ZTV7TwoWire>:
	...
   d8704:	5981 000d 59cb 000d 59a3 000d 5983 000d     .Y...Y...Y...Y..
   d8714:	59ab 000d 59b3 000d 59bb 000d 59c3 000d     .Y...Y...Y...Y..

000d8724 <_ZTVN5spark9MeshClassE>:
	...
   d872c:	5a8b 000d 5a81 000d 5a77 000d 5a6d 000d     .Z...Z..wZ..mZ..
   d873c:	5a61 000d 5a55 000d 5a49 000d 5a41 000d     aZ..UZ..IZ..AZ..
   d874c:	5a37 000d 5a2d 000d 5c8d 000d               7Z..-Z...\..

000d8758 <_ZTVN5spark9WiFiClassE>:
	...
   d8760:	5c07 000d 5bfd 000d 5bf3 000d 5ba9 000d     .\...[...[...[..
   d8770:	5be7 000d 5bdb 000d 5bcf 000d 5bc7 000d     .[...[...[...[..
   d8780:	5bbd 000d 5bb3 000d 5c8d 000d               .[...[...\..

000d878c <_ZTVN5spark12NetworkClassE>:
	...
   d8794:	5c25 000d 5c2f 000d 5c39 000d 5c43 000d     %\../\..9\..C\..
   d87a4:	5c4d 000d 5c59 000d 5c65 000d 5c71 000d     M\..Y\..e\..q\..
   d87b4:	5c79 000d 5c83 000d 5c8d 000d               y\...\...\..

000d87c0 <_ZSt7nothrow>:
   d87c0:	0000 0000                                   ....

000d87c4 <npio2_hw>:
   d87c4:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   d87d4:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   d87e4:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   d87f4:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   d8804:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   d8814:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   d8824:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   d8834:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000d8844 <two_over_pi>:
   d8844:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   d8854:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   d8864:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   d8874:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   d8884:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   d8894:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   d88a4:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   d88b4:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   d88c4:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   d88d4:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   d88e4:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   d88f4:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   d8904:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   d8914:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   d8924:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   d8934:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   d8944:	e27b 0060 8c6b 00c0                         {.`.k...

000d894c <init_jk>:
   d894c:	0002 0000 0003 0000 0004 0000 0006 0000     ................
   d895c:	0000 0000                                   ....

000d8960 <PIo2>:
   d8960:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   d8970:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   d8980:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   d8990:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000d89a0 <__sf_fake_stdin>:
	...

000d89c0 <__sf_fake_stdout>:
	...

000d89e0 <__sf_fake_stderr>:
	...
   d8a00:	0043                                        C.

000d8a02 <link_const_variable_data_end>:
	...

000d8a04 <link_constructors_location>:
   d8a04:	000d4225 	.word	0x000d4225
   d8a08:	000d496d 	.word	0x000d496d
   d8a0c:	000d4d09 	.word	0x000d4d09
   d8a10:	000d51cd 	.word	0x000d51cd
   d8a14:	000d5371 	.word	0x000d5371
   d8a18:	000d53b5 	.word	0x000d53b5
   d8a1c:	000d54fd 	.word	0x000d54fd
   d8a20:	000d550d 	.word	0x000d550d
   d8a24:	000d555d 	.word	0x000d555d
   d8a28:	000d5b59 	.word	0x000d5b59
   d8a2c:	000d5c11 	.word	0x000d5c11
   d8a30:	000d5d59 	.word	0x000d5d59
   d8a34:	000d5f39 	.word	0x000d5f39
   d8a38:	000d5fbd 	.word	0x000d5fbd
   d8a3c:	000d6081 	.word	0x000d6081
   d8a40:	000d6145 	.word	0x000d6145

000d8a44 <link_constructors_end>:
	...
