
c:/Users/IoTPa/Documents/jarvis/HPMA2/target/1.5.0/argon/HPMA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ab0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9ad0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00001470  2003cdd8  000d9ad4  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005a8  2003e248  2003e248  0002e248  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000daf44  000daf44  0002af44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000daf6c  000daf6c  0002af6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013b08d  00000000  00000000  0002af70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001978c  00000000  00000000  00165ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000267c0  00000000  00000000  0017f789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e00  00000000  00000000  001a5f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005548  00000000  00000000  001a8d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00042247  00000000  00000000  001ae291  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003e92d  00000000  00000000  001f04d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111089  00000000  00000000  0022ee05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e9f8  00000000  00000000  0033fe90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f833 	bl	d909c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f853 	bl	d90e8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003cdd8 	.word	0x2003cdd8
   d404c:	000d9ad4 	.word	0x000d9ad4
   d4050:	2003e248 	.word	0x2003e248
   d4054:	2003e248 	.word	0x2003e248
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f8b5 	bl	d71cc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9ac4 	.word	0x000d9ac4
   d4084:	000d9a70 	.word	0x000d9a70

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8a6 	b.w	d41d8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f943 	bl	d4318 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b85b 	b.w	d7150 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bd97 	b.w	d5bcc <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bd9d 	b.w	d5bdc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bd9b 	b.w	d5bdc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fcc0 	bl	d5a34 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5725 	.word	0x000d5725

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d6:	6803      	ldr	r3, [r0, #0]
   d40d8:	4718      	bx	r3

000d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40da:	2a01      	cmp	r2, #1
   d40dc:	d002      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40de:	2a02      	cmp	r2, #2
   d40e0:	d002      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40e2:	e004      	b.n	d40ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e002      	b.n	d40ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	b100      	cbz	r0, d40ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ec:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ee:	2000      	movs	r0, #0
   d40f0:	4770      	bx	lr
	...

000d40f4 <_Z12set_interval6String>:
  Particle.publish("blob", AirQual.toString(), PRIVATE, WITH_ACK);

}

// Cloud function for setting interval
int set_interval( String period ) {
   d40f4:	b508      	push	{r3, lr}

  // Set the interval with the air quality code
  AirQual.setInterval((uint32_t)period.toInt());
   d40f6:	f001 fef7 	bl	d5ee8 <_ZNK6String5toIntEv>
   d40fa:	4601      	mov	r1, r0
   d40fc:	4802      	ldr	r0, [pc, #8]	; (d4108 <_Z12set_interval6String+0x14>)
   d40fe:	f001 f89b 	bl	d5238 <_ZN14AirQualityWing11setIntervalEm>

  return -1;

}
   d4102:	f04f 30ff 	mov.w	r0, #4294967295
   d4106:	bd08      	pop	{r3, pc}
   d4108:	2003e250 	.word	0x2003e250

000d410c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d410c:	4b0a      	ldr	r3, [pc, #40]	; (d4138 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d410e:	b510      	push	{r4, lr}
   d4110:	4604      	mov	r4, r0
   d4112:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4114:	f002 f95c 	bl	d63d0 <_ZN5spark10LogManager8instanceEv>
   d4118:	4621      	mov	r1, r4
   d411a:	f002 fb49 	bl	d67b0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d411e:	f003 fc49 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4122:	f003 fc3b 	bl	d799c <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4126:	4620      	mov	r0, r4
   d4128:	4b04      	ldr	r3, [pc, #16]	; (d413c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d412a:	f840 3b04 	str.w	r3, [r0], #4
   d412e:	f002 fa45 	bl	d65bc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4132:	4620      	mov	r0, r4
   d4134:	bd10      	pop	{r4, pc}
   d4136:	bf00      	nop
   d4138:	000d9388 	.word	0x000d9388
   d413c:	000d9370 	.word	0x000d9370

000d4140 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4140:	b510      	push	{r4, lr}
   d4142:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4144:	f7ff ffe2 	bl	d410c <_ZN5spark16SerialLogHandlerD1Ev>
   d4148:	4620      	mov	r0, r4
   d414a:	2124      	movs	r1, #36	; 0x24
   d414c:	f004 fa1c 	bl	d8588 <_ZdlPvj>
   d4150:	4620      	mov	r0, r4
   d4152:	bd10      	pop	{r4, pc}

000d4154 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4154:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4156:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4158:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d415a:	b113      	cbz	r3, d4162 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d415c:	2203      	movs	r2, #3
   d415e:	4601      	mov	r1, r0
   d4160:	4798      	blx	r3
    }
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}

000d4166 <_ZN14AirQualityWingD1Ev>:

// Handler defintion
typedef std::function<void()> AirQualityWingHandler_t;

// Air quality class. Only create one of these!
class AirQualityWing
   d4166:	b510      	push	{r4, lr}
   d4168:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d416a:	3024      	adds	r0, #36	; 0x24
   d416c:	f7ff fff2 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d4170:	4620      	mov	r0, r4
   d4172:	f7ff ffef 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d4176:	4620      	mov	r0, r4
   d4178:	bd10      	pop	{r4, pc}

000d417a <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d417a:	b40e      	push	{r1, r2, r3}
   d417c:	b500      	push	{lr}
   d417e:	b08c      	sub	sp, #48	; 0x30
   d4180:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4182:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4184:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4188:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d418a:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d418e:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4190:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4192:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4194:	aa04      	add	r2, sp, #16
   d4196:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4198:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d419a:	f001 fc53 	bl	d5a44 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d419e:	b00c      	add	sp, #48	; 0x30
   d41a0:	f85d eb04 	ldr.w	lr, [sp], #4
   d41a4:	b003      	add	sp, #12
   d41a6:	4770      	bx	lr

000d41a8 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d41a8:	b40e      	push	{r1, r2, r3}
   d41aa:	b500      	push	{lr}
   d41ac:	b08c      	sub	sp, #48	; 0x30
   d41ae:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41b0:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d41b2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d41b6:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b8:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41bc:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41be:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41c0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c2:	aa04      	add	r2, sp, #16
   d41c4:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41c6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c8:	f001 fc3c 	bl	d5a44 <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
   d41cc:	b00c      	add	sp, #48	; 0x30
   d41ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d41d2:	b003      	add	sp, #12
   d41d4:	4770      	bx	lr
	...

000d41d8 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
   d41d8:	b510      	push	{r4, lr}
   d41da:	b08a      	sub	sp, #40	; 0x28
  // Turn off the LED
  // RGB.control(true);
  // RGB.brightness(0);

  // Set up PC based UART (for debugging)
  Serial.blockOnOverrun(false);
   d41dc:	f003 fbea 	bl	d79b4 <_Z16_fetch_usbserialv>
   d41e0:	6803      	ldr	r3, [r0, #0]
    CCS811_WAKE_PIN,      //CCS811 wake pin
    HPMA1150_EN_PIN       //HPMA int pin
  };

  // Setup & Begin Air Quality
  AirQual.setup(AirQualityWingEvent, defaultSettings);
   d41e2:	4c22      	ldr	r4, [pc, #136]	; (d426c <setup+0x94>)
  // Turn off the LED
  // RGB.control(true);
  // RGB.brightness(0);

  // Set up PC based UART (for debugging)
  Serial.blockOnOverrun(false);
   d41e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d41e6:	2100      	movs	r1, #0
   d41e8:	4798      	blx	r3
  Serial.begin();
   d41ea:	f003 fbe3 	bl	d79b4 <_Z16_fetch_usbserialv>
   d41ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41f2:	f003 fbcf 	bl	d7994 <_ZN9USBSerial5beginEl>

  // Set up I2C
  Wire.setSpeed(I2C_CLK_SPEED);
   d41f6:	f004 f993 	bl	d8520 <_Z19__fetch_global_Wirev>
   d41fa:	491d      	ldr	r1, [pc, #116]	; (d4270 <setup+0x98>)
   d41fc:	f003 fd44 	bl	d7c88 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   d4200:	f004 f98e 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4204:	f003 fd44 	bl	d7c90 <_ZN7TwoWire5beginEv>
    CCS811_ADDRESS,       //CCS811 address
    CCS811_INT_PIN,       //CCS811 intpin
    CCS811_RST_PIN,       //CCS811 rst pin
    CCS811_WAKE_PIN,      //CCS811 wake pin
    HPMA1150_EN_PIN       //HPMA int pin
  };
   d4208:	4a1a      	ldr	r2, [pc, #104]	; (d4274 <setup+0x9c>)
   d420a:	ca07      	ldmia	r2, {r0, r1, r2}
   d420c:	ab03      	add	r3, sp, #12
   d420e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4212:	4a19      	ldr	r2, [pc, #100]	; (d4278 <setup+0xa0>)
   d4214:	9206      	str	r2, [sp, #24]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4216:	4a19      	ldr	r2, [pc, #100]	; (d427c <setup+0xa4>)
   d4218:	9209      	str	r2, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d421a:	4a19      	ldr	r2, [pc, #100]	; (d4280 <setup+0xa8>)
   d421c:	9208      	str	r2, [sp, #32]

  // Setup & Begin Air Quality
  AirQual.setup(AirQualityWingEvent, defaultSettings);
   d421e:	9a05      	ldr	r2, [sp, #20]
   d4220:	9200      	str	r2, [sp, #0]
   d4222:	cb0c      	ldmia	r3, {r2, r3}
   d4224:	a906      	add	r1, sp, #24
   d4226:	4620      	mov	r0, r4
   d4228:	f001 f94e 	bl	d54c8 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d422c:	a806      	add	r0, sp, #24
   d422e:	f7ff ff91 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
  AirQual.begin();
   d4232:	4620      	mov	r0, r4
   d4234:	f000 ff0c 	bl	d5050 <_ZN14AirQualityWing5beginEv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4238:	4a12      	ldr	r2, [pc, #72]	; (d4284 <setup+0xac>)
   d423a:	4913      	ldr	r1, [pc, #76]	; (d4288 <setup+0xb0>)
   d423c:	4813      	ldr	r0, [pc, #76]	; (d428c <setup+0xb4>)
   d423e:	f003 f84f 	bl	d72e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4242:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4244:	2208      	movs	r2, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4246:	9306      	str	r3, [sp, #24]
        conn_prop.size = sizeof(conn_prop);
   d4248:	f8ad 2018 	strh.w	r2, [sp, #24]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d424c:	2201      	movs	r2, #1
        spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr);
   d424e:	4618      	mov	r0, r3
#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4250:	9207      	str	r2, [sp, #28]
        spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr);
   d4252:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4256:	aa06      	add	r2, sp, #24
   d4258:	f001 fca8 	bl	d5bac <spark_set_connection_property>

  // Set up keep alive
  Particle.keepAlive(60);

  // Startup message
  Serial.println("Air Quality Wing for Particle Mesh");
   d425c:	f003 fbaa 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4260:	490b      	ldr	r1, [pc, #44]	; (d4290 <setup+0xb8>)
   d4262:	f001 feec 	bl	d603e <_ZN5Print7printlnEPKc>

}
   d4266:	b00a      	add	sp, #40	; 0x28
   d4268:	bd10      	pop	{r4, pc}
   d426a:	bf00      	nop
   d426c:	2003e250 	.word	0x2003e250
   d4270:	000186a0 	.word	0x000186a0
   d4274:	000d9398 	.word	0x000d9398
   d4278:	000d42c1 	.word	0x000d42c1
   d427c:	000d40d7 	.word	0x000d40d7
   d4280:	000d40db 	.word	0x000d40db
   d4284:	000d93a4 	.word	0x000d93a4
   d4288:	000d40f5 	.word	0x000d40f5
   d428c:	000d72b5 	.word	0x000d72b5
   d4290:	000d93b1 	.word	0x000d93b1

000d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4294:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4296:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4298:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d429a:	b17c      	cbz	r4, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d429c:	6863      	ldr	r3, [r4, #4]
   d429e:	3b01      	subs	r3, #1
   d42a0:	6063      	str	r3, [r4, #4]
   d42a2:	b95b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	4620      	mov	r0, r4
   d42a8:	689b      	ldr	r3, [r3, #8]
   d42aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ac:	68a3      	ldr	r3, [r4, #8]
   d42ae:	3b01      	subs	r3, #1
   d42b0:	60a3      	str	r3, [r4, #8]
   d42b2:	b91b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42b4:	6823      	ldr	r3, [r4, #0]
   d42b6:	4620      	mov	r0, r4
   d42b8:	68db      	ldr	r3, [r3, #12]
   d42ba:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42bc:	4628      	mov	r0, r5
   d42be:	bd38      	pop	{r3, r4, r5, pc}

000d42c0 <_Z19AirQualityWingEventv>:
// AirQualityWing object
AirQualityWing AirQual = AirQualityWing();

// Handler is called in main loop.
// Ok to run Particle.Publish
void AirQualityWingEvent() {
   d42c0:	b500      	push	{lr}

  Log.trace("pub");
   d42c2:	490f      	ldr	r1, [pc, #60]	; (d4300 <_Z19AirQualityWingEventv+0x40>)
   d42c4:	480f      	ldr	r0, [pc, #60]	; (d4304 <_Z19AirQualityWingEventv+0x44>)
// AirQualityWing object
AirQualityWing AirQual = AirQualityWing();

// Handler is called in main loop.
// Ok to run Particle.Publish
void AirQualityWingEvent() {
   d42c6:	b089      	sub	sp, #36	; 0x24

  Log.trace("pub");
   d42c8:	f7ff ff57 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>

  // Publish event
  Particle.publish("blob", AirQual.toString(), PRIVATE, WITH_ACK);
   d42cc:	a804      	add	r0, sp, #16
   d42ce:	490e      	ldr	r1, [pc, #56]	; (d4308 <_Z19AirQualityWingEventv+0x48>)
   d42d0:	f000 fede 	bl	d5090 <_ZN14AirQualityWing8toStringEv>
   d42d4:	4b0d      	ldr	r3, [pc, #52]	; (d430c <_Z19AirQualityWingEventv+0x4c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42d6:	490e      	ldr	r1, [pc, #56]	; (d4310 <_Z19AirQualityWingEventv+0x50>)
   d42d8:	781a      	ldrb	r2, [r3, #0]
   d42da:	4b0e      	ldr	r3, [pc, #56]	; (d4314 <_Z19AirQualityWingEventv+0x54>)
   d42dc:	781b      	ldrb	r3, [r3, #0]
   d42de:	4313      	orrs	r3, r2
   d42e0:	f88d 3000 	strb.w	r3, [sp]
   d42e4:	9a04      	ldr	r2, [sp, #16]
   d42e6:	233c      	movs	r3, #60	; 0x3c
   d42e8:	a802      	add	r0, sp, #8
   d42ea:	f003 f909 	bl	d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42ee:	a803      	add	r0, sp, #12
   d42f0:	f7ff ffd0 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42f4:	a804      	add	r0, sp, #16
   d42f6:	f001 fd29 	bl	d5d4c <_ZN6StringD1Ev>

}
   d42fa:	b009      	add	sp, #36	; 0x24
   d42fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4300:	000d93d4 	.word	0x000d93d4
   d4304:	2003e34c 	.word	0x2003e34c
   d4308:	2003e250 	.word	0x2003e250
   d430c:	2003e2fc 	.word	0x2003e2fc
   d4310:	000d93d8 	.word	0x000d93d8
   d4314:	2003e2d4 	.word	0x2003e2d4

000d4318 <loop>:
  Serial.println("Air Quality Wing for Particle Mesh");

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4318:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  uint32_t err_code = AirQual.process();
   d431a:	4825      	ldr	r0, [pc, #148]	; (d43b0 <loop+0x98>)
   d431c:	f000 ffbc 	bl	d5298 <_ZN14AirQualityWing7processEv>
  if( err_code != success ) {
   d4320:	2800      	cmp	r0, #0
   d4322:	d042      	beq.n	d43aa <loop+0x92>

    switch(err_code) {
   d4324:	2802      	cmp	r0, #2
   d4326:	d018      	beq.n	d435a <loop+0x42>
   d4328:	2803      	cmp	r0, #3
   d432a:	d002      	beq.n	d4332 <loop+0x1a>
   d432c:	2801      	cmp	r0, #1
   d432e:	d13c      	bne.n	d43aa <loop+0x92>
   d4330:	e027      	b.n	d4382 <loop+0x6a>
   d4332:	4b20      	ldr	r3, [pc, #128]	; (d43b4 <loop+0x9c>)
   d4334:	4920      	ldr	r1, [pc, #128]	; (d43b8 <loop+0xa0>)
   d4336:	781a      	ldrb	r2, [r3, #0]
   d4338:	4b20      	ldr	r3, [pc, #128]	; (d43bc <loop+0xa4>)
   d433a:	781b      	ldrb	r3, [r3, #0]
   d433c:	4313      	orrs	r3, r2
   d433e:	f88d 3000 	strb.w	r3, [sp]
   d4342:	4a1f      	ldr	r2, [pc, #124]	; (d43c0 <loop+0xa8>)
   d4344:	233c      	movs	r3, #60	; 0x3c
   d4346:	a802      	add	r0, sp, #8
   d4348:	f003 f8da 	bl	d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d434c:	a803      	add	r0, sp, #12
   d434e:	f7ff ffa1 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      case si7021_error:
         Particle.publish("err", "si7021" , PRIVATE, NO_ACK);
          Log.error("Error si7021");
   d4352:	491c      	ldr	r1, [pc, #112]	; (d43c4 <loop+0xac>)
   d4354:	481c      	ldr	r0, [pc, #112]	; (d43c8 <loop+0xb0>)
   d4356:	f7ff ff27 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>
   d435a:	4b16      	ldr	r3, [pc, #88]	; (d43b4 <loop+0x9c>)
   d435c:	4916      	ldr	r1, [pc, #88]	; (d43b8 <loop+0xa0>)
   d435e:	781a      	ldrb	r2, [r3, #0]
   d4360:	4b16      	ldr	r3, [pc, #88]	; (d43bc <loop+0xa4>)
   d4362:	781b      	ldrb	r3, [r3, #0]
   d4364:	4313      	orrs	r3, r2
   d4366:	f88d 3000 	strb.w	r3, [sp]
   d436a:	4a18      	ldr	r2, [pc, #96]	; (d43cc <loop+0xb4>)
   d436c:	233c      	movs	r3, #60	; 0x3c
   d436e:	a802      	add	r0, sp, #8
   d4370:	f003 f8c6 	bl	d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4374:	a803      	add	r0, sp, #12
   d4376:	f7ff ff8d 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      case ccs811_error:
         Particle.publish("err", "ccs811" , PRIVATE, NO_ACK);
          Log.error("Error ccs811");
   d437a:	4915      	ldr	r1, [pc, #84]	; (d43d0 <loop+0xb8>)
   d437c:	4812      	ldr	r0, [pc, #72]	; (d43c8 <loop+0xb0>)
   d437e:	f7ff ff13 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>
   d4382:	4b0c      	ldr	r3, [pc, #48]	; (d43b4 <loop+0x9c>)
   d4384:	490c      	ldr	r1, [pc, #48]	; (d43b8 <loop+0xa0>)
   d4386:	781a      	ldrb	r2, [r3, #0]
   d4388:	4b0c      	ldr	r3, [pc, #48]	; (d43bc <loop+0xa4>)
   d438a:	781b      	ldrb	r3, [r3, #0]
   d438c:	4313      	orrs	r3, r2
   d438e:	f88d 3000 	strb.w	r3, [sp]
   d4392:	4a10      	ldr	r2, [pc, #64]	; (d43d4 <loop+0xbc>)
   d4394:	233c      	movs	r3, #60	; 0x3c
   d4396:	a802      	add	r0, sp, #8
   d4398:	f003 f8b2 	bl	d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d439c:	a803      	add	r0, sp, #12
   d439e:	f7ff ff79 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      case hpma115_error:
         Particle.publish("err", "hpma115" , PRIVATE, NO_ACK);
          Log.error("Error hpma115");
   d43a2:	490d      	ldr	r1, [pc, #52]	; (d43d8 <loop+0xc0>)
   d43a4:	4808      	ldr	r0, [pc, #32]	; (d43c8 <loop+0xb0>)
   d43a6:	f7ff feff 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>
        break;
    }

  }

   d43aa:	b005      	add	sp, #20
   d43ac:	f85d fb04 	ldr.w	pc, [sp], #4
   d43b0:	2003e250 	.word	0x2003e250
   d43b4:	2003e24c 	.word	0x2003e24c
   d43b8:	000d9527 	.word	0x000d9527
   d43bc:	2003e2d4 	.word	0x2003e2d4
   d43c0:	000d93e3 	.word	0x000d93e3
   d43c4:	000d93dd 	.word	0x000d93dd
   d43c8:	2003e34c 	.word	0x2003e34c
   d43cc:	000d93f0 	.word	0x000d93f0
   d43d0:	000d93ea 	.word	0x000d93ea
   d43d4:	000d93fd 	.word	0x000d93fd
   d43d8:	000d93f7 	.word	0x000d93f7

000d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43de:	6804      	ldr	r4, [r0, #0]
   d43e0:	6843      	ldr	r3, [r0, #4]
   d43e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43e4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d43e6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d43ea:	42a6      	cmp	r6, r4
   d43ec:	d004      	beq.n	d43f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d43ee:	4620      	mov	r0, r4
   d43f0:	f001 fcac 	bl	d5d4c <_ZN6StringD1Ev>
   d43f4:	3414      	adds	r4, #20
   d43f6:	e7f8      	b.n	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d43f8:	6828      	ldr	r0, [r5, #0]
   d43fa:	f001 fbef 	bl	d5bdc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d43fe:	4628      	mov	r0, r5
   d4400:	bd70      	pop	{r4, r5, r6, pc}

000d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d4402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        T* d = nullptr;
        if (n > 0) {
   d4406:	1e0f      	subs	r7, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d4408:	4606      	mov	r6, r0
        T* d = nullptr;
        if (n > 0) {
   d440a:	dd38      	ble.n	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d440c:	2514      	movs	r5, #20
   d440e:	fb05 f007 	mul.w	r0, r5, r7
   d4412:	f001 fbdb 	bl	d5bcc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4416:	4680      	mov	r8, r0
   d4418:	2800      	cmp	r0, #0
   d441a:	d03b      	beq.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x92>
                return false;
            }
            move(d, data_, data_ + size_);
   d441c:	6834      	ldr	r4, [r6, #0]
   d441e:	6873      	ldr	r3, [r6, #4]
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4420:	4284      	cmp	r4, r0
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
                return false;
            }
            move(d, data_, data_ + size_);
   d4422:	fb05 4503 	mla	r5, r5, r3, r4
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4426:	d215      	bcs.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x52>
   d4428:	4285      	cmp	r5, r0
   d442a:	d914      	bls.n	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
            // Move elements in reverse order
            --p;
            --end;
   d442c:	3d14      	subs	r5, #20
            dest += end - p - 1;
   d442e:	f1a4 0914 	sub.w	r9, r4, #20
   d4432:	1b2c      	subs	r4, r5, r4
   d4434:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4436:	45a9      	cmp	r9, r5
   d4438:	d023      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
   d443a:	b12c      	cbz	r4, d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x46>
   d443c:	4629      	mov	r1, r5
   d443e:	4620      	mov	r0, r4
   d4440:	f001 fc74 	bl	d5d2c <_ZN6StringC1EOS_>
   d4444:	7c2b      	ldrb	r3, [r5, #16]
   d4446:	7423      	strb	r3, [r4, #16]
   d4448:	4628      	mov	r0, r5
   d444a:	f001 fc7f 	bl	d5d4c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d444e:	3d14      	subs	r5, #20
   d4450:	3c14      	subs	r4, #20
   d4452:	e7f0      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x34>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4454:	d015      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4456:	46c1      	mov	r9, r8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4458:	42a5      	cmp	r5, r4
   d445a:	d012      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
   d445c:	f1b9 0f00 	cmp.w	r9, #0
   d4460:	d006      	beq.n	d4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x6e>
   d4462:	4621      	mov	r1, r4
   d4464:	4648      	mov	r0, r9
   d4466:	f001 fc61 	bl	d5d2c <_ZN6StringC1EOS_>
   d446a:	7c23      	ldrb	r3, [r4, #16]
   d446c:	f889 3010 	strb.w	r3, [r9, #16]
   d4470:	4620      	mov	r0, r4
   d4472:	f001 fc6b 	bl	d5d4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4476:	3414      	adds	r4, #20
   d4478:	f109 0914 	add.w	r9, r9, #20
   d447c:	e7ec      	b.n	d4458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d447e:	f04f 0800 	mov.w	r8, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4482:	6830      	ldr	r0, [r6, #0]
   d4484:	f001 fbaa 	bl	d5bdc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4488:	f8c6 8000 	str.w	r8, [r6]
        capacity_ = n;
   d448c:	60b7      	str	r7, [r6, #8]
        return true;
   d448e:	2001      	movs	r0, #1
   d4490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
   d4494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>:
    static void copy(T* dest, const T* p, const T* end) {
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
   d4498:	b570      	push	{r4, r5, r6, lr}
   d449a:	4604      	mov	r4, r0
   d449c:	460d      	mov	r5, r1
   d449e:	4616      	mov	r6, r2
        for (; p != end; ++p, ++dest) {
   d44a0:	42b5      	cmp	r5, r6
   d44a2:	d009      	beq.n	d44b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x20>
            new(dest) T(*p);
   d44a4:	b12c      	cbz	r4, d44b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x1a>
   d44a6:	4629      	mov	r1, r5
   d44a8:	4620      	mov	r0, r4
   d44aa:	f001 fcd5 	bl	d5e58 <_ZN6StringC1ERKS_>
   d44ae:	7c2b      	ldrb	r3, [r5, #16]
   d44b0:	7423      	strb	r3, [r4, #16]
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
        for (; p != end; ++p, ++dest) {
   d44b2:	3514      	adds	r5, #20
   d44b4:	3414      	adds	r4, #20
   d44b6:	e7f3      	b.n	d44a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x8>
   d44b8:	bd70      	pop	{r4, r5, r6, pc}

000d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44ba:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d44bc:	2300      	movs	r3, #0
   d44be:	6003      	str	r3, [r0, #0]
   d44c0:	6043      	str	r3, [r0, #4]
   d44c2:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44c4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44c6:	6849      	ldr	r1, [r1, #4]
   d44c8:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44ca:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44cc:	dd0c      	ble.n	d44e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
   d44ce:	f7ff ff98 	bl	d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d44d2:	b148      	cbz	r0, d44e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44d4:	e895 000a 	ldmia.w	r5, {r1, r3}
   d44d8:	2214      	movs	r2, #20
   d44da:	fb02 1203 	mla	r2, r2, r3, r1
   d44de:	6820      	ldr	r0, [r4, #0]
   d44e0:	f7ff ffda 	bl	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = vector.size_;
   d44e4:	686b      	ldr	r3, [r5, #4]
   d44e6:	6063      	str	r3, [r4, #4]
    }
}
   d44e8:	4620      	mov	r0, r4
   d44ea:	bd38      	pop	{r3, r4, r5, pc}

000d44ec <_GLOBAL__sub_I_logHandler>:
   d44ec:	b530      	push	{r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44ee:	4b34      	ldr	r3, [pc, #208]	; (d45c0 <_GLOBAL__sub_I_logHandler+0xd4>)
   d44f0:	2401      	movs	r4, #1
   d44f2:	701c      	strb	r4, [r3, #0]
   d44f4:	4b33      	ldr	r3, [pc, #204]	; (d45c4 <_GLOBAL__sub_I_logHandler+0xd8>)
   d44f6:	2202      	movs	r2, #2
   d44f8:	701a      	strb	r2, [r3, #0]
   d44fa:	4b33      	ldr	r3, [pc, #204]	; (d45c8 <_GLOBAL__sub_I_logHandler+0xdc>)
   d44fc:	b093      	sub	sp, #76	; 0x4c
   d44fe:	2208      	movs	r2, #8
   d4500:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4502:	f001 f8c7 	bl	d5694 <HAL_Pin_Map>
        level_(level) {
}

inline spark::LogCategoryFilter::LogCategoryFilter(const char *category, LogLevel level) :
        cat_(category),
        level_(level) {
   d4506:	4931      	ldr	r1, [pc, #196]	; (d45cc <_GLOBAL__sub_I_logHandler+0xe0>)
   d4508:	a80d      	add	r0, sp, #52	; 0x34
   d450a:	f001 fc66 	bl	d5dda <_ZN6StringC1EPK19__FlashStringHelper>
   d450e:	2328      	movs	r3, #40	; 0x28
   d4510:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4514:	4621      	mov	r1, r4
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4516:	2300      	movs	r3, #0
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4518:	a801      	add	r0, sp, #4
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d451a:	9301      	str	r3, [sp, #4]
   d451c:	9302      	str	r3, [sp, #8]
   d451e:	9303      	str	r3, [sp, #12]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4520:	f7ff ff6f 	bl	d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4524:	2800      	cmp	r0, #0
   d4526:	d144      	bne.n	d45b2 <_GLOBAL__sub_I_logHandler+0xc6>
        Serial.begin();
        LogManager::instance()->addHandler(this);
    }

    explicit SerialLogHandler(int baud, LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4528:	f003 fa44 	bl	d79b4 <_Z16_fetch_usbserialv>
   d452c:	a901      	add	r1, sp, #4
   d452e:	4605      	mov	r5, r0
   d4530:	a804      	add	r0, sp, #16
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4532:	4c27      	ldr	r4, [pc, #156]	; (d45d0 <_GLOBAL__sub_I_logHandler+0xe4>)
   d4534:	f7ff ffc1 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4538:	a904      	add	r1, sp, #16
   d453a:	a807      	add	r0, sp, #28
   d453c:	f7ff ffbd 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4540:	4b24      	ldr	r3, [pc, #144]	; (d45d4 <_GLOBAL__sub_I_logHandler+0xe8>)
   d4542:	6023      	str	r3, [r4, #0]
   d4544:	a907      	add	r1, sp, #28
   d4546:	a80a      	add	r0, sp, #40	; 0x28
   d4548:	f7ff ffb7 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d454c:	aa0a      	add	r2, sp, #40	; 0x28
   d454e:	2132      	movs	r1, #50	; 0x32
   d4550:	1d20      	adds	r0, r4, #4
   d4552:	f002 fa94 	bl	d6a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4556:	a80a      	add	r0, sp, #40	; 0x28
   d4558:	f7ff ff40 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d455c:	a807      	add	r0, sp, #28
   d455e:	f7ff ff3d 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4562:	4b1d      	ldr	r3, [pc, #116]	; (d45d8 <_GLOBAL__sub_I_logHandler+0xec>)
   d4564:	6023      	str	r3, [r4, #0]
   d4566:	6225      	str	r5, [r4, #32]
   d4568:	a804      	add	r0, sp, #16
   d456a:	f7ff ff37 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d456e:	4b1b      	ldr	r3, [pc, #108]	; (d45dc <_GLOBAL__sub_I_logHandler+0xf0>)
   d4570:	6023      	str	r3, [r4, #0]
        Serial.begin(baud);
   d4572:	f003 fa1f 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4576:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d457a:	f003 fa0b 	bl	d7994 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d457e:	f001 ff27 	bl	d63d0 <_ZN5spark10LogManager8instanceEv>
   d4582:	4621      	mov	r1, r4
   d4584:	f002 fa0e 	bl	d69a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
#include "board.h"

// Logger
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
    { "app", LOG_LEVEL_WARN }, // enable all app messages
});
   d4588:	a801      	add	r0, sp, #4
   d458a:	f7ff ff27 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d458e:	a80d      	add	r0, sp, #52	; 0x34
   d4590:	f001 fbdc 	bl	d5d4c <_ZN6StringD1Ev>

#include "AirQualityWing.h"
#include "board.h"

// Logger
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
   d4594:	4a12      	ldr	r2, [pc, #72]	; (d45e0 <_GLOBAL__sub_I_logHandler+0xf4>)
   d4596:	4913      	ldr	r1, [pc, #76]	; (d45e4 <_GLOBAL__sub_I_logHandler+0xf8>)
   d4598:	4620      	mov	r0, r4
   d459a:	f003 ffe7 	bl	d856c <__aeabi_atexit>

// Forward declaration of event handler
void AirQualityWingEvent();

// AirQualityWing object
AirQualityWing AirQual = AirQualityWing();
   d459e:	4812      	ldr	r0, [pc, #72]	; (d45e8 <_GLOBAL__sub_I_logHandler+0xfc>)
   d45a0:	f000 fd45 	bl	d502e <_ZN14AirQualityWingC1Ev>
   d45a4:	4a0e      	ldr	r2, [pc, #56]	; (d45e0 <_GLOBAL__sub_I_logHandler+0xf4>)
   d45a6:	4911      	ldr	r1, [pc, #68]	; (d45ec <_GLOBAL__sub_I_logHandler+0x100>)
   d45a8:	480f      	ldr	r0, [pc, #60]	; (d45e8 <_GLOBAL__sub_I_logHandler+0xfc>)
   d45aa:	f003 ffdf 	bl	d856c <__aeabi_atexit>
        break;
    }

  }

   d45ae:	b013      	add	sp, #76	; 0x4c
   d45b0:	bd30      	pop	{r4, r5, pc}
        copy(data_, values.begin(), values.end());
   d45b2:	aa12      	add	r2, sp, #72	; 0x48
   d45b4:	a90d      	add	r1, sp, #52	; 0x34
   d45b6:	9801      	ldr	r0, [sp, #4]
   d45b8:	f7ff ff6e 	bl	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = n;
   d45bc:	9402      	str	r4, [sp, #8]
   d45be:	e7b3      	b.n	d4528 <_GLOBAL__sub_I_logHandler+0x3c>
   d45c0:	2003e2d4 	.word	0x2003e2d4
   d45c4:	2003e24c 	.word	0x2003e24c
   d45c8:	2003e2fc 	.word	0x2003e2fc
   d45cc:	000d9405 	.word	0x000d9405
   d45d0:	2003e2d8 	.word	0x2003e2d8
   d45d4:	000d9370 	.word	0x000d9370
   d45d8:	000d9724 	.word	0x000d9724
   d45dc:	000d9388 	.word	0x000d9388
   d45e0:	2003e248 	.word	0x2003e248
   d45e4:	000d410d 	.word	0x000d410d
   d45e8:	2003e250 	.word	0x2003e250
   d45ec:	000d4167 	.word	0x000d4167

000d45f0 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d45f0:	6803      	ldr	r3, [r0, #0]
   d45f2:	b2c9      	uxtb	r1, r1
   d45f4:	689b      	ldr	r3, [r3, #8]
   d45f6:	4718      	bx	r3

000d45f8 <_ZN6Si7021C1Ev>:
 * License: GNU GPLv3
 */

#include "si7021.h"

Si7021::Si7021(void) {}
   d45f8:	4770      	bx	lr

000d45fa <_ZN6Si70215setupEv>:

uint32_t Si7021::setup() {
   d45fa:	b508      	push	{r3, lr}
  // Return error if we failed
  if (Wire.requestFrom(SI7021_ADDRESS, 1) == 0) {
   d45fc:	f003 ff90 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4600:	2201      	movs	r2, #1
   d4602:	2140      	movs	r1, #64	; 0x40
   d4604:	f003 fb78 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>
    return SI7021_COMMS_FAIL_ERROR;
  }

  return SI7021_SUCCESS;
}
   d4608:	fab0 f080 	clz	r0, r0
   d460c:	0940      	lsrs	r0, r0, #5
   d460e:	bd08      	pop	{r3, pc}

000d4610 <_ZN6Si70214readEP13si7021_data_t>:

 uint32_t Si7021::read(si7021_data_t * p_data) {
   d4610:	b538      	push	{r3, r4, r5, lr}
   d4612:	460d      	mov	r5, r1

    // Si7021 Temperature
    Wire.beginTransmission(SI7021_ADDRESS);
   d4614:	f003 ff84 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4618:	2140      	movs	r1, #64	; 0x40
   d461a:	f003 fb74 	bl	d7d06 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(SI7021_TEMP_HOLD_CMD); // sends one byte
   d461e:	f003 ff7f 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4622:	21e3      	movs	r1, #227	; 0xe3
   d4624:	f7ff ffe4 	bl	d45f0 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();           // stop transaction
   d4628:	f003 ff7a 	bl	d8520 <_Z19__fetch_global_Wirev>
   d462c:	f003 fb72 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(SI7021_ADDRESS, 2);
   d4630:	f003 ff76 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4634:	2202      	movs	r2, #2
   d4636:	2140      	movs	r1, #64	; 0x40
   d4638:	f003 fb5e 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

    // Get the raw temperature from the device
    uint16_t temp_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);
   d463c:	f003 ff70 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4640:	6803      	ldr	r3, [r0, #0]
   d4642:	695b      	ldr	r3, [r3, #20]
   d4644:	4798      	blx	r3
   d4646:	4604      	mov	r4, r0
   d4648:	f003 ff6a 	bl	d8520 <_Z19__fetch_global_Wirev>
   d464c:	6803      	ldr	r3, [r0, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	4798      	blx	r3

    // Then calculate the temperature
    p_data->temperature = ((175.72 * temp_code) / 0xffff - 46.85);
   d4652:	0224      	lsls	r4, r4, #8
   d4654:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d4658:	b2c0      	uxtb	r0, r0
   d465a:	4320      	orrs	r0, r4
   d465c:	f004 fa44 	bl	d8ae8 <__aeabi_i2d>
   d4660:	a323      	add	r3, pc, #140	; (adr r3, d46f0 <_ZN6Si70214readEP13si7021_data_t+0xe0>)
   d4662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4666:	f004 faa5 	bl	d8bb4 <__aeabi_dmul>
   d466a:	a323      	add	r3, pc, #140	; (adr r3, d46f8 <_ZN6Si70214readEP13si7021_data_t+0xe8>)
   d466c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4670:	f004 fbca 	bl	d8e08 <__aeabi_ddiv>
   d4674:	a322      	add	r3, pc, #136	; (adr r3, d4700 <_ZN6Si70214readEP13si7021_data_t+0xf0>)
   d4676:	e9d3 2300 	ldrd	r2, r3, [r3]
   d467a:	f004 f8e7 	bl	d884c <__aeabi_dsub>
   d467e:	f004 fcab 	bl	d8fd8 <__aeabi_d2f>
   d4682:	6028      	str	r0, [r5, #0]

    // Si7021 Humidity
    Wire.beginTransmission(SI7021_ADDRESS);
   d4684:	f003 ff4c 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4688:	2140      	movs	r1, #64	; 0x40
   d468a:	f003 fb3c 	bl	d7d06 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(SI7021_HUMIDITY_HOLD_CMD); // sends one byte
   d468e:	f003 ff47 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4692:	21e5      	movs	r1, #229	; 0xe5
   d4694:	f7ff ffac 	bl	d45f0 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();               // stop transaction
   d4698:	f003 ff42 	bl	d8520 <_Z19__fetch_global_Wirev>
   d469c:	f003 fb3a 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(SI7021_ADDRESS, 2);
   d46a0:	f003 ff3e 	bl	d8520 <_Z19__fetch_global_Wirev>
   d46a4:	2202      	movs	r2, #2
   d46a6:	2140      	movs	r1, #64	; 0x40
   d46a8:	f003 fb26 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

    // Get the raw humidity value from the evice
    uint16_t rh_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);
   d46ac:	f003 ff38 	bl	d8520 <_Z19__fetch_global_Wirev>
   d46b0:	6803      	ldr	r3, [r0, #0]
   d46b2:	695b      	ldr	r3, [r3, #20]
   d46b4:	4798      	blx	r3
   d46b6:	4604      	mov	r4, r0
   d46b8:	f003 ff32 	bl	d8520 <_Z19__fetch_global_Wirev>
   d46bc:	6803      	ldr	r3, [r0, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	4798      	blx	r3

    // Then calculate the teperature
    p_data->humidity = ((125 * rh_code) / 0xffff - 6);
   d46c2:	0224      	lsls	r4, r4, #8
   d46c4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d46c8:	b2c0      	uxtb	r0, r0
   d46ca:	4320      	orrs	r0, r4
   d46cc:	237d      	movs	r3, #125	; 0x7d
   d46ce:	4358      	muls	r0, r3
   d46d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d46d4:	fb90 f0f3 	sdiv	r0, r0, r3
   d46d8:	3806      	subs	r0, #6
   d46da:	ee07 0a90 	vmov	s15, r0
   d46de:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Serial.printf("hum: %.2f%% temp: %.2f°C\n",p_data->humidity,p_data->temperature);

    return SI7021_SUCCESS;
   d46e2:	2000      	movs	r0, #0

    // Get the raw humidity value from the evice
    uint16_t rh_code = (Wire.read() & 0x00ff) << 8 | (Wire.read() & 0x00ff);

    // Then calculate the teperature
    p_data->humidity = ((125 * rh_code) / 0xffff - 6);
   d46e4:	edc5 7a01 	vstr	s15, [r5, #4]

    // Serial.printf("hum: %.2f%% temp: %.2f°C\n",p_data->humidity,p_data->temperature);

    return SI7021_SUCCESS;
   d46e8:	bd38      	pop	{r3, r4, r5, pc}
   d46ea:	bf00      	nop
   d46ec:	f3af 8000 	nop.w
   d46f0:	3d70a3d7 	.word	0x3d70a3d7
   d46f4:	4065f70a 	.word	0x4065f70a
   d46f8:	00000000 	.word	0x00000000
   d46fc:	40efffe0 	.word	0x40efffe0
   d4700:	cccccccd 	.word	0xcccccccd
   d4704:	40476ccc 	.word	0x40476ccc

000d4708 <_GLOBAL__sub_I__ZN6Si7021C2Ev>:
   d4708:	f000 bfc4 	b.w	d5694 <HAL_Pin_Map>

000d470c <_ZN6CCS81111int_handlerEv>:
#include "ccs811.h"

CCS811::CCS811() {}

void CCS811::int_handler() {
  this->data_ready = true;
   d470c:	2301      	movs	r3, #1
   d470e:	7103      	strb	r3, [r0, #4]
   d4710:	4770      	bx	lr

000d4712 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4712:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4714:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4716:	6898      	ldr	r0, [r3, #8]
   d4718:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d471a:	f012 0f01 	tst.w	r2, #1
   d471e:	ea4f 0262 	mov.w	r2, r2, asr #1
   d4722:	bf18      	it	ne
   d4724:	5881      	ldrne	r1, [r0, r2]
   d4726:	4410      	add	r0, r2
   d4728:	bf18      	it	ne
   d472a:	58cb      	ldrne	r3, [r1, r3]
   d472c:	4718      	bx	r3

000d472e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d472e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4730:	b538      	push	{r3, r4, r5, lr}
   d4732:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4734:	d005      	beq.n	d4742 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4736:	2a03      	cmp	r2, #3
   d4738:	d00f      	beq.n	d475a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d473a:	2a01      	cmp	r2, #1
   d473c:	d111      	bne.n	d4762 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d473e:	680b      	ldr	r3, [r1, #0]
   d4740:	e009      	b.n	d4756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4742:	200c      	movs	r0, #12
   d4744:	680d      	ldr	r5, [r1, #0]
   d4746:	f7ff fca8 	bl	d409a <_Znwj>
   d474a:	4603      	mov	r3, r0
   d474c:	b118      	cbz	r0, d4756 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d474e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4756:	6023      	str	r3, [r4, #0]
   d4758:	e003      	b.n	d4762 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6CCS811FvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d475a:	210c      	movs	r1, #12
   d475c:	6800      	ldr	r0, [r0, #0]
   d475e:	f003 ff13 	bl	d8588 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4762:	2000      	movs	r0, #0
   d4764:	bd38      	pop	{r3, r4, r5, pc}

000d4766 <_ZN6CCS811C1Ev>:
 * License: GNU GPLv3
 */

#include "ccs811.h"

CCS811::CCS811() {}
   d4766:	4770      	bx	lr

000d4768 <_ZN6CCS8115setupEP13ccs811_init_t>:

void CCS811::int_handler() {
  this->data_ready = true;
}

uint32_t CCS811::setup( ccs811_init_t * p_init ) {
   d4768:	b570      	push	{r4, r5, r6, lr}
   d476a:	4604      	mov	r4, r0
   d476c:	b086      	sub	sp, #24

  // Return an error if init is NULL
  if( p_init == NULL ) {
   d476e:	2900      	cmp	r1, #0
   d4770:	d073      	beq.n	d485a <_ZN6CCS8115setupEP13ccs811_init_t+0xf2>
    return CCS811_NULL_ERROR;
  }

  // Configures the important stuff
  this->int_pin       = p_init->int_pin;
   d4772:	7848      	ldrb	r0, [r1, #1]
   d4774:	7060      	strb	r0, [r4, #1]
  this->address       = p_init->address;
   d4776:	780b      	ldrb	r3, [r1, #0]
   d4778:	7023      	strb	r3, [r4, #0]
  this->rst_pin       = p_init->rst_pin;
   d477a:	788b      	ldrb	r3, [r1, #2]
   d477c:	70a3      	strb	r3, [r4, #2]
  this->wake_pin      = p_init->wake_pin;
   d477e:	78cb      	ldrb	r3, [r1, #3]
   d4780:	70e3      	strb	r3, [r4, #3]

  // Configure the pin interrupt
  pinMode(this->int_pin, INPUT);
   d4782:	2100      	movs	r1, #0
   d4784:	f003 fe53 	bl	d842e <pinMode>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4788:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d478a:	200c      	movs	r0, #12
  attachInterrupt(this->int_pin, &CCS811::int_handler, this, FALLING);
   d478c:	7866      	ldrb	r6, [r4, #1]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d478e:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4790:	f7ff fc83 	bl	d409a <_Znwj>
   d4794:	b118      	cbz	r0, d479e <_ZN6CCS8115setupEP13ccs811_init_t+0x36>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4796:	4b32      	ldr	r3, [pc, #200]	; (d4860 <_ZN6CCS8115setupEP13ccs811_init_t+0xf8>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4798:	6084      	str	r4, [r0, #8]
   d479a:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d479e:	4b31      	ldr	r3, [pc, #196]	; (d4864 <_ZN6CCS8115setupEP13ccs811_init_t+0xfc>)
   d47a0:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d47a2:	4b31      	ldr	r3, [pc, #196]	; (d4868 <_ZN6CCS8115setupEP13ccs811_init_t+0x100>)
   d47a4:	9304      	str	r3, [sp, #16]
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d47a6:	2300      	movs	r3, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d47a8:	9002      	str	r0, [sp, #8]
   d47aa:	9300      	str	r3, [sp, #0]
   d47ac:	2202      	movs	r2, #2
   d47ae:	f04f 33ff 	mov.w	r3, #4294967295
   d47b2:	a902      	add	r1, sp, #8
   d47b4:	4630      	mov	r0, r6
   d47b6:	f003 f959 	bl	d7a6c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d47ba:	9b04      	ldr	r3, [sp, #16]
   d47bc:	b11b      	cbz	r3, d47c6 <_ZN6CCS8115setupEP13ccs811_init_t+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47be:	a902      	add	r1, sp, #8
   d47c0:	2203      	movs	r2, #3
   d47c2:	4608      	mov	r0, r1
   d47c4:	4798      	blx	r3

  // Wake it up
  pinMode(this->wake_pin, OUTPUT);
   d47c6:	2101      	movs	r1, #1
   d47c8:	78e0      	ldrb	r0, [r4, #3]
   d47ca:	f003 fe30 	bl	d842e <pinMode>
  digitalWrite(this->wake_pin, LOW); // Has a pullup
   d47ce:	2100      	movs	r1, #0
   d47d0:	78e0      	ldrb	r0, [r4, #3]
   d47d2:	f003 fe3d 	bl	d8450 <digitalWrite>

  // Toggle reset pin
  pinMode(this->rst_pin, OUTPUT);
   d47d6:	2101      	movs	r1, #1
   d47d8:	78a0      	ldrb	r0, [r4, #2]
   d47da:	f003 fe28 	bl	d842e <pinMode>
  digitalWrite(this->rst_pin, LOW);
   d47de:	2100      	movs	r1, #0
   d47e0:	78a0      	ldrb	r0, [r4, #2]
   d47e2:	f003 fe35 	bl	d8450 <digitalWrite>
  delay(1);
   d47e6:	2001      	movs	r0, #1
   d47e8:	f002 fc7c 	bl	d70e4 <delay>
  pinMode(this->rst_pin, INPUT);
   d47ec:	2100      	movs	r1, #0
   d47ee:	78a0      	ldrb	r0, [r4, #2]
   d47f0:	f003 fe1d 	bl	d842e <pinMode>
  delay(30);
   d47f4:	201e      	movs	r0, #30
   d47f6:	f002 fc75 	bl	d70e4 <delay>

  // Run the app
  Wire.beginTransmission(this->address);
   d47fa:	f003 fe91 	bl	d8520 <_Z19__fetch_global_Wirev>
   d47fe:	7821      	ldrb	r1, [r4, #0]
   d4800:	f003 fa7d 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_START_APP); // sends register address
   d4804:	f003 fe8c 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4808:	21f4      	movs	r1, #244	; 0xf4
   d480a:	f7ff fef1 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  // stop transaction
   d480e:	f003 fe87 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4812:	f003 fa7f 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>

  delay(30);
   d4816:	201e      	movs	r0, #30
   d4818:	f002 fc64 	bl	d70e4 <delay>

  Wire.beginTransmission(this->address);
   d481c:	f003 fe80 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4820:	7821      	ldrb	r1, [r4, #0]
   d4822:	f003 fa6c 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_STATUS_REG);
   d4826:	f003 fe7b 	bl	d8520 <_Z19__fetch_global_Wirev>
   d482a:	2100      	movs	r1, #0
   d482c:	f7ff fee0 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  // stop transaction
   d4830:	f003 fe76 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4834:	f003 fa6e 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(this->address,(uint8_t)1);
   d4838:	f003 fe72 	bl	d8520 <_Z19__fetch_global_Wirev>
   d483c:	2201      	movs	r2, #1
   d483e:	7821      	ldrb	r1, [r4, #0]
   d4840:	f003 fa5a 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

  uint8_t status = Wire.read();
   d4844:	f003 fe6c 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4848:	6803      	ldr	r3, [r0, #0]
   d484a:	695b      	ldr	r3, [r3, #20]
   d484c:	4798      	blx	r3

  // Checks if the app is running
  if( status & CCS811_FW_MODE_RUN ) {
    return CCS811_SUCCESS;
  } else {
    return CCS811_RUN_ERROR;
   d484e:	f010 0f90 	tst.w	r0, #144	; 0x90
   d4852:	bf14      	ite	ne
   d4854:	2000      	movne	r0, #0
   d4856:	2003      	moveq	r0, #3
   d4858:	e000      	b.n	d485c <_ZN6CCS8115setupEP13ccs811_init_t+0xf4>

uint32_t CCS811::setup( ccs811_init_t * p_init ) {

  // Return an error if init is NULL
  if( p_init == NULL ) {
    return CCS811_NULL_ERROR;
   d485a:	2001      	movs	r0, #1
    return CCS811_SUCCESS;
  } else {
    return CCS811_RUN_ERROR;
  }

}
   d485c:	b006      	add	sp, #24
   d485e:	bd70      	pop	{r4, r5, r6, pc}
   d4860:	000d470d 	.word	0x000d470d
   d4864:	000d4713 	.word	0x000d4713
   d4868:	000d472f 	.word	0x000d472f

000d486c <_ZN6CCS8117set_envEff>:

uint32_t CCS811::set_env(float temp, float hum) {
   d486c:	b537      	push	{r0, r1, r2, r4, r5, lr}

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d486e:	eefc 0ae0 	vcvt.u32.f32	s1, s1
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d4872:	eebc 0ac0 	vcvt.u32.f32	s0, s0

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d4876:	ee10 3a90 	vmov	r3, s1
   d487a:	005b      	lsls	r3, r3, #1
   d487c:	f88d 3004 	strb.w	r3, [sp, #4]
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d4880:	ee10 3a10 	vmov	r3, s0
    return CCS811_RUN_ERROR;
  }

}

uint32_t CCS811::set_env(float temp, float hum) {
   d4884:	4605      	mov	r5, r0
  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d4886:	3319      	adds	r3, #25
   d4888:	005b      	lsls	r3, r3, #1

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d488a:	2400      	movs	r4, #0
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d488c:	f88d 3006 	strb.w	r3, [sp, #6]

  // Data to send
  uint8_t data[4];

  // Copy bytes to output
  memcpy(data,&hum_conv,sizeof(hum_conv));
   d4890:	f88d 4005 	strb.w	r4, [sp, #5]
  memcpy(data+2,&temp_conv,sizeof(temp_conv));
   d4894:	f88d 4007 	strb.w	r4, [sp, #7]

  // Write this
  Wire.beginTransmission(this->address);
   d4898:	f003 fe42 	bl	d8520 <_Z19__fetch_global_Wirev>
   d489c:	7829      	ldrb	r1, [r5, #0]
   d489e:	f003 fa2e 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_ENV_REG);
   d48a2:	f003 fe3d 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48a6:	2105      	movs	r1, #5
   d48a8:	f7ff fea2 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.write(data,sizeof(data));
   d48ac:	f003 fe38 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48b0:	6803      	ldr	r3, [r0, #0]
   d48b2:	2204      	movs	r2, #4
   d48b4:	68db      	ldr	r3, [r3, #12]
   d48b6:	eb0d 0102 	add.w	r1, sp, r2
   d48ba:	4798      	blx	r3
  Wire.endTransmission();  // stop transaction
   d48bc:	f003 fe30 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48c0:	f003 fa28 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>

  return CCS811_SUCCESS;

}
   d48c4:	4620      	mov	r0, r4
   d48c6:	b003      	add	sp, #12
   d48c8:	bd30      	pop	{r4, r5, pc}

000d48ca <_ZN6CCS8116enableEv>:

uint32_t CCS811::enable(void) {
   d48ca:	b538      	push	{r3, r4, r5, lr}
   d48cc:	4605      	mov	r5, r0

  uint32_t err_code;

  // Set mode to 10 sec mode & enable int
  Wire.beginTransmission(this->address);
   d48ce:	f003 fe27 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48d2:	7829      	ldrb	r1, [r5, #0]
   d48d4:	f003 fa13 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_MEAS_MODE_REG); // sends register address
   d48d8:	f003 fe22 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48dc:	2101      	movs	r1, #1
   d48de:	f7ff fe87 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.write(CCS811_CONSTANT_MODE | CCS811_INT_EN);     // enables consant mode with interrupt
   d48e2:	f003 fe1d 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48e6:	2128      	movs	r1, #40	; 0x28
   d48e8:	f7ff fe82 	bl	d45f0 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();           // stop transaction
   d48ec:	f003 fe18 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48f0:	f003 fa10 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0 ){
   d48f4:	4604      	mov	r4, r0
   d48f6:	bb08      	cbnz	r0, d493c <_ZN6CCS8116enableEv+0x72>
    return err_code;
  }

  // Clear any interrupts
  Wire.beginTransmission(this->address);
   d48f8:	f003 fe12 	bl	d8520 <_Z19__fetch_global_Wirev>
   d48fc:	7829      	ldrb	r1, [r5, #0]
   d48fe:	f003 f9fe 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_RESULT_REG); // sends register address
   d4902:	f003 fe0d 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4906:	2102      	movs	r1, #2
   d4908:	f7ff fe72 	bl	d45f0 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission(false);  // stop transaction
   d490c:	f003 fe08 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4910:	4621      	mov	r1, r4
   d4912:	f003 f9fb 	bl	d7d0c <_ZN7TwoWire15endTransmissionEh>
  if( err_code != 0 ){
   d4916:	b988      	cbnz	r0, d493c <_ZN6CCS8116enableEv+0x72>
    return err_code;
  }

  // Flush bytes
  Wire.requestFrom(this->address, (uint8_t)4); // Read the bytes
   d4918:	f003 fe02 	bl	d8520 <_Z19__fetch_global_Wirev>
   d491c:	2204      	movs	r2, #4
   d491e:	7829      	ldrb	r1, [r5, #0]
   d4920:	f003 f9ea 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>
  while(Wire.available()) {
   d4924:	f003 fdfc 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4928:	6803      	ldr	r3, [r0, #0]
   d492a:	691b      	ldr	r3, [r3, #16]
   d492c:	4798      	blx	r3
   d492e:	b128      	cbz	r0, d493c <_ZN6CCS8116enableEv+0x72>
    Wire.read();
   d4930:	f003 fdf6 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4934:	6803      	ldr	r3, [r0, #0]
   d4936:	695b      	ldr	r3, [r3, #20]
   d4938:	4798      	blx	r3
    return err_code;
  }

  // Flush bytes
  Wire.requestFrom(this->address, (uint8_t)4); // Read the bytes
  while(Wire.available()) {
   d493a:	e7f3      	b.n	d4924 <_ZN6CCS8116enableEv+0x5a>
    Wire.read();
  }

  return CCS811_SUCCESS;

}
   d493c:	bd38      	pop	{r3, r4, r5, pc}

000d493e <_ZN6CCS81116restore_baselineEv>:
  EEPROM.put(CCS811_BASELINE_ADDR, baseline);

  return CCS811_SUCCESS;
}

uint32_t CCS811::restore_baseline() {
   d493e:	b513      	push	{r0, r1, r4, lr}
   d4940:	4604      	mov	r4, r0

  uint32_t err_code;
  uint8_t baseline[2];

  // Get the baseline to the address
  EEPROM.get(CCS811_BASELINE_ADDR, baseline);
   d4942:	f003 fdbf 	bl	d84c4 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4946:	2202      	movs	r2, #2
   d4948:	a901      	add	r1, sp, #4
   d494a:	200a      	movs	r0, #10
   d494c:	f000 ff02 	bl	d5754 <HAL_EEPROM_Get>

  // If it's uninitialized, return invalid data
  if ( baseline[0] == 0xff && baseline[1] == 0xff) {
   d4950:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4954:	2bff      	cmp	r3, #255	; 0xff
   d4956:	d103      	bne.n	d4960 <_ZN6CCS81116restore_baselineEv+0x22>
   d4958:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d495c:	2bff      	cmp	r3, #255	; 0xff
   d495e:	d01c      	beq.n	d499a <_ZN6CCS81116restore_baselineEv+0x5c>
    return CCS811_DAT_INVALID;
  }

  // Write to the chip
  Wire.beginTransmission(this->address);
   d4960:	f003 fdde 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4964:	7821      	ldrb	r1, [r4, #0]
   d4966:	f003 f9ca 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_BASELINE_REG); // sends register address
   d496a:	f003 fdd9 	bl	d8520 <_Z19__fetch_global_Wirev>
   d496e:	2111      	movs	r1, #17
   d4970:	f7ff fe3e 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.write(baseline[0]);
   d4974:	f003 fdd4 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4978:	6803      	ldr	r3, [r0, #0]
   d497a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d497e:	689b      	ldr	r3, [r3, #8]
   d4980:	4798      	blx	r3
  Wire.write(baseline[1]);
   d4982:	f003 fdcd 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4986:	6803      	ldr	r3, [r0, #0]
   d4988:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d498c:	689b      	ldr	r3, [r3, #8]
   d498e:	4798      	blx	r3
  err_code = Wire.endTransmission();           // stop transaction
   d4990:	f003 fdc6 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4994:	f003 f9be 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
   d4998:	e000      	b.n	d499c <_ZN6CCS81116restore_baselineEv+0x5e>
  // Get the baseline to the address
  EEPROM.get(CCS811_BASELINE_ADDR, baseline);

  // If it's uninitialized, return invalid data
  if ( baseline[0] == 0xff && baseline[1] == 0xff) {
    return CCS811_DAT_INVALID;
   d499a:	2007      	movs	r0, #7
  if( err_code != 0 ){
    return err_code;
  }

  return CCS811_SUCCESS;
}
   d499c:	b002      	add	sp, #8
   d499e:	bd10      	pop	{r4, pc}

000d49a0 <_ZN6CCS8114readEP13ccs811_data_t>:

uint32_t CCS811::read(ccs811_data_t * p_data) {
   d49a0:	b538      	push	{r3, r4, r5, lr}

  // If the data is ready, read
  if( this->data_ready ) {
   d49a2:	7903      	ldrb	r3, [r0, #4]
  }

  return CCS811_SUCCESS;
}

uint32_t CCS811::read(ccs811_data_t * p_data) {
   d49a4:	4605      	mov	r5, r0
   d49a6:	460c      	mov	r4, r1

  // If the data is ready, read
  if( this->data_ready ) {
   d49a8:	2b00      	cmp	r3, #0
   d49aa:	d03a      	beq.n	d4a22 <_ZN6CCS8114readEP13ccs811_data_t+0x82>

      // Disable flag
      this->data_ready = false;
   d49ac:	2300      	movs	r3, #0
   d49ae:	7103      	strb	r3, [r0, #4]

      Wire.beginTransmission(this->address);
   d49b0:	f003 fdb6 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49b4:	7829      	ldrb	r1, [r5, #0]
   d49b6:	f003 f9a2 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
      Wire.write(CCS811_RESULT_REG); // sends register address
   d49ba:	f003 fdb1 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49be:	2102      	movs	r1, #2
   d49c0:	f7ff fe16 	bl	d45f0 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();  // stop transaction
   d49c4:	f003 fdac 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49c8:	f003 f9a4 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(this->address, (uint8_t)4); // request the bytes
   d49cc:	f003 fda8 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49d0:	7829      	ldrb	r1, [r5, #0]
   d49d2:	2204      	movs	r2, #4
   d49d4:	f003 f990 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

      // Convert data to something useful
      p_data->c02 = Wire.read();
   d49d8:	f003 fda2 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49dc:	6803      	ldr	r3, [r0, #0]
   d49de:	695b      	ldr	r3, [r3, #20]
   d49e0:	4798      	blx	r3
   d49e2:	b285      	uxth	r5, r0
   d49e4:	8025      	strh	r5, [r4, #0]
      p_data->c02 = (p_data->c02<<8) + Wire.read();
   d49e6:	f003 fd9b 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49ea:	6803      	ldr	r3, [r0, #0]
   d49ec:	695b      	ldr	r3, [r3, #20]
   d49ee:	4798      	blx	r3
   d49f0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d49f4:	8020      	strh	r0, [r4, #0]

      p_data->tvoc = Wire.read();
   d49f6:	f003 fd93 	bl	d8520 <_Z19__fetch_global_Wirev>
   d49fa:	6803      	ldr	r3, [r0, #0]
   d49fc:	695b      	ldr	r3, [r3, #20]
   d49fe:	4798      	blx	r3
   d4a00:	b285      	uxth	r5, r0
   d4a02:	8065      	strh	r5, [r4, #2]
      p_data->tvoc = (p_data->tvoc<<8) + Wire.read();
   d4a04:	f003 fd8c 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a08:	6803      	ldr	r3, [r0, #0]
   d4a0a:	695b      	ldr	r3, [r3, #20]
   d4a0c:	4798      	blx	r3

      // Serial.printf("c02: %dppm tvoc: %dppb\n",p_data->c02,p_data->tvoc);

      // If this value is < 400 not ready yet
      if ( p_data->c02 < CCS811_MIN_C02_LEVEL ) {
   d4a0e:	8823      	ldrh	r3, [r4, #0]
      // Convert data to something useful
      p_data->c02 = Wire.read();
      p_data->c02 = (p_data->c02<<8) + Wire.read();

      p_data->tvoc = Wire.read();
      p_data->tvoc = (p_data->tvoc<<8) + Wire.read();
   d4a10:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4a14:	8060      	strh	r0, [r4, #2]

      // Serial.printf("c02: %dppm tvoc: %dppb\n",p_data->c02,p_data->tvoc);

      // If this value is < 400 not ready yet
      if ( p_data->c02 < CCS811_MIN_C02_LEVEL ) {
   d4a16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
        return CCS811_DAT_INVALID;
      }

      return CCS811_SUCCESS;
   d4a1a:	bf34      	ite	cc
   d4a1c:	2007      	movcc	r0, #7
   d4a1e:	2000      	movcs	r0, #0
   d4a20:	bd38      	pop	{r3, r4, r5, pc}
  } else {
      return CCS811_NO_DAT_AVAIL;
   d4a22:	2002      	movs	r0, #2
  }

}
   d4a24:	bd38      	pop	{r3, r4, r5, pc}

000d4a26 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>:

uint32_t CCS811::get_app_version(ccs811_app_ver_t * p_app_ver) {
   d4a26:	b570      	push	{r4, r5, r6, lr}
   d4a28:	4606      	mov	r6, r0
   d4a2a:	460d      	mov	r5, r1

  uint32_t err_code;

  Wire.beginTransmission(this->address);
   d4a2c:	f003 fd78 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a30:	7831      	ldrb	r1, [r6, #0]
   d4a32:	f003 f964 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_APP_VER_REG); // sends register address
   d4a36:	f003 fd73 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a3a:	2124      	movs	r1, #36	; 0x24
   d4a3c:	f7ff fdd8 	bl	d45f0 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d4a40:	f003 fd6e 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a44:	f003 f966 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d4a48:	4604      	mov	r4, r0
   d4a4a:	b9d8      	cbnz	r0, d4a84 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t+0x5e>
    return CCS811_COMM_ERR;
  }

  uint8_t num_bytes = Wire.requestFrom(this->address, (uint8_t)2); // request the bytes
   d4a4c:	f003 fd68 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a50:	2202      	movs	r2, #2
   d4a52:	7831      	ldrb	r1, [r6, #0]
   d4a54:	f003 f950 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

  // If  not enough bytes were read, error!
  if( num_bytes != 2) {
   d4a58:	b2c0      	uxtb	r0, r0
   d4a5a:	2802      	cmp	r0, #2
   d4a5c:	d114      	bne.n	d4a88 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t+0x62>
    return CCS811_NO_DAT_AVAIL;
  }

  // Convert data to something useful
  uint8_t majorminor = Wire.read();
   d4a5e:	f003 fd5f 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a62:	6803      	ldr	r3, [r0, #0]
   d4a64:	695b      	ldr	r3, [r3, #20]
   d4a66:	4798      	blx	r3
   d4a68:	b2c0      	uxtb	r0, r0

  // MSB is split into two. First nibble major, second is the  minor
  p_app_ver->major = (majorminor >> 4) & 0x0f;
   d4a6a:	0903      	lsrs	r3, r0, #4
  p_app_ver->minor = majorminor & 0x0f;
   d4a6c:	f000 000f 	and.w	r0, r0, #15

  // Convert data to something useful
  uint8_t majorminor = Wire.read();

  // MSB is split into two. First nibble major, second is the  minor
  p_app_ver->major = (majorminor >> 4) & 0x0f;
   d4a70:	702b      	strb	r3, [r5, #0]
  p_app_ver->minor = majorminor & 0x0f;
   d4a72:	7068      	strb	r0, [r5, #1]
  p_app_ver->trivial = Wire.read();
   d4a74:	f003 fd54 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4a78:	6803      	ldr	r3, [r0, #0]
   d4a7a:	695b      	ldr	r3, [r3, #20]
   d4a7c:	4798      	blx	r3
   d4a7e:	70a8      	strb	r0, [r5, #2]
   d4a80:	4620      	mov	r0, r4
   d4a82:	bd70      	pop	{r4, r5, r6, pc}

  Wire.beginTransmission(this->address);
  Wire.write(CCS811_APP_VER_REG); // sends register address
  err_code = Wire.endTransmission();  // stop transaction
  if( err_code != 0) {
    return CCS811_COMM_ERR;
   d4a84:	2004      	movs	r0, #4
   d4a86:	bd70      	pop	{r4, r5, r6, pc}

  uint8_t num_bytes = Wire.requestFrom(this->address, (uint8_t)2); // request the bytes

  // If  not enough bytes were read, error!
  if( num_bytes != 2) {
    return CCS811_NO_DAT_AVAIL;
   d4a88:	2002      	movs	r0, #2
  // Serial.printf("%x %x",majorminor,p_app_ver->trivial );

  return CCS811_SUCCESS;


}
   d4a8a:	bd70      	pop	{r4, r5, r6, pc}

000d4a8c <_ZN6CCS81110update_appEPK19ccs811_app_update_t>:


uint32_t CCS811::update_app(const ccs811_app_update_t * p_app_update) {
   d4a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a90:	4605      	mov	r5, r0
   d4a92:	b087      	sub	sp, #28

  if( p_app_update == NULL ) {
   d4a94:	460e      	mov	r6, r1
   d4a96:	b189      	cbz	r1, d4abc <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x30>
  }

  ccs811_app_ver_t current_ver;

  // Check the version
  uint32_t err_code = this->get_app_version(&current_ver);
   d4a98:	a901      	add	r1, sp, #4
   d4a9a:	f7ff ffc4 	bl	d4a26 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>

  // Return if not success
  if( err_code != 0 ) {
   d4a9e:	2800      	cmp	r0, #0
   d4aa0:	f040 80c4 	bne.w	d4c2c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  }

  bool start_update = false;

  // If any of the version information is not equal, update
  if( p_app_update->ver.major > current_ver.major ||
   d4aa4:	7832      	ldrb	r2, [r6, #0]
   d4aa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4aaa:	429a      	cmp	r2, r3
   d4aac:	d808      	bhi.n	d4ac0 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x34>
   d4aae:	7872      	ldrb	r2, [r6, #1]
   d4ab0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4ab4:	429a      	cmp	r2, r3
   d4ab6:	d803      	bhi.n	d4ac0 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x34>
    start_update = true;
  }

  // Return if there's no update
  if( !start_update ) {
    return CCS811_NO_UPDATE_NEEDED;
   d4ab8:	2005      	movs	r0, #5
   d4aba:	e0b7      	b.n	d4c2c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>


uint32_t CCS811::update_app(const ccs811_app_update_t * p_app_update) {

  if( p_app_update == NULL ) {
    return CCS811_NULL_ERROR;
   d4abc:	2001      	movs	r0, #1
   d4abe:	e0b5      	b.n	d4c2c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  // Return if there's no update
  if( !start_update ) {
    return CCS811_NO_UPDATE_NEEDED;
  }

  Serial.println("start update");
   d4ac0:	f002 ff78 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4ac4:	495b      	ldr	r1, [pc, #364]	; (d4c34 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a8>)
   d4ac6:	f001 faba 	bl	d603e <_ZN5Print7printlnEPKc>

  // Otherwise there is an update
  // Toggle reset pin
  pinMode(this->rst_pin, OUTPUT);
   d4aca:	2101      	movs	r1, #1
   d4acc:	78a8      	ldrb	r0, [r5, #2]
   d4ace:	f003 fcae 	bl	d842e <pinMode>
  digitalWrite(this->rst_pin, LOW);
   d4ad2:	2100      	movs	r1, #0
   d4ad4:	78a8      	ldrb	r0, [r5, #2]
   d4ad6:	f003 fcbb 	bl	d8450 <digitalWrite>
  delay(1);
   d4ada:	2001      	movs	r0, #1
   d4adc:	f002 fb02 	bl	d70e4 <delay>
  pinMode(this->rst_pin, INPUT);
   d4ae0:	2100      	movs	r1, #0
   d4ae2:	78a8      	ldrb	r0, [r5, #2]
   d4ae4:	f003 fca3 	bl	d842e <pinMode>
  delay(30);
   d4ae8:	201e      	movs	r0, #30
   d4aea:	f002 fafb 	bl	d70e4 <delay>

  // Erase codee
  uint8_t cmd[] = CCS811_ERASE_CODE;
   d4aee:	4b52      	ldr	r3, [pc, #328]	; (d4c38 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1ac>)
   d4af0:	6818      	ldr	r0, [r3, #0]
   d4af2:	9002      	str	r0, [sp, #8]

  Serial.println("erase");
   d4af4:	f002 ff5e 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4af8:	4950      	ldr	r1, [pc, #320]	; (d4c3c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b0>)
   d4afa:	f001 faa0 	bl	d603e <_ZN5Print7printlnEPKc>

  // Begin the process
  Wire.beginTransmission(this->address);
   d4afe:	f003 fd0f 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b02:	7829      	ldrb	r1, [r5, #0]
   d4b04:	f003 f8fb 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_ERASE_REG); // sends register address
   d4b08:	f003 fd0a 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b0c:	21f1      	movs	r1, #241	; 0xf1
   d4b0e:	f7ff fd6f 	bl	d45f0 <_ZN7TwoWire5writeEi>
  Wire.write(cmd, sizeof(cmd));
   d4b12:	f003 fd05 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b16:	6803      	ldr	r3, [r0, #0]
   d4b18:	2204      	movs	r2, #4
   d4b1a:	68db      	ldr	r3, [r3, #12]
   d4b1c:	a902      	add	r1, sp, #8
   d4b1e:	4798      	blx	r3
  err_code = Wire.endTransmission();  // stop transaction
   d4b20:	f003 fcfe 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b24:	f003 f8f6 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d4b28:	4604      	mov	r4, r0
   d4b2a:	bbb0      	cbnz	r0, d4b9a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  delay(500);
   d4b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4b30:	f002 fad8 	bl	d70e4 <delay>

  // Set up for ops
  uint32_t length = p_app_update->size;
   d4b34:	68b3      	ldr	r3, [r6, #8]
  uint8_t *data = p_app_update->data;
   d4b36:	f8d6 9004 	ldr.w	r9, [r6, #4]

  // Payload to be sent over I2C
  uint8_t payload[9];

  // Set first byte to the command
  payload[0] = CCS811_WRITE_APP_REG;
   d4b3a:	af06      	add	r7, sp, #24
   d4b3c:	22f2      	movs	r2, #242	; 0xf2

  // Calculate the iterations to run
  uint32_t iterations = length/8;
   d4b3e:	08de      	lsrs	r6, r3, #3

  // Payload to be sent over I2C
  uint8_t payload[9];

  // Set first byte to the command
  payload[0] = CCS811_WRITE_APP_REG;
   d4b40:	f807 2d0c 	strb.w	r2, [r7, #-12]!

  // Calculate the iterations to run
  uint32_t iterations = length/8;

  Serial.printf("iterations %d", iterations);
   d4b44:	f002 ff36 	bl	d79b4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4b48:	4633      	mov	r3, r6
   d4b4a:	4a3d      	ldr	r2, [pc, #244]	; (d4c40 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b4>)
   d4b4c:	4621      	mov	r1, r4
   d4b4e:	f001 faa0 	bl	d6092 <_ZN5Print11printf_implEbPKcz>

  for( uint32_t i = 0; i < iterations; i++ ) {
   d4b52:	42b4      	cmp	r4, r6
   d4b54:	eb09 08c4 	add.w	r8, r9, r4, lsl #3
   d4b58:	d026      	beq.n	d4ba8 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x11c>

    Serial.printf("%d\n",i);
   d4b5a:	f002 ff2b 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4b5e:	4a39      	ldr	r2, [pc, #228]	; (d4c44 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1b8>)
   d4b60:	2100      	movs	r1, #0
   d4b62:	4623      	mov	r3, r4
   d4b64:	f001 fa95 	bl	d6092 <_ZN5Print11printf_implEbPKcz>

    // Copy 8 bytes
    memcpy(&payload[1],data,8);
   d4b68:	f8d8 3000 	ldr.w	r3, [r8]
   d4b6c:	f8cd 300d 	str.w	r3, [sp, #13]
   d4b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4b74:	f8cd 3011 	str.w	r3, [sp, #17]

    // Write said 8 bytes
    Wire.beginTransmission(this->address);
   d4b78:	f003 fcd2 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b7c:	7829      	ldrb	r1, [r5, #0]
   d4b7e:	f003 f8be 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(payload, sizeof(payload)); // sends register address
   d4b82:	f003 fccd 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b86:	6803      	ldr	r3, [r0, #0]
   d4b88:	2209      	movs	r2, #9
   d4b8a:	68db      	ldr	r3, [r3, #12]
   d4b8c:	4639      	mov	r1, r7
   d4b8e:	4798      	blx	r3
    err_code = Wire.endTransmission();  // stop transaction
   d4b90:	f003 fcc6 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4b94:	f003 f8be 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
    if( err_code != 0) {
   d4b98:	b108      	cbz	r0, d4b9e <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x112>
      return CCS811_COMM_ERR;
   d4b9a:	2004      	movs	r0, #4
   d4b9c:	e046      	b.n	d4c2c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
    }

    // Delay
    delay(50);
   d4b9e:	2032      	movs	r0, #50	; 0x32
   d4ba0:	f002 faa0 	bl	d70e4 <delay>
  // Calculate the iterations to run
  uint32_t iterations = length/8;

  Serial.printf("iterations %d", iterations);

  for( uint32_t i = 0; i < iterations; i++ ) {
   d4ba4:	3401      	adds	r4, #1
   d4ba6:	e7d4      	b.n	d4b52 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0xc6>
    data+=8;

  }

  // Verify
  Wire.beginTransmission(this->address);
   d4ba8:	f003 fcba 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bac:	7829      	ldrb	r1, [r5, #0]
   d4bae:	f003 f8a6 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_VERIFY_REG); // sends register address
   d4bb2:	f003 fcb5 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bb6:	21f3      	movs	r1, #243	; 0xf3
   d4bb8:	f7ff fd1a 	bl	d45f0 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d4bbc:	f003 fcb0 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bc0:	f003 f8a8 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d4bc4:	4604      	mov	r4, r0
   d4bc6:	2800      	cmp	r0, #0
   d4bc8:	d1e7      	bne.n	d4b9a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  delay(500);
   d4bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4bce:	f002 fa89 	bl	d70e4 <delay>

  // Check the status
  Wire.beginTransmission(this->address);
   d4bd2:	f003 fca5 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bd6:	7829      	ldrb	r1, [r5, #0]
   d4bd8:	f003 f891 	bl	d7cfe <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(CCS811_STATUS_REG);
   d4bdc:	f003 fca0 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4be0:	4621      	mov	r1, r4
   d4be2:	f7ff fd05 	bl	d45f0 <_ZN7TwoWire5writeEi>
  err_code = Wire.endTransmission();  // stop transaction
   d4be6:	f003 fc9b 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bea:	f003 f893 	bl	d7d14 <_ZN7TwoWire15endTransmissionEv>
  if( err_code != 0) {
   d4bee:	4604      	mov	r4, r0
   d4bf0:	2800      	cmp	r0, #0
   d4bf2:	d1d2      	bne.n	d4b9a <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x10e>
    return CCS811_COMM_ERR;
  }

  Wire.requestFrom(this->address,(uint8_t)1);
   d4bf4:	f003 fc94 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4bf8:	2201      	movs	r2, #1
   d4bfa:	7829      	ldrb	r1, [r5, #0]
   d4bfc:	f003 f87c 	bl	d7cf8 <_ZN7TwoWire11requestFromEhj>

  uint8_t status = Wire.read();
   d4c00:	f003 fc8e 	bl	d8520 <_Z19__fetch_global_Wirev>
   d4c04:	6803      	ldr	r3, [r0, #0]
   d4c06:	695b      	ldr	r3, [r3, #20]
   d4c08:	4798      	blx	r3

  if ((status & 0x30) == 0x30){
   d4c0a:	f000 0030 	and.w	r0, r0, #48	; 0x30
   d4c0e:	2830      	cmp	r0, #48	; 0x30
   d4c10:	d106      	bne.n	d4c20 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x194>
    // program code valid
    Serial.println("Code is valid!");
   d4c12:	f002 fecf 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4c16:	490c      	ldr	r1, [pc, #48]	; (d4c48 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1bc>)
   d4c18:	f001 fa11 	bl	d603e <_ZN5Print7printlnEPKc>
    return CCS811_SUCCESS;
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	e005      	b.n	d4c2c <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1a0>
  }
  else{
    // program code invalid
    Serial.println("Code is valid!");
   d4c20:	f002 fec8 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4c24:	4908      	ldr	r1, [pc, #32]	; (d4c48 <_ZN6CCS81110update_appEPK19ccs811_app_update_t+0x1bc>)
   d4c26:	f001 fa0a 	bl	d603e <_ZN5Print7printlnEPKc>
    return CCS811_UPDATE_VERIFY_FAIL;
   d4c2a:	2006      	movs	r0, #6
  }



}
   d4c2c:	b007      	add	sp, #28
   d4c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c32:	bf00      	nop
   d4c34:	000d942a 	.word	0x000d942a
   d4c38:	000d9409 	.word	0x000d9409
   d4c3c:	000d9437 	.word	0x000d9437
   d4c40:	000d940d 	.word	0x000d940d
   d4c44:	000d94f0 	.word	0x000d94f0
   d4c48:	000d941b 	.word	0x000d941b

000d4c4c <_GLOBAL__sub_I__ZN6CCS811C2Ev>:
   d4c4c:	f000 bd22 	b.w	d5694 <HAL_Pin_Map>

000d4c50 <_ZN7HPMA115C1Ev>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c50:	2200      	movs	r2, #0
   d4c52:	6082      	str	r2, [r0, #8]
 * License: GNU GPLv3
 */

#include "hpma115.h"

HPMA115::HPMA115(void){}
   d4c54:	4770      	bx	lr

000d4c56 <_ZN7HPMA1156enableEv>:
  this->disable();

  return HPMA115_SUCCESS;
}

uint32_t HPMA115::enable(){
   d4c56:	b510      	push	{r4, lr}
   d4c58:	4604      	mov	r4, r0

  // set gpio high
  pinMode(this->enable_pin, OUTPUT);
   d4c5a:	2101      	movs	r1, #1
   d4c5c:	7d80      	ldrb	r0, [r0, #22]
   d4c5e:	f003 fbe6 	bl	d842e <pinMode>
  digitalWrite(this->enable_pin, HIGH); // Has a pulldown
   d4c62:	7da0      	ldrb	r0, [r4, #22]
   d4c64:	2101      	movs	r1, #1
   d4c66:	f003 fbf3 	bl	d8450 <digitalWrite>

  if( this->state == DISABLED ) {
   d4c6a:	7d63      	ldrb	r3, [r4, #21]
   d4c6c:	2b04      	cmp	r3, #4
    this->state = READY;
   d4c6e:	bf04      	itt	eq
   d4c70:	2300      	moveq	r3, #0
   d4c72:	7563      	strbeq	r3, [r4, #21]
  }

  return HPMA115_SUCCESS;
}
   d4c74:	2000      	movs	r0, #0
   d4c76:	bd10      	pop	{r4, pc}

000d4c78 <_ZN7HPMA1157disableEv>:
uint32_t HPMA115::disable() {
   d4c78:	b510      	push	{r4, lr}

  // Disable device
  pinMode(this->enable_pin, INPUT);
   d4c7a:	2100      	movs	r1, #0
    this->state = READY;
  }

  return HPMA115_SUCCESS;
}
uint32_t HPMA115::disable() {
   d4c7c:	4604      	mov	r4, r0

  // Disable device
  pinMode(this->enable_pin, INPUT);
   d4c7e:	7d80      	ldrb	r0, [r0, #22]
   d4c80:	f003 fbd5 	bl	d842e <pinMode>
  this->state = DISABLED;
   d4c84:	2304      	movs	r3, #4

  // Reset rx count
  this->rx_count = 0;
   d4c86:	2000      	movs	r0, #0
}
uint32_t HPMA115::disable() {

  // Disable device
  pinMode(this->enable_pin, INPUT);
  this->state = DISABLED;
   d4c88:	7563      	strb	r3, [r4, #21]

  // Reset rx count
  this->rx_count = 0;
   d4c8a:	75e0      	strb	r0, [r4, #23]

  return HPMA115_SUCCESS;
}
   d4c8c:	bd10      	pop	{r4, pc}

000d4c8e <_ZN7HPMA1155setupEP14hpma115_init_t>:

#include "hpma115.h"

HPMA115::HPMA115(void){}

uint32_t HPMA115::setup(hpma115_init_t *p_init) {
   d4c8e:	b570      	push	{r4, r5, r6, lr}
   d4c90:	b086      	sub	sp, #24
   d4c92:	460e      	mov	r6, r1
   d4c94:	4604      	mov	r4, r0

  // Set up serial
  Serial1.begin(HPMA115_BAUD);
   d4c96:	f002 ff7f 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4c9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c9e:	f002 ff71 	bl	d7b84 <_ZN11USARTSerial5beginEm>
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	9304      	str	r3, [sp, #16]
   d4ca6:	68b3      	ldr	r3, [r6, #8]
   d4ca8:	ad02      	add	r5, sp, #8
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4caa:	b13b      	cbz	r3, d4cbc <_ZN7HPMA1155setupEP14hpma115_init_t+0x2e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4cac:	2202      	movs	r2, #2
   d4cae:	4631      	mov	r1, r6
   d4cb0:	4628      	mov	r0, r5
   d4cb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4cb4:	68f3      	ldr	r3, [r6, #12]
   d4cb6:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
   d4cb8:	68b3      	ldr	r3, [r6, #8]
   d4cba:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4cc0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4cc4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4cc8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ccc:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cd0:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4cd2:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cd4:	60a2      	str	r2, [r4, #8]
   d4cd6:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cda:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4cdc:	68e1      	ldr	r1, [r4, #12]
   d4cde:	9304      	str	r3, [sp, #16]
   d4ce0:	9105      	str	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ce2:	60e2      	str	r2, [r4, #12]

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ce4:	b11b      	cbz	r3, d4cee <_ZN7HPMA1155setupEP14hpma115_init_t+0x60>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ce6:	2203      	movs	r2, #3
   d4ce8:	4629      	mov	r1, r5
   d4cea:	4628      	mov	r0, r5
   d4cec:	4798      	blx	r3

  // Set up callback
  this->callback = p_init->callback;

  // Set enable pin
  this->enable_pin = p_init->enable_pin;
   d4cee:	7c33      	ldrb	r3, [r6, #16]
   d4cf0:	75a3      	strb	r3, [r4, #22]

  // Set rx count to 0
  this->rx_count = 0;
   d4cf2:	2500      	movs	r5, #0
   d4cf4:	75e5      	strb	r5, [r4, #23]

  // Stop device
  this->disable();
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	f7ff ffbe 	bl	d4c78 <_ZN7HPMA1157disableEv>

  return HPMA115_SUCCESS;
}
   d4cfc:	4628      	mov	r0, r5
   d4cfe:	b006      	add	sp, #24
   d4d00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d04 <_ZN7HPMA1157processEv>:
    return false;
  }

}

void HPMA115::process() {
   d4d04:	b530      	push	{r4, r5, lr}

    if( this->state == READY && Serial1.available() ) {
   d4d06:	7d43      	ldrb	r3, [r0, #21]
    return false;
  }

}

void HPMA115::process() {
   d4d08:	b085      	sub	sp, #20
   d4d0a:	4604      	mov	r4, r0

    if( this->state == READY && Serial1.available() ) {
   d4d0c:	b93b      	cbnz	r3, d4d1e <_ZN7HPMA1157processEv+0x1a>
   d4d0e:	f002 ff43 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d12:	6803      	ldr	r3, [r0, #0]
   d4d14:	691b      	ldr	r3, [r3, #16]
   d4d16:	4798      	blx	r3
   d4d18:	2800      	cmp	r0, #0
   d4d1a:	f040 8099 	bne.w	d4e50 <_ZN7HPMA1157processEv+0x14c>
      this->state = DATA_AVAILABLE;
    }

    // First read
    if( this->state == DATA_AVAILABLE && Serial1.available() >= 2 ) {
   d4d1e:	7d63      	ldrb	r3, [r4, #21]
   d4d20:	2b01      	cmp	r3, #1
   d4d22:	d122      	bne.n	d4d6a <_ZN7HPMA1157processEv+0x66>
   d4d24:	f002 ff38 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d28:	6803      	ldr	r3, [r0, #0]
   d4d2a:	691b      	ldr	r3, [r3, #16]
   d4d2c:	4798      	blx	r3
   d4d2e:	2801      	cmp	r0, #1
   d4d30:	dd1b      	ble.n	d4d6a <_ZN7HPMA1157processEv+0x66>

      // Erase the rx_buf
      memset(this->rx_buf,0,32);
   d4d32:	2220      	movs	r2, #32
   d4d34:	2100      	movs	r1, #0
   d4d36:	f104 0018 	add.w	r0, r4, #24
   d4d3a:	f004 f9d5 	bl	d90e8 <memset>

      // Read first byte in
      this->rx_buf[0] = Serial1.read();
   d4d3e:	f002 ff2b 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d42:	6803      	ldr	r3, [r0, #0]
   d4d44:	695b      	ldr	r3, [r3, #20]
   d4d46:	4798      	blx	r3
   d4d48:	b2c0      	uxtb	r0, r0

      // Make sure first byte is equal otherwise return
      if( this->rx_buf[0] != 0x42 ) {
   d4d4a:	2842      	cmp	r0, #66	; 0x42

      // Erase the rx_buf
      memset(this->rx_buf,0,32);

      // Read first byte in
      this->rx_buf[0] = Serial1.read();
   d4d4c:	7620      	strb	r0, [r4, #24]

      // Make sure first byte is equal otherwise return
      if( this->rx_buf[0] != 0x42 ) {
   d4d4e:	f040 8082 	bne.w	d4e56 <_ZN7HPMA1157processEv+0x152>
        return;
      }

      // Reaad the second byte in
      this->rx_buf[1] = Serial1.read();
   d4d52:	f002 ff21 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d56:	6803      	ldr	r3, [r0, #0]
   d4d58:	695b      	ldr	r3, [r3, #20]
   d4d5a:	4798      	blx	r3
   d4d5c:	b2c0      	uxtb	r0, r0

      // Confirm its value
      if( this->rx_buf[1] == 0x4d ) {
   d4d5e:	284d      	cmp	r0, #77	; 0x4d
        this->state = DATA_READ;
   d4d60:	bf08      	it	eq
   d4d62:	2303      	moveq	r3, #3
      if( this->rx_buf[0] != 0x42 ) {
        return;
      }

      // Reaad the second byte in
      this->rx_buf[1] = Serial1.read();
   d4d64:	7660      	strb	r0, [r4, #25]

      // Confirm its value
      if( this->rx_buf[1] == 0x4d ) {
        this->state = DATA_READ;
   d4d66:	bf08      	it	eq
   d4d68:	7563      	strbeq	r3, [r4, #21]
      }

    }

    // Read remaining bytes
    if( this->state == DATA_READ && Serial1.available() >= 30) {
   d4d6a:	7d63      	ldrb	r3, [r4, #21]
   d4d6c:	2b03      	cmp	r3, #3
   d4d6e:	d172      	bne.n	d4e56 <_ZN7HPMA1157processEv+0x152>
   d4d70:	f002 ff12 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d74:	6803      	ldr	r3, [r0, #0]
   d4d76:	691b      	ldr	r3, [r3, #16]
   d4d78:	4798      	blx	r3
   d4d7a:	281d      	cmp	r0, #29
   d4d7c:	dd6b      	ble.n	d4e56 <_ZN7HPMA1157processEv+0x152>

      // Then read
      Serial1.readBytes(this->rx_buf+2,30);
   d4d7e:	f002 ff0b 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4d82:	221e      	movs	r2, #30
   d4d84:	f104 011a 	add.w	r1, r4, #26
   d4d88:	f001 f9d2 	bl	d6130 <_ZN6Stream9readBytesEPcj>
   d4d8c:	f104 0217 	add.w	r2, r4, #23
   d4d90:	f104 0135 	add.w	r1, r4, #53	; 0x35

      uint16_t calc_checksum = 0;
   d4d94:	2300      	movs	r3, #0

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
        calc_checksum += this->rx_buf[i];
   d4d96:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d4d9a:	4403      	add	r3, r0
      Serial1.readBytes(this->rx_buf+2,30);

      uint16_t calc_checksum = 0;

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
   d4d9c:	4291      	cmp	r1, r2
        calc_checksum += this->rx_buf[i];
   d4d9e:	b29b      	uxth	r3, r3
      Serial1.readBytes(this->rx_buf+2,30);

      uint16_t calc_checksum = 0;

      // Calculate the checksum
      for( int i = 0; i < 30; i++ ) {
   d4da0:	d1f9      	bne.n	d4d96 <_ZN7HPMA1157processEv+0x92>
      // Serial.printf("%x %x\n",calc_checksum,data_checksum);

      // Make sure the calculated and the provided are the same
      // or, make sure we've collected a few data points before
      // sending the data
      if ( calc_checksum != data_checksum ) {
   d4da2:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   d4da6:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   d4daa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   d4dae:	b292      	uxth	r2, r2
   d4db0:	4293      	cmp	r3, r2
   d4db2:	d024      	beq.n	d4dfe <_ZN7HPMA1157processEv+0xfa>

        Serial.println("hpma: checksum fail");
   d4db4:	f002 fdfe 	bl	d79b4 <_Z16_fetch_usbserialv>
   d4db8:	4928      	ldr	r1, [pc, #160]	; (d4e5c <_ZN7HPMA1157processEv+0x158>)
   d4dba:	f001 f940 	bl	d603e <_ZN5Print7printlnEPKc>
   d4dbe:	4b28      	ldr	r3, [pc, #160]	; (d4e60 <_ZN7HPMA1157processEv+0x15c>)
   d4dc0:	4928      	ldr	r1, [pc, #160]	; (d4e64 <_ZN7HPMA1157processEv+0x160>)
   d4dc2:	781a      	ldrb	r2, [r3, #0]
   d4dc4:	4b28      	ldr	r3, [pc, #160]	; (d4e68 <_ZN7HPMA1157processEv+0x164>)
   d4dc6:	781b      	ldrb	r3, [r3, #0]
   d4dc8:	4313      	orrs	r3, r2
   d4dca:	f88d 3000 	strb.w	r3, [sp]
   d4dce:	4a27      	ldr	r2, [pc, #156]	; (d4e6c <_ZN7HPMA1157processEv+0x168>)
   d4dd0:	233c      	movs	r3, #60	; 0x3c
   d4dd2:	a802      	add	r0, sp, #8
   d4dd4:	f002 fb94 	bl	d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4dd8:	9d03      	ldr	r5, [sp, #12]
   d4dda:	b1fd      	cbz	r5, d4e1c <_ZN7HPMA1157processEv+0x118>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4ddc:	686b      	ldr	r3, [r5, #4]
   d4dde:	3b01      	subs	r3, #1
   d4de0:	606b      	str	r3, [r5, #4]
   d4de2:	b9db      	cbnz	r3, d4e1c <_ZN7HPMA1157processEv+0x118>
        {
          _M_dispose();
   d4de4:	682b      	ldr	r3, [r5, #0]
   d4de6:	4628      	mov	r0, r5
   d4de8:	689b      	ldr	r3, [r3, #8]
   d4dea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4dec:	68ab      	ldr	r3, [r5, #8]
   d4dee:	3b01      	subs	r3, #1
   d4df0:	60ab      	str	r3, [r5, #8]
   d4df2:	b99b      	cbnz	r3, d4e1c <_ZN7HPMA1157processEv+0x118>
            _M_destroy();
   d4df4:	682b      	ldr	r3, [r5, #0]
   d4df6:	4628      	mov	r0, r5
   d4df8:	68db      	ldr	r3, [r3, #12]
   d4dfa:	4798      	blx	r3
   d4dfc:	e00e      	b.n	d4e1c <_ZN7HPMA1157processEv+0x118>
        this->state = READY;
        return;
      }

      // Increment the valid rx count
      this->rx_count++;
   d4dfe:	7de3      	ldrb	r3, [r4, #23]
   d4e00:	3301      	adds	r3, #1
   d4e02:	b2db      	uxtb	r3, r3

      // Take another reading. Minimum of HPMA115_READING_CNT readings
      if ( this->rx_count < HPMA115_READING_CNT ) {
   d4e04:	2b02      	cmp	r3, #2
        this->state = READY;
        return;
      }

      // Increment the valid rx count
      this->rx_count++;
   d4e06:	75e3      	strb	r3, [r4, #23]

      // Take another reading. Minimum of HPMA115_READING_CNT readings
      if ( this->rx_count < HPMA115_READING_CNT ) {
   d4e08:	d80b      	bhi.n	d4e22 <_ZN7HPMA1157processEv+0x11e>

        // Go right to read or go to ready state if no data
        if( Serial1.available() > 0 ) {
   d4e0a:	f002 fec5 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d4e0e:	6803      	ldr	r3, [r0, #0]
   d4e10:	691b      	ldr	r3, [r3, #16]
   d4e12:	4798      	blx	r3
   d4e14:	2800      	cmp	r0, #0
   d4e16:	dd01      	ble.n	d4e1c <_ZN7HPMA1157processEv+0x118>
          this->state = DATA_AVAILABLE;
   d4e18:	2301      	movs	r3, #1
   d4e1a:	e000      	b.n	d4e1e <_ZN7HPMA1157processEv+0x11a>
        } else {
          this->state = READY;
   d4e1c:	2300      	movs	r3, #0
   d4e1e:	7563      	strb	r3, [r4, #21]
   d4e20:	e019      	b.n	d4e56 <_ZN7HPMA1157processEv+0x152>

      // Reset this
      this->rx_count = 0;

      // Combine the serialized data
      this->data.pm25 = (this->rx_buf[6] << 8) + this->rx_buf[7];
   d4e22:	7fa2      	ldrb	r2, [r4, #30]
   d4e24:	7fe3      	ldrb	r3, [r4, #31]
   d4e26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4e2a:	8223      	strh	r3, [r4, #16]
      this->data.pm10 = (this->rx_buf[8] << 8) + this->rx_buf[9];
   d4e2c:	f894 2020 	ldrb.w	r2, [r4, #32]
   d4e30:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d4e34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4e38:	8263      	strh	r3, [r4, #18]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e3a:	68a3      	ldr	r3, [r4, #8]

        return;
      }

      // Reset this
      this->rx_count = 0;
   d4e3c:	2500      	movs	r5, #0
   d4e3e:	75e5      	strb	r5, [r4, #23]
   d4e40:	b90b      	cbnz	r3, d4e46 <_ZN7HPMA1157processEv+0x142>
	__throw_bad_function_call();
   d4e42:	f003 fbb4 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e46:	68e3      	ldr	r3, [r4, #12]
   d4e48:	4620      	mov	r0, r4
   d4e4a:	4798      	blx	r3

      // Callback
      this->callback();

      // State is back to ready
      this->state = READY;
   d4e4c:	7565      	strb	r5, [r4, #21]
   d4e4e:	e002      	b.n	d4e56 <_ZN7HPMA1157processEv+0x152>
}

void HPMA115::process() {

    if( this->state == READY && Serial1.available() ) {
      this->state = DATA_AVAILABLE;
   d4e50:	2301      	movs	r3, #1
   d4e52:	7563      	strb	r3, [r4, #21]
   d4e54:	e763      	b.n	d4d1e <_ZN7HPMA1157processEv+0x1a>

      // State is back to ready
      this->state = READY;

    }
}
   d4e56:	b005      	add	sp, #20
   d4e58:	bd30      	pop	{r4, r5, pc}
   d4e5a:	bf00      	nop
   d4e5c:	000d943d 	.word	0x000d943d
   d4e60:	2003e2fd 	.word	0x2003e2fd
   d4e64:	000d9527 	.word	0x000d9527
   d4e68:	2003e2fe 	.word	0x2003e2fe
   d4e6c:	000d9451 	.word	0x000d9451

000d4e70 <_ZN7HPMA1157getDataEv>:

// Return copy of data
hpma115_data_t HPMA115::getData() {
  return this->data;
   d4e70:	6903      	ldr	r3, [r0, #16]
   d4e72:	2000      	movs	r0, #0
   d4e74:	b29a      	uxth	r2, r3
   d4e76:	f362 000f 	bfi	r0, r2, #0, #16
   d4e7a:	0c1b      	lsrs	r3, r3, #16
   d4e7c:	f363 401f 	bfi	r0, r3, #16, #16

    }
}

// Return copy of data
hpma115_data_t HPMA115::getData() {
   d4e80:	b082      	sub	sp, #8
  return this->data;
}
   d4e82:	b002      	add	sp, #8
   d4e84:	4770      	bx	lr
	...

000d4e88 <_GLOBAL__sub_I__ZN7HPMA115C2Ev>:
   d4e88:	4b03      	ldr	r3, [pc, #12]	; (d4e98 <_GLOBAL__sub_I__ZN7HPMA115C2Ev+0x10>)
   d4e8a:	2201      	movs	r2, #1
   d4e8c:	701a      	strb	r2, [r3, #0]
   d4e8e:	4b03      	ldr	r3, [pc, #12]	; (d4e9c <_GLOBAL__sub_I__ZN7HPMA115C2Ev+0x14>)
   d4e90:	2202      	movs	r2, #2
   d4e92:	701a      	strb	r2, [r3, #0]
   d4e94:	f000 bbfe 	b.w	d5694 <HAL_Pin_Map>
   d4e98:	2003e2fe 	.word	0x2003e2fe
   d4e9c:	2003e2fd 	.word	0x2003e2fd

000d4ea0 <_GLOBAL__sub_I__ZN5SGP30C2Ev>:
   d4ea0:	f000 bbf8 	b.w	d5694 <HAL_Pin_Map>

000d4ea4 <_ZNSt17_Function_handlerIFvvEZN14AirQualityWing5setupESt8functionIS0_E24AirQualityWingSettings_tEUlvE_E9_M_invokeERKSt9_Any_data>:

  // Set the settings
  this->settings_ = settings;

  // Create timers
  this->measurementTimer = new Timer(this->settings_.interval, [this](void)->void{return measureTimerEvent();});
   d4ea4:	6803      	ldr	r3, [r0, #0]
// }
// #endif

// Measurement timer handler
void AirQualityWing::measureTimerEvent() {
  this->measurementStart = true;
   d4ea6:	2201      	movs	r2, #1
   d4ea8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   d4eac:	4770      	bx	lr

000d4eae <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4eae:	2a01      	cmp	r2, #1
   d4eb0:	d002      	beq.n	d4eb8 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
   d4eb2:	2a02      	cmp	r2, #2
   d4eb4:	d002      	beq.n	d4ebc <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d4eb6:	e004      	b.n	d4ec2 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4eb8:	6001      	str	r1, [r0, #0]
	      break;
   d4eba:	e002      	b.n	d4ec2 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4ebc:	b108      	cbz	r0, d4ec2 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
   d4ebe:	680b      	ldr	r3, [r1, #0]
   d4ec0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4ec2:	2000      	movs	r0, #0
   d4ec4:	4770      	bx	lr

000d4ec6 <_ZNSt17_Function_handlerIFvvEZN14AirQualityWing5setupESt8functionIS0_E24AirQualityWingSettings_tEUlvE0_E9_M_invokeERKSt9_Any_data>:
  // Set the settings
  this->settings_ = settings;

  // Create timers
  this->measurementTimer = new Timer(this->settings_.interval, [this](void)->void{return measureTimerEvent();});
  this->hpmaTimer = new Timer(HPMA_TIMEOUT_MS, [this](void)->void{return hpmaTimerEvent();}, true); // One shot enabled.
   d4ec6:	6803      	ldr	r3, [r0, #0]
AirQualityWing::AirQualityWing() {}

// This fires after the hpma should have finished...
void AirQualityWing::hpmaTimerEvent() {
  // Set ready flag if we time out
  this->measurementComplete = true;
   d4ec8:	2201      	movs	r2, #1
   d4eca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  this->hpmaError = true;
   d4ece:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   d4ed2:	4770      	bx	lr

000d4ed4 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ed4:	2a01      	cmp	r2, #1
   d4ed6:	d002      	beq.n	d4ede <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
   d4ed8:	2a02      	cmp	r2, #2
   d4eda:	d002      	beq.n	d4ee2 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d4edc:	e004      	b.n	d4ee8 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ede:	6001      	str	r1, [r0, #0]
	      break;
   d4ee0:	e002      	b.n	d4ee8 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4ee2:	b108      	cbz	r0, d4ee8 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
   d4ee4:	680b      	ldr	r3, [r1, #0]
   d4ee6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4ee8:	2000      	movs	r0, #0
   d4eea:	4770      	bx	lr

000d4eec <_ZNSt17_Function_handlerIFvvEZN14AirQualityWing5setupESt8functionIS0_E24AirQualityWingSettings_tEUlvE1_E9_M_invokeERKSt9_Any_data>:

  // Has the HPMA115 init it
  if( this->settings_.hasHPMA115 ) {
    // Setup
    hpma115_init_t hpma115_init = {
      [this](void)->void{return hpmaEvent();},
   d4eec:	6803      	ldr	r3, [r0, #0]
}

// Async publish event
void AirQualityWing::hpmaEvent() {

  this->hpmaMeasurementComplete = true;
   d4eee:	2201      	movs	r2, #1
   d4ef0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   d4ef4:	4770      	bx	lr

000d4ef6 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ef6:	2a01      	cmp	r2, #1
   d4ef8:	d002      	beq.n	d4f00 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
   d4efa:	2a02      	cmp	r2, #2
   d4efc:	d002      	beq.n	d4f04 <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d4efe:	e004      	b.n	d4f0a <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f00:	6001      	str	r1, [r0, #0]
	      break;
   d4f02:	e002      	b.n	d4f0a <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4f04:	b108      	cbz	r0, d4f0a <_ZNSt14_Function_base13_Base_managerIZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_tEUlvE1_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x14>
   d4f06:	680b      	ldr	r3, [r1, #0]
   d4f08:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4f0a:	2000      	movs	r0, #0
   d4f0c:	4770      	bx	lr

000d4f0e <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4f0e:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4f10:	2100      	movs	r1, #0
   d4f12:	4604      	mov	r4, r0
   d4f14:	4608      	mov	r0, r1
   d4f16:	f000 fc45 	bl	d57a4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4f1a:	a902      	add	r1, sp, #8
   d4f1c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4f1e:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4f20:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4f24:	f000 fc56 	bl	d57d4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4f28:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4f2a:	b10c      	cbz	r4, d4f30 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4f2c:	2301      	movs	r3, #1
   d4f2e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4f30:	2100      	movs	r1, #0
   d4f32:	2001      	movs	r0, #1
   d4f34:	f000 fc36 	bl	d57a4 <os_thread_scheduling>
            }
        }
        if (t) {
   d4f38:	b12c      	cbz	r4, d4f46 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4f3a:	6823      	ldr	r3, [r4, #0]
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	689b      	ldr	r3, [r3, #8]
   d4f40:	4798      	blx	r3
            t->running = false;
   d4f42:	2300      	movs	r3, #0
   d4f44:	7123      	strb	r3, [r4, #4]
        }
    }
   d4f46:	b002      	add	sp, #8
   d4f48:	bd10      	pop	{r4, pc}

000d4f4a <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4f4a:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4f4c:	6880      	ldr	r0, [r0, #8]
   d4f4e:	2300      	movs	r3, #0
   d4f50:	b138      	cbz	r0, d4f62 <_ZN5Timer5_stopEjb+0x18>
   d4f52:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4f56:	2102      	movs	r1, #2
   d4f58:	f000 fc44 	bl	d57e4 <os_timer_change>
   d4f5c:	fab0 f080 	clz	r0, r0
   d4f60:	0940      	lsrs	r0, r0, #5
    }
   d4f62:	b003      	add	sp, #12
   d4f64:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f68 <_ZN5Timer6_startEjb>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
   d4f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4f6a:	4606      	mov	r6, r0
   d4f6c:	4614      	mov	r4, r2
   d4f6e:	460d      	mov	r5, r1
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4f70:	2200      	movs	r2, #0
   d4f72:	4621      	mov	r1, r4
   d4f74:	f7ff ffe9 	bl	d4f4a <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4f78:	68b0      	ldr	r0, [r6, #8]
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	b140      	cbz	r0, d4f90 <_ZN5Timer6_startEjb+0x28>
   d4f7e:	9301      	str	r3, [sp, #4]
   d4f80:	9500      	str	r5, [sp, #0]
   d4f82:	4622      	mov	r2, r4
   d4f84:	4619      	mov	r1, r3
   d4f86:	f000 fc2d 	bl	d57e4 <os_timer_change>
   d4f8a:	fab0 f080 	clz	r0, r0
   d4f8e:	0940      	lsrs	r0, r0, #5
    }
   d4f90:	b002      	add	sp, #8
   d4f92:	bd70      	pop	{r4, r5, r6, pc}

000d4f94 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4f94:	b538      	push	{r3, r4, r5, lr}
   d4f96:	4b10      	ldr	r3, [pc, #64]	; (d4fd8 <_ZN5TimerD1Ev+0x44>)
   d4f98:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4f9a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4f9c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4f9e:	b1a3      	cbz	r3, d4fca <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4fa4:	2200      	movs	r2, #0
   d4fa6:	f7ff ffd0 	bl	d4f4a <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4faa:	2100      	movs	r1, #0
   d4fac:	68a0      	ldr	r0, [r4, #8]
   d4fae:	f000 fc41 	bl	d5834 <os_timer_set_id>
            while (running) {
   d4fb2:	7923      	ldrb	r3, [r4, #4]
   d4fb4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4fb8:	b113      	cbz	r3, d4fc0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4fba:	f000 fbdb 	bl	d5774 <os_thread_yield>
   d4fbe:	e7f8      	b.n	d4fb2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4fc0:	4629      	mov	r1, r5
   d4fc2:	68a0      	ldr	r0, [r4, #8]
   d4fc4:	f000 fbfe 	bl	d57c4 <os_timer_destroy>
            handle = nullptr;
   d4fc8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fca:	f104 000c 	add.w	r0, r4, #12
   d4fce:	f7ff f8c1 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	bd38      	pop	{r3, r4, r5, pc}
   d4fd6:	bf00      	nop
   d4fd8:	000d9468 	.word	0x000d9468

000d4fdc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4fdc:	b510      	push	{r4, lr}
   d4fde:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4fe0:	f7ff ffd8 	bl	d4f94 <_ZN5TimerD1Ev>
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	211c      	movs	r1, #28
   d4fe8:	f003 face 	bl	d8588 <_ZdlPvj>
   d4fec:	4620      	mov	r0, r4
   d4fee:	bd10      	pop	{r4, pc}

000d4ff0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4ff0:	b510      	push	{r4, lr}
   d4ff2:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4ff4:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4ff8:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4ffa:	2120      	movs	r1, #32
   d4ffc:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d4ffe:	2100      	movs	r1, #0
   d5000:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5002:	460b      	mov	r3, r1
   d5004:	aa02      	add	r2, sp, #8
   d5006:	6801      	ldr	r1, [r0, #0]
   d5008:	4620      	mov	r0, r4
   d500a:	f000 fd1b 	bl	d5a44 <log_message_v>
}
   d500e:	b00a      	add	sp, #40	; 0x28
   d5010:	bd10      	pop	{r4, pc}

000d5012 <_ZNK5spark6Logger4warnEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d5012:	b40e      	push	{r1, r2, r3}
   d5014:	b503      	push	{r0, r1, lr}
   d5016:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
   d5018:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d501a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d501e:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   d5020:	f7ff ffe6 	bl	d4ff0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d5024:	b002      	add	sp, #8
   d5026:	f85d eb04 	ldr.w	lr, [sp], #4
   d502a:	b003      	add	sp, #12
   d502c:	4770      	bx	lr

000d502e <_ZN14AirQualityWingC1Ev>:

// Firmware update
#include "CCS811_FW_App_v2_0_1.h"

// Constructor
AirQualityWing::AirQualityWing() {}
   d502e:	b510      	push	{r4, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5030:	2300      	movs	r3, #0
   d5032:	4604      	mov	r4, r0
   d5034:	6083      	str	r3, [r0, #8]
   d5036:	301c      	adds	r0, #28
   d5038:	f7ff fade 	bl	d45f8 <_ZN6Si7021C1Ev>
   d503c:	f104 001d 	add.w	r0, r4, #29
   d5040:	f7ff fb91 	bl	d4766 <_ZN6CCS811C1Ev>
   d5044:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5048:	f7ff fe02 	bl	d4c50 <_ZN7HPMA115C1Ev>
   d504c:	4620      	mov	r0, r4
   d504e:	bd10      	pop	{r4, pc}

000d5050 <_ZN14AirQualityWing5beginEv>:
  }

  return success;
}

AirQualityWingError_t AirQualityWing::begin() {
   d5050:	b510      	push	{r4, lr}
   d5052:	4604      	mov	r4, r0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d5054:	2200      	movs	r2, #0
   d5056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d505a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   d505c:	f7ff ff84 	bl	d4f68 <_ZN5Timer6_startEjb>
  // Start the timer
  this->measurementTimer->start();

  // Start VOC measurement
  // This is an async reading.
  if( this->settings_.hasCCS811 ) {
   d5060:	7d63      	ldrb	r3, [r4, #21]
   d5062:	b15b      	cbz	r3, d507c <_ZN14AirQualityWing5beginEv+0x2c>
    err_code = ccs811.enable();
   d5064:	f104 001d 	add.w	r0, r4, #29
   d5068:	f7ff fc2f 	bl	d48ca <_ZN6CCS8116enableEv>
    if( err_code != 0 ) {
   d506c:	4602      	mov	r2, r0
   d506e:	b128      	cbz	r0, d507c <_ZN14AirQualityWing5beginEv+0x2c>
      Log.trace("ccs811 enable err %d\n", (int)err_code);
   d5070:	4905      	ldr	r1, [pc, #20]	; (d5088 <_ZN14AirQualityWing5beginEv+0x38>)
   d5072:	4806      	ldr	r0, [pc, #24]	; (d508c <_ZN14AirQualityWing5beginEv+0x3c>)
   d5074:	f7ff f881 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>
      return ccs811_error;
   d5078:	2002      	movs	r0, #2
   d507a:	bd10      	pop	{r4, pc}
    }
  }

  // Start measurement
  this->measurementStart = true;
   d507c:	2301      	movs	r3, #1
   d507e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

  return success;
   d5082:	2000      	movs	r0, #0
}
   d5084:	bd10      	pop	{r4, pc}
   d5086:	bf00      	nop
   d5088:	000d9474 	.word	0x000d9474
   d508c:	2003e34c 	.word	0x2003e34c

000d5090 <_ZN14AirQualityWing8toStringEv>:

void AirQualityWing::end() {

}

String AirQualityWing::toString() {
   d5090:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5092:	460c      	mov	r4, r1
   d5094:	b093      	sub	sp, #76	; 0x4c
   d5096:	4605      	mov	r5, r0

  String out = "{";
   d5098:	4961      	ldr	r1, [pc, #388]	; (d5220 <_ZN14AirQualityWing8toStringEv+0x190>)
   d509a:	a802      	add	r0, sp, #8
   d509c:	f000 fe9d 	bl	d5dda <_ZN6StringC1EPK19__FlashStringHelper>

  // If we have CCS811 data, concat
  if( this->data.hpma115.hasData ) {
   d50a0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d50a4:	b303      	cbz	r3, d50e8 <_ZN14AirQualityWing8toStringEv+0x58>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d50a6:	a902      	add	r1, sp, #8
   d50a8:	a80a      	add	r0, sp, #40	; 0x28
   d50aa:	f000 fed5 	bl	d5e58 <_ZN6StringC1ERKS_>
    out = String( out + String::format("\"pm25\":%d,\"pm10\":%d", this->data.hpma115.data.pm25,this->data.hpma115.data.pm10) );
   d50ae:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
   d50b2:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   d50b6:	495b      	ldr	r1, [pc, #364]	; (d5224 <_ZN14AirQualityWing8toStringEv+0x194>)
   d50b8:	a806      	add	r0, sp, #24
   d50ba:	f000 ff1b 	bl	d5ef4 <_ZN6String6formatEPKcz>
   d50be:	a906      	add	r1, sp, #24
   d50c0:	a80a      	add	r0, sp, #40	; 0x28
   d50c2:	f000 fef3 	bl	d5eac <_ZplRK15StringSumHelperRK6String>
   d50c6:	4601      	mov	r1, r0
   d50c8:	a80e      	add	r0, sp, #56	; 0x38
   d50ca:	f000 fec5 	bl	d5e58 <_ZN6StringC1ERKS_>
   d50ce:	a90e      	add	r1, sp, #56	; 0x38
   d50d0:	a802      	add	r0, sp, #8
   d50d2:	f000 fecc 	bl	d5e6e <_ZN6StringaSEOS_>
   d50d6:	a80e      	add	r0, sp, #56	; 0x38
   d50d8:	f000 fe38 	bl	d5d4c <_ZN6StringD1Ev>
   d50dc:	a806      	add	r0, sp, #24
   d50de:	f000 fe35 	bl	d5d4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d50e2:	a80a      	add	r0, sp, #40	; 0x28
   d50e4:	f000 fe32 	bl	d5d4c <_ZN6StringD1Ev>
  }

  // If we have Si7021 data, concat
  // TODO: fix this
  if( this->data.si7021.hasData ) {
   d50e8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   d50ec:	2b00      	cmp	r3, #0
   d50ee:	d041      	beq.n	d5174 <_ZN14AirQualityWing8toStringEv+0xe4>

    // Add comma
    if( this->data.hpma115.hasData ) {
   d50f0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d50f4:	b1ab      	cbz	r3, d5122 <_ZN14AirQualityWing8toStringEv+0x92>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d50f6:	a902      	add	r1, sp, #8
   d50f8:	a80a      	add	r0, sp, #40	; 0x28
   d50fa:	f000 fead 	bl	d5e58 <_ZN6StringC1ERKS_>
      out = String( out + ",");
   d50fe:	494a      	ldr	r1, [pc, #296]	; (d5228 <_ZN14AirQualityWing8toStringEv+0x198>)
   d5100:	a80a      	add	r0, sp, #40	; 0x28
   d5102:	f000 fedf 	bl	d5ec4 <_ZplRK15StringSumHelperPKc>
   d5106:	4601      	mov	r1, r0
   d5108:	a80e      	add	r0, sp, #56	; 0x38
   d510a:	f000 fea5 	bl	d5e58 <_ZN6StringC1ERKS_>
   d510e:	a90e      	add	r1, sp, #56	; 0x38
   d5110:	a802      	add	r0, sp, #8
   d5112:	f000 feac 	bl	d5e6e <_ZN6StringaSEOS_>
   d5116:	a80e      	add	r0, sp, #56	; 0x38
   d5118:	f000 fe18 	bl	d5d4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d511c:	a80a      	add	r0, sp, #40	; 0x28
   d511e:	f000 fe15 	bl	d5d4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5122:	a902      	add	r1, sp, #8
   d5124:	a80a      	add	r0, sp, #40	; 0x28
   d5126:	f000 fe97 	bl	d5e58 <_ZN6StringC1ERKS_>
    }

    out = String( out + String::format("\"temperature\":%.2f,\"humidity\":%.2f",this->data.si7021.data.temperature, this->data.si7021.data.humidity) );
   d512a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d512c:	f003 fcee 	bl	d8b0c <__aeabi_f2d>
   d5130:	4606      	mov	r6, r0
   d5132:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   d5134:	460f      	mov	r7, r1
   d5136:	f003 fce9 	bl	d8b0c <__aeabi_f2d>
   d513a:	4632      	mov	r2, r6
   d513c:	463b      	mov	r3, r7
   d513e:	e9cd 0100 	strd	r0, r1, [sp]
   d5142:	493a      	ldr	r1, [pc, #232]	; (d522c <_ZN14AirQualityWing8toStringEv+0x19c>)
   d5144:	a806      	add	r0, sp, #24
   d5146:	f000 fed5 	bl	d5ef4 <_ZN6String6formatEPKcz>
   d514a:	a906      	add	r1, sp, #24
   d514c:	a80a      	add	r0, sp, #40	; 0x28
   d514e:	f000 fead 	bl	d5eac <_ZplRK15StringSumHelperRK6String>
   d5152:	4601      	mov	r1, r0
   d5154:	a80e      	add	r0, sp, #56	; 0x38
   d5156:	f000 fe7f 	bl	d5e58 <_ZN6StringC1ERKS_>
   d515a:	a90e      	add	r1, sp, #56	; 0x38
   d515c:	a802      	add	r0, sp, #8
   d515e:	f000 fe86 	bl	d5e6e <_ZN6StringaSEOS_>
   d5162:	a80e      	add	r0, sp, #56	; 0x38
   d5164:	f000 fdf2 	bl	d5d4c <_ZN6StringD1Ev>
   d5168:	a806      	add	r0, sp, #24
   d516a:	f000 fdef 	bl	d5d4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d516e:	a80a      	add	r0, sp, #40	; 0x28
   d5170:	f000 fdec 	bl	d5d4c <_ZN6StringD1Ev>
  }

  // If we have HPMA data, concat
  if( this->data.ccs811.hasData ) {
   d5174:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   d5178:	2b00      	cmp	r3, #0
   d517a:	d03c      	beq.n	d51f6 <_ZN14AirQualityWing8toStringEv+0x166>

    // Add comma
    // TODO: fix this
    if( this->data.hpma115.hasData || this->data.si7021.hasData) {
   d517c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d5180:	b913      	cbnz	r3, d5188 <_ZN14AirQualityWing8toStringEv+0xf8>
   d5182:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   d5186:	b1ab      	cbz	r3, d51b4 <_ZN14AirQualityWing8toStringEv+0x124>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5188:	a902      	add	r1, sp, #8
   d518a:	a80a      	add	r0, sp, #40	; 0x28
   d518c:	f000 fe64 	bl	d5e58 <_ZN6StringC1ERKS_>
      out = String( out + ",");
   d5190:	4925      	ldr	r1, [pc, #148]	; (d5228 <_ZN14AirQualityWing8toStringEv+0x198>)
   d5192:	a80a      	add	r0, sp, #40	; 0x28
   d5194:	f000 fe96 	bl	d5ec4 <_ZplRK15StringSumHelperPKc>
   d5198:	4601      	mov	r1, r0
   d519a:	a80e      	add	r0, sp, #56	; 0x38
   d519c:	f000 fe5c 	bl	d5e58 <_ZN6StringC1ERKS_>
   d51a0:	a90e      	add	r1, sp, #56	; 0x38
   d51a2:	a802      	add	r0, sp, #8
   d51a4:	f000 fe63 	bl	d5e6e <_ZN6StringaSEOS_>
   d51a8:	a80e      	add	r0, sp, #56	; 0x38
   d51aa:	f000 fdcf 	bl	d5d4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d51ae:	a80a      	add	r0, sp, #40	; 0x28
   d51b0:	f000 fdcc 	bl	d5d4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d51b4:	a902      	add	r1, sp, #8
   d51b6:	a80a      	add	r0, sp, #40	; 0x28
   d51b8:	f000 fe4e 	bl	d5e58 <_ZN6StringC1ERKS_>
    }

    out = String( out + String::format("\"tvoc\":%d,\"c02\":%d",this->data.ccs811.data.tvoc, this->data.ccs811.data.c02) );
   d51bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   d51c0:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   d51c4:	491a      	ldr	r1, [pc, #104]	; (d5230 <_ZN14AirQualityWing8toStringEv+0x1a0>)
   d51c6:	a806      	add	r0, sp, #24
   d51c8:	f000 fe94 	bl	d5ef4 <_ZN6String6formatEPKcz>
   d51cc:	a906      	add	r1, sp, #24
   d51ce:	a80a      	add	r0, sp, #40	; 0x28
   d51d0:	f000 fe6c 	bl	d5eac <_ZplRK15StringSumHelperRK6String>
   d51d4:	4601      	mov	r1, r0
   d51d6:	a80e      	add	r0, sp, #56	; 0x38
   d51d8:	f000 fe3e 	bl	d5e58 <_ZN6StringC1ERKS_>
   d51dc:	a90e      	add	r1, sp, #56	; 0x38
   d51de:	a802      	add	r0, sp, #8
   d51e0:	f000 fe45 	bl	d5e6e <_ZN6StringaSEOS_>
   d51e4:	a80e      	add	r0, sp, #56	; 0x38
   d51e6:	f000 fdb1 	bl	d5d4c <_ZN6StringD1Ev>
   d51ea:	a806      	add	r0, sp, #24
   d51ec:	f000 fdae 	bl	d5d4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d51f0:	a80a      	add	r0, sp, #40	; 0x28
   d51f2:	f000 fdab 	bl	d5d4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d51f6:	a902      	add	r1, sp, #8
   d51f8:	a80e      	add	r0, sp, #56	; 0x38
   d51fa:	f000 fe2d 	bl	d5e58 <_ZN6StringC1ERKS_>
  }

  return String( out + "}" );
   d51fe:	490d      	ldr	r1, [pc, #52]	; (d5234 <_ZN14AirQualityWing8toStringEv+0x1a4>)
   d5200:	a80e      	add	r0, sp, #56	; 0x38
   d5202:	f000 fe5f 	bl	d5ec4 <_ZplRK15StringSumHelperPKc>
   d5206:	4601      	mov	r1, r0
   d5208:	4628      	mov	r0, r5
   d520a:	f000 fe25 	bl	d5e58 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d520e:	a80e      	add	r0, sp, #56	; 0x38
   d5210:	f000 fd9c 	bl	d5d4c <_ZN6StringD1Ev>

}

String AirQualityWing::toString() {

  String out = "{";
   d5214:	a802      	add	r0, sp, #8
   d5216:	f000 fd99 	bl	d5d4c <_ZN6StringD1Ev>
    out = String( out + String::format("\"tvoc\":%d,\"c02\":%d",this->data.ccs811.data.tvoc, this->data.ccs811.data.c02) );
  }

  return String( out + "}" );

}
   d521a:	4628      	mov	r0, r5
   d521c:	b013      	add	sp, #76	; 0x4c
   d521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5220:	000d948a 	.word	0x000d948a
   d5224:	000d948c 	.word	0x000d948c
   d5228:	000d94a0 	.word	0x000d94a0
   d522c:	000d94a2 	.word	0x000d94a2
   d5230:	000d94c5 	.word	0x000d94c5
   d5234:	000d94d8 	.word	0x000d94d8

000d5238 <_ZN14AirQualityWing11setIntervalEm>:

}

void AirQualityWing::setInterval(uint32_t interval) {

  if( interval >= MIN_MEASUREMENT_DELAY_MS ) {
   d5238:	f242 730f 	movw	r3, #9999	; 0x270f
   d523c:	4299      	cmp	r1, r3

  return success;

}

void AirQualityWing::setInterval(uint32_t interval) {
   d523e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5240:	4605      	mov	r5, r0
   d5242:	460c      	mov	r4, r1

  if( interval >= MIN_MEASUREMENT_DELAY_MS ) {
   d5244:	d911      	bls.n	d526a <_ZN14AirQualityWing11setIntervalEm+0x32>

    // Set the interval
    this->settings_.interval = interval;
   d5246:	6129      	str	r1, [r5, #16]

    Log.trace("update reading period %d\n", (int)interval);
   d5248:	460a      	mov	r2, r1
   d524a:	4809      	ldr	r0, [pc, #36]	; (d5270 <_ZN14AirQualityWing11setIntervalEm+0x38>)
   d524c:	4909      	ldr	r1, [pc, #36]	; (d5274 <_ZN14AirQualityWing11setIntervalEm+0x3c>)
   d524e:	f7fe ff94 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d5252:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   d5254:	6898      	ldr	r0, [r3, #8]
   d5256:	b140      	cbz	r0, d526a <_ZN14AirQualityWing11setIntervalEm+0x32>
   d5258:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d525c:	2200      	movs	r2, #0
   d525e:	9300      	str	r3, [sp, #0]
   d5260:	9201      	str	r2, [sp, #4]
   d5262:	4623      	mov	r3, r4
   d5264:	2103      	movs	r1, #3
   d5266:	f000 fabd 	bl	d57e4 <os_timer_change>

  }

  // TODO: Update the timer

   d526a:	b003      	add	sp, #12
   d526c:	bd30      	pop	{r4, r5, pc}
   d526e:	bf00      	nop
   d5270:	2003e34c 	.word	0x2003e34c
   d5274:	000d94da 	.word	0x000d94da

000d5278 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5278:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d527a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d527c:	b90a      	cbnz	r2, d5282 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d527e:	f003 f996 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5282:	68c3      	ldr	r3, [r0, #12]
    }
   d5284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5288:	4718      	bx	r3

000d528a <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
   d528a:	b508      	push	{r3, lr}
    {
        if (callback) {
   d528c:	6943      	ldr	r3, [r0, #20]
   d528e:	b113      	cbz	r3, d5296 <_ZN5Timer7timeoutEv+0xc>
            callback();
   d5290:	300c      	adds	r0, #12
   d5292:	f7ff fff1 	bl	d5278 <_ZNKSt8functionIFvvEEclEv>
   d5296:	bd08      	pop	{r3, pc}

000d5298 <_ZN14AirQualityWing7processEv>:

void AirQualityWing::deattachHandler() {
  this->handler_ = nullptr;
}

AirQualityWingError_t AirQualityWing::process() {
   d5298:	b538      	push	{r3, r4, r5, lr}

  uint32_t err_code = success;

  // Set flag if measurement is done!
  if( this->hpmaMeasurementComplete == true ) {
   d529a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66

void AirQualityWing::deattachHandler() {
  this->handler_ = nullptr;
}

AirQualityWingError_t AirQualityWing::process() {
   d529e:	4604      	mov	r4, r0

  uint32_t err_code = success;

  // Set flag if measurement is done!
  if( this->hpmaMeasurementComplete == true ) {
   d52a0:	b1cb      	cbz	r3, d52d6 <_ZN14AirQualityWing7processEv+0x3e>
    // Reset
    this->hpmaMeasurementComplete = false;
   d52a2:	2300      	movs	r3, #0
   d52a4:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66

    Log.trace("hpma complete");
   d52a8:	4950      	ldr	r1, [pc, #320]	; (d53ec <_ZN14AirQualityWing7processEv+0x154>)
   d52aa:	4851      	ldr	r0, [pc, #324]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)

    // Disable hpma
    this->hpma115.disable();
   d52ac:	f104 0524 	add.w	r5, r4, #36	; 0x24
  // Set flag if measurement is done!
  if( this->hpmaMeasurementComplete == true ) {
    // Reset
    this->hpmaMeasurementComplete = false;

    Log.trace("hpma complete");
   d52b0:	f7fe ff63 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>

    // Disable hpma
    this->hpma115.disable();
   d52b4:	4628      	mov	r0, r5
   d52b6:	f7ff fcdf 	bl	d4c78 <_ZN7HPMA1157disableEv>

    // Copy data
    this->data.hpma115.data = this->hpma115.getData();
   d52ba:	4628      	mov	r0, r5
   d52bc:	f7ff fdd8 	bl	d4e70 <_ZN7HPMA1157getDataEv>
    this->data.hpma115.hasData = true;
   d52c0:	2301      	movs	r3, #1

    // Disable hpma
    this->hpma115.disable();

    // Copy data
    this->data.hpma115.data = this->hpma115.getData();
   d52c2:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
   d52c6:	f3c0 400f 	ubfx	r0, r0, #16, #16
   d52ca:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    this->data.hpma115.hasData = true;
   d52ce:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c

    // Set available flag
    this->measurementComplete = true;
   d52d2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
  }

  // If we're greater than or equal to the measurement delay
  // start taking measurements!
  if( this->measurementStart ) {
   d52d6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   d52da:	2b00      	cmp	r3, #0
   d52dc:	d058      	beq.n	d5390 <_ZN14AirQualityWing7processEv+0xf8>

    Log.trace("measurement start");
   d52de:	4945      	ldr	r1, [pc, #276]	; (d53f4 <_ZN14AirQualityWing7processEv+0x15c>)
   d52e0:	4843      	ldr	r0, [pc, #268]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d52e2:	f7fe ff4a 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>

    // Set state variable to false
    this->measurementStart = false;
   d52e6:	2300      	movs	r3, #0
   d52e8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    // Reset has data variables
    this->data.si7021.hasData = false;
   d52ec:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    this->data.hpma115.hasData = false;
   d52f0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    this->data.ccs811.hasData = false;
   d52f4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

    // Disable HPMA
    if( this->settings_.hasHPMA115 ) hpma115.disable();
   d52f8:	7d23      	ldrb	r3, [r4, #20]
   d52fa:	b11b      	cbz	r3, d5304 <_ZN14AirQualityWing7processEv+0x6c>
   d52fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5300:	f7ff fcba 	bl	d4c78 <_ZN7HPMA1157disableEv>

    if( this->settings_.hasSi7021 ) {
   d5304:	7da3      	ldrb	r3, [r4, #22]
   d5306:	b1d3      	cbz	r3, d533e <_ZN14AirQualityWing7processEv+0xa6>
      // Read temp and humiity
      err_code = si7021.read(&this->data.si7021.data);
   d5308:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d530c:	f104 001c 	add.w	r0, r4, #28
   d5310:	f7ff f97e 	bl	d4610 <_ZN6Si70214readEP13si7021_data_t>

      if( err_code == SI7021_SUCCESS ) {
   d5314:	b968      	cbnz	r0, d5332 <_ZN14AirQualityWing7processEv+0x9a>
        // Set has data flag
        this->data.si7021.hasData = true;
   d5316:	2301      	movs	r3, #1
   d5318:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

        // Set env data in the CCS811
        if( this->settings_.hasCCS811 ) {
   d531c:	7d63      	ldrb	r3, [r4, #21]
   d531e:	b333      	cbz	r3, d536e <_ZN14AirQualityWing7processEv+0xd6>
          ccs811.set_env(this->data.si7021.data.temperature,this->data.si7021.data.humidity);
   d5320:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
   d5324:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
   d5328:	f104 001d 	add.w	r0, r4, #29
   d532c:	f7ff fa9e 	bl	d486c <_ZN6CCS8117set_envEff>
   d5330:	e005      	b.n	d533e <_ZN14AirQualityWing7processEv+0xa6>
        // // Set the env data for the SGP30
        // #ifdef HAS_SGP30
        // sgp30.set_env(si7021_data.temperature,si7021_data.humidity);
        // #endif
      } else {
        Log.error("Error temp - fatal err"); //TODO: logger
   d5332:	4931      	ldr	r1, [pc, #196]	; (d53f8 <_ZN14AirQualityWing7processEv+0x160>)
   d5334:	482e      	ldr	r0, [pc, #184]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d5336:	f7fe ff37 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>
        return si7021_error;
   d533a:	2003      	movs	r0, #3
   d533c:	bd38      	pop	{r3, r4, r5, pc}
      }
    }

    // Process CCS811
    if( this->settings_.hasCCS811 ) {
   d533e:	7d63      	ldrb	r3, [r4, #21]
   d5340:	b1ab      	cbz	r3, d536e <_ZN14AirQualityWing7processEv+0xd6>
      err_code = ccs811.read(&this->data.ccs811.data);
   d5342:	f104 016a 	add.w	r1, r4, #106	; 0x6a
   d5346:	f104 001d 	add.w	r0, r4, #29
   d534a:	f7ff fb29 	bl	d49a0 <_ZN6CCS8114readEP13ccs811_data_t>

      if( err_code == CCS811_SUCCESS) {
   d534e:	b918      	cbnz	r0, d5358 <_ZN14AirQualityWing7processEv+0xc0>
        // Set has data flag
        this->data.ccs811.hasData = true;
   d5350:	2301      	movs	r3, #1
   d5352:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d5356:	e00a      	b.n	d536e <_ZN14AirQualityWing7processEv+0xd6>
      } else if( err_code == CCS811_NO_DAT_AVAIL ) {
   d5358:	2802      	cmp	r0, #2
   d535a:	d104      	bne.n	d5366 <_ZN14AirQualityWing7processEv+0xce>
        Log.warn("Error tvoc - no data");
   d535c:	4927      	ldr	r1, [pc, #156]	; (d53fc <_ZN14AirQualityWing7processEv+0x164>)
   d535e:	4824      	ldr	r0, [pc, #144]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d5360:	f7ff fe57 	bl	d5012 <_ZNK5spark6Logger4warnEPKcz>
   d5364:	e003      	b.n	d536e <_ZN14AirQualityWing7processEv+0xd6>
      } else {
        Log.error("Error tvoc - fatal");
   d5366:	4926      	ldr	r1, [pc, #152]	; (d5400 <_ZN14AirQualityWing7processEv+0x168>)
   d5368:	4821      	ldr	r0, [pc, #132]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d536a:	f7fe ff1d 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>

    // Process PM2.5 and PM10 results
    // This is slightly different from the other readings
    // due to the fact that it should be shut off when not taking a reading
    // (extends the life of the device)
    if( this->settings_.hasHPMA115 ) {
   d536e:	7d20      	ldrb	r0, [r4, #20]
   d5370:	b150      	cbz	r0, d5388 <_ZN14AirQualityWing7processEv+0xf0>
      this->hpma115.enable();
   d5372:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5376:	f7ff fc6e 	bl	d4c56 <_ZN7HPMA1156enableEv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d537a:	2200      	movs	r2, #0
   d537c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5380:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d5382:	f7ff fdf1 	bl	d4f68 <_ZN5Timer6_startEjb>
   d5386:	e02f      	b.n	d53e8 <_ZN14AirQualityWing7processEv+0x150>
      this->hpmaTimer->start();
    } else {
      this->measurementComplete = true;
   d5388:	2301      	movs	r3, #1
   d538a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   d538e:	bd38      	pop	{r3, r4, r5, pc}
  //   Log.trace("sp30 process error");
  // }
  // #endif

  // Only run process command if this setup has HPMA115
  if( this->settings_.hasHPMA115 ) hpma115.process();
   d5390:	7d23      	ldrb	r3, [r4, #20]
   d5392:	b11b      	cbz	r3, d539c <_ZN14AirQualityWing7processEv+0x104>
   d5394:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5398:	f7ff fcb4 	bl	d4d04 <_ZN7HPMA1157processEv>
  //   checkIaqSensorStatus();
  // }
  // #endif

  // Send event if complete
  if ( this->measurementComplete ) {
   d539c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   d53a0:	b313      	cbz	r3, d53e8 <_ZN14AirQualityWing7processEv+0x150>

    Log.trace("measurement complete");
   d53a2:	4918      	ldr	r1, [pc, #96]	; (d5404 <_ZN14AirQualityWing7processEv+0x16c>)
   d53a4:	4812      	ldr	r0, [pc, #72]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d53a6:	f7fe fee8 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>

    // Set flag to false
    this->measurementComplete = false;

    // Only handle if we have an hpma
    if( this->settings_.hasHPMA115 ) {
   d53aa:	7d23      	ldrb	r3, [r4, #20]
  if ( this->measurementComplete ) {

    Log.trace("measurement complete");

    // Set flag to false
    this->measurementComplete = false;
   d53ac:	2500      	movs	r5, #0
   d53ae:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65

    // Only handle if we have an hpma
    if( this->settings_.hasHPMA115 ) {
   d53b2:	b1a3      	cbz	r3, d53de <_ZN14AirQualityWing7processEv+0x146>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d53b4:	462a      	mov	r2, r5
   d53b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d53ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d53bc:	f7ff fdc5 	bl	d4f4a <_ZN5Timer5_stopEjb>
      // Stop timer
      this->hpmaTimer->stop();

      //If error show it here
      if( this->hpmaError ) {
   d53c0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
   d53c4:	b15b      	cbz	r3, d53de <_ZN14AirQualityWing7processEv+0x146>
        Log.error("hpma timeout");
   d53c6:	4910      	ldr	r1, [pc, #64]	; (d5408 <_ZN14AirQualityWing7processEv+0x170>)
   d53c8:	4809      	ldr	r0, [pc, #36]	; (d53f0 <_ZN14AirQualityWing7processEv+0x158>)
   d53ca:	f7fe feed 	bl	d41a8 <_ZNK5spark6Logger5errorEPKcz>

        // Disable on error
        this->hpma115.disable();
   d53ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d53d2:	f7ff fc51 	bl	d4c78 <_ZN7HPMA1157disableEv>

        // Reset error flag
        this->hpmaError = false;
   d53d6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67

        // Return error
        return hpma115_error;
   d53da:	2001      	movs	r0, #1
   d53dc:	bd38      	pop	{r3, r4, r5, pc}
      }
    }


    // Call handler
    if( this->handler_ != nullptr ) this->handler_();
   d53de:	68a3      	ldr	r3, [r4, #8]
   d53e0:	b113      	cbz	r3, d53e8 <_ZN14AirQualityWing7processEv+0x150>
   d53e2:	4620      	mov	r0, r4
   d53e4:	f7ff ff48 	bl	d5278 <_ZNKSt8functionIFvvEEclEv>

  }

  return success;
   d53e8:	2000      	movs	r0, #0

}
   d53ea:	bd38      	pop	{r3, r4, r5, pc}
   d53ec:	000d94f4 	.word	0x000d94f4
   d53f0:	2003e34c 	.word	0x2003e34c
   d53f4:	000d9502 	.word	0x000d9502
   d53f8:	000d9514 	.word	0x000d9514
   d53fc:	000d952b 	.word	0x000d952b
   d5400:	000d9540 	.word	0x000d9540
   d5404:	000d9553 	.word	0x000d9553
   d5408:	000d9568 	.word	0x000d9568

000d540c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d540c:	b513      	push	{r0, r1, r4, lr}
   d540e:	460b      	mov	r3, r1
   d5410:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5412:	c803      	ldmia	r0, {r0, r1}
   d5414:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5418:	e893 0003 	ldmia.w	r3, {r0, r1}
   d541c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5420:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5424:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5428:	b002      	add	sp, #8
   d542a:	bd10      	pop	{r4, pc}

000d542c <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d542c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5430:	4604      	mov	r4, r0
   d5432:	4615      	mov	r5, r2
   d5434:	2600      	movs	r6, #0
   d5436:	4698      	mov	r8, r3
   d5438:	4b10      	ldr	r3, [pc, #64]	; (d547c <_ZN5TimerC1EjSt8functionIFvvEEb+0x50>)
   d543a:	6003      	str	r3, [r0, #0]
   d543c:	460f      	mov	r7, r1
   d543e:	7106      	strb	r6, [r0, #4]
   d5440:	6086      	str	r6, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5442:	6146      	str	r6, [r0, #20]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5444:	f100 010c 	add.w	r1, r0, #12
   d5448:	4610      	mov	r0, r2
   d544a:	f7ff ffdf 	bl	d540c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d544e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5450:	6962      	ldr	r2, [r4, #20]
   d5452:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5454:	6163      	str	r3, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5456:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5458:	69a2      	ldr	r2, [r4, #24]
   d545a:	60ea      	str	r2, [r5, #12]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d545c:	9601      	str	r6, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d545e:	61a3      	str	r3, [r4, #24]
   d5460:	f8cd 8000 	str.w	r8, [sp]
   d5464:	4623      	mov	r3, r4
   d5466:	4a06      	ldr	r2, [pc, #24]	; (d5480 <_ZN5TimerC1EjSt8functionIFvvEEb+0x54>)
   d5468:	4639      	mov	r1, r7
   d546a:	f104 0008 	add.w	r0, r4, #8
   d546e:	f000 f9a1 	bl	d57b4 <os_timer_create>
    }
   d5472:	4620      	mov	r0, r4
   d5474:	b002      	add	sp, #8
   d5476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d547a:	bf00      	nop
   d547c:	000d9468 	.word	0x000d9468
   d5480:	000d4f0f 	.word	0x000d4f0f

000d5484 <_ZNSt8functionIFvvEEaSERKS1_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
   d5484:	b530      	push	{r4, r5, lr}
   d5486:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5488:	2300      	movs	r3, #0
   d548a:	9302      	str	r3, [sp, #8]
   d548c:	688b      	ldr	r3, [r1, #8]
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
   d548e:	4604      	mov	r4, r0
   d5490:	460d      	mov	r5, r1
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5492:	b133      	cbz	r3, d54a2 <_ZNSt8functionIFvvEEaSERKS1_+0x1e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5494:	2202      	movs	r2, #2
   d5496:	4668      	mov	r0, sp
   d5498:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d549a:	68eb      	ldr	r3, [r5, #12]
   d549c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d549e:	68ab      	ldr	r3, [r5, #8]
   d54a0:	9302      	str	r3, [sp, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d54a2:	4621      	mov	r1, r4
   d54a4:	4668      	mov	r0, sp
   d54a6:	f7ff ffb1 	bl	d540c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54aa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d54ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54b0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54b2:	9202      	str	r2, [sp, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54b4:	4668      	mov	r0, sp
   d54b6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54b8:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54ba:	9203      	str	r2, [sp, #12]
   d54bc:	f7fe fe4a 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
      function&
      operator=(const function& __x)
      {
	function(__x).swap(*this);
	return *this;
      }
   d54c0:	4620      	mov	r0, r4
   d54c2:	b005      	add	sp, #20
   d54c4:	bd30      	pop	{r4, r5, pc}
	...

000d54c8 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t>:
void AirQualityWing::measureTimerEvent() {
  this->measurementStart = true;
}

AirQualityWingError_t AirQualityWing::setup(AirQualityWingHandler_t handler, AirQualityWingSettings_t settings)
{
   d54c8:	b082      	sub	sp, #8
   d54ca:	b530      	push	{r4, r5, lr}
   d54cc:	b08b      	sub	sp, #44	; 0x2c
   d54ce:	ad0e      	add	r5, sp, #56	; 0x38
   d54d0:	e885 000c 	stmia.w	r5, {r2, r3}
   d54d4:	4604      	mov	r4, r0

  uint32_t err_code = success;

  // Set the handler
  this->handler_ = handler;
   d54d6:	f7ff ffd5 	bl	d5484 <_ZNSt8functionIFvvEEaSERKS1_>

  // Set the settings
  this->settings_ = settings;
   d54da:	aa0e      	add	r2, sp, #56	; 0x38
   d54dc:	ca07      	ldmia	r2, {r0, r1, r2}
   d54de:	f104 0310 	add.w	r3, r4, #16
   d54e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d54e6:	4b53      	ldr	r3, [pc, #332]	; (d5634 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x16c>)
   d54e8:	9308      	str	r3, [sp, #32]

  // Create timers
  this->measurementTimer = new Timer(this->settings_.interval, [this](void)->void{return measureTimerEvent();});
   d54ea:	201c      	movs	r0, #28
	    _M_manager = &_My_handler::_M_manager;
   d54ec:	4b52      	ldr	r3, [pc, #328]	; (d5638 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x170>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d54ee:	9405      	str	r4, [sp, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d54f0:	9307      	str	r3, [sp, #28]
   d54f2:	f7fe fdd2 	bl	d409a <_Znwj>
   d54f6:	4605      	mov	r5, r0
   d54f8:	b120      	cbz	r0, d5504 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x3c>
   d54fa:	2300      	movs	r3, #0
   d54fc:	aa05      	add	r2, sp, #20
   d54fe:	6921      	ldr	r1, [r4, #16]
   d5500:	f7ff ff94 	bl	d542c <_ZN5TimerC1EjSt8functionIFvvEEb>
   d5504:	65e5      	str	r5, [r4, #92]	; 0x5c
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5506:	a805      	add	r0, sp, #20
   d5508:	f7fe fe24 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d550c:	4b4b      	ldr	r3, [pc, #300]	; (d563c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x174>)
   d550e:	9308      	str	r3, [sp, #32]
  this->hpmaTimer = new Timer(HPMA_TIMEOUT_MS, [this](void)->void{return hpmaTimerEvent();}, true); // One shot enabled.
   d5510:	201c      	movs	r0, #28
	    _M_manager = &_My_handler::_M_manager;
   d5512:	4b4b      	ldr	r3, [pc, #300]	; (d5640 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x178>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5514:	9405      	str	r4, [sp, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5516:	9307      	str	r3, [sp, #28]
   d5518:	f7fe fdbf 	bl	d409a <_Znwj>
   d551c:	4605      	mov	r5, r0
   d551e:	b128      	cbz	r0, d552c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x64>
   d5520:	2301      	movs	r3, #1
   d5522:	aa05      	add	r2, sp, #20
   d5524:	f242 7110 	movw	r1, #10000	; 0x2710
   d5528:	f7ff ff80 	bl	d542c <_ZN5TimerC1EjSt8functionIFvvEEb>
   d552c:	6625      	str	r5, [r4, #96]	; 0x60
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d552e:	a805      	add	r0, sp, #20
   d5530:	f7fe fe10 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

  // Reset variables
  this->measurementStart = false;
   d5534:	2300      	movs	r3, #0
   d5536:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  this->measurementComplete = false;
   d553a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
  this->hpmaMeasurementComplete = false;
   d553e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
  this->hpmaError = false;
   d5542:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
  // bsec.updateSubscription(sensorList, 7, BSEC_SAMPLE_RATE_LP); //BSEC_SAMPLE_RATE_LP
  // checkIaqSensorStatus();
  // #endif

  // Has the Si7021 init it
  if( this->settings_.hasSi7021 ) {
   d5546:	7da3      	ldrb	r3, [r4, #22]
   d5548:	b91b      	cbnz	r3, d5552 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x8a>
    if( err_code != success ) return si7021_error;
  }


  // Has the CCS811 init it
  if( this->settings_.hasCCS811 ) {
   d554a:	7d63      	ldrb	r3, [r4, #21]
   d554c:	2b00      	cmp	r3, #0
   d554e:	d04c      	beq.n	d55ea <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x122>
   d5550:	e007      	b.n	d5562 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x9a>
  // #endif

  // Has the Si7021 init it
  if( this->settings_.hasSi7021 ) {
    // Init Si7021
    uint32_t err_code = si7021.setup();
   d5552:	f104 001c 	add.w	r0, r4, #28
   d5556:	f7ff f850 	bl	d45fa <_ZN6Si70215setupEv>
    if( err_code != success ) return si7021_error;
   d555a:	2800      	cmp	r0, #0
   d555c:	d0f5      	beq.n	d554a <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x82>
   d555e:	2003      	movs	r0, #3
   d5560:	e062      	b.n	d5628 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x160>
    ccs811_init_t ccs811_init = {
      this->settings_.ccs811Address,
      this->settings_.ccs811IntPin,
      this->settings_.ccs811RstPin,
      this->settings_.ccs811WakePin
    };
   d5562:	7de3      	ldrb	r3, [r4, #23]
   d5564:	f88d 3010 	strb.w	r3, [sp, #16]
   d5568:	7e23      	ldrb	r3, [r4, #24]
   d556a:	f88d 3011 	strb.w	r3, [sp, #17]

    // Init the TVOC & C02 sensor
    err_code = ccs811.setup(&ccs811_init);
   d556e:	f104 051d 	add.w	r5, r4, #29
    ccs811_init_t ccs811_init = {
      this->settings_.ccs811Address,
      this->settings_.ccs811IntPin,
      this->settings_.ccs811RstPin,
      this->settings_.ccs811WakePin
    };
   d5572:	7e63      	ldrb	r3, [r4, #25]
   d5574:	f88d 3012 	strb.w	r3, [sp, #18]

    // Init the TVOC & C02 sensor
    err_code = ccs811.setup(&ccs811_init);
   d5578:	a904      	add	r1, sp, #16
    ccs811_init_t ccs811_init = {
      this->settings_.ccs811Address,
      this->settings_.ccs811IntPin,
      this->settings_.ccs811RstPin,
      this->settings_.ccs811WakePin
    };
   d557a:	7ea3      	ldrb	r3, [r4, #26]
   d557c:	f88d 3013 	strb.w	r3, [sp, #19]

    // Init the TVOC & C02 sensor
    err_code = ccs811.setup(&ccs811_init);
   d5580:	4628      	mov	r0, r5
   d5582:	f7ff f8f1 	bl	d4768 <_ZN6CCS8115setupEP13ccs811_init_t>
    if( err_code != success ) return ccs811_error;
   d5586:	b108      	cbz	r0, d558c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0xc4>
   d5588:	2002      	movs	r0, #2
   d558a:	e04d      	b.n	d5628 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x160>
        .minor = 0,
        .trivial = 1
      },
      .data = CCS811_FW_App_v2_0_1_bin,
      .size = CCS811_FW_App_v2_0_1_bin_len
    };
   d558c:	2302      	movs	r3, #2
   d558e:	9005      	str	r0, [sp, #20]
   d5590:	f88d 3014 	strb.w	r3, [sp, #20]
   d5594:	2301      	movs	r3, #1
   d5596:	f88d 3016 	strb.w	r3, [sp, #22]
   d559a:	4b2a      	ldr	r3, [pc, #168]	; (d5644 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x17c>)
   d559c:	9306      	str	r3, [sp, #24]
   d559e:	4b2a      	ldr	r3, [pc, #168]	; (d5648 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x180>)

      // Get the version and print it
    ccs811_app_ver_t version;
    ccs811.get_app_version(&version);
   d55a0:	a903      	add	r1, sp, #12
        .minor = 0,
        .trivial = 1
      },
      .data = CCS811_FW_App_v2_0_1_bin,
      .size = CCS811_FW_App_v2_0_1_bin_len
    };
   d55a2:	681b      	ldr	r3, [r3, #0]
   d55a4:	9307      	str	r3, [sp, #28]

      // Get the version and print it
    ccs811_app_ver_t version;
    ccs811.get_app_version(&version);
   d55a6:	4628      	mov	r0, r5
   d55a8:	f7ff fa3d 	bl	d4a26 <_ZN6CCS81115get_app_versionEP16ccs811_app_ver_t>

    Log.trace("ccs811 ver %x.%d.%d\n", version.major, version.minor, version.trivial); // TODO: logger
   d55ac:	f89d 100e 	ldrb.w	r1, [sp, #14]
   d55b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d55b4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d55b8:	9100      	str	r1, [sp, #0]
   d55ba:	4824      	ldr	r0, [pc, #144]	; (d564c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x184>)
   d55bc:	4924      	ldr	r1, [pc, #144]	; (d5650 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x188>)
   d55be:	f7fe fddc 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>

    // Compare and update if need be
    // TODO: relocate this?
    err_code = ccs811.update_app(&update);
   d55c2:	a905      	add	r1, sp, #20
   d55c4:	4628      	mov	r0, r5
   d55c6:	f7ff fa61 	bl	d4a8c <_ZN6CCS81110update_appEPK19ccs811_app_update_t>
    if( err_code == CCS811_NO_UPDATE_NEEDED ) {
   d55ca:	2805      	cmp	r0, #5

    Log.trace("ccs811 ver %x.%d.%d\n", version.major, version.minor, version.trivial); // TODO: logger

    // Compare and update if need be
    // TODO: relocate this?
    err_code = ccs811.update_app(&update);
   d55cc:	4602      	mov	r2, r0
    if( err_code == CCS811_NO_UPDATE_NEEDED ) {
   d55ce:	d104      	bne.n	d55da <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x112>
      Log.trace("ccs811 no update needed\n");
   d55d0:	4920      	ldr	r1, [pc, #128]	; (d5654 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x18c>)
   d55d2:	481e      	ldr	r0, [pc, #120]	; (d564c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x184>)
   d55d4:	f7fe fdd1 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>
   d55d8:	e004      	b.n	d55e4 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x11c>
    } else if  ( err_code != 0 ) {
   d55da:	b118      	cbz	r0, d55e4 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x11c>
      Log.trace("ccs811 update err %d\n", (int)err_code);
   d55dc:	491e      	ldr	r1, [pc, #120]	; (d5658 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x190>)
   d55de:	481b      	ldr	r0, [pc, #108]	; (d564c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x184>)
   d55e0:	f7fe fdcb 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>
    }

    // Restore the baseline
    ccs811.restore_baseline();
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7ff f9aa 	bl	d493e <_ZN6CCS81116restore_baselineEv>
  }

  // Has the HPMA115 init it
  if( this->settings_.hasHPMA115 ) {
   d55ea:	7d20      	ldrb	r0, [r4, #20]
   d55ec:	b1e0      	cbz	r0, d5628 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x160>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55ee:	4b1b      	ldr	r3, [pc, #108]	; (d565c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x194>)
   d55f0:	9308      	str	r3, [sp, #32]
	    _M_manager = &_My_handler::_M_manager;
   d55f2:	4b1b      	ldr	r3, [pc, #108]	; (d5660 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x198>)
   d55f4:	9307      	str	r3, [sp, #28]
      [this](void)->void{return hpmaEvent();},
      this->settings_.hpma115IntPin
    };

    // Init HPM115 sensor
    err_code = hpma115.setup(&hpma115_init);
   d55f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  if( this->settings_.hasHPMA115 ) {
    // Setup
    hpma115_init_t hpma115_init = {
      [this](void)->void{return hpmaEvent();},
      this->settings_.hpma115IntPin
    };
   d55fa:	7ee3      	ldrb	r3, [r4, #27]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d55fc:	9405      	str	r4, [sp, #20]

    // Init HPM115 sensor
    err_code = hpma115.setup(&hpma115_init);
   d55fe:	a905      	add	r1, sp, #20
  if( this->settings_.hasHPMA115 ) {
    // Setup
    hpma115_init_t hpma115_init = {
      [this](void)->void{return hpmaEvent();},
      this->settings_.hpma115IntPin
    };
   d5600:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    // Init HPM115 sensor
    err_code = hpma115.setup(&hpma115_init);
   d5604:	f7ff fb43 	bl	d4c8e <_ZN7HPMA1155setupEP14hpma115_init_t>
    if (err_code != HPMA115_SUCCESS) {
   d5608:	4604      	mov	r4, r0
   d560a:	b148      	cbz	r0, d5620 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x158>
      Log.trace("hpma115 enable err %d\n", (int)err_code);
   d560c:	4602      	mov	r2, r0
   d560e:	4915      	ldr	r1, [pc, #84]	; (d5664 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x19c>)
   d5610:	480e      	ldr	r0, [pc, #56]	; (d564c <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x184>)
   d5612:	f7fe fdb2 	bl	d417a <_ZNK5spark6Logger5traceEPKcz>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5616:	a805      	add	r0, sp, #20
   d5618:	f7fe fd9c 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
      return hpma115_error;
   d561c:	2001      	movs	r0, #1
   d561e:	e003      	b.n	d5628 <_ZN14AirQualityWing5setupESt8functionIFvvEE24AirQualityWingSettings_t+0x160>
   d5620:	a805      	add	r0, sp, #20
   d5622:	f7fe fd97 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
    }
  }

  return success;
   d5626:	4620      	mov	r0, r4
}
   d5628:	b00b      	add	sp, #44	; 0x2c
   d562a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   d562e:	b002      	add	sp, #8
   d5630:	4770      	bx	lr
   d5632:	bf00      	nop
   d5634:	000d4ea5 	.word	0x000d4ea5
   d5638:	000d4eaf 	.word	0x000d4eaf
   d563c:	000d4ec7 	.word	0x000d4ec7
   d5640:	000d4ed5 	.word	0x000d4ed5
   d5644:	2003cdd8 	.word	0x2003cdd8
   d5648:	2003e1d0 	.word	0x2003e1d0
   d564c:	2003e34c 	.word	0x2003e34c
   d5650:	000d9575 	.word	0x000d9575
   d5654:	000d958a 	.word	0x000d958a
   d5658:	000d95a3 	.word	0x000d95a3
   d565c:	000d4eed 	.word	0x000d4eed
   d5660:	000d4ef7 	.word	0x000d4ef7
   d5664:	000d95b9 	.word	0x000d95b9

000d5668 <_GLOBAL__sub_I_CCS811_FW_App_v2_0_1_bin>:
   d5668:	f000 b814 	b.w	d5694 <HAL_Pin_Map>

000d566c <_GLOBAL__sub_I__Z18crc8_dallas_littlePht>:
   d566c:	f000 b812 	b.w	d5694 <HAL_Pin_Map>

000d5670 <_GLOBAL__sub_I__ZN4Bsec7wireObjE>:
   d5670:	f000 b810 	b.w	d5694 <HAL_Pin_Map>

000d5674 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <netdb_freeaddrinfo+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	689b      	ldr	r3, [r3, #8]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030268 	.word	0x00030268

000d5684 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <netdb_getaddrinfo+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	68db      	ldr	r3, [r3, #12]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030268 	.word	0x00030268

000d5694 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_Pin_Map+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	681b      	ldr	r3, [r3, #0]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003022c 	.word	0x0003022c

000d56a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_Pin_Mode+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	689b      	ldr	r3, [r3, #8]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003022c 	.word	0x0003022c

000d56b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_Get_Pin_Mode+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	68db      	ldr	r3, [r3, #12]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003022c 	.word	0x0003022c

000d56c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_GPIO_Write+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	691b      	ldr	r3, [r3, #16]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003022c 	.word	0x0003022c

000d56d4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_Interrupts_Attach+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	699b      	ldr	r3, [r3, #24]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003022c 	.word	0x0003022c

000d56e4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_Interrupts_Detach+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	69db      	ldr	r3, [r3, #28]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003022c 	.word	0x0003022c

000d56f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_SPI_Init+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	69db      	ldr	r3, [r3, #28]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030230 	.word	0x00030230

000d5704 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_SPI_Is_Enabled+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6a1b      	ldr	r3, [r3, #32]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030230 	.word	0x00030230

000d5714 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_RNG_GetRandomNumber+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	685b      	ldr	r3, [r3, #4]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030218 	.word	0x00030218

000d5724 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_Delay_Microseconds+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	68db      	ldr	r3, [r3, #12]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030218 	.word	0x00030218

000d5734 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	695b      	ldr	r3, [r3, #20]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030218 	.word	0x00030218

000d5744 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_EEPROM_Init+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030218 	.word	0x00030218

000d5754 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_EEPROM_Get+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030218 	.word	0x00030218

000d5764 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <os_thread_is_current+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	689b      	ldr	r3, [r3, #8]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030248 	.word	0x00030248

000d5774 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <os_thread_yield+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	68db      	ldr	r3, [r3, #12]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030248 	.word	0x00030248

000d5784 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <os_thread_join+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	691b      	ldr	r3, [r3, #16]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030248 	.word	0x00030248

000d5794 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <os_thread_cleanup+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	695b      	ldr	r3, [r3, #20]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030248 	.word	0x00030248

000d57a4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <os_thread_scheduling+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	69db      	ldr	r3, [r3, #28]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030248 	.word	0x00030248

000d57b4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <os_timer_create+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6a1b      	ldr	r3, [r3, #32]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030248 	.word	0x00030248

000d57c4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <os_timer_destroy+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030248 	.word	0x00030248

000d57d4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <os_timer_get_id+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030248 	.word	0x00030248

000d57e4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <os_timer_change+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030248 	.word	0x00030248

000d57f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <os_mutex_recursive_create+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030248 	.word	0x00030248

000d5804 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <os_mutex_recursive_destroy+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030248 	.word	0x00030248

000d5814 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <os_mutex_recursive_lock+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030248 	.word	0x00030248

000d5824 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <os_mutex_recursive_unlock+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030248 	.word	0x00030248

000d5834 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <os_timer_set_id+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030248 	.word	0x00030248

000d5844 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <inet_inet_ntop+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030264 	.word	0x00030264

000d5854 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <HAL_USART_Init+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	681b      	ldr	r3, [r3, #0]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	0003023c 	.word	0x0003023c

000d5864 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <HAL_USART_End+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	689b      	ldr	r3, [r3, #8]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	0003023c 	.word	0x0003023c

000d5874 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <HAL_USART_Write_Data+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	68db      	ldr	r3, [r3, #12]
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	0003023c 	.word	0x0003023c

000d5884 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <HAL_USART_Available_Data+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	691b      	ldr	r3, [r3, #16]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	0003023c 	.word	0x0003023c

000d5894 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <HAL_USART_Read_Data+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	695b      	ldr	r3, [r3, #20]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	0003023c 	.word	0x0003023c

000d58a4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <HAL_USART_Peek_Data+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	699b      	ldr	r3, [r3, #24]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	0003023c 	.word	0x0003023c

000d58b4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <HAL_USART_Flush_Data+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	69db      	ldr	r3, [r3, #28]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	0003023c 	.word	0x0003023c

000d58c4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <HAL_USART_Is_Enabled+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	6a1b      	ldr	r3, [r3, #32]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003023c 	.word	0x0003023c

000d58d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <HAL_USART_Available_Data_For_Write+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	0003023c 	.word	0x0003023c

000d58e4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <HAL_USART_BeginConfig+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	0003023c 	.word	0x0003023c

000d58f4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <HAL_I2C_Set_Speed+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	681b      	ldr	r3, [r3, #0]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030228 	.word	0x00030228

000d5904 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_I2C_Begin+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	68db      	ldr	r3, [r3, #12]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030228 	.word	0x00030228

000d5914 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_I2C_Begin_Transmission+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	699b      	ldr	r3, [r3, #24]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030228 	.word	0x00030228

000d5924 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <HAL_I2C_End_Transmission+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	69db      	ldr	r3, [r3, #28]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030228 	.word	0x00030228

000d5934 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <HAL_I2C_Write_Data+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6a1b      	ldr	r3, [r3, #32]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030228 	.word	0x00030228

000d5944 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <HAL_I2C_Available_Data+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030228 	.word	0x00030228

000d5954 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <HAL_I2C_Read_Data+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030228 	.word	0x00030228

000d5964 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <HAL_I2C_Peek_Data+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030228 	.word	0x00030228

000d5974 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <HAL_I2C_Flush_Data+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030228 	.word	0x00030228

000d5984 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <HAL_I2C_Is_Enabled+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030228 	.word	0x00030228

000d5994 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <HAL_I2C_Init+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030228 	.word	0x00030228

000d59a4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <HAL_I2C_Request_Data_Ex+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030228 	.word	0x00030228

000d59b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <HAL_USB_USART_Init+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	681b      	ldr	r3, [r3, #0]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003024c 	.word	0x0003024c

000d59c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <HAL_USB_USART_Begin+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	685b      	ldr	r3, [r3, #4]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003024c 	.word	0x0003024c

000d59d4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <HAL_USB_USART_End+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	689b      	ldr	r3, [r3, #8]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003024c 	.word	0x0003024c

000d59e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <HAL_USB_USART_Available_Data+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	691b      	ldr	r3, [r3, #16]
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	0003024c 	.word	0x0003024c

000d59f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	695b      	ldr	r3, [r3, #20]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	0003024c 	.word	0x0003024c

000d5a04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <HAL_USB_USART_Receive_Data+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	699b      	ldr	r3, [r3, #24]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	0003024c 	.word	0x0003024c

000d5a14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <HAL_USB_USART_Send_Data+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	69db      	ldr	r3, [r3, #28]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	0003024c 	.word	0x0003024c

000d5a24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <HAL_USB_USART_Flush_Data+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	6a1b      	ldr	r3, [r3, #32]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	0003024c 	.word	0x0003024c

000d5a34 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <panic_+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030260 	.word	0x00030260

000d5a44 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <log_message_v+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030260 	.word	0x00030260

000d5a54 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <log_level_name+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030260 	.word	0x00030260

000d5a64 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <log_set_callbacks+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030260 	.word	0x00030260

000d5a74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <set_system_mode+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	685b      	ldr	r3, [r3, #4]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030220 	.word	0x00030220

000d5a84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <system_delay_ms+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	695b      	ldr	r3, [r3, #20]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030220 	.word	0x00030220

000d5a94 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <application_thread_current+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030220 	.word	0x00030220

000d5aa4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <application_thread_invoke+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030220 	.word	0x00030220

000d5ab4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b03      	ldr	r3, [pc, #12]	; (d5ac4 <system_ctrl_set_app_request_handler+0x10>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5abe:	9301      	str	r3, [sp, #4]
   d5ac0:	bd08      	pop	{r3, pc}
   d5ac2:	0000      	.short	0x0000
   d5ac4:	00030220 	.word	0x00030220

000d5ac8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b03      	ldr	r3, [pc, #12]	; (d5ad8 <system_ctrl_set_result+0x10>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5ad2:	9301      	str	r3, [sp, #4]
   d5ad4:	bd08      	pop	{r3, pc}
   d5ad6:	0000      	.short	0x0000
   d5ad8:	00030220 	.word	0x00030220

000d5adc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <network_connect+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	685b      	ldr	r3, [r3, #4]
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030240 	.word	0x00030240

000d5aec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <network_connecting+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	689b      	ldr	r3, [r3, #8]
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030240 	.word	0x00030240

000d5afc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <network_disconnect+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	68db      	ldr	r3, [r3, #12]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030240 	.word	0x00030240

000d5b0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <network_ready+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	691b      	ldr	r3, [r3, #16]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030240 	.word	0x00030240

000d5b1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <network_on+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	695b      	ldr	r3, [r3, #20]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	00030240 	.word	0x00030240

000d5b2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <network_off+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	699b      	ldr	r3, [r3, #24]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	00030240 	.word	0x00030240

000d5b3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <network_listen+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	69db      	ldr	r3, [r3, #28]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030240 	.word	0x00030240

000d5b4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <network_listening+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	6a1b      	ldr	r3, [r3, #32]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030240 	.word	0x00030240

000d5b5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <network_set_listen_timeout+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030240 	.word	0x00030240

000d5b6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <network_get_listen_timeout+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030240 	.word	0x00030240

000d5b7c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <spark_function+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	685b      	ldr	r3, [r3, #4]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	00030244 	.word	0x00030244

000d5b8c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <spark_cloud_flag_connected+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	695b      	ldr	r3, [r3, #20]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	00030244 	.word	0x00030244

000d5b9c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <spark_send_event+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	6a1b      	ldr	r3, [r3, #32]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030244 	.word	0x00030244

000d5bac <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <spark_set_connection_property+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030244 	.word	0x00030244

000d5bbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030244 	.word	0x00030244

000d5bcc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <malloc+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	681b      	ldr	r3, [r3, #0]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	0003021c 	.word	0x0003021c

000d5bdc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <free+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	685b      	ldr	r3, [r3, #4]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	0003021c 	.word	0x0003021c

000d5bec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <realloc+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	689b      	ldr	r3, [r3, #8]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	0003021c 	.word	0x0003021c

000d5bfc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <vsnprintf+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003021c 	.word	0x0003021c

000d5c0c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <abort+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003021c 	.word	0x0003021c

000d5c1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <_malloc_r+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003021c 	.word	0x0003021c

000d5c2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c2c:	2200      	movs	r2, #0
   d5c2e:	4611      	mov	r1, r2
   d5c30:	6840      	ldr	r0, [r0, #4]
   d5c32:	f7ff bf8b 	b.w	d5b4c <network_listening>

000d5c36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c36:	2200      	movs	r2, #0
   d5c38:	4611      	mov	r1, r2
   d5c3a:	6840      	ldr	r0, [r0, #4]
   d5c3c:	f7ff bf96 	b.w	d5b6c <network_get_listen_timeout>

000d5c40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c40:	2200      	movs	r2, #0
   d5c42:	6840      	ldr	r0, [r0, #4]
   d5c44:	f7ff bf8a 	b.w	d5b5c <network_set_listen_timeout>

000d5c48 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c48:	2200      	movs	r2, #0
   d5c4a:	f081 0101 	eor.w	r1, r1, #1
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	f7ff bf74 	b.w	d5b3c <network_listen>

000d5c54 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5c54:	2300      	movs	r3, #0
   d5c56:	461a      	mov	r2, r3
   d5c58:	4619      	mov	r1, r3
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	f7ff bf66 	b.w	d5b2c <network_off>

000d5c60 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c60:	2300      	movs	r3, #0
   d5c62:	461a      	mov	r2, r3
   d5c64:	4619      	mov	r1, r3
   d5c66:	6840      	ldr	r0, [r0, #4]
   d5c68:	f7ff bf58 	b.w	d5b1c <network_on>

000d5c6c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	4611      	mov	r1, r2
   d5c70:	6840      	ldr	r0, [r0, #4]
   d5c72:	f7ff bf4b 	b.w	d5b0c <network_ready>

000d5c76 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c76:	2200      	movs	r2, #0
   d5c78:	4611      	mov	r1, r2
   d5c7a:	6840      	ldr	r0, [r0, #4]
   d5c7c:	f7ff bf36 	b.w	d5aec <network_connecting>

000d5c80 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c80:	2200      	movs	r2, #0
   d5c82:	2102      	movs	r1, #2
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	f7ff bf39 	b.w	d5afc <network_disconnect>

000d5c8a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c8a:	2300      	movs	r3, #0
   d5c8c:	461a      	mov	r2, r3
   d5c8e:	6840      	ldr	r0, [r0, #4]
   d5c90:	f7ff bf24 	b.w	d5adc <network_connect>

000d5c94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5c94:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5c96:	2203      	movs	r2, #3
   d5c98:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5c9a:	4a02      	ldr	r2, [pc, #8]	; (d5ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5c9c:	601a      	str	r2, [r3, #0]
   d5c9e:	4770      	bx	lr
   d5ca0:	2003e300 	.word	0x2003e300
   d5ca4:	000d95d8 	.word	0x000d95d8

000d5ca8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5ca8:	4770      	bx	lr

000d5caa <_ZN8SPIClassD0Ev>:
   d5caa:	b510      	push	{r4, lr}
   d5cac:	210c      	movs	r1, #12
   d5cae:	4604      	mov	r4, r0
   d5cb0:	f002 fc6a 	bl	d8588 <_ZdlPvj>
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	bd10      	pop	{r4, pc}

000d5cb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5cb8:	b510      	push	{r4, lr}
   d5cba:	4b05      	ldr	r3, [pc, #20]	; (d5cd0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5cbc:	6003      	str	r3, [r0, #0]
   d5cbe:	4604      	mov	r4, r0
{
    _spi = spi;
   d5cc0:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5cc2:	4608      	mov	r0, r1
   d5cc4:	f7ff fd16 	bl	d56f4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5cc8:	2300      	movs	r3, #0
   d5cca:	60a3      	str	r3, [r4, #8]
}
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd10      	pop	{r4, pc}
   d5cd0:	000d960c 	.word	0x000d960c

000d5cd4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5cd4:	7900      	ldrb	r0, [r0, #4]
   d5cd6:	f7ff bd15 	b.w	d5704 <HAL_SPI_Is_Enabled>

000d5cda <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5cda:	b510      	push	{r4, lr}
   d5cdc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5cde:	6800      	ldr	r0, [r0, #0]
   d5ce0:	b118      	cbz	r0, d5cea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5ce2:	f7ff ff7b 	bl	d5bdc <free>
            wakeupSource_ = nullptr;
   d5ce6:	2300      	movs	r3, #0
   d5ce8:	6023      	str	r3, [r4, #0]
   d5cea:	bd10      	pop	{r4, pc}

000d5cec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5cec:	b510      	push	{r4, lr}
   d5cee:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5cf0:	f7ff fff3 	bl	d5cda <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	bd10      	pop	{r4, pc}

000d5cf8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5cf8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5cfa:	4c09      	ldr	r4, [pc, #36]	; (d5d20 <_GLOBAL__sub_I_System+0x28>)
   d5cfc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d02:	6020      	str	r0, [r4, #0]
   d5d04:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d06:	71a0      	strb	r0, [r4, #6]
   d5d08:	8120      	strh	r0, [r4, #8]
   d5d0a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d0c:	f7ff feb2 	bl	d5a74 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5d10:	4620      	mov	r0, r4
   d5d12:	4a04      	ldr	r2, [pc, #16]	; (d5d24 <_GLOBAL__sub_I_System+0x2c>)
   d5d14:	4904      	ldr	r1, [pc, #16]	; (d5d28 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5d1a:	f002 bc27 	b.w	d856c <__aeabi_atexit>
   d5d1e:	bf00      	nop
   d5d20:	2003e308 	.word	0x2003e308
   d5d24:	2003e248 	.word	0x2003e248
   d5d28:	000d5ced 	.word	0x000d5ced

000d5d2c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5d2c:	2300      	movs	r3, #0
   d5d2e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5d30:	6043      	str	r3, [r0, #4]
	len = 0;
   d5d32:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5d34:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5d36:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5d38:	680c      	ldr	r4, [r1, #0]
   d5d3a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5d3c:	684c      	ldr	r4, [r1, #4]
   d5d3e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5d40:	688c      	ldr	r4, [r1, #8]
   d5d42:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5d44:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5d46:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5d48:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5d4a:	bd10      	pop	{r4, pc}

000d5d4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d4c:	b510      	push	{r4, lr}
   d5d4e:	4604      	mov	r4, r0
{
	free(buffer);
   d5d50:	6800      	ldr	r0, [r0, #0]
   d5d52:	f7ff ff43 	bl	d5bdc <free>
}
   d5d56:	4620      	mov	r0, r4
   d5d58:	bd10      	pop	{r4, pc}

000d5d5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d5a:	b510      	push	{r4, lr}
   d5d5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d5e:	6800      	ldr	r0, [r0, #0]
   d5d60:	b108      	cbz	r0, d5d66 <_ZN6String10invalidateEv+0xc>
   d5d62:	f7ff ff3b 	bl	d5bdc <free>
	buffer = NULL;
   d5d66:	2300      	movs	r3, #0
   d5d68:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5d6a:	60a3      	str	r3, [r4, #8]
   d5d6c:	6063      	str	r3, [r4, #4]
   d5d6e:	bd10      	pop	{r4, pc}

000d5d70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5d70:	b538      	push	{r3, r4, r5, lr}
   d5d72:	4604      	mov	r4, r0
   d5d74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5d76:	6800      	ldr	r0, [r0, #0]
   d5d78:	3101      	adds	r1, #1
   d5d7a:	f7ff ff37 	bl	d5bec <realloc>
	if (newbuffer) {
   d5d7e:	b110      	cbz	r0, d5d86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d80:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5d84:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d86:	bd38      	pop	{r3, r4, r5, pc}

000d5d88 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5d8a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5d8e:	b113      	cbz	r3, d5d96 <_ZN6String7reserveEj+0xe>
   d5d90:	6843      	ldr	r3, [r0, #4]
   d5d92:	428b      	cmp	r3, r1
   d5d94:	d207      	bcs.n	d5da6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff ffea 	bl	d5d70 <_ZN6String12changeBufferEj>
   d5d9c:	b120      	cbz	r0, d5da8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5d9e:	68a3      	ldr	r3, [r4, #8]
   d5da0:	b90b      	cbnz	r3, d5da6 <_ZN6String7reserveEj+0x1e>
   d5da2:	6822      	ldr	r2, [r4, #0]
   d5da4:	7013      	strb	r3, [r2, #0]
   d5da6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5da8:	bd10      	pop	{r4, pc}

000d5daa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5daa:	b570      	push	{r4, r5, r6, lr}
   d5dac:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5dae:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5db0:	4604      	mov	r4, r0
   d5db2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5db4:	f7ff ffe8 	bl	d5d88 <_ZN6String7reserveEj>
   d5db8:	b918      	cbnz	r0, d5dc2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5dba:	4620      	mov	r0, r4
   d5dbc:	f7ff ffcd 	bl	d5d5a <_ZN6String10invalidateEv>
		return *this;
   d5dc0:	e009      	b.n	d5dd6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5dc2:	462a      	mov	r2, r5
   d5dc4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5dc6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5dc8:	6820      	ldr	r0, [r4, #0]
   d5dca:	f003 f967 	bl	d909c <memcpy>
	buffer[len] = 0;
   d5dce:	6822      	ldr	r2, [r4, #0]
   d5dd0:	68a3      	ldr	r3, [r4, #8]
   d5dd2:	2100      	movs	r1, #0
   d5dd4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	bd70      	pop	{r4, r5, r6, pc}

000d5dda <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5dda:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ddc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5dde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5de0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5de2:	6043      	str	r3, [r0, #4]
	len = 0;
   d5de4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5de6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5de8:	460d      	mov	r5, r1
   d5dea:	b139      	cbz	r1, d5dfc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5dec:	4608      	mov	r0, r1
   d5dee:	f003 f9f0 	bl	d91d2 <strlen>
   d5df2:	4629      	mov	r1, r5
   d5df4:	4602      	mov	r2, r0
   d5df6:	4620      	mov	r0, r4
   d5df8:	f7ff ffd7 	bl	d5daa <_ZN6String4copyEPKcj>
}
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	bd38      	pop	{r3, r4, r5, pc}

000d5e00 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5e00:	b538      	push	{r3, r4, r5, lr}
   d5e02:	4605      	mov	r5, r0
	if (buffer) {
   d5e04:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5e06:	460c      	mov	r4, r1
	if (buffer) {
   d5e08:	b160      	cbz	r0, d5e24 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5e0a:	686a      	ldr	r2, [r5, #4]
   d5e0c:	688b      	ldr	r3, [r1, #8]
   d5e0e:	429a      	cmp	r2, r3
   d5e10:	d306      	bcc.n	d5e20 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5e12:	6809      	ldr	r1, [r1, #0]
   d5e14:	f003 f9ba 	bl	d918c <strcpy>
			len = rhs.len;
   d5e18:	68a3      	ldr	r3, [r4, #8]
   d5e1a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	e00a      	b.n	d5e36 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5e20:	f7ff fedc 	bl	d5bdc <free>
		}
	}
	buffer = rhs.buffer;
   d5e24:	6823      	ldr	r3, [r4, #0]
   d5e26:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5e28:	6863      	ldr	r3, [r4, #4]
   d5e2a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5e2c:	68a3      	ldr	r3, [r4, #8]
   d5e2e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5e30:	2300      	movs	r3, #0
   d5e32:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5e34:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5e36:	60a3      	str	r3, [r4, #8]
   d5e38:	bd38      	pop	{r3, r4, r5, pc}

000d5e3a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5e3a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5e3c:	b510      	push	{r4, lr}
   d5e3e:	460b      	mov	r3, r1
   d5e40:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5e42:	d007      	beq.n	d5e54 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5e44:	6809      	ldr	r1, [r1, #0]
   d5e46:	b119      	cbz	r1, d5e50 <_ZN6StringaSERKS_+0x16>
   d5e48:	689a      	ldr	r2, [r3, #8]
   d5e4a:	f7ff ffae 	bl	d5daa <_ZN6String4copyEPKcj>
   d5e4e:	e001      	b.n	d5e54 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5e50:	f7ff ff83 	bl	d5d5a <_ZN6String10invalidateEv>

	return *this;
}
   d5e54:	4620      	mov	r0, r4
   d5e56:	bd10      	pop	{r4, pc}

000d5e58 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e58:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e5a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e5c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e5e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e60:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e62:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e64:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5e66:	f7ff ffe8 	bl	d5e3a <_ZN6StringaSERKS_>
}
   d5e6a:	4620      	mov	r0, r4
   d5e6c:	bd10      	pop	{r4, pc}

000d5e6e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5e6e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5e70:	b510      	push	{r4, lr}
   d5e72:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5e74:	d001      	beq.n	d5e7a <_ZN6StringaSEOS_+0xc>
   d5e76:	f7ff ffc3 	bl	d5e00 <_ZN6String4moveERS_>
	return *this;
}
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	bd10      	pop	{r4, pc}

000d5e7e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5e7e:	b570      	push	{r4, r5, r6, lr}
   d5e80:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5e82:	460e      	mov	r6, r1
   d5e84:	b909      	cbnz	r1, d5e8a <_ZN6String6concatEPKcj+0xc>
   d5e86:	2000      	movs	r0, #0
   d5e88:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5e8a:	b16a      	cbz	r2, d5ea8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5e8c:	6883      	ldr	r3, [r0, #8]
   d5e8e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5e90:	4629      	mov	r1, r5
   d5e92:	f7ff ff79 	bl	d5d88 <_ZN6String7reserveEj>
   d5e96:	2800      	cmp	r0, #0
   d5e98:	d0f5      	beq.n	d5e86 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5e9a:	6820      	ldr	r0, [r4, #0]
   d5e9c:	68a3      	ldr	r3, [r4, #8]
   d5e9e:	4631      	mov	r1, r6
   d5ea0:	4418      	add	r0, r3
   d5ea2:	f003 f973 	bl	d918c <strcpy>
	len = newlen;
   d5ea6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5ea8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5eaa:	bd70      	pop	{r4, r5, r6, pc}

000d5eac <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5eac:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5eae:	688a      	ldr	r2, [r1, #8]
   d5eb0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5eb2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5eb4:	f7ff ffe3 	bl	d5e7e <_ZN6String6concatEPKcj>
   d5eb8:	b910      	cbnz	r0, d5ec0 <_ZplRK15StringSumHelperRK6String+0x14>
   d5eba:	4620      	mov	r0, r4
   d5ebc:	f7ff ff4d 	bl	d5d5a <_ZN6String10invalidateEv>
	return a;
}
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	bd10      	pop	{r4, pc}

000d5ec4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5ec4:	b538      	push	{r3, r4, r5, lr}
   d5ec6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5ec8:	460d      	mov	r5, r1
   d5eca:	b141      	cbz	r1, d5ede <_ZplRK15StringSumHelperPKc+0x1a>
   d5ecc:	4608      	mov	r0, r1
   d5ece:	f003 f980 	bl	d91d2 <strlen>
   d5ed2:	4629      	mov	r1, r5
   d5ed4:	4602      	mov	r2, r0
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	f7ff ffd1 	bl	d5e7e <_ZN6String6concatEPKcj>
   d5edc:	b910      	cbnz	r0, d5ee4 <_ZplRK15StringSumHelperPKc+0x20>
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ff3b 	bl	d5d5a <_ZN6String10invalidateEv>
	return a;
}
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	bd38      	pop	{r3, r4, r5, pc}

000d5ee8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5ee8:	6800      	ldr	r0, [r0, #0]
   d5eea:	b108      	cbz	r0, d5ef0 <_ZNK6String5toIntEv+0x8>
   d5eec:	f003 b8c4 	b.w	d9078 <atol>
	return 0;
}
   d5ef0:	4770      	bx	lr
	...

000d5ef4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5ef4:	b40e      	push	{r1, r2, r3}
   d5ef6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d5ef8:	ac09      	add	r4, sp, #36	; 0x24
   d5efa:	4605      	mov	r5, r0
   d5efc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d5f00:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5f02:	4623      	mov	r3, r4
   d5f04:	463a      	mov	r2, r7
   d5f06:	2105      	movs	r1, #5
   d5f08:	a802      	add	r0, sp, #8
   d5f0a:	f7ff fe77 	bl	d5bfc <vsnprintf>
    va_end(marker);

    String result;
   d5f0e:	490c      	ldr	r1, [pc, #48]	; (d5f40 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5f10:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d5f12:	4628      	mov	r0, r5
   d5f14:	f7ff ff61 	bl	d5dda <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d5f18:	4631      	mov	r1, r6
   d5f1a:	4628      	mov	r0, r5
   d5f1c:	f7ff ff34 	bl	d5d88 <_ZN6String7reserveEj>
    if (result.buffer) {
   d5f20:	6828      	ldr	r0, [r5, #0]
   d5f22:	b130      	cbz	r0, d5f32 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5f24:	4623      	mov	r3, r4
   d5f26:	463a      	mov	r2, r7
   d5f28:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d5f2a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5f2c:	f7ff fe66 	bl	d5bfc <vsnprintf>
        va_end(marker);
        result.len = n;
   d5f30:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d5f32:	4628      	mov	r0, r5
   d5f34:	b004      	add	sp, #16
   d5f36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5f3a:	b003      	add	sp, #12
   d5f3c:	4770      	bx	lr
   d5f3e:	bf00      	nop
   d5f40:	000d96e4 	.word	0x000d96e4

000d5f44 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f44:	b510      	push	{r4, lr}
   d5f46:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f48:	6800      	ldr	r0, [r0, #0]
   d5f4a:	b108      	cbz	r0, d5f50 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f4c:	f7ff fc5a 	bl	d5804 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f54:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f56:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f58:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f5a:	689b      	ldr	r3, [r3, #8]
   d5f5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f5e:	68a3      	ldr	r3, [r4, #8]
   d5f60:	3b01      	subs	r3, #1
   d5f62:	60a3      	str	r3, [r4, #8]
   d5f64:	b92b      	cbnz	r3, d5f72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5f66:	6823      	ldr	r3, [r4, #0]
   d5f68:	4620      	mov	r0, r4
   d5f6a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5f70:	4718      	bx	r3
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5f74:	680b      	ldr	r3, [r1, #0]
   d5f76:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5f78:	b113      	cbz	r3, d5f80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5f7a:	685a      	ldr	r2, [r3, #4]
   d5f7c:	3201      	adds	r2, #1
   d5f7e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5f80:	4770      	bx	lr

000d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5f82:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f84:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5f86:	6803      	ldr	r3, [r0, #0]
   d5f88:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5f8a:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5f8c:	d00c      	beq.n	d5fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5f8e:	b114      	cbz	r4, d5f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5f90:	6863      	ldr	r3, [r4, #4]
   d5f92:	3301      	adds	r3, #1
   d5f94:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5f96:	6828      	ldr	r0, [r5, #0]
   d5f98:	b128      	cbz	r0, d5fa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5f9a:	6843      	ldr	r3, [r0, #4]
   d5f9c:	3b01      	subs	r3, #1
   d5f9e:	6043      	str	r3, [r0, #4]
   d5fa0:	b90b      	cbnz	r3, d5fa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5fa2:	f7ff ffd7 	bl	d5f54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5fa6:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5fa8:	4628      	mov	r0, r5
   d5faa:	bd38      	pop	{r3, r4, r5, pc}

000d5fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5fac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fae:	4c06      	ldr	r4, [pc, #24]	; (d5fc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5fb0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5fb2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fb4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5fb6:	f7ff fc1d 	bl	d57f4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5fba:	4620      	mov	r0, r4
   d5fbc:	4a03      	ldr	r2, [pc, #12]	; (d5fcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5fbe:	4904      	ldr	r1, [pc, #16]	; (d5fd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5fc4:	f002 bad2 	b.w	d856c <__aeabi_atexit>
   d5fc8:	2003e314 	.word	0x2003e314
   d5fcc:	2003e248 	.word	0x2003e248
   d5fd0:	000d5f45 	.word	0x000d5f45

000d5fd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fd6:	4606      	mov	r6, r0
   d5fd8:	460d      	mov	r5, r1
   d5fda:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5fdc:	2400      	movs	r4, #0
  while (size--) {
   d5fde:	42bd      	cmp	r5, r7
   d5fe0:	d00c      	beq.n	d5ffc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5fe2:	6833      	ldr	r3, [r6, #0]
   d5fe4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fe8:	689b      	ldr	r3, [r3, #8]
   d5fea:	4630      	mov	r0, r6
   d5fec:	4798      	blx	r3
     if (chunk>=0)
   d5fee:	2800      	cmp	r0, #0
   d5ff0:	db01      	blt.n	d5ff6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ff2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5ff4:	e7f3      	b.n	d5fde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ff6:	2c00      	cmp	r4, #0
   d5ff8:	bf08      	it	eq
   d5ffa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6000 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6000:	b570      	push	{r4, r5, r6, lr}
   d6002:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6004:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6006:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6008:	b149      	cbz	r1, d601e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d600a:	f003 f8e2 	bl	d91d2 <strlen>
   d600e:	682b      	ldr	r3, [r5, #0]
   d6010:	4602      	mov	r2, r0
   d6012:	4621      	mov	r1, r4
   d6014:	4628      	mov	r0, r5
   d6016:	68db      	ldr	r3, [r3, #12]
    }
   d6018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d601c:	4718      	bx	r3
    }
   d601e:	bd70      	pop	{r4, r5, r6, pc}

000d6020 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6020:	6803      	ldr	r3, [r0, #0]
   d6022:	689b      	ldr	r3, [r3, #8]
   d6024:	4718      	bx	r3

000d6026 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6026:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6028:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d602a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d602c:	f7ff fff8 	bl	d6020 <_ZN5Print5printEc>
  n += print('\n');
   d6030:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6032:	4604      	mov	r4, r0
  n += print('\n');
   d6034:	4628      	mov	r0, r5
   d6036:	f7ff fff3 	bl	d6020 <_ZN5Print5printEc>
  return n;
}
   d603a:	4420      	add	r0, r4
   d603c:	bd38      	pop	{r3, r4, r5, pc}

000d603e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d603e:	b538      	push	{r3, r4, r5, lr}
   d6040:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6042:	f7ff ffdd 	bl	d6000 <_ZN5Print5writeEPKc>
   d6046:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6048:	4628      	mov	r0, r5
   d604a:	f7ff ffec 	bl	d6026 <_ZN5Print7printlnEv>
  return n;
}
   d604e:	4420      	add	r0, r4
   d6050:	bd38      	pop	{r3, r4, r5, pc}

000d6052 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6052:	b530      	push	{r4, r5, lr}
   d6054:	b08b      	sub	sp, #44	; 0x2c
   d6056:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6058:	2100      	movs	r1, #0
   d605a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d605e:	2a01      	cmp	r2, #1
   d6060:	bf98      	it	ls
   d6062:	220a      	movls	r2, #10
   d6064:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6068:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d606c:	fb05 3312 	mls	r3, r5, r2, r3
   d6070:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6074:	2b09      	cmp	r3, #9
   d6076:	bf94      	ite	ls
   d6078:	3330      	addls	r3, #48	; 0x30
   d607a:	3337      	addhi	r3, #55	; 0x37
   d607c:	b2db      	uxtb	r3, r3
   d607e:	4621      	mov	r1, r4
   d6080:	f804 3901 	strb.w	r3, [r4], #-1
   d6084:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6086:	2d00      	cmp	r5, #0
   d6088:	d1ee      	bne.n	d6068 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d608a:	f7ff ffb9 	bl	d6000 <_ZN5Print5writeEPKc>
}
   d608e:	b00b      	add	sp, #44	; 0x2c
   d6090:	bd30      	pop	{r4, r5, pc}

000d6092 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6092:	b40c      	push	{r2, r3}
   d6094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6098:	b087      	sub	sp, #28
   d609a:	af00      	add	r7, sp, #0
   d609c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d60a0:	4605      	mov	r5, r0
   d60a2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d60a6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d60a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d60aa:	4623      	mov	r3, r4
   d60ac:	464a      	mov	r2, r9
   d60ae:	2114      	movs	r1, #20
   d60b0:	1d38      	adds	r0, r7, #4
   d60b2:	f7ff fda3 	bl	d5bfc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d60b6:	2813      	cmp	r0, #19
   d60b8:	d805      	bhi.n	d60c6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60ba:	1d39      	adds	r1, r7, #4
   d60bc:	4628      	mov	r0, r5
   d60be:	f7ff ff9f 	bl	d6000 <_ZN5Print5writeEPKc>
   d60c2:	4604      	mov	r4, r0
   d60c4:	e013      	b.n	d60ee <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d60c6:	f100 0308 	add.w	r3, r0, #8
   d60ca:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d60ce:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d60d0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d60d4:	1c41      	adds	r1, r0, #1
   d60d6:	4623      	mov	r3, r4
   d60d8:	464a      	mov	r2, r9
   d60da:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d60dc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d60de:	f7ff fd8d 	bl	d5bfc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60e2:	4669      	mov	r1, sp
   d60e4:	4628      	mov	r0, r5
   d60e6:	f7ff ff8b 	bl	d6000 <_ZN5Print5writeEPKc>
   d60ea:	4604      	mov	r4, r0
   d60ec:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d60ee:	b11e      	cbz	r6, d60f8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d60f0:	4628      	mov	r0, r5
   d60f2:	f7ff ff98 	bl	d6026 <_ZN5Print7printlnEv>
   d60f6:	4404      	add	r4, r0
    return n;
}
   d60f8:	4620      	mov	r0, r4
   d60fa:	371c      	adds	r7, #28
   d60fc:	46bd      	mov	sp, r7
   d60fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6102:	b002      	add	sp, #8
   d6104:	4770      	bx	lr

000d6106 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6106:	b510      	push	{r4, lr}
   d6108:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d610a:	f7ff fb13 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d610e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6110:	6823      	ldr	r3, [r4, #0]
   d6112:	4620      	mov	r0, r4
   d6114:	695b      	ldr	r3, [r3, #20]
   d6116:	4798      	blx	r3
    if (c >= 0) return c;
   d6118:	2800      	cmp	r0, #0
   d611a:	da08      	bge.n	d612e <_ZN6Stream9timedReadEv+0x28>
   d611c:	f7ff fb0a 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d6120:	68e3      	ldr	r3, [r4, #12]
   d6122:	1ac0      	subs	r0, r0, r3
   d6124:	68a3      	ldr	r3, [r4, #8]
   d6126:	4298      	cmp	r0, r3
   d6128:	d3f2      	bcc.n	d6110 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d612a:	f04f 30ff 	mov.w	r0, #4294967295
}
   d612e:	bd10      	pop	{r4, pc}

000d6130 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6134:	4680      	mov	r8, r0
   d6136:	460d      	mov	r5, r1
   d6138:	188f      	adds	r7, r1, r2
   d613a:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d613c:	42bc      	cmp	r4, r7
   d613e:	eba4 0605 	sub.w	r6, r4, r5
   d6142:	d007      	beq.n	d6154 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d6144:	4640      	mov	r0, r8
   d6146:	f7ff ffde 	bl	d6106 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d614a:	2800      	cmp	r0, #0
   d614c:	db02      	blt.n	d6154 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d614e:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d6152:	e7f3      	b.n	d613c <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d6154:	4630      	mov	r0, r6
   d6156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d615a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d615a:	6880      	ldr	r0, [r0, #8]
   d615c:	6803      	ldr	r3, [r0, #0]
   d615e:	68db      	ldr	r3, [r3, #12]
   d6160:	4718      	bx	r3

000d6162 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6162:	4770      	bx	lr

000d6164 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6164:	b119      	cbz	r1, d616e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6166:	680b      	ldr	r3, [r1, #0]
   d6168:	4608      	mov	r0, r1
   d616a:	685b      	ldr	r3, [r3, #4]
   d616c:	4718      	bx	r3
   d616e:	4770      	bx	lr

000d6170 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6170:	b119      	cbz	r1, d617a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6172:	680b      	ldr	r3, [r1, #0]
   d6174:	4608      	mov	r0, r1
   d6176:	685b      	ldr	r3, [r3, #4]
   d6178:	4718      	bx	r3
   d617a:	4770      	bx	lr

000d617c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d617c:	4770      	bx	lr

000d617e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d617e:	4770      	bx	lr

000d6180 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6180:	4770      	bx	lr

000d6182 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6182:	b538      	push	{r3, r4, r5, lr}
   d6184:	4604      	mov	r4, r0
   d6186:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6188:	6800      	ldr	r0, [r0, #0]
   d618a:	212e      	movs	r1, #46	; 0x2e
   d618c:	f002 ffea 	bl	d9164 <strchrnul>
    size = s - category;
   d6190:	6823      	ldr	r3, [r4, #0]
   d6192:	1ac3      	subs	r3, r0, r3
   d6194:	602b      	str	r3, [r5, #0]
    if (size) {
   d6196:	b123      	cbz	r3, d61a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6198:	7803      	ldrb	r3, [r0, #0]
   d619a:	b103      	cbz	r3, d619e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d619c:	3001      	adds	r0, #1
   d619e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d61a0:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d61a2:	4618      	mov	r0, r3
}
   d61a4:	bd38      	pop	{r3, r4, r5, pc}

000d61a6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d61a6:	b510      	push	{r4, lr}
   d61a8:	210c      	movs	r1, #12
   d61aa:	4604      	mov	r4, r0
   d61ac:	f002 f9ec 	bl	d8588 <_ZdlPvj>
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}

000d61b4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d61b4:	b510      	push	{r4, lr}
   d61b6:	2104      	movs	r1, #4
   d61b8:	4604      	mov	r4, r0
   d61ba:	f002 f9e5 	bl	d8588 <_ZdlPvj>
   d61be:	4620      	mov	r0, r4
   d61c0:	bd10      	pop	{r4, pc}

000d61c2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d61c2:	b510      	push	{r4, lr}
   d61c4:	2104      	movs	r1, #4
   d61c6:	4604      	mov	r4, r0
   d61c8:	f002 f9de 	bl	d8588 <_ZdlPvj>
   d61cc:	4620      	mov	r0, r4
   d61ce:	bd10      	pop	{r4, pc}

000d61d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d61d0:	b538      	push	{r3, r4, r5, lr}
   d61d2:	460c      	mov	r4, r1
   d61d4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d61d6:	f001 fbed 	bl	d79b4 <_Z16_fetch_usbserialv>
   d61da:	4284      	cmp	r4, r0
   d61dc:	d00d      	beq.n	d61fa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d61de:	f001 fcdb 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d61e2:	4284      	cmp	r4, r0
   d61e4:	d105      	bne.n	d61f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d61e6:	f001 fcd7 	bl	d7b98 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d61ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d61ee:	f001 bccc 	b.w	d7b8a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d61f2:	4621      	mov	r1, r4
   d61f4:	4628      	mov	r0, r5
   d61f6:	f7ff ffbb 	bl	d6170 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d61fa:	bd38      	pop	{r3, r4, r5, pc}

000d61fc <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d61fc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d61fe:	f002 ffbb 	bl	d9178 <strcmp>
}
   d6202:	fab0 f080 	clz	r0, r0
   d6206:	0940      	lsrs	r0, r0, #5
   d6208:	bd08      	pop	{r3, pc}

000d620a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d620a:	b538      	push	{r3, r4, r5, lr}
   d620c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d620e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6210:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6212:	f002 ffde 	bl	d91d2 <strlen>
   d6216:	4621      	mov	r1, r4
   d6218:	4602      	mov	r2, r0
   d621a:	4628      	mov	r0, r5
}
   d621c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6220:	f002 b881 	b.w	d8326 <_ZN5spark10JSONWriter5valueEPKcj>

000d6224 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6224:	6800      	ldr	r0, [r0, #0]
   d6226:	f7ff baf5 	b.w	d5814 <os_mutex_recursive_lock>

000d622a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d622a:	b570      	push	{r4, r5, r6, lr}
   d622c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d622e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6230:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6232:	f002 ffce 	bl	d91d2 <strlen>
   d6236:	6823      	ldr	r3, [r4, #0]
   d6238:	4602      	mov	r2, r0
   d623a:	4629      	mov	r1, r5
   d623c:	4620      	mov	r0, r4
   d623e:	68db      	ldr	r3, [r3, #12]
}
   d6240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6244:	4718      	bx	r3

000d6246 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6246:	b513      	push	{r0, r1, r4, lr}
   d6248:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d624a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d624c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6250:	68d4      	ldr	r4, [r2, #12]
   d6252:	4619      	mov	r1, r3
   d6254:	2201      	movs	r2, #1
   d6256:	47a0      	blx	r4
}
   d6258:	b002      	add	sp, #8
   d625a:	bd10      	pop	{r4, pc}

000d625c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6260:	6845      	ldr	r5, [r0, #4]
   d6262:	6807      	ldr	r7, [r0, #0]
   d6264:	b085      	sub	sp, #20
   d6266:	4691      	mov	r9, r2
   d6268:	2214      	movs	r2, #20
   d626a:	4355      	muls	r5, r2
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	10ab      	asrs	r3, r5, #2
   d6270:	4d19      	ldr	r5, [pc, #100]	; (d62d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6272:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6274:	435d      	muls	r5, r3
   d6276:	468b      	mov	fp, r1
   d6278:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d627a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d627c:	2d00      	cmp	r5, #0
   d627e:	9303      	str	r3, [sp, #12]
   d6280:	dd23      	ble.n	d62ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6282:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6284:	106e      	asrs	r6, r5, #1
   d6286:	fb03 f006 	mul.w	r0, r3, r6
   d628a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d628e:	464a      	mov	r2, r9
   d6290:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6294:	5820      	ldr	r0, [r4, r0]
   d6296:	45d1      	cmp	r9, sl
   d6298:	bf28      	it	cs
   d629a:	4652      	movcs	r2, sl
   d629c:	4659      	mov	r1, fp
   d629e:	f002 ffa0 	bl	d91e2 <strncmp>
                if (cmp == 0) {
   d62a2:	9b03      	ldr	r3, [sp, #12]
   d62a4:	b948      	cbnz	r0, d62ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d62a6:	45d1      	cmp	r9, sl
   d62a8:	d103      	bne.n	d62b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d62aa:	9a01      	ldr	r2, [sp, #4]
   d62ac:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d62ae:	4635      	mov	r5, r6
   d62b0:	e7e4      	b.n	d627c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d62b2:	bf8c      	ite	hi
   d62b4:	2001      	movhi	r0, #1
   d62b6:	2000      	movls	r0, #0
   d62b8:	e000      	b.n	d62bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d62ba:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d62bc:	2800      	cmp	r0, #0
   d62be:	d0f6      	beq.n	d62ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d62c0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d62c2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d62c6:	3e01      	subs	r6, #1
   d62c8:	e7f1      	b.n	d62ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d62ca:	1be4      	subs	r4, r4, r7
}
   d62cc:	4802      	ldr	r0, [pc, #8]	; (d62d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d62ce:	10a4      	asrs	r4, r4, #2
}
   d62d0:	4360      	muls	r0, r4
   d62d2:	b005      	add	sp, #20
   d62d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62d8:	cccccccd 	.word	0xcccccccd

000d62dc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d62dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62de:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d62e0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d62e2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d62e4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d62e6:	b313      	cbz	r3, d632e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d62e8:	b309      	cbz	r1, d632e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d62ea:	af04      	add	r7, sp, #16
   d62ec:	2300      	movs	r3, #0
   d62ee:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d62f2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d62f6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d62f8:	4639      	mov	r1, r7
   d62fa:	a801      	add	r0, sp, #4
   d62fc:	f7ff ff41 	bl	d6182 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6300:	4601      	mov	r1, r0
   d6302:	b1a0      	cbz	r0, d632e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6304:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6306:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6308:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff ffa5 	bl	d625c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6312:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6316:	b153      	cbz	r3, d632e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6318:	6823      	ldr	r3, [r4, #0]
   d631a:	2414      	movs	r4, #20
   d631c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6320:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6322:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6326:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6328:	bfa8      	it	ge
   d632a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d632c:	e7e4      	b.n	d62f8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d632e:	4630      	mov	r0, r6
   d6330:	b005      	add	sp, #20
   d6332:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6334 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6334:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6336:	4c09      	ldr	r4, [pc, #36]	; (d635c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6338:	6823      	ldr	r3, [r4, #0]
   d633a:	07db      	lsls	r3, r3, #31
   d633c:	d40b      	bmi.n	d6356 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d633e:	4620      	mov	r0, r4
   d6340:	f7fd febc 	bl	d40bc <__cxa_guard_acquire>
   d6344:	b138      	cbz	r0, d6356 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6346:	4620      	mov	r0, r4
   d6348:	f7fd febd 	bl	d40c6 <__cxa_guard_release>
   d634c:	4a04      	ldr	r2, [pc, #16]	; (d6360 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d634e:	4905      	ldr	r1, [pc, #20]	; (d6364 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6350:	4805      	ldr	r0, [pc, #20]	; (d6368 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6352:	f002 f90b 	bl	d856c <__aeabi_atexit>
    return &factory;
}
   d6356:	4804      	ldr	r0, [pc, #16]	; (d6368 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6358:	bd10      	pop	{r4, pc}
   d635a:	bf00      	nop
   d635c:	2003e318 	.word	0x2003e318
   d6360:	2003e248 	.word	0x2003e248
   d6364:	000d617f 	.word	0x000d617f
   d6368:	2003e1d8 	.word	0x2003e1d8

000d636c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d636c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d636e:	4c09      	ldr	r4, [pc, #36]	; (d6394 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6370:	6823      	ldr	r3, [r4, #0]
   d6372:	07db      	lsls	r3, r3, #31
   d6374:	d40b      	bmi.n	d638e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6376:	4620      	mov	r0, r4
   d6378:	f7fd fea0 	bl	d40bc <__cxa_guard_acquire>
   d637c:	b138      	cbz	r0, d638e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d637e:	4620      	mov	r0, r4
   d6380:	f7fd fea1 	bl	d40c6 <__cxa_guard_release>
   d6384:	4a04      	ldr	r2, [pc, #16]	; (d6398 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6386:	4905      	ldr	r1, [pc, #20]	; (d639c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6388:	4805      	ldr	r0, [pc, #20]	; (d63a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d638a:	f002 f8ef 	bl	d856c <__aeabi_atexit>
    return &factory;
}
   d638e:	4804      	ldr	r0, [pc, #16]	; (d63a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6390:	bd10      	pop	{r4, pc}
   d6392:	bf00      	nop
   d6394:	2003e348 	.word	0x2003e348
   d6398:	2003e248 	.word	0x2003e248
   d639c:	000d617d 	.word	0x000d617d
   d63a0:	2003e1d4 	.word	0x2003e1d4

000d63a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d63a4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d63a6:	2500      	movs	r5, #0
   d63a8:	4604      	mov	r4, r0
   d63aa:	6005      	str	r5, [r0, #0]
   d63ac:	6045      	str	r5, [r0, #4]
   d63ae:	6085      	str	r5, [r0, #8]
   d63b0:	6105      	str	r5, [r0, #16]
   d63b2:	6145      	str	r5, [r0, #20]
   d63b4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d63b6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d63ba:	f7ff fa1b 	bl	d57f4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d63be:	f7ff ffb9 	bl	d6334 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d63c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d63c4:	f7ff ffd2 	bl	d636c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d63c8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d63ca:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d63cc:	4620      	mov	r0, r4
   d63ce:	bd38      	pop	{r3, r4, r5, pc}

000d63d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d63d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d63d2:	4c0a      	ldr	r4, [pc, #40]	; (d63fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   d63d4:	6823      	ldr	r3, [r4, #0]
   d63d6:	07db      	lsls	r3, r3, #31
   d63d8:	d40e      	bmi.n	d63f8 <_ZN5spark10LogManager8instanceEv+0x28>
   d63da:	4620      	mov	r0, r4
   d63dc:	f7fd fe6e 	bl	d40bc <__cxa_guard_acquire>
   d63e0:	b150      	cbz	r0, d63f8 <_ZN5spark10LogManager8instanceEv+0x28>
   d63e2:	4807      	ldr	r0, [pc, #28]	; (d6400 <_ZN5spark10LogManager8instanceEv+0x30>)
   d63e4:	f7ff ffde 	bl	d63a4 <_ZN5spark10LogManagerC1Ev>
   d63e8:	4620      	mov	r0, r4
   d63ea:	f7fd fe6c 	bl	d40c6 <__cxa_guard_release>
   d63ee:	4a05      	ldr	r2, [pc, #20]	; (d6404 <_ZN5spark10LogManager8instanceEv+0x34>)
   d63f0:	4905      	ldr	r1, [pc, #20]	; (d6408 <_ZN5spark10LogManager8instanceEv+0x38>)
   d63f2:	4803      	ldr	r0, [pc, #12]	; (d6400 <_ZN5spark10LogManager8instanceEv+0x30>)
   d63f4:	f002 f8ba 	bl	d856c <__aeabi_atexit>
    return &mgr;
}
   d63f8:	4801      	ldr	r0, [pc, #4]	; (d6400 <_ZN5spark10LogManager8instanceEv+0x30>)
   d63fa:	bd10      	pop	{r4, pc}
   d63fc:	2003e31c 	.word	0x2003e31c
   d6400:	2003e320 	.word	0x2003e320
   d6404:	2003e248 	.word	0x2003e248
   d6408:	000d683b 	.word	0x000d683b

000d640c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d640c:	2300      	movs	r3, #0
   d640e:	4a02      	ldr	r2, [pc, #8]	; (d6418 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6410:	4902      	ldr	r1, [pc, #8]	; (d641c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6412:	4803      	ldr	r0, [pc, #12]	; (d6420 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6414:	f7ff bb26 	b.w	d5a64 <log_set_callbacks>
   d6418:	000d671d 	.word	0x000d671d
   d641c:	000d66ad 	.word	0x000d66ad
   d6420:	000d6635 	.word	0x000d6635

000d6424 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6424:	2300      	movs	r3, #0
   d6426:	461a      	mov	r2, r3
   d6428:	4619      	mov	r1, r3
   d642a:	4618      	mov	r0, r3
   d642c:	f7ff bb1a 	b.w	d5a64 <log_set_callbacks>

000d6430 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6430:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6432:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6434:	688e      	ldr	r6, [r1, #8]
   d6436:	f851 3b04 	ldr.w	r3, [r1], #4
   d643a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d643e:	4605      	mov	r5, r0
   d6440:	a801      	add	r0, sp, #4
   d6442:	f7ff fd97 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6446:	4622      	mov	r2, r4
   d6448:	4631      	mov	r1, r6
   d644a:	4628      	mov	r0, r5
   d644c:	f001 ffa2 	bl	d8394 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6450:	a801      	add	r0, sp, #4
   d6452:	f7fd ff1f 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6456:	4628      	mov	r0, r5
   d6458:	b002      	add	sp, #8
   d645a:	bd70      	pop	{r4, r5, r6, pc}

000d645c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d645c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d645e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6460:	690e      	ldr	r6, [r1, #16]
   d6462:	f851 3b04 	ldr.w	r3, [r1], #4
   d6466:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d646a:	4605      	mov	r5, r0
   d646c:	a801      	add	r0, sp, #4
   d646e:	f7ff fd81 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6472:	4622      	mov	r2, r4
   d6474:	4631      	mov	r1, r6
   d6476:	4628      	mov	r0, r5
   d6478:	f001 ffa7 	bl	d83ca <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d647c:	a801      	add	r0, sp, #4
   d647e:	f7fd ff09 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6482:	4628      	mov	r0, r5
   d6484:	b002      	add	sp, #8
   d6486:	bd70      	pop	{r4, r5, r6, pc}

000d6488 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6488:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d648a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d648c:	68ce      	ldr	r6, [r1, #12]
   d648e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6492:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6496:	4605      	mov	r5, r0
   d6498:	a801      	add	r0, sp, #4
   d649a:	f7ff fd6b 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d649e:	4622      	mov	r2, r4
   d64a0:	4631      	mov	r1, r6
   d64a2:	4628      	mov	r0, r5
   d64a4:	f001 ff4e 	bl	d8344 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64a8:	a801      	add	r0, sp, #4
   d64aa:	f7fd fef3 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d64ae:	4628      	mov	r0, r5
   d64b0:	b002      	add	sp, #8
   d64b2:	bd70      	pop	{r4, r5, r6, pc}

000d64b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d64b4:	b530      	push	{r4, r5, lr}
   d64b6:	b08b      	sub	sp, #44	; 0x2c
   d64b8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d64ba:	4601      	mov	r1, r0
   d64bc:	a804      	add	r0, sp, #16
   d64be:	f7ff ffb7 	bl	d6430 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d64c2:	a804      	add	r0, sp, #16
   d64c4:	f001 fe71 	bl	d81aa <_ZN5spark18JSONObjectIterator4nextEv>
   d64c8:	b1e8      	cbz	r0, d6506 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d64ca:	a904      	add	r1, sp, #16
   d64cc:	4668      	mov	r0, sp
   d64ce:	f7ff ffdb 	bl	d6488 <_ZNK5spark18JSONObjectIterator4nameEv>
   d64d2:	490f      	ldr	r1, [pc, #60]	; (d6510 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d64d4:	9802      	ldr	r0, [sp, #8]
   d64d6:	f7ff fe91 	bl	d61fc <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d64da:	4604      	mov	r4, r0
   d64dc:	b110      	cbz	r0, d64e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d64de:	1c2c      	adds	r4, r5, #0
   d64e0:	bf18      	it	ne
   d64e2:	2401      	movne	r4, #1
   d64e4:	a801      	add	r0, sp, #4
   d64e6:	f7fd fed5 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64ea:	2c00      	cmp	r4, #0
   d64ec:	d0e9      	beq.n	d64c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d64ee:	a904      	add	r1, sp, #16
   d64f0:	4668      	mov	r0, sp
   d64f2:	f7ff ffb3 	bl	d645c <_ZNK5spark18JSONObjectIterator5valueEv>
   d64f6:	4668      	mov	r0, sp
   d64f8:	f001 fe37 	bl	d816a <_ZNK5spark9JSONValue5toIntEv>
   d64fc:	6028      	str	r0, [r5, #0]
   d64fe:	a801      	add	r0, sp, #4
   d6500:	f7fd fec8 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6504:	e7dd      	b.n	d64c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6506:	a805      	add	r0, sp, #20
   d6508:	f7fd fec4 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d650c:	b00b      	add	sp, #44	; 0x2c
   d650e:	bd30      	pop	{r4, r5, pc}
   d6510:	000d9644 	.word	0x000d9644

000d6514 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6516:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6518:	4620      	mov	r0, r4
   d651a:	4913      	ldr	r1, [pc, #76]	; (d6568 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d651c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d651e:	f002 fe2b 	bl	d9178 <strcmp>
   d6522:	b940      	cbnz	r0, d6536 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6524:	f001 fa46 	bl	d79b4 <_Z16_fetch_usbserialv>
   d6528:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d652c:	f001 fa32 	bl	d7994 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6530:	f001 fa40 	bl	d79b4 <_Z16_fetch_usbserialv>
   d6534:	e015      	b.n	d6562 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6536:	490d      	ldr	r1, [pc, #52]	; (d656c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6538:	4620      	mov	r0, r4
   d653a:	f002 fe1d 	bl	d9178 <strcmp>
   d653e:	b978      	cbnz	r0, d6560 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6540:	a902      	add	r1, sp, #8
   d6542:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6546:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d654a:	4628      	mov	r0, r5
   d654c:	f7ff ffb2 	bl	d64b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6550:	f001 fb22 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d6554:	9901      	ldr	r1, [sp, #4]
   d6556:	f001 fb15 	bl	d7b84 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d655a:	f001 fb1d 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d655e:	e000      	b.n	d6562 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6560:	2000      	movs	r0, #0
}
   d6562:	b003      	add	sp, #12
   d6564:	bd30      	pop	{r4, r5, pc}
   d6566:	bf00      	nop
   d6568:	000d9649 	.word	0x000d9649
   d656c:	000d9650 	.word	0x000d9650

000d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6570:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6572:	6804      	ldr	r4, [r0, #0]
   d6574:	6843      	ldr	r3, [r0, #4]
   d6576:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6578:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d657a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d657e:	42a6      	cmp	r6, r4
   d6580:	d005      	beq.n	d658e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6582:	f104 0008 	add.w	r0, r4, #8
   d6586:	f7ff fff3 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d658a:	3414      	adds	r4, #20
   d658c:	e7f7      	b.n	d657e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d658e:	6828      	ldr	r0, [r5, #0]
   d6590:	f7ff fb24 	bl	d5bdc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6594:	4628      	mov	r0, r5
   d6596:	bd70      	pop	{r4, r5, r6, pc}

000d6598 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6598:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d659a:	6804      	ldr	r4, [r0, #0]
   d659c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d659e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d65a0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d65a4:	42a6      	cmp	r6, r4
   d65a6:	d004      	beq.n	d65b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff fbcf 	bl	d5d4c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d65ae:	3410      	adds	r4, #16
   d65b0:	e7f8      	b.n	d65a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d65b2:	6828      	ldr	r0, [r5, #0]
   d65b4:	f7ff fb12 	bl	d5bdc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d65b8:	4628      	mov	r0, r5
   d65ba:	bd70      	pop	{r4, r5, r6, pc}

000d65bc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d65bc:	b510      	push	{r4, lr}
   d65be:	4604      	mov	r4, r0
   d65c0:	300c      	adds	r0, #12
   d65c2:	f7ff ffd5 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7ff ffe6 	bl	d6598 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d65cc:	4620      	mov	r0, r4
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d65d0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d65d2:	4b04      	ldr	r3, [pc, #16]	; (d65e4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d65d4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d65d6:	f840 3b04 	str.w	r3, [r0], #4
   d65da:	f7ff ffef 	bl	d65bc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d65de:	4620      	mov	r0, r4
   d65e0:	bd10      	pop	{r4, pc}
   d65e2:	bf00      	nop
   d65e4:	000d9370 	.word	0x000d9370

000d65e8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d65e8:	b510      	push	{r4, lr}
   d65ea:	4604      	mov	r4, r0
   d65ec:	f7ff fff0 	bl	d65d0 <_ZN5spark16StreamLogHandlerD1Ev>
   d65f0:	4620      	mov	r0, r4
   d65f2:	2124      	movs	r1, #36	; 0x24
   d65f4:	f001 ffc8 	bl	d8588 <_ZdlPvj>
   d65f8:	4620      	mov	r0, r4
   d65fa:	bd10      	pop	{r4, pc}

000d65fc <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d65fc:	b510      	push	{r4, lr}
   d65fe:	4b03      	ldr	r3, [pc, #12]	; (d660c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6600:	6003      	str	r3, [r0, #0]
   d6602:	4604      	mov	r4, r0
   d6604:	f7ff ffe4 	bl	d65d0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6608:	4620      	mov	r0, r4
   d660a:	bd10      	pop	{r4, pc}
   d660c:	000d9634 	.word	0x000d9634

000d6610 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6610:	b510      	push	{r4, lr}
   d6612:	4604      	mov	r4, r0
   d6614:	f7ff fff2 	bl	d65fc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6618:	4620      	mov	r0, r4
   d661a:	2124      	movs	r1, #36	; 0x24
   d661c:	f001 ffb4 	bl	d8588 <_ZdlPvj>
   d6620:	4620      	mov	r0, r4
   d6622:	bd10      	pop	{r4, pc}

000d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6624:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6626:	6803      	ldr	r3, [r0, #0]
   d6628:	4604      	mov	r4, r0
   d662a:	6818      	ldr	r0, [r3, #0]
   d662c:	f7ff f8fa 	bl	d5824 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6630:	4620      	mov	r0, r4
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6638:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d663a:	4b1b      	ldr	r3, [pc, #108]	; (d66a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d663c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d663e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6642:	b085      	sub	sp, #20
   d6644:	4682      	mov	sl, r0
   d6646:	460e      	mov	r6, r1
   d6648:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d664a:	bb53      	cbnz	r3, d66a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d664c:	f7ff fec0 	bl	d63d0 <_ZN5spark10LogManager8instanceEv>
   d6650:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6652:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6654:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6656:	f7ff fde5 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d665a:	7b23      	ldrb	r3, [r4, #12]
   d665c:	b9f3      	cbnz	r3, d669c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d665e:	2301      	movs	r3, #1
   d6660:	7323      	strb	r3, [r4, #12]
   d6662:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6664:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6666:	b2f6      	uxtb	r6, r6
   d6668:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d666c:	454d      	cmp	r5, r9
   d666e:	d013      	beq.n	d6698 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6670:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6674:	4641      	mov	r1, r8
   d6676:	1d38      	adds	r0, r7, #4
   d6678:	f7ff fe30 	bl	d62dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d667c:	4286      	cmp	r6, r0
   d667e:	d3f5      	bcc.n	d666c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6680:	683b      	ldr	r3, [r7, #0]
   d6682:	f8cd b000 	str.w	fp, [sp]
   d6686:	689b      	ldr	r3, [r3, #8]
   d6688:	469e      	mov	lr, r3
   d668a:	4638      	mov	r0, r7
   d668c:	4643      	mov	r3, r8
   d668e:	4632      	mov	r2, r6
   d6690:	4651      	mov	r1, sl
   d6692:	4677      	mov	r7, lr
   d6694:	47b8      	blx	r7
   d6696:	e7e9      	b.n	d666c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6698:	2300      	movs	r3, #0
   d669a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d669c:	a803      	add	r0, sp, #12
   d669e:	f7ff ffc1 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d66a2:	b005      	add	sp, #20
   d66a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66a8:	e000ed00 	.word	0xe000ed00

000d66ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d66ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66b0:	4699      	mov	r9, r3
   d66b2:	4b19      	ldr	r3, [pc, #100]	; (d6718 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d66b4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d66b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d66ba:	4607      	mov	r7, r0
   d66bc:	4688      	mov	r8, r1
   d66be:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d66c0:	bb33      	cbnz	r3, d6710 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d66c2:	f7ff fe85 	bl	d63d0 <_ZN5spark10LogManager8instanceEv>
   d66c6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d66c8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d66ca:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d66cc:	f7ff fdaa 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d66d0:	7b23      	ldrb	r3, [r4, #12]
   d66d2:	b9d3      	cbnz	r3, d670a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d66d4:	2301      	movs	r3, #1
   d66d6:	7323      	strb	r3, [r4, #12]
   d66d8:	6825      	ldr	r5, [r4, #0]
   d66da:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d66dc:	fa5f fb86 	uxtb.w	fp, r6
   d66e0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d66e4:	4555      	cmp	r5, sl
   d66e6:	d00e      	beq.n	d6706 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d66e8:	f855 6b04 	ldr.w	r6, [r5], #4
   d66ec:	4649      	mov	r1, r9
   d66ee:	1d30      	adds	r0, r6, #4
   d66f0:	f7ff fdf4 	bl	d62dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d66f4:	4583      	cmp	fp, r0
   d66f6:	d3f5      	bcc.n	d66e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d66f8:	6833      	ldr	r3, [r6, #0]
   d66fa:	4642      	mov	r2, r8
   d66fc:	68db      	ldr	r3, [r3, #12]
   d66fe:	4639      	mov	r1, r7
   d6700:	4630      	mov	r0, r6
   d6702:	4798      	blx	r3
   d6704:	e7ee      	b.n	d66e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6706:	2300      	movs	r3, #0
   d6708:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d670a:	a801      	add	r0, sp, #4
   d670c:	f7ff ff8a 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6710:	b003      	add	sp, #12
   d6712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6716:	bf00      	nop
   d6718:	e000ed00 	.word	0xe000ed00

000d671c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d671c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6720:	4b15      	ldr	r3, [pc, #84]	; (d6778 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6722:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6724:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6728:	4604      	mov	r4, r0
   d672a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d672c:	b9fb      	cbnz	r3, d676e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d672e:	f7ff fe4f 	bl	d63d0 <_ZN5spark10LogManager8instanceEv>
   d6732:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6734:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6736:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6738:	f7ff fd74 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
   d673c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6740:	2646      	movs	r6, #70	; 0x46
   d6742:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6746:	42af      	cmp	r7, r5
   d6748:	d107      	bne.n	d675a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d674a:	a801      	add	r0, sp, #4
   d674c:	f7ff ff6a 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6750:	42b4      	cmp	r4, r6
   d6752:	bfb4      	ite	lt
   d6754:	2000      	movlt	r0, #0
   d6756:	2001      	movge	r0, #1
   d6758:	e00a      	b.n	d6770 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d675a:	f855 0b04 	ldr.w	r0, [r5], #4
   d675e:	4641      	mov	r1, r8
   d6760:	3004      	adds	r0, #4
   d6762:	f7ff fdbb 	bl	d62dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6766:	4286      	cmp	r6, r0
   d6768:	bfa8      	it	ge
   d676a:	4606      	movge	r6, r0
   d676c:	e7eb      	b.n	d6746 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d676e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6770:	b002      	add	sp, #8
   d6772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6776:	bf00      	nop
   d6778:	e000ed00 	.word	0xe000ed00

000d677c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d677c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d677e:	6803      	ldr	r3, [r0, #0]
   d6780:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6782:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6784:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6788:	429a      	cmp	r2, r3
   d678a:	4618      	mov	r0, r3
   d678c:	d00e      	beq.n	d67ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d678e:	6806      	ldr	r6, [r0, #0]
   d6790:	680d      	ldr	r5, [r1, #0]
   d6792:	42ae      	cmp	r6, r5
   d6794:	f103 0304 	add.w	r3, r3, #4
   d6798:	d1f6      	bne.n	d6788 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d679a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d679c:	1a52      	subs	r2, r2, r1
   d679e:	f002 fc88 	bl	d90b2 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d67a2:	6863      	ldr	r3, [r4, #4]
   d67a4:	3b01      	subs	r3, #1
   d67a6:	6063      	str	r3, [r4, #4]
    return true;
   d67a8:	2001      	movs	r0, #1
}
   d67aa:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d67ac:	2000      	movs	r0, #0
   d67ae:	bd70      	pop	{r4, r5, r6, pc}

000d67b0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d67b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d67b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d67b4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d67b6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67b8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d67ba:	f7ff fd33 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d67be:	a901      	add	r1, sp, #4
   d67c0:	4620      	mov	r0, r4
   d67c2:	f7ff ffdb 	bl	d677c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d67c6:	b920      	cbnz	r0, d67d2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d67c8:	a803      	add	r0, sp, #12
   d67ca:	f7ff ff2b 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d67ce:	b004      	add	sp, #16
   d67d0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d67d2:	6863      	ldr	r3, [r4, #4]
   d67d4:	2b00      	cmp	r3, #0
   d67d6:	d1f7      	bne.n	d67c8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d67d8:	f7ff fe24 	bl	d6424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d67dc:	e7f4      	b.n	d67c8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d67de <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d67de:	b570      	push	{r4, r5, r6, lr}
   d67e0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d67e2:	6943      	ldr	r3, [r0, #20]
   d67e4:	2618      	movs	r6, #24
   d67e6:	4604      	mov	r4, r0
   d67e8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d67ec:	42ae      	cmp	r6, r5
   d67ee:	d015      	beq.n	d681c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d67f0:	f105 0110 	add.w	r1, r5, #16
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7ff ffc1 	bl	d677c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d67fa:	6863      	ldr	r3, [r4, #4]
   d67fc:	b90b      	cbnz	r3, d6802 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d67fe:	f7ff fe11 	bl	d6424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6802:	69e0      	ldr	r0, [r4, #28]
   d6804:	6929      	ldr	r1, [r5, #16]
   d6806:	6803      	ldr	r3, [r0, #0]
   d6808:	68db      	ldr	r3, [r3, #12]
   d680a:	4798      	blx	r3
        if (h.stream) {
   d680c:	6969      	ldr	r1, [r5, #20]
   d680e:	b119      	cbz	r1, d6818 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6810:	6a20      	ldr	r0, [r4, #32]
   d6812:	6803      	ldr	r3, [r0, #0]
   d6814:	68db      	ldr	r3, [r3, #12]
   d6816:	4798      	blx	r3
   d6818:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d681a:	e7e7      	b.n	d67ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d681c:	6925      	ldr	r5, [r4, #16]
   d681e:	6963      	ldr	r3, [r4, #20]
   d6820:	2618      	movs	r6, #24
   d6822:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6826:	42b5      	cmp	r5, r6
   d6828:	d004      	beq.n	d6834 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d682a:	4628      	mov	r0, r5
   d682c:	f7ff fa8e 	bl	d5d4c <_ZN6StringD1Ev>
   d6830:	3518      	adds	r5, #24
   d6832:	e7f8      	b.n	d6826 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6834:	2300      	movs	r3, #0
   d6836:	6163      	str	r3, [r4, #20]
   d6838:	bd70      	pop	{r4, r5, r6, pc}

000d683a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d683a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d683c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d683e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6840:	f7ff fdf0 	bl	d6424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6844:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6848:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d684c:	f7ff fcea 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6850:	4620      	mov	r0, r4
   d6852:	f7ff ffc4 	bl	d67de <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6856:	4628      	mov	r0, r5
   d6858:	f7ff fee4 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d685c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d685e:	b108      	cbz	r0, d6864 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6860:	f7fe ffd0 	bl	d5804 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6864:	6925      	ldr	r5, [r4, #16]
   d6866:	6963      	ldr	r3, [r4, #20]
   d6868:	2618      	movs	r6, #24
   d686a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d686e:	42b5      	cmp	r5, r6
   d6870:	d004      	beq.n	d687c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6872:	4628      	mov	r0, r5
   d6874:	f7ff fa6a 	bl	d5d4c <_ZN6StringD1Ev>
   d6878:	3518      	adds	r5, #24
   d687a:	e7f8      	b.n	d686e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d687c:	6920      	ldr	r0, [r4, #16]
   d687e:	f7ff f9ad 	bl	d5bdc <free>
   d6882:	6820      	ldr	r0, [r4, #0]
   d6884:	f7ff f9aa 	bl	d5bdc <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6888:	4620      	mov	r0, r4
   d688a:	b002      	add	sp, #8
   d688c:	bd70      	pop	{r4, r5, r6, pc}

000d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d688e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6890:	680a      	ldr	r2, [r1, #0]
   d6892:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6894:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6896:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6898:	684a      	ldr	r2, [r1, #4]
   d689a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d689c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d689e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d68a0:	688a      	ldr	r2, [r1, #8]
   d68a2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68a4:	608b      	str	r3, [r1, #8]
   d68a6:	4770      	bx	lr

000d68a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d68a8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68aa:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d68ac:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68ae:	6003      	str	r3, [r0, #0]
   d68b0:	6043      	str	r3, [r0, #4]
   d68b2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d68b4:	f7ff ffeb 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d68b8:	4620      	mov	r0, r4
   d68ba:	bd10      	pop	{r4, pc}

000d68bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d68bc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d68be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68c0:	4604      	mov	r4, r0
   d68c2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d68c4:	d925      	bls.n	d6912 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d68c6:	4290      	cmp	r0, r2
   d68c8:	d224      	bcs.n	d6914 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d68ca:	1a55      	subs	r5, r2, r1
   d68cc:	3d14      	subs	r5, #20
   d68ce:	442c      	add	r4, r5
   d68d0:	f1a1 0714 	sub.w	r7, r1, #20
   d68d4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68d8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d68da:	f1a5 0308 	sub.w	r3, r5, #8
   d68de:	429f      	cmp	r7, r3
   d68e0:	d037      	beq.n	d6952 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d68e2:	b184      	cbz	r4, d6906 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d68e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d68e8:	6023      	str	r3, [r4, #0]
   d68ea:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d68ee:	80a3      	strh	r3, [r4, #4]
   d68f0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d68f4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68f6:	60a6      	str	r6, [r4, #8]
   d68f8:	60e6      	str	r6, [r4, #12]
   d68fa:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d68fc:	4629      	mov	r1, r5
   d68fe:	f104 0008 	add.w	r0, r4, #8
   d6902:	f7ff ffc4 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6906:	4628      	mov	r0, r5
   d6908:	f7ff fe32 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d690c:	3c14      	subs	r4, #20
   d690e:	3d14      	subs	r5, #20
   d6910:	e7e3      	b.n	d68da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6912:	d01e      	beq.n	d6952 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6914:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6918:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d691a:	f1a5 0308 	sub.w	r3, r5, #8
   d691e:	429e      	cmp	r6, r3
   d6920:	d017      	beq.n	d6952 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6922:	b184      	cbz	r4, d6946 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6924:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6928:	6023      	str	r3, [r4, #0]
   d692a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d692e:	80a3      	strh	r3, [r4, #4]
   d6930:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6934:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6936:	60a7      	str	r7, [r4, #8]
   d6938:	60e7      	str	r7, [r4, #12]
   d693a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d693c:	4629      	mov	r1, r5
   d693e:	f104 0008 	add.w	r0, r4, #8
   d6942:	f7ff ffa4 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6946:	4628      	mov	r0, r5
   d6948:	f7ff fe12 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d694c:	3414      	adds	r4, #20
   d694e:	3514      	adds	r5, #20
   d6950:	e7e3      	b.n	d691a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6954 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6956:	6845      	ldr	r5, [r0, #4]
   d6958:	6883      	ldr	r3, [r0, #8]
   d695a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d695c:	4604      	mov	r4, r0
   d695e:	460e      	mov	r6, r1
   d6960:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6962:	db0e      	blt.n	d6982 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6964:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6966:	2d00      	cmp	r5, #0
   d6968:	dd05      	ble.n	d6976 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d696a:	00a9      	lsls	r1, r5, #2
   d696c:	6800      	ldr	r0, [r0, #0]
   d696e:	f7ff f93d 	bl	d5bec <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6972:	b920      	cbnz	r0, d697e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6976:	6800      	ldr	r0, [r0, #0]
   d6978:	f7ff f930 	bl	d5bdc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d697c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d697e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6980:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6982:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6984:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6986:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d698a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d698e:	1a52      	subs	r2, r2, r1
   d6990:	1d08      	adds	r0, r1, #4
   d6992:	f002 fb8e 	bl	d90b2 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6996:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d699a:	6863      	ldr	r3, [r4, #4]
   d699c:	3301      	adds	r3, #1
   d699e:	6063      	str	r3, [r4, #4]
   d69a0:	2001      	movs	r0, #1
    return true;
}
   d69a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d69a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d69a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d69a8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d69aa:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d69ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d69ae:	f7ff fc39 	bl	d6224 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d69b2:	6823      	ldr	r3, [r4, #0]
   d69b4:	6861      	ldr	r1, [r4, #4]
   d69b6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d69ba:	4283      	cmp	r3, r0
   d69bc:	461a      	mov	r2, r3
   d69be:	d009      	beq.n	d69d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d69c0:	6812      	ldr	r2, [r2, #0]
   d69c2:	42aa      	cmp	r2, r5
   d69c4:	f103 0304 	add.w	r3, r3, #4
   d69c8:	d1f7      	bne.n	d69ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d69ca:	a801      	add	r0, sp, #4
   d69cc:	f7ff fe2a 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d69d0:	2500      	movs	r5, #0
   d69d2:	e00e      	b.n	d69f2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d69d4:	462a      	mov	r2, r5
   d69d6:	4620      	mov	r0, r4
   d69d8:	f7ff ffbc 	bl	d6954 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d69dc:	4605      	mov	r5, r0
   d69de:	2800      	cmp	r0, #0
   d69e0:	d0f3      	beq.n	d69ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d69e2:	6863      	ldr	r3, [r4, #4]
   d69e4:	2b01      	cmp	r3, #1
   d69e6:	d101      	bne.n	d69ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d69e8:	f7ff fd10 	bl	d640c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d69ec:	a801      	add	r0, sp, #4
   d69ee:	f7ff fe19 	bl	d6624 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d69f2:	4628      	mov	r0, r5
   d69f4:	b003      	add	sp, #12
   d69f6:	bd30      	pop	{r4, r5, pc}

000d69f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d69f8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d69fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69fc:	4606      	mov	r6, r0
   d69fe:	460c      	mov	r4, r1
   d6a00:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6a02:	d914      	bls.n	d6a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6a04:	4290      	cmp	r0, r2
   d6a06:	d213      	bcs.n	d6a30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6a08:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6a0c:	1a6c      	subs	r4, r5, r1
   d6a0e:	f1a1 0710 	sub.w	r7, r1, #16
   d6a12:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6a14:	42af      	cmp	r7, r5
   d6a16:	d018      	beq.n	d6a4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6a18:	b11c      	cbz	r4, d6a22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6a1a:	4629      	mov	r1, r5
   d6a1c:	4620      	mov	r0, r4
   d6a1e:	f7ff f985 	bl	d5d2c <_ZN6StringC1EOS_>
                end->~T();
   d6a22:	4628      	mov	r0, r5
   d6a24:	f7ff f992 	bl	d5d4c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6a28:	3d10      	subs	r5, #16
   d6a2a:	3c10      	subs	r4, #16
   d6a2c:	e7f2      	b.n	d6a14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6a2e:	d00c      	beq.n	d6a4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6a30:	42ac      	cmp	r4, r5
   d6a32:	d00a      	beq.n	d6a4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6a34:	b11e      	cbz	r6, d6a3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6a36:	4621      	mov	r1, r4
   d6a38:	4630      	mov	r0, r6
   d6a3a:	f7ff f977 	bl	d5d2c <_ZN6StringC1EOS_>
                p->~T();
   d6a3e:	4620      	mov	r0, r4
   d6a40:	f7ff f984 	bl	d5d4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a44:	3410      	adds	r4, #16
   d6a46:	3610      	adds	r6, #16
   d6a48:	e7f2      	b.n	d6a30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6a4c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6a4e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6a50:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6a52:	dd0b      	ble.n	d6a6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6a54:	0130      	lsls	r0, r6, #4
   d6a56:	f7ff f8b9 	bl	d5bcc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6a5a:	4604      	mov	r4, r0
   d6a5c:	b170      	cbz	r0, d6a7c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6a5e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6a62:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6a66:	f7ff ffc7 	bl	d69f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6a6a:	e000      	b.n	d6a6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a6c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a6e:	6828      	ldr	r0, [r5, #0]
   d6a70:	f7ff f8b4 	bl	d5bdc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a74:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6a76:	60ae      	str	r6, [r5, #8]
        return true;
   d6a78:	2001      	movs	r0, #1
   d6a7a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6a7c:	bd70      	pop	{r4, r5, r6, pc}

000d6a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a82:	2300      	movs	r3, #0
   d6a84:	b095      	sub	sp, #84	; 0x54
   d6a86:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6a88:	2246      	movs	r2, #70	; 0x46
   d6a8a:	6003      	str	r3, [r0, #0]
   d6a8c:	6043      	str	r3, [r0, #4]
   d6a8e:	6083      	str	r3, [r0, #8]
   d6a90:	60c3      	str	r3, [r0, #12]
   d6a92:	6103      	str	r3, [r0, #16]
   d6a94:	6143      	str	r3, [r0, #20]
   d6a96:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6a98:	9102      	str	r1, [sp, #8]
   d6a9a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6a9e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6aa0:	4299      	cmp	r1, r3
   d6aa2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6aa4:	9309      	str	r3, [sp, #36]	; 0x24
   d6aa6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6aa8:	f340 809d 	ble.w	d6be6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6aac:	a808      	add	r0, sp, #32
   d6aae:	f7ff ffcd 	bl	d6a4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6ab2:	2800      	cmp	r0, #0
   d6ab4:	f040 8097 	bne.w	d6be6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6ab8:	e08e      	b.n	d6bd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6aba:	4621      	mov	r1, r4
   d6abc:	a80b      	add	r0, sp, #44	; 0x2c
   d6abe:	f7ff f935 	bl	d5d2c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ac2:	a90b      	add	r1, sp, #44	; 0x2c
   d6ac4:	a80f      	add	r0, sp, #60	; 0x3c
   d6ac6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6ac8:	f7ff f930 	bl	d5d2c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6acc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ad0:	4299      	cmp	r1, r3
   d6ad2:	f2c0 80ce 	blt.w	d6c72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6ad6:	3101      	adds	r1, #1
   d6ad8:	a808      	add	r0, sp, #32
   d6ada:	f7ff ffb7 	bl	d6a4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6ade:	2800      	cmp	r0, #0
   d6ae0:	f040 80c7 	bne.w	d6c72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ae4:	a80f      	add	r0, sp, #60	; 0x3c
   d6ae6:	f7ff f931 	bl	d5d4c <_ZN6StringD1Ev>
   d6aea:	a80b      	add	r0, sp, #44	; 0x2c
   d6aec:	f7ff f92e 	bl	d5d4c <_ZN6StringD1Ev>
   d6af0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6af2:	42a7      	cmp	r7, r4
   d6af4:	d1e1      	bne.n	d6aba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6af6:	2600      	movs	r6, #0
   d6af8:	960b      	str	r6, [sp, #44]	; 0x2c
   d6afa:	960c      	str	r6, [sp, #48]	; 0x30
   d6afc:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6afe:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6b02:	429e      	cmp	r6, r3
   d6b04:	f280 80a8 	bge.w	d6c58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6b08:	0133      	lsls	r3, r6, #4
   d6b0a:	9a08      	ldr	r2, [sp, #32]
   d6b0c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6b0e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6b10:	2b00      	cmp	r3, #0
   d6b12:	f000 809f 	beq.w	d6c54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6b16:	2314      	movs	r3, #20
   d6b18:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6b1a:	f8cd 901c 	str.w	r9, [sp, #28]
   d6b1e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6b20:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6b22:	a907      	add	r1, sp, #28
   d6b24:	a806      	add	r0, sp, #24
   d6b26:	f7ff fb2c 	bl	d6182 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6b2a:	4607      	mov	r7, r0
   d6b2c:	2800      	cmp	r0, #0
   d6b2e:	f000 8091 	beq.w	d6c54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6b32:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6b34:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6b36:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6b3a:	9a07      	ldr	r2, [sp, #28]
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f7ff fb8d 	bl	d625c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6b42:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6b46:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6b48:	f1b8 0f00 	cmp.w	r8, #0
   d6b4c:	d153      	bne.n	d6bf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6b4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6b52:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6b5a:	970f      	str	r7, [sp, #60]	; 0x3c
   d6b5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6b60:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6b64:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6b68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6b6c:	6867      	ldr	r7, [r4, #4]
   d6b6e:	68a3      	ldr	r3, [r4, #8]
   d6b70:	429f      	cmp	r7, r3
   d6b72:	da4f      	bge.n	d6c14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6b74:	9b00      	ldr	r3, [sp, #0]
   d6b76:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6b7a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b7c:	2214      	movs	r2, #20
   d6b7e:	4353      	muls	r3, r2
   d6b80:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6b84:	fb02 b201 	mla	r2, r2, r1, fp
   d6b88:	f107 0014 	add.w	r0, r7, #20
   d6b8c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b8e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6b90:	f7ff fe94 	bl	d68bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6b94:	b1a7      	cbz	r7, d6bc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6b96:	9b03      	ldr	r3, [sp, #12]
   d6b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6b9a:	f84b 2003 	str.w	r2, [fp, r3]
   d6b9e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6ba2:	80bb      	strh	r3, [r7, #4]
   d6ba4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6ba8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6baa:	f8c7 9008 	str.w	r9, [r7, #8]
   d6bae:	f8c7 900c 	str.w	r9, [r7, #12]
   d6bb2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6bb6:	a911      	add	r1, sp, #68	; 0x44
   d6bb8:	f107 0008 	add.w	r0, r7, #8
   d6bbc:	f7ff fe67 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6bc0:	6863      	ldr	r3, [r4, #4]
   d6bc2:	3301      	adds	r3, #1
   d6bc4:	6063      	str	r3, [r4, #4]
   d6bc6:	a811      	add	r0, sp, #68	; 0x44
   d6bc8:	f7ff fcd2 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6bcc:	f1b8 0f00 	cmp.w	r8, #0
   d6bd0:	d011      	beq.n	d6bf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6bd2:	a80b      	add	r0, sp, #44	; 0x2c
   d6bd4:	f7ff fccc 	bl	d6570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6bd8:	a808      	add	r0, sp, #32
   d6bda:	f7ff fcdd 	bl	d6598 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6bde:	4628      	mov	r0, r5
   d6be0:	b015      	add	sp, #84	; 0x54
   d6be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6be6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6bea:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6bee:	2714      	movs	r7, #20
   d6bf0:	fb07 4703 	mla	r7, r7, r3, r4
   d6bf4:	e77d      	b.n	d6af2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6bf6:	6823      	ldr	r3, [r4, #0]
   d6bf8:	9a00      	ldr	r2, [sp, #0]
   d6bfa:	2414      	movs	r4, #20
   d6bfc:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6c00:	9b06      	ldr	r3, [sp, #24]
   d6c02:	781b      	ldrb	r3, [r3, #0]
   d6c04:	bb23      	cbnz	r3, d6c50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6c06:	f8da 3000 	ldr.w	r3, [sl]
   d6c0a:	9a01      	ldr	r2, [sp, #4]
   d6c0c:	4413      	add	r3, r2
   d6c0e:	7c1b      	ldrb	r3, [r3, #16]
   d6c10:	80e3      	strh	r3, [r4, #6]
   d6c12:	e01d      	b.n	d6c50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c14:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6c16:	2f00      	cmp	r7, #0
   d6c18:	dd0f      	ble.n	d6c3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6c1a:	2314      	movs	r3, #20
   d6c1c:	fb03 f007 	mul.w	r0, r3, r7
   d6c20:	9303      	str	r3, [sp, #12]
   d6c22:	f7fe ffd3 	bl	d5bcc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6c26:	4683      	mov	fp, r0
   d6c28:	b178      	cbz	r0, d6c4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6c2a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6c2e:	9b03      	ldr	r3, [sp, #12]
   d6c30:	fb03 1202 	mla	r2, r3, r2, r1
   d6c34:	f7ff fe42 	bl	d68bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6c38:	e000      	b.n	d6c3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6c3a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c3c:	6820      	ldr	r0, [r4, #0]
   d6c3e:	f7fe ffcd 	bl	d5bdc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6c42:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6c46:	60a7      	str	r7, [r4, #8]
   d6c48:	e794      	b.n	d6b74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6c4a:	f04f 0801 	mov.w	r8, #1
   d6c4e:	e7ba      	b.n	d6bc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6c50:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6c52:	e766      	b.n	d6b22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6c54:	3601      	adds	r6, #1
   d6c56:	e753      	b.n	d6b00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6c58:	a908      	add	r1, sp, #32
   d6c5a:	4628      	mov	r0, r5
   d6c5c:	f7ff fe17 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6c60:	a90b      	add	r1, sp, #44	; 0x2c
   d6c62:	f105 000c 	add.w	r0, r5, #12
   d6c66:	f7ff fe12 	bl	d688e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6c6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6c6e:	762b      	strb	r3, [r5, #24]
   d6c70:	e7af      	b.n	d6bd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c72:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c76:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6c7a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6c7e:	4631      	mov	r1, r6
   d6c80:	f106 0010 	add.w	r0, r6, #16
   d6c84:	f7ff feb8 	bl	d69f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6c88:	b11e      	cbz	r6, d6c92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6c8a:	a90f      	add	r1, sp, #60	; 0x3c
   d6c8c:	4630      	mov	r0, r6
   d6c8e:	f7ff f84d 	bl	d5d2c <_ZN6StringC1EOS_>
    ++size_;
   d6c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6c94:	3301      	adds	r3, #1
   d6c96:	9309      	str	r3, [sp, #36]	; 0x24
   d6c98:	e724      	b.n	d6ae4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6c9c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6c9e:	4604      	mov	r4, r0
   d6ca0:	4b09      	ldr	r3, [pc, #36]	; (d6cc8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6ca2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6ca6:	4605      	mov	r5, r0
   d6ca8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6caa:	a801      	add	r0, sp, #4
   d6cac:	4611      	mov	r1, r2
   d6cae:	f7fd fc04 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6cb2:	aa01      	add	r2, sp, #4
   d6cb4:	4631      	mov	r1, r6
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	f7ff fee1 	bl	d6a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6cbc:	a801      	add	r0, sp, #4
   d6cbe:	f7fd fb8d 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6cc2:	4628      	mov	r0, r5
   d6cc4:	b004      	add	sp, #16
   d6cc6:	bd70      	pop	{r4, r5, r6, pc}
   d6cc8:	000d9370 	.word	0x000d9370

000d6ccc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cce:	460f      	mov	r7, r1
   d6cd0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6cd2:	492b      	ldr	r1, [pc, #172]	; (d6d80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6cd4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6cd6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6cd8:	4616      	mov	r6, r2
   d6cda:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6cdc:	f002 fa4c 	bl	d9178 <strcmp>
   d6ce0:	bb28      	cbnz	r0, d6d2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6ce2:	2c00      	cmp	r4, #0
   d6ce4:	d049      	beq.n	d6d7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6ce6:	4629      	mov	r1, r5
   d6ce8:	a801      	add	r0, sp, #4
   d6cea:	f7ff fddd 	bl	d68a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6cee:	4925      	ldr	r1, [pc, #148]	; (d6d84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6cf0:	2024      	movs	r0, #36	; 0x24
   d6cf2:	f001 fc4d 	bl	d8590 <_ZnwjRKSt9nothrow_t>
   d6cf6:	4605      	mov	r5, r0
   d6cf8:	b1b8      	cbz	r0, d6d2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6cfa:	a901      	add	r1, sp, #4
   d6cfc:	a804      	add	r0, sp, #16
   d6cfe:	f7ff fdd3 	bl	d68a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6d02:	a904      	add	r1, sp, #16
   d6d04:	a807      	add	r0, sp, #28
   d6d06:	f7fd fbd8 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6d0a:	aa07      	add	r2, sp, #28
   d6d0c:	4631      	mov	r1, r6
   d6d0e:	4628      	mov	r0, r5
   d6d10:	f7ff ffc4 	bl	d6c9c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6d14:	a807      	add	r0, sp, #28
   d6d16:	f7fd fb61 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6d1a:	4b1b      	ldr	r3, [pc, #108]	; (d6d88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6d1c:	602b      	str	r3, [r5, #0]
   d6d1e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6d20:	a804      	add	r0, sp, #16
   d6d22:	f7fd fb5b 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6d26:	4b19      	ldr	r3, [pc, #100]	; (d6d8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6d28:	602b      	str	r3, [r5, #0]
   d6d2a:	a801      	add	r0, sp, #4
   d6d2c:	e01f      	b.n	d6d6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6d2e:	4918      	ldr	r1, [pc, #96]	; (d6d90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6d30:	4638      	mov	r0, r7
   d6d32:	f002 fa21 	bl	d9178 <strcmp>
   d6d36:	b9f0      	cbnz	r0, d6d76 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6d38:	b1fc      	cbz	r4, d6d7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6d3a:	4629      	mov	r1, r5
   d6d3c:	a804      	add	r0, sp, #16
   d6d3e:	f7ff fdb3 	bl	d68a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6d42:	4910      	ldr	r1, [pc, #64]	; (d6d84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6d44:	2024      	movs	r0, #36	; 0x24
   d6d46:	f001 fc23 	bl	d8590 <_ZnwjRKSt9nothrow_t>
   d6d4a:	4605      	mov	r5, r0
   d6d4c:	b170      	cbz	r0, d6d6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6d4e:	a904      	add	r1, sp, #16
   d6d50:	a807      	add	r0, sp, #28
   d6d52:	f7fd fbb2 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6d56:	aa07      	add	r2, sp, #28
   d6d58:	4631      	mov	r1, r6
   d6d5a:	4628      	mov	r0, r5
   d6d5c:	f7ff ff9e 	bl	d6c9c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6d60:	a807      	add	r0, sp, #28
   d6d62:	f7fd fb3b 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6d66:	4b08      	ldr	r3, [pc, #32]	; (d6d88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6d68:	602b      	str	r3, [r5, #0]
   d6d6a:	622c      	str	r4, [r5, #32]
   d6d6c:	a804      	add	r0, sp, #16
   d6d6e:	f7fd fb35 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6d72:	4628      	mov	r0, r5
   d6d74:	e002      	b.n	d6d7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6d76:	2000      	movs	r0, #0
   d6d78:	e000      	b.n	d6d7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6d7a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6d7c:	b00b      	add	sp, #44	; 0x2c
   d6d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d80:	000d96a2 	.word	0x000d96a2
   d6d84:	000d990a 	.word	0x000d990a
   d6d88:	000d9724 	.word	0x000d9724
   d6d8c:	000d9634 	.word	0x000d9634
   d6d90:	000d96a6 	.word	0x000d96a6

000d6d94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6d94:	4b01      	ldr	r3, [pc, #4]	; (d6d9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6d96:	4a02      	ldr	r2, [pc, #8]	; (d6da0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6d98:	601a      	str	r2, [r3, #0]
   d6d9a:	4770      	bx	lr
   d6d9c:	2003e34c 	.word	0x2003e34c
   d6da0:	000d9405 	.word	0x000d9405

000d6da4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6da8:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6daa:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6dae:	4604      	mov	r4, r0
   d6db0:	460e      	mov	r6, r1
   d6db2:	4617      	mov	r7, r2
   d6db4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6db6:	f000 fdfd 	bl	d79b4 <_Z16_fetch_usbserialv>
   d6dba:	4581      	cmp	r9, r0
   d6dbc:	d105      	bne.n	d6dca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d6dbe:	485a      	ldr	r0, [pc, #360]	; (d6f28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6dc0:	f001 f8d9 	bl	d7f76 <_ZN5spark12NetworkClass9listeningEv>
   d6dc4:	2800      	cmp	r0, #0
   d6dc6:	f040 80ac 	bne.w	d6f22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6dca:	792b      	ldrb	r3, [r5, #4]
   d6dcc:	071b      	lsls	r3, r3, #28
   d6dce:	d505      	bpl.n	d6ddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6dd0:	696b      	ldr	r3, [r5, #20]
   d6dd2:	4a56      	ldr	r2, [pc, #344]	; (d6f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6dd4:	6a20      	ldr	r0, [r4, #32]
   d6dd6:	2100      	movs	r1, #0
   d6dd8:	f7ff f95b 	bl	d6092 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6ddc:	f1b8 0f00 	cmp.w	r8, #0
   d6de0:	d00d      	beq.n	d6dfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6de2:	215b      	movs	r1, #91	; 0x5b
   d6de4:	4620      	mov	r0, r4
   d6de6:	f7ff fa2e 	bl	d6246 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6dea:	4641      	mov	r1, r8
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff fa1c 	bl	d622a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6df2:	6823      	ldr	r3, [r4, #0]
   d6df4:	494e      	ldr	r1, [pc, #312]	; (d6f30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6df6:	68db      	ldr	r3, [r3, #12]
   d6df8:	2202      	movs	r2, #2
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6dfe:	792b      	ldrb	r3, [r5, #4]
   d6e00:	07d9      	lsls	r1, r3, #31
   d6e02:	d525      	bpl.n	d6e50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6e04:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6e08:	212f      	movs	r1, #47	; 0x2f
   d6e0a:	4640      	mov	r0, r8
   d6e0c:	f002 f9fe 	bl	d920c <strrchr>
    if (s1) {
   d6e10:	b108      	cbz	r0, d6e16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6e12:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6e16:	4641      	mov	r1, r8
   d6e18:	4620      	mov	r0, r4
   d6e1a:	f7ff fa06 	bl	d622a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6e1e:	792b      	ldrb	r3, [r5, #4]
   d6e20:	079a      	lsls	r2, r3, #30
   d6e22:	d509      	bpl.n	d6e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6e24:	213a      	movs	r1, #58	; 0x3a
   d6e26:	4620      	mov	r0, r4
   d6e28:	f7ff fa0d 	bl	d6246 <_ZN5spark16StreamLogHandler5writeEc>
   d6e2c:	68eb      	ldr	r3, [r5, #12]
   d6e2e:	4a41      	ldr	r2, [pc, #260]	; (d6f34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6e30:	6a20      	ldr	r0, [r4, #32]
   d6e32:	2100      	movs	r1, #0
   d6e34:	f7ff f92d 	bl	d6092 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6e38:	792b      	ldrb	r3, [r5, #4]
   d6e3a:	f013 0f04 	tst.w	r3, #4
   d6e3e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6e40:	bf18      	it	ne
   d6e42:	493d      	ldrne	r1, [pc, #244]	; (d6f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6e44:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6e46:	bf08      	it	eq
   d6e48:	493c      	ldreq	r1, [pc, #240]	; (d6f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6e4a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6e50:	792b      	ldrb	r3, [r5, #4]
   d6e52:	075b      	lsls	r3, r3, #29
   d6e54:	d518      	bpl.n	d6e88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6e56:	6929      	ldr	r1, [r5, #16]
   d6e58:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6e5a:	4613      	mov	r3, r2
   d6e5c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6e60:	b138      	cbz	r0, d6e72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6e62:	2820      	cmp	r0, #32
   d6e64:	d101      	bne.n	d6e6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6e66:	4619      	mov	r1, r3
   d6e68:	e001      	b.n	d6e6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6e6a:	2828      	cmp	r0, #40	; 0x28
   d6e6c:	d001      	beq.n	d6e72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6e6e:	461a      	mov	r2, r3
   d6e70:	e7f3      	b.n	d6e5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6e72:	6823      	ldr	r3, [r4, #0]
   d6e74:	1a52      	subs	r2, r2, r1
   d6e76:	68db      	ldr	r3, [r3, #12]
   d6e78:	4620      	mov	r0, r4
   d6e7a:	4798      	blx	r3
        write("(): ", 4);
   d6e7c:	6823      	ldr	r3, [r4, #0]
   d6e7e:	4930      	ldr	r1, [pc, #192]	; (d6f40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6e80:	68db      	ldr	r3, [r3, #12]
   d6e82:	2204      	movs	r2, #4
   d6e84:	4620      	mov	r0, r4
   d6e86:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6e88:	2100      	movs	r1, #0
   d6e8a:	4638      	mov	r0, r7
   d6e8c:	f7fe fde2 	bl	d5a54 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6e90:	4601      	mov	r1, r0
   d6e92:	4620      	mov	r0, r4
   d6e94:	f7ff f9c9 	bl	d622a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6e98:	6823      	ldr	r3, [r4, #0]
   d6e9a:	4928      	ldr	r1, [pc, #160]	; (d6f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6e9c:	68db      	ldr	r3, [r3, #12]
   d6e9e:	2202      	movs	r2, #2
   d6ea0:	4620      	mov	r0, r4
   d6ea2:	4798      	blx	r3
    // Message
    if (msg) {
   d6ea4:	b11e      	cbz	r6, d6eae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6ea6:	4631      	mov	r1, r6
   d6ea8:	4620      	mov	r0, r4
   d6eaa:	f7ff f9be 	bl	d622a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d6eae:	792b      	ldrb	r3, [r5, #4]
   d6eb0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6eb4:	d02d      	beq.n	d6f12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6eb6:	6823      	ldr	r3, [r4, #0]
   d6eb8:	4922      	ldr	r1, [pc, #136]	; (d6f44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6eba:	68db      	ldr	r3, [r3, #12]
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	2202      	movs	r2, #2
   d6ec0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6ec2:	792b      	ldrb	r3, [r5, #4]
   d6ec4:	06d8      	lsls	r0, r3, #27
   d6ec6:	d50b      	bpl.n	d6ee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6ec8:	6823      	ldr	r3, [r4, #0]
   d6eca:	491f      	ldr	r1, [pc, #124]	; (d6f48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6ecc:	68db      	ldr	r3, [r3, #12]
   d6ece:	2207      	movs	r2, #7
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	4798      	blx	r3
   d6ed4:	69ab      	ldr	r3, [r5, #24]
   d6ed6:	4a1d      	ldr	r2, [pc, #116]	; (d6f4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6ed8:	6a20      	ldr	r0, [r4, #32]
   d6eda:	2100      	movs	r1, #0
   d6edc:	f7ff f8d9 	bl	d6092 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6ee0:	792b      	ldrb	r3, [r5, #4]
   d6ee2:	0699      	lsls	r1, r3, #26
   d6ee4:	d511      	bpl.n	d6f0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6ee6:	06da      	lsls	r2, r3, #27
   d6ee8:	d505      	bpl.n	d6ef6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d6eea:	6823      	ldr	r3, [r4, #0]
   d6eec:	4912      	ldr	r1, [pc, #72]	; (d6f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6eee:	68db      	ldr	r3, [r3, #12]
   d6ef0:	2202      	movs	r2, #2
   d6ef2:	4620      	mov	r0, r4
   d6ef4:	4798      	blx	r3
            }
            write("details = ", 10);
   d6ef6:	6823      	ldr	r3, [r4, #0]
   d6ef8:	4915      	ldr	r1, [pc, #84]	; (d6f50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d6efa:	68db      	ldr	r3, [r3, #12]
   d6efc:	4620      	mov	r0, r4
   d6efe:	220a      	movs	r2, #10
   d6f00:	4798      	blx	r3
            write(attr.details);
   d6f02:	69e9      	ldr	r1, [r5, #28]
   d6f04:	4620      	mov	r0, r4
   d6f06:	f7ff f990 	bl	d622a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6f0a:	215d      	movs	r1, #93	; 0x5d
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	f7ff f99a 	bl	d6246 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6f12:	6823      	ldr	r3, [r4, #0]
   d6f14:	490f      	ldr	r1, [pc, #60]	; (d6f54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6f16:	68db      	ldr	r3, [r3, #12]
   d6f18:	4620      	mov	r0, r4
   d6f1a:	2202      	movs	r2, #2
}
   d6f1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6f20:	4718      	bx	r3
   d6f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f26:	bf00      	nop
   d6f28:	2003e710 	.word	0x2003e710
   d6f2c:	000d96b7 	.word	0x000d96b7
   d6f30:	000d96be 	.word	0x000d96be
   d6f34:	000d9418 	.word	0x000d9418
   d6f38:	000d96c1 	.word	0x000d96c1
   d6f3c:	000d96c6 	.word	0x000d96c6
   d6f40:	000d96c4 	.word	0x000d96c4
   d6f44:	000d96c9 	.word	0x000d96c9
   d6f48:	000d96cc 	.word	0x000d96cc
   d6f4c:	000d96d4 	.word	0x000d96d4
   d6f50:	000d96d7 	.word	0x000d96d7
   d6f54:	000d96e2 	.word	0x000d96e2

000d6f58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f5c:	b085      	sub	sp, #20
   d6f5e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6f62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6f64:	4606      	mov	r6, r0
   d6f66:	460f      	mov	r7, r1
   d6f68:	4691      	mov	r9, r2
   d6f6a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d6f6c:	f000 fd22 	bl	d79b4 <_Z16_fetch_usbserialv>
   d6f70:	4580      	cmp	r8, r0
   d6f72:	d105      	bne.n	d6f80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6f74:	484a      	ldr	r0, [pc, #296]	; (d70a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6f76:	f000 fffe 	bl	d7f76 <_ZN5spark12NetworkClass9listeningEv>
   d6f7a:	2800      	cmp	r0, #0
   d6f7c:	f040 808c 	bne.w	d7098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6f80:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6f82:	4a48      	ldr	r2, [pc, #288]	; (d70a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6f84:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6f86:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d6f8a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6f8c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6f8e:	f88d 8008 	strb.w	r8, [sp, #8]
   d6f92:	f001 f934 	bl	d81fe <_ZN5spark10JSONWriter11beginObjectEv>
   d6f96:	4641      	mov	r1, r8
   d6f98:	4648      	mov	r0, r9
   d6f9a:	f7fe fd5b 	bl	d5a54 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d6f9e:	4942      	ldr	r1, [pc, #264]	; (d70a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6fa0:	4680      	mov	r8, r0
   d6fa2:	2201      	movs	r2, #1
   d6fa4:	a801      	add	r0, sp, #4
   d6fa6:	f001 f9af 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d6faa:	4641      	mov	r1, r8
   d6fac:	f7ff f92d 	bl	d620a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d6fb0:	b13f      	cbz	r7, d6fc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6fb2:	493e      	ldr	r1, [pc, #248]	; (d70ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6fb4:	2201      	movs	r2, #1
   d6fb6:	a801      	add	r0, sp, #4
   d6fb8:	f001 f9a6 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d6fbc:	4639      	mov	r1, r7
   d6fbe:	f7ff f924 	bl	d620a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6fc2:	b13d      	cbz	r5, d6fd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6fc4:	493a      	ldr	r1, [pc, #232]	; (d70b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6fc6:	2201      	movs	r2, #1
   d6fc8:	a801      	add	r0, sp, #4
   d6fca:	f001 f99d 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d6fce:	4629      	mov	r1, r5
   d6fd0:	f7ff f91b 	bl	d620a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6fd4:	7923      	ldrb	r3, [r4, #4]
   d6fd6:	07df      	lsls	r7, r3, #31
   d6fd8:	d50e      	bpl.n	d6ff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d6fda:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6fdc:	212f      	movs	r1, #47	; 0x2f
   d6fde:	4628      	mov	r0, r5
   d6fe0:	f002 f914 	bl	d920c <strrchr>
    if (s1) {
   d6fe4:	b100      	cbz	r0, d6fe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6fe6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d6fe8:	4932      	ldr	r1, [pc, #200]	; (d70b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d6fea:	2201      	movs	r2, #1
   d6fec:	a801      	add	r0, sp, #4
   d6fee:	f001 f98b 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d6ff2:	4629      	mov	r1, r5
   d6ff4:	f7ff f909 	bl	d620a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6ff8:	7923      	ldrb	r3, [r4, #4]
   d6ffa:	079d      	lsls	r5, r3, #30
   d6ffc:	d507      	bpl.n	d700e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6ffe:	492e      	ldr	r1, [pc, #184]	; (d70b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7000:	2202      	movs	r2, #2
   d7002:	a801      	add	r0, sp, #4
   d7004:	f001 f980 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d7008:	68e1      	ldr	r1, [r4, #12]
   d700a:	f001 f905 	bl	d8218 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d700e:	7923      	ldrb	r3, [r4, #4]
   d7010:	0758      	lsls	r0, r3, #29
   d7012:	d516      	bpl.n	d7042 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7014:	6925      	ldr	r5, [r4, #16]
   d7016:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7018:	463b      	mov	r3, r7
   d701a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d701e:	b13a      	cbz	r2, d7030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7020:	2a20      	cmp	r2, #32
   d7022:	d101      	bne.n	d7028 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7024:	461d      	mov	r5, r3
   d7026:	e001      	b.n	d702c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7028:	2a28      	cmp	r2, #40	; 0x28
   d702a:	d001      	beq.n	d7030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d702c:	461f      	mov	r7, r3
   d702e:	e7f3      	b.n	d7018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7030:	2202      	movs	r2, #2
   d7032:	4922      	ldr	r1, [pc, #136]	; (d70bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7034:	a801      	add	r0, sp, #4
   d7036:	f001 f967 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d703a:	1b7a      	subs	r2, r7, r5
   d703c:	4629      	mov	r1, r5
   d703e:	f001 f972 	bl	d8326 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7042:	7923      	ldrb	r3, [r4, #4]
   d7044:	0719      	lsls	r1, r3, #28
   d7046:	d507      	bpl.n	d7058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7048:	491d      	ldr	r1, [pc, #116]	; (d70c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d704a:	2201      	movs	r2, #1
   d704c:	a801      	add	r0, sp, #4
   d704e:	f001 f95b 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d7052:	6961      	ldr	r1, [r4, #20]
   d7054:	f001 f8f2 	bl	d823c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7058:	7923      	ldrb	r3, [r4, #4]
   d705a:	06da      	lsls	r2, r3, #27
   d705c:	d508      	bpl.n	d7070 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d705e:	2204      	movs	r2, #4
   d7060:	4918      	ldr	r1, [pc, #96]	; (d70c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7062:	eb0d 0002 	add.w	r0, sp, r2
   d7066:	f001 f94f 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d706a:	69a1      	ldr	r1, [r4, #24]
   d706c:	f001 f8d4 	bl	d8218 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7070:	7923      	ldrb	r3, [r4, #4]
   d7072:	069b      	lsls	r3, r3, #26
   d7074:	d507      	bpl.n	d7086 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7076:	4914      	ldr	r1, [pc, #80]	; (d70c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7078:	2206      	movs	r2, #6
   d707a:	a801      	add	r0, sp, #4
   d707c:	f001 f944 	bl	d8308 <_ZN5spark10JSONWriter4nameEPKcj>
   d7080:	69e1      	ldr	r1, [r4, #28]
   d7082:	f7ff f8c2 	bl	d620a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7086:	a801      	add	r0, sp, #4
   d7088:	f001 f8a3 	bl	d81d2 <_ZN5spark10JSONWriter9endObjectEv>
   d708c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d708e:	490f      	ldr	r1, [pc, #60]	; (d70cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7090:	6803      	ldr	r3, [r0, #0]
   d7092:	2202      	movs	r2, #2
   d7094:	68db      	ldr	r3, [r3, #12]
   d7096:	4798      	blx	r3
}
   d7098:	b005      	add	sp, #20
   d709a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d709e:	bf00      	nop
   d70a0:	2003e710 	.word	0x2003e710
   d70a4:	000d961c 	.word	0x000d961c
   d70a8:	000d964e 	.word	0x000d964e
   d70ac:	000d9661 	.word	0x000d9661
   d70b0:	000d9716 	.word	0x000d9716
   d70b4:	000d94c3 	.word	0x000d94c3
   d70b8:	000d96e5 	.word	0x000d96e5
   d70bc:	000d96e8 	.word	0x000d96e8
   d70c0:	000d9676 	.word	0x000d9676
   d70c4:	000d96eb 	.word	0x000d96eb
   d70c8:	000d96f0 	.word	0x000d96f0
   d70cc:	000d96e2 	.word	0x000d96e2

000d70d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d70d0:	4b02      	ldr	r3, [pc, #8]	; (d70dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d70d2:	681a      	ldr	r2, [r3, #0]
   d70d4:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d70d6:	601a      	str	r2, [r3, #0]
   d70d8:	4770      	bx	lr
   d70da:	bf00      	nop
   d70dc:	2003e1dc 	.word	0x2003e1dc
   d70e0:	2003e350 	.word	0x2003e350

000d70e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d70e4:	2100      	movs	r1, #0
   d70e6:	f7fe bccd 	b.w	d5a84 <system_delay_ms>

000d70ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d70ea:	b510      	push	{r4, lr}
   d70ec:	4604      	mov	r4, r0
   d70ee:	f7fd f831 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d70f2:	4620      	mov	r0, r4
   d70f4:	bd10      	pop	{r4, pc}
	...

000d70f8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70f8:	4803      	ldr	r0, [pc, #12]	; (d7108 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d70fa:	4a04      	ldr	r2, [pc, #16]	; (d710c <_GLOBAL__sub_I_RGB+0x14>)
   d70fc:	4904      	ldr	r1, [pc, #16]	; (d7110 <_GLOBAL__sub_I_RGB+0x18>)
   d70fe:	2300      	movs	r3, #0
   d7100:	6083      	str	r3, [r0, #8]
   d7102:	f001 ba33 	b.w	d856c <__aeabi_atexit>
   d7106:	bf00      	nop
   d7108:	2003e354 	.word	0x2003e354
   d710c:	2003e248 	.word	0x2003e248
   d7110:	000d70eb 	.word	0x000d70eb

000d7114 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7114:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7116:	4b0c      	ldr	r3, [pc, #48]	; (d7148 <serialEventRun+0x34>)
   d7118:	b133      	cbz	r3, d7128 <serialEventRun+0x14>
   d711a:	f000 fc4b 	bl	d79b4 <_Z16_fetch_usbserialv>
   d711e:	6803      	ldr	r3, [r0, #0]
   d7120:	691b      	ldr	r3, [r3, #16]
   d7122:	4798      	blx	r3
   d7124:	2800      	cmp	r0, #0
   d7126:	dc09      	bgt.n	d713c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7128:	4b08      	ldr	r3, [pc, #32]	; (d714c <serialEventRun+0x38>)
   d712a:	b163      	cbz	r3, d7146 <serialEventRun+0x32>
   d712c:	f000 fd34 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d7130:	6803      	ldr	r3, [r0, #0]
   d7132:	691b      	ldr	r3, [r3, #16]
   d7134:	4798      	blx	r3
   d7136:	2800      	cmp	r0, #0
   d7138:	dc03      	bgt.n	d7142 <serialEventRun+0x2e>
   d713a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d713c:	f3af 8000 	nop.w
   d7140:	e7f2      	b.n	d7128 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7142:	f3af 8000 	nop.w
   d7146:	bd08      	pop	{r3, pc}
	...

000d7150 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7150:	b508      	push	{r3, lr}
	serialEventRun();
   d7152:	f7ff ffdf 	bl	d7114 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7156:	f7fe faed 	bl	d5734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d715a:	4b01      	ldr	r3, [pc, #4]	; (d7160 <_post_loop+0x10>)
   d715c:	6018      	str	r0, [r3, #0]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	2003e728 	.word	0x2003e728

000d7164 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7164:	4802      	ldr	r0, [pc, #8]	; (d7170 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7166:	4a03      	ldr	r2, [pc, #12]	; (d7174 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7168:	4903      	ldr	r1, [pc, #12]	; (d7178 <_Z33system_initialize_user_backup_ramv+0x14>)
   d716a:	1a12      	subs	r2, r2, r0
   d716c:	f001 bf96 	b.w	d909c <memcpy>
   d7170:	2003f400 	.word	0x2003f400
   d7174:	2003f404 	.word	0x2003f404
   d7178:	000d9ad0 	.word	0x000d9ad0

000d717c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d717c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d717e:	2300      	movs	r3, #0
   d7180:	9300      	str	r3, [sp, #0]
   d7182:	461a      	mov	r2, r3
   d7184:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7188:	f7fe fc9e 	bl	d5ac8 <system_ctrl_set_result>
}
   d718c:	b003      	add	sp, #12
   d718e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7194 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7194:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7196:	8843      	ldrh	r3, [r0, #2]
   d7198:	2b0a      	cmp	r3, #10
   d719a:	d008      	beq.n	d71ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d719c:	2b50      	cmp	r3, #80	; 0x50
   d719e:	d109      	bne.n	d71b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d71a0:	4b09      	ldr	r3, [pc, #36]	; (d71c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d71a2:	681b      	ldr	r3, [r3, #0]
   d71a4:	b13b      	cbz	r3, d71b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d71a6:	b003      	add	sp, #12
   d71a8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d71ac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d71ae:	f7ff ffe5 	bl	d717c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d71b2:	e006      	b.n	d71c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71b4:	2300      	movs	r3, #0
   d71b6:	9300      	str	r3, [sp, #0]
   d71b8:	461a      	mov	r2, r3
   d71ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71be:	f7fe fc83 	bl	d5ac8 <system_ctrl_set_result>
        break;
    }
}
   d71c2:	b003      	add	sp, #12
   d71c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d71c8:	2003e364 	.word	0x2003e364

000d71cc <module_user_init_hook>:

void module_user_init_hook()
{
   d71cc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d71ce:	4c10      	ldr	r4, [pc, #64]	; (d7210 <module_user_init_hook+0x44>)
   d71d0:	4d10      	ldr	r5, [pc, #64]	; (d7214 <module_user_init_hook+0x48>)
   d71d2:	6823      	ldr	r3, [r4, #0]
   d71d4:	42ab      	cmp	r3, r5
   d71d6:	4b10      	ldr	r3, [pc, #64]	; (d7218 <module_user_init_hook+0x4c>)
   d71d8:	bf0c      	ite	eq
   d71da:	2201      	moveq	r2, #1
   d71dc:	2200      	movne	r2, #0
   d71de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d71e0:	d002      	beq.n	d71e8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d71e2:	f7ff ffbf 	bl	d7164 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d71e6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d71e8:	f7fe fa94 	bl	d5714 <HAL_RNG_GetRandomNumber>
   d71ec:	4604      	mov	r4, r0
    srand(seed);
   d71ee:	f001 ff83 	bl	d90f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d71f2:	4b0a      	ldr	r3, [pc, #40]	; (d721c <module_user_init_hook+0x50>)
   d71f4:	b113      	cbz	r3, d71fc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d71f6:	4620      	mov	r0, r4
   d71f8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d71fc:	2100      	movs	r1, #0
   d71fe:	4807      	ldr	r0, [pc, #28]	; (d721c <module_user_init_hook+0x50>)
   d7200:	f7fe fcdc 	bl	d5bbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7204:	2100      	movs	r1, #0
   d7206:	4806      	ldr	r0, [pc, #24]	; (d7220 <module_user_init_hook+0x54>)
}
   d7208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d720c:	f7fe bc52 	b.w	d5ab4 <system_ctrl_set_app_request_handler>
   d7210:	2003f400 	.word	0x2003f400
   d7214:	9a271c1e 	.word	0x9a271c1e
   d7218:	2003e368 	.word	0x2003e368
   d721c:	00000000 	.word	0x00000000
   d7220:	000d7195 	.word	0x000d7195

000d7224 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7224:	4770      	bx	lr

000d7226 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7226:	2000      	movs	r0, #0
   d7228:	4770      	bx	lr

000d722a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d722a:	b510      	push	{r4, lr}
   d722c:	2110      	movs	r1, #16
   d722e:	4604      	mov	r4, r0
   d7230:	f001 f9aa 	bl	d8588 <_ZdlPvj>
   d7234:	4620      	mov	r0, r4
   d7236:	bd10      	pop	{r4, pc}

000d7238 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7238:	b508      	push	{r3, lr}
      { delete this; }
   d723a:	b108      	cbz	r0, d7240 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d723c:	f7ff fff5 	bl	d722a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7240:	bd08      	pop	{r3, pc}

000d7242 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7242:	2200      	movs	r2, #0
   d7244:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7246:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7248:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d724c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d724e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7252:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7254:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7256:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7258:	680c      	ldr	r4, [r1, #0]
   d725a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d725c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d725e:	bd10      	pop	{r4, pc}

000d7260 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7260:	b510      	push	{r4, lr}
   d7262:	4604      	mov	r4, r0
    free((void*)msg_);
   d7264:	6800      	ldr	r0, [r0, #0]
   d7266:	f7fe fcb9 	bl	d5bdc <free>
}
   d726a:	4620      	mov	r0, r4
   d726c:	bd10      	pop	{r4, pc}

000d726e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d726e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7270:	68c4      	ldr	r4, [r0, #12]
   d7272:	b1f4      	cbz	r4, d72b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7274:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7276:	2b02      	cmp	r3, #2
   d7278:	d103      	bne.n	d7282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d727a:	f104 000c 	add.w	r0, r4, #12
   d727e:	f7ff ffef 	bl	d7260 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7282:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7284:	b135      	cbz	r5, d7294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7286:	4628      	mov	r0, r5
   d7288:	f7fc ff64 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d728c:	2110      	movs	r1, #16
   d728e:	4628      	mov	r0, r5
   d7290:	f001 f97a 	bl	d8588 <_ZdlPvj>
   d7294:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7296:	b135      	cbz	r5, d72a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7298:	4628      	mov	r0, r5
   d729a:	f7fc ff5b 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d729e:	2110      	movs	r1, #16
   d72a0:	4628      	mov	r0, r5
   d72a2:	f001 f971 	bl	d8588 <_ZdlPvj>
   d72a6:	4620      	mov	r0, r4
   d72a8:	2114      	movs	r1, #20
   d72aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d72ae:	f001 b96b 	b.w	d8588 <_ZdlPvj>
   d72b2:	bd38      	pop	{r3, r4, r5, pc}

000d72b4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d72b4:	b510      	push	{r4, lr}
   d72b6:	b088      	sub	sp, #32
   d72b8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d72ba:	4668      	mov	r0, sp
   d72bc:	f7fe fd8d 	bl	d5dda <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d72c0:	4669      	mov	r1, sp
   d72c2:	a804      	add	r0, sp, #16
   d72c4:	f7fe fdc8 	bl	d5e58 <_ZN6StringC1ERKS_>
   d72c8:	a804      	add	r0, sp, #16
   d72ca:	47a0      	blx	r4
   d72cc:	4604      	mov	r4, r0
   d72ce:	a804      	add	r0, sp, #16
   d72d0:	f7fe fd3c 	bl	d5d4c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d72d4:	4668      	mov	r0, sp
   d72d6:	f7fe fd39 	bl	d5d4c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d72da:	4620      	mov	r0, r4
   d72dc:	b008      	add	sp, #32
   d72de:	bd10      	pop	{r4, pc}

000d72e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d72e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d72e2:	2410      	movs	r4, #16
   d72e4:	b085      	sub	sp, #20
   d72e6:	4607      	mov	r7, r0
   d72e8:	460e      	mov	r6, r1
   d72ea:	4615      	mov	r5, r2
   d72ec:	2100      	movs	r1, #0
   d72ee:	4622      	mov	r2, r4
   d72f0:	4668      	mov	r0, sp
   d72f2:	f001 fef9 	bl	d90e8 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d72f6:	2200      	movs	r2, #0
   d72f8:	4669      	mov	r1, sp
   d72fa:	4610      	mov	r0, r2
         size = sizeof(*this);
   d72fc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d7300:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d7302:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d7304:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7306:	f7fe fc39 	bl	d5b7c <spark_function>
}
   d730a:	b005      	add	sp, #20
   d730c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d730e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d730e:	b513      	push	{r0, r1, r4, lr}
   d7310:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7312:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7316:	2300      	movs	r3, #0
   d7318:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d731a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d731c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d731e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7320:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7322:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7324:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7326:	f7fc ffb5 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d732a:	4620      	mov	r0, r4
   d732c:	b002      	add	sp, #8
   d732e:	bd10      	pop	{r4, pc}

000d7330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7332:	460c      	mov	r4, r1
   d7334:	ad02      	add	r5, sp, #8
   d7336:	f854 3b04 	ldr.w	r3, [r4], #4
   d733a:	f845 3d08 	str.w	r3, [r5, #-8]!
   d733e:	4606      	mov	r6, r0
   d7340:	460f      	mov	r7, r1
   d7342:	a801      	add	r0, sp, #4
   d7344:	4621      	mov	r1, r4
   d7346:	f7fe fe15 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d734a:	4629      	mov	r1, r5
   d734c:	4630      	mov	r0, r6
   d734e:	f7ff ffde 	bl	d730e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7352:	a801      	add	r0, sp, #4
   d7354:	f7fc ff9e 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7358:	4620      	mov	r0, r4
   d735a:	f7fc ff9b 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d735e:	4638      	mov	r0, r7
   d7360:	2108      	movs	r1, #8
   d7362:	f001 f911 	bl	d8588 <_ZdlPvj>
        return p;
    }
   d7366:	4630      	mov	r0, r6
   d7368:	b003      	add	sp, #12
   d736a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d736c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d736c:	b538      	push	{r3, r4, r5, lr}
   d736e:	2300      	movs	r3, #0
   d7370:	4604      	mov	r4, r0
   d7372:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7374:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7376:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7378:	f7fc fe8f 	bl	d409a <_Znwj>
   d737c:	b128      	cbz	r0, d738a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d737e:	2301      	movs	r3, #1
   d7380:	6043      	str	r3, [r0, #4]
   d7382:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7384:	4b02      	ldr	r3, [pc, #8]	; (d7390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7386:	6003      	str	r3, [r0, #0]
   d7388:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d738a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d738c:	4620      	mov	r0, r4
   d738e:	bd38      	pop	{r3, r4, r5, pc}
   d7390:	000d9798 	.word	0x000d9798

000d7394 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7394:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7396:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7398:	b90a      	cbnz	r2, d739e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d739a:	f001 f908 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d739e:	68c3      	ldr	r3, [r0, #12]
    }
   d73a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73a4:	4718      	bx	r3

000d73a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d73a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d73aa:	f100 0110 	add.w	r1, r0, #16
   d73ae:	f7ff fff1 	bl	d7394 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d73b2:	bd08      	pop	{r3, pc}

000d73b4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73b4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d73b6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73b8:	b90a      	cbnz	r2, d73be <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d73ba:	f001 f8f8 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73be:	68c3      	ldr	r3, [r0, #12]
    }
   d73c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73c4:	4718      	bx	r3

000d73c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73c6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d73c8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d73ca:	f100 0110 	add.w	r1, r0, #16
   d73ce:	f7ff fff1 	bl	d73b4 <_ZNKSt8functionIFvRKbEEclES1_>
   d73d2:	bd08      	pop	{r3, pc}

000d73d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d73d4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d73d6:	2300      	movs	r3, #0
   d73d8:	6083      	str	r3, [r0, #8]
   d73da:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d73dc:	4604      	mov	r4, r0
   d73de:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d73e0:	b12b      	cbz	r3, d73ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d73e2:	2202      	movs	r2, #2
   d73e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d73e6:	68eb      	ldr	r3, [r5, #12]
   d73e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d73ea:	68ab      	ldr	r3, [r5, #8]
   d73ec:	60a3      	str	r3, [r4, #8]
	}
    }
   d73ee:	4620      	mov	r0, r4
   d73f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d73f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d73f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d73f6:	b089      	sub	sp, #36	; 0x24
   d73f8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d73fa:	4668      	mov	r0, sp
   d73fc:	f7ff ff21 	bl	d7242 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7400:	2300      	movs	r3, #0
   d7402:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7406:	f04f 0202 	mov.w	r2, #2
   d740a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d740e:	2b00      	cmp	r3, #0
   d7410:	d103      	bne.n	d741a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7412:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7416:	2900      	cmp	r1, #0
   d7418:	d1f7      	bne.n	d740a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d741a:	d002      	beq.n	d7422 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d741c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7420:	e063      	b.n	d74ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7422:	f114 050c 	adds.w	r5, r4, #12
   d7426:	d003      	beq.n	d7430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7428:	4669      	mov	r1, sp
   d742a:	4628      	mov	r0, r5
   d742c:	f7ff ff09 	bl	d7242 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7430:	f3bf 8f5f 	dmb	sy
   d7434:	2301      	movs	r3, #1
   d7436:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7438:	2000      	movs	r0, #0
   d743a:	f104 0308 	add.w	r3, r4, #8
   d743e:	f3bf 8f5f 	dmb	sy
   d7442:	e853 6f00 	ldrex	r6, [r3]
   d7446:	e843 0200 	strex	r2, r0, [r3]
   d744a:	2a00      	cmp	r2, #0
   d744c:	d1f9      	bne.n	d7442 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d744e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7452:	2e00      	cmp	r6, #0
   d7454:	d049      	beq.n	d74ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7456:	f7fe fb1d 	bl	d5a94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d745a:	b120      	cbz	r0, d7466 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d745c:	4629      	mov	r1, r5
   d745e:	4630      	mov	r0, r6
   d7460:	f7ff ff98 	bl	d7394 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7464:	e03a      	b.n	d74dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7466:	4631      	mov	r1, r6
   d7468:	a802      	add	r0, sp, #8
   d746a:	f7ff ffb3 	bl	d73d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d746e:	68e0      	ldr	r0, [r4, #12]
   d7470:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7474:	b108      	cbz	r0, d747a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7476:	f001 fe91 	bl	d919c <strdup>
   d747a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d747c:	2010      	movs	r0, #16
   d747e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7482:	f7fc fe0a 	bl	d409a <_Znwj>
   d7486:	4605      	mov	r5, r0
   d7488:	b1e8      	cbz	r0, d74c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d748a:	2700      	movs	r7, #0
   d748c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d748e:	2018      	movs	r0, #24
   d7490:	f7fc fe03 	bl	d409a <_Znwj>
   d7494:	4604      	mov	r4, r0
   d7496:	b188      	cbz	r0, d74bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7498:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d749a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d749c:	a802      	add	r0, sp, #8
   d749e:	f7fd ffb5 	bl	d540c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74a2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d74a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d74a6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74a8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d74aa:	9204      	str	r2, [sp, #16]
   d74ac:	a906      	add	r1, sp, #24
   d74ae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d74b0:	60e3      	str	r3, [r4, #12]
   d74b2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d74b6:	9205      	str	r2, [sp, #20]
   d74b8:	f7ff fec3 	bl	d7242 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d74bc:	4b0d      	ldr	r3, [pc, #52]	; (d74f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d74be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74c0:	4b0d      	ldr	r3, [pc, #52]	; (d74f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74c2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d74c4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d74c6:	a806      	add	r0, sp, #24
   d74c8:	f7ff feca 	bl	d7260 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74cc:	a802      	add	r0, sp, #8
   d74ce:	f7fc fe41 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d74d2:	2200      	movs	r2, #0
   d74d4:	4629      	mov	r1, r5
   d74d6:	4809      	ldr	r0, [pc, #36]	; (d74fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d74d8:	f7fe fae4 	bl	d5aa4 <application_thread_invoke>
   d74dc:	4630      	mov	r0, r6
   d74de:	f7fc fe39 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d74e2:	2110      	movs	r1, #16
   d74e4:	4630      	mov	r0, r6
   d74e6:	f001 f84f 	bl	d8588 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d74ea:	4668      	mov	r0, sp
   d74ec:	f7ff feb8 	bl	d7260 <_ZN8particle5ErrorD1Ev>
    }
   d74f0:	b009      	add	sp, #36	; 0x24
   d74f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d74f4:	000d73a7 	.word	0x000d73a7
   d74f8:	000d761d 	.word	0x000d761d
   d74fc:	000d7be5 	.word	0x000d7be5

000d7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7504:	b08b      	sub	sp, #44	; 0x2c
   d7506:	4606      	mov	r6, r0
   d7508:	460f      	mov	r7, r1
   d750a:	4690      	mov	r8, r2
   d750c:	4699      	mov	r9, r3
   d750e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7512:	f7fe fb3b 	bl	d5b8c <spark_cloud_flag_connected>
   d7516:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7518:	4683      	mov	fp, r0
   d751a:	bb30      	cbnz	r0, d756a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d751c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7520:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7522:	a905      	add	r1, sp, #20
   d7524:	4628      	mov	r0, r5
   d7526:	f8ad 3018 	strh.w	r3, [sp, #24]
   d752a:	f7ff fe8a 	bl	d7242 <_ZN8particle5ErrorC1EOS0_>
   d752e:	2014      	movs	r0, #20
   d7530:	f7fc fdb3 	bl	d409a <_Znwj>
   d7534:	4604      	mov	r4, r0
   d7536:	b158      	cbz	r0, d7550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7538:	2302      	movs	r3, #2
   d753a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d753c:	2301      	movs	r3, #1
   d753e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7540:	f8c0 b004 	str.w	fp, [r0, #4]
   d7544:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7548:	4629      	mov	r1, r5
   d754a:	300c      	adds	r0, #12
   d754c:	f7ff fe79 	bl	d7242 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7550:	4630      	mov	r0, r6
   d7552:	4621      	mov	r1, r4
   d7554:	f840 4b04 	str.w	r4, [r0], #4
   d7558:	f7ff ff08 	bl	d736c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d755c:	4628      	mov	r0, r5
   d755e:	f7ff fe7f 	bl	d7260 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7562:	a805      	add	r0, sp, #20
   d7564:	f7ff fe7c 	bl	d7260 <_ZN8particle5ErrorD1Ev>
   d7568:	e052      	b.n	d7610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d756a:	2400      	movs	r4, #0
   d756c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d756e:	2014      	movs	r0, #20
   d7570:	606c      	str	r4, [r5, #4]
   d7572:	60ac      	str	r4, [r5, #8]
   d7574:	9307      	str	r3, [sp, #28]
   d7576:	f7fc fd90 	bl	d409a <_Znwj>
   d757a:	4601      	mov	r1, r0
   d757c:	b118      	cbz	r0, d7586 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d757e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7580:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7582:	6044      	str	r4, [r0, #4]
   d7584:	6084      	str	r4, [r0, #8]
   d7586:	a804      	add	r0, sp, #16
   d7588:	9103      	str	r1, [sp, #12]
   d758a:	f7ff feef 	bl	d736c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d758e:	4b22      	ldr	r3, [pc, #136]	; (d7618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7590:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7592:	2008      	movs	r0, #8
   d7594:	f7fc fd81 	bl	d409a <_Znwj>
   d7598:	4604      	mov	r4, r0
   d759a:	b128      	cbz	r0, d75a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d759c:	9b03      	ldr	r3, [sp, #12]
   d759e:	f840 3b04 	str.w	r3, [r0], #4
   d75a2:	a904      	add	r1, sp, #16
   d75a4:	f7fe fce6 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75a8:	9500      	str	r5, [sp, #0]
   d75aa:	fa5f f38a 	uxtb.w	r3, sl
   d75ae:	464a      	mov	r2, r9
   d75b0:	4641      	mov	r1, r8
   d75b2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d75b4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75b6:	f7fe faf1 	bl	d5b9c <spark_send_event>
   d75ba:	b920      	cbnz	r0, d75c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d75bc:	9b03      	ldr	r3, [sp, #12]
   d75be:	785b      	ldrb	r3, [r3, #1]
   d75c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d75c4:	b183      	cbz	r3, d75e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d75c6:	9b03      	ldr	r3, [sp, #12]
   d75c8:	9305      	str	r3, [sp, #20]
   d75ca:	a904      	add	r1, sp, #16
   d75cc:	a806      	add	r0, sp, #24
   d75ce:	f7fe fcd1 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d75d2:	a905      	add	r1, sp, #20
   d75d4:	4630      	mov	r0, r6
   d75d6:	f7ff fe9a 	bl	d730e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d75da:	a806      	add	r0, sp, #24
   d75dc:	f7fc fe5a 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75e0:	a804      	add	r0, sp, #16
   d75e2:	f7fc fe57 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75e6:	e013      	b.n	d7610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d75e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d75ec:	a905      	add	r1, sp, #20
   d75ee:	a803      	add	r0, sp, #12
   d75f0:	9205      	str	r2, [sp, #20]
   d75f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d75f6:	f7ff fefd 	bl	d73f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d75fa:	a805      	add	r0, sp, #20
   d75fc:	f7ff fe30 	bl	d7260 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7600:	a805      	add	r0, sp, #20
   d7602:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7604:	f7ff fe94 	bl	d7330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7608:	a806      	add	r0, sp, #24
   d760a:	f7fc fe43 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d760e:	e7da      	b.n	d75c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7610:	4630      	mov	r0, r6
   d7612:	b00b      	add	sp, #44	; 0x2c
   d7614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7618:	000d778d 	.word	0x000d778d

000d761c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d761c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d761e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7620:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7622:	d006      	beq.n	d7632 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7624:	2a03      	cmp	r2, #3
   d7626:	d017      	beq.n	d7658 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7628:	2a01      	cmp	r2, #1
   d762a:	d122      	bne.n	d7672 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d762c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d762e:	6003      	str	r3, [r0, #0]
	      break;
   d7630:	e01f      	b.n	d7672 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7632:	2018      	movs	r0, #24
   d7634:	680e      	ldr	r6, [r1, #0]
   d7636:	f7fc fd30 	bl	d409a <_Znwj>
   d763a:	4605      	mov	r5, r0
   d763c:	b150      	cbz	r0, d7654 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d763e:	4631      	mov	r1, r6
   d7640:	f7ff fec8 	bl	d73d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7644:	6930      	ldr	r0, [r6, #16]
   d7646:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d764a:	b108      	cbz	r0, d7650 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d764c:	f001 fda6 	bl	d919c <strdup>
   d7650:	6128      	str	r0, [r5, #16]
   d7652:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7654:	6025      	str	r5, [r4, #0]
   d7656:	e00c      	b.n	d7672 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7658:	6804      	ldr	r4, [r0, #0]
   d765a:	b154      	cbz	r4, d7672 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d765c:	f104 0010 	add.w	r0, r4, #16
   d7660:	f7ff fdfe 	bl	d7260 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7664:	4620      	mov	r0, r4
   d7666:	f7fc fd75 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d766a:	2118      	movs	r1, #24
   d766c:	4620      	mov	r0, r4
   d766e:	f000 ff8b 	bl	d8588 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7672:	2000      	movs	r0, #0
   d7674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7676 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7676:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7678:	2300      	movs	r3, #0
   d767a:	6083      	str	r3, [r0, #8]
   d767c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d767e:	4604      	mov	r4, r0
   d7680:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7682:	b12b      	cbz	r3, d7690 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7684:	2202      	movs	r2, #2
   d7686:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7688:	68eb      	ldr	r3, [r5, #12]
   d768a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d768c:	68ab      	ldr	r3, [r5, #8]
   d768e:	60a3      	str	r3, [r4, #8]
	}
    }
   d7690:	4620      	mov	r0, r4
   d7692:	bd38      	pop	{r3, r4, r5, pc}

000d7694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7694:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7696:	b570      	push	{r4, r5, r6, lr}
   d7698:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d769a:	d006      	beq.n	d76aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d769c:	2a03      	cmp	r2, #3
   d769e:	d011      	beq.n	d76c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d76a0:	2a01      	cmp	r2, #1
   d76a2:	d118      	bne.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d76a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d76a6:	6003      	str	r3, [r0, #0]
	      break;
   d76a8:	e015      	b.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d76aa:	2014      	movs	r0, #20
   d76ac:	680e      	ldr	r6, [r1, #0]
   d76ae:	f7fc fcf4 	bl	d409a <_Znwj>
   d76b2:	4605      	mov	r5, r0
   d76b4:	b120      	cbz	r0, d76c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d76b6:	4631      	mov	r1, r6
   d76b8:	f7ff ffdd 	bl	d7676 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d76bc:	7c33      	ldrb	r3, [r6, #16]
   d76be:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d76c0:	6025      	str	r5, [r4, #0]
   d76c2:	e008      	b.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d76c4:	6804      	ldr	r4, [r0, #0]
   d76c6:	b134      	cbz	r4, d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d76c8:	4620      	mov	r0, r4
   d76ca:	f7fc fd43 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d76ce:	2114      	movs	r1, #20
   d76d0:	4620      	mov	r0, r4
   d76d2:	f000 ff59 	bl	d8588 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d76d6:	2000      	movs	r0, #0
   d76d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d76dc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d76de:	2300      	movs	r3, #0
   d76e0:	b087      	sub	sp, #28
   d76e2:	460c      	mov	r4, r1
   d76e4:	f3bf 8f5f 	dmb	sy
   d76e8:	e850 6f00 	ldrex	r6, [r0]
   d76ec:	e840 3200 	strex	r2, r3, [r0]
   d76f0:	2a00      	cmp	r2, #0
   d76f2:	d1f9      	bne.n	d76e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d76f4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d76f8:	2e00      	cmp	r6, #0
   d76fa:	d03f      	beq.n	d777c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d76fc:	4618      	mov	r0, r3
   d76fe:	f7fe f9c9 	bl	d5a94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7702:	4607      	mov	r7, r0
   d7704:	b120      	cbz	r0, d7710 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7706:	4621      	mov	r1, r4
   d7708:	4630      	mov	r0, r6
   d770a:	f7ff fe53 	bl	d73b4 <_ZNKSt8functionIFvRKbEEclES1_>
   d770e:	e02e      	b.n	d776e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7710:	4631      	mov	r1, r6
   d7712:	a801      	add	r0, sp, #4
   d7714:	f7ff ffaf 	bl	d7676 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7718:	7823      	ldrb	r3, [r4, #0]
   d771a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d771e:	2010      	movs	r0, #16
   d7720:	f7fc fcbb 	bl	d409a <_Znwj>
   d7724:	4605      	mov	r5, r0
   d7726:	b1d0      	cbz	r0, d775e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7728:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d772a:	2014      	movs	r0, #20
   d772c:	f7fc fcb5 	bl	d409a <_Znwj>
   d7730:	4604      	mov	r4, r0
   d7732:	b178      	cbz	r0, d7754 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7734:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7736:	4601      	mov	r1, r0
   d7738:	a801      	add	r0, sp, #4
   d773a:	f7fd fe67 	bl	d540c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d773e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7740:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7742:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7744:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7746:	9203      	str	r2, [sp, #12]
   d7748:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d774a:	60e3      	str	r3, [r4, #12]
   d774c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7750:	9204      	str	r2, [sp, #16]
   d7752:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7754:	4b0a      	ldr	r3, [pc, #40]	; (d7780 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7756:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7758:	4b0a      	ldr	r3, [pc, #40]	; (d7784 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d775a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d775c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d775e:	a801      	add	r0, sp, #4
   d7760:	f7fc fcf8 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7764:	2200      	movs	r2, #0
   d7766:	4629      	mov	r1, r5
   d7768:	4807      	ldr	r0, [pc, #28]	; (d7788 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d776a:	f7fe f99b 	bl	d5aa4 <application_thread_invoke>
   d776e:	4630      	mov	r0, r6
   d7770:	f7fc fcf0 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7774:	2110      	movs	r1, #16
   d7776:	4630      	mov	r0, r6
   d7778:	f000 ff06 	bl	d8588 <_ZdlPvj>
        }
    }
   d777c:	b007      	add	sp, #28
   d777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7780:	000d73c7 	.word	0x000d73c7
   d7784:	000d7695 	.word	0x000d7695
   d7788:	000d7be5 	.word	0x000d7be5

000d778c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d778c:	b530      	push	{r4, r5, lr}
   d778e:	b085      	sub	sp, #20
   d7790:	4604      	mov	r4, r0
   d7792:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7794:	4668      	mov	r0, sp
   d7796:	4611      	mov	r1, r2
   d7798:	f7ff fdca 	bl	d7330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d779c:	b17c      	cbz	r4, d77be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d779e:	b224      	sxth	r4, r4
   d77a0:	4628      	mov	r0, r5
   d77a2:	b10d      	cbz	r5, d77a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d77a4:	f001 fcfa 	bl	d919c <strdup>
   d77a8:	9002      	str	r0, [sp, #8]
   d77aa:	a902      	add	r1, sp, #8
   d77ac:	4668      	mov	r0, sp
   d77ae:	f8ad 400c 	strh.w	r4, [sp, #12]
   d77b2:	f7ff fe1f 	bl	d73f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d77b6:	a802      	add	r0, sp, #8
   d77b8:	f7ff fd52 	bl	d7260 <_ZN8particle5ErrorD1Ev>
   d77bc:	e01d      	b.n	d77fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d77be:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d77c0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d77c4:	f04f 0201 	mov.w	r2, #1
   d77c8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d77cc:	42a3      	cmp	r3, r4
   d77ce:	d103      	bne.n	d77d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d77d0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d77d4:	2900      	cmp	r1, #0
   d77d6:	d1f7      	bne.n	d77c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d77d8:	d002      	beq.n	d77e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d77da:	f88d 3008 	strb.w	r3, [sp, #8]
   d77de:	e00c      	b.n	d77fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d77e0:	f110 010c 	adds.w	r1, r0, #12
   d77e4:	f04f 0301 	mov.w	r3, #1
   d77e8:	bf18      	it	ne
   d77ea:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d77ec:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d77f0:	3004      	adds	r0, #4
   d77f2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d77f6:	f7ff ff71 	bl	d76dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d77fa:	a801      	add	r0, sp, #4
   d77fc:	f7fc fd4a 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7800:	b005      	add	sp, #20
   d7802:	bd30      	pop	{r4, r5, pc}

000d7804 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7804:	4770      	bx	lr

000d7806 <_ZN9IPAddressD0Ev>:
   d7806:	b510      	push	{r4, lr}
   d7808:	2118      	movs	r1, #24
   d780a:	4604      	mov	r4, r0
   d780c:	f000 febc 	bl	d8588 <_ZdlPvj>
   d7810:	4620      	mov	r0, r4
   d7812:	bd10      	pop	{r4, pc}

000d7814 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7814:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7816:	7d03      	ldrb	r3, [r0, #20]
   d7818:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d781a:	b08d      	sub	sp, #52	; 0x34
   d781c:	460e      	mov	r6, r1
   d781e:	f100 0704 	add.w	r7, r0, #4
   d7822:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7826:	d002      	beq.n	d782e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7828:	f100 0508 	add.w	r5, r0, #8
   d782c:	e018      	b.n	d7860 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d782e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7830:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7832:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7836:	232f      	movs	r3, #47	; 0x2f
   d7838:	462a      	mov	r2, r5
   d783a:	200a      	movs	r0, #10
   d783c:	f7fe f802 	bl	d5844 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7840:	4628      	mov	r0, r5
   d7842:	f001 fcc6 	bl	d91d2 <strlen>
   d7846:	6833      	ldr	r3, [r6, #0]
   d7848:	4602      	mov	r2, r0
   d784a:	68db      	ldr	r3, [r3, #12]
   d784c:	4629      	mov	r1, r5
   d784e:	4630      	mov	r0, r6
   d7850:	4798      	blx	r3
   d7852:	e00f      	b.n	d7874 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7854:	b124      	cbz	r4, d7860 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7856:	212e      	movs	r1, #46	; 0x2e
   d7858:	4630      	mov	r0, r6
   d785a:	f7fe fbe1 	bl	d6020 <_ZN5Print5printEc>
   d785e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7860:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7864:	220a      	movs	r2, #10
   d7866:	4630      	mov	r0, r6
   d7868:	f7fe fbf3 	bl	d6052 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d786c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d786e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7870:	d1f0      	bne.n	d7854 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7872:	4620      	mov	r0, r4
    }
    return n;
}
   d7874:	b00d      	add	sp, #52	; 0x34
   d7876:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7878 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7878:	b510      	push	{r4, lr}
   d787a:	4b05      	ldr	r3, [pc, #20]	; (d7890 <_ZN9IPAddressC1Ev+0x18>)
   d787c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d787e:	2211      	movs	r2, #17
   d7880:	f840 3b04 	str.w	r3, [r0], #4
   d7884:	2100      	movs	r1, #0
   d7886:	f001 fc2f 	bl	d90e8 <memset>
{
    clear();
}
   d788a:	4620      	mov	r0, r4
   d788c:	bd10      	pop	{r4, pc}
   d788e:	bf00      	nop
   d7890:	000d97b4 	.word	0x000d97b4

000d7894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7894:	4603      	mov	r3, r0
   d7896:	4a07      	ldr	r2, [pc, #28]	; (d78b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7898:	b510      	push	{r4, lr}
   d789a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d789e:	f101 0210 	add.w	r2, r1, #16
   d78a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d78a6:	f843 4b04 	str.w	r4, [r3], #4
   d78aa:	4291      	cmp	r1, r2
   d78ac:	d1f9      	bne.n	d78a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d78ae:	780a      	ldrb	r2, [r1, #0]
   d78b0:	701a      	strb	r2, [r3, #0]
}
   d78b2:	bd10      	pop	{r4, pc}
   d78b4:	000d97b4 	.word	0x000d97b4

000d78b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d78b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d78ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d78be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d78c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d78c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d78ca:	2304      	movs	r3, #4
   d78cc:	6041      	str	r1, [r0, #4]
   d78ce:	7503      	strb	r3, [r0, #20]
   d78d0:	bd10      	pop	{r4, pc}

000d78d2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d78d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d78d4:	780d      	ldrb	r5, [r1, #0]
   d78d6:	788b      	ldrb	r3, [r1, #2]
   d78d8:	784a      	ldrb	r2, [r1, #1]
   d78da:	78c9      	ldrb	r1, [r1, #3]
   d78dc:	9100      	str	r1, [sp, #0]
   d78de:	4629      	mov	r1, r5
   d78e0:	f7ff ffea 	bl	d78b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d78e4:	b003      	add	sp, #12
   d78e6:	bd30      	pop	{r4, r5, pc}

000d78e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78e8:	7441      	strb	r1, [r0, #17]
   d78ea:	4770      	bx	lr

000d78ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d78ec:	4770      	bx	lr

000d78ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d78ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d78f0:	2100      	movs	r1, #0
   d78f2:	7c00      	ldrb	r0, [r0, #16]
   d78f4:	f7fe f886 	bl	d5a04 <HAL_USB_USART_Receive_Data>
}
   d78f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d78fc:	bf28      	it	cs
   d78fe:	f04f 30ff 	movcs.w	r0, #4294967295
   d7902:	bd08      	pop	{r3, pc}

000d7904 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7904:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7906:	2101      	movs	r1, #1
   d7908:	7c00      	ldrb	r0, [r0, #16]
   d790a:	f7fe f87b 	bl	d5a04 <HAL_USB_USART_Receive_Data>
}
   d790e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7912:	bf28      	it	cs
   d7914:	f04f 30ff 	movcs.w	r0, #4294967295
   d7918:	bd08      	pop	{r3, pc}

000d791a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d791a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d791c:	7c00      	ldrb	r0, [r0, #16]
   d791e:	f7fe f869 	bl	d59f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7922:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7926:	bd08      	pop	{r3, pc}

000d7928 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7928:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d792a:	7c00      	ldrb	r0, [r0, #16]
   d792c:	f7fe f85a 	bl	d59e4 <HAL_USB_USART_Available_Data>
}
   d7930:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7934:	bd08      	pop	{r3, pc}

000d7936 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7936:	7c00      	ldrb	r0, [r0, #16]
   d7938:	f7fe b874 	b.w	d5a24 <HAL_USB_USART_Flush_Data>

000d793c <_ZN9USBSerialD0Ev>:
   d793c:	b510      	push	{r4, lr}
   d793e:	2114      	movs	r1, #20
   d7940:	4604      	mov	r4, r0
   d7942:	f000 fe21 	bl	d8588 <_ZdlPvj>
   d7946:	4620      	mov	r0, r4
   d7948:	bd10      	pop	{r4, pc}

000d794a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d794a:	b538      	push	{r3, r4, r5, lr}
   d794c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d794e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7950:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7952:	f7fe f84f 	bl	d59f4 <HAL_USB_USART_Available_Data_For_Write>
   d7956:	2800      	cmp	r0, #0
   d7958:	dc01      	bgt.n	d795e <_ZN9USBSerial5writeEh+0x14>
   d795a:	7c60      	ldrb	r0, [r4, #17]
   d795c:	b128      	cbz	r0, d796a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d795e:	4629      	mov	r1, r5
   d7960:	7c20      	ldrb	r0, [r4, #16]
   d7962:	f7fe f857 	bl	d5a14 <HAL_USB_USART_Send_Data>
   d7966:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d796a:	bd38      	pop	{r3, r4, r5, pc}

000d796c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d796c:	b510      	push	{r4, lr}
   d796e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7970:	2300      	movs	r3, #0
   d7972:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7978:	60a3      	str	r3, [r4, #8]
   d797a:	4b05      	ldr	r3, [pc, #20]	; (d7990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d797c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d797e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7980:	4608      	mov	r0, r1
{
  _serial = serial;
   d7982:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7984:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7986:	4611      	mov	r1, r2
   d7988:	f7fe f814 	bl	d59b4 <HAL_USB_USART_Init>
}
   d798c:	4620      	mov	r0, r4
   d798e:	bd10      	pop	{r4, pc}
   d7990:	000d97c8 	.word	0x000d97c8

000d7994 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7994:	2200      	movs	r2, #0
   d7996:	7c00      	ldrb	r0, [r0, #16]
   d7998:	f7fe b814 	b.w	d59c4 <HAL_USB_USART_Begin>

000d799c <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d799c:	7c00      	ldrb	r0, [r0, #16]
   d799e:	f7fe b819 	b.w	d59d4 <HAL_USB_USART_End>

000d79a2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79a2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d79a4:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d79a8:	2100      	movs	r1, #0
   d79aa:	f001 fb9d 	bl	d90e8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d79ae:	4620      	mov	r0, r4
   d79b0:	bd10      	pop	{r4, pc}
	...

000d79b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d79b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79b6:	4d0e      	ldr	r5, [pc, #56]	; (d79f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d79b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d79ba:	a801      	add	r0, sp, #4
   d79bc:	f7ff fff1 	bl	d79a2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79c0:	6829      	ldr	r1, [r5, #0]
   d79c2:	f011 0401 	ands.w	r4, r1, #1
   d79c6:	d110      	bne.n	d79ea <_Z16_fetch_usbserialv+0x36>
   d79c8:	4628      	mov	r0, r5
   d79ca:	f7fc fb77 	bl	d40bc <__cxa_guard_acquire>
   d79ce:	b160      	cbz	r0, d79ea <_Z16_fetch_usbserialv+0x36>
   d79d0:	aa01      	add	r2, sp, #4
   d79d2:	4621      	mov	r1, r4
   d79d4:	4807      	ldr	r0, [pc, #28]	; (d79f4 <_Z16_fetch_usbserialv+0x40>)
   d79d6:	f7ff ffc9 	bl	d796c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d79da:	4628      	mov	r0, r5
   d79dc:	f7fc fb73 	bl	d40c6 <__cxa_guard_release>
   d79e0:	4a05      	ldr	r2, [pc, #20]	; (d79f8 <_Z16_fetch_usbserialv+0x44>)
   d79e2:	4906      	ldr	r1, [pc, #24]	; (d79fc <_Z16_fetch_usbserialv+0x48>)
   d79e4:	4803      	ldr	r0, [pc, #12]	; (d79f4 <_Z16_fetch_usbserialv+0x40>)
   d79e6:	f000 fdc1 	bl	d856c <__aeabi_atexit>
	return _usbserial;
}
   d79ea:	4802      	ldr	r0, [pc, #8]	; (d79f4 <_Z16_fetch_usbserialv+0x40>)
   d79ec:	b007      	add	sp, #28
   d79ee:	bd30      	pop	{r4, r5, pc}
   d79f0:	2003e36c 	.word	0x2003e36c
   d79f4:	2003e370 	.word	0x2003e370
   d79f8:	2003e248 	.word	0x2003e248
   d79fc:	000d78ed 	.word	0x000d78ed

000d7a00 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a00:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d7a02:	b510      	push	{r4, lr}
   d7a04:	b90a      	cbnz	r2, d7a0a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d7a06:	f000 fdd2 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a0a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d7a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7a10:	4718      	bx	r3

000d7a12 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a12:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7a14:	2300      	movs	r3, #0
   d7a16:	6083      	str	r3, [r0, #8]
   d7a18:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a1a:	4604      	mov	r4, r0
   d7a1c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7a1e:	b12b      	cbz	r3, d7a2c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a20:	2202      	movs	r2, #2
   d7a22:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a24:	68eb      	ldr	r3, [r5, #12]
   d7a26:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a28:	68ab      	ldr	r3, [r5, #8]
   d7a2a:	60a3      	str	r3, [r4, #8]
	}
    }
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	bd38      	pop	{r3, r4, r5, pc}

000d7a30 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d7a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d7a32:	4b0d      	ldr	r3, [pc, #52]	; (d7a68 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   d7a34:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d7a38:	4606      	mov	r6, r0
   d7a3a:	460f      	mov	r7, r1
   d7a3c:	461c      	mov	r4, r3
    delete handlers[pin];
   d7a3e:	b135      	cbz	r5, d7a4e <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7a40:	4628      	mov	r0, r5
   d7a42:	f7fc fb87 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d7a46:	2110      	movs	r1, #16
   d7a48:	4628      	mov	r0, r5
   d7a4a:	f000 fd9d 	bl	d8588 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d7a4e:	2010      	movs	r0, #16
   d7a50:	f7fc fb23 	bl	d409a <_Znwj>
   d7a54:	4605      	mov	r5, r0
   d7a56:	b110      	cbz	r0, d7a5e <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   d7a58:	4639      	mov	r1, r7
   d7a5a:	f7ff ffda 	bl	d7a12 <_ZNSt8functionIFvvEEC1ERKS1_>
   d7a5e:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   d7a62:	4628      	mov	r0, r5
   d7a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7a66:	bf00      	nop
   d7a68:	2003e384 	.word	0x2003e384

000d7a6c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7a6e:	460c      	mov	r4, r1
   d7a70:	b085      	sub	sp, #20
   d7a72:	4605      	mov	r5, r0
   d7a74:	4617      	mov	r7, r2
   d7a76:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   d7a78:	f7fd fe34 	bl	d56e4 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d7a7c:	4621      	mov	r1, r4
   d7a7e:	4628      	mov	r0, r5
   d7a80:	f7ff ffd6 	bl	d7a30 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d7a84:	4604      	mov	r4, r0
   d7a86:	b1c8      	cbz	r0, d7abc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   d7a88:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7a8a:	2304      	movs	r3, #4
  if (priority >= 0) {
   d7a8c:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   d7a8e:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7a90:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7a94:	bfa5      	ittet	ge
   d7a96:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7a9a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7a9e:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7aa0:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7aa2:	9300      	str	r3, [sp, #0]
   d7aa4:	4602      	mov	r2, r0
   d7aa6:	463b      	mov	r3, r7
   d7aa8:	4907      	ldr	r1, [pc, #28]	; (d7ac8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7aaa:	bfa8      	it	ge
   d7aac:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7ab0:	4628      	mov	r0, r5
   d7ab2:	f7fd fe0f 	bl	d56d4 <HAL_Interrupts_Attach>
   d7ab6:	b108      	cbz	r0, d7abc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   d7ab8:	2000      	movs	r0, #0
   d7aba:	e002      	b.n	d7ac2 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   d7abc:	1c20      	adds	r0, r4, #0
   d7abe:	bf18      	it	ne
   d7ac0:	2001      	movne	r0, #1
}
   d7ac2:	b005      	add	sp, #20
   d7ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ac6:	bf00      	nop
   d7ac8:	000d7a01 	.word	0x000d7a01

000d7acc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7acc:	4770      	bx	lr

000d7ace <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ace:	7441      	strb	r1, [r0, #17]
   d7ad0:	4770      	bx	lr

000d7ad2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7ad2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7ad4:	7c00      	ldrb	r0, [r0, #16]
   d7ad6:	f7fd fefd 	bl	d58d4 <HAL_USART_Available_Data_For_Write>
}
   d7ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ade:	bd08      	pop	{r3, pc}

000d7ae0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7ae0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7ae2:	7c00      	ldrb	r0, [r0, #16]
   d7ae4:	f7fd fece 	bl	d5884 <HAL_USART_Available_Data>
}
   d7ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7aec:	bd08      	pop	{r3, pc}

000d7aee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7aee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7af0:	7c00      	ldrb	r0, [r0, #16]
   d7af2:	f7fd fed7 	bl	d58a4 <HAL_USART_Peek_Data>
}
   d7af6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7afa:	bf28      	it	cs
   d7afc:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b00:	bd08      	pop	{r3, pc}

000d7b02 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7b04:	7c00      	ldrb	r0, [r0, #16]
   d7b06:	f7fd fec5 	bl	d5894 <HAL_USART_Read_Data>
}
   d7b0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b0e:	bf28      	it	cs
   d7b10:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b14:	bd08      	pop	{r3, pc}

000d7b16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b16:	7c00      	ldrb	r0, [r0, #16]
   d7b18:	f7fd becc 	b.w	d58b4 <HAL_USART_Flush_Data>

000d7b1c <_ZN11USARTSerialD0Ev>:
   d7b1c:	b510      	push	{r4, lr}
   d7b1e:	2114      	movs	r1, #20
   d7b20:	4604      	mov	r4, r0
   d7b22:	f000 fd31 	bl	d8588 <_ZdlPvj>
   d7b26:	4620      	mov	r0, r4
   d7b28:	bd10      	pop	{r4, pc}

000d7b2a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b2a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b2c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b2e:	4604      	mov	r4, r0
   d7b30:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b32:	b925      	cbnz	r5, d7b3e <_ZN11USARTSerial5writeEh+0x14>
   d7b34:	7c00      	ldrb	r0, [r0, #16]
   d7b36:	f7fd fecd 	bl	d58d4 <HAL_USART_Available_Data_For_Write>
   d7b3a:	2800      	cmp	r0, #0
   d7b3c:	dd05      	ble.n	d7b4a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b3e:	4631      	mov	r1, r6
   d7b40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b46:	f7fd be95 	b.w	d5874 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7b4a:	4628      	mov	r0, r5
   d7b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7b50:	b510      	push	{r4, lr}
   d7b52:	4604      	mov	r4, r0
   d7b54:	4608      	mov	r0, r1
   d7b56:	4611      	mov	r1, r2
   d7b58:	2200      	movs	r2, #0
   d7b5a:	6062      	str	r2, [r4, #4]
   d7b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b60:	60a2      	str	r2, [r4, #8]
   d7b62:	4a05      	ldr	r2, [pc, #20]	; (d7b78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7b64:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7b66:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7b68:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7b6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7b6c:	461a      	mov	r2, r3
   d7b6e:	f7fd fe71 	bl	d5854 <HAL_USART_Init>
}
   d7b72:	4620      	mov	r0, r4
   d7b74:	bd10      	pop	{r4, pc}
   d7b76:	bf00      	nop
   d7b78:	000d97f8 	.word	0x000d97f8

000d7b7c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7b7c:	2300      	movs	r3, #0
   d7b7e:	7c00      	ldrb	r0, [r0, #16]
   d7b80:	f7fd beb0 	b.w	d58e4 <HAL_USART_BeginConfig>

000d7b84 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7b84:	2200      	movs	r2, #0
   d7b86:	f7ff bff9 	b.w	d7b7c <_ZN11USARTSerial5beginEmm>

000d7b8a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7b8a:	7c00      	ldrb	r0, [r0, #16]
   d7b8c:	f7fd be6a 	b.w	d5864 <HAL_USART_End>

000d7b90 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7b90:	7c00      	ldrb	r0, [r0, #16]
   d7b92:	f7fd be97 	b.w	d58c4 <HAL_USART_Is_Enabled>
	...

000d7b98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b98:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b9a:	4d0c      	ldr	r5, [pc, #48]	; (d7bcc <_Z22__fetch_global_Serial1v+0x34>)
   d7b9c:	6829      	ldr	r1, [r5, #0]
   d7b9e:	f011 0401 	ands.w	r4, r1, #1
   d7ba2:	d111      	bne.n	d7bc8 <_Z22__fetch_global_Serial1v+0x30>
   d7ba4:	4628      	mov	r0, r5
   d7ba6:	f7fc fa89 	bl	d40bc <__cxa_guard_acquire>
   d7baa:	b168      	cbz	r0, d7bc8 <_Z22__fetch_global_Serial1v+0x30>
   d7bac:	4a08      	ldr	r2, [pc, #32]	; (d7bd0 <_Z22__fetch_global_Serial1v+0x38>)
   d7bae:	4b09      	ldr	r3, [pc, #36]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7bb0:	4809      	ldr	r0, [pc, #36]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7bb2:	4621      	mov	r1, r4
   d7bb4:	f7ff ffcc 	bl	d7b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7bb8:	4628      	mov	r0, r5
   d7bba:	f7fc fa84 	bl	d40c6 <__cxa_guard_release>
   d7bbe:	4a07      	ldr	r2, [pc, #28]	; (d7bdc <_Z22__fetch_global_Serial1v+0x44>)
   d7bc0:	4907      	ldr	r1, [pc, #28]	; (d7be0 <_Z22__fetch_global_Serial1v+0x48>)
   d7bc2:	4805      	ldr	r0, [pc, #20]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7bc4:	f000 fcd2 	bl	d856c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7bc8:	4803      	ldr	r0, [pc, #12]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7bca:	bd38      	pop	{r3, r4, r5, pc}
   d7bcc:	2003e4ac 	.word	0x2003e4ac
   d7bd0:	2003e4b0 	.word	0x2003e4b0
   d7bd4:	2003e428 	.word	0x2003e428
   d7bd8:	2003e414 	.word	0x2003e414
   d7bdc:	2003e248 	.word	0x2003e248
   d7be0:	000d7acd 	.word	0x000d7acd

000d7be4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7be4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7be6:	6883      	ldr	r3, [r0, #8]
   d7be8:	4604      	mov	r4, r0
   d7bea:	b90b      	cbnz	r3, d7bf0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7bec:	f000 fcdf 	bl	d85ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7bf0:	68c3      	ldr	r3, [r0, #12]
   d7bf2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7bf4:	68a3      	ldr	r3, [r4, #8]
   d7bf6:	b11b      	cbz	r3, d7c00 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7bf8:	2203      	movs	r2, #3
   d7bfa:	4621      	mov	r1, r4
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c00:	4620      	mov	r0, r4
   d7c02:	2110      	movs	r1, #16
}
   d7c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c08:	f000 bcbe 	b.w	d8588 <_ZdlPvj>

000d7c0c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7c0c:	4770      	bx	lr

000d7c0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c10:	4606      	mov	r6, r0
   d7c12:	4615      	mov	r5, r2
   d7c14:	460c      	mov	r4, r1
   d7c16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c18:	42bc      	cmp	r4, r7
   d7c1a:	d006      	beq.n	d7c2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7c1c:	6833      	ldr	r3, [r6, #0]
   d7c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c22:	689b      	ldr	r3, [r3, #8]
   d7c24:	4630      	mov	r0, r6
   d7c26:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c28:	e7f6      	b.n	d7c18 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7c2a:	4628      	mov	r0, r5
   d7c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c2e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7c2e:	2200      	movs	r2, #0
   d7c30:	7c00      	ldrb	r0, [r0, #16]
   d7c32:	f7fd be7f 	b.w	d5934 <HAL_I2C_Write_Data>

000d7c36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7c36:	2100      	movs	r1, #0
   d7c38:	7c00      	ldrb	r0, [r0, #16]
   d7c3a:	f7fd be83 	b.w	d5944 <HAL_I2C_Available_Data>

000d7c3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7c3e:	2100      	movs	r1, #0
   d7c40:	7c00      	ldrb	r0, [r0, #16]
   d7c42:	f7fd be87 	b.w	d5954 <HAL_I2C_Read_Data>

000d7c46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7c46:	2100      	movs	r1, #0
   d7c48:	7c00      	ldrb	r0, [r0, #16]
   d7c4a:	f7fd be8b 	b.w	d5964 <HAL_I2C_Peek_Data>

000d7c4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7c4e:	2100      	movs	r1, #0
   d7c50:	7c00      	ldrb	r0, [r0, #16]
   d7c52:	f7fd be8f 	b.w	d5974 <HAL_I2C_Flush_Data>

000d7c56 <_ZN7TwoWireD0Ev>:
   d7c56:	b510      	push	{r4, lr}
   d7c58:	2114      	movs	r1, #20
   d7c5a:	4604      	mov	r4, r0
   d7c5c:	f000 fc94 	bl	d8588 <_ZdlPvj>
   d7c60:	4620      	mov	r0, r4
   d7c62:	bd10      	pop	{r4, pc}

000d7c64 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7c64:	b510      	push	{r4, lr}
   d7c66:	4604      	mov	r4, r0
   d7c68:	2300      	movs	r3, #0
   d7c6a:	6063      	str	r3, [r4, #4]
   d7c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7c70:	60a3      	str	r3, [r4, #8]
   d7c72:	4b04      	ldr	r3, [pc, #16]	; (d7c84 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7c74:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7c76:	4608      	mov	r0, r1
   d7c78:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7c7a:	4611      	mov	r1, r2
   d7c7c:	f7fd fe8a 	bl	d5994 <HAL_I2C_Init>
}
   d7c80:	4620      	mov	r0, r4
   d7c82:	bd10      	pop	{r4, pc}
   d7c84:	000d9828 	.word	0x000d9828

000d7c88 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d7c88:	2200      	movs	r2, #0
   d7c8a:	7c00      	ldrb	r0, [r0, #16]
   d7c8c:	f7fd be32 	b.w	d58f4 <HAL_I2C_Set_Speed>

000d7c90 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7c90:	2300      	movs	r3, #0
   d7c92:	461a      	mov	r2, r3
   d7c94:	4619      	mov	r1, r3
   d7c96:	7c00      	ldrb	r0, [r0, #16]
   d7c98:	f7fd be34 	b.w	d5904 <HAL_I2C_Begin>

000d7c9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7c9c:	b570      	push	{r4, r5, r6, lr}
   d7c9e:	460c      	mov	r4, r1
   d7ca0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7ca2:	2514      	movs	r5, #20
   d7ca4:	4606      	mov	r6, r0
   d7ca6:	462a      	mov	r2, r5
   d7ca8:	2100      	movs	r1, #0
   d7caa:	a801      	add	r0, sp, #4
   d7cac:	f001 fa1c 	bl	d90e8 <memset>
   d7cb0:	7823      	ldrb	r3, [r4, #0]
   d7cb2:	f88d 3008 	strb.w	r3, [sp, #8]
   d7cb6:	6863      	ldr	r3, [r4, #4]
   d7cb8:	9303      	str	r3, [sp, #12]
   d7cba:	68e3      	ldr	r3, [r4, #12]
   d7cbc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7cbe:	2200      	movs	r2, #0
   d7cc0:	7a23      	ldrb	r3, [r4, #8]
   d7cc2:	7c30      	ldrb	r0, [r6, #16]
   d7cc4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7cc8:	a901      	add	r1, sp, #4
   d7cca:	9305      	str	r3, [sp, #20]
   d7ccc:	f7fd fe6a 	bl	d59a4 <HAL_I2C_Request_Data_Ex>
}
   d7cd0:	b006      	add	sp, #24
   d7cd2:	bd70      	pop	{r4, r5, r6, pc}

000d7cd4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7cd6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7cd8:	f88d 1000 	strb.w	r1, [sp]
   d7cdc:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7ce0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ce2:	bf18      	it	ne
   d7ce4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7ce6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7ce8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7cea:	f88d 3008 	strb.w	r3, [sp, #8]
   d7cee:	f7ff ffd5 	bl	d7c9c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7cf2:	b005      	add	sp, #20
   d7cf4:	f85d fb04 	ldr.w	pc, [sp], #4

000d7cf8 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7cf8:	2301      	movs	r3, #1
   d7cfa:	f7ff bfeb 	b.w	d7cd4 <_ZN7TwoWire11requestFromEhjh>

000d7cfe <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7cfe:	2200      	movs	r2, #0
   d7d00:	7c00      	ldrb	r0, [r0, #16]
   d7d02:	f7fd be07 	b.w	d5914 <HAL_I2C_Begin_Transmission>

000d7d06 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7d06:	b2c9      	uxtb	r1, r1
   d7d08:	f7ff bff9 	b.w	d7cfe <_ZN7TwoWire17beginTransmissionEh>

000d7d0c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7d0c:	2200      	movs	r2, #0
   d7d0e:	7c00      	ldrb	r0, [r0, #16]
   d7d10:	f7fd be08 	b.w	d5924 <HAL_I2C_End_Transmission>

000d7d14 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7d14:	2101      	movs	r1, #1
   d7d16:	f7ff bff9 	b.w	d7d0c <_ZN7TwoWire15endTransmissionEh>

000d7d1a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7d1a:	2100      	movs	r1, #0
   d7d1c:	7c00      	ldrb	r0, [r0, #16]
   d7d1e:	f7fd be31 	b.w	d5984 <HAL_I2C_Is_Enabled>

000d7d22 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d22:	2200      	movs	r2, #0
   d7d24:	4611      	mov	r1, r2
   d7d26:	6840      	ldr	r0, [r0, #4]
   d7d28:	f7fd bf10 	b.w	d5b4c <network_listening>

000d7d2c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d2c:	2200      	movs	r2, #0
   d7d2e:	4611      	mov	r1, r2
   d7d30:	6840      	ldr	r0, [r0, #4]
   d7d32:	f7fd bf1b 	b.w	d5b6c <network_get_listen_timeout>

000d7d36 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d36:	2200      	movs	r2, #0
   d7d38:	6840      	ldr	r0, [r0, #4]
   d7d3a:	f7fd bf0f 	b.w	d5b5c <network_set_listen_timeout>

000d7d3e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d3e:	2200      	movs	r2, #0
   d7d40:	f081 0101 	eor.w	r1, r1, #1
   d7d44:	6840      	ldr	r0, [r0, #4]
   d7d46:	f7fd bef9 	b.w	d5b3c <network_listen>

000d7d4a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	461a      	mov	r2, r3
   d7d4e:	2101      	movs	r1, #1
   d7d50:	6840      	ldr	r0, [r0, #4]
   d7d52:	f7fd beeb 	b.w	d5b2c <network_off>

000d7d56 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d56:	2300      	movs	r3, #0
   d7d58:	461a      	mov	r2, r3
   d7d5a:	4619      	mov	r1, r3
   d7d5c:	6840      	ldr	r0, [r0, #4]
   d7d5e:	f7fd bedd 	b.w	d5b1c <network_on>

000d7d62 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d62:	2200      	movs	r2, #0
   d7d64:	4611      	mov	r1, r2
   d7d66:	6840      	ldr	r0, [r0, #4]
   d7d68:	f7fd bed0 	b.w	d5b0c <network_ready>

000d7d6c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d6c:	2200      	movs	r2, #0
   d7d6e:	4611      	mov	r1, r2
   d7d70:	6840      	ldr	r0, [r0, #4]
   d7d72:	f7fd bebb 	b.w	d5aec <network_connecting>

000d7d76 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d76:	2200      	movs	r2, #0
   d7d78:	2102      	movs	r1, #2
   d7d7a:	6840      	ldr	r0, [r0, #4]
   d7d7c:	f7fd bebe 	b.w	d5afc <network_disconnect>

000d7d80 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d80:	2300      	movs	r3, #0
   d7d82:	461a      	mov	r2, r3
   d7d84:	6840      	ldr	r0, [r0, #4]
   d7d86:	f7fd bea9 	b.w	d5adc <network_connect>

000d7d8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d8a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d8c:	4605      	mov	r5, r0
   d7d8e:	b188      	cbz	r0, d7db4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d90:	6804      	ldr	r4, [r0, #0]
   d7d92:	b14c      	cbz	r4, d7da8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d94:	68a3      	ldr	r3, [r4, #8]
   d7d96:	b11b      	cbz	r3, d7da0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d98:	2203      	movs	r2, #3
   d7d9a:	4621      	mov	r1, r4
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7da0:	2110      	movs	r1, #16
   d7da2:	4620      	mov	r0, r4
   d7da4:	f000 fbf0 	bl	d8588 <_ZdlPvj>
   d7da8:	4628      	mov	r0, r5
   d7daa:	2114      	movs	r1, #20
      }
   d7dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7db0:	f000 bbea 	b.w	d8588 <_ZdlPvj>
   d7db4:	bd38      	pop	{r3, r4, r5, pc}

000d7db6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7db6:	b110      	cbz	r0, d7dbe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7db8:	6803      	ldr	r3, [r0, #0]
   d7dba:	685b      	ldr	r3, [r3, #4]
   d7dbc:	4718      	bx	r3
   d7dbe:	4770      	bx	lr

000d7dc0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7dc0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7dc2:	6803      	ldr	r3, [r0, #0]
   d7dc4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7dc6:	b1bb      	cbz	r3, d7df8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7dc8:	6858      	ldr	r0, [r3, #4]
   d7dca:	f7fd fccb 	bl	d5764 <os_thread_is_current>
   d7dce:	b978      	cbnz	r0, d7df0 <_ZN6ThreadD1Ev+0x30>
   d7dd0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7dd2:	7c5a      	ldrb	r2, [r3, #17]
   d7dd4:	b912      	cbnz	r2, d7ddc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7dd6:	6858      	ldr	r0, [r3, #4]
   d7dd8:	f7fd fcd4 	bl	d5784 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7ddc:	6823      	ldr	r3, [r4, #0]
   d7dde:	6858      	ldr	r0, [r3, #4]
   d7de0:	f7fd fcd8 	bl	d5794 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7de4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7de6:	2300      	movs	r3, #0
   d7de8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7dea:	b128      	cbz	r0, d7df8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7dec:	f7ff ffcd 	bl	d7d8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7df0:	6820      	ldr	r0, [r4, #0]
   d7df2:	b108      	cbz	r0, d7df8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7df4:	f7ff ffc9 	bl	d7d8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7df8:	4620      	mov	r0, r4
   d7dfa:	bd10      	pop	{r4, pc}

000d7dfc <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7dfc:	b538      	push	{r3, r4, r5, lr}
   d7dfe:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e00:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7e04:	b108      	cbz	r0, d7e0a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7e06:	f7fc f94c 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7e0a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7e0e:	b108      	cbz	r0, d7e14 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7e10:	f7fd fcf8 	bl	d5804 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e14:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7e18:	b135      	cbz	r5, d7e28 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e1a:	4628      	mov	r0, r5
   d7e1c:	f7ff ffd0 	bl	d7dc0 <_ZN6ThreadD1Ev>
   d7e20:	2104      	movs	r1, #4
   d7e22:	4628      	mov	r0, r5
   d7e24:	f000 fbb0 	bl	d8588 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e28:	6820      	ldr	r0, [r4, #0]
   d7e2a:	b108      	cbz	r0, d7e30 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7e2c:	f7ff ffc3 	bl	d7db6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7e30:	4620      	mov	r0, r4
   d7e32:	bd38      	pop	{r3, r4, r5, pc}

000d7e34 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7e34:	b510      	push	{r4, lr}
   d7e36:	4b04      	ldr	r3, [pc, #16]	; (d7e48 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7e38:	4604      	mov	r4, r0
   d7e3a:	f840 3b08 	str.w	r3, [r0], #8
   d7e3e:	f7ff ffdd 	bl	d7dfc <_ZN5spark11MeshPublishD1Ev>
   d7e42:	4620      	mov	r0, r4
   d7e44:	bd10      	pop	{r4, pc}
   d7e46:	bf00      	nop
   d7e48:	000d9850 	.word	0x000d9850

000d7e4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7e4c:	b538      	push	{r3, r4, r5, lr}
   d7e4e:	4c0e      	ldr	r4, [pc, #56]	; (d7e88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7e50:	4b0e      	ldr	r3, [pc, #56]	; (d7e8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7e52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7e54:	2500      	movs	r5, #0
   d7e56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7e58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7e5c:	6063      	str	r3, [r4, #4]
   d7e5e:	60a5      	str	r5, [r4, #8]
   d7e60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7e68:	f7fd fcc4 	bl	d57f4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e6c:	4b08      	ldr	r3, [pc, #32]	; (d7e90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e72:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e76:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e78:	4620      	mov	r0, r4
   d7e7a:	4a06      	ldr	r2, [pc, #24]	; (d7e94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7e7c:	4906      	ldr	r1, [pc, #24]	; (d7e98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7e82:	f000 bb73 	b.w	d856c <__aeabi_atexit>
   d7e86:	bf00      	nop
   d7e88:	2003e534 	.word	0x2003e534
   d7e8c:	000d98b8 	.word	0x000d98b8
   d7e90:	000d9850 	.word	0x000d9850
   d7e94:	2003e248 	.word	0x2003e248
   d7e98:	000d7e35 	.word	0x000d7e35

000d7e9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7e9c:	2200      	movs	r2, #0
   d7e9e:	4611      	mov	r1, r2
   d7ea0:	6840      	ldr	r0, [r0, #4]
   d7ea2:	f7fd be33 	b.w	d5b0c <network_ready>

000d7ea6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7ea6:	2200      	movs	r2, #0
   d7ea8:	4611      	mov	r1, r2
   d7eaa:	6840      	ldr	r0, [r0, #4]
   d7eac:	f7fd be4e 	b.w	d5b4c <network_listening>

000d7eb0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7eb0:	2200      	movs	r2, #0
   d7eb2:	4611      	mov	r1, r2
   d7eb4:	6840      	ldr	r0, [r0, #4]
   d7eb6:	f7fd be59 	b.w	d5b6c <network_get_listen_timeout>

000d7eba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7eba:	2200      	movs	r2, #0
   d7ebc:	6840      	ldr	r0, [r0, #4]
   d7ebe:	f7fd be4d 	b.w	d5b5c <network_set_listen_timeout>

000d7ec2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ec2:	2200      	movs	r2, #0
   d7ec4:	f081 0101 	eor.w	r1, r1, #1
   d7ec8:	6840      	ldr	r0, [r0, #4]
   d7eca:	f7fd be37 	b.w	d5b3c <network_listen>

000d7ece <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7ece:	2300      	movs	r3, #0
   d7ed0:	461a      	mov	r2, r3
   d7ed2:	4619      	mov	r1, r3
   d7ed4:	6840      	ldr	r0, [r0, #4]
   d7ed6:	f7fd be29 	b.w	d5b2c <network_off>

000d7eda <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7eda:	2300      	movs	r3, #0
   d7edc:	461a      	mov	r2, r3
   d7ede:	4619      	mov	r1, r3
   d7ee0:	6840      	ldr	r0, [r0, #4]
   d7ee2:	f7fd be1b 	b.w	d5b1c <network_on>

000d7ee6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	4611      	mov	r1, r2
   d7eea:	6840      	ldr	r0, [r0, #4]
   d7eec:	f7fd bdfe 	b.w	d5aec <network_connecting>

000d7ef0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ef0:	2200      	movs	r2, #0
   d7ef2:	2102      	movs	r1, #2
   d7ef4:	6840      	ldr	r0, [r0, #4]
   d7ef6:	f7fd be01 	b.w	d5afc <network_disconnect>

000d7efa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7efa:	2300      	movs	r3, #0
   d7efc:	461a      	mov	r2, r3
   d7efe:	6840      	ldr	r0, [r0, #4]
   d7f00:	f7fd bdec 	b.w	d5adc <network_connect>

000d7f04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7f04:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7f06:	2204      	movs	r2, #4
   d7f08:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7f0a:	4a02      	ldr	r2, [pc, #8]	; (d7f14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7f0c:	601a      	str	r2, [r3, #0]
   d7f0e:	4770      	bx	lr
   d7f10:	2003e708 	.word	0x2003e708
   d7f14:	000d9884 	.word	0x000d9884

000d7f18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f18:	2300      	movs	r3, #0
   d7f1a:	461a      	mov	r2, r3
   d7f1c:	6840      	ldr	r0, [r0, #4]
   d7f1e:	f7fd bddd 	b.w	d5adc <network_connect>

000d7f22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f22:	2200      	movs	r2, #0
   d7f24:	2102      	movs	r1, #2
   d7f26:	6840      	ldr	r0, [r0, #4]
   d7f28:	f7fd bde8 	b.w	d5afc <network_disconnect>

000d7f2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f2c:	2200      	movs	r2, #0
   d7f2e:	4611      	mov	r1, r2
   d7f30:	6840      	ldr	r0, [r0, #4]
   d7f32:	f7fd bddb 	b.w	d5aec <network_connecting>

000d7f36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f36:	2200      	movs	r2, #0
   d7f38:	4611      	mov	r1, r2
   d7f3a:	6840      	ldr	r0, [r0, #4]
   d7f3c:	f7fd bde6 	b.w	d5b0c <network_ready>

000d7f40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f40:	2300      	movs	r3, #0
   d7f42:	461a      	mov	r2, r3
   d7f44:	4619      	mov	r1, r3
   d7f46:	6840      	ldr	r0, [r0, #4]
   d7f48:	f7fd bde8 	b.w	d5b1c <network_on>

000d7f4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f4c:	2300      	movs	r3, #0
   d7f4e:	461a      	mov	r2, r3
   d7f50:	4619      	mov	r1, r3
   d7f52:	6840      	ldr	r0, [r0, #4]
   d7f54:	f7fd bdea 	b.w	d5b2c <network_off>

000d7f58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f58:	2200      	movs	r2, #0
   d7f5a:	f081 0101 	eor.w	r1, r1, #1
   d7f5e:	6840      	ldr	r0, [r0, #4]
   d7f60:	f7fd bdec 	b.w	d5b3c <network_listen>

000d7f64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f64:	2200      	movs	r2, #0
   d7f66:	6840      	ldr	r0, [r0, #4]
   d7f68:	f7fd bdf8 	b.w	d5b5c <network_set_listen_timeout>

000d7f6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f6c:	2200      	movs	r2, #0
   d7f6e:	4611      	mov	r1, r2
   d7f70:	6840      	ldr	r0, [r0, #4]
   d7f72:	f7fd bdfb 	b.w	d5b6c <network_get_listen_timeout>

000d7f76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f76:	2200      	movs	r2, #0
   d7f78:	4611      	mov	r1, r2
   d7f7a:	6840      	ldr	r0, [r0, #4]
   d7f7c:	f7fd bde6 	b.w	d5b4c <network_listening>

000d7f80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f84:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f86:	b095      	sub	sp, #84	; 0x54
   d7f88:	4616      	mov	r6, r2
   d7f8a:	460d      	mov	r5, r1
   d7f8c:	4607      	mov	r7, r0
    IPAddress addr;
   d7f8e:	f7ff fc73 	bl	d7878 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7f92:	4621      	mov	r1, r4
   d7f94:	2220      	movs	r2, #32
   d7f96:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f9a:	f001 f8a5 	bl	d90e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f9e:	2340      	movs	r3, #64	; 0x40
   d7fa0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7fa2:	4621      	mov	r1, r4
   d7fa4:	466b      	mov	r3, sp
   d7fa6:	aa0c      	add	r2, sp, #48	; 0x30
   d7fa8:	4630      	mov	r0, r6
   d7faa:	f7fd fb6b 	bl	d5684 <netdb_getaddrinfo>
    if (!r) {
   d7fae:	4604      	mov	r4, r0
   d7fb0:	2800      	cmp	r0, #0
   d7fb2:	d144      	bne.n	d803e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fb4:	4602      	mov	r2, r0
   d7fb6:	2101      	movs	r1, #1
   d7fb8:	6868      	ldr	r0, [r5, #4]
   d7fba:	f7fd fda7 	bl	d5b0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fbe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fc0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fc2:	4622      	mov	r2, r4
   d7fc4:	6868      	ldr	r0, [r5, #4]
   d7fc6:	f7fd fda1 	bl	d5b0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fcc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7fce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fd0:	2e00      	cmp	r6, #0
   d7fd2:	d034      	beq.n	d803e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7fd4:	2900      	cmp	r1, #0
   d7fd6:	d132      	bne.n	d803e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7fd8:	6873      	ldr	r3, [r6, #4]
   d7fda:	2b02      	cmp	r3, #2
   d7fdc:	d002      	beq.n	d7fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7fde:	2b0a      	cmp	r3, #10
   d7fe0:	d009      	beq.n	d7ff6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7fe2:	e02a      	b.n	d803a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7fe4:	f1b8 0f00 	cmp.w	r8, #0
   d7fe8:	d027      	beq.n	d803a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7fea:	6971      	ldr	r1, [r6, #20]
   d7fec:	4638      	mov	r0, r7
   d7fee:	3104      	adds	r1, #4
   d7ff0:	f7ff fc6f 	bl	d78d2 <_ZN9IPAddressaSEPKh>
   d7ff4:	e020      	b.n	d8038 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7ff6:	f1b9 0f00 	cmp.w	r9, #0
   d7ffa:	d01e      	beq.n	d803a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7ffc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7ffe:	2211      	movs	r2, #17
   d8000:	a801      	add	r0, sp, #4
   d8002:	f001 f871 	bl	d90e8 <memset>
                    a.v = 6;
   d8006:	2306      	movs	r3, #6
   d8008:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d800c:	ad01      	add	r5, sp, #4
   d800e:	f104 0308 	add.w	r3, r4, #8
   d8012:	3418      	adds	r4, #24
   d8014:	6818      	ldr	r0, [r3, #0]
   d8016:	6859      	ldr	r1, [r3, #4]
   d8018:	462a      	mov	r2, r5
   d801a:	c203      	stmia	r2!, {r0, r1}
   d801c:	3308      	adds	r3, #8
   d801e:	42a3      	cmp	r3, r4
   d8020:	4615      	mov	r5, r2
   d8022:	d1f7      	bne.n	d8014 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8024:	a901      	add	r1, sp, #4
   d8026:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8028:	ad07      	add	r5, sp, #28
   d802a:	f7ff fc33 	bl	d7894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d802e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8030:	1d3c      	adds	r4, r7, #4
   d8032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8034:	682b      	ldr	r3, [r5, #0]
   d8036:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8038:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d803a:	69f6      	ldr	r6, [r6, #28]
   d803c:	e7c8      	b.n	d7fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d803e:	9800      	ldr	r0, [sp, #0]
   d8040:	f7fd fb18 	bl	d5674 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8044:	4638      	mov	r0, r7
   d8046:	b015      	add	sp, #84	; 0x54
   d8048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d804c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d804c:	4b02      	ldr	r3, [pc, #8]	; (d8058 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d804e:	4a03      	ldr	r2, [pc, #12]	; (d805c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8050:	601a      	str	r2, [r3, #0]
   d8052:	2200      	movs	r2, #0
   d8054:	605a      	str	r2, [r3, #4]
   d8056:	4770      	bx	lr
   d8058:	2003e710 	.word	0x2003e710
   d805c:	000d98b8 	.word	0x000d98b8

000d8060 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8060:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8064:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8066:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d806a:	2901      	cmp	r1, #1
   d806c:	4610      	mov	r0, r2
   d806e:	d104      	bne.n	d807a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8070:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8074:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8078:	e004      	b.n	d8084 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d807a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d807c:	bf04      	itt	eq
   d807e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8082:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8084:	3b01      	subs	r3, #1
   d8086:	f102 0210 	add.w	r2, r2, #16
   d808a:	d1ec      	bne.n	d8066 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d808c:	4770      	bx	lr

000d808e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d808e:	b40e      	push	{r1, r2, r3}
   d8090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8094:	b087      	sub	sp, #28
   d8096:	af00      	add	r7, sp, #0
   d8098:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d809c:	4605      	mov	r5, r0
   d809e:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d80a2:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80a4:	4623      	mov	r3, r4
   d80a6:	4632      	mov	r2, r6
   d80a8:	2110      	movs	r1, #16
   d80aa:	f107 0008 	add.w	r0, r7, #8
   d80ae:	f7fd fda5 	bl	d5bfc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d80b2:	280f      	cmp	r0, #15
   d80b4:	d916      	bls.n	d80e4 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d80b6:	f100 0308 	add.w	r3, r0, #8
   d80ba:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d80be:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d80c0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80c4:	4632      	mov	r2, r6
   d80c6:	1c41      	adds	r1, r0, #1
   d80c8:	4623      	mov	r3, r4
   d80ca:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d80cc:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80ce:	f7fd fd95 	bl	d5bfc <vsnprintf>
        va_end(args);
        if (n > 0) {
   d80d2:	1e02      	subs	r2, r0, #0
   d80d4:	dd04      	ble.n	d80e0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d80d6:	682b      	ldr	r3, [r5, #0]
   d80d8:	4669      	mov	r1, sp
   d80da:	689b      	ldr	r3, [r3, #8]
   d80dc:	4628      	mov	r0, r5
   d80de:	4798      	blx	r3
   d80e0:	46c5      	mov	sp, r8
   d80e2:	e007      	b.n	d80f4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d80e4:	b130      	cbz	r0, d80f4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d80e6:	682b      	ldr	r3, [r5, #0]
   d80e8:	4602      	mov	r2, r0
   d80ea:	689b      	ldr	r3, [r3, #8]
   d80ec:	f107 0108 	add.w	r1, r7, #8
   d80f0:	4628      	mov	r0, r5
   d80f2:	4798      	blx	r3
    }
}
   d80f4:	371c      	adds	r7, #28
   d80f6:	46bd      	mov	sp, r7
   d80f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d80fc:	b003      	add	sp, #12
   d80fe:	4770      	bx	lr

000d8100 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8100:	b513      	push	{r0, r1, r4, lr}
   d8102:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8104:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8106:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d810a:	6894      	ldr	r4, [r2, #8]
   d810c:	4619      	mov	r1, r3
   d810e:	2201      	movs	r2, #1
   d8110:	47a0      	blx	r4
}
   d8112:	b002      	add	sp, #8
   d8114:	bd10      	pop	{r4, pc}

000d8116 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8116:	6883      	ldr	r3, [r0, #8]
   d8118:	b1fb      	cbz	r3, d815a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d811a:	781a      	ldrb	r2, [r3, #0]
   d811c:	2a03      	cmp	r2, #3
   d811e:	d81a      	bhi.n	d8156 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8120:	e8df f002 	tbb	[pc, r2]
   d8124:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8128:	2005      	movs	r0, #5
   d812a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d812c:	6802      	ldr	r2, [r0, #0]
   d812e:	685b      	ldr	r3, [r3, #4]
   d8130:	6852      	ldr	r2, [r2, #4]
   d8132:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8134:	282d      	cmp	r0, #45	; 0x2d
   d8136:	d014      	beq.n	d8162 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8138:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d813c:	2b09      	cmp	r3, #9
   d813e:	d910      	bls.n	d8162 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8140:	2874      	cmp	r0, #116	; 0x74
   d8142:	d010      	beq.n	d8166 <_ZNK5spark9JSONValue4typeEv+0x50>
   d8144:	2866      	cmp	r0, #102	; 0x66
   d8146:	d00e      	beq.n	d8166 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8148:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d814c:	4258      	negs	r0, r3
   d814e:	4158      	adcs	r0, r3
   d8150:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8152:	2006      	movs	r0, #6
   d8154:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8156:	2000      	movs	r0, #0
   d8158:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d815a:	4618      	mov	r0, r3
   d815c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d815e:	2004      	movs	r0, #4
   d8160:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d8162:	2003      	movs	r0, #3
   d8164:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8166:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8168:	4770      	bx	lr

000d816a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d816a:	b510      	push	{r4, lr}
   d816c:	4604      	mov	r4, r0
    switch (type()) {
   d816e:	f7ff ffd2 	bl	d8116 <_ZNK5spark9JSONValue4typeEv>
   d8172:	2802      	cmp	r0, #2
   d8174:	d00d      	beq.n	d8192 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8176:	d316      	bcc.n	d81a6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8178:	2804      	cmp	r0, #4
   d817a:	d814      	bhi.n	d81a6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d817c:	6822      	ldr	r2, [r4, #0]
   d817e:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d8180:	6850      	ldr	r0, [r2, #4]
   d8182:	685b      	ldr	r3, [r3, #4]
   d8184:	220a      	movs	r2, #10
   d8186:	2100      	movs	r1, #0
   d8188:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d818e:	f001 b8d7 	b.w	d9340 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d8192:	6822      	ldr	r2, [r4, #0]
   d8194:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8196:	6852      	ldr	r2, [r2, #4]
   d8198:	685b      	ldr	r3, [r3, #4]
   d819a:	5cd0      	ldrb	r0, [r2, r3]
   d819c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d81a0:	4258      	negs	r0, r3
   d81a2:	4158      	adcs	r0, r3
   d81a4:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d81a6:	2000      	movs	r0, #0
    }
}
   d81a8:	bd10      	pop	{r4, pc}

000d81aa <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d81aa:	b510      	push	{r4, lr}
    if (!n_) {
   d81ac:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d81ae:	4604      	mov	r4, r0
    if (!n_) {
   d81b0:	b15b      	cbz	r3, d81ca <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d81b2:	6880      	ldr	r0, [r0, #8]
   d81b4:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d81b6:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d81b8:	3010      	adds	r0, #16
   d81ba:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d81bc:	6120      	str	r0, [r4, #16]
    --n_;
   d81be:	6163      	str	r3, [r4, #20]
    if (n_) {
   d81c0:	b12b      	cbz	r3, d81ce <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d81c2:	f7ff ff4d 	bl	d8060 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d81c6:	60a0      	str	r0, [r4, #8]
   d81c8:	e001      	b.n	d81ce <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d81ca:	4618      	mov	r0, r3
   d81cc:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d81ce:	2001      	movs	r0, #1
}
   d81d0:	bd10      	pop	{r4, pc}

000d81d2 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d81d2:	b510      	push	{r4, lr}
    write('}');
   d81d4:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d81d6:	4604      	mov	r4, r0
    write('}');
   d81d8:	f7ff ff92 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d81dc:	2301      	movs	r3, #1
   d81de:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d81e0:	4620      	mov	r0, r4
   d81e2:	bd10      	pop	{r4, pc}

000d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d81e4:	b508      	push	{r3, lr}
    switch (state_) {
   d81e6:	7903      	ldrb	r3, [r0, #4]
   d81e8:	2b01      	cmp	r3, #1
   d81ea:	d002      	beq.n	d81f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d81ec:	2b02      	cmp	r3, #2
   d81ee:	d002      	beq.n	d81f6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d81f0:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d81f2:	212c      	movs	r1, #44	; 0x2c
   d81f4:	e000      	b.n	d81f8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d81f6:	213a      	movs	r1, #58	; 0x3a
   d81f8:	f7ff ff82 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
   d81fc:	bd08      	pop	{r3, pc}

000d81fe <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d81fe:	b510      	push	{r4, lr}
   d8200:	4604      	mov	r4, r0
    writeSeparator();
   d8202:	f7ff ffef 	bl	d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8206:	4620      	mov	r0, r4
   d8208:	217b      	movs	r1, #123	; 0x7b
   d820a:	f7ff ff79 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d820e:	2300      	movs	r3, #0
   d8210:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8212:	4620      	mov	r0, r4
   d8214:	bd10      	pop	{r4, pc}
	...

000d8218 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8218:	b538      	push	{r3, r4, r5, lr}
   d821a:	4604      	mov	r4, r0
   d821c:	460d      	mov	r5, r1
    writeSeparator();
   d821e:	f7ff ffe1 	bl	d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8222:	6823      	ldr	r3, [r4, #0]
   d8224:	4904      	ldr	r1, [pc, #16]	; (d8238 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8226:	68db      	ldr	r3, [r3, #12]
   d8228:	4620      	mov	r0, r4
   d822a:	462a      	mov	r2, r5
   d822c:	4798      	blx	r3
    state_ = NEXT;
   d822e:	2301      	movs	r3, #1
   d8230:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8232:	4620      	mov	r0, r4
   d8234:	bd38      	pop	{r3, r4, r5, pc}
   d8236:	bf00      	nop
   d8238:	000d9418 	.word	0x000d9418

000d823c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d823c:	b538      	push	{r3, r4, r5, lr}
   d823e:	4604      	mov	r4, r0
   d8240:	460d      	mov	r5, r1
    writeSeparator();
   d8242:	f7ff ffcf 	bl	d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8246:	6823      	ldr	r3, [r4, #0]
   d8248:	4904      	ldr	r1, [pc, #16]	; (d825c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d824a:	68db      	ldr	r3, [r3, #12]
   d824c:	4620      	mov	r0, r4
   d824e:	462a      	mov	r2, r5
   d8250:	4798      	blx	r3
    state_ = NEXT;
   d8252:	2301      	movs	r3, #1
   d8254:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8256:	4620      	mov	r0, r4
   d8258:	bd38      	pop	{r3, r4, r5, pc}
   d825a:	bf00      	nop
   d825c:	000d98f3 	.word	0x000d98f3

000d8260 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8262:	460d      	mov	r5, r1
   d8264:	4617      	mov	r7, r2
    write('"');
   d8266:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8268:	4604      	mov	r4, r0
   d826a:	442f      	add	r7, r5
    write('"');
   d826c:	f7ff ff48 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
   d8270:	462a      	mov	r2, r5
    const char* const end = str + size;
   d8272:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8274:	42ba      	cmp	r2, r7
   d8276:	d038      	beq.n	d82ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8278:	4616      	mov	r6, r2
   d827a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d827e:	2d22      	cmp	r5, #34	; 0x22
   d8280:	d003      	beq.n	d828a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8282:	2d5c      	cmp	r5, #92	; 0x5c
   d8284:	d001      	beq.n	d828a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8286:	2d1f      	cmp	r5, #31
   d8288:	d82d      	bhi.n	d82e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d828a:	6823      	ldr	r3, [r4, #0]
   d828c:	1a52      	subs	r2, r2, r1
   d828e:	689b      	ldr	r3, [r3, #8]
   d8290:	4620      	mov	r0, r4
   d8292:	4798      	blx	r3
            write('\\');
   d8294:	215c      	movs	r1, #92	; 0x5c
   d8296:	4620      	mov	r0, r4
   d8298:	f7ff ff32 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d829c:	2d0c      	cmp	r5, #12
   d829e:	d019      	beq.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d82a0:	d807      	bhi.n	d82b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d82a2:	2d09      	cmp	r5, #9
   d82a4:	d00f      	beq.n	d82c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d82a6:	2d0a      	cmp	r5, #10
   d82a8:	d012      	beq.n	d82d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d82aa:	2d08      	cmp	r5, #8
   d82ac:	d114      	bne.n	d82d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d82ae:	2162      	movs	r1, #98	; 0x62
   d82b0:	e00a      	b.n	d82c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d82b2:	2d22      	cmp	r5, #34	; 0x22
   d82b4:	d005      	beq.n	d82c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d82b6:	2d5c      	cmp	r5, #92	; 0x5c
   d82b8:	d003      	beq.n	d82c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d82ba:	2d0d      	cmp	r5, #13
   d82bc:	d10c      	bne.n	d82d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d82be:	2172      	movs	r1, #114	; 0x72
   d82c0:	e002      	b.n	d82c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d82c2:	4629      	mov	r1, r5
   d82c4:	e000      	b.n	d82c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d82c6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d82c8:	4620      	mov	r0, r4
   d82ca:	f7ff ff19 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
                break;
   d82ce:	e009      	b.n	d82e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d82d0:	216e      	movs	r1, #110	; 0x6e
   d82d2:	e7f9      	b.n	d82c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d82d4:	2166      	movs	r1, #102	; 0x66
   d82d6:	e7f7      	b.n	d82c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d82d8:	6823      	ldr	r3, [r4, #0]
   d82da:	490a      	ldr	r1, [pc, #40]	; (d8304 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d82dc:	68db      	ldr	r3, [r3, #12]
   d82de:	462a      	mov	r2, r5
   d82e0:	4620      	mov	r0, r4
   d82e2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d82e4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d82e6:	4632      	mov	r2, r6
   d82e8:	e7c4      	b.n	d8274 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d82ea:	4291      	cmp	r1, r2
   d82ec:	d004      	beq.n	d82f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d82ee:	6823      	ldr	r3, [r4, #0]
   d82f0:	1a52      	subs	r2, r2, r1
   d82f2:	689d      	ldr	r5, [r3, #8]
   d82f4:	4620      	mov	r0, r4
   d82f6:	47a8      	blx	r5
    }
    write('"');
   d82f8:	2122      	movs	r1, #34	; 0x22
   d82fa:	4620      	mov	r0, r4
   d82fc:	f7ff ff00 	bl	d8100 <_ZN5spark10JSONWriter5writeEc>
   d8300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8302:	bf00      	nop
   d8304:	000d9904 	.word	0x000d9904

000d8308 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8308:	b570      	push	{r4, r5, r6, lr}
   d830a:	4604      	mov	r4, r0
   d830c:	460d      	mov	r5, r1
   d830e:	4616      	mov	r6, r2
    writeSeparator();
   d8310:	f7ff ff68 	bl	d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8314:	4620      	mov	r0, r4
   d8316:	4632      	mov	r2, r6
   d8318:	4629      	mov	r1, r5
   d831a:	f7ff ffa1 	bl	d8260 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d831e:	2302      	movs	r3, #2
   d8320:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8322:	4620      	mov	r0, r4
   d8324:	bd70      	pop	{r4, r5, r6, pc}

000d8326 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8326:	b570      	push	{r4, r5, r6, lr}
   d8328:	4604      	mov	r4, r0
   d832a:	460d      	mov	r5, r1
   d832c:	4616      	mov	r6, r2
    writeSeparator();
   d832e:	f7ff ff59 	bl	d81e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8332:	4620      	mov	r0, r4
   d8334:	4632      	mov	r2, r6
   d8336:	4629      	mov	r1, r5
   d8338:	f7ff ff92 	bl	d8260 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d833c:	2301      	movs	r3, #1
   d833e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8340:	4620      	mov	r0, r4
   d8342:	bd70      	pop	{r4, r5, r6, pc}

000d8344 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8344:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8346:	2300      	movs	r3, #0
   d8348:	4604      	mov	r4, r0
   d834a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d834c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d834e:	4810      	ldr	r0, [pc, #64]	; (d8390 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d8350:	60a0      	str	r0, [r4, #8]
   d8352:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8354:	b1d1      	cbz	r1, d838c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d8356:	780b      	ldrb	r3, [r1, #0]
   d8358:	2b03      	cmp	r3, #3
   d835a:	d006      	beq.n	d836a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d835c:	b9b3      	cbnz	r3, d838c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d835e:	6813      	ldr	r3, [r2, #0]
   d8360:	6858      	ldr	r0, [r3, #4]
   d8362:	684b      	ldr	r3, [r1, #4]
   d8364:	5cc3      	ldrb	r3, [r0, r3]
   d8366:	2b6e      	cmp	r3, #110	; 0x6e
   d8368:	d008      	beq.n	d837c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d836a:	6813      	ldr	r3, [r2, #0]
   d836c:	6858      	ldr	r0, [r3, #4]
   d836e:	684b      	ldr	r3, [r1, #4]
   d8370:	4403      	add	r3, r0
   d8372:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d8374:	688b      	ldr	r3, [r1, #8]
   d8376:	6849      	ldr	r1, [r1, #4]
   d8378:	1a5b      	subs	r3, r3, r1
   d837a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d837c:	4611      	mov	r1, r2
   d837e:	4620      	mov	r0, r4
   d8380:	f851 3b04 	ldr.w	r3, [r1], #4
   d8384:	f840 3b04 	str.w	r3, [r0], #4
   d8388:	f7fd fdfb 	bl	d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d838c:	4620      	mov	r0, r4
   d838e:	bd10      	pop	{r4, pc}
   d8390:	000d96e4 	.word	0x000d96e4

000d8394 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8394:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8396:	b510      	push	{r4, lr}
   d8398:	4604      	mov	r4, r0
   d839a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d839c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d839e:	6083      	str	r3, [r0, #8]
   d83a0:	60c3      	str	r3, [r0, #12]
   d83a2:	6103      	str	r3, [r0, #16]
   d83a4:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d83a6:	b171      	cbz	r1, d83c6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d83a8:	780b      	ldrb	r3, [r1, #0]
   d83aa:	2b01      	cmp	r3, #1
   d83ac:	d10b      	bne.n	d83c6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d83ae:	f101 0310 	add.w	r3, r1, #16
   d83b2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d83b4:	68cb      	ldr	r3, [r1, #12]
   d83b6:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d83b8:	4611      	mov	r1, r2
   d83ba:	f851 3b04 	ldr.w	r3, [r1], #4
   d83be:	f840 3b04 	str.w	r3, [r0], #4
   d83c2:	f7fd fdde 	bl	d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d83c6:	4620      	mov	r0, r4
   d83c8:	bd10      	pop	{r4, pc}

000d83ca <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d83ca:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d83cc:	b510      	push	{r4, lr}
   d83ce:	4604      	mov	r4, r0
   d83d0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83d2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d83d4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d83d6:	b131      	cbz	r1, d83e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d83d8:	4611      	mov	r1, r2
   d83da:	f851 3b04 	ldr.w	r3, [r1], #4
   d83de:	f840 3b04 	str.w	r3, [r0], #4
   d83e2:	f7fd fdce 	bl	d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d83e6:	4620      	mov	r0, r4
   d83e8:	bd10      	pop	{r4, pc}

000d83ea <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d83ea:	b510      	push	{r4, lr}
   d83ec:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d83ee:	f000 f849 	bl	d8484 <_ZN8particle7globals11instanceSpiEv>
   d83f2:	f7fd fc6f 	bl	d5cd4 <_ZN8SPIClass9isEnabledEv>
   d83f6:	b128      	cbz	r0, d8404 <pinAvailable+0x1a>
   d83f8:	f1a4 030b 	sub.w	r3, r4, #11
   d83fc:	2b02      	cmp	r3, #2
   d83fe:	d801      	bhi.n	d8404 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d8400:	2000      	movs	r0, #0
   d8402:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8404:	f000 f88c 	bl	d8520 <_Z19__fetch_global_Wirev>
   d8408:	f7ff fc87 	bl	d7d1a <_ZN7TwoWire9isEnabledEv>
   d840c:	b108      	cbz	r0, d8412 <pinAvailable+0x28>
   d840e:	2c01      	cmp	r4, #1
   d8410:	d9f6      	bls.n	d8400 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8412:	f7ff fbc1 	bl	d7b98 <_Z22__fetch_global_Serial1v>
   d8416:	f7ff fbbb 	bl	d7b90 <_ZN11USARTSerial9isEnabledEv>
   d841a:	b118      	cbz	r0, d8424 <pinAvailable+0x3a>
   d841c:	f1a4 0309 	sub.w	r3, r4, #9
   d8420:	2b01      	cmp	r3, #1
   d8422:	d9ed      	bls.n	d8400 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8424:	2c23      	cmp	r4, #35	; 0x23
   d8426:	bf8c      	ite	hi
   d8428:	2000      	movhi	r0, #0
   d842a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d842c:	bd10      	pop	{r4, pc}

000d842e <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d842e:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8430:	b538      	push	{r3, r4, r5, lr}
   d8432:	4604      	mov	r4, r0
   d8434:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8436:	d80a      	bhi.n	d844e <pinMode+0x20>
   d8438:	29ff      	cmp	r1, #255	; 0xff
   d843a:	d008      	beq.n	d844e <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d843c:	f7ff ffd5 	bl	d83ea <pinAvailable>
   d8440:	b128      	cbz	r0, d844e <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8442:	4629      	mov	r1, r5
   d8444:	4620      	mov	r0, r4
}
   d8446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d844a:	f7fd b92b 	b.w	d56a4 <HAL_Pin_Mode>
   d844e:	bd38      	pop	{r3, r4, r5, pc}

000d8450 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8450:	b538      	push	{r3, r4, r5, lr}
   d8452:	4604      	mov	r4, r0
   d8454:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8456:	f7fd f92d 	bl	d56b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d845a:	28ff      	cmp	r0, #255	; 0xff
   d845c:	d010      	beq.n	d8480 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d845e:	2806      	cmp	r0, #6
   d8460:	d804      	bhi.n	d846c <digitalWrite+0x1c>
   d8462:	234d      	movs	r3, #77	; 0x4d
   d8464:	fa23 f000 	lsr.w	r0, r3, r0
   d8468:	07c3      	lsls	r3, r0, #31
   d846a:	d409      	bmi.n	d8480 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d846c:	4620      	mov	r0, r4
   d846e:	f7ff ffbc 	bl	d83ea <pinAvailable>
   d8472:	b128      	cbz	r0, d8480 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8474:	4629      	mov	r1, r5
   d8476:	4620      	mov	r0, r4
}
   d8478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d847c:	f7fd b922 	b.w	d56c4 <HAL_GPIO_Write>
   d8480:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8484 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d8484:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d8486:	4d0b      	ldr	r5, [pc, #44]	; (d84b4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8488:	6829      	ldr	r1, [r5, #0]
   d848a:	f011 0401 	ands.w	r4, r1, #1
   d848e:	d10f      	bne.n	d84b0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8490:	4628      	mov	r0, r5
   d8492:	f7fb fe13 	bl	d40bc <__cxa_guard_acquire>
   d8496:	b158      	cbz	r0, d84b0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8498:	4621      	mov	r1, r4
   d849a:	4807      	ldr	r0, [pc, #28]	; (d84b8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d849c:	f7fd fc0c 	bl	d5cb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d84a0:	4628      	mov	r0, r5
   d84a2:	f7fb fe10 	bl	d40c6 <__cxa_guard_release>
   d84a6:	4a05      	ldr	r2, [pc, #20]	; (d84bc <_ZN8particle7globals11instanceSpiEv+0x38>)
   d84a8:	4905      	ldr	r1, [pc, #20]	; (d84c0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d84aa:	4803      	ldr	r0, [pc, #12]	; (d84b8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d84ac:	f000 f85e 	bl	d856c <__aeabi_atexit>
    return instance;
}
   d84b0:	4801      	ldr	r0, [pc, #4]	; (d84b8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d84b2:	bd38      	pop	{r3, r4, r5, pc}
   d84b4:	2003e724 	.word	0x2003e724
   d84b8:	2003e718 	.word	0x2003e718
   d84bc:	2003e248 	.word	0x2003e248
   d84c0:	000d5ca9 	.word	0x000d5ca9

000d84c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d84c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d84c6:	4c07      	ldr	r4, [pc, #28]	; (d84e4 <_Z21__fetch_global_EEPROMv+0x20>)
   d84c8:	6823      	ldr	r3, [r4, #0]
   d84ca:	07db      	lsls	r3, r3, #31
   d84cc:	d408      	bmi.n	d84e0 <_Z21__fetch_global_EEPROMv+0x1c>
   d84ce:	4620      	mov	r0, r4
   d84d0:	f7fb fdf4 	bl	d40bc <__cxa_guard_acquire>
   d84d4:	b120      	cbz	r0, d84e0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d84d6:	f7fd f935 	bl	d5744 <HAL_EEPROM_Init>
   d84da:	4620      	mov	r0, r4
   d84dc:	f7fb fdf3 	bl	d40c6 <__cxa_guard_release>
	return eeprom;
}
   d84e0:	4801      	ldr	r0, [pc, #4]	; (d84e8 <_Z21__fetch_global_EEPROMv+0x24>)
   d84e2:	bd10      	pop	{r4, pc}
   d84e4:	2003e72c 	.word	0x2003e72c
   d84e8:	2003e730 	.word	0x2003e730

000d84ec <_Z17acquireWireBufferv>:
   d84ec:	b570      	push	{r4, r5, r6, lr}
   d84ee:	4604      	mov	r4, r0
   d84f0:	2514      	movs	r5, #20
   d84f2:	462a      	mov	r2, r5
   d84f4:	4e09      	ldr	r6, [pc, #36]	; (d851c <_Z17acquireWireBufferv+0x30>)
   d84f6:	2100      	movs	r1, #0
   d84f8:	f000 fdf6 	bl	d90e8 <memset>
   d84fc:	8025      	strh	r5, [r4, #0]
   d84fe:	2520      	movs	r5, #32
   d8500:	4631      	mov	r1, r6
   d8502:	60a5      	str	r5, [r4, #8]
   d8504:	6125      	str	r5, [r4, #16]
   d8506:	4628      	mov	r0, r5
   d8508:	f000 f840 	bl	d858c <_ZnajRKSt9nothrow_t>
   d850c:	4631      	mov	r1, r6
   d850e:	6060      	str	r0, [r4, #4]
   d8510:	4628      	mov	r0, r5
   d8512:	f000 f83b 	bl	d858c <_ZnajRKSt9nothrow_t>
   d8516:	60e0      	str	r0, [r4, #12]
   d8518:	4620      	mov	r0, r4
   d851a:	bd70      	pop	{r4, r5, r6, pc}
   d851c:	000d990a 	.word	0x000d990a

000d8520 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8520:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8522:	4d0e      	ldr	r5, [pc, #56]	; (d855c <_Z19__fetch_global_Wirev+0x3c>)
   d8524:	6829      	ldr	r1, [r5, #0]
   d8526:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d852a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d852c:	d113      	bne.n	d8556 <_Z19__fetch_global_Wirev+0x36>
   d852e:	4628      	mov	r0, r5
   d8530:	f7fb fdc4 	bl	d40bc <__cxa_guard_acquire>
   d8534:	b178      	cbz	r0, d8556 <_Z19__fetch_global_Wirev+0x36>
   d8536:	a801      	add	r0, sp, #4
   d8538:	f7ff ffd8 	bl	d84ec <_Z17acquireWireBufferv>
   d853c:	aa01      	add	r2, sp, #4
   d853e:	4621      	mov	r1, r4
   d8540:	4807      	ldr	r0, [pc, #28]	; (d8560 <_Z19__fetch_global_Wirev+0x40>)
   d8542:	f7ff fb8f 	bl	d7c64 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8546:	4628      	mov	r0, r5
   d8548:	f7fb fdbd 	bl	d40c6 <__cxa_guard_release>
   d854c:	4a05      	ldr	r2, [pc, #20]	; (d8564 <_Z19__fetch_global_Wirev+0x44>)
   d854e:	4906      	ldr	r1, [pc, #24]	; (d8568 <_Z19__fetch_global_Wirev+0x48>)
   d8550:	4803      	ldr	r0, [pc, #12]	; (d8560 <_Z19__fetch_global_Wirev+0x40>)
   d8552:	f000 f80b 	bl	d856c <__aeabi_atexit>
	return wire;
}
   d8556:	4802      	ldr	r0, [pc, #8]	; (d8560 <_Z19__fetch_global_Wirev+0x40>)
   d8558:	b007      	add	sp, #28
   d855a:	bd30      	pop	{r4, r5, pc}
   d855c:	2003e734 	.word	0x2003e734
   d8560:	2003e738 	.word	0x2003e738
   d8564:	2003e248 	.word	0x2003e248
   d8568:	000d7c0d 	.word	0x000d7c0d

000d856c <__aeabi_atexit>:
   d856c:	460b      	mov	r3, r1
   d856e:	4601      	mov	r1, r0
   d8570:	4618      	mov	r0, r3
   d8572:	f000 bd85 	b.w	d9080 <__cxa_atexit>
	...

000d8578 <_ZSt15get_new_handlerv>:
   d8578:	4b02      	ldr	r3, [pc, #8]	; (d8584 <_ZSt15get_new_handlerv+0xc>)
   d857a:	6818      	ldr	r0, [r3, #0]
   d857c:	f3bf 8f5f 	dmb	sy
   d8580:	4770      	bx	lr
   d8582:	bf00      	nop
   d8584:	2003e74c 	.word	0x2003e74c

000d8588 <_ZdlPvj>:
   d8588:	f7fb bd89 	b.w	d409e <_ZdlPv>

000d858c <_ZnajRKSt9nothrow_t>:
   d858c:	f000 b800 	b.w	d8590 <_ZnwjRKSt9nothrow_t>

000d8590 <_ZnwjRKSt9nothrow_t>:
   d8590:	b510      	push	{r4, lr}
   d8592:	2800      	cmp	r0, #0
   d8594:	bf14      	ite	ne
   d8596:	4604      	movne	r4, r0
   d8598:	2401      	moveq	r4, #1
   d859a:	4620      	mov	r0, r4
   d859c:	f7fd fb16 	bl	d5bcc <malloc>
   d85a0:	b920      	cbnz	r0, d85ac <_ZnwjRKSt9nothrow_t+0x1c>
   d85a2:	f7ff ffe9 	bl	d8578 <_ZSt15get_new_handlerv>
   d85a6:	b108      	cbz	r0, d85ac <_ZnwjRKSt9nothrow_t+0x1c>
   d85a8:	4780      	blx	r0
   d85aa:	e7f6      	b.n	d859a <_ZnwjRKSt9nothrow_t+0xa>
   d85ac:	bd10      	pop	{r4, pc}

000d85ae <_ZSt25__throw_bad_function_callv>:
   d85ae:	b508      	push	{r3, lr}
   d85b0:	f7fd fb2c 	bl	d5c0c <abort>

000d85b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d85b4:	4b18      	ldr	r3, [pc, #96]	; (d8618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d85b6:	681a      	ldr	r2, [r3, #0]
   d85b8:	07d1      	lsls	r1, r2, #31
   d85ba:	bf5c      	itt	pl
   d85bc:	2201      	movpl	r2, #1
   d85be:	601a      	strpl	r2, [r3, #0]
   d85c0:	4b16      	ldr	r3, [pc, #88]	; (d861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d85c2:	681a      	ldr	r2, [r3, #0]
   d85c4:	07d2      	lsls	r2, r2, #31
   d85c6:	bf5c      	itt	pl
   d85c8:	2201      	movpl	r2, #1
   d85ca:	601a      	strpl	r2, [r3, #0]
   d85cc:	4b14      	ldr	r3, [pc, #80]	; (d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d85ce:	681a      	ldr	r2, [r3, #0]
   d85d0:	07d0      	lsls	r0, r2, #31
   d85d2:	bf5c      	itt	pl
   d85d4:	2201      	movpl	r2, #1
   d85d6:	601a      	strpl	r2, [r3, #0]
   d85d8:	4b12      	ldr	r3, [pc, #72]	; (d8624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d85da:	681a      	ldr	r2, [r3, #0]
   d85dc:	07d1      	lsls	r1, r2, #31
   d85de:	bf5c      	itt	pl
   d85e0:	2201      	movpl	r2, #1
   d85e2:	601a      	strpl	r2, [r3, #0]
   d85e4:	4b10      	ldr	r3, [pc, #64]	; (d8628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d85e6:	681a      	ldr	r2, [r3, #0]
   d85e8:	07d2      	lsls	r2, r2, #31
   d85ea:	bf5c      	itt	pl
   d85ec:	2201      	movpl	r2, #1
   d85ee:	601a      	strpl	r2, [r3, #0]
   d85f0:	4b0e      	ldr	r3, [pc, #56]	; (d862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d85f2:	681a      	ldr	r2, [r3, #0]
   d85f4:	07d0      	lsls	r0, r2, #31
   d85f6:	bf5c      	itt	pl
   d85f8:	2201      	movpl	r2, #1
   d85fa:	601a      	strpl	r2, [r3, #0]
   d85fc:	4b0c      	ldr	r3, [pc, #48]	; (d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d85fe:	681a      	ldr	r2, [r3, #0]
   d8600:	07d1      	lsls	r1, r2, #31
   d8602:	bf5c      	itt	pl
   d8604:	2201      	movpl	r2, #1
   d8606:	601a      	strpl	r2, [r3, #0]
   d8608:	4b0a      	ldr	r3, [pc, #40]	; (d8634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d860a:	681a      	ldr	r2, [r3, #0]
   d860c:	07d2      	lsls	r2, r2, #31
   d860e:	bf5c      	itt	pl
   d8610:	2201      	movpl	r2, #1
   d8612:	601a      	strpl	r2, [r3, #0]
   d8614:	4770      	bx	lr
   d8616:	bf00      	nop
   d8618:	2003e76c 	.word	0x2003e76c
   d861c:	2003e768 	.word	0x2003e768
   d8620:	2003e764 	.word	0x2003e764
   d8624:	2003e760 	.word	0x2003e760
   d8628:	2003e75c 	.word	0x2003e75c
   d862c:	2003e758 	.word	0x2003e758
   d8630:	2003e754 	.word	0x2003e754
   d8634:	2003e750 	.word	0x2003e750

000d8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8638:	4b24      	ldr	r3, [pc, #144]	; (d86cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d863a:	681a      	ldr	r2, [r3, #0]
   d863c:	07d0      	lsls	r0, r2, #31
   d863e:	bf5c      	itt	pl
   d8640:	2201      	movpl	r2, #1
   d8642:	601a      	strpl	r2, [r3, #0]
   d8644:	4b22      	ldr	r3, [pc, #136]	; (d86d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8646:	681a      	ldr	r2, [r3, #0]
   d8648:	07d1      	lsls	r1, r2, #31
   d864a:	bf5c      	itt	pl
   d864c:	2201      	movpl	r2, #1
   d864e:	601a      	strpl	r2, [r3, #0]
   d8650:	4b20      	ldr	r3, [pc, #128]	; (d86d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8652:	681a      	ldr	r2, [r3, #0]
   d8654:	07d2      	lsls	r2, r2, #31
   d8656:	bf5c      	itt	pl
   d8658:	2201      	movpl	r2, #1
   d865a:	601a      	strpl	r2, [r3, #0]
   d865c:	4b1e      	ldr	r3, [pc, #120]	; (d86d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d865e:	681a      	ldr	r2, [r3, #0]
   d8660:	07d0      	lsls	r0, r2, #31
   d8662:	bf5c      	itt	pl
   d8664:	2201      	movpl	r2, #1
   d8666:	601a      	strpl	r2, [r3, #0]
   d8668:	4b1c      	ldr	r3, [pc, #112]	; (d86dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d866a:	681a      	ldr	r2, [r3, #0]
   d866c:	07d1      	lsls	r1, r2, #31
   d866e:	bf5c      	itt	pl
   d8670:	2201      	movpl	r2, #1
   d8672:	601a      	strpl	r2, [r3, #0]
   d8674:	4b1a      	ldr	r3, [pc, #104]	; (d86e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8676:	681a      	ldr	r2, [r3, #0]
   d8678:	07d2      	lsls	r2, r2, #31
   d867a:	bf5c      	itt	pl
   d867c:	2201      	movpl	r2, #1
   d867e:	601a      	strpl	r2, [r3, #0]
   d8680:	4b18      	ldr	r3, [pc, #96]	; (d86e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8682:	681a      	ldr	r2, [r3, #0]
   d8684:	07d0      	lsls	r0, r2, #31
   d8686:	bf5c      	itt	pl
   d8688:	2201      	movpl	r2, #1
   d868a:	601a      	strpl	r2, [r3, #0]
   d868c:	4b16      	ldr	r3, [pc, #88]	; (d86e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d868e:	681a      	ldr	r2, [r3, #0]
   d8690:	07d1      	lsls	r1, r2, #31
   d8692:	bf5c      	itt	pl
   d8694:	2201      	movpl	r2, #1
   d8696:	601a      	strpl	r2, [r3, #0]
   d8698:	4b14      	ldr	r3, [pc, #80]	; (d86ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d869a:	681a      	ldr	r2, [r3, #0]
   d869c:	07d2      	lsls	r2, r2, #31
   d869e:	bf5c      	itt	pl
   d86a0:	2201      	movpl	r2, #1
   d86a2:	601a      	strpl	r2, [r3, #0]
   d86a4:	4b12      	ldr	r3, [pc, #72]	; (d86f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d86a6:	681a      	ldr	r2, [r3, #0]
   d86a8:	07d0      	lsls	r0, r2, #31
   d86aa:	bf5c      	itt	pl
   d86ac:	2201      	movpl	r2, #1
   d86ae:	601a      	strpl	r2, [r3, #0]
   d86b0:	4b10      	ldr	r3, [pc, #64]	; (d86f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d86b2:	681a      	ldr	r2, [r3, #0]
   d86b4:	07d1      	lsls	r1, r2, #31
   d86b6:	bf5c      	itt	pl
   d86b8:	2201      	movpl	r2, #1
   d86ba:	601a      	strpl	r2, [r3, #0]
   d86bc:	4b0e      	ldr	r3, [pc, #56]	; (d86f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d86be:	681a      	ldr	r2, [r3, #0]
   d86c0:	07d2      	lsls	r2, r2, #31
   d86c2:	bf5c      	itt	pl
   d86c4:	2201      	movpl	r2, #1
   d86c6:	601a      	strpl	r2, [r3, #0]
   d86c8:	4770      	bx	lr
   d86ca:	bf00      	nop
   d86cc:	2003e79c 	.word	0x2003e79c
   d86d0:	2003e798 	.word	0x2003e798
   d86d4:	2003e794 	.word	0x2003e794
   d86d8:	2003e790 	.word	0x2003e790
   d86dc:	2003e78c 	.word	0x2003e78c
   d86e0:	2003e788 	.word	0x2003e788
   d86e4:	2003e784 	.word	0x2003e784
   d86e8:	2003e780 	.word	0x2003e780
   d86ec:	2003e77c 	.word	0x2003e77c
   d86f0:	2003e778 	.word	0x2003e778
   d86f4:	2003e774 	.word	0x2003e774
   d86f8:	2003e770 	.word	0x2003e770

000d86fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d86fc:	4b24      	ldr	r3, [pc, #144]	; (d8790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d86fe:	681a      	ldr	r2, [r3, #0]
   d8700:	07d0      	lsls	r0, r2, #31
   d8702:	bf5c      	itt	pl
   d8704:	2201      	movpl	r2, #1
   d8706:	601a      	strpl	r2, [r3, #0]
   d8708:	4b22      	ldr	r3, [pc, #136]	; (d8794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d870a:	681a      	ldr	r2, [r3, #0]
   d870c:	07d1      	lsls	r1, r2, #31
   d870e:	bf5c      	itt	pl
   d8710:	2201      	movpl	r2, #1
   d8712:	601a      	strpl	r2, [r3, #0]
   d8714:	4b20      	ldr	r3, [pc, #128]	; (d8798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8716:	681a      	ldr	r2, [r3, #0]
   d8718:	07d2      	lsls	r2, r2, #31
   d871a:	bf5c      	itt	pl
   d871c:	2201      	movpl	r2, #1
   d871e:	601a      	strpl	r2, [r3, #0]
   d8720:	4b1e      	ldr	r3, [pc, #120]	; (d879c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8722:	681a      	ldr	r2, [r3, #0]
   d8724:	07d0      	lsls	r0, r2, #31
   d8726:	bf5c      	itt	pl
   d8728:	2201      	movpl	r2, #1
   d872a:	601a      	strpl	r2, [r3, #0]
   d872c:	4b1c      	ldr	r3, [pc, #112]	; (d87a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d872e:	681a      	ldr	r2, [r3, #0]
   d8730:	07d1      	lsls	r1, r2, #31
   d8732:	bf5c      	itt	pl
   d8734:	2201      	movpl	r2, #1
   d8736:	601a      	strpl	r2, [r3, #0]
   d8738:	4b1a      	ldr	r3, [pc, #104]	; (d87a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d873a:	681a      	ldr	r2, [r3, #0]
   d873c:	07d2      	lsls	r2, r2, #31
   d873e:	bf5c      	itt	pl
   d8740:	2201      	movpl	r2, #1
   d8742:	601a      	strpl	r2, [r3, #0]
   d8744:	4b18      	ldr	r3, [pc, #96]	; (d87a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8746:	681a      	ldr	r2, [r3, #0]
   d8748:	07d0      	lsls	r0, r2, #31
   d874a:	bf5c      	itt	pl
   d874c:	2201      	movpl	r2, #1
   d874e:	601a      	strpl	r2, [r3, #0]
   d8750:	4b16      	ldr	r3, [pc, #88]	; (d87ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8752:	681a      	ldr	r2, [r3, #0]
   d8754:	07d1      	lsls	r1, r2, #31
   d8756:	bf5c      	itt	pl
   d8758:	2201      	movpl	r2, #1
   d875a:	601a      	strpl	r2, [r3, #0]
   d875c:	4b14      	ldr	r3, [pc, #80]	; (d87b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d875e:	681a      	ldr	r2, [r3, #0]
   d8760:	07d2      	lsls	r2, r2, #31
   d8762:	bf5c      	itt	pl
   d8764:	2201      	movpl	r2, #1
   d8766:	601a      	strpl	r2, [r3, #0]
   d8768:	4b12      	ldr	r3, [pc, #72]	; (d87b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d876a:	681a      	ldr	r2, [r3, #0]
   d876c:	07d0      	lsls	r0, r2, #31
   d876e:	bf5c      	itt	pl
   d8770:	2201      	movpl	r2, #1
   d8772:	601a      	strpl	r2, [r3, #0]
   d8774:	4b10      	ldr	r3, [pc, #64]	; (d87b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8776:	681a      	ldr	r2, [r3, #0]
   d8778:	07d1      	lsls	r1, r2, #31
   d877a:	bf5c      	itt	pl
   d877c:	2201      	movpl	r2, #1
   d877e:	601a      	strpl	r2, [r3, #0]
   d8780:	4b0e      	ldr	r3, [pc, #56]	; (d87bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8782:	681a      	ldr	r2, [r3, #0]
   d8784:	07d2      	lsls	r2, r2, #31
   d8786:	bf5c      	itt	pl
   d8788:	2201      	movpl	r2, #1
   d878a:	601a      	strpl	r2, [r3, #0]
   d878c:	4770      	bx	lr
   d878e:	bf00      	nop
   d8790:	2003e7cc 	.word	0x2003e7cc
   d8794:	2003e7c8 	.word	0x2003e7c8
   d8798:	2003e7c4 	.word	0x2003e7c4
   d879c:	2003e7c0 	.word	0x2003e7c0
   d87a0:	2003e7bc 	.word	0x2003e7bc
   d87a4:	2003e7b8 	.word	0x2003e7b8
   d87a8:	2003e7b4 	.word	0x2003e7b4
   d87ac:	2003e7b0 	.word	0x2003e7b0
   d87b0:	2003e7ac 	.word	0x2003e7ac
   d87b4:	2003e7a8 	.word	0x2003e7a8
   d87b8:	2003e7a4 	.word	0x2003e7a4
   d87bc:	2003e7a0 	.word	0x2003e7a0

000d87c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d87c0:	4b18      	ldr	r3, [pc, #96]	; (d8824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d87c2:	681a      	ldr	r2, [r3, #0]
   d87c4:	07d1      	lsls	r1, r2, #31
   d87c6:	bf5c      	itt	pl
   d87c8:	2201      	movpl	r2, #1
   d87ca:	601a      	strpl	r2, [r3, #0]
   d87cc:	4b16      	ldr	r3, [pc, #88]	; (d8828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d87ce:	681a      	ldr	r2, [r3, #0]
   d87d0:	07d2      	lsls	r2, r2, #31
   d87d2:	bf5c      	itt	pl
   d87d4:	2201      	movpl	r2, #1
   d87d6:	601a      	strpl	r2, [r3, #0]
   d87d8:	4b14      	ldr	r3, [pc, #80]	; (d882c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d87da:	681a      	ldr	r2, [r3, #0]
   d87dc:	07d0      	lsls	r0, r2, #31
   d87de:	bf5c      	itt	pl
   d87e0:	2201      	movpl	r2, #1
   d87e2:	601a      	strpl	r2, [r3, #0]
   d87e4:	4b12      	ldr	r3, [pc, #72]	; (d8830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d87e6:	681a      	ldr	r2, [r3, #0]
   d87e8:	07d1      	lsls	r1, r2, #31
   d87ea:	bf5c      	itt	pl
   d87ec:	2201      	movpl	r2, #1
   d87ee:	601a      	strpl	r2, [r3, #0]
   d87f0:	4b10      	ldr	r3, [pc, #64]	; (d8834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d87f2:	681a      	ldr	r2, [r3, #0]
   d87f4:	07d2      	lsls	r2, r2, #31
   d87f6:	bf5c      	itt	pl
   d87f8:	2201      	movpl	r2, #1
   d87fa:	601a      	strpl	r2, [r3, #0]
   d87fc:	4b0e      	ldr	r3, [pc, #56]	; (d8838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d87fe:	681a      	ldr	r2, [r3, #0]
   d8800:	07d0      	lsls	r0, r2, #31
   d8802:	bf5c      	itt	pl
   d8804:	2201      	movpl	r2, #1
   d8806:	601a      	strpl	r2, [r3, #0]
   d8808:	4b0c      	ldr	r3, [pc, #48]	; (d883c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d880a:	681a      	ldr	r2, [r3, #0]
   d880c:	07d1      	lsls	r1, r2, #31
   d880e:	bf5c      	itt	pl
   d8810:	2201      	movpl	r2, #1
   d8812:	601a      	strpl	r2, [r3, #0]
   d8814:	4b0a      	ldr	r3, [pc, #40]	; (d8840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8816:	681a      	ldr	r2, [r3, #0]
   d8818:	07d2      	lsls	r2, r2, #31
   d881a:	bf5c      	itt	pl
   d881c:	2201      	movpl	r2, #1
   d881e:	601a      	strpl	r2, [r3, #0]
   d8820:	4770      	bx	lr
   d8822:	bf00      	nop
   d8824:	2003e7ec 	.word	0x2003e7ec
   d8828:	2003e7e8 	.word	0x2003e7e8
   d882c:	2003e7e4 	.word	0x2003e7e4
   d8830:	2003e7e0 	.word	0x2003e7e0
   d8834:	2003e7dc 	.word	0x2003e7dc
   d8838:	2003e7d8 	.word	0x2003e7d8
   d883c:	2003e7d4 	.word	0x2003e7d4
   d8840:	2003e7d0 	.word	0x2003e7d0

000d8844 <__aeabi_drsub>:
   d8844:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8848:	e002      	b.n	d8850 <__adddf3>
   d884a:	bf00      	nop

000d884c <__aeabi_dsub>:
   d884c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8850 <__adddf3>:
   d8850:	b530      	push	{r4, r5, lr}
   d8852:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8856:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d885a:	ea94 0f05 	teq	r4, r5
   d885e:	bf08      	it	eq
   d8860:	ea90 0f02 	teqeq	r0, r2
   d8864:	bf1f      	itttt	ne
   d8866:	ea54 0c00 	orrsne.w	ip, r4, r0
   d886a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d886e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8872:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8876:	f000 80e2 	beq.w	d8a3e <__adddf3+0x1ee>
   d887a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d887e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8882:	bfb8      	it	lt
   d8884:	426d      	neglt	r5, r5
   d8886:	dd0c      	ble.n	d88a2 <__adddf3+0x52>
   d8888:	442c      	add	r4, r5
   d888a:	ea80 0202 	eor.w	r2, r0, r2
   d888e:	ea81 0303 	eor.w	r3, r1, r3
   d8892:	ea82 0000 	eor.w	r0, r2, r0
   d8896:	ea83 0101 	eor.w	r1, r3, r1
   d889a:	ea80 0202 	eor.w	r2, r0, r2
   d889e:	ea81 0303 	eor.w	r3, r1, r3
   d88a2:	2d36      	cmp	r5, #54	; 0x36
   d88a4:	bf88      	it	hi
   d88a6:	bd30      	pophi	{r4, r5, pc}
   d88a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d88ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d88b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d88b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d88b8:	d002      	beq.n	d88c0 <__adddf3+0x70>
   d88ba:	4240      	negs	r0, r0
   d88bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d88c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d88c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d88c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d88cc:	d002      	beq.n	d88d4 <__adddf3+0x84>
   d88ce:	4252      	negs	r2, r2
   d88d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d88d4:	ea94 0f05 	teq	r4, r5
   d88d8:	f000 80a7 	beq.w	d8a2a <__adddf3+0x1da>
   d88dc:	f1a4 0401 	sub.w	r4, r4, #1
   d88e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d88e4:	db0d      	blt.n	d8902 <__adddf3+0xb2>
   d88e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d88ea:	fa22 f205 	lsr.w	r2, r2, r5
   d88ee:	1880      	adds	r0, r0, r2
   d88f0:	f141 0100 	adc.w	r1, r1, #0
   d88f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d88f8:	1880      	adds	r0, r0, r2
   d88fa:	fa43 f305 	asr.w	r3, r3, r5
   d88fe:	4159      	adcs	r1, r3
   d8900:	e00e      	b.n	d8920 <__adddf3+0xd0>
   d8902:	f1a5 0520 	sub.w	r5, r5, #32
   d8906:	f10e 0e20 	add.w	lr, lr, #32
   d890a:	2a01      	cmp	r2, #1
   d890c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8910:	bf28      	it	cs
   d8912:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8916:	fa43 f305 	asr.w	r3, r3, r5
   d891a:	18c0      	adds	r0, r0, r3
   d891c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8924:	d507      	bpl.n	d8936 <__adddf3+0xe6>
   d8926:	f04f 0e00 	mov.w	lr, #0
   d892a:	f1dc 0c00 	rsbs	ip, ip, #0
   d892e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8932:	eb6e 0101 	sbc.w	r1, lr, r1
   d8936:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d893a:	d31b      	bcc.n	d8974 <__adddf3+0x124>
   d893c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8940:	d30c      	bcc.n	d895c <__adddf3+0x10c>
   d8942:	0849      	lsrs	r1, r1, #1
   d8944:	ea5f 0030 	movs.w	r0, r0, rrx
   d8948:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d894c:	f104 0401 	add.w	r4, r4, #1
   d8950:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8954:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8958:	f080 809a 	bcs.w	d8a90 <__adddf3+0x240>
   d895c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8960:	bf08      	it	eq
   d8962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8966:	f150 0000 	adcs.w	r0, r0, #0
   d896a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d896e:	ea41 0105 	orr.w	r1, r1, r5
   d8972:	bd30      	pop	{r4, r5, pc}
   d8974:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8978:	4140      	adcs	r0, r0
   d897a:	eb41 0101 	adc.w	r1, r1, r1
   d897e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8982:	f1a4 0401 	sub.w	r4, r4, #1
   d8986:	d1e9      	bne.n	d895c <__adddf3+0x10c>
   d8988:	f091 0f00 	teq	r1, #0
   d898c:	bf04      	itt	eq
   d898e:	4601      	moveq	r1, r0
   d8990:	2000      	moveq	r0, #0
   d8992:	fab1 f381 	clz	r3, r1
   d8996:	bf08      	it	eq
   d8998:	3320      	addeq	r3, #32
   d899a:	f1a3 030b 	sub.w	r3, r3, #11
   d899e:	f1b3 0220 	subs.w	r2, r3, #32
   d89a2:	da0c      	bge.n	d89be <__adddf3+0x16e>
   d89a4:	320c      	adds	r2, #12
   d89a6:	dd08      	ble.n	d89ba <__adddf3+0x16a>
   d89a8:	f102 0c14 	add.w	ip, r2, #20
   d89ac:	f1c2 020c 	rsb	r2, r2, #12
   d89b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d89b4:	fa21 f102 	lsr.w	r1, r1, r2
   d89b8:	e00c      	b.n	d89d4 <__adddf3+0x184>
   d89ba:	f102 0214 	add.w	r2, r2, #20
   d89be:	bfd8      	it	le
   d89c0:	f1c2 0c20 	rsble	ip, r2, #32
   d89c4:	fa01 f102 	lsl.w	r1, r1, r2
   d89c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d89cc:	bfdc      	itt	le
   d89ce:	ea41 010c 	orrle.w	r1, r1, ip
   d89d2:	4090      	lslle	r0, r2
   d89d4:	1ae4      	subs	r4, r4, r3
   d89d6:	bfa2      	ittt	ge
   d89d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d89dc:	4329      	orrge	r1, r5
   d89de:	bd30      	popge	{r4, r5, pc}
   d89e0:	ea6f 0404 	mvn.w	r4, r4
   d89e4:	3c1f      	subs	r4, #31
   d89e6:	da1c      	bge.n	d8a22 <__adddf3+0x1d2>
   d89e8:	340c      	adds	r4, #12
   d89ea:	dc0e      	bgt.n	d8a0a <__adddf3+0x1ba>
   d89ec:	f104 0414 	add.w	r4, r4, #20
   d89f0:	f1c4 0220 	rsb	r2, r4, #32
   d89f4:	fa20 f004 	lsr.w	r0, r0, r4
   d89f8:	fa01 f302 	lsl.w	r3, r1, r2
   d89fc:	ea40 0003 	orr.w	r0, r0, r3
   d8a00:	fa21 f304 	lsr.w	r3, r1, r4
   d8a04:	ea45 0103 	orr.w	r1, r5, r3
   d8a08:	bd30      	pop	{r4, r5, pc}
   d8a0a:	f1c4 040c 	rsb	r4, r4, #12
   d8a0e:	f1c4 0220 	rsb	r2, r4, #32
   d8a12:	fa20 f002 	lsr.w	r0, r0, r2
   d8a16:	fa01 f304 	lsl.w	r3, r1, r4
   d8a1a:	ea40 0003 	orr.w	r0, r0, r3
   d8a1e:	4629      	mov	r1, r5
   d8a20:	bd30      	pop	{r4, r5, pc}
   d8a22:	fa21 f004 	lsr.w	r0, r1, r4
   d8a26:	4629      	mov	r1, r5
   d8a28:	bd30      	pop	{r4, r5, pc}
   d8a2a:	f094 0f00 	teq	r4, #0
   d8a2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8a32:	bf06      	itte	eq
   d8a34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8a38:	3401      	addeq	r4, #1
   d8a3a:	3d01      	subne	r5, #1
   d8a3c:	e74e      	b.n	d88dc <__adddf3+0x8c>
   d8a3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a42:	bf18      	it	ne
   d8a44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a48:	d029      	beq.n	d8a9e <__adddf3+0x24e>
   d8a4a:	ea94 0f05 	teq	r4, r5
   d8a4e:	bf08      	it	eq
   d8a50:	ea90 0f02 	teqeq	r0, r2
   d8a54:	d005      	beq.n	d8a62 <__adddf3+0x212>
   d8a56:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a5a:	bf04      	itt	eq
   d8a5c:	4619      	moveq	r1, r3
   d8a5e:	4610      	moveq	r0, r2
   d8a60:	bd30      	pop	{r4, r5, pc}
   d8a62:	ea91 0f03 	teq	r1, r3
   d8a66:	bf1e      	ittt	ne
   d8a68:	2100      	movne	r1, #0
   d8a6a:	2000      	movne	r0, #0
   d8a6c:	bd30      	popne	{r4, r5, pc}
   d8a6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a72:	d105      	bne.n	d8a80 <__adddf3+0x230>
   d8a74:	0040      	lsls	r0, r0, #1
   d8a76:	4149      	adcs	r1, r1
   d8a78:	bf28      	it	cs
   d8a7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a7e:	bd30      	pop	{r4, r5, pc}
   d8a80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a84:	bf3c      	itt	cc
   d8a86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a8a:	bd30      	popcc	{r4, r5, pc}
   d8a8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a98:	f04f 0000 	mov.w	r0, #0
   d8a9c:	bd30      	pop	{r4, r5, pc}
   d8a9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8aa2:	bf1a      	itte	ne
   d8aa4:	4619      	movne	r1, r3
   d8aa6:	4610      	movne	r0, r2
   d8aa8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8aac:	bf1c      	itt	ne
   d8aae:	460b      	movne	r3, r1
   d8ab0:	4602      	movne	r2, r0
   d8ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8ab6:	bf06      	itte	eq
   d8ab8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8abc:	ea91 0f03 	teqeq	r1, r3
   d8ac0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ac4:	bd30      	pop	{r4, r5, pc}
   d8ac6:	bf00      	nop

000d8ac8 <__aeabi_ui2d>:
   d8ac8:	f090 0f00 	teq	r0, #0
   d8acc:	bf04      	itt	eq
   d8ace:	2100      	moveq	r1, #0
   d8ad0:	4770      	bxeq	lr
   d8ad2:	b530      	push	{r4, r5, lr}
   d8ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8adc:	f04f 0500 	mov.w	r5, #0
   d8ae0:	f04f 0100 	mov.w	r1, #0
   d8ae4:	e750      	b.n	d8988 <__adddf3+0x138>
   d8ae6:	bf00      	nop

000d8ae8 <__aeabi_i2d>:
   d8ae8:	f090 0f00 	teq	r0, #0
   d8aec:	bf04      	itt	eq
   d8aee:	2100      	moveq	r1, #0
   d8af0:	4770      	bxeq	lr
   d8af2:	b530      	push	{r4, r5, lr}
   d8af4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8af8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8afc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8b00:	bf48      	it	mi
   d8b02:	4240      	negmi	r0, r0
   d8b04:	f04f 0100 	mov.w	r1, #0
   d8b08:	e73e      	b.n	d8988 <__adddf3+0x138>
   d8b0a:	bf00      	nop

000d8b0c <__aeabi_f2d>:
   d8b0c:	0042      	lsls	r2, r0, #1
   d8b0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8b12:	ea4f 0131 	mov.w	r1, r1, rrx
   d8b16:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8b1a:	bf1f      	itttt	ne
   d8b1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8b20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8b28:	4770      	bxne	lr
   d8b2a:	f092 0f00 	teq	r2, #0
   d8b2e:	bf14      	ite	ne
   d8b30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b34:	4770      	bxeq	lr
   d8b36:	b530      	push	{r4, r5, lr}
   d8b38:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8b3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b44:	e720      	b.n	d8988 <__adddf3+0x138>
   d8b46:	bf00      	nop

000d8b48 <__aeabi_ul2d>:
   d8b48:	ea50 0201 	orrs.w	r2, r0, r1
   d8b4c:	bf08      	it	eq
   d8b4e:	4770      	bxeq	lr
   d8b50:	b530      	push	{r4, r5, lr}
   d8b52:	f04f 0500 	mov.w	r5, #0
   d8b56:	e00a      	b.n	d8b6e <__aeabi_l2d+0x16>

000d8b58 <__aeabi_l2d>:
   d8b58:	ea50 0201 	orrs.w	r2, r0, r1
   d8b5c:	bf08      	it	eq
   d8b5e:	4770      	bxeq	lr
   d8b60:	b530      	push	{r4, r5, lr}
   d8b62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8b66:	d502      	bpl.n	d8b6e <__aeabi_l2d+0x16>
   d8b68:	4240      	negs	r0, r0
   d8b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b7a:	f43f aedc 	beq.w	d8936 <__adddf3+0xe6>
   d8b7e:	f04f 0203 	mov.w	r2, #3
   d8b82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b86:	bf18      	it	ne
   d8b88:	3203      	addne	r2, #3
   d8b8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b8e:	bf18      	it	ne
   d8b90:	3203      	addne	r2, #3
   d8b92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b96:	f1c2 0320 	rsb	r3, r2, #32
   d8b9a:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b9e:	fa20 f002 	lsr.w	r0, r0, r2
   d8ba2:	fa01 fe03 	lsl.w	lr, r1, r3
   d8ba6:	ea40 000e 	orr.w	r0, r0, lr
   d8baa:	fa21 f102 	lsr.w	r1, r1, r2
   d8bae:	4414      	add	r4, r2
   d8bb0:	e6c1      	b.n	d8936 <__adddf3+0xe6>
   d8bb2:	bf00      	nop

000d8bb4 <__aeabi_dmul>:
   d8bb4:	b570      	push	{r4, r5, r6, lr}
   d8bb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8bba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8bbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8bc2:	bf1d      	ittte	ne
   d8bc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8bc8:	ea94 0f0c 	teqne	r4, ip
   d8bcc:	ea95 0f0c 	teqne	r5, ip
   d8bd0:	f000 f8de 	bleq	d8d90 <__aeabi_dmul+0x1dc>
   d8bd4:	442c      	add	r4, r5
   d8bd6:	ea81 0603 	eor.w	r6, r1, r3
   d8bda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8bde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8be2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8be6:	bf18      	it	ne
   d8be8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8bec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8bf4:	d038      	beq.n	d8c68 <__aeabi_dmul+0xb4>
   d8bf6:	fba0 ce02 	umull	ip, lr, r0, r2
   d8bfa:	f04f 0500 	mov.w	r5, #0
   d8bfe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8c02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8c06:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8c0a:	f04f 0600 	mov.w	r6, #0
   d8c0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8c12:	f09c 0f00 	teq	ip, #0
   d8c16:	bf18      	it	ne
   d8c18:	f04e 0e01 	orrne.w	lr, lr, #1
   d8c1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8c20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8c24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8c28:	d204      	bcs.n	d8c34 <__aeabi_dmul+0x80>
   d8c2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8c2e:	416d      	adcs	r5, r5
   d8c30:	eb46 0606 	adc.w	r6, r6, r6
   d8c34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8c38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8c3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8c40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8c44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8c48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c4c:	bf88      	it	hi
   d8c4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c52:	d81e      	bhi.n	d8c92 <__aeabi_dmul+0xde>
   d8c54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c58:	bf08      	it	eq
   d8c5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c5e:	f150 0000 	adcs.w	r0, r0, #0
   d8c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c66:	bd70      	pop	{r4, r5, r6, pc}
   d8c68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c6c:	ea46 0101 	orr.w	r1, r6, r1
   d8c70:	ea40 0002 	orr.w	r0, r0, r2
   d8c74:	ea81 0103 	eor.w	r1, r1, r3
   d8c78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c7c:	bfc2      	ittt	gt
   d8c7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c86:	bd70      	popgt	{r4, r5, r6, pc}
   d8c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c8c:	f04f 0e00 	mov.w	lr, #0
   d8c90:	3c01      	subs	r4, #1
   d8c92:	f300 80ab 	bgt.w	d8dec <__aeabi_dmul+0x238>
   d8c96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c9a:	bfde      	ittt	le
   d8c9c:	2000      	movle	r0, #0
   d8c9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8ca2:	bd70      	pople	{r4, r5, r6, pc}
   d8ca4:	f1c4 0400 	rsb	r4, r4, #0
   d8ca8:	3c20      	subs	r4, #32
   d8caa:	da35      	bge.n	d8d18 <__aeabi_dmul+0x164>
   d8cac:	340c      	adds	r4, #12
   d8cae:	dc1b      	bgt.n	d8ce8 <__aeabi_dmul+0x134>
   d8cb0:	f104 0414 	add.w	r4, r4, #20
   d8cb4:	f1c4 0520 	rsb	r5, r4, #32
   d8cb8:	fa00 f305 	lsl.w	r3, r0, r5
   d8cbc:	fa20 f004 	lsr.w	r0, r0, r4
   d8cc0:	fa01 f205 	lsl.w	r2, r1, r5
   d8cc4:	ea40 0002 	orr.w	r0, r0, r2
   d8cc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8ccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8cd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8cd4:	fa21 f604 	lsr.w	r6, r1, r4
   d8cd8:	eb42 0106 	adc.w	r1, r2, r6
   d8cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ce0:	bf08      	it	eq
   d8ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ce6:	bd70      	pop	{r4, r5, r6, pc}
   d8ce8:	f1c4 040c 	rsb	r4, r4, #12
   d8cec:	f1c4 0520 	rsb	r5, r4, #32
   d8cf0:	fa00 f304 	lsl.w	r3, r0, r4
   d8cf4:	fa20 f005 	lsr.w	r0, r0, r5
   d8cf8:	fa01 f204 	lsl.w	r2, r1, r4
   d8cfc:	ea40 0002 	orr.w	r0, r0, r2
   d8d00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d08:	f141 0100 	adc.w	r1, r1, #0
   d8d0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d10:	bf08      	it	eq
   d8d12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d16:	bd70      	pop	{r4, r5, r6, pc}
   d8d18:	f1c4 0520 	rsb	r5, r4, #32
   d8d1c:	fa00 f205 	lsl.w	r2, r0, r5
   d8d20:	ea4e 0e02 	orr.w	lr, lr, r2
   d8d24:	fa20 f304 	lsr.w	r3, r0, r4
   d8d28:	fa01 f205 	lsl.w	r2, r1, r5
   d8d2c:	ea43 0302 	orr.w	r3, r3, r2
   d8d30:	fa21 f004 	lsr.w	r0, r1, r4
   d8d34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d38:	fa21 f204 	lsr.w	r2, r1, r4
   d8d3c:	ea20 0002 	bic.w	r0, r0, r2
   d8d40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8d44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d48:	bf08      	it	eq
   d8d4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d4e:	bd70      	pop	{r4, r5, r6, pc}
   d8d50:	f094 0f00 	teq	r4, #0
   d8d54:	d10f      	bne.n	d8d76 <__aeabi_dmul+0x1c2>
   d8d56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d5a:	0040      	lsls	r0, r0, #1
   d8d5c:	eb41 0101 	adc.w	r1, r1, r1
   d8d60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d64:	bf08      	it	eq
   d8d66:	3c01      	subeq	r4, #1
   d8d68:	d0f7      	beq.n	d8d5a <__aeabi_dmul+0x1a6>
   d8d6a:	ea41 0106 	orr.w	r1, r1, r6
   d8d6e:	f095 0f00 	teq	r5, #0
   d8d72:	bf18      	it	ne
   d8d74:	4770      	bxne	lr
   d8d76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d7a:	0052      	lsls	r2, r2, #1
   d8d7c:	eb43 0303 	adc.w	r3, r3, r3
   d8d80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d84:	bf08      	it	eq
   d8d86:	3d01      	subeq	r5, #1
   d8d88:	d0f7      	beq.n	d8d7a <__aeabi_dmul+0x1c6>
   d8d8a:	ea43 0306 	orr.w	r3, r3, r6
   d8d8e:	4770      	bx	lr
   d8d90:	ea94 0f0c 	teq	r4, ip
   d8d94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d98:	bf18      	it	ne
   d8d9a:	ea95 0f0c 	teqne	r5, ip
   d8d9e:	d00c      	beq.n	d8dba <__aeabi_dmul+0x206>
   d8da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8da4:	bf18      	it	ne
   d8da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8daa:	d1d1      	bne.n	d8d50 <__aeabi_dmul+0x19c>
   d8dac:	ea81 0103 	eor.w	r1, r1, r3
   d8db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8db4:	f04f 0000 	mov.w	r0, #0
   d8db8:	bd70      	pop	{r4, r5, r6, pc}
   d8dba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8dbe:	bf06      	itte	eq
   d8dc0:	4610      	moveq	r0, r2
   d8dc2:	4619      	moveq	r1, r3
   d8dc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8dc8:	d019      	beq.n	d8dfe <__aeabi_dmul+0x24a>
   d8dca:	ea94 0f0c 	teq	r4, ip
   d8dce:	d102      	bne.n	d8dd6 <__aeabi_dmul+0x222>
   d8dd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8dd4:	d113      	bne.n	d8dfe <__aeabi_dmul+0x24a>
   d8dd6:	ea95 0f0c 	teq	r5, ip
   d8dda:	d105      	bne.n	d8de8 <__aeabi_dmul+0x234>
   d8ddc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8de0:	bf1c      	itt	ne
   d8de2:	4610      	movne	r0, r2
   d8de4:	4619      	movne	r1, r3
   d8de6:	d10a      	bne.n	d8dfe <__aeabi_dmul+0x24a>
   d8de8:	ea81 0103 	eor.w	r1, r1, r3
   d8dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8df0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8df4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8df8:	f04f 0000 	mov.w	r0, #0
   d8dfc:	bd70      	pop	{r4, r5, r6, pc}
   d8dfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8e06:	bd70      	pop	{r4, r5, r6, pc}

000d8e08 <__aeabi_ddiv>:
   d8e08:	b570      	push	{r4, r5, r6, lr}
   d8e0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e16:	bf1d      	ittte	ne
   d8e18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e1c:	ea94 0f0c 	teqne	r4, ip
   d8e20:	ea95 0f0c 	teqne	r5, ip
   d8e24:	f000 f8a7 	bleq	d8f76 <__aeabi_ddiv+0x16e>
   d8e28:	eba4 0405 	sub.w	r4, r4, r5
   d8e2c:	ea81 0e03 	eor.w	lr, r1, r3
   d8e30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e38:	f000 8088 	beq.w	d8f4c <__aeabi_ddiv+0x144>
   d8e3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8e44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8e48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8e4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8e50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8e54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e60:	429d      	cmp	r5, r3
   d8e62:	bf08      	it	eq
   d8e64:	4296      	cmpeq	r6, r2
   d8e66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8e6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e6e:	d202      	bcs.n	d8e76 <__aeabi_ddiv+0x6e>
   d8e70:	085b      	lsrs	r3, r3, #1
   d8e72:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e76:	1ab6      	subs	r6, r6, r2
   d8e78:	eb65 0503 	sbc.w	r5, r5, r3
   d8e7c:	085b      	lsrs	r3, r3, #1
   d8e7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e92:	bf22      	ittt	cs
   d8e94:	1ab6      	subcs	r6, r6, r2
   d8e96:	4675      	movcs	r5, lr
   d8e98:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e9c:	085b      	lsrs	r3, r3, #1
   d8e9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ea2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8eaa:	bf22      	ittt	cs
   d8eac:	1ab6      	subcs	r6, r6, r2
   d8eae:	4675      	movcs	r5, lr
   d8eb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8eb4:	085b      	lsrs	r3, r3, #1
   d8eb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8eba:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ec2:	bf22      	ittt	cs
   d8ec4:	1ab6      	subcs	r6, r6, r2
   d8ec6:	4675      	movcs	r5, lr
   d8ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8ecc:	085b      	lsrs	r3, r3, #1
   d8ece:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ed2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8eda:	bf22      	ittt	cs
   d8edc:	1ab6      	subcs	r6, r6, r2
   d8ede:	4675      	movcs	r5, lr
   d8ee0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ee4:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ee8:	d018      	beq.n	d8f1c <__aeabi_ddiv+0x114>
   d8eea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8eee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8ef2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8ef6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8efa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8efe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8f02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8f06:	d1c0      	bne.n	d8e8a <__aeabi_ddiv+0x82>
   d8f08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f0c:	d10b      	bne.n	d8f26 <__aeabi_ddiv+0x11e>
   d8f0e:	ea41 0100 	orr.w	r1, r1, r0
   d8f12:	f04f 0000 	mov.w	r0, #0
   d8f16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8f1a:	e7b6      	b.n	d8e8a <__aeabi_ddiv+0x82>
   d8f1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f20:	bf04      	itt	eq
   d8f22:	4301      	orreq	r1, r0
   d8f24:	2000      	moveq	r0, #0
   d8f26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f2a:	bf88      	it	hi
   d8f2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f30:	f63f aeaf 	bhi.w	d8c92 <__aeabi_dmul+0xde>
   d8f34:	ebb5 0c03 	subs.w	ip, r5, r3
   d8f38:	bf04      	itt	eq
   d8f3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8f3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8f42:	f150 0000 	adcs.w	r0, r0, #0
   d8f46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f4a:	bd70      	pop	{r4, r5, r6, pc}
   d8f4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8f50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8f54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f58:	bfc2      	ittt	gt
   d8f5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f62:	bd70      	popgt	{r4, r5, r6, pc}
   d8f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f68:	f04f 0e00 	mov.w	lr, #0
   d8f6c:	3c01      	subs	r4, #1
   d8f6e:	e690      	b.n	d8c92 <__aeabi_dmul+0xde>
   d8f70:	ea45 0e06 	orr.w	lr, r5, r6
   d8f74:	e68d      	b.n	d8c92 <__aeabi_dmul+0xde>
   d8f76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f7a:	ea94 0f0c 	teq	r4, ip
   d8f7e:	bf08      	it	eq
   d8f80:	ea95 0f0c 	teqeq	r5, ip
   d8f84:	f43f af3b 	beq.w	d8dfe <__aeabi_dmul+0x24a>
   d8f88:	ea94 0f0c 	teq	r4, ip
   d8f8c:	d10a      	bne.n	d8fa4 <__aeabi_ddiv+0x19c>
   d8f8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f92:	f47f af34 	bne.w	d8dfe <__aeabi_dmul+0x24a>
   d8f96:	ea95 0f0c 	teq	r5, ip
   d8f9a:	f47f af25 	bne.w	d8de8 <__aeabi_dmul+0x234>
   d8f9e:	4610      	mov	r0, r2
   d8fa0:	4619      	mov	r1, r3
   d8fa2:	e72c      	b.n	d8dfe <__aeabi_dmul+0x24a>
   d8fa4:	ea95 0f0c 	teq	r5, ip
   d8fa8:	d106      	bne.n	d8fb8 <__aeabi_ddiv+0x1b0>
   d8faa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8fae:	f43f aefd 	beq.w	d8dac <__aeabi_dmul+0x1f8>
   d8fb2:	4610      	mov	r0, r2
   d8fb4:	4619      	mov	r1, r3
   d8fb6:	e722      	b.n	d8dfe <__aeabi_dmul+0x24a>
   d8fb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8fbc:	bf18      	it	ne
   d8fbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8fc2:	f47f aec5 	bne.w	d8d50 <__aeabi_dmul+0x19c>
   d8fc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8fca:	f47f af0d 	bne.w	d8de8 <__aeabi_dmul+0x234>
   d8fce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8fd2:	f47f aeeb 	bne.w	d8dac <__aeabi_dmul+0x1f8>
   d8fd6:	e712      	b.n	d8dfe <__aeabi_dmul+0x24a>

000d8fd8 <__aeabi_d2f>:
   d8fd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fe0:	bf24      	itt	cs
   d8fe2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fe6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fea:	d90d      	bls.n	d9008 <__aeabi_d2f+0x30>
   d8fec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ff0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8ff4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ff8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8ffc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9000:	bf08      	it	eq
   d9002:	f020 0001 	biceq.w	r0, r0, #1
   d9006:	4770      	bx	lr
   d9008:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d900c:	d121      	bne.n	d9052 <__aeabi_d2f+0x7a>
   d900e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9012:	bfbc      	itt	lt
   d9014:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9018:	4770      	bxlt	lr
   d901a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d901e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9022:	f1c2 0218 	rsb	r2, r2, #24
   d9026:	f1c2 0c20 	rsb	ip, r2, #32
   d902a:	fa10 f30c 	lsls.w	r3, r0, ip
   d902e:	fa20 f002 	lsr.w	r0, r0, r2
   d9032:	bf18      	it	ne
   d9034:	f040 0001 	orrne.w	r0, r0, #1
   d9038:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d903c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9040:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9044:	ea40 000c 	orr.w	r0, r0, ip
   d9048:	fa23 f302 	lsr.w	r3, r3, r2
   d904c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9050:	e7cc      	b.n	d8fec <__aeabi_d2f+0x14>
   d9052:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9056:	d107      	bne.n	d9068 <__aeabi_d2f+0x90>
   d9058:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d905c:	bf1e      	ittt	ne
   d905e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9062:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9066:	4770      	bxne	lr
   d9068:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d906c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9074:	4770      	bx	lr
   d9076:	bf00      	nop

000d9078 <atol>:
   d9078:	220a      	movs	r2, #10
   d907a:	2100      	movs	r1, #0
   d907c:	f000 b960 	b.w	d9340 <strtol>

000d9080 <__cxa_atexit>:
   d9080:	b510      	push	{r4, lr}
   d9082:	4c05      	ldr	r4, [pc, #20]	; (d9098 <__cxa_atexit+0x18>)
   d9084:	4613      	mov	r3, r2
   d9086:	b12c      	cbz	r4, d9094 <__cxa_atexit+0x14>
   d9088:	460a      	mov	r2, r1
   d908a:	4601      	mov	r1, r0
   d908c:	2002      	movs	r0, #2
   d908e:	f3af 8000 	nop.w
   d9092:	bd10      	pop	{r4, pc}
   d9094:	4620      	mov	r0, r4
   d9096:	bd10      	pop	{r4, pc}
   d9098:	00000000 	.word	0x00000000

000d909c <memcpy>:
   d909c:	b510      	push	{r4, lr}
   d909e:	1e43      	subs	r3, r0, #1
   d90a0:	440a      	add	r2, r1
   d90a2:	4291      	cmp	r1, r2
   d90a4:	d004      	beq.n	d90b0 <memcpy+0x14>
   d90a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d90ae:	e7f8      	b.n	d90a2 <memcpy+0x6>
   d90b0:	bd10      	pop	{r4, pc}

000d90b2 <memmove>:
   d90b2:	4288      	cmp	r0, r1
   d90b4:	b510      	push	{r4, lr}
   d90b6:	eb01 0302 	add.w	r3, r1, r2
   d90ba:	d801      	bhi.n	d90c0 <memmove+0xe>
   d90bc:	1e42      	subs	r2, r0, #1
   d90be:	e00b      	b.n	d90d8 <memmove+0x26>
   d90c0:	4298      	cmp	r0, r3
   d90c2:	d2fb      	bcs.n	d90bc <memmove+0xa>
   d90c4:	1881      	adds	r1, r0, r2
   d90c6:	1ad2      	subs	r2, r2, r3
   d90c8:	42d3      	cmn	r3, r2
   d90ca:	d004      	beq.n	d90d6 <memmove+0x24>
   d90cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d90d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d90d4:	e7f8      	b.n	d90c8 <memmove+0x16>
   d90d6:	bd10      	pop	{r4, pc}
   d90d8:	4299      	cmp	r1, r3
   d90da:	d004      	beq.n	d90e6 <memmove+0x34>
   d90dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90e0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d90e4:	e7f8      	b.n	d90d8 <memmove+0x26>
   d90e6:	bd10      	pop	{r4, pc}

000d90e8 <memset>:
   d90e8:	4402      	add	r2, r0
   d90ea:	4603      	mov	r3, r0
   d90ec:	4293      	cmp	r3, r2
   d90ee:	d002      	beq.n	d90f6 <memset+0xe>
   d90f0:	f803 1b01 	strb.w	r1, [r3], #1
   d90f4:	e7fa      	b.n	d90ec <memset+0x4>
   d90f6:	4770      	bx	lr

000d90f8 <srand>:
   d90f8:	b538      	push	{r3, r4, r5, lr}
   d90fa:	4b12      	ldr	r3, [pc, #72]	; (d9144 <srand+0x4c>)
   d90fc:	681c      	ldr	r4, [r3, #0]
   d90fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9100:	4605      	mov	r5, r0
   d9102:	b9d3      	cbnz	r3, d913a <srand+0x42>
   d9104:	2018      	movs	r0, #24
   d9106:	f7fc fd61 	bl	d5bcc <malloc>
   d910a:	f243 330e 	movw	r3, #13070	; 0x330e
   d910e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9110:	8003      	strh	r3, [r0, #0]
   d9112:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9116:	8043      	strh	r3, [r0, #2]
   d9118:	f241 2334 	movw	r3, #4660	; 0x1234
   d911c:	8083      	strh	r3, [r0, #4]
   d911e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9122:	80c3      	strh	r3, [r0, #6]
   d9124:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9128:	8103      	strh	r3, [r0, #8]
   d912a:	2305      	movs	r3, #5
   d912c:	8143      	strh	r3, [r0, #10]
   d912e:	230b      	movs	r3, #11
   d9130:	8183      	strh	r3, [r0, #12]
   d9132:	2201      	movs	r2, #1
   d9134:	2300      	movs	r3, #0
   d9136:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d913a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d913c:	2200      	movs	r2, #0
   d913e:	611d      	str	r5, [r3, #16]
   d9140:	615a      	str	r2, [r3, #20]
   d9142:	bd38      	pop	{r3, r4, r5, pc}
   d9144:	2003e244 	.word	0x2003e244

000d9148 <strchr>:
   d9148:	b2c9      	uxtb	r1, r1
   d914a:	4603      	mov	r3, r0
   d914c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9150:	b11a      	cbz	r2, d915a <strchr+0x12>
   d9152:	4291      	cmp	r1, r2
   d9154:	d1f9      	bne.n	d914a <strchr+0x2>
   d9156:	4618      	mov	r0, r3
   d9158:	4770      	bx	lr
   d915a:	2900      	cmp	r1, #0
   d915c:	bf0c      	ite	eq
   d915e:	4618      	moveq	r0, r3
   d9160:	2000      	movne	r0, #0
   d9162:	4770      	bx	lr

000d9164 <strchrnul>:
   d9164:	b510      	push	{r4, lr}
   d9166:	4604      	mov	r4, r0
   d9168:	f7ff ffee 	bl	d9148 <strchr>
   d916c:	b918      	cbnz	r0, d9176 <strchrnul+0x12>
   d916e:	4620      	mov	r0, r4
   d9170:	f000 f82f 	bl	d91d2 <strlen>
   d9174:	4420      	add	r0, r4
   d9176:	bd10      	pop	{r4, pc}

000d9178 <strcmp>:
   d9178:	f810 2b01 	ldrb.w	r2, [r0], #1
   d917c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9180:	2a01      	cmp	r2, #1
   d9182:	bf28      	it	cs
   d9184:	429a      	cmpcs	r2, r3
   d9186:	d0f7      	beq.n	d9178 <strcmp>
   d9188:	1ad0      	subs	r0, r2, r3
   d918a:	4770      	bx	lr

000d918c <strcpy>:
   d918c:	4603      	mov	r3, r0
   d918e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9192:	f803 2b01 	strb.w	r2, [r3], #1
   d9196:	2a00      	cmp	r2, #0
   d9198:	d1f9      	bne.n	d918e <strcpy+0x2>
   d919a:	4770      	bx	lr

000d919c <strdup>:
   d919c:	4b02      	ldr	r3, [pc, #8]	; (d91a8 <strdup+0xc>)
   d919e:	4601      	mov	r1, r0
   d91a0:	6818      	ldr	r0, [r3, #0]
   d91a2:	f000 b803 	b.w	d91ac <_strdup_r>
   d91a6:	bf00      	nop
   d91a8:	2003e244 	.word	0x2003e244

000d91ac <_strdup_r>:
   d91ac:	b570      	push	{r4, r5, r6, lr}
   d91ae:	4606      	mov	r6, r0
   d91b0:	4608      	mov	r0, r1
   d91b2:	460c      	mov	r4, r1
   d91b4:	f000 f80d 	bl	d91d2 <strlen>
   d91b8:	1c45      	adds	r5, r0, #1
   d91ba:	4629      	mov	r1, r5
   d91bc:	4630      	mov	r0, r6
   d91be:	f7fc fd2d 	bl	d5c1c <_malloc_r>
   d91c2:	4606      	mov	r6, r0
   d91c4:	b118      	cbz	r0, d91ce <_strdup_r+0x22>
   d91c6:	462a      	mov	r2, r5
   d91c8:	4621      	mov	r1, r4
   d91ca:	f7ff ff67 	bl	d909c <memcpy>
   d91ce:	4630      	mov	r0, r6
   d91d0:	bd70      	pop	{r4, r5, r6, pc}

000d91d2 <strlen>:
   d91d2:	4603      	mov	r3, r0
   d91d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91d8:	2a00      	cmp	r2, #0
   d91da:	d1fb      	bne.n	d91d4 <strlen+0x2>
   d91dc:	1a18      	subs	r0, r3, r0
   d91de:	3801      	subs	r0, #1
   d91e0:	4770      	bx	lr

000d91e2 <strncmp>:
   d91e2:	b530      	push	{r4, r5, lr}
   d91e4:	b182      	cbz	r2, d9208 <strncmp+0x26>
   d91e6:	1e45      	subs	r5, r0, #1
   d91e8:	3901      	subs	r1, #1
   d91ea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d91ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d91f2:	42a3      	cmp	r3, r4
   d91f4:	d106      	bne.n	d9204 <strncmp+0x22>
   d91f6:	43ec      	mvns	r4, r5
   d91f8:	4414      	add	r4, r2
   d91fa:	42e0      	cmn	r0, r4
   d91fc:	d001      	beq.n	d9202 <strncmp+0x20>
   d91fe:	2b00      	cmp	r3, #0
   d9200:	d1f3      	bne.n	d91ea <strncmp+0x8>
   d9202:	461c      	mov	r4, r3
   d9204:	1b18      	subs	r0, r3, r4
   d9206:	bd30      	pop	{r4, r5, pc}
   d9208:	4610      	mov	r0, r2
   d920a:	bd30      	pop	{r4, r5, pc}

000d920c <strrchr>:
   d920c:	b538      	push	{r3, r4, r5, lr}
   d920e:	4603      	mov	r3, r0
   d9210:	460d      	mov	r5, r1
   d9212:	b141      	cbz	r1, d9226 <strrchr+0x1a>
   d9214:	2400      	movs	r4, #0
   d9216:	4629      	mov	r1, r5
   d9218:	4618      	mov	r0, r3
   d921a:	f7ff ff95 	bl	d9148 <strchr>
   d921e:	b130      	cbz	r0, d922e <strrchr+0x22>
   d9220:	1c43      	adds	r3, r0, #1
   d9222:	4604      	mov	r4, r0
   d9224:	e7f7      	b.n	d9216 <strrchr+0xa>
   d9226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d922a:	f7ff bf8d 	b.w	d9148 <strchr>
   d922e:	4620      	mov	r0, r4
   d9230:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9234 <_strtol_r>:
   d9234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9238:	4680      	mov	r8, r0
   d923a:	4840      	ldr	r0, [pc, #256]	; (d933c <_strtol_r+0x108>)
   d923c:	f8d0 9000 	ldr.w	r9, [r0]
   d9240:	460f      	mov	r7, r1
   d9242:	463d      	mov	r5, r7
   d9244:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9248:	eb09 0004 	add.w	r0, r9, r4
   d924c:	7840      	ldrb	r0, [r0, #1]
   d924e:	f000 0008 	and.w	r0, r0, #8
   d9252:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9256:	b108      	cbz	r0, d925c <_strtol_r+0x28>
   d9258:	462f      	mov	r7, r5
   d925a:	e7f2      	b.n	d9242 <_strtol_r+0xe>
   d925c:	2c2d      	cmp	r4, #45	; 0x2d
   d925e:	d103      	bne.n	d9268 <_strtol_r+0x34>
   d9260:	1cbd      	adds	r5, r7, #2
   d9262:	787c      	ldrb	r4, [r7, #1]
   d9264:	2601      	movs	r6, #1
   d9266:	e003      	b.n	d9270 <_strtol_r+0x3c>
   d9268:	2c2b      	cmp	r4, #43	; 0x2b
   d926a:	bf04      	itt	eq
   d926c:	787c      	ldrbeq	r4, [r7, #1]
   d926e:	1cbd      	addeq	r5, r7, #2
   d9270:	b113      	cbz	r3, d9278 <_strtol_r+0x44>
   d9272:	2b10      	cmp	r3, #16
   d9274:	d10a      	bne.n	d928c <_strtol_r+0x58>
   d9276:	e05b      	b.n	d9330 <_strtol_r+0xfc>
   d9278:	2c30      	cmp	r4, #48	; 0x30
   d927a:	d157      	bne.n	d932c <_strtol_r+0xf8>
   d927c:	7828      	ldrb	r0, [r5, #0]
   d927e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9282:	2858      	cmp	r0, #88	; 0x58
   d9284:	d14d      	bne.n	d9322 <_strtol_r+0xee>
   d9286:	786c      	ldrb	r4, [r5, #1]
   d9288:	2310      	movs	r3, #16
   d928a:	3502      	adds	r5, #2
   d928c:	2e00      	cmp	r6, #0
   d928e:	bf14      	ite	ne
   d9290:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9294:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9298:	2700      	movs	r7, #0
   d929a:	fbbc faf3 	udiv	sl, ip, r3
   d929e:	4638      	mov	r0, r7
   d92a0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d92a4:	eb09 0e04 	add.w	lr, r9, r4
   d92a8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d92ac:	f01e 0f04 	tst.w	lr, #4
   d92b0:	d001      	beq.n	d92b6 <_strtol_r+0x82>
   d92b2:	3c30      	subs	r4, #48	; 0x30
   d92b4:	e00b      	b.n	d92ce <_strtol_r+0x9a>
   d92b6:	f01e 0e03 	ands.w	lr, lr, #3
   d92ba:	d01b      	beq.n	d92f4 <_strtol_r+0xc0>
   d92bc:	f1be 0f01 	cmp.w	lr, #1
   d92c0:	bf0c      	ite	eq
   d92c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d92c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d92ca:	ebce 0404 	rsb	r4, lr, r4
   d92ce:	42a3      	cmp	r3, r4
   d92d0:	dd10      	ble.n	d92f4 <_strtol_r+0xc0>
   d92d2:	f1b7 3fff 	cmp.w	r7, #4294967295
   d92d6:	d00a      	beq.n	d92ee <_strtol_r+0xba>
   d92d8:	4550      	cmp	r0, sl
   d92da:	d806      	bhi.n	d92ea <_strtol_r+0xb6>
   d92dc:	d101      	bne.n	d92e2 <_strtol_r+0xae>
   d92de:	4564      	cmp	r4, ip
   d92e0:	dc03      	bgt.n	d92ea <_strtol_r+0xb6>
   d92e2:	fb03 4000 	mla	r0, r3, r0, r4
   d92e6:	2701      	movs	r7, #1
   d92e8:	e001      	b.n	d92ee <_strtol_r+0xba>
   d92ea:	f04f 37ff 	mov.w	r7, #4294967295
   d92ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   d92f2:	e7d7      	b.n	d92a4 <_strtol_r+0x70>
   d92f4:	1c7b      	adds	r3, r7, #1
   d92f6:	d10c      	bne.n	d9312 <_strtol_r+0xde>
   d92f8:	2e00      	cmp	r6, #0
   d92fa:	f04f 0322 	mov.w	r3, #34	; 0x22
   d92fe:	bf14      	ite	ne
   d9300:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9304:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9308:	f8c8 3000 	str.w	r3, [r8]
   d930c:	b92a      	cbnz	r2, d931a <_strtol_r+0xe6>
   d930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9312:	b106      	cbz	r6, d9316 <_strtol_r+0xe2>
   d9314:	4240      	negs	r0, r0
   d9316:	b172      	cbz	r2, d9336 <_strtol_r+0x102>
   d9318:	b107      	cbz	r7, d931c <_strtol_r+0xe8>
   d931a:	1e69      	subs	r1, r5, #1
   d931c:	6011      	str	r1, [r2, #0]
   d931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9322:	2430      	movs	r4, #48	; 0x30
   d9324:	2b00      	cmp	r3, #0
   d9326:	d1b1      	bne.n	d928c <_strtol_r+0x58>
   d9328:	2308      	movs	r3, #8
   d932a:	e7af      	b.n	d928c <_strtol_r+0x58>
   d932c:	230a      	movs	r3, #10
   d932e:	e7ad      	b.n	d928c <_strtol_r+0x58>
   d9330:	2c30      	cmp	r4, #48	; 0x30
   d9332:	d0a3      	beq.n	d927c <_strtol_r+0x48>
   d9334:	e7aa      	b.n	d928c <_strtol_r+0x58>
   d9336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d933a:	bf00      	nop
   d933c:	2003e1e0 	.word	0x2003e1e0

000d9340 <strtol>:
   d9340:	4613      	mov	r3, r2
   d9342:	460a      	mov	r2, r1
   d9344:	4601      	mov	r1, r0
   d9346:	4802      	ldr	r0, [pc, #8]	; (d9350 <strtol+0x10>)
   d9348:	6800      	ldr	r0, [r0, #0]
   d934a:	f7ff bf73 	b.w	d9234 <_strtol_r>
   d934e:	bf00      	nop
   d9350:	2003e244 	.word	0x2003e244

000d9354 <dynalib_user>:
   d9354:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d9364:	00000000                                ....

000d9368 <_ZTVN5spark10LogHandlerE>:
	...
   d9378:	000d40a9 000d40cd                       .@...@..

000d9380 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9388:	000d410d 000d4141 000d6da5 000d40cf     .A..AA...m...@..
   d9398:	0001d4c0 5a010101 05060408 5f746573     .......Z....set_
   d93a8:	65746e69 6c617672 72694100 61755120     interval.Air Qua
   d93b8:	7974696c 6e695720 6f662067 61502072     lity Wing for Pa
   d93c8:	63697472 4d20656c 00687365 00627570     rticle Mesh.pub.
   d93d8:	626f6c62 72724500 7320726f 32303769     blob.Error si702
   d93e8:	72450031 20726f72 38736363 45003131     1.Error ccs811.E
   d93f8:	726f7272 6d706820 35313161 70706100     rror hpma115.app
   d9408:	e6a7e700 65746909 69746172 20736e6f     .....iterations 
   d9418:	43006425 2065646f 76207369 64696c61     %d.Code is valid
   d9428:	74730021 20747261 61647075 65006574     !.start update.e
   d9438:	65736172 6d706800 63203a61 6b636568     rase.hpma: check
   d9448:	206d7573 6c696166 6d706800 63203a61     sum fail.hpma: c
   d9458:	6b636568 006d7573                       hecksum.

000d9460 <_ZTV5Timer>:
	...
   d9468:	000d4f95 000d4fdd 000d528b 38736363     .O...O...R..ccs8
   d9478:	65203131 6c62616e 72652065 64252072     11 enable err %d
   d9488:	007b000a 326d7022 253a2235 70222c64     ..{."pm25":%d,"p
   d9498:	2230316d 0064253a 7422002c 65706d65     m10":%d.,."tempe
   d94a8:	75746172 3a226572 66322e25 7568222c     rature":%.2f,"hu
   d94b8:	6964696d 3a227974 66322e25 76742200     midity":%.2f."tv
   d94c8:	3a22636f 222c6425 22323063 0064253a     oc":%d,"c02":%d.
   d94d8:	7075007d 65746164 61657220 676e6964     }.update reading
   d94e8:	72657020 20646f69 000a6425 616d7068      period %d..hpma
   d94f8:	6d6f6320 74656c70 656d0065 72757361      complete.measur
   d9508:	6e656d65 74732074 00747261 6f727245     ement start.Erro
   d9518:	65742072 2d20706d 74616620 65206c61     r temp - fatal e
   d9528:	45007272 726f7272 6f767420 202d2063     rr.Error tvoc - 
   d9538:	64206f6e 00617461 6f727245 76742072     no data.Error tv
   d9548:	2d20636f 74616620 6d006c61 75736165     oc - fatal.measu
   d9558:	656d6572 6320746e 6c706d6f 00657465     rement complete.
   d9568:	616d7068 6d697420 74756f65 73636300     hpma timeout.ccs
   d9578:	20313138 20726576 252e7825 64252e64     811 ver %x.%d.%d
   d9588:	6363000a 31313873 206f6e20 61647075     ..ccs811 no upda
   d9598:	6e206574 65646565 63000a64 31387363     te needed..ccs81
   d95a8:	70752031 65746164 72726520 0a642520     1 update err %d.
   d95b8:	6d706800 35313161 616e6520 20656c62     .hpma115 enable 
   d95c8:	20727265 000a6425                       err %d..

000d95d0 <_ZTVN5spark13EthernetClassE>:
	...
   d95d8:	000d5c8b 000d5c81 000d5c77 000d5c6d     .\...\..w\..m\..
   d95e8:	000d5c61 000d5c55 000d5c49 000d5c41     a\..U\..I\..A\..
   d95f8:	000d5c37 000d5c2d 000d7f81              7\..-\......

000d9604 <_ZTV8SPIClass>:
	...
   d960c:	000d5ca9 000d5cab                       .\...\..

000d9614 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d961c:	000d6181 000d61a7 000d615b 000d808f     .a...a..[a......

000d962c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9634:	000d65fd 000d6611 000d6f59 000d6163     .e...f..Yo..ca..
   d9644:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d9654:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d9664:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d9674:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d9684:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d9694:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d96a4:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d96b4:	25007265 75303130 205d0020 00202c00     er.%010u .] ., .
   d96c4:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
   d96d4:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
   d96e4:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
   d96f4:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
   d9704:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
   d9714:	0063696e 006c6c61                       nic.all.

000d971c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9724:	000d65d1 000d65e9 000d6da5 000d40cf     .e...e...m...@..

000d9734 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d973c:	000d617f 000d61b5 000d6ccd 000d6165     .a...a...l..ea..

000d974c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9754:	000d617d 000d61c3 000d6515 000d61d1     }a...a...e...a..
   d9764:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9774:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9784:	63736100 656d6974 00000000              .asctime....

000d9790 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9798:	000d7225 000d722b 000d726f 000d7239     %r..+r..or..9r..
   d97a8:	000d7227                                'r..

000d97ac <_ZTV9IPAddress>:
	...
   d97b4:	000d7815 000d7805 000d7807              .x...x...x..

000d97c0 <_ZTV9USBSerial>:
	...
   d97c8:	000d78ed 000d793d 000d794b 000d5fd5     .x..=y..Ky..._..
   d97d8:	000d7929 000d78ef 000d7905 000d7937     )y...x...y..7y..
   d97e8:	000d791b 000d78e9                       .y...x..

000d97f0 <_ZTV11USARTSerial>:
	...
   d97f8:	000d7acd 000d7b1d 000d7b2b 000d5fd5     .z...{..+{..._..
   d9808:	000d7ae1 000d7b03 000d7aef 000d7b17     .z...{...z...{..
   d9818:	000d7acf 000d7ad3                       .z...z..

000d9820 <_ZTV7TwoWire>:
	...
   d9828:	000d7c0d 000d7c57 000d7c2f 000d7c0f     .|..W|../|...|..
   d9838:	000d7c37 000d7c3f 000d7c47 000d7c4f     7|..?|..G|..O|..

000d9848 <_ZTVN5spark9MeshClassE>:
	...
   d9850:	000d7d81 000d7d77 000d7d6d 000d7d63     .}..w}..m}..c}..
   d9860:	000d7d57 000d7d4b 000d7d3f 000d7d37     W}..K}..?}..7}..
   d9870:	000d7d2d 000d7d23 000d7f81              -}..#}......

000d987c <_ZTVN5spark9WiFiClassE>:
	...
   d9884:	000d7efb 000d7ef1 000d7ee7 000d7e9d     .~...~...~...~..
   d9894:	000d7edb 000d7ecf 000d7ec3 000d7ebb     .~...~...~...~..
   d98a4:	000d7eb1 000d7ea7 000d7f81              .~...~......

000d98b0 <_ZTVN5spark12NetworkClassE>:
	...
   d98b8:	000d7f19 000d7f23 000d7f2d 000d7f37     ....#...-...7...
   d98c8:	000d7f41 000d7f4d 000d7f59 000d7f65     A...M...Y...e...
   d98d8:	000d7f6d 000d7f77 000d7f81 00302e30     m...w.......0.0.
   d98e8:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d98f8:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d9908:	00000078                                         x.

000d990a <_ZSt7nothrow>:
	...

000d990b <_ctype_>:
   d990b:	20202000 20202020 28282020 20282828     .         ((((( 
   d991b:	20202020 20202020 20202020 20202020                     
   d992b:	10108820 10101010 10101010 10101010      ...............
   d993b:	04040410 04040404 10040404 10101010     ................
   d994b:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d995b:	01010101 01010101 01010101 10101010     ................
   d996b:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d997b:	02020202 02020202 02020202 10101010     ................
   d998b:	00000020 00000000 00000000 00000000      ...............
	...

000d9a0c <__sf_fake_stdin>:
	...

000d9a2c <__sf_fake_stdout>:
	...

000d9a4c <__sf_fake_stderr>:
	...
   d9a6c:	00000043                                         C.

000d9a6e <link_const_variable_data_end>:
	...

000d9a70 <link_constructors_location>:
   d9a70:	000d44ed 	.word	0x000d44ed
   d9a74:	000d4709 	.word	0x000d4709
   d9a78:	000d4c4d 	.word	0x000d4c4d
   d9a7c:	000d4e89 	.word	0x000d4e89
   d9a80:	000d4ea1 	.word	0x000d4ea1
   d9a84:	000d5669 	.word	0x000d5669
   d9a88:	000d566d 	.word	0x000d566d
   d9a8c:	000d5671 	.word	0x000d5671
   d9a90:	000d5c95 	.word	0x000d5c95
   d9a94:	000d5cf9 	.word	0x000d5cf9
   d9a98:	000d5fad 	.word	0x000d5fad
   d9a9c:	000d6d95 	.word	0x000d6d95
   d9aa0:	000d70d1 	.word	0x000d70d1
   d9aa4:	000d70f9 	.word	0x000d70f9
   d9aa8:	000d7e4d 	.word	0x000d7e4d
   d9aac:	000d7f05 	.word	0x000d7f05
   d9ab0:	000d804d 	.word	0x000d804d
   d9ab4:	000d85b5 	.word	0x000d85b5
   d9ab8:	000d8639 	.word	0x000d8639
   d9abc:	000d86fd 	.word	0x000d86fd
   d9ac0:	000d87c1 	.word	0x000d87c1

000d9ac4 <link_constructors_end>:
	...
