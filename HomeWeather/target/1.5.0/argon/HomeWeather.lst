
c:/Users/IoTPa/Documents/jarvis/HomeWeather/target/1.5.0/argon/HomeWeather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005b30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9b50  000d9b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9b58  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f0  2003e240  000d9b5c  0001e240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c0  2003e330  2003e330  0002e330  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9c4c  000d9c4c  00029c4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9c74  000d9c74  00029c74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f34d9  00000000  00000000  00029c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012e81  00000000  00000000  0011d151  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021c35  00000000  00000000  0012ffd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000026f8  00000000  00000000  00151c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004ac8  00000000  00000000  001542ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003864d  00000000  00000000  00158dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002dcc9  00000000  00000000  00191414  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00108111  00000000  00000000  001bf0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d848  00000000  00000000  002c71f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 faa3 	bl	d957c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 faa8 	bl	d9592 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e240 	.word	0x2003e240
   d404c:	000d9b5c 	.word	0x000d9b5c
   d4050:	2003e330 	.word	0x2003e330
   d4054:	2003e330 	.word	0x2003e330
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f9b3 	bl	d63c8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9b48 	.word	0x000d9b48
   d4084:	000d9b08 	.word	0x000d9b08

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd82 	b.w	d4b90 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fef7 	bl	d4e80 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b959 	b.w	d634c <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bddd 	b.w	d5c58 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bde3 	b.w	d5c68 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bde1 	b.w	d5c68 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   d40b6:	b148      	cbz	r0, d40cc <null_ptr_check+0x16>
   d40b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d40ba:	b13b      	cbz	r3, d40cc <null_ptr_check+0x16>
   d40bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d40be:	b12b      	cbz	r3, d40cc <null_ptr_check+0x16>
   d40c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d40c2:	fab0 f080 	clz	r0, r0
   d40c6:	0940      	lsrs	r0, r0, #5
   d40c8:	4240      	negs	r0, r0
   d40ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   d40cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   d40d0:	4770      	bx	lr

000d40d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d40d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d40d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d40d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d40d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d40da:	f7ff ffec 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d40de:	4605      	mov	r5, r0
   d40e0:	bb50      	cbnz	r0, d4138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d40e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
   d40e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d40e8:	bf14      	ite	ne
   d40ea:	2300      	movne	r3, #0
   d40ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
   d40ee:	429a      	cmp	r2, r3
   d40f0:	d022      	beq.n	d4138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
   d40f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d40f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   d40f6:	7860      	ldrb	r0, [r4, #1]
   d40f8:	2301      	movs	r3, #1
   d40fa:	f10d 0207 	add.w	r2, sp, #7
   d40fe:	21f3      	movs	r1, #243	; 0xf3
   d4100:	47b0      	blx	r6
   d4102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   d4106:	b110      	cbz	r0, d410e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4108:	f06f 0501 	mvn.w	r5, #1
   d410c:	e014      	b.n	d4138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d410e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   d4112:	7860      	ldrb	r0, [r4, #1]
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d4114:	f003 0210 	and.w	r2, r3, #16
   d4118:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d411c:	f023 0310 	bic.w	r3, r3, #16
   d4120:	4313      	orrs	r3, r2
   d4122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4126:	f10d 0207 	add.w	r2, sp, #7
   d412a:	2301      	movs	r3, #1
   d412c:	2173      	movs	r1, #115	; 0x73
   d412e:	47b0      	blx	r6
   d4130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
   d4134:	2800      	cmp	r0, #0
   d4136:	d1e7      	bne.n	d4108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
   d4138:	4628      	mov	r0, r5
   d413a:	b002      	add	sp, #8
   d413c:	bd70      	pop	{r4, r5, r6, pc}

000d413e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   d413e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4142:	f7ff ffb8 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4146:	4605      	mov	r5, r0
   d4148:	b988      	cbnz	r0, d416e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d414a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d414c:	7860      	ldrb	r0, [r4, #1]
   d414e:	2301      	movs	r3, #1
   d4150:	f10d 0207 	add.w	r2, sp, #7
   d4154:	21f3      	movs	r1, #243	; 0xf3
   d4156:	47b0      	blx	r6
   d4158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   d415c:	b928      	cbnz	r0, d416a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   d415e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4162:	f003 0310 	and.w	r3, r3, #16
   d4166:	70e3      	strb	r3, [r4, #3]
   d4168:	e001      	b.n	d416e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d416a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
   d416e:	4628      	mov	r0, r5
   d4170:	b002      	add	sp, #8
   d4172:	bd70      	pop	{r4, r5, r6, pc}

000d4174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
   d4174:	b140      	cbz	r0, d4188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   d4176:	7803      	ldrb	r3, [r0, #0]
   d4178:	428b      	cmp	r3, r1
   d417a:	d908      	bls.n	d418e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   d417c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   d417e:	7813      	ldrb	r3, [r2, #0]
   d4180:	f043 0302 	orr.w	r3, r3, #2
   d4184:	7013      	strb	r3, [r2, #0]
   d4186:	e002      	b.n	d418e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   d4188:	f04f 30ff 	mov.w	r0, #4294967295
   d418c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
   d418e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
   d4190:	4770      	bx	lr

000d4192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d419a:	4688      	mov	r8, r1
   d419c:	4691      	mov	r9, r2
   d419e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d41a0:	f7ff ff89 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d41a4:	4604      	mov	r4, r0
   d41a6:	b9a8      	cbnz	r0, d41d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   d41a8:	78ab      	ldrb	r3, [r5, #2]
   d41aa:	b93b      	cbnz	r3, d41bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   d41ac:	4629      	mov	r1, r5
   d41ae:	4630      	mov	r0, r6
   d41b0:	f7ff ff8f 	bl	d40d2 <set_mem_page>
			if (rslt == BME680_OK)
   d41b4:	4604      	mov	r4, r0
   d41b6:	b908      	cbnz	r0, d41bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   d41b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
   d41be:	7868      	ldrb	r0, [r5, #1]
   d41c0:	464b      	mov	r3, r9
   d41c2:	4642      	mov	r2, r8
   d41c4:	4631      	mov	r1, r6
   d41c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   d41c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d41ce:	bf18      	it	ne
   d41d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
   d41d4:	4620      	mov	r0, r4
   d41d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d41da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   d41da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41de:	b08b      	sub	sp, #44	; 0x2c
   d41e0:	461e      	mov	r6, r3
   d41e2:	4683      	mov	fp, r0
   d41e4:	468a      	mov	sl, r1
   d41e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   d41e8:	2100      	movs	r1, #0
   d41ea:	2228      	movs	r2, #40	; 0x28
   d41ec:	4668      	mov	r0, sp
   d41ee:	f005 f9d0 	bl	d9592 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d41f2:	4630      	mov	r0, r6
   d41f4:	f7ff ff5f 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d41f8:	4605      	mov	r5, r0
   d41fa:	bba8      	cbnz	r0, d4268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   d41fc:	1e63      	subs	r3, r4, #1
   d41fe:	2b12      	cmp	r3, #18
   d4200:	d830      	bhi.n	d4264 <bme680_set_regs+0x8a>
   d4202:	f10d 0801 	add.w	r8, sp, #1
   d4206:	f10a 3aff 	add.w	sl, sl, #4294967295
   d420a:	465f      	mov	r7, fp
   d420c:	46c1      	mov	r9, r8
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   d420e:	b2a4      	uxth	r4, r4
   d4210:	ebcb 0307 	rsb	r3, fp, r7
   d4214:	b29b      	uxth	r3, r3
   d4216:	429c      	cmp	r4, r3
   d4218:	d913      	bls.n	d4242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
   d421a:	78b3      	ldrb	r3, [r6, #2]
   d421c:	b943      	cbnz	r3, d4230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d421e:	4631      	mov	r1, r6
   d4220:	7838      	ldrb	r0, [r7, #0]
   d4222:	f7ff ff56 	bl	d40d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d422a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d422e:	e000      	b.n	d4232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   d4230:	783b      	ldrb	r3, [r7, #0]
   d4232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   d423a:	f808 3b02 	strb.w	r3, [r8], #2
   d423e:	3701      	adds	r7, #1
   d4240:	e7e6      	b.n	d4210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   d4242:	b98d      	cbnz	r5, d4268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4244:	0063      	lsls	r3, r4, #1
   d4246:	3b01      	subs	r3, #1
   d4248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   d424a:	f89d 1000 	ldrb.w	r1, [sp]
   d424e:	7870      	ldrb	r0, [r6, #1]
   d4250:	b29b      	uxth	r3, r3
   d4252:	464a      	mov	r2, r9
   d4254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d425c:	bf18      	it	ne
   d425e:	f06f 0501 	mvnne.w	r5, #1
   d4262:	e001      	b.n	d4268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   d4264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
   d4268:	4628      	mov	r0, r5
   d426a:	b00b      	add	sp, #44	; 0x2c
   d426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   d4272:	23e0      	movs	r3, #224	; 0xe0
   d4274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d427a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d427c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4280:	f7ff ff19 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4284:	4604      	mov	r4, r0
   d4286:	b9d8      	cbnz	r0, d42c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
   d4288:	78ab      	ldrb	r3, [r5, #2]
   d428a:	b16b      	cbz	r3, d42a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d428c:	462b      	mov	r3, r5
   d428e:	2201      	movs	r2, #1
   d4290:	f10d 0107 	add.w	r1, sp, #7
   d4294:	f10d 0006 	add.w	r0, sp, #6
   d4298:	f7ff ff9f 	bl	d41da <bme680_set_regs>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d429c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d429e:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d42a0:	200a      	movs	r0, #10
   d42a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
   d42a4:	b134      	cbz	r4, d42b4 <bme680_soft_reset+0x44>
   d42a6:	e00b      	b.n	d42c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
   d42a8:	4628      	mov	r0, r5
   d42aa:	f7ff ff48 	bl	d413e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
   d42ae:	4604      	mov	r4, r0
   d42b0:	b930      	cbnz	r0, d42c0 <bme680_soft_reset+0x50>
   d42b2:	e7eb      	b.n	d428c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   d42b4:	78ab      	ldrb	r3, [r5, #2]
   d42b6:	b91b      	cbnz	r3, d42c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
   d42b8:	4628      	mov	r0, r5
   d42ba:	f7ff ff40 	bl	d413e <get_mem_page>
   d42be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
   d42c0:	4620      	mov	r0, r4
   d42c2:	b003      	add	sp, #12
   d42c4:	bd30      	pop	{r4, r5, pc}

000d42c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   d42c6:	b530      	push	{r4, r5, lr}
   d42c8:	b08d      	sub	sp, #52	; 0x34
   d42ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d42cc:	f7ff fef3 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d42d0:	4605      	mov	r5, r0
   d42d2:	2800      	cmp	r0, #0
   d42d4:	f040 80d5 	bne.w	d4482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   d42d8:	4620      	mov	r0, r4
   d42da:	f7ff ffc9 	bl	d4270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   d42de:	4605      	mov	r5, r0
   d42e0:	2800      	cmp	r0, #0
   d42e2:	f040 80ce 	bne.w	d4482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   d42e6:	4623      	mov	r3, r4
   d42e8:	2201      	movs	r2, #1
   d42ea:	4621      	mov	r1, r4
   d42ec:	20d0      	movs	r0, #208	; 0xd0
   d42ee:	f7ff ff50 	bl	d4192 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d42f2:	4605      	mov	r5, r0
   d42f4:	2800      	cmp	r0, #0
   d42f6:	f040 80c4 	bne.w	d4482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
   d42fa:	7823      	ldrb	r3, [r4, #0]
   d42fc:	2b61      	cmp	r3, #97	; 0x61
   d42fe:	f040 80be 	bne.w	d447e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   d4302:	4601      	mov	r1, r0
   d4304:	2229      	movs	r2, #41	; 0x29
   d4306:	a801      	add	r0, sp, #4
   d4308:	f005 f943 	bl	d9592 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d430c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
   d430e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4312:	f7ff fed0 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4316:	4605      	mov	r5, r0
   d4318:	2800      	cmp	r0, #0
   d431a:	f040 80b2 	bne.w	d4482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   d431e:	4623      	mov	r3, r4
   d4320:	2219      	movs	r2, #25
   d4322:	a901      	add	r1, sp, #4
   d4324:	2089      	movs	r0, #137	; 0x89
   d4326:	f7ff ff34 	bl	d4192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   d432a:	4605      	mov	r5, r0
   d432c:	b938      	cbnz	r0, d433e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   d432e:	4623      	mov	r3, r4
   d4330:	2210      	movs	r2, #16
   d4332:	f10d 011d 	add.w	r1, sp, #29
   d4336:	20e1      	movs	r0, #225	; 0xe1
   d4338:	f7ff ff2b 	bl	d4192 <bme680_get_regs>
   d433c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   d433e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   d4342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d434a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   d434c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4350:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d435a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d435e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4364:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d436c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   d436e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4372:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d437a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d437c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4388:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d438c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   d4392:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d4396:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d439a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d439e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   d43a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d43a4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d43b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   d43be:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d43c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d43c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   d43cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d43d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d43d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43d8:	f89d 101f 	ldrb.w	r1, [sp, #31]
   d43dc:	f003 020f 	and.w	r2, r3, #15
   d43e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   d43e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d43ea:	091b      	lsrs	r3, r3, #4
   d43ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d43f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   d43f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d43f6:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   d43f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d43fc:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   d43fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   d4402:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   d4404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d4408:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   d440a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d440e:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d4410:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   d4414:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d4416:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d441a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d441e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   d4424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d4428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   d442a:	bb15      	cbnz	r5, d4472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   d442c:	4623      	mov	r3, r4
   d442e:	2201      	movs	r2, #1
   d4430:	f10d 0103 	add.w	r1, sp, #3
   d4434:	2002      	movs	r0, #2
   d4436:	f7ff feac 	bl	d4192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   d443a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d443e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   d4442:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   d4446:	4605      	mov	r5, r0
   d4448:	b998      	cbnz	r0, d4472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   d444a:	4623      	mov	r3, r4
   d444c:	2201      	movs	r2, #1
   d444e:	f10d 0103 	add.w	r1, sp, #3
   d4452:	f7ff fe9e 	bl	d4192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
   d4456:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d445a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   d445e:	4605      	mov	r5, r0
   d4460:	b938      	cbnz	r0, d4472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   d4462:	4623      	mov	r3, r4
   d4464:	2201      	movs	r2, #1
   d4466:	f10d 0103 	add.w	r1, sp, #3
   d446a:	2004      	movs	r0, #4
   d446c:	f7ff fe91 	bl	d4192 <bme680_get_regs>
   d4470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   d4472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   d4476:	111b      	asrs	r3, r3, #4
   d4478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d447c:	e001      	b.n	d4482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   d447e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
   d4482:	4628      	mov	r0, r5
   d4484:	b00d      	add	sp, #52	; 0x34
   d4486:	bd30      	pop	{r4, r5, pc}

000d4488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d448a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d448c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d448e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4492:	f7ff fe10 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4496:	bba0      	cbnz	r0, d4502 <bme680_set_sensor_mode+0x7a>
   d4498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   d449a:	4623      	mov	r3, r4
   d449c:	2201      	movs	r2, #1
   d449e:	f10d 0106 	add.w	r1, sp, #6
   d44a2:	2074      	movs	r0, #116	; 0x74
   d44a4:	f7ff fe75 	bl	d4192 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d44a8:	b9a0      	cbnz	r0, d44d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   d44aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
   d44ae:	f013 0503 	ands.w	r5, r3, #3
   d44b2:	d011      	beq.n	d44d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   d44b4:	f023 0303 	bic.w	r3, r3, #3
   d44b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44bc:	2201      	movs	r2, #1
   d44be:	4623      	mov	r3, r4
   d44c0:	f10d 0106 	add.w	r1, sp, #6
   d44c4:	f10d 0007 	add.w	r0, sp, #7
   d44c8:	f7ff fe87 	bl	d41da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   d44cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d44ce:	200a      	movs	r0, #10
   d44d0:	4798      	blx	r3
   d44d2:	e7e2      	b.n	d449a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   d44d4:	2d00      	cmp	r5, #0
   d44d6:	d1e0      	bne.n	d449a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   d44d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d44dc:	b18b      	cbz	r3, d4502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   d44de:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d44e2:	f003 0303 	and.w	r3, r3, #3
   d44e6:	f022 0203 	bic.w	r2, r2, #3
   d44ea:	4313      	orrs	r3, r2
   d44ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   d44f0:	b938      	cbnz	r0, d4502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44f2:	4623      	mov	r3, r4
   d44f4:	2201      	movs	r2, #1
   d44f6:	f10d 0106 	add.w	r1, sp, #6
   d44fa:	f10d 0007 	add.w	r0, sp, #7
   d44fe:	f7ff fe6c 	bl	d41da <bme680_set_regs>
		}
	}

	return rslt;
}
   d4502:	b003      	add	sp, #12
   d4504:	bd30      	pop	{r4, r5, pc}

000d4506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d450a:	b088      	sub	sp, #32
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d450c:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d450e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4518:	9304      	str	r3, [sp, #16]
   d451a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d451e:	9306      	str	r3, [sp, #24]
   d4520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4524:	f7ff fdc7 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4528:	2800      	cmp	r0, #0
   d452a:	f040 8166 	bne.w	d47fa <bme680_set_sensor_settings+0x2f4>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d452e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   d4530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d4534:	d56c      	bpl.n	d4610 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
   d4538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   d453c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4540:	d165      	bne.n	d460e <bme680_set_sensor_settings+0x108>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d4542:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d4546:	235a      	movs	r3, #90	; 0x5a
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d4548:	2dc7      	cmp	r5, #199	; 0xc7

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d454a:	f88d 3008 	strb.w	r3, [sp, #8]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d454e:	d905      	bls.n	d455c <bme680_set_sensor_settings+0x56>
   d4550:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d4554:	bf28      	it	cs
   d4556:	f44f 75c8 	movcs.w	r5, #400	; 0x190
   d455a:	e000      	b.n	d455e <bme680_set_sensor_settings+0x58>
		temp = 200;
   d455c:	25c8      	movs	r5, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d455e:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
   d4562:	f994 2011 	ldrsb.w	r2, [r4, #17]
	if (temp < 200) /* Cap temperature */
		temp = 200;
	else if (temp > 400)
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   d4566:	f994 3004 	ldrsb.w	r3, [r4, #4]
   d456a:	f994 0014 	ldrsb.w	r0, [r4, #20]
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d456e:	f50e 3e16 	add.w	lr, lr, #153600	; 0x25800
   d4572:	f20e 1e99 	addw	lr, lr, #409	; 0x199
   d4576:	f502 7244 	add.w	r2, r2, #784	; 0x310
   d457a:	2114      	movs	r1, #20
   d457c:	fb13 f000 	smulbb	r0, r3, r0
   d4580:	fb05 f50e 	mul.w	r5, r5, lr
   d4584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4588:	fb95 f5f1 	sdiv	r5, r5, r1
   d458c:	fb90 f3f3 	sdiv	r3, r0, r3
   d4590:	210a      	movs	r1, #10
   d4592:	021b      	lsls	r3, r3, #8
   d4594:	f505 1548 	add.w	r5, r5, #3276800	; 0x320000
   d4598:	fb95 f5f1 	sdiv	r5, r5, r1
   d459c:	436a      	muls	r2, r5
   d459e:	eb03 0162 	add.w	r1, r3, r2, asr #1
   d45a2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d45a6:	3304      	adds	r3, #4
   d45a8:	fb91 f2f3 	sdiv	r2, r1, r3
   d45ac:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
   d45b0:	2383      	movs	r3, #131	; 0x83
   d45b2:	434b      	muls	r3, r1
   d45b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   d45b8:	fb92 f3f3 	sdiv	r3, r2, r3
   d45bc:	2222      	movs	r2, #34	; 0x22
   d45be:	3bfa      	subs	r3, #250	; 0xfa
   d45c0:	4353      	muls	r3, r2
   d45c2:	3332      	adds	r3, #50	; 0x32
   d45c4:	2264      	movs	r2, #100	; 0x64
   d45c6:	fb93 f3f2 	sdiv	r3, r3, r2
   d45ca:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d45ce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   d45d2:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   d45d6:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   d45da:	d20b      	bcs.n	d45f4 <bme680_set_sensor_settings+0xee>
   d45dc:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   d45de:	2b3f      	cmp	r3, #63	; 0x3f
   d45e0:	b2d1      	uxtb	r1, r2
   d45e2:	f102 0201 	add.w	r2, r2, #1
   d45e6:	d901      	bls.n	d45ec <bme680_set_sensor_settings+0xe6>
			dur = dur / 4;
   d45e8:	089b      	lsrs	r3, r3, #2
   d45ea:	e7f8      	b.n	d45de <bme680_set_sensor_settings+0xd8>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   d45ec:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   d45f0:	b2db      	uxtb	r3, r3
   d45f2:	e000      	b.n	d45f6 <bme680_set_sensor_settings+0xf0>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
   d45f4:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d45f6:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   d45fa:	2300      	movs	r3, #0
   d45fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   d4600:	2202      	movs	r2, #2
   d4602:	4623      	mov	r3, r4
   d4604:	a903      	add	r1, sp, #12
   d4606:	a802      	add	r0, sp, #8
   d4608:	f7ff fde7 	bl	d41da <bme680_set_regs>
   d460c:	e000      	b.n	d4610 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d460e:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   d4610:	2300      	movs	r3, #0
   d4612:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   d4616:	b910      	cbnz	r0, d461e <bme680_set_sensor_settings+0x118>
			rslt = bme680_set_sensor_mode(dev);
   d4618:	4620      	mov	r0, r4
   d461a:	f7ff ff35 	bl	d4488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   d461e:	f006 0510 	and.w	r5, r6, #16
   d4622:	b2ad      	uxth	r5, r5
   d4624:	b305      	cbz	r5, d4668 <bme680_set_sensor_settings+0x162>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   d4626:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d462a:	2107      	movs	r1, #7
   d462c:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   d4630:	f7ff fda0 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
   d4634:	b930      	cbnz	r0, d4644 <bme680_set_sensor_settings+0x13e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4636:	4623      	mov	r3, r4
   d4638:	2201      	movs	r2, #1
   d463a:	f10d 0107 	add.w	r1, sp, #7
   d463e:	2075      	movs	r0, #117	; 0x75
   d4640:	f7ff fda7 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4644:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d4648:	009b      	lsls	r3, r3, #2
   d464a:	f003 021c 	and.w	r2, r3, #28
   d464e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4652:	f023 031c 	bic.w	r3, r3, #28
   d4656:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4658:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d465a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d465e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   d4662:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
   d4666:	2501      	movs	r5, #1
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   d4668:	06b3      	lsls	r3, r6, #26
   d466a:	d522      	bpl.n	d46b2 <bme680_set_sensor_settings+0x1ac>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   d466c:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4670:	2108      	movs	r1, #8
   d4672:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   d4676:	f7ff fd7d 	bl	d4174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
   d467a:	b930      	cbnz	r0, d468a <bme680_set_sensor_settings+0x184>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d467c:	4623      	mov	r3, r4
   d467e:	2201      	movs	r2, #1
   d4680:	f10d 0107 	add.w	r1, sp, #7
   d4684:	2070      	movs	r0, #112	; 0x70
   d4686:	f7ff fd84 	bl	d4192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d468a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d468e:	f023 0208 	bic.w	r2, r3, #8
   d4692:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   d4696:	f003 0308 	and.w	r3, r3, #8
   d469a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d469c:	aa08      	add	r2, sp, #32
   d469e:	442a      	add	r2, r5
   d46a0:	2170      	movs	r1, #112	; 0x70
			data_array[count] = data;
			count++;
   d46a2:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d46a4:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d46a8:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d46ac:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d46b0:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   d46b2:	07b1      	lsls	r1, r6, #30
   d46b4:	d033      	beq.n	d471e <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   d46b6:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d46ba:	2105      	movs	r1, #5
   d46bc:	f104 0039 	add.w	r0, r4, #57	; 0x39
   d46c0:	f7ff fd58 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
   d46c4:	b930      	cbnz	r0, d46d4 <bme680_set_sensor_settings+0x1ce>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d46c6:	4623      	mov	r3, r4
   d46c8:	2201      	movs	r2, #1
   d46ca:	f10d 0107 	add.w	r1, sp, #7
   d46ce:	2074      	movs	r0, #116	; 0x74
   d46d0:	f7ff fd5f 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
   d46d4:	07f2      	lsls	r2, r6, #31
   d46d6:	d509      	bpl.n	d46ec <bme680_set_sensor_settings+0x1e6>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   d46d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d46dc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   d46e0:	f003 031f 	and.w	r3, r3, #31
   d46e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46e8:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
   d46ec:	07b3      	lsls	r3, r6, #30
   d46ee:	d50b      	bpl.n	d4708 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   d46f0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   d46f4:	009b      	lsls	r3, r3, #2
   d46f6:	f003 021c 	and.w	r2, r3, #28
   d46fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d46fe:	f023 031c 	bic.w	r3, r3, #28
   d4702:	4313      	orrs	r3, r2
   d4704:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
   d4708:	ab08      	add	r3, sp, #32
   d470a:	442b      	add	r3, r5
   d470c:	2274      	movs	r2, #116	; 0x74
   d470e:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d4712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
   d4714:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4718:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d471c:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   d471e:	0771      	lsls	r1, r6, #29
   d4720:	d522      	bpl.n	d4768 <bme680_set_sensor_settings+0x262>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   d4722:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4726:	2105      	movs	r1, #5
   d4728:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d472c:	f7ff fd22 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
   d4730:	b930      	cbnz	r0, d4740 <bme680_set_sensor_settings+0x23a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4732:	4623      	mov	r3, r4
   d4734:	2201      	movs	r2, #1
   d4736:	f10d 0107 	add.w	r1, sp, #7
   d473a:	2072      	movs	r0, #114	; 0x72
   d473c:	f7ff fd29 	bl	d4192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d4740:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4744:	f023 0207 	bic.w	r2, r3, #7
   d4748:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d474c:	f003 0307 	and.w	r3, r3, #7
   d4750:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4752:	aa08      	add	r2, sp, #32
   d4754:	442a      	add	r2, r5
   d4756:	2172      	movs	r1, #114	; 0x72
			data_array[count] = data;
			count++;
   d4758:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d475a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d475e:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d4762:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d4766:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   d4768:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   d476c:	d03c      	beq.n	d47e8 <bme680_set_sensor_settings+0x2e2>
   d476e:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   d4772:	4642      	mov	r2, r8
   d4774:	2101      	movs	r1, #1
   d4776:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   d477a:	f7ff fcfb 	bl	d4174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   d477e:	b968      	cbnz	r0, d479c <bme680_set_sensor_settings+0x296>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   d4780:	4642      	mov	r2, r8
   d4782:	210a      	movs	r1, #10
   d4784:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4788:	f7ff fcf4 	bl	d4174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
   d478c:	b930      	cbnz	r0, d479c <bme680_set_sensor_settings+0x296>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d478e:	4623      	mov	r3, r4
   d4790:	2201      	movs	r2, #1
   d4792:	f10d 0107 	add.w	r1, sp, #7
   d4796:	2071      	movs	r0, #113	; 0x71
   d4798:	f7ff fcfb 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
   d479c:	0672      	lsls	r2, r6, #25
   d479e:	d50b      	bpl.n	d47b8 <bme680_set_sensor_settings+0x2b2>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   d47a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   d47a4:	011b      	lsls	r3, r3, #4
   d47a6:	f003 0210 	and.w	r2, r3, #16
   d47aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d47ae:	f023 0310 	bic.w	r3, r3, #16
   d47b2:	4313      	orrs	r3, r2
   d47b4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
   d47b8:	0633      	lsls	r3, r6, #24
   d47ba:	d50a      	bpl.n	d47d2 <bme680_set_sensor_settings+0x2cc>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   d47bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d47c0:	f023 020f 	bic.w	r2, r3, #15
   d47c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d47c8:	f003 030f 	and.w	r3, r3, #15
   d47cc:	4313      	orrs	r3, r2
   d47ce:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d47d2:	ab08      	add	r3, sp, #32
   d47d4:	442b      	add	r3, r5
   d47d6:	2271      	movs	r2, #113	; 0x71
   d47d8:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d47dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
   d47de:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d47e2:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d47e6:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
   d47e8:	b928      	cbnz	r0, d47f6 <bme680_set_sensor_settings+0x2f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   d47ea:	4623      	mov	r3, r4
   d47ec:	462a      	mov	r2, r5
   d47ee:	a906      	add	r1, sp, #24
   d47f0:	a804      	add	r0, sp, #16
   d47f2:	f7ff fcf2 	bl	d41da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   d47f6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
   d47fa:	b008      	add	sp, #32
   d47fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4800 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d4800:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4802:	4b18      	ldr	r3, [pc, #96]	; (d4864 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d4804:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4806:	6818      	ldr	r0, [r3, #0]
   d4808:	889b      	ldrh	r3, [r3, #4]
   d480a:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d480e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4812:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d4814:	aa02      	add	r2, sp, #8
   d4816:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d4818:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d481c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d4820:	a802      	add	r0, sp, #8
   d4822:	4402      	add	r2, r0
   d4824:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d4828:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d482a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   d482e:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   d4830:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d4834:	4413      	add	r3, r2
   d4836:	f240 72ab 	movw	r2, #1963	; 0x7ab
   d483a:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d483c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d4840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d4844:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d4846:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
   d484a:	3301      	adds	r3, #1
   d484c:	b29b      	uxth	r3, r3
   d484e:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   d4850:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   d4854:	b11a      	cbz	r2, d485e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   d4856:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   d485a:	4413      	add	r3, r2
   d485c:	8023      	strh	r3, [r4, #0]
	}
}
   d485e:	b002      	add	sp, #8
   d4860:	bd10      	pop	{r4, pc}
   d4862:	bf00      	nop
   d4864:	000d9650 	.word	0x000d9650

000d4868 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d4868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d486c:	4680      	mov	r8, r0
   d486e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4870:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d4872:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4874:	f7ff fc1f 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4878:	4605      	mov	r5, r0
   d487a:	2800      	cmp	r0, #0
   d487c:	f040 8167 	bne.w	d4b4e <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   d4880:	af04      	add	r7, sp, #16
   d4882:	4601      	mov	r1, r0
   d4884:	220f      	movs	r2, #15
   d4886:	4638      	mov	r0, r7
   d4888:	f004 fe83 	bl	d9592 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff fc12 	bl	d40b6 <null_ptr_check>
   d4892:	260a      	movs	r6, #10
   d4894:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   d4896:	2d00      	cmp	r5, #0
   d4898:	f040 8153 	bne.w	d4b42 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d489c:	4623      	mov	r3, r4
   d489e:	220f      	movs	r2, #15
   d48a0:	4639      	mov	r1, r7
   d48a2:	201d      	movs	r0, #29
   d48a4:	f7ff fc75 	bl	d4192 <bme680_get_regs>
   d48a8:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d48aa:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48ae:	f89d e01e 	ldrb.w	lr, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d48b2:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   d48b6:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d48ba:	f89d b015 	ldrb.w	fp, [sp, #21]
   d48be:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   d48c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d48c6:	f000 030f 	and.w	r3, r0, #15
   d48ca:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
   d48ce:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d48d2:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d48d6:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d48da:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d48dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d48e6:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d48ec:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d48ee:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d48f2:	f003 0a20 	and.w	sl, r3, #32
   d48f6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   d48fa:	ea40 000a 	orr.w	r0, r0, sl
   d48fe:	f003 0310 	and.w	r3, r3, #16
   d4902:	4318      	orrs	r0, r3
   d4904:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
   d4906:	2800      	cmp	r0, #0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d4908:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
   d490c:	f280 8116 	bge.w	d4b3c <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d4910:	0912      	lsrs	r2, r2, #4
   d4912:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   d4916:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
   d491a:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d491c:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d4920:	0049      	lsls	r1, r1, #1
   d4922:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d4926:	460a      	mov	r2, r1
   d4928:	17cb      	asrs	r3, r1, #31
   d492a:	105b      	asrs	r3, r3, #1
   d492c:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d4930:	fb02 f603 	mul.w	r6, r2, r3
   d4934:	fba2 2302 	umull	r2, r3, r2, r2
   d4938:	ea4f 3a12 	mov.w	sl, r2, lsr #12
   d493c:	f994 201a 	ldrsb.w	r2, [r4, #26]
   d4940:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   d4944:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
   d4948:	ea4f 3b23 	mov.w	fp, r3, asr #12
   d494c:	0113      	lsls	r3, r2, #4
   d494e:	17df      	asrs	r7, r3, #31
   d4950:	fb0a f607 	mul.w	r6, sl, r7
   d4954:	fb03 660b 	mla	r6, r3, fp, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d4958:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d495c:	fbaa 2303 	umull	r2, r3, sl, r3
   d4960:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d4962:	0ac0      	lsrs	r0, r0, #11
   d4964:	0b92      	lsrs	r2, r2, #14
   d4966:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   d496a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
   d496e:	1883      	adds	r3, r0, r2
   d4970:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
   d4972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4976:	3380      	adds	r3, #128	; 0x80
   d4978:	121b      	asrs	r3, r3, #8
   d497a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d497e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d4980:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d4984:	105b      	asrs	r3, r3, #1
   d4986:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d498a:	109a      	asrs	r2, r3, #2
   d498c:	4352      	muls	r2, r2
   d498e:	12d1      	asrs	r1, r2, #11
   d4990:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d4992:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
   d4996:	4359      	muls	r1, r3
   d4998:	0049      	lsls	r1, r1, #1
   d499a:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   d499e:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
   d49a2:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d49a4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d49a8:	1352      	asrs	r2, r2, #13
   d49aa:	0140      	lsls	r0, r0, #5
   d49ac:	4342      	muls	r2, r0
   d49ae:	10d2      	asrs	r2, r2, #3
   d49b0:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49b4:	149b      	asrs	r3, r3, #18
   d49b6:	8ba2      	ldrh	r2, [r4, #28]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d49b8:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d49c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
   d49c2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   d49c6:	9a00      	ldr	r2, [sp, #0]
   d49c8:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
   d49cc:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
   d49d0:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
   d49d4:	0412      	lsls	r2, r2, #16
   d49d6:	eb02 01a1 	add.w	r1, r2, r1, asr #2
   d49da:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   d49de:	f640 4235 	movw	r2, #3125	; 0xc35
   d49e2:	eba9 3121 	sub.w	r1, r9, r1, asr #12
   d49e6:	4351      	muls	r1, r2
   d49e8:	13db      	asrs	r3, r3, #15
   d49ea:	fbb1 f3f3 	udiv	r3, r1, r3
   d49ee:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
   d49f0:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d49f2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d49f6:	4349      	muls	r1, r1
   d49f8:	1349      	asrs	r1, r1, #13
   d49fa:	434a      	muls	r2, r1
   d49fc:	1099      	asrs	r1, r3, #2
   d49fe:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d4a00:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d4a02:	1349      	asrs	r1, r1, #13
   d4a04:	eb01 3122 	add.w	r1, r1, r2, asr #12
   d4a08:	fb06 f206 	mul.w	r2, r6, r6
   d4a0c:	4356      	muls	r6, r2
   d4a0e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   d4a12:	4372      	muls	r2, r6
   d4a14:	eb01 4262 	add.w	r2, r1, r2, asr #17
   d4a18:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
   d4a1c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   d4a20:	eb03 1322 	add.w	r3, r3, r2, asr #4
   d4a24:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d4a2a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   d4a2e:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d4a32:	8967      	ldrh	r7, [r4, #10]
   d4a34:	8926      	ldrh	r6, [r4, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4a3a:	3380      	adds	r3, #128	; 0x80
   d4a3c:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d4a3e:	2264      	movs	r2, #100	; 0x64
   d4a40:	4359      	muls	r1, r3
   d4a42:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a46:	4359      	muls	r1, r3
   d4a48:	4358      	muls	r0, r3
   d4a4a:	1189      	asrs	r1, r1, #6
   d4a4c:	fb90 f0f2 	sdiv	r0, r0, r2
   d4a50:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a54:	4401      	add	r1, r0
   d4a56:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
   d4a5a:	4379      	muls	r1, r7
   d4a5c:	128f      	asrs	r7, r1, #10
   d4a5e:	9801      	ldr	r0, [sp, #4]
   d4a60:	9902      	ldr	r1, [sp, #8]
   d4a62:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   d4a66:	f994 100c 	ldrsb.w	r1, [r4, #12]
   d4a6a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
   d4a6e:	4359      	muls	r1, r3
   d4a70:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a74:	eba6 0061 	sub.w	r0, r6, r1, asr #1
   d4a78:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d4a7c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a80:	4343      	muls	r3, r0
   d4a82:	fb93 f2f2 	sdiv	r2, r3, r2
   d4a86:	7be3      	ldrb	r3, [r4, #15]
   d4a88:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   d4a8c:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   d4a8e:	435b      	muls	r3, r3
   d4a90:	1112      	asrs	r2, r2, #4
   d4a92:	129b      	asrs	r3, r3, #10
   d4a94:	4353      	muls	r3, r2
   d4a96:	eb01 0363 	add.w	r3, r1, r3, asr #1
   d4a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a9e:	129b      	asrs	r3, r3, #10
   d4aa0:	4353      	muls	r3, r2
   d4aa2:	131b      	asrs	r3, r3, #12
   d4aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
   d4aa8:	4a2b      	ldr	r2, [pc, #172]	; (d4b58 <bme680_get_sensor_data+0x2f0>)
   d4aaa:	4293      	cmp	r3, r2
   d4aac:	bfd4      	ite	le
   d4aae:	f8c8 300c 	strle.w	r3, [r8, #12]
   d4ab2:	f8c8 200c 	strgt.w	r2, [r8, #12]
   d4ab6:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4aba:	2205      	movs	r2, #5
   d4abc:	f240 503c 	movw	r0, #1340	; 0x53c
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
   d4ac6:	f00e 060f 	and.w	r6, lr, #15
   d4aca:	4b24      	ldr	r3, [pc, #144]	; (d4b5c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   d4ad0:	fba0 2307 	umull	r2, r3, r0, r7
   d4ad4:	fb07 3301 	mla	r3, r7, r1, r3
   d4ad8:	0c10      	lsrs	r0, r2, #16
   d4ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   d4ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d4ae2:	4f1f      	ldr	r7, [pc, #124]	; (d4b60 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ae4:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
   d4ae8:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
   d4aec:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4af0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4af4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   d4af8:	f04f 0300 	mov.w	r3, #0

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4afc:	fbae 6700 	umull	r6, r7, lr, r0
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4b00:	f143 33ff 	adc.w	r3, r3, #4294967295
   d4b04:	1812      	adds	r2, r2, r0
   d4b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4b08:	fb0e 7701 	mla	r7, lr, r1, r7
   d4b0c:	0a70      	lsrs	r0, r6, #9
   d4b0e:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   d4b12:	1279      	asrs	r1, r7, #9
   d4b14:	105f      	asrs	r7, r3, #1
   d4b16:	ea4f 0632 	mov.w	r6, r2, rrx
   d4b1a:	1980      	adds	r0, r0, r6
   d4b1c:	4179      	adcs	r1, r7
   d4b1e:	f004 fb5b 	bl	d91d8 <__aeabi_ldivmod>
   d4b22:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
   d4b26:	b995      	cbnz	r5, d4b4e <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
   d4b28:	f998 3000 	ldrsb.w	r3, [r8]
   d4b2c:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
   d4b2e:	bfba      	itte	lt
   d4b30:	2301      	movlt	r3, #1
   d4b32:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
   d4b36:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
   d4b3a:	e008      	b.n	d4b4e <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   d4b3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b3e:	200a      	movs	r0, #10
   d4b40:	4798      	blx	r3
   d4b42:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
   d4b44:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4b48:	f47f aea5 	bne.w	d4896 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   d4b4c:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
   d4b4e:	4628      	mov	r0, r5
   d4b50:	b009      	add	sp, #36	; 0x24
   d4b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b56:	bf00      	nop
   d4b58:	000186a0 	.word	0x000186a0
   d4b5c:	2003e240 	.word	0x2003e240
   d4b60:	2003e280 	.word	0x2003e280

000d4b64 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4b64:	b510      	push	{r4, lr}
   d4b66:	4b03      	ldr	r3, [pc, #12]	; (d4b74 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4b68:	6003      	str	r3, [r0, #0]
   d4b6a:	4604      	mov	r4, r0
   d4b6c:	f000 fcf0 	bl	d5550 <_ZN10JsonWriterD1Ev>
   d4b70:	4620      	mov	r0, r4
   d4b72:	bd10      	pop	{r4, pc}
   d4b74:	000d9660 	.word	0x000d9660

000d4b78 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4b78:	b510      	push	{r4, lr}
   d4b7a:	4604      	mov	r4, r0
   d4b7c:	f7ff fff2 	bl	d4b64 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4b80:	4620      	mov	r0, r4
   d4b82:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4b86:	f002 fb91 	bl	d72ac <_ZdlPvj>
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	bd10      	pop	{r4, pc}
	...

000d4b90 <setup>:
float gas;
int pm25; 
int delayTime = 30*60*1000;

// setup() runs once, when the device is first turned on.
void setup() {
   d4b90:	b508      	push	{r3, lr}
  Wire.begin();
   d4b92:	f002 fb57 	bl	d7244 <_Z19__fetch_global_Wirev>
   d4b96:	f002 f8d5 	bl	d6d44 <_ZN7TwoWire5beginEv>

  Serial.begin(9600);
   d4b9a:	f001 ffd9 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4b9e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ba2:	f001 ffc9 	bl	d6b38 <_ZN9USBSerial5beginEl>
  delay(1000);    // time to get serial running
   d4ba6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4baa:	f001 fb81 	bl	d62b0 <delay>
  Serial.println("BME680 test");
   d4bae:	f001 ffcf 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4bb2:	4916      	ldr	r1, [pc, #88]	; (d4c0c <setup+0x7c>)
   d4bb4:	f001 fa35 	bl	d6022 <_ZN5Print7printlnEPKc>
  
  status = bme.begin();
   d4bb8:	2177      	movs	r1, #119	; 0x77
   d4bba:	4815      	ldr	r0, [pc, #84]	; (d4c10 <setup+0x80>)
   d4bbc:	f000 fb28 	bl	d5210 <_ZN15Adafruit_BME6805beginEh>
   d4bc0:	4b14      	ldr	r3, [pc, #80]	; (d4c14 <setup+0x84>)
   d4bc2:	6018      	str	r0, [r3, #0]
  if (!status) {
   d4bc4:	b928      	cbnz	r0, d4bd2 <setup+0x42>
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
   d4bc6:	f001 ffc3 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4bca:	4913      	ldr	r1, [pc, #76]	; (d4c18 <setup+0x88>)
   d4bcc:	f001 fa29 	bl	d6022 <_ZN5Print7printlnEPKc>
   d4bd0:	e7fe      	b.n	d4bd0 <setup+0x40>
    while (1);
    }
  else {
    Serial.println("BME680 Is Online and Ready!!!");
   d4bd2:	f001 ffbd 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4bd6:	4911      	ldr	r1, [pc, #68]	; (d4c1c <setup+0x8c>)
   d4bd8:	f001 fa23 	bl	d6022 <_ZN5Print7printlnEPKc>
  }

    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
   d4bdc:	2104      	movs	r1, #4
   d4bde:	480c      	ldr	r0, [pc, #48]	; (d4c10 <setup+0x80>)
   d4be0:	f000 fc67 	bl	d54b2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
   d4be4:	2102      	movs	r1, #2
   d4be6:	480a      	ldr	r0, [pc, #40]	; (d4c10 <setup+0x80>)
   d4be8:	f000 fc70 	bl	d54cc <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
   d4bec:	2103      	movs	r1, #3
   d4bee:	4808      	ldr	r0, [pc, #32]	; (d4c10 <setup+0x80>)
   d4bf0:	f000 fc79 	bl	d54e6 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   d4bf4:	2102      	movs	r1, #2
   d4bf6:	4806      	ldr	r0, [pc, #24]	; (d4c10 <setup+0x80>)
   d4bf8:	f000 fc82 	bl	d5500 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
   d4bfc:	2296      	movs	r2, #150	; 0x96
   d4bfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d4c02:	4803      	ldr	r0, [pc, #12]	; (d4c10 <setup+0x80>)
}
   d4c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms
   d4c08:	f000 bc45 	b.w	d5496 <_ZN15Adafruit_BME68012setGasHeaterEtt>
   d4c0c:	000d9668 	.word	0x000d9668
   d4c10:	2003e340 	.word	0x2003e340
   d4c14:	2003e3c4 	.word	0x2003e3c4
   d4c18:	000d9674 	.word	0x000d9674
   d4c1c:	000d96a8 	.word	0x000d96a8

000d4c20 <_Z11printValuesv>:
    jw.insertKeyValue("Home_PM25", pm25Value);
  }
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}

void printValues() {
   d4c20:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d4c22:	f001 ff95 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c26:	493a      	ldr	r1, [pc, #232]	; (d4d10 <_Z11printValuesv+0xf0>)
    Serial.print(bme.readTemperature());
   d4c28:	4c3a      	ldr	r4, [pc, #232]	; (d4d14 <_Z11printValuesv+0xf4>)
  }
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}

void printValues() {
    Serial.print("Temperature = ");
   d4c2a:	f001 f9e7 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4c2e:	f001 ff8f 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c32:	4605      	mov	r5, r0
   d4c34:	4620      	mov	r0, r4
   d4c36:	f000 fbdf 	bl	d53f8 <_ZN15Adafruit_BME68015readTemperatureEv>
   d4c3a:	2102      	movs	r1, #2
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f001 fad9 	bl	d61f4 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d4c42:	f001 ff85 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c46:	4934      	ldr	r1, [pc, #208]	; (d4d18 <_Z11printValuesv+0xf8>)
   d4c48:	f001 f9eb 	bl	d6022 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4c4c:	f001 ff80 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c50:	4932      	ldr	r1, [pc, #200]	; (d4d1c <_Z11printValuesv+0xfc>)
   d4c52:	f001 f9d3 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.print(bme.readPressure() / 100.0F);
   d4c56:	f001 ff7b 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c5a:	4605      	mov	r5, r0
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	f000 fbd2 	bl	d5406 <_ZN15Adafruit_BME68012readPressureEv>
   d4c62:	eddf 7a2f 	vldr	s15, [pc, #188]	; d4d20 <_Z11printValuesv+0x100>
   d4c66:	2102      	movs	r1, #2
   d4c68:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4c6c:	4628      	mov	r0, r5
   d4c6e:	f001 fac1 	bl	d61f4 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d4c72:	f001 ff6d 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c76:	492b      	ldr	r1, [pc, #172]	; (d4d24 <_Z11printValuesv+0x104>)
   d4c78:	f001 f9d3 	bl	d6022 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d4c7c:	f001 ff68 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c80:	4929      	ldr	r1, [pc, #164]	; (d4d28 <_Z11printValuesv+0x108>)
   d4c82:	f001 f9bb 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4c86:	f001 ff63 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4c8a:	ed9f 0a28 	vldr	s0, [pc, #160]	; d4d2c <_Z11printValuesv+0x10c>
   d4c8e:	4605      	mov	r5, r0
   d4c90:	4620      	mov	r0, r4
   d4c92:	f000 fbc1 	bl	d5418 <_ZN15Adafruit_BME68012readAltitudeEf>
   d4c96:	2102      	movs	r1, #2
   d4c98:	4628      	mov	r0, r5
   d4c9a:	f001 faab 	bl	d61f4 <_ZN5Print5printEfi>
    Serial.println(" m");
   d4c9e:	f001 ff57 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4ca2:	4923      	ldr	r1, [pc, #140]	; (d4d30 <_Z11printValuesv+0x110>)
   d4ca4:	f001 f9bd 	bl	d6022 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d4ca8:	f001 ff52 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cac:	4921      	ldr	r1, [pc, #132]	; (d4d34 <_Z11printValuesv+0x114>)
   d4cae:	f001 f9a5 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d4cb2:	f001 ff4d 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cb6:	4605      	mov	r5, r0
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f000 fbe5 	bl	d5488 <_ZN15Adafruit_BME68012readHumidityEv>
   d4cbe:	2102      	movs	r1, #2
   d4cc0:	4628      	mov	r0, r5
   d4cc2:	f001 fa97 	bl	d61f4 <_ZN5Print5printEfi>
    Serial.println(" %");
   d4cc6:	f001 ff43 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cca:	491b      	ldr	r1, [pc, #108]	; (d4d38 <_Z11printValuesv+0x118>)
   d4ccc:	f001 f9a9 	bl	d6022 <_ZN5Print7printlnEPKc>

    Serial.print("Gas = ");
   d4cd0:	f001 ff3e 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cd4:	4919      	ldr	r1, [pc, #100]	; (d4d3c <_Z11printValuesv+0x11c>)
   d4cd6:	f001 f991 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.print(bme.gas_resistance / 1000.0);
   d4cda:	f001 ff39 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cde:	4605      	mov	r5, r0
   d4ce0:	68e0      	ldr	r0, [r4, #12]
   d4ce2:	f003 fedd 	bl	d8aa0 <__aeabi_f2d>
   d4ce6:	4b16      	ldr	r3, [pc, #88]	; (d4d40 <_Z11printValuesv+0x120>)
   d4ce8:	2200      	movs	r2, #0
   d4cea:	f004 f857 	bl	d8d9c <__aeabi_ddiv>
   d4cee:	ec41 0b10 	vmov	d0, r0, r1
   d4cf2:	2102      	movs	r1, #2
   d4cf4:	4628      	mov	r0, r5
   d4cf6:	f001 fa8c 	bl	d6212 <_ZN5Print5printEdi>
    Serial.println(" KOhms");
   d4cfa:	f001 ff29 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4cfe:	4911      	ldr	r1, [pc, #68]	; (d4d44 <_Z11printValuesv+0x124>)
   d4d00:	f001 f98f 	bl	d6022 <_ZN5Print7printlnEPKc>

    Serial.println();  
   d4d04:	f001 ff24 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Gas = ");
    Serial.print(bme.gas_resistance / 1000.0);
    Serial.println(" KOhms");

    Serial.println();  
   d4d0c:	f001 b97d 	b.w	d600a <_ZN5Print7printlnEv>
   d4d10:	000d96c6 	.word	0x000d96c6
   d4d14:	2003e340 	.word	0x2003e340
   d4d18:	000d96d5 	.word	0x000d96d5
   d4d1c:	000d96d9 	.word	0x000d96d9
   d4d20:	42c80000 	.word	0x42c80000
   d4d24:	000d96e5 	.word	0x000d96e5
   d4d28:	000d96ea 	.word	0x000d96ea
   d4d2c:	447d5000 	.word	0x447d5000
   d4d30:	000d96fe 	.word	0x000d96fe
   d4d34:	000d9701 	.word	0x000d9701
   d4d38:	000d970d 	.word	0x000d970d
   d4d3c:	000d9710 	.word	0x000d9710
   d4d40:	408f4000 	.word	0x408f4000
   d4d44:	000d9717 	.word	0x000d9717

000d4d48 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4d48:	b538      	push	{r3, r4, r5, lr}
   d4d4a:	4604      	mov	r4, r0
   d4d4c:	ed2d 8b02 	vpush	{d8}
   d4d50:	460d      	mov	r5, r1
   d4d52:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4d56:	f000 fd03 	bl	d5760 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4d5a:	4629      	mov	r1, r5
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	2201      	movs	r2, #1
   d4d60:	f000 fc72 	bl	d5648 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4d64:	4620      	mov	r0, r4
   d4d66:	213a      	movs	r1, #58	; 0x3a
   d4d68:	f000 fc22 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4d6c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4d70:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4d74:	4620      	mov	r0, r4
	}
   d4d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4d7a:	f000 bd15 	b.w	d57a8 <_ZN10JsonWriter11insertValueEf>
	...

000d4d80 <_Z18createEventPayLoadffffi>:
   createEventPayLoad(tempF,pres,humid,gas,pm25);

  delay(delayTime);
}

void createEventPayLoad(float tempValue, float presValue, float humidValue, float gasValue, int pm25Value) {
   d4d80:	b510      	push	{r4, lr}
   d4d82:	ed2d 8b04 	vpush	{d8-d9}
   d4d86:	b0d2      	sub	sp, #328	; 0x148
   d4d88:	4604      	mov	r4, r0
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4d8e:	a912      	add	r1, sp, #72	; 0x48
   d4d90:	a806      	add	r0, sp, #24
   d4d92:	eeb0 9a60 	vmov.f32	s18, s1
   d4d96:	eef0 8a41 	vmov.f32	s17, s2
   d4d9a:	eeb0 8a61 	vmov.f32	s16, s3
   d4d9e:	eef0 9a40 	vmov.f32	s19, s0
   d4da2:	f000 fbf3 	bl	d558c <_ZN10JsonWriterC1EPcj>
   d4da6:	4b2c      	ldr	r3, [pc, #176]	; (d4e58 <_Z18createEventPayLoadffffi+0xd8>)
   d4da8:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4daa:	227d      	movs	r2, #125	; 0x7d
   d4dac:	217b      	movs	r1, #123	; 0x7b
   d4dae:	a806      	add	r0, sp, #24
   d4db0:	f000 fce1 	bl	d5776 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Home_Temp", tempValue);
   d4db4:	eeb0 0a69 	vmov.f32	s0, s19
   d4db8:	4928      	ldr	r1, [pc, #160]	; (d4e5c <_Z18createEventPayLoadffffi+0xdc>)
   d4dba:	a806      	add	r0, sp, #24
   d4dbc:	f7ff ffc4 	bl	d4d48 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Pres", presValue);
   d4dc0:	eeb0 0a49 	vmov.f32	s0, s18
   d4dc4:	4926      	ldr	r1, [pc, #152]	; (d4e60 <_Z18createEventPayLoadffffi+0xe0>)
   d4dc6:	a806      	add	r0, sp, #24
   d4dc8:	f7ff ffbe 	bl	d4d48 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Humid", humidValue);
   d4dcc:	eeb0 0a68 	vmov.f32	s0, s17
   d4dd0:	4924      	ldr	r1, [pc, #144]	; (d4e64 <_Z18createEventPayLoadffffi+0xe4>)
   d4dd2:	a806      	add	r0, sp, #24
   d4dd4:	f7ff ffb8 	bl	d4d48 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Gas", gasValue);
   d4dd8:	eeb0 0a48 	vmov.f32	s0, s16
   d4ddc:	4922      	ldr	r1, [pc, #136]	; (d4e68 <_Z18createEventPayLoadffffi+0xe8>)
   d4dde:	a806      	add	r0, sp, #24
   d4de0:	f7ff ffb2 	bl	d4d48 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4de4:	a806      	add	r0, sp, #24
   d4de6:	f000 fcbb 	bl	d5760 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4dea:	2201      	movs	r2, #1
   d4dec:	491f      	ldr	r1, [pc, #124]	; (d4e6c <_Z18createEventPayLoadffffi+0xec>)
   d4dee:	a806      	add	r0, sp, #24
   d4df0:	f000 fc2a 	bl	d5648 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4df4:	213a      	movs	r1, #58	; 0x3a
   d4df6:	a806      	add	r0, sp, #24
   d4df8:	f000 fbda 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4dfc:	4622      	mov	r2, r4
   d4dfe:	491c      	ldr	r1, [pc, #112]	; (d4e70 <_Z18createEventPayLoadffffi+0xf0>)
   d4e00:	a806      	add	r0, sp, #24
   d4e02:	f000 fc14 	bl	d562e <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4e06:	a806      	add	r0, sp, #24
   d4e08:	f000 fbe0 	bl	d55cc <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4e0c:	9b07      	ldr	r3, [sp, #28]
   d4e0e:	9303      	str	r3, [sp, #12]
   d4e10:	4b18      	ldr	r3, [pc, #96]	; (d4e74 <_Z18createEventPayLoadffffi+0xf4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e12:	9a03      	ldr	r2, [sp, #12]
   d4e14:	781b      	ldrb	r3, [r3, #0]
   d4e16:	f88d 3000 	strb.w	r3, [sp]
   d4e1a:	4917      	ldr	r1, [pc, #92]	; (d4e78 <_Z18createEventPayLoadffffi+0xf8>)
   d4e1c:	233c      	movs	r3, #60	; 0x3c
   d4e1e:	a804      	add	r0, sp, #16
   d4e20:	f001 fc40 	bl	d66a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4e24:	9c05      	ldr	r4, [sp, #20]
   d4e26:	b17c      	cbz	r4, d4e48 <_Z18createEventPayLoadffffi+0xc8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e28:	6863      	ldr	r3, [r4, #4]
   d4e2a:	3b01      	subs	r3, #1
   d4e2c:	6063      	str	r3, [r4, #4]
   d4e2e:	b95b      	cbnz	r3, d4e48 <_Z18createEventPayLoadffffi+0xc8>
        {
          _M_dispose();
   d4e30:	6823      	ldr	r3, [r4, #0]
   d4e32:	4620      	mov	r0, r4
   d4e34:	689b      	ldr	r3, [r3, #8]
   d4e36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e38:	68a3      	ldr	r3, [r4, #8]
   d4e3a:	3b01      	subs	r3, #1
   d4e3c:	60a3      	str	r3, [r4, #8]
   d4e3e:	b91b      	cbnz	r3, d4e48 <_Z18createEventPayLoadffffi+0xc8>
            _M_destroy();
   d4e40:	6823      	ldr	r3, [r4, #0]
   d4e42:	4620      	mov	r0, r4
   d4e44:	68db      	ldr	r3, [r3, #12]
   d4e46:	4798      	blx	r3

  delay(delayTime);
}

void createEventPayLoad(float tempValue, float presValue, float humidValue, float gasValue, int pm25Value) {
  JsonWriterStatic<256> jw;
   d4e48:	a806      	add	r0, sp, #24
   d4e4a:	f7ff fe8b 	bl	d4b64 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Home_Humid", humidValue);
    jw.insertKeyValue("Home_Gas", gasValue);
    jw.insertKeyValue("Home_PM25", pm25Value);
  }
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}
   d4e4e:	b052      	add	sp, #328	; 0x148
   d4e50:	ecbd 8b04 	vpop	{d8-d9}
   d4e54:	bd10      	pop	{r4, pc}
   d4e56:	bf00      	nop
   d4e58:	000d9660 	.word	0x000d9660
   d4e5c:	000d971e 	.word	0x000d971e
   d4e60:	000d9728 	.word	0x000d9728
   d4e64:	000d9732 	.word	0x000d9732
   d4e68:	000d973d 	.word	0x000d973d
   d4e6c:	000d9746 	.word	0x000d9746
   d4e70:	000d9750 	.word	0x000d9750
   d4e74:	2003e33c 	.word	0x2003e33c
   d4e78:	000d9753 	.word	0x000d9753
   d4e7c:	00000000 	.word	0x00000000

000d4e80 <loop>:
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4e80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  tempF = (bme.readTemperature()*(9.0/5.0))+32;
   d4e84:	4c3a      	ldr	r4, [pc, #232]	; (d4f70 <loop+0xf0>)
   d4e86:	4d3b      	ldr	r5, [pc, #236]	; (d4f74 <loop+0xf4>)
  pres = ((bme.readPressure() / 100.0F)*0.02953)+5;
   d4e88:	4e3b      	ldr	r6, [pc, #236]	; (d4f78 <loop+0xf8>)
  humid = bme.readHumidity();
   d4e8a:	4f3c      	ldr	r7, [pc, #240]	; (d4f7c <loop+0xfc>)
  gas = bme.gas_resistance / 1000.0;
   d4e8c:	f8df 8110 	ldr.w	r8, [pc, #272]	; d4fa0 <loop+0x120>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  tempF = (bme.readTemperature()*(9.0/5.0))+32;
   d4e90:	4620      	mov	r0, r4
   d4e92:	f000 fab1 	bl	d53f8 <_ZN15Adafruit_BME68015readTemperatureEv>
   d4e96:	ee10 0a10 	vmov	r0, s0
   d4e9a:	f003 fe01 	bl	d8aa0 <__aeabi_f2d>
   d4e9e:	a330      	add	r3, pc, #192	; (adr r3, d4f60 <loop+0xe0>)
   d4ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ea4:	f003 fe50 	bl	d8b48 <__aeabi_dmul>
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	4b35      	ldr	r3, [pc, #212]	; (d4f80 <loop+0x100>)
   d4eac:	f003 fc9a 	bl	d87e4 <__adddf3>
   d4eb0:	f004 f942 	bl	d9138 <__aeabi_d2f>
   d4eb4:	6028      	str	r0, [r5, #0]
  pres = ((bme.readPressure() / 100.0F)*0.02953)+5;
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f000 faa5 	bl	d5406 <_ZN15Adafruit_BME68012readPressureEv>
   d4ebc:	eddf 7a31 	vldr	s15, [pc, #196]	; d4f84 <loop+0x104>
   d4ec0:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4ec4:	ee17 0a10 	vmov	r0, s14
   d4ec8:	f003 fdea 	bl	d8aa0 <__aeabi_f2d>
   d4ecc:	a326      	add	r3, pc, #152	; (adr r3, d4f68 <loop+0xe8>)
   d4ece:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ed2:	f003 fe39 	bl	d8b48 <__aeabi_dmul>
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	4b2b      	ldr	r3, [pc, #172]	; (d4f88 <loop+0x108>)
   d4eda:	f003 fc83 	bl	d87e4 <__adddf3>
   d4ede:	f004 f92b 	bl	d9138 <__aeabi_d2f>
   d4ee2:	6030      	str	r0, [r6, #0]
  humid = bme.readHumidity();
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	f000 facf 	bl	d5488 <_ZN15Adafruit_BME68012readHumidityEv>
  gas = bme.gas_resistance / 1000.0;
   d4eea:	edd4 6a03 	vldr	s13, [r4, #12]
   d4eee:	ed9f 7a27 	vldr	s14, [pc, #156]	; d4f8c <loop+0x10c>
  pm25 = 13; //don't forget to change this.
   d4ef2:	4c27      	ldr	r4, [pc, #156]	; (d4f90 <loop+0x110>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  tempF = (bme.readTemperature()*(9.0/5.0))+32;
  pres = ((bme.readPressure() / 100.0F)*0.02953)+5;
  humid = bme.readHumidity();
   d4ef4:	ed87 0a00 	vstr	s0, [r7]
  gas = bme.gas_resistance / 1000.0;
   d4ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  pm25 = 13; //don't forget to change this.
   d4efc:	230d      	movs	r3, #13
   d4efe:	6023      	str	r3, [r4, #0]
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  tempF = (bme.readTemperature()*(9.0/5.0))+32;
  pres = ((bme.readPressure() / 100.0F)*0.02953)+5;
  humid = bme.readHumidity();
  gas = bme.gas_resistance / 1000.0;
   d4f00:	edc8 7a00 	vstr	s15, [r8]
  pm25 = 13; //don't forget to change this.
  
  Serial.printlnf("Temperature(F) = %1.2f",tempF);
   d4f04:	f001 fe24 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4f08:	4681      	mov	r9, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4f0a:	6828      	ldr	r0, [r5, #0]
   d4f0c:	f003 fdc8 	bl	d8aa0 <__aeabi_f2d>
   d4f10:	4a20      	ldr	r2, [pc, #128]	; (d4f94 <loop+0x114>)
   d4f12:	e9cd 0100 	strd	r0, r1, [sp]
   d4f16:	2101      	movs	r1, #1
   d4f18:	4648      	mov	r0, r9
   d4f1a:	f001 f97d 	bl	d6218 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Pressure(inHg) = %1.2f",pres);
   d4f1e:	f001 fe17 	bl	d6b50 <_Z16_fetch_usbserialv>
   d4f22:	4681      	mov	r9, r0
   d4f24:	6830      	ldr	r0, [r6, #0]
   d4f26:	f003 fdbb 	bl	d8aa0 <__aeabi_f2d>
   d4f2a:	4a1b      	ldr	r2, [pc, #108]	; (d4f98 <loop+0x118>)
   d4f2c:	e9cd 0100 	strd	r0, r1, [sp]
   d4f30:	2101      	movs	r1, #1
   d4f32:	4648      	mov	r0, r9
   d4f34:	f001 f970 	bl	d6218 <_ZN5Print11printf_implEbPKcz>

  printValues();
   d4f38:	f7ff fe72 	bl	d4c20 <_Z11printValuesv>

   createEventPayLoad(tempF,pres,humid,gas,pm25);
   d4f3c:	6820      	ldr	r0, [r4, #0]
   d4f3e:	edd8 1a00 	vldr	s3, [r8]
   d4f42:	ed97 1a00 	vldr	s2, [r7]
   d4f46:	edd6 0a00 	vldr	s1, [r6]
   d4f4a:	ed95 0a00 	vldr	s0, [r5]
   d4f4e:	f7ff ff17 	bl	d4d80 <_Z18createEventPayLoadffffi>

  delay(delayTime);
   d4f52:	4b12      	ldr	r3, [pc, #72]	; (d4f9c <loop+0x11c>)
   d4f54:	6818      	ldr	r0, [r3, #0]
}
   d4f56:	b003      	add	sp, #12
   d4f58:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  printValues();

   createEventPayLoad(tempF,pres,humid,gas,pm25);

  delay(delayTime);
   d4f5c:	f001 b9a8 	b.w	d62b0 <delay>
   d4f60:	cccccccd 	.word	0xcccccccd
   d4f64:	3ffccccc 	.word	0x3ffccccc
   d4f68:	c100e6b0 	.word	0xc100e6b0
   d4f6c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4f70:	2003e340 	.word	0x2003e340
   d4f74:	2003e334 	.word	0x2003e334
   d4f78:	2003e3c0 	.word	0x2003e3c0
   d4f7c:	2003e3b8 	.word	0x2003e3b8
   d4f80:	40400000 	.word	0x40400000
   d4f84:	42c80000 	.word	0x42c80000
   d4f88:	40140000 	.word	0x40140000
   d4f8c:	447a0000 	.word	0x447a0000
   d4f90:	2003e3bc 	.word	0x2003e3bc
   d4f94:	000d975c 	.word	0x000d975c
   d4f98:	000d9773 	.word	0x000d9773
   d4f9c:	2003e2c0 	.word	0x2003e2c0
   d4fa0:	2003e338 	.word	0x2003e338

000d4fa4 <_GLOBAL__sub_I_bme>:
    Serial.print("Gas = ");
    Serial.print(bme.gas_resistance / 1000.0);
    Serial.println(" KOhms");

    Serial.println();  
   d4fa4:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4fa6:	4b06      	ldr	r3, [pc, #24]	; (d4fc0 <_GLOBAL__sub_I_bme+0x1c>)
   d4fa8:	2201      	movs	r2, #1
   d4faa:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4fac:	f000 fc30 	bl	d5810 <HAL_Pin_Map>
#include "Adafruit_BME680.h"
#include <JsonParserGeneratorRK.h>

// Adafruit_BME280 bme; // I2C
#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME680 bme; // I2C
   d4fb0:	f04f 31ff 	mov.w	r1, #4294967295
   d4fb4:	4803      	ldr	r0, [pc, #12]	; (d4fc4 <_GLOBAL__sub_I_bme+0x20>)
    Serial.print("Gas = ");
    Serial.print(bme.gas_resistance / 1000.0);
    Serial.println(" KOhms");

    Serial.println();  
   d4fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Adafruit_BME680.h"
#include <JsonParserGeneratorRK.h>

// Adafruit_BME280 bme; // I2C
#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME680 bme; // I2C
   d4fba:	f000 b913 	b.w	d51e4 <_ZN15Adafruit_BME680C1Ea>
   d4fbe:	bf00      	nop
   d4fc0:	2003e33c 	.word	0x2003e33c
   d4fc4:	2003e340 	.word	0x2003e340

000d4fc8 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
   d4fc8:	f001 b972 	b.w	d62b0 <delay>

000d4fcc <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d4fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fce:	4607      	mov	r7, r0
   d4fd0:	4614      	mov	r4, r2
   d4fd2:	461d      	mov	r5, r3
   d4fd4:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
   d4fd6:	f002 f935 	bl	d7244 <_Z19__fetch_global_Wirev>
   d4fda:	4639      	mov	r1, r7
   d4fdc:	f001 fee9 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d4fe0:	f002 f930 	bl	d7244 <_Z19__fetch_global_Wirev>
   d4fe4:	6803      	ldr	r3, [r0, #0]
   d4fe6:	4631      	mov	r1, r6
   d4fe8:	689b      	ldr	r3, [r3, #8]
   d4fea:	4798      	blx	r3
   d4fec:	4425      	add	r5, r4
  while (len--) {
   d4fee:	42ac      	cmp	r4, r5
   d4ff0:	d007      	beq.n	d5002 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
   d4ff2:	f002 f927 	bl	d7244 <_Z19__fetch_global_Wirev>
   d4ff6:	6803      	ldr	r3, [r0, #0]
   d4ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4ffc:	689b      	ldr	r3, [r3, #8]
   d4ffe:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
   d5000:	e7f5      	b.n	d4fee <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
   d5002:	f002 f91f 	bl	d7244 <_Z19__fetch_global_Wirev>
   d5006:	f001 fedc 	bl	d6dc2 <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d500a:	2000      	movs	r0, #0
   d500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5010 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
   d5014:	4d1b      	ldr	r5, [pc, #108]	; (d5084 <_ZL12spi_transferh+0x74>)
   d5016:	f995 3000 	ldrsb.w	r3, [r5]
   d501a:	3301      	adds	r3, #1
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d501c:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
   d501e:	d106      	bne.n	d502e <_ZL12spi_transferh+0x1e>
    return SPI.transfer(x);
   d5020:	f002 f8d6 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d5024:	4641      	mov	r1, r8
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d5026:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
   d502a:	f000 bf41 	b.w	d5eb0 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d502e:	f8df 9058 	ldr.w	r9, [pc, #88]	; d5088 <_ZL12spi_transferh+0x78>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5032:	f8df a058 	ldr.w	sl, [pc, #88]	; d508c <_ZL12spi_transferh+0x7c>
   d5036:	2607      	movs	r6, #7
   d5038:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
   d503a:	f995 0000 	ldrsb.w	r0, [r5]
   d503e:	2100      	movs	r1, #0
   d5040:	b280      	uxth	r0, r0
   d5042:	f002 f898 	bl	d7176 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d5046:	2701      	movs	r7, #1
   d5048:	f999 0000 	ldrsb.w	r0, [r9]
   d504c:	fa07 f106 	lsl.w	r1, r7, r6
   d5050:	ea01 0108 	and.w	r1, r1, r8
   d5054:	b280      	uxth	r0, r0
   d5056:	f002 f88e 	bl	d7176 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
   d505a:	f995 0000 	ldrsb.w	r0, [r5]
   d505e:	4639      	mov	r1, r7
   d5060:	b280      	uxth	r0, r0
   d5062:	f002 f888 	bl	d7176 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5066:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d506a:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d506c:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d506e:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5070:	f002 f89a 	bl	d71a8 <digitalRead>
   d5074:	b100      	cbz	r0, d5078 <_ZL12spi_transferh+0x68>
      reply |= 1;
   d5076:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d5078:	f116 36ff 	adds.w	r6, r6, #4294967295
   d507c:	d2dd      	bcs.n	d503a <_ZL12spi_transferh+0x2a>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d507e:	4620      	mov	r0, r4
   d5080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5084:	2003e3c9 	.word	0x2003e3c9
   d5088:	2003e3ca 	.word	0x2003e3ca
   d508c:	2003e3c8 	.word	0x2003e3c8

000d5090 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5094:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5096:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5098:	4615      	mov	r5, r2
   d509a:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d509c:	4607      	mov	r7, r0
   d509e:	f002 f86a 	bl	d7176 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d50a2:	4b19      	ldr	r3, [pc, #100]	; (d5108 <_ZL9spi_writehhPht+0x78>)
   d50a4:	f993 2000 	ldrsb.w	r2, [r3]
   d50a8:	3201      	adds	r2, #1
   d50aa:	461c      	mov	r4, r3
   d50ac:	d112      	bne.n	d50d4 <_ZL9spi_writehhPht+0x44>
    SPI.begin();
   d50ae:	f002 f88f 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d50b2:	f000 fe5b 	bl	d5d6c <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d50b6:	f002 f88b 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d50ba:	2140      	movs	r1, #64	; 0x40
   d50bc:	f000 fed4 	bl	d5e68 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d50c0:	f002 f886 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d50c4:	2101      	movs	r1, #1
   d50c6:	f000 fe62 	bl	d5d8e <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d50ca:	f002 f881 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d50ce:	2100      	movs	r1, #0
   d50d0:	f000 fe6e 	bl	d5db0 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d50d4:	4640      	mov	r0, r8
   d50d6:	f7ff ff9b 	bl	d5010 <_ZL12spi_transferh>
   d50da:	442e      	add	r6, r5
  while (len--) {
   d50dc:	42b5      	cmp	r5, r6
   d50de:	d004      	beq.n	d50ea <_ZL9spi_writehhPht+0x5a>
    spi_transfer(*reg_data);
   d50e0:	f815 0b01 	ldrb.w	r0, [r5], #1
   d50e4:	f7ff ff94 	bl	d5010 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
   d50e8:	e7f8      	b.n	d50dc <_ZL9spi_writehhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d50ea:	f994 3000 	ldrsb.w	r3, [r4]
   d50ee:	3301      	adds	r3, #1
   d50f0:	d103      	bne.n	d50fa <_ZL9spi_writehhPht+0x6a>
    SPI.endTransaction();
   d50f2:	f002 f86d 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d50f6:	f000 fe6c 	bl	d5dd2 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d50fa:	4638      	mov	r0, r7
   d50fc:	2101      	movs	r1, #1
   d50fe:	f002 f83a 	bl	d7176 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5102:	2000      	movs	r0, #0
   d5104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5108:	2003e3c9 	.word	0x2003e3c9

000d510c <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5110:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5112:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5114:	4615      	mov	r5, r2
   d5116:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5118:	4607      	mov	r7, r0
   d511a:	f002 f82c 	bl	d7176 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d511e:	4b1a      	ldr	r3, [pc, #104]	; (d5188 <_ZL8spi_readhhPht+0x7c>)
   d5120:	f993 2000 	ldrsb.w	r2, [r3]
   d5124:	3201      	adds	r2, #1
   d5126:	461c      	mov	r4, r3
   d5128:	d112      	bne.n	d5150 <_ZL8spi_readhhPht+0x44>
    SPI.begin();
   d512a:	f002 f851 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d512e:	f000 fe1d 	bl	d5d6c <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d5132:	f002 f84d 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d5136:	2140      	movs	r1, #64	; 0x40
   d5138:	f000 fe96 	bl	d5e68 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d513c:	f002 f848 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d5140:	2101      	movs	r1, #1
   d5142:	f000 fe24 	bl	d5d8e <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d5146:	f002 f843 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d514a:	2100      	movs	r1, #0
   d514c:	f000 fe30 	bl	d5db0 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d5150:	4640      	mov	r0, r8
   d5152:	f7ff ff5d 	bl	d5010 <_ZL12spi_transferh>
   d5156:	442e      	add	r6, r5

  while (len--) {
   d5158:	42b5      	cmp	r5, r6
   d515a:	d005      	beq.n	d5168 <_ZL8spi_readhhPht+0x5c>
    *reg_data = spi_transfer(0x00);
   d515c:	2000      	movs	r0, #0
   d515e:	f7ff ff57 	bl	d5010 <_ZL12spi_transferh>
   d5162:	f805 0b01 	strb.w	r0, [r5], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
   d5166:	e7f7      	b.n	d5158 <_ZL8spi_readhhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d5168:	f994 3000 	ldrsb.w	r3, [r4]
   d516c:	3301      	adds	r3, #1
   d516e:	d103      	bne.n	d5178 <_ZL8spi_readhhPht+0x6c>
    SPI.endTransaction();
   d5170:	f002 f82e 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d5174:	f000 fe2d 	bl	d5dd2 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d5178:	4638      	mov	r0, r7
   d517a:	2101      	movs	r1, #1
   d517c:	f001 fffb 	bl	d7176 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5180:	2000      	movs	r0, #0
   d5182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5186:	bf00      	nop
   d5188:	2003e3c9 	.word	0x2003e3c9

000d518c <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d518e:	4606      	mov	r6, r0
   d5190:	4615      	mov	r5, r2
   d5192:	461c      	mov	r4, r3
   d5194:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
   d5196:	f002 f855 	bl	d7244 <_Z19__fetch_global_Wirev>
   d519a:	4631      	mov	r1, r6
   d519c:	f001 fe09 	bl	d6db2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d51a0:	f002 f850 	bl	d7244 <_Z19__fetch_global_Wirev>
   d51a4:	6803      	ldr	r3, [r0, #0]
   d51a6:	4639      	mov	r1, r7
   d51a8:	689b      	ldr	r3, [r3, #8]
   d51aa:	4798      	blx	r3
  Wire.endTransmission();
   d51ac:	f002 f84a 	bl	d7244 <_Z19__fetch_global_Wirev>
   d51b0:	f001 fe07 	bl	d6dc2 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
   d51b4:	f002 f846 	bl	d7244 <_Z19__fetch_global_Wirev>
   d51b8:	b2e2      	uxtb	r2, r4
   d51ba:	4631      	mov	r1, r6
   d51bc:	f001 fdf6 	bl	d6dac <_ZN7TwoWire11requestFromEhj>
   d51c0:	4284      	cmp	r4, r0
   d51c2:	d10a      	bne.n	d51da <_ZL8i2c_readhhPht+0x4e>
   d51c4:	442c      	add	r4, r5
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
   d51c6:	42a5      	cmp	r5, r4
   d51c8:	d009      	beq.n	d51de <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
   d51ca:	f002 f83b 	bl	d7244 <_Z19__fetch_global_Wirev>
   d51ce:	6803      	ldr	r3, [r0, #0]
   d51d0:	695b      	ldr	r3, [r3, #20]
   d51d2:	4798      	blx	r3
   d51d4:	f805 0b01 	strb.w	r0, [r5], #1
   d51d8:	e7f5      	b.n	d51c6 <_ZL8i2c_readhhPht+0x3a>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
   d51da:	2001      	movs	r0, #1
   d51dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
   d51de:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d51e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d51e4 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
   d51e4:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
   d51e6:	4907      	ldr	r1, [pc, #28]	; (d5204 <_ZN15Adafruit_BME680C1Ea+0x20>)
   d51e8:	22ff      	movs	r2, #255	; 0xff
   d51ea:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
   d51ec:	4906      	ldr	r1, [pc, #24]	; (d5208 <_ZN15Adafruit_BME680C1Ea+0x24>)
   d51ee:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
   d51f0:	4906      	ldr	r1, [pc, #24]	; (d520c <_ZN15Adafruit_BME680C1Ea+0x28>)
   d51f2:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
   d51f4:	2200      	movs	r2, #0
   d51f6:	7502      	strb	r2, [r0, #20]
   d51f8:	74c2      	strb	r2, [r0, #19]
   d51fa:	7482      	strb	r2, [r0, #18]
   d51fc:	7442      	strb	r2, [r0, #17]
   d51fe:	7402      	strb	r2, [r0, #16]
}
   d5200:	4770      	bx	lr
   d5202:	bf00      	nop
   d5204:	2003e3ca 	.word	0x2003e3ca
   d5208:	2003e3c8 	.word	0x2003e3c8
   d520c:	2003e3c9 	.word	0x2003e3c9

000d5210 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
   d5210:	b538      	push	{r3, r4, r5, lr}
   d5212:	4604      	mov	r4, r0
   d5214:	460d      	mov	r5, r1
  _i2caddr = addr;
   d5216:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
   d5218:	f990 001c 	ldrsb.w	r0, [r0, #28]
   d521c:	1c42      	adds	r2, r0, #1
   d521e:	d10c      	bne.n	d523a <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
   d5220:	f002 f810 	bl	d7244 <_Z19__fetch_global_Wirev>
   d5224:	f001 fd8e 	bl	d6d44 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
   d5228:	2301      	movs	r3, #1
   d522a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
   d522e:	4b2e      	ldr	r3, [pc, #184]	; (d52e8 <_ZN15Adafruit_BME6805beginEh+0xd8>)
   d5230:	66a3      	str	r3, [r4, #104]	; 0x68

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
   d5232:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
    gas_sensor.write = &i2c_write;
   d5236:	4b2d      	ldr	r3, [pc, #180]	; (d52ec <_ZN15Adafruit_BME6805beginEh+0xdc>)
   d5238:	e02e      	b.n	d5298 <_ZN15Adafruit_BME6805beginEh+0x88>
  } else {
    digitalWrite(_cs, HIGH);
   d523a:	2101      	movs	r1, #1
   d523c:	b280      	uxth	r0, r0
   d523e:	f001 ff9a 	bl	d7176 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d5242:	f994 001c 	ldrsb.w	r0, [r4, #28]
   d5246:	2101      	movs	r1, #1
   d5248:	b280      	uxth	r0, r0
   d524a:	f001 ff83 	bl	d7154 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
   d524e:	4b28      	ldr	r3, [pc, #160]	; (d52f0 <_ZN15Adafruit_BME6805beginEh+0xe0>)
   d5250:	f993 0000 	ldrsb.w	r0, [r3]
   d5254:	1c43      	adds	r3, r0, #1
   d5256:	d104      	bne.n	d5262 <_ZN15Adafruit_BME6805beginEh+0x52>
      // hardware SPI
      SPI.begin();
   d5258:	f001 ffba 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d525c:	f000 fd86 	bl	d5d6c <_ZN8SPIClass5beginEv>
   d5260:	e011      	b.n	d5286 <_ZN15Adafruit_BME6805beginEh+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
   d5262:	2101      	movs	r1, #1
   d5264:	b280      	uxth	r0, r0
   d5266:	f001 ff75 	bl	d7154 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
   d526a:	4b22      	ldr	r3, [pc, #136]	; (d52f4 <_ZN15Adafruit_BME6805beginEh+0xe4>)
   d526c:	f993 0000 	ldrsb.w	r0, [r3]
   d5270:	2101      	movs	r1, #1
   d5272:	b280      	uxth	r0, r0
   d5274:	f001 ff6e 	bl	d7154 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
   d5278:	4b1f      	ldr	r3, [pc, #124]	; (d52f8 <_ZN15Adafruit_BME6805beginEh+0xe8>)
   d527a:	f993 0000 	ldrsb.w	r0, [r3]
   d527e:	2100      	movs	r1, #0
   d5280:	b280      	uxth	r0, r0
   d5282:	f001 ff67 	bl	d7154 <pinMode>
    }

    gas_sensor.dev_id = _cs;
   d5286:	7f23      	ldrb	r3, [r4, #28]
   d5288:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
   d528c:	2300      	movs	r3, #0
   d528e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
   d5292:	4b1a      	ldr	r3, [pc, #104]	; (d52fc <_ZN15Adafruit_BME6805beginEh+0xec>)
   d5294:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
   d5296:	4b1a      	ldr	r3, [pc, #104]	; (d5300 <_ZN15Adafruit_BME6805beginEh+0xf0>)
   d5298:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
   d529a:	4b1a      	ldr	r3, [pc, #104]	; (d5304 <_ZN15Adafruit_BME6805beginEh+0xf4>)
   d529c:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
   d529e:	f104 0020 	add.w	r0, r4, #32
   d52a2:	f7ff f810 	bl	d42c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
   d52a6:	b9e0      	cbnz	r0, d52e2 <_ZN15Adafruit_BME6805beginEh+0xd2>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
   d52a8:	2304      	movs	r3, #4
   d52aa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
   d52ae:	2302      	movs	r3, #2
   d52b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
   d52b4:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d52b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d52bc:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d52be:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d52c0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d52c4:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d52c6:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
   d52c8:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d52ca:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
   d52ce:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
   d52d0:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d52d2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d52d6:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
   d52da:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d52dc:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
   d52e0:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
   d52e2:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
   d52e4:	bd38      	pop	{r3, r4, r5, pc}
   d52e6:	bf00      	nop
   d52e8:	000d518d 	.word	0x000d518d
   d52ec:	000d4fcd 	.word	0x000d4fcd
   d52f0:	2003e3c9 	.word	0x2003e3c9
   d52f4:	2003e3ca 	.word	0x2003e3ca
   d52f8:	2003e3c8 	.word	0x2003e3c8
   d52fc:	000d510d 	.word	0x000d510d
   d5300:	000d5091 	.word	0x000d5091
   d5304:	000d4fc9 	.word	0x000d4fc9

000d5308 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5308:	b530      	push	{r4, r5, lr}
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d530a:	2301      	movs	r3, #1
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d530c:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d530e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d5312:	7ca3      	ldrb	r3, [r4, #18]

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  uint8_t set_required_settings = 0;
   d5314:	7c40      	ldrb	r0, [r0, #17]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5316:	b087      	sub	sp, #28
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d5318:	b10b      	cbz	r3, d531e <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
   d531a:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
   d531e:	7ce3      	ldrb	r3, [r4, #19]
   d5320:	b10b      	cbz	r3, d5326 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
   d5322:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
   d5326:	7c23      	ldrb	r3, [r4, #16]
   d5328:	b10b      	cbz	r3, d532e <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
   d532a:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
   d532e:	7d23      	ldrb	r3, [r4, #20]
   d5330:	b10b      	cbz	r3, d5336 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
   d5332:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
   d5336:	f104 0520 	add.w	r5, r4, #32
   d533a:	4629      	mov	r1, r5
   d533c:	f7ff f8e3 	bl	d4506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
   d5340:	b108      	cbz	r0, d5346 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
   d5342:	2000      	movs	r0, #0
   d5344:	e04f      	b.n	d53e6 <_ZN15Adafruit_BME68014performReadingEv+0xde>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
   d5346:	4628      	mov	r0, r5
   d5348:	f7ff f89e 	bl	d4488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
   d534c:	2800      	cmp	r0, #0
   d534e:	d1f8      	bne.n	d5342 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
   d5350:	4629      	mov	r1, r5
   d5352:	f10d 0002 	add.w	r0, sp, #2
   d5356:	f7ff fa53 	bl	d4800 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
   d535a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d535e:	0040      	lsls	r0, r0, #1
   d5360:	f000 ffa6 	bl	d62b0 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
   d5364:	4629      	mov	r1, r5
   d5366:	a801      	add	r0, sp, #4
   d5368:	f7ff fa7e 	bl	d4868 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
   d536c:	2800      	cmp	r0, #0
   d536e:	d1e8      	bne.n	d5342 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
   d5370:	7c63      	ldrb	r3, [r4, #17]
   d5372:	b15b      	cbz	r3, d538c <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
   d5374:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   d5378:	f003 fb80 	bl	d8a7c <__aeabi_i2d>
   d537c:	2200      	movs	r2, #0
   d537e:	4b1b      	ldr	r3, [pc, #108]	; (d53ec <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
   d5380:	f003 fd0c 	bl	d8d9c <__aeabi_ddiv>
   d5384:	f003 fed8 	bl	d9138 <__aeabi_d2f>
   d5388:	6020      	str	r0, [r4, #0]
   d538a:	e001      	b.n	d5390 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
   d538c:	4b18      	ldr	r3, [pc, #96]	; (d53f0 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d538e:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
   d5390:	7ca3      	ldrb	r3, [r4, #18]
   d5392:	b153      	cbz	r3, d53aa <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
   d5394:	9804      	ldr	r0, [sp, #16]
   d5396:	f003 fb61 	bl	d8a5c <__aeabi_ui2d>
   d539a:	2200      	movs	r2, #0
   d539c:	4b15      	ldr	r3, [pc, #84]	; (d53f4 <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d539e:	f003 fcfd 	bl	d8d9c <__aeabi_ddiv>
   d53a2:	f003 fec9 	bl	d9138 <__aeabi_d2f>
   d53a6:	60a0      	str	r0, [r4, #8]
   d53a8:	e001      	b.n	d53ae <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
   d53aa:	4b11      	ldr	r3, [pc, #68]	; (d53f0 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d53ac:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
   d53ae:	7ce3      	ldrb	r3, [r4, #19]
   d53b0:	b133      	cbz	r3, d53c0 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
   d53b2:	eddd 7a03 	vldr	s15, [sp, #12]
   d53b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d53ba:	edc4 7a01 	vstr	s15, [r4, #4]
   d53be:	e001      	b.n	d53c4 <_ZN15Adafruit_BME68014performReadingEv+0xbc>
  } else {
    pressure = NAN;
   d53c0:	4b0b      	ldr	r3, [pc, #44]	; (d53f0 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d53c2:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
   d53c4:	7d20      	ldrb	r0, [r4, #20]
   d53c6:	b168      	cbz	r0, d53e4 <_ZN15Adafruit_BME68014performReadingEv+0xdc>
    if (data.status & BME680_HEAT_STAB_MSK) {
   d53c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d53cc:	06db      	lsls	r3, r3, #27
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d53ce:	bf45      	ittet	mi
   d53d0:	eddd 7a05 	vldrmi	s15, [sp, #20]
   d53d4:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
    } else {
      gas_resistance = 0;
   d53d8:	2300      	movpl	r3, #0

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
    if (data.status & BME680_HEAT_STAB_MSK) {
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d53da:	edc4 7a03 	vstrmi	s15, [r4, #12]
    } else {
      gas_resistance = 0;
   d53de:	bf58      	it	pl
   d53e0:	60e3      	strpl	r3, [r4, #12]
   d53e2:	e000      	b.n	d53e6 <_ZN15Adafruit_BME68014performReadingEv+0xde>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
   d53e4:	2001      	movs	r0, #1
}
   d53e6:	b007      	add	sp, #28
   d53e8:	bd30      	pop	{r4, r5, pc}
   d53ea:	bf00      	nop
   d53ec:	40590000 	.word	0x40590000
   d53f0:	7fc00000 	.word	0x7fc00000
   d53f4:	408f4000 	.word	0x408f4000

000d53f8 <_ZN15Adafruit_BME68015readTemperatureEv>:
/*!
    @brief Performs a reading and returns the ambient temperature.
    @return Temperature in degrees Centigrade
*/
/**************************************************************************/
float Adafruit_BME680::readTemperature(void) {
   d53f8:	b510      	push	{r4, lr}
   d53fa:	4604      	mov	r4, r0
  performReading();
   d53fc:	f7ff ff84 	bl	d5308 <_ZN15Adafruit_BME68014performReadingEv>
  return temperature;
}
   d5400:	ed94 0a00 	vldr	s0, [r4]
   d5404:	bd10      	pop	{r4, pc}

000d5406 <_ZN15Adafruit_BME68012readPressureEv>:
/*!
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
   d5406:	b510      	push	{r4, lr}
   d5408:	4604      	mov	r4, r0
  performReading();
   d540a:	f7ff ff7d 	bl	d5308 <_ZN15Adafruit_BME68014performReadingEv>
  return pressure;
}
   d540e:	ed94 0a01 	vldr	s0, [r4, #4]
   d5412:	bd10      	pop	{r4, pc}
   d5414:	0000      	movs	r0, r0
	...

000d5418 <_ZN15Adafruit_BME68012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @return Altitude in meters
*/
/**************************************************************************/
float Adafruit_BME680::readAltitude(float seaLevel)
{
   d5418:	b510      	push	{r4, lr}
   d541a:	4604      	mov	r4, r0
   d541c:	ed2d 8b02 	vpush	{d8}
   d5420:	eeb0 8a40 	vmov.f32	s16, s0
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
  performReading();
   d5424:	f7ff ff70 	bl	d5308 <_ZN15Adafruit_BME68014performReadingEv>
    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5428:	edd4 6a01 	vldr	s13, [r4, #4]
   d542c:	ed9f 7a14 	vldr	s14, [pc, #80]	; d5480 <_ZN15Adafruit_BME68012readAltitudeEf+0x68>
   d5430:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d5434:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d5438:	ee17 0a10 	vmov	r0, s14
   d543c:	f003 fb30 	bl	d8aa0 <__aeabi_f2d>
   d5440:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d5470 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>
   d5444:	ec41 0b10 	vmov	d0, r0, r1
   d5448:	f002 f88e 	bl	d7568 <pow>
   d544c:	2000      	movs	r0, #0
   d544e:	ec53 2b10 	vmov	r2, r3, d0
   d5452:	490c      	ldr	r1, [pc, #48]	; (d5484 <_ZN15Adafruit_BME68012readAltitudeEf+0x6c>)
   d5454:	f003 f9c4 	bl	d87e0 <__aeabi_dsub>
   d5458:	a307      	add	r3, pc, #28	; (adr r3, d5478 <_ZN15Adafruit_BME68012readAltitudeEf+0x60>)
   d545a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d545e:	f003 fb73 	bl	d8b48 <__aeabi_dmul>
   d5462:	f003 fe69 	bl	d9138 <__aeabi_d2f>
}
   d5466:	ecbd 8b02 	vpop	{d8}
   d546a:	ee00 0a10 	vmov	s0, r0
   d546e:	bd10      	pop	{r4, pc}
   d5470:	1a36e2eb 	.word	0x1a36e2eb
   d5474:	3fc85bc0 	.word	0x3fc85bc0
   d5478:	00000000 	.word	0x00000000
   d547c:	40e5a540 	.word	0x40e5a540
   d5480:	42c80000 	.word	0x42c80000
   d5484:	3ff00000 	.word	0x3ff00000

000d5488 <_ZN15Adafruit_BME68012readHumidityEv>:
/*!
    @brief Performs a reading and returns the relative humidity.
    @return Relative humidity as floating point
*/
/**************************************************************************/
float Adafruit_BME680::readHumidity(void) {
   d5488:	b510      	push	{r4, lr}
   d548a:	4604      	mov	r4, r0
  performReading();
   d548c:	f7ff ff3c 	bl	d5308 <_ZN15Adafruit_BME68014performReadingEv>
  return humidity;
}
   d5490:	ed94 0a02 	vldr	s0, [r4, #8]
   d5494:	bd10      	pop	{r4, pc}

000d5496 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5496:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d549a:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
   d549e:	b101      	cbz	r1, d54a2 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
   d54a0:	b90a      	cbnz	r2, d54a6 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
   d54a2:	2300      	movs	r3, #0
   d54a4:	e000      	b.n	d54a8 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d54a6:	2301      	movs	r3, #1
   d54a8:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
   d54ac:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
   d54ae:	2001      	movs	r0, #1
   d54b0:	4770      	bx	lr

000d54b2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54b2:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
   d54b4:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d54b6:	d807      	bhi.n	d54c8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
   d54b8:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
   d54bc:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d54be:	b909      	cbnz	r1, d54c4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
   d54c0:	7459      	strb	r1, [r3, #17]
   d54c2:	4770      	bx	lr
  else
    _tempEnabled = true;
   d54c4:	7458      	strb	r0, [r3, #17]
   d54c6:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54c8:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
   d54ca:	4770      	bx	lr

000d54cc <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54cc:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
   d54ce:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d54d0:	d807      	bhi.n	d54e2 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
   d54d2:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
   d54d6:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d54d8:	b909      	cbnz	r1, d54de <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
   d54da:	7499      	strb	r1, [r3, #18]
   d54dc:	4770      	bx	lr
  else
    _humEnabled = true;
   d54de:	7498      	strb	r0, [r3, #18]
   d54e0:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54e2:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
   d54e4:	4770      	bx	lr

000d54e6 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54e6:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
   d54e8:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d54ea:	d807      	bhi.n	d54fc <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
   d54ec:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
   d54f0:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d54f2:	b909      	cbnz	r1, d54f8 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
   d54f4:	74d9      	strb	r1, [r3, #19]
   d54f6:	4770      	bx	lr
  else
    _presEnabled = true;
   d54f8:	74d8      	strb	r0, [r3, #19]
   d54fa:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d54fc:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
   d54fe:	4770      	bx	lr

000d5500 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5500:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
   d5502:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5504:	d807      	bhi.n	d5516 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
   d5506:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
   d550a:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
   d550c:	b909      	cbnz	r1, d5512 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
   d550e:	7419      	strb	r1, [r3, #16]
   d5510:	4770      	bx	lr
  else
    _filterEnabled = true;
   d5512:	7418      	strb	r0, [r3, #16]
   d5514:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5516:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
   d5518:	4770      	bx	lr

000d551a <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
   d551a:	f000 b979 	b.w	d5810 <HAL_Pin_Map>
	...

000d5520 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5520:	b510      	push	{r4, lr}
   d5522:	4b05      	ldr	r3, [pc, #20]	; (d5538 <_ZN10JsonBufferD1Ev+0x18>)
   d5524:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5526:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5528:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d552a:	b91b      	cbnz	r3, d5534 <_ZN10JsonBufferD1Ev+0x14>
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	b108      	cbz	r0, d5534 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5530:	f000 fb9a 	bl	d5c68 <free>
	}
}
   d5534:	4620      	mov	r0, r4
   d5536:	bd10      	pop	{r4, pc}
   d5538:	000d9794 	.word	0x000d9794

000d553c <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d553c:	b510      	push	{r4, lr}
   d553e:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5540:	f7ff ffee 	bl	d5520 <_ZN10JsonBufferD1Ev>
   d5544:	4620      	mov	r0, r4
   d5546:	2114      	movs	r1, #20
   d5548:	f001 feb0 	bl	d72ac <_ZdlPvj>
   d554c:	4620      	mov	r0, r4
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5550:	b510      	push	{r4, lr}
   d5552:	4b03      	ldr	r3, [pc, #12]	; (d5560 <_ZN10JsonWriterD1Ev+0x10>)
   d5554:	6003      	str	r3, [r0, #0]
   d5556:	4604      	mov	r4, r0
   d5558:	f7ff ffe2 	bl	d5520 <_ZN10JsonBufferD1Ev>

}
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}
   d5560:	000d97a4 	.word	0x000d97a4

000d5564 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5564:	b510      	push	{r4, lr}
   d5566:	4604      	mov	r4, r0

}
   d5568:	f7ff fff2 	bl	d5550 <_ZN10JsonWriterD1Ev>
   d556c:	4620      	mov	r0, r4
   d556e:	2130      	movs	r1, #48	; 0x30
   d5570:	f001 fe9c 	bl	d72ac <_ZdlPvj>
   d5574:	4620      	mov	r0, r4
   d5576:	bd10      	pop	{r4, pc}

000d5578 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5578:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d557a:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d557c:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d557e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5580:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5582:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5584:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5588:	4770      	bx	lr
	...

000d558c <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d558c:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d558e:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5590:	60c3      	str	r3, [r0, #12]
   d5592:	2301      	movs	r3, #1
   d5594:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5596:	4b05      	ldr	r3, [pc, #20]	; (d55ac <_ZN10JsonWriterC1EPcj+0x20>)
   d5598:	6003      	str	r3, [r0, #0]
   d559a:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d559e:	6041      	str	r1, [r0, #4]
   d55a0:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55a2:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d55a4:	f7ff ffe8 	bl	d5578 <_ZN10JsonWriter4initEv>
}
   d55a8:	bd10      	pop	{r4, pc}
   d55aa:	bf00      	nop
   d55ac:	000d97a4 	.word	0x000d97a4

000d55b0 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d55b0:	68c3      	ldr	r3, [r0, #12]
   d55b2:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d55b4:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d55b6:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d55b8:	bf3f      	itttt	cc
   d55ba:	6842      	ldrcc	r2, [r0, #4]
   d55bc:	1c5c      	addcc	r4, r3, #1
   d55be:	60c4      	strcc	r4, [r0, #12]
   d55c0:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d55c2:	bf24      	itt	cs
   d55c4:	2301      	movcs	r3, #1
   d55c6:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d55ca:	bd10      	pop	{r4, pc}

000d55cc <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d55cc:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d55ce:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d55d0:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d55d2:	b143      	cbz	r3, d55e6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d55d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d55d8:	7e59      	ldrb	r1, [r3, #25]
   d55da:	b109      	cbz	r1, d55e0 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d55dc:	f7ff ffe8 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d55e0:	6963      	ldr	r3, [r4, #20]
   d55e2:	3b01      	subs	r3, #1
   d55e4:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d55e6:	68a3      	ldr	r3, [r4, #8]
   d55e8:	68e0      	ldr	r0, [r4, #12]
   d55ea:	6861      	ldr	r1, [r4, #4]
   d55ec:	4298      	cmp	r0, r3
   d55ee:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d55f2:	bf2a      	itet	cs
   d55f4:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d55f6:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d55f8:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d55fc:	bd10      	pop	{r4, pc}

000d55fe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d55fe:	b570      	push	{r4, r5, r6, lr}
   d5600:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5602:	68c0      	ldr	r0, [r0, #12]
   d5604:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5606:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5608:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d560a:	4613      	mov	r3, r2
   d560c:	4430      	add	r0, r6
   d560e:	460a      	mov	r2, r1
   d5610:	4629      	mov	r1, r5
   d5612:	f000 fb31 	bl	d5c78 <vsnprintf>
	if (count <= spaceAvailable) {
   d5616:	4285      	cmp	r5, r0
		offset += count;
   d5618:	bf2d      	iteet	cs
   d561a:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d561c:	68a3      	ldrcc	r3, [r4, #8]
   d561e:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5620:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5622:	bf36      	itet	cc
   d5624:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5626:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5628:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d562c:	bd70      	pop	{r4, r5, r6, pc}

000d562e <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d562e:	b40e      	push	{r1, r2, r3}
   d5630:	b503      	push	{r0, r1, lr}
   d5632:	aa03      	add	r2, sp, #12
   d5634:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5638:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d563a:	f7ff ffe0 	bl	d55fe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d563e:	b002      	add	sp, #8
   d5640:	f85d eb04 	ldr.w	lr, [sp], #4
   d5644:	b003      	add	sp, #12
   d5646:	4770      	bx	lr

000d5648 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d564c:	4604      	mov	r4, r0
   d564e:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5650:	4617      	mov	r7, r2
   d5652:	b112      	cbz	r2, d565a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5654:	2122      	movs	r1, #34	; 0x22
   d5656:	f7ff ffab 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d565a:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d565c:	5d71      	ldrb	r1, [r6, r5]
   d565e:	eb06 0805 	add.w	r8, r6, r5
   d5662:	2900      	cmp	r1, #0
   d5664:	d071      	beq.n	d574a <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5666:	68e2      	ldr	r2, [r4, #12]
   d5668:	68a3      	ldr	r3, [r4, #8]
   d566a:	429a      	cmp	r2, r3
   d566c:	d26d      	bcs.n	d574a <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d566e:	060b      	lsls	r3, r1, #24
   d5670:	d533      	bpl.n	d56da <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5672:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5676:	2be0      	cmp	r3, #224	; 0xe0
   d5678:	d117      	bne.n	d56aa <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d567a:	f898 3001 	ldrb.w	r3, [r8, #1]
   d567e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5682:	2a80      	cmp	r2, #128	; 0x80
   d5684:	d111      	bne.n	d56aa <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5686:	f105 0802 	add.w	r8, r5, #2
   d568a:	f816 2008 	ldrb.w	r2, [r6, r8]
   d568e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5692:	2880      	cmp	r0, #128	; 0x80
   d5694:	d109      	bne.n	d56aa <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5696:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d569a:	019b      	lsls	r3, r3, #6
   d569c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d56a0:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d56a4:	431a      	orrs	r2, r3
   d56a6:	b292      	uxth	r2, r2
   d56a8:	e011      	b.n	d56ce <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d56aa:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d56ae:	2bc0      	cmp	r3, #192	; 0xc0
   d56b0:	d146      	bne.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d56b2:	f105 0801 	add.w	r8, r5, #1
   d56b6:	f816 3008 	ldrb.w	r3, [r6, r8]
   d56ba:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d56be:	2a80      	cmp	r2, #128	; 0x80
   d56c0:	d13e      	bne.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d56c2:	0189      	lsls	r1, r1, #6
   d56c4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d56c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d56cc:	431a      	orrs	r2, r3
   d56ce:	4923      	ldr	r1, [pc, #140]	; (d575c <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d56d0:	4620      	mov	r0, r4
   d56d2:	f7ff ffac 	bl	d562e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d56d6:	4645      	mov	r5, r8
   d56d8:	e035      	b.n	d5746 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d56da:	290c      	cmp	r1, #12
   d56dc:	d018      	beq.n	d5710 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d56de:	d80b      	bhi.n	d56f8 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d56e0:	2909      	cmp	r1, #9
   d56e2:	d021      	beq.n	d5728 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d56e4:	290a      	cmp	r1, #10
   d56e6:	d019      	beq.n	d571c <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d56e8:	2908      	cmp	r1, #8
   d56ea:	d129      	bne.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d56ec:	215c      	movs	r1, #92	; 0x5c
   d56ee:	4620      	mov	r0, r4
   d56f0:	f7ff ff5e 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d56f4:	2162      	movs	r1, #98	; 0x62
   d56f6:	e023      	b.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d56f8:	2922      	cmp	r1, #34	; 0x22
   d56fa:	d01b      	beq.n	d5734 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d56fc:	295c      	cmp	r1, #92	; 0x5c
   d56fe:	d019      	beq.n	d5734 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5700:	290d      	cmp	r1, #13
   d5702:	d11d      	bne.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5704:	215c      	movs	r1, #92	; 0x5c
   d5706:	4620      	mov	r0, r4
   d5708:	f7ff ff52 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d570c:	2172      	movs	r1, #114	; 0x72
   d570e:	e017      	b.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5710:	215c      	movs	r1, #92	; 0x5c
   d5712:	4620      	mov	r0, r4
   d5714:	f7ff ff4c 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5718:	2166      	movs	r1, #102	; 0x66
   d571a:	e011      	b.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d571c:	215c      	movs	r1, #92	; 0x5c
   d571e:	4620      	mov	r0, r4
   d5720:	f7ff ff46 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5724:	216e      	movs	r1, #110	; 0x6e
   d5726:	e00b      	b.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5728:	215c      	movs	r1, #92	; 0x5c
   d572a:	4620      	mov	r0, r4
   d572c:	f7ff ff40 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5730:	2174      	movs	r1, #116	; 0x74
   d5732:	e005      	b.n	d5740 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5734:	215c      	movs	r1, #92	; 0x5c
   d5736:	4620      	mov	r0, r4
   d5738:	f7ff ff3a 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d573c:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5740:	4620      	mov	r0, r4
   d5742:	f7ff ff35 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5746:	3501      	adds	r5, #1
   d5748:	e788      	b.n	d565c <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d574a:	b12f      	cbz	r7, d5758 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d574c:	4620      	mov	r0, r4
   d574e:	2122      	movs	r1, #34	; 0x22
	}

}
   d5750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5754:	f7ff bf2c 	b.w	d55b0 <_ZN10JsonWriter10insertCharEc>
   d5758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d575c:	000d97b5 	.word	0x000d97b5

000d5760 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5760:	6942      	ldr	r2, [r0, #20]
   d5762:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5766:	7e1a      	ldrb	r2, [r3, #24]
   d5768:	b112      	cbz	r2, d5770 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d576a:	2200      	movs	r2, #0
   d576c:	761a      	strb	r2, [r3, #24]
   d576e:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5770:	212c      	movs	r1, #44	; 0x2c
   d5772:	f7ff bf1d 	b.w	d55b0 <_ZN10JsonWriter10insertCharEc>

000d5776 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5778:	6943      	ldr	r3, [r0, #20]
   d577a:	3301      	adds	r3, #1
   d577c:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d577e:	460e      	mov	r6, r1
   d5780:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5782:	d80e      	bhi.n	d57a2 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5784:	f7ff ffec 	bl	d5760 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5788:	6943      	ldr	r3, [r0, #20]
   d578a:	1c5a      	adds	r2, r3, #1
   d578c:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d5790:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d5792:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5794:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5796:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5798:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d579a:	f7ff ff09 	bl	d55b0 <_ZN10JsonWriter10insertCharEc>
   d579e:	4620      	mov	r0, r4
   d57a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d57a2:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d57a8 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d57a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d57aa:	4604      	mov	r4, r0
   d57ac:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d57b0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d57b2:	2d00      	cmp	r5, #0
   d57b4:	db0a      	blt.n	d57cc <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d57b6:	f003 f973 	bl	d8aa0 <__aeabi_f2d>
   d57ba:	462a      	mov	r2, r5
   d57bc:	e9cd 0100 	strd	r0, r1, [sp]
   d57c0:	4908      	ldr	r1, [pc, #32]	; (d57e4 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d57c2:	4620      	mov	r0, r4
   d57c4:	f7ff ff33 	bl	d562e <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d57c8:	b003      	add	sp, #12
   d57ca:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d57cc:	f003 f968 	bl	d8aa0 <__aeabi_f2d>
   d57d0:	460b      	mov	r3, r1
   d57d2:	4905      	ldr	r1, [pc, #20]	; (d57e8 <_ZN10JsonWriter11insertValueEf+0x40>)
   d57d4:	4602      	mov	r2, r0
   d57d6:	4620      	mov	r0, r4
	}
}
   d57d8:	b003      	add	sp, #12
   d57da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d57de:	f7ff bf26 	b.w	d562e <_ZN10JsonWriter13insertsprintfEPKcz>
   d57e2:	bf00      	nop
   d57e4:	000d97c7 	.word	0x000d97c7
   d57e8:	000d97cc 	.word	0x000d97cc

000d57ec <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d57ec:	f000 b810 	b.w	d5810 <HAL_Pin_Map>

000d57f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <netdb_freeaddrinfo+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	689b      	ldr	r3, [r3, #8]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030268 	.word	0x00030268

000d5800 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <netdb_getaddrinfo+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	68db      	ldr	r3, [r3, #12]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030268 	.word	0x00030268

000d5810 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <HAL_Pin_Map+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	681b      	ldr	r3, [r3, #0]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	0003022c 	.word	0x0003022c

000d5820 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <HAL_Pin_Mode+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	689b      	ldr	r3, [r3, #8]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	0003022c 	.word	0x0003022c

000d5830 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <HAL_Get_Pin_Mode+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	68db      	ldr	r3, [r3, #12]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	0003022c 	.word	0x0003022c

000d5840 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <HAL_GPIO_Write+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	691b      	ldr	r3, [r3, #16]
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	0003022c 	.word	0x0003022c

000d5850 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <HAL_GPIO_Read+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	695b      	ldr	r3, [r3, #20]
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	0003022c 	.word	0x0003022c

000d5860 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <HAL_SPI_Begin+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	681b      	ldr	r3, [r3, #0]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030230 	.word	0x00030230

000d5870 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <HAL_SPI_Set_Bit_Order+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	689b      	ldr	r3, [r3, #8]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030230 	.word	0x00030230

000d5880 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <HAL_SPI_Set_Data_Mode+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	68db      	ldr	r3, [r3, #12]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030230 	.word	0x00030230

000d5890 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	691b      	ldr	r3, [r3, #16]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030230 	.word	0x00030230

000d58a0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_SPI_Send_Receive_Data+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	695b      	ldr	r3, [r3, #20]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030230 	.word	0x00030230

000d58b0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <HAL_SPI_Init+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	69db      	ldr	r3, [r3, #28]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030230 	.word	0x00030230

000d58c0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_SPI_Is_Enabled+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	6a1b      	ldr	r3, [r3, #32]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030230 	.word	0x00030230

000d58d0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_SPI_Info+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030230 	.word	0x00030230

000d58e0 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_SPI_Acquire+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030230 	.word	0x00030230

000d58f0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_SPI_Release+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030230 	.word	0x00030230

000d5900 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_RNG_GetRandomNumber+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	685b      	ldr	r3, [r3, #4]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030218 	.word	0x00030218

000d5910 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	695b      	ldr	r3, [r3, #20]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030218 	.word	0x00030218

000d5920 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <os_thread_is_current+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	689b      	ldr	r3, [r3, #8]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030248 	.word	0x00030248

000d5930 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <os_thread_join+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	691b      	ldr	r3, [r3, #16]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030248 	.word	0x00030248

000d5940 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <os_thread_cleanup+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	695b      	ldr	r3, [r3, #20]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030248 	.word	0x00030248

000d5950 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <os_mutex_recursive_create+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030248 	.word	0x00030248

000d5960 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <os_mutex_recursive_destroy+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030248 	.word	0x00030248

000d5970 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <inet_inet_ntop+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	695b      	ldr	r3, [r3, #20]
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030264 	.word	0x00030264

000d5980 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <HAL_USART_Init+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	681b      	ldr	r3, [r3, #0]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	0003023c 	.word	0x0003023c

000d5990 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <HAL_USART_Write_Data+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	68db      	ldr	r3, [r3, #12]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	0003023c 	.word	0x0003023c

000d59a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <HAL_USART_Available_Data+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	691b      	ldr	r3, [r3, #16]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	0003023c 	.word	0x0003023c

000d59b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <HAL_USART_Read_Data+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	695b      	ldr	r3, [r3, #20]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	0003023c 	.word	0x0003023c

000d59c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <HAL_USART_Peek_Data+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	699b      	ldr	r3, [r3, #24]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	0003023c 	.word	0x0003023c

000d59d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <HAL_USART_Flush_Data+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	69db      	ldr	r3, [r3, #28]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	0003023c 	.word	0x0003023c

000d59e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <HAL_USART_Is_Enabled+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	6a1b      	ldr	r3, [r3, #32]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	0003023c 	.word	0x0003023c

000d59f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <HAL_USART_Available_Data_For_Write+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	0003023c 	.word	0x0003023c

000d5a00 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <HAL_I2C_Begin+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	68db      	ldr	r3, [r3, #12]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030228 	.word	0x00030228

000d5a10 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <HAL_I2C_Begin_Transmission+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	699b      	ldr	r3, [r3, #24]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030228 	.word	0x00030228

000d5a20 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <HAL_I2C_End_Transmission+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	69db      	ldr	r3, [r3, #28]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030228 	.word	0x00030228

000d5a30 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <HAL_I2C_Write_Data+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	6a1b      	ldr	r3, [r3, #32]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030228 	.word	0x00030228

000d5a40 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <HAL_I2C_Available_Data+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030228 	.word	0x00030228

000d5a50 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <HAL_I2C_Read_Data+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030228 	.word	0x00030228

000d5a60 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_I2C_Peek_Data+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030228 	.word	0x00030228

000d5a70 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <HAL_I2C_Flush_Data+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030228 	.word	0x00030228

000d5a80 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_I2C_Is_Enabled+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030228 	.word	0x00030228

000d5a90 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_I2C_Init+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030228 	.word	0x00030228

000d5aa0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_I2C_Request_Data_Ex+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030228 	.word	0x00030228

000d5ab0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <HAL_USB_USART_Init+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	681b      	ldr	r3, [r3, #0]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003024c 	.word	0x0003024c

000d5ac0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_USB_USART_Begin+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003024c 	.word	0x0003024c

000d5ad0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_USB_USART_Available_Data+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	691b      	ldr	r3, [r3, #16]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003024c 	.word	0x0003024c

000d5ae0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	695b      	ldr	r3, [r3, #20]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003024c 	.word	0x0003024c

000d5af0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_USB_USART_Receive_Data+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	699b      	ldr	r3, [r3, #24]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003024c 	.word	0x0003024c

000d5b00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_USB_USART_Send_Data+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	69db      	ldr	r3, [r3, #28]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003024c 	.word	0x0003024c

000d5b10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_USB_USART_Flush_Data+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6a1b      	ldr	r3, [r3, #32]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003024c 	.word	0x0003024c

000d5b20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <set_system_mode+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	685b      	ldr	r3, [r3, #4]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030220 	.word	0x00030220

000d5b30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <system_delay_ms+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	695b      	ldr	r3, [r3, #20]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030220 	.word	0x00030220

000d5b40 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <application_thread_current+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030220 	.word	0x00030220

000d5b50 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <application_thread_invoke+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030220 	.word	0x00030220

000d5b60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b03      	ldr	r3, [pc, #12]	; (d5b70 <system_ctrl_set_app_request_handler+0x10>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b6a:	9301      	str	r3, [sp, #4]
   d5b6c:	bd08      	pop	{r3, pc}
   d5b6e:	0000      	.short	0x0000
   d5b70:	00030220 	.word	0x00030220

000d5b74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b03      	ldr	r3, [pc, #12]	; (d5b84 <system_ctrl_set_result+0x10>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5b7e:	9301      	str	r3, [sp, #4]
   d5b80:	bd08      	pop	{r3, pc}
   d5b82:	0000      	.short	0x0000
   d5b84:	00030220 	.word	0x00030220

000d5b88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <network_connect+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	685b      	ldr	r3, [r3, #4]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030240 	.word	0x00030240

000d5b98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <network_connecting+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	689b      	ldr	r3, [r3, #8]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030240 	.word	0x00030240

000d5ba8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <network_disconnect+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	68db      	ldr	r3, [r3, #12]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030240 	.word	0x00030240

000d5bb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <network_ready+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	691b      	ldr	r3, [r3, #16]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030240 	.word	0x00030240

000d5bc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <network_on+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	695b      	ldr	r3, [r3, #20]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030240 	.word	0x00030240

000d5bd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <network_off+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	699b      	ldr	r3, [r3, #24]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030240 	.word	0x00030240

000d5be8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <network_listen+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	69db      	ldr	r3, [r3, #28]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030240 	.word	0x00030240

000d5bf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <network_listening+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	6a1b      	ldr	r3, [r3, #32]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030240 	.word	0x00030240

000d5c08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <network_set_listen_timeout+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030240 	.word	0x00030240

000d5c18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <network_get_listen_timeout+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030240 	.word	0x00030240

000d5c28 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <spark_cloud_flag_connected+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	695b      	ldr	r3, [r3, #20]
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030244 	.word	0x00030244

000d5c38 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <spark_send_event+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6a1b      	ldr	r3, [r3, #32]
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030244 	.word	0x00030244

000d5c48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030244 	.word	0x00030244

000d5c58 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <malloc+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	681b      	ldr	r3, [r3, #0]
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	0003021c 	.word	0x0003021c

000d5c68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <free+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	685b      	ldr	r3, [r3, #4]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	0003021c 	.word	0x0003021c

000d5c78 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <vsnprintf+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	0003021c 	.word	0x0003021c

000d5c88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <abort+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	0003021c 	.word	0x0003021c

000d5c98 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <_malloc_r+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	0003021c 	.word	0x0003021c

000d5ca8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <__errno+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	0003021c 	.word	0x0003021c

000d5cb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cb8:	2200      	movs	r2, #0
   d5cba:	4611      	mov	r1, r2
   d5cbc:	6840      	ldr	r0, [r0, #4]
   d5cbe:	f7ff bf9b 	b.w	d5bf8 <network_listening>

000d5cc2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cc2:	2200      	movs	r2, #0
   d5cc4:	4611      	mov	r1, r2
   d5cc6:	6840      	ldr	r0, [r0, #4]
   d5cc8:	f7ff bfa6 	b.w	d5c18 <network_get_listen_timeout>

000d5ccc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ccc:	2200      	movs	r2, #0
   d5cce:	6840      	ldr	r0, [r0, #4]
   d5cd0:	f7ff bf9a 	b.w	d5c08 <network_set_listen_timeout>

000d5cd4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cd4:	2200      	movs	r2, #0
   d5cd6:	f081 0101 	eor.w	r1, r1, #1
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7ff bf84 	b.w	d5be8 <network_listen>

000d5ce0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ce0:	2300      	movs	r3, #0
   d5ce2:	461a      	mov	r2, r3
   d5ce4:	4619      	mov	r1, r3
   d5ce6:	6840      	ldr	r0, [r0, #4]
   d5ce8:	f7ff bf76 	b.w	d5bd8 <network_off>

000d5cec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5cec:	2300      	movs	r3, #0
   d5cee:	461a      	mov	r2, r3
   d5cf0:	4619      	mov	r1, r3
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	f7ff bf68 	b.w	d5bc8 <network_on>

000d5cf8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5cf8:	2200      	movs	r2, #0
   d5cfa:	4611      	mov	r1, r2
   d5cfc:	6840      	ldr	r0, [r0, #4]
   d5cfe:	f7ff bf5b 	b.w	d5bb8 <network_ready>

000d5d02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d02:	2200      	movs	r2, #0
   d5d04:	4611      	mov	r1, r2
   d5d06:	6840      	ldr	r0, [r0, #4]
   d5d08:	f7ff bf46 	b.w	d5b98 <network_connecting>

000d5d0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d0c:	2200      	movs	r2, #0
   d5d0e:	2102      	movs	r1, #2
   d5d10:	6840      	ldr	r0, [r0, #4]
   d5d12:	f7ff bf49 	b.w	d5ba8 <network_disconnect>

000d5d16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d16:	2300      	movs	r3, #0
   d5d18:	461a      	mov	r2, r3
   d5d1a:	6840      	ldr	r0, [r0, #4]
   d5d1c:	f7ff bf34 	b.w	d5b88 <network_connect>

000d5d20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d20:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d22:	2203      	movs	r2, #3
   d5d24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d26:	4a02      	ldr	r2, [pc, #8]	; (d5d30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5d28:	601a      	str	r2, [r3, #0]
   d5d2a:	4770      	bx	lr
   d5d2c:	2003e3cc 	.word	0x2003e3cc
   d5d30:	000d97e4 	.word	0x000d97e4

000d5d34 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5d34:	4770      	bx	lr

000d5d36 <_ZN8SPIClassD0Ev>:
   d5d36:	b510      	push	{r4, lr}
   d5d38:	210c      	movs	r1, #12
   d5d3a:	4604      	mov	r4, r0
   d5d3c:	f001 fab6 	bl	d72ac <_ZdlPvj>
   d5d40:	4620      	mov	r0, r4
   d5d42:	bd10      	pop	{r4, pc}

000d5d44 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5d44:	2100      	movs	r1, #0
   d5d46:	f7ff bdcb 	b.w	d58e0 <HAL_SPI_Acquire>

000d5d4a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5d4a:	2100      	movs	r1, #0
   d5d4c:	f7ff bdd0 	b.w	d58f0 <HAL_SPI_Release>

000d5d50 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5d50:	b510      	push	{r4, lr}
   d5d52:	4b05      	ldr	r3, [pc, #20]	; (d5d68 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5d54:	6003      	str	r3, [r0, #0]
   d5d56:	4604      	mov	r4, r0
{
    _spi = spi;
   d5d58:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5d5a:	4608      	mov	r0, r1
   d5d5c:	f7ff fda8 	bl	d58b0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d60:	2300      	movs	r3, #0
   d5d62:	60a3      	str	r3, [r4, #8]
}
   d5d64:	4620      	mov	r0, r4
   d5d66:	bd10      	pop	{r4, pc}
   d5d68:	000d9818 	.word	0x000d9818

000d5d6c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5d6c:	b510      	push	{r4, lr}
   d5d6e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5d70:	7900      	ldrb	r0, [r0, #4]
   d5d72:	f7ff ffe7 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5d76:	b948      	cbnz	r0, d5d8c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5d78:	7920      	ldrb	r0, [r4, #4]
   d5d7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5d7e:	f7ff fd6f 	bl	d5860 <HAL_SPI_Begin>
        unlock();
   d5d82:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5d88:	f7ff bfdf 	b.w	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
   d5d8c:	bd10      	pop	{r4, pc}

000d5d8e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5d8e:	b538      	push	{r3, r4, r5, lr}
   d5d90:	4604      	mov	r4, r0
    if (!lock())
   d5d92:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5d94:	460d      	mov	r5, r1
    if (!lock())
   d5d96:	f7ff ffd5 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5d9a:	b940      	cbnz	r0, d5dae <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5d9c:	7920      	ldrb	r0, [r4, #4]
   d5d9e:	4629      	mov	r1, r5
   d5da0:	f7ff fd66 	bl	d5870 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5da4:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5daa:	f7ff bfce 	b.w	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
   d5dae:	bd38      	pop	{r3, r4, r5, pc}

000d5db0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5db0:	b538      	push	{r3, r4, r5, lr}
   d5db2:	4604      	mov	r4, r0
    if (!lock())
   d5db4:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5db6:	460d      	mov	r5, r1
    if (!lock())
   d5db8:	f7ff ffc4 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5dbc:	b940      	cbnz	r0, d5dd0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5dbe:	7920      	ldrb	r0, [r4, #4]
   d5dc0:	4629      	mov	r1, r5
   d5dc2:	f7ff fd5d 	bl	d5880 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5dc6:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5dcc:	f7ff bfbd 	b.w	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
   d5dd0:	bd38      	pop	{r3, r4, r5, pc}

000d5dd2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5dd2:	7900      	ldrb	r0, [r0, #4]
   d5dd4:	f7ff bfb9 	b.w	d5d4a <_ZN8SPIClass6unlockEv.isra.1>

000d5dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5dd8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5dda:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5ddc:	6018      	str	r0, [r3, #0]
   d5dde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5de0:	6818      	ldr	r0, [r3, #0]
   d5de2:	4288      	cmp	r0, r1
   d5de4:	b2e5      	uxtb	r5, r4
   d5de6:	d906      	bls.n	d5df6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5de8:	3401      	adds	r4, #1
   d5dea:	2c08      	cmp	r4, #8
   d5dec:	d002      	beq.n	d5df4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5dee:	0840      	lsrs	r0, r0, #1
   d5df0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5df2:	e7f5      	b.n	d5de0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5df4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5df8:	5d5b      	ldrb	r3, [r3, r5]
   d5dfa:	7013      	strb	r3, [r2, #0]
   d5dfc:	bd30      	pop	{r4, r5, pc}
   d5dfe:	bf00      	nop
   d5e00:	000d9820 	.word	0x000d9820

000d5e04 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e08:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5e0a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5e0c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5e0e:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5e10:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5e12:	460e      	mov	r6, r1
   d5e14:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5e16:	f7ff ff95 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5e1a:	4605      	mov	r5, r0
   d5e1c:	bb00      	cbnz	r0, d5e60 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5e1e:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5e22:	4601      	mov	r1, r0
   d5e24:	2214      	movs	r2, #20
   d5e26:	a803      	add	r0, sp, #12
   d5e28:	f003 fbb3 	bl	d9592 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5e2c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5e2e:	462a      	mov	r2, r5
   d5e30:	a903      	add	r1, sp, #12
   d5e32:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5e34:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5e38:	f7ff fd4a 	bl	d58d0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5e3c:	ab02      	add	r3, sp, #8
   d5e3e:	f10d 0207 	add.w	r2, sp, #7
   d5e42:	fb07 f106 	mul.w	r1, r7, r6
   d5e46:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5e48:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5e4c:	f7ff ffc4 	bl	d5dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5e50:	7920      	ldrb	r0, [r4, #4]
   d5e52:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5e56:	f7ff fd1b 	bl	d5890 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5e5a:	7920      	ldrb	r0, [r4, #4]
   d5e5c:	f7ff ff75 	bl	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5e60:	9802      	ldr	r0, [sp, #8]
   d5e62:	b008      	add	sp, #32
   d5e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e68 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5e68:	b538      	push	{r3, r4, r5, lr}
   d5e6a:	4604      	mov	r4, r0
    if (!lock())
   d5e6c:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5e6e:	460d      	mov	r5, r1
    if (!lock())
   d5e70:	f7ff ff68 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5e74:	b9c8      	cbnz	r0, d5eaa <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5e76:	68a1      	ldr	r1, [r4, #8]
   d5e78:	b171      	cbz	r1, d5e98 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5e7a:	4b0c      	ldr	r3, [pc, #48]	; (d5eac <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5e7c:	5cc2      	ldrb	r2, [r0, r3]
   d5e7e:	42aa      	cmp	r2, r5
   d5e80:	d002      	beq.n	d5e88 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5e82:	3001      	adds	r0, #1
   d5e84:	2808      	cmp	r0, #8
   d5e86:	d1f9      	bne.n	d5e7c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5e88:	3001      	adds	r0, #1
   d5e8a:	b2c0      	uxtb	r0, r0
   d5e8c:	40c1      	lsrs	r1, r0
   d5e8e:	2201      	movs	r2, #1
   d5e90:	4620      	mov	r0, r4
   d5e92:	f7ff ffb7 	bl	d5e04 <_ZN8SPIClass13setClockSpeedEjj>
   d5e96:	e003      	b.n	d5ea0 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5e98:	4629      	mov	r1, r5
   d5e9a:	7920      	ldrb	r0, [r4, #4]
   d5e9c:	f7ff fcf8 	bl	d5890 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5ea0:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5ea6:	f7ff bf50 	b.w	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
   d5eaa:	bd38      	pop	{r3, r4, r5, pc}
   d5eac:	000d9820 	.word	0x000d9820

000d5eb0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5eb0:	b538      	push	{r3, r4, r5, lr}
   d5eb2:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d5eb4:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5eb6:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d5eb8:	f7ff ff44 	bl	d5d44 <_ZN8SPIClass4lockEv.isra.0>
   d5ebc:	b940      	cbnz	r0, d5ed0 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	7920      	ldrb	r0, [r4, #4]
   d5ec2:	f7ff fced 	bl	d58a0 <HAL_SPI_Send_Receive_Data>
   d5ec6:	4605      	mov	r5, r0
        unlock();
   d5ec8:	7920      	ldrb	r0, [r4, #4]
   d5eca:	f7ff ff3e 	bl	d5d4a <_ZN8SPIClass6unlockEv.isra.1>
   d5ece:	e000      	b.n	d5ed2 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5ed0:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d5ed2:	b2e8      	uxtb	r0, r5
   d5ed4:	bd38      	pop	{r3, r4, r5, pc}

000d5ed6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5ed6:	7900      	ldrb	r0, [r0, #4]
   d5ed8:	f7ff bcf2 	b.w	d58c0 <HAL_SPI_Is_Enabled>

000d5edc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5edc:	b510      	push	{r4, lr}
   d5ede:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5ee0:	6800      	ldr	r0, [r0, #0]
   d5ee2:	b118      	cbz	r0, d5eec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5ee4:	f7ff fec0 	bl	d5c68 <free>
            wakeupSource_ = nullptr;
   d5ee8:	2300      	movs	r3, #0
   d5eea:	6023      	str	r3, [r4, #0]
   d5eec:	bd10      	pop	{r4, pc}

000d5eee <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5eee:	b510      	push	{r4, lr}
   d5ef0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5ef2:	f7ff fff3 	bl	d5edc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	bd10      	pop	{r4, pc}
	...

000d5efc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5efc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5efe:	4c09      	ldr	r4, [pc, #36]	; (d5f24 <_GLOBAL__sub_I_System+0x28>)
   d5f00:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5f02:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5f06:	6020      	str	r0, [r4, #0]
   d5f08:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5f0a:	71a0      	strb	r0, [r4, #6]
   d5f0c:	8120      	strh	r0, [r4, #8]
   d5f0e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f10:	f7ff fe06 	bl	d5b20 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5f14:	4620      	mov	r0, r4
   d5f16:	4a04      	ldr	r2, [pc, #16]	; (d5f28 <_GLOBAL__sub_I_System+0x2c>)
   d5f18:	4904      	ldr	r1, [pc, #16]	; (d5f2c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5f1e:	f001 b9b7 	b.w	d7290 <__aeabi_atexit>
   d5f22:	bf00      	nop
   d5f24:	2003e3d4 	.word	0x2003e3d4
   d5f28:	2003e330 	.word	0x2003e330
   d5f2c:	000d5eef 	.word	0x000d5eef

000d5f30 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f34:	6800      	ldr	r0, [r0, #0]
   d5f36:	b108      	cbz	r0, d5f3c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f38:	f7ff fd12 	bl	d5960 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	bd10      	pop	{r4, pc}

000d5f40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f40:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f42:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f44:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5f46:	689b      	ldr	r3, [r3, #8]
   d5f48:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f4a:	68a3      	ldr	r3, [r4, #8]
   d5f4c:	3b01      	subs	r3, #1
   d5f4e:	60a3      	str	r3, [r4, #8]
   d5f50:	b92b      	cbnz	r3, d5f5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5f52:	6823      	ldr	r3, [r4, #0]
   d5f54:	4620      	mov	r0, r4
   d5f56:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5f5c:	4718      	bx	r3
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5f60:	680b      	ldr	r3, [r1, #0]
   d5f62:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5f64:	b113      	cbz	r3, d5f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5f66:	685a      	ldr	r2, [r3, #4]
   d5f68:	3201      	adds	r2, #1
   d5f6a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5f6c:	4770      	bx	lr

000d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5f6e:	b510      	push	{r4, lr}
   d5f70:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5f72:	6800      	ldr	r0, [r0, #0]
   d5f74:	b128      	cbz	r0, d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5f76:	6843      	ldr	r3, [r0, #4]
   d5f78:	3b01      	subs	r3, #1
   d5f7a:	6043      	str	r3, [r0, #4]
   d5f7c:	b90b      	cbnz	r3, d5f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5f7e:	f7ff ffdf 	bl	d5f40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5f82:	4620      	mov	r0, r4
   d5f84:	bd10      	pop	{r4, pc}
	...

000d5f88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f88:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f8a:	4c06      	ldr	r4, [pc, #24]	; (d5fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f8c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5f8e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f90:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5f92:	f7ff fcdd 	bl	d5950 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5f96:	4620      	mov	r0, r4
   d5f98:	4a03      	ldr	r2, [pc, #12]	; (d5fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f9a:	4904      	ldr	r1, [pc, #16]	; (d5fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5fa0:	f001 b976 	b.w	d7290 <__aeabi_atexit>
   d5fa4:	2003e3e0 	.word	0x2003e3e0
   d5fa8:	2003e330 	.word	0x2003e330
   d5fac:	000d5f31 	.word	0x000d5f31

000d5fb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fb2:	4606      	mov	r6, r0
   d5fb4:	460d      	mov	r5, r1
   d5fb6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5fb8:	2400      	movs	r4, #0
  while (size--) {
   d5fba:	42bd      	cmp	r5, r7
   d5fbc:	d00c      	beq.n	d5fd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5fbe:	6833      	ldr	r3, [r6, #0]
   d5fc0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fc4:	689b      	ldr	r3, [r3, #8]
   d5fc6:	4630      	mov	r0, r6
   d5fc8:	4798      	blx	r3
     if (chunk>=0)
   d5fca:	2800      	cmp	r0, #0
   d5fcc:	db01      	blt.n	d5fd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5fce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5fd0:	e7f3      	b.n	d5fba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5fd2:	2c00      	cmp	r4, #0
   d5fd4:	bf08      	it	eq
   d5fd6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5fd8:	4620      	mov	r0, r4
   d5fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fdc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fdc:	b570      	push	{r4, r5, r6, lr}
   d5fde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fe0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fe2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fe4:	b149      	cbz	r1, d5ffa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fe6:	f003 fb20 	bl	d962a <strlen>
   d5fea:	682b      	ldr	r3, [r5, #0]
   d5fec:	4602      	mov	r2, r0
   d5fee:	4621      	mov	r1, r4
   d5ff0:	4628      	mov	r0, r5
   d5ff2:	68db      	ldr	r3, [r3, #12]
    }
   d5ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ff8:	4718      	bx	r3
    }
   d5ffa:	bd70      	pop	{r4, r5, r6, pc}

000d5ffc <_ZN5Print5printEPKc>:
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	f7ff ffed 	bl	d5fdc <_ZN5Print5writeEPKc>
   d6002:	bd08      	pop	{r3, pc}

000d6004 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6004:	6803      	ldr	r3, [r0, #0]
   d6006:	689b      	ldr	r3, [r3, #8]
   d6008:	4718      	bx	r3

000d600a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d600a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d600c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d600e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6010:	f7ff fff8 	bl	d6004 <_ZN5Print5printEc>
  n += print('\n');
   d6014:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6016:	4604      	mov	r4, r0
  n += print('\n');
   d6018:	4628      	mov	r0, r5
   d601a:	f7ff fff3 	bl	d6004 <_ZN5Print5printEc>
  return n;
}
   d601e:	4420      	add	r0, r4
   d6020:	bd38      	pop	{r3, r4, r5, pc}

000d6022 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6022:	b538      	push	{r3, r4, r5, lr}
   d6024:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6026:	f7ff ffd9 	bl	d5fdc <_ZN5Print5writeEPKc>
   d602a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d602c:	4628      	mov	r0, r5
   d602e:	f7ff ffec 	bl	d600a <_ZN5Print7printlnEv>
  return n;
}
   d6032:	4420      	add	r0, r4
   d6034:	bd38      	pop	{r3, r4, r5, pc}

000d6036 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6036:	b530      	push	{r4, r5, lr}
   d6038:	b08b      	sub	sp, #44	; 0x2c
   d603a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d603c:	2100      	movs	r1, #0
   d603e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6042:	2a01      	cmp	r2, #1
   d6044:	bf98      	it	ls
   d6046:	220a      	movls	r2, #10
   d6048:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d604c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6050:	fb05 3312 	mls	r3, r5, r2, r3
   d6054:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6058:	2b09      	cmp	r3, #9
   d605a:	bf94      	ite	ls
   d605c:	3330      	addls	r3, #48	; 0x30
   d605e:	3337      	addhi	r3, #55	; 0x37
   d6060:	b2db      	uxtb	r3, r3
   d6062:	4621      	mov	r1, r4
   d6064:	f804 3901 	strb.w	r3, [r4], #-1
   d6068:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d606a:	2d00      	cmp	r5, #0
   d606c:	d1ee      	bne.n	d604c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d606e:	f7ff ffb5 	bl	d5fdc <_ZN5Print5writeEPKc>
}
   d6072:	b00b      	add	sp, #44	; 0x2c
   d6074:	bd30      	pop	{r4, r5, pc}
	...

000d6078 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d607c:	ec57 6b10 	vmov	r6, r7, d0
   d6080:	4682      	mov	sl, r0
   d6082:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6084:	ee10 2a10 	vmov	r2, s0
   d6088:	463b      	mov	r3, r7
   d608a:	ee10 0a10 	vmov	r0, s0
   d608e:	4639      	mov	r1, r7
   d6090:	f002 fff4 	bl	d907c <__aeabi_dcmpun>
   d6094:	b108      	cbz	r0, d609a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6096:	494e      	ldr	r1, [pc, #312]	; (d61d0 <_ZN5Print10printFloatEdh+0x158>)
   d6098:	e012      	b.n	d60c0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d609a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d609e:	f04f 32ff 	mov.w	r2, #4294967295
   d60a2:	4b4c      	ldr	r3, [pc, #304]	; (d61d4 <_ZN5Print10printFloatEdh+0x15c>)
   d60a4:	4630      	mov	r0, r6
   d60a6:	4649      	mov	r1, r9
   d60a8:	f002 ffe8 	bl	d907c <__aeabi_dcmpun>
   d60ac:	b968      	cbnz	r0, d60ca <_ZN5Print10printFloatEdh+0x52>
   d60ae:	f04f 32ff 	mov.w	r2, #4294967295
   d60b2:	4b48      	ldr	r3, [pc, #288]	; (d61d4 <_ZN5Print10printFloatEdh+0x15c>)
   d60b4:	4630      	mov	r0, r6
   d60b6:	4649      	mov	r1, r9
   d60b8:	f002 ffc2 	bl	d9040 <__aeabi_dcmple>
   d60bc:	b928      	cbnz	r0, d60ca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60be:	4946      	ldr	r1, [pc, #280]	; (d61d8 <_ZN5Print10printFloatEdh+0x160>)
   d60c0:	4650      	mov	r0, sl
   d60c2:	f7ff ff8b 	bl	d5fdc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d60c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d60ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60ce:	4b43      	ldr	r3, [pc, #268]	; (d61dc <_ZN5Print10printFloatEdh+0x164>)
   d60d0:	4630      	mov	r0, r6
   d60d2:	4639      	mov	r1, r7
   d60d4:	f002 ffc8 	bl	d9068 <__aeabi_dcmpgt>
   d60d8:	b108      	cbz	r0, d60de <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60da:	4941      	ldr	r1, [pc, #260]	; (d61e0 <_ZN5Print10printFloatEdh+0x168>)
   d60dc:	e7f0      	b.n	d60c0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d60de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60e2:	4b40      	ldr	r3, [pc, #256]	; (d61e4 <_ZN5Print10printFloatEdh+0x16c>)
   d60e4:	4630      	mov	r0, r6
   d60e6:	4639      	mov	r1, r7
   d60e8:	f002 ffa0 	bl	d902c <__aeabi_dcmplt>
   d60ec:	2800      	cmp	r0, #0
   d60ee:	d1f4      	bne.n	d60da <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d60f0:	2200      	movs	r2, #0
   d60f2:	2300      	movs	r3, #0
   d60f4:	4630      	mov	r0, r6
   d60f6:	4639      	mov	r1, r7
   d60f8:	f002 ff98 	bl	d902c <__aeabi_dcmplt>
   d60fc:	b140      	cbz	r0, d6110 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d60fe:	212d      	movs	r1, #45	; 0x2d
   d6100:	4650      	mov	r0, sl
   d6102:	f7ff ff7f 	bl	d6004 <_ZN5Print5printEc>
     number = -number;
   d6106:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d610a:	4604      	mov	r4, r0
     number = -number;
   d610c:	461f      	mov	r7, r3
   d610e:	e000      	b.n	d6112 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6110:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6112:	4935      	ldr	r1, [pc, #212]	; (d61e8 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6114:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6118:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d611a:	fa5f f388 	uxtb.w	r3, r8
   d611e:	429d      	cmp	r5, r3
   d6120:	d906      	bls.n	d6130 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6122:	2200      	movs	r2, #0
   d6124:	4b31      	ldr	r3, [pc, #196]	; (d61ec <_ZN5Print10printFloatEdh+0x174>)
   d6126:	f002 fe39 	bl	d8d9c <__aeabi_ddiv>
   d612a:	f108 0801 	add.w	r8, r8, #1
   d612e:	e7f4      	b.n	d611a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6130:	4632      	mov	r2, r6
   d6132:	463b      	mov	r3, r7
   d6134:	f002 fb56 	bl	d87e4 <__adddf3>
   d6138:	460f      	mov	r7, r1
   d613a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d613c:	f002 ffdc 	bl	d90f8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6140:	220a      	movs	r2, #10
   d6142:	4601      	mov	r1, r0
   d6144:	4680      	mov	r8, r0
   d6146:	4650      	mov	r0, sl
   d6148:	f7ff ff75 	bl	d6036 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d614c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d614e:	b3e5      	cbz	r5, d61ca <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6150:	4640      	mov	r0, r8
   d6152:	f002 fc83 	bl	d8a5c <__aeabi_ui2d>
   d6156:	4602      	mov	r2, r0
   d6158:	460b      	mov	r3, r1
   d615a:	4630      	mov	r0, r6
   d615c:	4639      	mov	r1, r7
   d615e:	f002 fb3f 	bl	d87e0 <__aeabi_dsub>
   d6162:	4606      	mov	r6, r0
   d6164:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6166:	4650      	mov	r0, sl
   d6168:	4921      	ldr	r1, [pc, #132]	; (d61f0 <_ZN5Print10printFloatEdh+0x178>)
   d616a:	f7ff ff37 	bl	d5fdc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d616e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6170:	2200      	movs	r2, #0
   d6172:	4b1e      	ldr	r3, [pc, #120]	; (d61ec <_ZN5Print10printFloatEdh+0x174>)
   d6174:	4630      	mov	r0, r6
   d6176:	4639      	mov	r1, r7
   d6178:	f002 fce6 	bl	d8b48 <__aeabi_dmul>
   d617c:	4606      	mov	r6, r0
   d617e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6180:	f002 ff92 	bl	d90a8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6184:	f1b0 0900 	subs.w	r9, r0, #0
   d6188:	da07      	bge.n	d619a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d618a:	212d      	movs	r1, #45	; 0x2d
   d618c:	4650      	mov	r0, sl
   d618e:	f7ff ff39 	bl	d6004 <_ZN5Print5printEc>
            val = -n;
   d6192:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6196:	4680      	mov	r8, r0
   d6198:	e002      	b.n	d61a0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d619a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d619c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d61a0:	220a      	movs	r2, #10
   d61a2:	4650      	mov	r0, sl
   d61a4:	f7ff ff47 	bl	d6036 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d61a8:	4440      	add	r0, r8
   d61aa:	4404      	add	r4, r0
    remainder -= toPrint;
   d61ac:	4648      	mov	r0, r9
   d61ae:	f002 fc65 	bl	d8a7c <__aeabi_i2d>
   d61b2:	4602      	mov	r2, r0
   d61b4:	460b      	mov	r3, r1
   d61b6:	4630      	mov	r0, r6
   d61b8:	4639      	mov	r1, r7
   d61ba:	f002 fb11 	bl	d87e0 <__aeabi_dsub>
   d61be:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d61c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d61c4:	4606      	mov	r6, r0
   d61c6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d61c8:	d1d2      	bne.n	d6170 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d61ca:	4620      	mov	r0, r4
   d61cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d61d0:	000d9828 	.word	0x000d9828
   d61d4:	7fefffff 	.word	0x7fefffff
   d61d8:	000d9832 	.word	0x000d9832
   d61dc:	41efffff 	.word	0x41efffff
   d61e0:	000d982c 	.word	0x000d982c
   d61e4:	c1efffff 	.word	0xc1efffff
   d61e8:	3fe00000 	.word	0x3fe00000
   d61ec:	40240000 	.word	0x40240000
   d61f0:	000d9830 	.word	0x000d9830

000d61f4 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d61f4:	b538      	push	{r3, r4, r5, lr}
   d61f6:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d61f8:	ee10 0a10 	vmov	r0, s0
   d61fc:	b2cd      	uxtb	r5, r1
   d61fe:	f002 fc4f 	bl	d8aa0 <__aeabi_f2d>
   d6202:	ec41 0b10 	vmov	d0, r0, r1
   d6206:	4629      	mov	r1, r5
   d6208:	4620      	mov	r0, r4
}
   d620a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d620e:	f7ff bf33 	b.w	d6078 <_ZN5Print10printFloatEdh>

000d6212 <_ZN5Print5printEdi>:
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6212:	b2c9      	uxtb	r1, r1
   d6214:	f7ff bf30 	b.w	d6078 <_ZN5Print10printFloatEdh>

000d6218 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6218:	b40c      	push	{r2, r3}
   d621a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d621e:	b087      	sub	sp, #28
   d6220:	af00      	add	r7, sp, #0
   d6222:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6226:	4605      	mov	r5, r0
   d6228:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d622c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d622e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6230:	4623      	mov	r3, r4
   d6232:	464a      	mov	r2, r9
   d6234:	2114      	movs	r1, #20
   d6236:	1d38      	adds	r0, r7, #4
   d6238:	f7ff fd1e 	bl	d5c78 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d623c:	2813      	cmp	r0, #19
   d623e:	d805      	bhi.n	d624c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6240:	1d39      	adds	r1, r7, #4
   d6242:	4628      	mov	r0, r5
   d6244:	f7ff feca 	bl	d5fdc <_ZN5Print5writeEPKc>
   d6248:	4604      	mov	r4, r0
   d624a:	e013      	b.n	d6274 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d624c:	f100 0308 	add.w	r3, r0, #8
   d6250:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6254:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6256:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d625a:	1c41      	adds	r1, r0, #1
   d625c:	4623      	mov	r3, r4
   d625e:	464a      	mov	r2, r9
   d6260:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6262:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6264:	f7ff fd08 	bl	d5c78 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6268:	4669      	mov	r1, sp
   d626a:	4628      	mov	r0, r5
   d626c:	f7ff feb6 	bl	d5fdc <_ZN5Print5writeEPKc>
   d6270:	4604      	mov	r4, r0
   d6272:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6274:	b11e      	cbz	r6, d627e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6276:	4628      	mov	r0, r5
   d6278:	f7ff fec7 	bl	d600a <_ZN5Print7printlnEv>
   d627c:	4404      	add	r4, r0
    return n;
}
   d627e:	4620      	mov	r0, r4
   d6280:	371c      	adds	r7, #28
   d6282:	46bd      	mov	sp, r7
   d6284:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6288:	b002      	add	sp, #8
   d628a:	4770      	bx	lr

000d628c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d628c:	4b01      	ldr	r3, [pc, #4]	; (d6294 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d628e:	4a02      	ldr	r2, [pc, #8]	; (d6298 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6290:	601a      	str	r2, [r3, #0]
   d6292:	4770      	bx	lr
   d6294:	2003e3e4 	.word	0x2003e3e4
   d6298:	000d98a6 	.word	0x000d98a6

000d629c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d629c:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d629e:	681a      	ldr	r2, [r3, #0]
   d62a0:	4b02      	ldr	r3, [pc, #8]	; (d62ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d62a2:	601a      	str	r2, [r3, #0]
   d62a4:	4770      	bx	lr
   d62a6:	bf00      	nop
   d62a8:	2003e2c4 	.word	0x2003e2c4
   d62ac:	2003e3e8 	.word	0x2003e3e8

000d62b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d62b0:	2100      	movs	r1, #0
   d62b2:	f7ff bc3d 	b.w	d5b30 <system_delay_ms>

000d62b6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d62b6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d62b8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d62ba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d62bc:	b113      	cbz	r3, d62c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62be:	2203      	movs	r2, #3
   d62c0:	4601      	mov	r1, r0
   d62c2:	4798      	blx	r3
    }
   d62c4:	4620      	mov	r0, r4
   d62c6:	bd10      	pop	{r4, pc}

000d62c8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d62c8:	b510      	push	{r4, lr}
   d62ca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d62cc:	f7ff fff3 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
   d62d0:	4620      	mov	r0, r4
   d62d2:	bd10      	pop	{r4, pc}

000d62d4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d62d4:	b513      	push	{r0, r1, r4, lr}
   d62d6:	460b      	mov	r3, r1
   d62d8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62da:	c803      	ldmia	r0, {r0, r1}
   d62dc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d62e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d62e4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d62e8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d62ec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d62f0:	b002      	add	sp, #8
   d62f2:	bd10      	pop	{r4, pc}

000d62f4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d62f4:	4803      	ldr	r0, [pc, #12]	; (d6304 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d62f6:	4a04      	ldr	r2, [pc, #16]	; (d6308 <_GLOBAL__sub_I_RGB+0x14>)
   d62f8:	4904      	ldr	r1, [pc, #16]	; (d630c <_GLOBAL__sub_I_RGB+0x18>)
   d62fa:	2300      	movs	r3, #0
   d62fc:	6083      	str	r3, [r0, #8]
   d62fe:	f000 bfc7 	b.w	d7290 <__aeabi_atexit>
   d6302:	bf00      	nop
   d6304:	2003e3ec 	.word	0x2003e3ec
   d6308:	2003e330 	.word	0x2003e330
   d630c:	000d62c9 	.word	0x000d62c9

000d6310 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6310:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6312:	4b0c      	ldr	r3, [pc, #48]	; (d6344 <serialEventRun+0x34>)
   d6314:	b133      	cbz	r3, d6324 <serialEventRun+0x14>
   d6316:	f000 fc1b 	bl	d6b50 <_Z16_fetch_usbserialv>
   d631a:	6803      	ldr	r3, [r0, #0]
   d631c:	691b      	ldr	r3, [r3, #16]
   d631e:	4798      	blx	r3
   d6320:	2800      	cmp	r0, #0
   d6322:	dc09      	bgt.n	d6338 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6324:	4b08      	ldr	r3, [pc, #32]	; (d6348 <serialEventRun+0x38>)
   d6326:	b163      	cbz	r3, d6342 <serialEventRun+0x32>
   d6328:	f000 fc94 	bl	d6c54 <_Z22__fetch_global_Serial1v>
   d632c:	6803      	ldr	r3, [r0, #0]
   d632e:	691b      	ldr	r3, [r3, #16]
   d6330:	4798      	blx	r3
   d6332:	2800      	cmp	r0, #0
   d6334:	dc03      	bgt.n	d633e <serialEventRun+0x2e>
   d6336:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6338:	f3af 8000 	nop.w
   d633c:	e7f2      	b.n	d6324 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d633e:	f3af 8000 	nop.w
   d6342:	bd08      	pop	{r3, pc}
	...

000d634c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d634c:	b508      	push	{r3, lr}
	serialEventRun();
   d634e:	f7ff ffdf 	bl	d6310 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6352:	f7ff fadd 	bl	d5910 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6356:	4b01      	ldr	r3, [pc, #4]	; (d635c <_post_loop+0x10>)
   d6358:	6018      	str	r0, [r3, #0]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	2003e730 	.word	0x2003e730

000d6360 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6360:	4802      	ldr	r0, [pc, #8]	; (d636c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6362:	4a03      	ldr	r2, [pc, #12]	; (d6370 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6364:	4903      	ldr	r1, [pc, #12]	; (d6374 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6366:	1a12      	subs	r2, r2, r0
   d6368:	f003 b908 	b.w	d957c <memcpy>
   d636c:	2003f400 	.word	0x2003f400
   d6370:	2003f404 	.word	0x2003f404
   d6374:	000d9b58 	.word	0x000d9b58

000d6378 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6378:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d637a:	2300      	movs	r3, #0
   d637c:	9300      	str	r3, [sp, #0]
   d637e:	461a      	mov	r2, r3
   d6380:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6384:	f7ff fbf6 	bl	d5b74 <system_ctrl_set_result>
}
   d6388:	b003      	add	sp, #12
   d638a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6390 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6390:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6392:	8843      	ldrh	r3, [r0, #2]
   d6394:	2b0a      	cmp	r3, #10
   d6396:	d008      	beq.n	d63aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6398:	2b50      	cmp	r3, #80	; 0x50
   d639a:	d109      	bne.n	d63b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d639c:	4b09      	ldr	r3, [pc, #36]	; (d63c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d639e:	681b      	ldr	r3, [r3, #0]
   d63a0:	b13b      	cbz	r3, d63b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d63a2:	b003      	add	sp, #12
   d63a4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d63a8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d63aa:	f7ff ffe5 	bl	d6378 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d63ae:	e006      	b.n	d63be <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63b0:	2300      	movs	r3, #0
   d63b2:	9300      	str	r3, [sp, #0]
   d63b4:	461a      	mov	r2, r3
   d63b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d63ba:	f7ff fbdb 	bl	d5b74 <system_ctrl_set_result>
        break;
    }
}
   d63be:	b003      	add	sp, #12
   d63c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d63c4:	2003e3fc 	.word	0x2003e3fc

000d63c8 <module_user_init_hook>:

void module_user_init_hook()
{
   d63c8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d63ca:	4c10      	ldr	r4, [pc, #64]	; (d640c <module_user_init_hook+0x44>)
   d63cc:	4d10      	ldr	r5, [pc, #64]	; (d6410 <module_user_init_hook+0x48>)
   d63ce:	6823      	ldr	r3, [r4, #0]
   d63d0:	42ab      	cmp	r3, r5
   d63d2:	4b10      	ldr	r3, [pc, #64]	; (d6414 <module_user_init_hook+0x4c>)
   d63d4:	bf0c      	ite	eq
   d63d6:	2201      	moveq	r2, #1
   d63d8:	2200      	movne	r2, #0
   d63da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d63dc:	d002      	beq.n	d63e4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d63de:	f7ff ffbf 	bl	d6360 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d63e2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d63e4:	f7ff fa8c 	bl	d5900 <HAL_RNG_GetRandomNumber>
   d63e8:	4604      	mov	r4, r0
    srand(seed);
   d63ea:	f003 f8db 	bl	d95a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d63ee:	4b0a      	ldr	r3, [pc, #40]	; (d6418 <module_user_init_hook+0x50>)
   d63f0:	b113      	cbz	r3, d63f8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d63f2:	4620      	mov	r0, r4
   d63f4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d63f8:	2100      	movs	r1, #0
   d63fa:	4807      	ldr	r0, [pc, #28]	; (d6418 <module_user_init_hook+0x50>)
   d63fc:	f7ff fc24 	bl	d5c48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6400:	2100      	movs	r1, #0
   d6402:	4806      	ldr	r0, [pc, #24]	; (d641c <module_user_init_hook+0x54>)
}
   d6404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6408:	f7ff bbaa 	b.w	d5b60 <system_ctrl_set_app_request_handler>
   d640c:	2003f400 	.word	0x2003f400
   d6410:	9a271c1e 	.word	0x9a271c1e
   d6414:	2003e400 	.word	0x2003e400
   d6418:	00000000 	.word	0x00000000
   d641c:	000d6391 	.word	0x000d6391

000d6420 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6420:	4770      	bx	lr

000d6422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6422:	2000      	movs	r0, #0
   d6424:	4770      	bx	lr

000d6426 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6426:	b510      	push	{r4, lr}
   d6428:	2110      	movs	r1, #16
   d642a:	4604      	mov	r4, r0
   d642c:	f000 ff3e 	bl	d72ac <_ZdlPvj>
   d6430:	4620      	mov	r0, r4
   d6432:	bd10      	pop	{r4, pc}

000d6434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6434:	b508      	push	{r3, lr}
      { delete this; }
   d6436:	b108      	cbz	r0, d643c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6438:	f7ff fff5 	bl	d6426 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d643c:	bd08      	pop	{r3, pc}

000d643e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d643e:	2200      	movs	r2, #0
   d6440:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6442:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6444:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6448:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d644a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d644e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6450:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6452:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6454:	680c      	ldr	r4, [r1, #0]
   d6456:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6458:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d645a:	bd10      	pop	{r4, pc}

000d645c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d645c:	b510      	push	{r4, lr}
   d645e:	4604      	mov	r4, r0
    free((void*)msg_);
   d6460:	6800      	ldr	r0, [r0, #0]
   d6462:	f7ff fc01 	bl	d5c68 <free>
}
   d6466:	4620      	mov	r0, r4
   d6468:	bd10      	pop	{r4, pc}

000d646a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d646a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d646c:	68c4      	ldr	r4, [r0, #12]
   d646e:	b1f4      	cbz	r4, d64ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6470:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6472:	2b02      	cmp	r3, #2
   d6474:	d103      	bne.n	d647e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6476:	f104 000c 	add.w	r0, r4, #12
   d647a:	f7ff ffef 	bl	d645c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d647e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6480:	b135      	cbz	r5, d6490 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6482:	4628      	mov	r0, r5
   d6484:	f7ff ff17 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
   d6488:	2110      	movs	r1, #16
   d648a:	4628      	mov	r0, r5
   d648c:	f000 ff0e 	bl	d72ac <_ZdlPvj>
   d6490:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6492:	b135      	cbz	r5, d64a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6494:	4628      	mov	r0, r5
   d6496:	f7ff ff0e 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
   d649a:	2110      	movs	r1, #16
   d649c:	4628      	mov	r0, r5
   d649e:	f000 ff05 	bl	d72ac <_ZdlPvj>
   d64a2:	4620      	mov	r0, r4
   d64a4:	2114      	movs	r1, #20
   d64a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d64aa:	f000 beff 	b.w	d72ac <_ZdlPvj>
   d64ae:	bd38      	pop	{r3, r4, r5, pc}

000d64b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d64b0:	b513      	push	{r0, r1, r4, lr}
   d64b2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64b4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d64b8:	2300      	movs	r3, #0
   d64ba:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64bc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64be:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64c0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64c2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64c4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64c6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64c8:	f7ff fd51 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64cc:	4620      	mov	r0, r4
   d64ce:	b002      	add	sp, #8
   d64d0:	bd10      	pop	{r4, pc}

000d64d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d64d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64d4:	460c      	mov	r4, r1
   d64d6:	ad02      	add	r5, sp, #8
   d64d8:	f854 3b04 	ldr.w	r3, [r4], #4
   d64dc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d64e0:	4606      	mov	r6, r0
   d64e2:	460f      	mov	r7, r1
   d64e4:	a801      	add	r0, sp, #4
   d64e6:	4621      	mov	r1, r4
   d64e8:	f7ff fd3a 	bl	d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d64ec:	4629      	mov	r1, r5
   d64ee:	4630      	mov	r0, r6
   d64f0:	f7ff ffde 	bl	d64b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64f4:	a801      	add	r0, sp, #4
   d64f6:	f7ff fd3a 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff fd37 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6500:	4638      	mov	r0, r7
   d6502:	2108      	movs	r1, #8
   d6504:	f000 fed2 	bl	d72ac <_ZdlPvj>
        return p;
    }
   d6508:	4630      	mov	r0, r6
   d650a:	b003      	add	sp, #12
   d650c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6510:	b538      	push	{r3, r4, r5, lr}
   d6512:	2300      	movs	r3, #0
   d6514:	4604      	mov	r4, r0
   d6516:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6518:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d651a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d651c:	f7fd fdbd 	bl	d409a <_Znwj>
   d6520:	b128      	cbz	r0, d652e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6522:	2301      	movs	r3, #1
   d6524:	6043      	str	r3, [r0, #4]
   d6526:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6528:	4b02      	ldr	r3, [pc, #8]	; (d6534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d652a:	6003      	str	r3, [r0, #0]
   d652c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d652e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6530:	4620      	mov	r0, r4
   d6532:	bd38      	pop	{r3, r4, r5, pc}
   d6534:	000d9940 	.word	0x000d9940

000d6538 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6538:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d653a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d653c:	b90a      	cbnz	r2, d6542 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d653e:	f000 fec8 	bl	d72d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6542:	68c3      	ldr	r3, [r0, #12]
    }
   d6544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6548:	4718      	bx	r3

000d654a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d654a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d654c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d654e:	f100 0110 	add.w	r1, r0, #16
   d6552:	f7ff fff1 	bl	d6538 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6556:	bd08      	pop	{r3, pc}

000d6558 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6558:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d655a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d655c:	b90a      	cbnz	r2, d6562 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d655e:	f000 feb8 	bl	d72d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6562:	68c3      	ldr	r3, [r0, #12]
    }
   d6564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6568:	4718      	bx	r3

000d656a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d656a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d656c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d656e:	f100 0110 	add.w	r1, r0, #16
   d6572:	f7ff fff1 	bl	d6558 <_ZNKSt8functionIFvRKbEEclES1_>
   d6576:	bd08      	pop	{r3, pc}

000d6578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6578:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d657a:	2300      	movs	r3, #0
   d657c:	6083      	str	r3, [r0, #8]
   d657e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6580:	4604      	mov	r4, r0
   d6582:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6584:	b12b      	cbz	r3, d6592 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6586:	2202      	movs	r2, #2
   d6588:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d658a:	68eb      	ldr	r3, [r5, #12]
   d658c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d658e:	68ab      	ldr	r3, [r5, #8]
   d6590:	60a3      	str	r3, [r4, #8]
	}
    }
   d6592:	4620      	mov	r0, r4
   d6594:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6598:	b5f0      	push	{r4, r5, r6, r7, lr}
   d659a:	b089      	sub	sp, #36	; 0x24
   d659c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d659e:	4668      	mov	r0, sp
   d65a0:	f7ff ff4d 	bl	d643e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d65a4:	2300      	movs	r3, #0
   d65a6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d65aa:	f04f 0202 	mov.w	r2, #2
   d65ae:	e8d4 3f4f 	ldrexb	r3, [r4]
   d65b2:	2b00      	cmp	r3, #0
   d65b4:	d103      	bne.n	d65be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d65b6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d65ba:	2900      	cmp	r1, #0
   d65bc:	d1f7      	bne.n	d65ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d65be:	d002      	beq.n	d65c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d65c0:	f88d 3008 	strb.w	r3, [sp, #8]
   d65c4:	e063      	b.n	d668e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d65c6:	f114 050c 	adds.w	r5, r4, #12
   d65ca:	d003      	beq.n	d65d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d65cc:	4669      	mov	r1, sp
   d65ce:	4628      	mov	r0, r5
   d65d0:	f7ff ff35 	bl	d643e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d65d4:	f3bf 8f5f 	dmb	sy
   d65d8:	2301      	movs	r3, #1
   d65da:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d65dc:	2000      	movs	r0, #0
   d65de:	f104 0308 	add.w	r3, r4, #8
   d65e2:	f3bf 8f5f 	dmb	sy
   d65e6:	e853 6f00 	ldrex	r6, [r3]
   d65ea:	e843 0200 	strex	r2, r0, [r3]
   d65ee:	2a00      	cmp	r2, #0
   d65f0:	d1f9      	bne.n	d65e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d65f2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d65f6:	2e00      	cmp	r6, #0
   d65f8:	d049      	beq.n	d668e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d65fa:	f7ff faa1 	bl	d5b40 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d65fe:	b120      	cbz	r0, d660a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6600:	4629      	mov	r1, r5
   d6602:	4630      	mov	r0, r6
   d6604:	f7ff ff98 	bl	d6538 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6608:	e03a      	b.n	d6680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d660a:	4631      	mov	r1, r6
   d660c:	a802      	add	r0, sp, #8
   d660e:	f7ff ffb3 	bl	d6578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6612:	68e0      	ldr	r0, [r4, #12]
   d6614:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6618:	b108      	cbz	r0, d661e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d661a:	f002 ffeb 	bl	d95f4 <strdup>
   d661e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6620:	2010      	movs	r0, #16
   d6622:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6626:	f7fd fd38 	bl	d409a <_Znwj>
   d662a:	4605      	mov	r5, r0
   d662c:	b1e8      	cbz	r0, d666a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d662e:	2700      	movs	r7, #0
   d6630:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6632:	2018      	movs	r0, #24
   d6634:	f7fd fd31 	bl	d409a <_Znwj>
   d6638:	4604      	mov	r4, r0
   d663a:	b188      	cbz	r0, d6660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d663c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d663e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6640:	a802      	add	r0, sp, #8
   d6642:	f7ff fe47 	bl	d62d4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6646:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6648:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d664a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d664c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d664e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6650:	a906      	add	r1, sp, #24
   d6652:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6654:	60e3      	str	r3, [r4, #12]
   d6656:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d665a:	9205      	str	r2, [sp, #20]
   d665c:	f7ff feef 	bl	d643e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6660:	4b0d      	ldr	r3, [pc, #52]	; (d6698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6662:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6664:	4b0d      	ldr	r3, [pc, #52]	; (d669c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6666:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6668:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d666a:	a806      	add	r0, sp, #24
   d666c:	f7ff fef6 	bl	d645c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6670:	a802      	add	r0, sp, #8
   d6672:	f7ff fe20 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6676:	2200      	movs	r2, #0
   d6678:	4629      	mov	r1, r5
   d667a:	4809      	ldr	r0, [pc, #36]	; (d66a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d667c:	f7ff fa68 	bl	d5b50 <application_thread_invoke>
   d6680:	4630      	mov	r0, r6
   d6682:	f7ff fe18 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6686:	2110      	movs	r1, #16
   d6688:	4630      	mov	r0, r6
   d668a:	f000 fe0f 	bl	d72ac <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d668e:	4668      	mov	r0, sp
   d6690:	f7ff fee4 	bl	d645c <_ZN8particle5ErrorD1Ev>
    }
   d6694:	b009      	add	sp, #36	; 0x24
   d6696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6698:	000d654b 	.word	0x000d654b
   d669c:	000d67c1 	.word	0x000d67c1
   d66a0:	000d6ca1 	.word	0x000d6ca1

000d66a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d66a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66a8:	b08b      	sub	sp, #44	; 0x2c
   d66aa:	4606      	mov	r6, r0
   d66ac:	460f      	mov	r7, r1
   d66ae:	4690      	mov	r8, r2
   d66b0:	4699      	mov	r9, r3
   d66b2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d66b6:	f7ff fab7 	bl	d5c28 <spark_cloud_flag_connected>
   d66ba:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d66bc:	4683      	mov	fp, r0
   d66be:	bb30      	cbnz	r0, d670e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d66c0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d66c4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66c6:	a905      	add	r1, sp, #20
   d66c8:	4628      	mov	r0, r5
   d66ca:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66ce:	f7ff feb6 	bl	d643e <_ZN8particle5ErrorC1EOS0_>
   d66d2:	2014      	movs	r0, #20
   d66d4:	f7fd fce1 	bl	d409a <_Znwj>
   d66d8:	4604      	mov	r4, r0
   d66da:	b158      	cbz	r0, d66f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d66dc:	2302      	movs	r3, #2
   d66de:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66e0:	2301      	movs	r3, #1
   d66e2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66e4:	f8c0 b004 	str.w	fp, [r0, #4]
   d66e8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d66ec:	4629      	mov	r1, r5
   d66ee:	300c      	adds	r0, #12
   d66f0:	f7ff fea5 	bl	d643e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d66f4:	4630      	mov	r0, r6
   d66f6:	4621      	mov	r1, r4
   d66f8:	f840 4b04 	str.w	r4, [r0], #4
   d66fc:	f7ff ff08 	bl	d6510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6700:	4628      	mov	r0, r5
   d6702:	f7ff feab 	bl	d645c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6706:	a805      	add	r0, sp, #20
   d6708:	f7ff fea8 	bl	d645c <_ZN8particle5ErrorD1Ev>
   d670c:	e052      	b.n	d67b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d670e:	2400      	movs	r4, #0
   d6710:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6712:	2014      	movs	r0, #20
   d6714:	606c      	str	r4, [r5, #4]
   d6716:	60ac      	str	r4, [r5, #8]
   d6718:	9307      	str	r3, [sp, #28]
   d671a:	f7fd fcbe 	bl	d409a <_Znwj>
   d671e:	4601      	mov	r1, r0
   d6720:	b118      	cbz	r0, d672a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6722:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6724:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6726:	6044      	str	r4, [r0, #4]
   d6728:	6084      	str	r4, [r0, #8]
   d672a:	a804      	add	r0, sp, #16
   d672c:	9103      	str	r1, [sp, #12]
   d672e:	f7ff feef 	bl	d6510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6732:	4b22      	ldr	r3, [pc, #136]	; (d67bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6734:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6736:	2008      	movs	r0, #8
   d6738:	f7fd fcaf 	bl	d409a <_Znwj>
   d673c:	4604      	mov	r4, r0
   d673e:	b128      	cbz	r0, d674c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6740:	9b03      	ldr	r3, [sp, #12]
   d6742:	f840 3b04 	str.w	r3, [r0], #4
   d6746:	a904      	add	r1, sp, #16
   d6748:	f7ff fc0a 	bl	d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d674c:	9500      	str	r5, [sp, #0]
   d674e:	fa5f f38a 	uxtb.w	r3, sl
   d6752:	464a      	mov	r2, r9
   d6754:	4641      	mov	r1, r8
   d6756:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6758:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d675a:	f7ff fa6d 	bl	d5c38 <spark_send_event>
   d675e:	b920      	cbnz	r0, d676a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6760:	9b03      	ldr	r3, [sp, #12]
   d6762:	785b      	ldrb	r3, [r3, #1]
   d6764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6768:	b183      	cbz	r3, d678c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d676a:	9b03      	ldr	r3, [sp, #12]
   d676c:	9305      	str	r3, [sp, #20]
   d676e:	a904      	add	r1, sp, #16
   d6770:	a806      	add	r0, sp, #24
   d6772:	f7ff fbf5 	bl	d5f60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6776:	a905      	add	r1, sp, #20
   d6778:	4630      	mov	r0, r6
   d677a:	f7ff fe99 	bl	d64b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d677e:	a806      	add	r0, sp, #24
   d6780:	f7ff fbf5 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6784:	a804      	add	r0, sp, #16
   d6786:	f7ff fbf2 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d678a:	e013      	b.n	d67b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d678c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6790:	a905      	add	r1, sp, #20
   d6792:	a803      	add	r0, sp, #12
   d6794:	9205      	str	r2, [sp, #20]
   d6796:	f8ad 3018 	strh.w	r3, [sp, #24]
   d679a:	f7ff fefd 	bl	d6598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d679e:	a805      	add	r0, sp, #20
   d67a0:	f7ff fe5c 	bl	d645c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d67a4:	a805      	add	r0, sp, #20
   d67a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d67a8:	f7ff fe93 	bl	d64d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d67ac:	a806      	add	r0, sp, #24
   d67ae:	f7ff fbde 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67b2:	e7da      	b.n	d676a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d67b4:	4630      	mov	r0, r6
   d67b6:	b00b      	add	sp, #44	; 0x2c
   d67b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67bc:	000d6931 	.word	0x000d6931

000d67c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d67c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d67c6:	d006      	beq.n	d67d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d67c8:	2a03      	cmp	r2, #3
   d67ca:	d017      	beq.n	d67fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d67cc:	2a01      	cmp	r2, #1
   d67ce:	d122      	bne.n	d6816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67d2:	6003      	str	r3, [r0, #0]
	      break;
   d67d4:	e01f      	b.n	d6816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67d6:	2018      	movs	r0, #24
   d67d8:	680e      	ldr	r6, [r1, #0]
   d67da:	f7fd fc5e 	bl	d409a <_Znwj>
   d67de:	4605      	mov	r5, r0
   d67e0:	b150      	cbz	r0, d67f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67e2:	4631      	mov	r1, r6
   d67e4:	f7ff fec8 	bl	d6578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d67e8:	6930      	ldr	r0, [r6, #16]
   d67ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d67ee:	b108      	cbz	r0, d67f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d67f0:	f002 ff00 	bl	d95f4 <strdup>
   d67f4:	6128      	str	r0, [r5, #16]
   d67f6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67f8:	6025      	str	r5, [r4, #0]
   d67fa:	e00c      	b.n	d6816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67fc:	6804      	ldr	r4, [r0, #0]
   d67fe:	b154      	cbz	r4, d6816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6800:	f104 0010 	add.w	r0, r4, #16
   d6804:	f7ff fe2a 	bl	d645c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6808:	4620      	mov	r0, r4
   d680a:	f7ff fd54 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d680e:	2118      	movs	r1, #24
   d6810:	4620      	mov	r0, r4
   d6812:	f000 fd4b 	bl	d72ac <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6816:	2000      	movs	r0, #0
   d6818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d681a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d681a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d681c:	2300      	movs	r3, #0
   d681e:	6083      	str	r3, [r0, #8]
   d6820:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6822:	4604      	mov	r4, r0
   d6824:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6826:	b12b      	cbz	r3, d6834 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6828:	2202      	movs	r2, #2
   d682a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d682c:	68eb      	ldr	r3, [r5, #12]
   d682e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6830:	68ab      	ldr	r3, [r5, #8]
   d6832:	60a3      	str	r3, [r4, #8]
	}
    }
   d6834:	4620      	mov	r0, r4
   d6836:	bd38      	pop	{r3, r4, r5, pc}

000d6838 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6838:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d683a:	b570      	push	{r4, r5, r6, lr}
   d683c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d683e:	d006      	beq.n	d684e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6840:	2a03      	cmp	r2, #3
   d6842:	d011      	beq.n	d6868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6844:	2a01      	cmp	r2, #1
   d6846:	d118      	bne.n	d687a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6848:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d684a:	6003      	str	r3, [r0, #0]
	      break;
   d684c:	e015      	b.n	d687a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d684e:	2014      	movs	r0, #20
   d6850:	680e      	ldr	r6, [r1, #0]
   d6852:	f7fd fc22 	bl	d409a <_Znwj>
   d6856:	4605      	mov	r5, r0
   d6858:	b120      	cbz	r0, d6864 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d685a:	4631      	mov	r1, r6
   d685c:	f7ff ffdd 	bl	d681a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6860:	7c33      	ldrb	r3, [r6, #16]
   d6862:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6864:	6025      	str	r5, [r4, #0]
   d6866:	e008      	b.n	d687a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6868:	6804      	ldr	r4, [r0, #0]
   d686a:	b134      	cbz	r4, d687a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d686c:	4620      	mov	r0, r4
   d686e:	f7ff fd22 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6872:	2114      	movs	r1, #20
   d6874:	4620      	mov	r0, r4
   d6876:	f000 fd19 	bl	d72ac <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d687a:	2000      	movs	r0, #0
   d687c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6880 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6880:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6882:	2300      	movs	r3, #0
   d6884:	b087      	sub	sp, #28
   d6886:	460c      	mov	r4, r1
   d6888:	f3bf 8f5f 	dmb	sy
   d688c:	e850 6f00 	ldrex	r6, [r0]
   d6890:	e840 3200 	strex	r2, r3, [r0]
   d6894:	2a00      	cmp	r2, #0
   d6896:	d1f9      	bne.n	d688c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6898:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d689c:	2e00      	cmp	r6, #0
   d689e:	d03f      	beq.n	d6920 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d68a0:	4618      	mov	r0, r3
   d68a2:	f7ff f94d 	bl	d5b40 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d68a6:	4607      	mov	r7, r0
   d68a8:	b120      	cbz	r0, d68b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d68aa:	4621      	mov	r1, r4
   d68ac:	4630      	mov	r0, r6
   d68ae:	f7ff fe53 	bl	d6558 <_ZNKSt8functionIFvRKbEEclES1_>
   d68b2:	e02e      	b.n	d6912 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68b4:	4631      	mov	r1, r6
   d68b6:	a801      	add	r0, sp, #4
   d68b8:	f7ff ffaf 	bl	d681a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68bc:	7823      	ldrb	r3, [r4, #0]
   d68be:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d68c2:	2010      	movs	r0, #16
   d68c4:	f7fd fbe9 	bl	d409a <_Znwj>
   d68c8:	4605      	mov	r5, r0
   d68ca:	b1d0      	cbz	r0, d6902 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68ce:	2014      	movs	r0, #20
   d68d0:	f7fd fbe3 	bl	d409a <_Znwj>
   d68d4:	4604      	mov	r4, r0
   d68d6:	b178      	cbz	r0, d68f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68d8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d68da:	4601      	mov	r1, r0
   d68dc:	a801      	add	r0, sp, #4
   d68de:	f7ff fcf9 	bl	d62d4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d68e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d68ea:	9203      	str	r2, [sp, #12]
   d68ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68ee:	60e3      	str	r3, [r4, #12]
   d68f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d68f4:	9204      	str	r2, [sp, #16]
   d68f6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d68f8:	4b0a      	ldr	r3, [pc, #40]	; (d6924 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d68fa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68fc:	4b0a      	ldr	r3, [pc, #40]	; (d6928 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68fe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6900:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6902:	a801      	add	r0, sp, #4
   d6904:	f7ff fcd7 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6908:	2200      	movs	r2, #0
   d690a:	4629      	mov	r1, r5
   d690c:	4807      	ldr	r0, [pc, #28]	; (d692c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d690e:	f7ff f91f 	bl	d5b50 <application_thread_invoke>
   d6912:	4630      	mov	r0, r6
   d6914:	f7ff fccf 	bl	d62b6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6918:	2110      	movs	r1, #16
   d691a:	4630      	mov	r0, r6
   d691c:	f000 fcc6 	bl	d72ac <_ZdlPvj>
        }
    }
   d6920:	b007      	add	sp, #28
   d6922:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6924:	000d656b 	.word	0x000d656b
   d6928:	000d6839 	.word	0x000d6839
   d692c:	000d6ca1 	.word	0x000d6ca1

000d6930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6930:	b530      	push	{r4, r5, lr}
   d6932:	b085      	sub	sp, #20
   d6934:	4604      	mov	r4, r0
   d6936:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6938:	4668      	mov	r0, sp
   d693a:	4611      	mov	r1, r2
   d693c:	f7ff fdc9 	bl	d64d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6940:	b17c      	cbz	r4, d6962 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6942:	b224      	sxth	r4, r4
   d6944:	4628      	mov	r0, r5
   d6946:	b10d      	cbz	r5, d694c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6948:	f002 fe54 	bl	d95f4 <strdup>
   d694c:	9002      	str	r0, [sp, #8]
   d694e:	a902      	add	r1, sp, #8
   d6950:	4668      	mov	r0, sp
   d6952:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6956:	f7ff fe1f 	bl	d6598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d695a:	a802      	add	r0, sp, #8
   d695c:	f7ff fd7e 	bl	d645c <_ZN8particle5ErrorD1Ev>
   d6960:	e01d      	b.n	d699e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6962:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6964:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6968:	f04f 0201 	mov.w	r2, #1
   d696c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6970:	42a3      	cmp	r3, r4
   d6972:	d103      	bne.n	d697c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6974:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6978:	2900      	cmp	r1, #0
   d697a:	d1f7      	bne.n	d696c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d697c:	d002      	beq.n	d6984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d697e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6982:	e00c      	b.n	d699e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6984:	f110 010c 	adds.w	r1, r0, #12
   d6988:	f04f 0301 	mov.w	r3, #1
   d698c:	bf18      	it	ne
   d698e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6990:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6994:	3004      	adds	r0, #4
   d6996:	f800 3c03 	strb.w	r3, [r0, #-3]
   d699a:	f7ff ff71 	bl	d6880 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d699e:	a801      	add	r0, sp, #4
   d69a0:	f7ff fae5 	bl	d5f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d69a4:	b005      	add	sp, #20
   d69a6:	bd30      	pop	{r4, r5, pc}

000d69a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d69a8:	4770      	bx	lr

000d69aa <_ZN9IPAddressD0Ev>:
   d69aa:	b510      	push	{r4, lr}
   d69ac:	2118      	movs	r1, #24
   d69ae:	4604      	mov	r4, r0
   d69b0:	f000 fc7c 	bl	d72ac <_ZdlPvj>
   d69b4:	4620      	mov	r0, r4
   d69b6:	bd10      	pop	{r4, pc}

000d69b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d69b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d69ba:	7d03      	ldrb	r3, [r0, #20]
   d69bc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d69be:	b08d      	sub	sp, #52	; 0x34
   d69c0:	460e      	mov	r6, r1
   d69c2:	f100 0704 	add.w	r7, r0, #4
   d69c6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d69ca:	d002      	beq.n	d69d2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d69cc:	f100 0508 	add.w	r5, r0, #8
   d69d0:	e018      	b.n	d6a04 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d69d2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69d4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d69d6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69da:	232f      	movs	r3, #47	; 0x2f
   d69dc:	462a      	mov	r2, r5
   d69de:	200a      	movs	r0, #10
   d69e0:	f7fe ffc6 	bl	d5970 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d69e4:	4628      	mov	r0, r5
   d69e6:	f002 fe20 	bl	d962a <strlen>
   d69ea:	6833      	ldr	r3, [r6, #0]
   d69ec:	4602      	mov	r2, r0
   d69ee:	68db      	ldr	r3, [r3, #12]
   d69f0:	4629      	mov	r1, r5
   d69f2:	4630      	mov	r0, r6
   d69f4:	4798      	blx	r3
   d69f6:	e00f      	b.n	d6a18 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d69f8:	b124      	cbz	r4, d6a04 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d69fa:	212e      	movs	r1, #46	; 0x2e
   d69fc:	4630      	mov	r0, r6
   d69fe:	f7ff fb01 	bl	d6004 <_ZN5Print5printEc>
   d6a02:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6a04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6a08:	220a      	movs	r2, #10
   d6a0a:	4630      	mov	r0, r6
   d6a0c:	f7ff fb13 	bl	d6036 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a10:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a12:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a14:	d1f0      	bne.n	d69f8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a16:	4620      	mov	r0, r4
    }
    return n;
}
   d6a18:	b00d      	add	sp, #52	; 0x34
   d6a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a1c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6a1c:	b510      	push	{r4, lr}
   d6a1e:	4b05      	ldr	r3, [pc, #20]	; (d6a34 <_ZN9IPAddressC1Ev+0x18>)
   d6a20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a22:	2211      	movs	r2, #17
   d6a24:	f840 3b04 	str.w	r3, [r0], #4
   d6a28:	2100      	movs	r1, #0
   d6a2a:	f002 fdb2 	bl	d9592 <memset>
{
    clear();
}
   d6a2e:	4620      	mov	r0, r4
   d6a30:	bd10      	pop	{r4, pc}
   d6a32:	bf00      	nop
   d6a34:	000d995c 	.word	0x000d995c

000d6a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a38:	4603      	mov	r3, r0
   d6a3a:	4a07      	ldr	r2, [pc, #28]	; (d6a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6a3c:	b510      	push	{r4, lr}
   d6a3e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6a42:	f101 0210 	add.w	r2, r1, #16
   d6a46:	f851 4b04 	ldr.w	r4, [r1], #4
   d6a4a:	f843 4b04 	str.w	r4, [r3], #4
   d6a4e:	4291      	cmp	r1, r2
   d6a50:	d1f9      	bne.n	d6a46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6a52:	780a      	ldrb	r2, [r1, #0]
   d6a54:	701a      	strb	r2, [r3, #0]
}
   d6a56:	bd10      	pop	{r4, pc}
   d6a58:	000d995c 	.word	0x000d995c

000d6a5c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6a5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6a5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6a62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6a66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6a6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6a6e:	2304      	movs	r3, #4
   d6a70:	6041      	str	r1, [r0, #4]
   d6a72:	7503      	strb	r3, [r0, #20]
   d6a74:	bd10      	pop	{r4, pc}

000d6a76 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6a78:	780d      	ldrb	r5, [r1, #0]
   d6a7a:	788b      	ldrb	r3, [r1, #2]
   d6a7c:	784a      	ldrb	r2, [r1, #1]
   d6a7e:	78c9      	ldrb	r1, [r1, #3]
   d6a80:	9100      	str	r1, [sp, #0]
   d6a82:	4629      	mov	r1, r5
   d6a84:	f7ff ffea 	bl	d6a5c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6a88:	b003      	add	sp, #12
   d6a8a:	bd30      	pop	{r4, r5, pc}

000d6a8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a8c:	7441      	strb	r1, [r0, #17]
   d6a8e:	4770      	bx	lr

000d6a90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6a90:	4770      	bx	lr

000d6a92 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6a92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6a94:	2100      	movs	r1, #0
   d6a96:	7c00      	ldrb	r0, [r0, #16]
   d6a98:	f7ff f82a 	bl	d5af0 <HAL_USB_USART_Receive_Data>
}
   d6a9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6aa0:	bf28      	it	cs
   d6aa2:	f04f 30ff 	movcs.w	r0, #4294967295
   d6aa6:	bd08      	pop	{r3, pc}

000d6aa8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6aa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6aaa:	2101      	movs	r1, #1
   d6aac:	7c00      	ldrb	r0, [r0, #16]
   d6aae:	f7ff f81f 	bl	d5af0 <HAL_USB_USART_Receive_Data>
}
   d6ab2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ab6:	bf28      	it	cs
   d6ab8:	f04f 30ff 	movcs.w	r0, #4294967295
   d6abc:	bd08      	pop	{r3, pc}

000d6abe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6abe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ac0:	7c00      	ldrb	r0, [r0, #16]
   d6ac2:	f7ff f80d 	bl	d5ae0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6ac6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6aca:	bd08      	pop	{r3, pc}

000d6acc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6acc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6ace:	7c00      	ldrb	r0, [r0, #16]
   d6ad0:	f7fe fffe 	bl	d5ad0 <HAL_USB_USART_Available_Data>
}
   d6ad4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ad8:	bd08      	pop	{r3, pc}

000d6ada <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6ada:	7c00      	ldrb	r0, [r0, #16]
   d6adc:	f7ff b818 	b.w	d5b10 <HAL_USB_USART_Flush_Data>

000d6ae0 <_ZN9USBSerialD0Ev>:
   d6ae0:	b510      	push	{r4, lr}
   d6ae2:	2114      	movs	r1, #20
   d6ae4:	4604      	mov	r4, r0
   d6ae6:	f000 fbe1 	bl	d72ac <_ZdlPvj>
   d6aea:	4620      	mov	r0, r4
   d6aec:	bd10      	pop	{r4, pc}

000d6aee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6aee:	b538      	push	{r3, r4, r5, lr}
   d6af0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6af2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6af4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6af6:	f7fe fff3 	bl	d5ae0 <HAL_USB_USART_Available_Data_For_Write>
   d6afa:	2800      	cmp	r0, #0
   d6afc:	dc01      	bgt.n	d6b02 <_ZN9USBSerial5writeEh+0x14>
   d6afe:	7c60      	ldrb	r0, [r4, #17]
   d6b00:	b128      	cbz	r0, d6b0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b02:	4629      	mov	r1, r5
   d6b04:	7c20      	ldrb	r0, [r4, #16]
   d6b06:	f7fe fffb 	bl	d5b00 <HAL_USB_USART_Send_Data>
   d6b0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b0e:	bd38      	pop	{r3, r4, r5, pc}

000d6b10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b10:	b510      	push	{r4, lr}
   d6b12:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b14:	2300      	movs	r3, #0
   d6b16:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b1c:	60a3      	str	r3, [r4, #8]
   d6b1e:	4b05      	ldr	r3, [pc, #20]	; (d6b34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b20:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6b22:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b24:	4608      	mov	r0, r1
{
  _serial = serial;
   d6b26:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6b28:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6b2a:	4611      	mov	r1, r2
   d6b2c:	f7fe ffc0 	bl	d5ab0 <HAL_USB_USART_Init>
}
   d6b30:	4620      	mov	r0, r4
   d6b32:	bd10      	pop	{r4, pc}
   d6b34:	000d9970 	.word	0x000d9970

000d6b38 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6b38:	2200      	movs	r2, #0
   d6b3a:	7c00      	ldrb	r0, [r0, #16]
   d6b3c:	f7fe bfc0 	b.w	d5ac0 <HAL_USB_USART_Begin>

000d6b40 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b42:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b46:	2100      	movs	r1, #0
   d6b48:	f002 fd23 	bl	d9592 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	bd10      	pop	{r4, pc}

000d6b50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b50:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b52:	4d0e      	ldr	r5, [pc, #56]	; (d6b8c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6b54:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6b56:	a801      	add	r0, sp, #4
   d6b58:	f7ff fff2 	bl	d6b40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b5c:	6829      	ldr	r1, [r5, #0]
   d6b5e:	f011 0401 	ands.w	r4, r1, #1
   d6b62:	d110      	bne.n	d6b86 <_Z16_fetch_usbserialv+0x36>
   d6b64:	4628      	mov	r0, r5
   d6b66:	f7fd fa9e 	bl	d40a6 <__cxa_guard_acquire>
   d6b6a:	b160      	cbz	r0, d6b86 <_Z16_fetch_usbserialv+0x36>
   d6b6c:	aa01      	add	r2, sp, #4
   d6b6e:	4621      	mov	r1, r4
   d6b70:	4807      	ldr	r0, [pc, #28]	; (d6b90 <_Z16_fetch_usbserialv+0x40>)
   d6b72:	f7ff ffcd 	bl	d6b10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6b76:	4628      	mov	r0, r5
   d6b78:	f7fd fa9a 	bl	d40b0 <__cxa_guard_release>
   d6b7c:	4a05      	ldr	r2, [pc, #20]	; (d6b94 <_Z16_fetch_usbserialv+0x44>)
   d6b7e:	4906      	ldr	r1, [pc, #24]	; (d6b98 <_Z16_fetch_usbserialv+0x48>)
   d6b80:	4803      	ldr	r0, [pc, #12]	; (d6b90 <_Z16_fetch_usbserialv+0x40>)
   d6b82:	f000 fb85 	bl	d7290 <__aeabi_atexit>
	return _usbserial;
}
   d6b86:	4802      	ldr	r0, [pc, #8]	; (d6b90 <_Z16_fetch_usbserialv+0x40>)
   d6b88:	b007      	add	sp, #28
   d6b8a:	bd30      	pop	{r4, r5, pc}
   d6b8c:	2003e404 	.word	0x2003e404
   d6b90:	2003e408 	.word	0x2003e408
   d6b94:	2003e330 	.word	0x2003e330
   d6b98:	000d6a91 	.word	0x000d6a91

000d6b9c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6b9c:	4770      	bx	lr

000d6b9e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b9e:	7441      	strb	r1, [r0, #17]
   d6ba0:	4770      	bx	lr

000d6ba2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6ba2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6ba4:	7c00      	ldrb	r0, [r0, #16]
   d6ba6:	f7fe ff23 	bl	d59f0 <HAL_USART_Available_Data_For_Write>
}
   d6baa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bae:	bd08      	pop	{r3, pc}

000d6bb0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bb0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6bb2:	7c00      	ldrb	r0, [r0, #16]
   d6bb4:	f7fe fef4 	bl	d59a0 <HAL_USART_Available_Data>
}
   d6bb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bbc:	bd08      	pop	{r3, pc}

000d6bbe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bc0:	7c00      	ldrb	r0, [r0, #16]
   d6bc2:	f7fe fefd 	bl	d59c0 <HAL_USART_Peek_Data>
}
   d6bc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bca:	bf28      	it	cs
   d6bcc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6bd0:	bd08      	pop	{r3, pc}

000d6bd2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6bd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6bd4:	7c00      	ldrb	r0, [r0, #16]
   d6bd6:	f7fe feeb 	bl	d59b0 <HAL_USART_Read_Data>
}
   d6bda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bde:	bf28      	it	cs
   d6be0:	f04f 30ff 	movcs.w	r0, #4294967295
   d6be4:	bd08      	pop	{r3, pc}

000d6be6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6be6:	7c00      	ldrb	r0, [r0, #16]
   d6be8:	f7fe bef2 	b.w	d59d0 <HAL_USART_Flush_Data>

000d6bec <_ZN11USARTSerialD0Ev>:
   d6bec:	b510      	push	{r4, lr}
   d6bee:	2114      	movs	r1, #20
   d6bf0:	4604      	mov	r4, r0
   d6bf2:	f000 fb5b 	bl	d72ac <_ZdlPvj>
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	bd10      	pop	{r4, pc}

000d6bfa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6bfa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6bfc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6bfe:	4604      	mov	r4, r0
   d6c00:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c02:	b925      	cbnz	r5, d6c0e <_ZN11USARTSerial5writeEh+0x14>
   d6c04:	7c00      	ldrb	r0, [r0, #16]
   d6c06:	f7fe fef3 	bl	d59f0 <HAL_USART_Available_Data_For_Write>
   d6c0a:	2800      	cmp	r0, #0
   d6c0c:	dd05      	ble.n	d6c1a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c0e:	4631      	mov	r1, r6
   d6c10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c16:	f7fe bebb 	b.w	d5990 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c1a:	4628      	mov	r0, r5
   d6c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c20:	b510      	push	{r4, lr}
   d6c22:	4604      	mov	r4, r0
   d6c24:	4608      	mov	r0, r1
   d6c26:	4611      	mov	r1, r2
   d6c28:	2200      	movs	r2, #0
   d6c2a:	6062      	str	r2, [r4, #4]
   d6c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c30:	60a2      	str	r2, [r4, #8]
   d6c32:	4a05      	ldr	r2, [pc, #20]	; (d6c48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c34:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c36:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c38:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c3a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c3c:	461a      	mov	r2, r3
   d6c3e:	f7fe fe9f 	bl	d5980 <HAL_USART_Init>
}
   d6c42:	4620      	mov	r0, r4
   d6c44:	bd10      	pop	{r4, pc}
   d6c46:	bf00      	nop
   d6c48:	000d99a0 	.word	0x000d99a0

000d6c4c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c4c:	7c00      	ldrb	r0, [r0, #16]
   d6c4e:	f7fe bec7 	b.w	d59e0 <HAL_USART_Is_Enabled>
	...

000d6c54 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c54:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c56:	4d0c      	ldr	r5, [pc, #48]	; (d6c88 <_Z22__fetch_global_Serial1v+0x34>)
   d6c58:	6829      	ldr	r1, [r5, #0]
   d6c5a:	f011 0401 	ands.w	r4, r1, #1
   d6c5e:	d111      	bne.n	d6c84 <_Z22__fetch_global_Serial1v+0x30>
   d6c60:	4628      	mov	r0, r5
   d6c62:	f7fd fa20 	bl	d40a6 <__cxa_guard_acquire>
   d6c66:	b168      	cbz	r0, d6c84 <_Z22__fetch_global_Serial1v+0x30>
   d6c68:	4a08      	ldr	r2, [pc, #32]	; (d6c8c <_Z22__fetch_global_Serial1v+0x38>)
   d6c6a:	4b09      	ldr	r3, [pc, #36]	; (d6c90 <_Z22__fetch_global_Serial1v+0x3c>)
   d6c6c:	4809      	ldr	r0, [pc, #36]	; (d6c94 <_Z22__fetch_global_Serial1v+0x40>)
   d6c6e:	4621      	mov	r1, r4
   d6c70:	f7ff ffd6 	bl	d6c20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6c74:	4628      	mov	r0, r5
   d6c76:	f7fd fa1b 	bl	d40b0 <__cxa_guard_release>
   d6c7a:	4a07      	ldr	r2, [pc, #28]	; (d6c98 <_Z22__fetch_global_Serial1v+0x44>)
   d6c7c:	4907      	ldr	r1, [pc, #28]	; (d6c9c <_Z22__fetch_global_Serial1v+0x48>)
   d6c7e:	4805      	ldr	r0, [pc, #20]	; (d6c94 <_Z22__fetch_global_Serial1v+0x40>)
   d6c80:	f000 fb06 	bl	d7290 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c84:	4803      	ldr	r0, [pc, #12]	; (d6c94 <_Z22__fetch_global_Serial1v+0x40>)
   d6c86:	bd38      	pop	{r3, r4, r5, pc}
   d6c88:	2003e4b4 	.word	0x2003e4b4
   d6c8c:	2003e4b8 	.word	0x2003e4b8
   d6c90:	2003e430 	.word	0x2003e430
   d6c94:	2003e41c 	.word	0x2003e41c
   d6c98:	2003e330 	.word	0x2003e330
   d6c9c:	000d6b9d 	.word	0x000d6b9d

000d6ca0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6ca0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ca2:	6883      	ldr	r3, [r0, #8]
   d6ca4:	4604      	mov	r4, r0
   d6ca6:	b90b      	cbnz	r3, d6cac <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6ca8:	f000 fb13 	bl	d72d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cac:	68c3      	ldr	r3, [r0, #12]
   d6cae:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6cb0:	68a3      	ldr	r3, [r4, #8]
   d6cb2:	b11b      	cbz	r3, d6cbc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cb4:	2203      	movs	r2, #3
   d6cb6:	4621      	mov	r1, r4
   d6cb8:	4620      	mov	r0, r4
   d6cba:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	2110      	movs	r1, #16
}
   d6cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6cc4:	f000 baf2 	b.w	d72ac <_ZdlPvj>

000d6cc8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6cc8:	4770      	bx	lr

000d6cca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ccc:	4606      	mov	r6, r0
   d6cce:	4615      	mov	r5, r2
   d6cd0:	460c      	mov	r4, r1
   d6cd2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6cd4:	42bc      	cmp	r4, r7
   d6cd6:	d006      	beq.n	d6ce6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6cd8:	6833      	ldr	r3, [r6, #0]
   d6cda:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6cde:	689b      	ldr	r3, [r3, #8]
   d6ce0:	4630      	mov	r0, r6
   d6ce2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ce4:	e7f6      	b.n	d6cd4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6ce6:	4628      	mov	r0, r5
   d6ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6cea:	2200      	movs	r2, #0
   d6cec:	7c00      	ldrb	r0, [r0, #16]
   d6cee:	f7fe be9f 	b.w	d5a30 <HAL_I2C_Write_Data>

000d6cf2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6cf2:	2100      	movs	r1, #0
   d6cf4:	7c00      	ldrb	r0, [r0, #16]
   d6cf6:	f7fe bea3 	b.w	d5a40 <HAL_I2C_Available_Data>

000d6cfa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6cfa:	2100      	movs	r1, #0
   d6cfc:	7c00      	ldrb	r0, [r0, #16]
   d6cfe:	f7fe bea7 	b.w	d5a50 <HAL_I2C_Read_Data>

000d6d02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d02:	2100      	movs	r1, #0
   d6d04:	7c00      	ldrb	r0, [r0, #16]
   d6d06:	f7fe beab 	b.w	d5a60 <HAL_I2C_Peek_Data>

000d6d0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d0a:	2100      	movs	r1, #0
   d6d0c:	7c00      	ldrb	r0, [r0, #16]
   d6d0e:	f7fe beaf 	b.w	d5a70 <HAL_I2C_Flush_Data>

000d6d12 <_ZN7TwoWireD0Ev>:
   d6d12:	b510      	push	{r4, lr}
   d6d14:	2114      	movs	r1, #20
   d6d16:	4604      	mov	r4, r0
   d6d18:	f000 fac8 	bl	d72ac <_ZdlPvj>
   d6d1c:	4620      	mov	r0, r4
   d6d1e:	bd10      	pop	{r4, pc}

000d6d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d20:	b510      	push	{r4, lr}
   d6d22:	4604      	mov	r4, r0
   d6d24:	2300      	movs	r3, #0
   d6d26:	6063      	str	r3, [r4, #4]
   d6d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d2c:	60a3      	str	r3, [r4, #8]
   d6d2e:	4b04      	ldr	r3, [pc, #16]	; (d6d40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d30:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d32:	4608      	mov	r0, r1
   d6d34:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d36:	4611      	mov	r1, r2
   d6d38:	f7fe feaa 	bl	d5a90 <HAL_I2C_Init>
}
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	bd10      	pop	{r4, pc}
   d6d40:	000d99d0 	.word	0x000d99d0

000d6d44 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6d44:	2300      	movs	r3, #0
   d6d46:	461a      	mov	r2, r3
   d6d48:	4619      	mov	r1, r3
   d6d4a:	7c00      	ldrb	r0, [r0, #16]
   d6d4c:	f7fe be58 	b.w	d5a00 <HAL_I2C_Begin>

000d6d50 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6d50:	b570      	push	{r4, r5, r6, lr}
   d6d52:	460c      	mov	r4, r1
   d6d54:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6d56:	2514      	movs	r5, #20
   d6d58:	4606      	mov	r6, r0
   d6d5a:	462a      	mov	r2, r5
   d6d5c:	2100      	movs	r1, #0
   d6d5e:	a801      	add	r0, sp, #4
   d6d60:	f002 fc17 	bl	d9592 <memset>
   d6d64:	7823      	ldrb	r3, [r4, #0]
   d6d66:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d6a:	6863      	ldr	r3, [r4, #4]
   d6d6c:	9303      	str	r3, [sp, #12]
   d6d6e:	68e3      	ldr	r3, [r4, #12]
   d6d70:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6d72:	2200      	movs	r2, #0
   d6d74:	7a23      	ldrb	r3, [r4, #8]
   d6d76:	7c30      	ldrb	r0, [r6, #16]
   d6d78:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6d7c:	a901      	add	r1, sp, #4
   d6d7e:	9305      	str	r3, [sp, #20]
   d6d80:	f7fe fe8e 	bl	d5aa0 <HAL_I2C_Request_Data_Ex>
}
   d6d84:	b006      	add	sp, #24
   d6d86:	bd70      	pop	{r4, r5, r6, pc}

000d6d88 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d8a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6d8c:	f88d 1000 	strb.w	r1, [sp]
   d6d90:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6d94:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d96:	bf18      	it	ne
   d6d98:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6d9a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6d9c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6d9e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6da2:	f7ff ffd5 	bl	d6d50 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6da6:	b005      	add	sp, #20
   d6da8:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dac <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6dac:	2301      	movs	r3, #1
   d6dae:	f7ff bfeb 	b.w	d6d88 <_ZN7TwoWire11requestFromEhjh>

000d6db2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6db2:	2200      	movs	r2, #0
   d6db4:	7c00      	ldrb	r0, [r0, #16]
   d6db6:	f7fe be2b 	b.w	d5a10 <HAL_I2C_Begin_Transmission>

000d6dba <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6dba:	2200      	movs	r2, #0
   d6dbc:	7c00      	ldrb	r0, [r0, #16]
   d6dbe:	f7fe be2f 	b.w	d5a20 <HAL_I2C_End_Transmission>

000d6dc2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6dc2:	2101      	movs	r1, #1
   d6dc4:	f7ff bff9 	b.w	d6dba <_ZN7TwoWire15endTransmissionEh>

000d6dc8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6dc8:	2100      	movs	r1, #0
   d6dca:	7c00      	ldrb	r0, [r0, #16]
   d6dcc:	f7fe be58 	b.w	d5a80 <HAL_I2C_Is_Enabled>

000d6dd0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dd0:	2200      	movs	r2, #0
   d6dd2:	4611      	mov	r1, r2
   d6dd4:	6840      	ldr	r0, [r0, #4]
   d6dd6:	f7fe bf0f 	b.w	d5bf8 <network_listening>

000d6dda <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6dda:	2200      	movs	r2, #0
   d6ddc:	4611      	mov	r1, r2
   d6dde:	6840      	ldr	r0, [r0, #4]
   d6de0:	f7fe bf1a 	b.w	d5c18 <network_get_listen_timeout>

000d6de4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6de4:	2200      	movs	r2, #0
   d6de6:	6840      	ldr	r0, [r0, #4]
   d6de8:	f7fe bf0e 	b.w	d5c08 <network_set_listen_timeout>

000d6dec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6dec:	2200      	movs	r2, #0
   d6dee:	f081 0101 	eor.w	r1, r1, #1
   d6df2:	6840      	ldr	r0, [r0, #4]
   d6df4:	f7fe bef8 	b.w	d5be8 <network_listen>

000d6df8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6df8:	2300      	movs	r3, #0
   d6dfa:	461a      	mov	r2, r3
   d6dfc:	2101      	movs	r1, #1
   d6dfe:	6840      	ldr	r0, [r0, #4]
   d6e00:	f7fe beea 	b.w	d5bd8 <network_off>

000d6e04 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e04:	2300      	movs	r3, #0
   d6e06:	461a      	mov	r2, r3
   d6e08:	4619      	mov	r1, r3
   d6e0a:	6840      	ldr	r0, [r0, #4]
   d6e0c:	f7fe bedc 	b.w	d5bc8 <network_on>

000d6e10 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e10:	2200      	movs	r2, #0
   d6e12:	4611      	mov	r1, r2
   d6e14:	6840      	ldr	r0, [r0, #4]
   d6e16:	f7fe becf 	b.w	d5bb8 <network_ready>

000d6e1a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e1a:	2200      	movs	r2, #0
   d6e1c:	4611      	mov	r1, r2
   d6e1e:	6840      	ldr	r0, [r0, #4]
   d6e20:	f7fe beba 	b.w	d5b98 <network_connecting>

000d6e24 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e24:	2200      	movs	r2, #0
   d6e26:	2102      	movs	r1, #2
   d6e28:	6840      	ldr	r0, [r0, #4]
   d6e2a:	f7fe bebd 	b.w	d5ba8 <network_disconnect>

000d6e2e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e2e:	2300      	movs	r3, #0
   d6e30:	461a      	mov	r2, r3
   d6e32:	6840      	ldr	r0, [r0, #4]
   d6e34:	f7fe bea8 	b.w	d5b88 <network_connect>

000d6e38 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6e38:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e3a:	4605      	mov	r5, r0
   d6e3c:	b188      	cbz	r0, d6e62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e3e:	6804      	ldr	r4, [r0, #0]
   d6e40:	b14c      	cbz	r4, d6e56 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6e42:	68a3      	ldr	r3, [r4, #8]
   d6e44:	b11b      	cbz	r3, d6e4e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e46:	2203      	movs	r2, #3
   d6e48:	4621      	mov	r1, r4
   d6e4a:	4620      	mov	r0, r4
   d6e4c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e4e:	2110      	movs	r1, #16
   d6e50:	4620      	mov	r0, r4
   d6e52:	f000 fa2b 	bl	d72ac <_ZdlPvj>
   d6e56:	4628      	mov	r0, r5
   d6e58:	2114      	movs	r1, #20
      }
   d6e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e5e:	f000 ba25 	b.w	d72ac <_ZdlPvj>
   d6e62:	bd38      	pop	{r3, r4, r5, pc}

000d6e64 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6e64:	b110      	cbz	r0, d6e6c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6e66:	6803      	ldr	r3, [r0, #0]
   d6e68:	685b      	ldr	r3, [r3, #4]
   d6e6a:	4718      	bx	r3
   d6e6c:	4770      	bx	lr

000d6e6e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6e6e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6e70:	6803      	ldr	r3, [r0, #0]
   d6e72:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6e74:	b1bb      	cbz	r3, d6ea6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6e76:	6858      	ldr	r0, [r3, #4]
   d6e78:	f7fe fd52 	bl	d5920 <os_thread_is_current>
   d6e7c:	b978      	cbnz	r0, d6e9e <_ZN6ThreadD1Ev+0x30>
   d6e7e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6e80:	7c5a      	ldrb	r2, [r3, #17]
   d6e82:	b912      	cbnz	r2, d6e8a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6e84:	6858      	ldr	r0, [r3, #4]
   d6e86:	f7fe fd53 	bl	d5930 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6e8a:	6823      	ldr	r3, [r4, #0]
   d6e8c:	6858      	ldr	r0, [r3, #4]
   d6e8e:	f7fe fd57 	bl	d5940 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e92:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6e94:	2300      	movs	r3, #0
   d6e96:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6e98:	b128      	cbz	r0, d6ea6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6e9a:	f7ff ffcd 	bl	d6e38 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e9e:	6820      	ldr	r0, [r4, #0]
   d6ea0:	b108      	cbz	r0, d6ea6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6ea2:	f7ff ffc9 	bl	d6e38 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	bd10      	pop	{r4, pc}

000d6eaa <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6eaa:	b538      	push	{r3, r4, r5, lr}
   d6eac:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6eae:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6eb2:	b108      	cbz	r0, d6eb8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6eb4:	f7fd f8f5 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6eb8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6ebc:	b108      	cbz	r0, d6ec2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6ebe:	f7fe fd4f 	bl	d5960 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ec2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6ec6:	b135      	cbz	r5, d6ed6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ec8:	4628      	mov	r0, r5
   d6eca:	f7ff ffd0 	bl	d6e6e <_ZN6ThreadD1Ev>
   d6ece:	2104      	movs	r1, #4
   d6ed0:	4628      	mov	r0, r5
   d6ed2:	f000 f9eb 	bl	d72ac <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ed6:	6820      	ldr	r0, [r4, #0]
   d6ed8:	b108      	cbz	r0, d6ede <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6eda:	f7ff ffc3 	bl	d6e64 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6ede:	4620      	mov	r0, r4
   d6ee0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ee4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6ee4:	b510      	push	{r4, lr}
   d6ee6:	4b04      	ldr	r3, [pc, #16]	; (d6ef8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6ee8:	4604      	mov	r4, r0
   d6eea:	f840 3b08 	str.w	r3, [r0], #8
   d6eee:	f7ff ffdc 	bl	d6eaa <_ZN5spark11MeshPublishD1Ev>
   d6ef2:	4620      	mov	r0, r4
   d6ef4:	bd10      	pop	{r4, pc}
   d6ef6:	bf00      	nop
   d6ef8:	000d99f8 	.word	0x000d99f8

000d6efc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6efc:	b538      	push	{r3, r4, r5, lr}
   d6efe:	4c0e      	ldr	r4, [pc, #56]	; (d6f38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6f00:	4b0e      	ldr	r3, [pc, #56]	; (d6f3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6f02:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f04:	2500      	movs	r5, #0
   d6f06:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f08:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f0c:	6063      	str	r3, [r4, #4]
   d6f0e:	60a5      	str	r5, [r4, #8]
   d6f10:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f14:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f18:	f7fe fd1a 	bl	d5950 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f1c:	4b08      	ldr	r3, [pc, #32]	; (d6f40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6f1e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f22:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6f26:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f28:	4620      	mov	r0, r4
   d6f2a:	4a06      	ldr	r2, [pc, #24]	; (d6f44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f2c:	4906      	ldr	r1, [pc, #24]	; (d6f48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f32:	f000 b9ad 	b.w	d7290 <__aeabi_atexit>
   d6f36:	bf00      	nop
   d6f38:	2003e53c 	.word	0x2003e53c
   d6f3c:	000d9a60 	.word	0x000d9a60
   d6f40:	000d99f8 	.word	0x000d99f8
   d6f44:	2003e330 	.word	0x2003e330
   d6f48:	000d6ee5 	.word	0x000d6ee5

000d6f4c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6f4c:	2200      	movs	r2, #0
   d6f4e:	4611      	mov	r1, r2
   d6f50:	6840      	ldr	r0, [r0, #4]
   d6f52:	f7fe be31 	b.w	d5bb8 <network_ready>

000d6f56 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f56:	2200      	movs	r2, #0
   d6f58:	4611      	mov	r1, r2
   d6f5a:	6840      	ldr	r0, [r0, #4]
   d6f5c:	f7fe be4c 	b.w	d5bf8 <network_listening>

000d6f60 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f60:	2200      	movs	r2, #0
   d6f62:	4611      	mov	r1, r2
   d6f64:	6840      	ldr	r0, [r0, #4]
   d6f66:	f7fe be57 	b.w	d5c18 <network_get_listen_timeout>

000d6f6a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f6a:	2200      	movs	r2, #0
   d6f6c:	6840      	ldr	r0, [r0, #4]
   d6f6e:	f7fe be4b 	b.w	d5c08 <network_set_listen_timeout>

000d6f72 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f72:	2200      	movs	r2, #0
   d6f74:	f081 0101 	eor.w	r1, r1, #1
   d6f78:	6840      	ldr	r0, [r0, #4]
   d6f7a:	f7fe be35 	b.w	d5be8 <network_listen>

000d6f7e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6f7e:	2300      	movs	r3, #0
   d6f80:	461a      	mov	r2, r3
   d6f82:	4619      	mov	r1, r3
   d6f84:	6840      	ldr	r0, [r0, #4]
   d6f86:	f7fe be27 	b.w	d5bd8 <network_off>

000d6f8a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	461a      	mov	r2, r3
   d6f8e:	4619      	mov	r1, r3
   d6f90:	6840      	ldr	r0, [r0, #4]
   d6f92:	f7fe be19 	b.w	d5bc8 <network_on>

000d6f96 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f96:	2200      	movs	r2, #0
   d6f98:	4611      	mov	r1, r2
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	f7fe bdfc 	b.w	d5b98 <network_connecting>

000d6fa0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6fa0:	2200      	movs	r2, #0
   d6fa2:	2102      	movs	r1, #2
   d6fa4:	6840      	ldr	r0, [r0, #4]
   d6fa6:	f7fe bdff 	b.w	d5ba8 <network_disconnect>

000d6faa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6faa:	2300      	movs	r3, #0
   d6fac:	461a      	mov	r2, r3
   d6fae:	6840      	ldr	r0, [r0, #4]
   d6fb0:	f7fe bdea 	b.w	d5b88 <network_connect>

000d6fb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6fb4:	4b02      	ldr	r3, [pc, #8]	; (d6fc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6fb6:	2204      	movs	r2, #4
   d6fb8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6fba:	4a02      	ldr	r2, [pc, #8]	; (d6fc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6fbc:	601a      	str	r2, [r3, #0]
   d6fbe:	4770      	bx	lr
   d6fc0:	2003e710 	.word	0x2003e710
   d6fc4:	000d9a2c 	.word	0x000d9a2c

000d6fc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6fc8:	2300      	movs	r3, #0
   d6fca:	461a      	mov	r2, r3
   d6fcc:	6840      	ldr	r0, [r0, #4]
   d6fce:	f7fe bddb 	b.w	d5b88 <network_connect>

000d6fd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6fd2:	2200      	movs	r2, #0
   d6fd4:	2102      	movs	r1, #2
   d6fd6:	6840      	ldr	r0, [r0, #4]
   d6fd8:	f7fe bde6 	b.w	d5ba8 <network_disconnect>

000d6fdc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6fdc:	2200      	movs	r2, #0
   d6fde:	4611      	mov	r1, r2
   d6fe0:	6840      	ldr	r0, [r0, #4]
   d6fe2:	f7fe bdd9 	b.w	d5b98 <network_connecting>

000d6fe6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	4611      	mov	r1, r2
   d6fea:	6840      	ldr	r0, [r0, #4]
   d6fec:	f7fe bde4 	b.w	d5bb8 <network_ready>

000d6ff0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ff0:	2300      	movs	r3, #0
   d6ff2:	461a      	mov	r2, r3
   d6ff4:	4619      	mov	r1, r3
   d6ff6:	6840      	ldr	r0, [r0, #4]
   d6ff8:	f7fe bde6 	b.w	d5bc8 <network_on>

000d6ffc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6ffc:	2300      	movs	r3, #0
   d6ffe:	461a      	mov	r2, r3
   d7000:	4619      	mov	r1, r3
   d7002:	6840      	ldr	r0, [r0, #4]
   d7004:	f7fe bde8 	b.w	d5bd8 <network_off>

000d7008 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7008:	2200      	movs	r2, #0
   d700a:	f081 0101 	eor.w	r1, r1, #1
   d700e:	6840      	ldr	r0, [r0, #4]
   d7010:	f7fe bdea 	b.w	d5be8 <network_listen>

000d7014 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7014:	2200      	movs	r2, #0
   d7016:	6840      	ldr	r0, [r0, #4]
   d7018:	f7fe bdf6 	b.w	d5c08 <network_set_listen_timeout>

000d701c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d701c:	2200      	movs	r2, #0
   d701e:	4611      	mov	r1, r2
   d7020:	6840      	ldr	r0, [r0, #4]
   d7022:	f7fe bdf9 	b.w	d5c18 <network_get_listen_timeout>

000d7026 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7026:	2200      	movs	r2, #0
   d7028:	4611      	mov	r1, r2
   d702a:	6840      	ldr	r0, [r0, #4]
   d702c:	f7fe bde4 	b.w	d5bf8 <network_listening>

000d7030 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7034:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7036:	b095      	sub	sp, #84	; 0x54
   d7038:	4616      	mov	r6, r2
   d703a:	460d      	mov	r5, r1
   d703c:	4607      	mov	r7, r0
    IPAddress addr;
   d703e:	f7ff fced 	bl	d6a1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7042:	4621      	mov	r1, r4
   d7044:	2220      	movs	r2, #32
   d7046:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7048:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d704a:	f002 faa2 	bl	d9592 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d704e:	2340      	movs	r3, #64	; 0x40
   d7050:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7052:	4621      	mov	r1, r4
   d7054:	466b      	mov	r3, sp
   d7056:	aa0c      	add	r2, sp, #48	; 0x30
   d7058:	4630      	mov	r0, r6
   d705a:	f7fe fbd1 	bl	d5800 <netdb_getaddrinfo>
    if (!r) {
   d705e:	4604      	mov	r4, r0
   d7060:	2800      	cmp	r0, #0
   d7062:	d144      	bne.n	d70ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7064:	4602      	mov	r2, r0
   d7066:	2101      	movs	r1, #1
   d7068:	6868      	ldr	r0, [r5, #4]
   d706a:	f7fe fda5 	bl	d5bb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d706e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7070:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7072:	4622      	mov	r2, r4
   d7074:	6868      	ldr	r0, [r5, #4]
   d7076:	f7fe fd9f 	bl	d5bb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d707a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d707c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d707e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7080:	2e00      	cmp	r6, #0
   d7082:	d034      	beq.n	d70ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7084:	2900      	cmp	r1, #0
   d7086:	d132      	bne.n	d70ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7088:	6873      	ldr	r3, [r6, #4]
   d708a:	2b02      	cmp	r3, #2
   d708c:	d002      	beq.n	d7094 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d708e:	2b0a      	cmp	r3, #10
   d7090:	d009      	beq.n	d70a6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7092:	e02a      	b.n	d70ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7094:	f1b8 0f00 	cmp.w	r8, #0
   d7098:	d027      	beq.n	d70ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d709a:	6971      	ldr	r1, [r6, #20]
   d709c:	4638      	mov	r0, r7
   d709e:	3104      	adds	r1, #4
   d70a0:	f7ff fce9 	bl	d6a76 <_ZN9IPAddressaSEPKh>
   d70a4:	e020      	b.n	d70e8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d70a6:	f1b9 0f00 	cmp.w	r9, #0
   d70aa:	d01e      	beq.n	d70ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d70ac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d70ae:	2211      	movs	r2, #17
   d70b0:	a801      	add	r0, sp, #4
   d70b2:	f002 fa6e 	bl	d9592 <memset>
                    a.v = 6;
   d70b6:	2306      	movs	r3, #6
   d70b8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d70bc:	ad01      	add	r5, sp, #4
   d70be:	f104 0308 	add.w	r3, r4, #8
   d70c2:	3418      	adds	r4, #24
   d70c4:	6818      	ldr	r0, [r3, #0]
   d70c6:	6859      	ldr	r1, [r3, #4]
   d70c8:	462a      	mov	r2, r5
   d70ca:	c203      	stmia	r2!, {r0, r1}
   d70cc:	3308      	adds	r3, #8
   d70ce:	42a3      	cmp	r3, r4
   d70d0:	4615      	mov	r5, r2
   d70d2:	d1f7      	bne.n	d70c4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d70d4:	a901      	add	r1, sp, #4
   d70d6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d70d8:	ad07      	add	r5, sp, #28
   d70da:	f7ff fcad 	bl	d6a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d70de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70e0:	1d3c      	adds	r4, r7, #4
   d70e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70e4:	682b      	ldr	r3, [r5, #0]
   d70e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d70e8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d70ea:	69f6      	ldr	r6, [r6, #28]
   d70ec:	e7c8      	b.n	d7080 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d70ee:	9800      	ldr	r0, [sp, #0]
   d70f0:	f7fe fb7e 	bl	d57f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d70f4:	4638      	mov	r0, r7
   d70f6:	b015      	add	sp, #84	; 0x54
   d70f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d70fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d70fc:	4b02      	ldr	r3, [pc, #8]	; (d7108 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d70fe:	4a03      	ldr	r2, [pc, #12]	; (d710c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7100:	601a      	str	r2, [r3, #0]
   d7102:	2200      	movs	r2, #0
   d7104:	605a      	str	r2, [r3, #4]
   d7106:	4770      	bx	lr
   d7108:	2003e718 	.word	0x2003e718
   d710c:	000d9a60 	.word	0x000d9a60

000d7110 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7110:	b510      	push	{r4, lr}
   d7112:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7114:	f000 f85c 	bl	d71d0 <_ZN8particle7globals11instanceSpiEv>
   d7118:	f7fe fedd 	bl	d5ed6 <_ZN8SPIClass9isEnabledEv>
   d711c:	b128      	cbz	r0, d712a <pinAvailable+0x1a>
   d711e:	f1a4 030b 	sub.w	r3, r4, #11
   d7122:	2b02      	cmp	r3, #2
   d7124:	d801      	bhi.n	d712a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7126:	2000      	movs	r0, #0
   d7128:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d712a:	f000 f88b 	bl	d7244 <_Z19__fetch_global_Wirev>
   d712e:	f7ff fe4b 	bl	d6dc8 <_ZN7TwoWire9isEnabledEv>
   d7132:	b108      	cbz	r0, d7138 <pinAvailable+0x28>
   d7134:	2c01      	cmp	r4, #1
   d7136:	d9f6      	bls.n	d7126 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7138:	f7ff fd8c 	bl	d6c54 <_Z22__fetch_global_Serial1v>
   d713c:	f7ff fd86 	bl	d6c4c <_ZN11USARTSerial9isEnabledEv>
   d7140:	b118      	cbz	r0, d714a <pinAvailable+0x3a>
   d7142:	f1a4 0309 	sub.w	r3, r4, #9
   d7146:	2b01      	cmp	r3, #1
   d7148:	d9ed      	bls.n	d7126 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d714a:	2c23      	cmp	r4, #35	; 0x23
   d714c:	bf8c      	ite	hi
   d714e:	2000      	movhi	r0, #0
   d7150:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7152:	bd10      	pop	{r4, pc}

000d7154 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7154:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7156:	b538      	push	{r3, r4, r5, lr}
   d7158:	4604      	mov	r4, r0
   d715a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d715c:	d80a      	bhi.n	d7174 <pinMode+0x20>
   d715e:	29ff      	cmp	r1, #255	; 0xff
   d7160:	d008      	beq.n	d7174 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7162:	f7ff ffd5 	bl	d7110 <pinAvailable>
   d7166:	b128      	cbz	r0, d7174 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7168:	4629      	mov	r1, r5
   d716a:	4620      	mov	r0, r4
}
   d716c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7170:	f7fe bb56 	b.w	d5820 <HAL_Pin_Mode>
   d7174:	bd38      	pop	{r3, r4, r5, pc}

000d7176 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7176:	b538      	push	{r3, r4, r5, lr}
   d7178:	4604      	mov	r4, r0
   d717a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d717c:	f7fe fb58 	bl	d5830 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7180:	28ff      	cmp	r0, #255	; 0xff
   d7182:	d010      	beq.n	d71a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7184:	2806      	cmp	r0, #6
   d7186:	d804      	bhi.n	d7192 <digitalWrite+0x1c>
   d7188:	234d      	movs	r3, #77	; 0x4d
   d718a:	fa23 f000 	lsr.w	r0, r3, r0
   d718e:	07c3      	lsls	r3, r0, #31
   d7190:	d409      	bmi.n	d71a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7192:	4620      	mov	r0, r4
   d7194:	f7ff ffbc 	bl	d7110 <pinAvailable>
   d7198:	b128      	cbz	r0, d71a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d719a:	4629      	mov	r1, r5
   d719c:	4620      	mov	r0, r4
}
   d719e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d71a2:	f7fe bb4d 	b.w	d5840 <HAL_GPIO_Write>
   d71a6:	bd38      	pop	{r3, r4, r5, pc}

000d71a8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d71a8:	b510      	push	{r4, lr}
   d71aa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d71ac:	f7fe fb40 	bl	d5830 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d71b0:	3804      	subs	r0, #4
   d71b2:	b2c0      	uxtb	r0, r0
   d71b4:	2801      	cmp	r0, #1
   d71b6:	d908      	bls.n	d71ca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d71b8:	4620      	mov	r0, r4
   d71ba:	f7ff ffa9 	bl	d7110 <pinAvailable>
   d71be:	b120      	cbz	r0, d71ca <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d71c0:	4620      	mov	r0, r4
}
   d71c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d71c6:	f7fe bb43 	b.w	d5850 <HAL_GPIO_Read>
}
   d71ca:	2000      	movs	r0, #0
   d71cc:	bd10      	pop	{r4, pc}
	...

000d71d0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d71d0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d71d2:	4d0b      	ldr	r5, [pc, #44]	; (d7200 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d71d4:	6829      	ldr	r1, [r5, #0]
   d71d6:	f011 0401 	ands.w	r4, r1, #1
   d71da:	d10f      	bne.n	d71fc <_ZN8particle7globals11instanceSpiEv+0x2c>
   d71dc:	4628      	mov	r0, r5
   d71de:	f7fc ff62 	bl	d40a6 <__cxa_guard_acquire>
   d71e2:	b158      	cbz	r0, d71fc <_ZN8particle7globals11instanceSpiEv+0x2c>
   d71e4:	4621      	mov	r1, r4
   d71e6:	4807      	ldr	r0, [pc, #28]	; (d7204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d71e8:	f7fe fdb2 	bl	d5d50 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d71ec:	4628      	mov	r0, r5
   d71ee:	f7fc ff5f 	bl	d40b0 <__cxa_guard_release>
   d71f2:	4a05      	ldr	r2, [pc, #20]	; (d7208 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d71f4:	4905      	ldr	r1, [pc, #20]	; (d720c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d71f6:	4803      	ldr	r0, [pc, #12]	; (d7204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d71f8:	f000 f84a 	bl	d7290 <__aeabi_atexit>
    return instance;
}
   d71fc:	4801      	ldr	r0, [pc, #4]	; (d7204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d71fe:	bd38      	pop	{r3, r4, r5, pc}
   d7200:	2003e72c 	.word	0x2003e72c
   d7204:	2003e720 	.word	0x2003e720
   d7208:	2003e330 	.word	0x2003e330
   d720c:	000d5d35 	.word	0x000d5d35

000d7210 <_Z17acquireWireBufferv>:
   d7210:	b570      	push	{r4, r5, r6, lr}
   d7212:	4604      	mov	r4, r0
   d7214:	2514      	movs	r5, #20
   d7216:	462a      	mov	r2, r5
   d7218:	4e09      	ldr	r6, [pc, #36]	; (d7240 <_Z17acquireWireBufferv+0x30>)
   d721a:	2100      	movs	r1, #0
   d721c:	f002 f9b9 	bl	d9592 <memset>
   d7220:	8025      	strh	r5, [r4, #0]
   d7222:	2520      	movs	r5, #32
   d7224:	4631      	mov	r1, r6
   d7226:	60a5      	str	r5, [r4, #8]
   d7228:	6125      	str	r5, [r4, #16]
   d722a:	4628      	mov	r0, r5
   d722c:	f000 f840 	bl	d72b0 <_ZnajRKSt9nothrow_t>
   d7230:	4631      	mov	r1, r6
   d7232:	6060      	str	r0, [r4, #4]
   d7234:	4628      	mov	r0, r5
   d7236:	f000 f83b 	bl	d72b0 <_ZnajRKSt9nothrow_t>
   d723a:	60e0      	str	r0, [r4, #12]
   d723c:	4620      	mov	r0, r4
   d723e:	bd70      	pop	{r4, r5, r6, pc}
   d7240:	000d9a8c 	.word	0x000d9a8c

000d7244 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7244:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7246:	4d0e      	ldr	r5, [pc, #56]	; (d7280 <_Z19__fetch_global_Wirev+0x3c>)
   d7248:	6829      	ldr	r1, [r5, #0]
   d724a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d724e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7250:	d113      	bne.n	d727a <_Z19__fetch_global_Wirev+0x36>
   d7252:	4628      	mov	r0, r5
   d7254:	f7fc ff27 	bl	d40a6 <__cxa_guard_acquire>
   d7258:	b178      	cbz	r0, d727a <_Z19__fetch_global_Wirev+0x36>
   d725a:	a801      	add	r0, sp, #4
   d725c:	f7ff ffd8 	bl	d7210 <_Z17acquireWireBufferv>
   d7260:	aa01      	add	r2, sp, #4
   d7262:	4621      	mov	r1, r4
   d7264:	4807      	ldr	r0, [pc, #28]	; (d7284 <_Z19__fetch_global_Wirev+0x40>)
   d7266:	f7ff fd5b 	bl	d6d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d726a:	4628      	mov	r0, r5
   d726c:	f7fc ff20 	bl	d40b0 <__cxa_guard_release>
   d7270:	4a05      	ldr	r2, [pc, #20]	; (d7288 <_Z19__fetch_global_Wirev+0x44>)
   d7272:	4906      	ldr	r1, [pc, #24]	; (d728c <_Z19__fetch_global_Wirev+0x48>)
   d7274:	4803      	ldr	r0, [pc, #12]	; (d7284 <_Z19__fetch_global_Wirev+0x40>)
   d7276:	f000 f80b 	bl	d7290 <__aeabi_atexit>
	return wire;
}
   d727a:	4802      	ldr	r0, [pc, #8]	; (d7284 <_Z19__fetch_global_Wirev+0x40>)
   d727c:	b007      	add	sp, #28
   d727e:	bd30      	pop	{r4, r5, pc}
   d7280:	2003e734 	.word	0x2003e734
   d7284:	2003e738 	.word	0x2003e738
   d7288:	2003e330 	.word	0x2003e330
   d728c:	000d6cc9 	.word	0x000d6cc9

000d7290 <__aeabi_atexit>:
   d7290:	460b      	mov	r3, r1
   d7292:	4601      	mov	r1, r0
   d7294:	4618      	mov	r0, r3
   d7296:	f002 b963 	b.w	d9560 <__cxa_atexit>
	...

000d729c <_ZSt15get_new_handlerv>:
   d729c:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <_ZSt15get_new_handlerv+0xc>)
   d729e:	6818      	ldr	r0, [r3, #0]
   d72a0:	f3bf 8f5f 	dmb	sy
   d72a4:	4770      	bx	lr
   d72a6:	bf00      	nop
   d72a8:	2003e74c 	.word	0x2003e74c

000d72ac <_ZdlPvj>:
   d72ac:	f7fc bef7 	b.w	d409e <_ZdlPv>

000d72b0 <_ZnajRKSt9nothrow_t>:
   d72b0:	f000 b800 	b.w	d72b4 <_ZnwjRKSt9nothrow_t>

000d72b4 <_ZnwjRKSt9nothrow_t>:
   d72b4:	b510      	push	{r4, lr}
   d72b6:	2800      	cmp	r0, #0
   d72b8:	bf14      	ite	ne
   d72ba:	4604      	movne	r4, r0
   d72bc:	2401      	moveq	r4, #1
   d72be:	4620      	mov	r0, r4
   d72c0:	f7fe fcca 	bl	d5c58 <malloc>
   d72c4:	b920      	cbnz	r0, d72d0 <_ZnwjRKSt9nothrow_t+0x1c>
   d72c6:	f7ff ffe9 	bl	d729c <_ZSt15get_new_handlerv>
   d72ca:	b108      	cbz	r0, d72d0 <_ZnwjRKSt9nothrow_t+0x1c>
   d72cc:	4780      	blx	r0
   d72ce:	e7f6      	b.n	d72be <_ZnwjRKSt9nothrow_t+0xa>
   d72d0:	bd10      	pop	{r4, pc}

000d72d2 <_ZSt25__throw_bad_function_callv>:
   d72d2:	b508      	push	{r3, lr}
   d72d4:	f7fe fcd8 	bl	d5c88 <abort>

000d72d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d72d8:	4b18      	ldr	r3, [pc, #96]	; (d733c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d1      	lsls	r1, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b16      	ldr	r3, [pc, #88]	; (d7340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d2      	lsls	r2, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b14      	ldr	r3, [pc, #80]	; (d7344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d0      	lsls	r0, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4b12      	ldr	r3, [pc, #72]	; (d7348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d72fe:	681a      	ldr	r2, [r3, #0]
   d7300:	07d1      	lsls	r1, r2, #31
   d7302:	bf5c      	itt	pl
   d7304:	2201      	movpl	r2, #1
   d7306:	601a      	strpl	r2, [r3, #0]
   d7308:	4b10      	ldr	r3, [pc, #64]	; (d734c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d730a:	681a      	ldr	r2, [r3, #0]
   d730c:	07d2      	lsls	r2, r2, #31
   d730e:	bf5c      	itt	pl
   d7310:	2201      	movpl	r2, #1
   d7312:	601a      	strpl	r2, [r3, #0]
   d7314:	4b0e      	ldr	r3, [pc, #56]	; (d7350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7316:	681a      	ldr	r2, [r3, #0]
   d7318:	07d0      	lsls	r0, r2, #31
   d731a:	bf5c      	itt	pl
   d731c:	2201      	movpl	r2, #1
   d731e:	601a      	strpl	r2, [r3, #0]
   d7320:	4b0c      	ldr	r3, [pc, #48]	; (d7354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	07d1      	lsls	r1, r2, #31
   d7326:	bf5c      	itt	pl
   d7328:	2201      	movpl	r2, #1
   d732a:	601a      	strpl	r2, [r3, #0]
   d732c:	4b0a      	ldr	r3, [pc, #40]	; (d7358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	07d2      	lsls	r2, r2, #31
   d7332:	bf5c      	itt	pl
   d7334:	2201      	movpl	r2, #1
   d7336:	601a      	strpl	r2, [r3, #0]
   d7338:	4770      	bx	lr
   d733a:	bf00      	nop
   d733c:	2003e76c 	.word	0x2003e76c
   d7340:	2003e768 	.word	0x2003e768
   d7344:	2003e764 	.word	0x2003e764
   d7348:	2003e760 	.word	0x2003e760
   d734c:	2003e75c 	.word	0x2003e75c
   d7350:	2003e758 	.word	0x2003e758
   d7354:	2003e754 	.word	0x2003e754
   d7358:	2003e750 	.word	0x2003e750

000d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d735c:	4b24      	ldr	r3, [pc, #144]	; (d73f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d735e:	681a      	ldr	r2, [r3, #0]
   d7360:	07d0      	lsls	r0, r2, #31
   d7362:	bf5c      	itt	pl
   d7364:	2201      	movpl	r2, #1
   d7366:	601a      	strpl	r2, [r3, #0]
   d7368:	4b22      	ldr	r3, [pc, #136]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d736a:	681a      	ldr	r2, [r3, #0]
   d736c:	07d1      	lsls	r1, r2, #31
   d736e:	bf5c      	itt	pl
   d7370:	2201      	movpl	r2, #1
   d7372:	601a      	strpl	r2, [r3, #0]
   d7374:	4b20      	ldr	r3, [pc, #128]	; (d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7376:	681a      	ldr	r2, [r3, #0]
   d7378:	07d2      	lsls	r2, r2, #31
   d737a:	bf5c      	itt	pl
   d737c:	2201      	movpl	r2, #1
   d737e:	601a      	strpl	r2, [r3, #0]
   d7380:	4b1e      	ldr	r3, [pc, #120]	; (d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7382:	681a      	ldr	r2, [r3, #0]
   d7384:	07d0      	lsls	r0, r2, #31
   d7386:	bf5c      	itt	pl
   d7388:	2201      	movpl	r2, #1
   d738a:	601a      	strpl	r2, [r3, #0]
   d738c:	4b1c      	ldr	r3, [pc, #112]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d738e:	681a      	ldr	r2, [r3, #0]
   d7390:	07d1      	lsls	r1, r2, #31
   d7392:	bf5c      	itt	pl
   d7394:	2201      	movpl	r2, #1
   d7396:	601a      	strpl	r2, [r3, #0]
   d7398:	4b1a      	ldr	r3, [pc, #104]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d739a:	681a      	ldr	r2, [r3, #0]
   d739c:	07d2      	lsls	r2, r2, #31
   d739e:	bf5c      	itt	pl
   d73a0:	2201      	movpl	r2, #1
   d73a2:	601a      	strpl	r2, [r3, #0]
   d73a4:	4b18      	ldr	r3, [pc, #96]	; (d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d73a6:	681a      	ldr	r2, [r3, #0]
   d73a8:	07d0      	lsls	r0, r2, #31
   d73aa:	bf5c      	itt	pl
   d73ac:	2201      	movpl	r2, #1
   d73ae:	601a      	strpl	r2, [r3, #0]
   d73b0:	4b16      	ldr	r3, [pc, #88]	; (d740c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d73b2:	681a      	ldr	r2, [r3, #0]
   d73b4:	07d1      	lsls	r1, r2, #31
   d73b6:	bf5c      	itt	pl
   d73b8:	2201      	movpl	r2, #1
   d73ba:	601a      	strpl	r2, [r3, #0]
   d73bc:	4b14      	ldr	r3, [pc, #80]	; (d7410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d73be:	681a      	ldr	r2, [r3, #0]
   d73c0:	07d2      	lsls	r2, r2, #31
   d73c2:	bf5c      	itt	pl
   d73c4:	2201      	movpl	r2, #1
   d73c6:	601a      	strpl	r2, [r3, #0]
   d73c8:	4b12      	ldr	r3, [pc, #72]	; (d7414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d73ca:	681a      	ldr	r2, [r3, #0]
   d73cc:	07d0      	lsls	r0, r2, #31
   d73ce:	bf5c      	itt	pl
   d73d0:	2201      	movpl	r2, #1
   d73d2:	601a      	strpl	r2, [r3, #0]
   d73d4:	4b10      	ldr	r3, [pc, #64]	; (d7418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d73d6:	681a      	ldr	r2, [r3, #0]
   d73d8:	07d1      	lsls	r1, r2, #31
   d73da:	bf5c      	itt	pl
   d73dc:	2201      	movpl	r2, #1
   d73de:	601a      	strpl	r2, [r3, #0]
   d73e0:	4b0e      	ldr	r3, [pc, #56]	; (d741c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d73e2:	681a      	ldr	r2, [r3, #0]
   d73e4:	07d2      	lsls	r2, r2, #31
   d73e6:	bf5c      	itt	pl
   d73e8:	2201      	movpl	r2, #1
   d73ea:	601a      	strpl	r2, [r3, #0]
   d73ec:	4770      	bx	lr
   d73ee:	bf00      	nop
   d73f0:	2003e79c 	.word	0x2003e79c
   d73f4:	2003e798 	.word	0x2003e798
   d73f8:	2003e794 	.word	0x2003e794
   d73fc:	2003e790 	.word	0x2003e790
   d7400:	2003e78c 	.word	0x2003e78c
   d7404:	2003e788 	.word	0x2003e788
   d7408:	2003e784 	.word	0x2003e784
   d740c:	2003e780 	.word	0x2003e780
   d7410:	2003e77c 	.word	0x2003e77c
   d7414:	2003e778 	.word	0x2003e778
   d7418:	2003e774 	.word	0x2003e774
   d741c:	2003e770 	.word	0x2003e770

000d7420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7420:	4b24      	ldr	r3, [pc, #144]	; (d74b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d0      	lsls	r0, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b22      	ldr	r3, [pc, #136]	; (d74b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d1      	lsls	r1, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b20      	ldr	r3, [pc, #128]	; (d74bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d2      	lsls	r2, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b1e      	ldr	r3, [pc, #120]	; (d74c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d0      	lsls	r0, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b1c      	ldr	r3, [pc, #112]	; (d74c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d1      	lsls	r1, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4b1a      	ldr	r3, [pc, #104]	; (d74c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d745e:	681a      	ldr	r2, [r3, #0]
   d7460:	07d2      	lsls	r2, r2, #31
   d7462:	bf5c      	itt	pl
   d7464:	2201      	movpl	r2, #1
   d7466:	601a      	strpl	r2, [r3, #0]
   d7468:	4b18      	ldr	r3, [pc, #96]	; (d74cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d746a:	681a      	ldr	r2, [r3, #0]
   d746c:	07d0      	lsls	r0, r2, #31
   d746e:	bf5c      	itt	pl
   d7470:	2201      	movpl	r2, #1
   d7472:	601a      	strpl	r2, [r3, #0]
   d7474:	4b16      	ldr	r3, [pc, #88]	; (d74d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7476:	681a      	ldr	r2, [r3, #0]
   d7478:	07d1      	lsls	r1, r2, #31
   d747a:	bf5c      	itt	pl
   d747c:	2201      	movpl	r2, #1
   d747e:	601a      	strpl	r2, [r3, #0]
   d7480:	4b14      	ldr	r3, [pc, #80]	; (d74d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7482:	681a      	ldr	r2, [r3, #0]
   d7484:	07d2      	lsls	r2, r2, #31
   d7486:	bf5c      	itt	pl
   d7488:	2201      	movpl	r2, #1
   d748a:	601a      	strpl	r2, [r3, #0]
   d748c:	4b12      	ldr	r3, [pc, #72]	; (d74d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d748e:	681a      	ldr	r2, [r3, #0]
   d7490:	07d0      	lsls	r0, r2, #31
   d7492:	bf5c      	itt	pl
   d7494:	2201      	movpl	r2, #1
   d7496:	601a      	strpl	r2, [r3, #0]
   d7498:	4b10      	ldr	r3, [pc, #64]	; (d74dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d749a:	681a      	ldr	r2, [r3, #0]
   d749c:	07d1      	lsls	r1, r2, #31
   d749e:	bf5c      	itt	pl
   d74a0:	2201      	movpl	r2, #1
   d74a2:	601a      	strpl	r2, [r3, #0]
   d74a4:	4b0e      	ldr	r3, [pc, #56]	; (d74e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d74a6:	681a      	ldr	r2, [r3, #0]
   d74a8:	07d2      	lsls	r2, r2, #31
   d74aa:	bf5c      	itt	pl
   d74ac:	2201      	movpl	r2, #1
   d74ae:	601a      	strpl	r2, [r3, #0]
   d74b0:	4770      	bx	lr
   d74b2:	bf00      	nop
   d74b4:	2003e7cc 	.word	0x2003e7cc
   d74b8:	2003e7c8 	.word	0x2003e7c8
   d74bc:	2003e7c4 	.word	0x2003e7c4
   d74c0:	2003e7c0 	.word	0x2003e7c0
   d74c4:	2003e7bc 	.word	0x2003e7bc
   d74c8:	2003e7b8 	.word	0x2003e7b8
   d74cc:	2003e7b4 	.word	0x2003e7b4
   d74d0:	2003e7b0 	.word	0x2003e7b0
   d74d4:	2003e7ac 	.word	0x2003e7ac
   d74d8:	2003e7a8 	.word	0x2003e7a8
   d74dc:	2003e7a4 	.word	0x2003e7a4
   d74e0:	2003e7a0 	.word	0x2003e7a0

000d74e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d74e4:	4b18      	ldr	r3, [pc, #96]	; (d7548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d74e6:	681a      	ldr	r2, [r3, #0]
   d74e8:	07d1      	lsls	r1, r2, #31
   d74ea:	bf5c      	itt	pl
   d74ec:	2201      	movpl	r2, #1
   d74ee:	601a      	strpl	r2, [r3, #0]
   d74f0:	4b16      	ldr	r3, [pc, #88]	; (d754c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d74f2:	681a      	ldr	r2, [r3, #0]
   d74f4:	07d2      	lsls	r2, r2, #31
   d74f6:	bf5c      	itt	pl
   d74f8:	2201      	movpl	r2, #1
   d74fa:	601a      	strpl	r2, [r3, #0]
   d74fc:	4b14      	ldr	r3, [pc, #80]	; (d7550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d74fe:	681a      	ldr	r2, [r3, #0]
   d7500:	07d0      	lsls	r0, r2, #31
   d7502:	bf5c      	itt	pl
   d7504:	2201      	movpl	r2, #1
   d7506:	601a      	strpl	r2, [r3, #0]
   d7508:	4b12      	ldr	r3, [pc, #72]	; (d7554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d750a:	681a      	ldr	r2, [r3, #0]
   d750c:	07d1      	lsls	r1, r2, #31
   d750e:	bf5c      	itt	pl
   d7510:	2201      	movpl	r2, #1
   d7512:	601a      	strpl	r2, [r3, #0]
   d7514:	4b10      	ldr	r3, [pc, #64]	; (d7558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7516:	681a      	ldr	r2, [r3, #0]
   d7518:	07d2      	lsls	r2, r2, #31
   d751a:	bf5c      	itt	pl
   d751c:	2201      	movpl	r2, #1
   d751e:	601a      	strpl	r2, [r3, #0]
   d7520:	4b0e      	ldr	r3, [pc, #56]	; (d755c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7522:	681a      	ldr	r2, [r3, #0]
   d7524:	07d0      	lsls	r0, r2, #31
   d7526:	bf5c      	itt	pl
   d7528:	2201      	movpl	r2, #1
   d752a:	601a      	strpl	r2, [r3, #0]
   d752c:	4b0c      	ldr	r3, [pc, #48]	; (d7560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d752e:	681a      	ldr	r2, [r3, #0]
   d7530:	07d1      	lsls	r1, r2, #31
   d7532:	bf5c      	itt	pl
   d7534:	2201      	movpl	r2, #1
   d7536:	601a      	strpl	r2, [r3, #0]
   d7538:	4b0a      	ldr	r3, [pc, #40]	; (d7564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d753a:	681a      	ldr	r2, [r3, #0]
   d753c:	07d2      	lsls	r2, r2, #31
   d753e:	bf5c      	itt	pl
   d7540:	2201      	movpl	r2, #1
   d7542:	601a      	strpl	r2, [r3, #0]
   d7544:	4770      	bx	lr
   d7546:	bf00      	nop
   d7548:	2003e7ec 	.word	0x2003e7ec
   d754c:	2003e7e8 	.word	0x2003e7e8
   d7550:	2003e7e4 	.word	0x2003e7e4
   d7554:	2003e7e0 	.word	0x2003e7e0
   d7558:	2003e7dc 	.word	0x2003e7dc
   d755c:	2003e7d8 	.word	0x2003e7d8
   d7560:	2003e7d4 	.word	0x2003e7d4
   d7564:	2003e7d0 	.word	0x2003e7d0

000d7568 <pow>:
   d7568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d756c:	ed2d 8b02 	vpush	{d8}
   d7570:	f8df a324 	ldr.w	sl, [pc, #804]	; d7898 <pow+0x330>
   d7574:	b08b      	sub	sp, #44	; 0x2c
   d7576:	ec57 6b10 	vmov	r6, r7, d0
   d757a:	ec55 4b11 	vmov	r4, r5, d1
   d757e:	f000 f98f 	bl	d78a0 <__ieee754_pow>
   d7582:	f99a 8000 	ldrsb.w	r8, [sl]
   d7586:	eeb0 8a40 	vmov.f32	s16, s0
   d758a:	eef0 8a60 	vmov.f32	s17, s1
   d758e:	f1b8 3fff 	cmp.w	r8, #4294967295
   d7592:	d048      	beq.n	d7626 <pow+0xbe>
   d7594:	4622      	mov	r2, r4
   d7596:	462b      	mov	r3, r5
   d7598:	4620      	mov	r0, r4
   d759a:	4629      	mov	r1, r5
   d759c:	f001 fd6e 	bl	d907c <__aeabi_dcmpun>
   d75a0:	4683      	mov	fp, r0
   d75a2:	2800      	cmp	r0, #0
   d75a4:	d13f      	bne.n	d7626 <pow+0xbe>
   d75a6:	4632      	mov	r2, r6
   d75a8:	463b      	mov	r3, r7
   d75aa:	4630      	mov	r0, r6
   d75ac:	4639      	mov	r1, r7
   d75ae:	f001 fd65 	bl	d907c <__aeabi_dcmpun>
   d75b2:	4681      	mov	r9, r0
   d75b4:	2800      	cmp	r0, #0
   d75b6:	f040 8090 	bne.w	d76da <pow+0x172>
   d75ba:	4630      	mov	r0, r6
   d75bc:	4639      	mov	r1, r7
   d75be:	2200      	movs	r2, #0
   d75c0:	2300      	movs	r3, #0
   d75c2:	f001 fd29 	bl	d9018 <__aeabi_dcmpeq>
   d75c6:	2800      	cmp	r0, #0
   d75c8:	d036      	beq.n	d7638 <pow+0xd0>
   d75ca:	2200      	movs	r2, #0
   d75cc:	2300      	movs	r3, #0
   d75ce:	4620      	mov	r0, r4
   d75d0:	4629      	mov	r1, r5
   d75d2:	f001 fd21 	bl	d9018 <__aeabi_dcmpeq>
   d75d6:	4683      	mov	fp, r0
   d75d8:	b1b8      	cbz	r0, d760a <pow+0xa2>
   d75da:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7870 <pow+0x308>
   d75de:	2201      	movs	r2, #1
   d75e0:	4ba9      	ldr	r3, [pc, #676]	; (d7888 <pow+0x320>)
   d75e2:	f8cd 9020 	str.w	r9, [sp, #32]
   d75e6:	9200      	str	r2, [sp, #0]
   d75e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d75ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d75f0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d75f4:	9301      	str	r3, [sp, #4]
   d75f6:	f1b8 0f00 	cmp.w	r8, #0
   d75fa:	d05b      	beq.n	d76b4 <pow+0x14c>
   d75fc:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7878 <pow+0x310>
   d7600:	b00b      	add	sp, #44	; 0x2c
   d7602:	ecbd 8b02 	vpop	{d8}
   d7606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d760a:	ec45 4b10 	vmov	d0, r4, r5
   d760e:	f000 ffa7 	bl	d8560 <finite>
   d7612:	b140      	cbz	r0, d7626 <pow+0xbe>
   d7614:	2200      	movs	r2, #0
   d7616:	2300      	movs	r3, #0
   d7618:	4620      	mov	r0, r4
   d761a:	4629      	mov	r1, r5
   d761c:	f001 fd06 	bl	d902c <__aeabi_dcmplt>
   d7620:	2800      	cmp	r0, #0
   d7622:	f040 80c5 	bne.w	d77b0 <pow+0x248>
   d7626:	eeb0 0a48 	vmov.f32	s0, s16
   d762a:	eef0 0a68 	vmov.f32	s1, s17
   d762e:	b00b      	add	sp, #44	; 0x2c
   d7630:	ecbd 8b02 	vpop	{d8}
   d7634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7638:	eeb0 0a48 	vmov.f32	s0, s16
   d763c:	eef0 0a68 	vmov.f32	s1, s17
   d7640:	f000 ff8e 	bl	d8560 <finite>
   d7644:	4680      	mov	r8, r0
   d7646:	2800      	cmp	r0, #0
   d7648:	d061      	beq.n	d770e <pow+0x1a6>
   d764a:	f04f 0800 	mov.w	r8, #0
   d764e:	f04f 0900 	mov.w	r9, #0
   d7652:	ec51 0b18 	vmov	r0, r1, d8
   d7656:	4642      	mov	r2, r8
   d7658:	464b      	mov	r3, r9
   d765a:	f001 fcdd 	bl	d9018 <__aeabi_dcmpeq>
   d765e:	2800      	cmp	r0, #0
   d7660:	d0e1      	beq.n	d7626 <pow+0xbe>
   d7662:	ec47 6b10 	vmov	d0, r6, r7
   d7666:	f000 ff7b 	bl	d8560 <finite>
   d766a:	2800      	cmp	r0, #0
   d766c:	d0db      	beq.n	d7626 <pow+0xbe>
   d766e:	ec45 4b10 	vmov	d0, r4, r5
   d7672:	f000 ff75 	bl	d8560 <finite>
   d7676:	2800      	cmp	r0, #0
   d7678:	d0d5      	beq.n	d7626 <pow+0xbe>
   d767a:	f99a 3000 	ldrsb.w	r3, [sl]
   d767e:	4a82      	ldr	r2, [pc, #520]	; (d7888 <pow+0x320>)
   d7680:	9201      	str	r2, [sp, #4]
   d7682:	2104      	movs	r1, #4
   d7684:	2200      	movs	r2, #0
   d7686:	2b02      	cmp	r3, #2
   d7688:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d768c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7690:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7694:	9100      	str	r1, [sp, #0]
   d7696:	9208      	str	r2, [sp, #32]
   d7698:	d003      	beq.n	d76a2 <pow+0x13a>
   d769a:	4668      	mov	r0, sp
   d769c:	f000 ff68 	bl	d8570 <matherr>
   d76a0:	b970      	cbnz	r0, d76c0 <pow+0x158>
   d76a2:	f7fe fb01 	bl	d5ca8 <__errno>
   d76a6:	2322      	movs	r3, #34	; 0x22
   d76a8:	6003      	str	r3, [r0, #0]
   d76aa:	e009      	b.n	d76c0 <pow+0x158>
   d76ac:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7870 <pow+0x308>
   d76b0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d76b4:	4668      	mov	r0, sp
   d76b6:	f000 ff5b 	bl	d8570 <matherr>
   d76ba:	2800      	cmp	r0, #0
   d76bc:	f000 808e 	beq.w	d77dc <pow+0x274>
   d76c0:	9b08      	ldr	r3, [sp, #32]
   d76c2:	b11b      	cbz	r3, d76cc <pow+0x164>
   d76c4:	f7fe faf0 	bl	d5ca8 <__errno>
   d76c8:	9b08      	ldr	r3, [sp, #32]
   d76ca:	6003      	str	r3, [r0, #0]
   d76cc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d76d0:	b00b      	add	sp, #44	; 0x2c
   d76d2:	ecbd 8b02 	vpop	{d8}
   d76d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76da:	2200      	movs	r2, #0
   d76dc:	2300      	movs	r3, #0
   d76de:	4620      	mov	r0, r4
   d76e0:	4629      	mov	r1, r5
   d76e2:	f001 fc99 	bl	d9018 <__aeabi_dcmpeq>
   d76e6:	2800      	cmp	r0, #0
   d76e8:	d09d      	beq.n	d7626 <pow+0xbe>
   d76ea:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7878 <pow+0x310>
   d76ee:	4b66      	ldr	r3, [pc, #408]	; (d7888 <pow+0x320>)
   d76f0:	f8cd b020 	str.w	fp, [sp, #32]
   d76f4:	2201      	movs	r2, #1
   d76f6:	f1b8 0f02 	cmp.w	r8, #2
   d76fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d76fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7702:	ed8d 0b06 	vstr	d0, [sp, #24]
   d7706:	e88d 000c 	stmia.w	sp, {r2, r3}
   d770a:	d1d3      	bne.n	d76b4 <pow+0x14c>
   d770c:	e78f      	b.n	d762e <pow+0xc6>
   d770e:	ec47 6b10 	vmov	d0, r6, r7
   d7712:	f000 ff25 	bl	d8560 <finite>
   d7716:	2800      	cmp	r0, #0
   d7718:	d097      	beq.n	d764a <pow+0xe2>
   d771a:	ec45 4b10 	vmov	d0, r4, r5
   d771e:	f000 ff1f 	bl	d8560 <finite>
   d7722:	2800      	cmp	r0, #0
   d7724:	d091      	beq.n	d764a <pow+0xe2>
   d7726:	ec53 2b18 	vmov	r2, r3, d8
   d772a:	ee18 0a10 	vmov	r0, s16
   d772e:	4619      	mov	r1, r3
   d7730:	f001 fca4 	bl	d907c <__aeabi_dcmpun>
   d7734:	2800      	cmp	r0, #0
   d7736:	d17c      	bne.n	d7832 <pow+0x2ca>
   d7738:	2303      	movs	r3, #3
   d773a:	f99a 8000 	ldrsb.w	r8, [sl]
   d773e:	9300      	str	r3, [sp, #0]
   d7740:	4b51      	ldr	r3, [pc, #324]	; (d7888 <pow+0x320>)
   d7742:	9008      	str	r0, [sp, #32]
   d7744:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7748:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d774c:	9301      	str	r3, [sp, #4]
   d774e:	f1b8 0f00 	cmp.w	r8, #0
   d7752:	d148      	bne.n	d77e6 <pow+0x27e>
   d7754:	f8df 9144 	ldr.w	r9, [pc, #324]	; d789c <pow+0x334>
   d7758:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d775c:	2200      	movs	r2, #0
   d775e:	2300      	movs	r3, #0
   d7760:	4630      	mov	r0, r6
   d7762:	4639      	mov	r1, r7
   d7764:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7768:	f001 fc60 	bl	d902c <__aeabi_dcmplt>
   d776c:	2800      	cmp	r0, #0
   d776e:	d094      	beq.n	d769a <pow+0x132>
   d7770:	2200      	movs	r2, #0
   d7772:	4b46      	ldr	r3, [pc, #280]	; (d788c <pow+0x324>)
   d7774:	4620      	mov	r0, r4
   d7776:	4629      	mov	r1, r5
   d7778:	f001 f9e6 	bl	d8b48 <__aeabi_dmul>
   d777c:	4604      	mov	r4, r0
   d777e:	460d      	mov	r5, r1
   d7780:	ec45 4b10 	vmov	d0, r4, r5
   d7784:	f000 ff00 	bl	d8588 <rint>
   d7788:	4620      	mov	r0, r4
   d778a:	ec53 2b10 	vmov	r2, r3, d0
   d778e:	4629      	mov	r1, r5
   d7790:	f001 fc42 	bl	d9018 <__aeabi_dcmpeq>
   d7794:	2800      	cmp	r0, #0
   d7796:	d149      	bne.n	d782c <pow+0x2c4>
   d7798:	4b3d      	ldr	r3, [pc, #244]	; (d7890 <pow+0x328>)
   d779a:	f99a 8000 	ldrsb.w	r8, [sl]
   d779e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d77a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d77a6:	f1b8 0f02 	cmp.w	r8, #2
   d77aa:	f47f af76 	bne.w	d769a <pow+0x132>
   d77ae:	e778      	b.n	d76a2 <pow+0x13a>
   d77b0:	4a35      	ldr	r2, [pc, #212]	; (d7888 <pow+0x320>)
   d77b2:	f99a 3000 	ldrsb.w	r3, [sl]
   d77b6:	f8cd b020 	str.w	fp, [sp, #32]
   d77ba:	2101      	movs	r1, #1
   d77bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d77c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d77c4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d77c8:	2b00      	cmp	r3, #0
   d77ca:	f43f af6f 	beq.w	d76ac <pow+0x144>
   d77ce:	4931      	ldr	r1, [pc, #196]	; (d7894 <pow+0x32c>)
   d77d0:	2000      	movs	r0, #0
   d77d2:	2b02      	cmp	r3, #2
   d77d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d77d8:	f47f af6c 	bne.w	d76b4 <pow+0x14c>
   d77dc:	f7fe fa64 	bl	d5ca8 <__errno>
   d77e0:	2321      	movs	r3, #33	; 0x21
   d77e2:	6003      	str	r3, [r0, #0]
   d77e4:	e76c      	b.n	d76c0 <pow+0x158>
   d77e6:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7880 <pow+0x318>
   d77ea:	2200      	movs	r2, #0
   d77ec:	2300      	movs	r3, #0
   d77ee:	4630      	mov	r0, r6
   d77f0:	4639      	mov	r1, r7
   d77f2:	ed8d 7b06 	vstr	d7, [sp, #24]
   d77f6:	f001 fc19 	bl	d902c <__aeabi_dcmplt>
   d77fa:	2800      	cmp	r0, #0
   d77fc:	d0d3      	beq.n	d77a6 <pow+0x23e>
   d77fe:	2200      	movs	r2, #0
   d7800:	4b22      	ldr	r3, [pc, #136]	; (d788c <pow+0x324>)
   d7802:	4620      	mov	r0, r4
   d7804:	4629      	mov	r1, r5
   d7806:	f001 f99f 	bl	d8b48 <__aeabi_dmul>
   d780a:	4604      	mov	r4, r0
   d780c:	460d      	mov	r5, r1
   d780e:	ec45 4b10 	vmov	d0, r4, r5
   d7812:	f000 feb9 	bl	d8588 <rint>
   d7816:	4620      	mov	r0, r4
   d7818:	ec53 2b10 	vmov	r2, r3, d0
   d781c:	4629      	mov	r1, r5
   d781e:	f001 fbfb 	bl	d9018 <__aeabi_dcmpeq>
   d7822:	b918      	cbnz	r0, d782c <pow+0x2c4>
   d7824:	4b1b      	ldr	r3, [pc, #108]	; (d7894 <pow+0x32c>)
   d7826:	2200      	movs	r2, #0
   d7828:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d782c:	f99a 8000 	ldrsb.w	r8, [sl]
   d7830:	e7b9      	b.n	d77a6 <pow+0x23e>
   d7832:	4b15      	ldr	r3, [pc, #84]	; (d7888 <pow+0x320>)
   d7834:	f99a 9000 	ldrsb.w	r9, [sl]
   d7838:	f8cd 8020 	str.w	r8, [sp, #32]
   d783c:	2201      	movs	r2, #1
   d783e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7842:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7846:	e88d 000c 	stmia.w	sp, {r2, r3}
   d784a:	f1b9 0f00 	cmp.w	r9, #0
   d784e:	f43f af2d 	beq.w	d76ac <pow+0x144>
   d7852:	2200      	movs	r2, #0
   d7854:	2300      	movs	r3, #0
   d7856:	4610      	mov	r0, r2
   d7858:	4619      	mov	r1, r3
   d785a:	f001 fa9f 	bl	d8d9c <__aeabi_ddiv>
   d785e:	f1b9 0f02 	cmp.w	r9, #2
   d7862:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7866:	d0b9      	beq.n	d77dc <pow+0x274>
   d7868:	e724      	b.n	d76b4 <pow+0x14c>
   d786a:	bf00      	nop
   d786c:	f3af 8000 	nop.w
	...
   d787c:	3ff00000 	.word	0x3ff00000
   d7880:	00000000 	.word	0x00000000
   d7884:	7ff00000 	.word	0x7ff00000
   d7888:	000d9a90 	.word	0x000d9a90
   d788c:	3fe00000 	.word	0x3fe00000
   d7890:	c7efffff 	.word	0xc7efffff
   d7894:	fff00000 	.word	0xfff00000
   d7898:	2003e2c8 	.word	0x2003e2c8
   d789c:	47efffff 	.word	0x47efffff

000d78a0 <__ieee754_pow>:
   d78a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78a4:	ec51 0b11 	vmov	r0, r1, d1
   d78a8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d78ac:	ea58 0400 	orrs.w	r4, r8, r0
   d78b0:	b093      	sub	sp, #76	; 0x4c
   d78b2:	d03c      	beq.n	d792e <__ieee754_pow+0x8e>
   d78b4:	ec53 2b10 	vmov	r2, r3, d0
   d78b8:	4e6d      	ldr	r6, [pc, #436]	; (d7a70 <__ieee754_pow+0x1d0>)
   d78ba:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d78be:	42b4      	cmp	r4, r6
   d78c0:	ee10 aa10 	vmov	sl, s0
   d78c4:	461d      	mov	r5, r3
   d78c6:	dc2b      	bgt.n	d7920 <__ieee754_pow+0x80>
   d78c8:	4689      	mov	r9, r1
   d78ca:	ee11 ea10 	vmov	lr, s2
   d78ce:	d026      	beq.n	d791e <__ieee754_pow+0x7e>
   d78d0:	45b0      	cmp	r8, r6
   d78d2:	dc25      	bgt.n	d7920 <__ieee754_pow+0x80>
   d78d4:	4e66      	ldr	r6, [pc, #408]	; (d7a70 <__ieee754_pow+0x1d0>)
   d78d6:	45b0      	cmp	r8, r6
   d78d8:	d077      	beq.n	d79ca <__ieee754_pow+0x12a>
   d78da:	2d00      	cmp	r5, #0
   d78dc:	4616      	mov	r6, r2
   d78de:	461f      	mov	r7, r3
   d78e0:	e9cd 0100 	strd	r0, r1, [sp]
   d78e4:	db75      	blt.n	d79d2 <__ieee754_pow+0x132>
   d78e6:	f04f 0b00 	mov.w	fp, #0
   d78ea:	f1be 0f00 	cmp.w	lr, #0
   d78ee:	d12d      	bne.n	d794c <__ieee754_pow+0xac>
   d78f0:	4b5f      	ldr	r3, [pc, #380]	; (d7a70 <__ieee754_pow+0x1d0>)
   d78f2:	4598      	cmp	r8, r3
   d78f4:	f000 8089 	beq.w	d7a0a <__ieee754_pow+0x16a>
   d78f8:	4b5e      	ldr	r3, [pc, #376]	; (d7a74 <__ieee754_pow+0x1d4>)
   d78fa:	4598      	cmp	r8, r3
   d78fc:	d05e      	beq.n	d79bc <__ieee754_pow+0x11c>
   d78fe:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d7902:	f000 83de 	beq.w	d80c2 <__ieee754_pow+0x822>
   d7906:	4b5c      	ldr	r3, [pc, #368]	; (d7a78 <__ieee754_pow+0x1d8>)
   d7908:	4599      	cmp	r9, r3
   d790a:	d11f      	bne.n	d794c <__ieee754_pow+0xac>
   d790c:	2d00      	cmp	r5, #0
   d790e:	db1d      	blt.n	d794c <__ieee754_pow+0xac>
   d7910:	ec47 6b10 	vmov	d0, r6, r7
   d7914:	b013      	add	sp, #76	; 0x4c
   d7916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d791a:	f000 bd49 	b.w	d83b0 <__ieee754_sqrt>
   d791e:	b15a      	cbz	r2, d7938 <__ieee754_pow+0x98>
   d7920:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7924:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7928:	ea54 030a 	orrs.w	r3, r4, sl
   d792c:	d106      	bne.n	d793c <__ieee754_pow+0x9c>
   d792e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7a58 <__ieee754_pow+0x1b8>
   d7932:	b013      	add	sp, #76	; 0x4c
   d7934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7938:	45a0      	cmp	r8, r4
   d793a:	ddcb      	ble.n	d78d4 <__ieee754_pow+0x34>
   d793c:	484f      	ldr	r0, [pc, #316]	; (d7a7c <__ieee754_pow+0x1dc>)
   d793e:	b013      	add	sp, #76	; 0x4c
   d7940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7944:	f000 be18 	b.w	d8578 <nan>
   d7948:	f04f 0b00 	mov.w	fp, #0
   d794c:	ec47 6b10 	vmov	d0, r6, r7
   d7950:	f000 fdfe 	bl	d8550 <fabs>
   d7954:	ec51 0b10 	vmov	r0, r1, d0
   d7958:	f1ba 0f00 	cmp.w	sl, #0
   d795c:	d01e      	beq.n	d799c <__ieee754_pow+0xfc>
   d795e:	0fed      	lsrs	r5, r5, #31
   d7960:	f105 3aff 	add.w	sl, r5, #4294967295
   d7964:	ea5b 030a 	orrs.w	r3, fp, sl
   d7968:	d063      	beq.n	d7a32 <__ieee754_pow+0x192>
   d796a:	4b45      	ldr	r3, [pc, #276]	; (d7a80 <__ieee754_pow+0x1e0>)
   d796c:	4598      	cmp	r8, r3
   d796e:	f340 808d 	ble.w	d7a8c <__ieee754_pow+0x1ec>
   d7972:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7976:	4598      	cmp	r8, r3
   d7978:	f340 8438 	ble.w	d81ec <__ieee754_pow+0x94c>
   d797c:	4b41      	ldr	r3, [pc, #260]	; (d7a84 <__ieee754_pow+0x1e4>)
   d797e:	429c      	cmp	r4, r3
   d7980:	dd62      	ble.n	d7a48 <__ieee754_pow+0x1a8>
   d7982:	f1b9 0f00 	cmp.w	r9, #0
   d7986:	dd62      	ble.n	d7a4e <__ieee754_pow+0x1ae>
   d7988:	a335      	add	r3, pc, #212	; (adr r3, d7a60 <__ieee754_pow+0x1c0>)
   d798a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d798e:	4610      	mov	r0, r2
   d7990:	4619      	mov	r1, r3
   d7992:	f001 f8d9 	bl	d8b48 <__aeabi_dmul>
   d7996:	ec41 0b10 	vmov	d0, r0, r1
   d799a:	e7ca      	b.n	d7932 <__ieee754_pow+0x92>
   d799c:	b124      	cbz	r4, d79a8 <__ieee754_pow+0x108>
   d799e:	4b35      	ldr	r3, [pc, #212]	; (d7a74 <__ieee754_pow+0x1d4>)
   d79a0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d79a4:	429a      	cmp	r2, r3
   d79a6:	d1da      	bne.n	d795e <__ieee754_pow+0xbe>
   d79a8:	f1b9 0f00 	cmp.w	r9, #0
   d79ac:	f2c0 83cb 	blt.w	d8146 <__ieee754_pow+0x8a6>
   d79b0:	2d00      	cmp	r5, #0
   d79b2:	f2c0 8374 	blt.w	d809e <__ieee754_pow+0x7fe>
   d79b6:	ec41 0b10 	vmov	d0, r0, r1
   d79ba:	e7ba      	b.n	d7932 <__ieee754_pow+0x92>
   d79bc:	f1b9 0f00 	cmp.w	r9, #0
   d79c0:	f2c0 847a 	blt.w	d82b8 <__ieee754_pow+0xa18>
   d79c4:	ec47 6b10 	vmov	d0, r6, r7
   d79c8:	e7b3      	b.n	d7932 <__ieee754_pow+0x92>
   d79ca:	f1be 0f00 	cmp.w	lr, #0
   d79ce:	d084      	beq.n	d78da <__ieee754_pow+0x3a>
   d79d0:	e7a6      	b.n	d7920 <__ieee754_pow+0x80>
   d79d2:	4b2d      	ldr	r3, [pc, #180]	; (d7a88 <__ieee754_pow+0x1e8>)
   d79d4:	4598      	cmp	r8, r3
   d79d6:	dc29      	bgt.n	d7a2c <__ieee754_pow+0x18c>
   d79d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d79dc:	4598      	cmp	r8, r3
   d79de:	dd82      	ble.n	d78e6 <__ieee754_pow+0x46>
   d79e0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d79e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d79e8:	2b14      	cmp	r3, #20
   d79ea:	f340 847f 	ble.w	d82ec <__ieee754_pow+0xa4c>
   d79ee:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d79f2:	fa2e f203 	lsr.w	r2, lr, r3
   d79f6:	fa02 f303 	lsl.w	r3, r2, r3
   d79fa:	459e      	cmp	lr, r3
   d79fc:	f47f af73 	bne.w	d78e6 <__ieee754_pow+0x46>
   d7a00:	f002 0201 	and.w	r2, r2, #1
   d7a04:	f1c2 0b02 	rsb	fp, r2, #2
   d7a08:	e76f      	b.n	d78ea <__ieee754_pow+0x4a>
   d7a0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d7a0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d7a12:	ea53 030a 	orrs.w	r3, r3, sl
   d7a16:	d08a      	beq.n	d792e <__ieee754_pow+0x8e>
   d7a18:	4b1a      	ldr	r3, [pc, #104]	; (d7a84 <__ieee754_pow+0x1e4>)
   d7a1a:	429c      	cmp	r4, r3
   d7a1c:	f340 8385 	ble.w	d812a <__ieee754_pow+0x88a>
   d7a20:	f1b9 0f00 	cmp.w	r9, #0
   d7a24:	db13      	blt.n	d7a4e <__ieee754_pow+0x1ae>
   d7a26:	ed9d 0b00 	vldr	d0, [sp]
   d7a2a:	e782      	b.n	d7932 <__ieee754_pow+0x92>
   d7a2c:	f04f 0b02 	mov.w	fp, #2
   d7a30:	e75b      	b.n	d78ea <__ieee754_pow+0x4a>
   d7a32:	4632      	mov	r2, r6
   d7a34:	463b      	mov	r3, r7
   d7a36:	4610      	mov	r0, r2
   d7a38:	4619      	mov	r1, r3
   d7a3a:	f000 fed1 	bl	d87e0 <__aeabi_dsub>
   d7a3e:	4602      	mov	r2, r0
   d7a40:	460b      	mov	r3, r1
   d7a42:	f001 f9ab 	bl	d8d9c <__aeabi_ddiv>
   d7a46:	e7b6      	b.n	d79b6 <__ieee754_pow+0x116>
   d7a48:	f1b9 0f00 	cmp.w	r9, #0
   d7a4c:	db9c      	blt.n	d7988 <__ieee754_pow+0xe8>
   d7a4e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7a68 <__ieee754_pow+0x1c8>
   d7a52:	e76e      	b.n	d7932 <__ieee754_pow+0x92>
   d7a54:	f3af 8000 	nop.w
   d7a58:	00000000 	.word	0x00000000
   d7a5c:	3ff00000 	.word	0x3ff00000
   d7a60:	8800759c 	.word	0x8800759c
   d7a64:	7e37e43c 	.word	0x7e37e43c
	...
   d7a70:	7ff00000 	.word	0x7ff00000
   d7a74:	3ff00000 	.word	0x3ff00000
   d7a78:	3fe00000 	.word	0x3fe00000
   d7a7c:	000d9a94 	.word	0x000d9a94
   d7a80:	41e00000 	.word	0x41e00000
   d7a84:	3fefffff 	.word	0x3fefffff
   d7a88:	433fffff 	.word	0x433fffff
   d7a8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7a90:	f04f 0200 	mov.w	r2, #0
   d7a94:	da05      	bge.n	d7aa2 <__ieee754_pow+0x202>
   d7a96:	4bd6      	ldr	r3, [pc, #856]	; (d7df0 <__ieee754_pow+0x550>)
   d7a98:	f001 f856 	bl	d8b48 <__aeabi_dmul>
   d7a9c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7aa0:	460c      	mov	r4, r1
   d7aa2:	1523      	asrs	r3, r4, #20
   d7aa4:	4ed3      	ldr	r6, [pc, #844]	; (d7df4 <__ieee754_pow+0x554>)
   d7aa6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d7aaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7aae:	4413      	add	r3, r2
   d7ab0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d7ab4:	42b4      	cmp	r4, r6
   d7ab6:	461a      	mov	r2, r3
   d7ab8:	930d      	str	r3, [sp, #52]	; 0x34
   d7aba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d7abe:	f340 8349 	ble.w	d8154 <__ieee754_pow+0x8b4>
   d7ac2:	4bcd      	ldr	r3, [pc, #820]	; (d7df8 <__ieee754_pow+0x558>)
   d7ac4:	429c      	cmp	r4, r3
   d7ac6:	f340 842d 	ble.w	d8324 <__ieee754_pow+0xa84>
   d7aca:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7d98 <__ieee754_pow+0x4f8>
   d7ace:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7ad2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7ad6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7da0 <__ieee754_pow+0x500>
   d7ada:	4613      	mov	r3, r2
   d7adc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7ae0:	3301      	adds	r3, #1
   d7ae2:	930d      	str	r3, [sp, #52]	; 0x34
   d7ae4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7ae8:	f04f 0800 	mov.w	r8, #0
   d7aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7af0:	4629      	mov	r1, r5
   d7af2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7af6:	f000 fe73 	bl	d87e0 <__aeabi_dsub>
   d7afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7afe:	4606      	mov	r6, r0
   d7b00:	460f      	mov	r7, r1
   d7b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7b06:	f000 fe6d 	bl	d87e4 <__adddf3>
   d7b0a:	4602      	mov	r2, r0
   d7b0c:	460b      	mov	r3, r1
   d7b0e:	2000      	movs	r0, #0
   d7b10:	49ba      	ldr	r1, [pc, #744]	; (d7dfc <__ieee754_pow+0x55c>)
   d7b12:	f001 f943 	bl	d8d9c <__aeabi_ddiv>
   d7b16:	4603      	mov	r3, r0
   d7b18:	460c      	mov	r4, r1
   d7b1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7b1e:	4602      	mov	r2, r0
   d7b20:	460b      	mov	r3, r1
   d7b22:	4630      	mov	r0, r6
   d7b24:	4639      	mov	r1, r7
   d7b26:	f001 f80f 	bl	d8b48 <__aeabi_dmul>
   d7b2a:	106b      	asrs	r3, r5, #1
   d7b2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7b30:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d7b34:	eb03 0508 	add.w	r5, r3, r8
   d7b38:	460a      	mov	r2, r1
   d7b3a:	2300      	movs	r3, #0
   d7b3c:	4601      	mov	r1, r0
   d7b3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7b42:	9302      	str	r3, [sp, #8]
   d7b44:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7b48:	2400      	movs	r4, #0
   d7b4a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7b4e:	462b      	mov	r3, r5
   d7b50:	4622      	mov	r2, r4
   d7b52:	4640      	mov	r0, r8
   d7b54:	4649      	mov	r1, r9
   d7b56:	f000 fff7 	bl	d8b48 <__aeabi_dmul>
   d7b5a:	4602      	mov	r2, r0
   d7b5c:	460b      	mov	r3, r1
   d7b5e:	4630      	mov	r0, r6
   d7b60:	4639      	mov	r1, r7
   d7b62:	f000 fe3d 	bl	d87e0 <__aeabi_dsub>
   d7b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7b6a:	4606      	mov	r6, r0
   d7b6c:	460f      	mov	r7, r1
   d7b6e:	4620      	mov	r0, r4
   d7b70:	4629      	mov	r1, r5
   d7b72:	f000 fe35 	bl	d87e0 <__aeabi_dsub>
   d7b76:	4602      	mov	r2, r0
   d7b78:	460b      	mov	r3, r1
   d7b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7b7e:	f000 fe2f 	bl	d87e0 <__aeabi_dsub>
   d7b82:	4642      	mov	r2, r8
   d7b84:	464b      	mov	r3, r9
   d7b86:	f000 ffdf 	bl	d8b48 <__aeabi_dmul>
   d7b8a:	4602      	mov	r2, r0
   d7b8c:	460b      	mov	r3, r1
   d7b8e:	4630      	mov	r0, r6
   d7b90:	4639      	mov	r1, r7
   d7b92:	f000 fe25 	bl	d87e0 <__aeabi_dsub>
   d7b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d7b9a:	f000 ffd5 	bl	d8b48 <__aeabi_dmul>
   d7b9e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d7ba2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7ba6:	4622      	mov	r2, r4
   d7ba8:	462b      	mov	r3, r5
   d7baa:	4620      	mov	r0, r4
   d7bac:	4629      	mov	r1, r5
   d7bae:	f000 ffcb 	bl	d8b48 <__aeabi_dmul>
   d7bb2:	a37d      	add	r3, pc, #500	; (adr r3, d7da8 <__ieee754_pow+0x508>)
   d7bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bb8:	4604      	mov	r4, r0
   d7bba:	460d      	mov	r5, r1
   d7bbc:	f000 ffc4 	bl	d8b48 <__aeabi_dmul>
   d7bc0:	a37b      	add	r3, pc, #492	; (adr r3, d7db0 <__ieee754_pow+0x510>)
   d7bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bc6:	f000 fe0d 	bl	d87e4 <__adddf3>
   d7bca:	4622      	mov	r2, r4
   d7bcc:	462b      	mov	r3, r5
   d7bce:	f000 ffbb 	bl	d8b48 <__aeabi_dmul>
   d7bd2:	a379      	add	r3, pc, #484	; (adr r3, d7db8 <__ieee754_pow+0x518>)
   d7bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bd8:	f000 fe04 	bl	d87e4 <__adddf3>
   d7bdc:	4622      	mov	r2, r4
   d7bde:	462b      	mov	r3, r5
   d7be0:	f000 ffb2 	bl	d8b48 <__aeabi_dmul>
   d7be4:	a376      	add	r3, pc, #472	; (adr r3, d7dc0 <__ieee754_pow+0x520>)
   d7be6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bea:	f000 fdfb 	bl	d87e4 <__adddf3>
   d7bee:	4622      	mov	r2, r4
   d7bf0:	462b      	mov	r3, r5
   d7bf2:	f000 ffa9 	bl	d8b48 <__aeabi_dmul>
   d7bf6:	a374      	add	r3, pc, #464	; (adr r3, d7dc8 <__ieee754_pow+0x528>)
   d7bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bfc:	f000 fdf2 	bl	d87e4 <__adddf3>
   d7c00:	4622      	mov	r2, r4
   d7c02:	462b      	mov	r3, r5
   d7c04:	f000 ffa0 	bl	d8b48 <__aeabi_dmul>
   d7c08:	a371      	add	r3, pc, #452	; (adr r3, d7dd0 <__ieee754_pow+0x530>)
   d7c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c0e:	f000 fde9 	bl	d87e4 <__adddf3>
   d7c12:	4622      	mov	r2, r4
   d7c14:	4606      	mov	r6, r0
   d7c16:	460f      	mov	r7, r1
   d7c18:	462b      	mov	r3, r5
   d7c1a:	4620      	mov	r0, r4
   d7c1c:	4629      	mov	r1, r5
   d7c1e:	f000 ff93 	bl	d8b48 <__aeabi_dmul>
   d7c22:	4602      	mov	r2, r0
   d7c24:	460b      	mov	r3, r1
   d7c26:	4630      	mov	r0, r6
   d7c28:	4639      	mov	r1, r7
   d7c2a:	f000 ff8d 	bl	d8b48 <__aeabi_dmul>
   d7c2e:	4642      	mov	r2, r8
   d7c30:	4604      	mov	r4, r0
   d7c32:	460d      	mov	r5, r1
   d7c34:	464b      	mov	r3, r9
   d7c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7c3a:	f000 fdd3 	bl	d87e4 <__adddf3>
   d7c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7c42:	f000 ff81 	bl	d8b48 <__aeabi_dmul>
   d7c46:	4622      	mov	r2, r4
   d7c48:	462b      	mov	r3, r5
   d7c4a:	f000 fdcb 	bl	d87e4 <__adddf3>
   d7c4e:	4642      	mov	r2, r8
   d7c50:	4606      	mov	r6, r0
   d7c52:	460f      	mov	r7, r1
   d7c54:	464b      	mov	r3, r9
   d7c56:	4640      	mov	r0, r8
   d7c58:	4649      	mov	r1, r9
   d7c5a:	f000 ff75 	bl	d8b48 <__aeabi_dmul>
   d7c5e:	2200      	movs	r2, #0
   d7c60:	4b67      	ldr	r3, [pc, #412]	; (d7e00 <__ieee754_pow+0x560>)
   d7c62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7c66:	f000 fdbd 	bl	d87e4 <__adddf3>
   d7c6a:	4632      	mov	r2, r6
   d7c6c:	463b      	mov	r3, r7
   d7c6e:	f000 fdb9 	bl	d87e4 <__adddf3>
   d7c72:	9802      	ldr	r0, [sp, #8]
   d7c74:	460d      	mov	r5, r1
   d7c76:	4604      	mov	r4, r0
   d7c78:	4622      	mov	r2, r4
   d7c7a:	462b      	mov	r3, r5
   d7c7c:	4640      	mov	r0, r8
   d7c7e:	4649      	mov	r1, r9
   d7c80:	f000 ff62 	bl	d8b48 <__aeabi_dmul>
   d7c84:	2200      	movs	r2, #0
   d7c86:	4680      	mov	r8, r0
   d7c88:	4689      	mov	r9, r1
   d7c8a:	4b5d      	ldr	r3, [pc, #372]	; (d7e00 <__ieee754_pow+0x560>)
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	4629      	mov	r1, r5
   d7c90:	f000 fda6 	bl	d87e0 <__aeabi_dsub>
   d7c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7c98:	f000 fda2 	bl	d87e0 <__aeabi_dsub>
   d7c9c:	4602      	mov	r2, r0
   d7c9e:	460b      	mov	r3, r1
   d7ca0:	4630      	mov	r0, r6
   d7ca2:	4639      	mov	r1, r7
   d7ca4:	f000 fd9c 	bl	d87e0 <__aeabi_dsub>
   d7ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7cac:	f000 ff4c 	bl	d8b48 <__aeabi_dmul>
   d7cb0:	4622      	mov	r2, r4
   d7cb2:	4606      	mov	r6, r0
   d7cb4:	460f      	mov	r7, r1
   d7cb6:	462b      	mov	r3, r5
   d7cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7cbc:	f000 ff44 	bl	d8b48 <__aeabi_dmul>
   d7cc0:	4602      	mov	r2, r0
   d7cc2:	460b      	mov	r3, r1
   d7cc4:	4630      	mov	r0, r6
   d7cc6:	4639      	mov	r1, r7
   d7cc8:	f000 fd8c 	bl	d87e4 <__adddf3>
   d7ccc:	4606      	mov	r6, r0
   d7cce:	460f      	mov	r7, r1
   d7cd0:	4602      	mov	r2, r0
   d7cd2:	460b      	mov	r3, r1
   d7cd4:	4640      	mov	r0, r8
   d7cd6:	4649      	mov	r1, r9
   d7cd8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7cdc:	f000 fd82 	bl	d87e4 <__adddf3>
   d7ce0:	9802      	ldr	r0, [sp, #8]
   d7ce2:	a33d      	add	r3, pc, #244	; (adr r3, d7dd8 <__ieee754_pow+0x538>)
   d7ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ce8:	4604      	mov	r4, r0
   d7cea:	460d      	mov	r5, r1
   d7cec:	f000 ff2c 	bl	d8b48 <__aeabi_dmul>
   d7cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7cf4:	4680      	mov	r8, r0
   d7cf6:	4689      	mov	r9, r1
   d7cf8:	4620      	mov	r0, r4
   d7cfa:	4629      	mov	r1, r5
   d7cfc:	f000 fd70 	bl	d87e0 <__aeabi_dsub>
   d7d00:	4602      	mov	r2, r0
   d7d02:	460b      	mov	r3, r1
   d7d04:	4630      	mov	r0, r6
   d7d06:	4639      	mov	r1, r7
   d7d08:	f000 fd6a 	bl	d87e0 <__aeabi_dsub>
   d7d0c:	a334      	add	r3, pc, #208	; (adr r3, d7de0 <__ieee754_pow+0x540>)
   d7d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d12:	f000 ff19 	bl	d8b48 <__aeabi_dmul>
   d7d16:	a334      	add	r3, pc, #208	; (adr r3, d7de8 <__ieee754_pow+0x548>)
   d7d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d1c:	4606      	mov	r6, r0
   d7d1e:	460f      	mov	r7, r1
   d7d20:	4620      	mov	r0, r4
   d7d22:	4629      	mov	r1, r5
   d7d24:	f000 ff10 	bl	d8b48 <__aeabi_dmul>
   d7d28:	4602      	mov	r2, r0
   d7d2a:	460b      	mov	r3, r1
   d7d2c:	4630      	mov	r0, r6
   d7d2e:	4639      	mov	r1, r7
   d7d30:	f000 fd58 	bl	d87e4 <__adddf3>
   d7d34:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7d38:	f000 fd54 	bl	d87e4 <__adddf3>
   d7d3c:	4606      	mov	r6, r0
   d7d3e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7d40:	460f      	mov	r7, r1
   d7d42:	f000 fe9b 	bl	d8a7c <__aeabi_i2d>
   d7d46:	4632      	mov	r2, r6
   d7d48:	4604      	mov	r4, r0
   d7d4a:	460d      	mov	r5, r1
   d7d4c:	463b      	mov	r3, r7
   d7d4e:	4640      	mov	r0, r8
   d7d50:	4649      	mov	r1, r9
   d7d52:	f000 fd47 	bl	d87e4 <__adddf3>
   d7d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7d5a:	f000 fd43 	bl	d87e4 <__adddf3>
   d7d5e:	4622      	mov	r2, r4
   d7d60:	462b      	mov	r3, r5
   d7d62:	f000 fd3f 	bl	d87e4 <__adddf3>
   d7d66:	9802      	ldr	r0, [sp, #8]
   d7d68:	4622      	mov	r2, r4
   d7d6a:	462b      	mov	r3, r5
   d7d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7d70:	f000 fd36 	bl	d87e0 <__aeabi_dsub>
   d7d74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7d78:	f000 fd32 	bl	d87e0 <__aeabi_dsub>
   d7d7c:	4642      	mov	r2, r8
   d7d7e:	464b      	mov	r3, r9
   d7d80:	f000 fd2e 	bl	d87e0 <__aeabi_dsub>
   d7d84:	4602      	mov	r2, r0
   d7d86:	460b      	mov	r3, r1
   d7d88:	4630      	mov	r0, r6
   d7d8a:	4639      	mov	r1, r7
   d7d8c:	f000 fd28 	bl	d87e0 <__aeabi_dsub>
   d7d90:	4680      	mov	r8, r0
   d7d92:	4689      	mov	r9, r1
   d7d94:	e036      	b.n	d7e04 <__ieee754_pow+0x564>
   d7d96:	bf00      	nop
	...
   d7da4:	3ff00000 	.word	0x3ff00000
   d7da8:	4a454eef 	.word	0x4a454eef
   d7dac:	3fca7e28 	.word	0x3fca7e28
   d7db0:	93c9db65 	.word	0x93c9db65
   d7db4:	3fcd864a 	.word	0x3fcd864a
   d7db8:	a91d4101 	.word	0xa91d4101
   d7dbc:	3fd17460 	.word	0x3fd17460
   d7dc0:	518f264d 	.word	0x518f264d
   d7dc4:	3fd55555 	.word	0x3fd55555
   d7dc8:	db6fabff 	.word	0xdb6fabff
   d7dcc:	3fdb6db6 	.word	0x3fdb6db6
   d7dd0:	33333303 	.word	0x33333303
   d7dd4:	3fe33333 	.word	0x3fe33333
   d7dd8:	e0000000 	.word	0xe0000000
   d7ddc:	3feec709 	.word	0x3feec709
   d7de0:	dc3a03fd 	.word	0xdc3a03fd
   d7de4:	3feec709 	.word	0x3feec709
   d7de8:	145b01f5 	.word	0x145b01f5
   d7dec:	be3e2fe0 	.word	0xbe3e2fe0
   d7df0:	43400000 	.word	0x43400000
   d7df4:	0003988e 	.word	0x0003988e
   d7df8:	000bb679 	.word	0x000bb679
   d7dfc:	3ff00000 	.word	0x3ff00000
   d7e00:	40080000 	.word	0x40080000
   d7e04:	f10b 33ff 	add.w	r3, fp, #4294967295
   d7e08:	ea53 030a 	orrs.w	r3, r3, sl
   d7e0c:	f000 8188 	beq.w	d8120 <__ieee754_pow+0x880>
   d7e10:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d8170 <__ieee754_pow+0x8d0>
   d7e14:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7e18:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7e1c:	4653      	mov	r3, sl
   d7e1e:	465c      	mov	r4, fp
   d7e20:	e9cd 3400 	strd	r3, r4, [sp]
   d7e24:	2300      	movs	r3, #0
   d7e26:	9300      	str	r3, [sp, #0]
   d7e28:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7e2c:	4650      	mov	r0, sl
   d7e2e:	4622      	mov	r2, r4
   d7e30:	462b      	mov	r3, r5
   d7e32:	4659      	mov	r1, fp
   d7e34:	f000 fcd4 	bl	d87e0 <__aeabi_dsub>
   d7e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7e3c:	f000 fe84 	bl	d8b48 <__aeabi_dmul>
   d7e40:	4652      	mov	r2, sl
   d7e42:	4606      	mov	r6, r0
   d7e44:	460f      	mov	r7, r1
   d7e46:	465b      	mov	r3, fp
   d7e48:	4640      	mov	r0, r8
   d7e4a:	4649      	mov	r1, r9
   d7e4c:	f000 fe7c 	bl	d8b48 <__aeabi_dmul>
   d7e50:	4602      	mov	r2, r0
   d7e52:	460b      	mov	r3, r1
   d7e54:	4630      	mov	r0, r6
   d7e56:	4639      	mov	r1, r7
   d7e58:	f000 fcc4 	bl	d87e4 <__adddf3>
   d7e5c:	4622      	mov	r2, r4
   d7e5e:	4680      	mov	r8, r0
   d7e60:	4689      	mov	r9, r1
   d7e62:	462b      	mov	r3, r5
   d7e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7e68:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7e6c:	f000 fe6c 	bl	d8b48 <__aeabi_dmul>
   d7e70:	460b      	mov	r3, r1
   d7e72:	4602      	mov	r2, r0
   d7e74:	4606      	mov	r6, r0
   d7e76:	460f      	mov	r7, r1
   d7e78:	4640      	mov	r0, r8
   d7e7a:	4649      	mov	r1, r9
   d7e7c:	f000 fcb2 	bl	d87e4 <__adddf3>
   d7e80:	4bd5      	ldr	r3, [pc, #852]	; (d81d8 <__ieee754_pow+0x938>)
   d7e82:	4299      	cmp	r1, r3
   d7e84:	4604      	mov	r4, r0
   d7e86:	460d      	mov	r5, r1
   d7e88:	468a      	mov	sl, r1
   d7e8a:	f340 8123 	ble.w	d80d4 <__ieee754_pow+0x834>
   d7e8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7e92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7e96:	4303      	orrs	r3, r0
   d7e98:	f040 8218 	bne.w	d82cc <__ieee754_pow+0xa2c>
   d7e9c:	a3b6      	add	r3, pc, #728	; (adr r3, d8178 <__ieee754_pow+0x8d8>)
   d7e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7ea6:	f000 fc9d 	bl	d87e4 <__adddf3>
   d7eaa:	4632      	mov	r2, r6
   d7eac:	4680      	mov	r8, r0
   d7eae:	4689      	mov	r9, r1
   d7eb0:	463b      	mov	r3, r7
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	4629      	mov	r1, r5
   d7eb6:	f000 fc93 	bl	d87e0 <__aeabi_dsub>
   d7eba:	4602      	mov	r2, r0
   d7ebc:	460b      	mov	r3, r1
   d7ebe:	4640      	mov	r0, r8
   d7ec0:	4649      	mov	r1, r9
   d7ec2:	f001 f8d1 	bl	d9068 <__aeabi_dcmpgt>
   d7ec6:	2800      	cmp	r0, #0
   d7ec8:	f040 8200 	bne.w	d82cc <__ieee754_pow+0xa2c>
   d7ecc:	46a8      	mov	r8, r5
   d7ece:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7ed2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7ed6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7eda:	fa42 f303 	asr.w	r3, r2, r3
   d7ede:	4453      	add	r3, sl
   d7ee0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7ee4:	4dbd      	ldr	r5, [pc, #756]	; (d81dc <__ieee754_pow+0x93c>)
   d7ee6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7eea:	4115      	asrs	r5, r2
   d7eec:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d7ef0:	2000      	movs	r0, #0
   d7ef2:	f1c2 0414 	rsb	r4, r2, #20
   d7ef6:	ea23 0105 	bic.w	r1, r3, r5
   d7efa:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7efe:	f1ba 0f00 	cmp.w	sl, #0
   d7f02:	4602      	mov	r2, r0
   d7f04:	460b      	mov	r3, r1
   d7f06:	fa4b fb04 	asr.w	fp, fp, r4
   d7f0a:	4630      	mov	r0, r6
   d7f0c:	4639      	mov	r1, r7
   d7f0e:	bfb8      	it	lt
   d7f10:	f1cb 0b00 	rsblt	fp, fp, #0
   d7f14:	f000 fc64 	bl	d87e0 <__aeabi_dsub>
   d7f18:	4602      	mov	r2, r0
   d7f1a:	460b      	mov	r3, r1
   d7f1c:	4606      	mov	r6, r0
   d7f1e:	460f      	mov	r7, r1
   d7f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7f24:	f000 fc5e 	bl	d87e4 <__adddf3>
   d7f28:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7f2c:	2400      	movs	r4, #0
   d7f2e:	a394      	add	r3, pc, #592	; (adr r3, d8180 <__ieee754_pow+0x8e0>)
   d7f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f34:	4620      	mov	r0, r4
   d7f36:	460d      	mov	r5, r1
   d7f38:	f000 fe06 	bl	d8b48 <__aeabi_dmul>
   d7f3c:	4632      	mov	r2, r6
   d7f3e:	4680      	mov	r8, r0
   d7f40:	4689      	mov	r9, r1
   d7f42:	463b      	mov	r3, r7
   d7f44:	4620      	mov	r0, r4
   d7f46:	4629      	mov	r1, r5
   d7f48:	f000 fc4a 	bl	d87e0 <__aeabi_dsub>
   d7f4c:	4602      	mov	r2, r0
   d7f4e:	460b      	mov	r3, r1
   d7f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7f54:	f000 fc44 	bl	d87e0 <__aeabi_dsub>
   d7f58:	a38b      	add	r3, pc, #556	; (adr r3, d8188 <__ieee754_pow+0x8e8>)
   d7f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f5e:	f000 fdf3 	bl	d8b48 <__aeabi_dmul>
   d7f62:	a38b      	add	r3, pc, #556	; (adr r3, d8190 <__ieee754_pow+0x8f0>)
   d7f64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f68:	4606      	mov	r6, r0
   d7f6a:	460f      	mov	r7, r1
   d7f6c:	4620      	mov	r0, r4
   d7f6e:	4629      	mov	r1, r5
   d7f70:	f000 fdea 	bl	d8b48 <__aeabi_dmul>
   d7f74:	4602      	mov	r2, r0
   d7f76:	460b      	mov	r3, r1
   d7f78:	4630      	mov	r0, r6
   d7f7a:	4639      	mov	r1, r7
   d7f7c:	f000 fc32 	bl	d87e4 <__adddf3>
   d7f80:	4606      	mov	r6, r0
   d7f82:	460f      	mov	r7, r1
   d7f84:	4602      	mov	r2, r0
   d7f86:	460b      	mov	r3, r1
   d7f88:	4640      	mov	r0, r8
   d7f8a:	4649      	mov	r1, r9
   d7f8c:	f000 fc2a 	bl	d87e4 <__adddf3>
   d7f90:	4642      	mov	r2, r8
   d7f92:	464b      	mov	r3, r9
   d7f94:	4604      	mov	r4, r0
   d7f96:	460d      	mov	r5, r1
   d7f98:	f000 fc22 	bl	d87e0 <__aeabi_dsub>
   d7f9c:	4602      	mov	r2, r0
   d7f9e:	460b      	mov	r3, r1
   d7fa0:	4630      	mov	r0, r6
   d7fa2:	4639      	mov	r1, r7
   d7fa4:	f000 fc1c 	bl	d87e0 <__aeabi_dsub>
   d7fa8:	4622      	mov	r2, r4
   d7faa:	4680      	mov	r8, r0
   d7fac:	4689      	mov	r9, r1
   d7fae:	462b      	mov	r3, r5
   d7fb0:	4620      	mov	r0, r4
   d7fb2:	4629      	mov	r1, r5
   d7fb4:	f000 fdc8 	bl	d8b48 <__aeabi_dmul>
   d7fb8:	a377      	add	r3, pc, #476	; (adr r3, d8198 <__ieee754_pow+0x8f8>)
   d7fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fbe:	4606      	mov	r6, r0
   d7fc0:	460f      	mov	r7, r1
   d7fc2:	f000 fdc1 	bl	d8b48 <__aeabi_dmul>
   d7fc6:	a376      	add	r3, pc, #472	; (adr r3, d81a0 <__ieee754_pow+0x900>)
   d7fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fcc:	f000 fc08 	bl	d87e0 <__aeabi_dsub>
   d7fd0:	4632      	mov	r2, r6
   d7fd2:	463b      	mov	r3, r7
   d7fd4:	f000 fdb8 	bl	d8b48 <__aeabi_dmul>
   d7fd8:	a373      	add	r3, pc, #460	; (adr r3, d81a8 <__ieee754_pow+0x908>)
   d7fda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fde:	f000 fc01 	bl	d87e4 <__adddf3>
   d7fe2:	4632      	mov	r2, r6
   d7fe4:	463b      	mov	r3, r7
   d7fe6:	f000 fdaf 	bl	d8b48 <__aeabi_dmul>
   d7fea:	a371      	add	r3, pc, #452	; (adr r3, d81b0 <__ieee754_pow+0x910>)
   d7fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ff0:	f000 fbf6 	bl	d87e0 <__aeabi_dsub>
   d7ff4:	4632      	mov	r2, r6
   d7ff6:	463b      	mov	r3, r7
   d7ff8:	f000 fda6 	bl	d8b48 <__aeabi_dmul>
   d7ffc:	a36e      	add	r3, pc, #440	; (adr r3, d81b8 <__ieee754_pow+0x918>)
   d7ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8002:	f000 fbef 	bl	d87e4 <__adddf3>
   d8006:	4632      	mov	r2, r6
   d8008:	463b      	mov	r3, r7
   d800a:	f000 fd9d 	bl	d8b48 <__aeabi_dmul>
   d800e:	4602      	mov	r2, r0
   d8010:	460b      	mov	r3, r1
   d8012:	4620      	mov	r0, r4
   d8014:	4629      	mov	r1, r5
   d8016:	f000 fbe3 	bl	d87e0 <__aeabi_dsub>
   d801a:	4606      	mov	r6, r0
   d801c:	460f      	mov	r7, r1
   d801e:	4602      	mov	r2, r0
   d8020:	460b      	mov	r3, r1
   d8022:	4620      	mov	r0, r4
   d8024:	4629      	mov	r1, r5
   d8026:	f000 fd8f 	bl	d8b48 <__aeabi_dmul>
   d802a:	2200      	movs	r2, #0
   d802c:	e9cd 0100 	strd	r0, r1, [sp]
   d8030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8034:	4630      	mov	r0, r6
   d8036:	4639      	mov	r1, r7
   d8038:	f000 fbd2 	bl	d87e0 <__aeabi_dsub>
   d803c:	4602      	mov	r2, r0
   d803e:	460b      	mov	r3, r1
   d8040:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8044:	f000 feaa 	bl	d8d9c <__aeabi_ddiv>
   d8048:	4642      	mov	r2, r8
   d804a:	4606      	mov	r6, r0
   d804c:	460f      	mov	r7, r1
   d804e:	464b      	mov	r3, r9
   d8050:	4620      	mov	r0, r4
   d8052:	4629      	mov	r1, r5
   d8054:	f000 fd78 	bl	d8b48 <__aeabi_dmul>
   d8058:	4642      	mov	r2, r8
   d805a:	464b      	mov	r3, r9
   d805c:	f000 fbc2 	bl	d87e4 <__adddf3>
   d8060:	4602      	mov	r2, r0
   d8062:	460b      	mov	r3, r1
   d8064:	4630      	mov	r0, r6
   d8066:	4639      	mov	r1, r7
   d8068:	f000 fbba 	bl	d87e0 <__aeabi_dsub>
   d806c:	4622      	mov	r2, r4
   d806e:	462b      	mov	r3, r5
   d8070:	f000 fbb6 	bl	d87e0 <__aeabi_dsub>
   d8074:	4602      	mov	r2, r0
   d8076:	460b      	mov	r3, r1
   d8078:	2000      	movs	r0, #0
   d807a:	4959      	ldr	r1, [pc, #356]	; (d81e0 <__ieee754_pow+0x940>)
   d807c:	f000 fbb0 	bl	d87e0 <__aeabi_dsub>
   d8080:	448a      	add	sl, r1
   d8082:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8086:	4602      	mov	r2, r0
   d8088:	460b      	mov	r3, r1
   d808a:	f2c0 815b 	blt.w	d8344 <__ieee754_pow+0xaa4>
   d808e:	4651      	mov	r1, sl
   d8090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8094:	f000 fd58 	bl	d8b48 <__aeabi_dmul>
   d8098:	ec41 0b10 	vmov	d0, r0, r1
   d809c:	e449      	b.n	d7932 <__ieee754_pow+0x92>
   d809e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d80a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d80a6:	ea54 030b 	orrs.w	r3, r4, fp
   d80aa:	f000 8137 	beq.w	d831c <__ieee754_pow+0xa7c>
   d80ae:	f1bb 0f01 	cmp.w	fp, #1
   d80b2:	f47f ac80 	bne.w	d79b6 <__ieee754_pow+0x116>
   d80b6:	4602      	mov	r2, r0
   d80b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d80bc:	ec43 2b10 	vmov	d0, r2, r3
   d80c0:	e437      	b.n	d7932 <__ieee754_pow+0x92>
   d80c2:	4632      	mov	r2, r6
   d80c4:	463b      	mov	r3, r7
   d80c6:	4630      	mov	r0, r6
   d80c8:	4639      	mov	r1, r7
   d80ca:	f000 fd3d 	bl	d8b48 <__aeabi_dmul>
   d80ce:	ec41 0b10 	vmov	d0, r0, r1
   d80d2:	e42e      	b.n	d7932 <__ieee754_pow+0x92>
   d80d4:	4b43      	ldr	r3, [pc, #268]	; (d81e4 <__ieee754_pow+0x944>)
   d80d6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d80da:	4598      	cmp	r8, r3
   d80dc:	f340 8115 	ble.w	d830a <__ieee754_pow+0xa6a>
   d80e0:	4b41      	ldr	r3, [pc, #260]	; (d81e8 <__ieee754_pow+0x948>)
   d80e2:	440b      	add	r3, r1
   d80e4:	4303      	orrs	r3, r0
   d80e6:	d10c      	bne.n	d8102 <__ieee754_pow+0x862>
   d80e8:	4632      	mov	r2, r6
   d80ea:	463b      	mov	r3, r7
   d80ec:	f000 fb78 	bl	d87e0 <__aeabi_dsub>
   d80f0:	4602      	mov	r2, r0
   d80f2:	460b      	mov	r3, r1
   d80f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d80f8:	f000 ffa2 	bl	d9040 <__aeabi_dcmple>
   d80fc:	2800      	cmp	r0, #0
   d80fe:	f43f aee6 	beq.w	d7ece <__ieee754_pow+0x62e>
   d8102:	a32f      	add	r3, pc, #188	; (adr r3, d81c0 <__ieee754_pow+0x920>)
   d8104:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d810c:	f000 fd1c 	bl	d8b48 <__aeabi_dmul>
   d8110:	a32b      	add	r3, pc, #172	; (adr r3, d81c0 <__ieee754_pow+0x920>)
   d8112:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8116:	f000 fd17 	bl	d8b48 <__aeabi_dmul>
   d811a:	ec41 0b10 	vmov	d0, r0, r1
   d811e:	e408      	b.n	d7932 <__ieee754_pow+0x92>
   d8120:	ed9f 7b29 	vldr	d7, [pc, #164]	; d81c8 <__ieee754_pow+0x928>
   d8124:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8128:	e676      	b.n	d7e18 <__ieee754_pow+0x578>
   d812a:	f1b9 0f00 	cmp.w	r9, #0
   d812e:	f6bf ac8e 	bge.w	d7a4e <__ieee754_pow+0x1ae>
   d8132:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8136:	ee00 3a10 	vmov	s0, r3
   d813a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d813e:	ee00 3a90 	vmov	s1, r3
   d8142:	f7ff bbf6 	b.w	d7932 <__ieee754_pow+0x92>
   d8146:	4602      	mov	r2, r0
   d8148:	460b      	mov	r3, r1
   d814a:	2000      	movs	r0, #0
   d814c:	4924      	ldr	r1, [pc, #144]	; (d81e0 <__ieee754_pow+0x940>)
   d814e:	f000 fe25 	bl	d8d9c <__aeabi_ddiv>
   d8152:	e42d      	b.n	d79b0 <__ieee754_pow+0x110>
   d8154:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d81d0 <__ieee754_pow+0x930>
   d8158:	ed8d 7b08 	vstr	d7, [sp, #32]
   d815c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8160:	ed9f 7b03 	vldr	d7, [pc, #12]	; d8170 <__ieee754_pow+0x8d0>
   d8164:	f04f 0800 	mov.w	r8, #0
   d8168:	ed8d 7b06 	vstr	d7, [sp, #24]
   d816c:	e4be      	b.n	d7aec <__ieee754_pow+0x24c>
   d816e:	bf00      	nop
   d8170:	00000000 	.word	0x00000000
   d8174:	3ff00000 	.word	0x3ff00000
   d8178:	652b82fe 	.word	0x652b82fe
   d817c:	3c971547 	.word	0x3c971547
   d8180:	00000000 	.word	0x00000000
   d8184:	3fe62e43 	.word	0x3fe62e43
   d8188:	fefa39ef 	.word	0xfefa39ef
   d818c:	3fe62e42 	.word	0x3fe62e42
   d8190:	0ca86c39 	.word	0x0ca86c39
   d8194:	be205c61 	.word	0xbe205c61
   d8198:	72bea4d0 	.word	0x72bea4d0
   d819c:	3e663769 	.word	0x3e663769
   d81a0:	c5d26bf1 	.word	0xc5d26bf1
   d81a4:	3ebbbd41 	.word	0x3ebbbd41
   d81a8:	af25de2c 	.word	0xaf25de2c
   d81ac:	3f11566a 	.word	0x3f11566a
   d81b0:	16bebd93 	.word	0x16bebd93
   d81b4:	3f66c16c 	.word	0x3f66c16c
   d81b8:	5555553e 	.word	0x5555553e
   d81bc:	3fc55555 	.word	0x3fc55555
   d81c0:	c2f8f359 	.word	0xc2f8f359
   d81c4:	01a56e1f 	.word	0x01a56e1f
   d81c8:	00000000 	.word	0x00000000
   d81cc:	bff00000 	.word	0xbff00000
	...
   d81d8:	408fffff 	.word	0x408fffff
   d81dc:	000fffff 	.word	0x000fffff
   d81e0:	3ff00000 	.word	0x3ff00000
   d81e4:	4090cbff 	.word	0x4090cbff
   d81e8:	3f6f3400 	.word	0x3f6f3400
   d81ec:	4b6c      	ldr	r3, [pc, #432]	; (d83a0 <__ieee754_pow+0xb00>)
   d81ee:	429c      	cmp	r4, r3
   d81f0:	f77f ac2a 	ble.w	d7a48 <__ieee754_pow+0x1a8>
   d81f4:	4b6b      	ldr	r3, [pc, #428]	; (d83a4 <__ieee754_pow+0xb04>)
   d81f6:	429c      	cmp	r4, r3
   d81f8:	f73f abc3 	bgt.w	d7982 <__ieee754_pow+0xe2>
   d81fc:	2200      	movs	r2, #0
   d81fe:	4b69      	ldr	r3, [pc, #420]	; (d83a4 <__ieee754_pow+0xb04>)
   d8200:	f000 faee 	bl	d87e0 <__aeabi_dsub>
   d8204:	a356      	add	r3, pc, #344	; (adr r3, d8360 <__ieee754_pow+0xac0>)
   d8206:	e9d3 2300 	ldrd	r2, r3, [r3]
   d820a:	4604      	mov	r4, r0
   d820c:	460d      	mov	r5, r1
   d820e:	f000 fc9b 	bl	d8b48 <__aeabi_dmul>
   d8212:	a355      	add	r3, pc, #340	; (adr r3, d8368 <__ieee754_pow+0xac8>)
   d8214:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8218:	4680      	mov	r8, r0
   d821a:	4689      	mov	r9, r1
   d821c:	4620      	mov	r0, r4
   d821e:	4629      	mov	r1, r5
   d8220:	f000 fc92 	bl	d8b48 <__aeabi_dmul>
   d8224:	2200      	movs	r2, #0
   d8226:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d822a:	4b5f      	ldr	r3, [pc, #380]	; (d83a8 <__ieee754_pow+0xb08>)
   d822c:	4620      	mov	r0, r4
   d822e:	4629      	mov	r1, r5
   d8230:	f000 fc8a 	bl	d8b48 <__aeabi_dmul>
   d8234:	4602      	mov	r2, r0
   d8236:	460b      	mov	r3, r1
   d8238:	a14d      	add	r1, pc, #308	; (adr r1, d8370 <__ieee754_pow+0xad0>)
   d823a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d823e:	f000 facf 	bl	d87e0 <__aeabi_dsub>
   d8242:	4622      	mov	r2, r4
   d8244:	462b      	mov	r3, r5
   d8246:	f000 fc7f 	bl	d8b48 <__aeabi_dmul>
   d824a:	4602      	mov	r2, r0
   d824c:	460b      	mov	r3, r1
   d824e:	2000      	movs	r0, #0
   d8250:	4956      	ldr	r1, [pc, #344]	; (d83ac <__ieee754_pow+0xb0c>)
   d8252:	f000 fac5 	bl	d87e0 <__aeabi_dsub>
   d8256:	4622      	mov	r2, r4
   d8258:	462b      	mov	r3, r5
   d825a:	4606      	mov	r6, r0
   d825c:	460f      	mov	r7, r1
   d825e:	4620      	mov	r0, r4
   d8260:	4629      	mov	r1, r5
   d8262:	f000 fc71 	bl	d8b48 <__aeabi_dmul>
   d8266:	4602      	mov	r2, r0
   d8268:	460b      	mov	r3, r1
   d826a:	4630      	mov	r0, r6
   d826c:	4639      	mov	r1, r7
   d826e:	f000 fc6b 	bl	d8b48 <__aeabi_dmul>
   d8272:	a341      	add	r3, pc, #260	; (adr r3, d8378 <__ieee754_pow+0xad8>)
   d8274:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8278:	f000 fc66 	bl	d8b48 <__aeabi_dmul>
   d827c:	4602      	mov	r2, r0
   d827e:	460b      	mov	r3, r1
   d8280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8284:	f000 faac 	bl	d87e0 <__aeabi_dsub>
   d8288:	4602      	mov	r2, r0
   d828a:	460b      	mov	r3, r1
   d828c:	4604      	mov	r4, r0
   d828e:	460d      	mov	r5, r1
   d8290:	4640      	mov	r0, r8
   d8292:	4649      	mov	r1, r9
   d8294:	f000 faa6 	bl	d87e4 <__adddf3>
   d8298:	4642      	mov	r2, r8
   d829a:	464b      	mov	r3, r9
   d829c:	2000      	movs	r0, #0
   d829e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d82a2:	f000 fa9d 	bl	d87e0 <__aeabi_dsub>
   d82a6:	4602      	mov	r2, r0
   d82a8:	460b      	mov	r3, r1
   d82aa:	4620      	mov	r0, r4
   d82ac:	4629      	mov	r1, r5
   d82ae:	f000 fa97 	bl	d87e0 <__aeabi_dsub>
   d82b2:	4680      	mov	r8, r0
   d82b4:	4689      	mov	r9, r1
   d82b6:	e5a5      	b.n	d7e04 <__ieee754_pow+0x564>
   d82b8:	4632      	mov	r2, r6
   d82ba:	463b      	mov	r3, r7
   d82bc:	2000      	movs	r0, #0
   d82be:	4939      	ldr	r1, [pc, #228]	; (d83a4 <__ieee754_pow+0xb04>)
   d82c0:	f000 fd6c 	bl	d8d9c <__aeabi_ddiv>
   d82c4:	ec41 0b10 	vmov	d0, r0, r1
   d82c8:	f7ff bb33 	b.w	d7932 <__ieee754_pow+0x92>
   d82cc:	a32c      	add	r3, pc, #176	; (adr r3, d8380 <__ieee754_pow+0xae0>)
   d82ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d82d6:	f000 fc37 	bl	d8b48 <__aeabi_dmul>
   d82da:	a329      	add	r3, pc, #164	; (adr r3, d8380 <__ieee754_pow+0xae0>)
   d82dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82e0:	f000 fc32 	bl	d8b48 <__aeabi_dmul>
   d82e4:	ec41 0b10 	vmov	d0, r0, r1
   d82e8:	f7ff bb23 	b.w	d7932 <__ieee754_pow+0x92>
   d82ec:	f1be 0f00 	cmp.w	lr, #0
   d82f0:	f47f ab2a 	bne.w	d7948 <__ieee754_pow+0xa8>
   d82f4:	f1c3 0314 	rsb	r3, r3, #20
   d82f8:	fa48 f203 	asr.w	r2, r8, r3
   d82fc:	fa02 f303 	lsl.w	r3, r2, r3
   d8300:	4598      	cmp	r8, r3
   d8302:	d027      	beq.n	d8354 <__ieee754_pow+0xab4>
   d8304:	46f3      	mov	fp, lr
   d8306:	f7ff baf7 	b.w	d78f8 <__ieee754_pow+0x58>
   d830a:	4b28      	ldr	r3, [pc, #160]	; (d83ac <__ieee754_pow+0xb0c>)
   d830c:	4598      	cmp	r8, r3
   d830e:	f73f adde 	bgt.w	d7ece <__ieee754_pow+0x62e>
   d8312:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8316:	469a      	mov	sl, r3
   d8318:	469b      	mov	fp, r3
   d831a:	e607      	b.n	d7f2c <__ieee754_pow+0x68c>
   d831c:	4602      	mov	r2, r0
   d831e:	460b      	mov	r3, r1
   d8320:	f7ff bb89 	b.w	d7a36 <__ieee754_pow+0x196>
   d8324:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8388 <__ieee754_pow+0xae8>
   d8328:	ed8d 7b08 	vstr	d7, [sp, #32]
   d832c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8390 <__ieee754_pow+0xaf0>
   d8330:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8334:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8398 <__ieee754_pow+0xaf8>
   d8338:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d833c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8340:	f7ff bbd4 	b.w	d7aec <__ieee754_pow+0x24c>
   d8344:	4658      	mov	r0, fp
   d8346:	ec43 2b10 	vmov	d0, r2, r3
   d834a:	f000 f9b1 	bl	d86b0 <scalbn>
   d834e:	ec51 0b10 	vmov	r0, r1, d0
   d8352:	e69d      	b.n	d8090 <__ieee754_pow+0x7f0>
   d8354:	f002 0201 	and.w	r2, r2, #1
   d8358:	f1c2 0b02 	rsb	fp, r2, #2
   d835c:	f7ff bacc 	b.w	d78f8 <__ieee754_pow+0x58>
   d8360:	60000000 	.word	0x60000000
   d8364:	3ff71547 	.word	0x3ff71547
   d8368:	f85ddf44 	.word	0xf85ddf44
   d836c:	3e54ae0b 	.word	0x3e54ae0b
   d8370:	55555555 	.word	0x55555555
   d8374:	3fd55555 	.word	0x3fd55555
   d8378:	652b82fe 	.word	0x652b82fe
   d837c:	3ff71547 	.word	0x3ff71547
   d8380:	8800759c 	.word	0x8800759c
   d8384:	7e37e43c 	.word	0x7e37e43c
   d8388:	40000000 	.word	0x40000000
   d838c:	3fe2b803 	.word	0x3fe2b803
   d8390:	43cfd006 	.word	0x43cfd006
   d8394:	3e4cfdeb 	.word	0x3e4cfdeb
   d8398:	00000000 	.word	0x00000000
   d839c:	3ff80000 	.word	0x3ff80000
   d83a0:	3feffffe 	.word	0x3feffffe
   d83a4:	3ff00000 	.word	0x3ff00000
   d83a8:	3fd00000 	.word	0x3fd00000
   d83ac:	3fe00000 	.word	0x3fe00000

000d83b0 <__ieee754_sqrt>:
   d83b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83b4:	4965      	ldr	r1, [pc, #404]	; (d854c <__ieee754_sqrt+0x19c>)
   d83b6:	ec55 4b10 	vmov	r4, r5, d0
   d83ba:	460e      	mov	r6, r1
   d83bc:	4029      	ands	r1, r5
   d83be:	42b1      	cmp	r1, r6
   d83c0:	f000 8097 	beq.w	d84f2 <__ieee754_sqrt+0x142>
   d83c4:	2d00      	cmp	r5, #0
   d83c6:	462b      	mov	r3, r5
   d83c8:	ee10 2a10 	vmov	r2, s0
   d83cc:	dd74      	ble.n	d84b8 <__ieee754_sqrt+0x108>
   d83ce:	152f      	asrs	r7, r5, #20
   d83d0:	d07f      	beq.n	d84d2 <__ieee754_sqrt+0x122>
   d83d2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d83d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d83da:	07f9      	lsls	r1, r7, #31
   d83dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83e0:	d465      	bmi.n	d84ae <__ieee754_sqrt+0xfe>
   d83e2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d83e6:	2600      	movs	r6, #0
   d83e8:	440b      	add	r3, r1
   d83ea:	107f      	asrs	r7, r7, #1
   d83ec:	0052      	lsls	r2, r2, #1
   d83ee:	46b6      	mov	lr, r6
   d83f0:	2016      	movs	r0, #22
   d83f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d83f6:	eb0e 0401 	add.w	r4, lr, r1
   d83fa:	429c      	cmp	r4, r3
   d83fc:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8400:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8404:	dc03      	bgt.n	d840e <__ieee754_sqrt+0x5e>
   d8406:	1b1b      	subs	r3, r3, r4
   d8408:	eb04 0e01 	add.w	lr, r4, r1
   d840c:	440e      	add	r6, r1
   d840e:	3801      	subs	r0, #1
   d8410:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8414:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8418:	d1ed      	bne.n	d83f6 <__ieee754_sqrt+0x46>
   d841a:	4684      	mov	ip, r0
   d841c:	2420      	movs	r4, #32
   d841e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8422:	e009      	b.n	d8438 <__ieee754_sqrt+0x88>
   d8424:	d020      	beq.n	d8468 <__ieee754_sqrt+0xb8>
   d8426:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d842a:	3c01      	subs	r4, #1
   d842c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8430:	442b      	add	r3, r5
   d8432:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8436:	d020      	beq.n	d847a <__ieee754_sqrt+0xca>
   d8438:	459e      	cmp	lr, r3
   d843a:	eb01 050c 	add.w	r5, r1, ip
   d843e:	daf1      	bge.n	d8424 <__ieee754_sqrt+0x74>
   d8440:	2d00      	cmp	r5, #0
   d8442:	eb05 0c01 	add.w	ip, r5, r1
   d8446:	db09      	blt.n	d845c <__ieee754_sqrt+0xac>
   d8448:	46f0      	mov	r8, lr
   d844a:	4295      	cmp	r5, r2
   d844c:	ebce 0303 	rsb	r3, lr, r3
   d8450:	d900      	bls.n	d8454 <__ieee754_sqrt+0xa4>
   d8452:	3b01      	subs	r3, #1
   d8454:	1b52      	subs	r2, r2, r5
   d8456:	4408      	add	r0, r1
   d8458:	46c6      	mov	lr, r8
   d845a:	e7e4      	b.n	d8426 <__ieee754_sqrt+0x76>
   d845c:	f1bc 0f00 	cmp.w	ip, #0
   d8460:	dbf2      	blt.n	d8448 <__ieee754_sqrt+0x98>
   d8462:	f10e 0801 	add.w	r8, lr, #1
   d8466:	e7f0      	b.n	d844a <__ieee754_sqrt+0x9a>
   d8468:	4295      	cmp	r5, r2
   d846a:	d81e      	bhi.n	d84aa <__ieee754_sqrt+0xfa>
   d846c:	2d00      	cmp	r5, #0
   d846e:	eb05 0c01 	add.w	ip, r5, r1
   d8472:	db50      	blt.n	d8516 <__ieee754_sqrt+0x166>
   d8474:	4698      	mov	r8, r3
   d8476:	2300      	movs	r3, #0
   d8478:	e7ec      	b.n	d8454 <__ieee754_sqrt+0xa4>
   d847a:	4313      	orrs	r3, r2
   d847c:	d004      	beq.n	d8488 <__ieee754_sqrt+0xd8>
   d847e:	1c42      	adds	r2, r0, #1
   d8480:	d04d      	beq.n	d851e <__ieee754_sqrt+0x16e>
   d8482:	f000 0301 	and.w	r3, r0, #1
   d8486:	4418      	add	r0, r3
   d8488:	0840      	lsrs	r0, r0, #1
   d848a:	1071      	asrs	r1, r6, #1
   d848c:	07f3      	lsls	r3, r6, #31
   d848e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8492:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8496:	bf48      	it	mi
   d8498:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d849c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d84a0:	4602      	mov	r2, r0
   d84a2:	ec43 2b10 	vmov	d0, r2, r3
   d84a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84aa:	4673      	mov	r3, lr
   d84ac:	e7bb      	b.n	d8426 <__ieee754_sqrt+0x76>
   d84ae:	005b      	lsls	r3, r3, #1
   d84b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d84b4:	0052      	lsls	r2, r2, #1
   d84b6:	e794      	b.n	d83e2 <__ieee754_sqrt+0x32>
   d84b8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d84bc:	4321      	orrs	r1, r4
   d84be:	d028      	beq.n	d8512 <__ieee754_sqrt+0x162>
   d84c0:	bbad      	cbnz	r5, d852e <__ieee754_sqrt+0x17e>
   d84c2:	462f      	mov	r7, r5
   d84c4:	0ad3      	lsrs	r3, r2, #11
   d84c6:	3f15      	subs	r7, #21
   d84c8:	0552      	lsls	r2, r2, #21
   d84ca:	2b00      	cmp	r3, #0
   d84cc:	d0fa      	beq.n	d84c4 <__ieee754_sqrt+0x114>
   d84ce:	02dd      	lsls	r5, r3, #11
   d84d0:	d428      	bmi.n	d8524 <__ieee754_sqrt+0x174>
   d84d2:	2100      	movs	r1, #0
   d84d4:	e000      	b.n	d84d8 <__ieee754_sqrt+0x128>
   d84d6:	4601      	mov	r1, r0
   d84d8:	005b      	lsls	r3, r3, #1
   d84da:	02dc      	lsls	r4, r3, #11
   d84dc:	f101 0001 	add.w	r0, r1, #1
   d84e0:	d5f9      	bpl.n	d84d6 <__ieee754_sqrt+0x126>
   d84e2:	f1c0 0420 	rsb	r4, r0, #32
   d84e6:	fa22 f404 	lsr.w	r4, r2, r4
   d84ea:	4323      	orrs	r3, r4
   d84ec:	1a7f      	subs	r7, r7, r1
   d84ee:	4082      	lsls	r2, r0
   d84f0:	e76f      	b.n	d83d2 <__ieee754_sqrt+0x22>
   d84f2:	ee10 2a10 	vmov	r2, s0
   d84f6:	462b      	mov	r3, r5
   d84f8:	ee10 0a10 	vmov	r0, s0
   d84fc:	4629      	mov	r1, r5
   d84fe:	f000 fb23 	bl	d8b48 <__aeabi_dmul>
   d8502:	4622      	mov	r2, r4
   d8504:	462b      	mov	r3, r5
   d8506:	f000 f96d 	bl	d87e4 <__adddf3>
   d850a:	ec41 0b10 	vmov	d0, r0, r1
   d850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8516:	f1bc 0f00 	cmp.w	ip, #0
   d851a:	daa2      	bge.n	d8462 <__ieee754_sqrt+0xb2>
   d851c:	e7aa      	b.n	d8474 <__ieee754_sqrt+0xc4>
   d851e:	3601      	adds	r6, #1
   d8520:	4620      	mov	r0, r4
   d8522:	e7b2      	b.n	d848a <__ieee754_sqrt+0xda>
   d8524:	2420      	movs	r4, #32
   d8526:	f04f 31ff 	mov.w	r1, #4294967295
   d852a:	2000      	movs	r0, #0
   d852c:	e7db      	b.n	d84e6 <__ieee754_sqrt+0x136>
   d852e:	ee10 2a10 	vmov	r2, s0
   d8532:	462b      	mov	r3, r5
   d8534:	4620      	mov	r0, r4
   d8536:	4629      	mov	r1, r5
   d8538:	f000 f952 	bl	d87e0 <__aeabi_dsub>
   d853c:	4602      	mov	r2, r0
   d853e:	460b      	mov	r3, r1
   d8540:	f000 fc2c 	bl	d8d9c <__aeabi_ddiv>
   d8544:	ec41 0b10 	vmov	d0, r0, r1
   d8548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d854c:	7ff00000 	.word	0x7ff00000

000d8550 <fabs>:
   d8550:	ec53 2b10 	vmov	r2, r3, d0
   d8554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8558:	ec43 2b10 	vmov	d0, r2, r3
   d855c:	4770      	bx	lr
   d855e:	bf00      	nop

000d8560 <finite>:
   d8560:	ee10 3a90 	vmov	r3, s1
   d8564:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8568:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d856c:	0fc0      	lsrs	r0, r0, #31
   d856e:	4770      	bx	lr

000d8570 <matherr>:
   d8570:	2000      	movs	r0, #0
   d8572:	4770      	bx	lr
   d8574:	0000      	movs	r0, r0
	...

000d8578 <nan>:
   d8578:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8580 <nan+0x8>
   d857c:	4770      	bx	lr
   d857e:	bf00      	nop
   d8580:	00000000 	.word	0x00000000
   d8584:	7ff80000 	.word	0x7ff80000

000d8588 <rint>:
   d8588:	b5f0      	push	{r4, r5, r6, r7, lr}
   d858a:	ec53 2b10 	vmov	r2, r3, d0
   d858e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8592:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8596:	2813      	cmp	r0, #19
   d8598:	b083      	sub	sp, #12
   d859a:	4619      	mov	r1, r3
   d859c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d85a0:	ee10 5a10 	vmov	r5, s0
   d85a4:	dc2f      	bgt.n	d8606 <rint+0x7e>
   d85a6:	2800      	cmp	r0, #0
   d85a8:	db49      	blt.n	d863e <rint+0xb6>
   d85aa:	4e3f      	ldr	r6, [pc, #252]	; (d86a8 <rint+0x120>)
   d85ac:	4106      	asrs	r6, r0
   d85ae:	ea03 0706 	and.w	r7, r3, r6
   d85b2:	4317      	orrs	r7, r2
   d85b4:	d02c      	beq.n	d8610 <rint+0x88>
   d85b6:	0876      	lsrs	r6, r6, #1
   d85b8:	4033      	ands	r3, r6
   d85ba:	431d      	orrs	r5, r3
   d85bc:	d00c      	beq.n	d85d8 <rint+0x50>
   d85be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d85c2:	2813      	cmp	r0, #19
   d85c4:	ea21 0606 	bic.w	r6, r1, r6
   d85c8:	fa43 f100 	asr.w	r1, r3, r0
   d85cc:	ea41 0106 	orr.w	r1, r1, r6
   d85d0:	bf0c      	ite	eq
   d85d2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d85d6:	2500      	movne	r5, #0
   d85d8:	4834      	ldr	r0, [pc, #208]	; (d86ac <rint+0x124>)
   d85da:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d85de:	462a      	mov	r2, r5
   d85e0:	e9d4 4500 	ldrd	r4, r5, [r4]
   d85e4:	4610      	mov	r0, r2
   d85e6:	462b      	mov	r3, r5
   d85e8:	4622      	mov	r2, r4
   d85ea:	f000 f8fb 	bl	d87e4 <__adddf3>
   d85ee:	e9cd 0100 	strd	r0, r1, [sp]
   d85f2:	4622      	mov	r2, r4
   d85f4:	462b      	mov	r3, r5
   d85f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d85fa:	f000 f8f1 	bl	d87e0 <__aeabi_dsub>
   d85fe:	ec41 0b10 	vmov	d0, r0, r1
   d8602:	b003      	add	sp, #12
   d8604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8606:	2833      	cmp	r0, #51	; 0x33
   d8608:	dd06      	ble.n	d8618 <rint+0x90>
   d860a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d860e:	d042      	beq.n	d8696 <rint+0x10e>
   d8610:	ec43 2b10 	vmov	d0, r2, r3
   d8614:	b003      	add	sp, #12
   d8616:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8618:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d861c:	f04f 30ff 	mov.w	r0, #4294967295
   d8620:	40f0      	lsrs	r0, r6
   d8622:	4202      	tst	r2, r0
   d8624:	d0f4      	beq.n	d8610 <rint+0x88>
   d8626:	0840      	lsrs	r0, r0, #1
   d8628:	4202      	tst	r2, r0
   d862a:	d0d5      	beq.n	d85d8 <rint+0x50>
   d862c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8630:	ea25 0000 	bic.w	r0, r5, r0
   d8634:	fa43 f606 	asr.w	r6, r3, r6
   d8638:	ea46 0500 	orr.w	r5, r6, r0
   d863c:	e7cc      	b.n	d85d8 <rint+0x50>
   d863e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8642:	4310      	orrs	r0, r2
   d8644:	ee10 7a10 	vmov	r7, s0
   d8648:	d0e2      	beq.n	d8610 <rint+0x88>
   d864a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d864e:	4307      	orrs	r7, r0
   d8650:	4278      	negs	r0, r7
   d8652:	4307      	orrs	r7, r0
   d8654:	4815      	ldr	r0, [pc, #84]	; (d86ac <rint+0x124>)
   d8656:	0c59      	lsrs	r1, r3, #17
   d8658:	0b3f      	lsrs	r7, r7, #12
   d865a:	0449      	lsls	r1, r1, #17
   d865c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8660:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8664:	ea47 0301 	orr.w	r3, r7, r1
   d8668:	e9d0 6700 	ldrd	r6, r7, [r0]
   d866c:	4619      	mov	r1, r3
   d866e:	4610      	mov	r0, r2
   d8670:	463b      	mov	r3, r7
   d8672:	4632      	mov	r2, r6
   d8674:	f000 f8b6 	bl	d87e4 <__adddf3>
   d8678:	e9cd 0100 	strd	r0, r1, [sp]
   d867c:	463b      	mov	r3, r7
   d867e:	4632      	mov	r2, r6
   d8680:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8684:	f000 f8ac 	bl	d87e0 <__aeabi_dsub>
   d8688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d868c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8690:	ec41 0b10 	vmov	d0, r0, r1
   d8694:	e7be      	b.n	d8614 <rint+0x8c>
   d8696:	ee10 0a10 	vmov	r0, s0
   d869a:	4619      	mov	r1, r3
   d869c:	f000 f8a2 	bl	d87e4 <__adddf3>
   d86a0:	ec41 0b10 	vmov	d0, r0, r1
   d86a4:	e7b6      	b.n	d8614 <rint+0x8c>
   d86a6:	bf00      	nop
   d86a8:	000fffff 	.word	0x000fffff
   d86ac:	000d9a98 	.word	0x000d9a98

000d86b0 <scalbn>:
   d86b0:	ec53 2b10 	vmov	r2, r3, d0
   d86b4:	b570      	push	{r4, r5, r6, lr}
   d86b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d86ba:	4619      	mov	r1, r3
   d86bc:	4605      	mov	r5, r0
   d86be:	bb14      	cbnz	r4, d8706 <scalbn+0x56>
   d86c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d86c4:	4311      	orrs	r1, r2
   d86c6:	d02a      	beq.n	d871e <scalbn+0x6e>
   d86c8:	4619      	mov	r1, r3
   d86ca:	2200      	movs	r2, #0
   d86cc:	4b38      	ldr	r3, [pc, #224]	; (d87b0 <scalbn+0x100>)
   d86ce:	4e39      	ldr	r6, [pc, #228]	; (d87b4 <scalbn+0x104>)
   d86d0:	ee10 0a10 	vmov	r0, s0
   d86d4:	f000 fa38 	bl	d8b48 <__aeabi_dmul>
   d86d8:	42b5      	cmp	r5, r6
   d86da:	4602      	mov	r2, r0
   d86dc:	460b      	mov	r3, r1
   d86de:	db1f      	blt.n	d8720 <scalbn+0x70>
   d86e0:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d86e4:	3c36      	subs	r4, #54	; 0x36
   d86e6:	442c      	add	r4, r5
   d86e8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d86ec:	4284      	cmp	r4, r0
   d86ee:	dc1f      	bgt.n	d8730 <scalbn+0x80>
   d86f0:	2c00      	cmp	r4, #0
   d86f2:	dd2d      	ble.n	d8750 <scalbn+0xa0>
   d86f4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d86f8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d86fc:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8700:	ec43 2b10 	vmov	d0, r2, r3
   d8704:	bd70      	pop	{r4, r5, r6, pc}
   d8706:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d870a:	4284      	cmp	r4, r0
   d870c:	d1eb      	bne.n	d86e6 <scalbn+0x36>
   d870e:	ee10 0a10 	vmov	r0, s0
   d8712:	4619      	mov	r1, r3
   d8714:	f000 f866 	bl	d87e4 <__adddf3>
   d8718:	ec41 0b10 	vmov	d0, r0, r1
   d871c:	bd70      	pop	{r4, r5, r6, pc}
   d871e:	bd70      	pop	{r4, r5, r6, pc}
   d8720:	a31f      	add	r3, pc, #124	; (adr r3, d87a0 <scalbn+0xf0>)
   d8722:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8726:	f000 fa0f 	bl	d8b48 <__aeabi_dmul>
   d872a:	ec41 0b10 	vmov	d0, r0, r1
   d872e:	bd70      	pop	{r4, r5, r6, pc}
   d8730:	ec43 2b11 	vmov	d1, r2, r3
   d8734:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d87a8 <scalbn+0xf8>
   d8738:	f000 f840 	bl	d87bc <copysign>
   d873c:	a31a      	add	r3, pc, #104	; (adr r3, d87a8 <scalbn+0xf8>)
   d873e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8742:	ec51 0b10 	vmov	r0, r1, d0
   d8746:	f000 f9ff 	bl	d8b48 <__aeabi_dmul>
   d874a:	ec41 0b10 	vmov	d0, r0, r1
   d874e:	bd70      	pop	{r4, r5, r6, pc}
   d8750:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d8754:	da13      	bge.n	d877e <scalbn+0xce>
   d8756:	f24c 3150 	movw	r1, #50000	; 0xc350
   d875a:	428d      	cmp	r5, r1
   d875c:	ec43 2b11 	vmov	d1, r2, r3
   d8760:	dce8      	bgt.n	d8734 <scalbn+0x84>
   d8762:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d87a0 <scalbn+0xf0>
   d8766:	f000 f829 	bl	d87bc <copysign>
   d876a:	a30d      	add	r3, pc, #52	; (adr r3, d87a0 <scalbn+0xf0>)
   d876c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8770:	ec51 0b10 	vmov	r0, r1, d0
   d8774:	f000 f9e8 	bl	d8b48 <__aeabi_dmul>
   d8778:	ec41 0b10 	vmov	d0, r0, r1
   d877c:	bd70      	pop	{r4, r5, r6, pc}
   d877e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8782:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8786:	3436      	adds	r4, #54	; 0x36
   d8788:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d878c:	4610      	mov	r0, r2
   d878e:	4619      	mov	r1, r3
   d8790:	2200      	movs	r2, #0
   d8792:	4b09      	ldr	r3, [pc, #36]	; (d87b8 <scalbn+0x108>)
   d8794:	f000 f9d8 	bl	d8b48 <__aeabi_dmul>
   d8798:	ec41 0b10 	vmov	d0, r0, r1
   d879c:	bd70      	pop	{r4, r5, r6, pc}
   d879e:	bf00      	nop
   d87a0:	c2f8f359 	.word	0xc2f8f359
   d87a4:	01a56e1f 	.word	0x01a56e1f
   d87a8:	8800759c 	.word	0x8800759c
   d87ac:	7e37e43c 	.word	0x7e37e43c
   d87b0:	43500000 	.word	0x43500000
   d87b4:	ffff3cb0 	.word	0xffff3cb0
   d87b8:	3c900000 	.word	0x3c900000

000d87bc <copysign>:
   d87bc:	ec53 2b10 	vmov	r2, r3, d0
   d87c0:	ee11 0a90 	vmov	r0, s3
   d87c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d87c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d87cc:	ea41 0300 	orr.w	r3, r1, r0
   d87d0:	ec43 2b10 	vmov	d0, r2, r3
   d87d4:	4770      	bx	lr
   d87d6:	bf00      	nop

000d87d8 <__aeabi_drsub>:
   d87d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d87dc:	e002      	b.n	d87e4 <__adddf3>
   d87de:	bf00      	nop

000d87e0 <__aeabi_dsub>:
   d87e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d87e4 <__adddf3>:
   d87e4:	b530      	push	{r4, r5, lr}
   d87e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d87ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d87ee:	ea94 0f05 	teq	r4, r5
   d87f2:	bf08      	it	eq
   d87f4:	ea90 0f02 	teqeq	r0, r2
   d87f8:	bf1f      	itttt	ne
   d87fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d87fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8802:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8806:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d880a:	f000 80e2 	beq.w	d89d2 <__adddf3+0x1ee>
   d880e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8812:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8816:	bfb8      	it	lt
   d8818:	426d      	neglt	r5, r5
   d881a:	dd0c      	ble.n	d8836 <__adddf3+0x52>
   d881c:	442c      	add	r4, r5
   d881e:	ea80 0202 	eor.w	r2, r0, r2
   d8822:	ea81 0303 	eor.w	r3, r1, r3
   d8826:	ea82 0000 	eor.w	r0, r2, r0
   d882a:	ea83 0101 	eor.w	r1, r3, r1
   d882e:	ea80 0202 	eor.w	r2, r0, r2
   d8832:	ea81 0303 	eor.w	r3, r1, r3
   d8836:	2d36      	cmp	r5, #54	; 0x36
   d8838:	bf88      	it	hi
   d883a:	bd30      	pophi	{r4, r5, pc}
   d883c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8840:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8844:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8848:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d884c:	d002      	beq.n	d8854 <__adddf3+0x70>
   d884e:	4240      	negs	r0, r0
   d8850:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8854:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8858:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d885c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8860:	d002      	beq.n	d8868 <__adddf3+0x84>
   d8862:	4252      	negs	r2, r2
   d8864:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8868:	ea94 0f05 	teq	r4, r5
   d886c:	f000 80a7 	beq.w	d89be <__adddf3+0x1da>
   d8870:	f1a4 0401 	sub.w	r4, r4, #1
   d8874:	f1d5 0e20 	rsbs	lr, r5, #32
   d8878:	db0d      	blt.n	d8896 <__adddf3+0xb2>
   d887a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d887e:	fa22 f205 	lsr.w	r2, r2, r5
   d8882:	1880      	adds	r0, r0, r2
   d8884:	f141 0100 	adc.w	r1, r1, #0
   d8888:	fa03 f20e 	lsl.w	r2, r3, lr
   d888c:	1880      	adds	r0, r0, r2
   d888e:	fa43 f305 	asr.w	r3, r3, r5
   d8892:	4159      	adcs	r1, r3
   d8894:	e00e      	b.n	d88b4 <__adddf3+0xd0>
   d8896:	f1a5 0520 	sub.w	r5, r5, #32
   d889a:	f10e 0e20 	add.w	lr, lr, #32
   d889e:	2a01      	cmp	r2, #1
   d88a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d88a4:	bf28      	it	cs
   d88a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d88aa:	fa43 f305 	asr.w	r3, r3, r5
   d88ae:	18c0      	adds	r0, r0, r3
   d88b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d88b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88b8:	d507      	bpl.n	d88ca <__adddf3+0xe6>
   d88ba:	f04f 0e00 	mov.w	lr, #0
   d88be:	f1dc 0c00 	rsbs	ip, ip, #0
   d88c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d88c6:	eb6e 0101 	sbc.w	r1, lr, r1
   d88ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88ce:	d31b      	bcc.n	d8908 <__adddf3+0x124>
   d88d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88d4:	d30c      	bcc.n	d88f0 <__adddf3+0x10c>
   d88d6:	0849      	lsrs	r1, r1, #1
   d88d8:	ea5f 0030 	movs.w	r0, r0, rrx
   d88dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d88e0:	f104 0401 	add.w	r4, r4, #1
   d88e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d88e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d88ec:	f080 809a 	bcs.w	d8a24 <__adddf3+0x240>
   d88f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d88f4:	bf08      	it	eq
   d88f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d88fa:	f150 0000 	adcs.w	r0, r0, #0
   d88fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8902:	ea41 0105 	orr.w	r1, r1, r5
   d8906:	bd30      	pop	{r4, r5, pc}
   d8908:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d890c:	4140      	adcs	r0, r0
   d890e:	eb41 0101 	adc.w	r1, r1, r1
   d8912:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8916:	f1a4 0401 	sub.w	r4, r4, #1
   d891a:	d1e9      	bne.n	d88f0 <__adddf3+0x10c>
   d891c:	f091 0f00 	teq	r1, #0
   d8920:	bf04      	itt	eq
   d8922:	4601      	moveq	r1, r0
   d8924:	2000      	moveq	r0, #0
   d8926:	fab1 f381 	clz	r3, r1
   d892a:	bf08      	it	eq
   d892c:	3320      	addeq	r3, #32
   d892e:	f1a3 030b 	sub.w	r3, r3, #11
   d8932:	f1b3 0220 	subs.w	r2, r3, #32
   d8936:	da0c      	bge.n	d8952 <__adddf3+0x16e>
   d8938:	320c      	adds	r2, #12
   d893a:	dd08      	ble.n	d894e <__adddf3+0x16a>
   d893c:	f102 0c14 	add.w	ip, r2, #20
   d8940:	f1c2 020c 	rsb	r2, r2, #12
   d8944:	fa01 f00c 	lsl.w	r0, r1, ip
   d8948:	fa21 f102 	lsr.w	r1, r1, r2
   d894c:	e00c      	b.n	d8968 <__adddf3+0x184>
   d894e:	f102 0214 	add.w	r2, r2, #20
   d8952:	bfd8      	it	le
   d8954:	f1c2 0c20 	rsble	ip, r2, #32
   d8958:	fa01 f102 	lsl.w	r1, r1, r2
   d895c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8960:	bfdc      	itt	le
   d8962:	ea41 010c 	orrle.w	r1, r1, ip
   d8966:	4090      	lslle	r0, r2
   d8968:	1ae4      	subs	r4, r4, r3
   d896a:	bfa2      	ittt	ge
   d896c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8970:	4329      	orrge	r1, r5
   d8972:	bd30      	popge	{r4, r5, pc}
   d8974:	ea6f 0404 	mvn.w	r4, r4
   d8978:	3c1f      	subs	r4, #31
   d897a:	da1c      	bge.n	d89b6 <__adddf3+0x1d2>
   d897c:	340c      	adds	r4, #12
   d897e:	dc0e      	bgt.n	d899e <__adddf3+0x1ba>
   d8980:	f104 0414 	add.w	r4, r4, #20
   d8984:	f1c4 0220 	rsb	r2, r4, #32
   d8988:	fa20 f004 	lsr.w	r0, r0, r4
   d898c:	fa01 f302 	lsl.w	r3, r1, r2
   d8990:	ea40 0003 	orr.w	r0, r0, r3
   d8994:	fa21 f304 	lsr.w	r3, r1, r4
   d8998:	ea45 0103 	orr.w	r1, r5, r3
   d899c:	bd30      	pop	{r4, r5, pc}
   d899e:	f1c4 040c 	rsb	r4, r4, #12
   d89a2:	f1c4 0220 	rsb	r2, r4, #32
   d89a6:	fa20 f002 	lsr.w	r0, r0, r2
   d89aa:	fa01 f304 	lsl.w	r3, r1, r4
   d89ae:	ea40 0003 	orr.w	r0, r0, r3
   d89b2:	4629      	mov	r1, r5
   d89b4:	bd30      	pop	{r4, r5, pc}
   d89b6:	fa21 f004 	lsr.w	r0, r1, r4
   d89ba:	4629      	mov	r1, r5
   d89bc:	bd30      	pop	{r4, r5, pc}
   d89be:	f094 0f00 	teq	r4, #0
   d89c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d89c6:	bf06      	itte	eq
   d89c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d89cc:	3401      	addeq	r4, #1
   d89ce:	3d01      	subne	r5, #1
   d89d0:	e74e      	b.n	d8870 <__adddf3+0x8c>
   d89d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89d6:	bf18      	it	ne
   d89d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89dc:	d029      	beq.n	d8a32 <__adddf3+0x24e>
   d89de:	ea94 0f05 	teq	r4, r5
   d89e2:	bf08      	it	eq
   d89e4:	ea90 0f02 	teqeq	r0, r2
   d89e8:	d005      	beq.n	d89f6 <__adddf3+0x212>
   d89ea:	ea54 0c00 	orrs.w	ip, r4, r0
   d89ee:	bf04      	itt	eq
   d89f0:	4619      	moveq	r1, r3
   d89f2:	4610      	moveq	r0, r2
   d89f4:	bd30      	pop	{r4, r5, pc}
   d89f6:	ea91 0f03 	teq	r1, r3
   d89fa:	bf1e      	ittt	ne
   d89fc:	2100      	movne	r1, #0
   d89fe:	2000      	movne	r0, #0
   d8a00:	bd30      	popne	{r4, r5, pc}
   d8a02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a06:	d105      	bne.n	d8a14 <__adddf3+0x230>
   d8a08:	0040      	lsls	r0, r0, #1
   d8a0a:	4149      	adcs	r1, r1
   d8a0c:	bf28      	it	cs
   d8a0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a12:	bd30      	pop	{r4, r5, pc}
   d8a14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a18:	bf3c      	itt	cc
   d8a1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a1e:	bd30      	popcc	{r4, r5, pc}
   d8a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a2c:	f04f 0000 	mov.w	r0, #0
   d8a30:	bd30      	pop	{r4, r5, pc}
   d8a32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a36:	bf1a      	itte	ne
   d8a38:	4619      	movne	r1, r3
   d8a3a:	4610      	movne	r0, r2
   d8a3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a40:	bf1c      	itt	ne
   d8a42:	460b      	movne	r3, r1
   d8a44:	4602      	movne	r2, r0
   d8a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a4a:	bf06      	itte	eq
   d8a4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a50:	ea91 0f03 	teqeq	r1, r3
   d8a54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a58:	bd30      	pop	{r4, r5, pc}
   d8a5a:	bf00      	nop

000d8a5c <__aeabi_ui2d>:
   d8a5c:	f090 0f00 	teq	r0, #0
   d8a60:	bf04      	itt	eq
   d8a62:	2100      	moveq	r1, #0
   d8a64:	4770      	bxeq	lr
   d8a66:	b530      	push	{r4, r5, lr}
   d8a68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a70:	f04f 0500 	mov.w	r5, #0
   d8a74:	f04f 0100 	mov.w	r1, #0
   d8a78:	e750      	b.n	d891c <__adddf3+0x138>
   d8a7a:	bf00      	nop

000d8a7c <__aeabi_i2d>:
   d8a7c:	f090 0f00 	teq	r0, #0
   d8a80:	bf04      	itt	eq
   d8a82:	2100      	moveq	r1, #0
   d8a84:	4770      	bxeq	lr
   d8a86:	b530      	push	{r4, r5, lr}
   d8a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8a94:	bf48      	it	mi
   d8a96:	4240      	negmi	r0, r0
   d8a98:	f04f 0100 	mov.w	r1, #0
   d8a9c:	e73e      	b.n	d891c <__adddf3+0x138>
   d8a9e:	bf00      	nop

000d8aa0 <__aeabi_f2d>:
   d8aa0:	0042      	lsls	r2, r0, #1
   d8aa2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8aa6:	ea4f 0131 	mov.w	r1, r1, rrx
   d8aaa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8aae:	bf1f      	itttt	ne
   d8ab0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8ab4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8ab8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8abc:	4770      	bxne	lr
   d8abe:	f092 0f00 	teq	r2, #0
   d8ac2:	bf14      	ite	ne
   d8ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8ac8:	4770      	bxeq	lr
   d8aca:	b530      	push	{r4, r5, lr}
   d8acc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8ad0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ad4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8ad8:	e720      	b.n	d891c <__adddf3+0x138>
   d8ada:	bf00      	nop

000d8adc <__aeabi_ul2d>:
   d8adc:	ea50 0201 	orrs.w	r2, r0, r1
   d8ae0:	bf08      	it	eq
   d8ae2:	4770      	bxeq	lr
   d8ae4:	b530      	push	{r4, r5, lr}
   d8ae6:	f04f 0500 	mov.w	r5, #0
   d8aea:	e00a      	b.n	d8b02 <__aeabi_l2d+0x16>

000d8aec <__aeabi_l2d>:
   d8aec:	ea50 0201 	orrs.w	r2, r0, r1
   d8af0:	bf08      	it	eq
   d8af2:	4770      	bxeq	lr
   d8af4:	b530      	push	{r4, r5, lr}
   d8af6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8afa:	d502      	bpl.n	d8b02 <__aeabi_l2d+0x16>
   d8afc:	4240      	negs	r0, r0
   d8afe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b02:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b06:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b0e:	f43f aedc 	beq.w	d88ca <__adddf3+0xe6>
   d8b12:	f04f 0203 	mov.w	r2, #3
   d8b16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b1a:	bf18      	it	ne
   d8b1c:	3203      	addne	r2, #3
   d8b1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b22:	bf18      	it	ne
   d8b24:	3203      	addne	r2, #3
   d8b26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b2a:	f1c2 0320 	rsb	r3, r2, #32
   d8b2e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b32:	fa20 f002 	lsr.w	r0, r0, r2
   d8b36:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b3a:	ea40 000e 	orr.w	r0, r0, lr
   d8b3e:	fa21 f102 	lsr.w	r1, r1, r2
   d8b42:	4414      	add	r4, r2
   d8b44:	e6c1      	b.n	d88ca <__adddf3+0xe6>
   d8b46:	bf00      	nop

000d8b48 <__aeabi_dmul>:
   d8b48:	b570      	push	{r4, r5, r6, lr}
   d8b4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b56:	bf1d      	ittte	ne
   d8b58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b5c:	ea94 0f0c 	teqne	r4, ip
   d8b60:	ea95 0f0c 	teqne	r5, ip
   d8b64:	f000 f8de 	bleq	d8d24 <__aeabi_dmul+0x1dc>
   d8b68:	442c      	add	r4, r5
   d8b6a:	ea81 0603 	eor.w	r6, r1, r3
   d8b6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8b7a:	bf18      	it	ne
   d8b7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8b88:	d038      	beq.n	d8bfc <__aeabi_dmul+0xb4>
   d8b8a:	fba0 ce02 	umull	ip, lr, r0, r2
   d8b8e:	f04f 0500 	mov.w	r5, #0
   d8b92:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8b96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8b9a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b9e:	f04f 0600 	mov.w	r6, #0
   d8ba2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8ba6:	f09c 0f00 	teq	ip, #0
   d8baa:	bf18      	it	ne
   d8bac:	f04e 0e01 	orrne.w	lr, lr, #1
   d8bb0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8bb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8bb8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8bbc:	d204      	bcs.n	d8bc8 <__aeabi_dmul+0x80>
   d8bbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8bc2:	416d      	adcs	r5, r5
   d8bc4:	eb46 0606 	adc.w	r6, r6, r6
   d8bc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8bcc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8bd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8bd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8bd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8bdc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8be0:	bf88      	it	hi
   d8be2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8be6:	d81e      	bhi.n	d8c26 <__aeabi_dmul+0xde>
   d8be8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8bec:	bf08      	it	eq
   d8bee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8bf2:	f150 0000 	adcs.w	r0, r0, #0
   d8bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8bfa:	bd70      	pop	{r4, r5, r6, pc}
   d8bfc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c00:	ea46 0101 	orr.w	r1, r6, r1
   d8c04:	ea40 0002 	orr.w	r0, r0, r2
   d8c08:	ea81 0103 	eor.w	r1, r1, r3
   d8c0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c10:	bfc2      	ittt	gt
   d8c12:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c1a:	bd70      	popgt	{r4, r5, r6, pc}
   d8c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c20:	f04f 0e00 	mov.w	lr, #0
   d8c24:	3c01      	subs	r4, #1
   d8c26:	f300 80ab 	bgt.w	d8d80 <__aeabi_dmul+0x238>
   d8c2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c2e:	bfde      	ittt	le
   d8c30:	2000      	movle	r0, #0
   d8c32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c36:	bd70      	pople	{r4, r5, r6, pc}
   d8c38:	f1c4 0400 	rsb	r4, r4, #0
   d8c3c:	3c20      	subs	r4, #32
   d8c3e:	da35      	bge.n	d8cac <__aeabi_dmul+0x164>
   d8c40:	340c      	adds	r4, #12
   d8c42:	dc1b      	bgt.n	d8c7c <__aeabi_dmul+0x134>
   d8c44:	f104 0414 	add.w	r4, r4, #20
   d8c48:	f1c4 0520 	rsb	r5, r4, #32
   d8c4c:	fa00 f305 	lsl.w	r3, r0, r5
   d8c50:	fa20 f004 	lsr.w	r0, r0, r4
   d8c54:	fa01 f205 	lsl.w	r2, r1, r5
   d8c58:	ea40 0002 	orr.w	r0, r0, r2
   d8c5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c68:	fa21 f604 	lsr.w	r6, r1, r4
   d8c6c:	eb42 0106 	adc.w	r1, r2, r6
   d8c70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c74:	bf08      	it	eq
   d8c76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c7a:	bd70      	pop	{r4, r5, r6, pc}
   d8c7c:	f1c4 040c 	rsb	r4, r4, #12
   d8c80:	f1c4 0520 	rsb	r5, r4, #32
   d8c84:	fa00 f304 	lsl.w	r3, r0, r4
   d8c88:	fa20 f005 	lsr.w	r0, r0, r5
   d8c8c:	fa01 f204 	lsl.w	r2, r1, r4
   d8c90:	ea40 0002 	orr.w	r0, r0, r2
   d8c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c9c:	f141 0100 	adc.w	r1, r1, #0
   d8ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ca4:	bf08      	it	eq
   d8ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8caa:	bd70      	pop	{r4, r5, r6, pc}
   d8cac:	f1c4 0520 	rsb	r5, r4, #32
   d8cb0:	fa00 f205 	lsl.w	r2, r0, r5
   d8cb4:	ea4e 0e02 	orr.w	lr, lr, r2
   d8cb8:	fa20 f304 	lsr.w	r3, r0, r4
   d8cbc:	fa01 f205 	lsl.w	r2, r1, r5
   d8cc0:	ea43 0302 	orr.w	r3, r3, r2
   d8cc4:	fa21 f004 	lsr.w	r0, r1, r4
   d8cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ccc:	fa21 f204 	lsr.w	r2, r1, r4
   d8cd0:	ea20 0002 	bic.w	r0, r0, r2
   d8cd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8cd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cdc:	bf08      	it	eq
   d8cde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ce2:	bd70      	pop	{r4, r5, r6, pc}
   d8ce4:	f094 0f00 	teq	r4, #0
   d8ce8:	d10f      	bne.n	d8d0a <__aeabi_dmul+0x1c2>
   d8cea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8cee:	0040      	lsls	r0, r0, #1
   d8cf0:	eb41 0101 	adc.w	r1, r1, r1
   d8cf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cf8:	bf08      	it	eq
   d8cfa:	3c01      	subeq	r4, #1
   d8cfc:	d0f7      	beq.n	d8cee <__aeabi_dmul+0x1a6>
   d8cfe:	ea41 0106 	orr.w	r1, r1, r6
   d8d02:	f095 0f00 	teq	r5, #0
   d8d06:	bf18      	it	ne
   d8d08:	4770      	bxne	lr
   d8d0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d0e:	0052      	lsls	r2, r2, #1
   d8d10:	eb43 0303 	adc.w	r3, r3, r3
   d8d14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d18:	bf08      	it	eq
   d8d1a:	3d01      	subeq	r5, #1
   d8d1c:	d0f7      	beq.n	d8d0e <__aeabi_dmul+0x1c6>
   d8d1e:	ea43 0306 	orr.w	r3, r3, r6
   d8d22:	4770      	bx	lr
   d8d24:	ea94 0f0c 	teq	r4, ip
   d8d28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d2c:	bf18      	it	ne
   d8d2e:	ea95 0f0c 	teqne	r5, ip
   d8d32:	d00c      	beq.n	d8d4e <__aeabi_dmul+0x206>
   d8d34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d38:	bf18      	it	ne
   d8d3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d3e:	d1d1      	bne.n	d8ce4 <__aeabi_dmul+0x19c>
   d8d40:	ea81 0103 	eor.w	r1, r1, r3
   d8d44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d48:	f04f 0000 	mov.w	r0, #0
   d8d4c:	bd70      	pop	{r4, r5, r6, pc}
   d8d4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d52:	bf06      	itte	eq
   d8d54:	4610      	moveq	r0, r2
   d8d56:	4619      	moveq	r1, r3
   d8d58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d5c:	d019      	beq.n	d8d92 <__aeabi_dmul+0x24a>
   d8d5e:	ea94 0f0c 	teq	r4, ip
   d8d62:	d102      	bne.n	d8d6a <__aeabi_dmul+0x222>
   d8d64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d68:	d113      	bne.n	d8d92 <__aeabi_dmul+0x24a>
   d8d6a:	ea95 0f0c 	teq	r5, ip
   d8d6e:	d105      	bne.n	d8d7c <__aeabi_dmul+0x234>
   d8d70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d74:	bf1c      	itt	ne
   d8d76:	4610      	movne	r0, r2
   d8d78:	4619      	movne	r1, r3
   d8d7a:	d10a      	bne.n	d8d92 <__aeabi_dmul+0x24a>
   d8d7c:	ea81 0103 	eor.w	r1, r1, r3
   d8d80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d8c:	f04f 0000 	mov.w	r0, #0
   d8d90:	bd70      	pop	{r4, r5, r6, pc}
   d8d92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8d9a:	bd70      	pop	{r4, r5, r6, pc}

000d8d9c <__aeabi_ddiv>:
   d8d9c:	b570      	push	{r4, r5, r6, lr}
   d8d9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8da2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8da6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8daa:	bf1d      	ittte	ne
   d8dac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8db0:	ea94 0f0c 	teqne	r4, ip
   d8db4:	ea95 0f0c 	teqne	r5, ip
   d8db8:	f000 f8a7 	bleq	d8f0a <__aeabi_ddiv+0x16e>
   d8dbc:	eba4 0405 	sub.w	r4, r4, r5
   d8dc0:	ea81 0e03 	eor.w	lr, r1, r3
   d8dc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8dc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8dcc:	f000 8088 	beq.w	d8ee0 <__aeabi_ddiv+0x144>
   d8dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8dd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8dd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8ddc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8de0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8de4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8de8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8dec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8df0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8df4:	429d      	cmp	r5, r3
   d8df6:	bf08      	it	eq
   d8df8:	4296      	cmpeq	r6, r2
   d8dfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8dfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e02:	d202      	bcs.n	d8e0a <__aeabi_ddiv+0x6e>
   d8e04:	085b      	lsrs	r3, r3, #1
   d8e06:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e0a:	1ab6      	subs	r6, r6, r2
   d8e0c:	eb65 0503 	sbc.w	r5, r5, r3
   d8e10:	085b      	lsrs	r3, r3, #1
   d8e12:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e26:	bf22      	ittt	cs
   d8e28:	1ab6      	subcs	r6, r6, r2
   d8e2a:	4675      	movcs	r5, lr
   d8e2c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e30:	085b      	lsrs	r3, r3, #1
   d8e32:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e36:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e3e:	bf22      	ittt	cs
   d8e40:	1ab6      	subcs	r6, r6, r2
   d8e42:	4675      	movcs	r5, lr
   d8e44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e48:	085b      	lsrs	r3, r3, #1
   d8e4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e56:	bf22      	ittt	cs
   d8e58:	1ab6      	subcs	r6, r6, r2
   d8e5a:	4675      	movcs	r5, lr
   d8e5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e60:	085b      	lsrs	r3, r3, #1
   d8e62:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e66:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e6e:	bf22      	ittt	cs
   d8e70:	1ab6      	subcs	r6, r6, r2
   d8e72:	4675      	movcs	r5, lr
   d8e74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8e78:	ea55 0e06 	orrs.w	lr, r5, r6
   d8e7c:	d018      	beq.n	d8eb0 <__aeabi_ddiv+0x114>
   d8e7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8e82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8e86:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8e8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8e8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8e92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8e96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8e9a:	d1c0      	bne.n	d8e1e <__aeabi_ddiv+0x82>
   d8e9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ea0:	d10b      	bne.n	d8eba <__aeabi_ddiv+0x11e>
   d8ea2:	ea41 0100 	orr.w	r1, r1, r0
   d8ea6:	f04f 0000 	mov.w	r0, #0
   d8eaa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8eae:	e7b6      	b.n	d8e1e <__aeabi_ddiv+0x82>
   d8eb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8eb4:	bf04      	itt	eq
   d8eb6:	4301      	orreq	r1, r0
   d8eb8:	2000      	moveq	r0, #0
   d8eba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ebe:	bf88      	it	hi
   d8ec0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ec4:	f63f aeaf 	bhi.w	d8c26 <__aeabi_dmul+0xde>
   d8ec8:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ecc:	bf04      	itt	eq
   d8ece:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8ed6:	f150 0000 	adcs.w	r0, r0, #0
   d8eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ede:	bd70      	pop	{r4, r5, r6, pc}
   d8ee0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8ee4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8ee8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8eec:	bfc2      	ittt	gt
   d8eee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ef2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8ef6:	bd70      	popgt	{r4, r5, r6, pc}
   d8ef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8efc:	f04f 0e00 	mov.w	lr, #0
   d8f00:	3c01      	subs	r4, #1
   d8f02:	e690      	b.n	d8c26 <__aeabi_dmul+0xde>
   d8f04:	ea45 0e06 	orr.w	lr, r5, r6
   d8f08:	e68d      	b.n	d8c26 <__aeabi_dmul+0xde>
   d8f0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f0e:	ea94 0f0c 	teq	r4, ip
   d8f12:	bf08      	it	eq
   d8f14:	ea95 0f0c 	teqeq	r5, ip
   d8f18:	f43f af3b 	beq.w	d8d92 <__aeabi_dmul+0x24a>
   d8f1c:	ea94 0f0c 	teq	r4, ip
   d8f20:	d10a      	bne.n	d8f38 <__aeabi_ddiv+0x19c>
   d8f22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f26:	f47f af34 	bne.w	d8d92 <__aeabi_dmul+0x24a>
   d8f2a:	ea95 0f0c 	teq	r5, ip
   d8f2e:	f47f af25 	bne.w	d8d7c <__aeabi_dmul+0x234>
   d8f32:	4610      	mov	r0, r2
   d8f34:	4619      	mov	r1, r3
   d8f36:	e72c      	b.n	d8d92 <__aeabi_dmul+0x24a>
   d8f38:	ea95 0f0c 	teq	r5, ip
   d8f3c:	d106      	bne.n	d8f4c <__aeabi_ddiv+0x1b0>
   d8f3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f42:	f43f aefd 	beq.w	d8d40 <__aeabi_dmul+0x1f8>
   d8f46:	4610      	mov	r0, r2
   d8f48:	4619      	mov	r1, r3
   d8f4a:	e722      	b.n	d8d92 <__aeabi_dmul+0x24a>
   d8f4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f50:	bf18      	it	ne
   d8f52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f56:	f47f aec5 	bne.w	d8ce4 <__aeabi_dmul+0x19c>
   d8f5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f5e:	f47f af0d 	bne.w	d8d7c <__aeabi_dmul+0x234>
   d8f62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f66:	f47f aeeb 	bne.w	d8d40 <__aeabi_dmul+0x1f8>
   d8f6a:	e712      	b.n	d8d92 <__aeabi_dmul+0x24a>

000d8f6c <__gedf2>:
   d8f6c:	f04f 3cff 	mov.w	ip, #4294967295
   d8f70:	e006      	b.n	d8f80 <__cmpdf2+0x4>
   d8f72:	bf00      	nop

000d8f74 <__ledf2>:
   d8f74:	f04f 0c01 	mov.w	ip, #1
   d8f78:	e002      	b.n	d8f80 <__cmpdf2+0x4>
   d8f7a:	bf00      	nop

000d8f7c <__cmpdf2>:
   d8f7c:	f04f 0c01 	mov.w	ip, #1
   d8f80:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8f84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f90:	bf18      	it	ne
   d8f92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8f96:	d01b      	beq.n	d8fd0 <__cmpdf2+0x54>
   d8f98:	b001      	add	sp, #4
   d8f9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8f9e:	bf0c      	ite	eq
   d8fa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8fa4:	ea91 0f03 	teqne	r1, r3
   d8fa8:	bf02      	ittt	eq
   d8faa:	ea90 0f02 	teqeq	r0, r2
   d8fae:	2000      	moveq	r0, #0
   d8fb0:	4770      	bxeq	lr
   d8fb2:	f110 0f00 	cmn.w	r0, #0
   d8fb6:	ea91 0f03 	teq	r1, r3
   d8fba:	bf58      	it	pl
   d8fbc:	4299      	cmppl	r1, r3
   d8fbe:	bf08      	it	eq
   d8fc0:	4290      	cmpeq	r0, r2
   d8fc2:	bf2c      	ite	cs
   d8fc4:	17d8      	asrcs	r0, r3, #31
   d8fc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8fca:	f040 0001 	orr.w	r0, r0, #1
   d8fce:	4770      	bx	lr
   d8fd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8fd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fd8:	d102      	bne.n	d8fe0 <__cmpdf2+0x64>
   d8fda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8fde:	d107      	bne.n	d8ff0 <__cmpdf2+0x74>
   d8fe0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fe8:	d1d6      	bne.n	d8f98 <__cmpdf2+0x1c>
   d8fea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8fee:	d0d3      	beq.n	d8f98 <__cmpdf2+0x1c>
   d8ff0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ff4:	4770      	bx	lr
   d8ff6:	bf00      	nop

000d8ff8 <__aeabi_cdrcmple>:
   d8ff8:	4684      	mov	ip, r0
   d8ffa:	4610      	mov	r0, r2
   d8ffc:	4662      	mov	r2, ip
   d8ffe:	468c      	mov	ip, r1
   d9000:	4619      	mov	r1, r3
   d9002:	4663      	mov	r3, ip
   d9004:	e000      	b.n	d9008 <__aeabi_cdcmpeq>
   d9006:	bf00      	nop

000d9008 <__aeabi_cdcmpeq>:
   d9008:	b501      	push	{r0, lr}
   d900a:	f7ff ffb7 	bl	d8f7c <__cmpdf2>
   d900e:	2800      	cmp	r0, #0
   d9010:	bf48      	it	mi
   d9012:	f110 0f00 	cmnmi.w	r0, #0
   d9016:	bd01      	pop	{r0, pc}

000d9018 <__aeabi_dcmpeq>:
   d9018:	f84d ed08 	str.w	lr, [sp, #-8]!
   d901c:	f7ff fff4 	bl	d9008 <__aeabi_cdcmpeq>
   d9020:	bf0c      	ite	eq
   d9022:	2001      	moveq	r0, #1
   d9024:	2000      	movne	r0, #0
   d9026:	f85d fb08 	ldr.w	pc, [sp], #8
   d902a:	bf00      	nop

000d902c <__aeabi_dcmplt>:
   d902c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9030:	f7ff ffea 	bl	d9008 <__aeabi_cdcmpeq>
   d9034:	bf34      	ite	cc
   d9036:	2001      	movcc	r0, #1
   d9038:	2000      	movcs	r0, #0
   d903a:	f85d fb08 	ldr.w	pc, [sp], #8
   d903e:	bf00      	nop

000d9040 <__aeabi_dcmple>:
   d9040:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9044:	f7ff ffe0 	bl	d9008 <__aeabi_cdcmpeq>
   d9048:	bf94      	ite	ls
   d904a:	2001      	movls	r0, #1
   d904c:	2000      	movhi	r0, #0
   d904e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9052:	bf00      	nop

000d9054 <__aeabi_dcmpge>:
   d9054:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9058:	f7ff ffce 	bl	d8ff8 <__aeabi_cdrcmple>
   d905c:	bf94      	ite	ls
   d905e:	2001      	movls	r0, #1
   d9060:	2000      	movhi	r0, #0
   d9062:	f85d fb08 	ldr.w	pc, [sp], #8
   d9066:	bf00      	nop

000d9068 <__aeabi_dcmpgt>:
   d9068:	f84d ed08 	str.w	lr, [sp, #-8]!
   d906c:	f7ff ffc4 	bl	d8ff8 <__aeabi_cdrcmple>
   d9070:	bf34      	ite	cc
   d9072:	2001      	movcc	r0, #1
   d9074:	2000      	movcs	r0, #0
   d9076:	f85d fb08 	ldr.w	pc, [sp], #8
   d907a:	bf00      	nop

000d907c <__aeabi_dcmpun>:
   d907c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9084:	d102      	bne.n	d908c <__aeabi_dcmpun+0x10>
   d9086:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d908a:	d10a      	bne.n	d90a2 <__aeabi_dcmpun+0x26>
   d908c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9094:	d102      	bne.n	d909c <__aeabi_dcmpun+0x20>
   d9096:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d909a:	d102      	bne.n	d90a2 <__aeabi_dcmpun+0x26>
   d909c:	f04f 0000 	mov.w	r0, #0
   d90a0:	4770      	bx	lr
   d90a2:	f04f 0001 	mov.w	r0, #1
   d90a6:	4770      	bx	lr

000d90a8 <__aeabi_d2iz>:
   d90a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d90b0:	d215      	bcs.n	d90de <__aeabi_d2iz+0x36>
   d90b2:	d511      	bpl.n	d90d8 <__aeabi_d2iz+0x30>
   d90b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d90b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d90bc:	d912      	bls.n	d90e4 <__aeabi_d2iz+0x3c>
   d90be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d90c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d90ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90ce:	fa23 f002 	lsr.w	r0, r3, r2
   d90d2:	bf18      	it	ne
   d90d4:	4240      	negne	r0, r0
   d90d6:	4770      	bx	lr
   d90d8:	f04f 0000 	mov.w	r0, #0
   d90dc:	4770      	bx	lr
   d90de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d90e2:	d105      	bne.n	d90f0 <__aeabi_d2iz+0x48>
   d90e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d90e8:	bf08      	it	eq
   d90ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d90ee:	4770      	bx	lr
   d90f0:	f04f 0000 	mov.w	r0, #0
   d90f4:	4770      	bx	lr
   d90f6:	bf00      	nop

000d90f8 <__aeabi_d2uiz>:
   d90f8:	004a      	lsls	r2, r1, #1
   d90fa:	d211      	bcs.n	d9120 <__aeabi_d2uiz+0x28>
   d90fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9100:	d211      	bcs.n	d9126 <__aeabi_d2uiz+0x2e>
   d9102:	d50d      	bpl.n	d9120 <__aeabi_d2uiz+0x28>
   d9104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d910c:	d40e      	bmi.n	d912c <__aeabi_d2uiz+0x34>
   d910e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d911a:	fa23 f002 	lsr.w	r0, r3, r2
   d911e:	4770      	bx	lr
   d9120:	f04f 0000 	mov.w	r0, #0
   d9124:	4770      	bx	lr
   d9126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d912a:	d102      	bne.n	d9132 <__aeabi_d2uiz+0x3a>
   d912c:	f04f 30ff 	mov.w	r0, #4294967295
   d9130:	4770      	bx	lr
   d9132:	f04f 0000 	mov.w	r0, #0
   d9136:	4770      	bx	lr

000d9138 <__aeabi_d2f>:
   d9138:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d913c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9140:	bf24      	itt	cs
   d9142:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9146:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d914a:	d90d      	bls.n	d9168 <__aeabi_d2f+0x30>
   d914c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9150:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9154:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9158:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d915c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9160:	bf08      	it	eq
   d9162:	f020 0001 	biceq.w	r0, r0, #1
   d9166:	4770      	bx	lr
   d9168:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d916c:	d121      	bne.n	d91b2 <__aeabi_d2f+0x7a>
   d916e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9172:	bfbc      	itt	lt
   d9174:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9178:	4770      	bxlt	lr
   d917a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d917e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9182:	f1c2 0218 	rsb	r2, r2, #24
   d9186:	f1c2 0c20 	rsb	ip, r2, #32
   d918a:	fa10 f30c 	lsls.w	r3, r0, ip
   d918e:	fa20 f002 	lsr.w	r0, r0, r2
   d9192:	bf18      	it	ne
   d9194:	f040 0001 	orrne.w	r0, r0, #1
   d9198:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d919c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d91a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d91a4:	ea40 000c 	orr.w	r0, r0, ip
   d91a8:	fa23 f302 	lsr.w	r3, r3, r2
   d91ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d91b0:	e7cc      	b.n	d914c <__aeabi_d2f+0x14>
   d91b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d91b6:	d107      	bne.n	d91c8 <__aeabi_d2f+0x90>
   d91b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d91bc:	bf1e      	ittt	ne
   d91be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d91c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d91c6:	4770      	bxne	lr
   d91c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d91cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d91d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d91d4:	4770      	bx	lr
   d91d6:	bf00      	nop

000d91d8 <__aeabi_ldivmod>:
   d91d8:	b97b      	cbnz	r3, d91fa <__aeabi_ldivmod+0x22>
   d91da:	b972      	cbnz	r2, d91fa <__aeabi_ldivmod+0x22>
   d91dc:	2900      	cmp	r1, #0
   d91de:	bfbe      	ittt	lt
   d91e0:	2000      	movlt	r0, #0
   d91e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d91e6:	e006      	blt.n	d91f6 <__aeabi_ldivmod+0x1e>
   d91e8:	bf08      	it	eq
   d91ea:	2800      	cmpeq	r0, #0
   d91ec:	bf1c      	itt	ne
   d91ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d91f2:	f04f 30ff 	movne.w	r0, #4294967295
   d91f6:	f000 b9b1 	b.w	d955c <__aeabi_idiv0>
   d91fa:	f1ad 0c08 	sub.w	ip, sp, #8
   d91fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9202:	2900      	cmp	r1, #0
   d9204:	db09      	blt.n	d921a <__aeabi_ldivmod+0x42>
   d9206:	2b00      	cmp	r3, #0
   d9208:	db1a      	blt.n	d9240 <__aeabi_ldivmod+0x68>
   d920a:	f000 f835 	bl	d9278 <__udivmoddi4>
   d920e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9216:	b004      	add	sp, #16
   d9218:	4770      	bx	lr
   d921a:	4240      	negs	r0, r0
   d921c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9220:	2b00      	cmp	r3, #0
   d9222:	db1b      	blt.n	d925c <__aeabi_ldivmod+0x84>
   d9224:	f000 f828 	bl	d9278 <__udivmoddi4>
   d9228:	f8dd e004 	ldr.w	lr, [sp, #4]
   d922c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9230:	b004      	add	sp, #16
   d9232:	4240      	negs	r0, r0
   d9234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9238:	4252      	negs	r2, r2
   d923a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d923e:	4770      	bx	lr
   d9240:	4252      	negs	r2, r2
   d9242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9246:	f000 f817 	bl	d9278 <__udivmoddi4>
   d924a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d924e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9252:	b004      	add	sp, #16
   d9254:	4240      	negs	r0, r0
   d9256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d925a:	4770      	bx	lr
   d925c:	4252      	negs	r2, r2
   d925e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9262:	f000 f809 	bl	d9278 <__udivmoddi4>
   d9266:	f8dd e004 	ldr.w	lr, [sp, #4]
   d926a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d926e:	b004      	add	sp, #16
   d9270:	4252      	negs	r2, r2
   d9272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9276:	4770      	bx	lr

000d9278 <__udivmoddi4>:
   d9278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d927c:	468c      	mov	ip, r1
   d927e:	460e      	mov	r6, r1
   d9280:	4604      	mov	r4, r0
   d9282:	9d08      	ldr	r5, [sp, #32]
   d9284:	2b00      	cmp	r3, #0
   d9286:	d150      	bne.n	d932a <__udivmoddi4+0xb2>
   d9288:	428a      	cmp	r2, r1
   d928a:	4617      	mov	r7, r2
   d928c:	d96c      	bls.n	d9368 <__udivmoddi4+0xf0>
   d928e:	fab2 fe82 	clz	lr, r2
   d9292:	f1be 0f00 	cmp.w	lr, #0
   d9296:	d00b      	beq.n	d92b0 <__udivmoddi4+0x38>
   d9298:	f1ce 0420 	rsb	r4, lr, #32
   d929c:	fa20 f404 	lsr.w	r4, r0, r4
   d92a0:	fa01 f60e 	lsl.w	r6, r1, lr
   d92a4:	ea44 0c06 	orr.w	ip, r4, r6
   d92a8:	fa02 f70e 	lsl.w	r7, r2, lr
   d92ac:	fa00 f40e 	lsl.w	r4, r0, lr
   d92b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d92b4:	0c22      	lsrs	r2, r4, #16
   d92b6:	fbbc f0f9 	udiv	r0, ip, r9
   d92ba:	fa1f f887 	uxth.w	r8, r7
   d92be:	fb09 c610 	mls	r6, r9, r0, ip
   d92c2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d92c6:	fb00 f308 	mul.w	r3, r0, r8
   d92ca:	42b3      	cmp	r3, r6
   d92cc:	d909      	bls.n	d92e2 <__udivmoddi4+0x6a>
   d92ce:	19f6      	adds	r6, r6, r7
   d92d0:	f100 32ff 	add.w	r2, r0, #4294967295
   d92d4:	f080 8122 	bcs.w	d951c <__udivmoddi4+0x2a4>
   d92d8:	42b3      	cmp	r3, r6
   d92da:	f240 811f 	bls.w	d951c <__udivmoddi4+0x2a4>
   d92de:	3802      	subs	r0, #2
   d92e0:	443e      	add	r6, r7
   d92e2:	1af6      	subs	r6, r6, r3
   d92e4:	b2a2      	uxth	r2, r4
   d92e6:	fbb6 f3f9 	udiv	r3, r6, r9
   d92ea:	fb09 6613 	mls	r6, r9, r3, r6
   d92ee:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d92f2:	fb03 f808 	mul.w	r8, r3, r8
   d92f6:	45a0      	cmp	r8, r4
   d92f8:	d909      	bls.n	d930e <__udivmoddi4+0x96>
   d92fa:	19e4      	adds	r4, r4, r7
   d92fc:	f103 32ff 	add.w	r2, r3, #4294967295
   d9300:	f080 810a 	bcs.w	d9518 <__udivmoddi4+0x2a0>
   d9304:	45a0      	cmp	r8, r4
   d9306:	f240 8107 	bls.w	d9518 <__udivmoddi4+0x2a0>
   d930a:	3b02      	subs	r3, #2
   d930c:	443c      	add	r4, r7
   d930e:	ebc8 0404 	rsb	r4, r8, r4
   d9312:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9316:	2100      	movs	r1, #0
   d9318:	2d00      	cmp	r5, #0
   d931a:	d062      	beq.n	d93e2 <__udivmoddi4+0x16a>
   d931c:	fa24 f40e 	lsr.w	r4, r4, lr
   d9320:	2300      	movs	r3, #0
   d9322:	602c      	str	r4, [r5, #0]
   d9324:	606b      	str	r3, [r5, #4]
   d9326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d932a:	428b      	cmp	r3, r1
   d932c:	d907      	bls.n	d933e <__udivmoddi4+0xc6>
   d932e:	2d00      	cmp	r5, #0
   d9330:	d055      	beq.n	d93de <__udivmoddi4+0x166>
   d9332:	2100      	movs	r1, #0
   d9334:	e885 0041 	stmia.w	r5, {r0, r6}
   d9338:	4608      	mov	r0, r1
   d933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d933e:	fab3 f183 	clz	r1, r3
   d9342:	2900      	cmp	r1, #0
   d9344:	f040 8090 	bne.w	d9468 <__udivmoddi4+0x1f0>
   d9348:	42b3      	cmp	r3, r6
   d934a:	d302      	bcc.n	d9352 <__udivmoddi4+0xda>
   d934c:	4282      	cmp	r2, r0
   d934e:	f200 80f8 	bhi.w	d9542 <__udivmoddi4+0x2ca>
   d9352:	1a84      	subs	r4, r0, r2
   d9354:	eb66 0603 	sbc.w	r6, r6, r3
   d9358:	2001      	movs	r0, #1
   d935a:	46b4      	mov	ip, r6
   d935c:	2d00      	cmp	r5, #0
   d935e:	d040      	beq.n	d93e2 <__udivmoddi4+0x16a>
   d9360:	e885 1010 	stmia.w	r5, {r4, ip}
   d9364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9368:	b912      	cbnz	r2, d9370 <__udivmoddi4+0xf8>
   d936a:	2701      	movs	r7, #1
   d936c:	fbb7 f7f2 	udiv	r7, r7, r2
   d9370:	fab7 fe87 	clz	lr, r7
   d9374:	f1be 0f00 	cmp.w	lr, #0
   d9378:	d135      	bne.n	d93e6 <__udivmoddi4+0x16e>
   d937a:	1bf3      	subs	r3, r6, r7
   d937c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9380:	fa1f fc87 	uxth.w	ip, r7
   d9384:	2101      	movs	r1, #1
   d9386:	fbb3 f0f8 	udiv	r0, r3, r8
   d938a:	0c22      	lsrs	r2, r4, #16
   d938c:	fb08 3610 	mls	r6, r8, r0, r3
   d9390:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9394:	fb0c f300 	mul.w	r3, ip, r0
   d9398:	42b3      	cmp	r3, r6
   d939a:	d907      	bls.n	d93ac <__udivmoddi4+0x134>
   d939c:	19f6      	adds	r6, r6, r7
   d939e:	f100 32ff 	add.w	r2, r0, #4294967295
   d93a2:	d202      	bcs.n	d93aa <__udivmoddi4+0x132>
   d93a4:	42b3      	cmp	r3, r6
   d93a6:	f200 80ce 	bhi.w	d9546 <__udivmoddi4+0x2ce>
   d93aa:	4610      	mov	r0, r2
   d93ac:	1af6      	subs	r6, r6, r3
   d93ae:	b2a2      	uxth	r2, r4
   d93b0:	fbb6 f3f8 	udiv	r3, r6, r8
   d93b4:	fb08 6613 	mls	r6, r8, r3, r6
   d93b8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d93bc:	fb0c fc03 	mul.w	ip, ip, r3
   d93c0:	45a4      	cmp	ip, r4
   d93c2:	d907      	bls.n	d93d4 <__udivmoddi4+0x15c>
   d93c4:	19e4      	adds	r4, r4, r7
   d93c6:	f103 32ff 	add.w	r2, r3, #4294967295
   d93ca:	d202      	bcs.n	d93d2 <__udivmoddi4+0x15a>
   d93cc:	45a4      	cmp	ip, r4
   d93ce:	f200 80b5 	bhi.w	d953c <__udivmoddi4+0x2c4>
   d93d2:	4613      	mov	r3, r2
   d93d4:	ebcc 0404 	rsb	r4, ip, r4
   d93d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d93dc:	e79c      	b.n	d9318 <__udivmoddi4+0xa0>
   d93de:	4629      	mov	r1, r5
   d93e0:	4628      	mov	r0, r5
   d93e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93e6:	f1ce 0120 	rsb	r1, lr, #32
   d93ea:	fa06 f30e 	lsl.w	r3, r6, lr
   d93ee:	fa07 f70e 	lsl.w	r7, r7, lr
   d93f2:	fa20 f901 	lsr.w	r9, r0, r1
   d93f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d93fa:	40ce      	lsrs	r6, r1
   d93fc:	ea49 0903 	orr.w	r9, r9, r3
   d9400:	fbb6 faf8 	udiv	sl, r6, r8
   d9404:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9408:	fb08 661a 	mls	r6, r8, sl, r6
   d940c:	fa1f fc87 	uxth.w	ip, r7
   d9410:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9414:	fb0a f20c 	mul.w	r2, sl, ip
   d9418:	429a      	cmp	r2, r3
   d941a:	fa00 f40e 	lsl.w	r4, r0, lr
   d941e:	d90a      	bls.n	d9436 <__udivmoddi4+0x1be>
   d9420:	19db      	adds	r3, r3, r7
   d9422:	f10a 31ff 	add.w	r1, sl, #4294967295
   d9426:	f080 8087 	bcs.w	d9538 <__udivmoddi4+0x2c0>
   d942a:	429a      	cmp	r2, r3
   d942c:	f240 8084 	bls.w	d9538 <__udivmoddi4+0x2c0>
   d9430:	f1aa 0a02 	sub.w	sl, sl, #2
   d9434:	443b      	add	r3, r7
   d9436:	1a9b      	subs	r3, r3, r2
   d9438:	fa1f f989 	uxth.w	r9, r9
   d943c:	fbb3 f1f8 	udiv	r1, r3, r8
   d9440:	fb08 3311 	mls	r3, r8, r1, r3
   d9444:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9448:	fb01 f60c 	mul.w	r6, r1, ip
   d944c:	429e      	cmp	r6, r3
   d944e:	d907      	bls.n	d9460 <__udivmoddi4+0x1e8>
   d9450:	19db      	adds	r3, r3, r7
   d9452:	f101 32ff 	add.w	r2, r1, #4294967295
   d9456:	d26b      	bcs.n	d9530 <__udivmoddi4+0x2b8>
   d9458:	429e      	cmp	r6, r3
   d945a:	d969      	bls.n	d9530 <__udivmoddi4+0x2b8>
   d945c:	3902      	subs	r1, #2
   d945e:	443b      	add	r3, r7
   d9460:	1b9b      	subs	r3, r3, r6
   d9462:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d9466:	e78e      	b.n	d9386 <__udivmoddi4+0x10e>
   d9468:	f1c1 0e20 	rsb	lr, r1, #32
   d946c:	fa22 f40e 	lsr.w	r4, r2, lr
   d9470:	408b      	lsls	r3, r1
   d9472:	4323      	orrs	r3, r4
   d9474:	fa20 f70e 	lsr.w	r7, r0, lr
   d9478:	fa06 f401 	lsl.w	r4, r6, r1
   d947c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d9480:	fa26 f60e 	lsr.w	r6, r6, lr
   d9484:	433c      	orrs	r4, r7
   d9486:	fbb6 f9fc 	udiv	r9, r6, ip
   d948a:	0c27      	lsrs	r7, r4, #16
   d948c:	fb0c 6619 	mls	r6, ip, r9, r6
   d9490:	fa1f f883 	uxth.w	r8, r3
   d9494:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d9498:	fb09 f708 	mul.w	r7, r9, r8
   d949c:	42b7      	cmp	r7, r6
   d949e:	fa02 f201 	lsl.w	r2, r2, r1
   d94a2:	fa00 fa01 	lsl.w	sl, r0, r1
   d94a6:	d908      	bls.n	d94ba <__udivmoddi4+0x242>
   d94a8:	18f6      	adds	r6, r6, r3
   d94aa:	f109 30ff 	add.w	r0, r9, #4294967295
   d94ae:	d241      	bcs.n	d9534 <__udivmoddi4+0x2bc>
   d94b0:	42b7      	cmp	r7, r6
   d94b2:	d93f      	bls.n	d9534 <__udivmoddi4+0x2bc>
   d94b4:	f1a9 0902 	sub.w	r9, r9, #2
   d94b8:	441e      	add	r6, r3
   d94ba:	1bf6      	subs	r6, r6, r7
   d94bc:	b2a0      	uxth	r0, r4
   d94be:	fbb6 f4fc 	udiv	r4, r6, ip
   d94c2:	fb0c 6614 	mls	r6, ip, r4, r6
   d94c6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d94ca:	fb04 f808 	mul.w	r8, r4, r8
   d94ce:	45b8      	cmp	r8, r7
   d94d0:	d907      	bls.n	d94e2 <__udivmoddi4+0x26a>
   d94d2:	18ff      	adds	r7, r7, r3
   d94d4:	f104 30ff 	add.w	r0, r4, #4294967295
   d94d8:	d228      	bcs.n	d952c <__udivmoddi4+0x2b4>
   d94da:	45b8      	cmp	r8, r7
   d94dc:	d926      	bls.n	d952c <__udivmoddi4+0x2b4>
   d94de:	3c02      	subs	r4, #2
   d94e0:	441f      	add	r7, r3
   d94e2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d94e6:	ebc8 0707 	rsb	r7, r8, r7
   d94ea:	fba0 8902 	umull	r8, r9, r0, r2
   d94ee:	454f      	cmp	r7, r9
   d94f0:	4644      	mov	r4, r8
   d94f2:	464e      	mov	r6, r9
   d94f4:	d314      	bcc.n	d9520 <__udivmoddi4+0x2a8>
   d94f6:	d029      	beq.n	d954c <__udivmoddi4+0x2d4>
   d94f8:	b365      	cbz	r5, d9554 <__udivmoddi4+0x2dc>
   d94fa:	ebba 0304 	subs.w	r3, sl, r4
   d94fe:	eb67 0706 	sbc.w	r7, r7, r6
   d9502:	fa07 fe0e 	lsl.w	lr, r7, lr
   d9506:	40cb      	lsrs	r3, r1
   d9508:	40cf      	lsrs	r7, r1
   d950a:	ea4e 0303 	orr.w	r3, lr, r3
   d950e:	e885 0088 	stmia.w	r5, {r3, r7}
   d9512:	2100      	movs	r1, #0
   d9514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9518:	4613      	mov	r3, r2
   d951a:	e6f8      	b.n	d930e <__udivmoddi4+0x96>
   d951c:	4610      	mov	r0, r2
   d951e:	e6e0      	b.n	d92e2 <__udivmoddi4+0x6a>
   d9520:	ebb8 0402 	subs.w	r4, r8, r2
   d9524:	eb69 0603 	sbc.w	r6, r9, r3
   d9528:	3801      	subs	r0, #1
   d952a:	e7e5      	b.n	d94f8 <__udivmoddi4+0x280>
   d952c:	4604      	mov	r4, r0
   d952e:	e7d8      	b.n	d94e2 <__udivmoddi4+0x26a>
   d9530:	4611      	mov	r1, r2
   d9532:	e795      	b.n	d9460 <__udivmoddi4+0x1e8>
   d9534:	4681      	mov	r9, r0
   d9536:	e7c0      	b.n	d94ba <__udivmoddi4+0x242>
   d9538:	468a      	mov	sl, r1
   d953a:	e77c      	b.n	d9436 <__udivmoddi4+0x1be>
   d953c:	3b02      	subs	r3, #2
   d953e:	443c      	add	r4, r7
   d9540:	e748      	b.n	d93d4 <__udivmoddi4+0x15c>
   d9542:	4608      	mov	r0, r1
   d9544:	e70a      	b.n	d935c <__udivmoddi4+0xe4>
   d9546:	3802      	subs	r0, #2
   d9548:	443e      	add	r6, r7
   d954a:	e72f      	b.n	d93ac <__udivmoddi4+0x134>
   d954c:	45c2      	cmp	sl, r8
   d954e:	d3e7      	bcc.n	d9520 <__udivmoddi4+0x2a8>
   d9550:	463e      	mov	r6, r7
   d9552:	e7d1      	b.n	d94f8 <__udivmoddi4+0x280>
   d9554:	4629      	mov	r1, r5
   d9556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d955a:	bf00      	nop

000d955c <__aeabi_idiv0>:
   d955c:	4770      	bx	lr
   d955e:	bf00      	nop

000d9560 <__cxa_atexit>:
   d9560:	b510      	push	{r4, lr}
   d9562:	4c05      	ldr	r4, [pc, #20]	; (d9578 <__cxa_atexit+0x18>)
   d9564:	4613      	mov	r3, r2
   d9566:	b12c      	cbz	r4, d9574 <__cxa_atexit+0x14>
   d9568:	460a      	mov	r2, r1
   d956a:	4601      	mov	r1, r0
   d956c:	2002      	movs	r0, #2
   d956e:	f3af 8000 	nop.w
   d9572:	bd10      	pop	{r4, pc}
   d9574:	4620      	mov	r0, r4
   d9576:	bd10      	pop	{r4, pc}
   d9578:	00000000 	.word	0x00000000

000d957c <memcpy>:
   d957c:	b510      	push	{r4, lr}
   d957e:	1e43      	subs	r3, r0, #1
   d9580:	440a      	add	r2, r1
   d9582:	4291      	cmp	r1, r2
   d9584:	d004      	beq.n	d9590 <memcpy+0x14>
   d9586:	f811 4b01 	ldrb.w	r4, [r1], #1
   d958a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d958e:	e7f8      	b.n	d9582 <memcpy+0x6>
   d9590:	bd10      	pop	{r4, pc}

000d9592 <memset>:
   d9592:	4402      	add	r2, r0
   d9594:	4603      	mov	r3, r0
   d9596:	4293      	cmp	r3, r2
   d9598:	d002      	beq.n	d95a0 <memset+0xe>
   d959a:	f803 1b01 	strb.w	r1, [r3], #1
   d959e:	e7fa      	b.n	d9596 <memset+0x4>
   d95a0:	4770      	bx	lr
	...

000d95a4 <srand>:
   d95a4:	b538      	push	{r3, r4, r5, lr}
   d95a6:	4b12      	ldr	r3, [pc, #72]	; (d95f0 <srand+0x4c>)
   d95a8:	681c      	ldr	r4, [r3, #0]
   d95aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d95ac:	4605      	mov	r5, r0
   d95ae:	b9d3      	cbnz	r3, d95e6 <srand+0x42>
   d95b0:	2018      	movs	r0, #24
   d95b2:	f7fc fb51 	bl	d5c58 <malloc>
   d95b6:	f243 330e 	movw	r3, #13070	; 0x330e
   d95ba:	63a0      	str	r0, [r4, #56]	; 0x38
   d95bc:	8003      	strh	r3, [r0, #0]
   d95be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d95c2:	8043      	strh	r3, [r0, #2]
   d95c4:	f241 2334 	movw	r3, #4660	; 0x1234
   d95c8:	8083      	strh	r3, [r0, #4]
   d95ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d95ce:	80c3      	strh	r3, [r0, #6]
   d95d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d95d4:	8103      	strh	r3, [r0, #8]
   d95d6:	2305      	movs	r3, #5
   d95d8:	8143      	strh	r3, [r0, #10]
   d95da:	230b      	movs	r3, #11
   d95dc:	8183      	strh	r3, [r0, #12]
   d95de:	2201      	movs	r2, #1
   d95e0:	2300      	movs	r3, #0
   d95e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d95e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d95e8:	2200      	movs	r2, #0
   d95ea:	611d      	str	r5, [r3, #16]
   d95ec:	615a      	str	r2, [r3, #20]
   d95ee:	bd38      	pop	{r3, r4, r5, pc}
   d95f0:	2003e32c 	.word	0x2003e32c

000d95f4 <strdup>:
   d95f4:	4b02      	ldr	r3, [pc, #8]	; (d9600 <strdup+0xc>)
   d95f6:	4601      	mov	r1, r0
   d95f8:	6818      	ldr	r0, [r3, #0]
   d95fa:	f000 b803 	b.w	d9604 <_strdup_r>
   d95fe:	bf00      	nop
   d9600:	2003e32c 	.word	0x2003e32c

000d9604 <_strdup_r>:
   d9604:	b570      	push	{r4, r5, r6, lr}
   d9606:	4606      	mov	r6, r0
   d9608:	4608      	mov	r0, r1
   d960a:	460c      	mov	r4, r1
   d960c:	f000 f80d 	bl	d962a <strlen>
   d9610:	1c45      	adds	r5, r0, #1
   d9612:	4629      	mov	r1, r5
   d9614:	4630      	mov	r0, r6
   d9616:	f7fc fb3f 	bl	d5c98 <_malloc_r>
   d961a:	4606      	mov	r6, r0
   d961c:	b118      	cbz	r0, d9626 <_strdup_r+0x22>
   d961e:	462a      	mov	r2, r5
   d9620:	4621      	mov	r1, r4
   d9622:	f7ff ffab 	bl	d957c <memcpy>
   d9626:	4630      	mov	r0, r6
   d9628:	bd70      	pop	{r4, r5, r6, pc}

000d962a <strlen>:
   d962a:	4603      	mov	r3, r0
   d962c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9630:	2a00      	cmp	r2, #0
   d9632:	d1fb      	bne.n	d962c <strlen+0x2>
   d9634:	1a18      	subs	r0, r3, r0
   d9636:	3801      	subs	r0, #1
   d9638:	4770      	bx	lr

000d963a <link_code_end>:
	...

000d963c <dynalib_user>:
   d963c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d964c:	0000 0000 0100 0402 1008 0000               ............

000d9658 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d9660:	4b65 000d 4b79 000d 4d42 3645 3038 7420     eK..yK..BME680 t
   d9670:	7365 0074 6f43 6c75 2064 6f6e 2074 6966     est.Could not fi
   d9680:	646e 6120 7620 6c61 6469 4220 454d 3836     nd a valid BME68
   d9690:	2030 6573 736e 726f 202c 6863 6365 206b     0 sensor, check 
   d96a0:	6977 6972 676e 0021 4d42 3645 3038 4920     wiring!.BME680 I
   d96b0:	2073 6e4f 696c 656e 6120 646e 5220 6165     s Online and Rea
   d96c0:	7964 2121 0021 6554 706d 7265 7461 7275     dy!!!.Temperatur
   d96d0:	2065 203d 2000 432a 5000 6572 7373 7275     e = . *C.Pressur
   d96e0:	2065 203d 2000 5068 0061 7041 7270 786f     e = . hPa.Approx
   d96f0:	202e 6c41 6974 7574 6564 3d20 0020 6d20     . Altitude = . m
   d9700:	4800 6d75 6469 7469 2079 203d 2000 0025     .Humidity = . %.
   d9710:	6147 2073 203d 2000 4f4b 6d68 0073 6f48     Gas = . KOhms.Ho
   d9720:	656d 545f 6d65 0070 6f48 656d 505f 6572     me_Temp.Home_Pre
   d9730:	0073 6f48 656d 485f 6d75 6469 4800 6d6f     s.Home_Humid.Hom
   d9740:	5f65 6147 0073 6f48 656d 505f 324d 0035     e_Gas.Home_PM25.
   d9750:	6425 6200 656d 762d 6c61 0073 6554 706d     %d.bme-vals.Temp
   d9760:	7265 7461 7275 2865 2946 3d20 2520 2e31     erature(F) = %1.
   d9770:	6632 5000 6572 7373 7275 2865 6e69 6748     2f.Pressure(inHg
   d9780:	2029 203d 3125 322e 0066 0000               ) = %1.2f...

000d978c <_ZTV10JsonBuffer>:
	...
   d9794:	5521 000d 553d 000d                         !U..=U..

000d979c <_ZTV10JsonWriter>:
	...
   d97a4:	5551 000d 5565 000d 6c25 0075 3025 7834     QU..eU..%lu.%04x
   d97b4:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d97c4:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d97d4:	2500 666c 0000 0000                         .%lf....

000d97dc <_ZTVN5spark13EthernetClassE>:
	...
   d97e4:	5d17 000d 5d0d 000d 5d03 000d 5cf9 000d     .]...]...]...\..
   d97f4:	5ced 000d 5ce1 000d 5cd5 000d 5ccd 000d     .\...\...\...\..
   d9804:	5cc3 000d 5cb9 000d 7031 000d               .\...\..1p..

000d9810 <_ZTV8SPIClass>:
	...
   d9818:	5d35 000d 5d37 000d                         5]..7]..

000d9820 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9820:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d9830:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d9840:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d9850:	7261 6d61 6300 646d 6800 646e 7300 7274     aram.cmd.hnd.str
   d9860:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   d9870:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   d9880:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   d9890:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   d98a0:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
   d98b0:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   d98c0:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d98d0:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
   d98e0:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   d98f0:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   d9900:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
   d9910:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   d9920:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d9930:	7361 7463 6d69 0065                         asctime.

000d9938 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9940:	6421 000d 6427 000d 646b 000d 6435 000d     !d..'d..kd..5d..
   d9950:	6423 000d                                   #d..

000d9954 <_ZTV9IPAddress>:
	...
   d995c:	69b9 000d 69a9 000d 69ab 000d               .i...i...i..

000d9968 <_ZTV9USBSerial>:
	...
   d9970:	6a91 000d 6ae1 000d 6aef 000d 5fb1 000d     .j...j...j..._..
   d9980:	6acd 000d 6a93 000d 6aa9 000d 6adb 000d     .j...j...j...j..
   d9990:	6abf 000d 6a8d 000d                         .j...j..

000d9998 <_ZTV11USARTSerial>:
	...
   d99a0:	6b9d 000d 6bed 000d 6bfb 000d 5fb1 000d     .k...k...k..._..
   d99b0:	6bb1 000d 6bd3 000d 6bbf 000d 6be7 000d     .k...k...k...k..
   d99c0:	6b9f 000d 6ba3 000d                         .k...k..

000d99c8 <_ZTV7TwoWire>:
	...
   d99d0:	6cc9 000d 6d13 000d 6ceb 000d 6ccb 000d     .l...m...l...l..
   d99e0:	6cf3 000d 6cfb 000d 6d03 000d 6d0b 000d     .l...l...m...m..

000d99f0 <_ZTVN5spark9MeshClassE>:
	...
   d99f8:	6e2f 000d 6e25 000d 6e1b 000d 6e11 000d     /n..%n...n...n..
   d9a08:	6e05 000d 6df9 000d 6ded 000d 6de5 000d     .n...m...m...m..
   d9a18:	6ddb 000d 6dd1 000d 7031 000d               .m...m..1p..

000d9a24 <_ZTVN5spark9WiFiClassE>:
	...
   d9a2c:	6fab 000d 6fa1 000d 6f97 000d 6f4d 000d     .o...o...o..Mo..
   d9a3c:	6f8b 000d 6f7f 000d 6f73 000d 6f6b 000d     .o...o..so..ko..
   d9a4c:	6f61 000d 6f57 000d 7031 000d               ao..Wo..1p..

000d9a58 <_ZTVN5spark12NetworkClassE>:
	...
   d9a60:	6fc9 000d 6fd3 000d 6fdd 000d 6fe7 000d     .o...o...o...o..
   d9a70:	6ff1 000d 6ffd 000d 7009 000d 7015 000d     .o...o...p...p..
   d9a80:	701d 000d 7027 000d 7031 000d               .p..'p..1p..

000d9a8c <_ZSt7nothrow>:
   d9a8c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9a98 <TWO52>:
   d9a98:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9aa8 <__sf_fake_stdin>:
	...

000d9ac8 <__sf_fake_stdout>:
	...

000d9ae8 <__sf_fake_stderr>:
	...

000d9b08 <link_const_variable_data_end>:
   d9b08:	000d4fa5 	.word	0x000d4fa5
   d9b0c:	000d551b 	.word	0x000d551b
   d9b10:	000d57ed 	.word	0x000d57ed
   d9b14:	000d5d21 	.word	0x000d5d21
   d9b18:	000d5efd 	.word	0x000d5efd
   d9b1c:	000d5f89 	.word	0x000d5f89
   d9b20:	000d628d 	.word	0x000d628d
   d9b24:	000d629d 	.word	0x000d629d
   d9b28:	000d62f5 	.word	0x000d62f5
   d9b2c:	000d6efd 	.word	0x000d6efd
   d9b30:	000d6fb5 	.word	0x000d6fb5
   d9b34:	000d70fd 	.word	0x000d70fd
   d9b38:	000d72d9 	.word	0x000d72d9
   d9b3c:	000d735d 	.word	0x000d735d
   d9b40:	000d7421 	.word	0x000d7421
   d9b44:	000d74e5 	.word	0x000d74e5

000d9b48 <link_constructors_end>:
	...
