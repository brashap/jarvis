
/home/brian/Particle/AdaControl/target/1.1.0/argon/AdaControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000170fc  2**0
                  CONTENTS
  3 .data         00000070  2003e214  000d7060  0000e214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000056c  2003e284  2003e284  0001e284  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d70d0  000d70d0  000170d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d70f8  000d70f8  000170f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bdc80  00000000  00000000  000170fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010ddf  00000000  00000000  000d4d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002078  00000000  00000000  000e5b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00034181  00000000  00000000  000e7bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002824d  00000000  00000000  0011bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000dcd77  00000000  00000000  00143fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013d87  00000000  00000000  00220d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000034d0  00000000  00000000  00234a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b8f8  00000000  00000000  00237f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	90 68 0d 00                                         .h..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb01 	bl	d6634 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb21 	bl	d6680 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e214 	.word	0x2003e214
   d4048:	000d7060 	.word	0x000d7060
   d404c:	2003e284 	.word	0x2003e284
   d4050:	2003e284 	.word	0x2003e284
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd7d 	bl	d5b58 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d705c 	.word	0x000d705c
   d4080:	000d701c 	.word	0x000d701c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b846 	b.w	d4114 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f875 	bl	d4178 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd2f 	b.w	d5af4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bf31 	b.w	d4efc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bf37 	b.w	d4f0c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bf35 	b.w	d4f0c <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fe9a 	bl	d4de4 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4d05 	.word	0x000d4d05

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c8:	4770      	bx	lr
	...

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d6c48 	.word	0x000d6c48

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	f7ff ffc6 	bl	d409a <_ZdlPv>
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
	...

000d4114 <setup>:
long time1;
long time2;


// setup() runs once, when the device is first turned on.
void setup() {
   d4114:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
Serial.begin(115200); 
   d4116:	f001 fc15 	bl	d5944 <_Z16_fetch_usbserialv>
   d411a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d411e:	f001 fbff 	bl	d5920 <_ZN9USBSerial5beginEl>
   while(!Serial);    // time to get serial running
   d4122:	f001 fc0f 	bl	d5944 <_Z16_fetch_usbserialv>
   d4126:	f001 fc02 	bl	d592e <_ZN9USBSerialcvbEv>
   d412a:	2800      	cmp	r0, #0
   d412c:	d0f9      	beq.n	d4122 <setup+0xe>

pinMode(ledPin,OUTPUT);
   d412e:	4b0c      	ldr	r3, [pc, #48]	; (d4160 <setup+0x4c>)
   d4130:	2101      	movs	r1, #1
   d4132:	8818      	ldrh	r0, [r3, #0]
   d4134:	f001 ff1c 	bl	d5f70 <pinMode>
pinMode(buttonPin,INPUT_PULLDOWN);
   d4138:	4b0a      	ldr	r3, [pc, #40]	; (d4164 <setup+0x50>)
   d413a:	2103      	movs	r1, #3
   d413c:	8818      	ldrh	r0, [r3, #0]
   d413e:	f001 ff17 	bl	d5f70 <pinMode>
bright = 255;
   d4142:	4b09      	ldr	r3, [pc, #36]	; (d4168 <setup+0x54>)
   d4144:	22ff      	movs	r2, #255	; 0xff
   d4146:	601a      	str	r2, [r3, #0]

Serial.println("Let's get going");
   d4148:	f001 fbfc 	bl	d5944 <_Z16_fetch_usbserialv>
   d414c:	4907      	ldr	r1, [pc, #28]	; (d416c <setup+0x58>)
   d414e:	f001 fd7c 	bl	d5c4a <_ZN5Print7printlnEPKc>

   // Setup MQTT subscription for onoff feed. 
   mqtt.subscribe(&onoffbutton); 
   d4152:	4907      	ldr	r1, [pc, #28]	; (d4170 <setup+0x5c>)
   d4154:	4807      	ldr	r0, [pc, #28]	; (d4174 <setup+0x60>)


}
   d4156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bright = 255;

Serial.println("Let's get going");

   // Setup MQTT subscription for onoff feed. 
   mqtt.subscribe(&onoffbutton); 
   d415a:	f000 b9dd 	b.w	d4518 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d415e:	bf00      	nop
   d4160:	2003e214 	.word	0x2003e214
   d4164:	2003e2b4 	.word	0x2003e2b4
   d4168:	2003e2b8 	.word	0x2003e2b8
   d416c:	000d68a4 	.word	0x000d68a4
   d4170:	2003e398 	.word	0x2003e398
   d4174:	2003e2bc 	.word	0x2003e2bc

000d4178 <loop>:


}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4178:	b570      	push	{r4, r5, r6, lr}

Serial.print("Start Loop   ");
   d417a:	f001 fbe3 	bl	d5944 <_Z16_fetch_usbserialv>
   d417e:	4958      	ldr	r1, [pc, #352]	; (d42e0 <loop+0x168>)
   d4180:	f001 fd50 	bl	d5c24 <_ZN5Print5printEPKc>
Serial.println(millis());
   d4184:	f001 fbde 	bl	d5944 <_Z16_fetch_usbserialv>
   d4188:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d418a:	f000 fdc3 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
   d418e:	220a      	movs	r2, #10
   d4190:	4601      	mov	r1, r0
   d4192:	4620      	mov	r0, r4
   d4194:	f001 fd92 	bl	d5cbc <_ZN5Print7printlnEmi>
Serial.print("Button State   ");
   d4198:	f001 fbd4 	bl	d5944 <_Z16_fetch_usbserialv>
   d419c:	4951      	ldr	r1, [pc, #324]	; (d42e4 <loop+0x16c>)
Serial.println(digitalRead(buttonPin));
   d419e:	4c52      	ldr	r4, [pc, #328]	; (d42e8 <loop+0x170>)
// loop() runs over and over again, as quickly as it can execute.
void loop() {

Serial.print("Start Loop   ");
Serial.println(millis());
Serial.print("Button State   ");
   d41a0:	f001 fd40 	bl	d5c24 <_ZN5Print5printEPKc>
Serial.println(digitalRead(buttonPin));
   d41a4:	f001 fbce 	bl	d5944 <_Z16_fetch_usbserialv>
   d41a8:	4605      	mov	r5, r0
   d41aa:	8820      	ldrh	r0, [r4, #0]
   d41ac:	f001 fef1 	bl	d5f92 <digitalRead>
   d41b0:	220a      	movs	r2, #10
   d41b2:	4601      	mov	r1, r0
   d41b4:	4628      	mov	r0, r5
   d41b6:	f001 fdb7 	bl	d5d28 <_ZN5Print7printlnEli>
  if (digitalRead(buttonPin) == HIGH) {
   d41ba:	8820      	ldrh	r0, [r4, #0]
   d41bc:	4c4b      	ldr	r4, [pc, #300]	; (d42ec <loop+0x174>)
   d41be:	f001 fee8 	bl	d5f92 <digitalRead>
   d41c2:	2801      	cmp	r0, #1
   d41c4:	4b4a      	ldr	r3, [pc, #296]	; (d42f0 <loop+0x178>)
   d41c6:	d107      	bne.n	d41d8 <loop+0x60>
    analogWrite(ledPin,bright);
   d41c8:	4a4a      	ldr	r2, [pc, #296]	; (d42f4 <loop+0x17c>)
   d41ca:	8818      	ldrh	r0, [r3, #0]
   d41cc:	6811      	ldr	r1, [r2, #0]
   d41ce:	f001 fef3 	bl	d5fb8 <_Z11analogWritetm>
    led = 1.0;
   d41d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d41d6:	e004      	b.n	d41e2 <loop+0x6a>
  }
  else {
    analogWrite(ledPin,0);
   d41d8:	8818      	ldrh	r0, [r3, #0]
   d41da:	2100      	movs	r1, #0
   d41dc:	f001 feec 	bl	d5fb8 <_Z11analogWritetm>
    led = 0.0;
   d41e0:	2300      	movs	r3, #0
  }

delay(3000);   // throttle Adafruit.IO
   d41e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    analogWrite(ledPin,bright);
    led = 1.0;
  }
  else {
    analogWrite(ledPin,0);
    led = 0.0;
   d41e6:	6023      	str	r3, [r4, #0]
  }

delay(3000);   // throttle Adafruit.IO
   d41e8:	f001 fc63 	bl	d5ab2 <delay>

Serial.print("Start Publish   ");
   d41ec:	f001 fbaa 	bl	d5944 <_Z16_fetch_usbserialv>
   d41f0:	4941      	ldr	r1, [pc, #260]	; (d42f8 <loop+0x180>)
   d41f2:	f001 fd17 	bl	d5c24 <_ZN5Print5printEPKc>
Serial.println(millis());
   d41f6:	f001 fba5 	bl	d5944 <_Z16_fetch_usbserialv>
   d41fa:	4605      	mov	r5, r0
   d41fc:	f000 fd8a 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
   d4200:	220a      	movs	r2, #10
   d4202:	4601      	mov	r1, r0
   d4204:	4628      	mov	r0, r5
   d4206:	f001 fd59 	bl	d5cbc <_ZN5Print7printlnEmi>
Serial.println(mqtt.Update());
   d420a:	f001 fb9b 	bl	d5944 <_Z16_fetch_usbserialv>
   d420e:	4605      	mov	r5, r0
   d4210:	483a      	ldr	r0, [pc, #232]	; (d42fc <loop+0x184>)
   d4212:	f000 fc24 	bl	d4a5e <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d4216:	220a      	movs	r2, #10
   d4218:	4601      	mov	r1, r0
   d421a:	4628      	mov	r0, r5
   d421c:	f001 fd7a 	bl	d5d14 <_ZN5Print7printlnEii>
state1.publish(led);
   d4220:	6820      	ldr	r0, [r4, #0]
Serial.print("End Publish   ");
Serial.println(millis());

  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {
    if (subscription == &onoffbutton) {
   d4222:	4d37      	ldr	r5, [pc, #220]	; (d4300 <loop+0x188>)
delay(3000);   // throttle Adafruit.IO

Serial.print("Start Publish   ");
Serial.println(millis());
Serial.println(mqtt.Update());
state1.publish(led);
   d4224:	f002 f9a0 	bl	d6568 <__aeabi_f2d>
   d4228:	ec41 0b10 	vmov	d0, r0, r1
   d422c:	2102      	movs	r1, #2
   d422e:	4835      	ldr	r0, [pc, #212]	; (d4304 <loop+0x18c>)
   d4230:	f000 fb6a 	bl	d4908 <_ZN21Adafruit_MQTT_Publish7publishEdh>
Serial.print("End Publish   ");
   d4234:	f001 fb86 	bl	d5944 <_Z16_fetch_usbserialv>
   d4238:	4933      	ldr	r1, [pc, #204]	; (d4308 <loop+0x190>)
   d423a:	f001 fcf3 	bl	d5c24 <_ZN5Print5printEPKc>
Serial.println(millis());
   d423e:	f001 fb81 	bl	d5944 <_Z16_fetch_usbserialv>
   d4242:	4604      	mov	r4, r0
   d4244:	f000 fd66 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
   d4248:	220a      	movs	r2, #10
   d424a:	4601      	mov	r1, r0
   d424c:	4620      	mov	r0, r4
   d424e:	f001 fd35 	bl	d5cbc <_ZN5Print7printlnEmi>

  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {
   d4252:	f241 3188 	movw	r1, #5000	; 0x1388
   d4256:	4829      	ldr	r0, [pc, #164]	; (d42fc <loop+0x184>)
   d4258:	f000 f97a 	bl	d4550 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d425c:	b1e8      	cbz	r0, d429a <loop+0x122>
    if (subscription == &onoffbutton) {
   d425e:	42a8      	cmp	r0, r5
   d4260:	d1f7      	bne.n	d4252 <loop+0xda>
      Serial.print(F("Got: "));
   d4262:	f001 fb6f 	bl	d5944 <_Z16_fetch_usbserialv>
      Serial.println((char *)onoffbutton.lastread);
   d4266:	1d6c      	adds	r4, r5, #5
Serial.println(millis());

  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {
    if (subscription == &onoffbutton) {
      Serial.print(F("Got: "));
   d4268:	4928      	ldr	r1, [pc, #160]	; (d430c <loop+0x194>)
   d426a:	f001 fcdb 	bl	d5c24 <_ZN5Print5printEPKc>
      Serial.println((char *)onoffbutton.lastread);
   d426e:	f001 fb69 	bl	d5944 <_Z16_fetch_usbserialv>
   d4272:	4621      	mov	r1, r4
   d4274:	f001 fce9 	bl	d5c4a <_ZN5Print7printlnEPKc>
      bright = atoi((char *)onoffbutton.lastread);
   d4278:	4620      	mov	r0, r4
   d427a:	f002 f9c9 	bl	d6610 <atoi>
   d427e:	4c1d      	ldr	r4, [pc, #116]	; (d42f4 <loop+0x17c>)
   d4280:	6020      	str	r0, [r4, #0]
      Serial.print("---- Integer ---- ");
   d4282:	f001 fb5f 	bl	d5944 <_Z16_fetch_usbserialv>
   d4286:	4922      	ldr	r1, [pc, #136]	; (d4310 <loop+0x198>)
   d4288:	f001 fccc 	bl	d5c24 <_ZN5Print5printEPKc>
      Serial.println(bright);
   d428c:	f001 fb5a 	bl	d5944 <_Z16_fetch_usbserialv>
   d4290:	220a      	movs	r2, #10
   d4292:	6821      	ldr	r1, [r4, #0]
   d4294:	f001 fd3e 	bl	d5d14 <_ZN5Print7printlnEii>
   d4298:	e7db      	b.n	d4252 <loop+0xda>
    }
  }

Serial.print("End Subscribe   ");
   d429a:	f001 fb53 	bl	d5944 <_Z16_fetch_usbserialv>
   d429e:	491d      	ldr	r1, [pc, #116]	; (d4314 <loop+0x19c>)
Serial.println(millis());  

  time1=millis();
   d42a0:	4d1d      	ldr	r5, [pc, #116]	; (d4318 <loop+0x1a0>)
      Serial.print("---- Integer ---- ");
      Serial.println(bright);
    }
  }

Serial.print("End Subscribe   ");
   d42a2:	f001 fcbf 	bl	d5c24 <_ZN5Print5printEPKc>
Serial.println(millis());  
   d42a6:	f001 fb4d 	bl	d5944 <_Z16_fetch_usbserialv>
   d42aa:	4604      	mov	r4, r0
   d42ac:	f000 fd32 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
   d42b0:	220a      	movs	r2, #10
   d42b2:	4601      	mov	r1, r0
   d42b4:	4620      	mov	r0, r4
   d42b6:	f001 fd01 	bl	d5cbc <_ZN5Print7printlnEmi>
   d42ba:	f000 fd2b 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>

  time1=millis();
   d42be:	6028      	str	r0, [r5, #0]
   d42c0:	f000 fd28 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
  time2=millis();
   d42c4:	4c15      	ldr	r4, [pc, #84]	; (d431c <loop+0x1a4>)
   d42c6:	6020      	str	r0, [r4, #0]
  while((time2-time1)<2000) {
   d42c8:	4626      	mov	r6, r4
   d42ca:	6823      	ldr	r3, [r4, #0]
   d42cc:	682a      	ldr	r2, [r5, #0]
   d42ce:	1a9b      	subs	r3, r3, r2
   d42d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   d42d4:	da03      	bge.n	d42de <loop+0x166>
   d42d6:	f000 fd1d 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
    time2=millis();
   d42da:	6030      	str	r0, [r6, #0]
Serial.print("End Subscribe   ");
Serial.println(millis());  

  time1=millis();
  time2=millis();
  while((time2-time1)<2000) {
   d42dc:	e7f5      	b.n	d42ca <loop+0x152>
   d42de:	bd70      	pop	{r4, r5, r6, pc}
   d42e0:	000d68b4 	.word	0x000d68b4
   d42e4:	000d68c2 	.word	0x000d68c2
   d42e8:	2003e2b4 	.word	0x2003e2b4
   d42ec:	2003e2a4 	.word	0x2003e2a4
   d42f0:	2003e214 	.word	0x2003e214
   d42f4:	2003e2b8 	.word	0x2003e2b8
   d42f8:	000d68d2 	.word	0x000d68d2
   d42fc:	2003e2bc 	.word	0x2003e2bc
   d4300:	2003e398 	.word	0x2003e398
   d4304:	2003e2a8 	.word	0x2003e2a8
   d4308:	000d68e3 	.word	0x000d68e3
   d430c:	000d68f2 	.word	0x000d68f2
   d4310:	000d68f8 	.word	0x000d68f8
   d4314:	000d690b 	.word	0x000d690b
   d4318:	2003e390 	.word	0x2003e390
   d431c:	2003e394 	.word	0x2003e394

000d4320 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4320:	b510      	push	{r4, lr}
   d4322:	4604      	mov	r4, r0
   d4324:	f7ff feb9 	bl	d409a <_ZdlPv>
   d4328:	4620      	mov	r0, r4
   d432a:	bd10      	pop	{r4, pc}

000d432c <_GLOBAL__sub_I_TheClient>:


//if(mqtt.Update()) {
//  state1.publish(led);
//}
   d432c:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d432e:	4d17      	ldr	r5, [pc, #92]	; (d438c <_GLOBAL__sub_I_TheClient+0x60>)
   d4330:	4e17      	ldr	r6, [pc, #92]	; (d4390 <_GLOBAL__sub_I_TheClient+0x64>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4332:	4c18      	ldr	r4, [pc, #96]	; (d4394 <_GLOBAL__sub_I_TheClient+0x68>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4334:	f000 fd0e 	bl	d4d54 <HAL_Pin_Map>
   d4338:	4628      	mov	r0, r5
   d433a:	f001 f98b 	bl	d5654 <_ZN9TCPClientC1Ev>
   d433e:	4632      	mov	r2, r6
   d4340:	4915      	ldr	r1, [pc, #84]	; (d4398 <_GLOBAL__sub_I_TheClient+0x6c>)
   d4342:	4628      	mov	r0, r5
   d4344:	f001 fe5e 	bl	d6004 <__aeabi_atexit>
   d4348:	4b14      	ldr	r3, [pc, #80]	; (d439c <_GLOBAL__sub_I_TheClient+0x70>)
   d434a:	9300      	str	r3, [sp, #0]
   d434c:	f240 725b 	movw	r2, #1883	; 0x75b
   d4350:	4b13      	ldr	r3, [pc, #76]	; (d43a0 <_GLOBAL__sub_I_TheClient+0x74>)
   d4352:	4914      	ldr	r1, [pc, #80]	; (d43a4 <_GLOBAL__sub_I_TheClient+0x78>)
   d4354:	4620      	mov	r0, r4
   d4356:	f000 f845 	bl	d43e4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d435a:	4b13      	ldr	r3, [pc, #76]	; (d43a8 <_GLOBAL__sub_I_TheClient+0x7c>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d435c:	4913      	ldr	r1, [pc, #76]	; (d43ac <_GLOBAL__sub_I_TheClient+0x80>)
   d435e:	6023      	str	r3, [r4, #0]
   d4360:	4632      	mov	r2, r6
   d4362:	4620      	mov	r0, r4
   d4364:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d4368:	f001 fe4c 	bl	d6004 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish state1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/statex");
   d436c:	4621      	mov	r1, r4
   d436e:	2300      	movs	r3, #0
   d4370:	4a0f      	ldr	r2, [pc, #60]	; (d43b0 <_GLOBAL__sub_I_TheClient+0x84>)
   d4372:	4810      	ldr	r0, [pc, #64]	; (d43b4 <_GLOBAL__sub_I_TheClient+0x88>)
   d4374:	f000 fac2 	bl	d48fc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/statesend"); 
   d4378:	4a0f      	ldr	r2, [pc, #60]	; (d43b8 <_GLOBAL__sub_I_TheClient+0x8c>)
   d437a:	4810      	ldr	r0, [pc, #64]	; (d43bc <_GLOBAL__sub_I_TheClient+0x90>)
   d437c:	2300      	movs	r3, #0
   d437e:	4621      	mov	r1, r4


//if(mqtt.Update()) {
//  state1.publish(led);
//}
   d4380:	b002      	add	sp, #8
   d4382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish state1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/statex");
Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/statesend"); 
   d4386:	f000 badd 	b.w	d4944 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d438a:	bf00      	nop
   d438c:	2003e288 	.word	0x2003e288
   d4390:	2003e284 	.word	0x2003e284
   d4394:	2003e2bc 	.word	0x2003e2bc
   d4398:	000d40cd 	.word	0x000d40cd
   d439c:	000d6933 	.word	0x000d6933
   d43a0:	000d691c 	.word	0x000d691c
   d43a4:	000d6923 	.word	0x000d6923
   d43a8:	000d6ba0 	.word	0x000d6ba0
   d43ac:	000d40c9 	.word	0x000d40c9
   d43b0:	000d6954 	.word	0x000d6954
   d43b4:	2003e2a8 	.word	0x2003e2a8
   d43b8:	000d6968 	.word	0x000d6968
   d43bc:	2003e398 	.word	0x2003e398

000d43c0 <_ZL11stringprintPhPKct.constprop.2>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43c0:	b570      	push	{r4, r5, r6, lr}
   d43c2:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43c4:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43c6:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43c8:	f002 f992 	bl	d66f0 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d43cc:	1203      	asrs	r3, r0, #8
   d43ce:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d43d0:	7060      	strb	r0, [r4, #1]
   d43d2:	b285      	uxth	r5, r0
   d43d4:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d43d6:	462a      	mov	r2, r5
   d43d8:	4631      	mov	r1, r6
   d43da:	4620      	mov	r0, r4
   d43dc:	f002 f9b4 	bl	d6748 <strncpy>
  return p+len;
}
   d43e0:	1960      	adds	r0, r4, r5
   d43e2:	bd70      	pop	{r4, r5, r6, pc}

000d43e4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d43e4:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d43e6:	6103      	str	r3, [r0, #16]
  password = pass;
   d43e8:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43ea:	4d0d      	ldr	r5, [pc, #52]	; (d4420 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d43ec:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d43ee:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d43f0:	4a0c      	ldr	r2, [pc, #48]	; (d4424 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43f2:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43f4:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d43f6:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d43f8:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43fa:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d43fe:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d4402:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d4406:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d440a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d440e:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d4410:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d4412:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d4416:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d441a:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d441e:	bd30      	pop	{r4, r5, pc}
   d4420:	000d6988 	.word	0x000d6988
   d4424:	000d69b1 	.word	0x000d69b1

000d4428 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d442c:	fa0f fa83 	sxth.w	sl, r3
   d4430:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4432:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4434:	699d      	ldr	r5, [r3, #24]
   d4436:	2201      	movs	r2, #1
   d4438:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d443a:	4606      	mov	r6, r0
   d443c:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d443e:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4440:	b2c0      	uxtb	r0, r0
   d4442:	2801      	cmp	r0, #1
   d4444:	d001      	beq.n	d444a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d4446:	2000      	movs	r0, #0
   d4448:	e034      	b.n	d44b4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d444a:	1c65      	adds	r5, r4, #1
   d444c:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4450:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d4452:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d4456:	6833      	ldr	r3, [r6, #0]
   d4458:	699b      	ldr	r3, [r3, #24]
   d445a:	2201      	movs	r2, #1
   d445c:	461f      	mov	r7, r3
   d445e:	4629      	mov	r1, r5
   d4460:	4653      	mov	r3, sl
   d4462:	4630      	mov	r0, r6
   d4464:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d4466:	b2c0      	uxtb	r0, r0
   d4468:	2801      	cmp	r0, #1
   d446a:	d1ec      	bne.n	d4446 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d446c:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d4470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d4474:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d4476:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d447a:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d447e:	d0e2      	beq.n	d4446 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d4480:	061b      	lsls	r3, r3, #24
   d4482:	d4e8      	bmi.n	d4456 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4484:	9b01      	ldr	r3, [sp, #4]
   d4486:	1b2c      	subs	r4, r5, r4
   d4488:	1b1b      	subs	r3, r3, r4
   d448a:	3b01      	subs	r3, #1
   d448c:	4599      	cmp	r9, r3
   d448e:	6833      	ldr	r3, [r6, #0]
   d4490:	d906      	bls.n	d44a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4492:	9a01      	ldr	r2, [sp, #4]
   d4494:	699f      	ldr	r7, [r3, #24]
   d4496:	3a01      	subs	r2, #1
   d4498:	1b12      	subs	r2, r2, r4
   d449a:	4653      	mov	r3, sl
   d449c:	b292      	uxth	r2, r2
   d449e:	e003      	b.n	d44a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d44a0:	699f      	ldr	r7, [r3, #24]
   d44a2:	fa1f f289 	uxth.w	r2, r9
   d44a6:	4653      	mov	r3, sl
   d44a8:	4629      	mov	r1, r5
   d44aa:	4630      	mov	r0, r6
   d44ac:	47b8      	blx	r7
   d44ae:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d44b0:	4420      	add	r0, r4
   d44b2:	b280      	uxth	r0, r0
}
   d44b4:	b003      	add	sp, #12
   d44b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d44bc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d44bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44be:	4605      	mov	r5, r0
   d44c0:	460c      	mov	r4, r1
   d44c2:	4616      	mov	r6, r2
   d44c4:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44c6:	463b      	mov	r3, r7
   d44c8:	2296      	movs	r2, #150	; 0x96
   d44ca:	4621      	mov	r1, r4
   d44cc:	4628      	mov	r0, r5
   d44ce:	f7ff ffab 	bl	d4428 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d44d2:	b148      	cbz	r0, d44e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d44d4:	7823      	ldrb	r3, [r4, #0]
   d44d6:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d44da:	d005      	beq.n	d44e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d44dc:	f001 fa32 	bl	d5944 <_Z16_fetch_usbserialv>
   d44e0:	4902      	ldr	r1, [pc, #8]	; (d44ec <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d44e2:	f001 fbb2 	bl	d5c4a <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44e6:	e7ee      	b.n	d44c6 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d44e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44ea:	bf00      	nop
   d44ec:	000d69b2 	.word	0x000d69b2

000d44f0 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d44f0:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d44f2:	23e0      	movs	r3, #224	; 0xe0
   d44f4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d44f8:	2300      	movs	r3, #0
   d44fa:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d44fe:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d4500:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	2202      	movs	r2, #2
   d4506:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d450a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d450c:	6823      	ldr	r3, [r4, #0]
   d450e:	4620      	mov	r0, r4
   d4510:	691b      	ldr	r3, [r3, #16]

}
   d4512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4516:	4718      	bx	r3

000d4518 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d4518:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d451c:	b530      	push	{r4, r5, lr}
   d451e:	4613      	mov	r3, r2
   d4520:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d4524:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d4528:	428d      	cmp	r5, r1
   d452a:	d00f      	beq.n	d454c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d452c:	42a3      	cmp	r3, r4
   d452e:	d1f9      	bne.n	d4524 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d4530:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d4532:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d4536:	b924      	cbnz	r4, d4542 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d4538:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d453c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d4540:	e004      	b.n	d454c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d4542:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4544:	2b05      	cmp	r3, #5
   d4546:	d1f4      	bne.n	d4532 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d4548:	2000      	movs	r0, #0
   d454a:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d454c:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d454e:	bd30      	pop	{r4, r5, pc}

000d4550 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4554:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d4558:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d455a:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d455c:	2296      	movs	r2, #150	; 0x96
   d455e:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4560:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4562:	f7ff ff61 	bl	d4428 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d4566:	4606      	mov	r6, r0
   d4568:	b310      	cbz	r0, d45b0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d456a:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d456e:	b2bb      	uxth	r3, r7
   d4570:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4572:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d4576:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d457a:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d457c:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d457e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d4582:	f1bb 0f00 	cmp.w	fp, #0
   d4586:	d00e      	beq.n	d45a6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d4588:	f8db 1000 	ldr.w	r1, [fp]
   d458c:	9103      	str	r1, [sp, #12]
   d458e:	4608      	mov	r0, r1
   d4590:	f002 f8ae 	bl	d66f0 <strlen>
   d4594:	42b8      	cmp	r0, r7
   d4596:	4680      	mov	r8, r0
   d4598:	9903      	ldr	r1, [sp, #12]
   d459a:	d104      	bne.n	d45a6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d459c:	463a      	mov	r2, r7
   d459e:	9802      	ldr	r0, [sp, #8]
   d45a0:	f002 f8ae 	bl	d6700 <strncasecmp>
   d45a4:	b128      	cbz	r0, d45b2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d45a6:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d45a8:	2d05      	cmp	r5, #5
   d45aa:	d1e8      	bne.n	d457e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d45ac:	2000      	movs	r0, #0
   d45ae:	e04a      	b.n	d4646 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d45b0:	e049      	b.n	d4646 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d45b2:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d45b6:	f00a 0a06 	and.w	sl, sl, #6
   d45ba:	f1ba 0f02 	cmp.w	sl, #2
   d45be:	d13f      	bne.n	d4640 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d45c0:	19e2      	adds	r2, r4, r7
   d45c2:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d45c6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d45ca:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d45ce:	2214      	movs	r2, #20
   d45d0:	2100      	movs	r1, #0
   d45d2:	f10b 0005 	add.w	r0, fp, #5
   d45d6:	f002 f853 	bl	d6680 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d45da:	9b01      	ldr	r3, [sp, #4]
   d45dc:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d45e0:	30fc      	adds	r0, #252	; 0xfc
   d45e2:	4406      	add	r6, r0
   d45e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d45e8:	ebca 0606 	rsb	r6, sl, r6
   d45ec:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d45ee:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d45f0:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d45f4:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d45f8:	bf28      	it	cs
   d45fa:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d45fc:	4451      	add	r1, sl
   d45fe:	4632      	mov	r2, r6
   d4600:	4449      	add	r1, r9
   d4602:	3005      	adds	r0, #5
   d4604:	f002 f821 	bl	d664a <memmove>
  subscriptions[i]->datalen = datalen;
   d4608:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d460c:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d460e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4612:	f003 0306 	and.w	r3, r3, #6
   d4616:	2b02      	cmp	r3, #2
   d4618:	d10f      	bne.n	d463a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d461a:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d461e:	123b      	asrs	r3, r7, #8
   d4620:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4624:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d4626:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d462a:	2240      	movs	r2, #64	; 0x40
   d462c:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4630:	695b      	ldr	r3, [r3, #20]
   d4632:	2204      	movs	r2, #4
   d4634:	a905      	add	r1, sp, #20
   d4636:	4620      	mov	r0, r4
   d4638:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d463a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d463e:	e002      	b.n	d4646 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d4640:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d4642:	4682      	mov	sl, r0
   d4644:	e7c3      	b.n	d45ce <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d4646:	b007      	add	sp, #28
   d4648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d464c <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d464c:	b538      	push	{r3, r4, r5, lr}
   d464e:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4650:	4608      	mov	r0, r1
   d4652:	2310      	movs	r3, #16
   d4654:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4658:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d465a:	4929      	ldr	r1, [pc, #164]	; (d4700 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d465c:	f7ff feb0 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d4660:	2304      	movs	r3, #4
   d4662:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d4664:	2302      	movs	r3, #2
   d4666:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4668:	69a3      	ldr	r3, [r4, #24]
   d466a:	b1ab      	cbz	r3, d4698 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d466c:	781b      	ldrb	r3, [r3, #0]
   d466e:	b19b      	cbz	r3, d4698 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4670:	2306      	movs	r3, #6
   d4672:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4674:	f894 3020 	ldrb.w	r3, [r4, #32]
   d4678:	2b01      	cmp	r3, #1
   d467a:	d101      	bne.n	d4680 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d467c:	230e      	movs	r3, #14
   d467e:	e002      	b.n	d4686 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4680:	2b02      	cmp	r3, #2
   d4682:	d101      	bne.n	d4688 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4684:	231e      	movs	r3, #30
   d4686:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d4688:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d468c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d468e:	bf02      	ittt	eq
   d4690:	7843      	ldrbeq	r3, [r0, #1]
   d4692:	f043 0320 	orreq.w	r3, r3, #32
   d4696:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d4698:	6923      	ldr	r3, [r4, #16]
   d469a:	781b      	ldrb	r3, [r3, #0]
   d469c:	b11b      	cbz	r3, d46a6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d469e:	7843      	ldrb	r3, [r0, #1]
   d46a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d46a4:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d46a6:	6963      	ldr	r3, [r4, #20]
   d46a8:	781b      	ldrb	r3, [r3, #0]
   d46aa:	b11b      	cbz	r3, d46b4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d46ac:	7843      	ldrb	r3, [r0, #1]
   d46ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d46b2:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d46b4:	2301      	movs	r3, #1
   d46b6:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d46b8:	232c      	movs	r3, #44	; 0x2c
   d46ba:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d46bc:	68e1      	ldr	r1, [r4, #12]
   d46be:	780b      	ldrb	r3, [r1, #0]
   d46c0:	b11b      	cbz	r3, d46ca <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d46c2:	3004      	adds	r0, #4
   d46c4:	f7ff fe7c 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
   d46c8:	e002      	b.n	d46d0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d46ca:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d46cc:	7143      	strb	r3, [r0, #5]
      p++;
   d46ce:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d46d0:	69a1      	ldr	r1, [r4, #24]
   d46d2:	b131      	cbz	r1, d46e2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d46d4:	780b      	ldrb	r3, [r1, #0]
   d46d6:	b123      	cbz	r3, d46e2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d46d8:	f7ff fe72 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
    p = stringprint(p, will_payload);
   d46dc:	69e1      	ldr	r1, [r4, #28]
   d46de:	f7ff fe6f 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
  }

  if (pgm_read_byte(username) != 0) {
   d46e2:	6921      	ldr	r1, [r4, #16]
   d46e4:	780b      	ldrb	r3, [r1, #0]
   d46e6:	b10b      	cbz	r3, d46ec <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d46e8:	f7ff fe6a 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
  }
  if (pgm_read_byte(password) != 0) {
   d46ec:	6961      	ldr	r1, [r4, #20]
   d46ee:	780b      	ldrb	r3, [r1, #0]
   d46f0:	b10b      	cbz	r3, d46f6 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d46f2:	f7ff fe65 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d46f6:	1b40      	subs	r0, r0, r5
   d46f8:	b2c0      	uxtb	r0, r0
   d46fa:	1e83      	subs	r3, r0, #2
   d46fc:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d46fe:	bd38      	pop	{r3, r4, r5, pc}
   d4700:	000d69d1 	.word	0x000d69d1

000d4704 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4708:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d470a:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d470c:	460e      	mov	r6, r1
   d470e:	4691      	mov	r9, r2
   d4710:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4712:	f001 ffed 	bl	d66f0 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4716:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d471a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d471e:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d4720:	f1b8 0f00 	cmp.w	r8, #0
   d4724:	d101      	bne.n	d472a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4726:	1c83      	adds	r3, r0, #2
   d4728:	e000      	b.n	d472c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d472a:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d472c:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d4730:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d4732:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4734:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d4738:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d473a:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d473e:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d4740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d4744:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d4746:	bf18      	it	ne
   d4748:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d474c:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d4750:	2b00      	cmp	r3, #0
   d4752:	d1f5      	bne.n	d4740 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d4754:	4649      	mov	r1, r9
   d4756:	f7ff fe33 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>
   d475a:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d475c:	f1b8 0f00 	cmp.w	r8, #0
   d4760:	d00c      	beq.n	d477c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d4762:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4766:	0a12      	lsrs	r2, r2, #8
   d4768:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d476a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d476e:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d4770:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4774:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d4776:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d4778:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d477c:	4622      	mov	r2, r4
   d477e:	4639      	mov	r1, r7
   d4780:	4618      	mov	r0, r3
   d4782:	f001 ff62 	bl	d664a <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d4786:	4420      	add	r0, r4
   d4788:	1b80      	subs	r0, r0, r6
}
   d478a:	b280      	uxth	r0, r0
   d478c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4790 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4790:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4792:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4796:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d479a:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d479c:	e88d 0048 	stmia.w	sp, {r3, r6}
   d47a0:	4613      	mov	r3, r2
   d47a2:	460a      	mov	r2, r1
   d47a4:	4629      	mov	r1, r5
   d47a6:	f7ff ffad 	bl	d4704 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d47aa:	6823      	ldr	r3, [r4, #0]
   d47ac:	4602      	mov	r2, r0
   d47ae:	695b      	ldr	r3, [r3, #20]
   d47b0:	4629      	mov	r1, r5
   d47b2:	4620      	mov	r0, r4
   d47b4:	4798      	blx	r3
   d47b6:	b908      	cbnz	r0, d47bc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d47b8:	2000      	movs	r0, #0
   d47ba:	e017      	b.n	d47ec <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d47bc:	b1b6      	cbz	r6, d47ec <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d47be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d47c2:	2296      	movs	r2, #150	; 0x96
   d47c4:	4629      	mov	r1, r5
   d47c6:	4620      	mov	r0, r4
   d47c8:	f7ff fe2e 	bl	d4428 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d47cc:	2804      	cmp	r0, #4
   d47ce:	d1f3      	bne.n	d47b8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d47d0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47d4:	111b      	asrs	r3, r3, #4
   d47d6:	2b04      	cmp	r3, #4
   d47d8:	d1ee      	bne.n	d47b8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d47da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d47dc:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d47e0:	ba5b      	rev16	r3, r3
   d47e2:	3301      	adds	r3, #1
   d47e4:	b29b      	uxth	r3, r3
   d47e6:	1ac3      	subs	r3, r0, r3
   d47e8:	4258      	negs	r0, r3
   d47ea:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d47ec:	b002      	add	sp, #8
   d47ee:	bd70      	pop	{r4, r5, r6, pc}

000d47f0 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d47f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d47f2:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d47f4:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d47f6:	461f      	mov	r7, r3
   d47f8:	460e      	mov	r6, r1
   d47fa:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d47fc:	f001 ff78 	bl	d66f0 <strlen>
   d4800:	9700      	str	r7, [sp, #0]
   d4802:	b283      	uxth	r3, r0
   d4804:	4622      	mov	r2, r4
   d4806:	4631      	mov	r1, r6
   d4808:	4628      	mov	r0, r5
   d480a:	f7ff ffc1 	bl	d4790 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d480e:	b003      	add	sp, #12
   d4810:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4812 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d4812:	b538      	push	{r3, r4, r5, lr}
   d4814:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d4816:	2382      	movs	r3, #130	; 0x82
   d4818:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d481a:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d481c:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d4820:	0a09      	lsrs	r1, r1, #8
   d4822:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d4824:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4828:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d482a:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d482e:	3101      	adds	r1, #1
   d4830:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d4834:	4611      	mov	r1, r2
   d4836:	1d20      	adds	r0, r4, #4
   d4838:	f7ff fdc2 	bl	d43c0 <_ZL11stringprintPhPKct.constprop.2>

  p[0] = qos;
   d483c:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d4840:	1b00      	subs	r0, r0, r4
   d4842:	b2c0      	uxtb	r0, r0
   d4844:	1e83      	subs	r3, r0, #2
   d4846:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d4848:	bd38      	pop	{r3, r4, r5, pc}

000d484a <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d484e:	6803      	ldr	r3, [r0, #0]
   d4850:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d4852:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d4854:	4798      	blx	r3
   d4856:	b918      	cbnz	r0, d4860 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d4858:	f04f 30ff 	mov.w	r0, #4294967295
   d485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d4860:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d4864:	4629      	mov	r1, r5
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fef0 	bl	d464c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d486c:	6823      	ldr	r3, [r4, #0]
   d486e:	b282      	uxth	r2, r0
   d4870:	695b      	ldr	r3, [r3, #20]
   d4872:	4629      	mov	r1, r5
   d4874:	4620      	mov	r0, r4
   d4876:	4798      	blx	r3
   d4878:	2800      	cmp	r0, #0
   d487a:	d0ed      	beq.n	d4858 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d487c:	f241 7370 	movw	r3, #6000	; 0x1770
   d4880:	2296      	movs	r2, #150	; 0x96
   d4882:	4629      	mov	r1, r5
   d4884:	4620      	mov	r0, r4
   d4886:	f7ff fdcf 	bl	d4428 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d488a:	b2c0      	uxtb	r0, r0
   d488c:	2804      	cmp	r0, #4
   d488e:	d1e3      	bne.n	d4858 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4890:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4892:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d4896:	d1df      	bne.n	d4858 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d4898:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d489c:	b110      	cbz	r0, d48a4 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d489e:	b240      	sxtb	r0, r0
   d48a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48a4:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d48a8:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d48ac:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d48b0:	b1fb      	cbz	r3, d48f2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d48b2:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d48b4:	683a      	ldr	r2, [r7, #0]
   d48b6:	4629      	mov	r1, r5
   d48b8:	7913      	ldrb	r3, [r2, #4]
   d48ba:	6812      	ldr	r2, [r2, #0]
   d48bc:	4620      	mov	r0, r4
   d48be:	f7ff ffa8 	bl	d4812 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d48c2:	6823      	ldr	r3, [r4, #0]
   d48c4:	b282      	uxth	r2, r0
   d48c6:	695b      	ldr	r3, [r3, #20]
   d48c8:	4629      	mov	r1, r5
   d48ca:	4620      	mov	r0, r4
   d48cc:	4798      	blx	r3
   d48ce:	2800      	cmp	r0, #0
   d48d0:	d0c2      	beq.n	d4858 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d48d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d48d6:	2209      	movs	r2, #9
   d48d8:	4629      	mov	r1, r5
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fdee 	bl	d44bc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d48e0:	b938      	cbnz	r0, d48f2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d48e2:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d48e4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d48e8:	d1e4      	bne.n	d48b4 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d48ea:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d48ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d48f2:	4547      	cmp	r7, r8
   d48f4:	d1da      	bne.n	d48ac <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d48f6:	2000      	movs	r0, #0
   d48f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48fc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d48fc:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d48fe:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d4902:	7203      	strb	r3, [r0, #8]
}
   d4904:	bd10      	pop	{r4, pc}
	...

000d4908 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d4908:	b510      	push	{r4, lr}
   d490a:	b092      	sub	sp, #72	; 0x48
   d490c:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d490e:	460b      	mov	r3, r1
   d4910:	2200      	movs	r2, #0
   d4912:	490b      	ldr	r1, [pc, #44]	; (d4940 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d4914:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d4916:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d491a:	f000 faff 	bl	d4f1c <sprintf>
  sprintf(sout, fmt, val);
   d491e:	ed9d 0b00 	vldr	d0, [sp]
   d4922:	a902      	add	r1, sp, #8
   d4924:	ec53 2b10 	vmov	r2, r3, d0
   d4928:	a807      	add	r0, sp, #28
   d492a:	f000 faf7 	bl	d4f1c <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d492e:	7a23      	ldrb	r3, [r4, #8]
   d4930:	aa07      	add	r2, sp, #28
   d4932:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4936:	f7ff ff5b 	bl	d47f0 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d493a:	b012      	add	sp, #72	; 0x48
   d493c:	bd10      	pop	{r4, pc}
   d493e:	bf00      	nop
   d4940:	000d69d6 	.word	0x000d69d6

000d4944 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d4944:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d4946:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d4948:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d494a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d494c:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d494e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d4950:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d4952:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d4954:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d4956:	6283      	str	r3, [r0, #40]	; 0x28
   d4958:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d495a:	6303      	str	r3, [r0, #48]	; 0x30
}
   d495c:	bd10      	pop	{r4, pc}

000d495e <_GLOBAL__sub_I__Z11printBufferPht>:
   d495e:	f000 b9f9 	b.w	d4d54 <HAL_Pin_Map>

000d4962 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4962:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4964:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4968:	6803      	ldr	r3, [r0, #0]
   d496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d496c:	4798      	blx	r3
}
   d496e:	3000      	adds	r0, #0
   d4970:	bf18      	it	ne
   d4972:	2001      	movne	r0, #1
   d4974:	bd08      	pop	{r3, pc}

000d4976 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4978:	4606      	mov	r6, r0
   d497a:	460f      	mov	r7, r1
   d497c:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d497e:	b1c4      	cbz	r4, d49b2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4980:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4984:	6803      	ldr	r3, [r0, #0]
   d4986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4988:	4798      	blx	r3
   d498a:	b908      	cbnz	r0, d4990 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d498c:	2000      	movs	r0, #0
   d498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4990:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4994:	2cfa      	cmp	r4, #250	; 0xfa
   d4996:	6803      	ldr	r3, [r0, #0]
   d4998:	4625      	mov	r5, r4
   d499a:	bfa8      	it	ge
   d499c:	25fa      	movge	r5, #250	; 0xfa
   d499e:	68db      	ldr	r3, [r3, #12]
   d49a0:	462a      	mov	r2, r5
   d49a2:	4639      	mov	r1, r7
   d49a4:	4798      	blx	r3
   d49a6:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d49a8:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d49aa:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d49ac:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d49ae:	d0e6      	beq.n	d497e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d49b0:	e7ec      	b.n	d498c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d49b2:	2001      	movs	r0, #1
}
   d49b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49b6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d49b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d49ba:	4606      	mov	r6, r0
   d49bc:	4688      	mov	r8, r1
   d49be:	4691      	mov	r9, r2
   d49c0:	461f      	mov	r7, r3
   d49c2:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d49c4:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d49c6:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d49ca:	6803      	ldr	r3, [r0, #0]
   d49cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49ce:	4798      	blx	r3
   d49d0:	b1d0      	cbz	r0, d4a08 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d49d2:	2d00      	cmp	r5, #0
   d49d4:	db18      	blt.n	d4a08 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d49d6:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d49da:	6803      	ldr	r3, [r0, #0]
   d49dc:	691b      	ldr	r3, [r3, #16]
   d49de:	4798      	blx	r3
   d49e0:	b160      	cbz	r0, d49fc <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d49e2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d49e6:	6803      	ldr	r3, [r0, #0]
   d49e8:	695b      	ldr	r3, [r3, #20]
   d49ea:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d49ec:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d49f0:	3401      	adds	r4, #1
   d49f2:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d49f4:	454c      	cmp	r4, r9
   d49f6:	d007      	beq.n	d4a08 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d49f8:	463d      	mov	r5, r7
   d49fa:	e7ec      	b.n	d49d6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d49fc:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d49fe:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4a00:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4a02:	f001 f856 	bl	d5ab2 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4a06:	e7de      	b.n	d49c6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d4a08:	4620      	mov	r0, r4
   d4a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4a0e <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d4a0e:	b570      	push	{r4, r5, r6, lr}
   d4a10:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d4a12:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d4a16:	2296      	movs	r2, #150	; 0x96
   d4a18:	2100      	movs	r1, #0
   d4a1a:	4628      	mov	r0, r5
   d4a1c:	f001 fe30 	bl	d6680 <memset>
  strcpy((char *)buffer, servername);
   d4a20:	6861      	ldr	r1, [r4, #4]
   d4a22:	4628      	mov	r0, r5
   d4a24:	f001 fe5c 	bl	d66e0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4a28:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4a2c:	8922      	ldrh	r2, [r4, #8]
   d4a2e:	6803      	ldr	r3, [r0, #0]
   d4a30:	4629      	mov	r1, r5
   d4a32:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4a34:	2300      	movs	r3, #0
   d4a36:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4a38:	3000      	adds	r0, #0
   d4a3a:	bf18      	it	ne
   d4a3c:	2001      	movne	r0, #1
   d4a3e:	bd70      	pop	{r4, r5, r6, pc}

000d4a40 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4a40:	b510      	push	{r4, lr}
   d4a42:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4a44:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4a48:	6803      	ldr	r3, [r0, #0]
   d4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a4c:	4798      	blx	r3
   d4a4e:	b120      	cbz	r0, d4a5a <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4a50:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4a54:	6803      	ldr	r3, [r0, #0]
   d4a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a58:	4798      	blx	r3
  }
  return true;
}
   d4a5a:	2001      	movs	r0, #1
   d4a5c:	bd10      	pop	{r4, pc}

000d4a5e <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4a5e:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d4a60:	6803      	ldr	r3, [r0, #0]
   d4a62:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4a64:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d4a66:	4798      	blx	r3
   d4a68:	b9c8      	cbnz	r0, d4a9e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f7ff feed 	bl	d484a <_ZN13Adafruit_MQTT7connectEv>
   d4a70:	2504      	movs	r5, #4
   d4a72:	b170      	cbz	r0, d4a92 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d4a74:	3d01      	subs	r5, #1
   d4a76:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4a7a:	d00a      	beq.n	d4a92 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	f7ff fd37 	bl	d44f0 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4a82:	f241 3088 	movw	r0, #5000	; 0x1388
   d4a86:	f001 f814 	bl	d5ab2 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff fedd 	bl	d484a <_ZN13Adafruit_MQTT7connectEv>
   d4a90:	e7ef      	b.n	d4a72 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4a92:	6823      	ldr	r3, [r4, #0]
   d4a94:	4620      	mov	r0, r4
   d4a96:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4a9c:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4a9e:	bd70      	pop	{r4, r5, r6, pc}

000d4aa0 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4aa0:	f000 b958 	b.w	d4d54 <HAL_Pin_Map>

000d4aa4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USB_USART_Init+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	681b      	ldr	r3, [r3, #0]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003024c 	.word	0x0003024c

000d4ab4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USB_USART_Begin+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	685b      	ldr	r3, [r3, #4]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003024c 	.word	0x0003024c

000d4ac4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_USB_USART_Available_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	691b      	ldr	r3, [r3, #16]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003024c 	.word	0x0003024c

000d4ad4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	695b      	ldr	r3, [r3, #20]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003024c 	.word	0x0003024c

000d4ae4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	699b      	ldr	r3, [r3, #24]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003024c 	.word	0x0003024c

000d4af4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_USB_USART_Send_Data+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	69db      	ldr	r3, [r3, #28]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003024c 	.word	0x0003024c

000d4b04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USB_USART_Flush_Data+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6a1b      	ldr	r3, [r3, #32]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003024c 	.word	0x0003024c

000d4b14 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USB_USART_Is_Enabled+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003024c 	.word	0x0003024c

000d4b24 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <sock_setsockopt+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	699b      	ldr	r3, [r3, #24]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030238 	.word	0x00030238

000d4b34 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <sock_close+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	69db      	ldr	r3, [r3, #28]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030238 	.word	0x00030238

000d4b44 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <sock_connect+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a1b      	ldr	r3, [r3, #32]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030238 	.word	0x00030238

000d4b54 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <sock_recv+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030238 	.word	0x00030238

000d4b64 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <sock_send+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030238 	.word	0x00030238

000d4b74 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <sock_socket+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030238 	.word	0x00030238

000d4b84 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_I2C_Write_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a1b      	ldr	r3, [r3, #32]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030228 	.word	0x00030228

000d4b94 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_I2C_Available_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030228 	.word	0x00030228

000d4ba4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_I2C_Read_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030228 	.word	0x00030228

000d4bb4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_I2C_Peek_Data+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030228 	.word	0x00030228

000d4bc4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_I2C_Flush_Data+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030228 	.word	0x00030228

000d4bd4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_I2C_Is_Enabled+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030228 	.word	0x00030228

000d4be4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_I2C_Init+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030228 	.word	0x00030228

000d4bf4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USART_Init+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	681b      	ldr	r3, [r3, #0]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003023c 	.word	0x0003023c

000d4c04 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USART_Write_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	68db      	ldr	r3, [r3, #12]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003023c 	.word	0x0003023c

000d4c14 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USART_Available_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	691b      	ldr	r3, [r3, #16]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003023c 	.word	0x0003023c

000d4c24 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USART_Read_Data+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003023c 	.word	0x0003023c

000d4c34 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_USART_Peek_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	699b      	ldr	r3, [r3, #24]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003023c 	.word	0x0003023c

000d4c44 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USART_Flush_Data+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	69db      	ldr	r3, [r3, #28]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003023c 	.word	0x0003023c

000d4c54 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USART_Is_Enabled+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a1b      	ldr	r3, [r3, #32]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003023c 	.word	0x0003023c

000d4c64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	0003023c 	.word	0x0003023c

000d4c74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <inet_inet_ntop+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	695b      	ldr	r3, [r3, #20]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030264 	.word	0x00030264

000d4c84 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <inet_htonl+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6a1b      	ldr	r3, [r3, #32]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030264 	.word	0x00030264

000d4c94 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <inet_htons+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030264 	.word	0x00030264

000d4ca4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <os_thread_is_current+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	689b      	ldr	r3, [r3, #8]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030248 	.word	0x00030248

000d4cb4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <os_thread_join+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	691b      	ldr	r3, [r3, #16]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030248 	.word	0x00030248

000d4cc4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <os_thread_cleanup+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	695b      	ldr	r3, [r3, #20]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030248 	.word	0x00030248

000d4cd4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <os_mutex_create+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030248 	.word	0x00030248

000d4ce4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <os_mutex_recursive_create+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030248 	.word	0x00030248

000d4cf4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_RNG_GetRandomNumber+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	685b      	ldr	r3, [r3, #4]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030218 	.word	0x00030218

000d4d04 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_Delay_Microseconds+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	68db      	ldr	r3, [r3, #12]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030218 	.word	0x00030218

000d4d14 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	695b      	ldr	r3, [r3, #20]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030218 	.word	0x00030218

000d4d24 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <if_index_to_name+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	695b      	ldr	r3, [r3, #20]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003026c 	.word	0x0003026c

000d4d34 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_SPI_Init+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	69db      	ldr	r3, [r3, #28]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030230 	.word	0x00030230

000d4d44 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_SPI_Is_Enabled+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6a1b      	ldr	r3, [r3, #32]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030230 	.word	0x00030230

000d4d54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_Pin_Map+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	681b      	ldr	r3, [r3, #0]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003022c 	.word	0x0003022c

000d4d64 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_Validate_Pin_Function+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	685b      	ldr	r3, [r3, #4]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003022c 	.word	0x0003022c

000d4d74 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_Pin_Mode+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	689b      	ldr	r3, [r3, #8]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003022c 	.word	0x0003022c

000d4d84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_Get_Pin_Mode+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	68db      	ldr	r3, [r3, #12]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003022c 	.word	0x0003022c

000d4d94 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_GPIO_Read+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	695b      	ldr	r3, [r3, #20]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003022c 	.word	0x0003022c

000d4da4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_DAC_Write+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003022c 	.word	0x0003022c

000d4db4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_PWM_Write_Ext+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003022c 	.word	0x0003022c

000d4dc4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <netdb_freeaddrinfo+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	689b      	ldr	r3, [r3, #8]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030268 	.word	0x00030268

000d4dd4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <netdb_getaddrinfo+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	68db      	ldr	r3, [r3, #12]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030268 	.word	0x00030268

000d4de4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <panic_+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030260 	.word	0x00030260

000d4df4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <log_message+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030260 	.word	0x00030260

000d4e04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030244 	.word	0x00030244

000d4e14 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <network_connect+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	685b      	ldr	r3, [r3, #4]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030240 	.word	0x00030240

000d4e24 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <network_connecting+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	689b      	ldr	r3, [r3, #8]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030240 	.word	0x00030240

000d4e34 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <network_disconnect+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	68db      	ldr	r3, [r3, #12]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030240 	.word	0x00030240

000d4e44 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <network_ready+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	691b      	ldr	r3, [r3, #16]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030240 	.word	0x00030240

000d4e54 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <network_on+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	695b      	ldr	r3, [r3, #20]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030240 	.word	0x00030240

000d4e64 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <network_off+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	699b      	ldr	r3, [r3, #24]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030240 	.word	0x00030240

000d4e74 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <network_listen+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	69db      	ldr	r3, [r3, #28]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030240 	.word	0x00030240

000d4e84 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <network_listening+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a1b      	ldr	r3, [r3, #32]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030240 	.word	0x00030240

000d4e94 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <network_set_listen_timeout+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030240 	.word	0x00030240

000d4ea4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <network_get_listen_timeout+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030240 	.word	0x00030240

000d4eb4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <set_system_mode+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	685b      	ldr	r3, [r3, #4]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030220 	.word	0x00030220

000d4ec4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <system_delay_ms+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030220 	.word	0x00030220

000d4ed4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b03      	ldr	r3, [pc, #12]	; (d4ee4 <system_ctrl_set_app_request_handler+0x10>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ede:	9301      	str	r3, [sp, #4]
   d4ee0:	bd08      	pop	{r3, pc}
   d4ee2:	0000      	.short	0x0000
   d4ee4:	00030220 	.word	0x00030220

000d4ee8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b03      	ldr	r3, [pc, #12]	; (d4ef8 <system_ctrl_set_result+0x10>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4ef2:	9301      	str	r3, [sp, #4]
   d4ef4:	bd08      	pop	{r3, pc}
   d4ef6:	0000      	.short	0x0000
   d4ef8:	00030220 	.word	0x00030220

000d4efc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <malloc+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	681b      	ldr	r3, [r3, #0]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003021c 	.word	0x0003021c

000d4f0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <free+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	685b      	ldr	r3, [r3, #4]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003021c 	.word	0x0003021c

000d4f1c <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <sprintf+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	68db      	ldr	r3, [r3, #12]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003021c 	.word	0x0003021c

000d4f2c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <__errno+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003021c 	.word	0x0003021c

000d4f3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	461a      	mov	r2, r3
   d4f40:	6840      	ldr	r0, [r0, #4]
   d4f42:	f7ff bf67 	b.w	d4e14 <network_connect>

000d4f46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f46:	2200      	movs	r2, #0
   d4f48:	2102      	movs	r1, #2
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	f7ff bf72 	b.w	d4e34 <network_disconnect>

000d4f50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f50:	2200      	movs	r2, #0
   d4f52:	4611      	mov	r1, r2
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	f7ff bf65 	b.w	d4e24 <network_connecting>

000d4f5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	4611      	mov	r1, r2
   d4f5e:	6840      	ldr	r0, [r0, #4]
   d4f60:	f7ff bf70 	b.w	d4e44 <network_ready>

000d4f64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f64:	2300      	movs	r3, #0
   d4f66:	461a      	mov	r2, r3
   d4f68:	4619      	mov	r1, r3
   d4f6a:	6840      	ldr	r0, [r0, #4]
   d4f6c:	f7ff bf72 	b.w	d4e54 <network_on>

000d4f70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f70:	2300      	movs	r3, #0
   d4f72:	461a      	mov	r2, r3
   d4f74:	4619      	mov	r1, r3
   d4f76:	6840      	ldr	r0, [r0, #4]
   d4f78:	f7ff bf74 	b.w	d4e64 <network_off>

000d4f7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f7c:	2200      	movs	r2, #0
   d4f7e:	f081 0101 	eor.w	r1, r1, #1
   d4f82:	6840      	ldr	r0, [r0, #4]
   d4f84:	f7ff bf76 	b.w	d4e74 <network_listen>

000d4f88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f88:	2200      	movs	r2, #0
   d4f8a:	6840      	ldr	r0, [r0, #4]
   d4f8c:	f7ff bf82 	b.w	d4e94 <network_set_listen_timeout>

000d4f90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f90:	2200      	movs	r2, #0
   d4f92:	4611      	mov	r1, r2
   d4f94:	6840      	ldr	r0, [r0, #4]
   d4f96:	f7ff bf85 	b.w	d4ea4 <network_get_listen_timeout>

000d4f9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f9a:	2200      	movs	r2, #0
   d4f9c:	4611      	mov	r1, r2
   d4f9e:	6840      	ldr	r0, [r0, #4]
   d4fa0:	f7ff bf70 	b.w	d4e84 <network_listening>

000d4fa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4fa8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4faa:	b095      	sub	sp, #84	; 0x54
   d4fac:	4616      	mov	r6, r2
   d4fae:	460d      	mov	r5, r1
   d4fb0:	4607      	mov	r7, r0
    IPAddress addr;
   d4fb2:	f000 fd27 	bl	d5a04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4fb6:	4621      	mov	r1, r4
   d4fb8:	2220      	movs	r2, #32
   d4fba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4fbc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4fbe:	f001 fb5f 	bl	d6680 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4fc2:	2340      	movs	r3, #64	; 0x40
   d4fc4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4fc6:	4621      	mov	r1, r4
   d4fc8:	466b      	mov	r3, sp
   d4fca:	aa0c      	add	r2, sp, #48	; 0x30
   d4fcc:	4630      	mov	r0, r6
   d4fce:	f7ff ff01 	bl	d4dd4 <netdb_getaddrinfo>
    if (!r) {
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	d144      	bne.n	d5062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fd8:	4602      	mov	r2, r0
   d4fda:	2101      	movs	r1, #1
   d4fdc:	6868      	ldr	r0, [r5, #4]
   d4fde:	f7ff ff31 	bl	d4e44 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fe2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fe4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fe6:	4622      	mov	r2, r4
   d4fe8:	6868      	ldr	r0, [r5, #4]
   d4fea:	f7ff ff2b 	bl	d4e44 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ff0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4ff2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ff4:	2e00      	cmp	r6, #0
   d4ff6:	d034      	beq.n	d5062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4ff8:	2900      	cmp	r1, #0
   d4ffa:	d132      	bne.n	d5062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ffc:	6873      	ldr	r3, [r6, #4]
   d4ffe:	2b02      	cmp	r3, #2
   d5000:	d002      	beq.n	d5008 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5002:	2b0a      	cmp	r3, #10
   d5004:	d009      	beq.n	d501a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5006:	e02a      	b.n	d505e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5008:	f1b8 0f00 	cmp.w	r8, #0
   d500c:	d027      	beq.n	d505e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d500e:	6971      	ldr	r1, [r6, #20]
   d5010:	4638      	mov	r0, r7
   d5012:	3104      	adds	r1, #4
   d5014:	f000 fd39 	bl	d5a8a <_ZN9IPAddressaSEPKh>
   d5018:	e020      	b.n	d505c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d501a:	f1b9 0f00 	cmp.w	r9, #0
   d501e:	d01e      	beq.n	d505e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5020:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5022:	2211      	movs	r2, #17
   d5024:	a801      	add	r0, sp, #4
   d5026:	f001 fb2b 	bl	d6680 <memset>
                    a.v = 6;
   d502a:	2306      	movs	r3, #6
   d502c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5030:	ad01      	add	r5, sp, #4
   d5032:	f104 0308 	add.w	r3, r4, #8
   d5036:	3418      	adds	r4, #24
   d5038:	6818      	ldr	r0, [r3, #0]
   d503a:	6859      	ldr	r1, [r3, #4]
   d503c:	462a      	mov	r2, r5
   d503e:	c203      	stmia	r2!, {r0, r1}
   d5040:	3308      	adds	r3, #8
   d5042:	42a3      	cmp	r3, r4
   d5044:	4615      	mov	r5, r2
   d5046:	d1f7      	bne.n	d5038 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5048:	a901      	add	r1, sp, #4
   d504a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d504c:	ad07      	add	r5, sp, #28
   d504e:	f000 fce7 	bl	d5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5054:	1d3c      	adds	r4, r7, #4
   d5056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5058:	682b      	ldr	r3, [r5, #0]
   d505a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d505c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d505e:	69f6      	ldr	r6, [r6, #28]
   d5060:	e7c8      	b.n	d4ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5062:	9800      	ldr	r0, [sp, #0]
   d5064:	f7ff feae 	bl	d4dc4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5068:	4638      	mov	r0, r7
   d506a:	b015      	add	sp, #84	; 0x54
   d506c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5070:	4b02      	ldr	r3, [pc, #8]	; (d507c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5072:	4a03      	ldr	r2, [pc, #12]	; (d5080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5074:	601a      	str	r2, [r3, #0]
   d5076:	2200      	movs	r2, #0
   d5078:	605a      	str	r2, [r3, #4]
   d507a:	4770      	bx	lr
   d507c:	2003e3d0 	.word	0x2003e3d0
   d5080:	000d6bc4 	.word	0x000d6bc4

000d5084 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5084:	2200      	movs	r2, #0
   d5086:	4611      	mov	r1, r2
   d5088:	6840      	ldr	r0, [r0, #4]
   d508a:	f7ff bedb 	b.w	d4e44 <network_ready>

000d508e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d508e:	2200      	movs	r2, #0
   d5090:	4611      	mov	r1, r2
   d5092:	6840      	ldr	r0, [r0, #4]
   d5094:	f7ff bef6 	b.w	d4e84 <network_listening>

000d5098 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5098:	2200      	movs	r2, #0
   d509a:	4611      	mov	r1, r2
   d509c:	6840      	ldr	r0, [r0, #4]
   d509e:	f7ff bf01 	b.w	d4ea4 <network_get_listen_timeout>

000d50a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50a2:	2200      	movs	r2, #0
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bef5 	b.w	d4e94 <network_set_listen_timeout>

000d50aa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50aa:	2200      	movs	r2, #0
   d50ac:	f081 0101 	eor.w	r1, r1, #1
   d50b0:	6840      	ldr	r0, [r0, #4]
   d50b2:	f7ff bedf 	b.w	d4e74 <network_listen>

000d50b6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d50b6:	2300      	movs	r3, #0
   d50b8:	461a      	mov	r2, r3
   d50ba:	4619      	mov	r1, r3
   d50bc:	6840      	ldr	r0, [r0, #4]
   d50be:	f7ff bed1 	b.w	d4e64 <network_off>

000d50c2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d50c2:	2300      	movs	r3, #0
   d50c4:	461a      	mov	r2, r3
   d50c6:	4619      	mov	r1, r3
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	f7ff bec3 	b.w	d4e54 <network_on>

000d50ce <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50ce:	2200      	movs	r2, #0
   d50d0:	4611      	mov	r1, r2
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff bea6 	b.w	d4e24 <network_connecting>

000d50d8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50d8:	2200      	movs	r2, #0
   d50da:	2102      	movs	r1, #2
   d50dc:	6840      	ldr	r0, [r0, #4]
   d50de:	f7ff bea9 	b.w	d4e34 <network_disconnect>

000d50e2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50e2:	2300      	movs	r3, #0
   d50e4:	461a      	mov	r2, r3
   d50e6:	6840      	ldr	r0, [r0, #4]
   d50e8:	f7ff be94 	b.w	d4e14 <network_connect>

000d50ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d50ec:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d50ee:	2204      	movs	r2, #4
   d50f0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d50f2:	4a02      	ldr	r2, [pc, #8]	; (d50fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d50f4:	601a      	str	r2, [r3, #0]
   d50f6:	4770      	bx	lr
   d50f8:	2003e3d8 	.word	0x2003e3d8
   d50fc:	000d6bf8 	.word	0x000d6bf8

000d5100 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5102:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5104:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5106:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d510a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d510c:	2201      	movs	r2, #1
   d510e:	f04f 33ff 	mov.w	r3, #4294967295
   d5112:	4621      	mov	r1, r4
   d5114:	47a8      	blx	r5
}
   d5116:	b003      	add	sp, #12
   d5118:	bd30      	pop	{r4, r5, pc}

000d511a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d511a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d511c:	6803      	ldr	r3, [r0, #0]
   d511e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5120:	f04f 33ff 	mov.w	r3, #4294967295
   d5124:	46a4      	mov	ip, r4
}
   d5126:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d512a:	4760      	bx	ip

000d512c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d512c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d512e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5130:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5132:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5136:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5138:	4621      	mov	r1, r4
   d513a:	4613      	mov	r3, r2
   d513c:	2201      	movs	r2, #1
   d513e:	47a8      	blx	r5
}
   d5140:	b003      	add	sp, #12
   d5142:	bd30      	pop	{r4, r5, pc}

000d5144 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5144:	4770      	bx	lr

000d5146 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5146:	b538      	push	{r3, r4, r5, lr}
   d5148:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d514a:	681a      	ldr	r2, [r3, #0]
   d514c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d514e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5150:	da05      	bge.n	d515e <_ZN9TCPClient9connectedEv+0x18>
   d5152:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5156:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d515a:	429a      	cmp	r2, r3
   d515c:	d001      	beq.n	d5162 <_ZN9TCPClient9connectedEv+0x1c>
   d515e:	2501      	movs	r5, #1
   d5160:	e00b      	b.n	d517a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5162:	6803      	ldr	r3, [r0, #0]
   d5164:	691b      	ldr	r3, [r3, #16]
   d5166:	4798      	blx	r3
   d5168:	2800      	cmp	r0, #0
   d516a:	bf14      	ite	ne
   d516c:	2501      	movne	r5, #1
   d516e:	2500      	moveq	r5, #0
        if (!rv) {
   d5170:	d103      	bne.n	d517a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5172:	6823      	ldr	r3, [r4, #0]
   d5174:	4620      	mov	r0, r4
   d5176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5178:	4798      	blx	r3
        }
    }
    return rv;
}
   d517a:	4628      	mov	r0, r5
   d517c:	bd38      	pop	{r3, r4, r5, pc}

000d517e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d517e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5180:	6818      	ldr	r0, [r3, #0]
}
   d5182:	43c0      	mvns	r0, r0
   d5184:	0fc0      	lsrs	r0, r0, #31
   d5186:	4770      	bx	lr

000d5188 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5188:	4770      	bx	lr

000d518a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d518a:	2000      	movs	r0, #0
   d518c:	4770      	bx	lr

000d518e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d518e:	b510      	push	{r4, lr}
   d5190:	4604      	mov	r4, r0
   d5192:	f7fe ff82 	bl	d409a <_ZdlPv>
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d519a:	f7fe bf7e 	b.w	d409a <_ZdlPv>
	...

000d51a0 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d51a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d51a4:	4698      	mov	r8, r3
    stop();
   d51a6:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d51a8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d51aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d51ac:	460c      	mov	r4, r1
   d51ae:	4606      	mov	r6, r0
   d51b0:	4617      	mov	r7, r2
    stop();
   d51b2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d51b4:	ab12      	add	r3, sp, #72	; 0x48
   d51b6:	2500      	movs	r5, #0
   d51b8:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d51bc:	462a      	mov	r2, r5
   d51be:	4629      	mov	r1, r5
   d51c0:	4620      	mov	r0, r4
   d51c2:	f7ff fe07 	bl	d4dd4 <netdb_getaddrinfo>
   d51c6:	2800      	cmp	r0, #0
   d51c8:	db3a      	blt.n	d5240 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d51ca:	9b00      	ldr	r3, [sp, #0]
   d51cc:	2b00      	cmp	r3, #0
   d51ce:	d039      	beq.n	d5244 <_ZN9TCPClient7connectEPKctm+0xa4>
   d51d0:	695b      	ldr	r3, [r3, #20]
   d51d2:	2b00      	cmp	r3, #0
   d51d4:	d036      	beq.n	d5244 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d51d6:	a806      	add	r0, sp, #24
   d51d8:	f000 fc14 	bl	d5a04 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d51dc:	9b00      	ldr	r3, [sp, #0]
   d51de:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d51e0:	7863      	ldrb	r3, [r4, #1]
   d51e2:	2b02      	cmp	r3, #2
   d51e4:	d101      	bne.n	d51ea <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d51e6:	1d21      	adds	r1, r4, #4
   d51e8:	e013      	b.n	d5212 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d51ea:	2b0a      	cmp	r3, #10
   d51ec:	d114      	bne.n	d5218 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d51ee:	2211      	movs	r2, #17
   d51f0:	4629      	mov	r1, r5
   d51f2:	a801      	add	r0, sp, #4
   d51f4:	f001 fa44 	bl	d6680 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51f8:	68a3      	ldr	r3, [r4, #8]
   d51fa:	bb33      	cbnz	r3, d524a <_ZN9TCPClient7connectEPKctm+0xaa>
   d51fc:	68e3      	ldr	r3, [r4, #12]
   d51fe:	bb23      	cbnz	r3, d524a <_ZN9TCPClient7connectEPKctm+0xaa>
   d5200:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5204:	6925      	ldr	r5, [r4, #16]
   d5206:	f7ff fd3d 	bl	d4c84 <inet_htonl>
   d520a:	4285      	cmp	r5, r0
   d520c:	d11d      	bne.n	d524a <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d520e:	f104 0114 	add.w	r1, r4, #20
   d5212:	a806      	add	r0, sp, #24
   d5214:	f000 fc39 	bl	d5a8a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5218:	a806      	add	r0, sp, #24
   d521a:	f000 fc13 	bl	d5a44 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d521e:	b188      	cbz	r0, d5244 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d5220:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5222:	ad07      	add	r5, sp, #28
   d5224:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5228:	4b18      	ldr	r3, [pc, #96]	; (d528c <_ZN9TCPClient7connectEPKctm+0xec>)
   d522a:	930c      	str	r3, [sp, #48]	; 0x30
   d522c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d522e:	ac0d      	add	r4, sp, #52	; 0x34
   d5230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5232:	682b      	ldr	r3, [r5, #0]
   d5234:	7023      	strb	r3, [r4, #0]
   d5236:	463a      	mov	r2, r7
   d5238:	4643      	mov	r3, r8
   d523a:	a90c      	add	r1, sp, #48	; 0x30
   d523c:	4630      	mov	r0, r6
   d523e:	47c8      	blx	r9
   d5240:	4604      	mov	r4, r0
   d5242:	e01c      	b.n	d527e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d5244:	f04f 34ff 	mov.w	r4, #4294967295
   d5248:	e019      	b.n	d527e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d524a:	f104 0308 	add.w	r3, r4, #8
   d524e:	ad01      	add	r5, sp, #4
   d5250:	3418      	adds	r4, #24
   d5252:	6818      	ldr	r0, [r3, #0]
   d5254:	6859      	ldr	r1, [r3, #4]
   d5256:	462a      	mov	r2, r5
   d5258:	c203      	stmia	r2!, {r0, r1}
   d525a:	3308      	adds	r3, #8
   d525c:	42a3      	cmp	r3, r4
   d525e:	4615      	mov	r5, r2
   d5260:	d1f7      	bne.n	d5252 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d5262:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5264:	a901      	add	r1, sp, #4
   d5266:	a80c      	add	r0, sp, #48	; 0x30
   d5268:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d526a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d526e:	f000 fbd7 	bl	d5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5274:	ac07      	add	r4, sp, #28
   d5276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5278:	682b      	ldr	r3, [r5, #0]
   d527a:	7023      	strb	r3, [r4, #0]
   d527c:	e7cc      	b.n	d5218 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d527e:	9800      	ldr	r0, [sp, #0]
   d5280:	f7ff fda0 	bl	d4dc4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d5284:	4620      	mov	r0, r4
   d5286:	b013      	add	sp, #76	; 0x4c
   d5288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d528c:	000d6d48 	.word	0x000d6d48

000d5290 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5292:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5294:	2200      	movs	r2, #0
   d5296:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5298:	9202      	str	r2, [sp, #8]
   d529a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d529c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d529e:	4604      	mov	r4, r0
   d52a0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d52a2:	d008      	beq.n	d52b6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d52a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52a8:	fbb3 f1f2 	udiv	r1, r3, r2
   d52ac:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d52ae:	fb02 3111 	mls	r1, r2, r1, r3
   d52b2:	434a      	muls	r2, r1
   d52b4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d52b6:	6960      	ldr	r0, [r4, #20]
   d52b8:	2308      	movs	r3, #8
   d52ba:	9300      	str	r3, [sp, #0]
   d52bc:	f241 0205 	movw	r2, #4101	; 0x1005
   d52c0:	446b      	add	r3, sp
   d52c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d52c6:	6800      	ldr	r0, [r0, #0]
   d52c8:	f7ff fc2c 	bl	d4b24 <sock_setsockopt>
    if (ret < 0) {
   d52cc:	2800      	cmp	r0, #0
   d52ce:	db08      	blt.n	d52e2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d52d0:	6960      	ldr	r0, [r4, #20]
   d52d2:	2300      	movs	r3, #0
   d52d4:	4632      	mov	r2, r6
   d52d6:	4629      	mov	r1, r5
   d52d8:	6800      	ldr	r0, [r0, #0]
   d52da:	f7ff fc43 	bl	d4b64 <sock_send>
    if (ret < 0) {
   d52de:	2800      	cmp	r0, #0
   d52e0:	da04      	bge.n	d52ec <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d52e2:	f7ff fe23 	bl	d4f2c <__errno>
   d52e6:	6803      	ldr	r3, [r0, #0]
   d52e8:	6063      	str	r3, [r4, #4]
   d52ea:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d52ec:	b004      	add	sp, #16
   d52ee:	bd70      	pop	{r4, r5, r6, pc}

000d52f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52f0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d52f2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52f4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d52f6:	689b      	ldr	r3, [r3, #8]
   d52f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d52fa:	68a3      	ldr	r3, [r4, #8]
   d52fc:	3b01      	subs	r3, #1
   d52fe:	60a3      	str	r3, [r4, #8]
   d5300:	b92b      	cbnz	r3, d530e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5302:	6823      	ldr	r3, [r4, #0]
   d5304:	4620      	mov	r0, r4
   d5306:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d530c:	4718      	bx	r3
   d530e:	bd10      	pop	{r4, pc}

000d5310 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5310:	b570      	push	{r4, r5, r6, lr}
   d5312:	4604      	mov	r4, r0
   d5314:	694d      	ldr	r5, [r1, #20]
   d5316:	4b05      	ldr	r3, [pc, #20]	; (d532c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5318:	f844 3b04 	str.w	r3, [r4], #4
   d531c:	358c      	adds	r5, #140	; 0x8c
   d531e:	4606      	mov	r6, r0
   d5320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5324:	682b      	ldr	r3, [r5, #0]
   d5326:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5328:	4630      	mov	r0, r6
   d532a:	bd70      	pop	{r4, r5, r6, pc}
   d532c:	000d6d48 	.word	0x000d6d48

000d5330 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5330:	b510      	push	{r4, lr}
   d5332:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5334:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5338:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d533c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d533e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5340:	d005      	beq.n	d534e <_ZN9TCPClient4peekEv+0x1e>
   d5342:	6962      	ldr	r2, [r4, #20]
   d5344:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5348:	4413      	add	r3, r2
   d534a:	7918      	ldrb	r0, [r3, #4]
   d534c:	bd10      	pop	{r4, pc}
   d534e:	6803      	ldr	r3, [r0, #0]
   d5350:	691b      	ldr	r3, [r3, #16]
   d5352:	4798      	blx	r3
   d5354:	2800      	cmp	r0, #0
   d5356:	d1f4      	bne.n	d5342 <_ZN9TCPClient4peekEv+0x12>
   d5358:	f04f 30ff 	mov.w	r0, #4294967295
}
   d535c:	bd10      	pop	{r4, pc}

000d535e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d535e:	b510      	push	{r4, lr}
   d5360:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5362:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5366:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d536a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d536c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d536e:	d008      	beq.n	d5382 <_ZN9TCPClient4readEv+0x24>
   d5370:	6962      	ldr	r2, [r4, #20]
   d5372:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5376:	1c59      	adds	r1, r3, #1
   d5378:	4413      	add	r3, r2
   d537a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d537e:	7918      	ldrb	r0, [r3, #4]
   d5380:	bd10      	pop	{r4, pc}
   d5382:	6803      	ldr	r3, [r0, #0]
   d5384:	691b      	ldr	r3, [r3, #16]
   d5386:	4798      	blx	r3
   d5388:	2800      	cmp	r0, #0
   d538a:	d1f1      	bne.n	d5370 <_ZN9TCPClient4readEv+0x12>
   d538c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5390:	bd10      	pop	{r4, pc}

000d5392 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5394:	6943      	ldr	r3, [r0, #20]
   d5396:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5398:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d539c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d53a0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d53a2:	4605      	mov	r5, r0
   d53a4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d53a6:	d106      	bne.n	d53b6 <_ZN9TCPClient4readEPhj+0x24>
   d53a8:	6803      	ldr	r3, [r0, #0]
   d53aa:	691b      	ldr	r3, [r3, #16]
   d53ac:	4798      	blx	r3
   d53ae:	b910      	cbnz	r0, d53b6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d53b0:	f04f 34ff 	mov.w	r4, #4294967295
   d53b4:	e014      	b.n	d53e0 <_ZN9TCPClient4readEPhj+0x4e>
   d53b6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d53b8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d53bc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d53c0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d53c2:	42bc      	cmp	r4, r7
   d53c4:	bf28      	it	cs
   d53c6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d53c8:	4419      	add	r1, r3
   d53ca:	4622      	mov	r2, r4
   d53cc:	3104      	adds	r1, #4
   d53ce:	4630      	mov	r0, r6
   d53d0:	f001 f930 	bl	d6634 <memcpy>
   d53d4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d53d6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d53da:	4423      	add	r3, r4
   d53dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d53e0:	4620      	mov	r0, r4
   d53e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d53e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d53e6:	2300      	movs	r3, #0
   d53e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d53ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d53ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d53f2:	4770      	bx	lr

000d53f4 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d53f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53f8:	4698      	mov	r8, r3
    stop();
   d53fa:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d53fc:	460d      	mov	r5, r1
   d53fe:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5402:	4606      	mov	r6, r0
   d5404:	4617      	mov	r7, r2
    stop();
   d5406:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5408:	7d2b      	ldrb	r3, [r5, #20]
   d540a:	6974      	ldr	r4, [r6, #20]
   d540c:	2b04      	cmp	r3, #4
   d540e:	bf0c      	ite	eq
   d5410:	2002      	moveq	r0, #2
   d5412:	200a      	movne	r0, #10
   d5414:	2206      	movs	r2, #6
   d5416:	2101      	movs	r1, #1
   d5418:	f7ff fbac 	bl	d4b74 <sock_socket>
   d541c:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d541e:	6973      	ldr	r3, [r6, #20]
   d5420:	681c      	ldr	r4, [r3, #0]
   d5422:	2c00      	cmp	r4, #0
   d5424:	db5b      	blt.n	d54de <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d5426:	4630      	mov	r0, r6
   d5428:	f7ff ffdc 	bl	d53e4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d542c:	f1b8 0f00 	cmp.w	r8, #0
   d5430:	d017      	beq.n	d5462 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d5432:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5434:	a903      	add	r1, sp, #12
   d5436:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d543a:	9303      	str	r3, [sp, #12]
   d543c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5440:	f7ff fc70 	bl	d4d24 <if_index_to_name>
   d5444:	2800      	cmp	r0, #0
   d5446:	db49      	blt.n	d54dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d5448:	6970      	ldr	r0, [r6, #20]
   d544a:	2306      	movs	r3, #6
   d544c:	9300      	str	r3, [sp, #0]
   d544e:	f241 020b 	movw	r2, #4107	; 0x100b
   d5452:	ab03      	add	r3, sp, #12
   d5454:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5458:	6800      	ldr	r0, [r0, #0]
   d545a:	f7ff fb63 	bl	d4b24 <sock_setsockopt>
   d545e:	2800      	cmp	r0, #0
   d5460:	db3c      	blt.n	d54dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5462:	241c      	movs	r4, #28
   d5464:	4622      	mov	r2, r4
   d5466:	2100      	movs	r1, #0
   d5468:	a803      	add	r0, sp, #12
   d546a:	f001 f909 	bl	d6680 <memset>
    if (ip.version() == 4) {
   d546e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5470:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5474:	2b04      	cmp	r3, #4
   d5476:	d10c      	bne.n	d5492 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5478:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d547a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d547c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5480:	f7ff fc08 	bl	d4c94 <inet_htons>
   d5484:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5488:	6868      	ldr	r0, [r5, #4]
   d548a:	f7ff fbfb 	bl	d4c84 <inet_htonl>
   d548e:	9004      	str	r0, [sp, #16]
   d5490:	e013      	b.n	d54ba <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5492:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5494:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5496:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d549a:	f7ff fbfb 	bl	d4c94 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d549e:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d54a0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d54a4:	1d2b      	adds	r3, r5, #4
   d54a6:	f105 0714 	add.w	r7, r5, #20
   d54aa:	6818      	ldr	r0, [r3, #0]
   d54ac:	6859      	ldr	r1, [r3, #4]
   d54ae:	4622      	mov	r2, r4
   d54b0:	c203      	stmia	r2!, {r0, r1}
   d54b2:	3308      	adds	r3, #8
   d54b4:	42bb      	cmp	r3, r7
   d54b6:	4614      	mov	r4, r2
   d54b8:	d1f7      	bne.n	d54aa <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d54ba:	6973      	ldr	r3, [r6, #20]
   d54bc:	221c      	movs	r2, #28
   d54be:	a903      	add	r1, sp, #12
   d54c0:	6818      	ldr	r0, [r3, #0]
   d54c2:	f7ff fb3f 	bl	d4b44 <sock_connect>
   d54c6:	2800      	cmp	r0, #0
   d54c8:	db08      	blt.n	d54dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d54ca:	1d2c      	adds	r4, r5, #4
   d54cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d54ce:	6976      	ldr	r6, [r6, #20]
   d54d0:	368c      	adds	r6, #140	; 0x8c
   d54d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d54d4:	6823      	ldr	r3, [r4, #0]
   d54d6:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d54d8:	2401      	movs	r4, #1
   d54da:	e004      	b.n	d54e6 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d54dc:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d54de:	6833      	ldr	r3, [r6, #0]
   d54e0:	4630      	mov	r0, r6
   d54e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54e4:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d54e6:	4620      	mov	r0, r4
   d54e8:	b00a      	add	sp, #40	; 0x28
   d54ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54ee <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d54ee:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d54f0:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d54f2:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d54f4:	6818      	ldr	r0, [r3, #0]
   d54f6:	2800      	cmp	r0, #0
   d54f8:	db01      	blt.n	d54fe <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d54fa:	f7ff fb1b 	bl	d4b34 <sock_close>
   d54fe:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5500:	f04f 32ff 	mov.w	r2, #4294967295
   d5504:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5506:	6960      	ldr	r0, [r4, #20]
   d5508:	2211      	movs	r2, #17
   d550a:	2100      	movs	r1, #0
   d550c:	308c      	adds	r0, #140	; 0x8c
   d550e:	f001 f8b7 	bl	d6680 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5512:	4620      	mov	r0, r4
}
   d5514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5518:	f7ff bf64 	b.w	d53e4 <_ZN9TCPClient12flush_bufferEv>

000d551c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d551c:	b530      	push	{r4, r5, lr}
   d551e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5520:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5524:	b08b      	sub	sp, #44	; 0x2c
   d5526:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5528:	b11b      	cbz	r3, d5532 <_ZN9TCPClient9availableEv+0x16>
   d552a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d552e:	429a      	cmp	r2, r3
   d5530:	d040      	beq.n	d55b4 <_ZN9TCPClient9availableEv+0x98>
   d5532:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5534:	6818      	ldr	r0, [r3, #0]
   d5536:	2800      	cmp	r0, #0
   d5538:	db3f      	blt.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d553a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d553e:	2d7f      	cmp	r5, #127	; 0x7f
   d5540:	d83b      	bhi.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5542:	1d19      	adds	r1, r3, #4
   d5544:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5548:	2308      	movs	r3, #8
   d554a:	4429      	add	r1, r5
   d554c:	f7ff fb02 	bl	d4b54 <sock_recv>
            if (ret > 0) {
   d5550:	2800      	cmp	r0, #0
   d5552:	dd0c      	ble.n	d556e <_ZN9TCPClient9availableEv+0x52>
   d5554:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5556:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d555a:	b90a      	cbnz	r2, d5560 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d555c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5560:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5562:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5566:	4418      	add	r0, r3
   d5568:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d556c:	e025      	b.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d556e:	f7ff fcdd 	bl	d4f2c <__errno>
   d5572:	6803      	ldr	r3, [r0, #0]
   d5574:	2b0b      	cmp	r3, #11
   d5576:	d020      	beq.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
   d5578:	f7ff fcd8 	bl	d4f2c <__errno>
   d557c:	6803      	ldr	r3, [r0, #0]
   d557e:	2b0b      	cmp	r3, #11
   d5580:	d01b      	beq.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5582:	2320      	movs	r3, #32
   d5584:	2500      	movs	r5, #0
   d5586:	9302      	str	r3, [sp, #8]
   d5588:	9503      	str	r5, [sp, #12]
   d558a:	f7ff fccf 	bl	d4f2c <__errno>
   d558e:	6803      	ldr	r3, [r0, #0]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	4b0e      	ldr	r3, [pc, #56]	; (d55cc <_ZN9TCPClient9availableEv+0xb0>)
   d5594:	9300      	str	r3, [sp, #0]
   d5596:	aa02      	add	r2, sp, #8
   d5598:	462b      	mov	r3, r5
   d559a:	490d      	ldr	r1, [pc, #52]	; (d55d0 <_ZN9TCPClient9availableEv+0xb4>)
   d559c:	2032      	movs	r0, #50	; 0x32
   d559e:	f7ff fc29 	bl	d4df4 <log_message>
                    sock_close(d_->sock);
   d55a2:	6963      	ldr	r3, [r4, #20]
   d55a4:	6818      	ldr	r0, [r3, #0]
   d55a6:	f7ff fac5 	bl	d4b34 <sock_close>
   d55aa:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d55ac:	f04f 32ff 	mov.w	r2, #4294967295
   d55b0:	601a      	str	r2, [r3, #0]
   d55b2:	e002      	b.n	d55ba <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d55b4:	f7ff ff16 	bl	d53e4 <_ZN9TCPClient12flush_bufferEv>
   d55b8:	e7bb      	b.n	d5532 <_ZN9TCPClient9availableEv+0x16>
   d55ba:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d55bc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d55c0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d55c4:	1a18      	subs	r0, r3, r0
}
   d55c6:	b00b      	add	sp, #44	; 0x2c
   d55c8:	bd30      	pop	{r4, r5, pc}
   d55ca:	bf00      	nop
   d55cc:	000d6c93 	.word	0x000d6c93
   d55d0:	000d6c8c 	.word	0x000d6c8c

000d55d4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d55d4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d55d6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d55d8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d55da:	6001      	str	r1, [r0, #0]
   d55dc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d55e0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d55e4:	3088      	adds	r0, #136	; 0x88
   d55e6:	f000 fa0d 	bl	d5a04 <_ZN9IPAddressC1Ev>
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	bd10      	pop	{r4, pc}
	...

000d55f0 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d55f4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55f6:	2300      	movs	r3, #0
   d55f8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d55fa:	4a14      	ldr	r2, [pc, #80]	; (d564c <_ZN9TCPClientC1Ei+0x5c>)
   d55fc:	6043      	str	r3, [r0, #4]
   d55fe:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5600:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5602:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5604:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5606:	20a0      	movs	r0, #160	; 0xa0
   d5608:	460e      	mov	r6, r1
   d560a:	f7fe fd44 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d560e:	4605      	mov	r5, r0
   d5610:	b110      	cbz	r0, d5618 <_ZN9TCPClientC1Ei+0x28>
   d5612:	4631      	mov	r1, r6
   d5614:	f7ff ffde 	bl	d55d4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5618:	2014      	movs	r0, #20
   d561a:	f7fe fd3c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d561e:	4603      	mov	r3, r0
   d5620:	b128      	cbz	r0, d562e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5622:	2201      	movs	r2, #1
   d5624:	6042      	str	r2, [r0, #4]
   d5626:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5628:	4a09      	ldr	r2, [pc, #36]	; (d5650 <_ZN9TCPClientC1Ei+0x60>)
   d562a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d562c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d562e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5630:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5632:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5634:	b128      	cbz	r0, d5642 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5636:	6843      	ldr	r3, [r0, #4]
   d5638:	3b01      	subs	r3, #1
   d563a:	6043      	str	r3, [r0, #4]
   d563c:	b90b      	cbnz	r3, d5642 <_ZN9TCPClientC1Ei+0x52>
   d563e:	f7ff fe57 	bl	d52f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d5642:	4620      	mov	r0, r4
   d5644:	f7ff fece 	bl	d53e4 <_ZN9TCPClient12flush_bufferEv>
}
   d5648:	4620      	mov	r0, r4
   d564a:	bd70      	pop	{r4, r5, r6, pc}
   d564c:	000d6c48 	.word	0x000d6c48
   d5650:	000d6c2c 	.word	0x000d6c2c

000d5654 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5654:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5656:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d565a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d565c:	f7ff ffc8 	bl	d55f0 <_ZN9TCPClientC1Ei>
}
   d5660:	4620      	mov	r0, r4
   d5662:	bd10      	pop	{r4, pc}

000d5664 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d5664:	b510      	push	{r4, lr}
   d5666:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5668:	6800      	ldr	r0, [r0, #0]
   d566a:	2800      	cmp	r0, #0
   d566c:	db01      	blt.n	d5672 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d566e:	f7ff fa61 	bl	d4b34 <sock_close>
    }
}
   d5672:	4620      	mov	r0, r4
   d5674:	bd10      	pop	{r4, pc}

000d5676 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5676:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5678:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d567a:	4620      	mov	r0, r4
   d567c:	f7ff fff2 	bl	d5664 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5680:	b124      	cbz	r4, d568c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5682:	4620      	mov	r0, r4
   d5684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5688:	f7fe bd07 	b.w	d409a <_ZdlPv>
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d568e:	2200      	movs	r2, #0
   d5690:	4611      	mov	r1, r2
   d5692:	6840      	ldr	r0, [r0, #4]
   d5694:	f7ff bbf6 	b.w	d4e84 <network_listening>

000d5698 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5698:	2200      	movs	r2, #0
   d569a:	4611      	mov	r1, r2
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	f7ff bc01 	b.w	d4ea4 <network_get_listen_timeout>

000d56a2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56a2:	2200      	movs	r2, #0
   d56a4:	6840      	ldr	r0, [r0, #4]
   d56a6:	f7ff bbf5 	b.w	d4e94 <network_set_listen_timeout>

000d56aa <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56aa:	2200      	movs	r2, #0
   d56ac:	f081 0101 	eor.w	r1, r1, #1
   d56b0:	6840      	ldr	r0, [r0, #4]
   d56b2:	f7ff bbdf 	b.w	d4e74 <network_listen>

000d56b6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56b6:	2300      	movs	r3, #0
   d56b8:	461a      	mov	r2, r3
   d56ba:	4619      	mov	r1, r3
   d56bc:	6840      	ldr	r0, [r0, #4]
   d56be:	f7ff bbd1 	b.w	d4e64 <network_off>

000d56c2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56c2:	2300      	movs	r3, #0
   d56c4:	461a      	mov	r2, r3
   d56c6:	4619      	mov	r1, r3
   d56c8:	6840      	ldr	r0, [r0, #4]
   d56ca:	f7ff bbc3 	b.w	d4e54 <network_on>

000d56ce <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	4611      	mov	r1, r2
   d56d2:	6840      	ldr	r0, [r0, #4]
   d56d4:	f7ff bbb6 	b.w	d4e44 <network_ready>

000d56d8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56d8:	2200      	movs	r2, #0
   d56da:	4611      	mov	r1, r2
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	f7ff bba1 	b.w	d4e24 <network_connecting>

000d56e2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56e2:	2200      	movs	r2, #0
   d56e4:	2102      	movs	r1, #2
   d56e6:	6840      	ldr	r0, [r0, #4]
   d56e8:	f7ff bba4 	b.w	d4e34 <network_disconnect>

000d56ec <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56ec:	2300      	movs	r3, #0
   d56ee:	461a      	mov	r2, r3
   d56f0:	6840      	ldr	r0, [r0, #4]
   d56f2:	f7ff bb8f 	b.w	d4e14 <network_connect>

000d56f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56f6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56f8:	4605      	mov	r5, r0
   d56fa:	b178      	cbz	r0, d571c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56fc:	6804      	ldr	r4, [r0, #0]
   d56fe:	b144      	cbz	r4, d5712 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5700:	68a3      	ldr	r3, [r4, #8]
   d5702:	b11b      	cbz	r3, d570c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5704:	2203      	movs	r2, #3
   d5706:	4621      	mov	r1, r4
   d5708:	4620      	mov	r0, r4
   d570a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d570c:	4620      	mov	r0, r4
   d570e:	f7fe fcc4 	bl	d409a <_ZdlPv>
   d5712:	4628      	mov	r0, r5
      }
   d5714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5718:	f7fe bcbf 	b.w	d409a <_ZdlPv>
   d571c:	bd38      	pop	{r3, r4, r5, pc}

000d571e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d571e:	b110      	cbz	r0, d5726 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5720:	6803      	ldr	r3, [r0, #0]
   d5722:	685b      	ldr	r3, [r3, #4]
   d5724:	4718      	bx	r3
   d5726:	4770      	bx	lr

000d5728 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5728:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d572a:	6803      	ldr	r3, [r0, #0]
   d572c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d572e:	b1bb      	cbz	r3, d5760 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5730:	6858      	ldr	r0, [r3, #4]
   d5732:	f7ff fab7 	bl	d4ca4 <os_thread_is_current>
   d5736:	b978      	cbnz	r0, d5758 <_ZN6ThreadD1Ev+0x30>
   d5738:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d573a:	7c5a      	ldrb	r2, [r3, #17]
   d573c:	b912      	cbnz	r2, d5744 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d573e:	6858      	ldr	r0, [r3, #4]
   d5740:	f7ff fab8 	bl	d4cb4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5744:	6823      	ldr	r3, [r4, #0]
   d5746:	6858      	ldr	r0, [r3, #4]
   d5748:	f7ff fabc 	bl	d4cc4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d574e:	2300      	movs	r3, #0
   d5750:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5752:	b128      	cbz	r0, d5760 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5754:	f7ff ffcf 	bl	d56f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5758:	6820      	ldr	r0, [r4, #0]
   d575a:	b108      	cbz	r0, d5760 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d575c:	f7ff ffcb 	bl	d56f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5764:	b538      	push	{r3, r4, r5, lr}
   d5766:	4b0b      	ldr	r3, [pc, #44]	; (d5794 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5768:	6003      	str	r3, [r0, #0]
   d576a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d576c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5770:	b108      	cbz	r0, d5776 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5772:	f7fe fc94 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5776:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d577a:	b12d      	cbz	r5, d5788 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d577c:	4628      	mov	r0, r5
   d577e:	f7ff ffd3 	bl	d5728 <_ZN6ThreadD1Ev>
   d5782:	4628      	mov	r0, r5
   d5784:	f7fe fc89 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5788:	68a0      	ldr	r0, [r4, #8]
   d578a:	b108      	cbz	r0, d5790 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d578c:	f7ff ffc7 	bl	d571e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5790:	4620      	mov	r0, r4
   d5792:	bd38      	pop	{r3, r4, r5, pc}
   d5794:	000d6cac 	.word	0x000d6cac

000d5798 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5798:	b538      	push	{r3, r4, r5, lr}
   d579a:	4c0d      	ldr	r4, [pc, #52]	; (d57d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d579c:	4b0d      	ldr	r3, [pc, #52]	; (d57d4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d579e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d57a0:	2500      	movs	r5, #0
   d57a2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d57a4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d57a8:	6063      	str	r3, [r4, #4]
   d57aa:	60a5      	str	r5, [r4, #8]
   d57ac:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57b0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57b4:	f7ff fa96 	bl	d4ce4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57b8:	4b07      	ldr	r3, [pc, #28]	; (d57d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d57ba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d57be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57c0:	4620      	mov	r0, r4
   d57c2:	4a06      	ldr	r2, [pc, #24]	; (d57dc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d57c4:	4906      	ldr	r1, [pc, #24]	; (d57e0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d57c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57ca:	f000 bc1b 	b.w	d6004 <__aeabi_atexit>
   d57ce:	bf00      	nop
   d57d0:	2003e3e0 	.word	0x2003e3e0
   d57d4:	000d6bc4 	.word	0x000d6bc4
   d57d8:	000d6cac 	.word	0x000d6cac
   d57dc:	2003e284 	.word	0x2003e284
   d57e0:	000d5765 	.word	0x000d5765

000d57e4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d57e4:	4770      	bx	lr

000d57e6 <_ZN8SPIClassD0Ev>:
   d57e6:	b510      	push	{r4, lr}
   d57e8:	4604      	mov	r4, r0
   d57ea:	f7fe fc56 	bl	d409a <_ZdlPv>
   d57ee:	4620      	mov	r0, r4
   d57f0:	bd10      	pop	{r4, pc}
	...

000d57f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d57f4:	b570      	push	{r4, r5, r6, lr}
   d57f6:	4b08      	ldr	r3, [pc, #32]	; (d5818 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d57f8:	6003      	str	r3, [r0, #0]
   d57fa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d57fc:	2500      	movs	r5, #0
   d57fe:	460e      	mov	r6, r1
   d5800:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5804:	f7ff fa66 	bl	d4cd4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5808:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d580a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d580c:	f7ff fa92 	bl	d4d34 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5810:	60a5      	str	r5, [r4, #8]
}
   d5812:	4620      	mov	r0, r4
   d5814:	bd70      	pop	{r4, r5, r6, pc}
   d5816:	bf00      	nop
   d5818:	000d6ce0 	.word	0x000d6ce0

000d581c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d581c:	7900      	ldrb	r0, [r0, #4]
   d581e:	f7ff ba91 	b.w	d4d44 <HAL_SPI_Is_Enabled>

000d5822 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5822:	4770      	bx	lr

000d5824 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5826:	4606      	mov	r6, r0
   d5828:	4615      	mov	r5, r2
   d582a:	460c      	mov	r4, r1
   d582c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d582e:	42bc      	cmp	r4, r7
   d5830:	d006      	beq.n	d5840 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5832:	6833      	ldr	r3, [r6, #0]
   d5834:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5838:	689b      	ldr	r3, [r3, #8]
   d583a:	4630      	mov	r0, r6
   d583c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d583e:	e7f6      	b.n	d582e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5840:	4628      	mov	r0, r5
   d5842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5844 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5844:	2200      	movs	r2, #0
   d5846:	7c00      	ldrb	r0, [r0, #16]
   d5848:	f7ff b99c 	b.w	d4b84 <HAL_I2C_Write_Data>

000d584c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d584c:	2100      	movs	r1, #0
   d584e:	7c00      	ldrb	r0, [r0, #16]
   d5850:	f7ff b9a0 	b.w	d4b94 <HAL_I2C_Available_Data>

000d5854 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5854:	2100      	movs	r1, #0
   d5856:	7c00      	ldrb	r0, [r0, #16]
   d5858:	f7ff b9a4 	b.w	d4ba4 <HAL_I2C_Read_Data>

000d585c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d585c:	2100      	movs	r1, #0
   d585e:	7c00      	ldrb	r0, [r0, #16]
   d5860:	f7ff b9a8 	b.w	d4bb4 <HAL_I2C_Peek_Data>

000d5864 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5864:	2100      	movs	r1, #0
   d5866:	7c00      	ldrb	r0, [r0, #16]
   d5868:	f7ff b9ac 	b.w	d4bc4 <HAL_I2C_Flush_Data>

000d586c <_ZN7TwoWireD0Ev>:
   d586c:	b510      	push	{r4, lr}
   d586e:	4604      	mov	r4, r0
   d5870:	f7fe fc13 	bl	d409a <_ZdlPv>
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5878:	b510      	push	{r4, lr}
   d587a:	4604      	mov	r4, r0
   d587c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5880:	4608      	mov	r0, r1
   d5882:	60a3      	str	r3, [r4, #8]
   d5884:	2100      	movs	r1, #0
   d5886:	4b04      	ldr	r3, [pc, #16]	; (d5898 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5888:	7420      	strb	r0, [r4, #16]
   d588a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d588c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d588e:	f7ff f9a9 	bl	d4be4 <HAL_I2C_Init>

}
   d5892:	4620      	mov	r0, r4
   d5894:	bd10      	pop	{r4, pc}
   d5896:	bf00      	nop
   d5898:	000d6cf0 	.word	0x000d6cf0

000d589c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d589c:	2100      	movs	r1, #0
   d589e:	7c00      	ldrb	r0, [r0, #16]
   d58a0:	f7ff b998 	b.w	d4bd4 <HAL_I2C_Is_Enabled>

000d58a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58a4:	7441      	strb	r1, [r0, #17]
   d58a6:	4770      	bx	lr

000d58a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d58a8:	4770      	bx	lr

000d58aa <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d58aa:	2100      	movs	r1, #0
   d58ac:	7c00      	ldrb	r0, [r0, #16]
   d58ae:	f7ff b919 	b.w	d4ae4 <HAL_USB_USART_Receive_Data>

000d58b2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d58b2:	2101      	movs	r1, #1
   d58b4:	7c00      	ldrb	r0, [r0, #16]
   d58b6:	f7ff b915 	b.w	d4ae4 <HAL_USB_USART_Receive_Data>

000d58ba <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d58ba:	7c00      	ldrb	r0, [r0, #16]
   d58bc:	f7ff b90a 	b.w	d4ad4 <HAL_USB_USART_Available_Data_For_Write>

000d58c0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d58c0:	7c00      	ldrb	r0, [r0, #16]
   d58c2:	f7ff b8ff 	b.w	d4ac4 <HAL_USB_USART_Available_Data>

000d58c6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d58c6:	b538      	push	{r3, r4, r5, lr}
   d58c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ca:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d58cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ce:	f7ff f901 	bl	d4ad4 <HAL_USB_USART_Available_Data_For_Write>
   d58d2:	2800      	cmp	r0, #0
   d58d4:	dc01      	bgt.n	d58da <_ZN9USBSerial5writeEh+0x14>
   d58d6:	7c60      	ldrb	r0, [r4, #17]
   d58d8:	b120      	cbz	r0, d58e4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d58da:	4629      	mov	r1, r5
   d58dc:	7c20      	ldrb	r0, [r4, #16]
   d58de:	f7ff f909 	bl	d4af4 <HAL_USB_USART_Send_Data>
    return 1;
   d58e2:	2001      	movs	r0, #1
  }
  return 0;
}
   d58e4:	bd38      	pop	{r3, r4, r5, pc}

000d58e6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d58e6:	7c00      	ldrb	r0, [r0, #16]
   d58e8:	f7ff b90c 	b.w	d4b04 <HAL_USB_USART_Flush_Data>

000d58ec <_ZN9USBSerialD0Ev>:
   d58ec:	b510      	push	{r4, lr}
   d58ee:	4604      	mov	r4, r0
   d58f0:	f7fe fbd3 	bl	d409a <_ZdlPv>
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd10      	pop	{r4, pc}

000d58f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58f8:	b510      	push	{r4, lr}
   d58fa:	4604      	mov	r4, r0
   d58fc:	2300      	movs	r3, #0
   d58fe:	6063      	str	r3, [r4, #4]
   d5900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5904:	60a3      	str	r3, [r4, #8]
   d5906:	4b05      	ldr	r3, [pc, #20]	; (d591c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5908:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d590a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d590c:	4608      	mov	r0, r1
{
  _serial = serial;
   d590e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5910:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5912:	4611      	mov	r1, r2
   d5914:	f7ff f8c6 	bl	d4aa4 <HAL_USB_USART_Init>
}
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}
   d591c:	000d6d18 	.word	0x000d6d18

000d5920 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5920:	2200      	movs	r2, #0
   d5922:	7c00      	ldrb	r0, [r0, #16]
   d5924:	f7ff b8c6 	b.w	d4ab4 <HAL_USB_USART_Begin>

000d5928 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d5928:	7c00      	ldrb	r0, [r0, #16]
   d592a:	f7ff b8f3 	b.w	d4b14 <HAL_USB_USART_Is_Enabled>

000d592e <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d592e:	f7ff bffb 	b.w	d5928 <_ZN9USBSerial9isEnabledEv>

000d5932 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5932:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5934:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5936:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5938:	2100      	movs	r1, #0
   d593a:	f000 fea1 	bl	d6680 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d593e:	4620      	mov	r0, r4
   d5940:	bd10      	pop	{r4, pc}
	...

000d5944 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5944:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5946:	4d0e      	ldr	r5, [pc, #56]	; (d5980 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5948:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d594a:	a801      	add	r0, sp, #4
   d594c:	f7ff fff1 	bl	d5932 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5950:	6829      	ldr	r1, [r5, #0]
   d5952:	f011 0401 	ands.w	r4, r1, #1
   d5956:	d110      	bne.n	d597a <_Z16_fetch_usbserialv+0x36>
   d5958:	4628      	mov	r0, r5
   d595a:	f7fe fbad 	bl	d40b8 <__cxa_guard_acquire>
   d595e:	b160      	cbz	r0, d597a <_Z16_fetch_usbserialv+0x36>
   d5960:	aa01      	add	r2, sp, #4
   d5962:	4621      	mov	r1, r4
   d5964:	4807      	ldr	r0, [pc, #28]	; (d5984 <_Z16_fetch_usbserialv+0x40>)
   d5966:	f7ff ffc7 	bl	d58f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d596a:	4628      	mov	r0, r5
   d596c:	f7fe fba9 	bl	d40c2 <__cxa_guard_release>
   d5970:	4a05      	ldr	r2, [pc, #20]	; (d5988 <_Z16_fetch_usbserialv+0x44>)
   d5972:	4906      	ldr	r1, [pc, #24]	; (d598c <_Z16_fetch_usbserialv+0x48>)
   d5974:	4803      	ldr	r0, [pc, #12]	; (d5984 <_Z16_fetch_usbserialv+0x40>)
   d5976:	f000 fb45 	bl	d6004 <__aeabi_atexit>
	return _usbserial;
}
   d597a:	4802      	ldr	r0, [pc, #8]	; (d5984 <_Z16_fetch_usbserialv+0x40>)
   d597c:	b007      	add	sp, #28
   d597e:	bd30      	pop	{r4, r5, pc}
   d5980:	2003e5b0 	.word	0x2003e5b0
   d5984:	2003e5b4 	.word	0x2003e5b4
   d5988:	2003e284 	.word	0x2003e284
   d598c:	000d58a9 	.word	0x000d58a9

000d5990 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5990:	4770      	bx	lr

000d5992 <_ZN9IPAddressD0Ev>:
   d5992:	b510      	push	{r4, lr}
   d5994:	4604      	mov	r4, r0
   d5996:	f7fe fb80 	bl	d409a <_ZdlPv>
   d599a:	4620      	mov	r0, r4
   d599c:	bd10      	pop	{r4, pc}

000d599e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d599e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59a0:	7d03      	ldrb	r3, [r0, #20]
   d59a2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59a4:	b08d      	sub	sp, #52	; 0x34
   d59a6:	460e      	mov	r6, r1
   d59a8:	f100 0704 	add.w	r7, r0, #4
   d59ac:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59b0:	d002      	beq.n	d59b8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d59b2:	f100 0508 	add.w	r5, r0, #8
   d59b6:	e018      	b.n	d59ea <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59b8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59ba:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59bc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59c0:	232f      	movs	r3, #47	; 0x2f
   d59c2:	462a      	mov	r2, r5
   d59c4:	200a      	movs	r0, #10
   d59c6:	f7ff f955 	bl	d4c74 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59ca:	4628      	mov	r0, r5
   d59cc:	f000 fe90 	bl	d66f0 <strlen>
   d59d0:	6833      	ldr	r3, [r6, #0]
   d59d2:	4602      	mov	r2, r0
   d59d4:	68db      	ldr	r3, [r3, #12]
   d59d6:	4629      	mov	r1, r5
   d59d8:	4630      	mov	r0, r6
   d59da:	4798      	blx	r3
   d59dc:	e00f      	b.n	d59fe <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d59de:	b124      	cbz	r4, d59ea <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d59e0:	212e      	movs	r1, #46	; 0x2e
   d59e2:	4630      	mov	r0, r6
   d59e4:	f000 f922 	bl	d5c2c <_ZN5Print5printEc>
   d59e8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d59ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d59ee:	220a      	movs	r2, #10
   d59f0:	4630      	mov	r0, r6
   d59f2:	f000 f961 	bl	d5cb8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59f6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59f8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59fa:	d1f0      	bne.n	d59de <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59fc:	4620      	mov	r0, r4
    }
    return n;
}
   d59fe:	b00d      	add	sp, #52	; 0x34
   d5a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5a04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5a04:	b510      	push	{r4, lr}
   d5a06:	4b05      	ldr	r3, [pc, #20]	; (d5a1c <_ZN9IPAddressC1Ev+0x18>)
   d5a08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a0a:	2211      	movs	r2, #17
   d5a0c:	f840 3b04 	str.w	r3, [r0], #4
   d5a10:	2100      	movs	r1, #0
   d5a12:	f000 fe35 	bl	d6680 <memset>
{
    clear();
}
   d5a16:	4620      	mov	r0, r4
   d5a18:	bd10      	pop	{r4, pc}
   d5a1a:	bf00      	nop
   d5a1c:	000d6d48 	.word	0x000d6d48

000d5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a20:	4603      	mov	r3, r0
   d5a22:	4a07      	ldr	r2, [pc, #28]	; (d5a40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a24:	b510      	push	{r4, lr}
   d5a26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a2a:	f101 0210 	add.w	r2, r1, #16
   d5a2e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a32:	f843 4b04 	str.w	r4, [r3], #4
   d5a36:	4291      	cmp	r1, r2
   d5a38:	d1f9      	bne.n	d5a2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a3a:	780a      	ldrb	r2, [r1, #0]
   d5a3c:	701a      	strb	r2, [r3, #0]
}
   d5a3e:	bd10      	pop	{r4, pc}
   d5a40:	000d6d48 	.word	0x000d6d48

000d5a44 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5a44:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5a46:	2b04      	cmp	r3, #4
   d5a48:	d101      	bne.n	d5a4e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5a4a:	6840      	ldr	r0, [r0, #4]
   d5a4c:	e008      	b.n	d5a60 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5a4e:	2b06      	cmp	r3, #6
   d5a50:	d10a      	bne.n	d5a68 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5a52:	6843      	ldr	r3, [r0, #4]
   d5a54:	b153      	cbz	r3, d5a6c <_ZNK9IPAddresscvbEv+0x28>
   d5a56:	6883      	ldr	r3, [r0, #8]
   d5a58:	b143      	cbz	r3, d5a6c <_ZNK9IPAddresscvbEv+0x28>
   d5a5a:	68c3      	ldr	r3, [r0, #12]
   d5a5c:	b133      	cbz	r3, d5a6c <_ZNK9IPAddresscvbEv+0x28>
   d5a5e:	6900      	ldr	r0, [r0, #16]
   d5a60:	3000      	adds	r0, #0
   d5a62:	bf18      	it	ne
   d5a64:	2001      	movne	r0, #1
   d5a66:	4770      	bx	lr
   d5a68:	2000      	movs	r0, #0
   d5a6a:	4770      	bx	lr
   d5a6c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5a6e:	4770      	bx	lr

000d5a70 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5a70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a72:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5a82:	2304      	movs	r3, #4
   d5a84:	6041      	str	r1, [r0, #4]
   d5a86:	7503      	strb	r3, [r0, #20]
   d5a88:	bd10      	pop	{r4, pc}

000d5a8a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5a8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a8c:	780d      	ldrb	r5, [r1, #0]
   d5a8e:	788b      	ldrb	r3, [r1, #2]
   d5a90:	784a      	ldrb	r2, [r1, #1]
   d5a92:	78c9      	ldrb	r1, [r1, #3]
   d5a94:	9100      	str	r1, [sp, #0]
   d5a96:	4629      	mov	r1, r5
   d5a98:	f7ff ffea 	bl	d5a70 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5a9c:	b003      	add	sp, #12
   d5a9e:	bd30      	pop	{r4, r5, pc}

000d5aa0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5aa0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5aa2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5aa4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5aa6:	b113      	cbz	r3, d5aae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5aa8:	2203      	movs	r2, #3
   d5aaa:	4601      	mov	r1, r0
   d5aac:	4798      	blx	r3
    }
   d5aae:	4620      	mov	r0, r4
   d5ab0:	bd10      	pop	{r4, pc}

000d5ab2 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ab2:	2100      	movs	r1, #0
   d5ab4:	f7ff ba06 	b.w	d4ec4 <system_delay_ms>

000d5ab8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ab8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5aba:	4b0c      	ldr	r3, [pc, #48]	; (d5aec <serialEventRun+0x34>)
   d5abc:	b133      	cbz	r3, d5acc <serialEventRun+0x14>
   d5abe:	f7ff ff41 	bl	d5944 <_Z16_fetch_usbserialv>
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	691b      	ldr	r3, [r3, #16]
   d5ac6:	4798      	blx	r3
   d5ac8:	2800      	cmp	r0, #0
   d5aca:	dc09      	bgt.n	d5ae0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5acc:	4b08      	ldr	r3, [pc, #32]	; (d5af0 <serialEventRun+0x38>)
   d5ace:	b163      	cbz	r3, d5aea <serialEventRun+0x32>
   d5ad0:	f000 f978 	bl	d5dc4 <_Z22__fetch_global_Serial1v>
   d5ad4:	6803      	ldr	r3, [r0, #0]
   d5ad6:	691b      	ldr	r3, [r3, #16]
   d5ad8:	4798      	blx	r3
   d5ada:	2800      	cmp	r0, #0
   d5adc:	dc03      	bgt.n	d5ae6 <serialEventRun+0x2e>
   d5ade:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ae0:	f3af 8000 	nop.w
   d5ae4:	e7f2      	b.n	d5acc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5ae6:	f3af 8000 	nop.w
   d5aea:	bd08      	pop	{r3, pc}
	...

000d5af4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5af4:	b508      	push	{r3, lr}
	serialEventRun();
   d5af6:	f7ff ffdf 	bl	d5ab8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5afa:	f7ff f90b 	bl	d4d14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5afe:	4b01      	ldr	r3, [pc, #4]	; (d5b04 <_post_loop+0x10>)
   d5b00:	6018      	str	r0, [r3, #0]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	2003e72c 	.word	0x2003e72c

000d5b08 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b08:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b0a:	2300      	movs	r3, #0
   d5b0c:	9300      	str	r3, [sp, #0]
   d5b0e:	461a      	mov	r2, r3
   d5b10:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b14:	f7ff f9e8 	bl	d4ee8 <system_ctrl_set_result>
}
   d5b18:	b003      	add	sp, #12
   d5b1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b20 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5b20:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b22:	8843      	ldrh	r3, [r0, #2]
   d5b24:	2b0a      	cmp	r3, #10
   d5b26:	d008      	beq.n	d5b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b28:	2b50      	cmp	r3, #80	; 0x50
   d5b2a:	d109      	bne.n	d5b40 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5b2c:	4b09      	ldr	r3, [pc, #36]	; (d5b54 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b2e:	681b      	ldr	r3, [r3, #0]
   d5b30:	b13b      	cbz	r3, d5b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5b32:	b003      	add	sp, #12
   d5b34:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5b38:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5b3a:	f7ff ffe5 	bl	d5b08 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5b3e:	e006      	b.n	d5b4e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b40:	2300      	movs	r3, #0
   d5b42:	9300      	str	r3, [sp, #0]
   d5b44:	461a      	mov	r2, r3
   d5b46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b4a:	f7ff f9cd 	bl	d4ee8 <system_ctrl_set_result>
        break;
    }
}
   d5b4e:	b003      	add	sp, #12
   d5b50:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b54:	2003e5c8 	.word	0x2003e5c8

000d5b58 <module_user_init_hook>:

void module_user_init_hook()
{
   d5b58:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b5a:	f7ff f8cb 	bl	d4cf4 <HAL_RNG_GetRandomNumber>
   d5b5e:	4604      	mov	r4, r0
    srand(seed);
   d5b60:	f000 fd96 	bl	d6690 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5b64:	4b07      	ldr	r3, [pc, #28]	; (d5b84 <module_user_init_hook+0x2c>)
   d5b66:	b113      	cbz	r3, d5b6e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5b68:	4620      	mov	r0, r4
   d5b6a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5b6e:	2100      	movs	r1, #0
   d5b70:	4804      	ldr	r0, [pc, #16]	; (d5b84 <module_user_init_hook+0x2c>)
   d5b72:	f7ff f947 	bl	d4e04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b76:	2100      	movs	r1, #0
   d5b78:	4803      	ldr	r0, [pc, #12]	; (d5b88 <module_user_init_hook+0x30>)
}
   d5b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b7e:	f7ff b9a9 	b.w	d4ed4 <system_ctrl_set_app_request_handler>
   d5b82:	bf00      	nop
   d5b84:	00000000 	.word	0x00000000
   d5b88:	000d5b21 	.word	0x000d5b21

000d5b8c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b90:	f7ff ff86 	bl	d5aa0 <_ZNSt14_Function_baseD1Ev>
   d5b94:	4620      	mov	r0, r4
   d5b96:	bd10      	pop	{r4, pc}

000d5b98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5b98:	4803      	ldr	r0, [pc, #12]	; (d5ba8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5b9a:	4a04      	ldr	r2, [pc, #16]	; (d5bac <_GLOBAL__sub_I_RGB+0x14>)
   d5b9c:	4904      	ldr	r1, [pc, #16]	; (d5bb0 <_GLOBAL__sub_I_RGB+0x18>)
   d5b9e:	2300      	movs	r3, #0
   d5ba0:	6083      	str	r3, [r0, #8]
   d5ba2:	f000 ba2f 	b.w	d6004 <__aeabi_atexit>
   d5ba6:	bf00      	nop
   d5ba8:	2003e5cc 	.word	0x2003e5cc
   d5bac:	2003e284 	.word	0x2003e284
   d5bb0:	000d5b8d 	.word	0x000d5b8d

000d5bb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bb4:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bba:	601a      	str	r2, [r3, #0]
   d5bbc:	4770      	bx	lr
   d5bbe:	bf00      	nop
   d5bc0:	2003e218 	.word	0x2003e218
   d5bc4:	2003e5dc 	.word	0x2003e5dc

000d5bc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5bc8:	4b01      	ldr	r3, [pc, #4]	; (d5bd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5bca:	4a02      	ldr	r2, [pc, #8]	; (d5bd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5bcc:	601a      	str	r2, [r3, #0]
   d5bce:	4770      	bx	lr
   d5bd0:	2003e5e0 	.word	0x2003e5e0
   d5bd4:	000d6e2d 	.word	0x000d6e2d

000d5bd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bda:	4606      	mov	r6, r0
   d5bdc:	460d      	mov	r5, r1
   d5bde:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5be0:	2400      	movs	r4, #0
  while (size--) {
   d5be2:	42bd      	cmp	r5, r7
   d5be4:	d00c      	beq.n	d5c00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5be6:	6833      	ldr	r3, [r6, #0]
   d5be8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5bec:	689b      	ldr	r3, [r3, #8]
   d5bee:	4630      	mov	r0, r6
   d5bf0:	4798      	blx	r3
     if (chunk>=0)
   d5bf2:	2800      	cmp	r0, #0
   d5bf4:	db01      	blt.n	d5bfa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5bf6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5bf8:	e7f3      	b.n	d5be2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5bfa:	2c00      	cmp	r4, #0
   d5bfc:	bf08      	it	eq
   d5bfe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c00:	4620      	mov	r0, r4
   d5c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c04 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c04:	b570      	push	{r4, r5, r6, lr}
   d5c06:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c08:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c0a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c0c:	b149      	cbz	r1, d5c22 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c0e:	f000 fd6f 	bl	d66f0 <strlen>
   d5c12:	682b      	ldr	r3, [r5, #0]
   d5c14:	4602      	mov	r2, r0
   d5c16:	4621      	mov	r1, r4
   d5c18:	4628      	mov	r0, r5
   d5c1a:	68db      	ldr	r3, [r3, #12]
    }
   d5c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c20:	4718      	bx	r3
    }
   d5c22:	bd70      	pop	{r4, r5, r6, pc}

000d5c24 <_ZN5Print5printEPKc>:
   d5c24:	b508      	push	{r3, lr}
   d5c26:	f7ff ffed 	bl	d5c04 <_ZN5Print5writeEPKc>
   d5c2a:	bd08      	pop	{r3, pc}

000d5c2c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c2c:	6803      	ldr	r3, [r0, #0]
   d5c2e:	689b      	ldr	r3, [r3, #8]
   d5c30:	4718      	bx	r3

000d5c32 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c32:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c34:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c36:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c38:	f7ff fff8 	bl	d5c2c <_ZN5Print5printEc>
  n += print('\n');
   d5c3c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c3e:	4604      	mov	r4, r0
  n += print('\n');
   d5c40:	4628      	mov	r0, r5
   d5c42:	f7ff fff3 	bl	d5c2c <_ZN5Print5printEc>
  return n;
}
   d5c46:	4420      	add	r0, r4
   d5c48:	bd38      	pop	{r3, r4, r5, pc}

000d5c4a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5c4a:	b538      	push	{r3, r4, r5, lr}
   d5c4c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5c4e:	f7ff ffd9 	bl	d5c04 <_ZN5Print5writeEPKc>
   d5c52:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5c54:	4628      	mov	r0, r5
   d5c56:	f7ff ffec 	bl	d5c32 <_ZN5Print7printlnEv>
  return n;
}
   d5c5a:	4420      	add	r0, r4
   d5c5c:	bd38      	pop	{r3, r4, r5, pc}

000d5c5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c5e:	b530      	push	{r4, r5, lr}
   d5c60:	b08b      	sub	sp, #44	; 0x2c
   d5c62:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c64:	2100      	movs	r1, #0
   d5c66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c6a:	2a01      	cmp	r2, #1
   d5c6c:	bf98      	it	ls
   d5c6e:	220a      	movls	r2, #10
   d5c70:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c74:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c78:	fb05 3312 	mls	r3, r5, r2, r3
   d5c7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c80:	2b09      	cmp	r3, #9
   d5c82:	bf94      	ite	ls
   d5c84:	3330      	addls	r3, #48	; 0x30
   d5c86:	3337      	addhi	r3, #55	; 0x37
   d5c88:	b2db      	uxtb	r3, r3
   d5c8a:	4621      	mov	r1, r4
   d5c8c:	f804 3901 	strb.w	r3, [r4], #-1
   d5c90:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c92:	2d00      	cmp	r5, #0
   d5c94:	d1ee      	bne.n	d5c74 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c96:	f7ff ffb5 	bl	d5c04 <_ZN5Print5writeEPKc>
}
   d5c9a:	b00b      	add	sp, #44	; 0x2c
   d5c9c:	bd30      	pop	{r4, r5, pc}

000d5c9e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5c9e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5ca0:	b92a      	cbnz	r2, d5cae <_ZN5Print5printEmi+0x10>
   d5ca2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5ca8:	689b      	ldr	r3, [r3, #8]
   d5caa:	b2c9      	uxtb	r1, r1
   d5cac:	4718      	bx	r3
  else return printNumber(n, base);
   d5cae:	b2d2      	uxtb	r2, r2
}
   d5cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cb4:	f7ff bfd3 	b.w	d5c5e <_ZN5Print11printNumberEmh>

000d5cb8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5cb8:	f7ff bff1 	b.w	d5c9e <_ZN5Print5printEmi>

000d5cbc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d5cbc:	b538      	push	{r3, r4, r5, lr}
   d5cbe:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d5cc0:	f7ff ffed 	bl	d5c9e <_ZN5Print5printEmi>
   d5cc4:	4604      	mov	r4, r0
  n += println();
   d5cc6:	4628      	mov	r0, r5
   d5cc8:	f7ff ffb3 	bl	d5c32 <_ZN5Print7printlnEv>
  return n;
}
   d5ccc:	4420      	add	r0, r4
   d5cce:	bd38      	pop	{r3, r4, r5, pc}

000d5cd0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cd4:	4607      	mov	r7, r0
   d5cd6:	460e      	mov	r6, r1
  if (base == 0) {
   d5cd8:	4615      	mov	r5, r2
   d5cda:	b92a      	cbnz	r2, d5ce8 <_ZN5Print5printEli+0x18>
    return write(n);
   d5cdc:	6803      	ldr	r3, [r0, #0]
   d5cde:	b2c9      	uxtb	r1, r1
   d5ce0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5ce6:	4718      	bx	r3
  } else if (base == 10) {
   d5ce8:	2a0a      	cmp	r2, #10
   d5cea:	d102      	bne.n	d5cf2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5cec:	2900      	cmp	r1, #0
   d5cee:	da01      	bge.n	d5cf4 <_ZN5Print5printEli+0x24>
   d5cf0:	e004      	b.n	d5cfc <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5cf2:	b2d2      	uxtb	r2, r2
  }
}
   d5cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5cf8:	f7ff bfb1 	b.w	d5c5e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5cfc:	212d      	movs	r1, #45	; 0x2d
   d5cfe:	f7ff ff95 	bl	d5c2c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5d02:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5d04:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5d06:	4271      	negs	r1, r6
   d5d08:	4638      	mov	r0, r7
   d5d0a:	f7ff ffa8 	bl	d5c5e <_ZN5Print11printNumberEmh>
   d5d0e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d14 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d5d14:	b538      	push	{r3, r4, r5, lr}
   d5d16:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5d18:	f7ff ffda 	bl	d5cd0 <_ZN5Print5printEli>
   d5d1c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5d1e:	4628      	mov	r0, r5
   d5d20:	f7ff ff87 	bl	d5c32 <_ZN5Print7printlnEv>
  return n;
}
   d5d24:	4420      	add	r0, r4
   d5d26:	bd38      	pop	{r3, r4, r5, pc}

000d5d28 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
   d5d28:	b538      	push	{r3, r4, r5, lr}
   d5d2a:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d5d2c:	f7ff ffd0 	bl	d5cd0 <_ZN5Print5printEli>
   d5d30:	4604      	mov	r4, r0
  n += println();
   d5d32:	4628      	mov	r0, r5
   d5d34:	f7ff ff7d 	bl	d5c32 <_ZN5Print7printlnEv>
  return n;
}
   d5d38:	4420      	add	r0, r4
   d5d3a:	bd38      	pop	{r3, r4, r5, pc}

000d5d3c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d3c:	4770      	bx	lr

000d5d3e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d3e:	7441      	strb	r1, [r0, #17]
   d5d40:	4770      	bx	lr

000d5d42 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5d42:	7c00      	ldrb	r0, [r0, #16]
   d5d44:	f7fe bf8e 	b.w	d4c64 <HAL_USART_Available_Data_For_Write>

000d5d48 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5d48:	7c00      	ldrb	r0, [r0, #16]
   d5d4a:	f7fe bf63 	b.w	d4c14 <HAL_USART_Available_Data>

000d5d4e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5d4e:	7c00      	ldrb	r0, [r0, #16]
   d5d50:	f7fe bf70 	b.w	d4c34 <HAL_USART_Peek_Data>

000d5d54 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5d54:	7c00      	ldrb	r0, [r0, #16]
   d5d56:	f7fe bf65 	b.w	d4c24 <HAL_USART_Read_Data>

000d5d5a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d5a:	7c00      	ldrb	r0, [r0, #16]
   d5d5c:	f7fe bf72 	b.w	d4c44 <HAL_USART_Flush_Data>

000d5d60 <_ZN11USARTSerialD0Ev>:
   d5d60:	b510      	push	{r4, lr}
   d5d62:	4604      	mov	r4, r0
   d5d64:	f7fe f999 	bl	d409a <_ZdlPv>
   d5d68:	4620      	mov	r0, r4
   d5d6a:	bd10      	pop	{r4, pc}

000d5d6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d6c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d6e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d70:	4604      	mov	r4, r0
   d5d72:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d74:	b925      	cbnz	r5, d5d80 <_ZN11USARTSerial5writeEh+0x14>
   d5d76:	7c00      	ldrb	r0, [r0, #16]
   d5d78:	f7fe ff74 	bl	d4c64 <HAL_USART_Available_Data_For_Write>
   d5d7c:	2800      	cmp	r0, #0
   d5d7e:	dd05      	ble.n	d5d8c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d80:	4631      	mov	r1, r6
   d5d82:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d88:	f7fe bf3c 	b.w	d4c04 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	bd70      	pop	{r4, r5, r6, pc}

000d5d90 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d90:	b510      	push	{r4, lr}
   d5d92:	4604      	mov	r4, r0
   d5d94:	4608      	mov	r0, r1
   d5d96:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d98:	2200      	movs	r2, #0
   d5d9a:	6062      	str	r2, [r4, #4]
   d5d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5da0:	60a2      	str	r2, [r4, #8]
   d5da2:	4a05      	ldr	r2, [pc, #20]	; (d5db8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5da4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5da6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5da8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5daa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5dac:	461a      	mov	r2, r3
   d5dae:	f7fe ff21 	bl	d4bf4 <HAL_USART_Init>
}
   d5db2:	4620      	mov	r0, r4
   d5db4:	bd10      	pop	{r4, pc}
   d5db6:	bf00      	nop
   d5db8:	000d6e58 	.word	0x000d6e58

000d5dbc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5dbc:	7c00      	ldrb	r0, [r0, #16]
   d5dbe:	f7fe bf49 	b.w	d4c54 <HAL_USART_Is_Enabled>
	...

000d5dc4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5dc4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5dc6:	4d0c      	ldr	r5, [pc, #48]	; (d5df8 <_Z22__fetch_global_Serial1v+0x34>)
   d5dc8:	6829      	ldr	r1, [r5, #0]
   d5dca:	f011 0401 	ands.w	r4, r1, #1
   d5dce:	d111      	bne.n	d5df4 <_Z22__fetch_global_Serial1v+0x30>
   d5dd0:	4628      	mov	r0, r5
   d5dd2:	f7fe f971 	bl	d40b8 <__cxa_guard_acquire>
   d5dd6:	b168      	cbz	r0, d5df4 <_Z22__fetch_global_Serial1v+0x30>
   d5dd8:	4a08      	ldr	r2, [pc, #32]	; (d5dfc <_Z22__fetch_global_Serial1v+0x38>)
   d5dda:	4b09      	ldr	r3, [pc, #36]	; (d5e00 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ddc:	4809      	ldr	r0, [pc, #36]	; (d5e04 <_Z22__fetch_global_Serial1v+0x40>)
   d5dde:	4621      	mov	r1, r4
   d5de0:	f7ff ffd6 	bl	d5d90 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5de4:	4628      	mov	r0, r5
   d5de6:	f7fe f96c 	bl	d40c2 <__cxa_guard_release>
   d5dea:	4a07      	ldr	r2, [pc, #28]	; (d5e08 <_Z22__fetch_global_Serial1v+0x44>)
   d5dec:	4907      	ldr	r1, [pc, #28]	; (d5e0c <_Z22__fetch_global_Serial1v+0x48>)
   d5dee:	4805      	ldr	r0, [pc, #20]	; (d5e04 <_Z22__fetch_global_Serial1v+0x40>)
   d5df0:	f000 f908 	bl	d6004 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5df4:	4803      	ldr	r0, [pc, #12]	; (d5e04 <_Z22__fetch_global_Serial1v+0x40>)
   d5df6:	bd38      	pop	{r3, r4, r5, pc}
   d5df8:	2003e67c 	.word	0x2003e67c
   d5dfc:	2003e680 	.word	0x2003e680
   d5e00:	2003e5f8 	.word	0x2003e5f8
   d5e04:	2003e5e4 	.word	0x2003e5e4
   d5e08:	2003e284 	.word	0x2003e284
   d5e0c:	000d5d3d 	.word	0x000d5d3d

000d5e10 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5e10:	4b04      	ldr	r3, [pc, #16]	; (d5e24 <_GLOBAL__sub_I_System+0x14>)
   d5e12:	2000      	movs	r0, #0
   d5e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e18:	7018      	strb	r0, [r3, #0]
   d5e1a:	8058      	strh	r0, [r3, #2]
   d5e1c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e1e:	f7ff b849 	b.w	d4eb4 <set_system_mode>
   d5e22:	bf00      	nop
   d5e24:	2003e704 	.word	0x2003e704

000d5e28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e28:	2200      	movs	r2, #0
   d5e2a:	4611      	mov	r1, r2
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	f7ff b829 	b.w	d4e84 <network_listening>

000d5e32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e32:	2200      	movs	r2, #0
   d5e34:	4611      	mov	r1, r2
   d5e36:	6840      	ldr	r0, [r0, #4]
   d5e38:	f7ff b834 	b.w	d4ea4 <network_get_listen_timeout>

000d5e3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e3c:	2200      	movs	r2, #0
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	f7ff b828 	b.w	d4e94 <network_set_listen_timeout>

000d5e44 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e44:	2200      	movs	r2, #0
   d5e46:	f081 0101 	eor.w	r1, r1, #1
   d5e4a:	6840      	ldr	r0, [r0, #4]
   d5e4c:	f7ff b812 	b.w	d4e74 <network_listen>

000d5e50 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e50:	2300      	movs	r3, #0
   d5e52:	461a      	mov	r2, r3
   d5e54:	4619      	mov	r1, r3
   d5e56:	6840      	ldr	r0, [r0, #4]
   d5e58:	f7ff b804 	b.w	d4e64 <network_off>

000d5e5c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e5c:	2300      	movs	r3, #0
   d5e5e:	461a      	mov	r2, r3
   d5e60:	4619      	mov	r1, r3
   d5e62:	6840      	ldr	r0, [r0, #4]
   d5e64:	f7fe bff6 	b.w	d4e54 <network_on>

000d5e68 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	4611      	mov	r1, r2
   d5e6c:	6840      	ldr	r0, [r0, #4]
   d5e6e:	f7fe bfe9 	b.w	d4e44 <network_ready>

000d5e72 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e72:	2200      	movs	r2, #0
   d5e74:	4611      	mov	r1, r2
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	f7fe bfd4 	b.w	d4e24 <network_connecting>

000d5e7c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e7c:	2200      	movs	r2, #0
   d5e7e:	2102      	movs	r1, #2
   d5e80:	6840      	ldr	r0, [r0, #4]
   d5e82:	f7fe bfd7 	b.w	d4e34 <network_disconnect>

000d5e86 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e86:	2300      	movs	r3, #0
   d5e88:	461a      	mov	r2, r3
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7fe bfc2 	b.w	d4e14 <network_connect>

000d5e90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5e90:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e92:	2203      	movs	r2, #3
   d5e94:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e96:	4a02      	ldr	r2, [pc, #8]	; (d5ea0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5e98:	601a      	str	r2, [r3, #0]
   d5e9a:	4770      	bx	lr
   d5e9c:	2003e70c 	.word	0x2003e70c
   d5ea0:	000d6e88 	.word	0x000d6e88

000d5ea4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5ea4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5ea6:	4d0b      	ldr	r5, [pc, #44]	; (d5ed4 <_Z19__fetch_global_Wirev+0x30>)
   d5ea8:	6829      	ldr	r1, [r5, #0]
   d5eaa:	f011 0401 	ands.w	r4, r1, #1
   d5eae:	d10f      	bne.n	d5ed0 <_Z19__fetch_global_Wirev+0x2c>
   d5eb0:	4628      	mov	r0, r5
   d5eb2:	f7fe f901 	bl	d40b8 <__cxa_guard_acquire>
   d5eb6:	b158      	cbz	r0, d5ed0 <_Z19__fetch_global_Wirev+0x2c>
   d5eb8:	4621      	mov	r1, r4
   d5eba:	4807      	ldr	r0, [pc, #28]	; (d5ed8 <_Z19__fetch_global_Wirev+0x34>)
   d5ebc:	f7ff fcdc 	bl	d5878 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5ec0:	4628      	mov	r0, r5
   d5ec2:	f7fe f8fe 	bl	d40c2 <__cxa_guard_release>
   d5ec6:	4a05      	ldr	r2, [pc, #20]	; (d5edc <_Z19__fetch_global_Wirev+0x38>)
   d5ec8:	4905      	ldr	r1, [pc, #20]	; (d5ee0 <_Z19__fetch_global_Wirev+0x3c>)
   d5eca:	4803      	ldr	r0, [pc, #12]	; (d5ed8 <_Z19__fetch_global_Wirev+0x34>)
   d5ecc:	f000 f89a 	bl	d6004 <__aeabi_atexit>
	return wire;
}
   d5ed0:	4801      	ldr	r0, [pc, #4]	; (d5ed8 <_Z19__fetch_global_Wirev+0x34>)
   d5ed2:	bd38      	pop	{r3, r4, r5, pc}
   d5ed4:	2003e714 	.word	0x2003e714
   d5ed8:	2003e718 	.word	0x2003e718
   d5edc:	2003e284 	.word	0x2003e284
   d5ee0:	000d5823 	.word	0x000d5823

000d5ee4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ee4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5ee6:	4c0c      	ldr	r4, [pc, #48]	; (d5f18 <_GLOBAL__sub_I_SPI+0x34>)
   d5ee8:	4e0c      	ldr	r6, [pc, #48]	; (d5f1c <_GLOBAL__sub_I_SPI+0x38>)
   d5eea:	4d0d      	ldr	r5, [pc, #52]	; (d5f20 <_GLOBAL__sub_I_SPI+0x3c>)
   d5eec:	2100      	movs	r1, #0
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff fc80 	bl	d57f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ef4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ef6:	4c0b      	ldr	r4, [pc, #44]	; (d5f24 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5ef8:	4632      	mov	r2, r6
   d5efa:	4629      	mov	r1, r5
   d5efc:	f000 f882 	bl	d6004 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f00:	2101      	movs	r1, #1
   d5f02:	4620      	mov	r0, r4
   d5f04:	f7ff fc76 	bl	d57f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f08:	4632      	mov	r2, r6
   d5f0a:	4629      	mov	r1, r5
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f12:	f000 b877 	b.w	d6004 <__aeabi_atexit>
   d5f16:	bf00      	nop
   d5f18:	2003e730 	.word	0x2003e730
   d5f1c:	2003e284 	.word	0x2003e284
   d5f20:	000d57e5 	.word	0x000d57e5
   d5f24:	2003e740 	.word	0x2003e740

000d5f28 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5f2c:	480f      	ldr	r0, [pc, #60]	; (d5f6c <pinAvailable+0x44>)
   d5f2e:	f7ff fc75 	bl	d581c <_ZN8SPIClass9isEnabledEv>
   d5f32:	b128      	cbz	r0, d5f40 <pinAvailable+0x18>
   d5f34:	f1a4 030b 	sub.w	r3, r4, #11
   d5f38:	2b02      	cmp	r3, #2
   d5f3a:	d801      	bhi.n	d5f40 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5f3c:	2000      	movs	r0, #0
   d5f3e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5f40:	f7ff ffb0 	bl	d5ea4 <_Z19__fetch_global_Wirev>
   d5f44:	f7ff fcaa 	bl	d589c <_ZN7TwoWire9isEnabledEv>
   d5f48:	b108      	cbz	r0, d5f4e <pinAvailable+0x26>
   d5f4a:	2c01      	cmp	r4, #1
   d5f4c:	d9f6      	bls.n	d5f3c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5f4e:	f7ff ff39 	bl	d5dc4 <_Z22__fetch_global_Serial1v>
   d5f52:	f7ff ff33 	bl	d5dbc <_ZN11USARTSerial9isEnabledEv>
   d5f56:	b118      	cbz	r0, d5f60 <pinAvailable+0x38>
   d5f58:	f1a4 0309 	sub.w	r3, r4, #9
   d5f5c:	2b01      	cmp	r3, #1
   d5f5e:	d9ed      	bls.n	d5f3c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5f60:	2c23      	cmp	r4, #35	; 0x23
   d5f62:	bf8c      	ite	hi
   d5f64:	2000      	movhi	r0, #0
   d5f66:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5f68:	bd10      	pop	{r4, pc}
   d5f6a:	bf00      	nop
   d5f6c:	2003e730 	.word	0x2003e730

000d5f70 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f70:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5f72:	b538      	push	{r3, r4, r5, lr}
   d5f74:	4604      	mov	r4, r0
   d5f76:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f78:	d80a      	bhi.n	d5f90 <pinMode+0x20>
   d5f7a:	29ff      	cmp	r1, #255	; 0xff
   d5f7c:	d008      	beq.n	d5f90 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f7e:	f7ff ffd3 	bl	d5f28 <pinAvailable>
   d5f82:	b128      	cbz	r0, d5f90 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f84:	4629      	mov	r1, r5
   d5f86:	4620      	mov	r0, r4
}
   d5f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f8c:	f7fe bef2 	b.w	d4d74 <HAL_Pin_Mode>
   d5f90:	bd38      	pop	{r3, r4, r5, pc}

000d5f92 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5f92:	b510      	push	{r4, lr}
   d5f94:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f96:	f7fe fef5 	bl	d4d84 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5f9a:	3804      	subs	r0, #4
   d5f9c:	b2c0      	uxtb	r0, r0
   d5f9e:	2801      	cmp	r0, #1
   d5fa0:	d908      	bls.n	d5fb4 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7ff ffc0 	bl	d5f28 <pinAvailable>
   d5fa8:	b120      	cbz	r0, d5fb4 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5faa:	4620      	mov	r0, r4
}
   d5fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5fb0:	f7fe bef0 	b.w	d4d94 <HAL_GPIO_Read>
}
   d5fb4:	2000      	movs	r0, #0
   d5fb6:	bd10      	pop	{r4, pc}

000d5fb8 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5fb8:	b538      	push	{r3, r4, r5, lr}
   d5fba:	4604      	mov	r4, r0
   d5fbc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5fbe:	f7ff ffb3 	bl	d5f28 <pinAvailable>
   d5fc2:	b1f0      	cbz	r0, d6002 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d5fc4:	2104      	movs	r1, #4
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	f7fe fecc 	bl	d4d64 <HAL_Validate_Pin_Function>
   d5fcc:	2804      	cmp	r0, #4
   d5fce:	d105      	bne.n	d5fdc <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d5fd0:	b2a9      	uxth	r1, r5
   d5fd2:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d5fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5fd8:	f7fe bee4 	b.w	d4da4 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5fdc:	2102      	movs	r1, #2
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f7fe fec0 	bl	d4d64 <HAL_Validate_Pin_Function>
   d5fe4:	2802      	cmp	r0, #2
   d5fe6:	d10c      	bne.n	d6002 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7fe fecb 	bl	d4d84 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5fee:	2801      	cmp	r0, #1
   d5ff0:	d001      	beq.n	d5ff6 <_Z11analogWritetm+0x3e>
   d5ff2:	2804      	cmp	r0, #4
   d5ff4:	d105      	bne.n	d6002 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5ff6:	4629      	mov	r1, r5
   d5ff8:	4620      	mov	r0, r4
    }
}
   d5ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5ffe:	f7fe bed9 	b.w	d4db4 <HAL_PWM_Write_Ext>
   d6002:	bd38      	pop	{r3, r4, r5, pc}

000d6004 <__aeabi_atexit>:
   d6004:	460b      	mov	r3, r1
   d6006:	4601      	mov	r1, r0
   d6008:	4618      	mov	r0, r3
   d600a:	f000 bb05 	b.w	d6618 <__cxa_atexit>
	...

000d6010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6010:	4b18      	ldr	r3, [pc, #96]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b16      	ldr	r3, [pc, #88]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b14      	ldr	r3, [pc, #80]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b12      	ldr	r3, [pc, #72]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b10      	ldr	r3, [pc, #64]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b0e      	ldr	r3, [pc, #56]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d0      	lsls	r0, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b0c      	ldr	r3, [pc, #48]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d1      	lsls	r1, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b0a      	ldr	r3, [pc, #40]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d2      	lsls	r2, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4770      	bx	lr
   d6072:	bf00      	nop
   d6074:	2003e76c 	.word	0x2003e76c
   d6078:	2003e768 	.word	0x2003e768
   d607c:	2003e764 	.word	0x2003e764
   d6080:	2003e760 	.word	0x2003e760
   d6084:	2003e75c 	.word	0x2003e75c
   d6088:	2003e758 	.word	0x2003e758
   d608c:	2003e754 	.word	0x2003e754
   d6090:	2003e750 	.word	0x2003e750

000d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6094:	4b24      	ldr	r3, [pc, #144]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d0      	lsls	r0, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b22      	ldr	r3, [pc, #136]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d1      	lsls	r1, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b20      	ldr	r3, [pc, #128]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d2      	lsls	r2, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b1e      	ldr	r3, [pc, #120]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d0      	lsls	r0, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b1c      	ldr	r3, [pc, #112]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d1      	lsls	r1, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4b1a      	ldr	r3, [pc, #104]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d60d2:	681a      	ldr	r2, [r3, #0]
   d60d4:	07d2      	lsls	r2, r2, #31
   d60d6:	bf5c      	itt	pl
   d60d8:	2201      	movpl	r2, #1
   d60da:	601a      	strpl	r2, [r3, #0]
   d60dc:	4b18      	ldr	r3, [pc, #96]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60de:	681a      	ldr	r2, [r3, #0]
   d60e0:	07d0      	lsls	r0, r2, #31
   d60e2:	bf5c      	itt	pl
   d60e4:	2201      	movpl	r2, #1
   d60e6:	601a      	strpl	r2, [r3, #0]
   d60e8:	4b16      	ldr	r3, [pc, #88]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	07d1      	lsls	r1, r2, #31
   d60ee:	bf5c      	itt	pl
   d60f0:	2201      	movpl	r2, #1
   d60f2:	601a      	strpl	r2, [r3, #0]
   d60f4:	4b14      	ldr	r3, [pc, #80]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60f6:	681a      	ldr	r2, [r3, #0]
   d60f8:	07d2      	lsls	r2, r2, #31
   d60fa:	bf5c      	itt	pl
   d60fc:	2201      	movpl	r2, #1
   d60fe:	601a      	strpl	r2, [r3, #0]
   d6100:	4b12      	ldr	r3, [pc, #72]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6102:	681a      	ldr	r2, [r3, #0]
   d6104:	07d0      	lsls	r0, r2, #31
   d6106:	bf5c      	itt	pl
   d6108:	2201      	movpl	r2, #1
   d610a:	601a      	strpl	r2, [r3, #0]
   d610c:	4b10      	ldr	r3, [pc, #64]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d1      	lsls	r1, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b0e      	ldr	r3, [pc, #56]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d2      	lsls	r2, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4770      	bx	lr
   d6126:	bf00      	nop
   d6128:	2003e79c 	.word	0x2003e79c
   d612c:	2003e798 	.word	0x2003e798
   d6130:	2003e794 	.word	0x2003e794
   d6134:	2003e790 	.word	0x2003e790
   d6138:	2003e78c 	.word	0x2003e78c
   d613c:	2003e788 	.word	0x2003e788
   d6140:	2003e784 	.word	0x2003e784
   d6144:	2003e780 	.word	0x2003e780
   d6148:	2003e77c 	.word	0x2003e77c
   d614c:	2003e778 	.word	0x2003e778
   d6150:	2003e774 	.word	0x2003e774
   d6154:	2003e770 	.word	0x2003e770

000d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6158:	4b24      	ldr	r3, [pc, #144]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d0      	lsls	r0, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b22      	ldr	r3, [pc, #136]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d1      	lsls	r1, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b20      	ldr	r3, [pc, #128]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d2      	lsls	r2, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b1e      	ldr	r3, [pc, #120]	; (d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d0      	lsls	r0, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b1c      	ldr	r3, [pc, #112]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d1      	lsls	r1, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b1a      	ldr	r3, [pc, #104]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d2      	lsls	r2, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b18      	ldr	r3, [pc, #96]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d0      	lsls	r0, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b16      	ldr	r3, [pc, #88]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d1      	lsls	r1, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4b14      	ldr	r3, [pc, #80]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d61ba:	681a      	ldr	r2, [r3, #0]
   d61bc:	07d2      	lsls	r2, r2, #31
   d61be:	bf5c      	itt	pl
   d61c0:	2201      	movpl	r2, #1
   d61c2:	601a      	strpl	r2, [r3, #0]
   d61c4:	4b12      	ldr	r3, [pc, #72]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d61c6:	681a      	ldr	r2, [r3, #0]
   d61c8:	07d0      	lsls	r0, r2, #31
   d61ca:	bf5c      	itt	pl
   d61cc:	2201      	movpl	r2, #1
   d61ce:	601a      	strpl	r2, [r3, #0]
   d61d0:	4b10      	ldr	r3, [pc, #64]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d61d2:	681a      	ldr	r2, [r3, #0]
   d61d4:	07d1      	lsls	r1, r2, #31
   d61d6:	bf5c      	itt	pl
   d61d8:	2201      	movpl	r2, #1
   d61da:	601a      	strpl	r2, [r3, #0]
   d61dc:	4b0e      	ldr	r3, [pc, #56]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d61de:	681a      	ldr	r2, [r3, #0]
   d61e0:	07d2      	lsls	r2, r2, #31
   d61e2:	bf5c      	itt	pl
   d61e4:	2201      	movpl	r2, #1
   d61e6:	601a      	strpl	r2, [r3, #0]
   d61e8:	4770      	bx	lr
   d61ea:	bf00      	nop
   d61ec:	2003e7cc 	.word	0x2003e7cc
   d61f0:	2003e7c8 	.word	0x2003e7c8
   d61f4:	2003e7c4 	.word	0x2003e7c4
   d61f8:	2003e7c0 	.word	0x2003e7c0
   d61fc:	2003e7bc 	.word	0x2003e7bc
   d6200:	2003e7b8 	.word	0x2003e7b8
   d6204:	2003e7b4 	.word	0x2003e7b4
   d6208:	2003e7b0 	.word	0x2003e7b0
   d620c:	2003e7ac 	.word	0x2003e7ac
   d6210:	2003e7a8 	.word	0x2003e7a8
   d6214:	2003e7a4 	.word	0x2003e7a4
   d6218:	2003e7a0 	.word	0x2003e7a0

000d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d621c:	4b18      	ldr	r3, [pc, #96]	; (d6280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d1      	lsls	r1, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b16      	ldr	r3, [pc, #88]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d2      	lsls	r2, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b14      	ldr	r3, [pc, #80]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d0      	lsls	r0, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4b12      	ldr	r3, [pc, #72]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d1      	lsls	r1, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b10      	ldr	r3, [pc, #64]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d2      	lsls	r2, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b0e      	ldr	r3, [pc, #56]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d0      	lsls	r0, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b0c      	ldr	r3, [pc, #48]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d1      	lsls	r1, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b0a      	ldr	r3, [pc, #40]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d2      	lsls	r2, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4770      	bx	lr
   d627e:	bf00      	nop
   d6280:	2003e7ec 	.word	0x2003e7ec
   d6284:	2003e7e8 	.word	0x2003e7e8
   d6288:	2003e7e4 	.word	0x2003e7e4
   d628c:	2003e7e0 	.word	0x2003e7e0
   d6290:	2003e7dc 	.word	0x2003e7dc
   d6294:	2003e7d8 	.word	0x2003e7d8
   d6298:	2003e7d4 	.word	0x2003e7d4
   d629c:	2003e7d0 	.word	0x2003e7d0

000d62a0 <__aeabi_drsub>:
   d62a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d62a4:	e002      	b.n	d62ac <__adddf3>
   d62a6:	bf00      	nop

000d62a8 <__aeabi_dsub>:
   d62a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d62ac <__adddf3>:
   d62ac:	b530      	push	{r4, r5, lr}
   d62ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d62b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d62b6:	ea94 0f05 	teq	r4, r5
   d62ba:	bf08      	it	eq
   d62bc:	ea90 0f02 	teqeq	r0, r2
   d62c0:	bf1f      	itttt	ne
   d62c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d62c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d62ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d62ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62d2:	f000 80e2 	beq.w	d649a <__adddf3+0x1ee>
   d62d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d62da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d62de:	bfb8      	it	lt
   d62e0:	426d      	neglt	r5, r5
   d62e2:	dd0c      	ble.n	d62fe <__adddf3+0x52>
   d62e4:	442c      	add	r4, r5
   d62e6:	ea80 0202 	eor.w	r2, r0, r2
   d62ea:	ea81 0303 	eor.w	r3, r1, r3
   d62ee:	ea82 0000 	eor.w	r0, r2, r0
   d62f2:	ea83 0101 	eor.w	r1, r3, r1
   d62f6:	ea80 0202 	eor.w	r2, r0, r2
   d62fa:	ea81 0303 	eor.w	r3, r1, r3
   d62fe:	2d36      	cmp	r5, #54	; 0x36
   d6300:	bf88      	it	hi
   d6302:	bd30      	pophi	{r4, r5, pc}
   d6304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6308:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d630c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6314:	d002      	beq.n	d631c <__adddf3+0x70>
   d6316:	4240      	negs	r0, r0
   d6318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d631c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6320:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6328:	d002      	beq.n	d6330 <__adddf3+0x84>
   d632a:	4252      	negs	r2, r2
   d632c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6330:	ea94 0f05 	teq	r4, r5
   d6334:	f000 80a7 	beq.w	d6486 <__adddf3+0x1da>
   d6338:	f1a4 0401 	sub.w	r4, r4, #1
   d633c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6340:	db0d      	blt.n	d635e <__adddf3+0xb2>
   d6342:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6346:	fa22 f205 	lsr.w	r2, r2, r5
   d634a:	1880      	adds	r0, r0, r2
   d634c:	f141 0100 	adc.w	r1, r1, #0
   d6350:	fa03 f20e 	lsl.w	r2, r3, lr
   d6354:	1880      	adds	r0, r0, r2
   d6356:	fa43 f305 	asr.w	r3, r3, r5
   d635a:	4159      	adcs	r1, r3
   d635c:	e00e      	b.n	d637c <__adddf3+0xd0>
   d635e:	f1a5 0520 	sub.w	r5, r5, #32
   d6362:	f10e 0e20 	add.w	lr, lr, #32
   d6366:	2a01      	cmp	r2, #1
   d6368:	fa03 fc0e 	lsl.w	ip, r3, lr
   d636c:	bf28      	it	cs
   d636e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6372:	fa43 f305 	asr.w	r3, r3, r5
   d6376:	18c0      	adds	r0, r0, r3
   d6378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d637c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6380:	d507      	bpl.n	d6392 <__adddf3+0xe6>
   d6382:	f04f 0e00 	mov.w	lr, #0
   d6386:	f1dc 0c00 	rsbs	ip, ip, #0
   d638a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d638e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6396:	d31b      	bcc.n	d63d0 <__adddf3+0x124>
   d6398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d639c:	d30c      	bcc.n	d63b8 <__adddf3+0x10c>
   d639e:	0849      	lsrs	r1, r1, #1
   d63a0:	ea5f 0030 	movs.w	r0, r0, rrx
   d63a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d63a8:	f104 0401 	add.w	r4, r4, #1
   d63ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d63b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d63b4:	f080 809a 	bcs.w	d64ec <__adddf3+0x240>
   d63b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d63bc:	bf08      	it	eq
   d63be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63c2:	f150 0000 	adcs.w	r0, r0, #0
   d63c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63ca:	ea41 0105 	orr.w	r1, r1, r5
   d63ce:	bd30      	pop	{r4, r5, pc}
   d63d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d63d4:	4140      	adcs	r0, r0
   d63d6:	eb41 0101 	adc.w	r1, r1, r1
   d63da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63de:	f1a4 0401 	sub.w	r4, r4, #1
   d63e2:	d1e9      	bne.n	d63b8 <__adddf3+0x10c>
   d63e4:	f091 0f00 	teq	r1, #0
   d63e8:	bf04      	itt	eq
   d63ea:	4601      	moveq	r1, r0
   d63ec:	2000      	moveq	r0, #0
   d63ee:	fab1 f381 	clz	r3, r1
   d63f2:	bf08      	it	eq
   d63f4:	3320      	addeq	r3, #32
   d63f6:	f1a3 030b 	sub.w	r3, r3, #11
   d63fa:	f1b3 0220 	subs.w	r2, r3, #32
   d63fe:	da0c      	bge.n	d641a <__adddf3+0x16e>
   d6400:	320c      	adds	r2, #12
   d6402:	dd08      	ble.n	d6416 <__adddf3+0x16a>
   d6404:	f102 0c14 	add.w	ip, r2, #20
   d6408:	f1c2 020c 	rsb	r2, r2, #12
   d640c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6410:	fa21 f102 	lsr.w	r1, r1, r2
   d6414:	e00c      	b.n	d6430 <__adddf3+0x184>
   d6416:	f102 0214 	add.w	r2, r2, #20
   d641a:	bfd8      	it	le
   d641c:	f1c2 0c20 	rsble	ip, r2, #32
   d6420:	fa01 f102 	lsl.w	r1, r1, r2
   d6424:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6428:	bfdc      	itt	le
   d642a:	ea41 010c 	orrle.w	r1, r1, ip
   d642e:	4090      	lslle	r0, r2
   d6430:	1ae4      	subs	r4, r4, r3
   d6432:	bfa2      	ittt	ge
   d6434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6438:	4329      	orrge	r1, r5
   d643a:	bd30      	popge	{r4, r5, pc}
   d643c:	ea6f 0404 	mvn.w	r4, r4
   d6440:	3c1f      	subs	r4, #31
   d6442:	da1c      	bge.n	d647e <__adddf3+0x1d2>
   d6444:	340c      	adds	r4, #12
   d6446:	dc0e      	bgt.n	d6466 <__adddf3+0x1ba>
   d6448:	f104 0414 	add.w	r4, r4, #20
   d644c:	f1c4 0220 	rsb	r2, r4, #32
   d6450:	fa20 f004 	lsr.w	r0, r0, r4
   d6454:	fa01 f302 	lsl.w	r3, r1, r2
   d6458:	ea40 0003 	orr.w	r0, r0, r3
   d645c:	fa21 f304 	lsr.w	r3, r1, r4
   d6460:	ea45 0103 	orr.w	r1, r5, r3
   d6464:	bd30      	pop	{r4, r5, pc}
   d6466:	f1c4 040c 	rsb	r4, r4, #12
   d646a:	f1c4 0220 	rsb	r2, r4, #32
   d646e:	fa20 f002 	lsr.w	r0, r0, r2
   d6472:	fa01 f304 	lsl.w	r3, r1, r4
   d6476:	ea40 0003 	orr.w	r0, r0, r3
   d647a:	4629      	mov	r1, r5
   d647c:	bd30      	pop	{r4, r5, pc}
   d647e:	fa21 f004 	lsr.w	r0, r1, r4
   d6482:	4629      	mov	r1, r5
   d6484:	bd30      	pop	{r4, r5, pc}
   d6486:	f094 0f00 	teq	r4, #0
   d648a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d648e:	bf06      	itte	eq
   d6490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6494:	3401      	addeq	r4, #1
   d6496:	3d01      	subne	r5, #1
   d6498:	e74e      	b.n	d6338 <__adddf3+0x8c>
   d649a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d649e:	bf18      	it	ne
   d64a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d64a4:	d029      	beq.n	d64fa <__adddf3+0x24e>
   d64a6:	ea94 0f05 	teq	r4, r5
   d64aa:	bf08      	it	eq
   d64ac:	ea90 0f02 	teqeq	r0, r2
   d64b0:	d005      	beq.n	d64be <__adddf3+0x212>
   d64b2:	ea54 0c00 	orrs.w	ip, r4, r0
   d64b6:	bf04      	itt	eq
   d64b8:	4619      	moveq	r1, r3
   d64ba:	4610      	moveq	r0, r2
   d64bc:	bd30      	pop	{r4, r5, pc}
   d64be:	ea91 0f03 	teq	r1, r3
   d64c2:	bf1e      	ittt	ne
   d64c4:	2100      	movne	r1, #0
   d64c6:	2000      	movne	r0, #0
   d64c8:	bd30      	popne	{r4, r5, pc}
   d64ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d64ce:	d105      	bne.n	d64dc <__adddf3+0x230>
   d64d0:	0040      	lsls	r0, r0, #1
   d64d2:	4149      	adcs	r1, r1
   d64d4:	bf28      	it	cs
   d64d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d64da:	bd30      	pop	{r4, r5, pc}
   d64dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d64e0:	bf3c      	itt	cc
   d64e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d64e6:	bd30      	popcc	{r4, r5, pc}
   d64e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d64f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d64f4:	f04f 0000 	mov.w	r0, #0
   d64f8:	bd30      	pop	{r4, r5, pc}
   d64fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d64fe:	bf1a      	itte	ne
   d6500:	4619      	movne	r1, r3
   d6502:	4610      	movne	r0, r2
   d6504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6508:	bf1c      	itt	ne
   d650a:	460b      	movne	r3, r1
   d650c:	4602      	movne	r2, r0
   d650e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6512:	bf06      	itte	eq
   d6514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6518:	ea91 0f03 	teqeq	r1, r3
   d651c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6520:	bd30      	pop	{r4, r5, pc}
   d6522:	bf00      	nop

000d6524 <__aeabi_ui2d>:
   d6524:	f090 0f00 	teq	r0, #0
   d6528:	bf04      	itt	eq
   d652a:	2100      	moveq	r1, #0
   d652c:	4770      	bxeq	lr
   d652e:	b530      	push	{r4, r5, lr}
   d6530:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6534:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6538:	f04f 0500 	mov.w	r5, #0
   d653c:	f04f 0100 	mov.w	r1, #0
   d6540:	e750      	b.n	d63e4 <__adddf3+0x138>
   d6542:	bf00      	nop

000d6544 <__aeabi_i2d>:
   d6544:	f090 0f00 	teq	r0, #0
   d6548:	bf04      	itt	eq
   d654a:	2100      	moveq	r1, #0
   d654c:	4770      	bxeq	lr
   d654e:	b530      	push	{r4, r5, lr}
   d6550:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6554:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d655c:	bf48      	it	mi
   d655e:	4240      	negmi	r0, r0
   d6560:	f04f 0100 	mov.w	r1, #0
   d6564:	e73e      	b.n	d63e4 <__adddf3+0x138>
   d6566:	bf00      	nop

000d6568 <__aeabi_f2d>:
   d6568:	0042      	lsls	r2, r0, #1
   d656a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d656e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6572:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6576:	bf1f      	itttt	ne
   d6578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d657c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6584:	4770      	bxne	lr
   d6586:	f092 0f00 	teq	r2, #0
   d658a:	bf14      	ite	ne
   d658c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6590:	4770      	bxeq	lr
   d6592:	b530      	push	{r4, r5, lr}
   d6594:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d659c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d65a0:	e720      	b.n	d63e4 <__adddf3+0x138>
   d65a2:	bf00      	nop

000d65a4 <__aeabi_ul2d>:
   d65a4:	ea50 0201 	orrs.w	r2, r0, r1
   d65a8:	bf08      	it	eq
   d65aa:	4770      	bxeq	lr
   d65ac:	b530      	push	{r4, r5, lr}
   d65ae:	f04f 0500 	mov.w	r5, #0
   d65b2:	e00a      	b.n	d65ca <__aeabi_l2d+0x16>

000d65b4 <__aeabi_l2d>:
   d65b4:	ea50 0201 	orrs.w	r2, r0, r1
   d65b8:	bf08      	it	eq
   d65ba:	4770      	bxeq	lr
   d65bc:	b530      	push	{r4, r5, lr}
   d65be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d65c2:	d502      	bpl.n	d65ca <__aeabi_l2d+0x16>
   d65c4:	4240      	negs	r0, r0
   d65c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d65d6:	f43f aedc 	beq.w	d6392 <__adddf3+0xe6>
   d65da:	f04f 0203 	mov.w	r2, #3
   d65de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65e2:	bf18      	it	ne
   d65e4:	3203      	addne	r2, #3
   d65e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65ea:	bf18      	it	ne
   d65ec:	3203      	addne	r2, #3
   d65ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d65f2:	f1c2 0320 	rsb	r3, r2, #32
   d65f6:	fa00 fc03 	lsl.w	ip, r0, r3
   d65fa:	fa20 f002 	lsr.w	r0, r0, r2
   d65fe:	fa01 fe03 	lsl.w	lr, r1, r3
   d6602:	ea40 000e 	orr.w	r0, r0, lr
   d6606:	fa21 f102 	lsr.w	r1, r1, r2
   d660a:	4414      	add	r4, r2
   d660c:	e6c1      	b.n	d6392 <__adddf3+0xe6>
   d660e:	bf00      	nop

000d6610 <atoi>:
   d6610:	220a      	movs	r2, #10
   d6612:	2100      	movs	r1, #0
   d6614:	f000 b932 	b.w	d687c <strtol>

000d6618 <__cxa_atexit>:
   d6618:	b510      	push	{r4, lr}
   d661a:	4c05      	ldr	r4, [pc, #20]	; (d6630 <__cxa_atexit+0x18>)
   d661c:	4613      	mov	r3, r2
   d661e:	b12c      	cbz	r4, d662c <__cxa_atexit+0x14>
   d6620:	460a      	mov	r2, r1
   d6622:	4601      	mov	r1, r0
   d6624:	2002      	movs	r0, #2
   d6626:	f3af 8000 	nop.w
   d662a:	bd10      	pop	{r4, pc}
   d662c:	4620      	mov	r0, r4
   d662e:	bd10      	pop	{r4, pc}
   d6630:	00000000 	.word	0x00000000

000d6634 <memcpy>:
   d6634:	b510      	push	{r4, lr}
   d6636:	1e43      	subs	r3, r0, #1
   d6638:	440a      	add	r2, r1
   d663a:	4291      	cmp	r1, r2
   d663c:	d004      	beq.n	d6648 <memcpy+0x14>
   d663e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6642:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6646:	e7f8      	b.n	d663a <memcpy+0x6>
   d6648:	bd10      	pop	{r4, pc}

000d664a <memmove>:
   d664a:	4288      	cmp	r0, r1
   d664c:	b510      	push	{r4, lr}
   d664e:	eb01 0302 	add.w	r3, r1, r2
   d6652:	d801      	bhi.n	d6658 <memmove+0xe>
   d6654:	1e42      	subs	r2, r0, #1
   d6656:	e00b      	b.n	d6670 <memmove+0x26>
   d6658:	4298      	cmp	r0, r3
   d665a:	d2fb      	bcs.n	d6654 <memmove+0xa>
   d665c:	1881      	adds	r1, r0, r2
   d665e:	1ad2      	subs	r2, r2, r3
   d6660:	42d3      	cmn	r3, r2
   d6662:	d004      	beq.n	d666e <memmove+0x24>
   d6664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6668:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d666c:	e7f8      	b.n	d6660 <memmove+0x16>
   d666e:	bd10      	pop	{r4, pc}
   d6670:	4299      	cmp	r1, r3
   d6672:	d004      	beq.n	d667e <memmove+0x34>
   d6674:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6678:	f802 4f01 	strb.w	r4, [r2, #1]!
   d667c:	e7f8      	b.n	d6670 <memmove+0x26>
   d667e:	bd10      	pop	{r4, pc}

000d6680 <memset>:
   d6680:	4402      	add	r2, r0
   d6682:	4603      	mov	r3, r0
   d6684:	4293      	cmp	r3, r2
   d6686:	d002      	beq.n	d668e <memset+0xe>
   d6688:	f803 1b01 	strb.w	r1, [r3], #1
   d668c:	e7fa      	b.n	d6684 <memset+0x4>
   d668e:	4770      	bx	lr

000d6690 <srand>:
   d6690:	b538      	push	{r3, r4, r5, lr}
   d6692:	4b12      	ldr	r3, [pc, #72]	; (d66dc <srand+0x4c>)
   d6694:	681c      	ldr	r4, [r3, #0]
   d6696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6698:	4605      	mov	r5, r0
   d669a:	b9d3      	cbnz	r3, d66d2 <srand+0x42>
   d669c:	2018      	movs	r0, #24
   d669e:	f7fe fc2d 	bl	d4efc <malloc>
   d66a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d66a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d66a8:	8003      	strh	r3, [r0, #0]
   d66aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66ae:	8043      	strh	r3, [r0, #2]
   d66b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d66b4:	8083      	strh	r3, [r0, #4]
   d66b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66ba:	80c3      	strh	r3, [r0, #6]
   d66bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d66c0:	8103      	strh	r3, [r0, #8]
   d66c2:	2305      	movs	r3, #5
   d66c4:	8143      	strh	r3, [r0, #10]
   d66c6:	230b      	movs	r3, #11
   d66c8:	8183      	strh	r3, [r0, #12]
   d66ca:	2201      	movs	r2, #1
   d66cc:	2300      	movs	r3, #0
   d66ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66d4:	2200      	movs	r2, #0
   d66d6:	611d      	str	r5, [r3, #16]
   d66d8:	615a      	str	r2, [r3, #20]
   d66da:	bd38      	pop	{r3, r4, r5, pc}
   d66dc:	2003e280 	.word	0x2003e280

000d66e0 <strcpy>:
   d66e0:	4603      	mov	r3, r0
   d66e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d66e6:	f803 2b01 	strb.w	r2, [r3], #1
   d66ea:	2a00      	cmp	r2, #0
   d66ec:	d1f9      	bne.n	d66e2 <strcpy+0x2>
   d66ee:	4770      	bx	lr

000d66f0 <strlen>:
   d66f0:	4603      	mov	r3, r0
   d66f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66f6:	2a00      	cmp	r2, #0
   d66f8:	d1fb      	bne.n	d66f2 <strlen+0x2>
   d66fa:	1a18      	subs	r0, r3, r0
   d66fc:	3801      	subs	r0, #1
   d66fe:	4770      	bx	lr

000d6700 <strncasecmp>:
   d6700:	4b10      	ldr	r3, [pc, #64]	; (d6744 <strncasecmp+0x44>)
   d6702:	b570      	push	{r4, r5, r6, lr}
   d6704:	681e      	ldr	r6, [r3, #0]
   d6706:	440a      	add	r2, r1
   d6708:	4291      	cmp	r1, r2
   d670a:	d017      	beq.n	d673c <strncasecmp+0x3c>
   d670c:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6710:	18f4      	adds	r4, r6, r3
   d6712:	7864      	ldrb	r4, [r4, #1]
   d6714:	f004 0403 	and.w	r4, r4, #3
   d6718:	2c01      	cmp	r4, #1
   d671a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d671e:	eb06 0504 	add.w	r5, r6, r4
   d6722:	bf08      	it	eq
   d6724:	3320      	addeq	r3, #32
   d6726:	786d      	ldrb	r5, [r5, #1]
   d6728:	f005 0503 	and.w	r5, r5, #3
   d672c:	2d01      	cmp	r5, #1
   d672e:	bf08      	it	eq
   d6730:	3420      	addeq	r4, #32
   d6732:	1b1b      	subs	r3, r3, r4
   d6734:	d103      	bne.n	d673e <strncasecmp+0x3e>
   d6736:	2c00      	cmp	r4, #0
   d6738:	d1e6      	bne.n	d6708 <strncasecmp+0x8>
   d673a:	e000      	b.n	d673e <strncasecmp+0x3e>
   d673c:	2300      	movs	r3, #0
   d673e:	4618      	mov	r0, r3
   d6740:	bd70      	pop	{r4, r5, r6, pc}
   d6742:	bf00      	nop
   d6744:	2003e21c 	.word	0x2003e21c

000d6748 <strncpy>:
   d6748:	b510      	push	{r4, lr}
   d674a:	4603      	mov	r3, r0
   d674c:	b142      	cbz	r2, d6760 <strncpy+0x18>
   d674e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6752:	f803 4b01 	strb.w	r4, [r3], #1
   d6756:	3a01      	subs	r2, #1
   d6758:	2c00      	cmp	r4, #0
   d675a:	d1f7      	bne.n	d674c <strncpy+0x4>
   d675c:	441a      	add	r2, r3
   d675e:	e000      	b.n	d6762 <strncpy+0x1a>
   d6760:	bd10      	pop	{r4, pc}
   d6762:	4293      	cmp	r3, r2
   d6764:	d002      	beq.n	d676c <strncpy+0x24>
   d6766:	f803 4b01 	strb.w	r4, [r3], #1
   d676a:	e7fa      	b.n	d6762 <strncpy+0x1a>
   d676c:	bd10      	pop	{r4, pc}
	...

000d6770 <_strtol_r>:
   d6770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6774:	4680      	mov	r8, r0
   d6776:	4840      	ldr	r0, [pc, #256]	; (d6878 <_strtol_r+0x108>)
   d6778:	f8d0 9000 	ldr.w	r9, [r0]
   d677c:	460f      	mov	r7, r1
   d677e:	463d      	mov	r5, r7
   d6780:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6784:	eb09 0004 	add.w	r0, r9, r4
   d6788:	7840      	ldrb	r0, [r0, #1]
   d678a:	f000 0008 	and.w	r0, r0, #8
   d678e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6792:	b108      	cbz	r0, d6798 <_strtol_r+0x28>
   d6794:	462f      	mov	r7, r5
   d6796:	e7f2      	b.n	d677e <_strtol_r+0xe>
   d6798:	2c2d      	cmp	r4, #45	; 0x2d
   d679a:	d103      	bne.n	d67a4 <_strtol_r+0x34>
   d679c:	1cbd      	adds	r5, r7, #2
   d679e:	787c      	ldrb	r4, [r7, #1]
   d67a0:	2601      	movs	r6, #1
   d67a2:	e003      	b.n	d67ac <_strtol_r+0x3c>
   d67a4:	2c2b      	cmp	r4, #43	; 0x2b
   d67a6:	bf04      	itt	eq
   d67a8:	787c      	ldrbeq	r4, [r7, #1]
   d67aa:	1cbd      	addeq	r5, r7, #2
   d67ac:	b113      	cbz	r3, d67b4 <_strtol_r+0x44>
   d67ae:	2b10      	cmp	r3, #16
   d67b0:	d10a      	bne.n	d67c8 <_strtol_r+0x58>
   d67b2:	e05b      	b.n	d686c <_strtol_r+0xfc>
   d67b4:	2c30      	cmp	r4, #48	; 0x30
   d67b6:	d157      	bne.n	d6868 <_strtol_r+0xf8>
   d67b8:	7828      	ldrb	r0, [r5, #0]
   d67ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d67be:	2858      	cmp	r0, #88	; 0x58
   d67c0:	d14d      	bne.n	d685e <_strtol_r+0xee>
   d67c2:	786c      	ldrb	r4, [r5, #1]
   d67c4:	2310      	movs	r3, #16
   d67c6:	3502      	adds	r5, #2
   d67c8:	2e00      	cmp	r6, #0
   d67ca:	bf14      	ite	ne
   d67cc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d67d0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d67d4:	2700      	movs	r7, #0
   d67d6:	fbbc faf3 	udiv	sl, ip, r3
   d67da:	4638      	mov	r0, r7
   d67dc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d67e0:	eb09 0e04 	add.w	lr, r9, r4
   d67e4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d67e8:	f01e 0f04 	tst.w	lr, #4
   d67ec:	d001      	beq.n	d67f2 <_strtol_r+0x82>
   d67ee:	3c30      	subs	r4, #48	; 0x30
   d67f0:	e00b      	b.n	d680a <_strtol_r+0x9a>
   d67f2:	f01e 0e03 	ands.w	lr, lr, #3
   d67f6:	d01b      	beq.n	d6830 <_strtol_r+0xc0>
   d67f8:	f1be 0f01 	cmp.w	lr, #1
   d67fc:	bf0c      	ite	eq
   d67fe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6802:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6806:	ebce 0404 	rsb	r4, lr, r4
   d680a:	42a3      	cmp	r3, r4
   d680c:	dd10      	ble.n	d6830 <_strtol_r+0xc0>
   d680e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d6812:	d00a      	beq.n	d682a <_strtol_r+0xba>
   d6814:	4550      	cmp	r0, sl
   d6816:	d806      	bhi.n	d6826 <_strtol_r+0xb6>
   d6818:	d101      	bne.n	d681e <_strtol_r+0xae>
   d681a:	4564      	cmp	r4, ip
   d681c:	dc03      	bgt.n	d6826 <_strtol_r+0xb6>
   d681e:	fb03 4000 	mla	r0, r3, r0, r4
   d6822:	2701      	movs	r7, #1
   d6824:	e001      	b.n	d682a <_strtol_r+0xba>
   d6826:	f04f 37ff 	mov.w	r7, #4294967295
   d682a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d682e:	e7d7      	b.n	d67e0 <_strtol_r+0x70>
   d6830:	1c7b      	adds	r3, r7, #1
   d6832:	d10c      	bne.n	d684e <_strtol_r+0xde>
   d6834:	2e00      	cmp	r6, #0
   d6836:	f04f 0322 	mov.w	r3, #34	; 0x22
   d683a:	bf14      	ite	ne
   d683c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6840:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6844:	f8c8 3000 	str.w	r3, [r8]
   d6848:	b92a      	cbnz	r2, d6856 <_strtol_r+0xe6>
   d684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d684e:	b106      	cbz	r6, d6852 <_strtol_r+0xe2>
   d6850:	4240      	negs	r0, r0
   d6852:	b172      	cbz	r2, d6872 <_strtol_r+0x102>
   d6854:	b107      	cbz	r7, d6858 <_strtol_r+0xe8>
   d6856:	1e69      	subs	r1, r5, #1
   d6858:	6011      	str	r1, [r2, #0]
   d685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d685e:	2430      	movs	r4, #48	; 0x30
   d6860:	2b00      	cmp	r3, #0
   d6862:	d1b1      	bne.n	d67c8 <_strtol_r+0x58>
   d6864:	2308      	movs	r3, #8
   d6866:	e7af      	b.n	d67c8 <_strtol_r+0x58>
   d6868:	230a      	movs	r3, #10
   d686a:	e7ad      	b.n	d67c8 <_strtol_r+0x58>
   d686c:	2c30      	cmp	r4, #48	; 0x30
   d686e:	d0a3      	beq.n	d67b8 <_strtol_r+0x48>
   d6870:	e7aa      	b.n	d67c8 <_strtol_r+0x58>
   d6872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6876:	bf00      	nop
   d6878:	2003e21c 	.word	0x2003e21c

000d687c <strtol>:
   d687c:	4613      	mov	r3, r2
   d687e:	460a      	mov	r2, r1
   d6880:	4601      	mov	r1, r0
   d6882:	4802      	ldr	r0, [pc, #8]	; (d688c <strtol+0x10>)
   d6884:	6800      	ldr	r0, [r0, #0]
   d6886:	f7ff bf73 	b.w	d6770 <_strtol_r>
   d688a:	bf00      	nop
   d688c:	2003e280 	.word	0x2003e280

000d6890 <dynalib_user>:
   d6890:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d68a0:	00000000 2774654c 65672073 6f672074     ....Let's get go
   d68b0:	00676e69 72617453 6f4c2074 2020706f     ing.Start Loop  
   d68c0:	75420020 6e6f7474 61745320 20206574      .Button State  
   d68d0:	74530020 20747261 6c627550 20687369      .Start Publish 
   d68e0:	45002020 5020646e 696c6275 20206873       .End Publish  
   d68f0:	6f470020 00203a74 2d2d2d2d 746e4920      .Got: .---- Int
   d6900:	72656765 2d2d2d20 4500202d 5320646e     eger ---- .End S
   d6910:	63736275 65626972 00202020 68736172     ubscribe   .rash
   d6920:	69007061 64612e6f 75726661 632e7469     ap.io.adafruit.c
   d6930:	35006d6f 36313839 33616639 34396162     om.598169fa3ba94
   d6940:	39363336 33613134 37393033 32346536     636941a330976e42
   d6950:	00633265 68736172 662f7061 73646565     e2c.rashap/feeds
   d6960:	6174732f 00786574 68736172 662f7061     /statex.rashap/f
   d6970:	73646565 6174732f 65736574 0000646e     eeds/statesend..

000d6980 <_ZTV13Adafruit_MQTT>:
	...
   d6990:	000d40a5 000d40a5 000d40a5 000d40a5     .@...@...@...@..
   d69a0:	000d40a5 78305b20 5d003000 0a00202c     .@.. [0x.0.], ..
   d69b0:	72440009 6570706f 20612064 6b636170     ..Dropped a pack
   d69c0:	55007465 6f6e6b6e 65206e77 726f7272     et.Unknown error
   d69d0:	54514d00 25250054 252e6425 46006664     .MQTT.%%%d.%df.F
   d69e0:	656c6961 6f742064 62757320 69726373     ailed to subscri
   d69f0:	43006562 656e6e6f 6f697463 6166206e     be.Connection fa
   d6a00:	64656c69 65685400 72655320 20726576     iled.The Server 
   d6a10:	73656f64 746f6e20 70757320 74726f70     does not support
   d6a20:	65687420 76656c20 6f206c65 68742066      the level of th
   d6a30:	514d2065 70205454 6f746f72 206c6f63     e MQTT protocol 
   d6a40:	75716572 65747365 68540064 6c432065     requested.The Cl
   d6a50:	746e6569 65646920 6669746e 20726569     ient identifier 
   d6a60:	63207369 6572726f 55207463 382d4654     is correct UTF-8
   d6a70:	74756220 746f6e20 6c6c6120 6465776f      but not allowed
   d6a80:	20796220 20656874 76726553 54007265      by the Server.T
   d6a90:	4d206568 20545451 76726573 20656369     he MQTT service 
   d6aa0:	75207369 6176616e 62616c69 5400656c     is unavailable.T
   d6ab0:	64206568 20617461 74206e69 75206568     he data in the u
   d6ac0:	20726573 656d616e 20726f20 73736170     ser name or pass
   d6ad0:	64726f77 20736920 666c616d 656d726f     word is malforme
   d6ae0:	6f4e0064 75612074 726f6874 64657a69     d.Not authorized
   d6af0:	206f7420 6e6e6f63 00746365 65637845      to connect.Exce
   d6b00:	64656465 63657220 656e6e6f 72207463     eded reconnect r
   d6b10:	20657461 696d696c 50202e74 7361656c     ate limit. Pleas
   d6b20:	72742065 67612079 206e6961 6574616c     e try again late
   d6b30:	59002e72 6820756f 20657661 6e656562     r..You have been
   d6b40:	6e616220 2064656e 6d6f7266 6e6f6320      banned from con
   d6b50:	7463656e 2e676e69 656c5020 20657361     necting. Please 
   d6b60:	746e6f63 20746361 20656874 5454514d     contact the MQTT
   d6b70:	72657320 20726576 696d6461 7473696e      server administ
   d6b80:	6f746172 6f662072 6f6d2072 64206572     rator for more d
   d6b90:	69617465 002e736c                       etails..

000d6b98 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d6ba0:	000d40c9 000d4321 000d4963 000d4a0f     .@..!C..cI...J..
   d6bb0:	000d4a41 000d4977 000d49b7              AJ..wI...I..

000d6bbc <_ZTVN5spark12NetworkClassE>:
	...
   d6bc4:	000d4f3d 000d4f47 000d4f51 000d4f5b     =O..GO..QO..[O..
   d6bd4:	000d4f65 000d4f71 000d4f7d 000d4f89     eO..qO..}O...O..
   d6be4:	000d4f91 000d4f9b 000d4fa5              .O...O...O..

000d6bf0 <_ZTVN5spark9WiFiClassE>:
	...
   d6bf8:	000d50e3 000d50d9 000d50cf 000d5085     .P...P...P...P..
   d6c08:	000d50c3 000d50b7 000d50ab 000d50a3     .P...P...P...P..
   d6c18:	000d5099 000d508f 000d4fa5              .P...P...O..

000d6c24 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6c2c:	000d5189 000d518f 000d5677 000d519b     .Q...Q..wV...Q..
   d6c3c:	000d518b                                .Q..

000d6c40 <_ZTV9TCPClient>:
	...
   d6c48:	000d40cd 000d4101 000d5101 000d511b     .@...A...Q...Q..
   d6c58:	000d551d 000d535f 000d5331 000d5145     .U.._S..1S..EQ..
   d6c68:	000d53f5 000d51a1 000d5393 000d54ef     .S...Q...S...T..
   d6c78:	000d5147 000d517f 000d512d 000d5291     GQ...Q..-Q...R..
   d6c88:	000d5311 69726977 7200676e 20766365     .S..wiring.recv 
   d6c98:	6f727265 203d2072 00006425              error = %d..

000d6ca4 <_ZTVN5spark9MeshClassE>:
	...
   d6cac:	000d56ed 000d56e3 000d56d9 000d56cf     .V...V...V...V..
   d6cbc:	000d56c3 000d56b7 000d56ab 000d56a3     .V...V...V...V..
   d6ccc:	000d5699 000d568f 000d4fa5              .V...V...O..

000d6cd8 <_ZTV8SPIClass>:
	...
   d6ce0:	000d57e5 000d57e7                       .W...W..

000d6ce8 <_ZTV7TwoWire>:
	...
   d6cf0:	000d5823 000d586d 000d5845 000d5825     #X..mX..EX..%X..
   d6d00:	000d584d 000d5855 000d585d 000d5865     MX..UX..]X..eX..

000d6d10 <_ZTV9USBSerial>:
	...
   d6d18:	000d58a9 000d58ed 000d58c7 000d5bd9     .X...X...X...[..
   d6d28:	000d58c1 000d58ab 000d58b3 000d58e7     .X...X...X...X..
   d6d38:	000d58bb 000d58a5                       .X...X..

000d6d40 <_ZTV9IPAddress>:
	...
   d6d48:	000d599f 000d5991 000d5993 2b25005a     .Y...Y...Y..Z.%+
   d6d58:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d6d68:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d6d78:	656d6974 006e6c00 63006e66 0065646f     time.ln.fn.code.
   d6d88:	61746564 0d006c69 3025000a 20753031     detail....%010u 
   d6d98:	00205d00 203a2928 005b2000 65646f63     .] .(): . [.code
   d6da8:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d6db8:	61620020 53006475 61697265 6553006c      .baud.Serial.Se
   d6dc8:	6c616972 79740031 70006570 6d617261     rial1.type.param
   d6dd8:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
   d6de8:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
   d6df8:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
   d6e08:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
   d6e18:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d6e28:	72656c64 70706100 6e6f6e00 72740065     dler.app.none.tr
   d6e38:	00656361 6f666e69 72617700 6170006e     ace.info.warn.pa
   d6e48:	0063696e 006c6c61                       nic.all.

000d6e50 <_ZTV11USARTSerial>:
	...
   d6e58:	000d5d3d 000d5d61 000d5d6d 000d5bd9     =]..a]..m]...[..
   d6e68:	000d5d49 000d5d55 000d5d4f 000d5d5b     I]..U]..O]..[]..
   d6e78:	000d5d3f 000d5d43                       ?]..C]..

000d6e80 <_ZTVN5spark13EthernetClassE>:
	...
   d6e88:	000d5e87 000d5e7d 000d5e73 000d5e69     .^..}^..s^..i^..
   d6e98:	000d5e5d 000d5e51 000d5e45 000d5e3d     ]^..Q^..E^..=^..
   d6ea8:	000d5e33 000d5e29 000d4fa5              3^..)^...O..

000d6eb4 <_ctype_>:
   d6eb4:	20202000 20202020 28282020 20282828     .         ((((( 
   d6ec4:	20202020 20202020 20202020 20202020                     
   d6ed4:	10108820 10101010 10101010 10101010      ...............
   d6ee4:	04040410 04040404 10040404 10101010     ................
   d6ef4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6f04:	01010101 01010101 01010101 10101010     ................
   d6f14:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6f24:	02020202 02020202 02020202 10101010     ................
   d6f34:	00000020 00000000 00000000 00000000      ...............
	...

000d6fb8 <__sf_fake_stdin>:
	...

000d6fd8 <__sf_fake_stdout>:
	...

000d6ff8 <__sf_fake_stderr>:
	...
   d7018:	00000043                                         C.

000d701a <link_const_variable_data_end>:
	...

000d701c <link_constructors_location>:
   d701c:	000d432d 	.word	0x000d432d
   d7020:	000d495f 	.word	0x000d495f
   d7024:	000d4aa1 	.word	0x000d4aa1
   d7028:	000d5071 	.word	0x000d5071
   d702c:	000d50ed 	.word	0x000d50ed
   d7030:	000d5799 	.word	0x000d5799
   d7034:	000d5b99 	.word	0x000d5b99
   d7038:	000d5bb5 	.word	0x000d5bb5
   d703c:	000d5bc9 	.word	0x000d5bc9
   d7040:	000d5e11 	.word	0x000d5e11
   d7044:	000d5e91 	.word	0x000d5e91
   d7048:	000d5ee5 	.word	0x000d5ee5
   d704c:	000d6011 	.word	0x000d6011
   d7050:	000d6095 	.word	0x000d6095
   d7054:	000d6159 	.word	0x000d6159
   d7058:	000d621d 	.word	0x000d621d

000d705c <link_constructors_end>:
   d705c:	00000000 	.word	0x00000000
