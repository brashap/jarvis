
c:/Users/IoTPa/Documents/jarvis/PM25/target/1.5.0/argon/PM25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000071a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000db1c0  000db1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000db1c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000518  2003ddbc  000db1cc  0001ddbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000051c  2003e2d8  2003e2d8  0002e2d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000db6e4  000db6e4  0002b6e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000db70c  000db70c  0002b70c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00129efb  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018435  00000000  00000000  0015560b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00028900  00000000  00000000  0016da40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002d88  00000000  00000000  00196340  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005468  00000000  00000000  001990c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004364d  00000000  00000000  0019e530  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003ef91  00000000  00000000  001e1b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010e703  00000000  00000000  00220b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000eb90  00000000  00000000  0032f214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fa07 	bl	da444 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fa0c 	bl	da45a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddbc 	.word	0x2003ddbc
   d404c:	000db1cc 	.word	0x000db1cc
   d4050:	2003e2d4 	.word	0x2003e2d4
   d4054:	2003e2d8 	.word	0x2003e2d8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f8eb 	bl	d7238 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db1b4 	.word	0x000db1b4
   d4084:	000db158 	.word	0x000db158

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9c8 	b.w	d441c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fac3 	bl	d4618 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b891 	b.w	d71bc <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bd15 	b.w	d6ac8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bd1b 	b.w	d6ad8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bd19 	b.w	d6ad8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fc66 	bl	d6980 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6751 	.word	0x000d6751

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f000 fbb4 	bl	d4844 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000da520 	.word	0x000da520

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 f83d 	bl	d8170 <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}

000d40fa <_Z12print_resultPKct>:
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);  // the -1 means there is no reset pin
#define SSD1306_128_64     // 128x64 pixel display


HM330XErrorCode print_result(const char* str, uint16_t value) {
   d40fa:	b538      	push	{r3, r4, r5, lr}
   d40fc:	460d      	mov	r5, r1
    if (NULL == str) {
   d40fe:	4604      	mov	r4, r0
   d4100:	b180      	cbz	r0, d4124 <_Z12print_resultPKct+0x2a>
        return ERROR_PARAM;
    }
    SERIAL_OUTPUT.print(str);
   d4102:	f003 fc63 	bl	d79cc <_Z16_fetch_usbserialv>
   d4106:	4621      	mov	r1, r4
   d4108:	f002 feb0 	bl	d6e6c <_ZN5Print5printEPKc>
    SERIAL_OUTPUT.println(value);
   d410c:	f003 fc5e 	bl	d79cc <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4110:	220a      	movs	r2, #10
   d4112:	4604      	mov	r4, r0
   d4114:	4629      	mov	r1, r5
   d4116:	f002 fec8 	bl	d6eaa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d411a:	4620      	mov	r0, r4
   d411c:	f002 fead 	bl	d6e7a <_ZN5Print7printlnEv>
    return NO_ERROR1;
   d4120:	2000      	movs	r0, #0
   d4122:	bd38      	pop	{r3, r4, r5, pc}
#define SSD1306_128_64     // 128x64 pixel display


HM330XErrorCode print_result(const char* str, uint16_t value) {
    if (NULL == str) {
        return ERROR_PARAM;
   d4124:	f04f 30ff 	mov.w	r0, #4294967295
    }
    SERIAL_OUTPUT.print(str);
    SERIAL_OUTPUT.println(value);
    return NO_ERROR1;
}
   d4128:	bd38      	pop	{r3, r4, r5, pc}
	...

000d412c <_Z12parse_resultPh>:

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
   d412c:	b570      	push	{r4, r5, r6, lr}
    uint16_t value = 0;
    if (NULL == data) {
   d412e:	4605      	mov	r5, r0
   d4130:	b178      	cbz	r0, d4152 <_Z12parse_resultPh+0x26>
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
   d4132:	4e09      	ldr	r6, [pc, #36]	; (d4158 <_Z12parse_resultPh+0x2c>)
   d4134:	2400      	movs	r4, #0
   d4136:	192b      	adds	r3, r5, r4
   d4138:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
   d413c:	7899      	ldrb	r1, [r3, #2]
   d413e:	78db      	ldrb	r3, [r3, #3]
   d4140:	3402      	adds	r4, #2
   d4142:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d4146:	f7ff ffd8 	bl	d40fa <_Z12print_resultPKct>
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
   d414a:	2c0e      	cmp	r4, #14
   d414c:	d1f3      	bne.n	d4136 <_Z12parse_resultPh+0xa>
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);

    }

    return NO_ERROR1;
   d414e:	2000      	movs	r0, #0
   d4150:	bd70      	pop	{r4, r5, r6, pc}

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
   d4152:	f04f 30ff 	mov.w	r0, #4294967295
        print_result(str[i - 1], value);

    }

    return NO_ERROR1;
}
   d4156:	bd70      	pop	{r4, r5, r6, pc}
   d4158:	2003ddbc 	.word	0x2003ddbc

000d415c <_Z18parse_result_valuePh>:

HM330XErrorCode parse_result_value(uint8_t* data) {
   d415c:	b538      	push	{r3, r4, r5, lr}
    if (NULL == data) {
   d415e:	4605      	mov	r5, r0
   d4160:	b3a0      	cbz	r0, d41cc <_Z18parse_result_valuePh+0x70>
   d4162:	2400      	movs	r4, #0
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
        SERIAL_OUTPUT.print(data[i], HEX);
   d4164:	f003 fc32 	bl	d79cc <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4168:	2210      	movs	r2, #16
   d416a:	5d29      	ldrb	r1, [r5, r4]
   d416c:	f002 fe9d 	bl	d6eaa <_ZN5Print11printNumberEmh>
        SERIAL_OUTPUT.print("  ");
   d4170:	f003 fc2c 	bl	d79cc <_Z16_fetch_usbserialv>
   d4174:	4917      	ldr	r1, [pc, #92]	; (d41d4 <_Z18parse_result_valuePh+0x78>)
   d4176:	f002 fe79 	bl	d6e6c <_ZN5Print5printEPKc>
        if ((0 == (i) % 5) || (0 == i)) {
   d417a:	2305      	movs	r3, #5
   d417c:	fb94 f3f3 	sdiv	r3, r4, r3
   d4180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4184:	429c      	cmp	r4, r3
   d4186:	d000      	beq.n	d418a <_Z18parse_result_valuePh+0x2e>
   d4188:	b924      	cbnz	r4, d4194 <_Z18parse_result_valuePh+0x38>
            SERIAL_OUTPUT.println("");
   d418a:	f003 fc1f 	bl	d79cc <_Z16_fetch_usbserialv>
   d418e:	4912      	ldr	r1, [pc, #72]	; (d41d8 <_Z18parse_result_valuePh+0x7c>)
   d4190:	f002 fe7f 	bl	d6e92 <_ZN5Print7printlnEPKc>

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
   d4194:	3401      	adds	r4, #1
   d4196:	2c1c      	cmp	r4, #28
   d4198:	d1e4      	bne.n	d4164 <_Z18parse_result_valuePh+0x8>
   d419a:	1e6a      	subs	r2, r5, #1
   d419c:	f105 011b 	add.w	r1, r5, #27
   d41a0:	2300      	movs	r3, #0
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
        sum += data[i];
   d41a2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d41a6:	4403      	add	r3, r0
        if ((0 == (i) % 5) || (0 == i)) {
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d41a8:	428a      	cmp	r2, r1
        sum += data[i];
   d41aa:	b2db      	uxtb	r3, r3
        if ((0 == (i) % 5) || (0 == i)) {
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d41ac:	d1f9      	bne.n	d41a2 <_Z18parse_result_valuePh+0x46>
        sum += data[i];
    }
    if (sum != data[28]) {
   d41ae:	7f2a      	ldrb	r2, [r5, #28]
   d41b0:	429a      	cmp	r2, r3
   d41b2:	d004      	beq.n	d41be <_Z18parse_result_valuePh+0x62>
        SERIAL_OUTPUT.println("wrong checkSum!!!!");
   d41b4:	f003 fc0a 	bl	d79cc <_Z16_fetch_usbserialv>
   d41b8:	4908      	ldr	r1, [pc, #32]	; (d41dc <_Z18parse_result_valuePh+0x80>)
   d41ba:	f002 fe6a 	bl	d6e92 <_ZN5Print7printlnEPKc>
    }
    SERIAL_OUTPUT.println("");
   d41be:	f003 fc05 	bl	d79cc <_Z16_fetch_usbserialv>
   d41c2:	4905      	ldr	r1, [pc, #20]	; (d41d8 <_Z18parse_result_valuePh+0x7c>)
   d41c4:	f002 fe65 	bl	d6e92 <_ZN5Print7printlnEPKc>
    return NO_ERROR1;
   d41c8:	2000      	movs	r0, #0
   d41ca:	bd38      	pop	{r3, r4, r5, pc}
    return NO_ERROR1;
}

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
   d41cc:	f04f 30ff 	mov.w	r0, #4294967295
    if (sum != data[28]) {
        SERIAL_OUTPUT.println("wrong checkSum!!!!");
    }
    SERIAL_OUTPUT.println("");
    return NO_ERROR1;
}
   d41d0:	bd38      	pop	{r3, r4, r5, pc}
   d41d2:	bf00      	nop
   d41d4:	000da528 	.word	0x000da528
   d41d8:	000daf23 	.word	0x000daf23
   d41dc:	000da52b 	.word	0x000da52b

000d41e0 <_Z11printValuesv>:
  }
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d41e0:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d41e2:	f003 fbf3 	bl	d79cc <_Z16_fetch_usbserialv>
   d41e6:	492d      	ldr	r1, [pc, #180]	; (d429c <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d41e8:	4c2d      	ldr	r4, [pc, #180]	; (d42a0 <_Z11printValuesv+0xc0>)
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d41ea:	f002 fe3f 	bl	d6e6c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d41ee:	f003 fbed 	bl	d79cc <_Z16_fetch_usbserialv>
   d41f2:	4605      	mov	r5, r0
   d41f4:	4620      	mov	r0, r4
   d41f6:	f001 fc3d 	bl	d5a74 <_ZN15Adafruit_BME68015readTemperatureEv>
   d41fa:	2102      	movs	r1, #2
   d41fc:	4628      	mov	r0, r5
   d41fe:	f002 ff33 	bl	d7068 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d4202:	f003 fbe3 	bl	d79cc <_Z16_fetch_usbserialv>
   d4206:	4927      	ldr	r1, [pc, #156]	; (d42a4 <_Z11printValuesv+0xc4>)
   d4208:	f002 fe43 	bl	d6e92 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d420c:	f003 fbde 	bl	d79cc <_Z16_fetch_usbserialv>
   d4210:	4925      	ldr	r1, [pc, #148]	; (d42a8 <_Z11printValuesv+0xc8>)
   d4212:	f002 fe2b 	bl	d6e6c <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d4216:	f003 fbd9 	bl	d79cc <_Z16_fetch_usbserialv>
   d421a:	4605      	mov	r5, r0
   d421c:	4620      	mov	r0, r4
   d421e:	f001 fc30 	bl	d5a82 <_ZN15Adafruit_BME68012readPressureEv>
   d4222:	eddf 7a22 	vldr	s15, [pc, #136]	; d42ac <_Z11printValuesv+0xcc>
   d4226:	2102      	movs	r1, #2
   d4228:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d422c:	4628      	mov	r0, r5
   d422e:	f002 ff1b 	bl	d7068 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d4232:	f003 fbcb 	bl	d79cc <_Z16_fetch_usbserialv>
   d4236:	491e      	ldr	r1, [pc, #120]	; (d42b0 <_Z11printValuesv+0xd0>)
   d4238:	f002 fe2b 	bl	d6e92 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d423c:	f003 fbc6 	bl	d79cc <_Z16_fetch_usbserialv>
   d4240:	491c      	ldr	r1, [pc, #112]	; (d42b4 <_Z11printValuesv+0xd4>)
   d4242:	f002 fe13 	bl	d6e6c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d4246:	f003 fbc1 	bl	d79cc <_Z16_fetch_usbserialv>
   d424a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d42b8 <_Z11printValuesv+0xd8>
   d424e:	4605      	mov	r5, r0
   d4250:	4620      	mov	r0, r4
   d4252:	f001 fc1d 	bl	d5a90 <_ZN15Adafruit_BME68012readAltitudeEf>
   d4256:	2102      	movs	r1, #2
   d4258:	4628      	mov	r0, r5
   d425a:	f002 ff05 	bl	d7068 <_ZN5Print5printEfi>
    Serial.println(" m");
   d425e:	f003 fbb5 	bl	d79cc <_Z16_fetch_usbserialv>
   d4262:	4916      	ldr	r1, [pc, #88]	; (d42bc <_Z11printValuesv+0xdc>)
   d4264:	f002 fe15 	bl	d6e92 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d4268:	f003 fbb0 	bl	d79cc <_Z16_fetch_usbserialv>
   d426c:	4914      	ldr	r1, [pc, #80]	; (d42c0 <_Z11printValuesv+0xe0>)
   d426e:	f002 fdfd 	bl	d6e6c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d4272:	f003 fbab 	bl	d79cc <_Z16_fetch_usbserialv>
   d4276:	4605      	mov	r5, r0
   d4278:	4620      	mov	r0, r4
   d427a:	f001 fc41 	bl	d5b00 <_ZN15Adafruit_BME68012readHumidityEv>
   d427e:	2102      	movs	r1, #2
   d4280:	4628      	mov	r0, r5
   d4282:	f002 fef1 	bl	d7068 <_ZN5Print5printEfi>
    Serial.println(" %");
   d4286:	f003 fba1 	bl	d79cc <_Z16_fetch_usbserialv>
   d428a:	490e      	ldr	r1, [pc, #56]	; (d42c4 <_Z11printValuesv+0xe4>)
   d428c:	f002 fe01 	bl	d6e92 <_ZN5Print7printlnEPKc>

    Serial.println();
   d4290:	f003 fb9c 	bl	d79cc <_Z16_fetch_usbserialv>
}
   d4294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4298:	f002 bdef 	b.w	d6e7a <_ZN5Print7printlnEv>
   d429c:	000da53e 	.word	0x000da53e
   d42a0:	2003e2ec 	.word	0x2003e2ec
   d42a4:	000da54d 	.word	0x000da54d
   d42a8:	000da551 	.word	0x000da551
   d42ac:	42c80000 	.word	0x42c80000
   d42b0:	000da55d 	.word	0x000da55d
   d42b4:	000da562 	.word	0x000da562
   d42b8:	447d5000 	.word	0x447d5000
   d42bc:	000da576 	.word	0x000da576
   d42c0:	000da579 	.word	0x000da579
   d42c4:	000da585 	.word	0x000da585

000d42c8 <_Z9printDatav>:
}

void printData() {
   d42c8:	b513      	push	{r0, r1, r4, lr}

 

    display.clearDisplay();
   d42ca:	4c2c      	ldr	r4, [pc, #176]	; (d437c <_Z9printDatav+0xb4>)
   d42cc:	4620      	mov	r0, r4
   d42ce:	f001 ffdb 	bl	d6288 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d42d2:	4620      	mov	r0, r4
   d42d4:	f001 ff5a 	bl	d618c <_ZN16Adafruit_SSD13067displayEv>

     // display a pixel in each corner of the screen
    display.drawPixel(0, 0, WHITE);
   d42d8:	2200      	movs	r2, #0
   d42da:	4611      	mov	r1, r2
   d42dc:	4620      	mov	r0, r4
   d42de:	2301      	movs	r3, #1
   d42e0:	f001 fdda 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
    display.drawPixel(127, 0, WHITE);
   d42e4:	4620      	mov	r0, r4
   d42e6:	2301      	movs	r3, #1
   d42e8:	2200      	movs	r2, #0
   d42ea:	217f      	movs	r1, #127	; 0x7f
   d42ec:	f001 fdd4 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
    display.drawPixel(0, 63, WHITE);
   d42f0:	4620      	mov	r0, r4
   d42f2:	2301      	movs	r3, #1
   d42f4:	223f      	movs	r2, #63	; 0x3f
   d42f6:	2100      	movs	r1, #0
   d42f8:	f001 fdce 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
    display.drawPixel(127, 63, WHITE);
   d42fc:	2301      	movs	r3, #1
   d42fe:	4620      	mov	r0, r4
   d4300:	223f      	movs	r2, #63	; 0x3f
   d4302:	217f      	movs	r1, #127	; 0x7f
   d4304:	f001 fdc8 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>

    display.setCursor(0,5);
   d4308:	4620      	mov	r0, r4
   d430a:	2205      	movs	r2, #5
   d430c:	2100      	movs	r1, #0
   d430e:	f002 f97a 	bl	d6606 <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("Temperature: %0.2f F\n",temp);
   d4312:	4b1b      	ldr	r3, [pc, #108]	; (d4380 <_Z9printDatav+0xb8>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4314:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4318:	2100      	movs	r1, #0
   d431a:	e9cd 2300 	strd	r2, r3, [sp]
   d431e:	4620      	mov	r0, r4
   d4320:	4a18      	ldr	r2, [pc, #96]	; (d4384 <_Z9printDatav+0xbc>)
   d4322:	f002 feb0 	bl	d7086 <_ZN5Print11printf_implEbPKcz>
    display.printf("Pressure: %0.2f inHg\n",pres);
   d4326:	4b18      	ldr	r3, [pc, #96]	; (d4388 <_Z9printDatav+0xc0>)
   d4328:	e9d3 2300 	ldrd	r2, r3, [r3]
   d432c:	2100      	movs	r1, #0
   d432e:	e9cd 2300 	strd	r2, r3, [sp]
   d4332:	4620      	mov	r0, r4
   d4334:	4a15      	ldr	r2, [pc, #84]	; (d438c <_Z9printDatav+0xc4>)
   d4336:	f002 fea6 	bl	d7086 <_ZN5Print11printf_implEbPKcz>
    display.printf("Humidity: %0.2f rH\n", hum);
   d433a:	4b15      	ldr	r3, [pc, #84]	; (d4390 <_Z9printDatav+0xc8>)
   d433c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4340:	2100      	movs	r1, #0
   d4342:	e9cd 2300 	strd	r2, r3, [sp]
   d4346:	4620      	mov	r0, r4
   d4348:	4a12      	ldr	r2, [pc, #72]	; (d4394 <_Z9printDatav+0xcc>)
   d434a:	f002 fe9c 	bl	d7086 <_ZN5Print11printf_implEbPKcz>
    display.printf("Gas Conc: %0.2f\n",gas);
   d434e:	4b12      	ldr	r3, [pc, #72]	; (d4398 <_Z9printDatav+0xd0>)
   d4350:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4354:	2100      	movs	r1, #0
   d4356:	e9cd 2300 	strd	r2, r3, [sp]
   d435a:	4620      	mov	r0, r4
   d435c:	4a0f      	ldr	r2, [pc, #60]	; (d439c <_Z9printDatav+0xd4>)
   d435e:	f002 fe92 	bl	d7086 <_ZN5Print11printf_implEbPKcz>
   d4362:	4b0f      	ldr	r3, [pc, #60]	; (d43a0 <_Z9printDatav+0xd8>)
   d4364:	4a0f      	ldr	r2, [pc, #60]	; (d43a4 <_Z9printDatav+0xdc>)
   d4366:	681b      	ldr	r3, [r3, #0]
   d4368:	2100      	movs	r1, #0
   d436a:	4620      	mov	r0, r4
   d436c:	f002 fe8b 	bl	d7086 <_ZN5Print11printf_implEbPKcz>
    display.printf("PM25: %i \n", PM25);

    display.display();
   d4370:	4620      	mov	r0, r4
}
   d4372:	b002      	add	sp, #8
   d4374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.printf("Pressure: %0.2f inHg\n",pres);
    display.printf("Humidity: %0.2f rH\n", hum);
    display.printf("Gas Conc: %0.2f\n",gas);
    display.printf("PM25: %i \n", PM25);

    display.display();
   d4378:	f001 bf08 	b.w	d618c <_ZN16Adafruit_SSD13067displayEv>
   d437c:	2003e364 	.word	0x2003e364
   d4380:	2003e388 	.word	0x2003e388
   d4384:	000da588 	.word	0x000da588
   d4388:	2003e3c0 	.word	0x2003e3c0
   d438c:	000da59e 	.word	0x000da59e
   d4390:	2003e3b8 	.word	0x2003e3b8
   d4394:	000da5b4 	.word	0x000da5b4
   d4398:	2003e2e0 	.word	0x2003e2e0
   d439c:	000da5c8 	.word	0x000da5c8
   d43a0:	2003e390 	.word	0x2003e390
   d43a4:	000da5d9 	.word	0x000da5d9

000d43a8 <_Z10printhellov>:
}

void printhello() {
   d43a8:	b510      	push	{r4, lr}
  display.clearDisplay();
   d43aa:	4c1a      	ldr	r4, [pc, #104]	; (d4414 <_Z10printhellov+0x6c>)
   d43ac:	4620      	mov	r0, r4
   d43ae:	f001 ff6b 	bl	d6288 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d43b2:	4620      	mov	r0, r4
   d43b4:	f001 feea 	bl	d618c <_ZN16Adafruit_SSD13067displayEv>

  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d43b8:	2200      	movs	r2, #0
   d43ba:	4611      	mov	r1, r2
   d43bc:	4620      	mov	r0, r4
   d43be:	2301      	movs	r3, #1
   d43c0:	f001 fd6a 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d43c4:	4620      	mov	r0, r4
   d43c6:	2301      	movs	r3, #1
   d43c8:	2200      	movs	r2, #0
   d43ca:	217f      	movs	r1, #127	; 0x7f
   d43cc:	f001 fd64 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d43d0:	4620      	mov	r0, r4
   d43d2:	2301      	movs	r3, #1
   d43d4:	223f      	movs	r2, #63	; 0x3f
   d43d6:	2100      	movs	r1, #0
   d43d8:	f001 fd5e 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d43dc:	2301      	movs	r3, #1
   d43de:	223f      	movs	r2, #63	; 0x3f
   d43e0:	4620      	mov	r0, r4
   d43e2:	217f      	movs	r1, #127	; 0x7f
   d43e4:	f001 fd58 	bl	d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>

  // display a line of text
  display.setTextSize(1);
   d43e8:	4620      	mov	r0, r4
   d43ea:	2101      	movs	r1, #1
   d43ec:	f002 f90e 	bl	d660c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d43f0:	4620      	mov	r0, r4
   d43f2:	2101      	movs	r1, #1
   d43f4:	f002 f90f 	bl	d6616 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d43f8:	4620      	mov	r0, r4
   d43fa:	221e      	movs	r2, #30
   d43fc:	211b      	movs	r1, #27
   d43fe:	f002 f902 	bl	d6606 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d4402:	4620      	mov	r0, r4
   d4404:	4904      	ldr	r1, [pc, #16]	; (d4418 <_Z10printhellov+0x70>)
   d4406:	f002 fd31 	bl	d6e6c <_ZN5Print5printEPKc>

  // update display with all of the above graphics
  display.display();
   d440a:	4620      	mov	r0, r4
   d440c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d4410:	f001 bebc 	b.w	d618c <_ZN16Adafruit_SSD13067displayEv>
   d4414:	2003e364 	.word	0x2003e364
   d4418:	000da5e4 	.word	0x000da5e4

000d441c <setup>:
double gas;
unsigned int status;

int delayStart;

void setup() {
   d441c:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d441e:	f003 fad5 	bl	d79cc <_Z16_fetch_usbserialv>
   d4422:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4426:	f003 fabf 	bl	d79a8 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d442a:	f003 facf 	bl	d79cc <_Z16_fetch_usbserialv>
   d442e:	f003 fac2 	bl	d79b6 <_ZN9USBSerialcvbEv>
   d4432:	2800      	cmp	r0, #0
   d4434:	d0f9      	beq.n	d442a <setup+0xe>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d4436:	f003 fac9 	bl	d79cc <_Z16_fetch_usbserialv>
   d443a:	4922      	ldr	r1, [pc, #136]	; (d44c4 <setup+0xa8>)
   d443c:	f002 fd33 	bl	d6ea6 <_ZN5Print7printlnEPK19__FlashStringHelper>

    SERIAL_OUTPUT.println("Serial start");
   d4440:	f003 fac4 	bl	d79cc <_Z16_fetch_usbserialv>
   d4444:	4920      	ldr	r1, [pc, #128]	; (d44c8 <setup+0xac>)
   d4446:	f002 fd24 	bl	d6e92 <_ZN5Print7printlnEPKc>
    if (sensor.init()) {
   d444a:	4820      	ldr	r0, [pc, #128]	; (d44cc <setup+0xb0>)
   d444c:	f000 fb6f 	bl	d4b2e <_ZN6HM330X4initEv>
   d4450:	b128      	cbz	r0, d445e <setup+0x42>
        SERIAL_OUTPUT.println("HM330X init failed!!!");
   d4452:	f003 fabb 	bl	d79cc <_Z16_fetch_usbserialv>
   d4456:	491e      	ldr	r1, [pc, #120]	; (d44d0 <setup+0xb4>)
   d4458:	f002 fd1b 	bl	d6e92 <_ZN5Print7printlnEPKc>
   d445c:	e7fe      	b.n	d445c <setup+0x40>
        while (1);
    }
    
    status = bme.begin();
   d445e:	2177      	movs	r1, #119	; 0x77
   d4460:	481c      	ldr	r0, [pc, #112]	; (d44d4 <setup+0xb8>)
   d4462:	f001 fa13 	bl	d588c <_ZN15Adafruit_BME6805beginEh>
   d4466:	4b1c      	ldr	r3, [pc, #112]	; (d44d8 <setup+0xbc>)
   d4468:	6018      	str	r0, [r3, #0]
    if (!status) {
   d446a:	b928      	cbnz	r0, d4478 <setup+0x5c>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
   d446c:	f003 faae 	bl	d79cc <_Z16_fetch_usbserialv>
   d4470:	491a      	ldr	r1, [pc, #104]	; (d44dc <setup+0xc0>)
   d4472:	f002 fd0e 	bl	d6e92 <_ZN5Print7printlnEPKc>
   d4476:	e7fe      	b.n	d4476 <setup+0x5a>
      while (1);
    }

    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
   d4478:	2104      	movs	r1, #4
   d447a:	4816      	ldr	r0, [pc, #88]	; (d44d4 <setup+0xb8>)
   d447c:	f001 fb60 	bl	d5b40 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
   d4480:	2102      	movs	r1, #2
   d4482:	4814      	ldr	r0, [pc, #80]	; (d44d4 <setup+0xb8>)
   d4484:	f001 fb69 	bl	d5b5a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
   d4488:	2103      	movs	r1, #3
   d448a:	4812      	ldr	r0, [pc, #72]	; (d44d4 <setup+0xb8>)
   d448c:	f001 fb72 	bl	d5b74 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   d4490:	2102      	movs	r1, #2
   d4492:	4810      	ldr	r0, [pc, #64]	; (d44d4 <setup+0xb8>)
   d4494:	f001 fb7b 	bl	d5b8e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
   d4498:	2296      	movs	r2, #150	; 0x96
   d449a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d449e:	480d      	ldr	r0, [pc, #52]	; (d44d4 <setup+0xb8>)
   d44a0:	f001 fb40 	bl	d5b24 <_ZN15Adafruit_BME68012setGasHeaterEtt>

    // initialize and clear display
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d44a4:	223c      	movs	r2, #60	; 0x3c
   d44a6:	2102      	movs	r1, #2
   d44a8:	480d      	ldr	r0, [pc, #52]	; (d44e0 <setup+0xc4>)
   d44aa:	f001 fd9d 	bl	d5fe8 <_ZN16Adafruit_SSD13065beginEhh>
    display.clearDisplay();
   d44ae:	480c      	ldr	r0, [pc, #48]	; (d44e0 <setup+0xc4>)
   d44b0:	f001 feea 	bl	d6288 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d44b4:	480a      	ldr	r0, [pc, #40]	; (d44e0 <setup+0xc4>)
   d44b6:	f001 fe69 	bl	d618c <_ZN16Adafruit_SSD13067displayEv>

  printhello();
}
   d44ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // initialize and clear display
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
    display.clearDisplay();
    display.display();

  printhello();
   d44be:	f7ff bf73 	b.w	d43a8 <_Z10printhellov>
   d44c2:	bf00      	nop
   d44c4:	000da5f2 	.word	0x000da5f2
   d44c8:	000da5fe 	.word	0x000da5fe
   d44cc:	2003e2e8 	.word	0x2003e2e8
   d44d0:	000da60b 	.word	0x000da60b
   d44d4:	2003e2ec 	.word	0x2003e2ec
   d44d8:	2003e3c8 	.word	0x2003e3c8
   d44dc:	000da621 	.word	0x000da621
   d44e0:	2003e364 	.word	0x2003e364

000d44e4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d44e4:	b538      	push	{r3, r4, r5, lr}
   d44e6:	4604      	mov	r4, r0
   d44e8:	ed2d 8b02 	vpush	{d8}
   d44ec:	460d      	mov	r5, r1
   d44ee:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d44f2:	f000 faaf 	bl	d4a54 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d44f6:	4629      	mov	r1, r5
   d44f8:	4620      	mov	r0, r4
   d44fa:	2201      	movs	r2, #1
   d44fc:	f000 fa1e 	bl	d493c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4500:	4620      	mov	r0, r4
   d4502:	213a      	movs	r1, #58	; 0x3a
   d4504:	f000 f9ce 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4508:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d450c:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4510:	4620      	mov	r0, r4
	}
   d4512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4516:	f000 bac1 	b.w	d4a9c <_ZN10JsonWriter11insertValueEf>
	...

000d451c <_Z18createEventPayLoadffffi>:
createEventPayLoad(temp,pres,hum,gas,PM25);
printData();
delay(60000);    
}

void createEventPayLoad(float tempValue, float presValue, float humValue, float gasValue, int PM25Value) {
   d451c:	b510      	push	{r4, lr}
   d451e:	ed2d 8b04 	vpush	{d8-d9}
   d4522:	b0d2      	sub	sp, #328	; 0x148
   d4524:	4604      	mov	r4, r0
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4526:	f44f 7280 	mov.w	r2, #256	; 0x100
   d452a:	a912      	add	r1, sp, #72	; 0x48
   d452c:	a806      	add	r0, sp, #24
   d452e:	eeb0 9a60 	vmov.f32	s18, s1
   d4532:	eef0 8a41 	vmov.f32	s17, s2
   d4536:	eeb0 8a61 	vmov.f32	s16, s3
   d453a:	eef0 9a40 	vmov.f32	s19, s0
   d453e:	f000 f99f 	bl	d4880 <_ZN10JsonWriterC1EPcj>
   d4542:	4b2c      	ldr	r3, [pc, #176]	; (d45f4 <_Z18createEventPayLoadffffi+0xd8>)
   d4544:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4546:	227d      	movs	r2, #125	; 0x7d
   d4548:	217b      	movs	r1, #123	; 0x7b
   d454a:	a806      	add	r0, sp, #24
   d454c:	f000 fa8d 	bl	d4a6a <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Home_Temp", tempValue);
   d4550:	eeb0 0a69 	vmov.f32	s0, s19
   d4554:	4928      	ldr	r1, [pc, #160]	; (d45f8 <_Z18createEventPayLoadffffi+0xdc>)
   d4556:	a806      	add	r0, sp, #24
   d4558:	f7ff ffc4 	bl	d44e4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Pres", presValue);
   d455c:	eeb0 0a49 	vmov.f32	s0, s18
   d4560:	4926      	ldr	r1, [pc, #152]	; (d45fc <_Z18createEventPayLoadffffi+0xe0>)
   d4562:	a806      	add	r0, sp, #24
   d4564:	f7ff ffbe 	bl	d44e4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Humid", humValue);
   d4568:	eeb0 0a68 	vmov.f32	s0, s17
   d456c:	4924      	ldr	r1, [pc, #144]	; (d4600 <_Z18createEventPayLoadffffi+0xe4>)
   d456e:	a806      	add	r0, sp, #24
   d4570:	f7ff ffb8 	bl	d44e4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Home_Gas", gasValue);
   d4574:	eeb0 0a48 	vmov.f32	s0, s16
   d4578:	4922      	ldr	r1, [pc, #136]	; (d4604 <_Z18createEventPayLoadffffi+0xe8>)
   d457a:	a806      	add	r0, sp, #24
   d457c:	f7ff ffb2 	bl	d44e4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4580:	a806      	add	r0, sp, #24
   d4582:	f000 fa67 	bl	d4a54 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4586:	2201      	movs	r2, #1
   d4588:	491f      	ldr	r1, [pc, #124]	; (d4608 <_Z18createEventPayLoadffffi+0xec>)
   d458a:	a806      	add	r0, sp, #24
   d458c:	f000 f9d6 	bl	d493c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4590:	213a      	movs	r1, #58	; 0x3a
   d4592:	a806      	add	r0, sp, #24
   d4594:	f000 f986 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4598:	4622      	mov	r2, r4
   d459a:	491c      	ldr	r1, [pc, #112]	; (d460c <_Z18createEventPayLoadffffi+0xf0>)
   d459c:	a806      	add	r0, sp, #24
   d459e:	f000 f9c0 	bl	d4922 <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45a2:	a806      	add	r0, sp, #24
   d45a4:	f000 f98c 	bl	d48c0 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d45a8:	9b07      	ldr	r3, [sp, #28]
   d45aa:	9303      	str	r3, [sp, #12]
   d45ac:	4b18      	ldr	r3, [pc, #96]	; (d4610 <_Z18createEventPayLoadffffi+0xf4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d45ae:	9a03      	ldr	r2, [sp, #12]
   d45b0:	781b      	ldrb	r3, [r3, #0]
   d45b2:	f88d 3000 	strb.w	r3, [sp]
   d45b6:	4917      	ldr	r1, [pc, #92]	; (d4614 <_Z18createEventPayLoadffffi+0xf8>)
   d45b8:	233c      	movs	r3, #60	; 0x3c
   d45ba:	a804      	add	r0, sp, #16
   d45bc:	f002 ffaa 	bl	d7514 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d45c0:	9c05      	ldr	r4, [sp, #20]
   d45c2:	b17c      	cbz	r4, d45e4 <_Z18createEventPayLoadffffi+0xc8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d45c4:	6863      	ldr	r3, [r4, #4]
   d45c6:	3b01      	subs	r3, #1
   d45c8:	6063      	str	r3, [r4, #4]
   d45ca:	b95b      	cbnz	r3, d45e4 <_Z18createEventPayLoadffffi+0xc8>
        {
          _M_dispose();
   d45cc:	6823      	ldr	r3, [r4, #0]
   d45ce:	4620      	mov	r0, r4
   d45d0:	689b      	ldr	r3, [r3, #8]
   d45d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45d4:	68a3      	ldr	r3, [r4, #8]
   d45d6:	3b01      	subs	r3, #1
   d45d8:	60a3      	str	r3, [r4, #8]
   d45da:	b91b      	cbnz	r3, d45e4 <_Z18createEventPayLoadffffi+0xc8>
            _M_destroy();
   d45dc:	6823      	ldr	r3, [r4, #0]
   d45de:	4620      	mov	r0, r4
   d45e0:	68db      	ldr	r3, [r3, #12]
   d45e2:	4798      	blx	r3
printData();
delay(60000);    
}

void createEventPayLoad(float tempValue, float presValue, float humValue, float gasValue, int PM25Value) {
  JsonWriterStatic<256> jw;
   d45e4:	a806      	add	r0, sp, #24
   d45e6:	f7ff fd73 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Home_Humid", humValue);
    jw.insertKeyValue("Home_Gas", gasValue);
    jw.insertKeyValue("Home_PM25", PM25Value);
  }
  Particle.publish("bme-vals",jw.getBuffer(), PRIVATE);
}
   d45ea:	b052      	add	sp, #328	; 0x148
   d45ec:	ecbd 8b04 	vpop	{d8-d9}
   d45f0:	bd10      	pop	{r4, pc}
   d45f2:	bf00      	nop
   d45f4:	000da520 	.word	0x000da520
   d45f8:	000da655 	.word	0x000da655
   d45fc:	000da65f 	.word	0x000da65f
   d4600:	000da669 	.word	0x000da669
   d4604:	000da674 	.word	0x000da674
   d4608:	000da67d 	.word	0x000da67d
   d460c:	000da687 	.word	0x000da687
   d4610:	2003e2e9 	.word	0x2003e2e9
   d4614:	000da68a 	.word	0x000da68a

000d4618 <loop>:
    display.display();

  printhello();
}

void loop() {
   d4618:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
temp = (bme.readTemperature()*(9.0/5.0))+32;
   d461c:	4850      	ldr	r0, [pc, #320]	; (d4760 <loop+0x148>)
   d461e:	4c51      	ldr	r4, [pc, #324]	; (d4764 <loop+0x14c>)
pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4620:	4d51      	ldr	r5, [pc, #324]	; (d4768 <loop+0x150>)
hum = bme.readHumidity();
   d4622:	4e52      	ldr	r6, [pc, #328]	; (d476c <loop+0x154>)
gas = bme.readGas() / 1000.0;
   d4624:	4f52      	ldr	r7, [pc, #328]	; (d4770 <loop+0x158>)

  printhello();
}

void loop() {
temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4626:	f001 fa25 	bl	d5a74 <_ZN15Adafruit_BME68015readTemperatureEv>
   d462a:	ee10 0a10 	vmov	r0, s0
   d462e:	f005 f99b 	bl	d9968 <__aeabi_f2d>
   d4632:	a347      	add	r3, pc, #284	; (adr r3, d4750 <loop+0x138>)
   d4634:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4638:	f005 f9ea 	bl	d9a10 <__aeabi_dmul>
   d463c:	2200      	movs	r2, #0
   d463e:	4b4d      	ldr	r3, [pc, #308]	; (d4774 <loop+0x15c>)
   d4640:	f005 f834 	bl	d96ac <__adddf3>
   d4644:	e9c4 0100 	strd	r0, r1, [r4]
pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4648:	4845      	ldr	r0, [pc, #276]	; (d4760 <loop+0x148>)
   d464a:	f001 fa1a 	bl	d5a82 <_ZN15Adafruit_BME68012readPressureEv>
   d464e:	eddf 7a4a 	vldr	s15, [pc, #296]	; d4778 <loop+0x160>
   d4652:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4656:	46b8      	mov	r8, r7
   d4658:	ee17 0a10 	vmov	r0, s14
   d465c:	f005 f984 	bl	d9968 <__aeabi_f2d>
   d4660:	a33d      	add	r3, pc, #244	; (adr r3, d4758 <loop+0x140>)
   d4662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4666:	f005 f9d3 	bl	d9a10 <__aeabi_dmul>
   d466a:	2200      	movs	r2, #0
   d466c:	4b43      	ldr	r3, [pc, #268]	; (d477c <loop+0x164>)
   d466e:	f005 f81d 	bl	d96ac <__adddf3>
   d4672:	e9c5 0100 	strd	r0, r1, [r5]
hum = bme.readHumidity();
   d4676:	483a      	ldr	r0, [pc, #232]	; (d4760 <loop+0x148>)
   d4678:	f001 fa42 	bl	d5b00 <_ZN15Adafruit_BME68012readHumidityEv>
   d467c:	ee10 0a10 	vmov	r0, s0
   d4680:	f005 f972 	bl	d9968 <__aeabi_f2d>
   d4684:	e9c6 0100 	strd	r0, r1, [r6]
gas = bme.readGas() / 1000.0;
   d4688:	4835      	ldr	r0, [pc, #212]	; (d4760 <loop+0x148>)
   d468a:	f001 fa40 	bl	d5b0e <_ZN15Adafruit_BME6807readGasEv>
   d468e:	f005 f949 	bl	d9924 <__aeabi_ui2d>
   d4692:	2200      	movs	r2, #0
   d4694:	4b3a      	ldr	r3, [pc, #232]	; (d4780 <loop+0x168>)
   d4696:	f005 fae5 	bl	d9c64 <__aeabi_ddiv>
   d469a:	e9c7 0100 	strd	r0, r1, [r7]
printValues();
   d469e:	f7ff fd9f 	bl	d41e0 <_Z11printValuesv>

if (sensor.read_sensor_value(buf, 29)) {
   d46a2:	221d      	movs	r2, #29
   d46a4:	4937      	ldr	r1, [pc, #220]	; (d4784 <loop+0x16c>)
   d46a6:	4838      	ldr	r0, [pc, #224]	; (d4788 <loop+0x170>)
   d46a8:	f000 fa4c 	bl	d4b44 <_ZN6HM330X17read_sensor_valueEPhm>
   d46ac:	b120      	cbz	r0, d46b8 <loop+0xa0>
    Serial.println("HM330X read result failed!!!");
   d46ae:	f003 f98d 	bl	d79cc <_Z16_fetch_usbserialv>
   d46b2:	4936      	ldr	r1, [pc, #216]	; (d478c <loop+0x174>)
   d46b4:	f002 fbed 	bl	d6e92 <_ZN5Print7printlnEPKc>
    }
Serial.println("Starting Display");
parse_result_value(buf);
   d46b8:	4f32      	ldr	r7, [pc, #200]	; (d4784 <loop+0x16c>)
printValues();

if (sensor.read_sensor_value(buf, 29)) {
    Serial.println("HM330X read result failed!!!");
    }
Serial.println("Starting Display");
   d46ba:	f003 f987 	bl	d79cc <_Z16_fetch_usbserialv>
   d46be:	4934      	ldr	r1, [pc, #208]	; (d4790 <loop+0x178>)
   d46c0:	f002 fbe7 	bl	d6e92 <_ZN5Print7printlnEPKc>
parse_result_value(buf);
   d46c4:	4638      	mov	r0, r7
   d46c6:	f7ff fd49 	bl	d415c <_Z18parse_result_valuePh>
Serial.println("Printing Concentrations");
   d46ca:	f003 f97f 	bl	d79cc <_Z16_fetch_usbserialv>
   d46ce:	4931      	ldr	r1, [pc, #196]	; (d4794 <loop+0x17c>)
   d46d0:	f002 fbdf 	bl	d6e92 <_ZN5Print7printlnEPKc>
parse_result(buf);
   d46d4:	4638      	mov	r0, r7
   d46d6:	f7ff fd29 	bl	d412c <_Z12parse_resultPh>
Serial.println("PM2.5 Data");
   d46da:	f003 f977 	bl	d79cc <_Z16_fetch_usbserialv>
   d46de:	492e      	ldr	r1, [pc, #184]	; (d4798 <loop+0x180>)
   d46e0:	f002 fbd7 	bl	d6e92 <_ZN5Print7printlnEPKc>
PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d46e4:	7b7b      	ldrb	r3, [r7, #13]
   d46e6:	7b39      	ldrb	r1, [r7, #12]
   d46e8:	4f2c      	ldr	r7, [pc, #176]	; (d479c <loop+0x184>)
   d46ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
print_result(str[6 - 1], PM25);
   d46ee:	4b2c      	ldr	r3, [pc, #176]	; (d47a0 <loop+0x188>)
Serial.println("Starting Display");
parse_result_value(buf);
Serial.println("Printing Concentrations");
parse_result(buf);
Serial.println("PM2.5 Data");
PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d46f0:	6039      	str	r1, [r7, #0]
print_result(str[6 - 1], PM25);
   d46f2:	6958      	ldr	r0, [r3, #20]
   d46f4:	f7ff fd01 	bl	d40fa <_Z12print_resultPKct>
Serial.println("");
   d46f8:	f003 f968 	bl	d79cc <_Z16_fetch_usbserialv>
   d46fc:	4929      	ldr	r1, [pc, #164]	; (d47a4 <loop+0x18c>)
   d46fe:	f002 fbc8 	bl	d6e92 <_ZN5Print7printlnEPKc>

  
createEventPayLoad(temp,pres,hum,gas,PM25);
   d4702:	e9d8 0100 	ldrd	r0, r1, [r8]
   d4706:	f005 fc7b 	bl	da000 <__aeabi_d2f>
   d470a:	9003      	str	r0, [sp, #12]
   d470c:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4710:	f005 fc76 	bl	da000 <__aeabi_d2f>
   d4714:	9002      	str	r0, [sp, #8]
   d4716:	e9d5 0100 	ldrd	r0, r1, [r5]
   d471a:	f005 fc71 	bl	da000 <__aeabi_d2f>
   d471e:	9001      	str	r0, [sp, #4]
   d4720:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4724:	f005 fc6c 	bl	da000 <__aeabi_d2f>
   d4728:	eddd 1a03 	vldr	s3, [sp, #12]
   d472c:	ed9d 1a02 	vldr	s2, [sp, #8]
   d4730:	eddd 0a01 	vldr	s1, [sp, #4]
   d4734:	ee00 0a10 	vmov	s0, r0
   d4738:	6838      	ldr	r0, [r7, #0]
   d473a:	f7ff feef 	bl	d451c <_Z18createEventPayLoadffffi>
printData();
   d473e:	f7ff fdc3 	bl	d42c8 <_Z9printDatav>
delay(60000);    
   d4742:	f64e 2060 	movw	r0, #60000	; 0xea60
}
   d4746:	b004      	add	sp, #16
   d4748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
Serial.println("");

  
createEventPayLoad(temp,pres,hum,gas,PM25);
printData();
delay(60000);    
   d474c:	f002 bce8 	b.w	d7120 <delay>
   d4750:	cccccccd 	.word	0xcccccccd
   d4754:	3ffccccc 	.word	0x3ffccccc
   d4758:	c100e6b0 	.word	0xc100e6b0
   d475c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4760:	2003e2ec 	.word	0x2003e2ec
   d4764:	2003e388 	.word	0x2003e388
   d4768:	2003e3c0 	.word	0x2003e3c0
   d476c:	2003e3b8 	.word	0x2003e3b8
   d4770:	2003e2e0 	.word	0x2003e2e0
   d4774:	40400000 	.word	0x40400000
   d4778:	42c80000 	.word	0x42c80000
   d477c:	40140000 	.word	0x40140000
   d4780:	408f4000 	.word	0x408f4000
   d4784:	2003e394 	.word	0x2003e394
   d4788:	2003e2e8 	.word	0x2003e2e8
   d478c:	000da693 	.word	0x000da693
   d4790:	000da6b0 	.word	0x000da6b0
   d4794:	000da6c1 	.word	0x000da6c1
   d4798:	000da6d9 	.word	0x000da6d9
   d479c:	2003e390 	.word	0x2003e390
   d47a0:	2003ddbc 	.word	0x2003ddbc
   d47a4:	000daf23 	.word	0x000daf23

000d47a8 <_ZN16Adafruit_SSD1306D0Ev>:
   d47a8:	b510      	push	{r4, lr}
   d47aa:	2124      	movs	r1, #36	; 0x24
   d47ac:	4604      	mov	r4, r0
   d47ae:	f003 fcdf 	bl	d8170 <_ZdlPvj>
   d47b2:	4620      	mov	r0, r4
   d47b4:	bd10      	pop	{r4, pc}
	...

000d47b8 <_GLOBAL__sub_I_bme>:
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d47b8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d47ba:	4b0d      	ldr	r3, [pc, #52]	; (d47f0 <_GLOBAL__sub_I_bme+0x38>)
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

// Define OLED Display
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);  // the -1 means there is no reset pin
   d47bc:	4c0d      	ldr	r4, [pc, #52]	; (d47f4 <_GLOBAL__sub_I_bme+0x3c>)
   d47be:	2201      	movs	r2, #1
   d47c0:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d47c2:	f001 ff45 	bl	d6650 <HAL_Pin_Map>
#include <Adafruit_BME680.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define SEALEVELPRESSURE_HPA 1013.25
Adafruit_BME680 bme; // I2C
   d47c6:	f04f 31ff 	mov.w	r1, #4294967295
   d47ca:	480b      	ldr	r0, [pc, #44]	; (d47f8 <_GLOBAL__sub_I_bme+0x40>)
   d47cc:	f001 f848 	bl	d5860 <_ZN15Adafruit_BME680C1Ea>
    #define SERIAL_OUTPUT SerialUSB
#else
    #define SERIAL_OUTPUT Serial
#endif

HM330X sensor;
   d47d0:	2140      	movs	r1, #64	; 0x40
   d47d2:	480a      	ldr	r0, [pc, #40]	; (d47fc <_GLOBAL__sub_I_bme+0x44>)
   d47d4:	f000 f9a2 	bl	d4b1c <_ZN6HM330XC1Eh>
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

// Define OLED Display
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);  // the -1 means there is no reset pin
   d47d8:	f04f 31ff 	mov.w	r1, #4294967295
   d47dc:	4620      	mov	r0, r4
   d47de:	f001 fba5 	bl	d5f2c <_ZN16Adafruit_SSD1306C1Ea>
   d47e2:	4620      	mov	r0, r4
   d47e4:	4a06      	ldr	r2, [pc, #24]	; (d4800 <_GLOBAL__sub_I_bme+0x48>)
   d47e6:	4907      	ldr	r1, [pc, #28]	; (d4804 <_GLOBAL__sub_I_bme+0x4c>)
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d47e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

// Define OLED Display
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);  // the -1 means there is no reset pin
   d47ec:	f003 bcb2 	b.w	d8154 <__aeabi_atexit>
   d47f0:	2003e2e9 	.word	0x2003e2e9
   d47f4:	2003e364 	.word	0x2003e364
   d47f8:	2003e2ec 	.word	0x2003e2ec
   d47fc:	2003e2e8 	.word	0x2003e2e8
   d4800:	2003e2d8 	.word	0x2003e2d8
   d4804:	000d40cd 	.word	0x000d40cd

000d4808 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4808:	f001 bf22 	b.w	d6650 <HAL_Pin_Map>

000d480c <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d480c:	f001 bf20 	b.w	d6650 <HAL_Pin_Map>

000d4810 <_GLOBAL__sub_I__Z11printBufferPht>:
   d4810:	f001 bf1e 	b.w	d6650 <HAL_Pin_Map>

000d4814 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4814:	b510      	push	{r4, lr}
   d4816:	4b05      	ldr	r3, [pc, #20]	; (d482c <_ZN10JsonBufferD1Ev+0x18>)
   d4818:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d481a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d481c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d481e:	b91b      	cbnz	r3, d4828 <_ZN10JsonBufferD1Ev+0x14>
   d4820:	6840      	ldr	r0, [r0, #4]
   d4822:	b108      	cbz	r0, d4828 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4824:	f002 f958 	bl	d6ad8 <free>
	}
}
   d4828:	4620      	mov	r0, r4
   d482a:	bd10      	pop	{r4, pc}
   d482c:	000da870 	.word	0x000da870

000d4830 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4830:	b510      	push	{r4, lr}
   d4832:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4834:	f7ff ffee 	bl	d4814 <_ZN10JsonBufferD1Ev>
   d4838:	4620      	mov	r0, r4
   d483a:	2114      	movs	r1, #20
   d483c:	f003 fc98 	bl	d8170 <_ZdlPvj>
   d4840:	4620      	mov	r0, r4
   d4842:	bd10      	pop	{r4, pc}

000d4844 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4844:	b510      	push	{r4, lr}
   d4846:	4b03      	ldr	r3, [pc, #12]	; (d4854 <_ZN10JsonWriterD1Ev+0x10>)
   d4848:	6003      	str	r3, [r0, #0]
   d484a:	4604      	mov	r4, r0
   d484c:	f7ff ffe2 	bl	d4814 <_ZN10JsonBufferD1Ev>

}
   d4850:	4620      	mov	r0, r4
   d4852:	bd10      	pop	{r4, pc}
   d4854:	000da880 	.word	0x000da880

000d4858 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4858:	b510      	push	{r4, lr}
   d485a:	4604      	mov	r4, r0

}
   d485c:	f7ff fff2 	bl	d4844 <_ZN10JsonWriterD1Ev>
   d4860:	4620      	mov	r0, r4
   d4862:	2130      	movs	r1, #48	; 0x30
   d4864:	f003 fc84 	bl	d8170 <_ZdlPvj>
   d4868:	4620      	mov	r0, r4
   d486a:	bd10      	pop	{r4, pc}

000d486c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d486c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d486e:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4870:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d4872:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d4874:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d4876:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4878:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d487c:	4770      	bx	lr
	...

000d4880 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4880:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4882:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4884:	60c3      	str	r3, [r0, #12]
   d4886:	2301      	movs	r3, #1
   d4888:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d488a:	4b05      	ldr	r3, [pc, #20]	; (d48a0 <_ZN10JsonWriterC1EPcj+0x20>)
   d488c:	6003      	str	r3, [r0, #0]
   d488e:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4892:	6041      	str	r1, [r0, #4]
   d4894:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4896:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4898:	f7ff ffe8 	bl	d486c <_ZN10JsonWriter4initEv>
}
   d489c:	bd10      	pop	{r4, pc}
   d489e:	bf00      	nop
   d48a0:	000da880 	.word	0x000da880

000d48a4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d48a4:	68c3      	ldr	r3, [r0, #12]
   d48a6:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d48a8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d48aa:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d48ac:	bf3f      	itttt	cc
   d48ae:	6842      	ldrcc	r2, [r0, #4]
   d48b0:	1c5c      	addcc	r4, r3, #1
   d48b2:	60c4      	strcc	r4, [r0, #12]
   d48b4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d48b6:	bf24      	itt	cs
   d48b8:	2301      	movcs	r3, #1
   d48ba:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d48c0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d48c2:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d48c4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d48c6:	b143      	cbz	r3, d48da <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d48c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d48cc:	7e59      	ldrb	r1, [r3, #25]
   d48ce:	b109      	cbz	r1, d48d4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d48d0:	f7ff ffe8 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d48d4:	6963      	ldr	r3, [r4, #20]
   d48d6:	3b01      	subs	r3, #1
   d48d8:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d48da:	68a3      	ldr	r3, [r4, #8]
   d48dc:	68e0      	ldr	r0, [r4, #12]
   d48de:	6861      	ldr	r1, [r4, #4]
   d48e0:	4298      	cmp	r0, r3
   d48e2:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d48e6:	bf2a      	itet	cs
   d48e8:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d48ea:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d48ec:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d48f0:	bd10      	pop	{r4, pc}

000d48f2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d48f2:	b570      	push	{r4, r5, r6, lr}
   d48f4:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d48f6:	68c0      	ldr	r0, [r0, #12]
   d48f8:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d48fa:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d48fc:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d48fe:	4613      	mov	r3, r2
   d4900:	4430      	add	r0, r6
   d4902:	460a      	mov	r2, r1
   d4904:	4629      	mov	r1, r5
   d4906:	f002 f8ef 	bl	d6ae8 <vsnprintf>
	if (count <= spaceAvailable) {
   d490a:	4285      	cmp	r5, r0
		offset += count;
   d490c:	bf2d      	iteet	cs
   d490e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4910:	68a3      	ldrcc	r3, [r4, #8]
   d4912:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4914:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4916:	bf36      	itet	cc
   d4918:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d491a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d491c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4920:	bd70      	pop	{r4, r5, r6, pc}

000d4922 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d4922:	b40e      	push	{r1, r2, r3}
   d4924:	b503      	push	{r0, r1, lr}
   d4926:	aa03      	add	r2, sp, #12
   d4928:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d492c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d492e:	f7ff ffe0 	bl	d48f2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d4932:	b002      	add	sp, #8
   d4934:	f85d eb04 	ldr.w	lr, [sp], #4
   d4938:	b003      	add	sp, #12
   d493a:	4770      	bx	lr

000d493c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4940:	4604      	mov	r4, r0
   d4942:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d4944:	4617      	mov	r7, r2
   d4946:	b112      	cbz	r2, d494e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d4948:	2122      	movs	r1, #34	; 0x22
   d494a:	f7ff ffab 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d494e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4950:	5d71      	ldrb	r1, [r6, r5]
   d4952:	eb06 0805 	add.w	r8, r6, r5
   d4956:	2900      	cmp	r1, #0
   d4958:	d071      	beq.n	d4a3e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d495a:	68e2      	ldr	r2, [r4, #12]
   d495c:	68a3      	ldr	r3, [r4, #8]
   d495e:	429a      	cmp	r2, r3
   d4960:	d26d      	bcs.n	d4a3e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d4962:	060b      	lsls	r3, r1, #24
   d4964:	d533      	bpl.n	d49ce <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d4966:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d496a:	2be0      	cmp	r3, #224	; 0xe0
   d496c:	d117      	bne.n	d499e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d496e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d4972:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d4976:	2a80      	cmp	r2, #128	; 0x80
   d4978:	d111      	bne.n	d499e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d497a:	f105 0802 	add.w	r8, r5, #2
   d497e:	f816 2008 	ldrb.w	r2, [r6, r8]
   d4982:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d4986:	2880      	cmp	r0, #128	; 0x80
   d4988:	d109      	bne.n	d499e <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d498a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d498e:	019b      	lsls	r3, r3, #6
   d4990:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4994:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4998:	431a      	orrs	r2, r3
   d499a:	b292      	uxth	r2, r2
   d499c:	e011      	b.n	d49c2 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d499e:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d49a2:	2bc0      	cmp	r3, #192	; 0xc0
   d49a4:	d146      	bne.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d49a6:	f105 0801 	add.w	r8, r5, #1
   d49aa:	f816 3008 	ldrb.w	r3, [r6, r8]
   d49ae:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d49b2:	2a80      	cmp	r2, #128	; 0x80
   d49b4:	d13e      	bne.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d49b6:	0189      	lsls	r1, r1, #6
   d49b8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d49bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d49c0:	431a      	orrs	r2, r3
   d49c2:	4923      	ldr	r1, [pc, #140]	; (d4a50 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d49c4:	4620      	mov	r0, r4
   d49c6:	f7ff ffac 	bl	d4922 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d49ca:	4645      	mov	r5, r8
   d49cc:	e035      	b.n	d4a3a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d49ce:	290c      	cmp	r1, #12
   d49d0:	d018      	beq.n	d4a04 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d49d2:	d80b      	bhi.n	d49ec <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d49d4:	2909      	cmp	r1, #9
   d49d6:	d021      	beq.n	d4a1c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d49d8:	290a      	cmp	r1, #10
   d49da:	d019      	beq.n	d4a10 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d49dc:	2908      	cmp	r1, #8
   d49de:	d129      	bne.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d49e0:	215c      	movs	r1, #92	; 0x5c
   d49e2:	4620      	mov	r0, r4
   d49e4:	f7ff ff5e 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d49e8:	2162      	movs	r1, #98	; 0x62
   d49ea:	e023      	b.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d49ec:	2922      	cmp	r1, #34	; 0x22
   d49ee:	d01b      	beq.n	d4a28 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d49f0:	295c      	cmp	r1, #92	; 0x5c
   d49f2:	d019      	beq.n	d4a28 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d49f4:	290d      	cmp	r1, #13
   d49f6:	d11d      	bne.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d49f8:	215c      	movs	r1, #92	; 0x5c
   d49fa:	4620      	mov	r0, r4
   d49fc:	f7ff ff52 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d4a00:	2172      	movs	r1, #114	; 0x72
   d4a02:	e017      	b.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4a04:	215c      	movs	r1, #92	; 0x5c
   d4a06:	4620      	mov	r0, r4
   d4a08:	f7ff ff4c 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4a0c:	2166      	movs	r1, #102	; 0x66
   d4a0e:	e011      	b.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4a10:	215c      	movs	r1, #92	; 0x5c
   d4a12:	4620      	mov	r0, r4
   d4a14:	f7ff ff46 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4a18:	216e      	movs	r1, #110	; 0x6e
   d4a1a:	e00b      	b.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4a1c:	215c      	movs	r1, #92	; 0x5c
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f7ff ff40 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d4a24:	2174      	movs	r1, #116	; 0x74
   d4a26:	e005      	b.n	d4a34 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4a28:	215c      	movs	r1, #92	; 0x5c
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	f7ff ff3a 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4a30:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d4a34:	4620      	mov	r0, r4
   d4a36:	f7ff ff35 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4a3a:	3501      	adds	r5, #1
   d4a3c:	e788      	b.n	d4950 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d4a3e:	b12f      	cbz	r7, d4a4c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d4a40:	4620      	mov	r0, r4
   d4a42:	2122      	movs	r1, #34	; 0x22
	}

}
   d4a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d4a48:	f7ff bf2c 	b.w	d48a4 <_ZN10JsonWriter10insertCharEc>
   d4a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a50:	000da891 	.word	0x000da891

000d4a54 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d4a54:	6942      	ldr	r2, [r0, #20]
   d4a56:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d4a5a:	7e1a      	ldrb	r2, [r3, #24]
   d4a5c:	b112      	cbz	r2, d4a64 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4a5e:	2200      	movs	r2, #0
   d4a60:	761a      	strb	r2, [r3, #24]
   d4a62:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d4a64:	212c      	movs	r1, #44	; 0x2c
   d4a66:	f7ff bf1d 	b.w	d48a4 <_ZN10JsonWriter10insertCharEc>

000d4a6a <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4a6c:	6943      	ldr	r3, [r0, #20]
   d4a6e:	3301      	adds	r3, #1
   d4a70:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4a72:	460e      	mov	r6, r1
   d4a74:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4a76:	d80e      	bhi.n	d4a96 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d4a78:	f7ff ffec 	bl	d4a54 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d4a7c:	6943      	ldr	r3, [r0, #20]
   d4a7e:	1c5a      	adds	r2, r3, #1
   d4a80:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d4a84:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d4a86:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d4a88:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d4a8a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4a8c:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d4a8e:	f7ff ff09 	bl	d48a4 <_ZN10JsonWriter10insertCharEc>
   d4a92:	4620      	mov	r0, r4
   d4a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4a96:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4a9c <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d4a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a9e:	4604      	mov	r4, r0
   d4aa0:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d4aa4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d4aa6:	2d00      	cmp	r5, #0
   d4aa8:	db0a      	blt.n	d4ac0 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d4aaa:	f004 ff5d 	bl	d9968 <__aeabi_f2d>
   d4aae:	462a      	mov	r2, r5
   d4ab0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ab4:	4908      	ldr	r1, [pc, #32]	; (d4ad8 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	f7ff ff33 	bl	d4922 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d4abc:	b003      	add	sp, #12
   d4abe:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4ac0:	f004 ff52 	bl	d9968 <__aeabi_f2d>
   d4ac4:	460b      	mov	r3, r1
   d4ac6:	4905      	ldr	r1, [pc, #20]	; (d4adc <_ZN10JsonWriter11insertValueEf+0x40>)
   d4ac8:	4602      	mov	r2, r0
   d4aca:	4620      	mov	r0, r4
	}
}
   d4acc:	b003      	add	sp, #12
   d4ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d4ad2:	f7ff bf26 	b.w	d4922 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4ad6:	bf00      	nop
   d4ad8:	000da8a3 	.word	0x000da8a3
   d4adc:	000da8a8 	.word	0x000da8a8

000d4ae0 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4ae0:	f001 bdb6 	b.w	d6650 <HAL_Pin_Map>

000d4ae4 <_ZN13I2COperations12set_iic_addrEh>:
/**
    @brief change the I2C address from default.
    @param IIC_ADDR: I2C address to be set
*/
void I2COperations::set_iic_addr(uint8_t IIC_ADDR) {
    _IIC_ADDR = IIC_ADDR;
   d4ae4:	7001      	strb	r1, [r0, #0]
   d4ae6:	4770      	bx	lr

000d4ae8 <_ZN13I2COperations12IIC_SEND_CMDEh>:
}

HM330XErrorCode I2COperations::IIC_SEND_CMD(uint8_t CMD) {
   d4ae8:	b538      	push	{r3, r4, r5, lr}
   d4aea:	4605      	mov	r5, r0
   d4aec:	460c      	mov	r4, r1
    Wire.beginTransmission(_IIC_ADDR);
   d4aee:	f003 fb0b 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4af2:	7829      	ldrb	r1, [r5, #0]
   d4af4:	f003 f89b 	bl	d7c2e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(CMD);
   d4af8:	f003 fb06 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4afc:	6803      	ldr	r3, [r0, #0]
   d4afe:	4621      	mov	r1, r4
   d4b00:	689b      	ldr	r3, [r3, #8]
   d4b02:	4798      	blx	r3
    byte ret = Wire.endTransmission();
   d4b04:	f003 fb00 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4b08:	f003 f89c 	bl	d7c44 <_ZN7TwoWire15endTransmissionEv>
    if (ret == 0) {
   d4b0c:	2800      	cmp	r0, #0
        return NO_ERROR1;
    } else {
        return ERROR_COMM;
    }
}
   d4b0e:	bf14      	ite	ne
   d4b10:	f06f 0001 	mvnne.w	r0, #1
   d4b14:	2000      	moveq	r0, #0
   d4b16:	bd38      	pop	{r3, r4, r5, pc}

000d4b18 <_GLOBAL__sub_I__ZN13I2COperations14IIC_write_byteEhh>:
   d4b18:	f001 bd9a 	b.w	d6650 <HAL_Pin_Map>

000d4b1c <_ZN6HM330XC1Eh>:
    THE SOFTWARE.
*/

#include "Seeed_HM330X.h"

HM330X::HM330X(uint8_t IIC_ADDR) {
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	4604      	mov	r4, r0
    set_iic_addr(IIC_ADDR);
   d4b20:	f7ff ffe0 	bl	d4ae4 <_ZN13I2COperations12set_iic_addrEh>
}
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}

000d4b28 <_ZN6HM330X11select_commEv>:

HM330XErrorCode HM330X::select_comm() {
    return IIC_SEND_CMD(SELECT_COMM_CMD);
   d4b28:	2188      	movs	r1, #136	; 0x88
   d4b2a:	f7ff bfdd 	b.w	d4ae8 <_ZN13I2COperations12IIC_SEND_CMDEh>

000d4b2e <_ZN6HM330X4initEv>:
}

HM330XErrorCode HM330X::init() {
   d4b2e:	b510      	push	{r4, lr}
   d4b30:	4604      	mov	r4, r0
    Wire.begin();
   d4b32:	f003 fae9 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4b36:	f003 f843 	bl	d7bc0 <_ZN7TwoWire5beginEv>
    return select_comm();
   d4b3a:	4620      	mov	r0, r4
}
   d4b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return IIC_SEND_CMD(SELECT_COMM_CMD);
}

HM330XErrorCode HM330X::init() {
    Wire.begin();
    return select_comm();
   d4b40:	f7ff bff2 	b.w	d4b28 <_ZN6HM330X11select_commEv>

000d4b44 <_ZN6HM330X17read_sensor_valueEPhm>:
}

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
   d4b44:	b570      	push	{r4, r5, r6, lr}
   d4b46:	460c      	mov	r4, r1
   d4b48:	4615      	mov	r5, r2
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
   d4b4a:	f003 fadd 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4b4e:	221d      	movs	r2, #29
   d4b50:	2140      	movs	r1, #64	; 0x40
   d4b52:	f003 f869 	bl	d7c28 <_ZN7TwoWire11requestFromEhj>
   d4b56:	260b      	movs	r6, #11
    while (data_len != Wire.available()) {
   d4b58:	f003 fad6 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4b5c:	6803      	ldr	r3, [r0, #0]
   d4b5e:	691b      	ldr	r3, [r3, #16]
   d4b60:	4798      	blx	r3
   d4b62:	42a8      	cmp	r0, r5
   d4b64:	d005      	beq.n	d4b72 <_ZN6HM330X17read_sensor_valueEPhm+0x2e>
        time_out_count++;
        if (time_out_count > 10) {
   d4b66:	3e01      	subs	r6, #1
   d4b68:	d00e      	beq.n	d4b88 <_ZN6HM330X17read_sensor_valueEPhm+0x44>
            return ERROR_COMM;
        }
        delay(1);
   d4b6a:	2001      	movs	r0, #1
   d4b6c:	f002 fad8 	bl	d7120 <delay>

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
   d4b70:	e7f2      	b.n	d4b58 <_ZN6HM330X17read_sensor_valueEPhm+0x14>
   d4b72:	4425      	add	r5, r4
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d4b74:	42a5      	cmp	r5, r4
   d4b76:	d00a      	beq.n	d4b8e <_ZN6HM330X17read_sensor_valueEPhm+0x4a>
        data[i] = Wire.read();
   d4b78:	f003 fac6 	bl	d8108 <_Z19__fetch_global_Wirev>
   d4b7c:	6803      	ldr	r3, [r0, #0]
   d4b7e:	695b      	ldr	r3, [r3, #20]
   d4b80:	4798      	blx	r3
   d4b82:	f804 0b01 	strb.w	r0, [r4], #1
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d4b86:	e7f5      	b.n	d4b74 <_ZN6HM330X17read_sensor_valueEPhm+0x30>
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
        time_out_count++;
        if (time_out_count > 10) {
            return ERROR_COMM;
   d4b88:	f06f 0001 	mvn.w	r0, #1
   d4b8c:	bd70      	pop	{r4, r5, r6, pc}
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
        data[i] = Wire.read();
    }
    return ret;
   d4b8e:	2000      	movs	r0, #0
}
   d4b90:	bd70      	pop	{r4, r5, r6, pc}

000d4b92 <_GLOBAL__sub_I__ZN6HM330XC2Eh>:
   d4b92:	f001 bd5d 	b.w	d6650 <HAL_Pin_Map>

000d4b96 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   d4b96:	b148      	cbz	r0, d4bac <null_ptr_check+0x16>
   d4b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d4b9a:	b13b      	cbz	r3, d4bac <null_ptr_check+0x16>
   d4b9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d4b9e:	b12b      	cbz	r3, d4bac <null_ptr_check+0x16>
   d4ba0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4ba2:	fab0 f080 	clz	r0, r0
   d4ba6:	0940      	lsrs	r0, r0, #5
   d4ba8:	4240      	negs	r0, r0
   d4baa:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   d4bac:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   d4bb0:	4770      	bx	lr

000d4bb2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d4bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4bb4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d4bb6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d4bb8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d4bba:	f7ff ffec 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4bbe:	4605      	mov	r5, r0
   d4bc0:	bb50      	cbnz	r0, d4c18 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d4bc2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
   d4bc6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d4bc8:	bf14      	ite	ne
   d4bca:	2300      	movne	r3, #0
   d4bcc:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
   d4bce:	429a      	cmp	r2, r3
   d4bd0:	d022      	beq.n	d4c18 <set_mem_page+0x66>
			dev->mem_page = mem_page;
   d4bd2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d4bd4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   d4bd6:	7860      	ldrb	r0, [r4, #1]
   d4bd8:	2301      	movs	r3, #1
   d4bda:	f10d 0207 	add.w	r2, sp, #7
   d4bde:	21f3      	movs	r1, #243	; 0xf3
   d4be0:	47b0      	blx	r6
   d4be2:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   d4be6:	b110      	cbz	r0, d4bee <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4be8:	f06f 0501 	mvn.w	r5, #1
   d4bec:	e014      	b.n	d4c18 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d4bee:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4bf0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   d4bf2:	7860      	ldrb	r0, [r4, #1]
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d4bf4:	f003 0210 	and.w	r2, r3, #16
   d4bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4bfc:	f023 0310 	bic.w	r3, r3, #16
   d4c00:	4313      	orrs	r3, r2
   d4c02:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4c06:	f10d 0207 	add.w	r2, sp, #7
   d4c0a:	2301      	movs	r3, #1
   d4c0c:	2173      	movs	r1, #115	; 0x73
   d4c0e:	47b0      	blx	r6
   d4c10:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
   d4c14:	2800      	cmp	r0, #0
   d4c16:	d1e7      	bne.n	d4be8 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
   d4c18:	4628      	mov	r0, r5
   d4c1a:	b002      	add	sp, #8
   d4c1c:	bd70      	pop	{r4, r5, r6, pc}

000d4c1e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   d4c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4c20:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4c22:	f7ff ffb8 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4c26:	4605      	mov	r5, r0
   d4c28:	b988      	cbnz	r0, d4c4e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d4c2a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d4c2c:	7860      	ldrb	r0, [r4, #1]
   d4c2e:	2301      	movs	r3, #1
   d4c30:	f10d 0207 	add.w	r2, sp, #7
   d4c34:	21f3      	movs	r1, #243	; 0xf3
   d4c36:	47b0      	blx	r6
   d4c38:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   d4c3c:	b928      	cbnz	r0, d4c4a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   d4c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4c42:	f003 0310 	and.w	r3, r3, #16
   d4c46:	70e3      	strb	r3, [r4, #3]
   d4c48:	e001      	b.n	d4c4e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d4c4a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
   d4c4e:	4628      	mov	r0, r5
   d4c50:	b002      	add	sp, #8
   d4c52:	bd70      	pop	{r4, r5, r6, pc}

000d4c54 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
   d4c54:	b140      	cbz	r0, d4c68 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   d4c56:	7803      	ldrb	r3, [r0, #0]
   d4c58:	428b      	cmp	r3, r1
   d4c5a:	d908      	bls.n	d4c6e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   d4c5c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   d4c5e:	7813      	ldrb	r3, [r2, #0]
   d4c60:	f043 0302 	orr.w	r3, r3, #2
   d4c64:	7013      	strb	r3, [r2, #0]
   d4c66:	e002      	b.n	d4c6e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   d4c68:	f04f 30ff 	mov.w	r0, #4294967295
   d4c6c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
   d4c6e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
   d4c70:	4770      	bx	lr

000d4c72 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4c72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c76:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4c78:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4c7a:	4688      	mov	r8, r1
   d4c7c:	4691      	mov	r9, r2
   d4c7e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4c80:	f7ff ff89 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4c84:	4604      	mov	r4, r0
   d4c86:	b9a8      	cbnz	r0, d4cb4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   d4c88:	78ab      	ldrb	r3, [r5, #2]
   d4c8a:	b93b      	cbnz	r3, d4c9c <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   d4c8c:	4629      	mov	r1, r5
   d4c8e:	4630      	mov	r0, r6
   d4c90:	f7ff ff8f 	bl	d4bb2 <set_mem_page>
			if (rslt == BME680_OK)
   d4c94:	4604      	mov	r4, r0
   d4c96:	b908      	cbnz	r0, d4c9c <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   d4c98:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d4c9c:	6caf      	ldr	r7, [r5, #72]	; 0x48
   d4c9e:	7868      	ldrb	r0, [r5, #1]
   d4ca0:	464b      	mov	r3, r9
   d4ca2:	4642      	mov	r2, r8
   d4ca4:	4631      	mov	r1, r6
   d4ca6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   d4ca8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d4caa:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d4cae:	bf18      	it	ne
   d4cb0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4cba <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   d4cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4cbe:	b08b      	sub	sp, #44	; 0x2c
   d4cc0:	461e      	mov	r6, r3
   d4cc2:	4683      	mov	fp, r0
   d4cc4:	468a      	mov	sl, r1
   d4cc6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   d4cc8:	2100      	movs	r1, #0
   d4cca:	2228      	movs	r2, #40	; 0x28
   d4ccc:	4668      	mov	r0, sp
   d4cce:	f005 fbc4 	bl	da45a <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4cd2:	4630      	mov	r0, r6
   d4cd4:	f7ff ff5f 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4cd8:	4605      	mov	r5, r0
   d4cda:	bba8      	cbnz	r0, d4d48 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   d4cdc:	1e63      	subs	r3, r4, #1
   d4cde:	2b12      	cmp	r3, #18
   d4ce0:	d830      	bhi.n	d4d44 <bme680_set_regs+0x8a>
   d4ce2:	f10d 0801 	add.w	r8, sp, #1
   d4ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
   d4cea:	465f      	mov	r7, fp
   d4cec:	46c1      	mov	r9, r8
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   d4cee:	b2a4      	uxth	r4, r4
   d4cf0:	ebcb 0307 	rsb	r3, fp, r7
   d4cf4:	b29b      	uxth	r3, r3
   d4cf6:	429c      	cmp	r4, r3
   d4cf8:	d913      	bls.n	d4d22 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
   d4cfa:	78b3      	ldrb	r3, [r6, #2]
   d4cfc:	b943      	cbnz	r3, d4d10 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4cfe:	4631      	mov	r1, r6
   d4d00:	7838      	ldrb	r0, [r7, #0]
   d4d02:	f7ff ff56 	bl	d4bb2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4d06:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4d08:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4d0e:	e000      	b.n	d4d12 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   d4d10:	783b      	ldrb	r3, [r7, #0]
   d4d12:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4d16:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   d4d1a:	f808 3b02 	strb.w	r3, [r8], #2
   d4d1e:	3701      	adds	r7, #1
   d4d20:	e7e6      	b.n	d4cf0 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   d4d22:	b98d      	cbnz	r5, d4d48 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4d24:	0063      	lsls	r3, r4, #1
   d4d26:	3b01      	subs	r3, #1
   d4d28:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   d4d2a:	f89d 1000 	ldrb.w	r1, [sp]
   d4d2e:	7870      	ldrb	r0, [r6, #1]
   d4d30:	b29b      	uxth	r3, r3
   d4d32:	464a      	mov	r2, r9
   d4d34:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4d36:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4d38:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4d3c:	bf18      	it	ne
   d4d3e:	f06f 0501 	mvnne.w	r5, #1
   d4d42:	e001      	b.n	d4d48 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   d4d44:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
   d4d48:	4628      	mov	r0, r5
   d4d4a:	b00b      	add	sp, #44	; 0x2c
   d4d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d50 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   d4d52:	23e0      	movs	r3, #224	; 0xe0
   d4d54:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4d58:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4d5a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4d5c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4d60:	f7ff ff19 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4d64:	4604      	mov	r4, r0
   d4d66:	b9d8      	cbnz	r0, d4da0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
   d4d68:	78ab      	ldrb	r3, [r5, #2]
   d4d6a:	b16b      	cbz	r3, d4d88 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d4d6c:	462b      	mov	r3, r5
   d4d6e:	2201      	movs	r2, #1
   d4d70:	f10d 0107 	add.w	r1, sp, #7
   d4d74:	f10d 0006 	add.w	r0, sp, #6
   d4d78:	f7ff ff9f 	bl	d4cba <bme680_set_regs>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d4d7c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d4d7e:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d4d80:	200a      	movs	r0, #10
   d4d82:	4798      	blx	r3

			if (rslt == BME680_OK) {
   d4d84:	b134      	cbz	r4, d4d94 <bme680_soft_reset+0x44>
   d4d86:	e00b      	b.n	d4da0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
   d4d88:	4628      	mov	r0, r5
   d4d8a:	f7ff ff48 	bl	d4c1e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
   d4d8e:	4604      	mov	r4, r0
   d4d90:	b930      	cbnz	r0, d4da0 <bme680_soft_reset+0x50>
   d4d92:	e7eb      	b.n	d4d6c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   d4d94:	78ab      	ldrb	r3, [r5, #2]
   d4d96:	b91b      	cbnz	r3, d4da0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
   d4d98:	4628      	mov	r0, r5
   d4d9a:	f7ff ff40 	bl	d4c1e <get_mem_page>
   d4d9e:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
   d4da0:	4620      	mov	r0, r4
   d4da2:	b003      	add	sp, #12
   d4da4:	bd30      	pop	{r4, r5, pc}

000d4da6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   d4da6:	b530      	push	{r4, r5, lr}
   d4da8:	b08d      	sub	sp, #52	; 0x34
   d4daa:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4dac:	f7ff fef3 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4db0:	4605      	mov	r5, r0
   d4db2:	2800      	cmp	r0, #0
   d4db4:	f040 80d5 	bne.w	d4f62 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   d4db8:	4620      	mov	r0, r4
   d4dba:	f7ff ffc9 	bl	d4d50 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   d4dbe:	4605      	mov	r5, r0
   d4dc0:	2800      	cmp	r0, #0
   d4dc2:	f040 80ce 	bne.w	d4f62 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   d4dc6:	4623      	mov	r3, r4
   d4dc8:	2201      	movs	r2, #1
   d4dca:	4621      	mov	r1, r4
   d4dcc:	20d0      	movs	r0, #208	; 0xd0
   d4dce:	f7ff ff50 	bl	d4c72 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d4dd2:	4605      	mov	r5, r0
   d4dd4:	2800      	cmp	r0, #0
   d4dd6:	f040 80c4 	bne.w	d4f62 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
   d4dda:	7823      	ldrb	r3, [r4, #0]
   d4ddc:	2b61      	cmp	r3, #97	; 0x61
   d4dde:	f040 80be 	bne.w	d4f5e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   d4de2:	4601      	mov	r1, r0
   d4de4:	2229      	movs	r2, #41	; 0x29
   d4de6:	a801      	add	r0, sp, #4
   d4de8:	f005 fb37 	bl	da45a <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4dec:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
   d4dee:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4df2:	f7ff fed0 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4df6:	4605      	mov	r5, r0
   d4df8:	2800      	cmp	r0, #0
   d4dfa:	f040 80b2 	bne.w	d4f62 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   d4dfe:	4623      	mov	r3, r4
   d4e00:	2219      	movs	r2, #25
   d4e02:	a901      	add	r1, sp, #4
   d4e04:	2089      	movs	r0, #137	; 0x89
   d4e06:	f7ff ff34 	bl	d4c72 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   d4e0a:	4605      	mov	r5, r0
   d4e0c:	b938      	cbnz	r0, d4e1e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   d4e0e:	4623      	mov	r3, r4
   d4e10:	2210      	movs	r2, #16
   d4e12:	f10d 011d 	add.w	r1, sp, #29
   d4e16:	20e1      	movs	r0, #225	; 0xe1
   d4e18:	f7ff ff2b 	bl	d4c72 <bme680_get_regs>
   d4e1c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   d4e1e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   d4e22:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e2a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   d4e2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4e30:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e38:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4e3e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4e42:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4e44:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e4c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   d4e4e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4e52:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e5a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4e5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4e60:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4e64:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e70:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   d4e72:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d4e76:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e7e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   d4e80:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4e84:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d4e88:	f89d 3013 	ldrb.w	r3, [sp, #19]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d4e8c:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d4e90:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d4e94:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4e98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e9c:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   d4e9e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4ea2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d4ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4eaa:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   d4eac:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4eb0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d4eb4:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d4eb8:	f89d 101f 	ldrb.w	r1, [sp, #31]
   d4ebc:	f003 020f 	and.w	r2, r3, #15
   d4ec0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   d4ec4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d4ec6:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d4eca:	091b      	lsrs	r3, r3, #4
   d4ecc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d4ed0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   d4ed2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d4ed6:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   d4ed8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4edc:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   d4ede:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   d4ee2:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   d4ee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d4ee8:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   d4eea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4eee:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d4ef0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   d4ef4:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d4ef6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d4efa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d4efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4f02:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   d4f04:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d4f08:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   d4f0a:	bb15      	cbnz	r5, d4f52 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   d4f0c:	4623      	mov	r3, r4
   d4f0e:	2201      	movs	r2, #1
   d4f10:	f10d 0103 	add.w	r1, sp, #3
   d4f14:	2002      	movs	r0, #2
   d4f16:	f7ff feac 	bl	d4c72 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   d4f1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4f1e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   d4f22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   d4f26:	4605      	mov	r5, r0
   d4f28:	b998      	cbnz	r0, d4f52 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   d4f2a:	4623      	mov	r3, r4
   d4f2c:	2201      	movs	r2, #1
   d4f2e:	f10d 0103 	add.w	r1, sp, #3
   d4f32:	f7ff fe9e 	bl	d4c72 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
   d4f36:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4f3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   d4f3e:	4605      	mov	r5, r0
   d4f40:	b938      	cbnz	r0, d4f52 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   d4f42:	4623      	mov	r3, r4
   d4f44:	2201      	movs	r2, #1
   d4f46:	f10d 0103 	add.w	r1, sp, #3
   d4f4a:	2004      	movs	r0, #4
   d4f4c:	f7ff fe91 	bl	d4c72 <bme680_get_regs>
   d4f50:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   d4f52:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   d4f56:	111b      	asrs	r3, r3, #4
   d4f58:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4f5c:	e001      	b.n	d4f62 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   d4f5e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
   d4f62:	4628      	mov	r0, r5
   d4f64:	b00d      	add	sp, #52	; 0x34
   d4f66:	bd30      	pop	{r4, r5, pc}

000d4f68 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4f6a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4f6c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4f6e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4f72:	f7ff fe10 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4f76:	bba0      	cbnz	r0, d4fe2 <bme680_set_sensor_mode+0x7a>
   d4f78:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   d4f7a:	4623      	mov	r3, r4
   d4f7c:	2201      	movs	r2, #1
   d4f7e:	f10d 0106 	add.w	r1, sp, #6
   d4f82:	2074      	movs	r0, #116	; 0x74
   d4f84:	f7ff fe75 	bl	d4c72 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d4f88:	b9a0      	cbnz	r0, d4fb4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   d4f8a:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
   d4f8e:	f013 0503 	ands.w	r5, r3, #3
   d4f92:	d011      	beq.n	d4fb8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   d4f94:	f023 0303 	bic.w	r3, r3, #3
   d4f98:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d4f9c:	2201      	movs	r2, #1
   d4f9e:	4623      	mov	r3, r4
   d4fa0:	f10d 0106 	add.w	r1, sp, #6
   d4fa4:	f10d 0007 	add.w	r0, sp, #7
   d4fa8:	f7ff fe87 	bl	d4cba <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   d4fac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4fae:	200a      	movs	r0, #10
   d4fb0:	4798      	blx	r3
   d4fb2:	e7e2      	b.n	d4f7a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   d4fb4:	2d00      	cmp	r5, #0
   d4fb6:	d1e0      	bne.n	d4f7a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   d4fb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d4fbc:	b18b      	cbz	r3, d4fe2 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   d4fbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4fc2:	f003 0303 	and.w	r3, r3, #3
   d4fc6:	f022 0203 	bic.w	r2, r2, #3
   d4fca:	4313      	orrs	r3, r2
   d4fcc:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   d4fd0:	b938      	cbnz	r0, d4fe2 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d4fd2:	4623      	mov	r3, r4
   d4fd4:	2201      	movs	r2, #1
   d4fd6:	f10d 0106 	add.w	r1, sp, #6
   d4fda:	f10d 0007 	add.w	r0, sp, #7
   d4fde:	f7ff fe6c 	bl	d4cba <bme680_set_regs>
		}
	}

	return rslt;
}
   d4fe2:	b003      	add	sp, #12
   d4fe4:	bd30      	pop	{r4, r5, pc}

000d4fe6 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fea:	b088      	sub	sp, #32
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4fec:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4fee:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4ff0:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4ff2:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4ff4:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4ff8:	9304      	str	r3, [sp, #16]
   d4ffa:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4ffe:	9306      	str	r3, [sp, #24]
   d5000:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d5004:	f7ff fdc7 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d5008:	2800      	cmp	r0, #0
   d500a:	f040 8166 	bne.w	d52da <bme680_set_sensor_settings+0x2f4>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d500e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   d5010:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d5014:	d56c      	bpl.n	d50f0 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d5016:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
   d5018:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   d501c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
   d5020:	d165      	bne.n	d50ee <bme680_set_sensor_settings+0x108>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d5022:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d5026:	235a      	movs	r3, #90	; 0x5a
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d5028:	2dc7      	cmp	r5, #199	; 0xc7

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d502a:	f88d 3008 	strb.w	r3, [sp, #8]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d502e:	d905      	bls.n	d503c <bme680_set_sensor_settings+0x56>
   d5030:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d5034:	bf28      	it	cs
   d5036:	f44f 75c8 	movcs.w	r5, #400	; 0x190
   d503a:	e000      	b.n	d503e <bme680_set_sensor_settings+0x58>
		temp = 200;
   d503c:	25c8      	movs	r5, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d503e:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
   d5042:	f994 2011 	ldrsb.w	r2, [r4, #17]
	if (temp < 200) /* Cap temperature */
		temp = 200;
	else if (temp > 400)
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   d5046:	f994 3004 	ldrsb.w	r3, [r4, #4]
   d504a:	f994 0014 	ldrsb.w	r0, [r4, #20]
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d504e:	f50e 3e16 	add.w	lr, lr, #153600	; 0x25800
   d5052:	f20e 1e99 	addw	lr, lr, #409	; 0x199
   d5056:	f502 7244 	add.w	r2, r2, #784	; 0x310
   d505a:	2114      	movs	r1, #20
   d505c:	fb13 f000 	smulbb	r0, r3, r0
   d5060:	fb05 f50e 	mul.w	r5, r5, lr
   d5064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5068:	fb95 f5f1 	sdiv	r5, r5, r1
   d506c:	fb90 f3f3 	sdiv	r3, r0, r3
   d5070:	210a      	movs	r1, #10
   d5072:	021b      	lsls	r3, r3, #8
   d5074:	f505 1548 	add.w	r5, r5, #3276800	; 0x320000
   d5078:	fb95 f5f1 	sdiv	r5, r5, r1
   d507c:	436a      	muls	r2, r5
   d507e:	eb03 0162 	add.w	r1, r3, r2, asr #1
   d5082:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d5086:	3304      	adds	r3, #4
   d5088:	fb91 f2f3 	sdiv	r2, r1, r3
   d508c:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
   d5090:	2383      	movs	r3, #131	; 0x83
   d5092:	434b      	muls	r3, r1
   d5094:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   d5098:	fb92 f3f3 	sdiv	r3, r2, r3
   d509c:	2222      	movs	r2, #34	; 0x22
   d509e:	3bfa      	subs	r3, #250	; 0xfa
   d50a0:	4353      	muls	r3, r2
   d50a2:	3332      	adds	r3, #50	; 0x32
   d50a4:	2264      	movs	r2, #100	; 0x64
   d50a6:	fb93 f3f2 	sdiv	r3, r3, r2
   d50aa:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d50ae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   d50b2:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   d50b6:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   d50ba:	d20b      	bcs.n	d50d4 <bme680_set_sensor_settings+0xee>
   d50bc:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   d50be:	2b3f      	cmp	r3, #63	; 0x3f
   d50c0:	b2d1      	uxtb	r1, r2
   d50c2:	f102 0201 	add.w	r2, r2, #1
   d50c6:	d901      	bls.n	d50cc <bme680_set_sensor_settings+0xe6>
			dur = dur / 4;
   d50c8:	089b      	lsrs	r3, r3, #2
   d50ca:	e7f8      	b.n	d50be <bme680_set_sensor_settings+0xd8>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   d50cc:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   d50d0:	b2db      	uxtb	r3, r3
   d50d2:	e000      	b.n	d50d6 <bme680_set_sensor_settings+0xf0>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
   d50d4:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d50d6:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   d50da:	2300      	movs	r3, #0
   d50dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   d50e0:	2202      	movs	r2, #2
   d50e2:	4623      	mov	r3, r4
   d50e4:	a903      	add	r1, sp, #12
   d50e6:	a802      	add	r0, sp, #8
   d50e8:	f7ff fde7 	bl	d4cba <bme680_set_regs>
   d50ec:	e000      	b.n	d50f0 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d50ee:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   d50f0:	2300      	movs	r3, #0
   d50f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   d50f6:	b910      	cbnz	r0, d50fe <bme680_set_sensor_settings+0x118>
			rslt = bme680_set_sensor_mode(dev);
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7ff ff35 	bl	d4f68 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   d50fe:	f006 0510 	and.w	r5, r6, #16
   d5102:	b2ad      	uxth	r5, r5
   d5104:	b305      	cbz	r5, d5148 <bme680_set_sensor_settings+0x162>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   d5106:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d510a:	2107      	movs	r1, #7
   d510c:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   d5110:	f7ff fda0 	bl	d4c54 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
   d5114:	b930      	cbnz	r0, d5124 <bme680_set_sensor_settings+0x13e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d5116:	4623      	mov	r3, r4
   d5118:	2201      	movs	r2, #1
   d511a:	f10d 0107 	add.w	r1, sp, #7
   d511e:	2075      	movs	r0, #117	; 0x75
   d5120:	f7ff fda7 	bl	d4c72 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d5124:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d5128:	009b      	lsls	r3, r3, #2
   d512a:	f003 021c 	and.w	r2, r3, #28
   d512e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5132:	f023 031c 	bic.w	r3, r3, #28
   d5136:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d5138:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d513a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d513e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   d5142:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
   d5146:	2501      	movs	r5, #1
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   d5148:	06b3      	lsls	r3, r6, #26
   d514a:	d522      	bpl.n	d5192 <bme680_set_sensor_settings+0x1ac>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   d514c:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d5150:	2108      	movs	r1, #8
   d5152:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   d5156:	f7ff fd7d 	bl	d4c54 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
   d515a:	b930      	cbnz	r0, d516a <bme680_set_sensor_settings+0x184>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d515c:	4623      	mov	r3, r4
   d515e:	2201      	movs	r2, #1
   d5160:	f10d 0107 	add.w	r1, sp, #7
   d5164:	2070      	movs	r0, #112	; 0x70
   d5166:	f7ff fd84 	bl	d4c72 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d516a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d516e:	f023 0208 	bic.w	r2, r3, #8
   d5172:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   d5176:	f003 0308 	and.w	r3, r3, #8
   d517a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d517c:	aa08      	add	r2, sp, #32
   d517e:	442a      	add	r2, r5
   d5180:	2170      	movs	r1, #112	; 0x70
			data_array[count] = data;
			count++;
   d5182:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d5184:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d5188:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d518c:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d5190:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   d5192:	07b1      	lsls	r1, r6, #30
   d5194:	d033      	beq.n	d51fe <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   d5196:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d519a:	2105      	movs	r1, #5
   d519c:	f104 0039 	add.w	r0, r4, #57	; 0x39
   d51a0:	f7ff fd58 	bl	d4c54 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
   d51a4:	b930      	cbnz	r0, d51b4 <bme680_set_sensor_settings+0x1ce>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d51a6:	4623      	mov	r3, r4
   d51a8:	2201      	movs	r2, #1
   d51aa:	f10d 0107 	add.w	r1, sp, #7
   d51ae:	2074      	movs	r0, #116	; 0x74
   d51b0:	f7ff fd5f 	bl	d4c72 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
   d51b4:	07f2      	lsls	r2, r6, #31
   d51b6:	d509      	bpl.n	d51cc <bme680_set_sensor_settings+0x1e6>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   d51b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d51bc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   d51c0:	f003 031f 	and.w	r3, r3, #31
   d51c4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d51c8:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
   d51cc:	07b3      	lsls	r3, r6, #30
   d51ce:	d50b      	bpl.n	d51e8 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   d51d0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   d51d4:	009b      	lsls	r3, r3, #2
   d51d6:	f003 021c 	and.w	r2, r3, #28
   d51da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d51de:	f023 031c 	bic.w	r3, r3, #28
   d51e2:	4313      	orrs	r3, r2
   d51e4:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
   d51e8:	ab08      	add	r3, sp, #32
   d51ea:	442b      	add	r3, r5
   d51ec:	2274      	movs	r2, #116	; 0x74
   d51ee:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d51f2:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
   d51f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d51f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d51fc:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   d51fe:	0771      	lsls	r1, r6, #29
   d5200:	d522      	bpl.n	d5248 <bme680_set_sensor_settings+0x262>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   d5202:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d5206:	2105      	movs	r1, #5
   d5208:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d520c:	f7ff fd22 	bl	d4c54 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
   d5210:	b930      	cbnz	r0, d5220 <bme680_set_sensor_settings+0x23a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d5212:	4623      	mov	r3, r4
   d5214:	2201      	movs	r2, #1
   d5216:	f10d 0107 	add.w	r1, sp, #7
   d521a:	2072      	movs	r0, #114	; 0x72
   d521c:	f7ff fd29 	bl	d4c72 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d5220:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5224:	f023 0207 	bic.w	r2, r3, #7
   d5228:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d522c:	f003 0307 	and.w	r3, r3, #7
   d5230:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d5232:	aa08      	add	r2, sp, #32
   d5234:	442a      	add	r2, r5
   d5236:	2172      	movs	r1, #114	; 0x72
			data_array[count] = data;
			count++;
   d5238:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d523a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d523e:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d5242:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d5246:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   d5248:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   d524c:	d03c      	beq.n	d52c8 <bme680_set_sensor_settings+0x2e2>
   d524e:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   d5252:	4642      	mov	r2, r8
   d5254:	2101      	movs	r1, #1
   d5256:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   d525a:	f7ff fcfb 	bl	d4c54 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   d525e:	b968      	cbnz	r0, d527c <bme680_set_sensor_settings+0x296>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   d5260:	4642      	mov	r2, r8
   d5262:	210a      	movs	r1, #10
   d5264:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5268:	f7ff fcf4 	bl	d4c54 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
   d526c:	b930      	cbnz	r0, d527c <bme680_set_sensor_settings+0x296>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d526e:	4623      	mov	r3, r4
   d5270:	2201      	movs	r2, #1
   d5272:	f10d 0107 	add.w	r1, sp, #7
   d5276:	2071      	movs	r0, #113	; 0x71
   d5278:	f7ff fcfb 	bl	d4c72 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
   d527c:	0672      	lsls	r2, r6, #25
   d527e:	d50b      	bpl.n	d5298 <bme680_set_sensor_settings+0x2b2>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   d5280:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   d5284:	011b      	lsls	r3, r3, #4
   d5286:	f003 0210 	and.w	r2, r3, #16
   d528a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d528e:	f023 0310 	bic.w	r3, r3, #16
   d5292:	4313      	orrs	r3, r2
   d5294:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
   d5298:	0633      	lsls	r3, r6, #24
   d529a:	d50a      	bpl.n	d52b2 <bme680_set_sensor_settings+0x2cc>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   d529c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d52a0:	f023 020f 	bic.w	r2, r3, #15
   d52a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d52a8:	f003 030f 	and.w	r3, r3, #15
   d52ac:	4313      	orrs	r3, r2
   d52ae:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d52b2:	ab08      	add	r3, sp, #32
   d52b4:	442b      	add	r3, r5
   d52b6:	2271      	movs	r2, #113	; 0x71
   d52b8:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d52bc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
   d52be:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d52c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d52c6:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
   d52c8:	b928      	cbnz	r0, d52d6 <bme680_set_sensor_settings+0x2f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   d52ca:	4623      	mov	r3, r4
   d52cc:	462a      	mov	r2, r5
   d52ce:	a906      	add	r1, sp, #24
   d52d0:	a804      	add	r0, sp, #16
   d52d2:	f7ff fcf2 	bl	d4cba <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   d52d6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
   d52da:	b008      	add	sp, #32
   d52dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d52e0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d52e0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d52e2:	4b18      	ldr	r3, [pc, #96]	; (d5344 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d52e4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d52e6:	6818      	ldr	r0, [r3, #0]
   d52e8:	889b      	ldrh	r3, [r3, #4]
   d52ea:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d52ee:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d52f2:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d52f4:	aa02      	add	r2, sp, #8
   d52f6:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d52f8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d52fc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d5300:	a802      	add	r0, sp, #8
   d5302:	4402      	add	r2, r0
   d5304:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d5308:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d530a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   d530e:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   d5310:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d5314:	4413      	add	r3, r2
   d5316:	f240 72ab 	movw	r2, #1963	; 0x7ab
   d531a:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d531c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d5320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d5324:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d5326:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
   d532a:	3301      	adds	r3, #1
   d532c:	b29b      	uxth	r3, r3
   d532e:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   d5330:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   d5334:	b11a      	cbz	r2, d533e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   d5336:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   d533a:	4413      	add	r3, r2
   d533c:	8023      	strh	r3, [r4, #0]
	}
}
   d533e:	b002      	add	sp, #8
   d5340:	bd10      	pop	{r4, pc}
   d5342:	bf00      	nop
   d5344:	000da8b5 	.word	0x000da8b5

000d5348 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d5348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d534c:	4680      	mov	r8, r0
   d534e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d5350:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d5352:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d5354:	f7ff fc1f 	bl	d4b96 <null_ptr_check>
	if (rslt == BME680_OK) {
   d5358:	4605      	mov	r5, r0
   d535a:	2800      	cmp	r0, #0
   d535c:	f040 8167 	bne.w	d562e <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   d5360:	af04      	add	r7, sp, #16
   d5362:	4601      	mov	r1, r0
   d5364:	220f      	movs	r2, #15
   d5366:	4638      	mov	r0, r7
   d5368:	f005 f877 	bl	da45a <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d536c:	4620      	mov	r0, r4
   d536e:	f7ff fc12 	bl	d4b96 <null_ptr_check>
   d5372:	260a      	movs	r6, #10
   d5374:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   d5376:	2d00      	cmp	r5, #0
   d5378:	f040 8153 	bne.w	d5622 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d537c:	4623      	mov	r3, r4
   d537e:	220f      	movs	r2, #15
   d5380:	4639      	mov	r1, r7
   d5382:	201d      	movs	r0, #29
   d5384:	f7ff fc75 	bl	d4c72 <bme680_get_regs>
   d5388:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d538a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d538e:	f89d e01e 	ldrb.w	lr, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d5392:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   d5396:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d539a:	f89d b015 	ldrb.w	fp, [sp, #21]
   d539e:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   d53a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d53a6:	f000 030f 	and.w	r3, r0, #15
   d53aa:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
   d53ae:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d53b2:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d53b6:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d53ba:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d53bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d53c6:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d53c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d53cc:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d53ce:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d53d2:	f003 0a20 	and.w	sl, r3, #32
   d53d6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   d53da:	ea40 000a 	orr.w	r0, r0, sl
   d53de:	f003 0310 	and.w	r3, r3, #16
   d53e2:	4318      	orrs	r0, r3
   d53e4:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
   d53e6:	2800      	cmp	r0, #0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d53e8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
   d53ec:	f280 8116 	bge.w	d561c <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d53f0:	0912      	lsrs	r2, r2, #4
   d53f2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   d53f6:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
   d53fa:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d53fc:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d5400:	0049      	lsls	r1, r1, #1
   d5402:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d5406:	460a      	mov	r2, r1
   d5408:	17cb      	asrs	r3, r1, #31
   d540a:	105b      	asrs	r3, r3, #1
   d540c:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d5410:	fb02 f603 	mul.w	r6, r2, r3
   d5414:	fba2 2302 	umull	r2, r3, r2, r2
   d5418:	ea4f 3a12 	mov.w	sl, r2, lsr #12
   d541c:	f994 201a 	ldrsb.w	r2, [r4, #26]
   d5420:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   d5424:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
   d5428:	ea4f 3b23 	mov.w	fp, r3, asr #12
   d542c:	0113      	lsls	r3, r2, #4
   d542e:	17df      	asrs	r7, r3, #31
   d5430:	fb0a f607 	mul.w	r6, sl, r7
   d5434:	fb03 660b 	mla	r6, r3, fp, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d5438:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d543c:	fbaa 2303 	umull	r2, r3, sl, r3
   d5440:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d5442:	0ac0      	lsrs	r0, r0, #11
   d5444:	0b92      	lsrs	r2, r2, #14
   d5446:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   d544a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
   d544e:	1883      	adds	r3, r0, r2
   d5450:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
   d5452:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5456:	3380      	adds	r3, #128	; 0x80
   d5458:	121b      	asrs	r3, r3, #8
   d545a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d545e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d5460:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d5464:	105b      	asrs	r3, r3, #1
   d5466:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d546a:	109a      	asrs	r2, r3, #2
   d546c:	4352      	muls	r2, r2
   d546e:	12d1      	asrs	r1, r2, #11
   d5470:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d5472:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
   d5476:	4359      	muls	r1, r3
   d5478:	0049      	lsls	r1, r1, #1
   d547a:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   d547e:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
   d5482:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d5484:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5488:	1352      	asrs	r2, r2, #13
   d548a:	0140      	lsls	r0, r0, #5
   d548c:	4342      	muls	r2, r0
   d548e:	10d2      	asrs	r2, r2, #3
   d5490:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d5494:	149b      	asrs	r3, r3, #18
   d5496:	8ba2      	ldrh	r2, [r4, #28]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d5498:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d549c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d54a0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
   d54a2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   d54a6:	9a00      	ldr	r2, [sp, #0]
   d54a8:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
   d54ac:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
   d54b0:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
   d54b4:	0412      	lsls	r2, r2, #16
   d54b6:	eb02 01a1 	add.w	r1, r2, r1, asr #2
   d54ba:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   d54be:	f640 4235 	movw	r2, #3125	; 0xc35
   d54c2:	eba9 3121 	sub.w	r1, r9, r1, asr #12
   d54c6:	4351      	muls	r1, r2
   d54c8:	13db      	asrs	r3, r3, #15
   d54ca:	fbb1 f3f3 	udiv	r3, r1, r3
   d54ce:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
   d54d0:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d54d2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d54d6:	4349      	muls	r1, r1
   d54d8:	1349      	asrs	r1, r1, #13
   d54da:	434a      	muls	r2, r1
   d54dc:	1099      	asrs	r1, r3, #2
   d54de:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d54e0:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d54e2:	1349      	asrs	r1, r1, #13
   d54e4:	eb01 3122 	add.w	r1, r1, r2, asr #12
   d54e8:	fb06 f206 	mul.w	r2, r6, r6
   d54ec:	4356      	muls	r6, r2
   d54ee:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   d54f2:	4372      	muls	r2, r6
   d54f4:	eb01 4262 	add.w	r2, r1, r2, asr #17
   d54f8:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
   d54fc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   d5500:	eb03 1322 	add.w	r3, r3, r2, asr #4
   d5504:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d5508:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d550a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   d550e:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d5512:	8967      	ldrh	r7, [r4, #10]
   d5514:	8926      	ldrh	r6, [r4, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d5516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d551a:	3380      	adds	r3, #128	; 0x80
   d551c:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d551e:	2264      	movs	r2, #100	; 0x64
   d5520:	4359      	muls	r1, r3
   d5522:	fb91 f1f2 	sdiv	r1, r1, r2
   d5526:	4359      	muls	r1, r3
   d5528:	4358      	muls	r0, r3
   d552a:	1189      	asrs	r1, r1, #6
   d552c:	fb90 f0f2 	sdiv	r0, r0, r2
   d5530:	fb91 f1f2 	sdiv	r1, r1, r2
   d5534:	4401      	add	r1, r0
   d5536:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
   d553a:	4379      	muls	r1, r7
   d553c:	128f      	asrs	r7, r1, #10
   d553e:	9801      	ldr	r0, [sp, #4]
   d5540:	9902      	ldr	r1, [sp, #8]
   d5542:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   d5546:	f994 100c 	ldrsb.w	r1, [r4, #12]
   d554a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
   d554e:	4359      	muls	r1, r3
   d5550:	fb91 f1f2 	sdiv	r1, r1, r2
   d5554:	eba6 0061 	sub.w	r0, r6, r1, asr #1
   d5558:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d555c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5560:	4343      	muls	r3, r0
   d5562:	fb93 f2f2 	sdiv	r2, r3, r2
   d5566:	7be3      	ldrb	r3, [r4, #15]
   d5568:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   d556c:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   d556e:	435b      	muls	r3, r3
   d5570:	1112      	asrs	r2, r2, #4
   d5572:	129b      	asrs	r3, r3, #10
   d5574:	4353      	muls	r3, r2
   d5576:	eb01 0363 	add.w	r3, r1, r3, asr #1
   d557a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d557e:	129b      	asrs	r3, r3, #10
   d5580:	4353      	muls	r3, r2
   d5582:	131b      	asrs	r3, r3, #12
   d5584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
   d5588:	4a2b      	ldr	r2, [pc, #172]	; (d5638 <bme680_get_sensor_data+0x2f0>)
   d558a:	4293      	cmp	r3, r2
   d558c:	bfd4      	ite	le
   d558e:	f8c8 300c 	strle.w	r3, [r8, #12]
   d5592:	f8c8 200c 	strgt.w	r2, [r8, #12]
   d5596:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d559a:	2205      	movs	r2, #5
   d559c:	f240 503c 	movw	r0, #1340	; 0x53c
   d55a0:	2100      	movs	r1, #0
   d55a2:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
   d55a6:	f00e 060f 	and.w	r6, lr, #15
   d55aa:	4b24      	ldr	r3, [pc, #144]	; (d563c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d55ac:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   d55b0:	fba0 2307 	umull	r2, r3, r0, r7
   d55b4:	fb07 3301 	mla	r3, r7, r1, r3
   d55b8:	0c10      	lsrs	r0, r2, #16
   d55ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   d55be:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d55c0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d55c2:	4f1f      	ldr	r7, [pc, #124]	; (d5640 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d55c4:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
   d55c8:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
   d55cc:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d55d0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d55d4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   d55d8:	f04f 0300 	mov.w	r3, #0

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d55dc:	fbae 6700 	umull	r6, r7, lr, r0
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d55e0:	f143 33ff 	adc.w	r3, r3, #4294967295
   d55e4:	1812      	adds	r2, r2, r0
   d55e6:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d55e8:	fb0e 7701 	mla	r7, lr, r1, r7
   d55ec:	0a70      	lsrs	r0, r6, #9
   d55ee:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   d55f2:	1279      	asrs	r1, r7, #9
   d55f4:	105f      	asrs	r7, r3, #1
   d55f6:	ea4f 0632 	mov.w	r6, r2, rrx
   d55fa:	1980      	adds	r0, r0, r6
   d55fc:	4179      	adcs	r1, r7
   d55fe:	f004 fd4f 	bl	da0a0 <__aeabi_ldivmod>
   d5602:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
   d5606:	b995      	cbnz	r5, d562e <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
   d5608:	f998 3000 	ldrsb.w	r3, [r8]
   d560c:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
   d560e:	bfba      	itte	lt
   d5610:	2301      	movlt	r3, #1
   d5612:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
   d5616:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
   d561a:	e008      	b.n	d562e <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   d561c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d561e:	200a      	movs	r0, #10
   d5620:	4798      	blx	r3
   d5622:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
   d5624:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5628:	f47f aea5 	bne.w	d5376 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   d562c:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
   d562e:	4628      	mov	r0, r5
   d5630:	b009      	add	sp, #36	; 0x24
   d5632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5636:	bf00      	nop
   d5638:	000186a0 	.word	0x000186a0
   d563c:	2003ddd8 	.word	0x2003ddd8
   d5640:	2003de18 	.word	0x2003de18

000d5644 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
   d5644:	f001 bd6c 	b.w	d7120 <delay>

000d5648 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d564a:	4607      	mov	r7, r0
   d564c:	4614      	mov	r4, r2
   d564e:	461d      	mov	r5, r3
   d5650:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
   d5652:	f002 fd59 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5656:	4639      	mov	r1, r7
   d5658:	f002 fae9 	bl	d7c2e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d565c:	f002 fd54 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5660:	6803      	ldr	r3, [r0, #0]
   d5662:	4631      	mov	r1, r6
   d5664:	689b      	ldr	r3, [r3, #8]
   d5666:	4798      	blx	r3
   d5668:	4425      	add	r5, r4
  while (len--) {
   d566a:	42ac      	cmp	r4, r5
   d566c:	d007      	beq.n	d567e <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
   d566e:	f002 fd4b 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5672:	6803      	ldr	r3, [r0, #0]
   d5674:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5678:	689b      	ldr	r3, [r3, #8]
   d567a:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
   d567c:	e7f5      	b.n	d566a <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
   d567e:	f002 fd43 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5682:	f002 fadf 	bl	d7c44 <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5686:	2000      	movs	r0, #0
   d5688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d568c <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
   d5690:	4d1b      	ldr	r5, [pc, #108]	; (d5700 <_ZL12spi_transferh+0x74>)
   d5692:	f995 3000 	ldrsb.w	r3, [r5]
   d5696:	3301      	adds	r3, #1
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5698:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
   d569a:	d106      	bne.n	d56aa <_ZL12spi_transferh+0x1e>
    return SPI.transfer(x);
   d569c:	f002 fcfa 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d56a0:	4641      	mov	r1, r8
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d56a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
   d56a6:	f001 bb3b 	b.w	d6d20 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d56aa:	f8df 9058 	ldr.w	r9, [pc, #88]	; d5704 <_ZL12spi_transferh+0x78>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d56ae:	f8df a058 	ldr.w	sl, [pc, #88]	; d5708 <_ZL12spi_transferh+0x7c>
   d56b2:	2607      	movs	r6, #7
   d56b4:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
   d56b6:	f995 0000 	ldrsb.w	r0, [r5]
   d56ba:	2100      	movs	r1, #0
   d56bc:	b280      	uxth	r0, r0
   d56be:	f002 fc9a 	bl	d7ff6 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d56c2:	2701      	movs	r7, #1
   d56c4:	f999 0000 	ldrsb.w	r0, [r9]
   d56c8:	fa07 f106 	lsl.w	r1, r7, r6
   d56cc:	ea01 0108 	and.w	r1, r1, r8
   d56d0:	b280      	uxth	r0, r0
   d56d2:	f002 fc90 	bl	d7ff6 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
   d56d6:	f995 0000 	ldrsb.w	r0, [r5]
   d56da:	4639      	mov	r1, r7
   d56dc:	b280      	uxth	r0, r0
   d56de:	f002 fc8a 	bl	d7ff6 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d56e2:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d56e6:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d56e8:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d56ea:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d56ec:	f002 fc9c 	bl	d8028 <digitalRead>
   d56f0:	b100      	cbz	r0, d56f4 <_ZL12spi_transferh+0x68>
      reply |= 1;
   d56f2:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d56f4:	f116 36ff 	adds.w	r6, r6, #4294967295
   d56f8:	d2dd      	bcs.n	d56b6 <_ZL12spi_transferh+0x2a>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d56fa:	4620      	mov	r0, r4
   d56fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5700:	2003e3cd 	.word	0x2003e3cd
   d5704:	2003e3ce 	.word	0x2003e3ce
   d5708:	2003e3cc 	.word	0x2003e3cc

000d570c <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5710:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5712:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5714:	4615      	mov	r5, r2
   d5716:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5718:	4607      	mov	r7, r0
   d571a:	f002 fc6c 	bl	d7ff6 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d571e:	4b19      	ldr	r3, [pc, #100]	; (d5784 <_ZL9spi_writehhPht+0x78>)
   d5720:	f993 2000 	ldrsb.w	r2, [r3]
   d5724:	3201      	adds	r2, #1
   d5726:	461c      	mov	r4, r3
   d5728:	d112      	bne.n	d5750 <_ZL9spi_writehhPht+0x44>
    SPI.begin();
   d572a:	f002 fcb3 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d572e:	f001 fa55 	bl	d6bdc <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d5732:	f002 fcaf 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d5736:	2140      	movs	r1, #64	; 0x40
   d5738:	f001 face 	bl	d6cd8 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d573c:	f002 fcaa 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d5740:	2101      	movs	r1, #1
   d5742:	f001 fa5c 	bl	d6bfe <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d5746:	f002 fca5 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d574a:	2100      	movs	r1, #0
   d574c:	f001 fa68 	bl	d6c20 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d5750:	4640      	mov	r0, r8
   d5752:	f7ff ff9b 	bl	d568c <_ZL12spi_transferh>
   d5756:	442e      	add	r6, r5
  while (len--) {
   d5758:	42b5      	cmp	r5, r6
   d575a:	d004      	beq.n	d5766 <_ZL9spi_writehhPht+0x5a>
    spi_transfer(*reg_data);
   d575c:	f815 0b01 	ldrb.w	r0, [r5], #1
   d5760:	f7ff ff94 	bl	d568c <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
   d5764:	e7f8      	b.n	d5758 <_ZL9spi_writehhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d5766:	f994 3000 	ldrsb.w	r3, [r4]
   d576a:	3301      	adds	r3, #1
   d576c:	d103      	bne.n	d5776 <_ZL9spi_writehhPht+0x6a>
    SPI.endTransaction();
   d576e:	f002 fc91 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d5772:	f001 fa66 	bl	d6c42 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d5776:	4638      	mov	r0, r7
   d5778:	2101      	movs	r1, #1
   d577a:	f002 fc3c 	bl	d7ff6 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d577e:	2000      	movs	r0, #0
   d5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5784:	2003e3cd 	.word	0x2003e3cd

000d5788 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d578c:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d578e:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5790:	4615      	mov	r5, r2
   d5792:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5794:	4607      	mov	r7, r0
   d5796:	f002 fc2e 	bl	d7ff6 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d579a:	4b1a      	ldr	r3, [pc, #104]	; (d5804 <_ZL8spi_readhhPht+0x7c>)
   d579c:	f993 2000 	ldrsb.w	r2, [r3]
   d57a0:	3201      	adds	r2, #1
   d57a2:	461c      	mov	r4, r3
   d57a4:	d112      	bne.n	d57cc <_ZL8spi_readhhPht+0x44>
    SPI.begin();
   d57a6:	f002 fc75 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d57aa:	f001 fa17 	bl	d6bdc <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d57ae:	f002 fc71 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d57b2:	2140      	movs	r1, #64	; 0x40
   d57b4:	f001 fa90 	bl	d6cd8 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d57b8:	f002 fc6c 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d57bc:	2101      	movs	r1, #1
   d57be:	f001 fa1e 	bl	d6bfe <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d57c2:	f002 fc67 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d57c6:	2100      	movs	r1, #0
   d57c8:	f001 fa2a 	bl	d6c20 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d57cc:	4640      	mov	r0, r8
   d57ce:	f7ff ff5d 	bl	d568c <_ZL12spi_transferh>
   d57d2:	442e      	add	r6, r5

  while (len--) {
   d57d4:	42b5      	cmp	r5, r6
   d57d6:	d005      	beq.n	d57e4 <_ZL8spi_readhhPht+0x5c>
    *reg_data = spi_transfer(0x00);
   d57d8:	2000      	movs	r0, #0
   d57da:	f7ff ff57 	bl	d568c <_ZL12spi_transferh>
   d57de:	f805 0b01 	strb.w	r0, [r5], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
   d57e2:	e7f7      	b.n	d57d4 <_ZL8spi_readhhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d57e4:	f994 3000 	ldrsb.w	r3, [r4]
   d57e8:	3301      	adds	r3, #1
   d57ea:	d103      	bne.n	d57f4 <_ZL8spi_readhhPht+0x6c>
    SPI.endTransaction();
   d57ec:	f002 fc52 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d57f0:	f001 fa27 	bl	d6c42 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d57f4:	4638      	mov	r0, r7
   d57f6:	2101      	movs	r1, #1
   d57f8:	f002 fbfd 	bl	d7ff6 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d57fc:	2000      	movs	r0, #0
   d57fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5802:	bf00      	nop
   d5804:	2003e3cd 	.word	0x2003e3cd

000d5808 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d580a:	4606      	mov	r6, r0
   d580c:	4615      	mov	r5, r2
   d580e:	461c      	mov	r4, r3
   d5810:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
   d5812:	f002 fc79 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5816:	4631      	mov	r1, r6
   d5818:	f002 fa09 	bl	d7c2e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d581c:	f002 fc74 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5820:	6803      	ldr	r3, [r0, #0]
   d5822:	4639      	mov	r1, r7
   d5824:	689b      	ldr	r3, [r3, #8]
   d5826:	4798      	blx	r3
  Wire.endTransmission();
   d5828:	f002 fc6e 	bl	d8108 <_Z19__fetch_global_Wirev>
   d582c:	f002 fa0a 	bl	d7c44 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
   d5830:	f002 fc6a 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5834:	b2e2      	uxtb	r2, r4
   d5836:	4631      	mov	r1, r6
   d5838:	f002 f9f6 	bl	d7c28 <_ZN7TwoWire11requestFromEhj>
   d583c:	4284      	cmp	r4, r0
   d583e:	d10a      	bne.n	d5856 <_ZL8i2c_readhhPht+0x4e>
   d5840:	442c      	add	r4, r5
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
   d5842:	42a5      	cmp	r5, r4
   d5844:	d009      	beq.n	d585a <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
   d5846:	f002 fc5f 	bl	d8108 <_Z19__fetch_global_Wirev>
   d584a:	6803      	ldr	r3, [r0, #0]
   d584c:	695b      	ldr	r3, [r3, #20]
   d584e:	4798      	blx	r3
   d5850:	f805 0b01 	strb.w	r0, [r5], #1
   d5854:	e7f5      	b.n	d5842 <_ZL8i2c_readhhPht+0x3a>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
   d5856:	2001      	movs	r0, #1
   d5858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
   d585a:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5860 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
   d5860:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
   d5862:	4907      	ldr	r1, [pc, #28]	; (d5880 <_ZN15Adafruit_BME680C1Ea+0x20>)
   d5864:	22ff      	movs	r2, #255	; 0xff
   d5866:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
   d5868:	4906      	ldr	r1, [pc, #24]	; (d5884 <_ZN15Adafruit_BME680C1Ea+0x24>)
   d586a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
   d586c:	4906      	ldr	r1, [pc, #24]	; (d5888 <_ZN15Adafruit_BME680C1Ea+0x28>)
   d586e:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
   d5870:	2200      	movs	r2, #0
   d5872:	7502      	strb	r2, [r0, #20]
   d5874:	74c2      	strb	r2, [r0, #19]
   d5876:	7482      	strb	r2, [r0, #18]
   d5878:	7442      	strb	r2, [r0, #17]
   d587a:	7402      	strb	r2, [r0, #16]
}
   d587c:	4770      	bx	lr
   d587e:	bf00      	nop
   d5880:	2003e3ce 	.word	0x2003e3ce
   d5884:	2003e3cc 	.word	0x2003e3cc
   d5888:	2003e3cd 	.word	0x2003e3cd

000d588c <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
   d588c:	b538      	push	{r3, r4, r5, lr}
   d588e:	4604      	mov	r4, r0
   d5890:	460d      	mov	r5, r1
  _i2caddr = addr;
   d5892:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
   d5894:	f990 001c 	ldrsb.w	r0, [r0, #28]
   d5898:	1c42      	adds	r2, r0, #1
   d589a:	d10c      	bne.n	d58b6 <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
   d589c:	f002 fc34 	bl	d8108 <_Z19__fetch_global_Wirev>
   d58a0:	f002 f98e 	bl	d7bc0 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
   d58a4:	2301      	movs	r3, #1
   d58a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
   d58aa:	4b2e      	ldr	r3, [pc, #184]	; (d5964 <_ZN15Adafruit_BME6805beginEh+0xd8>)
   d58ac:	66a3      	str	r3, [r4, #104]	; 0x68

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
   d58ae:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
    gas_sensor.write = &i2c_write;
   d58b2:	4b2d      	ldr	r3, [pc, #180]	; (d5968 <_ZN15Adafruit_BME6805beginEh+0xdc>)
   d58b4:	e02e      	b.n	d5914 <_ZN15Adafruit_BME6805beginEh+0x88>
  } else {
    digitalWrite(_cs, HIGH);
   d58b6:	2101      	movs	r1, #1
   d58b8:	b280      	uxth	r0, r0
   d58ba:	f002 fb9c 	bl	d7ff6 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d58be:	f994 001c 	ldrsb.w	r0, [r4, #28]
   d58c2:	2101      	movs	r1, #1
   d58c4:	b280      	uxth	r0, r0
   d58c6:	f002 fb85 	bl	d7fd4 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
   d58ca:	4b28      	ldr	r3, [pc, #160]	; (d596c <_ZN15Adafruit_BME6805beginEh+0xe0>)
   d58cc:	f993 0000 	ldrsb.w	r0, [r3]
   d58d0:	1c43      	adds	r3, r0, #1
   d58d2:	d104      	bne.n	d58de <_ZN15Adafruit_BME6805beginEh+0x52>
      // hardware SPI
      SPI.begin();
   d58d4:	f002 fbde 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d58d8:	f001 f980 	bl	d6bdc <_ZN8SPIClass5beginEv>
   d58dc:	e011      	b.n	d5902 <_ZN15Adafruit_BME6805beginEh+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
   d58de:	2101      	movs	r1, #1
   d58e0:	b280      	uxth	r0, r0
   d58e2:	f002 fb77 	bl	d7fd4 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
   d58e6:	4b22      	ldr	r3, [pc, #136]	; (d5970 <_ZN15Adafruit_BME6805beginEh+0xe4>)
   d58e8:	f993 0000 	ldrsb.w	r0, [r3]
   d58ec:	2101      	movs	r1, #1
   d58ee:	b280      	uxth	r0, r0
   d58f0:	f002 fb70 	bl	d7fd4 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
   d58f4:	4b1f      	ldr	r3, [pc, #124]	; (d5974 <_ZN15Adafruit_BME6805beginEh+0xe8>)
   d58f6:	f993 0000 	ldrsb.w	r0, [r3]
   d58fa:	2100      	movs	r1, #0
   d58fc:	b280      	uxth	r0, r0
   d58fe:	f002 fb69 	bl	d7fd4 <pinMode>
    }

    gas_sensor.dev_id = _cs;
   d5902:	7f23      	ldrb	r3, [r4, #28]
   d5904:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
   d5908:	2300      	movs	r3, #0
   d590a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
   d590e:	4b1a      	ldr	r3, [pc, #104]	; (d5978 <_ZN15Adafruit_BME6805beginEh+0xec>)
   d5910:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
   d5912:	4b1a      	ldr	r3, [pc, #104]	; (d597c <_ZN15Adafruit_BME6805beginEh+0xf0>)
   d5914:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
   d5916:	4b1a      	ldr	r3, [pc, #104]	; (d5980 <_ZN15Adafruit_BME6805beginEh+0xf4>)
   d5918:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
   d591a:	f104 0020 	add.w	r0, r4, #32
   d591e:	f7ff fa42 	bl	d4da6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
   d5922:	b9e0      	cbnz	r0, d595e <_ZN15Adafruit_BME6805beginEh+0xd2>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
   d5924:	2304      	movs	r3, #4
   d5926:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
   d592a:	2302      	movs	r3, #2
   d592c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
   d5930:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5934:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d5938:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d593a:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d593c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5940:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d5942:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
   d5944:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d5946:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
   d594a:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
   d594c:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d594e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d5952:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
   d5956:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d5958:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
   d595c:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
   d595e:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
   d5960:	bd38      	pop	{r3, r4, r5, pc}
   d5962:	bf00      	nop
   d5964:	000d5809 	.word	0x000d5809
   d5968:	000d5649 	.word	0x000d5649
   d596c:	2003e3cd 	.word	0x2003e3cd
   d5970:	2003e3ce 	.word	0x2003e3ce
   d5974:	2003e3cc 	.word	0x2003e3cc
   d5978:	000d5789 	.word	0x000d5789
   d597c:	000d570d 	.word	0x000d570d
   d5980:	000d5645 	.word	0x000d5645

000d5984 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5984:	b530      	push	{r4, r5, lr}
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d5986:	2301      	movs	r3, #1
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5988:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d598a:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d598e:	7ca3      	ldrb	r3, [r4, #18]

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  uint8_t set_required_settings = 0;
   d5990:	7c40      	ldrb	r0, [r0, #17]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5992:	b087      	sub	sp, #28
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d5994:	b10b      	cbz	r3, d599a <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
   d5996:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
   d599a:	7ce3      	ldrb	r3, [r4, #19]
   d599c:	b10b      	cbz	r3, d59a2 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
   d599e:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
   d59a2:	7c23      	ldrb	r3, [r4, #16]
   d59a4:	b10b      	cbz	r3, d59aa <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
   d59a6:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
   d59aa:	7d23      	ldrb	r3, [r4, #20]
   d59ac:	b10b      	cbz	r3, d59b2 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
   d59ae:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
   d59b2:	f104 0520 	add.w	r5, r4, #32
   d59b6:	4629      	mov	r1, r5
   d59b8:	f7ff fb15 	bl	d4fe6 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
   d59bc:	b108      	cbz	r0, d59c2 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
   d59be:	2000      	movs	r0, #0
   d59c0:	e04f      	b.n	d5a62 <_ZN15Adafruit_BME68014performReadingEv+0xde>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
   d59c2:	4628      	mov	r0, r5
   d59c4:	f7ff fad0 	bl	d4f68 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
   d59c8:	2800      	cmp	r0, #0
   d59ca:	d1f8      	bne.n	d59be <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
   d59cc:	4629      	mov	r1, r5
   d59ce:	f10d 0002 	add.w	r0, sp, #2
   d59d2:	f7ff fc85 	bl	d52e0 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
   d59d6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d59da:	0040      	lsls	r0, r0, #1
   d59dc:	f001 fba0 	bl	d7120 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
   d59e0:	4629      	mov	r1, r5
   d59e2:	a801      	add	r0, sp, #4
   d59e4:	f7ff fcb0 	bl	d5348 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
   d59e8:	2800      	cmp	r0, #0
   d59ea:	d1e8      	bne.n	d59be <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
   d59ec:	7c63      	ldrb	r3, [r4, #17]
   d59ee:	b15b      	cbz	r3, d5a08 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
   d59f0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   d59f4:	f003 ffa6 	bl	d9944 <__aeabi_i2d>
   d59f8:	2200      	movs	r2, #0
   d59fa:	4b1b      	ldr	r3, [pc, #108]	; (d5a68 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
   d59fc:	f004 f932 	bl	d9c64 <__aeabi_ddiv>
   d5a00:	f004 fafe 	bl	da000 <__aeabi_d2f>
   d5a04:	6020      	str	r0, [r4, #0]
   d5a06:	e001      	b.n	d5a0c <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
   d5a08:	4b18      	ldr	r3, [pc, #96]	; (d5a6c <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5a0a:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
   d5a0c:	7ca3      	ldrb	r3, [r4, #18]
   d5a0e:	b153      	cbz	r3, d5a26 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
   d5a10:	9804      	ldr	r0, [sp, #16]
   d5a12:	f003 ff87 	bl	d9924 <__aeabi_ui2d>
   d5a16:	2200      	movs	r2, #0
   d5a18:	4b15      	ldr	r3, [pc, #84]	; (d5a70 <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d5a1a:	f004 f923 	bl	d9c64 <__aeabi_ddiv>
   d5a1e:	f004 faef 	bl	da000 <__aeabi_d2f>
   d5a22:	60a0      	str	r0, [r4, #8]
   d5a24:	e001      	b.n	d5a2a <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
   d5a26:	4b11      	ldr	r3, [pc, #68]	; (d5a6c <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5a28:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
   d5a2a:	7ce3      	ldrb	r3, [r4, #19]
   d5a2c:	b133      	cbz	r3, d5a3c <_ZN15Adafruit_BME68014performReadingEv+0xb8>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
   d5a2e:	eddd 7a03 	vldr	s15, [sp, #12]
   d5a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5a36:	edc4 7a01 	vstr	s15, [r4, #4]
   d5a3a:	e001      	b.n	d5a40 <_ZN15Adafruit_BME68014performReadingEv+0xbc>
  } else {
    pressure = NAN;
   d5a3c:	4b0b      	ldr	r3, [pc, #44]	; (d5a6c <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5a3e:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
   d5a40:	7d20      	ldrb	r0, [r4, #20]
   d5a42:	b168      	cbz	r0, d5a60 <_ZN15Adafruit_BME68014performReadingEv+0xdc>
    if (data.status & BME680_HEAT_STAB_MSK) {
   d5a44:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5a48:	06db      	lsls	r3, r3, #27
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d5a4a:	bf45      	ittet	mi
   d5a4c:	eddd 7a05 	vldrmi	s15, [sp, #20]
   d5a50:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
    } else {
      gas_resistance = 0;
   d5a54:	2300      	movpl	r3, #0

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
    if (data.status & BME680_HEAT_STAB_MSK) {
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d5a56:	edc4 7a03 	vstrmi	s15, [r4, #12]
    } else {
      gas_resistance = 0;
   d5a5a:	bf58      	it	pl
   d5a5c:	60e3      	strpl	r3, [r4, #12]
   d5a5e:	e000      	b.n	d5a62 <_ZN15Adafruit_BME68014performReadingEv+0xde>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
   d5a60:	2001      	movs	r0, #1
}
   d5a62:	b007      	add	sp, #28
   d5a64:	bd30      	pop	{r4, r5, pc}
   d5a66:	bf00      	nop
   d5a68:	40590000 	.word	0x40590000
   d5a6c:	7fc00000 	.word	0x7fc00000
   d5a70:	408f4000 	.word	0x408f4000

000d5a74 <_ZN15Adafruit_BME68015readTemperatureEv>:
/*!
    @brief Performs a reading and returns the ambient temperature.
    @return Temperature in degrees Centigrade
*/
/**************************************************************************/
float Adafruit_BME680::readTemperature(void) {
   d5a74:	b510      	push	{r4, lr}
   d5a76:	4604      	mov	r4, r0
  performReading();
   d5a78:	f7ff ff84 	bl	d5984 <_ZN15Adafruit_BME68014performReadingEv>
  return temperature;
}
   d5a7c:	ed94 0a00 	vldr	s0, [r4]
   d5a80:	bd10      	pop	{r4, pc}

000d5a82 <_ZN15Adafruit_BME68012readPressureEv>:
/*!
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
   d5a82:	b510      	push	{r4, lr}
   d5a84:	4604      	mov	r4, r0
  performReading();
   d5a86:	f7ff ff7d 	bl	d5984 <_ZN15Adafruit_BME68014performReadingEv>
  return pressure;
}
   d5a8a:	ed94 0a01 	vldr	s0, [r4, #4]
   d5a8e:	bd10      	pop	{r4, pc}

000d5a90 <_ZN15Adafruit_BME68012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @return Altitude in meters
*/
/**************************************************************************/
float Adafruit_BME680::readAltitude(float seaLevel)
{
   d5a90:	b510      	push	{r4, lr}
   d5a92:	4604      	mov	r4, r0
   d5a94:	ed2d 8b02 	vpush	{d8}
   d5a98:	eeb0 8a40 	vmov.f32	s16, s0
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
  performReading();
   d5a9c:	f7ff ff72 	bl	d5984 <_ZN15Adafruit_BME68014performReadingEv>
    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5aa0:	edd4 6a01 	vldr	s13, [r4, #4]
   d5aa4:	ed9f 7a14 	vldr	s14, [pc, #80]	; d5af8 <_ZN15Adafruit_BME68012readAltitudeEf+0x68>
   d5aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d5aac:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d5ab0:	ee17 0a10 	vmov	r0, s14
   d5ab4:	f003 ff58 	bl	d9968 <__aeabi_f2d>
   d5ab8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d5ae8 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>
   d5abc:	ec41 0b10 	vmov	d0, r0, r1
   d5ac0:	f002 fcb6 	bl	d8430 <pow>
   d5ac4:	2000      	movs	r0, #0
   d5ac6:	ec53 2b10 	vmov	r2, r3, d0
   d5aca:	490c      	ldr	r1, [pc, #48]	; (d5afc <_ZN15Adafruit_BME68012readAltitudeEf+0x6c>)
   d5acc:	f003 fdec 	bl	d96a8 <__aeabi_dsub>
   d5ad0:	a307      	add	r3, pc, #28	; (adr r3, d5af0 <_ZN15Adafruit_BME68012readAltitudeEf+0x60>)
   d5ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ad6:	f003 ff9b 	bl	d9a10 <__aeabi_dmul>
   d5ada:	f004 fa91 	bl	da000 <__aeabi_d2f>
}
   d5ade:	ecbd 8b02 	vpop	{d8}
   d5ae2:	ee00 0a10 	vmov	s0, r0
   d5ae6:	bd10      	pop	{r4, pc}
   d5ae8:	1a36e2eb 	.word	0x1a36e2eb
   d5aec:	3fc85bc0 	.word	0x3fc85bc0
   d5af0:	00000000 	.word	0x00000000
   d5af4:	40e5a540 	.word	0x40e5a540
   d5af8:	42c80000 	.word	0x42c80000
   d5afc:	3ff00000 	.word	0x3ff00000

000d5b00 <_ZN15Adafruit_BME68012readHumidityEv>:
/*!
    @brief Performs a reading and returns the relative humidity.
    @return Relative humidity as floating point
*/
/**************************************************************************/
float Adafruit_BME680::readHumidity(void) {
   d5b00:	b510      	push	{r4, lr}
   d5b02:	4604      	mov	r4, r0
  performReading();
   d5b04:	f7ff ff3e 	bl	d5984 <_ZN15Adafruit_BME68014performReadingEv>
  return humidity;
}
   d5b08:	ed94 0a02 	vldr	s0, [r4, #8]
   d5b0c:	bd10      	pop	{r4, pc}

000d5b0e <_ZN15Adafruit_BME6807readGasEv>:
/*!
    @brief Calculates the resistance of the MOX gas sensor.
    @return Resistance in Ohms
*/
/**************************************************************************/
uint32_t Adafruit_BME680::readGas(void) {
   d5b0e:	b510      	push	{r4, lr}
   d5b10:	4604      	mov	r4, r0
  performReading();
   d5b12:	f7ff ff37 	bl	d5984 <_ZN15Adafruit_BME68014performReadingEv>
  return gas_resistance;
   d5b16:	edd4 7a03 	vldr	s15, [r4, #12]
}
   d5b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d5b1e:	ee17 0a90 	vmov	r0, s15
   d5b22:	bd10      	pop	{r4, pc}

000d5b24 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5b24:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5b28:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
   d5b2c:	b101      	cbz	r1, d5b30 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
   d5b2e:	b90a      	cbnz	r2, d5b34 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
   d5b30:	2300      	movs	r3, #0
   d5b32:	e000      	b.n	d5b36 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d5b34:	2301      	movs	r3, #1
   d5b36:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
   d5b3a:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
   d5b3c:	2001      	movs	r0, #1
   d5b3e:	4770      	bx	lr

000d5b40 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b40:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
   d5b42:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5b44:	d807      	bhi.n	d5b56 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
   d5b46:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
   d5b4a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5b4c:	b909      	cbnz	r1, d5b52 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
   d5b4e:	7459      	strb	r1, [r3, #17]
   d5b50:	4770      	bx	lr
  else
    _tempEnabled = true;
   d5b52:	7458      	strb	r0, [r3, #17]
   d5b54:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b56:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
   d5b58:	4770      	bx	lr

000d5b5a <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b5a:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
   d5b5c:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5b5e:	d807      	bhi.n	d5b70 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
   d5b60:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
   d5b64:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5b66:	b909      	cbnz	r1, d5b6c <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
   d5b68:	7499      	strb	r1, [r3, #18]
   d5b6a:	4770      	bx	lr
  else
    _humEnabled = true;
   d5b6c:	7498      	strb	r0, [r3, #18]
   d5b6e:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b70:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
   d5b72:	4770      	bx	lr

000d5b74 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b74:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
   d5b76:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5b78:	d807      	bhi.n	d5b8a <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
   d5b7a:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
   d5b7e:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5b80:	b909      	cbnz	r1, d5b86 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
   d5b82:	74d9      	strb	r1, [r3, #19]
   d5b84:	4770      	bx	lr
  else
    _presEnabled = true;
   d5b86:	74d8      	strb	r0, [r3, #19]
   d5b88:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5b8a:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
   d5b8c:	4770      	bx	lr

000d5b8e <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5b8e:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
   d5b90:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5b92:	d807      	bhi.n	d5ba4 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
   d5b94:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
   d5b98:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
   d5b9a:	b909      	cbnz	r1, d5ba0 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
   d5b9c:	7419      	strb	r1, [r3, #16]
   d5b9e:	4770      	bx	lr
  else
    _filterEnabled = true;
   d5ba0:	7418      	strb	r0, [r3, #16]
   d5ba2:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5ba4:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
   d5ba6:	4770      	bx	lr

000d5ba8 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
   d5ba8:	f000 bd52 	b.w	d6650 <HAL_Pin_Map>

000d5bac <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5bac:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d5bae:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5bb0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d5bb4:	2c02      	cmp	r4, #2
   d5bb6:	d008      	beq.n	d5bca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d5bb8:	2c03      	cmp	r4, #3
   d5bba:	d00f      	beq.n	d5bdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d5bbc:	2c01      	cmp	r4, #1
   d5bbe:	d170      	bne.n	d5ca2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d5bc0:	8904      	ldrh	r4, [r0, #8]
   d5bc2:	3c01      	subs	r4, #1
   d5bc4:	1aa2      	subs	r2, r4, r2
   d5bc6:	b212      	sxth	r2, r2
      break;
   d5bc8:	e00c      	b.n	d5be4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5bca:	8944      	ldrh	r4, [r0, #10]
   d5bcc:	3c01      	subs	r4, #1
   d5bce:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d5bd0:	8904      	ldrh	r4, [r0, #8]
   d5bd2:	1ae4      	subs	r4, r4, r3
   d5bd4:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5bd6:	b212      	sxth	r2, r2
      x -= (w-1);
   d5bd8:	b209      	sxth	r1, r1
      break;
   d5bda:	e062      	b.n	d5ca2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d5bdc:	8944      	ldrh	r4, [r0, #10]
   d5bde:	1ae4      	subs	r4, r4, r3
   d5be0:	1a61      	subs	r1, r4, r1
   d5be2:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5be4:	2a00      	cmp	r2, #0
   d5be6:	db5b      	blt.n	d5ca0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d5be8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5bec:	4294      	cmp	r4, r2
   d5bee:	f340 8090 	ble.w	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5bf2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5bf4:	bfbe      	ittt	lt
   d5bf6:	185b      	addlt	r3, r3, r1
   d5bf8:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5bfa:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5bfc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d5c00:	18cc      	adds	r4, r1, r3
   d5c02:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5c04:	bfc4      	itt	gt
   d5c06:	1a43      	subgt	r3, r0, r1
   d5c08:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5c0a:	2b00      	cmp	r3, #0
   d5c0c:	f340 8081 	ble.w	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5c10:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5c12:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d5c14:	4f3f      	ldr	r7, [pc, #252]	; (d5d14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d5c16:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5c1a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5c1e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5c20:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5c24:	d017      	beq.n	d5c56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5c26:	f1c1 0108 	rsb	r1, r1, #8
   d5c2a:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5c2c:	493a      	ldr	r1, [pc, #232]	; (d5d18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5c2e:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5c30:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5c32:	bf3f      	itttt	cc
   d5c34:	ebc3 0e00 	rsbcc	lr, r3, r0
   d5c38:	21ff      	movcc	r1, #255	; 0xff
   d5c3a:	fa41 f10e 	asrcc.w	r1, r1, lr
   d5c3e:	400e      	andcc	r6, r1
   d5c40:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d5c42:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5c44:	bf0c      	ite	eq
   d5c46:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d5c48:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5c4a:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5c4c:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5c4e:	d360      	bcc.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d5c50:	1a18      	subs	r0, r3, r0
   d5c52:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d5c54:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5c56:	2b07      	cmp	r3, #7
   d5c58:	d917      	bls.n	d5c8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5c5a:	2d01      	cmp	r5, #1
   d5c5c:	bf0c      	ite	eq
   d5c5e:	20ff      	moveq	r0, #255	; 0xff
   d5c60:	2000      	movne	r0, #0
   d5c62:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5c66:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5c68:	3a08      	subs	r2, #8
   d5c6a:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5c6c:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5c6e:	f801 0c80 	strb.w	r0, [r1, #-128]
   d5c72:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5c76:	d8f7      	bhi.n	d5c68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5c78:	f1a3 0208 	sub.w	r2, r3, #8
   d5c7c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d5c80:	3201      	adds	r2, #1
   d5c82:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5c86:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5c8a:	2b00      	cmp	r3, #0
   d5c8c:	d041      	beq.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5c8e:	4a23      	ldr	r2, [pc, #140]	; (d5d1c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5c90:	5cd2      	ldrb	r2, [r2, r3]
   d5c92:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5c94:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5c96:	bf0c      	ite	eq
   d5c98:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5c9a:	4393      	bicne	r3, r2
   d5c9c:	7023      	strb	r3, [r4, #0]
   d5c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5ca2:	2a00      	cmp	r2, #0
   d5ca4:	db35      	blt.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5ca6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5caa:	4294      	cmp	r4, r2
   d5cac:	dd31      	ble.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5cae:	2900      	cmp	r1, #0
    w += x;
   d5cb0:	bfbc      	itt	lt
   d5cb2:	18c9      	addlt	r1, r1, r3
   d5cb4:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5cb6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5cba:	bfb8      	it	lt
   d5cbc:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5cbe:	18ce      	adds	r6, r1, r3
   d5cc0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5cc2:	bfc4      	itt	gt
   d5cc4:	1a63      	subgt	r3, r4, r1
   d5cc6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5cc8:	2b00      	cmp	r3, #0
   d5cca:	dd22      	ble.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5ccc:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d5cce:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d5cd2:	4810      	ldr	r0, [pc, #64]	; (d5d14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5cd4:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5cd8:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d5cda:	2001      	movs	r0, #1
   d5cdc:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d5ce0:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5ce2:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d5ce4:	d109      	bne.n	d5cfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d5ce6:	3b01      	subs	r3, #1
   d5ce8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d5cea:	1c5c      	adds	r4, r3, #1
   d5cec:	d011      	beq.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5cee:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5cf2:	4310      	orrs	r0, r2
   d5cf4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5cf8:	e7f5      	b.n	d5ce6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d5cfa:	43d2      	mvns	r2, r2
   d5cfc:	b2d2      	uxtb	r2, r2
   d5cfe:	3b01      	subs	r3, #1
   d5d00:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d5d02:	1c58      	adds	r0, r3, #1
   d5d04:	d005      	beq.n	d5d12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5d06:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5d0a:	4010      	ands	r0, r2
   d5d0c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5d10:	e7f5      	b.n	d5cfe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d5d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d14:	2003de68 	.word	0x2003de68
   d5d18:	2003de60 	.word	0x2003de60
   d5d1c:	2003de58 	.word	0x2003de58

000d5d20 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d5d22:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d24:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d5d28:	2c02      	cmp	r4, #2
   d5d2a:	d008      	beq.n	d5d3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d5d2c:	2c03      	cmp	r4, #3
   d5d2e:	d00f      	beq.n	d5d50 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d5d30:	2c01      	cmp	r4, #1
   d5d32:	d112      	bne.n	d5d5a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d5d34:	8904      	ldrh	r4, [r0, #8]
   d5d36:	1ae4      	subs	r4, r4, r3
   d5d38:	1aa2      	subs	r2, r4, r2
   d5d3a:	b212      	sxth	r2, r2
      break;
   d5d3c:	e06d      	b.n	d5e1a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d5d3e:	8904      	ldrh	r4, [r0, #8]
   d5d40:	3c01      	subs	r4, #1
   d5d42:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d5d44:	8944      	ldrh	r4, [r0, #10]
   d5d46:	1ae4      	subs	r4, r4, r3
   d5d48:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d5d4a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d5d4c:	b212      	sxth	r2, r2
      break;
   d5d4e:	e004      	b.n	d5d5a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d5d50:	8944      	ldrh	r4, [r0, #10]
   d5d52:	3c01      	subs	r4, #1
   d5d54:	1a61      	subs	r1, r4, r1
   d5d56:	b209      	sxth	r1, r1
      break;
   d5d58:	e05f      	b.n	d5e1a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5d5a:	2900      	cmp	r1, #0
   d5d5c:	db5c      	blt.n	d5e18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d5d5e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5d62:	428c      	cmp	r4, r1
   d5d64:	f340 8091 	ble.w	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5d68:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5d6a:	bfbc      	itt	lt
   d5d6c:	18d2      	addlt	r2, r2, r3
   d5d6e:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5d70:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d5d74:	bfb8      	it	lt
   d5d76:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5d78:	18d4      	adds	r4, r2, r3
   d5d7a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5d7c:	bfc4      	itt	gt
   d5d7e:	1a83      	subgt	r3, r0, r2
   d5d80:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5d82:	2b00      	cmp	r3, #0
   d5d84:	f340 8081 	ble.w	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5d88:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5d8a:	4e40      	ldr	r6, [pc, #256]	; (d5e8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5d8c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5d8e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d5d90:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5d94:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5d98:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5d9c:	d017      	beq.n	d5dce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5d9e:	f1c4 0408 	rsb	r4, r4, #8
   d5da2:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5da4:	4c3a      	ldr	r4, [pc, #232]	; (d5e90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5da6:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5da8:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5daa:	bf3f      	itttt	cc
   d5dac:	ebc2 0e00 	rsbcc	lr, r2, r0
   d5db0:	24ff      	movcc	r4, #255	; 0xff
   d5db2:	fa44 f40e 	asrcc.w	r4, r4, lr
   d5db6:	4027      	andcc	r7, r4
   d5db8:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d5dba:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5dbc:	bf0c      	ite	eq
   d5dbe:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d5dc0:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5dc2:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5dc4:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5dc6:	d360      	bcc.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d5dc8:	1a10      	subs	r0, r2, r0
   d5dca:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5dcc:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5dce:	2a07      	cmp	r2, #7
   d5dd0:	d917      	bls.n	d5e02 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5dd2:	2d01      	cmp	r5, #1
   d5dd4:	bf0c      	ite	eq
   d5dd6:	24ff      	moveq	r4, #255	; 0xff
   d5dd8:	2400      	movne	r4, #0
   d5dda:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d5dde:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5de0:	3908      	subs	r1, #8
   d5de2:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5de4:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5de6:	f800 4c80 	strb.w	r4, [r0, #-128]
   d5dea:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5dee:	d8f7      	bhi.n	d5de0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d5df0:	f1a2 0108 	sub.w	r1, r2, #8
   d5df4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d5df8:	3101      	adds	r1, #1
   d5dfa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d5dfe:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5e02:	2a00      	cmp	r2, #0
   d5e04:	d041      	beq.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5e06:	4923      	ldr	r1, [pc, #140]	; (d5e94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d5e08:	5c89      	ldrb	r1, [r1, r2]
   d5e0a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d5e0c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5e0e:	bf0c      	ite	eq
   d5e10:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d5e12:	438a      	bicne	r2, r1
   d5e14:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d5e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5e1a:	2900      	cmp	r1, #0
   d5e1c:	db35      	blt.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5e1e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5e22:	428c      	cmp	r4, r1
   d5e24:	dd31      	ble.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5e26:	2a00      	cmp	r2, #0
    w += x;
   d5e28:	bfbc      	itt	lt
   d5e2a:	18d2      	addlt	r2, r2, r3
   d5e2c:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5e2e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5e32:	bfb8      	it	lt
   d5e34:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5e36:	18d6      	adds	r6, r2, r3
   d5e38:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5e3a:	bfc4      	itt	gt
   d5e3c:	1aa3      	subgt	r3, r4, r2
   d5e3e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5e40:	2b00      	cmp	r3, #0
   d5e42:	dd22      	ble.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5e44:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d5e46:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d5e4a:	4810      	ldr	r0, [pc, #64]	; (d5e8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d5e4c:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5e50:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d5e52:	2201      	movs	r2, #1
   d5e54:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d5e58:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5e5a:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d5e5c:	d109      	bne.n	d5e72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d5e5e:	1e5a      	subs	r2, r3, #1
   d5e60:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d5e62:	1c5c      	adds	r4, r3, #1
   d5e64:	d011      	beq.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5e66:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5e6a:	430a      	orrs	r2, r1
   d5e6c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5e70:	e7f5      	b.n	d5e5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d5e72:	43c9      	mvns	r1, r1
   d5e74:	b2c9      	uxtb	r1, r1
   d5e76:	1e5a      	subs	r2, r3, #1
   d5e78:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d5e7a:	1c5a      	adds	r2, r3, #1
   d5e7c:	d005      	beq.n	d5e8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5e82:	400a      	ands	r2, r1
   d5e84:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5e88:	e7f5      	b.n	d5e76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d5e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e8c:	2003de68 	.word	0x2003de68
   d5e90:	2003de60 	.word	0x2003de60
   d5e94:	2003de58 	.word	0x2003de58

000d5e98 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5e9a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5e9c:	4606      	mov	r6, r0
   d5e9e:	4614      	mov	r4, r2
   d5ea0:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5ea2:	db3f      	blt.n	d5f24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5ea4:	f000 fbbc 	bl	d6620 <_ZN12Adafruit_GFX5widthEv>
   d5ea8:	4285      	cmp	r5, r0
   d5eaa:	da3b      	bge.n	d5f24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5eac:	2c00      	cmp	r4, #0
   d5eae:	db39      	blt.n	d5f24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5eb0:	4630      	mov	r0, r6
   d5eb2:	f000 fbb8 	bl	d6626 <_ZN12Adafruit_GFX6heightEv>
   d5eb6:	4284      	cmp	r4, r0
   d5eb8:	da34      	bge.n	d5f24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5eba:	4630      	mov	r0, r6
   d5ebc:	f000 fbae 	bl	d661c <_ZN12Adafruit_GFX11getRotationEv>
   d5ec0:	2802      	cmp	r0, #2
   d5ec2:	d127      	bne.n	d5f14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5ec4:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5ec6:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5ec8:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d5eca:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5ecc:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d5ece:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5ed0:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d5ed2:	b204      	sxth	r4, r0
   d5ed4:	e006      	b.n	d5ee4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5ed6:	2801      	cmp	r0, #1
   d5ed8:	d104      	bne.n	d5ee4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d5eda:	8933      	ldrh	r3, [r6, #8]
   d5edc:	3b01      	subs	r3, #1
   d5ede:	1b1b      	subs	r3, r3, r4
   d5ee0:	462c      	mov	r4, r5
   d5ee2:	b21d      	sxth	r5, r3
   d5ee4:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5ee6:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5ee8:	fb94 f0f0 	sdiv	r0, r4, r0
   d5eec:	b200      	sxth	r0, r0
   d5eee:	4b0e      	ldr	r3, [pc, #56]	; (d5f28 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5ef0:	f004 0207 	and.w	r2, r4, #7
   d5ef4:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5ef8:	d104      	bne.n	d5f04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5efa:	4097      	lsls	r7, r2
   d5efc:	5c5a      	ldrb	r2, [r3, r1]
   d5efe:	4317      	orrs	r7, r2
   d5f00:	545f      	strb	r7, [r3, r1]
   d5f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d5f04:	5c58      	ldrb	r0, [r3, r1]
   d5f06:	2701      	movs	r7, #1
   d5f08:	fa07 f202 	lsl.w	r2, r7, r2
   d5f0c:	ea20 0202 	bic.w	r2, r0, r2
   d5f10:	545a      	strb	r2, [r3, r1]
   d5f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5f14:	2803      	cmp	r0, #3
   d5f16:	d1de      	bne.n	d5ed6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d5f18:	8973      	ldrh	r3, [r6, #10]
   d5f1a:	3b01      	subs	r3, #1
   d5f1c:	1b5b      	subs	r3, r3, r5
   d5f1e:	4625      	mov	r5, r4
   d5f20:	b21c      	sxth	r4, r3
   d5f22:	e7df      	b.n	d5ee4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d5f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5f26:	bf00      	nop
   d5f28:	2003de68 	.word	0x2003de68

000d5f2c <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5f2c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5f2e:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5f30:	4604      	mov	r4, r0
   d5f32:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5f34:	2180      	movs	r1, #128	; 0x80
   d5f36:	f000 fa87 	bl	d6448 <_ZN12Adafruit_GFXC1Ess>
   d5f3a:	4b06      	ldr	r3, [pc, #24]	; (d5f54 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5f3c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d5f3e:	23ff      	movs	r3, #255	; 0xff
   d5f40:	7763      	strb	r3, [r4, #29]
   d5f42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d5f46:	77e3      	strb	r3, [r4, #31]
   d5f48:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d5f4a:	f884 5020 	strb.w	r5, [r4, #32]
}
   d5f4e:	4620      	mov	r0, r4
   d5f50:	bd38      	pop	{r3, r4, r5, pc}
   d5f52:	bf00      	nop
   d5f54:	000da8c4 	.word	0x000da8c4

000d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5f58:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5f5a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5f5e:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5f60:	4604      	mov	r4, r0
   d5f62:	460d      	mov	r5, r1
  if (sid != -1)
   d5f64:	d028      	beq.n	d5fb8 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5f66:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d5f6a:	2101      	movs	r1, #1
   d5f6c:	b280      	uxth	r0, r0
   d5f6e:	f002 f842 	bl	d7ff6 <digitalWrite>
    digitalWrite(dc, LOW);
   d5f72:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5f76:	2100      	movs	r1, #0
   d5f78:	b280      	uxth	r0, r0
   d5f7a:	f002 f83c 	bl	d7ff6 <digitalWrite>
    digitalWrite(cs, LOW);
   d5f7e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5f82:	2100      	movs	r1, #0
   d5f84:	b280      	uxth	r0, r0
   d5f86:	f002 f836 	bl	d7ff6 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5f8a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5f8e:	b12b      	cbz	r3, d5f9c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    (void)SPI.transfer(d);
   d5f90:	f002 f880 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d5f94:	4629      	mov	r1, r5
   d5f96:	f000 fec3 	bl	d6d20 <_ZN8SPIClass8transferEh>
   d5f9a:	e005      	b.n	d5fa8 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5f9c:	462b      	mov	r3, r5
   d5f9e:	2201      	movs	r2, #1
   d5fa0:	7fa1      	ldrb	r1, [r4, #30]
   d5fa2:	7f60      	ldrb	r0, [r4, #29]
   d5fa4:	f002 f853 	bl	d804e <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5fa8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5fac:	2101      	movs	r1, #1
   d5fae:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5fb4:	f002 b81f 	b.w	d7ff6 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d5fb8:	f002 f8a6 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5fbc:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5fc0:	f001 fe39 	bl	d7c36 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5fc4:	f002 f8a0 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5fc8:	6803      	ldr	r3, [r0, #0]
   d5fca:	2100      	movs	r1, #0
   d5fcc:	689b      	ldr	r3, [r3, #8]
   d5fce:	4798      	blx	r3
    Wire.write(c);
   d5fd0:	f002 f89a 	bl	d8108 <_Z19__fetch_global_Wirev>
   d5fd4:	6803      	ldr	r3, [r0, #0]
   d5fd6:	4629      	mov	r1, r5
   d5fd8:	689b      	ldr	r3, [r3, #8]
   d5fda:	4798      	blx	r3
    Wire.endTransmission();
   d5fdc:	f002 f894 	bl	d8108 <_Z19__fetch_global_Wirev>
  }
}
   d5fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5fe4:	f001 be2e 	b.w	d7c44 <_ZN7TwoWire15endTransmissionEv>

000d5fe8 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5fe8:	b538      	push	{r3, r4, r5, lr}
   d5fea:	4604      	mov	r4, r0
   d5fec:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d5fee:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5ff0:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d5ff4:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d5ff6:	3301      	adds	r3, #1
   d5ff8:	d037      	beq.n	d606a <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d5ffa:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5ffe:	2101      	movs	r1, #1
   d6000:	b280      	uxth	r0, r0
   d6002:	f001 ffe7 	bl	d7fd4 <pinMode>
    pinMode(cs, OUTPUT);
   d6006:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d600a:	2101      	movs	r1, #1
   d600c:	b280      	uxth	r0, r0
   d600e:	f001 ffe1 	bl	d7fd4 <pinMode>
    if (!hwSPI){
   d6012:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6016:	b95b      	cbnz	r3, d6030 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d6018:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d601c:	2101      	movs	r1, #1
   d601e:	b280      	uxth	r0, r0
   d6020:	f001 ffd8 	bl	d7fd4 <pinMode>
    	pinMode(sclk, OUTPUT);
   d6024:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d6028:	2101      	movs	r1, #1
   d602a:	b280      	uxth	r0, r0
   d602c:	f001 ffd2 	bl	d7fd4 <pinMode>
    	}
    if (hwSPI){
   d6030:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6034:	b1eb      	cbz	r3, d6072 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d6036:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d603a:	2101      	movs	r1, #1
   d603c:	b280      	uxth	r0, r0
   d603e:	f001 ffda 	bl	d7ff6 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d6042:	f002 f827 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d6046:	2101      	movs	r1, #1
   d6048:	f000 fdd9 	bl	d6bfe <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d604c:	f002 f822 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d6050:	2110      	movs	r1, #16
   d6052:	f000 fe41 	bl	d6cd8 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d6056:	f002 f81d 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d605a:	2100      	movs	r1, #0
   d605c:	f000 fde0 	bl	d6c20 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d6060:	f002 f818 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d6064:	f000 fdba 	bl	d6bdc <_ZN8SPIClass5beginEv>
   d6068:	e003      	b.n	d6072 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d606a:	f002 f84d 	bl	d8108 <_Z19__fetch_global_Wirev>
   d606e:	f001 fda7 	bl	d7bc0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d6072:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d6076:	2101      	movs	r1, #1
   d6078:	b280      	uxth	r0, r0
   d607a:	f001 ffab 	bl	d7fd4 <pinMode>
  digitalWrite(rst, HIGH);
   d607e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d6082:	2101      	movs	r1, #1
   d6084:	b280      	uxth	r0, r0
   d6086:	f001 ffb6 	bl	d7ff6 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d608a:	2001      	movs	r0, #1
   d608c:	f001 f848 	bl	d7120 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d6090:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d6094:	2100      	movs	r1, #0
   d6096:	b280      	uxth	r0, r0
   d6098:	f001 ffad 	bl	d7ff6 <digitalWrite>
  // wait 10ms
  delay(10);
   d609c:	200a      	movs	r0, #10
   d609e:	f001 f83f 	bl	d7120 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d60a2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d60a6:	2101      	movs	r1, #1
   d60a8:	b280      	uxth	r0, r0
   d60aa:	f001 ffa4 	bl	d7ff6 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d60ae:	4620      	mov	r0, r4
   d60b0:	21ae      	movs	r1, #174	; 0xae
   d60b2:	f7ff ff51 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d60b6:	4620      	mov	r0, r4
   d60b8:	21d5      	movs	r1, #213	; 0xd5
   d60ba:	f7ff ff4d 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d60be:	4620      	mov	r0, r4
   d60c0:	2180      	movs	r1, #128	; 0x80
   d60c2:	f7ff ff49 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d60c6:	4620      	mov	r0, r4
   d60c8:	21a8      	movs	r1, #168	; 0xa8
   d60ca:	f7ff ff45 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d60ce:	4620      	mov	r0, r4
   d60d0:	213f      	movs	r1, #63	; 0x3f
   d60d2:	f7ff ff41 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d60d6:	4620      	mov	r0, r4
   d60d8:	21d3      	movs	r1, #211	; 0xd3
   d60da:	f7ff ff3d 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d60de:	4620      	mov	r0, r4
   d60e0:	2100      	movs	r1, #0
   d60e2:	f7ff ff39 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d60e6:	4620      	mov	r0, r4
   d60e8:	2140      	movs	r1, #64	; 0x40
   d60ea:	f7ff ff35 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d60ee:	218d      	movs	r1, #141	; 0x8d
   d60f0:	4620      	mov	r0, r4
   d60f2:	f7ff ff31 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d60f6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d60f8:	bf0c      	ite	eq
   d60fa:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d60fc:	2114      	movne	r1, #20
   d60fe:	4620      	mov	r0, r4
   d6100:	f7ff ff2a 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d6104:	4620      	mov	r0, r4
   d6106:	2120      	movs	r1, #32
   d6108:	f7ff ff26 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d610c:	4620      	mov	r0, r4
   d610e:	2100      	movs	r1, #0
   d6110:	f7ff ff22 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d6114:	4620      	mov	r0, r4
   d6116:	21a1      	movs	r1, #161	; 0xa1
   d6118:	f7ff ff1e 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d611c:	4620      	mov	r0, r4
   d611e:	21c8      	movs	r1, #200	; 0xc8
   d6120:	f7ff ff1a 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d6124:	4620      	mov	r0, r4
   d6126:	21da      	movs	r1, #218	; 0xda
   d6128:	f7ff ff16 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d612c:	4620      	mov	r0, r4
   d612e:	2112      	movs	r1, #18
   d6130:	f7ff ff12 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d6134:	2181      	movs	r1, #129	; 0x81
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff ff0e 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d613c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d613e:	bf0c      	ite	eq
   d6140:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d6142:	21cf      	movne	r1, #207	; 0xcf
   d6144:	4620      	mov	r0, r4
   d6146:	f7ff ff07 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d614a:	21d9      	movs	r1, #217	; 0xd9
   d614c:	4620      	mov	r0, r4
   d614e:	f7ff ff03 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d6152:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d6154:	bf0c      	ite	eq
   d6156:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d6158:	21f1      	movne	r1, #241	; 0xf1
   d615a:	4620      	mov	r0, r4
   d615c:	f7ff fefc 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d6160:	4620      	mov	r0, r4
   d6162:	21db      	movs	r1, #219	; 0xdb
   d6164:	f7ff fef8 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d6168:	4620      	mov	r0, r4
   d616a:	2140      	movs	r1, #64	; 0x40
   d616c:	f7ff fef4 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d6170:	4620      	mov	r0, r4
   d6172:	21a4      	movs	r1, #164	; 0xa4
   d6174:	f7ff fef0 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d6178:	4620      	mov	r0, r4
   d617a:	21a6      	movs	r1, #166	; 0xa6
   d617c:	f7ff feec 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d6180:	4620      	mov	r0, r4
   d6182:	21af      	movs	r1, #175	; 0xaf
}
   d6184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d6188:	f7ff bee6 	b.w	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d618c <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d6190:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d6192:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d6194:	f7ff fee0 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d6198:	2100      	movs	r1, #0
   d619a:	4620      	mov	r0, r4
   d619c:	f7ff fedc 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d61a0:	217f      	movs	r1, #127	; 0x7f
   d61a2:	4620      	mov	r0, r4
   d61a4:	f7ff fed8 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d61a8:	2122      	movs	r1, #34	; 0x22
   d61aa:	4620      	mov	r0, r4
   d61ac:	f7ff fed4 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d61b0:	2100      	movs	r1, #0
   d61b2:	4620      	mov	r0, r4
   d61b4:	f7ff fed0 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d61b8:	2107      	movs	r1, #7
   d61ba:	4620      	mov	r0, r4
   d61bc:	f7ff fecc 	bl	d5f58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d61c0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d61c4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d6284 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d61c8:	3301      	adds	r3, #1
   d61ca:	d035      	beq.n	d6238 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d61cc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d61d0:	2101      	movs	r1, #1
   d61d2:	b280      	uxth	r0, r0
   d61d4:	f001 ff0f 	bl	d7ff6 <digitalWrite>
    digitalWrite(dc, HIGH);
   d61d8:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d61dc:	2101      	movs	r1, #1
   d61de:	b280      	uxth	r0, r0
   d61e0:	f001 ff09 	bl	d7ff6 <digitalWrite>
    digitalWrite(cs, LOW);
   d61e4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d61e8:	2100      	movs	r1, #0
   d61ea:	b280      	uxth	r0, r0
   d61ec:	f001 ff03 	bl	d7ff6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d61f0:	2001      	movs	r0, #1
   d61f2:	f000 faad 	bl	d6750 <HAL_Delay_Microseconds>
   d61f6:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d61f8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d61fc:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6200:	b12b      	cbz	r3, d620e <_ZN16Adafruit_SSD13067displayEv+0x82>
    (void)SPI.transfer(d);
   d6202:	f001 ff47 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d6206:	4631      	mov	r1, r6
   d6208:	f000 fd8a 	bl	d6d20 <_ZN8SPIClass8transferEh>
   d620c:	e005      	b.n	d621a <_ZN16Adafruit_SSD13067displayEv+0x8e>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d620e:	4633      	mov	r3, r6
   d6210:	2201      	movs	r2, #1
   d6212:	7fa1      	ldrb	r1, [r4, #30]
   d6214:	7f60      	ldrb	r0, [r4, #29]
   d6216:	f001 ff1a 	bl	d804e <shiftOut>
   d621a:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d621c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d6220:	d1ea      	bne.n	d61f8 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d6222:	2001      	movs	r0, #1
   d6224:	f000 fa94 	bl	d6750 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6228:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d622c:	2101      	movs	r1, #1
   d622e:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d6230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6234:	f001 bedf 	b.w	d7ff6 <digitalWrite>
   d6238:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d623a:	f001 ff65 	bl	d8108 <_Z19__fetch_global_Wirev>
   d623e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d6242:	f001 fcf8 	bl	d7c36 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d6246:	f001 ff5f 	bl	d8108 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d624a:	6803      	ldr	r3, [r0, #0]
   d624c:	2140      	movs	r1, #64	; 0x40
   d624e:	689b      	ldr	r3, [r3, #8]
   d6250:	4798      	blx	r3
   d6252:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d6254:	f001 ff58 	bl	d8108 <_Z19__fetch_global_Wirev>
   d6258:	19af      	adds	r7, r5, r6
   d625a:	6803      	ldr	r3, [r0, #0]
   d625c:	b2bf      	uxth	r7, r7
   d625e:	689b      	ldr	r3, [r3, #8]
   d6260:	f818 1007 	ldrb.w	r1, [r8, r7]
   d6264:	3601      	adds	r6, #1
   d6266:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d6268:	2e10      	cmp	r6, #16
   d626a:	d1f3      	bne.n	d6254 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d626c:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d626e:	f001 ff4b 	bl	d8108 <_Z19__fetch_global_Wirev>
   d6272:	b2ad      	uxth	r5, r5
   d6274:	f001 fce6 	bl	d7c44 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d6278:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d627c:	d1dd      	bne.n	d623a <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6282:	bf00      	nop
   d6284:	2003de68 	.word	0x2003de68

000d6288 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d6288:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d628c:	2100      	movs	r1, #0
   d628e:	4801      	ldr	r0, [pc, #4]	; (d6294 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d6290:	f004 b8e3 	b.w	da45a <memset>
   d6294:	2003de68 	.word	0x2003de68

000d6298 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d6298:	f000 b9da 	b.w	d6650 <HAL_Pin_Map>

000d629c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62a0:	b085      	sub	sp, #20
   d62a2:	461e      	mov	r6, r3
   d62a4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d62a8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d62ac:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d62ae:	1a9a      	subs	r2, r3, r2
   d62b0:	2a00      	cmp	r2, #0
   d62b2:	bfb8      	it	lt
   d62b4:	4252      	neglt	r2, r2
   d62b6:	9200      	str	r2, [sp, #0]
   d62b8:	1a72      	subs	r2, r6, r1
   d62ba:	2a00      	cmp	r2, #0
   d62bc:	bfb8      	it	lt
   d62be:	4252      	neglt	r2, r2
   d62c0:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d62c2:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d62c4:	9a00      	ldr	r2, [sp, #0]
   d62c6:	9901      	ldr	r1, [sp, #4]
   d62c8:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d62ca:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d62cc:	dd05      	ble.n	d62da <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d62ce:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d62d0:	461e      	mov	r6, r3
   d62d2:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d62d4:	4622      	mov	r2, r4
    swap(x0, y0);
   d62d6:	462c      	mov	r4, r5
   d62d8:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d62da:	42b4      	cmp	r4, r6
   d62dc:	dd05      	ble.n	d62ea <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d62de:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d62e0:	461d      	mov	r5, r3
   d62e2:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d62e4:	4622      	mov	r2, r4
   d62e6:	4634      	mov	r4, r6
   d62e8:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d62ea:	1b5a      	subs	r2, r3, r5
   d62ec:	2a00      	cmp	r2, #0
   d62ee:	bfb8      	it	lt
   d62f0:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d62f2:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d62f6:	429d      	cmp	r5, r3
   d62f8:	bfb4      	ite	lt
   d62fa:	2301      	movlt	r3, #1
   d62fc:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6300:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6304:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d6306:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d6308:	fa0f f788 	sxth.w	r7, r8
   d630c:	2202      	movs	r2, #2
   d630e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6312:	42b4      	cmp	r4, r6
   d6314:	dc1f      	bgt.n	d6356 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d6316:	9a01      	ldr	r2, [sp, #4]
   d6318:	9b00      	ldr	r3, [sp, #0]
   d631a:	4293      	cmp	r3, r2
   d631c:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d6320:	bfc8      	it	gt
   d6322:	4622      	movgt	r2, r4
   d6324:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6328:	bfc8      	it	gt
   d632a:	4629      	movgt	r1, r5
   d632c:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d632e:	bfdc      	itt	le
   d6330:	462a      	movle	r2, r5
   d6332:	4621      	movle	r1, r4
   d6334:	4648      	mov	r0, r9
   d6336:	47d8      	blx	fp
    }
    err -= dy;
   d6338:	9b03      	ldr	r3, [sp, #12]
   d633a:	1aff      	subs	r7, r7, r3
   d633c:	b2bb      	uxth	r3, r7
   d633e:	b21f      	sxth	r7, r3
    if (err < 0) {
   d6340:	2f00      	cmp	r7, #0
   d6342:	da05      	bge.n	d6350 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d6344:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d6346:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d634a:	4415      	add	r5, r2
   d634c:	b22d      	sxth	r5, r5
      err += dx;
   d634e:	b23f      	sxth	r7, r7
   d6350:	3401      	adds	r4, #1
   d6352:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6354:	e7dd      	b.n	d6312 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d6356:	b005      	add	sp, #20
   d6358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d635c <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d635c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6360:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d6364:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6366:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d636a:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d636c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d636e:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6370:	4691      	mov	r9, r2
   d6372:	460d      	mov	r5, r1
   d6374:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d6376:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d6378:	6823      	ldr	r3, [r4, #0]
   d637a:	9600      	str	r6, [sp, #0]
   d637c:	f10a 32ff 	add.w	r2, sl, #4294967295
   d6380:	444a      	add	r2, r9
   d6382:	69df      	ldr	r7, [r3, #28]
   d6384:	4629      	mov	r1, r5
   d6386:	4643      	mov	r3, r8
   d6388:	4620      	mov	r0, r4
   d638a:	b212      	sxth	r2, r2
   d638c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d638e:	6823      	ldr	r3, [r4, #0]
   d6390:	9600      	str	r6, [sp, #0]
   d6392:	699f      	ldr	r7, [r3, #24]
   d6394:	464a      	mov	r2, r9
   d6396:	4653      	mov	r3, sl
   d6398:	4629      	mov	r1, r5
   d639a:	4620      	mov	r0, r4
   d639c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d639e:	6823      	ldr	r3, [r4, #0]
   d63a0:	960a      	str	r6, [sp, #40]	; 0x28
   d63a2:	f108 31ff 	add.w	r1, r8, #4294967295
   d63a6:	4429      	add	r1, r5
   d63a8:	699d      	ldr	r5, [r3, #24]
   d63aa:	464a      	mov	r2, r9
   d63ac:	4653      	mov	r3, sl
   d63ae:	b209      	sxth	r1, r1
   d63b0:	4620      	mov	r0, r4
   d63b2:	46ac      	mov	ip, r5
}
   d63b4:	b002      	add	sp, #8
   d63b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d63ba:	4760      	bx	ip

000d63bc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d63bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d63be:	3b01      	subs	r3, #1
   d63c0:	4413      	add	r3, r2
   d63c2:	6804      	ldr	r4, [r0, #0]
   d63c4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d63c8:	9501      	str	r5, [sp, #4]
   d63ca:	b21b      	sxth	r3, r3
   d63cc:	9300      	str	r3, [sp, #0]
   d63ce:	6964      	ldr	r4, [r4, #20]
   d63d0:	460b      	mov	r3, r1
   d63d2:	47a0      	blx	r4
}
   d63d4:	b003      	add	sp, #12
   d63d6:	bd30      	pop	{r4, r5, pc}

000d63d8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d63d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d63da:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d63de:	6804      	ldr	r4, [r0, #0]
   d63e0:	e88d 0024 	stmia.w	sp, {r2, r5}
   d63e4:	3b01      	subs	r3, #1
   d63e6:	440b      	add	r3, r1
   d63e8:	6964      	ldr	r4, [r4, #20]
   d63ea:	b21b      	sxth	r3, r3
   d63ec:	47a0      	blx	r4
}
   d63ee:	b003      	add	sp, #12
   d63f0:	bd30      	pop	{r4, r5, pc}

000d63f2 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d63f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d63f6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d63fa:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d63fe:	4605      	mov	r5, r0
   d6400:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6402:	460c      	mov	r4, r1
   d6404:	eb01 0a03 	add.w	sl, r1, r3
   d6408:	4554      	cmp	r4, sl
   d640a:	da0b      	bge.n	d6424 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d640c:	682b      	ldr	r3, [r5, #0]
   d640e:	f8cd 9000 	str.w	r9, [sp]
   d6412:	699e      	ldr	r6, [r3, #24]
   d6414:	4621      	mov	r1, r4
   d6416:	4643      	mov	r3, r8
   d6418:	463a      	mov	r2, r7
   d641a:	4628      	mov	r0, r5
   d641c:	3401      	adds	r4, #1
   d641e:	47b0      	blx	r6
   d6420:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6422:	e7f1      	b.n	d6408 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d6424:	b002      	add	sp, #8
   d6426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d642a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d642a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d642c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d6430:	6804      	ldr	r4, [r0, #0]
   d6432:	9101      	str	r1, [sp, #4]
   d6434:	9200      	str	r2, [sp, #0]
   d6436:	2200      	movs	r2, #0
   d6438:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d643c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d643e:	4611      	mov	r1, r2
   d6440:	47a0      	blx	r4
}
   d6442:	b002      	add	sp, #8
   d6444:	bd10      	pop	{r4, pc}

000d6446 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d6446:	4770      	bx	lr

000d6448 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d6448:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d644a:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d644c:	2400      	movs	r4, #0
   d644e:	4d08      	ldr	r5, [pc, #32]	; (d6470 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6450:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d6452:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d6454:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d6456:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d645a:	2201      	movs	r2, #1
   d645c:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d645e:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d6460:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d6462:	8204      	strh	r4, [r0, #16]
   d6464:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d6466:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d6468:	82c1      	strh	r1, [r0, #22]
   d646a:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d646c:	7682      	strb	r2, [r0, #26]
}
   d646e:	bd30      	pop	{r4, r5, pc}
   d6470:	000da8fc 	.word	0x000da8fc

000d6474 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d6474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6478:	b08f      	sub	sp, #60	; 0x3c
   d647a:	4605      	mov	r5, r0
   d647c:	9106      	str	r1, [sp, #24]
   d647e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d6482:	9107      	str	r1, [sp, #28]
   d6484:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d6488:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d648a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d648e:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d6490:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d6494:	4281      	cmp	r1, r0
   d6496:	dd7c      	ble.n	d6592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d6498:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d649c:	4291      	cmp	r1, r2
   d649e:	dd78      	ble.n	d6592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d64a0:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d64a2:	fb11 0008 	smlabb	r0, r1, r8, r0
   d64a6:	2800      	cmp	r0, #0
   d64a8:	dd73      	ble.n	d6592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d64aa:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d64ae:	2800      	cmp	r0, #0
   d64b0:	dd6f      	ble.n	d6592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d64b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d64b6:	b296      	uxth	r6, r2
   d64b8:	930c      	str	r3, [sp, #48]	; 0x30
   d64ba:	f106 0308 	add.w	r3, r6, #8
   d64be:	b29b      	uxth	r3, r3
   d64c0:	9109      	str	r1, [sp, #36]	; 0x24
   d64c2:	2400      	movs	r4, #0
   d64c4:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d64c6:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d64c8:	bf1c      	itt	ne
   d64ca:	4b33      	ldrne	r3, [pc, #204]	; (d6598 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d64cc:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d64ce:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d64d0:	bf16      	itet	ne
   d64d2:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d64d4:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d64d8:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d64dc:	9604      	str	r6, [sp, #16]
   d64de:	fa1f f388 	uxth.w	r3, r8
   d64e2:	9303      	str	r3, [sp, #12]
   d64e4:	9a03      	ldr	r2, [sp, #12]
   d64e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d64ea:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d64ee:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d64f2:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d64f4:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d64f6:	920a      	str	r2, [sp, #40]	; 0x28
   d64f8:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d64fa:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d64fe:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d6500:	f019 0f01 	tst.w	r9, #1
   d6504:	d011      	beq.n	d652a <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d6506:	f1b8 0f01 	cmp.w	r8, #1
   d650a:	682b      	ldr	r3, [r5, #0]
   d650c:	d103      	bne.n	d6516 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d650e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6512:	9b07      	ldr	r3, [sp, #28]
   d6514:	e014      	b.n	d6540 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6516:	9a07      	ldr	r2, [sp, #28]
   d6518:	9201      	str	r2, [sp, #4]
   d651a:	f8cd a000 	str.w	sl, [sp]
   d651e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d6522:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d6526:	4653      	mov	r3, sl
   d6528:	e018      	b.n	d655c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d652a:	9b07      	ldr	r3, [sp, #28]
   d652c:	9a08      	ldr	r2, [sp, #32]
   d652e:	4293      	cmp	r3, r2
   d6530:	d017      	beq.n	d6562 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d6532:	f1b8 0f01 	cmp.w	r8, #1
   d6536:	682b      	ldr	r3, [r5, #0]
   d6538:	d107      	bne.n	d654a <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d653a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d653e:	4613      	mov	r3, r2
   d6540:	b23a      	sxth	r2, r7
   d6542:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d6544:	4628      	mov	r0, r5
   d6546:	47d8      	blx	fp
   d6548:	e00b      	b.n	d6562 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d654a:	9a08      	ldr	r2, [sp, #32]
   d654c:	9201      	str	r2, [sp, #4]
   d654e:	f8cd a000 	str.w	sl, [sp]
   d6552:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d6556:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d655a:	4653      	mov	r3, sl
   d655c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d655e:	4628      	mov	r0, r5
   d6560:	47d8      	blx	fp
   d6562:	9b04      	ldr	r3, [sp, #16]
   d6564:	9a03      	ldr	r2, [sp, #12]
   d6566:	4413      	add	r3, r2
   d6568:	b29b      	uxth	r3, r3
   d656a:	9304      	str	r3, [sp, #16]
   d656c:	9b05      	ldr	r3, [sp, #20]
   d656e:	4413      	add	r3, r2
   d6570:	b29b      	uxth	r3, r3
   d6572:	3701      	adds	r7, #1
   d6574:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d6576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6578:	b2bf      	uxth	r7, r7
   d657a:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d657c:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d6580:	d1be      	bne.n	d6500 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d6582:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6584:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d6586:	3401      	adds	r4, #1
   d6588:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d658c:	b264      	sxtb	r4, r4
   d658e:	9309      	str	r3, [sp, #36]	; 0x24
   d6590:	d199      	bne.n	d64c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d6592:	b00f      	add	sp, #60	; 0x3c
   d6594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6598:	000da92c 	.word	0x000da92c

000d659c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d659c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d659e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d65a0:	b085      	sub	sp, #20
   d65a2:	4604      	mov	r4, r0
   d65a4:	460b      	mov	r3, r1

  if (c == '\n') {
   d65a6:	d104      	bne.n	d65b2 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d65a8:	7e02      	ldrb	r2, [r0, #24]
   d65aa:	8a43      	ldrh	r3, [r0, #18]
   d65ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d65b0:	e023      	b.n	d65fa <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d65b2:	290d      	cmp	r1, #13
   d65b4:	d024      	beq.n	d6600 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d65b6:	7e05      	ldrb	r5, [r0, #24]
   d65b8:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d65bc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d65c0:	9502      	str	r5, [sp, #8]
   d65c2:	8ac5      	ldrh	r5, [r0, #22]
   d65c4:	9501      	str	r5, [sp, #4]
   d65c6:	8a85      	ldrh	r5, [r0, #20]
   d65c8:	9500      	str	r5, [sp, #0]
   d65ca:	f7ff ff53 	bl	d6474 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d65ce:	7e22      	ldrb	r2, [r4, #24]
   d65d0:	8a23      	ldrh	r3, [r4, #16]
   d65d2:	b291      	uxth	r1, r2
   d65d4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d65d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d65dc:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d65de:	b21b      	sxth	r3, r3
   d65e0:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d65e2:	b168      	cbz	r0, d6600 <_ZN12Adafruit_GFX5writeEh+0x64>
   d65e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d65e8:	f06f 0505 	mvn.w	r5, #5
   d65ec:	fb05 0202 	mla	r2, r5, r2, r0
   d65f0:	4293      	cmp	r3, r2
   d65f2:	dd05      	ble.n	d6600 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d65f4:	8a63      	ldrh	r3, [r4, #18]
   d65f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d65fa:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d65fc:	2300      	movs	r3, #0
   d65fe:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d6600:	2001      	movs	r0, #1
   d6602:	b005      	add	sp, #20
   d6604:	bd30      	pop	{r4, r5, pc}

000d6606 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d6606:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d6608:	8242      	strh	r2, [r0, #18]
   d660a:	4770      	bx	lr

000d660c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d660c:	2900      	cmp	r1, #0
   d660e:	bf08      	it	eq
   d6610:	2101      	moveq	r1, #1
   d6612:	7601      	strb	r1, [r0, #24]
   d6614:	4770      	bx	lr

000d6616 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d6616:	82c1      	strh	r1, [r0, #22]
   d6618:	8281      	strh	r1, [r0, #20]
   d661a:	4770      	bx	lr

000d661c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d661c:	7e40      	ldrb	r0, [r0, #25]
   d661e:	4770      	bx	lr

000d6620 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d6620:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d6624:	4770      	bx	lr

000d6626 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d6626:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d662a:	4770      	bx	lr

000d662c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d662c:	f000 b810 	b.w	d6650 <HAL_Pin_Map>

000d6630 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <netdb_freeaddrinfo+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	689b      	ldr	r3, [r3, #8]
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	00030268 	.word	0x00030268

000d6640 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <netdb_getaddrinfo+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	68db      	ldr	r3, [r3, #12]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030268 	.word	0x00030268

000d6650 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <HAL_Pin_Map+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	681b      	ldr	r3, [r3, #0]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	0003022c 	.word	0x0003022c

000d6660 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <HAL_Pin_Mode+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	689b      	ldr	r3, [r3, #8]
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	0003022c 	.word	0x0003022c

000d6670 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <HAL_Get_Pin_Mode+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	68db      	ldr	r3, [r3, #12]
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	0003022c 	.word	0x0003022c

000d6680 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <HAL_GPIO_Write+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	691b      	ldr	r3, [r3, #16]
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	0003022c 	.word	0x0003022c

000d6690 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <HAL_GPIO_Read+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	695b      	ldr	r3, [r3, #20]
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	0003022c 	.word	0x0003022c

000d66a0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <HAL_SPI_Begin+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	681b      	ldr	r3, [r3, #0]
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	00030230 	.word	0x00030230

000d66b0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <HAL_SPI_Set_Bit_Order+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	689b      	ldr	r3, [r3, #8]
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	00030230 	.word	0x00030230

000d66c0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <HAL_SPI_Set_Data_Mode+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	68db      	ldr	r3, [r3, #12]
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	00030230 	.word	0x00030230

000d66d0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <HAL_SPI_Set_Clock_Divider+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	691b      	ldr	r3, [r3, #16]
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	00030230 	.word	0x00030230

000d66e0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <HAL_SPI_Send_Receive_Data+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	695b      	ldr	r3, [r3, #20]
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	00030230 	.word	0x00030230

000d66f0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <HAL_SPI_Init+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	69db      	ldr	r3, [r3, #28]
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	00030230 	.word	0x00030230

000d6700 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <HAL_SPI_Is_Enabled+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	6a1b      	ldr	r3, [r3, #32]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	00030230 	.word	0x00030230

000d6710 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <HAL_SPI_Info+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	00030230 	.word	0x00030230

000d6720 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <HAL_SPI_Acquire+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030230 	.word	0x00030230

000d6730 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <HAL_SPI_Release+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030230 	.word	0x00030230

000d6740 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <HAL_RNG_GetRandomNumber+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	685b      	ldr	r3, [r3, #4]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030218 	.word	0x00030218

000d6750 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <HAL_Delay_Microseconds+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	68db      	ldr	r3, [r3, #12]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030218 	.word	0x00030218

000d6760 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	695b      	ldr	r3, [r3, #20]
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030218 	.word	0x00030218

000d6770 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <os_thread_is_current+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	689b      	ldr	r3, [r3, #8]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030248 	.word	0x00030248

000d6780 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <os_thread_join+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	691b      	ldr	r3, [r3, #16]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030248 	.word	0x00030248

000d6790 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <os_thread_cleanup+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	695b      	ldr	r3, [r3, #20]
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030248 	.word	0x00030248

000d67a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <os_mutex_recursive_create+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030248 	.word	0x00030248

000d67b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <os_mutex_recursive_destroy+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030248 	.word	0x00030248

000d67c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <inet_inet_ntop+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	695b      	ldr	r3, [r3, #20]
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	00030264 	.word	0x00030264

000d67d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <HAL_USART_Init+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	681b      	ldr	r3, [r3, #0]
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	0003023c 	.word	0x0003023c

000d67e0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <HAL_USART_Write_Data+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	68db      	ldr	r3, [r3, #12]
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	0003023c 	.word	0x0003023c

000d67f0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <HAL_USART_Available_Data+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	691b      	ldr	r3, [r3, #16]
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	0003023c 	.word	0x0003023c

000d6800 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <HAL_USART_Read_Data+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	695b      	ldr	r3, [r3, #20]
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	0003023c 	.word	0x0003023c

000d6810 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6810:	b508      	push	{r3, lr}
   d6812:	4b02      	ldr	r3, [pc, #8]	; (d681c <HAL_USART_Peek_Data+0xc>)
   d6814:	681b      	ldr	r3, [r3, #0]
   d6816:	699b      	ldr	r3, [r3, #24]
   d6818:	9301      	str	r3, [sp, #4]
   d681a:	bd08      	pop	{r3, pc}
   d681c:	0003023c 	.word	0x0003023c

000d6820 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6820:	b508      	push	{r3, lr}
   d6822:	4b02      	ldr	r3, [pc, #8]	; (d682c <HAL_USART_Flush_Data+0xc>)
   d6824:	681b      	ldr	r3, [r3, #0]
   d6826:	69db      	ldr	r3, [r3, #28]
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	bd08      	pop	{r3, pc}
   d682c:	0003023c 	.word	0x0003023c

000d6830 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6830:	b508      	push	{r3, lr}
   d6832:	4b02      	ldr	r3, [pc, #8]	; (d683c <HAL_USART_Is_Enabled+0xc>)
   d6834:	681b      	ldr	r3, [r3, #0]
   d6836:	6a1b      	ldr	r3, [r3, #32]
   d6838:	9301      	str	r3, [sp, #4]
   d683a:	bd08      	pop	{r3, pc}
   d683c:	0003023c 	.word	0x0003023c

000d6840 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b02      	ldr	r3, [pc, #8]	; (d684c <HAL_USART_Available_Data_For_Write+0xc>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6848:	9301      	str	r3, [sp, #4]
   d684a:	bd08      	pop	{r3, pc}
   d684c:	0003023c 	.word	0x0003023c

000d6850 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b02      	ldr	r3, [pc, #8]	; (d685c <HAL_I2C_Begin+0xc>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	68db      	ldr	r3, [r3, #12]
   d6858:	9301      	str	r3, [sp, #4]
   d685a:	bd08      	pop	{r3, pc}
   d685c:	00030228 	.word	0x00030228

000d6860 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <HAL_I2C_Begin_Transmission+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	699b      	ldr	r3, [r3, #24]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030228 	.word	0x00030228

000d6870 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <HAL_I2C_End_Transmission+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	69db      	ldr	r3, [r3, #28]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030228 	.word	0x00030228

000d6880 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <HAL_I2C_Write_Data+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	6a1b      	ldr	r3, [r3, #32]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030228 	.word	0x00030228

000d6890 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <HAL_I2C_Available_Data+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030228 	.word	0x00030228

000d68a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <HAL_I2C_Read_Data+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030228 	.word	0x00030228

000d68b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <HAL_I2C_Peek_Data+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030228 	.word	0x00030228

000d68c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <HAL_I2C_Flush_Data+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030228 	.word	0x00030228

000d68d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <HAL_I2C_Is_Enabled+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030228 	.word	0x00030228

000d68e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <HAL_I2C_Init+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	00030228 	.word	0x00030228

000d68f0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <HAL_I2C_Request_Data_Ex+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	00030228 	.word	0x00030228

000d6900 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <HAL_USB_USART_Init+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	681b      	ldr	r3, [r3, #0]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	0003024c 	.word	0x0003024c

000d6910 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <HAL_USB_USART_Begin+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	685b      	ldr	r3, [r3, #4]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	0003024c 	.word	0x0003024c

000d6920 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <HAL_USB_USART_Available_Data+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	691b      	ldr	r3, [r3, #16]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003024c 	.word	0x0003024c

000d6930 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	695b      	ldr	r3, [r3, #20]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003024c 	.word	0x0003024c

000d6940 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <HAL_USB_USART_Receive_Data+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	699b      	ldr	r3, [r3, #24]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003024c 	.word	0x0003024c

000d6950 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <HAL_USB_USART_Send_Data+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	69db      	ldr	r3, [r3, #28]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003024c 	.word	0x0003024c

000d6960 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <HAL_USB_USART_Flush_Data+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	6a1b      	ldr	r3, [r3, #32]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003024c 	.word	0x0003024c

000d6970 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <HAL_USB_USART_Is_Enabled+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003024c 	.word	0x0003024c

000d6980 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <panic_+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	00030260 	.word	0x00030260

000d6990 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <set_system_mode+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	685b      	ldr	r3, [r3, #4]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030220 	.word	0x00030220

000d69a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <system_delay_ms+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	695b      	ldr	r3, [r3, #20]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030220 	.word	0x00030220

000d69b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <application_thread_current+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030220 	.word	0x00030220

000d69c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <application_thread_invoke+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	00030220 	.word	0x00030220

000d69d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b03      	ldr	r3, [pc, #12]	; (d69e0 <system_ctrl_set_app_request_handler+0x10>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d69da:	9301      	str	r3, [sp, #4]
   d69dc:	bd08      	pop	{r3, pc}
   d69de:	0000      	.short	0x0000
   d69e0:	00030220 	.word	0x00030220

000d69e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b03      	ldr	r3, [pc, #12]	; (d69f4 <system_ctrl_set_result+0x10>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d69ee:	9301      	str	r3, [sp, #4]
   d69f0:	bd08      	pop	{r3, pc}
   d69f2:	0000      	.short	0x0000
   d69f4:	00030220 	.word	0x00030220

000d69f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <network_connect+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	685b      	ldr	r3, [r3, #4]
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030240 	.word	0x00030240

000d6a08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <network_connecting+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	689b      	ldr	r3, [r3, #8]
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030240 	.word	0x00030240

000d6a18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <network_disconnect+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	68db      	ldr	r3, [r3, #12]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030240 	.word	0x00030240

000d6a28 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <network_ready+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	691b      	ldr	r3, [r3, #16]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030240 	.word	0x00030240

000d6a38 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <network_on+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	695b      	ldr	r3, [r3, #20]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030240 	.word	0x00030240

000d6a48 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <network_off+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	699b      	ldr	r3, [r3, #24]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030240 	.word	0x00030240

000d6a58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <network_listen+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	69db      	ldr	r3, [r3, #28]
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030240 	.word	0x00030240

000d6a68 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <network_listening+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6a1b      	ldr	r3, [r3, #32]
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030240 	.word	0x00030240

000d6a78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <network_set_listen_timeout+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030240 	.word	0x00030240

000d6a88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <network_get_listen_timeout+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030240 	.word	0x00030240

000d6a98 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <spark_cloud_flag_connected+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	695b      	ldr	r3, [r3, #20]
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030244 	.word	0x00030244

000d6aa8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <spark_send_event+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	6a1b      	ldr	r3, [r3, #32]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030244 	.word	0x00030244

000d6ab8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	00030244 	.word	0x00030244

000d6ac8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <malloc+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	681b      	ldr	r3, [r3, #0]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003021c 	.word	0x0003021c

000d6ad8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <free+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	685b      	ldr	r3, [r3, #4]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003021c 	.word	0x0003021c

000d6ae8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <vsnprintf+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003021c 	.word	0x0003021c

000d6af8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <abort+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	0003021c 	.word	0x0003021c

000d6b08 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <_malloc_r+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	0003021c 	.word	0x0003021c

000d6b18 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <__errno+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	0003021c 	.word	0x0003021c

000d6b28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b28:	2200      	movs	r2, #0
   d6b2a:	4611      	mov	r1, r2
   d6b2c:	6840      	ldr	r0, [r0, #4]
   d6b2e:	f7ff bf9b 	b.w	d6a68 <network_listening>

000d6b32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b32:	2200      	movs	r2, #0
   d6b34:	4611      	mov	r1, r2
   d6b36:	6840      	ldr	r0, [r0, #4]
   d6b38:	f7ff bfa6 	b.w	d6a88 <network_get_listen_timeout>

000d6b3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b3c:	2200      	movs	r2, #0
   d6b3e:	6840      	ldr	r0, [r0, #4]
   d6b40:	f7ff bf9a 	b.w	d6a78 <network_set_listen_timeout>

000d6b44 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b44:	2200      	movs	r2, #0
   d6b46:	f081 0101 	eor.w	r1, r1, #1
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	f7ff bf84 	b.w	d6a58 <network_listen>

000d6b50 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6b50:	2300      	movs	r3, #0
   d6b52:	461a      	mov	r2, r3
   d6b54:	4619      	mov	r1, r3
   d6b56:	6840      	ldr	r0, [r0, #4]
   d6b58:	f7ff bf76 	b.w	d6a48 <network_off>

000d6b5c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	461a      	mov	r2, r3
   d6b60:	4619      	mov	r1, r3
   d6b62:	6840      	ldr	r0, [r0, #4]
   d6b64:	f7ff bf68 	b.w	d6a38 <network_on>

000d6b68 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b68:	2200      	movs	r2, #0
   d6b6a:	4611      	mov	r1, r2
   d6b6c:	6840      	ldr	r0, [r0, #4]
   d6b6e:	f7ff bf5b 	b.w	d6a28 <network_ready>

000d6b72 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b72:	2200      	movs	r2, #0
   d6b74:	4611      	mov	r1, r2
   d6b76:	6840      	ldr	r0, [r0, #4]
   d6b78:	f7ff bf46 	b.w	d6a08 <network_connecting>

000d6b7c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b7c:	2200      	movs	r2, #0
   d6b7e:	2102      	movs	r1, #2
   d6b80:	6840      	ldr	r0, [r0, #4]
   d6b82:	f7ff bf49 	b.w	d6a18 <network_disconnect>

000d6b86 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b86:	2300      	movs	r3, #0
   d6b88:	461a      	mov	r2, r3
   d6b8a:	6840      	ldr	r0, [r0, #4]
   d6b8c:	f7ff bf34 	b.w	d69f8 <network_connect>

000d6b90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6b90:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6b92:	2203      	movs	r2, #3
   d6b94:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6b96:	4a02      	ldr	r2, [pc, #8]	; (d6ba0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6b98:	601a      	str	r2, [r3, #0]
   d6b9a:	4770      	bx	lr
   d6b9c:	2003e3d0 	.word	0x2003e3d0
   d6ba0:	000dae30 	.word	0x000dae30

000d6ba4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6ba4:	4770      	bx	lr

000d6ba6 <_ZN8SPIClassD0Ev>:
   d6ba6:	b510      	push	{r4, lr}
   d6ba8:	210c      	movs	r1, #12
   d6baa:	4604      	mov	r4, r0
   d6bac:	f001 fae0 	bl	d8170 <_ZdlPvj>
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	bd10      	pop	{r4, pc}

000d6bb4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6bb4:	2100      	movs	r1, #0
   d6bb6:	f7ff bdb3 	b.w	d6720 <HAL_SPI_Acquire>

000d6bba <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6bba:	2100      	movs	r1, #0
   d6bbc:	f7ff bdb8 	b.w	d6730 <HAL_SPI_Release>

000d6bc0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6bc0:	b510      	push	{r4, lr}
   d6bc2:	4b05      	ldr	r3, [pc, #20]	; (d6bd8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d6bc4:	6003      	str	r3, [r0, #0]
   d6bc6:	4604      	mov	r4, r0
{
    _spi = spi;
   d6bc8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d6bca:	4608      	mov	r0, r1
   d6bcc:	f7ff fd90 	bl	d66f0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6bd0:	2300      	movs	r3, #0
   d6bd2:	60a3      	str	r3, [r4, #8]
}
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	bd10      	pop	{r4, pc}
   d6bd8:	000dae64 	.word	0x000dae64

000d6bdc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6bdc:	b510      	push	{r4, lr}
   d6bde:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6be0:	7900      	ldrb	r0, [r0, #4]
   d6be2:	f7ff ffe7 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6be6:	b948      	cbnz	r0, d6bfc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6be8:	7920      	ldrb	r0, [r4, #4]
   d6bea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6bee:	f7ff fd57 	bl	d66a0 <HAL_SPI_Begin>
        unlock();
   d6bf2:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6bf8:	f7ff bfdf 	b.w	d6bba <_ZN8SPIClass6unlockEv.isra.1>
   d6bfc:	bd10      	pop	{r4, pc}

000d6bfe <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6bfe:	b538      	push	{r3, r4, r5, lr}
   d6c00:	4604      	mov	r4, r0
    if (!lock())
   d6c02:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6c04:	460d      	mov	r5, r1
    if (!lock())
   d6c06:	f7ff ffd5 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6c0a:	b940      	cbnz	r0, d6c1e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6c0c:	7920      	ldrb	r0, [r4, #4]
   d6c0e:	4629      	mov	r1, r5
   d6c10:	f7ff fd4e 	bl	d66b0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d6c14:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d6c1a:	f7ff bfce 	b.w	d6bba <_ZN8SPIClass6unlockEv.isra.1>
   d6c1e:	bd38      	pop	{r3, r4, r5, pc}

000d6c20 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6c20:	b538      	push	{r3, r4, r5, lr}
   d6c22:	4604      	mov	r4, r0
    if (!lock())
   d6c24:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6c26:	460d      	mov	r5, r1
    if (!lock())
   d6c28:	f7ff ffc4 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6c2c:	b940      	cbnz	r0, d6c40 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6c2e:	7920      	ldrb	r0, [r4, #4]
   d6c30:	4629      	mov	r1, r5
   d6c32:	f7ff fd45 	bl	d66c0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d6c36:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6c3c:	f7ff bfbd 	b.w	d6bba <_ZN8SPIClass6unlockEv.isra.1>
   d6c40:	bd38      	pop	{r3, r4, r5, pc}

000d6c42 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6c42:	7900      	ldrb	r0, [r0, #4]
   d6c44:	f7ff bfb9 	b.w	d6bba <_ZN8SPIClass6unlockEv.isra.1>

000d6c48 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6c48:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6c4a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6c4c:	6018      	str	r0, [r3, #0]
   d6c4e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6c50:	6818      	ldr	r0, [r3, #0]
   d6c52:	4288      	cmp	r0, r1
   d6c54:	b2e5      	uxtb	r5, r4
   d6c56:	d906      	bls.n	d6c66 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6c58:	3401      	adds	r4, #1
   d6c5a:	2c08      	cmp	r4, #8
   d6c5c:	d002      	beq.n	d6c64 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6c5e:	0840      	lsrs	r0, r0, #1
   d6c60:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6c62:	e7f5      	b.n	d6c50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6c64:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6c68:	5d5b      	ldrb	r3, [r3, r5]
   d6c6a:	7013      	strb	r3, [r2, #0]
   d6c6c:	bd30      	pop	{r4, r5, pc}
   d6c6e:	bf00      	nop
   d6c70:	000dae6c 	.word	0x000dae6c

000d6c74 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c78:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6c7a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6c7c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6c7e:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d6c80:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6c82:	460e      	mov	r6, r1
   d6c84:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6c86:	f7ff ff95 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6c8a:	4605      	mov	r5, r0
   d6c8c:	bb00      	cbnz	r0, d6cd0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6c8e:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6c92:	4601      	mov	r1, r0
   d6c94:	2214      	movs	r2, #20
   d6c96:	a803      	add	r0, sp, #12
   d6c98:	f003 fbdf 	bl	da45a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6c9c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6c9e:	462a      	mov	r2, r5
   d6ca0:	a903      	add	r1, sp, #12
   d6ca2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6ca4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6ca8:	f7ff fd32 	bl	d6710 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6cac:	ab02      	add	r3, sp, #8
   d6cae:	f10d 0207 	add.w	r2, sp, #7
   d6cb2:	fb07 f106 	mul.w	r1, r7, r6
   d6cb6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6cb8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6cbc:	f7ff ffc4 	bl	d6c48 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6cc0:	7920      	ldrb	r0, [r4, #4]
   d6cc2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6cc6:	f7ff fd03 	bl	d66d0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d6cca:	7920      	ldrb	r0, [r4, #4]
   d6ccc:	f7ff ff75 	bl	d6bba <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6cd0:	9802      	ldr	r0, [sp, #8]
   d6cd2:	b008      	add	sp, #32
   d6cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6cd8 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6cd8:	b538      	push	{r3, r4, r5, lr}
   d6cda:	4604      	mov	r4, r0
    if (!lock())
   d6cdc:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6cde:	460d      	mov	r5, r1
    if (!lock())
   d6ce0:	f7ff ff68 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6ce4:	b9c8      	cbnz	r0, d6d1a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6ce6:	68a1      	ldr	r1, [r4, #8]
   d6ce8:	b171      	cbz	r1, d6d08 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d6cea:	4b0c      	ldr	r3, [pc, #48]	; (d6d1c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6cec:	5cc2      	ldrb	r2, [r0, r3]
   d6cee:	42aa      	cmp	r2, r5
   d6cf0:	d002      	beq.n	d6cf8 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6cf2:	3001      	adds	r0, #1
   d6cf4:	2808      	cmp	r0, #8
   d6cf6:	d1f9      	bne.n	d6cec <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6cf8:	3001      	adds	r0, #1
   d6cfa:	b2c0      	uxtb	r0, r0
   d6cfc:	40c1      	lsrs	r1, r0
   d6cfe:	2201      	movs	r2, #1
   d6d00:	4620      	mov	r0, r4
   d6d02:	f7ff ffb7 	bl	d6c74 <_ZN8SPIClass13setClockSpeedEjj>
   d6d06:	e003      	b.n	d6d10 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6d08:	4629      	mov	r1, r5
   d6d0a:	7920      	ldrb	r0, [r4, #4]
   d6d0c:	f7ff fce0 	bl	d66d0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6d10:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6d16:	f7ff bf50 	b.w	d6bba <_ZN8SPIClass6unlockEv.isra.1>
   d6d1a:	bd38      	pop	{r3, r4, r5, pc}
   d6d1c:	000dae6c 	.word	0x000dae6c

000d6d20 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6d20:	b538      	push	{r3, r4, r5, lr}
   d6d22:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d6d24:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6d26:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d6d28:	f7ff ff44 	bl	d6bb4 <_ZN8SPIClass4lockEv.isra.0>
   d6d2c:	b940      	cbnz	r0, d6d40 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d6d2e:	4629      	mov	r1, r5
   d6d30:	7920      	ldrb	r0, [r4, #4]
   d6d32:	f7ff fcd5 	bl	d66e0 <HAL_SPI_Send_Receive_Data>
   d6d36:	4605      	mov	r5, r0
        unlock();
   d6d38:	7920      	ldrb	r0, [r4, #4]
   d6d3a:	f7ff ff3e 	bl	d6bba <_ZN8SPIClass6unlockEv.isra.1>
   d6d3e:	e000      	b.n	d6d42 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d6d40:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d6d42:	b2e8      	uxtb	r0, r5
   d6d44:	bd38      	pop	{r3, r4, r5, pc}

000d6d46 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6d46:	7900      	ldrb	r0, [r0, #4]
   d6d48:	f7ff bcda 	b.w	d6700 <HAL_SPI_Is_Enabled>

000d6d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6d4c:	b510      	push	{r4, lr}
   d6d4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6d50:	6800      	ldr	r0, [r0, #0]
   d6d52:	b118      	cbz	r0, d6d5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6d54:	f7ff fec0 	bl	d6ad8 <free>
            wakeupSource_ = nullptr;
   d6d58:	2300      	movs	r3, #0
   d6d5a:	6023      	str	r3, [r4, #0]
   d6d5c:	bd10      	pop	{r4, pc}

000d6d5e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6d5e:	b510      	push	{r4, lr}
   d6d60:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6d62:	f7ff fff3 	bl	d6d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6d66:	4620      	mov	r0, r4
   d6d68:	bd10      	pop	{r4, pc}
	...

000d6d6c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6d6c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6d6e:	4c09      	ldr	r4, [pc, #36]	; (d6d94 <_GLOBAL__sub_I_System+0x28>)
   d6d70:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6d72:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6d76:	6020      	str	r0, [r4, #0]
   d6d78:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6d7a:	71a0      	strb	r0, [r4, #6]
   d6d7c:	8120      	strh	r0, [r4, #8]
   d6d7e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6d80:	f7ff fe06 	bl	d6990 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6d84:	4620      	mov	r0, r4
   d6d86:	4a04      	ldr	r2, [pc, #16]	; (d6d98 <_GLOBAL__sub_I_System+0x2c>)
   d6d88:	4904      	ldr	r1, [pc, #16]	; (d6d9c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6d8e:	f001 b9e1 	b.w	d8154 <__aeabi_atexit>
   d6d92:	bf00      	nop
   d6d94:	2003e3d8 	.word	0x2003e3d8
   d6d98:	2003e2d8 	.word	0x2003e2d8
   d6d9c:	000d6d5f 	.word	0x000d6d5f

000d6da0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6da0:	b510      	push	{r4, lr}
   d6da2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6da4:	6800      	ldr	r0, [r0, #0]
   d6da6:	b108      	cbz	r0, d6dac <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6da8:	f7ff fd02 	bl	d67b0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6dac:	4620      	mov	r0, r4
   d6dae:	bd10      	pop	{r4, pc}

000d6db0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6db0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6db2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6db4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6db6:	689b      	ldr	r3, [r3, #8]
   d6db8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6dba:	68a3      	ldr	r3, [r4, #8]
   d6dbc:	3b01      	subs	r3, #1
   d6dbe:	60a3      	str	r3, [r4, #8]
   d6dc0:	b92b      	cbnz	r3, d6dce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6dc2:	6823      	ldr	r3, [r4, #0]
   d6dc4:	4620      	mov	r0, r4
   d6dc6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6dcc:	4718      	bx	r3
   d6dce:	bd10      	pop	{r4, pc}

000d6dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6dd0:	680b      	ldr	r3, [r1, #0]
   d6dd2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6dd4:	b113      	cbz	r3, d6ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6dd6:	685a      	ldr	r2, [r3, #4]
   d6dd8:	3201      	adds	r2, #1
   d6dda:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6ddc:	4770      	bx	lr

000d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6dde:	b510      	push	{r4, lr}
   d6de0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6de2:	6800      	ldr	r0, [r0, #0]
   d6de4:	b128      	cbz	r0, d6df2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6de6:	6843      	ldr	r3, [r0, #4]
   d6de8:	3b01      	subs	r3, #1
   d6dea:	6043      	str	r3, [r0, #4]
   d6dec:	b90b      	cbnz	r3, d6df2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6dee:	f7ff ffdf 	bl	d6db0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6df2:	4620      	mov	r0, r4
   d6df4:	bd10      	pop	{r4, pc}
	...

000d6df8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6df8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6dfa:	4c06      	ldr	r4, [pc, #24]	; (d6e14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6dfc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6dfe:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6e00:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6e02:	f7ff fccd 	bl	d67a0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6e06:	4620      	mov	r0, r4
   d6e08:	4a03      	ldr	r2, [pc, #12]	; (d6e18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6e0a:	4904      	ldr	r1, [pc, #16]	; (d6e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6e10:	f001 b9a0 	b.w	d8154 <__aeabi_atexit>
   d6e14:	2003e3e4 	.word	0x2003e3e4
   d6e18:	2003e2d8 	.word	0x2003e2d8
   d6e1c:	000d6da1 	.word	0x000d6da1

000d6e20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e22:	4606      	mov	r6, r0
   d6e24:	460d      	mov	r5, r1
   d6e26:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6e28:	2400      	movs	r4, #0
  while (size--) {
   d6e2a:	42bd      	cmp	r5, r7
   d6e2c:	d00c      	beq.n	d6e48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e2e:	6833      	ldr	r3, [r6, #0]
   d6e30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e34:	689b      	ldr	r3, [r3, #8]
   d6e36:	4630      	mov	r0, r6
   d6e38:	4798      	blx	r3
     if (chunk>=0)
   d6e3a:	2800      	cmp	r0, #0
   d6e3c:	db01      	blt.n	d6e42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e3e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6e40:	e7f3      	b.n	d6e2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e42:	2c00      	cmp	r4, #0
   d6e44:	bf08      	it	eq
   d6e46:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e4c:	b570      	push	{r4, r5, r6, lr}
   d6e4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6e50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6e52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6e54:	b149      	cbz	r1, d6e6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6e56:	f003 fb4c 	bl	da4f2 <strlen>
   d6e5a:	682b      	ldr	r3, [r5, #0]
   d6e5c:	4602      	mov	r2, r0
   d6e5e:	4621      	mov	r1, r4
   d6e60:	4628      	mov	r0, r5
   d6e62:	68db      	ldr	r3, [r3, #12]
    }
   d6e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e68:	4718      	bx	r3
    }
   d6e6a:	bd70      	pop	{r4, r5, r6, pc}

000d6e6c <_ZN5Print5printEPKc>:
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	f7ff ffed 	bl	d6e4c <_ZN5Print5writeEPKc>
   d6e72:	bd08      	pop	{r3, pc}

000d6e74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6e74:	6803      	ldr	r3, [r0, #0]
   d6e76:	689b      	ldr	r3, [r3, #8]
   d6e78:	4718      	bx	r3

000d6e7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6e7c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6e80:	f7ff fff8 	bl	d6e74 <_ZN5Print5printEc>
  n += print('\n');
   d6e84:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6e86:	4604      	mov	r4, r0
  n += print('\n');
   d6e88:	4628      	mov	r0, r5
   d6e8a:	f7ff fff3 	bl	d6e74 <_ZN5Print5printEc>
  return n;
}
   d6e8e:	4420      	add	r0, r4
   d6e90:	bd38      	pop	{r3, r4, r5, pc}

000d6e92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6e92:	b538      	push	{r3, r4, r5, lr}
   d6e94:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e96:	f7ff ffd9 	bl	d6e4c <_ZN5Print5writeEPKc>
   d6e9a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6e9c:	4628      	mov	r0, r5
   d6e9e:	f7ff ffec 	bl	d6e7a <_ZN5Print7printlnEv>
  return n;
}
   d6ea2:	4420      	add	r0, r4
   d6ea4:	bd38      	pop	{r3, r4, r5, pc}

000d6ea6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d6ea6:	f7ff bff4 	b.w	d6e92 <_ZN5Print7printlnEPKc>

000d6eaa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6eaa:	b530      	push	{r4, r5, lr}
   d6eac:	b08b      	sub	sp, #44	; 0x2c
   d6eae:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6eb0:	2100      	movs	r1, #0
   d6eb2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6eb6:	2a01      	cmp	r2, #1
   d6eb8:	bf98      	it	ls
   d6eba:	220a      	movls	r2, #10
   d6ebc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6ec0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6ec4:	fb05 3312 	mls	r3, r5, r2, r3
   d6ec8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6ecc:	2b09      	cmp	r3, #9
   d6ece:	bf94      	ite	ls
   d6ed0:	3330      	addls	r3, #48	; 0x30
   d6ed2:	3337      	addhi	r3, #55	; 0x37
   d6ed4:	b2db      	uxtb	r3, r3
   d6ed6:	4621      	mov	r1, r4
   d6ed8:	f804 3901 	strb.w	r3, [r4], #-1
   d6edc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6ede:	2d00      	cmp	r5, #0
   d6ee0:	d1ee      	bne.n	d6ec0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6ee2:	f7ff ffb3 	bl	d6e4c <_ZN5Print5writeEPKc>
}
   d6ee6:	b00b      	add	sp, #44	; 0x2c
   d6ee8:	bd30      	pop	{r4, r5, pc}
	...

000d6eec <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ef0:	ec57 6b10 	vmov	r6, r7, d0
   d6ef4:	4682      	mov	sl, r0
   d6ef6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6ef8:	ee10 2a10 	vmov	r2, s0
   d6efc:	463b      	mov	r3, r7
   d6efe:	ee10 0a10 	vmov	r0, s0
   d6f02:	4639      	mov	r1, r7
   d6f04:	f003 f81e 	bl	d9f44 <__aeabi_dcmpun>
   d6f08:	b108      	cbz	r0, d6f0e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f0a:	494e      	ldr	r1, [pc, #312]	; (d7044 <_ZN5Print10printFloatEdh+0x158>)
   d6f0c:	e012      	b.n	d6f34 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6f0e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6f12:	f04f 32ff 	mov.w	r2, #4294967295
   d6f16:	4b4c      	ldr	r3, [pc, #304]	; (d7048 <_ZN5Print10printFloatEdh+0x15c>)
   d6f18:	4630      	mov	r0, r6
   d6f1a:	4649      	mov	r1, r9
   d6f1c:	f003 f812 	bl	d9f44 <__aeabi_dcmpun>
   d6f20:	b968      	cbnz	r0, d6f3e <_ZN5Print10printFloatEdh+0x52>
   d6f22:	f04f 32ff 	mov.w	r2, #4294967295
   d6f26:	4b48      	ldr	r3, [pc, #288]	; (d7048 <_ZN5Print10printFloatEdh+0x15c>)
   d6f28:	4630      	mov	r0, r6
   d6f2a:	4649      	mov	r1, r9
   d6f2c:	f002 ffec 	bl	d9f08 <__aeabi_dcmple>
   d6f30:	b928      	cbnz	r0, d6f3e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f32:	4946      	ldr	r1, [pc, #280]	; (d704c <_ZN5Print10printFloatEdh+0x160>)
   d6f34:	4650      	mov	r0, sl
   d6f36:	f7ff ff89 	bl	d6e4c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6f3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6f42:	4b43      	ldr	r3, [pc, #268]	; (d7050 <_ZN5Print10printFloatEdh+0x164>)
   d6f44:	4630      	mov	r0, r6
   d6f46:	4639      	mov	r1, r7
   d6f48:	f002 fff2 	bl	d9f30 <__aeabi_dcmpgt>
   d6f4c:	b108      	cbz	r0, d6f52 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f4e:	4941      	ldr	r1, [pc, #260]	; (d7054 <_ZN5Print10printFloatEdh+0x168>)
   d6f50:	e7f0      	b.n	d6f34 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6f52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6f56:	4b40      	ldr	r3, [pc, #256]	; (d7058 <_ZN5Print10printFloatEdh+0x16c>)
   d6f58:	4630      	mov	r0, r6
   d6f5a:	4639      	mov	r1, r7
   d6f5c:	f002 ffca 	bl	d9ef4 <__aeabi_dcmplt>
   d6f60:	2800      	cmp	r0, #0
   d6f62:	d1f4      	bne.n	d6f4e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6f64:	2200      	movs	r2, #0
   d6f66:	2300      	movs	r3, #0
   d6f68:	4630      	mov	r0, r6
   d6f6a:	4639      	mov	r1, r7
   d6f6c:	f002 ffc2 	bl	d9ef4 <__aeabi_dcmplt>
   d6f70:	b140      	cbz	r0, d6f84 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6f72:	212d      	movs	r1, #45	; 0x2d
   d6f74:	4650      	mov	r0, sl
   d6f76:	f7ff ff7d 	bl	d6e74 <_ZN5Print5printEc>
     number = -number;
   d6f7a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6f7e:	4604      	mov	r4, r0
     number = -number;
   d6f80:	461f      	mov	r7, r3
   d6f82:	e000      	b.n	d6f86 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6f84:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6f86:	4935      	ldr	r1, [pc, #212]	; (d705c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6f88:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6f8c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6f8e:	fa5f f388 	uxtb.w	r3, r8
   d6f92:	429d      	cmp	r5, r3
   d6f94:	d906      	bls.n	d6fa4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6f96:	2200      	movs	r2, #0
   d6f98:	4b31      	ldr	r3, [pc, #196]	; (d7060 <_ZN5Print10printFloatEdh+0x174>)
   d6f9a:	f002 fe63 	bl	d9c64 <__aeabi_ddiv>
   d6f9e:	f108 0801 	add.w	r8, r8, #1
   d6fa2:	e7f4      	b.n	d6f8e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6fa4:	4632      	mov	r2, r6
   d6fa6:	463b      	mov	r3, r7
   d6fa8:	f002 fb80 	bl	d96ac <__adddf3>
   d6fac:	460f      	mov	r7, r1
   d6fae:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6fb0:	f003 f806 	bl	d9fc0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6fb4:	220a      	movs	r2, #10
   d6fb6:	4601      	mov	r1, r0
   d6fb8:	4680      	mov	r8, r0
   d6fba:	4650      	mov	r0, sl
   d6fbc:	f7ff ff75 	bl	d6eaa <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6fc0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6fc2:	b3e5      	cbz	r5, d703e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6fc4:	4640      	mov	r0, r8
   d6fc6:	f002 fcad 	bl	d9924 <__aeabi_ui2d>
   d6fca:	4602      	mov	r2, r0
   d6fcc:	460b      	mov	r3, r1
   d6fce:	4630      	mov	r0, r6
   d6fd0:	4639      	mov	r1, r7
   d6fd2:	f002 fb69 	bl	d96a8 <__aeabi_dsub>
   d6fd6:	4606      	mov	r6, r0
   d6fd8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6fda:	4650      	mov	r0, sl
   d6fdc:	4921      	ldr	r1, [pc, #132]	; (d7064 <_ZN5Print10printFloatEdh+0x178>)
   d6fde:	f7ff ff35 	bl	d6e4c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6fe2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6fe4:	2200      	movs	r2, #0
   d6fe6:	4b1e      	ldr	r3, [pc, #120]	; (d7060 <_ZN5Print10printFloatEdh+0x174>)
   d6fe8:	4630      	mov	r0, r6
   d6fea:	4639      	mov	r1, r7
   d6fec:	f002 fd10 	bl	d9a10 <__aeabi_dmul>
   d6ff0:	4606      	mov	r6, r0
   d6ff2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6ff4:	f002 ffbc 	bl	d9f70 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6ff8:	f1b0 0900 	subs.w	r9, r0, #0
   d6ffc:	da07      	bge.n	d700e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d6ffe:	212d      	movs	r1, #45	; 0x2d
   d7000:	4650      	mov	r0, sl
   d7002:	f7ff ff37 	bl	d6e74 <_ZN5Print5printEc>
            val = -n;
   d7006:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d700a:	4680      	mov	r8, r0
   d700c:	e002      	b.n	d7014 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d700e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7010:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7014:	220a      	movs	r2, #10
   d7016:	4650      	mov	r0, sl
   d7018:	f7ff ff47 	bl	d6eaa <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d701c:	4440      	add	r0, r8
   d701e:	4404      	add	r4, r0
    remainder -= toPrint;
   d7020:	4648      	mov	r0, r9
   d7022:	f002 fc8f 	bl	d9944 <__aeabi_i2d>
   d7026:	4602      	mov	r2, r0
   d7028:	460b      	mov	r3, r1
   d702a:	4630      	mov	r0, r6
   d702c:	4639      	mov	r1, r7
   d702e:	f002 fb3b 	bl	d96a8 <__aeabi_dsub>
   d7032:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7034:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7038:	4606      	mov	r6, r0
   d703a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d703c:	d1d2      	bne.n	d6fe4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d703e:	4620      	mov	r0, r4
   d7040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7044:	000dae74 	.word	0x000dae74
   d7048:	7fefffff 	.word	0x7fefffff
   d704c:	000dae7e 	.word	0x000dae7e
   d7050:	41efffff 	.word	0x41efffff
   d7054:	000dae78 	.word	0x000dae78
   d7058:	c1efffff 	.word	0xc1efffff
   d705c:	3fe00000 	.word	0x3fe00000
   d7060:	40240000 	.word	0x40240000
   d7064:	000dae7c 	.word	0x000dae7c

000d7068 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d7068:	b538      	push	{r3, r4, r5, lr}
   d706a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d706c:	ee10 0a10 	vmov	r0, s0
   d7070:	b2cd      	uxtb	r5, r1
   d7072:	f002 fc79 	bl	d9968 <__aeabi_f2d>
   d7076:	ec41 0b10 	vmov	d0, r0, r1
   d707a:	4629      	mov	r1, r5
   d707c:	4620      	mov	r0, r4
}
   d707e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d7082:	f7ff bf33 	b.w	d6eec <_ZN5Print10printFloatEdh>

000d7086 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7086:	b40c      	push	{r2, r3}
   d7088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d708c:	b087      	sub	sp, #28
   d708e:	af00      	add	r7, sp, #0
   d7090:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7094:	4605      	mov	r5, r0
   d7096:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d709a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d709c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d709e:	4623      	mov	r3, r4
   d70a0:	464a      	mov	r2, r9
   d70a2:	2114      	movs	r1, #20
   d70a4:	1d38      	adds	r0, r7, #4
   d70a6:	f7ff fd1f 	bl	d6ae8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d70aa:	2813      	cmp	r0, #19
   d70ac:	d805      	bhi.n	d70ba <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d70ae:	1d39      	adds	r1, r7, #4
   d70b0:	4628      	mov	r0, r5
   d70b2:	f7ff fecb 	bl	d6e4c <_ZN5Print5writeEPKc>
   d70b6:	4604      	mov	r4, r0
   d70b8:	e013      	b.n	d70e2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d70ba:	f100 0308 	add.w	r3, r0, #8
   d70be:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d70c2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d70c4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d70c8:	1c41      	adds	r1, r0, #1
   d70ca:	4623      	mov	r3, r4
   d70cc:	464a      	mov	r2, r9
   d70ce:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d70d0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d70d2:	f7ff fd09 	bl	d6ae8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d70d6:	4669      	mov	r1, sp
   d70d8:	4628      	mov	r0, r5
   d70da:	f7ff feb7 	bl	d6e4c <_ZN5Print5writeEPKc>
   d70de:	4604      	mov	r4, r0
   d70e0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d70e2:	b11e      	cbz	r6, d70ec <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d70e4:	4628      	mov	r0, r5
   d70e6:	f7ff fec8 	bl	d6e7a <_ZN5Print7printlnEv>
   d70ea:	4404      	add	r4, r0
    return n;
}
   d70ec:	4620      	mov	r0, r4
   d70ee:	371c      	adds	r7, #28
   d70f0:	46bd      	mov	sp, r7
   d70f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70f6:	b002      	add	sp, #8
   d70f8:	4770      	bx	lr
	...

000d70fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d70fc:	4b01      	ldr	r3, [pc, #4]	; (d7104 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d70fe:	4a02      	ldr	r2, [pc, #8]	; (d7108 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7100:	601a      	str	r2, [r3, #0]
   d7102:	4770      	bx	lr
   d7104:	2003e3e8 	.word	0x2003e3e8
   d7108:	000daef2 	.word	0x000daef2

000d710c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d710c:	4b02      	ldr	r3, [pc, #8]	; (d7118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d710e:	681a      	ldr	r2, [r3, #0]
   d7110:	4b02      	ldr	r3, [pc, #8]	; (d711c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7112:	601a      	str	r2, [r3, #0]
   d7114:	4770      	bx	lr
   d7116:	bf00      	nop
   d7118:	2003e268 	.word	0x2003e268
   d711c:	2003e3ec 	.word	0x2003e3ec

000d7120 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7120:	2100      	movs	r1, #0
   d7122:	f7ff bc3d 	b.w	d69a0 <system_delay_ms>

000d7126 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7126:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7128:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d712a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d712c:	b113      	cbz	r3, d7134 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d712e:	2203      	movs	r2, #3
   d7130:	4601      	mov	r1, r0
   d7132:	4798      	blx	r3
    }
   d7134:	4620      	mov	r0, r4
   d7136:	bd10      	pop	{r4, pc}

000d7138 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7138:	b510      	push	{r4, lr}
   d713a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d713c:	f7ff fff3 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
   d7140:	4620      	mov	r0, r4
   d7142:	bd10      	pop	{r4, pc}

000d7144 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7144:	b513      	push	{r0, r1, r4, lr}
   d7146:	460b      	mov	r3, r1
   d7148:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d714a:	c803      	ldmia	r0, {r0, r1}
   d714c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7150:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7154:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7158:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d715c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7160:	b002      	add	sp, #8
   d7162:	bd10      	pop	{r4, pc}

000d7164 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7164:	4803      	ldr	r0, [pc, #12]	; (d7174 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7166:	4a04      	ldr	r2, [pc, #16]	; (d7178 <_GLOBAL__sub_I_RGB+0x14>)
   d7168:	4904      	ldr	r1, [pc, #16]	; (d717c <_GLOBAL__sub_I_RGB+0x18>)
   d716a:	2300      	movs	r3, #0
   d716c:	6083      	str	r3, [r0, #8]
   d716e:	f000 bff1 	b.w	d8154 <__aeabi_atexit>
   d7172:	bf00      	nop
   d7174:	2003e3f0 	.word	0x2003e3f0
   d7178:	2003e2d8 	.word	0x2003e2d8
   d717c:	000d7139 	.word	0x000d7139

000d7180 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7180:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7182:	4b0c      	ldr	r3, [pc, #48]	; (d71b4 <serialEventRun+0x34>)
   d7184:	b133      	cbz	r3, d7194 <serialEventRun+0x14>
   d7186:	f000 fc21 	bl	d79cc <_Z16_fetch_usbserialv>
   d718a:	6803      	ldr	r3, [r0, #0]
   d718c:	691b      	ldr	r3, [r3, #16]
   d718e:	4798      	blx	r3
   d7190:	2800      	cmp	r0, #0
   d7192:	dc09      	bgt.n	d71a8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7194:	4b08      	ldr	r3, [pc, #32]	; (d71b8 <serialEventRun+0x38>)
   d7196:	b163      	cbz	r3, d71b2 <serialEventRun+0x32>
   d7198:	f000 fc9a 	bl	d7ad0 <_Z22__fetch_global_Serial1v>
   d719c:	6803      	ldr	r3, [r0, #0]
   d719e:	691b      	ldr	r3, [r3, #16]
   d71a0:	4798      	blx	r3
   d71a2:	2800      	cmp	r0, #0
   d71a4:	dc03      	bgt.n	d71ae <serialEventRun+0x2e>
   d71a6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d71a8:	f3af 8000 	nop.w
   d71ac:	e7f2      	b.n	d7194 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d71ae:	f3af 8000 	nop.w
   d71b2:	bd08      	pop	{r3, pc}
	...

000d71bc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d71bc:	b508      	push	{r3, lr}
	serialEventRun();
   d71be:	f7ff ffdf 	bl	d7180 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d71c2:	f7ff facd 	bl	d6760 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d71c6:	4b01      	ldr	r3, [pc, #4]	; (d71cc <_post_loop+0x10>)
   d71c8:	6018      	str	r0, [r3, #0]
   d71ca:	bd08      	pop	{r3, pc}
   d71cc:	2003e734 	.word	0x2003e734

000d71d0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d71d0:	4802      	ldr	r0, [pc, #8]	; (d71dc <_Z33system_initialize_user_backup_ramv+0xc>)
   d71d2:	4a03      	ldr	r2, [pc, #12]	; (d71e0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d71d4:	4903      	ldr	r1, [pc, #12]	; (d71e4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d71d6:	1a12      	subs	r2, r2, r0
   d71d8:	f003 b934 	b.w	da444 <memcpy>
   d71dc:	2003f400 	.word	0x2003f400
   d71e0:	2003f404 	.word	0x2003f404
   d71e4:	000db1c8 	.word	0x000db1c8

000d71e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d71e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71ea:	2300      	movs	r3, #0
   d71ec:	9300      	str	r3, [sp, #0]
   d71ee:	461a      	mov	r2, r3
   d71f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71f4:	f7ff fbf6 	bl	d69e4 <system_ctrl_set_result>
}
   d71f8:	b003      	add	sp, #12
   d71fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7200 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7200:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7202:	8843      	ldrh	r3, [r0, #2]
   d7204:	2b0a      	cmp	r3, #10
   d7206:	d008      	beq.n	d721a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7208:	2b50      	cmp	r3, #80	; 0x50
   d720a:	d109      	bne.n	d7220 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d720c:	4b09      	ldr	r3, [pc, #36]	; (d7234 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d720e:	681b      	ldr	r3, [r3, #0]
   d7210:	b13b      	cbz	r3, d7222 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7212:	b003      	add	sp, #12
   d7214:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7218:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d721a:	f7ff ffe5 	bl	d71e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d721e:	e006      	b.n	d722e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7220:	2300      	movs	r3, #0
   d7222:	9300      	str	r3, [sp, #0]
   d7224:	461a      	mov	r2, r3
   d7226:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d722a:	f7ff fbdb 	bl	d69e4 <system_ctrl_set_result>
        break;
    }
}
   d722e:	b003      	add	sp, #12
   d7230:	f85d fb04 	ldr.w	pc, [sp], #4
   d7234:	2003e400 	.word	0x2003e400

000d7238 <module_user_init_hook>:

void module_user_init_hook()
{
   d7238:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d723a:	4c10      	ldr	r4, [pc, #64]	; (d727c <module_user_init_hook+0x44>)
   d723c:	4d10      	ldr	r5, [pc, #64]	; (d7280 <module_user_init_hook+0x48>)
   d723e:	6823      	ldr	r3, [r4, #0]
   d7240:	42ab      	cmp	r3, r5
   d7242:	4b10      	ldr	r3, [pc, #64]	; (d7284 <module_user_init_hook+0x4c>)
   d7244:	bf0c      	ite	eq
   d7246:	2201      	moveq	r2, #1
   d7248:	2200      	movne	r2, #0
   d724a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d724c:	d002      	beq.n	d7254 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d724e:	f7ff ffbf 	bl	d71d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7252:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7254:	f7ff fa74 	bl	d6740 <HAL_RNG_GetRandomNumber>
   d7258:	4604      	mov	r4, r0
    srand(seed);
   d725a:	f003 f907 	bl	da46c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d725e:	4b0a      	ldr	r3, [pc, #40]	; (d7288 <module_user_init_hook+0x50>)
   d7260:	b113      	cbz	r3, d7268 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7262:	4620      	mov	r0, r4
   d7264:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7268:	2100      	movs	r1, #0
   d726a:	4807      	ldr	r0, [pc, #28]	; (d7288 <module_user_init_hook+0x50>)
   d726c:	f7ff fc24 	bl	d6ab8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7270:	2100      	movs	r1, #0
   d7272:	4806      	ldr	r0, [pc, #24]	; (d728c <module_user_init_hook+0x54>)
}
   d7274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7278:	f7ff bbaa 	b.w	d69d0 <system_ctrl_set_app_request_handler>
   d727c:	2003f400 	.word	0x2003f400
   d7280:	9a271c1e 	.word	0x9a271c1e
   d7284:	2003e404 	.word	0x2003e404
   d7288:	00000000 	.word	0x00000000
   d728c:	000d7201 	.word	0x000d7201

000d7290 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7290:	4770      	bx	lr

000d7292 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7292:	2000      	movs	r0, #0
   d7294:	4770      	bx	lr

000d7296 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7296:	b510      	push	{r4, lr}
   d7298:	2110      	movs	r1, #16
   d729a:	4604      	mov	r4, r0
   d729c:	f000 ff68 	bl	d8170 <_ZdlPvj>
   d72a0:	4620      	mov	r0, r4
   d72a2:	bd10      	pop	{r4, pc}

000d72a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d72a4:	b508      	push	{r3, lr}
      { delete this; }
   d72a6:	b108      	cbz	r0, d72ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d72a8:	f7ff fff5 	bl	d7296 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d72ac:	bd08      	pop	{r3, pc}

000d72ae <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d72ae:	2200      	movs	r2, #0
   d72b0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d72b2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d72b4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d72b8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d72ba:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d72be:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d72c0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72c2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d72c4:	680c      	ldr	r4, [r1, #0]
   d72c6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d72c8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d72ca:	bd10      	pop	{r4, pc}

000d72cc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d72cc:	b510      	push	{r4, lr}
   d72ce:	4604      	mov	r4, r0
    free((void*)msg_);
   d72d0:	6800      	ldr	r0, [r0, #0]
   d72d2:	f7ff fc01 	bl	d6ad8 <free>
}
   d72d6:	4620      	mov	r0, r4
   d72d8:	bd10      	pop	{r4, pc}

000d72da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d72da:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d72dc:	68c4      	ldr	r4, [r0, #12]
   d72de:	b1f4      	cbz	r4, d731e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d72e0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d72e2:	2b02      	cmp	r3, #2
   d72e4:	d103      	bne.n	d72ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d72e6:	f104 000c 	add.w	r0, r4, #12
   d72ea:	f7ff ffef 	bl	d72cc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d72ee:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d72f0:	b135      	cbz	r5, d7300 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72f2:	4628      	mov	r0, r5
   d72f4:	f7ff ff17 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
   d72f8:	2110      	movs	r1, #16
   d72fa:	4628      	mov	r0, r5
   d72fc:	f000 ff38 	bl	d8170 <_ZdlPvj>
   d7300:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7302:	b135      	cbz	r5, d7312 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7304:	4628      	mov	r0, r5
   d7306:	f7ff ff0e 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
   d730a:	2110      	movs	r1, #16
   d730c:	4628      	mov	r0, r5
   d730e:	f000 ff2f 	bl	d8170 <_ZdlPvj>
   d7312:	4620      	mov	r0, r4
   d7314:	2114      	movs	r1, #20
   d7316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d731a:	f000 bf29 	b.w	d8170 <_ZdlPvj>
   d731e:	bd38      	pop	{r3, r4, r5, pc}

000d7320 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7320:	b513      	push	{r0, r1, r4, lr}
   d7322:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7324:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7328:	2300      	movs	r3, #0
   d732a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d732c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d732e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7330:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7332:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7334:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7336:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7338:	f7ff fd51 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d733c:	4620      	mov	r0, r4
   d733e:	b002      	add	sp, #8
   d7340:	bd10      	pop	{r4, pc}

000d7342 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7344:	460c      	mov	r4, r1
   d7346:	ad02      	add	r5, sp, #8
   d7348:	f854 3b04 	ldr.w	r3, [r4], #4
   d734c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7350:	4606      	mov	r6, r0
   d7352:	460f      	mov	r7, r1
   d7354:	a801      	add	r0, sp, #4
   d7356:	4621      	mov	r1, r4
   d7358:	f7ff fd3a 	bl	d6dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d735c:	4629      	mov	r1, r5
   d735e:	4630      	mov	r0, r6
   d7360:	f7ff ffde 	bl	d7320 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7364:	a801      	add	r0, sp, #4
   d7366:	f7ff fd3a 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d736a:	4620      	mov	r0, r4
   d736c:	f7ff fd37 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7370:	4638      	mov	r0, r7
   d7372:	2108      	movs	r1, #8
   d7374:	f000 fefc 	bl	d8170 <_ZdlPvj>
        return p;
    }
   d7378:	4630      	mov	r0, r6
   d737a:	b003      	add	sp, #12
   d737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7380:	b538      	push	{r3, r4, r5, lr}
   d7382:	2300      	movs	r3, #0
   d7384:	4604      	mov	r4, r0
   d7386:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7388:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d738a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d738c:	f7fc fe85 	bl	d409a <_Znwj>
   d7390:	b128      	cbz	r0, d739e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7392:	2301      	movs	r3, #1
   d7394:	6043      	str	r3, [r0, #4]
   d7396:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7398:	4b02      	ldr	r3, [pc, #8]	; (d73a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d739a:	6003      	str	r3, [r0, #0]
   d739c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d739e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d73a0:	4620      	mov	r0, r4
   d73a2:	bd38      	pop	{r3, r4, r5, pc}
   d73a4:	000daf8c 	.word	0x000daf8c

000d73a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73a8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d73aa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73ac:	b90a      	cbnz	r2, d73b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d73ae:	f000 fef2 	bl	d8196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73b2:	68c3      	ldr	r3, [r0, #12]
    }
   d73b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73b8:	4718      	bx	r3

000d73ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73ba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d73bc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d73be:	f100 0110 	add.w	r1, r0, #16
   d73c2:	f7ff fff1 	bl	d73a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d73c6:	bd08      	pop	{r3, pc}

000d73c8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73c8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d73ca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d73cc:	b90a      	cbnz	r2, d73d2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d73ce:	f000 fee2 	bl	d8196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73d2:	68c3      	ldr	r3, [r0, #12]
    }
   d73d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73d8:	4718      	bx	r3

000d73da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73da:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d73dc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d73de:	f100 0110 	add.w	r1, r0, #16
   d73e2:	f7ff fff1 	bl	d73c8 <_ZNKSt8functionIFvRKbEEclES1_>
   d73e6:	bd08      	pop	{r3, pc}

000d73e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d73e8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d73ea:	2300      	movs	r3, #0
   d73ec:	6083      	str	r3, [r0, #8]
   d73ee:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d73f0:	4604      	mov	r4, r0
   d73f2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d73f4:	b12b      	cbz	r3, d7402 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d73f6:	2202      	movs	r2, #2
   d73f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d73fa:	68eb      	ldr	r3, [r5, #12]
   d73fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d73fe:	68ab      	ldr	r3, [r5, #8]
   d7400:	60a3      	str	r3, [r4, #8]
	}
    }
   d7402:	4620      	mov	r0, r4
   d7404:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7408 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7408:	b5f0      	push	{r4, r5, r6, r7, lr}
   d740a:	b089      	sub	sp, #36	; 0x24
   d740c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d740e:	4668      	mov	r0, sp
   d7410:	f7ff ff4d 	bl	d72ae <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7414:	2300      	movs	r3, #0
   d7416:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d741a:	f04f 0202 	mov.w	r2, #2
   d741e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7422:	2b00      	cmp	r3, #0
   d7424:	d103      	bne.n	d742e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7426:	e8c4 2f41 	strexb	r1, r2, [r4]
   d742a:	2900      	cmp	r1, #0
   d742c:	d1f7      	bne.n	d741e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d742e:	d002      	beq.n	d7436 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7430:	f88d 3008 	strb.w	r3, [sp, #8]
   d7434:	e063      	b.n	d74fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7436:	f114 050c 	adds.w	r5, r4, #12
   d743a:	d003      	beq.n	d7444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d743c:	4669      	mov	r1, sp
   d743e:	4628      	mov	r0, r5
   d7440:	f7ff ff35 	bl	d72ae <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7444:	f3bf 8f5f 	dmb	sy
   d7448:	2301      	movs	r3, #1
   d744a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d744c:	2000      	movs	r0, #0
   d744e:	f104 0308 	add.w	r3, r4, #8
   d7452:	f3bf 8f5f 	dmb	sy
   d7456:	e853 6f00 	ldrex	r6, [r3]
   d745a:	e843 0200 	strex	r2, r0, [r3]
   d745e:	2a00      	cmp	r2, #0
   d7460:	d1f9      	bne.n	d7456 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7462:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7466:	2e00      	cmp	r6, #0
   d7468:	d049      	beq.n	d74fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d746a:	f7ff faa1 	bl	d69b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d746e:	b120      	cbz	r0, d747a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7470:	4629      	mov	r1, r5
   d7472:	4630      	mov	r0, r6
   d7474:	f7ff ff98 	bl	d73a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7478:	e03a      	b.n	d74f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d747a:	4631      	mov	r1, r6
   d747c:	a802      	add	r0, sp, #8
   d747e:	f7ff ffb3 	bl	d73e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7482:	68e0      	ldr	r0, [r4, #12]
   d7484:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7488:	b108      	cbz	r0, d748e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d748a:	f003 f817 	bl	da4bc <strdup>
   d748e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7490:	2010      	movs	r0, #16
   d7492:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7496:	f7fc fe00 	bl	d409a <_Znwj>
   d749a:	4605      	mov	r5, r0
   d749c:	b1e8      	cbz	r0, d74da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d749e:	2700      	movs	r7, #0
   d74a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74a2:	2018      	movs	r0, #24
   d74a4:	f7fc fdf9 	bl	d409a <_Znwj>
   d74a8:	4604      	mov	r4, r0
   d74aa:	b188      	cbz	r0, d74d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d74ac:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d74ae:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d74b0:	a802      	add	r0, sp, #8
   d74b2:	f7ff fe47 	bl	d7144 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74b6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d74b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d74ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74bc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d74be:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d74c0:	a906      	add	r1, sp, #24
   d74c2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d74c4:	60e3      	str	r3, [r4, #12]
   d74c6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d74ca:	9205      	str	r2, [sp, #20]
   d74cc:	f7ff feef 	bl	d72ae <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d74d0:	4b0d      	ldr	r3, [pc, #52]	; (d7508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d74d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74d4:	4b0d      	ldr	r3, [pc, #52]	; (d750c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74d6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d74d8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d74da:	a806      	add	r0, sp, #24
   d74dc:	f7ff fef6 	bl	d72cc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74e0:	a802      	add	r0, sp, #8
   d74e2:	f7ff fe20 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d74e6:	2200      	movs	r2, #0
   d74e8:	4629      	mov	r1, r5
   d74ea:	4809      	ldr	r0, [pc, #36]	; (d7510 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d74ec:	f7ff fa68 	bl	d69c0 <application_thread_invoke>
   d74f0:	4630      	mov	r0, r6
   d74f2:	f7ff fe18 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d74f6:	2110      	movs	r1, #16
   d74f8:	4630      	mov	r0, r6
   d74fa:	f000 fe39 	bl	d8170 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d74fe:	4668      	mov	r0, sp
   d7500:	f7ff fee4 	bl	d72cc <_ZN8particle5ErrorD1Ev>
    }
   d7504:	b009      	add	sp, #36	; 0x24
   d7506:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7508:	000d73bb 	.word	0x000d73bb
   d750c:	000d7631 	.word	0x000d7631
   d7510:	000d7b1d 	.word	0x000d7b1d

000d7514 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7518:	b08b      	sub	sp, #44	; 0x2c
   d751a:	4606      	mov	r6, r0
   d751c:	460f      	mov	r7, r1
   d751e:	4690      	mov	r8, r2
   d7520:	4699      	mov	r9, r3
   d7522:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7526:	f7ff fab7 	bl	d6a98 <spark_cloud_flag_connected>
   d752a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d752c:	4683      	mov	fp, r0
   d752e:	bb30      	cbnz	r0, d757e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7530:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7534:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7536:	a905      	add	r1, sp, #20
   d7538:	4628      	mov	r0, r5
   d753a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d753e:	f7ff feb6 	bl	d72ae <_ZN8particle5ErrorC1EOS0_>
   d7542:	2014      	movs	r0, #20
   d7544:	f7fc fda9 	bl	d409a <_Znwj>
   d7548:	4604      	mov	r4, r0
   d754a:	b158      	cbz	r0, d7564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d754c:	2302      	movs	r3, #2
   d754e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7550:	2301      	movs	r3, #1
   d7552:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7554:	f8c0 b004 	str.w	fp, [r0, #4]
   d7558:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d755c:	4629      	mov	r1, r5
   d755e:	300c      	adds	r0, #12
   d7560:	f7ff fea5 	bl	d72ae <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7564:	4630      	mov	r0, r6
   d7566:	4621      	mov	r1, r4
   d7568:	f840 4b04 	str.w	r4, [r0], #4
   d756c:	f7ff ff08 	bl	d7380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7570:	4628      	mov	r0, r5
   d7572:	f7ff feab 	bl	d72cc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7576:	a805      	add	r0, sp, #20
   d7578:	f7ff fea8 	bl	d72cc <_ZN8particle5ErrorD1Ev>
   d757c:	e052      	b.n	d7624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d757e:	2400      	movs	r4, #0
   d7580:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7582:	2014      	movs	r0, #20
   d7584:	606c      	str	r4, [r5, #4]
   d7586:	60ac      	str	r4, [r5, #8]
   d7588:	9307      	str	r3, [sp, #28]
   d758a:	f7fc fd86 	bl	d409a <_Znwj>
   d758e:	4601      	mov	r1, r0
   d7590:	b118      	cbz	r0, d759a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7592:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7594:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7596:	6044      	str	r4, [r0, #4]
   d7598:	6084      	str	r4, [r0, #8]
   d759a:	a804      	add	r0, sp, #16
   d759c:	9103      	str	r1, [sp, #12]
   d759e:	f7ff feef 	bl	d7380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d75a2:	4b22      	ldr	r3, [pc, #136]	; (d762c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d75a4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d75a6:	2008      	movs	r0, #8
   d75a8:	f7fc fd77 	bl	d409a <_Znwj>
   d75ac:	4604      	mov	r4, r0
   d75ae:	b128      	cbz	r0, d75bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d75b0:	9b03      	ldr	r3, [sp, #12]
   d75b2:	f840 3b04 	str.w	r3, [r0], #4
   d75b6:	a904      	add	r1, sp, #16
   d75b8:	f7ff fc0a 	bl	d6dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75bc:	9500      	str	r5, [sp, #0]
   d75be:	fa5f f38a 	uxtb.w	r3, sl
   d75c2:	464a      	mov	r2, r9
   d75c4:	4641      	mov	r1, r8
   d75c6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d75c8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75ca:	f7ff fa6d 	bl	d6aa8 <spark_send_event>
   d75ce:	b920      	cbnz	r0, d75da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d75d0:	9b03      	ldr	r3, [sp, #12]
   d75d2:	785b      	ldrb	r3, [r3, #1]
   d75d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d75d8:	b183      	cbz	r3, d75fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d75da:	9b03      	ldr	r3, [sp, #12]
   d75dc:	9305      	str	r3, [sp, #20]
   d75de:	a904      	add	r1, sp, #16
   d75e0:	a806      	add	r0, sp, #24
   d75e2:	f7ff fbf5 	bl	d6dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d75e6:	a905      	add	r1, sp, #20
   d75e8:	4630      	mov	r0, r6
   d75ea:	f7ff fe99 	bl	d7320 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d75ee:	a806      	add	r0, sp, #24
   d75f0:	f7ff fbf5 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75f4:	a804      	add	r0, sp, #16
   d75f6:	f7ff fbf2 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75fa:	e013      	b.n	d7624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d75fc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7600:	a905      	add	r1, sp, #20
   d7602:	a803      	add	r0, sp, #12
   d7604:	9205      	str	r2, [sp, #20]
   d7606:	f8ad 3018 	strh.w	r3, [sp, #24]
   d760a:	f7ff fefd 	bl	d7408 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d760e:	a805      	add	r0, sp, #20
   d7610:	f7ff fe5c 	bl	d72cc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7614:	a805      	add	r0, sp, #20
   d7616:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7618:	f7ff fe93 	bl	d7342 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d761c:	a806      	add	r0, sp, #24
   d761e:	f7ff fbde 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7622:	e7da      	b.n	d75da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7624:	4630      	mov	r0, r6
   d7626:	b00b      	add	sp, #44	; 0x2c
   d7628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d762c:	000d77a1 	.word	0x000d77a1

000d7630 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7630:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7634:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7636:	d006      	beq.n	d7646 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7638:	2a03      	cmp	r2, #3
   d763a:	d017      	beq.n	d766c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d763c:	2a01      	cmp	r2, #1
   d763e:	d122      	bne.n	d7686 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7640:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7642:	6003      	str	r3, [r0, #0]
	      break;
   d7644:	e01f      	b.n	d7686 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7646:	2018      	movs	r0, #24
   d7648:	680e      	ldr	r6, [r1, #0]
   d764a:	f7fc fd26 	bl	d409a <_Znwj>
   d764e:	4605      	mov	r5, r0
   d7650:	b150      	cbz	r0, d7668 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7652:	4631      	mov	r1, r6
   d7654:	f7ff fec8 	bl	d73e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7658:	6930      	ldr	r0, [r6, #16]
   d765a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d765e:	b108      	cbz	r0, d7664 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7660:	f002 ff2c 	bl	da4bc <strdup>
   d7664:	6128      	str	r0, [r5, #16]
   d7666:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7668:	6025      	str	r5, [r4, #0]
   d766a:	e00c      	b.n	d7686 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d766c:	6804      	ldr	r4, [r0, #0]
   d766e:	b154      	cbz	r4, d7686 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7670:	f104 0010 	add.w	r0, r4, #16
   d7674:	f7ff fe2a 	bl	d72cc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7678:	4620      	mov	r0, r4
   d767a:	f7ff fd54 	bl	d7126 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d767e:	2118      	movs	r1, #24
   d7680:	4620      	mov	r0, r4
   d7682:	f000 fd75 	bl	d8170 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7686:	2000      	movs	r0, #0
   d7688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d768a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d768a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d768c:	2300      	movs	r3, #0
   d768e:	6083      	str	r3, [r0, #8]
   d7690:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7692:	4604      	mov	r4, r0
   d7694:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7696:	b12b      	cbz	r3, d76a4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7698:	2202      	movs	r2, #2
   d769a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d769c:	68eb      	ldr	r3, [r5, #12]
   d769e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d76a0:	68ab      	ldr	r3, [r5, #8]
   d76a2:	60a3      	str	r3, [r4, #8]
	}
    }
   d76a4:	4620      	mov	r0, r4
   d76a6:	bd38      	pop	{r3, r4, r5, pc}

000d76a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d76a8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d76aa:	b570      	push	{r4, r5, r6, lr}
   d76ac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d76ae:	d006      	beq.n	d76be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d76b0:	2a03      	cmp	r2, #3
   d76b2:	d011      	beq.n	d76d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d76b4:	2a01      	cmp	r2, #1
   d76b6:	d118      	bne.n	d76ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d76b8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d76ba:	6003      	str	r3, [r0, #0]
	      break;
   d76bc:	e015      	b.n	d76ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d76be:	2014      	movs	r0, #20
   d76c0:	680e      	ldr	r6, [r1, #0]
   d76c2:	f7fc fcea 	bl	d409a <_Znwj>
   d76c6:	4605      	mov	r5, r0
   d76c8:	b120      	cbz	r0, d76d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d76ca:	4631      	mov	r1, r6
   d76cc:	f7ff ffdd 	bl	d768a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d76d0:	7c33      	ldrb	r3, [r6, #16]
   d76d2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d76d4:	6025      	str	r5, [r4, #0]
   d76d6:	e008      	b.n	d76ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d76d8:	6804      	ldr	r4, [r0, #0]
   d76da:	b134      	cbz	r4, d76ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d76dc:	4620      	mov	r0, r4
   d76de:	f7ff fd22 	bl	d7126 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d76e2:	2114      	movs	r1, #20
   d76e4:	4620      	mov	r0, r4
   d76e6:	f000 fd43 	bl	d8170 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d76ea:	2000      	movs	r0, #0
   d76ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d76f0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d76f2:	2300      	movs	r3, #0
   d76f4:	b087      	sub	sp, #28
   d76f6:	460c      	mov	r4, r1
   d76f8:	f3bf 8f5f 	dmb	sy
   d76fc:	e850 6f00 	ldrex	r6, [r0]
   d7700:	e840 3200 	strex	r2, r3, [r0]
   d7704:	2a00      	cmp	r2, #0
   d7706:	d1f9      	bne.n	d76fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7708:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d770c:	2e00      	cmp	r6, #0
   d770e:	d03f      	beq.n	d7790 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7710:	4618      	mov	r0, r3
   d7712:	f7ff f94d 	bl	d69b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7716:	4607      	mov	r7, r0
   d7718:	b120      	cbz	r0, d7724 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d771a:	4621      	mov	r1, r4
   d771c:	4630      	mov	r0, r6
   d771e:	f7ff fe53 	bl	d73c8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7722:	e02e      	b.n	d7782 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7724:	4631      	mov	r1, r6
   d7726:	a801      	add	r0, sp, #4
   d7728:	f7ff ffaf 	bl	d768a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d772c:	7823      	ldrb	r3, [r4, #0]
   d772e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7732:	2010      	movs	r0, #16
   d7734:	f7fc fcb1 	bl	d409a <_Znwj>
   d7738:	4605      	mov	r5, r0
   d773a:	b1d0      	cbz	r0, d7772 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d773c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d773e:	2014      	movs	r0, #20
   d7740:	f7fc fcab 	bl	d409a <_Znwj>
   d7744:	4604      	mov	r4, r0
   d7746:	b178      	cbz	r0, d7768 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7748:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d774a:	4601      	mov	r1, r0
   d774c:	a801      	add	r0, sp, #4
   d774e:	f7ff fcf9 	bl	d7144 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7752:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7754:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7756:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7758:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d775a:	9203      	str	r2, [sp, #12]
   d775c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d775e:	60e3      	str	r3, [r4, #12]
   d7760:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7764:	9204      	str	r2, [sp, #16]
   d7766:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7768:	4b0a      	ldr	r3, [pc, #40]	; (d7794 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d776a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d776c:	4b0a      	ldr	r3, [pc, #40]	; (d7798 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d776e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7770:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7772:	a801      	add	r0, sp, #4
   d7774:	f7ff fcd7 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7778:	2200      	movs	r2, #0
   d777a:	4629      	mov	r1, r5
   d777c:	4807      	ldr	r0, [pc, #28]	; (d779c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d777e:	f7ff f91f 	bl	d69c0 <application_thread_invoke>
   d7782:	4630      	mov	r0, r6
   d7784:	f7ff fccf 	bl	d7126 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7788:	2110      	movs	r1, #16
   d778a:	4630      	mov	r0, r6
   d778c:	f000 fcf0 	bl	d8170 <_ZdlPvj>
        }
    }
   d7790:	b007      	add	sp, #28
   d7792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7794:	000d73db 	.word	0x000d73db
   d7798:	000d76a9 	.word	0x000d76a9
   d779c:	000d7b1d 	.word	0x000d7b1d

000d77a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d77a0:	b530      	push	{r4, r5, lr}
   d77a2:	b085      	sub	sp, #20
   d77a4:	4604      	mov	r4, r0
   d77a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d77a8:	4668      	mov	r0, sp
   d77aa:	4611      	mov	r1, r2
   d77ac:	f7ff fdc9 	bl	d7342 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d77b0:	b17c      	cbz	r4, d77d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d77b2:	b224      	sxth	r4, r4
   d77b4:	4628      	mov	r0, r5
   d77b6:	b10d      	cbz	r5, d77bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d77b8:	f002 fe80 	bl	da4bc <strdup>
   d77bc:	9002      	str	r0, [sp, #8]
   d77be:	a902      	add	r1, sp, #8
   d77c0:	4668      	mov	r0, sp
   d77c2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d77c6:	f7ff fe1f 	bl	d7408 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d77ca:	a802      	add	r0, sp, #8
   d77cc:	f7ff fd7e 	bl	d72cc <_ZN8particle5ErrorD1Ev>
   d77d0:	e01d      	b.n	d780e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d77d2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d77d4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d77d8:	f04f 0201 	mov.w	r2, #1
   d77dc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d77e0:	42a3      	cmp	r3, r4
   d77e2:	d103      	bne.n	d77ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d77e4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d77e8:	2900      	cmp	r1, #0
   d77ea:	d1f7      	bne.n	d77dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d77ec:	d002      	beq.n	d77f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d77ee:	f88d 3008 	strb.w	r3, [sp, #8]
   d77f2:	e00c      	b.n	d780e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d77f4:	f110 010c 	adds.w	r1, r0, #12
   d77f8:	f04f 0301 	mov.w	r3, #1
   d77fc:	bf18      	it	ne
   d77fe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7800:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7804:	3004      	adds	r0, #4
   d7806:	f800 3c03 	strb.w	r3, [r0, #-3]
   d780a:	f7ff ff71 	bl	d76f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d780e:	a801      	add	r0, sp, #4
   d7810:	f7ff fae5 	bl	d6dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7814:	b005      	add	sp, #20
   d7816:	bd30      	pop	{r4, r5, pc}

000d7818 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7818:	4770      	bx	lr

000d781a <_ZN9IPAddressD0Ev>:
   d781a:	b510      	push	{r4, lr}
   d781c:	2118      	movs	r1, #24
   d781e:	4604      	mov	r4, r0
   d7820:	f000 fca6 	bl	d8170 <_ZdlPvj>
   d7824:	4620      	mov	r0, r4
   d7826:	bd10      	pop	{r4, pc}

000d7828 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7828:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d782a:	7d03      	ldrb	r3, [r0, #20]
   d782c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d782e:	b08d      	sub	sp, #52	; 0x34
   d7830:	460e      	mov	r6, r1
   d7832:	f100 0704 	add.w	r7, r0, #4
   d7836:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d783a:	d002      	beq.n	d7842 <_ZNK9IPAddress7printToER5Print+0x1a>
   d783c:	f100 0508 	add.w	r5, r0, #8
   d7840:	e018      	b.n	d7874 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7842:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7844:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7846:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d784a:	232f      	movs	r3, #47	; 0x2f
   d784c:	462a      	mov	r2, r5
   d784e:	200a      	movs	r0, #10
   d7850:	f7fe ffb6 	bl	d67c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7854:	4628      	mov	r0, r5
   d7856:	f002 fe4c 	bl	da4f2 <strlen>
   d785a:	6833      	ldr	r3, [r6, #0]
   d785c:	4602      	mov	r2, r0
   d785e:	68db      	ldr	r3, [r3, #12]
   d7860:	4629      	mov	r1, r5
   d7862:	4630      	mov	r0, r6
   d7864:	4798      	blx	r3
   d7866:	e00f      	b.n	d7888 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7868:	b124      	cbz	r4, d7874 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d786a:	212e      	movs	r1, #46	; 0x2e
   d786c:	4630      	mov	r0, r6
   d786e:	f7ff fb01 	bl	d6e74 <_ZN5Print5printEc>
   d7872:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7874:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7878:	220a      	movs	r2, #10
   d787a:	4630      	mov	r0, r6
   d787c:	f7ff fb15 	bl	d6eaa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7880:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7882:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7884:	d1f0      	bne.n	d7868 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7886:	4620      	mov	r0, r4
    }
    return n;
}
   d7888:	b00d      	add	sp, #52	; 0x34
   d788a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d788c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d788c:	b510      	push	{r4, lr}
   d788e:	4b05      	ldr	r3, [pc, #20]	; (d78a4 <_ZN9IPAddressC1Ev+0x18>)
   d7890:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7892:	2211      	movs	r2, #17
   d7894:	f840 3b04 	str.w	r3, [r0], #4
   d7898:	2100      	movs	r1, #0
   d789a:	f002 fdde 	bl	da45a <memset>
{
    clear();
}
   d789e:	4620      	mov	r0, r4
   d78a0:	bd10      	pop	{r4, pc}
   d78a2:	bf00      	nop
   d78a4:	000dafa8 	.word	0x000dafa8

000d78a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d78a8:	4603      	mov	r3, r0
   d78aa:	4a07      	ldr	r2, [pc, #28]	; (d78c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d78ac:	b510      	push	{r4, lr}
   d78ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d78b2:	f101 0210 	add.w	r2, r1, #16
   d78b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d78ba:	f843 4b04 	str.w	r4, [r3], #4
   d78be:	4291      	cmp	r1, r2
   d78c0:	d1f9      	bne.n	d78b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d78c2:	780a      	ldrb	r2, [r1, #0]
   d78c4:	701a      	strb	r2, [r3, #0]
}
   d78c6:	bd10      	pop	{r4, pc}
   d78c8:	000dafa8 	.word	0x000dafa8

000d78cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d78cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d78ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d78d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d78d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d78da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d78de:	2304      	movs	r3, #4
   d78e0:	6041      	str	r1, [r0, #4]
   d78e2:	7503      	strb	r3, [r0, #20]
   d78e4:	bd10      	pop	{r4, pc}

000d78e6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d78e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d78e8:	780d      	ldrb	r5, [r1, #0]
   d78ea:	788b      	ldrb	r3, [r1, #2]
   d78ec:	784a      	ldrb	r2, [r1, #1]
   d78ee:	78c9      	ldrb	r1, [r1, #3]
   d78f0:	9100      	str	r1, [sp, #0]
   d78f2:	4629      	mov	r1, r5
   d78f4:	f7ff ffea 	bl	d78cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d78f8:	b003      	add	sp, #12
   d78fa:	bd30      	pop	{r4, r5, pc}

000d78fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78fc:	7441      	strb	r1, [r0, #17]
   d78fe:	4770      	bx	lr

000d7900 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7900:	4770      	bx	lr

000d7902 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7902:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7904:	2100      	movs	r1, #0
   d7906:	7c00      	ldrb	r0, [r0, #16]
   d7908:	f7ff f81a 	bl	d6940 <HAL_USB_USART_Receive_Data>
}
   d790c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7910:	bf28      	it	cs
   d7912:	f04f 30ff 	movcs.w	r0, #4294967295
   d7916:	bd08      	pop	{r3, pc}

000d7918 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7918:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d791a:	2101      	movs	r1, #1
   d791c:	7c00      	ldrb	r0, [r0, #16]
   d791e:	f7ff f80f 	bl	d6940 <HAL_USB_USART_Receive_Data>
}
   d7922:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7926:	bf28      	it	cs
   d7928:	f04f 30ff 	movcs.w	r0, #4294967295
   d792c:	bd08      	pop	{r3, pc}

000d792e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d792e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7930:	7c00      	ldrb	r0, [r0, #16]
   d7932:	f7fe fffd 	bl	d6930 <HAL_USB_USART_Available_Data_For_Write>
}
   d7936:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d793a:	bd08      	pop	{r3, pc}

000d793c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d793c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d793e:	7c00      	ldrb	r0, [r0, #16]
   d7940:	f7fe ffee 	bl	d6920 <HAL_USB_USART_Available_Data>
}
   d7944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7948:	bd08      	pop	{r3, pc}

000d794a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d794a:	7c00      	ldrb	r0, [r0, #16]
   d794c:	f7ff b808 	b.w	d6960 <HAL_USB_USART_Flush_Data>

000d7950 <_ZN9USBSerialD0Ev>:
   d7950:	b510      	push	{r4, lr}
   d7952:	2114      	movs	r1, #20
   d7954:	4604      	mov	r4, r0
   d7956:	f000 fc0b 	bl	d8170 <_ZdlPvj>
   d795a:	4620      	mov	r0, r4
   d795c:	bd10      	pop	{r4, pc}

000d795e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d795e:	b538      	push	{r3, r4, r5, lr}
   d7960:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7962:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7964:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7966:	f7fe ffe3 	bl	d6930 <HAL_USB_USART_Available_Data_For_Write>
   d796a:	2800      	cmp	r0, #0
   d796c:	dc01      	bgt.n	d7972 <_ZN9USBSerial5writeEh+0x14>
   d796e:	7c60      	ldrb	r0, [r4, #17]
   d7970:	b128      	cbz	r0, d797e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7972:	4629      	mov	r1, r5
   d7974:	7c20      	ldrb	r0, [r4, #16]
   d7976:	f7fe ffeb 	bl	d6950 <HAL_USB_USART_Send_Data>
   d797a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d797e:	bd38      	pop	{r3, r4, r5, pc}

000d7980 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7980:	b510      	push	{r4, lr}
   d7982:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7984:	2300      	movs	r3, #0
   d7986:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d798c:	60a3      	str	r3, [r4, #8]
   d798e:	4b05      	ldr	r3, [pc, #20]	; (d79a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7990:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7992:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7994:	4608      	mov	r0, r1
{
  _serial = serial;
   d7996:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7998:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d799a:	4611      	mov	r1, r2
   d799c:	f7fe ffb0 	bl	d6900 <HAL_USB_USART_Init>
}
   d79a0:	4620      	mov	r0, r4
   d79a2:	bd10      	pop	{r4, pc}
   d79a4:	000dafbc 	.word	0x000dafbc

000d79a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d79a8:	2200      	movs	r2, #0
   d79aa:	7c00      	ldrb	r0, [r0, #16]
   d79ac:	f7fe bfb0 	b.w	d6910 <HAL_USB_USART_Begin>

000d79b0 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d79b0:	7c00      	ldrb	r0, [r0, #16]
   d79b2:	f7fe bfdd 	b.w	d6970 <HAL_USB_USART_Is_Enabled>

000d79b6 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d79b6:	f7ff bffb 	b.w	d79b0 <_ZN9USBSerial9isEnabledEv>

000d79ba <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79ba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d79bc:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d79c0:	2100      	movs	r1, #0
   d79c2:	f002 fd4a 	bl	da45a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d79c6:	4620      	mov	r0, r4
   d79c8:	bd10      	pop	{r4, pc}
	...

000d79cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d79cc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79ce:	4d0e      	ldr	r5, [pc, #56]	; (d7a08 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d79d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d79d2:	a801      	add	r0, sp, #4
   d79d4:	f7ff fff1 	bl	d79ba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79d8:	6829      	ldr	r1, [r5, #0]
   d79da:	f011 0401 	ands.w	r4, r1, #1
   d79de:	d110      	bne.n	d7a02 <_Z16_fetch_usbserialv+0x36>
   d79e0:	4628      	mov	r0, r5
   d79e2:	f7fc fb6b 	bl	d40bc <__cxa_guard_acquire>
   d79e6:	b160      	cbz	r0, d7a02 <_Z16_fetch_usbserialv+0x36>
   d79e8:	aa01      	add	r2, sp, #4
   d79ea:	4621      	mov	r1, r4
   d79ec:	4807      	ldr	r0, [pc, #28]	; (d7a0c <_Z16_fetch_usbserialv+0x40>)
   d79ee:	f7ff ffc7 	bl	d7980 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d79f2:	4628      	mov	r0, r5
   d79f4:	f7fc fb67 	bl	d40c6 <__cxa_guard_release>
   d79f8:	4a05      	ldr	r2, [pc, #20]	; (d7a10 <_Z16_fetch_usbserialv+0x44>)
   d79fa:	4906      	ldr	r1, [pc, #24]	; (d7a14 <_Z16_fetch_usbserialv+0x48>)
   d79fc:	4803      	ldr	r0, [pc, #12]	; (d7a0c <_Z16_fetch_usbserialv+0x40>)
   d79fe:	f000 fba9 	bl	d8154 <__aeabi_atexit>
	return _usbserial;
}
   d7a02:	4802      	ldr	r0, [pc, #8]	; (d7a0c <_Z16_fetch_usbserialv+0x40>)
   d7a04:	b007      	add	sp, #28
   d7a06:	bd30      	pop	{r4, r5, pc}
   d7a08:	2003e408 	.word	0x2003e408
   d7a0c:	2003e40c 	.word	0x2003e40c
   d7a10:	2003e2d8 	.word	0x2003e2d8
   d7a14:	000d7901 	.word	0x000d7901

000d7a18 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7a18:	4770      	bx	lr

000d7a1a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a1a:	7441      	strb	r1, [r0, #17]
   d7a1c:	4770      	bx	lr

000d7a1e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7a1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7a20:	7c00      	ldrb	r0, [r0, #16]
   d7a22:	f7fe ff0d 	bl	d6840 <HAL_USART_Available_Data_For_Write>
}
   d7a26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a2a:	bd08      	pop	{r3, pc}

000d7a2c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7a2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7a2e:	7c00      	ldrb	r0, [r0, #16]
   d7a30:	f7fe fede 	bl	d67f0 <HAL_USART_Available_Data>
}
   d7a34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a38:	bd08      	pop	{r3, pc}

000d7a3a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7a3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7a3c:	7c00      	ldrb	r0, [r0, #16]
   d7a3e:	f7fe fee7 	bl	d6810 <HAL_USART_Peek_Data>
}
   d7a42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a46:	bf28      	it	cs
   d7a48:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a4c:	bd08      	pop	{r3, pc}

000d7a4e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7a4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7a50:	7c00      	ldrb	r0, [r0, #16]
   d7a52:	f7fe fed5 	bl	d6800 <HAL_USART_Read_Data>
}
   d7a56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a5a:	bf28      	it	cs
   d7a5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a60:	bd08      	pop	{r3, pc}

000d7a62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7a62:	7c00      	ldrb	r0, [r0, #16]
   d7a64:	f7fe bedc 	b.w	d6820 <HAL_USART_Flush_Data>

000d7a68 <_ZN11USARTSerialD0Ev>:
   d7a68:	b510      	push	{r4, lr}
   d7a6a:	2114      	movs	r1, #20
   d7a6c:	4604      	mov	r4, r0
   d7a6e:	f000 fb7f 	bl	d8170 <_ZdlPvj>
   d7a72:	4620      	mov	r0, r4
   d7a74:	bd10      	pop	{r4, pc}

000d7a76 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7a76:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7a78:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7a7a:	4604      	mov	r4, r0
   d7a7c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7a7e:	b925      	cbnz	r5, d7a8a <_ZN11USARTSerial5writeEh+0x14>
   d7a80:	7c00      	ldrb	r0, [r0, #16]
   d7a82:	f7fe fedd 	bl	d6840 <HAL_USART_Available_Data_For_Write>
   d7a86:	2800      	cmp	r0, #0
   d7a88:	dd05      	ble.n	d7a96 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7a8a:	4631      	mov	r1, r6
   d7a8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7a92:	f7fe bea5 	b.w	d67e0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7a96:	4628      	mov	r0, r5
   d7a98:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7a9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7a9c:	b510      	push	{r4, lr}
   d7a9e:	4604      	mov	r4, r0
   d7aa0:	4608      	mov	r0, r1
   d7aa2:	4611      	mov	r1, r2
   d7aa4:	2200      	movs	r2, #0
   d7aa6:	6062      	str	r2, [r4, #4]
   d7aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7aac:	60a2      	str	r2, [r4, #8]
   d7aae:	4a05      	ldr	r2, [pc, #20]	; (d7ac4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7ab0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7ab2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7ab4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7ab6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7ab8:	461a      	mov	r2, r3
   d7aba:	f7fe fe89 	bl	d67d0 <HAL_USART_Init>
}
   d7abe:	4620      	mov	r0, r4
   d7ac0:	bd10      	pop	{r4, pc}
   d7ac2:	bf00      	nop
   d7ac4:	000dafec 	.word	0x000dafec

000d7ac8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7ac8:	7c00      	ldrb	r0, [r0, #16]
   d7aca:	f7fe beb1 	b.w	d6830 <HAL_USART_Is_Enabled>
	...

000d7ad0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ad0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ad2:	4d0c      	ldr	r5, [pc, #48]	; (d7b04 <_Z22__fetch_global_Serial1v+0x34>)
   d7ad4:	6829      	ldr	r1, [r5, #0]
   d7ad6:	f011 0401 	ands.w	r4, r1, #1
   d7ada:	d111      	bne.n	d7b00 <_Z22__fetch_global_Serial1v+0x30>
   d7adc:	4628      	mov	r0, r5
   d7ade:	f7fc faed 	bl	d40bc <__cxa_guard_acquire>
   d7ae2:	b168      	cbz	r0, d7b00 <_Z22__fetch_global_Serial1v+0x30>
   d7ae4:	4a08      	ldr	r2, [pc, #32]	; (d7b08 <_Z22__fetch_global_Serial1v+0x38>)
   d7ae6:	4b09      	ldr	r3, [pc, #36]	; (d7b0c <_Z22__fetch_global_Serial1v+0x3c>)
   d7ae8:	4809      	ldr	r0, [pc, #36]	; (d7b10 <_Z22__fetch_global_Serial1v+0x40>)
   d7aea:	4621      	mov	r1, r4
   d7aec:	f7ff ffd6 	bl	d7a9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7af0:	4628      	mov	r0, r5
   d7af2:	f7fc fae8 	bl	d40c6 <__cxa_guard_release>
   d7af6:	4a07      	ldr	r2, [pc, #28]	; (d7b14 <_Z22__fetch_global_Serial1v+0x44>)
   d7af8:	4907      	ldr	r1, [pc, #28]	; (d7b18 <_Z22__fetch_global_Serial1v+0x48>)
   d7afa:	4805      	ldr	r0, [pc, #20]	; (d7b10 <_Z22__fetch_global_Serial1v+0x40>)
   d7afc:	f000 fb2a 	bl	d8154 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b00:	4803      	ldr	r0, [pc, #12]	; (d7b10 <_Z22__fetch_global_Serial1v+0x40>)
   d7b02:	bd38      	pop	{r3, r4, r5, pc}
   d7b04:	2003e4b8 	.word	0x2003e4b8
   d7b08:	2003e4bc 	.word	0x2003e4bc
   d7b0c:	2003e434 	.word	0x2003e434
   d7b10:	2003e420 	.word	0x2003e420
   d7b14:	2003e2d8 	.word	0x2003e2d8
   d7b18:	000d7a19 	.word	0x000d7a19

000d7b1c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7b1c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7b1e:	6883      	ldr	r3, [r0, #8]
   d7b20:	4604      	mov	r4, r0
   d7b22:	b90b      	cbnz	r3, d7b28 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7b24:	f000 fb37 	bl	d8196 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7b28:	68c3      	ldr	r3, [r0, #12]
   d7b2a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7b2c:	68a3      	ldr	r3, [r4, #8]
   d7b2e:	b11b      	cbz	r3, d7b38 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b30:	2203      	movs	r2, #3
   d7b32:	4621      	mov	r1, r4
   d7b34:	4620      	mov	r0, r4
   d7b36:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7b38:	4620      	mov	r0, r4
   d7b3a:	2110      	movs	r1, #16
}
   d7b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7b40:	f000 bb16 	b.w	d8170 <_ZdlPvj>

000d7b44 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7b44:	4770      	bx	lr

000d7b46 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b48:	4606      	mov	r6, r0
   d7b4a:	4615      	mov	r5, r2
   d7b4c:	460c      	mov	r4, r1
   d7b4e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7b50:	42bc      	cmp	r4, r7
   d7b52:	d006      	beq.n	d7b62 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7b54:	6833      	ldr	r3, [r6, #0]
   d7b56:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7b5a:	689b      	ldr	r3, [r3, #8]
   d7b5c:	4630      	mov	r0, r6
   d7b5e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7b60:	e7f6      	b.n	d7b50 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7b62:	4628      	mov	r0, r5
   d7b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b66 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7b66:	2200      	movs	r2, #0
   d7b68:	7c00      	ldrb	r0, [r0, #16]
   d7b6a:	f7fe be89 	b.w	d6880 <HAL_I2C_Write_Data>

000d7b6e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7b6e:	2100      	movs	r1, #0
   d7b70:	7c00      	ldrb	r0, [r0, #16]
   d7b72:	f7fe be8d 	b.w	d6890 <HAL_I2C_Available_Data>

000d7b76 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7b76:	2100      	movs	r1, #0
   d7b78:	7c00      	ldrb	r0, [r0, #16]
   d7b7a:	f7fe be91 	b.w	d68a0 <HAL_I2C_Read_Data>

000d7b7e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7b7e:	2100      	movs	r1, #0
   d7b80:	7c00      	ldrb	r0, [r0, #16]
   d7b82:	f7fe be95 	b.w	d68b0 <HAL_I2C_Peek_Data>

000d7b86 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7b86:	2100      	movs	r1, #0
   d7b88:	7c00      	ldrb	r0, [r0, #16]
   d7b8a:	f7fe be99 	b.w	d68c0 <HAL_I2C_Flush_Data>

000d7b8e <_ZN7TwoWireD0Ev>:
   d7b8e:	b510      	push	{r4, lr}
   d7b90:	2114      	movs	r1, #20
   d7b92:	4604      	mov	r4, r0
   d7b94:	f000 faec 	bl	d8170 <_ZdlPvj>
   d7b98:	4620      	mov	r0, r4
   d7b9a:	bd10      	pop	{r4, pc}

000d7b9c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7b9c:	b510      	push	{r4, lr}
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	2300      	movs	r3, #0
   d7ba2:	6063      	str	r3, [r4, #4]
   d7ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ba8:	60a3      	str	r3, [r4, #8]
   d7baa:	4b04      	ldr	r3, [pc, #16]	; (d7bbc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7bac:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7bae:	4608      	mov	r0, r1
   d7bb0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7bb2:	4611      	mov	r1, r2
   d7bb4:	f7fe fe94 	bl	d68e0 <HAL_I2C_Init>
}
   d7bb8:	4620      	mov	r0, r4
   d7bba:	bd10      	pop	{r4, pc}
   d7bbc:	000db01c 	.word	0x000db01c

000d7bc0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7bc0:	2300      	movs	r3, #0
   d7bc2:	461a      	mov	r2, r3
   d7bc4:	4619      	mov	r1, r3
   d7bc6:	7c00      	ldrb	r0, [r0, #16]
   d7bc8:	f7fe be42 	b.w	d6850 <HAL_I2C_Begin>

000d7bcc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7bcc:	b570      	push	{r4, r5, r6, lr}
   d7bce:	460c      	mov	r4, r1
   d7bd0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7bd2:	2514      	movs	r5, #20
   d7bd4:	4606      	mov	r6, r0
   d7bd6:	462a      	mov	r2, r5
   d7bd8:	2100      	movs	r1, #0
   d7bda:	a801      	add	r0, sp, #4
   d7bdc:	f002 fc3d 	bl	da45a <memset>
   d7be0:	7823      	ldrb	r3, [r4, #0]
   d7be2:	f88d 3008 	strb.w	r3, [sp, #8]
   d7be6:	6863      	ldr	r3, [r4, #4]
   d7be8:	9303      	str	r3, [sp, #12]
   d7bea:	68e3      	ldr	r3, [r4, #12]
   d7bec:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7bee:	2200      	movs	r2, #0
   d7bf0:	7a23      	ldrb	r3, [r4, #8]
   d7bf2:	7c30      	ldrb	r0, [r6, #16]
   d7bf4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7bf8:	a901      	add	r1, sp, #4
   d7bfa:	9305      	str	r3, [sp, #20]
   d7bfc:	f7fe fe78 	bl	d68f0 <HAL_I2C_Request_Data_Ex>
}
   d7c00:	b006      	add	sp, #24
   d7c02:	bd70      	pop	{r4, r5, r6, pc}

000d7c04 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7c06:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7c08:	f88d 1000 	strb.w	r1, [sp]
   d7c0c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7c10:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7c12:	bf18      	it	ne
   d7c14:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7c16:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7c18:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7c1a:	f88d 3008 	strb.w	r3, [sp, #8]
   d7c1e:	f7ff ffd5 	bl	d7bcc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7c22:	b005      	add	sp, #20
   d7c24:	f85d fb04 	ldr.w	pc, [sp], #4

000d7c28 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7c28:	2301      	movs	r3, #1
   d7c2a:	f7ff bfeb 	b.w	d7c04 <_ZN7TwoWire11requestFromEhjh>

000d7c2e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7c2e:	2200      	movs	r2, #0
   d7c30:	7c00      	ldrb	r0, [r0, #16]
   d7c32:	f7fe be15 	b.w	d6860 <HAL_I2C_Begin_Transmission>

000d7c36 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7c36:	b2c9      	uxtb	r1, r1
   d7c38:	f7ff bff9 	b.w	d7c2e <_ZN7TwoWire17beginTransmissionEh>

000d7c3c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7c3c:	2200      	movs	r2, #0
   d7c3e:	7c00      	ldrb	r0, [r0, #16]
   d7c40:	f7fe be16 	b.w	d6870 <HAL_I2C_End_Transmission>

000d7c44 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7c44:	2101      	movs	r1, #1
   d7c46:	f7ff bff9 	b.w	d7c3c <_ZN7TwoWire15endTransmissionEh>

000d7c4a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7c4a:	2100      	movs	r1, #0
   d7c4c:	7c00      	ldrb	r0, [r0, #16]
   d7c4e:	f7fe be3f 	b.w	d68d0 <HAL_I2C_Is_Enabled>

000d7c52 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c52:	2200      	movs	r2, #0
   d7c54:	4611      	mov	r1, r2
   d7c56:	6840      	ldr	r0, [r0, #4]
   d7c58:	f7fe bf06 	b.w	d6a68 <network_listening>

000d7c5c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7c5c:	2200      	movs	r2, #0
   d7c5e:	4611      	mov	r1, r2
   d7c60:	6840      	ldr	r0, [r0, #4]
   d7c62:	f7fe bf11 	b.w	d6a88 <network_get_listen_timeout>

000d7c66 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7c66:	2200      	movs	r2, #0
   d7c68:	6840      	ldr	r0, [r0, #4]
   d7c6a:	f7fe bf05 	b.w	d6a78 <network_set_listen_timeout>

000d7c6e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c6e:	2200      	movs	r2, #0
   d7c70:	f081 0101 	eor.w	r1, r1, #1
   d7c74:	6840      	ldr	r0, [r0, #4]
   d7c76:	f7fe beef 	b.w	d6a58 <network_listen>

000d7c7a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7c7a:	2300      	movs	r3, #0
   d7c7c:	461a      	mov	r2, r3
   d7c7e:	2101      	movs	r1, #1
   d7c80:	6840      	ldr	r0, [r0, #4]
   d7c82:	f7fe bee1 	b.w	d6a48 <network_off>

000d7c86 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7c86:	2300      	movs	r3, #0
   d7c88:	461a      	mov	r2, r3
   d7c8a:	4619      	mov	r1, r3
   d7c8c:	6840      	ldr	r0, [r0, #4]
   d7c8e:	f7fe bed3 	b.w	d6a38 <network_on>

000d7c92 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7c92:	2200      	movs	r2, #0
   d7c94:	4611      	mov	r1, r2
   d7c96:	6840      	ldr	r0, [r0, #4]
   d7c98:	f7fe bec6 	b.w	d6a28 <network_ready>

000d7c9c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7c9c:	2200      	movs	r2, #0
   d7c9e:	4611      	mov	r1, r2
   d7ca0:	6840      	ldr	r0, [r0, #4]
   d7ca2:	f7fe beb1 	b.w	d6a08 <network_connecting>

000d7ca6 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ca6:	2200      	movs	r2, #0
   d7ca8:	2102      	movs	r1, #2
   d7caa:	6840      	ldr	r0, [r0, #4]
   d7cac:	f7fe beb4 	b.w	d6a18 <network_disconnect>

000d7cb0 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7cb0:	2300      	movs	r3, #0
   d7cb2:	461a      	mov	r2, r3
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	f7fe be9f 	b.w	d69f8 <network_connect>

000d7cba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7cba:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cbc:	4605      	mov	r5, r0
   d7cbe:	b188      	cbz	r0, d7ce4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cc0:	6804      	ldr	r4, [r0, #0]
   d7cc2:	b14c      	cbz	r4, d7cd8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7cc4:	68a3      	ldr	r3, [r4, #8]
   d7cc6:	b11b      	cbz	r3, d7cd0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7cc8:	2203      	movs	r2, #3
   d7cca:	4621      	mov	r1, r4
   d7ccc:	4620      	mov	r0, r4
   d7cce:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cd0:	2110      	movs	r1, #16
   d7cd2:	4620      	mov	r0, r4
   d7cd4:	f000 fa4c 	bl	d8170 <_ZdlPvj>
   d7cd8:	4628      	mov	r0, r5
   d7cda:	2114      	movs	r1, #20
      }
   d7cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ce0:	f000 ba46 	b.w	d8170 <_ZdlPvj>
   d7ce4:	bd38      	pop	{r3, r4, r5, pc}

000d7ce6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7ce6:	b110      	cbz	r0, d7cee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7ce8:	6803      	ldr	r3, [r0, #0]
   d7cea:	685b      	ldr	r3, [r3, #4]
   d7cec:	4718      	bx	r3
   d7cee:	4770      	bx	lr

000d7cf0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7cf0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7cf2:	6803      	ldr	r3, [r0, #0]
   d7cf4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7cf6:	b1bb      	cbz	r3, d7d28 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7cf8:	6858      	ldr	r0, [r3, #4]
   d7cfa:	f7fe fd39 	bl	d6770 <os_thread_is_current>
   d7cfe:	b978      	cbnz	r0, d7d20 <_ZN6ThreadD1Ev+0x30>
   d7d00:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7d02:	7c5a      	ldrb	r2, [r3, #17]
   d7d04:	b912      	cbnz	r2, d7d0c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7d06:	6858      	ldr	r0, [r3, #4]
   d7d08:	f7fe fd3a 	bl	d6780 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d0c:	6823      	ldr	r3, [r4, #0]
   d7d0e:	6858      	ldr	r0, [r3, #4]
   d7d10:	f7fe fd3e 	bl	d6790 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d14:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7d16:	2300      	movs	r3, #0
   d7d18:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7d1a:	b128      	cbz	r0, d7d28 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7d1c:	f7ff ffcd 	bl	d7cba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d20:	6820      	ldr	r0, [r4, #0]
   d7d22:	b108      	cbz	r0, d7d28 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7d24:	f7ff ffc9 	bl	d7cba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7d28:	4620      	mov	r0, r4
   d7d2a:	bd10      	pop	{r4, pc}

000d7d2c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7d2c:	b538      	push	{r3, r4, r5, lr}
   d7d2e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d30:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7d34:	b108      	cbz	r0, d7d3a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7d36:	f7fc f9b4 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7d3a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7d3e:	b108      	cbz	r0, d7d44 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7d40:	f7fe fd36 	bl	d67b0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d44:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7d48:	b135      	cbz	r5, d7d58 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d4a:	4628      	mov	r0, r5
   d7d4c:	f7ff ffd0 	bl	d7cf0 <_ZN6ThreadD1Ev>
   d7d50:	2104      	movs	r1, #4
   d7d52:	4628      	mov	r0, r5
   d7d54:	f000 fa0c 	bl	d8170 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d58:	6820      	ldr	r0, [r4, #0]
   d7d5a:	b108      	cbz	r0, d7d60 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7d5c:	f7ff ffc3 	bl	d7ce6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7d60:	4620      	mov	r0, r4
   d7d62:	bd38      	pop	{r3, r4, r5, pc}

000d7d64 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7d64:	b510      	push	{r4, lr}
   d7d66:	4b04      	ldr	r3, [pc, #16]	; (d7d78 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7d68:	4604      	mov	r4, r0
   d7d6a:	f840 3b08 	str.w	r3, [r0], #8
   d7d6e:	f7ff ffdd 	bl	d7d2c <_ZN5spark11MeshPublishD1Ev>
   d7d72:	4620      	mov	r0, r4
   d7d74:	bd10      	pop	{r4, pc}
   d7d76:	bf00      	nop
   d7d78:	000db044 	.word	0x000db044

000d7d7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7d7c:	b538      	push	{r3, r4, r5, lr}
   d7d7e:	4c0e      	ldr	r4, [pc, #56]	; (d7db8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7d80:	4b0e      	ldr	r3, [pc, #56]	; (d7dbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7d82:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7d84:	2500      	movs	r5, #0
   d7d86:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7d88:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7d8c:	6063      	str	r3, [r4, #4]
   d7d8e:	60a5      	str	r5, [r4, #8]
   d7d90:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7d94:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7d98:	f7fe fd02 	bl	d67a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7d9c:	4b08      	ldr	r3, [pc, #32]	; (d7dc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7d9e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7da2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7da6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7da8:	4620      	mov	r0, r4
   d7daa:	4a06      	ldr	r2, [pc, #24]	; (d7dc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7dac:	4906      	ldr	r1, [pc, #24]	; (d7dc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7db2:	f000 b9cf 	b.w	d8154 <__aeabi_atexit>
   d7db6:	bf00      	nop
   d7db8:	2003e540 	.word	0x2003e540
   d7dbc:	000db0ac 	.word	0x000db0ac
   d7dc0:	000db044 	.word	0x000db044
   d7dc4:	2003e2d8 	.word	0x2003e2d8
   d7dc8:	000d7d65 	.word	0x000d7d65

000d7dcc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7dcc:	2200      	movs	r2, #0
   d7dce:	4611      	mov	r1, r2
   d7dd0:	6840      	ldr	r0, [r0, #4]
   d7dd2:	f7fe be29 	b.w	d6a28 <network_ready>

000d7dd6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7dd6:	2200      	movs	r2, #0
   d7dd8:	4611      	mov	r1, r2
   d7dda:	6840      	ldr	r0, [r0, #4]
   d7ddc:	f7fe be44 	b.w	d6a68 <network_listening>

000d7de0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7de0:	2200      	movs	r2, #0
   d7de2:	4611      	mov	r1, r2
   d7de4:	6840      	ldr	r0, [r0, #4]
   d7de6:	f7fe be4f 	b.w	d6a88 <network_get_listen_timeout>

000d7dea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7dea:	2200      	movs	r2, #0
   d7dec:	6840      	ldr	r0, [r0, #4]
   d7dee:	f7fe be43 	b.w	d6a78 <network_set_listen_timeout>

000d7df2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7df2:	2200      	movs	r2, #0
   d7df4:	f081 0101 	eor.w	r1, r1, #1
   d7df8:	6840      	ldr	r0, [r0, #4]
   d7dfa:	f7fe be2d 	b.w	d6a58 <network_listen>

000d7dfe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7dfe:	2300      	movs	r3, #0
   d7e00:	461a      	mov	r2, r3
   d7e02:	4619      	mov	r1, r3
   d7e04:	6840      	ldr	r0, [r0, #4]
   d7e06:	f7fe be1f 	b.w	d6a48 <network_off>

000d7e0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7e0a:	2300      	movs	r3, #0
   d7e0c:	461a      	mov	r2, r3
   d7e0e:	4619      	mov	r1, r3
   d7e10:	6840      	ldr	r0, [r0, #4]
   d7e12:	f7fe be11 	b.w	d6a38 <network_on>

000d7e16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7e16:	2200      	movs	r2, #0
   d7e18:	4611      	mov	r1, r2
   d7e1a:	6840      	ldr	r0, [r0, #4]
   d7e1c:	f7fe bdf4 	b.w	d6a08 <network_connecting>

000d7e20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e20:	2200      	movs	r2, #0
   d7e22:	2102      	movs	r1, #2
   d7e24:	6840      	ldr	r0, [r0, #4]
   d7e26:	f7fe bdf7 	b.w	d6a18 <network_disconnect>

000d7e2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7e2a:	2300      	movs	r3, #0
   d7e2c:	461a      	mov	r2, r3
   d7e2e:	6840      	ldr	r0, [r0, #4]
   d7e30:	f7fe bde2 	b.w	d69f8 <network_connect>

000d7e34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7e34:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7e36:	2204      	movs	r2, #4
   d7e38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e3a:	4a02      	ldr	r2, [pc, #8]	; (d7e44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e3c:	601a      	str	r2, [r3, #0]
   d7e3e:	4770      	bx	lr
   d7e40:	2003e714 	.word	0x2003e714
   d7e44:	000db078 	.word	0x000db078

000d7e48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e48:	2300      	movs	r3, #0
   d7e4a:	461a      	mov	r2, r3
   d7e4c:	6840      	ldr	r0, [r0, #4]
   d7e4e:	f7fe bdd3 	b.w	d69f8 <network_connect>

000d7e52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7e52:	2200      	movs	r2, #0
   d7e54:	2102      	movs	r1, #2
   d7e56:	6840      	ldr	r0, [r0, #4]
   d7e58:	f7fe bdde 	b.w	d6a18 <network_disconnect>

000d7e5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7e5c:	2200      	movs	r2, #0
   d7e5e:	4611      	mov	r1, r2
   d7e60:	6840      	ldr	r0, [r0, #4]
   d7e62:	f7fe bdd1 	b.w	d6a08 <network_connecting>

000d7e66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7e66:	2200      	movs	r2, #0
   d7e68:	4611      	mov	r1, r2
   d7e6a:	6840      	ldr	r0, [r0, #4]
   d7e6c:	f7fe bddc 	b.w	d6a28 <network_ready>

000d7e70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7e70:	2300      	movs	r3, #0
   d7e72:	461a      	mov	r2, r3
   d7e74:	4619      	mov	r1, r3
   d7e76:	6840      	ldr	r0, [r0, #4]
   d7e78:	f7fe bdde 	b.w	d6a38 <network_on>

000d7e7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7e7c:	2300      	movs	r3, #0
   d7e7e:	461a      	mov	r2, r3
   d7e80:	4619      	mov	r1, r3
   d7e82:	6840      	ldr	r0, [r0, #4]
   d7e84:	f7fe bde0 	b.w	d6a48 <network_off>

000d7e88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7e88:	2200      	movs	r2, #0
   d7e8a:	f081 0101 	eor.w	r1, r1, #1
   d7e8e:	6840      	ldr	r0, [r0, #4]
   d7e90:	f7fe bde2 	b.w	d6a58 <network_listen>

000d7e94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7e94:	2200      	movs	r2, #0
   d7e96:	6840      	ldr	r0, [r0, #4]
   d7e98:	f7fe bdee 	b.w	d6a78 <network_set_listen_timeout>

000d7e9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7e9c:	2200      	movs	r2, #0
   d7e9e:	4611      	mov	r1, r2
   d7ea0:	6840      	ldr	r0, [r0, #4]
   d7ea2:	f7fe bdf1 	b.w	d6a88 <network_get_listen_timeout>

000d7ea6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ea6:	2200      	movs	r2, #0
   d7ea8:	4611      	mov	r1, r2
   d7eaa:	6840      	ldr	r0, [r0, #4]
   d7eac:	f7fe bddc 	b.w	d6a68 <network_listening>

000d7eb0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7eb4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7eb6:	b095      	sub	sp, #84	; 0x54
   d7eb8:	4616      	mov	r6, r2
   d7eba:	460d      	mov	r5, r1
   d7ebc:	4607      	mov	r7, r0
    IPAddress addr;
   d7ebe:	f7ff fce5 	bl	d788c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7ec2:	4621      	mov	r1, r4
   d7ec4:	2220      	movs	r2, #32
   d7ec6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ec8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7eca:	f002 fac6 	bl	da45a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ece:	2340      	movs	r3, #64	; 0x40
   d7ed0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7ed2:	4621      	mov	r1, r4
   d7ed4:	466b      	mov	r3, sp
   d7ed6:	aa0c      	add	r2, sp, #48	; 0x30
   d7ed8:	4630      	mov	r0, r6
   d7eda:	f7fe fbb1 	bl	d6640 <netdb_getaddrinfo>
    if (!r) {
   d7ede:	4604      	mov	r4, r0
   d7ee0:	2800      	cmp	r0, #0
   d7ee2:	d144      	bne.n	d7f6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ee4:	4602      	mov	r2, r0
   d7ee6:	2101      	movs	r1, #1
   d7ee8:	6868      	ldr	r0, [r5, #4]
   d7eea:	f7fe fd9d 	bl	d6a28 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7eee:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ef0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ef2:	4622      	mov	r2, r4
   d7ef4:	6868      	ldr	r0, [r5, #4]
   d7ef6:	f7fe fd97 	bl	d6a28 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7efa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7efc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7efe:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f00:	2e00      	cmp	r6, #0
   d7f02:	d034      	beq.n	d7f6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7f04:	2900      	cmp	r1, #0
   d7f06:	d132      	bne.n	d7f6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f08:	6873      	ldr	r3, [r6, #4]
   d7f0a:	2b02      	cmp	r3, #2
   d7f0c:	d002      	beq.n	d7f14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7f0e:	2b0a      	cmp	r3, #10
   d7f10:	d009      	beq.n	d7f26 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7f12:	e02a      	b.n	d7f6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7f14:	f1b8 0f00 	cmp.w	r8, #0
   d7f18:	d027      	beq.n	d7f6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f1a:	6971      	ldr	r1, [r6, #20]
   d7f1c:	4638      	mov	r0, r7
   d7f1e:	3104      	adds	r1, #4
   d7f20:	f7ff fce1 	bl	d78e6 <_ZN9IPAddressaSEPKh>
   d7f24:	e020      	b.n	d7f68 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f26:	f1b9 0f00 	cmp.w	r9, #0
   d7f2a:	d01e      	beq.n	d7f6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f2c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f2e:	2211      	movs	r2, #17
   d7f30:	a801      	add	r0, sp, #4
   d7f32:	f002 fa92 	bl	da45a <memset>
                    a.v = 6;
   d7f36:	2306      	movs	r3, #6
   d7f38:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f3c:	ad01      	add	r5, sp, #4
   d7f3e:	f104 0308 	add.w	r3, r4, #8
   d7f42:	3418      	adds	r4, #24
   d7f44:	6818      	ldr	r0, [r3, #0]
   d7f46:	6859      	ldr	r1, [r3, #4]
   d7f48:	462a      	mov	r2, r5
   d7f4a:	c203      	stmia	r2!, {r0, r1}
   d7f4c:	3308      	adds	r3, #8
   d7f4e:	42a3      	cmp	r3, r4
   d7f50:	4615      	mov	r5, r2
   d7f52:	d1f7      	bne.n	d7f44 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7f54:	a901      	add	r1, sp, #4
   d7f56:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f58:	ad07      	add	r5, sp, #28
   d7f5a:	f7ff fca5 	bl	d78a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f60:	1d3c      	adds	r4, r7, #4
   d7f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f64:	682b      	ldr	r3, [r5, #0]
   d7f66:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7f68:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f6a:	69f6      	ldr	r6, [r6, #28]
   d7f6c:	e7c8      	b.n	d7f00 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7f6e:	9800      	ldr	r0, [sp, #0]
   d7f70:	f7fe fb5e 	bl	d6630 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7f74:	4638      	mov	r0, r7
   d7f76:	b015      	add	sp, #84	; 0x54
   d7f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7f7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7f7c:	4b02      	ldr	r3, [pc, #8]	; (d7f88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7f7e:	4a03      	ldr	r2, [pc, #12]	; (d7f8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7f80:	601a      	str	r2, [r3, #0]
   d7f82:	2200      	movs	r2, #0
   d7f84:	605a      	str	r2, [r3, #4]
   d7f86:	4770      	bx	lr
   d7f88:	2003e71c 	.word	0x2003e71c
   d7f8c:	000db0ac 	.word	0x000db0ac

000d7f90 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7f90:	b510      	push	{r4, lr}
   d7f92:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7f94:	f000 f87e 	bl	d8094 <_ZN8particle7globals11instanceSpiEv>
   d7f98:	f7fe fed5 	bl	d6d46 <_ZN8SPIClass9isEnabledEv>
   d7f9c:	b128      	cbz	r0, d7faa <pinAvailable+0x1a>
   d7f9e:	f1a4 030b 	sub.w	r3, r4, #11
   d7fa2:	2b02      	cmp	r3, #2
   d7fa4:	d801      	bhi.n	d7faa <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7fa6:	2000      	movs	r0, #0
   d7fa8:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7faa:	f000 f8ad 	bl	d8108 <_Z19__fetch_global_Wirev>
   d7fae:	f7ff fe4c 	bl	d7c4a <_ZN7TwoWire9isEnabledEv>
   d7fb2:	b108      	cbz	r0, d7fb8 <pinAvailable+0x28>
   d7fb4:	2c01      	cmp	r4, #1
   d7fb6:	d9f6      	bls.n	d7fa6 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7fb8:	f7ff fd8a 	bl	d7ad0 <_Z22__fetch_global_Serial1v>
   d7fbc:	f7ff fd84 	bl	d7ac8 <_ZN11USARTSerial9isEnabledEv>
   d7fc0:	b118      	cbz	r0, d7fca <pinAvailable+0x3a>
   d7fc2:	f1a4 0309 	sub.w	r3, r4, #9
   d7fc6:	2b01      	cmp	r3, #1
   d7fc8:	d9ed      	bls.n	d7fa6 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7fca:	2c23      	cmp	r4, #35	; 0x23
   d7fcc:	bf8c      	ite	hi
   d7fce:	2000      	movhi	r0, #0
   d7fd0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7fd2:	bd10      	pop	{r4, pc}

000d7fd4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7fd4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7fd6:	b538      	push	{r3, r4, r5, lr}
   d7fd8:	4604      	mov	r4, r0
   d7fda:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7fdc:	d80a      	bhi.n	d7ff4 <pinMode+0x20>
   d7fde:	29ff      	cmp	r1, #255	; 0xff
   d7fe0:	d008      	beq.n	d7ff4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7fe2:	f7ff ffd5 	bl	d7f90 <pinAvailable>
   d7fe6:	b128      	cbz	r0, d7ff4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7fe8:	4629      	mov	r1, r5
   d7fea:	4620      	mov	r0, r4
}
   d7fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ff0:	f7fe bb36 	b.w	d6660 <HAL_Pin_Mode>
   d7ff4:	bd38      	pop	{r3, r4, r5, pc}

000d7ff6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7ff6:	b538      	push	{r3, r4, r5, lr}
   d7ff8:	4604      	mov	r4, r0
   d7ffa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ffc:	f7fe fb38 	bl	d6670 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8000:	28ff      	cmp	r0, #255	; 0xff
   d8002:	d010      	beq.n	d8026 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8004:	2806      	cmp	r0, #6
   d8006:	d804      	bhi.n	d8012 <digitalWrite+0x1c>
   d8008:	234d      	movs	r3, #77	; 0x4d
   d800a:	fa23 f000 	lsr.w	r0, r3, r0
   d800e:	07c3      	lsls	r3, r0, #31
   d8010:	d409      	bmi.n	d8026 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8012:	4620      	mov	r0, r4
   d8014:	f7ff ffbc 	bl	d7f90 <pinAvailable>
   d8018:	b128      	cbz	r0, d8026 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d801a:	4629      	mov	r1, r5
   d801c:	4620      	mov	r0, r4
}
   d801e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8022:	f7fe bb2d 	b.w	d6680 <HAL_GPIO_Write>
   d8026:	bd38      	pop	{r3, r4, r5, pc}

000d8028 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8028:	b510      	push	{r4, lr}
   d802a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d802c:	f7fe fb20 	bl	d6670 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8030:	3804      	subs	r0, #4
   d8032:	b2c0      	uxtb	r0, r0
   d8034:	2801      	cmp	r0, #1
   d8036:	d908      	bls.n	d804a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8038:	4620      	mov	r0, r4
   d803a:	f7ff ffa9 	bl	d7f90 <pinAvailable>
   d803e:	b120      	cbz	r0, d804a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8040:	4620      	mov	r0, r4
}
   d8042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8046:	f7fe bb23 	b.w	d6690 <HAL_GPIO_Read>
}
   d804a:	2000      	movs	r0, #0
   d804c:	bd10      	pop	{r4, pc}

000d804e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d804e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8052:	4690      	mov	r8, r2
   d8054:	461e      	mov	r6, r3
   d8056:	2407      	movs	r4, #7
   d8058:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d805a:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d805c:	f1b8 0f00 	cmp.w	r8, #0
   d8060:	d104      	bne.n	d806c <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d8062:	f1c4 0107 	rsb	r1, r4, #7
   d8066:	fa46 f101 	asr.w	r1, r6, r1
   d806a:	e001      	b.n	d8070 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d806c:	fa46 f104 	asr.w	r1, r6, r4
   d8070:	f001 0101 	and.w	r1, r1, #1
   d8074:	4638      	mov	r0, r7
   d8076:	f7ff ffbe 	bl	d7ff6 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d807a:	2101      	movs	r1, #1
   d807c:	4628      	mov	r0, r5
   d807e:	f7ff ffba 	bl	d7ff6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d8082:	2100      	movs	r1, #0
   d8084:	4628      	mov	r0, r5
   d8086:	f7ff ffb6 	bl	d7ff6 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d808a:	f114 34ff 	adds.w	r4, r4, #4294967295
   d808e:	d2e5      	bcs.n	d805c <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d8090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8094 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d8094:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d8096:	4d0b      	ldr	r5, [pc, #44]	; (d80c4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8098:	6829      	ldr	r1, [r5, #0]
   d809a:	f011 0401 	ands.w	r4, r1, #1
   d809e:	d10f      	bne.n	d80c0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d80a0:	4628      	mov	r0, r5
   d80a2:	f7fc f80b 	bl	d40bc <__cxa_guard_acquire>
   d80a6:	b158      	cbz	r0, d80c0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d80a8:	4621      	mov	r1, r4
   d80aa:	4807      	ldr	r0, [pc, #28]	; (d80c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d80ac:	f7fe fd88 	bl	d6bc0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d80b0:	4628      	mov	r0, r5
   d80b2:	f7fc f808 	bl	d40c6 <__cxa_guard_release>
   d80b6:	4a05      	ldr	r2, [pc, #20]	; (d80cc <_ZN8particle7globals11instanceSpiEv+0x38>)
   d80b8:	4905      	ldr	r1, [pc, #20]	; (d80d0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d80ba:	4803      	ldr	r0, [pc, #12]	; (d80c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d80bc:	f000 f84a 	bl	d8154 <__aeabi_atexit>
    return instance;
}
   d80c0:	4801      	ldr	r0, [pc, #4]	; (d80c8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d80c2:	bd38      	pop	{r3, r4, r5, pc}
   d80c4:	2003e730 	.word	0x2003e730
   d80c8:	2003e724 	.word	0x2003e724
   d80cc:	2003e2d8 	.word	0x2003e2d8
   d80d0:	000d6ba5 	.word	0x000d6ba5

000d80d4 <_Z17acquireWireBufferv>:
   d80d4:	b570      	push	{r4, r5, r6, lr}
   d80d6:	4604      	mov	r4, r0
   d80d8:	2514      	movs	r5, #20
   d80da:	462a      	mov	r2, r5
   d80dc:	4e09      	ldr	r6, [pc, #36]	; (d8104 <_Z17acquireWireBufferv+0x30>)
   d80de:	2100      	movs	r1, #0
   d80e0:	f002 f9bb 	bl	da45a <memset>
   d80e4:	8025      	strh	r5, [r4, #0]
   d80e6:	2520      	movs	r5, #32
   d80e8:	4631      	mov	r1, r6
   d80ea:	60a5      	str	r5, [r4, #8]
   d80ec:	6125      	str	r5, [r4, #16]
   d80ee:	4628      	mov	r0, r5
   d80f0:	f000 f840 	bl	d8174 <_ZnajRKSt9nothrow_t>
   d80f4:	4631      	mov	r1, r6
   d80f6:	6060      	str	r0, [r4, #4]
   d80f8:	4628      	mov	r0, r5
   d80fa:	f000 f83b 	bl	d8174 <_ZnajRKSt9nothrow_t>
   d80fe:	60e0      	str	r0, [r4, #12]
   d8100:	4620      	mov	r0, r4
   d8102:	bd70      	pop	{r4, r5, r6, pc}
   d8104:	000db0d8 	.word	0x000db0d8

000d8108 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8108:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d810a:	4d0e      	ldr	r5, [pc, #56]	; (d8144 <_Z19__fetch_global_Wirev+0x3c>)
   d810c:	6829      	ldr	r1, [r5, #0]
   d810e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8112:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8114:	d113      	bne.n	d813e <_Z19__fetch_global_Wirev+0x36>
   d8116:	4628      	mov	r0, r5
   d8118:	f7fb ffd0 	bl	d40bc <__cxa_guard_acquire>
   d811c:	b178      	cbz	r0, d813e <_Z19__fetch_global_Wirev+0x36>
   d811e:	a801      	add	r0, sp, #4
   d8120:	f7ff ffd8 	bl	d80d4 <_Z17acquireWireBufferv>
   d8124:	aa01      	add	r2, sp, #4
   d8126:	4621      	mov	r1, r4
   d8128:	4807      	ldr	r0, [pc, #28]	; (d8148 <_Z19__fetch_global_Wirev+0x40>)
   d812a:	f7ff fd37 	bl	d7b9c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d812e:	4628      	mov	r0, r5
   d8130:	f7fb ffc9 	bl	d40c6 <__cxa_guard_release>
   d8134:	4a05      	ldr	r2, [pc, #20]	; (d814c <_Z19__fetch_global_Wirev+0x44>)
   d8136:	4906      	ldr	r1, [pc, #24]	; (d8150 <_Z19__fetch_global_Wirev+0x48>)
   d8138:	4803      	ldr	r0, [pc, #12]	; (d8148 <_Z19__fetch_global_Wirev+0x40>)
   d813a:	f000 f80b 	bl	d8154 <__aeabi_atexit>
	return wire;
}
   d813e:	4802      	ldr	r0, [pc, #8]	; (d8148 <_Z19__fetch_global_Wirev+0x40>)
   d8140:	b007      	add	sp, #28
   d8142:	bd30      	pop	{r4, r5, pc}
   d8144:	2003e738 	.word	0x2003e738
   d8148:	2003e73c 	.word	0x2003e73c
   d814c:	2003e2d8 	.word	0x2003e2d8
   d8150:	000d7b45 	.word	0x000d7b45

000d8154 <__aeabi_atexit>:
   d8154:	460b      	mov	r3, r1
   d8156:	4601      	mov	r1, r0
   d8158:	4618      	mov	r0, r3
   d815a:	f002 b965 	b.w	da428 <__cxa_atexit>
	...

000d8160 <_ZSt15get_new_handlerv>:
   d8160:	4b02      	ldr	r3, [pc, #8]	; (d816c <_ZSt15get_new_handlerv+0xc>)
   d8162:	6818      	ldr	r0, [r3, #0]
   d8164:	f3bf 8f5f 	dmb	sy
   d8168:	4770      	bx	lr
   d816a:	bf00      	nop
   d816c:	2003e750 	.word	0x2003e750

000d8170 <_ZdlPvj>:
   d8170:	f7fb bf95 	b.w	d409e <_ZdlPv>

000d8174 <_ZnajRKSt9nothrow_t>:
   d8174:	f000 b800 	b.w	d8178 <_ZnwjRKSt9nothrow_t>

000d8178 <_ZnwjRKSt9nothrow_t>:
   d8178:	b510      	push	{r4, lr}
   d817a:	2800      	cmp	r0, #0
   d817c:	bf14      	ite	ne
   d817e:	4604      	movne	r4, r0
   d8180:	2401      	moveq	r4, #1
   d8182:	4620      	mov	r0, r4
   d8184:	f7fe fca0 	bl	d6ac8 <malloc>
   d8188:	b920      	cbnz	r0, d8194 <_ZnwjRKSt9nothrow_t+0x1c>
   d818a:	f7ff ffe9 	bl	d8160 <_ZSt15get_new_handlerv>
   d818e:	b108      	cbz	r0, d8194 <_ZnwjRKSt9nothrow_t+0x1c>
   d8190:	4780      	blx	r0
   d8192:	e7f6      	b.n	d8182 <_ZnwjRKSt9nothrow_t+0xa>
   d8194:	bd10      	pop	{r4, pc}

000d8196 <_ZSt25__throw_bad_function_callv>:
   d8196:	b508      	push	{r3, lr}
   d8198:	f7fe fcae 	bl	d6af8 <abort>

000d819c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d819c:	4b18      	ldr	r3, [pc, #96]	; (d8200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d819e:	681a      	ldr	r2, [r3, #0]
   d81a0:	07d1      	lsls	r1, r2, #31
   d81a2:	bf5c      	itt	pl
   d81a4:	2201      	movpl	r2, #1
   d81a6:	601a      	strpl	r2, [r3, #0]
   d81a8:	4b16      	ldr	r3, [pc, #88]	; (d8204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d81aa:	681a      	ldr	r2, [r3, #0]
   d81ac:	07d2      	lsls	r2, r2, #31
   d81ae:	bf5c      	itt	pl
   d81b0:	2201      	movpl	r2, #1
   d81b2:	601a      	strpl	r2, [r3, #0]
   d81b4:	4b14      	ldr	r3, [pc, #80]	; (d8208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d81b6:	681a      	ldr	r2, [r3, #0]
   d81b8:	07d0      	lsls	r0, r2, #31
   d81ba:	bf5c      	itt	pl
   d81bc:	2201      	movpl	r2, #1
   d81be:	601a      	strpl	r2, [r3, #0]
   d81c0:	4b12      	ldr	r3, [pc, #72]	; (d820c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81c2:	681a      	ldr	r2, [r3, #0]
   d81c4:	07d1      	lsls	r1, r2, #31
   d81c6:	bf5c      	itt	pl
   d81c8:	2201      	movpl	r2, #1
   d81ca:	601a      	strpl	r2, [r3, #0]
   d81cc:	4b10      	ldr	r3, [pc, #64]	; (d8210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81ce:	681a      	ldr	r2, [r3, #0]
   d81d0:	07d2      	lsls	r2, r2, #31
   d81d2:	bf5c      	itt	pl
   d81d4:	2201      	movpl	r2, #1
   d81d6:	601a      	strpl	r2, [r3, #0]
   d81d8:	4b0e      	ldr	r3, [pc, #56]	; (d8214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d81da:	681a      	ldr	r2, [r3, #0]
   d81dc:	07d0      	lsls	r0, r2, #31
   d81de:	bf5c      	itt	pl
   d81e0:	2201      	movpl	r2, #1
   d81e2:	601a      	strpl	r2, [r3, #0]
   d81e4:	4b0c      	ldr	r3, [pc, #48]	; (d8218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d81e6:	681a      	ldr	r2, [r3, #0]
   d81e8:	07d1      	lsls	r1, r2, #31
   d81ea:	bf5c      	itt	pl
   d81ec:	2201      	movpl	r2, #1
   d81ee:	601a      	strpl	r2, [r3, #0]
   d81f0:	4b0a      	ldr	r3, [pc, #40]	; (d821c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d81f2:	681a      	ldr	r2, [r3, #0]
   d81f4:	07d2      	lsls	r2, r2, #31
   d81f6:	bf5c      	itt	pl
   d81f8:	2201      	movpl	r2, #1
   d81fa:	601a      	strpl	r2, [r3, #0]
   d81fc:	4770      	bx	lr
   d81fe:	bf00      	nop
   d8200:	2003e770 	.word	0x2003e770
   d8204:	2003e76c 	.word	0x2003e76c
   d8208:	2003e768 	.word	0x2003e768
   d820c:	2003e764 	.word	0x2003e764
   d8210:	2003e760 	.word	0x2003e760
   d8214:	2003e75c 	.word	0x2003e75c
   d8218:	2003e758 	.word	0x2003e758
   d821c:	2003e754 	.word	0x2003e754

000d8220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8220:	4b24      	ldr	r3, [pc, #144]	; (d82b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8222:	681a      	ldr	r2, [r3, #0]
   d8224:	07d0      	lsls	r0, r2, #31
   d8226:	bf5c      	itt	pl
   d8228:	2201      	movpl	r2, #1
   d822a:	601a      	strpl	r2, [r3, #0]
   d822c:	4b22      	ldr	r3, [pc, #136]	; (d82b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d822e:	681a      	ldr	r2, [r3, #0]
   d8230:	07d1      	lsls	r1, r2, #31
   d8232:	bf5c      	itt	pl
   d8234:	2201      	movpl	r2, #1
   d8236:	601a      	strpl	r2, [r3, #0]
   d8238:	4b20      	ldr	r3, [pc, #128]	; (d82bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d823a:	681a      	ldr	r2, [r3, #0]
   d823c:	07d2      	lsls	r2, r2, #31
   d823e:	bf5c      	itt	pl
   d8240:	2201      	movpl	r2, #1
   d8242:	601a      	strpl	r2, [r3, #0]
   d8244:	4b1e      	ldr	r3, [pc, #120]	; (d82c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8246:	681a      	ldr	r2, [r3, #0]
   d8248:	07d0      	lsls	r0, r2, #31
   d824a:	bf5c      	itt	pl
   d824c:	2201      	movpl	r2, #1
   d824e:	601a      	strpl	r2, [r3, #0]
   d8250:	4b1c      	ldr	r3, [pc, #112]	; (d82c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8252:	681a      	ldr	r2, [r3, #0]
   d8254:	07d1      	lsls	r1, r2, #31
   d8256:	bf5c      	itt	pl
   d8258:	2201      	movpl	r2, #1
   d825a:	601a      	strpl	r2, [r3, #0]
   d825c:	4b1a      	ldr	r3, [pc, #104]	; (d82c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d825e:	681a      	ldr	r2, [r3, #0]
   d8260:	07d2      	lsls	r2, r2, #31
   d8262:	bf5c      	itt	pl
   d8264:	2201      	movpl	r2, #1
   d8266:	601a      	strpl	r2, [r3, #0]
   d8268:	4b18      	ldr	r3, [pc, #96]	; (d82cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d826a:	681a      	ldr	r2, [r3, #0]
   d826c:	07d0      	lsls	r0, r2, #31
   d826e:	bf5c      	itt	pl
   d8270:	2201      	movpl	r2, #1
   d8272:	601a      	strpl	r2, [r3, #0]
   d8274:	4b16      	ldr	r3, [pc, #88]	; (d82d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8276:	681a      	ldr	r2, [r3, #0]
   d8278:	07d1      	lsls	r1, r2, #31
   d827a:	bf5c      	itt	pl
   d827c:	2201      	movpl	r2, #1
   d827e:	601a      	strpl	r2, [r3, #0]
   d8280:	4b14      	ldr	r3, [pc, #80]	; (d82d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8282:	681a      	ldr	r2, [r3, #0]
   d8284:	07d2      	lsls	r2, r2, #31
   d8286:	bf5c      	itt	pl
   d8288:	2201      	movpl	r2, #1
   d828a:	601a      	strpl	r2, [r3, #0]
   d828c:	4b12      	ldr	r3, [pc, #72]	; (d82d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d828e:	681a      	ldr	r2, [r3, #0]
   d8290:	07d0      	lsls	r0, r2, #31
   d8292:	bf5c      	itt	pl
   d8294:	2201      	movpl	r2, #1
   d8296:	601a      	strpl	r2, [r3, #0]
   d8298:	4b10      	ldr	r3, [pc, #64]	; (d82dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d829a:	681a      	ldr	r2, [r3, #0]
   d829c:	07d1      	lsls	r1, r2, #31
   d829e:	bf5c      	itt	pl
   d82a0:	2201      	movpl	r2, #1
   d82a2:	601a      	strpl	r2, [r3, #0]
   d82a4:	4b0e      	ldr	r3, [pc, #56]	; (d82e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d82a6:	681a      	ldr	r2, [r3, #0]
   d82a8:	07d2      	lsls	r2, r2, #31
   d82aa:	bf5c      	itt	pl
   d82ac:	2201      	movpl	r2, #1
   d82ae:	601a      	strpl	r2, [r3, #0]
   d82b0:	4770      	bx	lr
   d82b2:	bf00      	nop
   d82b4:	2003e7a0 	.word	0x2003e7a0
   d82b8:	2003e79c 	.word	0x2003e79c
   d82bc:	2003e798 	.word	0x2003e798
   d82c0:	2003e794 	.word	0x2003e794
   d82c4:	2003e790 	.word	0x2003e790
   d82c8:	2003e78c 	.word	0x2003e78c
   d82cc:	2003e788 	.word	0x2003e788
   d82d0:	2003e784 	.word	0x2003e784
   d82d4:	2003e780 	.word	0x2003e780
   d82d8:	2003e77c 	.word	0x2003e77c
   d82dc:	2003e778 	.word	0x2003e778
   d82e0:	2003e774 	.word	0x2003e774

000d82e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d82e4:	4b24      	ldr	r3, [pc, #144]	; (d8378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d82e6:	681a      	ldr	r2, [r3, #0]
   d82e8:	07d0      	lsls	r0, r2, #31
   d82ea:	bf5c      	itt	pl
   d82ec:	2201      	movpl	r2, #1
   d82ee:	601a      	strpl	r2, [r3, #0]
   d82f0:	4b22      	ldr	r3, [pc, #136]	; (d837c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d82f2:	681a      	ldr	r2, [r3, #0]
   d82f4:	07d1      	lsls	r1, r2, #31
   d82f6:	bf5c      	itt	pl
   d82f8:	2201      	movpl	r2, #1
   d82fa:	601a      	strpl	r2, [r3, #0]
   d82fc:	4b20      	ldr	r3, [pc, #128]	; (d8380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d82fe:	681a      	ldr	r2, [r3, #0]
   d8300:	07d2      	lsls	r2, r2, #31
   d8302:	bf5c      	itt	pl
   d8304:	2201      	movpl	r2, #1
   d8306:	601a      	strpl	r2, [r3, #0]
   d8308:	4b1e      	ldr	r3, [pc, #120]	; (d8384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d830a:	681a      	ldr	r2, [r3, #0]
   d830c:	07d0      	lsls	r0, r2, #31
   d830e:	bf5c      	itt	pl
   d8310:	2201      	movpl	r2, #1
   d8312:	601a      	strpl	r2, [r3, #0]
   d8314:	4b1c      	ldr	r3, [pc, #112]	; (d8388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8316:	681a      	ldr	r2, [r3, #0]
   d8318:	07d1      	lsls	r1, r2, #31
   d831a:	bf5c      	itt	pl
   d831c:	2201      	movpl	r2, #1
   d831e:	601a      	strpl	r2, [r3, #0]
   d8320:	4b1a      	ldr	r3, [pc, #104]	; (d838c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8322:	681a      	ldr	r2, [r3, #0]
   d8324:	07d2      	lsls	r2, r2, #31
   d8326:	bf5c      	itt	pl
   d8328:	2201      	movpl	r2, #1
   d832a:	601a      	strpl	r2, [r3, #0]
   d832c:	4b18      	ldr	r3, [pc, #96]	; (d8390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d832e:	681a      	ldr	r2, [r3, #0]
   d8330:	07d0      	lsls	r0, r2, #31
   d8332:	bf5c      	itt	pl
   d8334:	2201      	movpl	r2, #1
   d8336:	601a      	strpl	r2, [r3, #0]
   d8338:	4b16      	ldr	r3, [pc, #88]	; (d8394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d833a:	681a      	ldr	r2, [r3, #0]
   d833c:	07d1      	lsls	r1, r2, #31
   d833e:	bf5c      	itt	pl
   d8340:	2201      	movpl	r2, #1
   d8342:	601a      	strpl	r2, [r3, #0]
   d8344:	4b14      	ldr	r3, [pc, #80]	; (d8398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8346:	681a      	ldr	r2, [r3, #0]
   d8348:	07d2      	lsls	r2, r2, #31
   d834a:	bf5c      	itt	pl
   d834c:	2201      	movpl	r2, #1
   d834e:	601a      	strpl	r2, [r3, #0]
   d8350:	4b12      	ldr	r3, [pc, #72]	; (d839c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8352:	681a      	ldr	r2, [r3, #0]
   d8354:	07d0      	lsls	r0, r2, #31
   d8356:	bf5c      	itt	pl
   d8358:	2201      	movpl	r2, #1
   d835a:	601a      	strpl	r2, [r3, #0]
   d835c:	4b10      	ldr	r3, [pc, #64]	; (d83a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d835e:	681a      	ldr	r2, [r3, #0]
   d8360:	07d1      	lsls	r1, r2, #31
   d8362:	bf5c      	itt	pl
   d8364:	2201      	movpl	r2, #1
   d8366:	601a      	strpl	r2, [r3, #0]
   d8368:	4b0e      	ldr	r3, [pc, #56]	; (d83a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d836a:	681a      	ldr	r2, [r3, #0]
   d836c:	07d2      	lsls	r2, r2, #31
   d836e:	bf5c      	itt	pl
   d8370:	2201      	movpl	r2, #1
   d8372:	601a      	strpl	r2, [r3, #0]
   d8374:	4770      	bx	lr
   d8376:	bf00      	nop
   d8378:	2003e7d0 	.word	0x2003e7d0
   d837c:	2003e7cc 	.word	0x2003e7cc
   d8380:	2003e7c8 	.word	0x2003e7c8
   d8384:	2003e7c4 	.word	0x2003e7c4
   d8388:	2003e7c0 	.word	0x2003e7c0
   d838c:	2003e7bc 	.word	0x2003e7bc
   d8390:	2003e7b8 	.word	0x2003e7b8
   d8394:	2003e7b4 	.word	0x2003e7b4
   d8398:	2003e7b0 	.word	0x2003e7b0
   d839c:	2003e7ac 	.word	0x2003e7ac
   d83a0:	2003e7a8 	.word	0x2003e7a8
   d83a4:	2003e7a4 	.word	0x2003e7a4

000d83a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d83a8:	4b18      	ldr	r3, [pc, #96]	; (d840c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d83aa:	681a      	ldr	r2, [r3, #0]
   d83ac:	07d1      	lsls	r1, r2, #31
   d83ae:	bf5c      	itt	pl
   d83b0:	2201      	movpl	r2, #1
   d83b2:	601a      	strpl	r2, [r3, #0]
   d83b4:	4b16      	ldr	r3, [pc, #88]	; (d8410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	07d2      	lsls	r2, r2, #31
   d83ba:	bf5c      	itt	pl
   d83bc:	2201      	movpl	r2, #1
   d83be:	601a      	strpl	r2, [r3, #0]
   d83c0:	4b14      	ldr	r3, [pc, #80]	; (d8414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	07d0      	lsls	r0, r2, #31
   d83c6:	bf5c      	itt	pl
   d83c8:	2201      	movpl	r2, #1
   d83ca:	601a      	strpl	r2, [r3, #0]
   d83cc:	4b12      	ldr	r3, [pc, #72]	; (d8418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d83ce:	681a      	ldr	r2, [r3, #0]
   d83d0:	07d1      	lsls	r1, r2, #31
   d83d2:	bf5c      	itt	pl
   d83d4:	2201      	movpl	r2, #1
   d83d6:	601a      	strpl	r2, [r3, #0]
   d83d8:	4b10      	ldr	r3, [pc, #64]	; (d841c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d83da:	681a      	ldr	r2, [r3, #0]
   d83dc:	07d2      	lsls	r2, r2, #31
   d83de:	bf5c      	itt	pl
   d83e0:	2201      	movpl	r2, #1
   d83e2:	601a      	strpl	r2, [r3, #0]
   d83e4:	4b0e      	ldr	r3, [pc, #56]	; (d8420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d83e6:	681a      	ldr	r2, [r3, #0]
   d83e8:	07d0      	lsls	r0, r2, #31
   d83ea:	bf5c      	itt	pl
   d83ec:	2201      	movpl	r2, #1
   d83ee:	601a      	strpl	r2, [r3, #0]
   d83f0:	4b0c      	ldr	r3, [pc, #48]	; (d8424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d83f2:	681a      	ldr	r2, [r3, #0]
   d83f4:	07d1      	lsls	r1, r2, #31
   d83f6:	bf5c      	itt	pl
   d83f8:	2201      	movpl	r2, #1
   d83fa:	601a      	strpl	r2, [r3, #0]
   d83fc:	4b0a      	ldr	r3, [pc, #40]	; (d8428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d83fe:	681a      	ldr	r2, [r3, #0]
   d8400:	07d2      	lsls	r2, r2, #31
   d8402:	bf5c      	itt	pl
   d8404:	2201      	movpl	r2, #1
   d8406:	601a      	strpl	r2, [r3, #0]
   d8408:	4770      	bx	lr
   d840a:	bf00      	nop
   d840c:	2003e7f0 	.word	0x2003e7f0
   d8410:	2003e7ec 	.word	0x2003e7ec
   d8414:	2003e7e8 	.word	0x2003e7e8
   d8418:	2003e7e4 	.word	0x2003e7e4
   d841c:	2003e7e0 	.word	0x2003e7e0
   d8420:	2003e7dc 	.word	0x2003e7dc
   d8424:	2003e7d8 	.word	0x2003e7d8
   d8428:	2003e7d4 	.word	0x2003e7d4
   d842c:	00000000 	.word	0x00000000

000d8430 <pow>:
   d8430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8434:	ed2d 8b02 	vpush	{d8}
   d8438:	f8df a324 	ldr.w	sl, [pc, #804]	; d8760 <pow+0x330>
   d843c:	b08b      	sub	sp, #44	; 0x2c
   d843e:	ec57 6b10 	vmov	r6, r7, d0
   d8442:	ec55 4b11 	vmov	r4, r5, d1
   d8446:	f000 f98f 	bl	d8768 <__ieee754_pow>
   d844a:	f99a 8000 	ldrsb.w	r8, [sl]
   d844e:	eeb0 8a40 	vmov.f32	s16, s0
   d8452:	eef0 8a60 	vmov.f32	s17, s1
   d8456:	f1b8 3fff 	cmp.w	r8, #4294967295
   d845a:	d048      	beq.n	d84ee <pow+0xbe>
   d845c:	4622      	mov	r2, r4
   d845e:	462b      	mov	r3, r5
   d8460:	4620      	mov	r0, r4
   d8462:	4629      	mov	r1, r5
   d8464:	f001 fd6e 	bl	d9f44 <__aeabi_dcmpun>
   d8468:	4683      	mov	fp, r0
   d846a:	2800      	cmp	r0, #0
   d846c:	d13f      	bne.n	d84ee <pow+0xbe>
   d846e:	4632      	mov	r2, r6
   d8470:	463b      	mov	r3, r7
   d8472:	4630      	mov	r0, r6
   d8474:	4639      	mov	r1, r7
   d8476:	f001 fd65 	bl	d9f44 <__aeabi_dcmpun>
   d847a:	4681      	mov	r9, r0
   d847c:	2800      	cmp	r0, #0
   d847e:	f040 8090 	bne.w	d85a2 <pow+0x172>
   d8482:	4630      	mov	r0, r6
   d8484:	4639      	mov	r1, r7
   d8486:	2200      	movs	r2, #0
   d8488:	2300      	movs	r3, #0
   d848a:	f001 fd29 	bl	d9ee0 <__aeabi_dcmpeq>
   d848e:	2800      	cmp	r0, #0
   d8490:	d036      	beq.n	d8500 <pow+0xd0>
   d8492:	2200      	movs	r2, #0
   d8494:	2300      	movs	r3, #0
   d8496:	4620      	mov	r0, r4
   d8498:	4629      	mov	r1, r5
   d849a:	f001 fd21 	bl	d9ee0 <__aeabi_dcmpeq>
   d849e:	4683      	mov	fp, r0
   d84a0:	b1b8      	cbz	r0, d84d2 <pow+0xa2>
   d84a2:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d8738 <pow+0x308>
   d84a6:	2201      	movs	r2, #1
   d84a8:	4ba9      	ldr	r3, [pc, #676]	; (d8750 <pow+0x320>)
   d84aa:	f8cd 9020 	str.w	r9, [sp, #32]
   d84ae:	9200      	str	r2, [sp, #0]
   d84b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d84b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d84b8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d84bc:	9301      	str	r3, [sp, #4]
   d84be:	f1b8 0f00 	cmp.w	r8, #0
   d84c2:	d05b      	beq.n	d857c <pow+0x14c>
   d84c4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d8740 <pow+0x310>
   d84c8:	b00b      	add	sp, #44	; 0x2c
   d84ca:	ecbd 8b02 	vpop	{d8}
   d84ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84d2:	ec45 4b10 	vmov	d0, r4, r5
   d84d6:	f000 ffa7 	bl	d9428 <finite>
   d84da:	b140      	cbz	r0, d84ee <pow+0xbe>
   d84dc:	2200      	movs	r2, #0
   d84de:	2300      	movs	r3, #0
   d84e0:	4620      	mov	r0, r4
   d84e2:	4629      	mov	r1, r5
   d84e4:	f001 fd06 	bl	d9ef4 <__aeabi_dcmplt>
   d84e8:	2800      	cmp	r0, #0
   d84ea:	f040 80c5 	bne.w	d8678 <pow+0x248>
   d84ee:	eeb0 0a48 	vmov.f32	s0, s16
   d84f2:	eef0 0a68 	vmov.f32	s1, s17
   d84f6:	b00b      	add	sp, #44	; 0x2c
   d84f8:	ecbd 8b02 	vpop	{d8}
   d84fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8500:	eeb0 0a48 	vmov.f32	s0, s16
   d8504:	eef0 0a68 	vmov.f32	s1, s17
   d8508:	f000 ff8e 	bl	d9428 <finite>
   d850c:	4680      	mov	r8, r0
   d850e:	2800      	cmp	r0, #0
   d8510:	d061      	beq.n	d85d6 <pow+0x1a6>
   d8512:	f04f 0800 	mov.w	r8, #0
   d8516:	f04f 0900 	mov.w	r9, #0
   d851a:	ec51 0b18 	vmov	r0, r1, d8
   d851e:	4642      	mov	r2, r8
   d8520:	464b      	mov	r3, r9
   d8522:	f001 fcdd 	bl	d9ee0 <__aeabi_dcmpeq>
   d8526:	2800      	cmp	r0, #0
   d8528:	d0e1      	beq.n	d84ee <pow+0xbe>
   d852a:	ec47 6b10 	vmov	d0, r6, r7
   d852e:	f000 ff7b 	bl	d9428 <finite>
   d8532:	2800      	cmp	r0, #0
   d8534:	d0db      	beq.n	d84ee <pow+0xbe>
   d8536:	ec45 4b10 	vmov	d0, r4, r5
   d853a:	f000 ff75 	bl	d9428 <finite>
   d853e:	2800      	cmp	r0, #0
   d8540:	d0d5      	beq.n	d84ee <pow+0xbe>
   d8542:	f99a 3000 	ldrsb.w	r3, [sl]
   d8546:	4a82      	ldr	r2, [pc, #520]	; (d8750 <pow+0x320>)
   d8548:	9201      	str	r2, [sp, #4]
   d854a:	2104      	movs	r1, #4
   d854c:	2200      	movs	r2, #0
   d854e:	2b02      	cmp	r3, #2
   d8550:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8554:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8558:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d855c:	9100      	str	r1, [sp, #0]
   d855e:	9208      	str	r2, [sp, #32]
   d8560:	d003      	beq.n	d856a <pow+0x13a>
   d8562:	4668      	mov	r0, sp
   d8564:	f000 ff68 	bl	d9438 <matherr>
   d8568:	b970      	cbnz	r0, d8588 <pow+0x158>
   d856a:	f7fe fad5 	bl	d6b18 <__errno>
   d856e:	2322      	movs	r3, #34	; 0x22
   d8570:	6003      	str	r3, [r0, #0]
   d8572:	e009      	b.n	d8588 <pow+0x158>
   d8574:	ed9f 7b70 	vldr	d7, [pc, #448]	; d8738 <pow+0x308>
   d8578:	ed8d 7b06 	vstr	d7, [sp, #24]
   d857c:	4668      	mov	r0, sp
   d857e:	f000 ff5b 	bl	d9438 <matherr>
   d8582:	2800      	cmp	r0, #0
   d8584:	f000 808e 	beq.w	d86a4 <pow+0x274>
   d8588:	9b08      	ldr	r3, [sp, #32]
   d858a:	b11b      	cbz	r3, d8594 <pow+0x164>
   d858c:	f7fe fac4 	bl	d6b18 <__errno>
   d8590:	9b08      	ldr	r3, [sp, #32]
   d8592:	6003      	str	r3, [r0, #0]
   d8594:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8598:	b00b      	add	sp, #44	; 0x2c
   d859a:	ecbd 8b02 	vpop	{d8}
   d859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d85a2:	2200      	movs	r2, #0
   d85a4:	2300      	movs	r3, #0
   d85a6:	4620      	mov	r0, r4
   d85a8:	4629      	mov	r1, r5
   d85aa:	f001 fc99 	bl	d9ee0 <__aeabi_dcmpeq>
   d85ae:	2800      	cmp	r0, #0
   d85b0:	d09d      	beq.n	d84ee <pow+0xbe>
   d85b2:	ed9f 0b63 	vldr	d0, [pc, #396]	; d8740 <pow+0x310>
   d85b6:	4b66      	ldr	r3, [pc, #408]	; (d8750 <pow+0x320>)
   d85b8:	f8cd b020 	str.w	fp, [sp, #32]
   d85bc:	2201      	movs	r2, #1
   d85be:	f1b8 0f02 	cmp.w	r8, #2
   d85c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d85c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d85ca:	ed8d 0b06 	vstr	d0, [sp, #24]
   d85ce:	e88d 000c 	stmia.w	sp, {r2, r3}
   d85d2:	d1d3      	bne.n	d857c <pow+0x14c>
   d85d4:	e78f      	b.n	d84f6 <pow+0xc6>
   d85d6:	ec47 6b10 	vmov	d0, r6, r7
   d85da:	f000 ff25 	bl	d9428 <finite>
   d85de:	2800      	cmp	r0, #0
   d85e0:	d097      	beq.n	d8512 <pow+0xe2>
   d85e2:	ec45 4b10 	vmov	d0, r4, r5
   d85e6:	f000 ff1f 	bl	d9428 <finite>
   d85ea:	2800      	cmp	r0, #0
   d85ec:	d091      	beq.n	d8512 <pow+0xe2>
   d85ee:	ec53 2b18 	vmov	r2, r3, d8
   d85f2:	ee18 0a10 	vmov	r0, s16
   d85f6:	4619      	mov	r1, r3
   d85f8:	f001 fca4 	bl	d9f44 <__aeabi_dcmpun>
   d85fc:	2800      	cmp	r0, #0
   d85fe:	d17c      	bne.n	d86fa <pow+0x2ca>
   d8600:	2303      	movs	r3, #3
   d8602:	f99a 8000 	ldrsb.w	r8, [sl]
   d8606:	9300      	str	r3, [sp, #0]
   d8608:	4b51      	ldr	r3, [pc, #324]	; (d8750 <pow+0x320>)
   d860a:	9008      	str	r0, [sp, #32]
   d860c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8610:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8614:	9301      	str	r3, [sp, #4]
   d8616:	f1b8 0f00 	cmp.w	r8, #0
   d861a:	d148      	bne.n	d86ae <pow+0x27e>
   d861c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d8764 <pow+0x334>
   d8620:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d8624:	2200      	movs	r2, #0
   d8626:	2300      	movs	r3, #0
   d8628:	4630      	mov	r0, r6
   d862a:	4639      	mov	r1, r7
   d862c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8630:	f001 fc60 	bl	d9ef4 <__aeabi_dcmplt>
   d8634:	2800      	cmp	r0, #0
   d8636:	d094      	beq.n	d8562 <pow+0x132>
   d8638:	2200      	movs	r2, #0
   d863a:	4b46      	ldr	r3, [pc, #280]	; (d8754 <pow+0x324>)
   d863c:	4620      	mov	r0, r4
   d863e:	4629      	mov	r1, r5
   d8640:	f001 f9e6 	bl	d9a10 <__aeabi_dmul>
   d8644:	4604      	mov	r4, r0
   d8646:	460d      	mov	r5, r1
   d8648:	ec45 4b10 	vmov	d0, r4, r5
   d864c:	f000 ff00 	bl	d9450 <rint>
   d8650:	4620      	mov	r0, r4
   d8652:	ec53 2b10 	vmov	r2, r3, d0
   d8656:	4629      	mov	r1, r5
   d8658:	f001 fc42 	bl	d9ee0 <__aeabi_dcmpeq>
   d865c:	2800      	cmp	r0, #0
   d865e:	d149      	bne.n	d86f4 <pow+0x2c4>
   d8660:	4b3d      	ldr	r3, [pc, #244]	; (d8758 <pow+0x328>)
   d8662:	f99a 8000 	ldrsb.w	r8, [sl]
   d8666:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d866a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d866e:	f1b8 0f02 	cmp.w	r8, #2
   d8672:	f47f af76 	bne.w	d8562 <pow+0x132>
   d8676:	e778      	b.n	d856a <pow+0x13a>
   d8678:	4a35      	ldr	r2, [pc, #212]	; (d8750 <pow+0x320>)
   d867a:	f99a 3000 	ldrsb.w	r3, [sl]
   d867e:	f8cd b020 	str.w	fp, [sp, #32]
   d8682:	2101      	movs	r1, #1
   d8684:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8688:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d868c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d8690:	2b00      	cmp	r3, #0
   d8692:	f43f af6f 	beq.w	d8574 <pow+0x144>
   d8696:	4931      	ldr	r1, [pc, #196]	; (d875c <pow+0x32c>)
   d8698:	2000      	movs	r0, #0
   d869a:	2b02      	cmp	r3, #2
   d869c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d86a0:	f47f af6c 	bne.w	d857c <pow+0x14c>
   d86a4:	f7fe fa38 	bl	d6b18 <__errno>
   d86a8:	2321      	movs	r3, #33	; 0x21
   d86aa:	6003      	str	r3, [r0, #0]
   d86ac:	e76c      	b.n	d8588 <pow+0x158>
   d86ae:	ed9f 7b26 	vldr	d7, [pc, #152]	; d8748 <pow+0x318>
   d86b2:	2200      	movs	r2, #0
   d86b4:	2300      	movs	r3, #0
   d86b6:	4630      	mov	r0, r6
   d86b8:	4639      	mov	r1, r7
   d86ba:	ed8d 7b06 	vstr	d7, [sp, #24]
   d86be:	f001 fc19 	bl	d9ef4 <__aeabi_dcmplt>
   d86c2:	2800      	cmp	r0, #0
   d86c4:	d0d3      	beq.n	d866e <pow+0x23e>
   d86c6:	2200      	movs	r2, #0
   d86c8:	4b22      	ldr	r3, [pc, #136]	; (d8754 <pow+0x324>)
   d86ca:	4620      	mov	r0, r4
   d86cc:	4629      	mov	r1, r5
   d86ce:	f001 f99f 	bl	d9a10 <__aeabi_dmul>
   d86d2:	4604      	mov	r4, r0
   d86d4:	460d      	mov	r5, r1
   d86d6:	ec45 4b10 	vmov	d0, r4, r5
   d86da:	f000 feb9 	bl	d9450 <rint>
   d86de:	4620      	mov	r0, r4
   d86e0:	ec53 2b10 	vmov	r2, r3, d0
   d86e4:	4629      	mov	r1, r5
   d86e6:	f001 fbfb 	bl	d9ee0 <__aeabi_dcmpeq>
   d86ea:	b918      	cbnz	r0, d86f4 <pow+0x2c4>
   d86ec:	4b1b      	ldr	r3, [pc, #108]	; (d875c <pow+0x32c>)
   d86ee:	2200      	movs	r2, #0
   d86f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d86f4:	f99a 8000 	ldrsb.w	r8, [sl]
   d86f8:	e7b9      	b.n	d866e <pow+0x23e>
   d86fa:	4b15      	ldr	r3, [pc, #84]	; (d8750 <pow+0x320>)
   d86fc:	f99a 9000 	ldrsb.w	r9, [sl]
   d8700:	f8cd 8020 	str.w	r8, [sp, #32]
   d8704:	2201      	movs	r2, #1
   d8706:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d870a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d870e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8712:	f1b9 0f00 	cmp.w	r9, #0
   d8716:	f43f af2d 	beq.w	d8574 <pow+0x144>
   d871a:	2200      	movs	r2, #0
   d871c:	2300      	movs	r3, #0
   d871e:	4610      	mov	r0, r2
   d8720:	4619      	mov	r1, r3
   d8722:	f001 fa9f 	bl	d9c64 <__aeabi_ddiv>
   d8726:	f1b9 0f02 	cmp.w	r9, #2
   d872a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d872e:	d0b9      	beq.n	d86a4 <pow+0x274>
   d8730:	e724      	b.n	d857c <pow+0x14c>
   d8732:	bf00      	nop
   d8734:	f3af 8000 	nop.w
	...
   d8744:	3ff00000 	.word	0x3ff00000
   d8748:	00000000 	.word	0x00000000
   d874c:	7ff00000 	.word	0x7ff00000
   d8750:	000db0dc 	.word	0x000db0dc
   d8754:	3fe00000 	.word	0x3fe00000
   d8758:	c7efffff 	.word	0xc7efffff
   d875c:	fff00000 	.word	0xfff00000
   d8760:	2003e26c 	.word	0x2003e26c
   d8764:	47efffff 	.word	0x47efffff

000d8768 <__ieee754_pow>:
   d8768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d876c:	ec51 0b11 	vmov	r0, r1, d1
   d8770:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8774:	ea58 0400 	orrs.w	r4, r8, r0
   d8778:	b093      	sub	sp, #76	; 0x4c
   d877a:	d03c      	beq.n	d87f6 <__ieee754_pow+0x8e>
   d877c:	ec53 2b10 	vmov	r2, r3, d0
   d8780:	4e6d      	ldr	r6, [pc, #436]	; (d8938 <__ieee754_pow+0x1d0>)
   d8782:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8786:	42b4      	cmp	r4, r6
   d8788:	ee10 aa10 	vmov	sl, s0
   d878c:	461d      	mov	r5, r3
   d878e:	dc2b      	bgt.n	d87e8 <__ieee754_pow+0x80>
   d8790:	4689      	mov	r9, r1
   d8792:	ee11 ea10 	vmov	lr, s2
   d8796:	d026      	beq.n	d87e6 <__ieee754_pow+0x7e>
   d8798:	45b0      	cmp	r8, r6
   d879a:	dc25      	bgt.n	d87e8 <__ieee754_pow+0x80>
   d879c:	4e66      	ldr	r6, [pc, #408]	; (d8938 <__ieee754_pow+0x1d0>)
   d879e:	45b0      	cmp	r8, r6
   d87a0:	d077      	beq.n	d8892 <__ieee754_pow+0x12a>
   d87a2:	2d00      	cmp	r5, #0
   d87a4:	4616      	mov	r6, r2
   d87a6:	461f      	mov	r7, r3
   d87a8:	e9cd 0100 	strd	r0, r1, [sp]
   d87ac:	db75      	blt.n	d889a <__ieee754_pow+0x132>
   d87ae:	f04f 0b00 	mov.w	fp, #0
   d87b2:	f1be 0f00 	cmp.w	lr, #0
   d87b6:	d12d      	bne.n	d8814 <__ieee754_pow+0xac>
   d87b8:	4b5f      	ldr	r3, [pc, #380]	; (d8938 <__ieee754_pow+0x1d0>)
   d87ba:	4598      	cmp	r8, r3
   d87bc:	f000 8089 	beq.w	d88d2 <__ieee754_pow+0x16a>
   d87c0:	4b5e      	ldr	r3, [pc, #376]	; (d893c <__ieee754_pow+0x1d4>)
   d87c2:	4598      	cmp	r8, r3
   d87c4:	d05e      	beq.n	d8884 <__ieee754_pow+0x11c>
   d87c6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d87ca:	f000 83de 	beq.w	d8f8a <__ieee754_pow+0x822>
   d87ce:	4b5c      	ldr	r3, [pc, #368]	; (d8940 <__ieee754_pow+0x1d8>)
   d87d0:	4599      	cmp	r9, r3
   d87d2:	d11f      	bne.n	d8814 <__ieee754_pow+0xac>
   d87d4:	2d00      	cmp	r5, #0
   d87d6:	db1d      	blt.n	d8814 <__ieee754_pow+0xac>
   d87d8:	ec47 6b10 	vmov	d0, r6, r7
   d87dc:	b013      	add	sp, #76	; 0x4c
   d87de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87e2:	f000 bd49 	b.w	d9278 <__ieee754_sqrt>
   d87e6:	b15a      	cbz	r2, d8800 <__ieee754_pow+0x98>
   d87e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d87ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d87f0:	ea54 030a 	orrs.w	r3, r4, sl
   d87f4:	d106      	bne.n	d8804 <__ieee754_pow+0x9c>
   d87f6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d8920 <__ieee754_pow+0x1b8>
   d87fa:	b013      	add	sp, #76	; 0x4c
   d87fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8800:	45a0      	cmp	r8, r4
   d8802:	ddcb      	ble.n	d879c <__ieee754_pow+0x34>
   d8804:	484f      	ldr	r0, [pc, #316]	; (d8944 <__ieee754_pow+0x1dc>)
   d8806:	b013      	add	sp, #76	; 0x4c
   d8808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d880c:	f000 be18 	b.w	d9440 <nan>
   d8810:	f04f 0b00 	mov.w	fp, #0
   d8814:	ec47 6b10 	vmov	d0, r6, r7
   d8818:	f000 fdfe 	bl	d9418 <fabs>
   d881c:	ec51 0b10 	vmov	r0, r1, d0
   d8820:	f1ba 0f00 	cmp.w	sl, #0
   d8824:	d01e      	beq.n	d8864 <__ieee754_pow+0xfc>
   d8826:	0fed      	lsrs	r5, r5, #31
   d8828:	f105 3aff 	add.w	sl, r5, #4294967295
   d882c:	ea5b 030a 	orrs.w	r3, fp, sl
   d8830:	d063      	beq.n	d88fa <__ieee754_pow+0x192>
   d8832:	4b45      	ldr	r3, [pc, #276]	; (d8948 <__ieee754_pow+0x1e0>)
   d8834:	4598      	cmp	r8, r3
   d8836:	f340 808d 	ble.w	d8954 <__ieee754_pow+0x1ec>
   d883a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d883e:	4598      	cmp	r8, r3
   d8840:	f340 8438 	ble.w	d90b4 <__ieee754_pow+0x94c>
   d8844:	4b41      	ldr	r3, [pc, #260]	; (d894c <__ieee754_pow+0x1e4>)
   d8846:	429c      	cmp	r4, r3
   d8848:	dd62      	ble.n	d8910 <__ieee754_pow+0x1a8>
   d884a:	f1b9 0f00 	cmp.w	r9, #0
   d884e:	dd62      	ble.n	d8916 <__ieee754_pow+0x1ae>
   d8850:	a335      	add	r3, pc, #212	; (adr r3, d8928 <__ieee754_pow+0x1c0>)
   d8852:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8856:	4610      	mov	r0, r2
   d8858:	4619      	mov	r1, r3
   d885a:	f001 f8d9 	bl	d9a10 <__aeabi_dmul>
   d885e:	ec41 0b10 	vmov	d0, r0, r1
   d8862:	e7ca      	b.n	d87fa <__ieee754_pow+0x92>
   d8864:	b124      	cbz	r4, d8870 <__ieee754_pow+0x108>
   d8866:	4b35      	ldr	r3, [pc, #212]	; (d893c <__ieee754_pow+0x1d4>)
   d8868:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d886c:	429a      	cmp	r2, r3
   d886e:	d1da      	bne.n	d8826 <__ieee754_pow+0xbe>
   d8870:	f1b9 0f00 	cmp.w	r9, #0
   d8874:	f2c0 83cb 	blt.w	d900e <__ieee754_pow+0x8a6>
   d8878:	2d00      	cmp	r5, #0
   d887a:	f2c0 8374 	blt.w	d8f66 <__ieee754_pow+0x7fe>
   d887e:	ec41 0b10 	vmov	d0, r0, r1
   d8882:	e7ba      	b.n	d87fa <__ieee754_pow+0x92>
   d8884:	f1b9 0f00 	cmp.w	r9, #0
   d8888:	f2c0 847a 	blt.w	d9180 <__ieee754_pow+0xa18>
   d888c:	ec47 6b10 	vmov	d0, r6, r7
   d8890:	e7b3      	b.n	d87fa <__ieee754_pow+0x92>
   d8892:	f1be 0f00 	cmp.w	lr, #0
   d8896:	d084      	beq.n	d87a2 <__ieee754_pow+0x3a>
   d8898:	e7a6      	b.n	d87e8 <__ieee754_pow+0x80>
   d889a:	4b2d      	ldr	r3, [pc, #180]	; (d8950 <__ieee754_pow+0x1e8>)
   d889c:	4598      	cmp	r8, r3
   d889e:	dc29      	bgt.n	d88f4 <__ieee754_pow+0x18c>
   d88a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d88a4:	4598      	cmp	r8, r3
   d88a6:	dd82      	ble.n	d87ae <__ieee754_pow+0x46>
   d88a8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d88ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d88b0:	2b14      	cmp	r3, #20
   d88b2:	f340 847f 	ble.w	d91b4 <__ieee754_pow+0xa4c>
   d88b6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d88ba:	fa2e f203 	lsr.w	r2, lr, r3
   d88be:	fa02 f303 	lsl.w	r3, r2, r3
   d88c2:	459e      	cmp	lr, r3
   d88c4:	f47f af73 	bne.w	d87ae <__ieee754_pow+0x46>
   d88c8:	f002 0201 	and.w	r2, r2, #1
   d88cc:	f1c2 0b02 	rsb	fp, r2, #2
   d88d0:	e76f      	b.n	d87b2 <__ieee754_pow+0x4a>
   d88d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d88d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d88da:	ea53 030a 	orrs.w	r3, r3, sl
   d88de:	d08a      	beq.n	d87f6 <__ieee754_pow+0x8e>
   d88e0:	4b1a      	ldr	r3, [pc, #104]	; (d894c <__ieee754_pow+0x1e4>)
   d88e2:	429c      	cmp	r4, r3
   d88e4:	f340 8385 	ble.w	d8ff2 <__ieee754_pow+0x88a>
   d88e8:	f1b9 0f00 	cmp.w	r9, #0
   d88ec:	db13      	blt.n	d8916 <__ieee754_pow+0x1ae>
   d88ee:	ed9d 0b00 	vldr	d0, [sp]
   d88f2:	e782      	b.n	d87fa <__ieee754_pow+0x92>
   d88f4:	f04f 0b02 	mov.w	fp, #2
   d88f8:	e75b      	b.n	d87b2 <__ieee754_pow+0x4a>
   d88fa:	4632      	mov	r2, r6
   d88fc:	463b      	mov	r3, r7
   d88fe:	4610      	mov	r0, r2
   d8900:	4619      	mov	r1, r3
   d8902:	f000 fed1 	bl	d96a8 <__aeabi_dsub>
   d8906:	4602      	mov	r2, r0
   d8908:	460b      	mov	r3, r1
   d890a:	f001 f9ab 	bl	d9c64 <__aeabi_ddiv>
   d890e:	e7b6      	b.n	d887e <__ieee754_pow+0x116>
   d8910:	f1b9 0f00 	cmp.w	r9, #0
   d8914:	db9c      	blt.n	d8850 <__ieee754_pow+0xe8>
   d8916:	ed9f 0b06 	vldr	d0, [pc, #24]	; d8930 <__ieee754_pow+0x1c8>
   d891a:	e76e      	b.n	d87fa <__ieee754_pow+0x92>
   d891c:	f3af 8000 	nop.w
   d8920:	00000000 	.word	0x00000000
   d8924:	3ff00000 	.word	0x3ff00000
   d8928:	8800759c 	.word	0x8800759c
   d892c:	7e37e43c 	.word	0x7e37e43c
	...
   d8938:	7ff00000 	.word	0x7ff00000
   d893c:	3ff00000 	.word	0x3ff00000
   d8940:	3fe00000 	.word	0x3fe00000
   d8944:	000db0e0 	.word	0x000db0e0
   d8948:	41e00000 	.word	0x41e00000
   d894c:	3fefffff 	.word	0x3fefffff
   d8950:	433fffff 	.word	0x433fffff
   d8954:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8958:	f04f 0200 	mov.w	r2, #0
   d895c:	da05      	bge.n	d896a <__ieee754_pow+0x202>
   d895e:	4bd6      	ldr	r3, [pc, #856]	; (d8cb8 <__ieee754_pow+0x550>)
   d8960:	f001 f856 	bl	d9a10 <__aeabi_dmul>
   d8964:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8968:	460c      	mov	r4, r1
   d896a:	1523      	asrs	r3, r4, #20
   d896c:	4ed3      	ldr	r6, [pc, #844]	; (d8cbc <__ieee754_pow+0x554>)
   d896e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d8972:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8976:	4413      	add	r3, r2
   d8978:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d897c:	42b4      	cmp	r4, r6
   d897e:	461a      	mov	r2, r3
   d8980:	930d      	str	r3, [sp, #52]	; 0x34
   d8982:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d8986:	f340 8349 	ble.w	d901c <__ieee754_pow+0x8b4>
   d898a:	4bcd      	ldr	r3, [pc, #820]	; (d8cc0 <__ieee754_pow+0x558>)
   d898c:	429c      	cmp	r4, r3
   d898e:	f340 842d 	ble.w	d91ec <__ieee754_pow+0xa84>
   d8992:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8c60 <__ieee754_pow+0x4f8>
   d8996:	ed8d 7b08 	vstr	d7, [sp, #32]
   d899a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d899e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8c68 <__ieee754_pow+0x500>
   d89a2:	4613      	mov	r3, r2
   d89a4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d89a8:	3301      	adds	r3, #1
   d89aa:	930d      	str	r3, [sp, #52]	; 0x34
   d89ac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d89b0:	f04f 0800 	mov.w	r8, #0
   d89b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d89b8:	4629      	mov	r1, r5
   d89ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d89be:	f000 fe73 	bl	d96a8 <__aeabi_dsub>
   d89c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d89c6:	4606      	mov	r6, r0
   d89c8:	460f      	mov	r7, r1
   d89ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d89ce:	f000 fe6d 	bl	d96ac <__adddf3>
   d89d2:	4602      	mov	r2, r0
   d89d4:	460b      	mov	r3, r1
   d89d6:	2000      	movs	r0, #0
   d89d8:	49ba      	ldr	r1, [pc, #744]	; (d8cc4 <__ieee754_pow+0x55c>)
   d89da:	f001 f943 	bl	d9c64 <__aeabi_ddiv>
   d89de:	4603      	mov	r3, r0
   d89e0:	460c      	mov	r4, r1
   d89e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d89e6:	4602      	mov	r2, r0
   d89e8:	460b      	mov	r3, r1
   d89ea:	4630      	mov	r0, r6
   d89ec:	4639      	mov	r1, r7
   d89ee:	f001 f80f 	bl	d9a10 <__aeabi_dmul>
   d89f2:	106b      	asrs	r3, r5, #1
   d89f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d89f8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d89fc:	eb03 0508 	add.w	r5, r3, r8
   d8a00:	460a      	mov	r2, r1
   d8a02:	2300      	movs	r3, #0
   d8a04:	4601      	mov	r1, r0
   d8a06:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8a0a:	9302      	str	r3, [sp, #8]
   d8a0c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d8a10:	2400      	movs	r4, #0
   d8a12:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8a16:	462b      	mov	r3, r5
   d8a18:	4622      	mov	r2, r4
   d8a1a:	4640      	mov	r0, r8
   d8a1c:	4649      	mov	r1, r9
   d8a1e:	f000 fff7 	bl	d9a10 <__aeabi_dmul>
   d8a22:	4602      	mov	r2, r0
   d8a24:	460b      	mov	r3, r1
   d8a26:	4630      	mov	r0, r6
   d8a28:	4639      	mov	r1, r7
   d8a2a:	f000 fe3d 	bl	d96a8 <__aeabi_dsub>
   d8a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8a32:	4606      	mov	r6, r0
   d8a34:	460f      	mov	r7, r1
   d8a36:	4620      	mov	r0, r4
   d8a38:	4629      	mov	r1, r5
   d8a3a:	f000 fe35 	bl	d96a8 <__aeabi_dsub>
   d8a3e:	4602      	mov	r2, r0
   d8a40:	460b      	mov	r3, r1
   d8a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8a46:	f000 fe2f 	bl	d96a8 <__aeabi_dsub>
   d8a4a:	4642      	mov	r2, r8
   d8a4c:	464b      	mov	r3, r9
   d8a4e:	f000 ffdf 	bl	d9a10 <__aeabi_dmul>
   d8a52:	4602      	mov	r2, r0
   d8a54:	460b      	mov	r3, r1
   d8a56:	4630      	mov	r0, r6
   d8a58:	4639      	mov	r1, r7
   d8a5a:	f000 fe25 	bl	d96a8 <__aeabi_dsub>
   d8a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d8a62:	f000 ffd5 	bl	d9a10 <__aeabi_dmul>
   d8a66:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8a6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8a6e:	4622      	mov	r2, r4
   d8a70:	462b      	mov	r3, r5
   d8a72:	4620      	mov	r0, r4
   d8a74:	4629      	mov	r1, r5
   d8a76:	f000 ffcb 	bl	d9a10 <__aeabi_dmul>
   d8a7a:	a37d      	add	r3, pc, #500	; (adr r3, d8c70 <__ieee754_pow+0x508>)
   d8a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a80:	4604      	mov	r4, r0
   d8a82:	460d      	mov	r5, r1
   d8a84:	f000 ffc4 	bl	d9a10 <__aeabi_dmul>
   d8a88:	a37b      	add	r3, pc, #492	; (adr r3, d8c78 <__ieee754_pow+0x510>)
   d8a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a8e:	f000 fe0d 	bl	d96ac <__adddf3>
   d8a92:	4622      	mov	r2, r4
   d8a94:	462b      	mov	r3, r5
   d8a96:	f000 ffbb 	bl	d9a10 <__aeabi_dmul>
   d8a9a:	a379      	add	r3, pc, #484	; (adr r3, d8c80 <__ieee754_pow+0x518>)
   d8a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8aa0:	f000 fe04 	bl	d96ac <__adddf3>
   d8aa4:	4622      	mov	r2, r4
   d8aa6:	462b      	mov	r3, r5
   d8aa8:	f000 ffb2 	bl	d9a10 <__aeabi_dmul>
   d8aac:	a376      	add	r3, pc, #472	; (adr r3, d8c88 <__ieee754_pow+0x520>)
   d8aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ab2:	f000 fdfb 	bl	d96ac <__adddf3>
   d8ab6:	4622      	mov	r2, r4
   d8ab8:	462b      	mov	r3, r5
   d8aba:	f000 ffa9 	bl	d9a10 <__aeabi_dmul>
   d8abe:	a374      	add	r3, pc, #464	; (adr r3, d8c90 <__ieee754_pow+0x528>)
   d8ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ac4:	f000 fdf2 	bl	d96ac <__adddf3>
   d8ac8:	4622      	mov	r2, r4
   d8aca:	462b      	mov	r3, r5
   d8acc:	f000 ffa0 	bl	d9a10 <__aeabi_dmul>
   d8ad0:	a371      	add	r3, pc, #452	; (adr r3, d8c98 <__ieee754_pow+0x530>)
   d8ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ad6:	f000 fde9 	bl	d96ac <__adddf3>
   d8ada:	4622      	mov	r2, r4
   d8adc:	4606      	mov	r6, r0
   d8ade:	460f      	mov	r7, r1
   d8ae0:	462b      	mov	r3, r5
   d8ae2:	4620      	mov	r0, r4
   d8ae4:	4629      	mov	r1, r5
   d8ae6:	f000 ff93 	bl	d9a10 <__aeabi_dmul>
   d8aea:	4602      	mov	r2, r0
   d8aec:	460b      	mov	r3, r1
   d8aee:	4630      	mov	r0, r6
   d8af0:	4639      	mov	r1, r7
   d8af2:	f000 ff8d 	bl	d9a10 <__aeabi_dmul>
   d8af6:	4642      	mov	r2, r8
   d8af8:	4604      	mov	r4, r0
   d8afa:	460d      	mov	r5, r1
   d8afc:	464b      	mov	r3, r9
   d8afe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8b02:	f000 fdd3 	bl	d96ac <__adddf3>
   d8b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8b0a:	f000 ff81 	bl	d9a10 <__aeabi_dmul>
   d8b0e:	4622      	mov	r2, r4
   d8b10:	462b      	mov	r3, r5
   d8b12:	f000 fdcb 	bl	d96ac <__adddf3>
   d8b16:	4642      	mov	r2, r8
   d8b18:	4606      	mov	r6, r0
   d8b1a:	460f      	mov	r7, r1
   d8b1c:	464b      	mov	r3, r9
   d8b1e:	4640      	mov	r0, r8
   d8b20:	4649      	mov	r1, r9
   d8b22:	f000 ff75 	bl	d9a10 <__aeabi_dmul>
   d8b26:	2200      	movs	r2, #0
   d8b28:	4b67      	ldr	r3, [pc, #412]	; (d8cc8 <__ieee754_pow+0x560>)
   d8b2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8b2e:	f000 fdbd 	bl	d96ac <__adddf3>
   d8b32:	4632      	mov	r2, r6
   d8b34:	463b      	mov	r3, r7
   d8b36:	f000 fdb9 	bl	d96ac <__adddf3>
   d8b3a:	9802      	ldr	r0, [sp, #8]
   d8b3c:	460d      	mov	r5, r1
   d8b3e:	4604      	mov	r4, r0
   d8b40:	4622      	mov	r2, r4
   d8b42:	462b      	mov	r3, r5
   d8b44:	4640      	mov	r0, r8
   d8b46:	4649      	mov	r1, r9
   d8b48:	f000 ff62 	bl	d9a10 <__aeabi_dmul>
   d8b4c:	2200      	movs	r2, #0
   d8b4e:	4680      	mov	r8, r0
   d8b50:	4689      	mov	r9, r1
   d8b52:	4b5d      	ldr	r3, [pc, #372]	; (d8cc8 <__ieee754_pow+0x560>)
   d8b54:	4620      	mov	r0, r4
   d8b56:	4629      	mov	r1, r5
   d8b58:	f000 fda6 	bl	d96a8 <__aeabi_dsub>
   d8b5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8b60:	f000 fda2 	bl	d96a8 <__aeabi_dsub>
   d8b64:	4602      	mov	r2, r0
   d8b66:	460b      	mov	r3, r1
   d8b68:	4630      	mov	r0, r6
   d8b6a:	4639      	mov	r1, r7
   d8b6c:	f000 fd9c 	bl	d96a8 <__aeabi_dsub>
   d8b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8b74:	f000 ff4c 	bl	d9a10 <__aeabi_dmul>
   d8b78:	4622      	mov	r2, r4
   d8b7a:	4606      	mov	r6, r0
   d8b7c:	460f      	mov	r7, r1
   d8b7e:	462b      	mov	r3, r5
   d8b80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8b84:	f000 ff44 	bl	d9a10 <__aeabi_dmul>
   d8b88:	4602      	mov	r2, r0
   d8b8a:	460b      	mov	r3, r1
   d8b8c:	4630      	mov	r0, r6
   d8b8e:	4639      	mov	r1, r7
   d8b90:	f000 fd8c 	bl	d96ac <__adddf3>
   d8b94:	4606      	mov	r6, r0
   d8b96:	460f      	mov	r7, r1
   d8b98:	4602      	mov	r2, r0
   d8b9a:	460b      	mov	r3, r1
   d8b9c:	4640      	mov	r0, r8
   d8b9e:	4649      	mov	r1, r9
   d8ba0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8ba4:	f000 fd82 	bl	d96ac <__adddf3>
   d8ba8:	9802      	ldr	r0, [sp, #8]
   d8baa:	a33d      	add	r3, pc, #244	; (adr r3, d8ca0 <__ieee754_pow+0x538>)
   d8bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bb0:	4604      	mov	r4, r0
   d8bb2:	460d      	mov	r5, r1
   d8bb4:	f000 ff2c 	bl	d9a10 <__aeabi_dmul>
   d8bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8bbc:	4680      	mov	r8, r0
   d8bbe:	4689      	mov	r9, r1
   d8bc0:	4620      	mov	r0, r4
   d8bc2:	4629      	mov	r1, r5
   d8bc4:	f000 fd70 	bl	d96a8 <__aeabi_dsub>
   d8bc8:	4602      	mov	r2, r0
   d8bca:	460b      	mov	r3, r1
   d8bcc:	4630      	mov	r0, r6
   d8bce:	4639      	mov	r1, r7
   d8bd0:	f000 fd6a 	bl	d96a8 <__aeabi_dsub>
   d8bd4:	a334      	add	r3, pc, #208	; (adr r3, d8ca8 <__ieee754_pow+0x540>)
   d8bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bda:	f000 ff19 	bl	d9a10 <__aeabi_dmul>
   d8bde:	a334      	add	r3, pc, #208	; (adr r3, d8cb0 <__ieee754_pow+0x548>)
   d8be0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8be4:	4606      	mov	r6, r0
   d8be6:	460f      	mov	r7, r1
   d8be8:	4620      	mov	r0, r4
   d8bea:	4629      	mov	r1, r5
   d8bec:	f000 ff10 	bl	d9a10 <__aeabi_dmul>
   d8bf0:	4602      	mov	r2, r0
   d8bf2:	460b      	mov	r3, r1
   d8bf4:	4630      	mov	r0, r6
   d8bf6:	4639      	mov	r1, r7
   d8bf8:	f000 fd58 	bl	d96ac <__adddf3>
   d8bfc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8c00:	f000 fd54 	bl	d96ac <__adddf3>
   d8c04:	4606      	mov	r6, r0
   d8c06:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8c08:	460f      	mov	r7, r1
   d8c0a:	f000 fe9b 	bl	d9944 <__aeabi_i2d>
   d8c0e:	4632      	mov	r2, r6
   d8c10:	4604      	mov	r4, r0
   d8c12:	460d      	mov	r5, r1
   d8c14:	463b      	mov	r3, r7
   d8c16:	4640      	mov	r0, r8
   d8c18:	4649      	mov	r1, r9
   d8c1a:	f000 fd47 	bl	d96ac <__adddf3>
   d8c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8c22:	f000 fd43 	bl	d96ac <__adddf3>
   d8c26:	4622      	mov	r2, r4
   d8c28:	462b      	mov	r3, r5
   d8c2a:	f000 fd3f 	bl	d96ac <__adddf3>
   d8c2e:	9802      	ldr	r0, [sp, #8]
   d8c30:	4622      	mov	r2, r4
   d8c32:	462b      	mov	r3, r5
   d8c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8c38:	f000 fd36 	bl	d96a8 <__aeabi_dsub>
   d8c3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8c40:	f000 fd32 	bl	d96a8 <__aeabi_dsub>
   d8c44:	4642      	mov	r2, r8
   d8c46:	464b      	mov	r3, r9
   d8c48:	f000 fd2e 	bl	d96a8 <__aeabi_dsub>
   d8c4c:	4602      	mov	r2, r0
   d8c4e:	460b      	mov	r3, r1
   d8c50:	4630      	mov	r0, r6
   d8c52:	4639      	mov	r1, r7
   d8c54:	f000 fd28 	bl	d96a8 <__aeabi_dsub>
   d8c58:	4680      	mov	r8, r0
   d8c5a:	4689      	mov	r9, r1
   d8c5c:	e036      	b.n	d8ccc <__ieee754_pow+0x564>
   d8c5e:	bf00      	nop
	...
   d8c6c:	3ff00000 	.word	0x3ff00000
   d8c70:	4a454eef 	.word	0x4a454eef
   d8c74:	3fca7e28 	.word	0x3fca7e28
   d8c78:	93c9db65 	.word	0x93c9db65
   d8c7c:	3fcd864a 	.word	0x3fcd864a
   d8c80:	a91d4101 	.word	0xa91d4101
   d8c84:	3fd17460 	.word	0x3fd17460
   d8c88:	518f264d 	.word	0x518f264d
   d8c8c:	3fd55555 	.word	0x3fd55555
   d8c90:	db6fabff 	.word	0xdb6fabff
   d8c94:	3fdb6db6 	.word	0x3fdb6db6
   d8c98:	33333303 	.word	0x33333303
   d8c9c:	3fe33333 	.word	0x3fe33333
   d8ca0:	e0000000 	.word	0xe0000000
   d8ca4:	3feec709 	.word	0x3feec709
   d8ca8:	dc3a03fd 	.word	0xdc3a03fd
   d8cac:	3feec709 	.word	0x3feec709
   d8cb0:	145b01f5 	.word	0x145b01f5
   d8cb4:	be3e2fe0 	.word	0xbe3e2fe0
   d8cb8:	43400000 	.word	0x43400000
   d8cbc:	0003988e 	.word	0x0003988e
   d8cc0:	000bb679 	.word	0x000bb679
   d8cc4:	3ff00000 	.word	0x3ff00000
   d8cc8:	40080000 	.word	0x40080000
   d8ccc:	f10b 33ff 	add.w	r3, fp, #4294967295
   d8cd0:	ea53 030a 	orrs.w	r3, r3, sl
   d8cd4:	f000 8188 	beq.w	d8fe8 <__ieee754_pow+0x880>
   d8cd8:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d9038 <__ieee754_pow+0x8d0>
   d8cdc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8ce0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8ce4:	4653      	mov	r3, sl
   d8ce6:	465c      	mov	r4, fp
   d8ce8:	e9cd 3400 	strd	r3, r4, [sp]
   d8cec:	2300      	movs	r3, #0
   d8cee:	9300      	str	r3, [sp, #0]
   d8cf0:	e9dd 4500 	ldrd	r4, r5, [sp]
   d8cf4:	4650      	mov	r0, sl
   d8cf6:	4622      	mov	r2, r4
   d8cf8:	462b      	mov	r3, r5
   d8cfa:	4659      	mov	r1, fp
   d8cfc:	f000 fcd4 	bl	d96a8 <__aeabi_dsub>
   d8d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8d04:	f000 fe84 	bl	d9a10 <__aeabi_dmul>
   d8d08:	4652      	mov	r2, sl
   d8d0a:	4606      	mov	r6, r0
   d8d0c:	460f      	mov	r7, r1
   d8d0e:	465b      	mov	r3, fp
   d8d10:	4640      	mov	r0, r8
   d8d12:	4649      	mov	r1, r9
   d8d14:	f000 fe7c 	bl	d9a10 <__aeabi_dmul>
   d8d18:	4602      	mov	r2, r0
   d8d1a:	460b      	mov	r3, r1
   d8d1c:	4630      	mov	r0, r6
   d8d1e:	4639      	mov	r1, r7
   d8d20:	f000 fcc4 	bl	d96ac <__adddf3>
   d8d24:	4622      	mov	r2, r4
   d8d26:	4680      	mov	r8, r0
   d8d28:	4689      	mov	r9, r1
   d8d2a:	462b      	mov	r3, r5
   d8d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8d30:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8d34:	f000 fe6c 	bl	d9a10 <__aeabi_dmul>
   d8d38:	460b      	mov	r3, r1
   d8d3a:	4602      	mov	r2, r0
   d8d3c:	4606      	mov	r6, r0
   d8d3e:	460f      	mov	r7, r1
   d8d40:	4640      	mov	r0, r8
   d8d42:	4649      	mov	r1, r9
   d8d44:	f000 fcb2 	bl	d96ac <__adddf3>
   d8d48:	4bd5      	ldr	r3, [pc, #852]	; (d90a0 <__ieee754_pow+0x938>)
   d8d4a:	4299      	cmp	r1, r3
   d8d4c:	4604      	mov	r4, r0
   d8d4e:	460d      	mov	r5, r1
   d8d50:	468a      	mov	sl, r1
   d8d52:	f340 8123 	ble.w	d8f9c <__ieee754_pow+0x834>
   d8d56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8d5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8d5e:	4303      	orrs	r3, r0
   d8d60:	f040 8218 	bne.w	d9194 <__ieee754_pow+0xa2c>
   d8d64:	a3b6      	add	r3, pc, #728	; (adr r3, d9040 <__ieee754_pow+0x8d8>)
   d8d66:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8d6e:	f000 fc9d 	bl	d96ac <__adddf3>
   d8d72:	4632      	mov	r2, r6
   d8d74:	4680      	mov	r8, r0
   d8d76:	4689      	mov	r9, r1
   d8d78:	463b      	mov	r3, r7
   d8d7a:	4620      	mov	r0, r4
   d8d7c:	4629      	mov	r1, r5
   d8d7e:	f000 fc93 	bl	d96a8 <__aeabi_dsub>
   d8d82:	4602      	mov	r2, r0
   d8d84:	460b      	mov	r3, r1
   d8d86:	4640      	mov	r0, r8
   d8d88:	4649      	mov	r1, r9
   d8d8a:	f001 f8d1 	bl	d9f30 <__aeabi_dcmpgt>
   d8d8e:	2800      	cmp	r0, #0
   d8d90:	f040 8200 	bne.w	d9194 <__ieee754_pow+0xa2c>
   d8d94:	46a8      	mov	r8, r5
   d8d96:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8d9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8d9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8da2:	fa42 f303 	asr.w	r3, r2, r3
   d8da6:	4453      	add	r3, sl
   d8da8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8dac:	4dbd      	ldr	r5, [pc, #756]	; (d90a4 <__ieee754_pow+0x93c>)
   d8dae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8db2:	4115      	asrs	r5, r2
   d8db4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8db8:	2000      	movs	r0, #0
   d8dba:	f1c2 0414 	rsb	r4, r2, #20
   d8dbe:	ea23 0105 	bic.w	r1, r3, r5
   d8dc2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d8dc6:	f1ba 0f00 	cmp.w	sl, #0
   d8dca:	4602      	mov	r2, r0
   d8dcc:	460b      	mov	r3, r1
   d8dce:	fa4b fb04 	asr.w	fp, fp, r4
   d8dd2:	4630      	mov	r0, r6
   d8dd4:	4639      	mov	r1, r7
   d8dd6:	bfb8      	it	lt
   d8dd8:	f1cb 0b00 	rsblt	fp, fp, #0
   d8ddc:	f000 fc64 	bl	d96a8 <__aeabi_dsub>
   d8de0:	4602      	mov	r2, r0
   d8de2:	460b      	mov	r3, r1
   d8de4:	4606      	mov	r6, r0
   d8de6:	460f      	mov	r7, r1
   d8de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8dec:	f000 fc5e 	bl	d96ac <__adddf3>
   d8df0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d8df4:	2400      	movs	r4, #0
   d8df6:	a394      	add	r3, pc, #592	; (adr r3, d9048 <__ieee754_pow+0x8e0>)
   d8df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dfc:	4620      	mov	r0, r4
   d8dfe:	460d      	mov	r5, r1
   d8e00:	f000 fe06 	bl	d9a10 <__aeabi_dmul>
   d8e04:	4632      	mov	r2, r6
   d8e06:	4680      	mov	r8, r0
   d8e08:	4689      	mov	r9, r1
   d8e0a:	463b      	mov	r3, r7
   d8e0c:	4620      	mov	r0, r4
   d8e0e:	4629      	mov	r1, r5
   d8e10:	f000 fc4a 	bl	d96a8 <__aeabi_dsub>
   d8e14:	4602      	mov	r2, r0
   d8e16:	460b      	mov	r3, r1
   d8e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8e1c:	f000 fc44 	bl	d96a8 <__aeabi_dsub>
   d8e20:	a38b      	add	r3, pc, #556	; (adr r3, d9050 <__ieee754_pow+0x8e8>)
   d8e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e26:	f000 fdf3 	bl	d9a10 <__aeabi_dmul>
   d8e2a:	a38b      	add	r3, pc, #556	; (adr r3, d9058 <__ieee754_pow+0x8f0>)
   d8e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e30:	4606      	mov	r6, r0
   d8e32:	460f      	mov	r7, r1
   d8e34:	4620      	mov	r0, r4
   d8e36:	4629      	mov	r1, r5
   d8e38:	f000 fdea 	bl	d9a10 <__aeabi_dmul>
   d8e3c:	4602      	mov	r2, r0
   d8e3e:	460b      	mov	r3, r1
   d8e40:	4630      	mov	r0, r6
   d8e42:	4639      	mov	r1, r7
   d8e44:	f000 fc32 	bl	d96ac <__adddf3>
   d8e48:	4606      	mov	r6, r0
   d8e4a:	460f      	mov	r7, r1
   d8e4c:	4602      	mov	r2, r0
   d8e4e:	460b      	mov	r3, r1
   d8e50:	4640      	mov	r0, r8
   d8e52:	4649      	mov	r1, r9
   d8e54:	f000 fc2a 	bl	d96ac <__adddf3>
   d8e58:	4642      	mov	r2, r8
   d8e5a:	464b      	mov	r3, r9
   d8e5c:	4604      	mov	r4, r0
   d8e5e:	460d      	mov	r5, r1
   d8e60:	f000 fc22 	bl	d96a8 <__aeabi_dsub>
   d8e64:	4602      	mov	r2, r0
   d8e66:	460b      	mov	r3, r1
   d8e68:	4630      	mov	r0, r6
   d8e6a:	4639      	mov	r1, r7
   d8e6c:	f000 fc1c 	bl	d96a8 <__aeabi_dsub>
   d8e70:	4622      	mov	r2, r4
   d8e72:	4680      	mov	r8, r0
   d8e74:	4689      	mov	r9, r1
   d8e76:	462b      	mov	r3, r5
   d8e78:	4620      	mov	r0, r4
   d8e7a:	4629      	mov	r1, r5
   d8e7c:	f000 fdc8 	bl	d9a10 <__aeabi_dmul>
   d8e80:	a377      	add	r3, pc, #476	; (adr r3, d9060 <__ieee754_pow+0x8f8>)
   d8e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e86:	4606      	mov	r6, r0
   d8e88:	460f      	mov	r7, r1
   d8e8a:	f000 fdc1 	bl	d9a10 <__aeabi_dmul>
   d8e8e:	a376      	add	r3, pc, #472	; (adr r3, d9068 <__ieee754_pow+0x900>)
   d8e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e94:	f000 fc08 	bl	d96a8 <__aeabi_dsub>
   d8e98:	4632      	mov	r2, r6
   d8e9a:	463b      	mov	r3, r7
   d8e9c:	f000 fdb8 	bl	d9a10 <__aeabi_dmul>
   d8ea0:	a373      	add	r3, pc, #460	; (adr r3, d9070 <__ieee754_pow+0x908>)
   d8ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ea6:	f000 fc01 	bl	d96ac <__adddf3>
   d8eaa:	4632      	mov	r2, r6
   d8eac:	463b      	mov	r3, r7
   d8eae:	f000 fdaf 	bl	d9a10 <__aeabi_dmul>
   d8eb2:	a371      	add	r3, pc, #452	; (adr r3, d9078 <__ieee754_pow+0x910>)
   d8eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8eb8:	f000 fbf6 	bl	d96a8 <__aeabi_dsub>
   d8ebc:	4632      	mov	r2, r6
   d8ebe:	463b      	mov	r3, r7
   d8ec0:	f000 fda6 	bl	d9a10 <__aeabi_dmul>
   d8ec4:	a36e      	add	r3, pc, #440	; (adr r3, d9080 <__ieee754_pow+0x918>)
   d8ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8eca:	f000 fbef 	bl	d96ac <__adddf3>
   d8ece:	4632      	mov	r2, r6
   d8ed0:	463b      	mov	r3, r7
   d8ed2:	f000 fd9d 	bl	d9a10 <__aeabi_dmul>
   d8ed6:	4602      	mov	r2, r0
   d8ed8:	460b      	mov	r3, r1
   d8eda:	4620      	mov	r0, r4
   d8edc:	4629      	mov	r1, r5
   d8ede:	f000 fbe3 	bl	d96a8 <__aeabi_dsub>
   d8ee2:	4606      	mov	r6, r0
   d8ee4:	460f      	mov	r7, r1
   d8ee6:	4602      	mov	r2, r0
   d8ee8:	460b      	mov	r3, r1
   d8eea:	4620      	mov	r0, r4
   d8eec:	4629      	mov	r1, r5
   d8eee:	f000 fd8f 	bl	d9a10 <__aeabi_dmul>
   d8ef2:	2200      	movs	r2, #0
   d8ef4:	e9cd 0100 	strd	r0, r1, [sp]
   d8ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8efc:	4630      	mov	r0, r6
   d8efe:	4639      	mov	r1, r7
   d8f00:	f000 fbd2 	bl	d96a8 <__aeabi_dsub>
   d8f04:	4602      	mov	r2, r0
   d8f06:	460b      	mov	r3, r1
   d8f08:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8f0c:	f000 feaa 	bl	d9c64 <__aeabi_ddiv>
   d8f10:	4642      	mov	r2, r8
   d8f12:	4606      	mov	r6, r0
   d8f14:	460f      	mov	r7, r1
   d8f16:	464b      	mov	r3, r9
   d8f18:	4620      	mov	r0, r4
   d8f1a:	4629      	mov	r1, r5
   d8f1c:	f000 fd78 	bl	d9a10 <__aeabi_dmul>
   d8f20:	4642      	mov	r2, r8
   d8f22:	464b      	mov	r3, r9
   d8f24:	f000 fbc2 	bl	d96ac <__adddf3>
   d8f28:	4602      	mov	r2, r0
   d8f2a:	460b      	mov	r3, r1
   d8f2c:	4630      	mov	r0, r6
   d8f2e:	4639      	mov	r1, r7
   d8f30:	f000 fbba 	bl	d96a8 <__aeabi_dsub>
   d8f34:	4622      	mov	r2, r4
   d8f36:	462b      	mov	r3, r5
   d8f38:	f000 fbb6 	bl	d96a8 <__aeabi_dsub>
   d8f3c:	4602      	mov	r2, r0
   d8f3e:	460b      	mov	r3, r1
   d8f40:	2000      	movs	r0, #0
   d8f42:	4959      	ldr	r1, [pc, #356]	; (d90a8 <__ieee754_pow+0x940>)
   d8f44:	f000 fbb0 	bl	d96a8 <__aeabi_dsub>
   d8f48:	448a      	add	sl, r1
   d8f4a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8f4e:	4602      	mov	r2, r0
   d8f50:	460b      	mov	r3, r1
   d8f52:	f2c0 815b 	blt.w	d920c <__ieee754_pow+0xaa4>
   d8f56:	4651      	mov	r1, sl
   d8f58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8f5c:	f000 fd58 	bl	d9a10 <__aeabi_dmul>
   d8f60:	ec41 0b10 	vmov	d0, r0, r1
   d8f64:	e449      	b.n	d87fa <__ieee754_pow+0x92>
   d8f66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8f6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8f6e:	ea54 030b 	orrs.w	r3, r4, fp
   d8f72:	f000 8137 	beq.w	d91e4 <__ieee754_pow+0xa7c>
   d8f76:	f1bb 0f01 	cmp.w	fp, #1
   d8f7a:	f47f ac80 	bne.w	d887e <__ieee754_pow+0x116>
   d8f7e:	4602      	mov	r2, r0
   d8f80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8f84:	ec43 2b10 	vmov	d0, r2, r3
   d8f88:	e437      	b.n	d87fa <__ieee754_pow+0x92>
   d8f8a:	4632      	mov	r2, r6
   d8f8c:	463b      	mov	r3, r7
   d8f8e:	4630      	mov	r0, r6
   d8f90:	4639      	mov	r1, r7
   d8f92:	f000 fd3d 	bl	d9a10 <__aeabi_dmul>
   d8f96:	ec41 0b10 	vmov	d0, r0, r1
   d8f9a:	e42e      	b.n	d87fa <__ieee754_pow+0x92>
   d8f9c:	4b43      	ldr	r3, [pc, #268]	; (d90ac <__ieee754_pow+0x944>)
   d8f9e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8fa2:	4598      	cmp	r8, r3
   d8fa4:	f340 8115 	ble.w	d91d2 <__ieee754_pow+0xa6a>
   d8fa8:	4b41      	ldr	r3, [pc, #260]	; (d90b0 <__ieee754_pow+0x948>)
   d8faa:	440b      	add	r3, r1
   d8fac:	4303      	orrs	r3, r0
   d8fae:	d10c      	bne.n	d8fca <__ieee754_pow+0x862>
   d8fb0:	4632      	mov	r2, r6
   d8fb2:	463b      	mov	r3, r7
   d8fb4:	f000 fb78 	bl	d96a8 <__aeabi_dsub>
   d8fb8:	4602      	mov	r2, r0
   d8fba:	460b      	mov	r3, r1
   d8fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8fc0:	f000 ffa2 	bl	d9f08 <__aeabi_dcmple>
   d8fc4:	2800      	cmp	r0, #0
   d8fc6:	f43f aee6 	beq.w	d8d96 <__ieee754_pow+0x62e>
   d8fca:	a32f      	add	r3, pc, #188	; (adr r3, d9088 <__ieee754_pow+0x920>)
   d8fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8fd4:	f000 fd1c 	bl	d9a10 <__aeabi_dmul>
   d8fd8:	a32b      	add	r3, pc, #172	; (adr r3, d9088 <__ieee754_pow+0x920>)
   d8fda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fde:	f000 fd17 	bl	d9a10 <__aeabi_dmul>
   d8fe2:	ec41 0b10 	vmov	d0, r0, r1
   d8fe6:	e408      	b.n	d87fa <__ieee754_pow+0x92>
   d8fe8:	ed9f 7b29 	vldr	d7, [pc, #164]	; d9090 <__ieee754_pow+0x928>
   d8fec:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8ff0:	e676      	b.n	d8ce0 <__ieee754_pow+0x578>
   d8ff2:	f1b9 0f00 	cmp.w	r9, #0
   d8ff6:	f6bf ac8e 	bge.w	d8916 <__ieee754_pow+0x1ae>
   d8ffa:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8ffe:	ee00 3a10 	vmov	s0, r3
   d9002:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d9006:	ee00 3a90 	vmov	s1, r3
   d900a:	f7ff bbf6 	b.w	d87fa <__ieee754_pow+0x92>
   d900e:	4602      	mov	r2, r0
   d9010:	460b      	mov	r3, r1
   d9012:	2000      	movs	r0, #0
   d9014:	4924      	ldr	r1, [pc, #144]	; (d90a8 <__ieee754_pow+0x940>)
   d9016:	f000 fe25 	bl	d9c64 <__aeabi_ddiv>
   d901a:	e42d      	b.n	d8878 <__ieee754_pow+0x110>
   d901c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d9098 <__ieee754_pow+0x930>
   d9020:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9024:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9028:	ed9f 7b03 	vldr	d7, [pc, #12]	; d9038 <__ieee754_pow+0x8d0>
   d902c:	f04f 0800 	mov.w	r8, #0
   d9030:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9034:	e4be      	b.n	d89b4 <__ieee754_pow+0x24c>
   d9036:	bf00      	nop
   d9038:	00000000 	.word	0x00000000
   d903c:	3ff00000 	.word	0x3ff00000
   d9040:	652b82fe 	.word	0x652b82fe
   d9044:	3c971547 	.word	0x3c971547
   d9048:	00000000 	.word	0x00000000
   d904c:	3fe62e43 	.word	0x3fe62e43
   d9050:	fefa39ef 	.word	0xfefa39ef
   d9054:	3fe62e42 	.word	0x3fe62e42
   d9058:	0ca86c39 	.word	0x0ca86c39
   d905c:	be205c61 	.word	0xbe205c61
   d9060:	72bea4d0 	.word	0x72bea4d0
   d9064:	3e663769 	.word	0x3e663769
   d9068:	c5d26bf1 	.word	0xc5d26bf1
   d906c:	3ebbbd41 	.word	0x3ebbbd41
   d9070:	af25de2c 	.word	0xaf25de2c
   d9074:	3f11566a 	.word	0x3f11566a
   d9078:	16bebd93 	.word	0x16bebd93
   d907c:	3f66c16c 	.word	0x3f66c16c
   d9080:	5555553e 	.word	0x5555553e
   d9084:	3fc55555 	.word	0x3fc55555
   d9088:	c2f8f359 	.word	0xc2f8f359
   d908c:	01a56e1f 	.word	0x01a56e1f
   d9090:	00000000 	.word	0x00000000
   d9094:	bff00000 	.word	0xbff00000
	...
   d90a0:	408fffff 	.word	0x408fffff
   d90a4:	000fffff 	.word	0x000fffff
   d90a8:	3ff00000 	.word	0x3ff00000
   d90ac:	4090cbff 	.word	0x4090cbff
   d90b0:	3f6f3400 	.word	0x3f6f3400
   d90b4:	4b6c      	ldr	r3, [pc, #432]	; (d9268 <__ieee754_pow+0xb00>)
   d90b6:	429c      	cmp	r4, r3
   d90b8:	f77f ac2a 	ble.w	d8910 <__ieee754_pow+0x1a8>
   d90bc:	4b6b      	ldr	r3, [pc, #428]	; (d926c <__ieee754_pow+0xb04>)
   d90be:	429c      	cmp	r4, r3
   d90c0:	f73f abc3 	bgt.w	d884a <__ieee754_pow+0xe2>
   d90c4:	2200      	movs	r2, #0
   d90c6:	4b69      	ldr	r3, [pc, #420]	; (d926c <__ieee754_pow+0xb04>)
   d90c8:	f000 faee 	bl	d96a8 <__aeabi_dsub>
   d90cc:	a356      	add	r3, pc, #344	; (adr r3, d9228 <__ieee754_pow+0xac0>)
   d90ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90d2:	4604      	mov	r4, r0
   d90d4:	460d      	mov	r5, r1
   d90d6:	f000 fc9b 	bl	d9a10 <__aeabi_dmul>
   d90da:	a355      	add	r3, pc, #340	; (adr r3, d9230 <__ieee754_pow+0xac8>)
   d90dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90e0:	4680      	mov	r8, r0
   d90e2:	4689      	mov	r9, r1
   d90e4:	4620      	mov	r0, r4
   d90e6:	4629      	mov	r1, r5
   d90e8:	f000 fc92 	bl	d9a10 <__aeabi_dmul>
   d90ec:	2200      	movs	r2, #0
   d90ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d90f2:	4b5f      	ldr	r3, [pc, #380]	; (d9270 <__ieee754_pow+0xb08>)
   d90f4:	4620      	mov	r0, r4
   d90f6:	4629      	mov	r1, r5
   d90f8:	f000 fc8a 	bl	d9a10 <__aeabi_dmul>
   d90fc:	4602      	mov	r2, r0
   d90fe:	460b      	mov	r3, r1
   d9100:	a14d      	add	r1, pc, #308	; (adr r1, d9238 <__ieee754_pow+0xad0>)
   d9102:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9106:	f000 facf 	bl	d96a8 <__aeabi_dsub>
   d910a:	4622      	mov	r2, r4
   d910c:	462b      	mov	r3, r5
   d910e:	f000 fc7f 	bl	d9a10 <__aeabi_dmul>
   d9112:	4602      	mov	r2, r0
   d9114:	460b      	mov	r3, r1
   d9116:	2000      	movs	r0, #0
   d9118:	4956      	ldr	r1, [pc, #344]	; (d9274 <__ieee754_pow+0xb0c>)
   d911a:	f000 fac5 	bl	d96a8 <__aeabi_dsub>
   d911e:	4622      	mov	r2, r4
   d9120:	462b      	mov	r3, r5
   d9122:	4606      	mov	r6, r0
   d9124:	460f      	mov	r7, r1
   d9126:	4620      	mov	r0, r4
   d9128:	4629      	mov	r1, r5
   d912a:	f000 fc71 	bl	d9a10 <__aeabi_dmul>
   d912e:	4602      	mov	r2, r0
   d9130:	460b      	mov	r3, r1
   d9132:	4630      	mov	r0, r6
   d9134:	4639      	mov	r1, r7
   d9136:	f000 fc6b 	bl	d9a10 <__aeabi_dmul>
   d913a:	a341      	add	r3, pc, #260	; (adr r3, d9240 <__ieee754_pow+0xad8>)
   d913c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9140:	f000 fc66 	bl	d9a10 <__aeabi_dmul>
   d9144:	4602      	mov	r2, r0
   d9146:	460b      	mov	r3, r1
   d9148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d914c:	f000 faac 	bl	d96a8 <__aeabi_dsub>
   d9150:	4602      	mov	r2, r0
   d9152:	460b      	mov	r3, r1
   d9154:	4604      	mov	r4, r0
   d9156:	460d      	mov	r5, r1
   d9158:	4640      	mov	r0, r8
   d915a:	4649      	mov	r1, r9
   d915c:	f000 faa6 	bl	d96ac <__adddf3>
   d9160:	4642      	mov	r2, r8
   d9162:	464b      	mov	r3, r9
   d9164:	2000      	movs	r0, #0
   d9166:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d916a:	f000 fa9d 	bl	d96a8 <__aeabi_dsub>
   d916e:	4602      	mov	r2, r0
   d9170:	460b      	mov	r3, r1
   d9172:	4620      	mov	r0, r4
   d9174:	4629      	mov	r1, r5
   d9176:	f000 fa97 	bl	d96a8 <__aeabi_dsub>
   d917a:	4680      	mov	r8, r0
   d917c:	4689      	mov	r9, r1
   d917e:	e5a5      	b.n	d8ccc <__ieee754_pow+0x564>
   d9180:	4632      	mov	r2, r6
   d9182:	463b      	mov	r3, r7
   d9184:	2000      	movs	r0, #0
   d9186:	4939      	ldr	r1, [pc, #228]	; (d926c <__ieee754_pow+0xb04>)
   d9188:	f000 fd6c 	bl	d9c64 <__aeabi_ddiv>
   d918c:	ec41 0b10 	vmov	d0, r0, r1
   d9190:	f7ff bb33 	b.w	d87fa <__ieee754_pow+0x92>
   d9194:	a32c      	add	r3, pc, #176	; (adr r3, d9248 <__ieee754_pow+0xae0>)
   d9196:	e9d3 2300 	ldrd	r2, r3, [r3]
   d919a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d919e:	f000 fc37 	bl	d9a10 <__aeabi_dmul>
   d91a2:	a329      	add	r3, pc, #164	; (adr r3, d9248 <__ieee754_pow+0xae0>)
   d91a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91a8:	f000 fc32 	bl	d9a10 <__aeabi_dmul>
   d91ac:	ec41 0b10 	vmov	d0, r0, r1
   d91b0:	f7ff bb23 	b.w	d87fa <__ieee754_pow+0x92>
   d91b4:	f1be 0f00 	cmp.w	lr, #0
   d91b8:	f47f ab2a 	bne.w	d8810 <__ieee754_pow+0xa8>
   d91bc:	f1c3 0314 	rsb	r3, r3, #20
   d91c0:	fa48 f203 	asr.w	r2, r8, r3
   d91c4:	fa02 f303 	lsl.w	r3, r2, r3
   d91c8:	4598      	cmp	r8, r3
   d91ca:	d027      	beq.n	d921c <__ieee754_pow+0xab4>
   d91cc:	46f3      	mov	fp, lr
   d91ce:	f7ff baf7 	b.w	d87c0 <__ieee754_pow+0x58>
   d91d2:	4b28      	ldr	r3, [pc, #160]	; (d9274 <__ieee754_pow+0xb0c>)
   d91d4:	4598      	cmp	r8, r3
   d91d6:	f73f adde 	bgt.w	d8d96 <__ieee754_pow+0x62e>
   d91da:	e9dd 3400 	ldrd	r3, r4, [sp]
   d91de:	469a      	mov	sl, r3
   d91e0:	469b      	mov	fp, r3
   d91e2:	e607      	b.n	d8df4 <__ieee754_pow+0x68c>
   d91e4:	4602      	mov	r2, r0
   d91e6:	460b      	mov	r3, r1
   d91e8:	f7ff bb89 	b.w	d88fe <__ieee754_pow+0x196>
   d91ec:	ed9f 7b18 	vldr	d7, [pc, #96]	; d9250 <__ieee754_pow+0xae8>
   d91f0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d91f4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d9258 <__ieee754_pow+0xaf0>
   d91f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d91fc:	ed9f 7b18 	vldr	d7, [pc, #96]	; d9260 <__ieee754_pow+0xaf8>
   d9200:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d9204:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9208:	f7ff bbd4 	b.w	d89b4 <__ieee754_pow+0x24c>
   d920c:	4658      	mov	r0, fp
   d920e:	ec43 2b10 	vmov	d0, r2, r3
   d9212:	f000 f9b1 	bl	d9578 <scalbn>
   d9216:	ec51 0b10 	vmov	r0, r1, d0
   d921a:	e69d      	b.n	d8f58 <__ieee754_pow+0x7f0>
   d921c:	f002 0201 	and.w	r2, r2, #1
   d9220:	f1c2 0b02 	rsb	fp, r2, #2
   d9224:	f7ff bacc 	b.w	d87c0 <__ieee754_pow+0x58>
   d9228:	60000000 	.word	0x60000000
   d922c:	3ff71547 	.word	0x3ff71547
   d9230:	f85ddf44 	.word	0xf85ddf44
   d9234:	3e54ae0b 	.word	0x3e54ae0b
   d9238:	55555555 	.word	0x55555555
   d923c:	3fd55555 	.word	0x3fd55555
   d9240:	652b82fe 	.word	0x652b82fe
   d9244:	3ff71547 	.word	0x3ff71547
   d9248:	8800759c 	.word	0x8800759c
   d924c:	7e37e43c 	.word	0x7e37e43c
   d9250:	40000000 	.word	0x40000000
   d9254:	3fe2b803 	.word	0x3fe2b803
   d9258:	43cfd006 	.word	0x43cfd006
   d925c:	3e4cfdeb 	.word	0x3e4cfdeb
   d9260:	00000000 	.word	0x00000000
   d9264:	3ff80000 	.word	0x3ff80000
   d9268:	3feffffe 	.word	0x3feffffe
   d926c:	3ff00000 	.word	0x3ff00000
   d9270:	3fd00000 	.word	0x3fd00000
   d9274:	3fe00000 	.word	0x3fe00000

000d9278 <__ieee754_sqrt>:
   d9278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d927c:	4965      	ldr	r1, [pc, #404]	; (d9414 <__ieee754_sqrt+0x19c>)
   d927e:	ec55 4b10 	vmov	r4, r5, d0
   d9282:	460e      	mov	r6, r1
   d9284:	4029      	ands	r1, r5
   d9286:	42b1      	cmp	r1, r6
   d9288:	f000 8097 	beq.w	d93ba <__ieee754_sqrt+0x142>
   d928c:	2d00      	cmp	r5, #0
   d928e:	462b      	mov	r3, r5
   d9290:	ee10 2a10 	vmov	r2, s0
   d9294:	dd74      	ble.n	d9380 <__ieee754_sqrt+0x108>
   d9296:	152f      	asrs	r7, r5, #20
   d9298:	d07f      	beq.n	d939a <__ieee754_sqrt+0x122>
   d929a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d929e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d92a2:	07f9      	lsls	r1, r7, #31
   d92a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d92a8:	d465      	bmi.n	d9376 <__ieee754_sqrt+0xfe>
   d92aa:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d92ae:	2600      	movs	r6, #0
   d92b0:	440b      	add	r3, r1
   d92b2:	107f      	asrs	r7, r7, #1
   d92b4:	0052      	lsls	r2, r2, #1
   d92b6:	46b6      	mov	lr, r6
   d92b8:	2016      	movs	r0, #22
   d92ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d92be:	eb0e 0401 	add.w	r4, lr, r1
   d92c2:	429c      	cmp	r4, r3
   d92c4:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d92c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d92cc:	dc03      	bgt.n	d92d6 <__ieee754_sqrt+0x5e>
   d92ce:	1b1b      	subs	r3, r3, r4
   d92d0:	eb04 0e01 	add.w	lr, r4, r1
   d92d4:	440e      	add	r6, r1
   d92d6:	3801      	subs	r0, #1
   d92d8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d92dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d92e0:	d1ed      	bne.n	d92be <__ieee754_sqrt+0x46>
   d92e2:	4684      	mov	ip, r0
   d92e4:	2420      	movs	r4, #32
   d92e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d92ea:	e009      	b.n	d9300 <__ieee754_sqrt+0x88>
   d92ec:	d020      	beq.n	d9330 <__ieee754_sqrt+0xb8>
   d92ee:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d92f2:	3c01      	subs	r4, #1
   d92f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d92f8:	442b      	add	r3, r5
   d92fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d92fe:	d020      	beq.n	d9342 <__ieee754_sqrt+0xca>
   d9300:	459e      	cmp	lr, r3
   d9302:	eb01 050c 	add.w	r5, r1, ip
   d9306:	daf1      	bge.n	d92ec <__ieee754_sqrt+0x74>
   d9308:	2d00      	cmp	r5, #0
   d930a:	eb05 0c01 	add.w	ip, r5, r1
   d930e:	db09      	blt.n	d9324 <__ieee754_sqrt+0xac>
   d9310:	46f0      	mov	r8, lr
   d9312:	4295      	cmp	r5, r2
   d9314:	ebce 0303 	rsb	r3, lr, r3
   d9318:	d900      	bls.n	d931c <__ieee754_sqrt+0xa4>
   d931a:	3b01      	subs	r3, #1
   d931c:	1b52      	subs	r2, r2, r5
   d931e:	4408      	add	r0, r1
   d9320:	46c6      	mov	lr, r8
   d9322:	e7e4      	b.n	d92ee <__ieee754_sqrt+0x76>
   d9324:	f1bc 0f00 	cmp.w	ip, #0
   d9328:	dbf2      	blt.n	d9310 <__ieee754_sqrt+0x98>
   d932a:	f10e 0801 	add.w	r8, lr, #1
   d932e:	e7f0      	b.n	d9312 <__ieee754_sqrt+0x9a>
   d9330:	4295      	cmp	r5, r2
   d9332:	d81e      	bhi.n	d9372 <__ieee754_sqrt+0xfa>
   d9334:	2d00      	cmp	r5, #0
   d9336:	eb05 0c01 	add.w	ip, r5, r1
   d933a:	db50      	blt.n	d93de <__ieee754_sqrt+0x166>
   d933c:	4698      	mov	r8, r3
   d933e:	2300      	movs	r3, #0
   d9340:	e7ec      	b.n	d931c <__ieee754_sqrt+0xa4>
   d9342:	4313      	orrs	r3, r2
   d9344:	d004      	beq.n	d9350 <__ieee754_sqrt+0xd8>
   d9346:	1c42      	adds	r2, r0, #1
   d9348:	d04d      	beq.n	d93e6 <__ieee754_sqrt+0x16e>
   d934a:	f000 0301 	and.w	r3, r0, #1
   d934e:	4418      	add	r0, r3
   d9350:	0840      	lsrs	r0, r0, #1
   d9352:	1071      	asrs	r1, r6, #1
   d9354:	07f3      	lsls	r3, r6, #31
   d9356:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d935a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d935e:	bf48      	it	mi
   d9360:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d9364:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d9368:	4602      	mov	r2, r0
   d936a:	ec43 2b10 	vmov	d0, r2, r3
   d936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9372:	4673      	mov	r3, lr
   d9374:	e7bb      	b.n	d92ee <__ieee754_sqrt+0x76>
   d9376:	005b      	lsls	r3, r3, #1
   d9378:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d937c:	0052      	lsls	r2, r2, #1
   d937e:	e794      	b.n	d92aa <__ieee754_sqrt+0x32>
   d9380:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d9384:	4321      	orrs	r1, r4
   d9386:	d028      	beq.n	d93da <__ieee754_sqrt+0x162>
   d9388:	bbad      	cbnz	r5, d93f6 <__ieee754_sqrt+0x17e>
   d938a:	462f      	mov	r7, r5
   d938c:	0ad3      	lsrs	r3, r2, #11
   d938e:	3f15      	subs	r7, #21
   d9390:	0552      	lsls	r2, r2, #21
   d9392:	2b00      	cmp	r3, #0
   d9394:	d0fa      	beq.n	d938c <__ieee754_sqrt+0x114>
   d9396:	02dd      	lsls	r5, r3, #11
   d9398:	d428      	bmi.n	d93ec <__ieee754_sqrt+0x174>
   d939a:	2100      	movs	r1, #0
   d939c:	e000      	b.n	d93a0 <__ieee754_sqrt+0x128>
   d939e:	4601      	mov	r1, r0
   d93a0:	005b      	lsls	r3, r3, #1
   d93a2:	02dc      	lsls	r4, r3, #11
   d93a4:	f101 0001 	add.w	r0, r1, #1
   d93a8:	d5f9      	bpl.n	d939e <__ieee754_sqrt+0x126>
   d93aa:	f1c0 0420 	rsb	r4, r0, #32
   d93ae:	fa22 f404 	lsr.w	r4, r2, r4
   d93b2:	4323      	orrs	r3, r4
   d93b4:	1a7f      	subs	r7, r7, r1
   d93b6:	4082      	lsls	r2, r0
   d93b8:	e76f      	b.n	d929a <__ieee754_sqrt+0x22>
   d93ba:	ee10 2a10 	vmov	r2, s0
   d93be:	462b      	mov	r3, r5
   d93c0:	ee10 0a10 	vmov	r0, s0
   d93c4:	4629      	mov	r1, r5
   d93c6:	f000 fb23 	bl	d9a10 <__aeabi_dmul>
   d93ca:	4622      	mov	r2, r4
   d93cc:	462b      	mov	r3, r5
   d93ce:	f000 f96d 	bl	d96ac <__adddf3>
   d93d2:	ec41 0b10 	vmov	d0, r0, r1
   d93d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d93da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d93de:	f1bc 0f00 	cmp.w	ip, #0
   d93e2:	daa2      	bge.n	d932a <__ieee754_sqrt+0xb2>
   d93e4:	e7aa      	b.n	d933c <__ieee754_sqrt+0xc4>
   d93e6:	3601      	adds	r6, #1
   d93e8:	4620      	mov	r0, r4
   d93ea:	e7b2      	b.n	d9352 <__ieee754_sqrt+0xda>
   d93ec:	2420      	movs	r4, #32
   d93ee:	f04f 31ff 	mov.w	r1, #4294967295
   d93f2:	2000      	movs	r0, #0
   d93f4:	e7db      	b.n	d93ae <__ieee754_sqrt+0x136>
   d93f6:	ee10 2a10 	vmov	r2, s0
   d93fa:	462b      	mov	r3, r5
   d93fc:	4620      	mov	r0, r4
   d93fe:	4629      	mov	r1, r5
   d9400:	f000 f952 	bl	d96a8 <__aeabi_dsub>
   d9404:	4602      	mov	r2, r0
   d9406:	460b      	mov	r3, r1
   d9408:	f000 fc2c 	bl	d9c64 <__aeabi_ddiv>
   d940c:	ec41 0b10 	vmov	d0, r0, r1
   d9410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9414:	7ff00000 	.word	0x7ff00000

000d9418 <fabs>:
   d9418:	ec53 2b10 	vmov	r2, r3, d0
   d941c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9420:	ec43 2b10 	vmov	d0, r2, r3
   d9424:	4770      	bx	lr
   d9426:	bf00      	nop

000d9428 <finite>:
   d9428:	ee10 3a90 	vmov	r3, s1
   d942c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d9430:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d9434:	0fc0      	lsrs	r0, r0, #31
   d9436:	4770      	bx	lr

000d9438 <matherr>:
   d9438:	2000      	movs	r0, #0
   d943a:	4770      	bx	lr
   d943c:	0000      	movs	r0, r0
	...

000d9440 <nan>:
   d9440:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9448 <nan+0x8>
   d9444:	4770      	bx	lr
   d9446:	bf00      	nop
   d9448:	00000000 	.word	0x00000000
   d944c:	7ff80000 	.word	0x7ff80000

000d9450 <rint>:
   d9450:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9452:	ec53 2b10 	vmov	r2, r3, d0
   d9456:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d945a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d945e:	2813      	cmp	r0, #19
   d9460:	b083      	sub	sp, #12
   d9462:	4619      	mov	r1, r3
   d9464:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d9468:	ee10 5a10 	vmov	r5, s0
   d946c:	dc2f      	bgt.n	d94ce <rint+0x7e>
   d946e:	2800      	cmp	r0, #0
   d9470:	db49      	blt.n	d9506 <rint+0xb6>
   d9472:	4e3f      	ldr	r6, [pc, #252]	; (d9570 <rint+0x120>)
   d9474:	4106      	asrs	r6, r0
   d9476:	ea03 0706 	and.w	r7, r3, r6
   d947a:	4317      	orrs	r7, r2
   d947c:	d02c      	beq.n	d94d8 <rint+0x88>
   d947e:	0876      	lsrs	r6, r6, #1
   d9480:	4033      	ands	r3, r6
   d9482:	431d      	orrs	r5, r3
   d9484:	d00c      	beq.n	d94a0 <rint+0x50>
   d9486:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d948a:	2813      	cmp	r0, #19
   d948c:	ea21 0606 	bic.w	r6, r1, r6
   d9490:	fa43 f100 	asr.w	r1, r3, r0
   d9494:	ea41 0106 	orr.w	r1, r1, r6
   d9498:	bf0c      	ite	eq
   d949a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d949e:	2500      	movne	r5, #0
   d94a0:	4834      	ldr	r0, [pc, #208]	; (d9574 <rint+0x124>)
   d94a2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d94a6:	462a      	mov	r2, r5
   d94a8:	e9d4 4500 	ldrd	r4, r5, [r4]
   d94ac:	4610      	mov	r0, r2
   d94ae:	462b      	mov	r3, r5
   d94b0:	4622      	mov	r2, r4
   d94b2:	f000 f8fb 	bl	d96ac <__adddf3>
   d94b6:	e9cd 0100 	strd	r0, r1, [sp]
   d94ba:	4622      	mov	r2, r4
   d94bc:	462b      	mov	r3, r5
   d94be:	e9dd 0100 	ldrd	r0, r1, [sp]
   d94c2:	f000 f8f1 	bl	d96a8 <__aeabi_dsub>
   d94c6:	ec41 0b10 	vmov	d0, r0, r1
   d94ca:	b003      	add	sp, #12
   d94cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d94ce:	2833      	cmp	r0, #51	; 0x33
   d94d0:	dd06      	ble.n	d94e0 <rint+0x90>
   d94d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d94d6:	d042      	beq.n	d955e <rint+0x10e>
   d94d8:	ec43 2b10 	vmov	d0, r2, r3
   d94dc:	b003      	add	sp, #12
   d94de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d94e0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d94e4:	f04f 30ff 	mov.w	r0, #4294967295
   d94e8:	40f0      	lsrs	r0, r6
   d94ea:	4202      	tst	r2, r0
   d94ec:	d0f4      	beq.n	d94d8 <rint+0x88>
   d94ee:	0840      	lsrs	r0, r0, #1
   d94f0:	4202      	tst	r2, r0
   d94f2:	d0d5      	beq.n	d94a0 <rint+0x50>
   d94f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d94f8:	ea25 0000 	bic.w	r0, r5, r0
   d94fc:	fa43 f606 	asr.w	r6, r3, r6
   d9500:	ea46 0500 	orr.w	r5, r6, r0
   d9504:	e7cc      	b.n	d94a0 <rint+0x50>
   d9506:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d950a:	4310      	orrs	r0, r2
   d950c:	ee10 7a10 	vmov	r7, s0
   d9510:	d0e2      	beq.n	d94d8 <rint+0x88>
   d9512:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d9516:	4307      	orrs	r7, r0
   d9518:	4278      	negs	r0, r7
   d951a:	4307      	orrs	r7, r0
   d951c:	4815      	ldr	r0, [pc, #84]	; (d9574 <rint+0x124>)
   d951e:	0c59      	lsrs	r1, r3, #17
   d9520:	0b3f      	lsrs	r7, r7, #12
   d9522:	0449      	lsls	r1, r1, #17
   d9524:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d9528:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d952c:	ea47 0301 	orr.w	r3, r7, r1
   d9530:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9534:	4619      	mov	r1, r3
   d9536:	4610      	mov	r0, r2
   d9538:	463b      	mov	r3, r7
   d953a:	4632      	mov	r2, r6
   d953c:	f000 f8b6 	bl	d96ac <__adddf3>
   d9540:	e9cd 0100 	strd	r0, r1, [sp]
   d9544:	463b      	mov	r3, r7
   d9546:	4632      	mov	r2, r6
   d9548:	e9dd 0100 	ldrd	r0, r1, [sp]
   d954c:	f000 f8ac 	bl	d96a8 <__aeabi_dsub>
   d9550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9554:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d9558:	ec41 0b10 	vmov	d0, r0, r1
   d955c:	e7be      	b.n	d94dc <rint+0x8c>
   d955e:	ee10 0a10 	vmov	r0, s0
   d9562:	4619      	mov	r1, r3
   d9564:	f000 f8a2 	bl	d96ac <__adddf3>
   d9568:	ec41 0b10 	vmov	d0, r0, r1
   d956c:	e7b6      	b.n	d94dc <rint+0x8c>
   d956e:	bf00      	nop
   d9570:	000fffff 	.word	0x000fffff
   d9574:	000db0e8 	.word	0x000db0e8

000d9578 <scalbn>:
   d9578:	ec53 2b10 	vmov	r2, r3, d0
   d957c:	b570      	push	{r4, r5, r6, lr}
   d957e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d9582:	4619      	mov	r1, r3
   d9584:	4605      	mov	r5, r0
   d9586:	bb14      	cbnz	r4, d95ce <scalbn+0x56>
   d9588:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d958c:	4311      	orrs	r1, r2
   d958e:	d02a      	beq.n	d95e6 <scalbn+0x6e>
   d9590:	4619      	mov	r1, r3
   d9592:	2200      	movs	r2, #0
   d9594:	4b38      	ldr	r3, [pc, #224]	; (d9678 <scalbn+0x100>)
   d9596:	4e39      	ldr	r6, [pc, #228]	; (d967c <scalbn+0x104>)
   d9598:	ee10 0a10 	vmov	r0, s0
   d959c:	f000 fa38 	bl	d9a10 <__aeabi_dmul>
   d95a0:	42b5      	cmp	r5, r6
   d95a2:	4602      	mov	r2, r0
   d95a4:	460b      	mov	r3, r1
   d95a6:	db1f      	blt.n	d95e8 <scalbn+0x70>
   d95a8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d95ac:	3c36      	subs	r4, #54	; 0x36
   d95ae:	442c      	add	r4, r5
   d95b0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d95b4:	4284      	cmp	r4, r0
   d95b6:	dc1f      	bgt.n	d95f8 <scalbn+0x80>
   d95b8:	2c00      	cmp	r4, #0
   d95ba:	dd2d      	ble.n	d9618 <scalbn+0xa0>
   d95bc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d95c0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d95c4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d95c8:	ec43 2b10 	vmov	d0, r2, r3
   d95cc:	bd70      	pop	{r4, r5, r6, pc}
   d95ce:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d95d2:	4284      	cmp	r4, r0
   d95d4:	d1eb      	bne.n	d95ae <scalbn+0x36>
   d95d6:	ee10 0a10 	vmov	r0, s0
   d95da:	4619      	mov	r1, r3
   d95dc:	f000 f866 	bl	d96ac <__adddf3>
   d95e0:	ec41 0b10 	vmov	d0, r0, r1
   d95e4:	bd70      	pop	{r4, r5, r6, pc}
   d95e6:	bd70      	pop	{r4, r5, r6, pc}
   d95e8:	a31f      	add	r3, pc, #124	; (adr r3, d9668 <scalbn+0xf0>)
   d95ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95ee:	f000 fa0f 	bl	d9a10 <__aeabi_dmul>
   d95f2:	ec41 0b10 	vmov	d0, r0, r1
   d95f6:	bd70      	pop	{r4, r5, r6, pc}
   d95f8:	ec43 2b11 	vmov	d1, r2, r3
   d95fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d9670 <scalbn+0xf8>
   d9600:	f000 f840 	bl	d9684 <copysign>
   d9604:	a31a      	add	r3, pc, #104	; (adr r3, d9670 <scalbn+0xf8>)
   d9606:	e9d3 2300 	ldrd	r2, r3, [r3]
   d960a:	ec51 0b10 	vmov	r0, r1, d0
   d960e:	f000 f9ff 	bl	d9a10 <__aeabi_dmul>
   d9612:	ec41 0b10 	vmov	d0, r0, r1
   d9616:	bd70      	pop	{r4, r5, r6, pc}
   d9618:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d961c:	da13      	bge.n	d9646 <scalbn+0xce>
   d961e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d9622:	428d      	cmp	r5, r1
   d9624:	ec43 2b11 	vmov	d1, r2, r3
   d9628:	dce8      	bgt.n	d95fc <scalbn+0x84>
   d962a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d9668 <scalbn+0xf0>
   d962e:	f000 f829 	bl	d9684 <copysign>
   d9632:	a30d      	add	r3, pc, #52	; (adr r3, d9668 <scalbn+0xf0>)
   d9634:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9638:	ec51 0b10 	vmov	r0, r1, d0
   d963c:	f000 f9e8 	bl	d9a10 <__aeabi_dmul>
   d9640:	ec41 0b10 	vmov	d0, r0, r1
   d9644:	bd70      	pop	{r4, r5, r6, pc}
   d9646:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d964a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d964e:	3436      	adds	r4, #54	; 0x36
   d9650:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9654:	4610      	mov	r0, r2
   d9656:	4619      	mov	r1, r3
   d9658:	2200      	movs	r2, #0
   d965a:	4b09      	ldr	r3, [pc, #36]	; (d9680 <scalbn+0x108>)
   d965c:	f000 f9d8 	bl	d9a10 <__aeabi_dmul>
   d9660:	ec41 0b10 	vmov	d0, r0, r1
   d9664:	bd70      	pop	{r4, r5, r6, pc}
   d9666:	bf00      	nop
   d9668:	c2f8f359 	.word	0xc2f8f359
   d966c:	01a56e1f 	.word	0x01a56e1f
   d9670:	8800759c 	.word	0x8800759c
   d9674:	7e37e43c 	.word	0x7e37e43c
   d9678:	43500000 	.word	0x43500000
   d967c:	ffff3cb0 	.word	0xffff3cb0
   d9680:	3c900000 	.word	0x3c900000

000d9684 <copysign>:
   d9684:	ec53 2b10 	vmov	r2, r3, d0
   d9688:	ee11 0a90 	vmov	r0, s3
   d968c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9690:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d9694:	ea41 0300 	orr.w	r3, r1, r0
   d9698:	ec43 2b10 	vmov	d0, r2, r3
   d969c:	4770      	bx	lr
   d969e:	bf00      	nop

000d96a0 <__aeabi_drsub>:
   d96a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d96a4:	e002      	b.n	d96ac <__adddf3>
   d96a6:	bf00      	nop

000d96a8 <__aeabi_dsub>:
   d96a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d96ac <__adddf3>:
   d96ac:	b530      	push	{r4, r5, lr}
   d96ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d96b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d96b6:	ea94 0f05 	teq	r4, r5
   d96ba:	bf08      	it	eq
   d96bc:	ea90 0f02 	teqeq	r0, r2
   d96c0:	bf1f      	itttt	ne
   d96c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d96c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d96ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d96ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d96d2:	f000 80e2 	beq.w	d989a <__adddf3+0x1ee>
   d96d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d96da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d96de:	bfb8      	it	lt
   d96e0:	426d      	neglt	r5, r5
   d96e2:	dd0c      	ble.n	d96fe <__adddf3+0x52>
   d96e4:	442c      	add	r4, r5
   d96e6:	ea80 0202 	eor.w	r2, r0, r2
   d96ea:	ea81 0303 	eor.w	r3, r1, r3
   d96ee:	ea82 0000 	eor.w	r0, r2, r0
   d96f2:	ea83 0101 	eor.w	r1, r3, r1
   d96f6:	ea80 0202 	eor.w	r2, r0, r2
   d96fa:	ea81 0303 	eor.w	r3, r1, r3
   d96fe:	2d36      	cmp	r5, #54	; 0x36
   d9700:	bf88      	it	hi
   d9702:	bd30      	pophi	{r4, r5, pc}
   d9704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9708:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d970c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9714:	d002      	beq.n	d971c <__adddf3+0x70>
   d9716:	4240      	negs	r0, r0
   d9718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d971c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9720:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9728:	d002      	beq.n	d9730 <__adddf3+0x84>
   d972a:	4252      	negs	r2, r2
   d972c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9730:	ea94 0f05 	teq	r4, r5
   d9734:	f000 80a7 	beq.w	d9886 <__adddf3+0x1da>
   d9738:	f1a4 0401 	sub.w	r4, r4, #1
   d973c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9740:	db0d      	blt.n	d975e <__adddf3+0xb2>
   d9742:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9746:	fa22 f205 	lsr.w	r2, r2, r5
   d974a:	1880      	adds	r0, r0, r2
   d974c:	f141 0100 	adc.w	r1, r1, #0
   d9750:	fa03 f20e 	lsl.w	r2, r3, lr
   d9754:	1880      	adds	r0, r0, r2
   d9756:	fa43 f305 	asr.w	r3, r3, r5
   d975a:	4159      	adcs	r1, r3
   d975c:	e00e      	b.n	d977c <__adddf3+0xd0>
   d975e:	f1a5 0520 	sub.w	r5, r5, #32
   d9762:	f10e 0e20 	add.w	lr, lr, #32
   d9766:	2a01      	cmp	r2, #1
   d9768:	fa03 fc0e 	lsl.w	ip, r3, lr
   d976c:	bf28      	it	cs
   d976e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9772:	fa43 f305 	asr.w	r3, r3, r5
   d9776:	18c0      	adds	r0, r0, r3
   d9778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d977c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9780:	d507      	bpl.n	d9792 <__adddf3+0xe6>
   d9782:	f04f 0e00 	mov.w	lr, #0
   d9786:	f1dc 0c00 	rsbs	ip, ip, #0
   d978a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d978e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9796:	d31b      	bcc.n	d97d0 <__adddf3+0x124>
   d9798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d979c:	d30c      	bcc.n	d97b8 <__adddf3+0x10c>
   d979e:	0849      	lsrs	r1, r1, #1
   d97a0:	ea5f 0030 	movs.w	r0, r0, rrx
   d97a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d97a8:	f104 0401 	add.w	r4, r4, #1
   d97ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d97b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d97b4:	f080 809a 	bcs.w	d98ec <__adddf3+0x240>
   d97b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d97bc:	bf08      	it	eq
   d97be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d97c2:	f150 0000 	adcs.w	r0, r0, #0
   d97c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d97ca:	ea41 0105 	orr.w	r1, r1, r5
   d97ce:	bd30      	pop	{r4, r5, pc}
   d97d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d97d4:	4140      	adcs	r0, r0
   d97d6:	eb41 0101 	adc.w	r1, r1, r1
   d97da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d97de:	f1a4 0401 	sub.w	r4, r4, #1
   d97e2:	d1e9      	bne.n	d97b8 <__adddf3+0x10c>
   d97e4:	f091 0f00 	teq	r1, #0
   d97e8:	bf04      	itt	eq
   d97ea:	4601      	moveq	r1, r0
   d97ec:	2000      	moveq	r0, #0
   d97ee:	fab1 f381 	clz	r3, r1
   d97f2:	bf08      	it	eq
   d97f4:	3320      	addeq	r3, #32
   d97f6:	f1a3 030b 	sub.w	r3, r3, #11
   d97fa:	f1b3 0220 	subs.w	r2, r3, #32
   d97fe:	da0c      	bge.n	d981a <__adddf3+0x16e>
   d9800:	320c      	adds	r2, #12
   d9802:	dd08      	ble.n	d9816 <__adddf3+0x16a>
   d9804:	f102 0c14 	add.w	ip, r2, #20
   d9808:	f1c2 020c 	rsb	r2, r2, #12
   d980c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9810:	fa21 f102 	lsr.w	r1, r1, r2
   d9814:	e00c      	b.n	d9830 <__adddf3+0x184>
   d9816:	f102 0214 	add.w	r2, r2, #20
   d981a:	bfd8      	it	le
   d981c:	f1c2 0c20 	rsble	ip, r2, #32
   d9820:	fa01 f102 	lsl.w	r1, r1, r2
   d9824:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9828:	bfdc      	itt	le
   d982a:	ea41 010c 	orrle.w	r1, r1, ip
   d982e:	4090      	lslle	r0, r2
   d9830:	1ae4      	subs	r4, r4, r3
   d9832:	bfa2      	ittt	ge
   d9834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9838:	4329      	orrge	r1, r5
   d983a:	bd30      	popge	{r4, r5, pc}
   d983c:	ea6f 0404 	mvn.w	r4, r4
   d9840:	3c1f      	subs	r4, #31
   d9842:	da1c      	bge.n	d987e <__adddf3+0x1d2>
   d9844:	340c      	adds	r4, #12
   d9846:	dc0e      	bgt.n	d9866 <__adddf3+0x1ba>
   d9848:	f104 0414 	add.w	r4, r4, #20
   d984c:	f1c4 0220 	rsb	r2, r4, #32
   d9850:	fa20 f004 	lsr.w	r0, r0, r4
   d9854:	fa01 f302 	lsl.w	r3, r1, r2
   d9858:	ea40 0003 	orr.w	r0, r0, r3
   d985c:	fa21 f304 	lsr.w	r3, r1, r4
   d9860:	ea45 0103 	orr.w	r1, r5, r3
   d9864:	bd30      	pop	{r4, r5, pc}
   d9866:	f1c4 040c 	rsb	r4, r4, #12
   d986a:	f1c4 0220 	rsb	r2, r4, #32
   d986e:	fa20 f002 	lsr.w	r0, r0, r2
   d9872:	fa01 f304 	lsl.w	r3, r1, r4
   d9876:	ea40 0003 	orr.w	r0, r0, r3
   d987a:	4629      	mov	r1, r5
   d987c:	bd30      	pop	{r4, r5, pc}
   d987e:	fa21 f004 	lsr.w	r0, r1, r4
   d9882:	4629      	mov	r1, r5
   d9884:	bd30      	pop	{r4, r5, pc}
   d9886:	f094 0f00 	teq	r4, #0
   d988a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d988e:	bf06      	itte	eq
   d9890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9894:	3401      	addeq	r4, #1
   d9896:	3d01      	subne	r5, #1
   d9898:	e74e      	b.n	d9738 <__adddf3+0x8c>
   d989a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d989e:	bf18      	it	ne
   d98a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d98a4:	d029      	beq.n	d98fa <__adddf3+0x24e>
   d98a6:	ea94 0f05 	teq	r4, r5
   d98aa:	bf08      	it	eq
   d98ac:	ea90 0f02 	teqeq	r0, r2
   d98b0:	d005      	beq.n	d98be <__adddf3+0x212>
   d98b2:	ea54 0c00 	orrs.w	ip, r4, r0
   d98b6:	bf04      	itt	eq
   d98b8:	4619      	moveq	r1, r3
   d98ba:	4610      	moveq	r0, r2
   d98bc:	bd30      	pop	{r4, r5, pc}
   d98be:	ea91 0f03 	teq	r1, r3
   d98c2:	bf1e      	ittt	ne
   d98c4:	2100      	movne	r1, #0
   d98c6:	2000      	movne	r0, #0
   d98c8:	bd30      	popne	{r4, r5, pc}
   d98ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d98ce:	d105      	bne.n	d98dc <__adddf3+0x230>
   d98d0:	0040      	lsls	r0, r0, #1
   d98d2:	4149      	adcs	r1, r1
   d98d4:	bf28      	it	cs
   d98d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d98da:	bd30      	pop	{r4, r5, pc}
   d98dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d98e0:	bf3c      	itt	cc
   d98e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d98e6:	bd30      	popcc	{r4, r5, pc}
   d98e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d98f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d98f4:	f04f 0000 	mov.w	r0, #0
   d98f8:	bd30      	pop	{r4, r5, pc}
   d98fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d98fe:	bf1a      	itte	ne
   d9900:	4619      	movne	r1, r3
   d9902:	4610      	movne	r0, r2
   d9904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9908:	bf1c      	itt	ne
   d990a:	460b      	movne	r3, r1
   d990c:	4602      	movne	r2, r0
   d990e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9912:	bf06      	itte	eq
   d9914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9918:	ea91 0f03 	teqeq	r1, r3
   d991c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9920:	bd30      	pop	{r4, r5, pc}
   d9922:	bf00      	nop

000d9924 <__aeabi_ui2d>:
   d9924:	f090 0f00 	teq	r0, #0
   d9928:	bf04      	itt	eq
   d992a:	2100      	moveq	r1, #0
   d992c:	4770      	bxeq	lr
   d992e:	b530      	push	{r4, r5, lr}
   d9930:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9934:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9938:	f04f 0500 	mov.w	r5, #0
   d993c:	f04f 0100 	mov.w	r1, #0
   d9940:	e750      	b.n	d97e4 <__adddf3+0x138>
   d9942:	bf00      	nop

000d9944 <__aeabi_i2d>:
   d9944:	f090 0f00 	teq	r0, #0
   d9948:	bf04      	itt	eq
   d994a:	2100      	moveq	r1, #0
   d994c:	4770      	bxeq	lr
   d994e:	b530      	push	{r4, r5, lr}
   d9950:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9954:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d995c:	bf48      	it	mi
   d995e:	4240      	negmi	r0, r0
   d9960:	f04f 0100 	mov.w	r1, #0
   d9964:	e73e      	b.n	d97e4 <__adddf3+0x138>
   d9966:	bf00      	nop

000d9968 <__aeabi_f2d>:
   d9968:	0042      	lsls	r2, r0, #1
   d996a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d996e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9972:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9976:	bf1f      	itttt	ne
   d9978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d997c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9984:	4770      	bxne	lr
   d9986:	f092 0f00 	teq	r2, #0
   d998a:	bf14      	ite	ne
   d998c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9990:	4770      	bxeq	lr
   d9992:	b530      	push	{r4, r5, lr}
   d9994:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d999c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d99a0:	e720      	b.n	d97e4 <__adddf3+0x138>
   d99a2:	bf00      	nop

000d99a4 <__aeabi_ul2d>:
   d99a4:	ea50 0201 	orrs.w	r2, r0, r1
   d99a8:	bf08      	it	eq
   d99aa:	4770      	bxeq	lr
   d99ac:	b530      	push	{r4, r5, lr}
   d99ae:	f04f 0500 	mov.w	r5, #0
   d99b2:	e00a      	b.n	d99ca <__aeabi_l2d+0x16>

000d99b4 <__aeabi_l2d>:
   d99b4:	ea50 0201 	orrs.w	r2, r0, r1
   d99b8:	bf08      	it	eq
   d99ba:	4770      	bxeq	lr
   d99bc:	b530      	push	{r4, r5, lr}
   d99be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d99c2:	d502      	bpl.n	d99ca <__aeabi_l2d+0x16>
   d99c4:	4240      	negs	r0, r0
   d99c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d99ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d99ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d99d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d99d6:	f43f aedc 	beq.w	d9792 <__adddf3+0xe6>
   d99da:	f04f 0203 	mov.w	r2, #3
   d99de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99e2:	bf18      	it	ne
   d99e4:	3203      	addne	r2, #3
   d99e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99ea:	bf18      	it	ne
   d99ec:	3203      	addne	r2, #3
   d99ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d99f2:	f1c2 0320 	rsb	r3, r2, #32
   d99f6:	fa00 fc03 	lsl.w	ip, r0, r3
   d99fa:	fa20 f002 	lsr.w	r0, r0, r2
   d99fe:	fa01 fe03 	lsl.w	lr, r1, r3
   d9a02:	ea40 000e 	orr.w	r0, r0, lr
   d9a06:	fa21 f102 	lsr.w	r1, r1, r2
   d9a0a:	4414      	add	r4, r2
   d9a0c:	e6c1      	b.n	d9792 <__adddf3+0xe6>
   d9a0e:	bf00      	nop

000d9a10 <__aeabi_dmul>:
   d9a10:	b570      	push	{r4, r5, r6, lr}
   d9a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9a1e:	bf1d      	ittte	ne
   d9a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9a24:	ea94 0f0c 	teqne	r4, ip
   d9a28:	ea95 0f0c 	teqne	r5, ip
   d9a2c:	f000 f8de 	bleq	d9bec <__aeabi_dmul+0x1dc>
   d9a30:	442c      	add	r4, r5
   d9a32:	ea81 0603 	eor.w	r6, r1, r3
   d9a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9a42:	bf18      	it	ne
   d9a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a50:	d038      	beq.n	d9ac4 <__aeabi_dmul+0xb4>
   d9a52:	fba0 ce02 	umull	ip, lr, r0, r2
   d9a56:	f04f 0500 	mov.w	r5, #0
   d9a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9a62:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9a66:	f04f 0600 	mov.w	r6, #0
   d9a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9a6e:	f09c 0f00 	teq	ip, #0
   d9a72:	bf18      	it	ne
   d9a74:	f04e 0e01 	orrne.w	lr, lr, #1
   d9a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9a84:	d204      	bcs.n	d9a90 <__aeabi_dmul+0x80>
   d9a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9a8a:	416d      	adcs	r5, r5
   d9a8c:	eb46 0606 	adc.w	r6, r6, r6
   d9a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9aa8:	bf88      	it	hi
   d9aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9aae:	d81e      	bhi.n	d9aee <__aeabi_dmul+0xde>
   d9ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9ab4:	bf08      	it	eq
   d9ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9aba:	f150 0000 	adcs.w	r0, r0, #0
   d9abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9ac2:	bd70      	pop	{r4, r5, r6, pc}
   d9ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9ac8:	ea46 0101 	orr.w	r1, r6, r1
   d9acc:	ea40 0002 	orr.w	r0, r0, r2
   d9ad0:	ea81 0103 	eor.w	r1, r1, r3
   d9ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9ad8:	bfc2      	ittt	gt
   d9ada:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9ae2:	bd70      	popgt	{r4, r5, r6, pc}
   d9ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ae8:	f04f 0e00 	mov.w	lr, #0
   d9aec:	3c01      	subs	r4, #1
   d9aee:	f300 80ab 	bgt.w	d9c48 <__aeabi_dmul+0x238>
   d9af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9af6:	bfde      	ittt	le
   d9af8:	2000      	movle	r0, #0
   d9afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9afe:	bd70      	pople	{r4, r5, r6, pc}
   d9b00:	f1c4 0400 	rsb	r4, r4, #0
   d9b04:	3c20      	subs	r4, #32
   d9b06:	da35      	bge.n	d9b74 <__aeabi_dmul+0x164>
   d9b08:	340c      	adds	r4, #12
   d9b0a:	dc1b      	bgt.n	d9b44 <__aeabi_dmul+0x134>
   d9b0c:	f104 0414 	add.w	r4, r4, #20
   d9b10:	f1c4 0520 	rsb	r5, r4, #32
   d9b14:	fa00 f305 	lsl.w	r3, r0, r5
   d9b18:	fa20 f004 	lsr.w	r0, r0, r4
   d9b1c:	fa01 f205 	lsl.w	r2, r1, r5
   d9b20:	ea40 0002 	orr.w	r0, r0, r2
   d9b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b30:	fa21 f604 	lsr.w	r6, r1, r4
   d9b34:	eb42 0106 	adc.w	r1, r2, r6
   d9b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b3c:	bf08      	it	eq
   d9b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b42:	bd70      	pop	{r4, r5, r6, pc}
   d9b44:	f1c4 040c 	rsb	r4, r4, #12
   d9b48:	f1c4 0520 	rsb	r5, r4, #32
   d9b4c:	fa00 f304 	lsl.w	r3, r0, r4
   d9b50:	fa20 f005 	lsr.w	r0, r0, r5
   d9b54:	fa01 f204 	lsl.w	r2, r1, r4
   d9b58:	ea40 0002 	orr.w	r0, r0, r2
   d9b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b64:	f141 0100 	adc.w	r1, r1, #0
   d9b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b6c:	bf08      	it	eq
   d9b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b72:	bd70      	pop	{r4, r5, r6, pc}
   d9b74:	f1c4 0520 	rsb	r5, r4, #32
   d9b78:	fa00 f205 	lsl.w	r2, r0, r5
   d9b7c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9b80:	fa20 f304 	lsr.w	r3, r0, r4
   d9b84:	fa01 f205 	lsl.w	r2, r1, r5
   d9b88:	ea43 0302 	orr.w	r3, r3, r2
   d9b8c:	fa21 f004 	lsr.w	r0, r1, r4
   d9b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b94:	fa21 f204 	lsr.w	r2, r1, r4
   d9b98:	ea20 0002 	bic.w	r0, r0, r2
   d9b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ba4:	bf08      	it	eq
   d9ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9baa:	bd70      	pop	{r4, r5, r6, pc}
   d9bac:	f094 0f00 	teq	r4, #0
   d9bb0:	d10f      	bne.n	d9bd2 <__aeabi_dmul+0x1c2>
   d9bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9bb6:	0040      	lsls	r0, r0, #1
   d9bb8:	eb41 0101 	adc.w	r1, r1, r1
   d9bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9bc0:	bf08      	it	eq
   d9bc2:	3c01      	subeq	r4, #1
   d9bc4:	d0f7      	beq.n	d9bb6 <__aeabi_dmul+0x1a6>
   d9bc6:	ea41 0106 	orr.w	r1, r1, r6
   d9bca:	f095 0f00 	teq	r5, #0
   d9bce:	bf18      	it	ne
   d9bd0:	4770      	bxne	lr
   d9bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9bd6:	0052      	lsls	r2, r2, #1
   d9bd8:	eb43 0303 	adc.w	r3, r3, r3
   d9bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9be0:	bf08      	it	eq
   d9be2:	3d01      	subeq	r5, #1
   d9be4:	d0f7      	beq.n	d9bd6 <__aeabi_dmul+0x1c6>
   d9be6:	ea43 0306 	orr.w	r3, r3, r6
   d9bea:	4770      	bx	lr
   d9bec:	ea94 0f0c 	teq	r4, ip
   d9bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9bf4:	bf18      	it	ne
   d9bf6:	ea95 0f0c 	teqne	r5, ip
   d9bfa:	d00c      	beq.n	d9c16 <__aeabi_dmul+0x206>
   d9bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9c00:	bf18      	it	ne
   d9c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9c06:	d1d1      	bne.n	d9bac <__aeabi_dmul+0x19c>
   d9c08:	ea81 0103 	eor.w	r1, r1, r3
   d9c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c10:	f04f 0000 	mov.w	r0, #0
   d9c14:	bd70      	pop	{r4, r5, r6, pc}
   d9c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9c1a:	bf06      	itte	eq
   d9c1c:	4610      	moveq	r0, r2
   d9c1e:	4619      	moveq	r1, r3
   d9c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9c24:	d019      	beq.n	d9c5a <__aeabi_dmul+0x24a>
   d9c26:	ea94 0f0c 	teq	r4, ip
   d9c2a:	d102      	bne.n	d9c32 <__aeabi_dmul+0x222>
   d9c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9c30:	d113      	bne.n	d9c5a <__aeabi_dmul+0x24a>
   d9c32:	ea95 0f0c 	teq	r5, ip
   d9c36:	d105      	bne.n	d9c44 <__aeabi_dmul+0x234>
   d9c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9c3c:	bf1c      	itt	ne
   d9c3e:	4610      	movne	r0, r2
   d9c40:	4619      	movne	r1, r3
   d9c42:	d10a      	bne.n	d9c5a <__aeabi_dmul+0x24a>
   d9c44:	ea81 0103 	eor.w	r1, r1, r3
   d9c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c54:	f04f 0000 	mov.w	r0, #0
   d9c58:	bd70      	pop	{r4, r5, r6, pc}
   d9c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9c62:	bd70      	pop	{r4, r5, r6, pc}

000d9c64 <__aeabi_ddiv>:
   d9c64:	b570      	push	{r4, r5, r6, lr}
   d9c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9c72:	bf1d      	ittte	ne
   d9c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9c78:	ea94 0f0c 	teqne	r4, ip
   d9c7c:	ea95 0f0c 	teqne	r5, ip
   d9c80:	f000 f8a7 	bleq	d9dd2 <__aeabi_ddiv+0x16e>
   d9c84:	eba4 0405 	sub.w	r4, r4, r5
   d9c88:	ea81 0e03 	eor.w	lr, r1, r3
   d9c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9c94:	f000 8088 	beq.w	d9da8 <__aeabi_ddiv+0x144>
   d9c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9cbc:	429d      	cmp	r5, r3
   d9cbe:	bf08      	it	eq
   d9cc0:	4296      	cmpeq	r6, r2
   d9cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9cca:	d202      	bcs.n	d9cd2 <__aeabi_ddiv+0x6e>
   d9ccc:	085b      	lsrs	r3, r3, #1
   d9cce:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cd2:	1ab6      	subs	r6, r6, r2
   d9cd4:	eb65 0503 	sbc.w	r5, r5, r3
   d9cd8:	085b      	lsrs	r3, r3, #1
   d9cda:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9ce6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9cea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9cee:	bf22      	ittt	cs
   d9cf0:	1ab6      	subcs	r6, r6, r2
   d9cf2:	4675      	movcs	r5, lr
   d9cf4:	ea40 000c 	orrcs.w	r0, r0, ip
   d9cf8:	085b      	lsrs	r3, r3, #1
   d9cfa:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d06:	bf22      	ittt	cs
   d9d08:	1ab6      	subcs	r6, r6, r2
   d9d0a:	4675      	movcs	r5, lr
   d9d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9d10:	085b      	lsrs	r3, r3, #1
   d9d12:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d16:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d1e:	bf22      	ittt	cs
   d9d20:	1ab6      	subcs	r6, r6, r2
   d9d22:	4675      	movcs	r5, lr
   d9d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9d28:	085b      	lsrs	r3, r3, #1
   d9d2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d36:	bf22      	ittt	cs
   d9d38:	1ab6      	subcs	r6, r6, r2
   d9d3a:	4675      	movcs	r5, lr
   d9d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9d40:	ea55 0e06 	orrs.w	lr, r5, r6
   d9d44:	d018      	beq.n	d9d78 <__aeabi_ddiv+0x114>
   d9d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9d62:	d1c0      	bne.n	d9ce6 <__aeabi_ddiv+0x82>
   d9d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d68:	d10b      	bne.n	d9d82 <__aeabi_ddiv+0x11e>
   d9d6a:	ea41 0100 	orr.w	r1, r1, r0
   d9d6e:	f04f 0000 	mov.w	r0, #0
   d9d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9d76:	e7b6      	b.n	d9ce6 <__aeabi_ddiv+0x82>
   d9d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d7c:	bf04      	itt	eq
   d9d7e:	4301      	orreq	r1, r0
   d9d80:	2000      	moveq	r0, #0
   d9d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9d86:	bf88      	it	hi
   d9d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9d8c:	f63f aeaf 	bhi.w	d9aee <__aeabi_dmul+0xde>
   d9d90:	ebb5 0c03 	subs.w	ip, r5, r3
   d9d94:	bf04      	itt	eq
   d9d96:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9d9e:	f150 0000 	adcs.w	r0, r0, #0
   d9da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9da6:	bd70      	pop	{r4, r5, r6, pc}
   d9da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9db4:	bfc2      	ittt	gt
   d9db6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9dbe:	bd70      	popgt	{r4, r5, r6, pc}
   d9dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9dc4:	f04f 0e00 	mov.w	lr, #0
   d9dc8:	3c01      	subs	r4, #1
   d9dca:	e690      	b.n	d9aee <__aeabi_dmul+0xde>
   d9dcc:	ea45 0e06 	orr.w	lr, r5, r6
   d9dd0:	e68d      	b.n	d9aee <__aeabi_dmul+0xde>
   d9dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9dd6:	ea94 0f0c 	teq	r4, ip
   d9dda:	bf08      	it	eq
   d9ddc:	ea95 0f0c 	teqeq	r5, ip
   d9de0:	f43f af3b 	beq.w	d9c5a <__aeabi_dmul+0x24a>
   d9de4:	ea94 0f0c 	teq	r4, ip
   d9de8:	d10a      	bne.n	d9e00 <__aeabi_ddiv+0x19c>
   d9dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9dee:	f47f af34 	bne.w	d9c5a <__aeabi_dmul+0x24a>
   d9df2:	ea95 0f0c 	teq	r5, ip
   d9df6:	f47f af25 	bne.w	d9c44 <__aeabi_dmul+0x234>
   d9dfa:	4610      	mov	r0, r2
   d9dfc:	4619      	mov	r1, r3
   d9dfe:	e72c      	b.n	d9c5a <__aeabi_dmul+0x24a>
   d9e00:	ea95 0f0c 	teq	r5, ip
   d9e04:	d106      	bne.n	d9e14 <__aeabi_ddiv+0x1b0>
   d9e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9e0a:	f43f aefd 	beq.w	d9c08 <__aeabi_dmul+0x1f8>
   d9e0e:	4610      	mov	r0, r2
   d9e10:	4619      	mov	r1, r3
   d9e12:	e722      	b.n	d9c5a <__aeabi_dmul+0x24a>
   d9e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9e18:	bf18      	it	ne
   d9e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9e1e:	f47f aec5 	bne.w	d9bac <__aeabi_dmul+0x19c>
   d9e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9e26:	f47f af0d 	bne.w	d9c44 <__aeabi_dmul+0x234>
   d9e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9e2e:	f47f aeeb 	bne.w	d9c08 <__aeabi_dmul+0x1f8>
   d9e32:	e712      	b.n	d9c5a <__aeabi_dmul+0x24a>

000d9e34 <__gedf2>:
   d9e34:	f04f 3cff 	mov.w	ip, #4294967295
   d9e38:	e006      	b.n	d9e48 <__cmpdf2+0x4>
   d9e3a:	bf00      	nop

000d9e3c <__ledf2>:
   d9e3c:	f04f 0c01 	mov.w	ip, #1
   d9e40:	e002      	b.n	d9e48 <__cmpdf2+0x4>
   d9e42:	bf00      	nop

000d9e44 <__cmpdf2>:
   d9e44:	f04f 0c01 	mov.w	ip, #1
   d9e48:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e58:	bf18      	it	ne
   d9e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9e5e:	d01b      	beq.n	d9e98 <__cmpdf2+0x54>
   d9e60:	b001      	add	sp, #4
   d9e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9e66:	bf0c      	ite	eq
   d9e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9e6c:	ea91 0f03 	teqne	r1, r3
   d9e70:	bf02      	ittt	eq
   d9e72:	ea90 0f02 	teqeq	r0, r2
   d9e76:	2000      	moveq	r0, #0
   d9e78:	4770      	bxeq	lr
   d9e7a:	f110 0f00 	cmn.w	r0, #0
   d9e7e:	ea91 0f03 	teq	r1, r3
   d9e82:	bf58      	it	pl
   d9e84:	4299      	cmppl	r1, r3
   d9e86:	bf08      	it	eq
   d9e88:	4290      	cmpeq	r0, r2
   d9e8a:	bf2c      	ite	cs
   d9e8c:	17d8      	asrcs	r0, r3, #31
   d9e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9e92:	f040 0001 	orr.w	r0, r0, #1
   d9e96:	4770      	bx	lr
   d9e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9ea0:	d102      	bne.n	d9ea8 <__cmpdf2+0x64>
   d9ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9ea6:	d107      	bne.n	d9eb8 <__cmpdf2+0x74>
   d9ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9eb0:	d1d6      	bne.n	d9e60 <__cmpdf2+0x1c>
   d9eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9eb6:	d0d3      	beq.n	d9e60 <__cmpdf2+0x1c>
   d9eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9ebc:	4770      	bx	lr
   d9ebe:	bf00      	nop

000d9ec0 <__aeabi_cdrcmple>:
   d9ec0:	4684      	mov	ip, r0
   d9ec2:	4610      	mov	r0, r2
   d9ec4:	4662      	mov	r2, ip
   d9ec6:	468c      	mov	ip, r1
   d9ec8:	4619      	mov	r1, r3
   d9eca:	4663      	mov	r3, ip
   d9ecc:	e000      	b.n	d9ed0 <__aeabi_cdcmpeq>
   d9ece:	bf00      	nop

000d9ed0 <__aeabi_cdcmpeq>:
   d9ed0:	b501      	push	{r0, lr}
   d9ed2:	f7ff ffb7 	bl	d9e44 <__cmpdf2>
   d9ed6:	2800      	cmp	r0, #0
   d9ed8:	bf48      	it	mi
   d9eda:	f110 0f00 	cmnmi.w	r0, #0
   d9ede:	bd01      	pop	{r0, pc}

000d9ee0 <__aeabi_dcmpeq>:
   d9ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ee4:	f7ff fff4 	bl	d9ed0 <__aeabi_cdcmpeq>
   d9ee8:	bf0c      	ite	eq
   d9eea:	2001      	moveq	r0, #1
   d9eec:	2000      	movne	r0, #0
   d9eee:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ef2:	bf00      	nop

000d9ef4 <__aeabi_dcmplt>:
   d9ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ef8:	f7ff ffea 	bl	d9ed0 <__aeabi_cdcmpeq>
   d9efc:	bf34      	ite	cc
   d9efe:	2001      	movcc	r0, #1
   d9f00:	2000      	movcs	r0, #0
   d9f02:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f06:	bf00      	nop

000d9f08 <__aeabi_dcmple>:
   d9f08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f0c:	f7ff ffe0 	bl	d9ed0 <__aeabi_cdcmpeq>
   d9f10:	bf94      	ite	ls
   d9f12:	2001      	movls	r0, #1
   d9f14:	2000      	movhi	r0, #0
   d9f16:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f1a:	bf00      	nop

000d9f1c <__aeabi_dcmpge>:
   d9f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f20:	f7ff ffce 	bl	d9ec0 <__aeabi_cdrcmple>
   d9f24:	bf94      	ite	ls
   d9f26:	2001      	movls	r0, #1
   d9f28:	2000      	movhi	r0, #0
   d9f2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f2e:	bf00      	nop

000d9f30 <__aeabi_dcmpgt>:
   d9f30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f34:	f7ff ffc4 	bl	d9ec0 <__aeabi_cdrcmple>
   d9f38:	bf34      	ite	cc
   d9f3a:	2001      	movcc	r0, #1
   d9f3c:	2000      	movcs	r0, #0
   d9f3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f42:	bf00      	nop

000d9f44 <__aeabi_dcmpun>:
   d9f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9f4c:	d102      	bne.n	d9f54 <__aeabi_dcmpun+0x10>
   d9f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9f52:	d10a      	bne.n	d9f6a <__aeabi_dcmpun+0x26>
   d9f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9f5c:	d102      	bne.n	d9f64 <__aeabi_dcmpun+0x20>
   d9f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9f62:	d102      	bne.n	d9f6a <__aeabi_dcmpun+0x26>
   d9f64:	f04f 0000 	mov.w	r0, #0
   d9f68:	4770      	bx	lr
   d9f6a:	f04f 0001 	mov.w	r0, #1
   d9f6e:	4770      	bx	lr

000d9f70 <__aeabi_d2iz>:
   d9f70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9f74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9f78:	d215      	bcs.n	d9fa6 <__aeabi_d2iz+0x36>
   d9f7a:	d511      	bpl.n	d9fa0 <__aeabi_d2iz+0x30>
   d9f7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9f84:	d912      	bls.n	d9fac <__aeabi_d2iz+0x3c>
   d9f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9f92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9f96:	fa23 f002 	lsr.w	r0, r3, r2
   d9f9a:	bf18      	it	ne
   d9f9c:	4240      	negne	r0, r0
   d9f9e:	4770      	bx	lr
   d9fa0:	f04f 0000 	mov.w	r0, #0
   d9fa4:	4770      	bx	lr
   d9fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9faa:	d105      	bne.n	d9fb8 <__aeabi_d2iz+0x48>
   d9fac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9fb0:	bf08      	it	eq
   d9fb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9fb6:	4770      	bx	lr
   d9fb8:	f04f 0000 	mov.w	r0, #0
   d9fbc:	4770      	bx	lr
   d9fbe:	bf00      	nop

000d9fc0 <__aeabi_d2uiz>:
   d9fc0:	004a      	lsls	r2, r1, #1
   d9fc2:	d211      	bcs.n	d9fe8 <__aeabi_d2uiz+0x28>
   d9fc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9fc8:	d211      	bcs.n	d9fee <__aeabi_d2uiz+0x2e>
   d9fca:	d50d      	bpl.n	d9fe8 <__aeabi_d2uiz+0x28>
   d9fcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9fd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9fd4:	d40e      	bmi.n	d9ff4 <__aeabi_d2uiz+0x34>
   d9fd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9fde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9fe2:	fa23 f002 	lsr.w	r0, r3, r2
   d9fe6:	4770      	bx	lr
   d9fe8:	f04f 0000 	mov.w	r0, #0
   d9fec:	4770      	bx	lr
   d9fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9ff2:	d102      	bne.n	d9ffa <__aeabi_d2uiz+0x3a>
   d9ff4:	f04f 30ff 	mov.w	r0, #4294967295
   d9ff8:	4770      	bx	lr
   d9ffa:	f04f 0000 	mov.w	r0, #0
   d9ffe:	4770      	bx	lr

000da000 <__aeabi_d2f>:
   da000:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da004:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da008:	bf24      	itt	cs
   da00a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da00e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da012:	d90d      	bls.n	da030 <__aeabi_d2f+0x30>
   da014:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da018:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da01c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da024:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da028:	bf08      	it	eq
   da02a:	f020 0001 	biceq.w	r0, r0, #1
   da02e:	4770      	bx	lr
   da030:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da034:	d121      	bne.n	da07a <__aeabi_d2f+0x7a>
   da036:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da03a:	bfbc      	itt	lt
   da03c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da040:	4770      	bxlt	lr
   da042:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da046:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da04a:	f1c2 0218 	rsb	r2, r2, #24
   da04e:	f1c2 0c20 	rsb	ip, r2, #32
   da052:	fa10 f30c 	lsls.w	r3, r0, ip
   da056:	fa20 f002 	lsr.w	r0, r0, r2
   da05a:	bf18      	it	ne
   da05c:	f040 0001 	orrne.w	r0, r0, #1
   da060:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da068:	fa03 fc0c 	lsl.w	ip, r3, ip
   da06c:	ea40 000c 	orr.w	r0, r0, ip
   da070:	fa23 f302 	lsr.w	r3, r3, r2
   da074:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da078:	e7cc      	b.n	da014 <__aeabi_d2f+0x14>
   da07a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da07e:	d107      	bne.n	da090 <__aeabi_d2f+0x90>
   da080:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da084:	bf1e      	ittt	ne
   da086:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da08a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da08e:	4770      	bxne	lr
   da090:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da094:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da09c:	4770      	bx	lr
   da09e:	bf00      	nop

000da0a0 <__aeabi_ldivmod>:
   da0a0:	b97b      	cbnz	r3, da0c2 <__aeabi_ldivmod+0x22>
   da0a2:	b972      	cbnz	r2, da0c2 <__aeabi_ldivmod+0x22>
   da0a4:	2900      	cmp	r1, #0
   da0a6:	bfbe      	ittt	lt
   da0a8:	2000      	movlt	r0, #0
   da0aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da0ae:	e006      	blt.n	da0be <__aeabi_ldivmod+0x1e>
   da0b0:	bf08      	it	eq
   da0b2:	2800      	cmpeq	r0, #0
   da0b4:	bf1c      	itt	ne
   da0b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da0ba:	f04f 30ff 	movne.w	r0, #4294967295
   da0be:	f000 b9b1 	b.w	da424 <__aeabi_idiv0>
   da0c2:	f1ad 0c08 	sub.w	ip, sp, #8
   da0c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da0ca:	2900      	cmp	r1, #0
   da0cc:	db09      	blt.n	da0e2 <__aeabi_ldivmod+0x42>
   da0ce:	2b00      	cmp	r3, #0
   da0d0:	db1a      	blt.n	da108 <__aeabi_ldivmod+0x68>
   da0d2:	f000 f835 	bl	da140 <__udivmoddi4>
   da0d6:	f8dd e004 	ldr.w	lr, [sp, #4]
   da0da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da0de:	b004      	add	sp, #16
   da0e0:	4770      	bx	lr
   da0e2:	4240      	negs	r0, r0
   da0e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da0e8:	2b00      	cmp	r3, #0
   da0ea:	db1b      	blt.n	da124 <__aeabi_ldivmod+0x84>
   da0ec:	f000 f828 	bl	da140 <__udivmoddi4>
   da0f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   da0f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da0f8:	b004      	add	sp, #16
   da0fa:	4240      	negs	r0, r0
   da0fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da100:	4252      	negs	r2, r2
   da102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da106:	4770      	bx	lr
   da108:	4252      	negs	r2, r2
   da10a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da10e:	f000 f817 	bl	da140 <__udivmoddi4>
   da112:	f8dd e004 	ldr.w	lr, [sp, #4]
   da116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da11a:	b004      	add	sp, #16
   da11c:	4240      	negs	r0, r0
   da11e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da122:	4770      	bx	lr
   da124:	4252      	negs	r2, r2
   da126:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da12a:	f000 f809 	bl	da140 <__udivmoddi4>
   da12e:	f8dd e004 	ldr.w	lr, [sp, #4]
   da132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da136:	b004      	add	sp, #16
   da138:	4252      	negs	r2, r2
   da13a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da13e:	4770      	bx	lr

000da140 <__udivmoddi4>:
   da140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da144:	468c      	mov	ip, r1
   da146:	460e      	mov	r6, r1
   da148:	4604      	mov	r4, r0
   da14a:	9d08      	ldr	r5, [sp, #32]
   da14c:	2b00      	cmp	r3, #0
   da14e:	d150      	bne.n	da1f2 <__udivmoddi4+0xb2>
   da150:	428a      	cmp	r2, r1
   da152:	4617      	mov	r7, r2
   da154:	d96c      	bls.n	da230 <__udivmoddi4+0xf0>
   da156:	fab2 fe82 	clz	lr, r2
   da15a:	f1be 0f00 	cmp.w	lr, #0
   da15e:	d00b      	beq.n	da178 <__udivmoddi4+0x38>
   da160:	f1ce 0420 	rsb	r4, lr, #32
   da164:	fa20 f404 	lsr.w	r4, r0, r4
   da168:	fa01 f60e 	lsl.w	r6, r1, lr
   da16c:	ea44 0c06 	orr.w	ip, r4, r6
   da170:	fa02 f70e 	lsl.w	r7, r2, lr
   da174:	fa00 f40e 	lsl.w	r4, r0, lr
   da178:	ea4f 4917 	mov.w	r9, r7, lsr #16
   da17c:	0c22      	lsrs	r2, r4, #16
   da17e:	fbbc f0f9 	udiv	r0, ip, r9
   da182:	fa1f f887 	uxth.w	r8, r7
   da186:	fb09 c610 	mls	r6, r9, r0, ip
   da18a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da18e:	fb00 f308 	mul.w	r3, r0, r8
   da192:	42b3      	cmp	r3, r6
   da194:	d909      	bls.n	da1aa <__udivmoddi4+0x6a>
   da196:	19f6      	adds	r6, r6, r7
   da198:	f100 32ff 	add.w	r2, r0, #4294967295
   da19c:	f080 8122 	bcs.w	da3e4 <__udivmoddi4+0x2a4>
   da1a0:	42b3      	cmp	r3, r6
   da1a2:	f240 811f 	bls.w	da3e4 <__udivmoddi4+0x2a4>
   da1a6:	3802      	subs	r0, #2
   da1a8:	443e      	add	r6, r7
   da1aa:	1af6      	subs	r6, r6, r3
   da1ac:	b2a2      	uxth	r2, r4
   da1ae:	fbb6 f3f9 	udiv	r3, r6, r9
   da1b2:	fb09 6613 	mls	r6, r9, r3, r6
   da1b6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da1ba:	fb03 f808 	mul.w	r8, r3, r8
   da1be:	45a0      	cmp	r8, r4
   da1c0:	d909      	bls.n	da1d6 <__udivmoddi4+0x96>
   da1c2:	19e4      	adds	r4, r4, r7
   da1c4:	f103 32ff 	add.w	r2, r3, #4294967295
   da1c8:	f080 810a 	bcs.w	da3e0 <__udivmoddi4+0x2a0>
   da1cc:	45a0      	cmp	r8, r4
   da1ce:	f240 8107 	bls.w	da3e0 <__udivmoddi4+0x2a0>
   da1d2:	3b02      	subs	r3, #2
   da1d4:	443c      	add	r4, r7
   da1d6:	ebc8 0404 	rsb	r4, r8, r4
   da1da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da1de:	2100      	movs	r1, #0
   da1e0:	2d00      	cmp	r5, #0
   da1e2:	d062      	beq.n	da2aa <__udivmoddi4+0x16a>
   da1e4:	fa24 f40e 	lsr.w	r4, r4, lr
   da1e8:	2300      	movs	r3, #0
   da1ea:	602c      	str	r4, [r5, #0]
   da1ec:	606b      	str	r3, [r5, #4]
   da1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da1f2:	428b      	cmp	r3, r1
   da1f4:	d907      	bls.n	da206 <__udivmoddi4+0xc6>
   da1f6:	2d00      	cmp	r5, #0
   da1f8:	d055      	beq.n	da2a6 <__udivmoddi4+0x166>
   da1fa:	2100      	movs	r1, #0
   da1fc:	e885 0041 	stmia.w	r5, {r0, r6}
   da200:	4608      	mov	r0, r1
   da202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da206:	fab3 f183 	clz	r1, r3
   da20a:	2900      	cmp	r1, #0
   da20c:	f040 8090 	bne.w	da330 <__udivmoddi4+0x1f0>
   da210:	42b3      	cmp	r3, r6
   da212:	d302      	bcc.n	da21a <__udivmoddi4+0xda>
   da214:	4282      	cmp	r2, r0
   da216:	f200 80f8 	bhi.w	da40a <__udivmoddi4+0x2ca>
   da21a:	1a84      	subs	r4, r0, r2
   da21c:	eb66 0603 	sbc.w	r6, r6, r3
   da220:	2001      	movs	r0, #1
   da222:	46b4      	mov	ip, r6
   da224:	2d00      	cmp	r5, #0
   da226:	d040      	beq.n	da2aa <__udivmoddi4+0x16a>
   da228:	e885 1010 	stmia.w	r5, {r4, ip}
   da22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da230:	b912      	cbnz	r2, da238 <__udivmoddi4+0xf8>
   da232:	2701      	movs	r7, #1
   da234:	fbb7 f7f2 	udiv	r7, r7, r2
   da238:	fab7 fe87 	clz	lr, r7
   da23c:	f1be 0f00 	cmp.w	lr, #0
   da240:	d135      	bne.n	da2ae <__udivmoddi4+0x16e>
   da242:	1bf3      	subs	r3, r6, r7
   da244:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da248:	fa1f fc87 	uxth.w	ip, r7
   da24c:	2101      	movs	r1, #1
   da24e:	fbb3 f0f8 	udiv	r0, r3, r8
   da252:	0c22      	lsrs	r2, r4, #16
   da254:	fb08 3610 	mls	r6, r8, r0, r3
   da258:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da25c:	fb0c f300 	mul.w	r3, ip, r0
   da260:	42b3      	cmp	r3, r6
   da262:	d907      	bls.n	da274 <__udivmoddi4+0x134>
   da264:	19f6      	adds	r6, r6, r7
   da266:	f100 32ff 	add.w	r2, r0, #4294967295
   da26a:	d202      	bcs.n	da272 <__udivmoddi4+0x132>
   da26c:	42b3      	cmp	r3, r6
   da26e:	f200 80ce 	bhi.w	da40e <__udivmoddi4+0x2ce>
   da272:	4610      	mov	r0, r2
   da274:	1af6      	subs	r6, r6, r3
   da276:	b2a2      	uxth	r2, r4
   da278:	fbb6 f3f8 	udiv	r3, r6, r8
   da27c:	fb08 6613 	mls	r6, r8, r3, r6
   da280:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da284:	fb0c fc03 	mul.w	ip, ip, r3
   da288:	45a4      	cmp	ip, r4
   da28a:	d907      	bls.n	da29c <__udivmoddi4+0x15c>
   da28c:	19e4      	adds	r4, r4, r7
   da28e:	f103 32ff 	add.w	r2, r3, #4294967295
   da292:	d202      	bcs.n	da29a <__udivmoddi4+0x15a>
   da294:	45a4      	cmp	ip, r4
   da296:	f200 80b5 	bhi.w	da404 <__udivmoddi4+0x2c4>
   da29a:	4613      	mov	r3, r2
   da29c:	ebcc 0404 	rsb	r4, ip, r4
   da2a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da2a4:	e79c      	b.n	da1e0 <__udivmoddi4+0xa0>
   da2a6:	4629      	mov	r1, r5
   da2a8:	4628      	mov	r0, r5
   da2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2ae:	f1ce 0120 	rsb	r1, lr, #32
   da2b2:	fa06 f30e 	lsl.w	r3, r6, lr
   da2b6:	fa07 f70e 	lsl.w	r7, r7, lr
   da2ba:	fa20 f901 	lsr.w	r9, r0, r1
   da2be:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da2c2:	40ce      	lsrs	r6, r1
   da2c4:	ea49 0903 	orr.w	r9, r9, r3
   da2c8:	fbb6 faf8 	udiv	sl, r6, r8
   da2cc:	ea4f 4419 	mov.w	r4, r9, lsr #16
   da2d0:	fb08 661a 	mls	r6, r8, sl, r6
   da2d4:	fa1f fc87 	uxth.w	ip, r7
   da2d8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   da2dc:	fb0a f20c 	mul.w	r2, sl, ip
   da2e0:	429a      	cmp	r2, r3
   da2e2:	fa00 f40e 	lsl.w	r4, r0, lr
   da2e6:	d90a      	bls.n	da2fe <__udivmoddi4+0x1be>
   da2e8:	19db      	adds	r3, r3, r7
   da2ea:	f10a 31ff 	add.w	r1, sl, #4294967295
   da2ee:	f080 8087 	bcs.w	da400 <__udivmoddi4+0x2c0>
   da2f2:	429a      	cmp	r2, r3
   da2f4:	f240 8084 	bls.w	da400 <__udivmoddi4+0x2c0>
   da2f8:	f1aa 0a02 	sub.w	sl, sl, #2
   da2fc:	443b      	add	r3, r7
   da2fe:	1a9b      	subs	r3, r3, r2
   da300:	fa1f f989 	uxth.w	r9, r9
   da304:	fbb3 f1f8 	udiv	r1, r3, r8
   da308:	fb08 3311 	mls	r3, r8, r1, r3
   da30c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   da310:	fb01 f60c 	mul.w	r6, r1, ip
   da314:	429e      	cmp	r6, r3
   da316:	d907      	bls.n	da328 <__udivmoddi4+0x1e8>
   da318:	19db      	adds	r3, r3, r7
   da31a:	f101 32ff 	add.w	r2, r1, #4294967295
   da31e:	d26b      	bcs.n	da3f8 <__udivmoddi4+0x2b8>
   da320:	429e      	cmp	r6, r3
   da322:	d969      	bls.n	da3f8 <__udivmoddi4+0x2b8>
   da324:	3902      	subs	r1, #2
   da326:	443b      	add	r3, r7
   da328:	1b9b      	subs	r3, r3, r6
   da32a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   da32e:	e78e      	b.n	da24e <__udivmoddi4+0x10e>
   da330:	f1c1 0e20 	rsb	lr, r1, #32
   da334:	fa22 f40e 	lsr.w	r4, r2, lr
   da338:	408b      	lsls	r3, r1
   da33a:	4323      	orrs	r3, r4
   da33c:	fa20 f70e 	lsr.w	r7, r0, lr
   da340:	fa06 f401 	lsl.w	r4, r6, r1
   da344:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   da348:	fa26 f60e 	lsr.w	r6, r6, lr
   da34c:	433c      	orrs	r4, r7
   da34e:	fbb6 f9fc 	udiv	r9, r6, ip
   da352:	0c27      	lsrs	r7, r4, #16
   da354:	fb0c 6619 	mls	r6, ip, r9, r6
   da358:	fa1f f883 	uxth.w	r8, r3
   da35c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   da360:	fb09 f708 	mul.w	r7, r9, r8
   da364:	42b7      	cmp	r7, r6
   da366:	fa02 f201 	lsl.w	r2, r2, r1
   da36a:	fa00 fa01 	lsl.w	sl, r0, r1
   da36e:	d908      	bls.n	da382 <__udivmoddi4+0x242>
   da370:	18f6      	adds	r6, r6, r3
   da372:	f109 30ff 	add.w	r0, r9, #4294967295
   da376:	d241      	bcs.n	da3fc <__udivmoddi4+0x2bc>
   da378:	42b7      	cmp	r7, r6
   da37a:	d93f      	bls.n	da3fc <__udivmoddi4+0x2bc>
   da37c:	f1a9 0902 	sub.w	r9, r9, #2
   da380:	441e      	add	r6, r3
   da382:	1bf6      	subs	r6, r6, r7
   da384:	b2a0      	uxth	r0, r4
   da386:	fbb6 f4fc 	udiv	r4, r6, ip
   da38a:	fb0c 6614 	mls	r6, ip, r4, r6
   da38e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   da392:	fb04 f808 	mul.w	r8, r4, r8
   da396:	45b8      	cmp	r8, r7
   da398:	d907      	bls.n	da3aa <__udivmoddi4+0x26a>
   da39a:	18ff      	adds	r7, r7, r3
   da39c:	f104 30ff 	add.w	r0, r4, #4294967295
   da3a0:	d228      	bcs.n	da3f4 <__udivmoddi4+0x2b4>
   da3a2:	45b8      	cmp	r8, r7
   da3a4:	d926      	bls.n	da3f4 <__udivmoddi4+0x2b4>
   da3a6:	3c02      	subs	r4, #2
   da3a8:	441f      	add	r7, r3
   da3aa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   da3ae:	ebc8 0707 	rsb	r7, r8, r7
   da3b2:	fba0 8902 	umull	r8, r9, r0, r2
   da3b6:	454f      	cmp	r7, r9
   da3b8:	4644      	mov	r4, r8
   da3ba:	464e      	mov	r6, r9
   da3bc:	d314      	bcc.n	da3e8 <__udivmoddi4+0x2a8>
   da3be:	d029      	beq.n	da414 <__udivmoddi4+0x2d4>
   da3c0:	b365      	cbz	r5, da41c <__udivmoddi4+0x2dc>
   da3c2:	ebba 0304 	subs.w	r3, sl, r4
   da3c6:	eb67 0706 	sbc.w	r7, r7, r6
   da3ca:	fa07 fe0e 	lsl.w	lr, r7, lr
   da3ce:	40cb      	lsrs	r3, r1
   da3d0:	40cf      	lsrs	r7, r1
   da3d2:	ea4e 0303 	orr.w	r3, lr, r3
   da3d6:	e885 0088 	stmia.w	r5, {r3, r7}
   da3da:	2100      	movs	r1, #0
   da3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da3e0:	4613      	mov	r3, r2
   da3e2:	e6f8      	b.n	da1d6 <__udivmoddi4+0x96>
   da3e4:	4610      	mov	r0, r2
   da3e6:	e6e0      	b.n	da1aa <__udivmoddi4+0x6a>
   da3e8:	ebb8 0402 	subs.w	r4, r8, r2
   da3ec:	eb69 0603 	sbc.w	r6, r9, r3
   da3f0:	3801      	subs	r0, #1
   da3f2:	e7e5      	b.n	da3c0 <__udivmoddi4+0x280>
   da3f4:	4604      	mov	r4, r0
   da3f6:	e7d8      	b.n	da3aa <__udivmoddi4+0x26a>
   da3f8:	4611      	mov	r1, r2
   da3fa:	e795      	b.n	da328 <__udivmoddi4+0x1e8>
   da3fc:	4681      	mov	r9, r0
   da3fe:	e7c0      	b.n	da382 <__udivmoddi4+0x242>
   da400:	468a      	mov	sl, r1
   da402:	e77c      	b.n	da2fe <__udivmoddi4+0x1be>
   da404:	3b02      	subs	r3, #2
   da406:	443c      	add	r4, r7
   da408:	e748      	b.n	da29c <__udivmoddi4+0x15c>
   da40a:	4608      	mov	r0, r1
   da40c:	e70a      	b.n	da224 <__udivmoddi4+0xe4>
   da40e:	3802      	subs	r0, #2
   da410:	443e      	add	r6, r7
   da412:	e72f      	b.n	da274 <__udivmoddi4+0x134>
   da414:	45c2      	cmp	sl, r8
   da416:	d3e7      	bcc.n	da3e8 <__udivmoddi4+0x2a8>
   da418:	463e      	mov	r6, r7
   da41a:	e7d1      	b.n	da3c0 <__udivmoddi4+0x280>
   da41c:	4629      	mov	r1, r5
   da41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da422:	bf00      	nop

000da424 <__aeabi_idiv0>:
   da424:	4770      	bx	lr
   da426:	bf00      	nop

000da428 <__cxa_atexit>:
   da428:	b510      	push	{r4, lr}
   da42a:	4c05      	ldr	r4, [pc, #20]	; (da440 <__cxa_atexit+0x18>)
   da42c:	4613      	mov	r3, r2
   da42e:	b12c      	cbz	r4, da43c <__cxa_atexit+0x14>
   da430:	460a      	mov	r2, r1
   da432:	4601      	mov	r1, r0
   da434:	2002      	movs	r0, #2
   da436:	f3af 8000 	nop.w
   da43a:	bd10      	pop	{r4, pc}
   da43c:	4620      	mov	r0, r4
   da43e:	bd10      	pop	{r4, pc}
   da440:	00000000 	.word	0x00000000

000da444 <memcpy>:
   da444:	b510      	push	{r4, lr}
   da446:	1e43      	subs	r3, r0, #1
   da448:	440a      	add	r2, r1
   da44a:	4291      	cmp	r1, r2
   da44c:	d004      	beq.n	da458 <memcpy+0x14>
   da44e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da452:	f803 4f01 	strb.w	r4, [r3, #1]!
   da456:	e7f8      	b.n	da44a <memcpy+0x6>
   da458:	bd10      	pop	{r4, pc}

000da45a <memset>:
   da45a:	4402      	add	r2, r0
   da45c:	4603      	mov	r3, r0
   da45e:	4293      	cmp	r3, r2
   da460:	d002      	beq.n	da468 <memset+0xe>
   da462:	f803 1b01 	strb.w	r1, [r3], #1
   da466:	e7fa      	b.n	da45e <memset+0x4>
   da468:	4770      	bx	lr
	...

000da46c <srand>:
   da46c:	b538      	push	{r3, r4, r5, lr}
   da46e:	4b12      	ldr	r3, [pc, #72]	; (da4b8 <srand+0x4c>)
   da470:	681c      	ldr	r4, [r3, #0]
   da472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da474:	4605      	mov	r5, r0
   da476:	b9d3      	cbnz	r3, da4ae <srand+0x42>
   da478:	2018      	movs	r0, #24
   da47a:	f7fc fb25 	bl	d6ac8 <malloc>
   da47e:	f243 330e 	movw	r3, #13070	; 0x330e
   da482:	63a0      	str	r0, [r4, #56]	; 0x38
   da484:	8003      	strh	r3, [r0, #0]
   da486:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da48a:	8043      	strh	r3, [r0, #2]
   da48c:	f241 2334 	movw	r3, #4660	; 0x1234
   da490:	8083      	strh	r3, [r0, #4]
   da492:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da496:	80c3      	strh	r3, [r0, #6]
   da498:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da49c:	8103      	strh	r3, [r0, #8]
   da49e:	2305      	movs	r3, #5
   da4a0:	8143      	strh	r3, [r0, #10]
   da4a2:	230b      	movs	r3, #11
   da4a4:	8183      	strh	r3, [r0, #12]
   da4a6:	2201      	movs	r2, #1
   da4a8:	2300      	movs	r3, #0
   da4aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da4ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da4b0:	2200      	movs	r2, #0
   da4b2:	611d      	str	r5, [r3, #16]
   da4b4:	615a      	str	r2, [r3, #20]
   da4b6:	bd38      	pop	{r3, r4, r5, pc}
   da4b8:	2003e2d0 	.word	0x2003e2d0

000da4bc <strdup>:
   da4bc:	4b02      	ldr	r3, [pc, #8]	; (da4c8 <strdup+0xc>)
   da4be:	4601      	mov	r1, r0
   da4c0:	6818      	ldr	r0, [r3, #0]
   da4c2:	f000 b803 	b.w	da4cc <_strdup_r>
   da4c6:	bf00      	nop
   da4c8:	2003e2d0 	.word	0x2003e2d0

000da4cc <_strdup_r>:
   da4cc:	b570      	push	{r4, r5, r6, lr}
   da4ce:	4606      	mov	r6, r0
   da4d0:	4608      	mov	r0, r1
   da4d2:	460c      	mov	r4, r1
   da4d4:	f000 f80d 	bl	da4f2 <strlen>
   da4d8:	1c45      	adds	r5, r0, #1
   da4da:	4629      	mov	r1, r5
   da4dc:	4630      	mov	r0, r6
   da4de:	f7fc fb13 	bl	d6b08 <_malloc_r>
   da4e2:	4606      	mov	r6, r0
   da4e4:	b118      	cbz	r0, da4ee <_strdup_r+0x22>
   da4e6:	462a      	mov	r2, r5
   da4e8:	4621      	mov	r1, r4
   da4ea:	f7ff ffab 	bl	da444 <memcpy>
   da4ee:	4630      	mov	r0, r6
   da4f0:	bd70      	pop	{r4, r5, r6, pc}

000da4f2 <strlen>:
   da4f2:	4603      	mov	r3, r0
   da4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   da4f8:	2a00      	cmp	r2, #0
   da4fa:	d1fb      	bne.n	da4f4 <strlen+0x2>
   da4fc:	1a18      	subs	r0, r3, r0
   da4fe:	3801      	subs	r0, #1
   da500:	4770      	bx	lr

000da502 <link_code_end>:
	...

000da504 <dynalib_user>:
   da504:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da514:	0000 0000                                   ....

000da518 <_ZTV16JsonWriterStaticILj256EE>:
	...
   da520:	40d1 000d 40e5 000d 2020 7700 6f72 676e     .@...@..  .wrong
   da530:	6320 6568 6b63 7553 216d 2121 0021 6554      checkSum!!!!.Te
   da540:	706d 7265 7461 7275 2065 203d 2000 432a     mperature = . *C
   da550:	5000 6572 7373 7275 2065 203d 2000 5068     .Pressure = . hP
   da560:	0061 7041 7270 786f 202e 6c41 6974 7574     a.Approx. Altitu
   da570:	6564 3d20 0020 6d20 4800 6d75 6469 7469     de = . m.Humidit
   da580:	2079 203d 2000 0025 6554 706d 7265 7461     y = . %.Temperat
   da590:	7275 3a65 2520 2e30 6632 4620 000a 7250     ure: %0.2f F..Pr
   da5a0:	7365 7573 6572 203a 3025 322e 2066 6e69     essure: %0.2f in
   da5b0:	6748 000a 7548 696d 6964 7974 203a 3025     Hg..Humidity: %0
   da5c0:	322e 2066 4872 000a 6147 2073 6f43 636e     .2f rH..Gas Conc
   da5d0:	203a 3025 322e 0a66 5000 324d 3a35 2520     : %0.2f..PM25: %
   da5e0:	2069 000a 6548 6c6c 2c6f 7720 726f 646c     i ..Hello, world
   da5f0:	0021 4d42 3245 3038 7420 7365 0074 6553     !.BME280 test.Se
   da600:	6972 6c61 7320 6174 7472 4800 334d 3033     rial start.HM330
   da610:	2058 6e69 7469 6620 6961 656c 2164 2121     X init failed!!!
   da620:	4300 756f 646c 6e20 746f 6620 6e69 2064     .Could not find 
   da630:	2061 6176 696c 2064 4d42 3645 3038 7320     a valid BME680 s
   da640:	6e65 6f73 2c72 6320 6568 6b63 7720 7269     ensor, check wir
   da650:	6e69 2167 4800 6d6f 5f65 6554 706d 4800     ing!.Home_Temp.H
   da660:	6d6f 5f65 7250 7365 4800 6d6f 5f65 7548     ome_Pres.Home_Hu
   da670:	696d 0064 6f48 656d 475f 7361 4800 6d6f     mid.Home_Gas.Hom
   da680:	5f65 4d50 3532 2500 0064 6d62 2d65 6176     e_PM25.%d.bme-va
   da690:	736c 4800 334d 3033 2058 6572 6461 7220     ls.HM330X read r
   da6a0:	7365 6c75 2074 6166 6c69 6465 2121 0021     esult failed!!!.
   da6b0:	7453 7261 6974 676e 4420 7369 6c70 7961     Starting Display
   da6c0:	5000 6972 746e 6e69 2067 6f43 636e 6e65     .Printing Concen
   da6d0:	7274 7461 6f69 736e 5000 324d 352e 4420     trations.PM2.5 D
   da6e0:	7461 0061 6573 736e 726f 6e20 6d75 203a     ata.sensor num: 
   da6f0:	5000 314d 302e 6320 6e6f 6563 746e 6172     .PM1.0 concentra
   da700:	6974 6e6f 4328 3d46 2c31 7453 6e61 6164     tion(CF=1,Standa
   da710:	6472 7020 7261 6974 7563 616c 6574 6d20     rd particulate m
   da720:	7461 6574 2c72 6e75 7469 753a 2f67 336d     atter,unit:ug/m3
   da730:	3a29 0020 4d50 2e32 2035 6f63 636e 6e65     ): .PM2.5 concen
   da740:	7274 7461 6f69 286e 4643 313d 532c 6174     tration(CF=1,Sta
   da750:	646e 7261 2064 6170 7472 6369 6c75 7461     ndard particulat
   da760:	2065 616d 7474 7265 752c 696e 3a74 6775     e matter,unit:ug
   da770:	6d2f 2933 203a 5000 314d 2030 6f63 636e     /m3): .PM10 conc
   da780:	6e65 7274 7461 6f69 286e 4643 313d 532c     entration(CF=1,S
   da790:	6174 646e 7261 2064 6170 7472 6369 6c75     tandard particul
   da7a0:	7461 2065 616d 7474 7265 752c 696e 3a74     ate matter,unit:
   da7b0:	6775 6d2f 2933 203a 5000 314d 302e 6320     ug/m3): .PM1.0 c
   da7c0:	6e6f 6563 746e 6172 6974 6e6f 4128 6d74     oncentration(Atm
   da7d0:	736f 6870 7265 6369 6520 766e 7269 6e6f     ospheric environ
   da7e0:	656d 746e 752c 696e 3a74 6775 6d2f 2933     ment,unit:ug/m3)
   da7f0:	203a 5000 324d 352e 6320 6e6f 6563 746e     : .PM2.5 concent
   da800:	6172 6974 6e6f 4128 6d74 736f 6870 7265     ration(Atmospher
   da810:	6369 6520 766e 7269 6e6f 656d 746e 752c     ic environment,u
   da820:	696e 3a74 6775 6d2f 2933 203a 5000 314d     nit:ug/m3): .PM1
   da830:	2030 6f63 636e 6e65 7274 7461 6f69 286e     0 concentration(
   da840:	7441 6f6d 7073 6568 6972 2063 6e65 6976     Atmospheric envi
   da850:	6f72 6d6e 6e65 2c74 6e75 7469 753a 2f67     ronment,unit:ug/
   da860:	336d 3a29 0020 0000                         m3): ...

000da868 <_ZTV10JsonBuffer>:
	...
   da870:	4815 000d 4831 000d                         .H..1H..

000da878 <_ZTV10JsonWriter>:
	...
   da880:	4845 000d 4859 000d 6c25 0075 3025 7834     EH..YH..%lu.%04x
   da890:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   da8a0:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   da8b0:	2500 666c 0000 0201 0804 0010               .%lf........

000da8bc <_ZTV16Adafruit_SSD1306>:
	...
   da8c4:	40cd 000d 47a9 000d 659d 000d 6e21 000d     .@...G...e..!n..
   da8d4:	5e99 000d 629d 000d 5d21 000d 5bad 000d     .^...b..!]...[..
   da8e4:	635d 000d 63f3 000d 642b 000d 6447 000d     ]c...c..+d..Gd..

000da8f4 <_ZTV12Adafruit_GFX>:
	...
   da904:	659d 000d 6e21 000d 40a9 000d 629d 000d     .e..!n...@...b..
   da914:	63bd 000d 63d9 000d 635d 000d 63f3 000d     .c...c..]c...c..
   da924:	642b 000d 6447 000d                         +d..Gd..

000da92c <_ZL4font>:
   da92c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da93c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da94c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da95c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da96c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da97c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da98c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da99c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da9ac:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da9bc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da9cc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da9dc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da9ec:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da9fc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   daa0c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   daa1c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   daa2c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   daa3c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   daa4c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   daa5c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   daa6c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   daa7c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   daa8c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   daa9c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   daaac:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   daabc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   daacc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   daadc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   daaec:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   daafc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dab0c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dab1c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dab2c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dab3c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dab4c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dab5c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dab6c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dab7c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dab8c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dab9c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dabac:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dabbc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dabcc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dabdc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dabec:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dabfc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dac0c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dac1c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dac2c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dac3c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dac4c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dac5c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dac6c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dac7c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dac8c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dac9c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dacac:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dacbc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   daccc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dacdc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dacec:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dacfc:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dad0c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dad1c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dad2c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dad3c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dad4c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dad5c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dad6c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dad7c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dad8c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dad9c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dadac:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dadbc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dadcc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   daddc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dadec:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dadfc:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dae0c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dae1c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dae28 <_ZTVN5spark13EthernetClassE>:
	...
   dae30:	6b87 000d 6b7d 000d 6b73 000d 6b69 000d     .k..}k..sk..ik..
   dae40:	6b5d 000d 6b51 000d 6b45 000d 6b3d 000d     ]k..Qk..Ek..=k..
   dae50:	6b33 000d 6b29 000d 7eb1 000d               3k..)k...~..

000dae5c <_ZTV8SPIClass>:
	...
   dae64:	6ba5 000d 6ba7 000d                         .k...k..

000dae6c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dae6c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dae7c:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   dae8c:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   dae9c:	7261 6d61 6300 646d 6800 646e 7300 7274     aram.cmd.hnd.str
   daeac:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   daebc:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   daecc:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   daedc:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   daeec:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
   daefc:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   daf0c:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   daf1c:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
   daf2c:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   daf3c:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   daf4c:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
   daf5c:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   daf6c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   daf7c:	7361 7463 6d69 0065                         asctime.

000daf84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   daf8c:	7291 000d 7297 000d 72db 000d 72a5 000d     .r...r...r...r..
   daf9c:	7293 000d                                   .r..

000dafa0 <_ZTV9IPAddress>:
	...
   dafa8:	7829 000d 7819 000d 781b 000d               )x...x...x..

000dafb4 <_ZTV9USBSerial>:
	...
   dafbc:	7901 000d 7951 000d 795f 000d 6e21 000d     .y..Qy.._y..!n..
   dafcc:	793d 000d 7903 000d 7919 000d 794b 000d     =y...y...y..Ky..
   dafdc:	792f 000d 78fd 000d                         /y...x..

000dafe4 <_ZTV11USARTSerial>:
	...
   dafec:	7a19 000d 7a69 000d 7a77 000d 6e21 000d     .z..iz..wz..!n..
   daffc:	7a2d 000d 7a4f 000d 7a3b 000d 7a63 000d     -z..Oz..;z..cz..
   db00c:	7a1b 000d 7a1f 000d                         .z...z..

000db014 <_ZTV7TwoWire>:
	...
   db01c:	7b45 000d 7b8f 000d 7b67 000d 7b47 000d     E{...{..g{..G{..
   db02c:	7b6f 000d 7b77 000d 7b7f 000d 7b87 000d     o{..w{...{...{..

000db03c <_ZTVN5spark9MeshClassE>:
	...
   db044:	7cb1 000d 7ca7 000d 7c9d 000d 7c93 000d     .|...|...|...|..
   db054:	7c87 000d 7c7b 000d 7c6f 000d 7c67 000d     .|..{|..o|..g|..
   db064:	7c5d 000d 7c53 000d 7eb1 000d               ]|..S|...~..

000db070 <_ZTVN5spark9WiFiClassE>:
	...
   db078:	7e2b 000d 7e21 000d 7e17 000d 7dcd 000d     +~..!~...~...}..
   db088:	7e0b 000d 7dff 000d 7df3 000d 7deb 000d     .~...}...}...}..
   db098:	7de1 000d 7dd7 000d 7eb1 000d               .}...}...~..

000db0a4 <_ZTVN5spark12NetworkClassE>:
	...
   db0ac:	7e49 000d 7e53 000d 7e5d 000d 7e67 000d     I~..S~..]~..g~..
   db0bc:	7e71 000d 7e7d 000d 7e89 000d 7e95 000d     q~..}~...~...~..
   db0cc:	7e9d 000d 7ea7 000d 7eb1 000d               .~...~...~..

000db0d8 <_ZSt7nothrow>:
   db0d8:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000db0e8 <TWO52>:
   db0e8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000db0f8 <__sf_fake_stdin>:
	...

000db118 <__sf_fake_stdout>:
	...

000db138 <__sf_fake_stderr>:
	...

000db158 <link_const_variable_data_end>:
   db158:	000d47b9 	.word	0x000d47b9
   db15c:	000d4809 	.word	0x000d4809
   db160:	000d480d 	.word	0x000d480d
   db164:	000d4811 	.word	0x000d4811
   db168:	000d4ae1 	.word	0x000d4ae1
   db16c:	000d4b19 	.word	0x000d4b19
   db170:	000d4b93 	.word	0x000d4b93
   db174:	000d5ba9 	.word	0x000d5ba9
   db178:	000d6299 	.word	0x000d6299
   db17c:	000d662d 	.word	0x000d662d
   db180:	000d6b91 	.word	0x000d6b91
   db184:	000d6d6d 	.word	0x000d6d6d
   db188:	000d6df9 	.word	0x000d6df9
   db18c:	000d70fd 	.word	0x000d70fd
   db190:	000d710d 	.word	0x000d710d
   db194:	000d7165 	.word	0x000d7165
   db198:	000d7d7d 	.word	0x000d7d7d
   db19c:	000d7e35 	.word	0x000d7e35
   db1a0:	000d7f7d 	.word	0x000d7f7d
   db1a4:	000d819d 	.word	0x000d819d
   db1a8:	000d8221 	.word	0x000d8221
   db1ac:	000d82e5 	.word	0x000d82e5
   db1b0:	000d83a9 	.word	0x000d83a9

000db1b4 <link_constructors_end>:
	...
