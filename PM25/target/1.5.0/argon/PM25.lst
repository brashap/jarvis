
c:/Users/IoTPa/Documents/jarvis/PM25/target/1.5.0/argon/PM25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9e40  000d9e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9e48  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000108  2003e1fc  000d9e4c  0001e1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004ec  2003e308  2003e308  0002e308  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d9f54  000d9f54  00029f54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9f7c  000d9f7c  00029f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001184c5  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016a62  00000000  00000000  00142445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00025688  00000000  00000000  00158ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a50  00000000  00000000  0017e52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000050b0  00000000  00000000  00180f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000402d6  00000000  00000000  0018602f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039d0a  00000000  00000000  001c6305  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010d0c6  00000000  00000000  0020000f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e244  00000000  00000000  0030d0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fb3b 	bl	d96ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fb40 	bl	d96c2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1fc 	.word	0x2003e1fc
   d404c:	000d9e4c 	.word	0x000d9e4c
   d4050:	2003e304 	.word	0x2003e304
   d4054:	2003e308 	.word	0x2003e308
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fa49 	bl	d64f4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9e34 	.word	0x000d9e34
   d4084:	000d9de0 	.word	0x000d9de0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b89e 	b.w	d41c8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9ef 	bl	d4470 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b9ef 	b.w	d6478 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bead 	b.w	d5df8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 beb3 	b.w	d5e08 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 beb1 	b.w	d5e08 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40bc:	6003      	str	r3, [r0, #0]
   d40be:	4604      	mov	r4, r0
   d40c0:	f000 fabc 	bl	d463c <_ZN10JsonWriterD1Ev>
   d40c4:	4620      	mov	r0, r4
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	000d9788 	.word	0x000d9788

000d40cc <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
   d40d0:	f7ff fff2 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40da:	f003 f97d 	bl	d73d8 <_ZdlPvj>
   d40de:	4620      	mov	r0, r4
   d40e0:	bd10      	pop	{r4, pc}

000d40e2 <_Z12print_resultPKct>:
                     "PM1.0 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM2.5 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
   d40e2:	b538      	push	{r3, r4, r5, lr}
   d40e4:	460d      	mov	r5, r1
    if (NULL == str) {
   d40e6:	4604      	mov	r4, r0
   d40e8:	b180      	cbz	r0, d410c <_Z12print_resultPKct+0x2a>
        return ERROR_PARAM;
    }
    SERIAL_OUTPUT.print(str);
   d40ea:	f002 fdc7 	bl	d6c7c <_Z16_fetch_usbserialv>
   d40ee:	4621      	mov	r1, r4
   d40f0:	f002 f854 	bl	d619c <_ZN5Print5printEPKc>
    SERIAL_OUTPUT.println(value);
   d40f4:	f002 fdc2 	bl	d6c7c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d40f8:	220a      	movs	r2, #10
   d40fa:	4604      	mov	r4, r0
   d40fc:	4629      	mov	r1, r5
   d40fe:	f002 f86c 	bl	d61da <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4102:	4620      	mov	r0, r4
   d4104:	f002 f851 	bl	d61aa <_ZN5Print7printlnEv>
    return NO_ERROR1;
   d4108:	2000      	movs	r0, #0
   d410a:	bd38      	pop	{r3, r4, r5, pc}
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
    if (NULL == str) {
        return ERROR_PARAM;
   d410c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    SERIAL_OUTPUT.print(str);
    SERIAL_OUTPUT.println(value);
    return NO_ERROR1;
}
   d4110:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4114 <_Z12parse_resultPh>:

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
   d4114:	b570      	push	{r4, r5, r6, lr}
    uint16_t value = 0;
    if (NULL == data) {
   d4116:	4605      	mov	r5, r0
   d4118:	b178      	cbz	r0, d413a <_Z12parse_resultPh+0x26>
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
   d411a:	4e09      	ldr	r6, [pc, #36]	; (d4140 <_Z12parse_resultPh+0x2c>)
   d411c:	2400      	movs	r4, #0
   d411e:	192b      	adds	r3, r5, r4
   d4120:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
   d4124:	7899      	ldrb	r1, [r3, #2]
   d4126:	78db      	ldrb	r3, [r3, #3]
   d4128:	3402      	adds	r4, #2
   d412a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d412e:	f7ff ffd8 	bl	d40e2 <_Z12print_resultPKct>
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
   d4132:	2c0e      	cmp	r4, #14
   d4134:	d1f3      	bne.n	d411e <_Z12parse_resultPh+0xa>
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);

    }

    return NO_ERROR1;
   d4136:	2000      	movs	r0, #0
   d4138:	bd70      	pop	{r4, r5, r6, pc}

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
   d413a:	f04f 30ff 	mov.w	r0, #4294967295
        print_result(str[i - 1], value);

    }

    return NO_ERROR1;
}
   d413e:	bd70      	pop	{r4, r5, r6, pc}
   d4140:	2003e1fc 	.word	0x2003e1fc

000d4144 <_Z18parse_result_valuePh>:

HM330XErrorCode parse_result_value(uint8_t* data) {
   d4144:	b538      	push	{r3, r4, r5, lr}
    if (NULL == data) {
   d4146:	4605      	mov	r5, r0
   d4148:	b3a0      	cbz	r0, d41b4 <_Z18parse_result_valuePh+0x70>
   d414a:	2400      	movs	r4, #0
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
        SERIAL_OUTPUT.print(data[i], HEX);
   d414c:	f002 fd96 	bl	d6c7c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4150:	2210      	movs	r2, #16
   d4152:	5d29      	ldrb	r1, [r5, r4]
   d4154:	f002 f841 	bl	d61da <_ZN5Print11printNumberEmh>
        SERIAL_OUTPUT.print("  ");
   d4158:	f002 fd90 	bl	d6c7c <_Z16_fetch_usbserialv>
   d415c:	4917      	ldr	r1, [pc, #92]	; (d41bc <_Z18parse_result_valuePh+0x78>)
   d415e:	f002 f81d 	bl	d619c <_ZN5Print5printEPKc>
        if ((0 == (i) % 5) || (0 == i)) {
   d4162:	2305      	movs	r3, #5
   d4164:	fb94 f3f3 	sdiv	r3, r4, r3
   d4168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d416c:	429c      	cmp	r4, r3
   d416e:	d000      	beq.n	d4172 <_Z18parse_result_valuePh+0x2e>
   d4170:	b924      	cbnz	r4, d417c <_Z18parse_result_valuePh+0x38>
            SERIAL_OUTPUT.println("");
   d4172:	f002 fd83 	bl	d6c7c <_Z16_fetch_usbserialv>
   d4176:	4912      	ldr	r1, [pc, #72]	; (d41c0 <_Z18parse_result_valuePh+0x7c>)
   d4178:	f002 f823 	bl	d61c2 <_ZN5Print7printlnEPKc>

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
   d417c:	3401      	adds	r4, #1
   d417e:	2c1c      	cmp	r4, #28
   d4180:	d1e4      	bne.n	d414c <_Z18parse_result_valuePh+0x8>
   d4182:	1e6a      	subs	r2, r5, #1
   d4184:	f105 011b 	add.w	r1, r5, #27
   d4188:	2300      	movs	r3, #0
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
        sum += data[i];
   d418a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d418e:	4403      	add	r3, r0
        if ((0 == (i) % 5) || (0 == i)) {
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d4190:	428a      	cmp	r2, r1
        sum += data[i];
   d4192:	b2db      	uxtb	r3, r3
        if ((0 == (i) % 5) || (0 == i)) {
            SERIAL_OUTPUT.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d4194:	d1f9      	bne.n	d418a <_Z18parse_result_valuePh+0x46>
        sum += data[i];
    }
    if (sum != data[28]) {
   d4196:	7f2a      	ldrb	r2, [r5, #28]
   d4198:	429a      	cmp	r2, r3
   d419a:	d004      	beq.n	d41a6 <_Z18parse_result_valuePh+0x62>
        SERIAL_OUTPUT.println("wrong checkSum!!!!");
   d419c:	f002 fd6e 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41a0:	4908      	ldr	r1, [pc, #32]	; (d41c4 <_Z18parse_result_valuePh+0x80>)
   d41a2:	f002 f80e 	bl	d61c2 <_ZN5Print7printlnEPKc>
    }
    SERIAL_OUTPUT.println("");
   d41a6:	f002 fd69 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41aa:	4905      	ldr	r1, [pc, #20]	; (d41c0 <_Z18parse_result_valuePh+0x7c>)
   d41ac:	f002 f809 	bl	d61c2 <_ZN5Print7printlnEPKc>
    return NO_ERROR1;
   d41b0:	2000      	movs	r0, #0
   d41b2:	bd38      	pop	{r3, r4, r5, pc}
    return NO_ERROR1;
}

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
   d41b4:	f04f 30ff 	mov.w	r0, #4294967295
    if (sum != data[28]) {
        SERIAL_OUTPUT.println("wrong checkSum!!!!");
    }
    SERIAL_OUTPUT.println("");
    return NO_ERROR1;
}
   d41b8:	bd38      	pop	{r3, r4, r5, pc}
   d41ba:	bf00      	nop
   d41bc:	000d9790 	.word	0x000d9790
   d41c0:	000d9baa 	.word	0x000d9baa
   d41c4:	000d9793 	.word	0x000d9793

000d41c8 <setup>:
double alt;
unsigned int status;

int delayStart;

void setup() {
   d41c8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d41ca:	f002 fd57 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41d2:	f002 fd47 	bl	d6c64 <_ZN9USBSerial5beginEl>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d41d6:	f002 fd51 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41da:	491b      	ldr	r1, [pc, #108]	; (d4248 <setup+0x80>)
   d41dc:	f001 fffb 	bl	d61d6 <_ZN5Print7printlnEPK19__FlashStringHelper>

    SERIAL_OUTPUT.println("Serial start");
   d41e0:	f002 fd4c 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41e4:	4919      	ldr	r1, [pc, #100]	; (d424c <setup+0x84>)
   d41e6:	f001 ffec 	bl	d61c2 <_ZN5Print7printlnEPKc>
    if (sensor.init()) {
   d41ea:	4819      	ldr	r0, [pc, #100]	; (d4250 <setup+0x88>)
   d41ec:	f000 fb9b 	bl	d4926 <_ZN6HM330X4initEv>
   d41f0:	b128      	cbz	r0, d41fe <setup+0x36>
        SERIAL_OUTPUT.println("HM330X init failed!!!");
   d41f2:	f002 fd43 	bl	d6c7c <_Z16_fetch_usbserialv>
   d41f6:	4917      	ldr	r1, [pc, #92]	; (d4254 <setup+0x8c>)
   d41f8:	f001 ffe3 	bl	d61c2 <_ZN5Print7printlnEPKc>
   d41fc:	e7fe      	b.n	d41fc <setup+0x34>
        while (1);
    }
    
    status = bme.begin();
   d41fe:	2177      	movs	r1, #119	; 0x77
   d4200:	4815      	ldr	r0, [pc, #84]	; (d4258 <setup+0x90>)
   d4202:	f001 fa3f 	bl	d5684 <_ZN15Adafruit_BME6805beginEh>
   d4206:	4b15      	ldr	r3, [pc, #84]	; (d425c <setup+0x94>)
   d4208:	6018      	str	r0, [r3, #0]
    if (!status) {
   d420a:	b928      	cbnz	r0, d4218 <setup+0x50>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
   d420c:	f002 fd36 	bl	d6c7c <_Z16_fetch_usbserialv>
   d4210:	4913      	ldr	r1, [pc, #76]	; (d4260 <setup+0x98>)
   d4212:	f001 ffd6 	bl	d61c2 <_ZN5Print7printlnEPKc>
   d4216:	e7fe      	b.n	d4216 <setup+0x4e>
      while (1);
    }

    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
   d4218:	2104      	movs	r1, #4
   d421a:	480f      	ldr	r0, [pc, #60]	; (d4258 <setup+0x90>)
   d421c:	f001 fb81 	bl	d5922 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
   d4220:	2102      	movs	r1, #2
   d4222:	480d      	ldr	r0, [pc, #52]	; (d4258 <setup+0x90>)
   d4224:	f001 fb8a 	bl	d593c <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
   d4228:	2103      	movs	r1, #3
   d422a:	480b      	ldr	r0, [pc, #44]	; (d4258 <setup+0x90>)
   d422c:	f001 fb93 	bl	d5956 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   d4230:	2102      	movs	r1, #2
   d4232:	4809      	ldr	r0, [pc, #36]	; (d4258 <setup+0x90>)
   d4234:	f001 fb9c 	bl	d5970 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
   d4238:	2296      	movs	r2, #150	; 0x96
   d423a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d423e:	4806      	ldr	r0, [pc, #24]	; (d4258 <setup+0x90>)
}
   d4240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms
   d4244:	f001 bb5f 	b.w	d5906 <_ZN15Adafruit_BME68012setGasHeaterEtt>
   d4248:	000d97a6 	.word	0x000d97a6
   d424c:	000d97b2 	.word	0x000d97b2
   d4250:	2003e30c 	.word	0x2003e30c
   d4254:	000d97bf 	.word	0x000d97bf
   d4258:	2003e310 	.word	0x2003e310
   d425c:	2003e3c8 	.word	0x2003e3c8
   d4260:	000d97d5 	.word	0x000d97d5

000d4264 <_Z11printValuesv>:
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d4264:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d4266:	f002 fd09 	bl	d6c7c <_Z16_fetch_usbserialv>
   d426a:	492d      	ldr	r1, [pc, #180]	; (d4320 <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d426c:	4c2d      	ldr	r4, [pc, #180]	; (d4324 <_Z11printValuesv+0xc0>)
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d426e:	f001 ff95 	bl	d619c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4272:	f002 fd03 	bl	d6c7c <_Z16_fetch_usbserialv>
   d4276:	4605      	mov	r5, r0
   d4278:	4620      	mov	r0, r4
   d427a:	f001 faf7 	bl	d586c <_ZN15Adafruit_BME68015readTemperatureEv>
   d427e:	2102      	movs	r1, #2
   d4280:	4628      	mov	r0, r5
   d4282:	f002 f889 	bl	d6398 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d4286:	f002 fcf9 	bl	d6c7c <_Z16_fetch_usbserialv>
   d428a:	4927      	ldr	r1, [pc, #156]	; (d4328 <_Z11printValuesv+0xc4>)
   d428c:	f001 ff99 	bl	d61c2 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4290:	f002 fcf4 	bl	d6c7c <_Z16_fetch_usbserialv>
   d4294:	4925      	ldr	r1, [pc, #148]	; (d432c <_Z11printValuesv+0xc8>)
   d4296:	f001 ff81 	bl	d619c <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d429a:	f002 fcef 	bl	d6c7c <_Z16_fetch_usbserialv>
   d429e:	4605      	mov	r5, r0
   d42a0:	4620      	mov	r0, r4
   d42a2:	f001 faea 	bl	d587a <_ZN15Adafruit_BME68012readPressureEv>
   d42a6:	eddf 7a22 	vldr	s15, [pc, #136]	; d4330 <_Z11printValuesv+0xcc>
   d42aa:	2102      	movs	r1, #2
   d42ac:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d42b0:	4628      	mov	r0, r5
   d42b2:	f002 f871 	bl	d6398 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d42b6:	f002 fce1 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42ba:	491e      	ldr	r1, [pc, #120]	; (d4334 <_Z11printValuesv+0xd0>)
   d42bc:	f001 ff81 	bl	d61c2 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d42c0:	f002 fcdc 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42c4:	491c      	ldr	r1, [pc, #112]	; (d4338 <_Z11printValuesv+0xd4>)
   d42c6:	f001 ff69 	bl	d619c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d42ca:	f002 fcd7 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42ce:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d433c <_Z11printValuesv+0xd8>
   d42d2:	4605      	mov	r5, r0
   d42d4:	4620      	mov	r0, r4
   d42d6:	f001 fad7 	bl	d5888 <_ZN15Adafruit_BME68012readAltitudeEf>
   d42da:	2102      	movs	r1, #2
   d42dc:	4628      	mov	r0, r5
   d42de:	f002 f85b 	bl	d6398 <_ZN5Print5printEfi>
    Serial.println(" m");
   d42e2:	f002 fccb 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42e6:	4916      	ldr	r1, [pc, #88]	; (d4340 <_Z11printValuesv+0xdc>)
   d42e8:	f001 ff6b 	bl	d61c2 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d42ec:	f002 fcc6 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42f0:	4914      	ldr	r1, [pc, #80]	; (d4344 <_Z11printValuesv+0xe0>)
   d42f2:	f001 ff53 	bl	d619c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d42f6:	f002 fcc1 	bl	d6c7c <_Z16_fetch_usbserialv>
   d42fa:	4605      	mov	r5, r0
   d42fc:	4620      	mov	r0, r4
   d42fe:	f001 fafb 	bl	d58f8 <_ZN15Adafruit_BME68012readHumidityEv>
   d4302:	2102      	movs	r1, #2
   d4304:	4628      	mov	r0, r5
   d4306:	f002 f847 	bl	d6398 <_ZN5Print5printEfi>
    Serial.println(" %");
   d430a:	f002 fcb7 	bl	d6c7c <_Z16_fetch_usbserialv>
   d430e:	490e      	ldr	r1, [pc, #56]	; (d4348 <_Z11printValuesv+0xe4>)
   d4310:	f001 ff57 	bl	d61c2 <_ZN5Print7printlnEPKc>

    Serial.println();
   d4314:	f002 fcb2 	bl	d6c7c <_Z16_fetch_usbserialv>
}
   d4318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d431c:	f001 bf45 	b.w	d61aa <_ZN5Print7printlnEv>
   d4320:	000d9809 	.word	0x000d9809
   d4324:	2003e310 	.word	0x2003e310
   d4328:	000d9818 	.word	0x000d9818
   d432c:	000d981c 	.word	0x000d981c
   d4330:	42c80000 	.word	0x42c80000
   d4334:	000d9828 	.word	0x000d9828
   d4338:	000d982d 	.word	0x000d982d
   d433c:	447d5000 	.word	0x447d5000
   d4340:	000d9841 	.word	0x000d9841
   d4344:	000d9844 	.word	0x000d9844
   d4348:	000d9850 	.word	0x000d9850

000d434c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d434c:	b538      	push	{r3, r4, r5, lr}
   d434e:	4604      	mov	r4, r0
   d4350:	ed2d 8b02 	vpush	{d8}
   d4354:	460d      	mov	r5, r1
   d4356:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d435a:	f000 fa77 	bl	d484c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d435e:	4629      	mov	r1, r5
   d4360:	4620      	mov	r0, r4
   d4362:	2201      	movs	r2, #1
   d4364:	f000 f9e6 	bl	d4734 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4368:	4620      	mov	r0, r4
   d436a:	213a      	movs	r1, #58	; 0x3a
   d436c:	f000 f996 	bl	d469c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4370:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4374:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4378:	4620      	mov	r0, r4
	}
   d437a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d437e:	f000 ba89 	b.w	d4894 <_ZN10JsonWriter11insertValueEf>
	...

000d4384 <_Z18createEventPayLoadfffi>:
  
  createEventPayLoad(temp,pres,hum,PM25);
    
}

void createEventPayLoad(float tempValue, float presValue, float humValue, int PM25Value) {
   d4384:	b510      	push	{r4, lr}
   d4386:	ed2d 8b04 	vpush	{d8-d9}
   d438a:	b0d2      	sub	sp, #328	; 0x148
   d438c:	4604      	mov	r4, r0
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d438e:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4392:	a912      	add	r1, sp, #72	; 0x48
   d4394:	a806      	add	r0, sp, #24
   d4396:	eef0 8a60 	vmov.f32	s17, s1
   d439a:	eeb0 8a41 	vmov.f32	s16, s2
   d439e:	eeb0 9a40 	vmov.f32	s18, s0
   d43a2:	f000 f969 	bl	d4678 <_ZN10JsonWriterC1EPcj>
   d43a6:	4b29      	ldr	r3, [pc, #164]	; (d444c <_Z18createEventPayLoadfffi+0xc8>)
   d43a8:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d43aa:	227d      	movs	r2, #125	; 0x7d
   d43ac:	217b      	movs	r1, #123	; 0x7b
   d43ae:	a806      	add	r0, sp, #24
   d43b0:	f000 fa57 	bl	d4862 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Temperature", tempValue);
   d43b4:	eeb0 0a49 	vmov.f32	s0, s18
   d43b8:	4925      	ldr	r1, [pc, #148]	; (d4450 <_Z18createEventPayLoadfffi+0xcc>)
   d43ba:	a806      	add	r0, sp, #24
   d43bc:	f7ff ffc6 	bl	d434c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d43c0:	eeb0 0a68 	vmov.f32	s0, s17
   d43c4:	4923      	ldr	r1, [pc, #140]	; (d4454 <_Z18createEventPayLoadfffi+0xd0>)
   d43c6:	a806      	add	r0, sp, #24
   d43c8:	f7ff ffc0 	bl	d434c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d43cc:	eeb0 0a48 	vmov.f32	s0, s16
   d43d0:	4921      	ldr	r1, [pc, #132]	; (d4458 <_Z18createEventPayLoadfffi+0xd4>)
   d43d2:	a806      	add	r0, sp, #24
   d43d4:	f7ff ffba 	bl	d434c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d43d8:	a806      	add	r0, sp, #24
   d43da:	f000 fa37 	bl	d484c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d43de:	2201      	movs	r2, #1
   d43e0:	491e      	ldr	r1, [pc, #120]	; (d445c <_Z18createEventPayLoadfffi+0xd8>)
   d43e2:	a806      	add	r0, sp, #24
   d43e4:	f000 f9a6 	bl	d4734 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d43e8:	213a      	movs	r1, #58	; 0x3a
   d43ea:	a806      	add	r0, sp, #24
   d43ec:	f000 f956 	bl	d469c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d43f0:	4622      	mov	r2, r4
   d43f2:	491b      	ldr	r1, [pc, #108]	; (d4460 <_Z18createEventPayLoadfffi+0xdc>)
   d43f4:	a806      	add	r0, sp, #24
   d43f6:	f000 f990 	bl	d471a <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d43fa:	a806      	add	r0, sp, #24
   d43fc:	f000 f95c 	bl	d46b8 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4400:	9b07      	ldr	r3, [sp, #28]
   d4402:	9303      	str	r3, [sp, #12]
   d4404:	4b17      	ldr	r3, [pc, #92]	; (d4464 <_Z18createEventPayLoadfffi+0xe0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4406:	9a03      	ldr	r2, [sp, #12]
   d4408:	781b      	ldrb	r3, [r3, #0]
   d440a:	f88d 3000 	strb.w	r3, [sp]
   d440e:	4916      	ldr	r1, [pc, #88]	; (d4468 <_Z18createEventPayLoadfffi+0xe4>)
   d4410:	233c      	movs	r3, #60	; 0x3c
   d4412:	a804      	add	r0, sp, #16
   d4414:	f002 f9dc 	bl	d67d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4418:	9c05      	ldr	r4, [sp, #20]
   d441a:	b17c      	cbz	r4, d443c <_Z18createEventPayLoadfffi+0xb8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d441c:	6863      	ldr	r3, [r4, #4]
   d441e:	3b01      	subs	r3, #1
   d4420:	6063      	str	r3, [r4, #4]
   d4422:	b95b      	cbnz	r3, d443c <_Z18createEventPayLoadfffi+0xb8>
        {
          _M_dispose();
   d4424:	6823      	ldr	r3, [r4, #0]
   d4426:	4620      	mov	r0, r4
   d4428:	689b      	ldr	r3, [r3, #8]
   d442a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d442c:	68a3      	ldr	r3, [r4, #8]
   d442e:	3b01      	subs	r3, #1
   d4430:	60a3      	str	r3, [r4, #8]
   d4432:	b91b      	cbnz	r3, d443c <_Z18createEventPayLoadfffi+0xb8>
            _M_destroy();
   d4434:	6823      	ldr	r3, [r4, #0]
   d4436:	4620      	mov	r0, r4
   d4438:	68db      	ldr	r3, [r3, #12]
   d443a:	4798      	blx	r3
  createEventPayLoad(temp,pres,hum,PM25);
    
}

void createEventPayLoad(float tempValue, float presValue, float humValue, int PM25Value) {
  JsonWriterStatic<256> jw;
   d443c:	a806      	add	r0, sp, #24
   d443e:	f7ff fe3b 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("PM25", PM25Value);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d4442:	b052      	add	sp, #328	; 0x148
   d4444:	ecbd 8b04 	vpop	{d8-d9}
   d4448:	bd10      	pop	{r4, pc}
   d444a:	bf00      	nop
   d444c:	000d9788 	.word	0x000d9788
   d4450:	000d9853 	.word	0x000d9853
   d4454:	000d985f 	.word	0x000d985f
   d4458:	000d9868 	.word	0x000d9868
   d445c:	000d9871 	.word	0x000d9871
   d4460:	000d9876 	.word	0x000d9876
   d4464:	2003e30d 	.word	0x2003e30d
   d4468:	000d9879 	.word	0x000d9879
   d446c:	00000000 	.word	0x00000000

000d4470 <loop>:
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320*C for 150 ms
}

void loop() {
   d4470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4472:	4847      	ldr	r0, [pc, #284]	; (d4590 <loop+0x120>)
   d4474:	4c47      	ldr	r4, [pc, #284]	; (d4594 <loop+0x124>)
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4476:	4e48      	ldr	r6, [pc, #288]	; (d4598 <loop+0x128>)
  hum = bme.readHumidity();
   d4478:	4d48      	ldr	r5, [pc, #288]	; (d459c <loop+0x12c>)
    bme.setGasHeater(320, 150); // 320*C for 150 ms
}

void loop() {

  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d447a:	f001 f9f7 	bl	d586c <_ZN15Adafruit_BME68015readTemperatureEv>
   d447e:	ee10 0a10 	vmov	r0, s0
   d4482:	f004 fba5 	bl	d8bd0 <__aeabi_f2d>
   d4486:	a33e      	add	r3, pc, #248	; (adr r3, d4580 <loop+0x110>)
   d4488:	e9d3 2300 	ldrd	r2, r3, [r3]
   d448c:	f004 fbf4 	bl	d8c78 <__aeabi_dmul>
   d4490:	2200      	movs	r2, #0
   d4492:	4b43      	ldr	r3, [pc, #268]	; (d45a0 <loop+0x130>)
   d4494:	f004 fa3e 	bl	d8914 <__adddf3>
   d4498:	e9c4 0100 	strd	r0, r1, [r4]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d449c:	483c      	ldr	r0, [pc, #240]	; (d4590 <loop+0x120>)
   d449e:	f001 f9ec 	bl	d587a <_ZN15Adafruit_BME68012readPressureEv>
   d44a2:	eddf 7a40 	vldr	s15, [pc, #256]	; d45a4 <loop+0x134>
   d44a6:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d44aa:	4637      	mov	r7, r6
   d44ac:	ee17 0a10 	vmov	r0, s14
   d44b0:	f004 fb8e 	bl	d8bd0 <__aeabi_f2d>
   d44b4:	a334      	add	r3, pc, #208	; (adr r3, d4588 <loop+0x118>)
   d44b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ba:	f004 fbdd 	bl	d8c78 <__aeabi_dmul>
   d44be:	2200      	movs	r2, #0
   d44c0:	4b39      	ldr	r3, [pc, #228]	; (d45a8 <loop+0x138>)
   d44c2:	f004 fa27 	bl	d8914 <__adddf3>
   d44c6:	e9c6 0100 	strd	r0, r1, [r6]
  hum = bme.readHumidity();
   d44ca:	4831      	ldr	r0, [pc, #196]	; (d4590 <loop+0x120>)
   d44cc:	f001 fa14 	bl	d58f8 <_ZN15Adafruit_BME68012readHumidityEv>
   d44d0:	ee10 0a10 	vmov	r0, s0
   d44d4:	f004 fb7c 	bl	d8bd0 <__aeabi_f2d>
   d44d8:	e9c5 0100 	strd	r0, r1, [r5]
  printValues();
   d44dc:	f7ff fec2 	bl	d4264 <_Z11printValuesv>

  if (sensor.read_sensor_value(buf, 29)) {
   d44e0:	221d      	movs	r2, #29
   d44e2:	4932      	ldr	r1, [pc, #200]	; (d45ac <loop+0x13c>)
   d44e4:	4832      	ldr	r0, [pc, #200]	; (d45b0 <loop+0x140>)
   d44e6:	f000 fa29 	bl	d493c <_ZN6HM330X17read_sensor_valueEPhm>
   d44ea:	462e      	mov	r6, r5
   d44ec:	b120      	cbz	r0, d44f8 <loop+0x88>
        SERIAL_OUTPUT.println("HM330X read result failed!!!");
   d44ee:	f002 fbc5 	bl	d6c7c <_Z16_fetch_usbserialv>
   d44f2:	4930      	ldr	r1, [pc, #192]	; (d45b4 <loop+0x144>)
   d44f4:	f001 fe65 	bl	d61c2 <_ZN5Print7printlnEPKc>
    }
    Serial.println("Starting Display");
    parse_result_value(buf);
   d44f8:	4d2c      	ldr	r5, [pc, #176]	; (d45ac <loop+0x13c>)
  printValues();

  if (sensor.read_sensor_value(buf, 29)) {
        SERIAL_OUTPUT.println("HM330X read result failed!!!");
    }
    Serial.println("Starting Display");
   d44fa:	f002 fbbf 	bl	d6c7c <_Z16_fetch_usbserialv>
   d44fe:	492e      	ldr	r1, [pc, #184]	; (d45b8 <loop+0x148>)
   d4500:	f001 fe5f 	bl	d61c2 <_ZN5Print7printlnEPKc>
    parse_result_value(buf);
   d4504:	4628      	mov	r0, r5
   d4506:	f7ff fe1d 	bl	d4144 <_Z18parse_result_valuePh>
    Serial.println("Printing Concentrations");
   d450a:	f002 fbb7 	bl	d6c7c <_Z16_fetch_usbserialv>
   d450e:	492b      	ldr	r1, [pc, #172]	; (d45bc <loop+0x14c>)
   d4510:	f001 fe57 	bl	d61c2 <_ZN5Print7printlnEPKc>
    parse_result(buf);
   d4514:	4628      	mov	r0, r5
   d4516:	f7ff fdfd 	bl	d4114 <_Z12parse_resultPh>
    Serial.println("PM2.5 Data");
   d451a:	f002 fbaf 	bl	d6c7c <_Z16_fetch_usbserialv>
   d451e:	4928      	ldr	r1, [pc, #160]	; (d45c0 <loop+0x150>)
   d4520:	f001 fe4f 	bl	d61c2 <_ZN5Print7printlnEPKc>
    PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4524:	7b6b      	ldrb	r3, [r5, #13]
   d4526:	7b29      	ldrb	r1, [r5, #12]
   d4528:	4d26      	ldr	r5, [pc, #152]	; (d45c4 <loop+0x154>)
   d452a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        print_result(str[6 - 1], PM25);
   d452e:	4b26      	ldr	r3, [pc, #152]	; (d45c8 <loop+0x158>)
    Serial.println("Starting Display");
    parse_result_value(buf);
    Serial.println("Printing Concentrations");
    parse_result(buf);
    Serial.println("PM2.5 Data");
    PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4530:	6029      	str	r1, [r5, #0]
        print_result(str[6 - 1], PM25);
   d4532:	6958      	ldr	r0, [r3, #20]
   d4534:	f7ff fdd5 	bl	d40e2 <_Z12print_resultPKct>
    SERIAL_OUTPUT.println("");
   d4538:	f002 fba0 	bl	d6c7c <_Z16_fetch_usbserialv>
   d453c:	4923      	ldr	r1, [pc, #140]	; (d45cc <loop+0x15c>)
   d453e:	f001 fe40 	bl	d61c2 <_ZN5Print7printlnEPKc>
    delay(60000);
   d4542:	f64e 2060 	movw	r0, #60000	; 0xea60
   d4546:	f001 ff49 	bl	d63dc <delay>
  
  createEventPayLoad(temp,pres,hum,PM25);
   d454a:	e9d6 0100 	ldrd	r0, r1, [r6]
   d454e:	f004 fe8b 	bl	d9268 <__aeabi_d2f>
   d4552:	9001      	str	r0, [sp, #4]
   d4554:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4558:	f004 fe86 	bl	d9268 <__aeabi_d2f>
   d455c:	9000      	str	r0, [sp, #0]
   d455e:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4562:	f004 fe81 	bl	d9268 <__aeabi_d2f>
   d4566:	ed9d 1a01 	vldr	s2, [sp, #4]
   d456a:	eddd 0a00 	vldr	s1, [sp]
   d456e:	ee00 0a10 	vmov	s0, r0
   d4572:	6828      	ldr	r0, [r5, #0]
    
}
   d4574:	b003      	add	sp, #12
   d4576:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
        print_result(str[6 - 1], PM25);
    SERIAL_OUTPUT.println("");
    delay(60000);
  
  createEventPayLoad(temp,pres,hum,PM25);
   d457a:	f7ff bf03 	b.w	d4384 <_Z18createEventPayLoadfffi>
   d457e:	bf00      	nop
   d4580:	cccccccd 	.word	0xcccccccd
   d4584:	3ffccccc 	.word	0x3ffccccc
   d4588:	c100e6b0 	.word	0xc100e6b0
   d458c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4590:	2003e310 	.word	0x2003e310
   d4594:	2003e390 	.word	0x2003e390
   d4598:	2003e3c0 	.word	0x2003e3c0
   d459c:	2003e3b8 	.word	0x2003e3b8
   d45a0:	40400000 	.word	0x40400000
   d45a4:	42c80000 	.word	0x42c80000
   d45a8:	40140000 	.word	0x40140000
   d45ac:	2003e398 	.word	0x2003e398
   d45b0:	2003e30c 	.word	0x2003e30c
   d45b4:	000d9882 	.word	0x000d9882
   d45b8:	000d989f 	.word	0x000d989f
   d45bc:	000d98b0 	.word	0x000d98b0
   d45c0:	000d98c8 	.word	0x000d98c8
   d45c4:	2003e388 	.word	0x2003e388
   d45c8:	2003e1fc 	.word	0x2003e1fc
   d45cc:	000d9baa 	.word	0x000d9baa

000d45d0 <_GLOBAL__sub_I_bme>:
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
}
   d45d0:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d45d2:	4b08      	ldr	r3, [pc, #32]	; (d45f4 <_GLOBAL__sub_I_bme+0x24>)
   d45d4:	2201      	movs	r2, #1
   d45d6:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45d8:	f001 f9ea 	bl	d59b0 <HAL_Pin_Map>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>

#define SEALEVELPRESSURE_HPA 1013.25
Adafruit_BME680 bme; // I2C
   d45dc:	f04f 31ff 	mov.w	r1, #4294967295
   d45e0:	4805      	ldr	r0, [pc, #20]	; (d45f8 <_GLOBAL__sub_I_bme+0x28>)
   d45e2:	f001 f839 	bl	d5658 <_ZN15Adafruit_BME680C1Ea>
    #define SERIAL_OUTPUT SerialUSB
#else
    #define SERIAL_OUTPUT Serial
#endif

HM330X sensor;
   d45e6:	2140      	movs	r1, #64	; 0x40
   d45e8:	4804      	ldr	r0, [pc, #16]	; (d45fc <_GLOBAL__sub_I_bme+0x2c>)
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
}
   d45ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    #define SERIAL_OUTPUT SerialUSB
#else
    #define SERIAL_OUTPUT Serial
#endif

HM330X sensor;
   d45ee:	f000 b991 	b.w	d4914 <_ZN6HM330XC1Eh>
   d45f2:	bf00      	nop
   d45f4:	2003e30d 	.word	0x2003e30d
   d45f8:	2003e310 	.word	0x2003e310
   d45fc:	2003e30c 	.word	0x2003e30c

000d4600 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4600:	f001 b9d6 	b.w	d59b0 <HAL_Pin_Map>

000d4604 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4604:	f001 b9d4 	b.w	d59b0 <HAL_Pin_Map>

000d4608 <_GLOBAL__sub_I__Z11printBufferPht>:
   d4608:	f001 b9d2 	b.w	d59b0 <HAL_Pin_Map>

000d460c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d460c:	b510      	push	{r4, lr}
   d460e:	4b05      	ldr	r3, [pc, #20]	; (d4624 <_ZN10JsonBufferD1Ev+0x18>)
   d4610:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4612:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4614:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4616:	b91b      	cbnz	r3, d4620 <_ZN10JsonBufferD1Ev+0x14>
   d4618:	6840      	ldr	r0, [r0, #4]
   d461a:	b108      	cbz	r0, d4620 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d461c:	f001 fbf4 	bl	d5e08 <free>
	}
}
   d4620:	4620      	mov	r0, r4
   d4622:	bd10      	pop	{r4, pc}
   d4624:	000d9a60 	.word	0x000d9a60

000d4628 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4628:	b510      	push	{r4, lr}
   d462a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d462c:	f7ff ffee 	bl	d460c <_ZN10JsonBufferD1Ev>
   d4630:	4620      	mov	r0, r4
   d4632:	2114      	movs	r1, #20
   d4634:	f002 fed0 	bl	d73d8 <_ZdlPvj>
   d4638:	4620      	mov	r0, r4
   d463a:	bd10      	pop	{r4, pc}

000d463c <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d463c:	b510      	push	{r4, lr}
   d463e:	4b03      	ldr	r3, [pc, #12]	; (d464c <_ZN10JsonWriterD1Ev+0x10>)
   d4640:	6003      	str	r3, [r0, #0]
   d4642:	4604      	mov	r4, r0
   d4644:	f7ff ffe2 	bl	d460c <_ZN10JsonBufferD1Ev>

}
   d4648:	4620      	mov	r0, r4
   d464a:	bd10      	pop	{r4, pc}
   d464c:	000d9a70 	.word	0x000d9a70

000d4650 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4650:	b510      	push	{r4, lr}
   d4652:	4604      	mov	r4, r0

}
   d4654:	f7ff fff2 	bl	d463c <_ZN10JsonWriterD1Ev>
   d4658:	4620      	mov	r0, r4
   d465a:	2130      	movs	r1, #48	; 0x30
   d465c:	f002 febc 	bl	d73d8 <_ZdlPvj>
   d4660:	4620      	mov	r0, r4
   d4662:	bd10      	pop	{r4, pc}

000d4664 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4664:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d4666:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d4668:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d466a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d466c:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d466e:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d4670:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d4674:	4770      	bx	lr
	...

000d4678 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4678:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d467a:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d467c:	60c3      	str	r3, [r0, #12]
   d467e:	2301      	movs	r3, #1
   d4680:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4682:	4b05      	ldr	r3, [pc, #20]	; (d4698 <_ZN10JsonWriterC1EPcj+0x20>)
   d4684:	6003      	str	r3, [r0, #0]
   d4686:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d468a:	6041      	str	r1, [r0, #4]
   d468c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d468e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4690:	f7ff ffe8 	bl	d4664 <_ZN10JsonWriter4initEv>
}
   d4694:	bd10      	pop	{r4, pc}
   d4696:	bf00      	nop
   d4698:	000d9a70 	.word	0x000d9a70

000d469c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d469c:	68c3      	ldr	r3, [r0, #12]
   d469e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d46a0:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d46a2:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d46a4:	bf3f      	itttt	cc
   d46a6:	6842      	ldrcc	r2, [r0, #4]
   d46a8:	1c5c      	addcc	r4, r3, #1
   d46aa:	60c4      	strcc	r4, [r0, #12]
   d46ac:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d46ae:	bf24      	itt	cs
   d46b0:	2301      	movcs	r3, #1
   d46b2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d46b6:	bd10      	pop	{r4, pc}

000d46b8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d46b8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d46ba:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d46bc:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d46be:	b143      	cbz	r3, d46d2 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d46c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d46c4:	7e59      	ldrb	r1, [r3, #25]
   d46c6:	b109      	cbz	r1, d46cc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d46c8:	f7ff ffe8 	bl	d469c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d46cc:	6963      	ldr	r3, [r4, #20]
   d46ce:	3b01      	subs	r3, #1
   d46d0:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d46d2:	68a3      	ldr	r3, [r4, #8]
   d46d4:	68e0      	ldr	r0, [r4, #12]
   d46d6:	6861      	ldr	r1, [r4, #4]
   d46d8:	4298      	cmp	r0, r3
   d46da:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d46de:	bf2a      	itet	cs
   d46e0:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d46e2:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d46e4:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d46e8:	bd10      	pop	{r4, pc}

000d46ea <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d46ea:	b570      	push	{r4, r5, r6, lr}
   d46ec:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d46ee:	68c0      	ldr	r0, [r0, #12]
   d46f0:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d46f2:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d46f4:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d46f6:	4613      	mov	r3, r2
   d46f8:	4430      	add	r0, r6
   d46fa:	460a      	mov	r2, r1
   d46fc:	4629      	mov	r1, r5
   d46fe:	f001 fb8b 	bl	d5e18 <vsnprintf>
	if (count <= spaceAvailable) {
   d4702:	4285      	cmp	r5, r0
		offset += count;
   d4704:	bf2d      	iteet	cs
   d4706:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d4708:	68a3      	ldrcc	r3, [r4, #8]
   d470a:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d470c:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d470e:	bf36      	itet	cc
   d4710:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4712:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4714:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d4718:	bd70      	pop	{r4, r5, r6, pc}

000d471a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d471a:	b40e      	push	{r1, r2, r3}
   d471c:	b503      	push	{r0, r1, lr}
   d471e:	aa03      	add	r2, sp, #12
   d4720:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d4724:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d4726:	f7ff ffe0 	bl	d46ea <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d472a:	b002      	add	sp, #8
   d472c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4730:	b003      	add	sp, #12
   d4732:	4770      	bx	lr

000d4734 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4738:	4604      	mov	r4, r0
   d473a:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d473c:	4617      	mov	r7, r2
   d473e:	b112      	cbz	r2, d4746 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d4740:	2122      	movs	r1, #34	; 0x22
   d4742:	f7ff ffab 	bl	d469c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d4746:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4748:	5d71      	ldrb	r1, [r6, r5]
   d474a:	eb06 0805 	add.w	r8, r6, r5
   d474e:	2900      	cmp	r1, #0
   d4750:	d071      	beq.n	d4836 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d4752:	68e2      	ldr	r2, [r4, #12]
   d4754:	68a3      	ldr	r3, [r4, #8]
   d4756:	429a      	cmp	r2, r3
   d4758:	d26d      	bcs.n	d4836 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d475a:	060b      	lsls	r3, r1, #24
   d475c:	d533      	bpl.n	d47c6 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d475e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d4762:	2be0      	cmp	r3, #224	; 0xe0
   d4764:	d117      	bne.n	d4796 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4766:	f898 3001 	ldrb.w	r3, [r8, #1]
   d476a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d476e:	2a80      	cmp	r2, #128	; 0x80
   d4770:	d111      	bne.n	d4796 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d4772:	f105 0802 	add.w	r8, r5, #2
   d4776:	f816 2008 	ldrb.w	r2, [r6, r8]
   d477a:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d477e:	2880      	cmp	r0, #128	; 0x80
   d4780:	d109      	bne.n	d4796 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4782:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d4786:	019b      	lsls	r3, r3, #6
   d4788:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d478c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4790:	431a      	orrs	r2, r3
   d4792:	b292      	uxth	r2, r2
   d4794:	e011      	b.n	d47ba <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d4796:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d479a:	2bc0      	cmp	r3, #192	; 0xc0
   d479c:	d146      	bne.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d479e:	f105 0801 	add.w	r8, r5, #1
   d47a2:	f816 3008 	ldrb.w	r3, [r6, r8]
   d47a6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d47aa:	2a80      	cmp	r2, #128	; 0x80
   d47ac:	d13e      	bne.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d47ae:	0189      	lsls	r1, r1, #6
   d47b0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d47b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d47b8:	431a      	orrs	r2, r3
   d47ba:	4923      	ldr	r1, [pc, #140]	; (d4848 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d47bc:	4620      	mov	r0, r4
   d47be:	f7ff ffac 	bl	d471a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d47c2:	4645      	mov	r5, r8
   d47c4:	e035      	b.n	d4832 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d47c6:	290c      	cmp	r1, #12
   d47c8:	d018      	beq.n	d47fc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d47ca:	d80b      	bhi.n	d47e4 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d47cc:	2909      	cmp	r1, #9
   d47ce:	d021      	beq.n	d4814 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d47d0:	290a      	cmp	r1, #10
   d47d2:	d019      	beq.n	d4808 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d47d4:	2908      	cmp	r1, #8
   d47d6:	d129      	bne.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d47d8:	215c      	movs	r1, #92	; 0x5c
   d47da:	4620      	mov	r0, r4
   d47dc:	f7ff ff5e 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d47e0:	2162      	movs	r1, #98	; 0x62
   d47e2:	e023      	b.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d47e4:	2922      	cmp	r1, #34	; 0x22
   d47e6:	d01b      	beq.n	d4820 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d47e8:	295c      	cmp	r1, #92	; 0x5c
   d47ea:	d019      	beq.n	d4820 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d47ec:	290d      	cmp	r1, #13
   d47ee:	d11d      	bne.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d47f0:	215c      	movs	r1, #92	; 0x5c
   d47f2:	4620      	mov	r0, r4
   d47f4:	f7ff ff52 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d47f8:	2172      	movs	r1, #114	; 0x72
   d47fa:	e017      	b.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d47fc:	215c      	movs	r1, #92	; 0x5c
   d47fe:	4620      	mov	r0, r4
   d4800:	f7ff ff4c 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4804:	2166      	movs	r1, #102	; 0x66
   d4806:	e011      	b.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d4808:	215c      	movs	r1, #92	; 0x5c
   d480a:	4620      	mov	r0, r4
   d480c:	f7ff ff46 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4810:	216e      	movs	r1, #110	; 0x6e
   d4812:	e00b      	b.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4814:	215c      	movs	r1, #92	; 0x5c
   d4816:	4620      	mov	r0, r4
   d4818:	f7ff ff40 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d481c:	2174      	movs	r1, #116	; 0x74
   d481e:	e005      	b.n	d482c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d4820:	215c      	movs	r1, #92	; 0x5c
   d4822:	4620      	mov	r0, r4
   d4824:	f7ff ff3a 	bl	d469c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d4828:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d482c:	4620      	mov	r0, r4
   d482e:	f7ff ff35 	bl	d469c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d4832:	3501      	adds	r5, #1
   d4834:	e788      	b.n	d4748 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d4836:	b12f      	cbz	r7, d4844 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d4838:	4620      	mov	r0, r4
   d483a:	2122      	movs	r1, #34	; 0x22
	}

}
   d483c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d4840:	f7ff bf2c 	b.w	d469c <_ZN10JsonWriter10insertCharEc>
   d4844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4848:	000d9a81 	.word	0x000d9a81

000d484c <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d484c:	6942      	ldr	r2, [r0, #20]
   d484e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d4852:	7e1a      	ldrb	r2, [r3, #24]
   d4854:	b112      	cbz	r2, d485c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d4856:	2200      	movs	r2, #0
   d4858:	761a      	strb	r2, [r3, #24]
   d485a:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d485c:	212c      	movs	r1, #44	; 0x2c
   d485e:	f7ff bf1d 	b.w	d469c <_ZN10JsonWriter10insertCharEc>

000d4862 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d4862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d4864:	6943      	ldr	r3, [r0, #20]
   d4866:	3301      	adds	r3, #1
   d4868:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d486a:	460e      	mov	r6, r1
   d486c:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d486e:	d80e      	bhi.n	d488e <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d4870:	f7ff ffec 	bl	d484c <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d4874:	6943      	ldr	r3, [r0, #20]
   d4876:	1c5a      	adds	r2, r3, #1
   d4878:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d487c:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d487e:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d4880:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d4882:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4884:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d4886:	f7ff ff09 	bl	d469c <_ZN10JsonWriter10insertCharEc>
   d488a:	4620      	mov	r0, r4
   d488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d488e:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4894 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d4894:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4896:	4604      	mov	r4, r0
   d4898:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d489c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d489e:	2d00      	cmp	r5, #0
   d48a0:	db0a      	blt.n	d48b8 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d48a2:	f004 f995 	bl	d8bd0 <__aeabi_f2d>
   d48a6:	462a      	mov	r2, r5
   d48a8:	e9cd 0100 	strd	r0, r1, [sp]
   d48ac:	4908      	ldr	r1, [pc, #32]	; (d48d0 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d48ae:	4620      	mov	r0, r4
   d48b0:	f7ff ff33 	bl	d471a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d48b4:	b003      	add	sp, #12
   d48b6:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d48b8:	f004 f98a 	bl	d8bd0 <__aeabi_f2d>
   d48bc:	460b      	mov	r3, r1
   d48be:	4905      	ldr	r1, [pc, #20]	; (d48d4 <_ZN10JsonWriter11insertValueEf+0x40>)
   d48c0:	4602      	mov	r2, r0
   d48c2:	4620      	mov	r0, r4
	}
}
   d48c4:	b003      	add	sp, #12
   d48c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d48ca:	f7ff bf26 	b.w	d471a <_ZN10JsonWriter13insertsprintfEPKcz>
   d48ce:	bf00      	nop
   d48d0:	000d9a93 	.word	0x000d9a93
   d48d4:	000d9a98 	.word	0x000d9a98

000d48d8 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d48d8:	f001 b86a 	b.w	d59b0 <HAL_Pin_Map>

000d48dc <_ZN13I2COperations12set_iic_addrEh>:
/**
    @brief change the I2C address from default.
    @param IIC_ADDR: I2C address to be set
*/
void I2COperations::set_iic_addr(uint8_t IIC_ADDR) {
    _IIC_ADDR = IIC_ADDR;
   d48dc:	7001      	strb	r1, [r0, #0]
   d48de:	4770      	bx	lr

000d48e0 <_ZN13I2COperations12IIC_SEND_CMDEh>:
}

HM330XErrorCode I2COperations::IIC_SEND_CMD(uint8_t CMD) {
   d48e0:	b538      	push	{r3, r4, r5, lr}
   d48e2:	4605      	mov	r5, r0
   d48e4:	460c      	mov	r4, r1
    Wire.beginTransmission(_IIC_ADDR);
   d48e6:	f002 fd43 	bl	d7370 <_Z19__fetch_global_Wirev>
   d48ea:	7829      	ldrb	r1, [r5, #0]
   d48ec:	f002 faf7 	bl	d6ede <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(CMD);
   d48f0:	f002 fd3e 	bl	d7370 <_Z19__fetch_global_Wirev>
   d48f4:	6803      	ldr	r3, [r0, #0]
   d48f6:	4621      	mov	r1, r4
   d48f8:	689b      	ldr	r3, [r3, #8]
   d48fa:	4798      	blx	r3
    byte ret = Wire.endTransmission();
   d48fc:	f002 fd38 	bl	d7370 <_Z19__fetch_global_Wirev>
   d4900:	f002 faf5 	bl	d6eee <_ZN7TwoWire15endTransmissionEv>
    if (ret == 0) {
   d4904:	2800      	cmp	r0, #0
        return NO_ERROR1;
    } else {
        return ERROR_COMM;
    }
}
   d4906:	bf14      	ite	ne
   d4908:	f06f 0001 	mvnne.w	r0, #1
   d490c:	2000      	moveq	r0, #0
   d490e:	bd38      	pop	{r3, r4, r5, pc}

000d4910 <_GLOBAL__sub_I__ZN13I2COperations14IIC_write_byteEhh>:
   d4910:	f001 b84e 	b.w	d59b0 <HAL_Pin_Map>

000d4914 <_ZN6HM330XC1Eh>:
    THE SOFTWARE.
*/

#include "Seeed_HM330X.h"

HM330X::HM330X(uint8_t IIC_ADDR) {
   d4914:	b510      	push	{r4, lr}
   d4916:	4604      	mov	r4, r0
    set_iic_addr(IIC_ADDR);
   d4918:	f7ff ffe0 	bl	d48dc <_ZN13I2COperations12set_iic_addrEh>
}
   d491c:	4620      	mov	r0, r4
   d491e:	bd10      	pop	{r4, pc}

000d4920 <_ZN6HM330X11select_commEv>:

HM330XErrorCode HM330X::select_comm() {
    return IIC_SEND_CMD(SELECT_COMM_CMD);
   d4920:	2188      	movs	r1, #136	; 0x88
   d4922:	f7ff bfdd 	b.w	d48e0 <_ZN13I2COperations12IIC_SEND_CMDEh>

000d4926 <_ZN6HM330X4initEv>:
}

HM330XErrorCode HM330X::init() {
   d4926:	b510      	push	{r4, lr}
   d4928:	4604      	mov	r4, r0
    Wire.begin();
   d492a:	f002 fd21 	bl	d7370 <_Z19__fetch_global_Wirev>
   d492e:	f002 fa9f 	bl	d6e70 <_ZN7TwoWire5beginEv>
    return select_comm();
   d4932:	4620      	mov	r0, r4
}
   d4934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return IIC_SEND_CMD(SELECT_COMM_CMD);
}

HM330XErrorCode HM330X::init() {
    Wire.begin();
    return select_comm();
   d4938:	f7ff bff2 	b.w	d4920 <_ZN6HM330X11select_commEv>

000d493c <_ZN6HM330X17read_sensor_valueEPhm>:
}

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
   d493c:	b570      	push	{r4, r5, r6, lr}
   d493e:	460c      	mov	r4, r1
   d4940:	4615      	mov	r5, r2
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
   d4942:	f002 fd15 	bl	d7370 <_Z19__fetch_global_Wirev>
   d4946:	221d      	movs	r2, #29
   d4948:	2140      	movs	r1, #64	; 0x40
   d494a:	f002 fac5 	bl	d6ed8 <_ZN7TwoWire11requestFromEhj>
   d494e:	260b      	movs	r6, #11
    while (data_len != Wire.available()) {
   d4950:	f002 fd0e 	bl	d7370 <_Z19__fetch_global_Wirev>
   d4954:	6803      	ldr	r3, [r0, #0]
   d4956:	691b      	ldr	r3, [r3, #16]
   d4958:	4798      	blx	r3
   d495a:	42a8      	cmp	r0, r5
   d495c:	d005      	beq.n	d496a <_ZN6HM330X17read_sensor_valueEPhm+0x2e>
        time_out_count++;
        if (time_out_count > 10) {
   d495e:	3e01      	subs	r6, #1
   d4960:	d00e      	beq.n	d4980 <_ZN6HM330X17read_sensor_valueEPhm+0x44>
            return ERROR_COMM;
        }
        delay(1);
   d4962:	2001      	movs	r0, #1
   d4964:	f001 fd3a 	bl	d63dc <delay>

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
   d4968:	e7f2      	b.n	d4950 <_ZN6HM330X17read_sensor_valueEPhm+0x14>
   d496a:	4425      	add	r5, r4
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d496c:	42a5      	cmp	r5, r4
   d496e:	d00a      	beq.n	d4986 <_ZN6HM330X17read_sensor_valueEPhm+0x4a>
        data[i] = Wire.read();
   d4970:	f002 fcfe 	bl	d7370 <_Z19__fetch_global_Wirev>
   d4974:	6803      	ldr	r3, [r0, #0]
   d4976:	695b      	ldr	r3, [r3, #20]
   d4978:	4798      	blx	r3
   d497a:	f804 0b01 	strb.w	r0, [r4], #1
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d497e:	e7f5      	b.n	d496c <_ZN6HM330X17read_sensor_valueEPhm+0x30>
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
        time_out_count++;
        if (time_out_count > 10) {
            return ERROR_COMM;
   d4980:	f06f 0001 	mvn.w	r0, #1
   d4984:	bd70      	pop	{r4, r5, r6, pc}
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
        data[i] = Wire.read();
    }
    return ret;
   d4986:	2000      	movs	r0, #0
}
   d4988:	bd70      	pop	{r4, r5, r6, pc}

000d498a <_GLOBAL__sub_I__ZN6HM330XC2Eh>:
   d498a:	f001 b811 	b.w	d59b0 <HAL_Pin_Map>

000d498e <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   d498e:	b148      	cbz	r0, d49a4 <null_ptr_check+0x16>
   d4990:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d4992:	b13b      	cbz	r3, d49a4 <null_ptr_check+0x16>
   d4994:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d4996:	b12b      	cbz	r3, d49a4 <null_ptr_check+0x16>
   d4998:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d499a:	fab0 f080 	clz	r0, r0
   d499e:	0940      	lsrs	r0, r0, #5
   d49a0:	4240      	negs	r0, r0
   d49a2:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   d49a4:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   d49a8:	4770      	bx	lr

000d49aa <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d49aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d49ac:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d49ae:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d49b0:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d49b2:	f7ff ffec 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d49b6:	4605      	mov	r5, r0
   d49b8:	bb50      	cbnz	r0, d4a10 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d49ba:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
   d49be:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d49c0:	bf14      	ite	ne
   d49c2:	2300      	movne	r3, #0
   d49c4:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
   d49c6:	429a      	cmp	r2, r3
   d49c8:	d022      	beq.n	d4a10 <set_mem_page+0x66>
			dev->mem_page = mem_page;
   d49ca:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d49cc:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   d49ce:	7860      	ldrb	r0, [r4, #1]
   d49d0:	2301      	movs	r3, #1
   d49d2:	f10d 0207 	add.w	r2, sp, #7
   d49d6:	21f3      	movs	r1, #243	; 0xf3
   d49d8:	47b0      	blx	r6
   d49da:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   d49de:	b110      	cbz	r0, d49e6 <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d49e0:	f06f 0501 	mvn.w	r5, #1
   d49e4:	e014      	b.n	d4a10 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d49e6:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d49e8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   d49ea:	7860      	ldrb	r0, [r4, #1]
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d49ec:	f003 0210 	and.w	r2, r3, #16
   d49f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d49f4:	f023 0310 	bic.w	r3, r3, #16
   d49f8:	4313      	orrs	r3, r2
   d49fa:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d49fe:	f10d 0207 	add.w	r2, sp, #7
   d4a02:	2301      	movs	r3, #1
   d4a04:	2173      	movs	r1, #115	; 0x73
   d4a06:	47b0      	blx	r6
   d4a08:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
   d4a0c:	2800      	cmp	r0, #0
   d4a0e:	d1e7      	bne.n	d49e0 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
   d4a10:	4628      	mov	r0, r5
   d4a12:	b002      	add	sp, #8
   d4a14:	bd70      	pop	{r4, r5, r6, pc}

000d4a16 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   d4a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a18:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4a1a:	f7ff ffb8 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4a1e:	4605      	mov	r5, r0
   d4a20:	b988      	cbnz	r0, d4a46 <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d4a22:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d4a24:	7860      	ldrb	r0, [r4, #1]
   d4a26:	2301      	movs	r3, #1
   d4a28:	f10d 0207 	add.w	r2, sp, #7
   d4a2c:	21f3      	movs	r1, #243	; 0xf3
   d4a2e:	47b0      	blx	r6
   d4a30:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   d4a34:	b928      	cbnz	r0, d4a42 <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   d4a36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4a3a:	f003 0310 	and.w	r3, r3, #16
   d4a3e:	70e3      	strb	r3, [r4, #3]
   d4a40:	e001      	b.n	d4a46 <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d4a42:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
   d4a46:	4628      	mov	r0, r5
   d4a48:	b002      	add	sp, #8
   d4a4a:	bd70      	pop	{r4, r5, r6, pc}

000d4a4c <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
   d4a4c:	b140      	cbz	r0, d4a60 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   d4a4e:	7803      	ldrb	r3, [r0, #0]
   d4a50:	428b      	cmp	r3, r1
   d4a52:	d908      	bls.n	d4a66 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   d4a54:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   d4a56:	7813      	ldrb	r3, [r2, #0]
   d4a58:	f043 0302 	orr.w	r3, r3, #2
   d4a5c:	7013      	strb	r3, [r2, #0]
   d4a5e:	e002      	b.n	d4a66 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   d4a60:	f04f 30ff 	mov.w	r0, #4294967295
   d4a64:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
   d4a66:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
   d4a68:	4770      	bx	lr

000d4a6a <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4a6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4a6e:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4a70:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4a72:	4688      	mov	r8, r1
   d4a74:	4691      	mov	r9, r2
   d4a76:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4a78:	f7ff ff89 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4a7c:	4604      	mov	r4, r0
   d4a7e:	b9a8      	cbnz	r0, d4aac <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   d4a80:	78ab      	ldrb	r3, [r5, #2]
   d4a82:	b93b      	cbnz	r3, d4a94 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   d4a84:	4629      	mov	r1, r5
   d4a86:	4630      	mov	r0, r6
   d4a88:	f7ff ff8f 	bl	d49aa <set_mem_page>
			if (rslt == BME680_OK)
   d4a8c:	4604      	mov	r4, r0
   d4a8e:	b908      	cbnz	r0, d4a94 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   d4a90:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d4a94:	6caf      	ldr	r7, [r5, #72]	; 0x48
   d4a96:	7868      	ldrb	r0, [r5, #1]
   d4a98:	464b      	mov	r3, r9
   d4a9a:	4642      	mov	r2, r8
   d4a9c:	4631      	mov	r1, r6
   d4a9e:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   d4aa0:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d4aa2:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d4aa6:	bf18      	it	ne
   d4aa8:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
   d4aac:	4620      	mov	r0, r4
   d4aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4ab2 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   d4ab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ab6:	b08b      	sub	sp, #44	; 0x2c
   d4ab8:	461e      	mov	r6, r3
   d4aba:	4683      	mov	fp, r0
   d4abc:	468a      	mov	sl, r1
   d4abe:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	2228      	movs	r2, #40	; 0x28
   d4ac4:	4668      	mov	r0, sp
   d4ac6:	f004 fdfc 	bl	d96c2 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4aca:	4630      	mov	r0, r6
   d4acc:	f7ff ff5f 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4ad0:	4605      	mov	r5, r0
   d4ad2:	bba8      	cbnz	r0, d4b40 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   d4ad4:	1e63      	subs	r3, r4, #1
   d4ad6:	2b12      	cmp	r3, #18
   d4ad8:	d830      	bhi.n	d4b3c <bme680_set_regs+0x8a>
   d4ada:	f10d 0801 	add.w	r8, sp, #1
   d4ade:	f10a 3aff 	add.w	sl, sl, #4294967295
   d4ae2:	465f      	mov	r7, fp
   d4ae4:	46c1      	mov	r9, r8
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   d4ae6:	b2a4      	uxth	r4, r4
   d4ae8:	ebcb 0307 	rsb	r3, fp, r7
   d4aec:	b29b      	uxth	r3, r3
   d4aee:	429c      	cmp	r4, r3
   d4af0:	d913      	bls.n	d4b1a <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
   d4af2:	78b3      	ldrb	r3, [r6, #2]
   d4af4:	b943      	cbnz	r3, d4b08 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4af6:	4631      	mov	r1, r6
   d4af8:	7838      	ldrb	r0, [r7, #0]
   d4afa:	f7ff ff56 	bl	d49aa <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4afe:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4b00:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4b06:	e000      	b.n	d4b0a <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   d4b08:	783b      	ldrb	r3, [r7, #0]
   d4b0a:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4b0e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   d4b12:	f808 3b02 	strb.w	r3, [r8], #2
   d4b16:	3701      	adds	r7, #1
   d4b18:	e7e6      	b.n	d4ae8 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   d4b1a:	b98d      	cbnz	r5, d4b40 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4b1c:	0063      	lsls	r3, r4, #1
   d4b1e:	3b01      	subs	r3, #1
   d4b20:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   d4b22:	f89d 1000 	ldrb.w	r1, [sp]
   d4b26:	7870      	ldrb	r0, [r6, #1]
   d4b28:	b29b      	uxth	r3, r3
   d4b2a:	464a      	mov	r2, r9
   d4b2c:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4b2e:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4b30:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4b34:	bf18      	it	ne
   d4b36:	f06f 0501 	mvnne.w	r5, #1
   d4b3a:	e001      	b.n	d4b40 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   d4b3c:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
   d4b40:	4628      	mov	r0, r5
   d4b42:	b00b      	add	sp, #44	; 0x2c
   d4b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4b48 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   d4b4a:	23e0      	movs	r3, #224	; 0xe0
   d4b4c:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4b50:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4b52:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4b54:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4b58:	f7ff ff19 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4b5c:	4604      	mov	r4, r0
   d4b5e:	b9d8      	cbnz	r0, d4b98 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
   d4b60:	78ab      	ldrb	r3, [r5, #2]
   d4b62:	b16b      	cbz	r3, d4b80 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d4b64:	462b      	mov	r3, r5
   d4b66:	2201      	movs	r2, #1
   d4b68:	f10d 0107 	add.w	r1, sp, #7
   d4b6c:	f10d 0006 	add.w	r0, sp, #6
   d4b70:	f7ff ff9f 	bl	d4ab2 <bme680_set_regs>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d4b74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d4b76:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d4b78:	200a      	movs	r0, #10
   d4b7a:	4798      	blx	r3

			if (rslt == BME680_OK) {
   d4b7c:	b134      	cbz	r4, d4b8c <bme680_soft_reset+0x44>
   d4b7e:	e00b      	b.n	d4b98 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
   d4b80:	4628      	mov	r0, r5
   d4b82:	f7ff ff48 	bl	d4a16 <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
   d4b86:	4604      	mov	r4, r0
   d4b88:	b930      	cbnz	r0, d4b98 <bme680_soft_reset+0x50>
   d4b8a:	e7eb      	b.n	d4b64 <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   d4b8c:	78ab      	ldrb	r3, [r5, #2]
   d4b8e:	b91b      	cbnz	r3, d4b98 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
   d4b90:	4628      	mov	r0, r5
   d4b92:	f7ff ff40 	bl	d4a16 <get_mem_page>
   d4b96:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
   d4b98:	4620      	mov	r0, r4
   d4b9a:	b003      	add	sp, #12
   d4b9c:	bd30      	pop	{r4, r5, pc}

000d4b9e <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   d4b9e:	b530      	push	{r4, r5, lr}
   d4ba0:	b08d      	sub	sp, #52	; 0x34
   d4ba2:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4ba4:	f7ff fef3 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4ba8:	4605      	mov	r5, r0
   d4baa:	2800      	cmp	r0, #0
   d4bac:	f040 80d5 	bne.w	d4d5a <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	f7ff ffc9 	bl	d4b48 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   d4bb6:	4605      	mov	r5, r0
   d4bb8:	2800      	cmp	r0, #0
   d4bba:	f040 80ce 	bne.w	d4d5a <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   d4bbe:	4623      	mov	r3, r4
   d4bc0:	2201      	movs	r2, #1
   d4bc2:	4621      	mov	r1, r4
   d4bc4:	20d0      	movs	r0, #208	; 0xd0
   d4bc6:	f7ff ff50 	bl	d4a6a <bme680_get_regs>
			if (rslt == BME680_OK) {
   d4bca:	4605      	mov	r5, r0
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	f040 80c4 	bne.w	d4d5a <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
   d4bd2:	7823      	ldrb	r3, [r4, #0]
   d4bd4:	2b61      	cmp	r3, #97	; 0x61
   d4bd6:	f040 80be 	bne.w	d4d56 <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   d4bda:	4601      	mov	r1, r0
   d4bdc:	2229      	movs	r2, #41	; 0x29
   d4bde:	a801      	add	r0, sp, #4
   d4be0:	f004 fd6f 	bl	d96c2 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4be4:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
   d4be6:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4bea:	f7ff fed0 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4bee:	4605      	mov	r5, r0
   d4bf0:	2800      	cmp	r0, #0
   d4bf2:	f040 80b2 	bne.w	d4d5a <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   d4bf6:	4623      	mov	r3, r4
   d4bf8:	2219      	movs	r2, #25
   d4bfa:	a901      	add	r1, sp, #4
   d4bfc:	2089      	movs	r0, #137	; 0x89
   d4bfe:	f7ff ff34 	bl	d4a6a <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   d4c02:	4605      	mov	r5, r0
   d4c04:	b938      	cbnz	r0, d4c16 <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   d4c06:	4623      	mov	r3, r4
   d4c08:	2210      	movs	r2, #16
   d4c0a:	f10d 011d 	add.w	r1, sp, #29
   d4c0e:	20e1      	movs	r0, #225	; 0xe1
   d4c10:	f7ff ff2b 	bl	d4a6a <bme680_get_regs>
   d4c14:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   d4c16:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   d4c1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4c1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c22:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   d4c24:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4c28:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4c2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c30:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4c32:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4c36:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4c3a:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4c3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4c40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c44:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   d4c46:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4c4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c52:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4c54:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4c58:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4c5c:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4c60:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4c64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c68:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   d4c6a:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d4c6e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4c72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c76:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   d4c78:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4c7c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d4c80:	f89d 3013 	ldrb.w	r3, [sp, #19]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d4c84:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d4c88:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d4c8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4c90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4c94:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   d4c96:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4c9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d4c9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4ca2:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   d4ca4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4ca8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d4cac:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d4cb0:	f89d 101f 	ldrb.w	r1, [sp, #31]
   d4cb4:	f003 020f 	and.w	r2, r3, #15
   d4cb8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   d4cbc:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d4cbe:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d4cc2:	091b      	lsrs	r3, r3, #4
   d4cc4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d4cc8:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   d4cca:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d4cce:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   d4cd0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4cd4:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   d4cd6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   d4cda:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   d4cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d4ce0:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   d4ce2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4ce6:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d4ce8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   d4cec:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d4cee:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d4cf2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d4cf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4cfa:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   d4cfc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d4d00:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   d4d02:	bb15      	cbnz	r5, d4d4a <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   d4d04:	4623      	mov	r3, r4
   d4d06:	2201      	movs	r2, #1
   d4d08:	f10d 0103 	add.w	r1, sp, #3
   d4d0c:	2002      	movs	r0, #2
   d4d0e:	f7ff feac 	bl	d4a6a <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   d4d12:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4d16:	f3c3 1301 	ubfx	r3, r3, #4, #2
   d4d1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   d4d1e:	4605      	mov	r5, r0
   d4d20:	b998      	cbnz	r0, d4d4a <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   d4d22:	4623      	mov	r3, r4
   d4d24:	2201      	movs	r2, #1
   d4d26:	f10d 0103 	add.w	r1, sp, #3
   d4d2a:	f7ff fe9e 	bl	d4a6a <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
   d4d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4d32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   d4d36:	4605      	mov	r5, r0
   d4d38:	b938      	cbnz	r0, d4d4a <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   d4d3a:	4623      	mov	r3, r4
   d4d3c:	2201      	movs	r2, #1
   d4d3e:	f10d 0103 	add.w	r1, sp, #3
   d4d42:	2004      	movs	r0, #4
   d4d44:	f7ff fe91 	bl	d4a6a <bme680_get_regs>
   d4d48:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   d4d4a:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   d4d4e:	111b      	asrs	r3, r3, #4
   d4d50:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d54:	e001      	b.n	d4d5a <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   d4d56:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
   d4d5a:	4628      	mov	r0, r5
   d4d5c:	b00d      	add	sp, #52	; 0x34
   d4d5e:	bd30      	pop	{r4, r5, pc}

000d4d60 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4d62:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4d64:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d4d66:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4d6a:	f7ff fe10 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4d6e:	bba0      	cbnz	r0, d4dda <bme680_set_sensor_mode+0x7a>
   d4d70:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   d4d72:	4623      	mov	r3, r4
   d4d74:	2201      	movs	r2, #1
   d4d76:	f10d 0106 	add.w	r1, sp, #6
   d4d7a:	2074      	movs	r0, #116	; 0x74
   d4d7c:	f7ff fe75 	bl	d4a6a <bme680_get_regs>
			if (rslt == BME680_OK) {
   d4d80:	b9a0      	cbnz	r0, d4dac <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   d4d82:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
   d4d86:	f013 0503 	ands.w	r5, r3, #3
   d4d8a:	d011      	beq.n	d4db0 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   d4d8c:	f023 0303 	bic.w	r3, r3, #3
   d4d90:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d4d94:	2201      	movs	r2, #1
   d4d96:	4623      	mov	r3, r4
   d4d98:	f10d 0106 	add.w	r1, sp, #6
   d4d9c:	f10d 0007 	add.w	r0, sp, #7
   d4da0:	f7ff fe87 	bl	d4ab2 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   d4da4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4da6:	200a      	movs	r0, #10
   d4da8:	4798      	blx	r3
   d4daa:	e7e2      	b.n	d4d72 <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   d4dac:	2d00      	cmp	r5, #0
   d4dae:	d1e0      	bne.n	d4d72 <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   d4db0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d4db4:	b18b      	cbz	r3, d4dda <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   d4db6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4dba:	f003 0303 	and.w	r3, r3, #3
   d4dbe:	f022 0203 	bic.w	r2, r2, #3
   d4dc2:	4313      	orrs	r3, r2
   d4dc4:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   d4dc8:	b938      	cbnz	r0, d4dda <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d4dca:	4623      	mov	r3, r4
   d4dcc:	2201      	movs	r2, #1
   d4dce:	f10d 0106 	add.w	r1, sp, #6
   d4dd2:	f10d 0007 	add.w	r0, sp, #7
   d4dd6:	f7ff fe6c 	bl	d4ab2 <bme680_set_regs>
		}
	}

	return rslt;
}
   d4dda:	b003      	add	sp, #12
   d4ddc:	bd30      	pop	{r4, r5, pc}

000d4dde <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4de2:	b088      	sub	sp, #32
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4de4:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4de6:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4de8:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4dea:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4dec:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4df0:	9304      	str	r3, [sp, #16]
   d4df2:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4df6:	9306      	str	r3, [sp, #24]
   d4df8:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4dfc:	f7ff fdc7 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d4e00:	2800      	cmp	r0, #0
   d4e02:	f040 8166 	bne.w	d50d2 <bme680_set_sensor_settings+0x2f4>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d4e06:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   d4e08:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d4e0c:	d56c      	bpl.n	d4ee8 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4e0e:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
   d4e10:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   d4e14:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4e18:	d165      	bne.n	d4ee6 <bme680_set_sensor_settings+0x108>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d4e1a:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d4e1e:	235a      	movs	r3, #90	; 0x5a
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d4e20:	2dc7      	cmp	r5, #199	; 0xc7

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d4e22:	f88d 3008 	strb.w	r3, [sp, #8]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d4e26:	d905      	bls.n	d4e34 <bme680_set_sensor_settings+0x56>
   d4e28:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d4e2c:	bf28      	it	cs
   d4e2e:	f44f 75c8 	movcs.w	r5, #400	; 0x190
   d4e32:	e000      	b.n	d4e36 <bme680_set_sensor_settings+0x58>
		temp = 200;
   d4e34:	25c8      	movs	r5, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d4e36:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
   d4e3a:	f994 2011 	ldrsb.w	r2, [r4, #17]
	if (temp < 200) /* Cap temperature */
		temp = 200;
	else if (temp > 400)
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   d4e3e:	f994 3004 	ldrsb.w	r3, [r4, #4]
   d4e42:	f994 0014 	ldrsb.w	r0, [r4, #20]
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d4e46:	f50e 3e16 	add.w	lr, lr, #153600	; 0x25800
   d4e4a:	f20e 1e99 	addw	lr, lr, #409	; 0x199
   d4e4e:	f502 7244 	add.w	r2, r2, #784	; 0x310
   d4e52:	2114      	movs	r1, #20
   d4e54:	fb13 f000 	smulbb	r0, r3, r0
   d4e58:	fb05 f50e 	mul.w	r5, r5, lr
   d4e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e60:	fb95 f5f1 	sdiv	r5, r5, r1
   d4e64:	fb90 f3f3 	sdiv	r3, r0, r3
   d4e68:	210a      	movs	r1, #10
   d4e6a:	021b      	lsls	r3, r3, #8
   d4e6c:	f505 1548 	add.w	r5, r5, #3276800	; 0x320000
   d4e70:	fb95 f5f1 	sdiv	r5, r5, r1
   d4e74:	436a      	muls	r2, r5
   d4e76:	eb03 0162 	add.w	r1, r3, r2, asr #1
   d4e7a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d4e7e:	3304      	adds	r3, #4
   d4e80:	fb91 f2f3 	sdiv	r2, r1, r3
   d4e84:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
   d4e88:	2383      	movs	r3, #131	; 0x83
   d4e8a:	434b      	muls	r3, r1
   d4e8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   d4e90:	fb92 f3f3 	sdiv	r3, r2, r3
   d4e94:	2222      	movs	r2, #34	; 0x22
   d4e96:	3bfa      	subs	r3, #250	; 0xfa
   d4e98:	4353      	muls	r3, r2
   d4e9a:	3332      	adds	r3, #50	; 0x32
   d4e9c:	2264      	movs	r2, #100	; 0x64
   d4e9e:	fb93 f3f2 	sdiv	r3, r3, r2
   d4ea2:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d4ea6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   d4eaa:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   d4eae:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   d4eb2:	d20b      	bcs.n	d4ecc <bme680_set_sensor_settings+0xee>
   d4eb4:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   d4eb6:	2b3f      	cmp	r3, #63	; 0x3f
   d4eb8:	b2d1      	uxtb	r1, r2
   d4eba:	f102 0201 	add.w	r2, r2, #1
   d4ebe:	d901      	bls.n	d4ec4 <bme680_set_sensor_settings+0xe6>
			dur = dur / 4;
   d4ec0:	089b      	lsrs	r3, r3, #2
   d4ec2:	e7f8      	b.n	d4eb6 <bme680_set_sensor_settings+0xd8>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   d4ec4:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   d4ec8:	b2db      	uxtb	r3, r3
   d4eca:	e000      	b.n	d4ece <bme680_set_sensor_settings+0xf0>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
   d4ecc:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d4ece:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   d4ed2:	2300      	movs	r3, #0
   d4ed4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   d4ed8:	2202      	movs	r2, #2
   d4eda:	4623      	mov	r3, r4
   d4edc:	a903      	add	r1, sp, #12
   d4ede:	a802      	add	r0, sp, #8
   d4ee0:	f7ff fde7 	bl	d4ab2 <bme680_set_regs>
   d4ee4:	e000      	b.n	d4ee8 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4ee6:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   d4ee8:	2300      	movs	r3, #0
   d4eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   d4eee:	b910      	cbnz	r0, d4ef6 <bme680_set_sensor_settings+0x118>
			rslt = bme680_set_sensor_mode(dev);
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	f7ff ff35 	bl	d4d60 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   d4ef6:	f006 0510 	and.w	r5, r6, #16
   d4efa:	b2ad      	uxth	r5, r5
   d4efc:	b305      	cbz	r5, d4f40 <bme680_set_sensor_settings+0x162>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   d4efe:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4f02:	2107      	movs	r1, #7
   d4f04:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   d4f08:	f7ff fda0 	bl	d4a4c <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
   d4f0c:	b930      	cbnz	r0, d4f1c <bme680_set_sensor_settings+0x13e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4f0e:	4623      	mov	r3, r4
   d4f10:	2201      	movs	r2, #1
   d4f12:	f10d 0107 	add.w	r1, sp, #7
   d4f16:	2075      	movs	r0, #117	; 0x75
   d4f18:	f7ff fda7 	bl	d4a6a <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4f1c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d4f20:	009b      	lsls	r3, r3, #2
   d4f22:	f003 021c 	and.w	r2, r3, #28
   d4f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4f2a:	f023 031c 	bic.w	r3, r3, #28
   d4f2e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4f30:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4f32:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d4f36:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   d4f3a:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
   d4f3e:	2501      	movs	r5, #1
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   d4f40:	06b3      	lsls	r3, r6, #26
   d4f42:	d522      	bpl.n	d4f8a <bme680_set_sensor_settings+0x1ac>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   d4f44:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4f48:	2108      	movs	r1, #8
   d4f4a:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   d4f4e:	f7ff fd7d 	bl	d4a4c <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
   d4f52:	b930      	cbnz	r0, d4f62 <bme680_set_sensor_settings+0x184>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4f54:	4623      	mov	r3, r4
   d4f56:	2201      	movs	r2, #1
   d4f58:	f10d 0107 	add.w	r1, sp, #7
   d4f5c:	2070      	movs	r0, #112	; 0x70
   d4f5e:	f7ff fd84 	bl	d4a6a <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d4f62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4f66:	f023 0208 	bic.w	r2, r3, #8
   d4f6a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   d4f6e:	f003 0308 	and.w	r3, r3, #8
   d4f72:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4f74:	aa08      	add	r2, sp, #32
   d4f76:	442a      	add	r2, r5
   d4f78:	2170      	movs	r1, #112	; 0x70
			data_array[count] = data;
			count++;
   d4f7a:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d4f7c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d4f80:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d4f84:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d4f88:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   d4f8a:	07b1      	lsls	r1, r6, #30
   d4f8c:	d033      	beq.n	d4ff6 <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   d4f8e:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4f92:	2105      	movs	r1, #5
   d4f94:	f104 0039 	add.w	r0, r4, #57	; 0x39
   d4f98:	f7ff fd58 	bl	d4a4c <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
   d4f9c:	b930      	cbnz	r0, d4fac <bme680_set_sensor_settings+0x1ce>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4f9e:	4623      	mov	r3, r4
   d4fa0:	2201      	movs	r2, #1
   d4fa2:	f10d 0107 	add.w	r1, sp, #7
   d4fa6:	2074      	movs	r0, #116	; 0x74
   d4fa8:	f7ff fd5f 	bl	d4a6a <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
   d4fac:	07f2      	lsls	r2, r6, #31
   d4fae:	d509      	bpl.n	d4fc4 <bme680_set_sensor_settings+0x1e6>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   d4fb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4fb4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   d4fb8:	f003 031f 	and.w	r3, r3, #31
   d4fbc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4fc0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
   d4fc4:	07b3      	lsls	r3, r6, #30
   d4fc6:	d50b      	bpl.n	d4fe0 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   d4fc8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   d4fcc:	009b      	lsls	r3, r3, #2
   d4fce:	f003 021c 	and.w	r2, r3, #28
   d4fd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4fd6:	f023 031c 	bic.w	r3, r3, #28
   d4fda:	4313      	orrs	r3, r2
   d4fdc:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
   d4fe0:	ab08      	add	r3, sp, #32
   d4fe2:	442b      	add	r3, r5
   d4fe4:	2274      	movs	r2, #116	; 0x74
   d4fe6:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d4fea:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
   d4fec:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4ff0:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d4ff4:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   d4ff6:	0771      	lsls	r1, r6, #29
   d4ff8:	d522      	bpl.n	d5040 <bme680_set_sensor_settings+0x262>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   d4ffa:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4ffe:	2105      	movs	r1, #5
   d5000:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5004:	f7ff fd22 	bl	d4a4c <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
   d5008:	b930      	cbnz	r0, d5018 <bme680_set_sensor_settings+0x23a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d500a:	4623      	mov	r3, r4
   d500c:	2201      	movs	r2, #1
   d500e:	f10d 0107 	add.w	r1, sp, #7
   d5012:	2072      	movs	r0, #114	; 0x72
   d5014:	f7ff fd29 	bl	d4a6a <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d5018:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d501c:	f023 0207 	bic.w	r2, r3, #7
   d5020:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d5024:	f003 0307 	and.w	r3, r3, #7
   d5028:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d502a:	aa08      	add	r2, sp, #32
   d502c:	442a      	add	r2, r5
   d502e:	2172      	movs	r1, #114	; 0x72
			data_array[count] = data;
			count++;
   d5030:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d5032:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d5036:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d503a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d503e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   d5040:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   d5044:	d03c      	beq.n	d50c0 <bme680_set_sensor_settings+0x2e2>
   d5046:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   d504a:	4642      	mov	r2, r8
   d504c:	2101      	movs	r1, #1
   d504e:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   d5052:	f7ff fcfb 	bl	d4a4c <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   d5056:	b968      	cbnz	r0, d5074 <bme680_set_sensor_settings+0x296>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   d5058:	4642      	mov	r2, r8
   d505a:	210a      	movs	r1, #10
   d505c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5060:	f7ff fcf4 	bl	d4a4c <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
   d5064:	b930      	cbnz	r0, d5074 <bme680_set_sensor_settings+0x296>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d5066:	4623      	mov	r3, r4
   d5068:	2201      	movs	r2, #1
   d506a:	f10d 0107 	add.w	r1, sp, #7
   d506e:	2071      	movs	r0, #113	; 0x71
   d5070:	f7ff fcfb 	bl	d4a6a <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
   d5074:	0672      	lsls	r2, r6, #25
   d5076:	d50b      	bpl.n	d5090 <bme680_set_sensor_settings+0x2b2>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   d5078:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   d507c:	011b      	lsls	r3, r3, #4
   d507e:	f003 0210 	and.w	r2, r3, #16
   d5082:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5086:	f023 0310 	bic.w	r3, r3, #16
   d508a:	4313      	orrs	r3, r2
   d508c:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
   d5090:	0633      	lsls	r3, r6, #24
   d5092:	d50a      	bpl.n	d50aa <bme680_set_sensor_settings+0x2cc>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   d5094:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5098:	f023 020f 	bic.w	r2, r3, #15
   d509c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d50a0:	f003 030f 	and.w	r3, r3, #15
   d50a4:	4313      	orrs	r3, r2
   d50a6:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d50aa:	ab08      	add	r3, sp, #32
   d50ac:	442b      	add	r3, r5
   d50ae:	2271      	movs	r2, #113	; 0x71
   d50b0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d50b4:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
   d50b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d50ba:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d50be:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
   d50c0:	b928      	cbnz	r0, d50ce <bme680_set_sensor_settings+0x2f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   d50c2:	4623      	mov	r3, r4
   d50c4:	462a      	mov	r2, r5
   d50c6:	a906      	add	r1, sp, #24
   d50c8:	a804      	add	r0, sp, #16
   d50ca:	f7ff fcf2 	bl	d4ab2 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   d50ce:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
   d50d2:	b008      	add	sp, #32
   d50d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d50d8 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d50d8:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d50da:	4b18      	ldr	r3, [pc, #96]	; (d513c <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d50dc:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d50de:	6818      	ldr	r0, [r3, #0]
   d50e0:	889b      	ldrh	r3, [r3, #4]
   d50e2:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d50e6:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d50ea:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d50ec:	aa02      	add	r2, sp, #8
   d50ee:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d50f0:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d50f4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d50f8:	a802      	add	r0, sp, #8
   d50fa:	4402      	add	r2, r0
   d50fc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d5100:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d5102:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   d5106:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   d5108:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d510c:	4413      	add	r3, r2
   d510e:	f240 72ab 	movw	r2, #1963	; 0x7ab
   d5112:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d5114:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d5118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d511c:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d511e:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
   d5122:	3301      	adds	r3, #1
   d5124:	b29b      	uxth	r3, r3
   d5126:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   d5128:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   d512c:	b11a      	cbz	r2, d5136 <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   d512e:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   d5132:	4413      	add	r3, r2
   d5134:	8023      	strh	r3, [r4, #0]
	}
}
   d5136:	b002      	add	sp, #8
   d5138:	bd10      	pop	{r4, pc}
   d513a:	bf00      	nop
   d513c:	000d9aa5 	.word	0x000d9aa5

000d5140 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d5140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5144:	4680      	mov	r8, r0
   d5146:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d5148:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d514a:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d514c:	f7ff fc1f 	bl	d498e <null_ptr_check>
	if (rslt == BME680_OK) {
   d5150:	4605      	mov	r5, r0
   d5152:	2800      	cmp	r0, #0
   d5154:	f040 8167 	bne.w	d5426 <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   d5158:	af04      	add	r7, sp, #16
   d515a:	4601      	mov	r1, r0
   d515c:	220f      	movs	r2, #15
   d515e:	4638      	mov	r0, r7
   d5160:	f004 faaf 	bl	d96c2 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d5164:	4620      	mov	r0, r4
   d5166:	f7ff fc12 	bl	d498e <null_ptr_check>
   d516a:	260a      	movs	r6, #10
   d516c:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   d516e:	2d00      	cmp	r5, #0
   d5170:	f040 8153 	bne.w	d541a <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d5174:	4623      	mov	r3, r4
   d5176:	220f      	movs	r2, #15
   d5178:	4639      	mov	r1, r7
   d517a:	201d      	movs	r0, #29
   d517c:	f7ff fc75 	bl	d4a6a <bme680_get_regs>
   d5180:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d5182:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d5186:	f89d e01e 	ldrb.w	lr, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d518a:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   d518e:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d5192:	f89d b015 	ldrb.w	fp, [sp, #21]
   d5196:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   d519a:	f89d 2017 	ldrb.w	r2, [sp, #23]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d519e:	f000 030f 	and.w	r3, r0, #15
   d51a2:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
   d51a6:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d51aa:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d51ae:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d51b2:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d51b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d51be:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d51c0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d51c4:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d51c6:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d51ca:	f003 0a20 	and.w	sl, r3, #32
   d51ce:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   d51d2:	ea40 000a 	orr.w	r0, r0, sl
   d51d6:	f003 0310 	and.w	r3, r3, #16
   d51da:	4318      	orrs	r0, r3
   d51dc:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
   d51de:	2800      	cmp	r0, #0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d51e0:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
   d51e4:	f280 8116 	bge.w	d5414 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d51e8:	0912      	lsrs	r2, r2, #4
   d51ea:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   d51ee:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
   d51f2:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d51f4:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d51f8:	0049      	lsls	r1, r1, #1
   d51fa:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d51fe:	460a      	mov	r2, r1
   d5200:	17cb      	asrs	r3, r1, #31
   d5202:	105b      	asrs	r3, r3, #1
   d5204:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d5208:	fb02 f603 	mul.w	r6, r2, r3
   d520c:	fba2 2302 	umull	r2, r3, r2, r2
   d5210:	ea4f 3a12 	mov.w	sl, r2, lsr #12
   d5214:	f994 201a 	ldrsb.w	r2, [r4, #26]
   d5218:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   d521c:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
   d5220:	ea4f 3b23 	mov.w	fp, r3, asr #12
   d5224:	0113      	lsls	r3, r2, #4
   d5226:	17df      	asrs	r7, r3, #31
   d5228:	fb0a f607 	mul.w	r6, sl, r7
   d522c:	fb03 660b 	mla	r6, r3, fp, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d5230:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d5234:	fbaa 2303 	umull	r2, r3, sl, r3
   d5238:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d523a:	0ac0      	lsrs	r0, r0, #11
   d523c:	0b92      	lsrs	r2, r2, #14
   d523e:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   d5242:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
   d5246:	1883      	adds	r3, r0, r2
   d5248:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
   d524a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d524e:	3380      	adds	r3, #128	; 0x80
   d5250:	121b      	asrs	r3, r3, #8
   d5252:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d5256:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d5258:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d525c:	105b      	asrs	r3, r3, #1
   d525e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d5262:	109a      	asrs	r2, r3, #2
   d5264:	4352      	muls	r2, r2
   d5266:	12d1      	asrs	r1, r2, #11
   d5268:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d526a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
   d526e:	4359      	muls	r1, r3
   d5270:	0049      	lsls	r1, r1, #1
   d5272:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   d5276:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
   d527a:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d527c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5280:	1352      	asrs	r2, r2, #13
   d5282:	0140      	lsls	r0, r0, #5
   d5284:	4342      	muls	r2, r0
   d5286:	10d2      	asrs	r2, r2, #3
   d5288:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d528c:	149b      	asrs	r3, r3, #18
   d528e:	8ba2      	ldrh	r2, [r4, #28]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d5290:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d5294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d5298:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
   d529a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   d529e:	9a00      	ldr	r2, [sp, #0]
   d52a0:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
   d52a4:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
   d52a8:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
   d52ac:	0412      	lsls	r2, r2, #16
   d52ae:	eb02 01a1 	add.w	r1, r2, r1, asr #2
   d52b2:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   d52b6:	f640 4235 	movw	r2, #3125	; 0xc35
   d52ba:	eba9 3121 	sub.w	r1, r9, r1, asr #12
   d52be:	4351      	muls	r1, r2
   d52c0:	13db      	asrs	r3, r3, #15
   d52c2:	fbb1 f3f3 	udiv	r3, r1, r3
   d52c6:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
   d52c8:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d52ca:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d52ce:	4349      	muls	r1, r1
   d52d0:	1349      	asrs	r1, r1, #13
   d52d2:	434a      	muls	r2, r1
   d52d4:	1099      	asrs	r1, r3, #2
   d52d6:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d52d8:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d52da:	1349      	asrs	r1, r1, #13
   d52dc:	eb01 3122 	add.w	r1, r1, r2, asr #12
   d52e0:	fb06 f206 	mul.w	r2, r6, r6
   d52e4:	4356      	muls	r6, r2
   d52e6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   d52ea:	4372      	muls	r2, r6
   d52ec:	eb01 4262 	add.w	r2, r1, r2, asr #17
   d52f0:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
   d52f4:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   d52f8:	eb03 1322 	add.w	r3, r3, r2, asr #4
   d52fc:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d5300:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d5302:	f994 100e 	ldrsb.w	r1, [r4, #14]
   d5306:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d530a:	8967      	ldrh	r7, [r4, #10]
   d530c:	8926      	ldrh	r6, [r4, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d530e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5312:	3380      	adds	r3, #128	; 0x80
   d5314:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d5316:	2264      	movs	r2, #100	; 0x64
   d5318:	4359      	muls	r1, r3
   d531a:	fb91 f1f2 	sdiv	r1, r1, r2
   d531e:	4359      	muls	r1, r3
   d5320:	4358      	muls	r0, r3
   d5322:	1189      	asrs	r1, r1, #6
   d5324:	fb90 f0f2 	sdiv	r0, r0, r2
   d5328:	fb91 f1f2 	sdiv	r1, r1, r2
   d532c:	4401      	add	r1, r0
   d532e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
   d5332:	4379      	muls	r1, r7
   d5334:	128f      	asrs	r7, r1, #10
   d5336:	9801      	ldr	r0, [sp, #4]
   d5338:	9902      	ldr	r1, [sp, #8]
   d533a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   d533e:	f994 100c 	ldrsb.w	r1, [r4, #12]
   d5342:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
   d5346:	4359      	muls	r1, r3
   d5348:	fb91 f1f2 	sdiv	r1, r1, r2
   d534c:	eba6 0061 	sub.w	r0, r6, r1, asr #1
   d5350:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d5354:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5358:	4343      	muls	r3, r0
   d535a:	fb93 f2f2 	sdiv	r2, r3, r2
   d535e:	7be3      	ldrb	r3, [r4, #15]
   d5360:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   d5364:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   d5366:	435b      	muls	r3, r3
   d5368:	1112      	asrs	r2, r2, #4
   d536a:	129b      	asrs	r3, r3, #10
   d536c:	4353      	muls	r3, r2
   d536e:	eb01 0363 	add.w	r3, r1, r3, asr #1
   d5372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5376:	129b      	asrs	r3, r3, #10
   d5378:	4353      	muls	r3, r2
   d537a:	131b      	asrs	r3, r3, #12
   d537c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
   d5380:	4a2b      	ldr	r2, [pc, #172]	; (d5430 <bme680_get_sensor_data+0x2f0>)
   d5382:	4293      	cmp	r3, r2
   d5384:	bfd4      	ite	le
   d5386:	f8c8 300c 	strle.w	r3, [r8, #12]
   d538a:	f8c8 200c 	strgt.w	r2, [r8, #12]
   d538e:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d5392:	2205      	movs	r2, #5
   d5394:	f240 503c 	movw	r0, #1340	; 0x53c
   d5398:	2100      	movs	r1, #0
   d539a:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
   d539e:	f00e 060f 	and.w	r6, lr, #15
   d53a2:	4b24      	ldr	r3, [pc, #144]	; (d5434 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d53a4:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   d53a8:	fba0 2307 	umull	r2, r3, r0, r7
   d53ac:	fb07 3301 	mla	r3, r7, r1, r3
   d53b0:	0c10      	lsrs	r0, r2, #16
   d53b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   d53b6:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d53b8:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d53ba:	4f1f      	ldr	r7, [pc, #124]	; (d5438 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d53bc:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
   d53c0:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
   d53c4:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d53c8:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d53cc:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   d53d0:	f04f 0300 	mov.w	r3, #0

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d53d4:	fbae 6700 	umull	r6, r7, lr, r0
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d53d8:	f143 33ff 	adc.w	r3, r3, #4294967295
   d53dc:	1812      	adds	r2, r2, r0
   d53de:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d53e0:	fb0e 7701 	mla	r7, lr, r1, r7
   d53e4:	0a70      	lsrs	r0, r6, #9
   d53e6:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   d53ea:	1279      	asrs	r1, r7, #9
   d53ec:	105f      	asrs	r7, r3, #1
   d53ee:	ea4f 0632 	mov.w	r6, r2, rrx
   d53f2:	1980      	adds	r0, r0, r6
   d53f4:	4179      	adcs	r1, r7
   d53f6:	f003 ff87 	bl	d9308 <__aeabi_ldivmod>
   d53fa:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
   d53fe:	b995      	cbnz	r5, d5426 <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
   d5400:	f998 3000 	ldrsb.w	r3, [r8]
   d5404:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
   d5406:	bfba      	itte	lt
   d5408:	2301      	movlt	r3, #1
   d540a:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
   d540e:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
   d5412:	e008      	b.n	d5426 <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   d5414:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5416:	200a      	movs	r0, #10
   d5418:	4798      	blx	r3
   d541a:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
   d541c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5420:	f47f aea5 	bne.w	d516e <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   d5424:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
   d5426:	4628      	mov	r0, r5
   d5428:	b009      	add	sp, #36	; 0x24
   d542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d542e:	bf00      	nop
   d5430:	000186a0 	.word	0x000186a0
   d5434:	2003e218 	.word	0x2003e218
   d5438:	2003e258 	.word	0x2003e258

000d543c <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
   d543c:	f000 bfce 	b.w	d63dc <delay>

000d5440 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5442:	4607      	mov	r7, r0
   d5444:	4614      	mov	r4, r2
   d5446:	461d      	mov	r5, r3
   d5448:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
   d544a:	f001 ff91 	bl	d7370 <_Z19__fetch_global_Wirev>
   d544e:	4639      	mov	r1, r7
   d5450:	f001 fd45 	bl	d6ede <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d5454:	f001 ff8c 	bl	d7370 <_Z19__fetch_global_Wirev>
   d5458:	6803      	ldr	r3, [r0, #0]
   d545a:	4631      	mov	r1, r6
   d545c:	689b      	ldr	r3, [r3, #8]
   d545e:	4798      	blx	r3
   d5460:	4425      	add	r5, r4
  while (len--) {
   d5462:	42ac      	cmp	r4, r5
   d5464:	d007      	beq.n	d5476 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
   d5466:	f001 ff83 	bl	d7370 <_Z19__fetch_global_Wirev>
   d546a:	6803      	ldr	r3, [r0, #0]
   d546c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5470:	689b      	ldr	r3, [r3, #8]
   d5472:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
   d5474:	e7f5      	b.n	d5462 <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
   d5476:	f001 ff7b 	bl	d7370 <_Z19__fetch_global_Wirev>
   d547a:	f001 fd38 	bl	d6eee <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d547e:	2000      	movs	r0, #0
   d5480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5484 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
   d5488:	4d1b      	ldr	r5, [pc, #108]	; (d54f8 <_ZL12spi_transferh+0x74>)
   d548a:	f995 3000 	ldrsb.w	r3, [r5]
   d548e:	3301      	adds	r3, #1
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5490:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
   d5492:	d106      	bne.n	d54a2 <_ZL12spi_transferh+0x1e>
    return SPI.transfer(x);
   d5494:	f001 ff32 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d5498:	4641      	mov	r1, r8
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d549a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
   d549e:	f000 bdd7 	b.w	d6050 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d54a2:	f8df 9058 	ldr.w	r9, [pc, #88]	; d54fc <_ZL12spi_transferh+0x78>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d54a6:	f8df a058 	ldr.w	sl, [pc, #88]	; d5500 <_ZL12spi_transferh+0x7c>
   d54aa:	2607      	movs	r6, #7
   d54ac:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
   d54ae:	f995 0000 	ldrsb.w	r0, [r5]
   d54b2:	2100      	movs	r1, #0
   d54b4:	b280      	uxth	r0, r0
   d54b6:	f001 fef4 	bl	d72a2 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d54ba:	2701      	movs	r7, #1
   d54bc:	f999 0000 	ldrsb.w	r0, [r9]
   d54c0:	fa07 f106 	lsl.w	r1, r7, r6
   d54c4:	ea01 0108 	and.w	r1, r1, r8
   d54c8:	b280      	uxth	r0, r0
   d54ca:	f001 feea 	bl	d72a2 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
   d54ce:	f995 0000 	ldrsb.w	r0, [r5]
   d54d2:	4639      	mov	r1, r7
   d54d4:	b280      	uxth	r0, r0
   d54d6:	f001 fee4 	bl	d72a2 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d54da:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d54de:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d54e0:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d54e2:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d54e4:	f001 fef6 	bl	d72d4 <digitalRead>
   d54e8:	b100      	cbz	r0, d54ec <_ZL12spi_transferh+0x68>
      reply |= 1;
   d54ea:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d54ec:	f116 36ff 	adds.w	r6, r6, #4294967295
   d54f0:	d2dd      	bcs.n	d54ae <_ZL12spi_transferh+0x2a>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d54f2:	4620      	mov	r0, r4
   d54f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d54f8:	2003e3cd 	.word	0x2003e3cd
   d54fc:	2003e3ce 	.word	0x2003e3ce
   d5500:	2003e3cc 	.word	0x2003e3cc

000d5504 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5508:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d550a:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d550c:	4615      	mov	r5, r2
   d550e:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5510:	4607      	mov	r7, r0
   d5512:	f001 fec6 	bl	d72a2 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d5516:	4b19      	ldr	r3, [pc, #100]	; (d557c <_ZL9spi_writehhPht+0x78>)
   d5518:	f993 2000 	ldrsb.w	r2, [r3]
   d551c:	3201      	adds	r2, #1
   d551e:	461c      	mov	r4, r3
   d5520:	d112      	bne.n	d5548 <_ZL9spi_writehhPht+0x44>
    SPI.begin();
   d5522:	f001 feeb 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d5526:	f000 fcf1 	bl	d5f0c <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d552a:	f001 fee7 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d552e:	2140      	movs	r1, #64	; 0x40
   d5530:	f000 fd6a 	bl	d6008 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d5534:	f001 fee2 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d5538:	2101      	movs	r1, #1
   d553a:	f000 fcf8 	bl	d5f2e <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d553e:	f001 fedd 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d5542:	2100      	movs	r1, #0
   d5544:	f000 fd04 	bl	d5f50 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d5548:	4640      	mov	r0, r8
   d554a:	f7ff ff9b 	bl	d5484 <_ZL12spi_transferh>
   d554e:	442e      	add	r6, r5
  while (len--) {
   d5550:	42b5      	cmp	r5, r6
   d5552:	d004      	beq.n	d555e <_ZL9spi_writehhPht+0x5a>
    spi_transfer(*reg_data);
   d5554:	f815 0b01 	ldrb.w	r0, [r5], #1
   d5558:	f7ff ff94 	bl	d5484 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
   d555c:	e7f8      	b.n	d5550 <_ZL9spi_writehhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d555e:	f994 3000 	ldrsb.w	r3, [r4]
   d5562:	3301      	adds	r3, #1
   d5564:	d103      	bne.n	d556e <_ZL9spi_writehhPht+0x6a>
    SPI.endTransaction();
   d5566:	f001 fec9 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d556a:	f000 fd02 	bl	d5f72 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d556e:	4638      	mov	r0, r7
   d5570:	2101      	movs	r1, #1
   d5572:	f001 fe96 	bl	d72a2 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5576:	2000      	movs	r0, #0
   d5578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d557c:	2003e3cd 	.word	0x2003e3cd

000d5580 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5584:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5586:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5588:	4615      	mov	r5, r2
   d558a:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d558c:	4607      	mov	r7, r0
   d558e:	f001 fe88 	bl	d72a2 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d5592:	4b1a      	ldr	r3, [pc, #104]	; (d55fc <_ZL8spi_readhhPht+0x7c>)
   d5594:	f993 2000 	ldrsb.w	r2, [r3]
   d5598:	3201      	adds	r2, #1
   d559a:	461c      	mov	r4, r3
   d559c:	d112      	bne.n	d55c4 <_ZL8spi_readhhPht+0x44>
    SPI.begin();
   d559e:	f001 fead 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d55a2:	f000 fcb3 	bl	d5f0c <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
   d55a6:	f001 fea9 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d55aa:	2140      	movs	r1, #64	; 0x40
   d55ac:	f000 fd2c 	bl	d6008 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
   d55b0:	f001 fea4 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d55b4:	2101      	movs	r1, #1
   d55b6:	f000 fcba 	bl	d5f2e <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
   d55ba:	f001 fe9f 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d55be:	2100      	movs	r1, #0
   d55c0:	f000 fcc6 	bl	d5f50 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d55c4:	4640      	mov	r0, r8
   d55c6:	f7ff ff5d 	bl	d5484 <_ZL12spi_transferh>
   d55ca:	442e      	add	r6, r5

  while (len--) {
   d55cc:	42b5      	cmp	r5, r6
   d55ce:	d005      	beq.n	d55dc <_ZL8spi_readhhPht+0x5c>
    *reg_data = spi_transfer(0x00);
   d55d0:	2000      	movs	r0, #0
   d55d2:	f7ff ff57 	bl	d5484 <_ZL12spi_transferh>
   d55d6:	f805 0b01 	strb.w	r0, [r5], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
   d55da:	e7f7      	b.n	d55cc <_ZL8spi_readhhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d55dc:	f994 3000 	ldrsb.w	r3, [r4]
   d55e0:	3301      	adds	r3, #1
   d55e2:	d103      	bne.n	d55ec <_ZL8spi_readhhPht+0x6c>
    SPI.endTransaction();
   d55e4:	f001 fe8a 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d55e8:	f000 fcc3 	bl	d5f72 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
   d55ec:	4638      	mov	r0, r7
   d55ee:	2101      	movs	r1, #1
   d55f0:	f001 fe57 	bl	d72a2 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d55f4:	2000      	movs	r0, #0
   d55f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55fa:	bf00      	nop
   d55fc:	2003e3cd 	.word	0x2003e3cd

000d5600 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5602:	4606      	mov	r6, r0
   d5604:	4615      	mov	r5, r2
   d5606:	461c      	mov	r4, r3
   d5608:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
   d560a:	f001 feb1 	bl	d7370 <_Z19__fetch_global_Wirev>
   d560e:	4631      	mov	r1, r6
   d5610:	f001 fc65 	bl	d6ede <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d5614:	f001 feac 	bl	d7370 <_Z19__fetch_global_Wirev>
   d5618:	6803      	ldr	r3, [r0, #0]
   d561a:	4639      	mov	r1, r7
   d561c:	689b      	ldr	r3, [r3, #8]
   d561e:	4798      	blx	r3
  Wire.endTransmission();
   d5620:	f001 fea6 	bl	d7370 <_Z19__fetch_global_Wirev>
   d5624:	f001 fc63 	bl	d6eee <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
   d5628:	f001 fea2 	bl	d7370 <_Z19__fetch_global_Wirev>
   d562c:	b2e2      	uxtb	r2, r4
   d562e:	4631      	mov	r1, r6
   d5630:	f001 fc52 	bl	d6ed8 <_ZN7TwoWire11requestFromEhj>
   d5634:	4284      	cmp	r4, r0
   d5636:	d10a      	bne.n	d564e <_ZL8i2c_readhhPht+0x4e>
   d5638:	442c      	add	r4, r5
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
   d563a:	42a5      	cmp	r5, r4
   d563c:	d009      	beq.n	d5652 <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
   d563e:	f001 fe97 	bl	d7370 <_Z19__fetch_global_Wirev>
   d5642:	6803      	ldr	r3, [r0, #0]
   d5644:	695b      	ldr	r3, [r3, #20]
   d5646:	4798      	blx	r3
   d5648:	f805 0b01 	strb.w	r0, [r5], #1
   d564c:	e7f5      	b.n	d563a <_ZL8i2c_readhhPht+0x3a>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
   d564e:	2001      	movs	r0, #1
   d5650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
   d5652:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5658 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
   d5658:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
   d565a:	4907      	ldr	r1, [pc, #28]	; (d5678 <_ZN15Adafruit_BME680C1Ea+0x20>)
   d565c:	22ff      	movs	r2, #255	; 0xff
   d565e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
   d5660:	4906      	ldr	r1, [pc, #24]	; (d567c <_ZN15Adafruit_BME680C1Ea+0x24>)
   d5662:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
   d5664:	4906      	ldr	r1, [pc, #24]	; (d5680 <_ZN15Adafruit_BME680C1Ea+0x28>)
   d5666:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
   d5668:	2200      	movs	r2, #0
   d566a:	7502      	strb	r2, [r0, #20]
   d566c:	74c2      	strb	r2, [r0, #19]
   d566e:	7482      	strb	r2, [r0, #18]
   d5670:	7442      	strb	r2, [r0, #17]
   d5672:	7402      	strb	r2, [r0, #16]
}
   d5674:	4770      	bx	lr
   d5676:	bf00      	nop
   d5678:	2003e3ce 	.word	0x2003e3ce
   d567c:	2003e3cc 	.word	0x2003e3cc
   d5680:	2003e3cd 	.word	0x2003e3cd

000d5684 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
   d5684:	b538      	push	{r3, r4, r5, lr}
   d5686:	4604      	mov	r4, r0
   d5688:	460d      	mov	r5, r1
  _i2caddr = addr;
   d568a:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
   d568c:	f990 001c 	ldrsb.w	r0, [r0, #28]
   d5690:	1c42      	adds	r2, r0, #1
   d5692:	d10c      	bne.n	d56ae <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
   d5694:	f001 fe6c 	bl	d7370 <_Z19__fetch_global_Wirev>
   d5698:	f001 fbea 	bl	d6e70 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
   d569c:	2301      	movs	r3, #1
   d569e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
   d56a2:	4b2e      	ldr	r3, [pc, #184]	; (d575c <_ZN15Adafruit_BME6805beginEh+0xd8>)
   d56a4:	66a3      	str	r3, [r4, #104]	; 0x68

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
   d56a6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
    gas_sensor.write = &i2c_write;
   d56aa:	4b2d      	ldr	r3, [pc, #180]	; (d5760 <_ZN15Adafruit_BME6805beginEh+0xdc>)
   d56ac:	e02e      	b.n	d570c <_ZN15Adafruit_BME6805beginEh+0x88>
  } else {
    digitalWrite(_cs, HIGH);
   d56ae:	2101      	movs	r1, #1
   d56b0:	b280      	uxth	r0, r0
   d56b2:	f001 fdf6 	bl	d72a2 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d56b6:	f994 001c 	ldrsb.w	r0, [r4, #28]
   d56ba:	2101      	movs	r1, #1
   d56bc:	b280      	uxth	r0, r0
   d56be:	f001 fddf 	bl	d7280 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
   d56c2:	4b28      	ldr	r3, [pc, #160]	; (d5764 <_ZN15Adafruit_BME6805beginEh+0xe0>)
   d56c4:	f993 0000 	ldrsb.w	r0, [r3]
   d56c8:	1c43      	adds	r3, r0, #1
   d56ca:	d104      	bne.n	d56d6 <_ZN15Adafruit_BME6805beginEh+0x52>
      // hardware SPI
      SPI.begin();
   d56cc:	f001 fe16 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d56d0:	f000 fc1c 	bl	d5f0c <_ZN8SPIClass5beginEv>
   d56d4:	e011      	b.n	d56fa <_ZN15Adafruit_BME6805beginEh+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
   d56d6:	2101      	movs	r1, #1
   d56d8:	b280      	uxth	r0, r0
   d56da:	f001 fdd1 	bl	d7280 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
   d56de:	4b22      	ldr	r3, [pc, #136]	; (d5768 <_ZN15Adafruit_BME6805beginEh+0xe4>)
   d56e0:	f993 0000 	ldrsb.w	r0, [r3]
   d56e4:	2101      	movs	r1, #1
   d56e6:	b280      	uxth	r0, r0
   d56e8:	f001 fdca 	bl	d7280 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
   d56ec:	4b1f      	ldr	r3, [pc, #124]	; (d576c <_ZN15Adafruit_BME6805beginEh+0xe8>)
   d56ee:	f993 0000 	ldrsb.w	r0, [r3]
   d56f2:	2100      	movs	r1, #0
   d56f4:	b280      	uxth	r0, r0
   d56f6:	f001 fdc3 	bl	d7280 <pinMode>
    }

    gas_sensor.dev_id = _cs;
   d56fa:	7f23      	ldrb	r3, [r4, #28]
   d56fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
   d5700:	2300      	movs	r3, #0
   d5702:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
   d5706:	4b1a      	ldr	r3, [pc, #104]	; (d5770 <_ZN15Adafruit_BME6805beginEh+0xec>)
   d5708:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
   d570a:	4b1a      	ldr	r3, [pc, #104]	; (d5774 <_ZN15Adafruit_BME6805beginEh+0xf0>)
   d570c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
   d570e:	4b1a      	ldr	r3, [pc, #104]	; (d5778 <_ZN15Adafruit_BME6805beginEh+0xf4>)
   d5710:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
   d5712:	f104 0020 	add.w	r0, r4, #32
   d5716:	f7ff fa42 	bl	d4b9e <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
   d571a:	b9e0      	cbnz	r0, d5756 <_ZN15Adafruit_BME6805beginEh+0xd2>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
   d571c:	2304      	movs	r3, #4
   d571e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
   d5722:	2302      	movs	r3, #2
   d5724:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
   d5728:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d572c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d5730:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d5732:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5734:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5738:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d573a:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
   d573c:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d573e:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
   d5742:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
   d5744:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5746:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d574a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
   d574e:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d5750:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
   d5754:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
   d5756:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
   d5758:	bd38      	pop	{r3, r4, r5, pc}
   d575a:	bf00      	nop
   d575c:	000d5601 	.word	0x000d5601
   d5760:	000d5441 	.word	0x000d5441
   d5764:	2003e3cd 	.word	0x2003e3cd
   d5768:	2003e3ce 	.word	0x2003e3ce
   d576c:	2003e3cc 	.word	0x2003e3cc
   d5770:	000d5581 	.word	0x000d5581
   d5774:	000d5505 	.word	0x000d5505
   d5778:	000d543d 	.word	0x000d543d

000d577c <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d577c:	b530      	push	{r4, r5, lr}
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d577e:	2301      	movs	r3, #1
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d5780:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d5782:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d5786:	7ca3      	ldrb	r3, [r4, #18]

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  uint8_t set_required_settings = 0;
   d5788:	7c40      	ldrb	r0, [r0, #17]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d578a:	b087      	sub	sp, #28
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d578c:	b10b      	cbz	r3, d5792 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
   d578e:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
   d5792:	7ce3      	ldrb	r3, [r4, #19]
   d5794:	b10b      	cbz	r3, d579a <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
   d5796:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
   d579a:	7c23      	ldrb	r3, [r4, #16]
   d579c:	b10b      	cbz	r3, d57a2 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
   d579e:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
   d57a2:	7d23      	ldrb	r3, [r4, #20]
   d57a4:	b10b      	cbz	r3, d57aa <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
   d57a6:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
   d57aa:	f104 0520 	add.w	r5, r4, #32
   d57ae:	4629      	mov	r1, r5
   d57b0:	f7ff fb15 	bl	d4dde <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
   d57b4:	b108      	cbz	r0, d57ba <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
   d57b6:	2000      	movs	r0, #0
   d57b8:	e04f      	b.n	d585a <_ZN15Adafruit_BME68014performReadingEv+0xde>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
   d57ba:	4628      	mov	r0, r5
   d57bc:	f7ff fad0 	bl	d4d60 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
   d57c0:	2800      	cmp	r0, #0
   d57c2:	d1f8      	bne.n	d57b6 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
   d57c4:	4629      	mov	r1, r5
   d57c6:	f10d 0002 	add.w	r0, sp, #2
   d57ca:	f7ff fc85 	bl	d50d8 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
   d57ce:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d57d2:	0040      	lsls	r0, r0, #1
   d57d4:	f000 fe02 	bl	d63dc <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
   d57d8:	4629      	mov	r1, r5
   d57da:	a801      	add	r0, sp, #4
   d57dc:	f7ff fcb0 	bl	d5140 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
   d57e0:	2800      	cmp	r0, #0
   d57e2:	d1e8      	bne.n	d57b6 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
   d57e4:	7c63      	ldrb	r3, [r4, #17]
   d57e6:	b15b      	cbz	r3, d5800 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
   d57e8:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   d57ec:	f003 f9de 	bl	d8bac <__aeabi_i2d>
   d57f0:	2200      	movs	r2, #0
   d57f2:	4b1b      	ldr	r3, [pc, #108]	; (d5860 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
   d57f4:	f003 fb6a 	bl	d8ecc <__aeabi_ddiv>
   d57f8:	f003 fd36 	bl	d9268 <__aeabi_d2f>
   d57fc:	6020      	str	r0, [r4, #0]
   d57fe:	e001      	b.n	d5804 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
   d5800:	4b18      	ldr	r3, [pc, #96]	; (d5864 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5802:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
   d5804:	7ca3      	ldrb	r3, [r4, #18]
   d5806:	b153      	cbz	r3, d581e <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
   d5808:	9804      	ldr	r0, [sp, #16]
   d580a:	f003 f9bf 	bl	d8b8c <__aeabi_ui2d>
   d580e:	2200      	movs	r2, #0
   d5810:	4b15      	ldr	r3, [pc, #84]	; (d5868 <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d5812:	f003 fb5b 	bl	d8ecc <__aeabi_ddiv>
   d5816:	f003 fd27 	bl	d9268 <__aeabi_d2f>
   d581a:	60a0      	str	r0, [r4, #8]
   d581c:	e001      	b.n	d5822 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
   d581e:	4b11      	ldr	r3, [pc, #68]	; (d5864 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5820:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
   d5822:	7ce3      	ldrb	r3, [r4, #19]
   d5824:	b133      	cbz	r3, d5834 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
   d5826:	eddd 7a03 	vldr	s15, [sp, #12]
   d582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d582e:	edc4 7a01 	vstr	s15, [r4, #4]
   d5832:	e001      	b.n	d5838 <_ZN15Adafruit_BME68014performReadingEv+0xbc>
  } else {
    pressure = NAN;
   d5834:	4b0b      	ldr	r3, [pc, #44]	; (d5864 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5836:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
   d5838:	7d20      	ldrb	r0, [r4, #20]
   d583a:	b168      	cbz	r0, d5858 <_ZN15Adafruit_BME68014performReadingEv+0xdc>
    if (data.status & BME680_HEAT_STAB_MSK) {
   d583c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5840:	06db      	lsls	r3, r3, #27
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d5842:	bf45      	ittet	mi
   d5844:	eddd 7a05 	vldrmi	s15, [sp, #20]
   d5848:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
    } else {
      gas_resistance = 0;
   d584c:	2300      	movpl	r3, #0

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
    if (data.status & BME680_HEAT_STAB_MSK) {
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d584e:	edc4 7a03 	vstrmi	s15, [r4, #12]
    } else {
      gas_resistance = 0;
   d5852:	bf58      	it	pl
   d5854:	60e3      	strpl	r3, [r4, #12]
   d5856:	e000      	b.n	d585a <_ZN15Adafruit_BME68014performReadingEv+0xde>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
   d5858:	2001      	movs	r0, #1
}
   d585a:	b007      	add	sp, #28
   d585c:	bd30      	pop	{r4, r5, pc}
   d585e:	bf00      	nop
   d5860:	40590000 	.word	0x40590000
   d5864:	7fc00000 	.word	0x7fc00000
   d5868:	408f4000 	.word	0x408f4000

000d586c <_ZN15Adafruit_BME68015readTemperatureEv>:
/*!
    @brief Performs a reading and returns the ambient temperature.
    @return Temperature in degrees Centigrade
*/
/**************************************************************************/
float Adafruit_BME680::readTemperature(void) {
   d586c:	b510      	push	{r4, lr}
   d586e:	4604      	mov	r4, r0
  performReading();
   d5870:	f7ff ff84 	bl	d577c <_ZN15Adafruit_BME68014performReadingEv>
  return temperature;
}
   d5874:	ed94 0a00 	vldr	s0, [r4]
   d5878:	bd10      	pop	{r4, pc}

000d587a <_ZN15Adafruit_BME68012readPressureEv>:
/*!
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
   d587a:	b510      	push	{r4, lr}
   d587c:	4604      	mov	r4, r0
  performReading();
   d587e:	f7ff ff7d 	bl	d577c <_ZN15Adafruit_BME68014performReadingEv>
  return pressure;
}
   d5882:	ed94 0a01 	vldr	s0, [r4, #4]
   d5886:	bd10      	pop	{r4, pc}

000d5888 <_ZN15Adafruit_BME68012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @return Altitude in meters
*/
/**************************************************************************/
float Adafruit_BME680::readAltitude(float seaLevel)
{
   d5888:	b510      	push	{r4, lr}
   d588a:	4604      	mov	r4, r0
   d588c:	ed2d 8b02 	vpush	{d8}
   d5890:	eeb0 8a40 	vmov.f32	s16, s0
    @brief Performs a reading and returns the barometric pressure.
    @return Barometic pressure in Pascals
*/
/**************************************************************************/
float Adafruit_BME680::readPressure(void) {
  performReading();
   d5894:	f7ff ff72 	bl	d577c <_ZN15Adafruit_BME68014performReadingEv>
    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5898:	edd4 6a01 	vldr	s13, [r4, #4]
   d589c:	ed9f 7a14 	vldr	s14, [pc, #80]	; d58f0 <_ZN15Adafruit_BME68012readAltitudeEf+0x68>
   d58a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d58a4:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d58a8:	ee17 0a10 	vmov	r0, s14
   d58ac:	f003 f990 	bl	d8bd0 <__aeabi_f2d>
   d58b0:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d58e0 <_ZN15Adafruit_BME68012readAltitudeEf+0x58>
   d58b4:	ec41 0b10 	vmov	d0, r0, r1
   d58b8:	f001 feee 	bl	d7698 <pow>
   d58bc:	2000      	movs	r0, #0
   d58be:	ec53 2b10 	vmov	r2, r3, d0
   d58c2:	490c      	ldr	r1, [pc, #48]	; (d58f4 <_ZN15Adafruit_BME68012readAltitudeEf+0x6c>)
   d58c4:	f003 f824 	bl	d8910 <__aeabi_dsub>
   d58c8:	a307      	add	r3, pc, #28	; (adr r3, d58e8 <_ZN15Adafruit_BME68012readAltitudeEf+0x60>)
   d58ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58ce:	f003 f9d3 	bl	d8c78 <__aeabi_dmul>
   d58d2:	f003 fcc9 	bl	d9268 <__aeabi_d2f>
}
   d58d6:	ecbd 8b02 	vpop	{d8}
   d58da:	ee00 0a10 	vmov	s0, r0
   d58de:	bd10      	pop	{r4, pc}
   d58e0:	1a36e2eb 	.word	0x1a36e2eb
   d58e4:	3fc85bc0 	.word	0x3fc85bc0
   d58e8:	00000000 	.word	0x00000000
   d58ec:	40e5a540 	.word	0x40e5a540
   d58f0:	42c80000 	.word	0x42c80000
   d58f4:	3ff00000 	.word	0x3ff00000

000d58f8 <_ZN15Adafruit_BME68012readHumidityEv>:
/*!
    @brief Performs a reading and returns the relative humidity.
    @return Relative humidity as floating point
*/
/**************************************************************************/
float Adafruit_BME680::readHumidity(void) {
   d58f8:	b510      	push	{r4, lr}
   d58fa:	4604      	mov	r4, r0
  performReading();
   d58fc:	f7ff ff3e 	bl	d577c <_ZN15Adafruit_BME68014performReadingEv>
  return humidity;
}
   d5900:	ed94 0a02 	vldr	s0, [r4, #8]
   d5904:	bd10      	pop	{r4, pc}

000d5906 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5906:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d590a:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
   d590e:	b101      	cbz	r1, d5912 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
   d5910:	b90a      	cbnz	r2, d5916 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
   d5912:	2300      	movs	r3, #0
   d5914:	e000      	b.n	d5918 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d5916:	2301      	movs	r3, #1
   d5918:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
   d591c:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
   d591e:	2001      	movs	r0, #1
   d5920:	4770      	bx	lr

000d5922 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5922:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
   d5924:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5926:	d807      	bhi.n	d5938 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
   d5928:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
   d592c:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d592e:	b909      	cbnz	r1, d5934 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
   d5930:	7459      	strb	r1, [r3, #17]
   d5932:	4770      	bx	lr
  else
    _tempEnabled = true;
   d5934:	7458      	strb	r0, [r3, #17]
   d5936:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5938:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
   d593a:	4770      	bx	lr

000d593c <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d593c:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
   d593e:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5940:	d807      	bhi.n	d5952 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
   d5942:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
   d5946:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5948:	b909      	cbnz	r1, d594e <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
   d594a:	7499      	strb	r1, [r3, #18]
   d594c:	4770      	bx	lr
  else
    _humEnabled = true;
   d594e:	7498      	strb	r0, [r3, #18]
   d5950:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5952:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
   d5954:	4770      	bx	lr

000d5956 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5956:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
   d5958:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d595a:	d807      	bhi.n	d596c <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
   d595c:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
   d5960:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5962:	b909      	cbnz	r1, d5968 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
   d5964:	74d9      	strb	r1, [r3, #19]
   d5966:	4770      	bx	lr
  else
    _presEnabled = true;
   d5968:	74d8      	strb	r0, [r3, #19]
   d596a:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d596c:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
   d596e:	4770      	bx	lr

000d5970 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5970:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
   d5972:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5974:	d807      	bhi.n	d5986 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
   d5976:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
   d597a:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
   d597c:	b909      	cbnz	r1, d5982 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
   d597e:	7419      	strb	r1, [r3, #16]
   d5980:	4770      	bx	lr
  else
    _filterEnabled = true;
   d5982:	7418      	strb	r0, [r3, #16]
   d5984:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5986:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
   d5988:	4770      	bx	lr

000d598a <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
   d598a:	f000 b811 	b.w	d59b0 <HAL_Pin_Map>
	...

000d5990 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <netdb_freeaddrinfo+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	689b      	ldr	r3, [r3, #8]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030268 	.word	0x00030268

000d59a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <netdb_getaddrinfo+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	68db      	ldr	r3, [r3, #12]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030268 	.word	0x00030268

000d59b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <HAL_Pin_Map+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	681b      	ldr	r3, [r3, #0]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	0003022c 	.word	0x0003022c

000d59c0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <HAL_Pin_Mode+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	689b      	ldr	r3, [r3, #8]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	0003022c 	.word	0x0003022c

000d59d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <HAL_Get_Pin_Mode+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	68db      	ldr	r3, [r3, #12]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	0003022c 	.word	0x0003022c

000d59e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <HAL_GPIO_Write+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	691b      	ldr	r3, [r3, #16]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	0003022c 	.word	0x0003022c

000d59f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <HAL_GPIO_Read+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	695b      	ldr	r3, [r3, #20]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	0003022c 	.word	0x0003022c

000d5a00 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <HAL_SPI_Begin+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	681b      	ldr	r3, [r3, #0]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030230 	.word	0x00030230

000d5a10 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <HAL_SPI_Set_Bit_Order+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	689b      	ldr	r3, [r3, #8]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030230 	.word	0x00030230

000d5a20 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <HAL_SPI_Set_Data_Mode+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	68db      	ldr	r3, [r3, #12]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030230 	.word	0x00030230

000d5a30 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	691b      	ldr	r3, [r3, #16]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030230 	.word	0x00030230

000d5a40 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <HAL_SPI_Send_Receive_Data+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	695b      	ldr	r3, [r3, #20]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030230 	.word	0x00030230

000d5a50 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <HAL_SPI_Init+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030230 	.word	0x00030230

000d5a60 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_SPI_Is_Enabled+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030230 	.word	0x00030230

000d5a70 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <HAL_SPI_Info+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030230 	.word	0x00030230

000d5a80 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_SPI_Acquire+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030230 	.word	0x00030230

000d5a90 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_SPI_Release+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030230 	.word	0x00030230

000d5aa0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_RNG_GetRandomNumber+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	685b      	ldr	r3, [r3, #4]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030218 	.word	0x00030218

000d5ab0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	695b      	ldr	r3, [r3, #20]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030218 	.word	0x00030218

000d5ac0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <os_thread_is_current+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	689b      	ldr	r3, [r3, #8]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030248 	.word	0x00030248

000d5ad0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <os_thread_join+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	691b      	ldr	r3, [r3, #16]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030248 	.word	0x00030248

000d5ae0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <os_thread_cleanup+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	695b      	ldr	r3, [r3, #20]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030248 	.word	0x00030248

000d5af0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <os_mutex_recursive_create+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030248 	.word	0x00030248

000d5b00 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <os_mutex_recursive_destroy+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030248 	.word	0x00030248

000d5b10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <inet_inet_ntop+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	695b      	ldr	r3, [r3, #20]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030264 	.word	0x00030264

000d5b20 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_USART_Init+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	681b      	ldr	r3, [r3, #0]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003023c 	.word	0x0003023c

000d5b30 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_USART_Write_Data+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	68db      	ldr	r3, [r3, #12]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003023c 	.word	0x0003023c

000d5b40 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_USART_Available_Data+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	691b      	ldr	r3, [r3, #16]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003023c 	.word	0x0003023c

000d5b50 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_USART_Read_Data+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	695b      	ldr	r3, [r3, #20]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	0003023c 	.word	0x0003023c

000d5b60 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_USART_Peek_Data+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	699b      	ldr	r3, [r3, #24]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	0003023c 	.word	0x0003023c

000d5b70 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_USART_Flush_Data+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	69db      	ldr	r3, [r3, #28]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	0003023c 	.word	0x0003023c

000d5b80 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_USART_Is_Enabled+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6a1b      	ldr	r3, [r3, #32]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	0003023c 	.word	0x0003023c

000d5b90 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_USART_Available_Data_For_Write+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	0003023c 	.word	0x0003023c

000d5ba0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_I2C_Begin+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	68db      	ldr	r3, [r3, #12]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030228 	.word	0x00030228

000d5bb0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_I2C_Begin_Transmission+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	699b      	ldr	r3, [r3, #24]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030228 	.word	0x00030228

000d5bc0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_I2C_End_Transmission+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	69db      	ldr	r3, [r3, #28]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030228 	.word	0x00030228

000d5bd0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_I2C_Write_Data+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6a1b      	ldr	r3, [r3, #32]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030228 	.word	0x00030228

000d5be0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <HAL_I2C_Available_Data+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030228 	.word	0x00030228

000d5bf0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <HAL_I2C_Read_Data+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030228 	.word	0x00030228

000d5c00 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <HAL_I2C_Peek_Data+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030228 	.word	0x00030228

000d5c10 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <HAL_I2C_Flush_Data+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030228 	.word	0x00030228

000d5c20 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <HAL_I2C_Is_Enabled+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030228 	.word	0x00030228

000d5c30 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <HAL_I2C_Init+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030228 	.word	0x00030228

000d5c40 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <HAL_I2C_Request_Data_Ex+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030228 	.word	0x00030228

000d5c50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <HAL_USB_USART_Init+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	681b      	ldr	r3, [r3, #0]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	0003024c 	.word	0x0003024c

000d5c60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <HAL_USB_USART_Begin+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	685b      	ldr	r3, [r3, #4]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	0003024c 	.word	0x0003024c

000d5c70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <HAL_USB_USART_Available_Data+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	691b      	ldr	r3, [r3, #16]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	0003024c 	.word	0x0003024c

000d5c80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	695b      	ldr	r3, [r3, #20]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	0003024c 	.word	0x0003024c

000d5c90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <HAL_USB_USART_Receive_Data+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	699b      	ldr	r3, [r3, #24]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	0003024c 	.word	0x0003024c

000d5ca0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <HAL_USB_USART_Send_Data+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	69db      	ldr	r3, [r3, #28]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003024c 	.word	0x0003024c

000d5cb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <HAL_USB_USART_Flush_Data+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6a1b      	ldr	r3, [r3, #32]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003024c 	.word	0x0003024c

000d5cc0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <set_system_mode+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	685b      	ldr	r3, [r3, #4]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030220 	.word	0x00030220

000d5cd0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <system_delay_ms+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	695b      	ldr	r3, [r3, #20]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030220 	.word	0x00030220

000d5ce0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <application_thread_current+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030220 	.word	0x00030220

000d5cf0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <application_thread_invoke+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030220 	.word	0x00030220

000d5d00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b03      	ldr	r3, [pc, #12]	; (d5d10 <system_ctrl_set_app_request_handler+0x10>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d0a:	9301      	str	r3, [sp, #4]
   d5d0c:	bd08      	pop	{r3, pc}
   d5d0e:	0000      	.short	0x0000
   d5d10:	00030220 	.word	0x00030220

000d5d14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b03      	ldr	r3, [pc, #12]	; (d5d24 <system_ctrl_set_result+0x10>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d1e:	9301      	str	r3, [sp, #4]
   d5d20:	bd08      	pop	{r3, pc}
   d5d22:	0000      	.short	0x0000
   d5d24:	00030220 	.word	0x00030220

000d5d28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <network_connect+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	685b      	ldr	r3, [r3, #4]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030240 	.word	0x00030240

000d5d38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <network_connecting+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	689b      	ldr	r3, [r3, #8]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030240 	.word	0x00030240

000d5d48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <network_disconnect+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	68db      	ldr	r3, [r3, #12]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030240 	.word	0x00030240

000d5d58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <network_ready+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	691b      	ldr	r3, [r3, #16]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030240 	.word	0x00030240

000d5d68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <network_on+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	695b      	ldr	r3, [r3, #20]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030240 	.word	0x00030240

000d5d78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <network_off+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	699b      	ldr	r3, [r3, #24]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030240 	.word	0x00030240

000d5d88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <network_listen+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	69db      	ldr	r3, [r3, #28]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030240 	.word	0x00030240

000d5d98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <network_listening+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	6a1b      	ldr	r3, [r3, #32]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030240 	.word	0x00030240

000d5da8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <network_set_listen_timeout+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030240 	.word	0x00030240

000d5db8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <network_get_listen_timeout+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030240 	.word	0x00030240

000d5dc8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <spark_cloud_flag_connected+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	695b      	ldr	r3, [r3, #20]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030244 	.word	0x00030244

000d5dd8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <spark_send_event+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6a1b      	ldr	r3, [r3, #32]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030244 	.word	0x00030244

000d5de8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030244 	.word	0x00030244

000d5df8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <malloc+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	681b      	ldr	r3, [r3, #0]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	0003021c 	.word	0x0003021c

000d5e08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <free+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	685b      	ldr	r3, [r3, #4]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	0003021c 	.word	0x0003021c

000d5e18 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <vsnprintf+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	0003021c 	.word	0x0003021c

000d5e28 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <abort+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003021c 	.word	0x0003021c

000d5e38 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <_malloc_r+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003021c 	.word	0x0003021c

000d5e48 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <__errno+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003021c 	.word	0x0003021c

000d5e58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e58:	2200      	movs	r2, #0
   d5e5a:	4611      	mov	r1, r2
   d5e5c:	6840      	ldr	r0, [r0, #4]
   d5e5e:	f7ff bf9b 	b.w	d5d98 <network_listening>

000d5e62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e62:	2200      	movs	r2, #0
   d5e64:	4611      	mov	r1, r2
   d5e66:	6840      	ldr	r0, [r0, #4]
   d5e68:	f7ff bfa6 	b.w	d5db8 <network_get_listen_timeout>

000d5e6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e6c:	2200      	movs	r2, #0
   d5e6e:	6840      	ldr	r0, [r0, #4]
   d5e70:	f7ff bf9a 	b.w	d5da8 <network_set_listen_timeout>

000d5e74 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e74:	2200      	movs	r2, #0
   d5e76:	f081 0101 	eor.w	r1, r1, #1
   d5e7a:	6840      	ldr	r0, [r0, #4]
   d5e7c:	f7ff bf84 	b.w	d5d88 <network_listen>

000d5e80 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e80:	2300      	movs	r3, #0
   d5e82:	461a      	mov	r2, r3
   d5e84:	4619      	mov	r1, r3
   d5e86:	6840      	ldr	r0, [r0, #4]
   d5e88:	f7ff bf76 	b.w	d5d78 <network_off>

000d5e8c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e8c:	2300      	movs	r3, #0
   d5e8e:	461a      	mov	r2, r3
   d5e90:	4619      	mov	r1, r3
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7ff bf68 	b.w	d5d68 <network_on>

000d5e98 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e98:	2200      	movs	r2, #0
   d5e9a:	4611      	mov	r1, r2
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	f7ff bf5b 	b.w	d5d58 <network_ready>

000d5ea2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ea2:	2200      	movs	r2, #0
   d5ea4:	4611      	mov	r1, r2
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	f7ff bf46 	b.w	d5d38 <network_connecting>

000d5eac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5eac:	2200      	movs	r2, #0
   d5eae:	2102      	movs	r1, #2
   d5eb0:	6840      	ldr	r0, [r0, #4]
   d5eb2:	f7ff bf49 	b.w	d5d48 <network_disconnect>

000d5eb6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	461a      	mov	r2, r3
   d5eba:	6840      	ldr	r0, [r0, #4]
   d5ebc:	f7ff bf34 	b.w	d5d28 <network_connect>

000d5ec0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ec0:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ec2:	2203      	movs	r2, #3
   d5ec4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ec6:	4a02      	ldr	r2, [pc, #8]	; (d5ed0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ec8:	601a      	str	r2, [r3, #0]
   d5eca:	4770      	bx	lr
   d5ecc:	2003e3d0 	.word	0x2003e3d0
   d5ed0:	000d9ab4 	.word	0x000d9ab4

000d5ed4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5ed4:	4770      	bx	lr

000d5ed6 <_ZN8SPIClassD0Ev>:
   d5ed6:	b510      	push	{r4, lr}
   d5ed8:	210c      	movs	r1, #12
   d5eda:	4604      	mov	r4, r0
   d5edc:	f001 fa7c 	bl	d73d8 <_ZdlPvj>
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5ee4:	2100      	movs	r1, #0
   d5ee6:	f7ff bdcb 	b.w	d5a80 <HAL_SPI_Acquire>

000d5eea <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5eea:	2100      	movs	r1, #0
   d5eec:	f7ff bdd0 	b.w	d5a90 <HAL_SPI_Release>

000d5ef0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	4b05      	ldr	r3, [pc, #20]	; (d5f08 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5ef4:	6003      	str	r3, [r0, #0]
   d5ef6:	4604      	mov	r4, r0
{
    _spi = spi;
   d5ef8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5efa:	4608      	mov	r0, r1
   d5efc:	f7ff fda8 	bl	d5a50 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f00:	2300      	movs	r3, #0
   d5f02:	60a3      	str	r3, [r4, #8]
}
   d5f04:	4620      	mov	r0, r4
   d5f06:	bd10      	pop	{r4, pc}
   d5f08:	000d9ae8 	.word	0x000d9ae8

000d5f0c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f10:	7900      	ldrb	r0, [r0, #4]
   d5f12:	f7ff ffe7 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f16:	b948      	cbnz	r0, d5f2c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5f18:	7920      	ldrb	r0, [r4, #4]
   d5f1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f1e:	f7ff fd6f 	bl	d5a00 <HAL_SPI_Begin>
        unlock();
   d5f22:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5f28:	f7ff bfdf 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.1>
   d5f2c:	bd10      	pop	{r4, pc}

000d5f2e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f2e:	b538      	push	{r3, r4, r5, lr}
   d5f30:	4604      	mov	r4, r0
    if (!lock())
   d5f32:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f34:	460d      	mov	r5, r1
    if (!lock())
   d5f36:	f7ff ffd5 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f3a:	b940      	cbnz	r0, d5f4e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5f3c:	7920      	ldrb	r0, [r4, #4]
   d5f3e:	4629      	mov	r1, r5
   d5f40:	f7ff fd66 	bl	d5a10 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5f44:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5f4a:	f7ff bfce 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.1>
   d5f4e:	bd38      	pop	{r3, r4, r5, pc}

000d5f50 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f50:	b538      	push	{r3, r4, r5, lr}
   d5f52:	4604      	mov	r4, r0
    if (!lock())
   d5f54:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f56:	460d      	mov	r5, r1
    if (!lock())
   d5f58:	f7ff ffc4 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5f5c:	b940      	cbnz	r0, d5f70 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5f5e:	7920      	ldrb	r0, [r4, #4]
   d5f60:	4629      	mov	r1, r5
   d5f62:	f7ff fd5d 	bl	d5a20 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5f66:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5f6c:	f7ff bfbd 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.1>
   d5f70:	bd38      	pop	{r3, r4, r5, pc}

000d5f72 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5f72:	7900      	ldrb	r0, [r0, #4]
   d5f74:	f7ff bfb9 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.1>

000d5f78 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f78:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5f7a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f7c:	6018      	str	r0, [r3, #0]
   d5f7e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5f80:	6818      	ldr	r0, [r3, #0]
   d5f82:	4288      	cmp	r0, r1
   d5f84:	b2e5      	uxtb	r5, r4
   d5f86:	d906      	bls.n	d5f96 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5f88:	3401      	adds	r4, #1
   d5f8a:	2c08      	cmp	r4, #8
   d5f8c:	d002      	beq.n	d5f94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5f8e:	0840      	lsrs	r0, r0, #1
   d5f90:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5f92:	e7f5      	b.n	d5f80 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5f94:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5f98:	5d5b      	ldrb	r3, [r3, r5]
   d5f9a:	7013      	strb	r3, [r2, #0]
   d5f9c:	bd30      	pop	{r4, r5, pc}
   d5f9e:	bf00      	nop
   d5fa0:	000d9af0 	.word	0x000d9af0

000d5fa4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fa8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5faa:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5fac:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5fae:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5fb0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5fb2:	460e      	mov	r6, r1
   d5fb4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5fb6:	f7ff ff95 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d5fba:	4605      	mov	r5, r0
   d5fbc:	bb00      	cbnz	r0, d6000 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5fbe:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5fc2:	4601      	mov	r1, r0
   d5fc4:	2214      	movs	r2, #20
   d5fc6:	a803      	add	r0, sp, #12
   d5fc8:	f003 fb7b 	bl	d96c2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fcc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5fce:	462a      	mov	r2, r5
   d5fd0:	a903      	add	r1, sp, #12
   d5fd2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fd4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5fd8:	f7ff fd4a 	bl	d5a70 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fdc:	ab02      	add	r3, sp, #8
   d5fde:	f10d 0207 	add.w	r2, sp, #7
   d5fe2:	fb07 f106 	mul.w	r1, r7, r6
   d5fe6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5fe8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fec:	f7ff ffc4 	bl	d5f78 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5ff0:	7920      	ldrb	r0, [r4, #4]
   d5ff2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5ff6:	f7ff fd1b 	bl	d5a30 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5ffa:	7920      	ldrb	r0, [r4, #4]
   d5ffc:	f7ff ff75 	bl	d5eea <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6000:	9802      	ldr	r0, [sp, #8]
   d6002:	b008      	add	sp, #32
   d6004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6008 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6008:	b538      	push	{r3, r4, r5, lr}
   d600a:	4604      	mov	r4, r0
    if (!lock())
   d600c:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d600e:	460d      	mov	r5, r1
    if (!lock())
   d6010:	f7ff ff68 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d6014:	b9c8      	cbnz	r0, d604a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6016:	68a1      	ldr	r1, [r4, #8]
   d6018:	b171      	cbz	r1, d6038 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d601a:	4b0c      	ldr	r3, [pc, #48]	; (d604c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d601c:	5cc2      	ldrb	r2, [r0, r3]
   d601e:	42aa      	cmp	r2, r5
   d6020:	d002      	beq.n	d6028 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6022:	3001      	adds	r0, #1
   d6024:	2808      	cmp	r0, #8
   d6026:	d1f9      	bne.n	d601c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6028:	3001      	adds	r0, #1
   d602a:	b2c0      	uxtb	r0, r0
   d602c:	40c1      	lsrs	r1, r0
   d602e:	2201      	movs	r2, #1
   d6030:	4620      	mov	r0, r4
   d6032:	f7ff ffb7 	bl	d5fa4 <_ZN8SPIClass13setClockSpeedEjj>
   d6036:	e003      	b.n	d6040 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6038:	4629      	mov	r1, r5
   d603a:	7920      	ldrb	r0, [r4, #4]
   d603c:	f7ff fcf8 	bl	d5a30 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6040:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6046:	f7ff bf50 	b.w	d5eea <_ZN8SPIClass6unlockEv.isra.1>
   d604a:	bd38      	pop	{r3, r4, r5, pc}
   d604c:	000d9af0 	.word	0x000d9af0

000d6050 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6050:	b538      	push	{r3, r4, r5, lr}
   d6052:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d6054:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6056:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d6058:	f7ff ff44 	bl	d5ee4 <_ZN8SPIClass4lockEv.isra.0>
   d605c:	b940      	cbnz	r0, d6070 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d605e:	4629      	mov	r1, r5
   d6060:	7920      	ldrb	r0, [r4, #4]
   d6062:	f7ff fced 	bl	d5a40 <HAL_SPI_Send_Receive_Data>
   d6066:	4605      	mov	r5, r0
        unlock();
   d6068:	7920      	ldrb	r0, [r4, #4]
   d606a:	f7ff ff3e 	bl	d5eea <_ZN8SPIClass6unlockEv.isra.1>
   d606e:	e000      	b.n	d6072 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d6070:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d6072:	b2e8      	uxtb	r0, r5
   d6074:	bd38      	pop	{r3, r4, r5, pc}

000d6076 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6076:	7900      	ldrb	r0, [r0, #4]
   d6078:	f7ff bcf2 	b.w	d5a60 <HAL_SPI_Is_Enabled>

000d607c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d607c:	b510      	push	{r4, lr}
   d607e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6080:	6800      	ldr	r0, [r0, #0]
   d6082:	b118      	cbz	r0, d608c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6084:	f7ff fec0 	bl	d5e08 <free>
            wakeupSource_ = nullptr;
   d6088:	2300      	movs	r3, #0
   d608a:	6023      	str	r3, [r4, #0]
   d608c:	bd10      	pop	{r4, pc}

000d608e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d608e:	b510      	push	{r4, lr}
   d6090:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6092:	f7ff fff3 	bl	d607c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6096:	4620      	mov	r0, r4
   d6098:	bd10      	pop	{r4, pc}
	...

000d609c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d609c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d609e:	4c09      	ldr	r4, [pc, #36]	; (d60c4 <_GLOBAL__sub_I_System+0x28>)
   d60a0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d60a2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d60a6:	6020      	str	r0, [r4, #0]
   d60a8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d60aa:	71a0      	strb	r0, [r4, #6]
   d60ac:	8120      	strh	r0, [r4, #8]
   d60ae:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d60b0:	f7ff fe06 	bl	d5cc0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d60b4:	4620      	mov	r0, r4
   d60b6:	4a04      	ldr	r2, [pc, #16]	; (d60c8 <_GLOBAL__sub_I_System+0x2c>)
   d60b8:	4904      	ldr	r1, [pc, #16]	; (d60cc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d60ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d60be:	f001 b97d 	b.w	d73bc <__aeabi_atexit>
   d60c2:	bf00      	nop
   d60c4:	2003e3d8 	.word	0x2003e3d8
   d60c8:	2003e308 	.word	0x2003e308
   d60cc:	000d608f 	.word	0x000d608f

000d60d0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d60d0:	b510      	push	{r4, lr}
   d60d2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d60d4:	6800      	ldr	r0, [r0, #0]
   d60d6:	b108      	cbz	r0, d60dc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d60d8:	f7ff fd12 	bl	d5b00 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d60dc:	4620      	mov	r0, r4
   d60de:	bd10      	pop	{r4, pc}

000d60e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60e0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60e4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60e6:	689b      	ldr	r3, [r3, #8]
   d60e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60ea:	68a3      	ldr	r3, [r4, #8]
   d60ec:	3b01      	subs	r3, #1
   d60ee:	60a3      	str	r3, [r4, #8]
   d60f0:	b92b      	cbnz	r3, d60fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d60f2:	6823      	ldr	r3, [r4, #0]
   d60f4:	4620      	mov	r0, r4
   d60f6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d60f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d60fc:	4718      	bx	r3
   d60fe:	bd10      	pop	{r4, pc}

000d6100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6100:	680b      	ldr	r3, [r1, #0]
   d6102:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6104:	b113      	cbz	r3, d610c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6106:	685a      	ldr	r2, [r3, #4]
   d6108:	3201      	adds	r2, #1
   d610a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d610c:	4770      	bx	lr

000d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d610e:	b510      	push	{r4, lr}
   d6110:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6112:	6800      	ldr	r0, [r0, #0]
   d6114:	b128      	cbz	r0, d6122 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6116:	6843      	ldr	r3, [r0, #4]
   d6118:	3b01      	subs	r3, #1
   d611a:	6043      	str	r3, [r0, #4]
   d611c:	b90b      	cbnz	r3, d6122 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d611e:	f7ff ffdf 	bl	d60e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6122:	4620      	mov	r0, r4
   d6124:	bd10      	pop	{r4, pc}
	...

000d6128 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6128:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d612a:	4c06      	ldr	r4, [pc, #24]	; (d6144 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d612c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d612e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6130:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6132:	f7ff fcdd 	bl	d5af0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6136:	4620      	mov	r0, r4
   d6138:	4a03      	ldr	r2, [pc, #12]	; (d6148 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d613a:	4904      	ldr	r1, [pc, #16]	; (d614c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6140:	f001 b93c 	b.w	d73bc <__aeabi_atexit>
   d6144:	2003e3e4 	.word	0x2003e3e4
   d6148:	2003e308 	.word	0x2003e308
   d614c:	000d60d1 	.word	0x000d60d1

000d6150 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6152:	4606      	mov	r6, r0
   d6154:	460d      	mov	r5, r1
   d6156:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6158:	2400      	movs	r4, #0
  while (size--) {
   d615a:	42bd      	cmp	r5, r7
   d615c:	d00c      	beq.n	d6178 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d615e:	6833      	ldr	r3, [r6, #0]
   d6160:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6164:	689b      	ldr	r3, [r3, #8]
   d6166:	4630      	mov	r0, r6
   d6168:	4798      	blx	r3
     if (chunk>=0)
   d616a:	2800      	cmp	r0, #0
   d616c:	db01      	blt.n	d6172 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d616e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6170:	e7f3      	b.n	d615a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6172:	2c00      	cmp	r4, #0
   d6174:	bf08      	it	eq
   d6176:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6178:	4620      	mov	r0, r4
   d617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d617c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d617c:	b570      	push	{r4, r5, r6, lr}
   d617e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6180:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6182:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6184:	b149      	cbz	r1, d619a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6186:	f003 fae8 	bl	d975a <strlen>
   d618a:	682b      	ldr	r3, [r5, #0]
   d618c:	4602      	mov	r2, r0
   d618e:	4621      	mov	r1, r4
   d6190:	4628      	mov	r0, r5
   d6192:	68db      	ldr	r3, [r3, #12]
    }
   d6194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6198:	4718      	bx	r3
    }
   d619a:	bd70      	pop	{r4, r5, r6, pc}

000d619c <_ZN5Print5printEPKc>:
   d619c:	b508      	push	{r3, lr}
   d619e:	f7ff ffed 	bl	d617c <_ZN5Print5writeEPKc>
   d61a2:	bd08      	pop	{r3, pc}

000d61a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d61a4:	6803      	ldr	r3, [r0, #0]
   d61a6:	689b      	ldr	r3, [r3, #8]
   d61a8:	4718      	bx	r3

000d61aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d61ac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d61b0:	f7ff fff8 	bl	d61a4 <_ZN5Print5printEc>
  n += print('\n');
   d61b4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d61b6:	4604      	mov	r4, r0
  n += print('\n');
   d61b8:	4628      	mov	r0, r5
   d61ba:	f7ff fff3 	bl	d61a4 <_ZN5Print5printEc>
  return n;
}
   d61be:	4420      	add	r0, r4
   d61c0:	bd38      	pop	{r3, r4, r5, pc}

000d61c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d61c2:	b538      	push	{r3, r4, r5, lr}
   d61c4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d61c6:	f7ff ffd9 	bl	d617c <_ZN5Print5writeEPKc>
   d61ca:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d61cc:	4628      	mov	r0, r5
   d61ce:	f7ff ffec 	bl	d61aa <_ZN5Print7printlnEv>
  return n;
}
   d61d2:	4420      	add	r0, r4
   d61d4:	bd38      	pop	{r3, r4, r5, pc}

000d61d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d61d6:	f7ff bff4 	b.w	d61c2 <_ZN5Print7printlnEPKc>

000d61da <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61da:	b530      	push	{r4, r5, lr}
   d61dc:	b08b      	sub	sp, #44	; 0x2c
   d61de:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61e0:	2100      	movs	r1, #0
   d61e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61e6:	2a01      	cmp	r2, #1
   d61e8:	bf98      	it	ls
   d61ea:	220a      	movls	r2, #10
   d61ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d61f0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d61f4:	fb05 3312 	mls	r3, r5, r2, r3
   d61f8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61fc:	2b09      	cmp	r3, #9
   d61fe:	bf94      	ite	ls
   d6200:	3330      	addls	r3, #48	; 0x30
   d6202:	3337      	addhi	r3, #55	; 0x37
   d6204:	b2db      	uxtb	r3, r3
   d6206:	4621      	mov	r1, r4
   d6208:	f804 3901 	strb.w	r3, [r4], #-1
   d620c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d620e:	2d00      	cmp	r5, #0
   d6210:	d1ee      	bne.n	d61f0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6212:	f7ff ffb3 	bl	d617c <_ZN5Print5writeEPKc>
}
   d6216:	b00b      	add	sp, #44	; 0x2c
   d6218:	bd30      	pop	{r4, r5, pc}
	...

000d621c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6220:	ec57 6b10 	vmov	r6, r7, d0
   d6224:	4682      	mov	sl, r0
   d6226:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6228:	ee10 2a10 	vmov	r2, s0
   d622c:	463b      	mov	r3, r7
   d622e:	ee10 0a10 	vmov	r0, s0
   d6232:	4639      	mov	r1, r7
   d6234:	f002 ffba 	bl	d91ac <__aeabi_dcmpun>
   d6238:	b108      	cbz	r0, d623e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d623a:	494e      	ldr	r1, [pc, #312]	; (d6374 <_ZN5Print10printFloatEdh+0x158>)
   d623c:	e012      	b.n	d6264 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d623e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6242:	f04f 32ff 	mov.w	r2, #4294967295
   d6246:	4b4c      	ldr	r3, [pc, #304]	; (d6378 <_ZN5Print10printFloatEdh+0x15c>)
   d6248:	4630      	mov	r0, r6
   d624a:	4649      	mov	r1, r9
   d624c:	f002 ffae 	bl	d91ac <__aeabi_dcmpun>
   d6250:	b968      	cbnz	r0, d626e <_ZN5Print10printFloatEdh+0x52>
   d6252:	f04f 32ff 	mov.w	r2, #4294967295
   d6256:	4b48      	ldr	r3, [pc, #288]	; (d6378 <_ZN5Print10printFloatEdh+0x15c>)
   d6258:	4630      	mov	r0, r6
   d625a:	4649      	mov	r1, r9
   d625c:	f002 ff88 	bl	d9170 <__aeabi_dcmple>
   d6260:	b928      	cbnz	r0, d626e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6262:	4946      	ldr	r1, [pc, #280]	; (d637c <_ZN5Print10printFloatEdh+0x160>)
   d6264:	4650      	mov	r0, sl
   d6266:	f7ff ff89 	bl	d617c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d626e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6272:	4b43      	ldr	r3, [pc, #268]	; (d6380 <_ZN5Print10printFloatEdh+0x164>)
   d6274:	4630      	mov	r0, r6
   d6276:	4639      	mov	r1, r7
   d6278:	f002 ff8e 	bl	d9198 <__aeabi_dcmpgt>
   d627c:	b108      	cbz	r0, d6282 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d627e:	4941      	ldr	r1, [pc, #260]	; (d6384 <_ZN5Print10printFloatEdh+0x168>)
   d6280:	e7f0      	b.n	d6264 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6282:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6286:	4b40      	ldr	r3, [pc, #256]	; (d6388 <_ZN5Print10printFloatEdh+0x16c>)
   d6288:	4630      	mov	r0, r6
   d628a:	4639      	mov	r1, r7
   d628c:	f002 ff66 	bl	d915c <__aeabi_dcmplt>
   d6290:	2800      	cmp	r0, #0
   d6292:	d1f4      	bne.n	d627e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6294:	2200      	movs	r2, #0
   d6296:	2300      	movs	r3, #0
   d6298:	4630      	mov	r0, r6
   d629a:	4639      	mov	r1, r7
   d629c:	f002 ff5e 	bl	d915c <__aeabi_dcmplt>
   d62a0:	b140      	cbz	r0, d62b4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d62a2:	212d      	movs	r1, #45	; 0x2d
   d62a4:	4650      	mov	r0, sl
   d62a6:	f7ff ff7d 	bl	d61a4 <_ZN5Print5printEc>
     number = -number;
   d62aa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d62ae:	4604      	mov	r4, r0
     number = -number;
   d62b0:	461f      	mov	r7, r3
   d62b2:	e000      	b.n	d62b6 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d62b4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d62b6:	4935      	ldr	r1, [pc, #212]	; (d638c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d62b8:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d62bc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d62be:	fa5f f388 	uxtb.w	r3, r8
   d62c2:	429d      	cmp	r5, r3
   d62c4:	d906      	bls.n	d62d4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d62c6:	2200      	movs	r2, #0
   d62c8:	4b31      	ldr	r3, [pc, #196]	; (d6390 <_ZN5Print10printFloatEdh+0x174>)
   d62ca:	f002 fdff 	bl	d8ecc <__aeabi_ddiv>
   d62ce:	f108 0801 	add.w	r8, r8, #1
   d62d2:	e7f4      	b.n	d62be <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d62d4:	4632      	mov	r2, r6
   d62d6:	463b      	mov	r3, r7
   d62d8:	f002 fb1c 	bl	d8914 <__adddf3>
   d62dc:	460f      	mov	r7, r1
   d62de:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d62e0:	f002 ffa2 	bl	d9228 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d62e4:	220a      	movs	r2, #10
   d62e6:	4601      	mov	r1, r0
   d62e8:	4680      	mov	r8, r0
   d62ea:	4650      	mov	r0, sl
   d62ec:	f7ff ff75 	bl	d61da <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d62f0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d62f2:	b3e5      	cbz	r5, d636e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d62f4:	4640      	mov	r0, r8
   d62f6:	f002 fc49 	bl	d8b8c <__aeabi_ui2d>
   d62fa:	4602      	mov	r2, r0
   d62fc:	460b      	mov	r3, r1
   d62fe:	4630      	mov	r0, r6
   d6300:	4639      	mov	r1, r7
   d6302:	f002 fb05 	bl	d8910 <__aeabi_dsub>
   d6306:	4606      	mov	r6, r0
   d6308:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d630a:	4650      	mov	r0, sl
   d630c:	4921      	ldr	r1, [pc, #132]	; (d6394 <_ZN5Print10printFloatEdh+0x178>)
   d630e:	f7ff ff35 	bl	d617c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6312:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6314:	2200      	movs	r2, #0
   d6316:	4b1e      	ldr	r3, [pc, #120]	; (d6390 <_ZN5Print10printFloatEdh+0x174>)
   d6318:	4630      	mov	r0, r6
   d631a:	4639      	mov	r1, r7
   d631c:	f002 fcac 	bl	d8c78 <__aeabi_dmul>
   d6320:	4606      	mov	r6, r0
   d6322:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6324:	f002 ff58 	bl	d91d8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6328:	f1b0 0900 	subs.w	r9, r0, #0
   d632c:	da07      	bge.n	d633e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d632e:	212d      	movs	r1, #45	; 0x2d
   d6330:	4650      	mov	r0, sl
   d6332:	f7ff ff37 	bl	d61a4 <_ZN5Print5printEc>
            val = -n;
   d6336:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d633a:	4680      	mov	r8, r0
   d633c:	e002      	b.n	d6344 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d633e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6340:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6344:	220a      	movs	r2, #10
   d6346:	4650      	mov	r0, sl
   d6348:	f7ff ff47 	bl	d61da <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d634c:	4440      	add	r0, r8
   d634e:	4404      	add	r4, r0
    remainder -= toPrint;
   d6350:	4648      	mov	r0, r9
   d6352:	f002 fc2b 	bl	d8bac <__aeabi_i2d>
   d6356:	4602      	mov	r2, r0
   d6358:	460b      	mov	r3, r1
   d635a:	4630      	mov	r0, r6
   d635c:	4639      	mov	r1, r7
   d635e:	f002 fad7 	bl	d8910 <__aeabi_dsub>
   d6362:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6364:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6368:	4606      	mov	r6, r0
   d636a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d636c:	d1d2      	bne.n	d6314 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d636e:	4620      	mov	r0, r4
   d6370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6374:	000d9af8 	.word	0x000d9af8
   d6378:	7fefffff 	.word	0x7fefffff
   d637c:	000d9b02 	.word	0x000d9b02
   d6380:	41efffff 	.word	0x41efffff
   d6384:	000d9afc 	.word	0x000d9afc
   d6388:	c1efffff 	.word	0xc1efffff
   d638c:	3fe00000 	.word	0x3fe00000
   d6390:	40240000 	.word	0x40240000
   d6394:	000d9b00 	.word	0x000d9b00

000d6398 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d6398:	b538      	push	{r3, r4, r5, lr}
   d639a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d639c:	ee10 0a10 	vmov	r0, s0
   d63a0:	b2cd      	uxtb	r5, r1
   d63a2:	f002 fc15 	bl	d8bd0 <__aeabi_f2d>
   d63a6:	ec41 0b10 	vmov	d0, r0, r1
   d63aa:	4629      	mov	r1, r5
   d63ac:	4620      	mov	r0, r4
}
   d63ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d63b2:	f7ff bf33 	b.w	d621c <_ZN5Print10printFloatEdh>
	...

000d63b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d63b8:	4b01      	ldr	r3, [pc, #4]	; (d63c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d63ba:	4a02      	ldr	r2, [pc, #8]	; (d63c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d63bc:	601a      	str	r2, [r3, #0]
   d63be:	4770      	bx	lr
   d63c0:	2003e3e8 	.word	0x2003e3e8
   d63c4:	000d9b79 	.word	0x000d9b79

000d63c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63c8:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63ce:	601a      	str	r2, [r3, #0]
   d63d0:	4770      	bx	lr
   d63d2:	bf00      	nop
   d63d4:	2003e298 	.word	0x2003e298
   d63d8:	2003e3ec 	.word	0x2003e3ec

000d63dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63dc:	2100      	movs	r1, #0
   d63de:	f7ff bc77 	b.w	d5cd0 <system_delay_ms>

000d63e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d63e8:	b113      	cbz	r3, d63f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63ea:	2203      	movs	r2, #3
   d63ec:	4601      	mov	r1, r0
   d63ee:	4798      	blx	r3
    }
   d63f0:	4620      	mov	r0, r4
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63f4:	b510      	push	{r4, lr}
   d63f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63f8:	f7ff fff3 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
   d63fc:	4620      	mov	r0, r4
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6400:	b513      	push	{r0, r1, r4, lr}
   d6402:	460b      	mov	r3, r1
   d6404:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6406:	c803      	ldmia	r0, {r0, r1}
   d6408:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d640c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6410:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6414:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6418:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d641c:	b002      	add	sp, #8
   d641e:	bd10      	pop	{r4, pc}

000d6420 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6420:	4803      	ldr	r0, [pc, #12]	; (d6430 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6422:	4a04      	ldr	r2, [pc, #16]	; (d6434 <_GLOBAL__sub_I_RGB+0x14>)
   d6424:	4904      	ldr	r1, [pc, #16]	; (d6438 <_GLOBAL__sub_I_RGB+0x18>)
   d6426:	2300      	movs	r3, #0
   d6428:	6083      	str	r3, [r0, #8]
   d642a:	f000 bfc7 	b.w	d73bc <__aeabi_atexit>
   d642e:	bf00      	nop
   d6430:	2003e3f0 	.word	0x2003e3f0
   d6434:	2003e308 	.word	0x2003e308
   d6438:	000d63f5 	.word	0x000d63f5

000d643c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d643c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d643e:	4b0c      	ldr	r3, [pc, #48]	; (d6470 <serialEventRun+0x34>)
   d6440:	b133      	cbz	r3, d6450 <serialEventRun+0x14>
   d6442:	f000 fc1b 	bl	d6c7c <_Z16_fetch_usbserialv>
   d6446:	6803      	ldr	r3, [r0, #0]
   d6448:	691b      	ldr	r3, [r3, #16]
   d644a:	4798      	blx	r3
   d644c:	2800      	cmp	r0, #0
   d644e:	dc09      	bgt.n	d6464 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6450:	4b08      	ldr	r3, [pc, #32]	; (d6474 <serialEventRun+0x38>)
   d6452:	b163      	cbz	r3, d646e <serialEventRun+0x32>
   d6454:	f000 fc94 	bl	d6d80 <_Z22__fetch_global_Serial1v>
   d6458:	6803      	ldr	r3, [r0, #0]
   d645a:	691b      	ldr	r3, [r3, #16]
   d645c:	4798      	blx	r3
   d645e:	2800      	cmp	r0, #0
   d6460:	dc03      	bgt.n	d646a <serialEventRun+0x2e>
   d6462:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6464:	f3af 8000 	nop.w
   d6468:	e7f2      	b.n	d6450 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d646a:	f3af 8000 	nop.w
   d646e:	bd08      	pop	{r3, pc}
	...

000d6478 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6478:	b508      	push	{r3, lr}
	serialEventRun();
   d647a:	f7ff ffdf 	bl	d643c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d647e:	f7ff fb17 	bl	d5ab0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6482:	4b01      	ldr	r3, [pc, #4]	; (d6488 <_post_loop+0x10>)
   d6484:	6018      	str	r0, [r3, #0]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	2003e734 	.word	0x2003e734

000d648c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d648c:	4802      	ldr	r0, [pc, #8]	; (d6498 <_Z33system_initialize_user_backup_ramv+0xc>)
   d648e:	4a03      	ldr	r2, [pc, #12]	; (d649c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6490:	4903      	ldr	r1, [pc, #12]	; (d64a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6492:	1a12      	subs	r2, r2, r0
   d6494:	f003 b90a 	b.w	d96ac <memcpy>
   d6498:	2003f400 	.word	0x2003f400
   d649c:	2003f404 	.word	0x2003f404
   d64a0:	000d9e48 	.word	0x000d9e48

000d64a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d64a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64a6:	2300      	movs	r3, #0
   d64a8:	9300      	str	r3, [sp, #0]
   d64aa:	461a      	mov	r2, r3
   d64ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64b0:	f7ff fc30 	bl	d5d14 <system_ctrl_set_result>
}
   d64b4:	b003      	add	sp, #12
   d64b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64bc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d64bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d64be:	8843      	ldrh	r3, [r0, #2]
   d64c0:	2b0a      	cmp	r3, #10
   d64c2:	d008      	beq.n	d64d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64c4:	2b50      	cmp	r3, #80	; 0x50
   d64c6:	d109      	bne.n	d64dc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d64c8:	4b09      	ldr	r3, [pc, #36]	; (d64f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64ca:	681b      	ldr	r3, [r3, #0]
   d64cc:	b13b      	cbz	r3, d64de <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d64ce:	b003      	add	sp, #12
   d64d0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d64d4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d64d6:	f7ff ffe5 	bl	d64a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d64da:	e006      	b.n	d64ea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64dc:	2300      	movs	r3, #0
   d64de:	9300      	str	r3, [sp, #0]
   d64e0:	461a      	mov	r2, r3
   d64e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64e6:	f7ff fc15 	bl	d5d14 <system_ctrl_set_result>
        break;
    }
}
   d64ea:	b003      	add	sp, #12
   d64ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d64f0:	2003e400 	.word	0x2003e400

000d64f4 <module_user_init_hook>:

void module_user_init_hook()
{
   d64f4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64f6:	4c10      	ldr	r4, [pc, #64]	; (d6538 <module_user_init_hook+0x44>)
   d64f8:	4d10      	ldr	r5, [pc, #64]	; (d653c <module_user_init_hook+0x48>)
   d64fa:	6823      	ldr	r3, [r4, #0]
   d64fc:	42ab      	cmp	r3, r5
   d64fe:	4b10      	ldr	r3, [pc, #64]	; (d6540 <module_user_init_hook+0x4c>)
   d6500:	bf0c      	ite	eq
   d6502:	2201      	moveq	r2, #1
   d6504:	2200      	movne	r2, #0
   d6506:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6508:	d002      	beq.n	d6510 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d650a:	f7ff ffbf 	bl	d648c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d650e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6510:	f7ff fac6 	bl	d5aa0 <HAL_RNG_GetRandomNumber>
   d6514:	4604      	mov	r4, r0
    srand(seed);
   d6516:	f003 f8dd 	bl	d96d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d651a:	4b0a      	ldr	r3, [pc, #40]	; (d6544 <module_user_init_hook+0x50>)
   d651c:	b113      	cbz	r3, d6524 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d651e:	4620      	mov	r0, r4
   d6520:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6524:	2100      	movs	r1, #0
   d6526:	4807      	ldr	r0, [pc, #28]	; (d6544 <module_user_init_hook+0x50>)
   d6528:	f7ff fc5e 	bl	d5de8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d652c:	2100      	movs	r1, #0
   d652e:	4806      	ldr	r0, [pc, #24]	; (d6548 <module_user_init_hook+0x54>)
}
   d6530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6534:	f7ff bbe4 	b.w	d5d00 <system_ctrl_set_app_request_handler>
   d6538:	2003f400 	.word	0x2003f400
   d653c:	9a271c1e 	.word	0x9a271c1e
   d6540:	2003e404 	.word	0x2003e404
   d6544:	00000000 	.word	0x00000000
   d6548:	000d64bd 	.word	0x000d64bd

000d654c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d654c:	4770      	bx	lr

000d654e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d654e:	2000      	movs	r0, #0
   d6550:	4770      	bx	lr

000d6552 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6552:	b510      	push	{r4, lr}
   d6554:	2110      	movs	r1, #16
   d6556:	4604      	mov	r4, r0
   d6558:	f000 ff3e 	bl	d73d8 <_ZdlPvj>
   d655c:	4620      	mov	r0, r4
   d655e:	bd10      	pop	{r4, pc}

000d6560 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6560:	b508      	push	{r3, lr}
      { delete this; }
   d6562:	b108      	cbz	r0, d6568 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6564:	f7ff fff5 	bl	d6552 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6568:	bd08      	pop	{r3, pc}

000d656a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d656a:	2200      	movs	r2, #0
   d656c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d656e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6570:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6574:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6576:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d657a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d657c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d657e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6580:	680c      	ldr	r4, [r1, #0]
   d6582:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6584:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6586:	bd10      	pop	{r4, pc}

000d6588 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6588:	b510      	push	{r4, lr}
   d658a:	4604      	mov	r4, r0
    free((void*)msg_);
   d658c:	6800      	ldr	r0, [r0, #0]
   d658e:	f7ff fc3b 	bl	d5e08 <free>
}
   d6592:	4620      	mov	r0, r4
   d6594:	bd10      	pop	{r4, pc}

000d6596 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6596:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6598:	68c4      	ldr	r4, [r0, #12]
   d659a:	b1f4      	cbz	r4, d65da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d659c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d659e:	2b02      	cmp	r3, #2
   d65a0:	d103      	bne.n	d65aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d65a2:	f104 000c 	add.w	r0, r4, #12
   d65a6:	f7ff ffef 	bl	d6588 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d65aa:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d65ac:	b135      	cbz	r5, d65bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65ae:	4628      	mov	r0, r5
   d65b0:	f7ff ff17 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
   d65b4:	2110      	movs	r1, #16
   d65b6:	4628      	mov	r0, r5
   d65b8:	f000 ff0e 	bl	d73d8 <_ZdlPvj>
   d65bc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d65be:	b135      	cbz	r5, d65ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d65c0:	4628      	mov	r0, r5
   d65c2:	f7ff ff0e 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
   d65c6:	2110      	movs	r1, #16
   d65c8:	4628      	mov	r0, r5
   d65ca:	f000 ff05 	bl	d73d8 <_ZdlPvj>
   d65ce:	4620      	mov	r0, r4
   d65d0:	2114      	movs	r1, #20
   d65d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d65d6:	f000 beff 	b.w	d73d8 <_ZdlPvj>
   d65da:	bd38      	pop	{r3, r4, r5, pc}

000d65dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d65dc:	b513      	push	{r0, r1, r4, lr}
   d65de:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d65e0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d65e4:	2300      	movs	r3, #0
   d65e6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d65e8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d65ea:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d65ec:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65ee:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d65f0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d65f2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65f4:	f7ff fd8b 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d65f8:	4620      	mov	r0, r4
   d65fa:	b002      	add	sp, #8
   d65fc:	bd10      	pop	{r4, pc}

000d65fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d65fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6600:	460c      	mov	r4, r1
   d6602:	ad02      	add	r5, sp, #8
   d6604:	f854 3b04 	ldr.w	r3, [r4], #4
   d6608:	f845 3d08 	str.w	r3, [r5, #-8]!
   d660c:	4606      	mov	r6, r0
   d660e:	460f      	mov	r7, r1
   d6610:	a801      	add	r0, sp, #4
   d6612:	4621      	mov	r1, r4
   d6614:	f7ff fd74 	bl	d6100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6618:	4629      	mov	r1, r5
   d661a:	4630      	mov	r0, r6
   d661c:	f7ff ffde 	bl	d65dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6620:	a801      	add	r0, sp, #4
   d6622:	f7ff fd74 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6626:	4620      	mov	r0, r4
   d6628:	f7ff fd71 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d662c:	4638      	mov	r0, r7
   d662e:	2108      	movs	r1, #8
   d6630:	f000 fed2 	bl	d73d8 <_ZdlPvj>
        return p;
    }
   d6634:	4630      	mov	r0, r6
   d6636:	b003      	add	sp, #12
   d6638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d663c:	b538      	push	{r3, r4, r5, lr}
   d663e:	2300      	movs	r3, #0
   d6640:	4604      	mov	r4, r0
   d6642:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6644:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6646:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6648:	f7fd fd27 	bl	d409a <_Znwj>
   d664c:	b128      	cbz	r0, d665a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d664e:	2301      	movs	r3, #1
   d6650:	6043      	str	r3, [r0, #4]
   d6652:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6654:	4b02      	ldr	r3, [pc, #8]	; (d6660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6656:	6003      	str	r3, [r0, #0]
   d6658:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d665a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d665c:	4620      	mov	r0, r4
   d665e:	bd38      	pop	{r3, r4, r5, pc}
   d6660:	000d9c14 	.word	0x000d9c14

000d6664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6664:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6666:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6668:	b90a      	cbnz	r2, d666e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d666a:	f000 fec8 	bl	d73fe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d666e:	68c3      	ldr	r3, [r0, #12]
    }
   d6670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6674:	4718      	bx	r3

000d6676 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6676:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6678:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d667a:	f100 0110 	add.w	r1, r0, #16
   d667e:	f7ff fff1 	bl	d6664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6682:	bd08      	pop	{r3, pc}

000d6684 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6684:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6686:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6688:	b90a      	cbnz	r2, d668e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d668a:	f000 feb8 	bl	d73fe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d668e:	68c3      	ldr	r3, [r0, #12]
    }
   d6690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6694:	4718      	bx	r3

000d6696 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6696:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6698:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d669a:	f100 0110 	add.w	r1, r0, #16
   d669e:	f7ff fff1 	bl	d6684 <_ZNKSt8functionIFvRKbEEclES1_>
   d66a2:	bd08      	pop	{r3, pc}

000d66a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d66a4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d66a6:	2300      	movs	r3, #0
   d66a8:	6083      	str	r3, [r0, #8]
   d66aa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d66ac:	4604      	mov	r4, r0
   d66ae:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d66b0:	b12b      	cbz	r3, d66be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d66b2:	2202      	movs	r2, #2
   d66b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d66b6:	68eb      	ldr	r3, [r5, #12]
   d66b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d66ba:	68ab      	ldr	r3, [r5, #8]
   d66bc:	60a3      	str	r3, [r4, #8]
	}
    }
   d66be:	4620      	mov	r0, r4
   d66c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d66c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66c6:	b089      	sub	sp, #36	; 0x24
   d66c8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d66ca:	4668      	mov	r0, sp
   d66cc:	f7ff ff4d 	bl	d656a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d66d0:	2300      	movs	r3, #0
   d66d2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d66d6:	f04f 0202 	mov.w	r2, #2
   d66da:	e8d4 3f4f 	ldrexb	r3, [r4]
   d66de:	2b00      	cmp	r3, #0
   d66e0:	d103      	bne.n	d66ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d66e2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d66e6:	2900      	cmp	r1, #0
   d66e8:	d1f7      	bne.n	d66da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d66ea:	d002      	beq.n	d66f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d66ec:	f88d 3008 	strb.w	r3, [sp, #8]
   d66f0:	e063      	b.n	d67ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d66f2:	f114 050c 	adds.w	r5, r4, #12
   d66f6:	d003      	beq.n	d6700 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d66f8:	4669      	mov	r1, sp
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7ff ff35 	bl	d656a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6700:	f3bf 8f5f 	dmb	sy
   d6704:	2301      	movs	r3, #1
   d6706:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6708:	2000      	movs	r0, #0
   d670a:	f104 0308 	add.w	r3, r4, #8
   d670e:	f3bf 8f5f 	dmb	sy
   d6712:	e853 6f00 	ldrex	r6, [r3]
   d6716:	e843 0200 	strex	r2, r0, [r3]
   d671a:	2a00      	cmp	r2, #0
   d671c:	d1f9      	bne.n	d6712 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d671e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6722:	2e00      	cmp	r6, #0
   d6724:	d049      	beq.n	d67ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6726:	f7ff fadb 	bl	d5ce0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d672a:	b120      	cbz	r0, d6736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d672c:	4629      	mov	r1, r5
   d672e:	4630      	mov	r0, r6
   d6730:	f7ff ff98 	bl	d6664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6734:	e03a      	b.n	d67ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6736:	4631      	mov	r1, r6
   d6738:	a802      	add	r0, sp, #8
   d673a:	f7ff ffb3 	bl	d66a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d673e:	68e0      	ldr	r0, [r4, #12]
   d6740:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6744:	b108      	cbz	r0, d674a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6746:	f002 ffed 	bl	d9724 <strdup>
   d674a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d674c:	2010      	movs	r0, #16
   d674e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6752:	f7fd fca2 	bl	d409a <_Znwj>
   d6756:	4605      	mov	r5, r0
   d6758:	b1e8      	cbz	r0, d6796 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d675a:	2700      	movs	r7, #0
   d675c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d675e:	2018      	movs	r0, #24
   d6760:	f7fd fc9b 	bl	d409a <_Znwj>
   d6764:	4604      	mov	r4, r0
   d6766:	b188      	cbz	r0, d678c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6768:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d676a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d676c:	a802      	add	r0, sp, #8
   d676e:	f7ff fe47 	bl	d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6772:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6774:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6776:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6778:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d677a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d677c:	a906      	add	r1, sp, #24
   d677e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6780:	60e3      	str	r3, [r4, #12]
   d6782:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6786:	9205      	str	r2, [sp, #20]
   d6788:	f7ff feef 	bl	d656a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d678c:	4b0d      	ldr	r3, [pc, #52]	; (d67c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d678e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6790:	4b0d      	ldr	r3, [pc, #52]	; (d67c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6792:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6794:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6796:	a806      	add	r0, sp, #24
   d6798:	f7ff fef6 	bl	d6588 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d679c:	a802      	add	r0, sp, #8
   d679e:	f7ff fe20 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d67a2:	2200      	movs	r2, #0
   d67a4:	4629      	mov	r1, r5
   d67a6:	4809      	ldr	r0, [pc, #36]	; (d67cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d67a8:	f7ff faa2 	bl	d5cf0 <application_thread_invoke>
   d67ac:	4630      	mov	r0, r6
   d67ae:	f7ff fe18 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d67b2:	2110      	movs	r1, #16
   d67b4:	4630      	mov	r0, r6
   d67b6:	f000 fe0f 	bl	d73d8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d67ba:	4668      	mov	r0, sp
   d67bc:	f7ff fee4 	bl	d6588 <_ZN8particle5ErrorD1Ev>
    }
   d67c0:	b009      	add	sp, #36	; 0x24
   d67c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d67c4:	000d6677 	.word	0x000d6677
   d67c8:	000d68ed 	.word	0x000d68ed
   d67cc:	000d6dcd 	.word	0x000d6dcd

000d67d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d67d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67d4:	b08b      	sub	sp, #44	; 0x2c
   d67d6:	4606      	mov	r6, r0
   d67d8:	460f      	mov	r7, r1
   d67da:	4690      	mov	r8, r2
   d67dc:	4699      	mov	r9, r3
   d67de:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d67e2:	f7ff faf1 	bl	d5dc8 <spark_cloud_flag_connected>
   d67e6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d67e8:	4683      	mov	fp, r0
   d67ea:	bb30      	cbnz	r0, d683a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d67ec:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d67f0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d67f2:	a905      	add	r1, sp, #20
   d67f4:	4628      	mov	r0, r5
   d67f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d67fa:	f7ff feb6 	bl	d656a <_ZN8particle5ErrorC1EOS0_>
   d67fe:	2014      	movs	r0, #20
   d6800:	f7fd fc4b 	bl	d409a <_Znwj>
   d6804:	4604      	mov	r4, r0
   d6806:	b158      	cbz	r0, d6820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6808:	2302      	movs	r3, #2
   d680a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d680c:	2301      	movs	r3, #1
   d680e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6810:	f8c0 b004 	str.w	fp, [r0, #4]
   d6814:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6818:	4629      	mov	r1, r5
   d681a:	300c      	adds	r0, #12
   d681c:	f7ff fea5 	bl	d656a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6820:	4630      	mov	r0, r6
   d6822:	4621      	mov	r1, r4
   d6824:	f840 4b04 	str.w	r4, [r0], #4
   d6828:	f7ff ff08 	bl	d663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d682c:	4628      	mov	r0, r5
   d682e:	f7ff feab 	bl	d6588 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6832:	a805      	add	r0, sp, #20
   d6834:	f7ff fea8 	bl	d6588 <_ZN8particle5ErrorD1Ev>
   d6838:	e052      	b.n	d68e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d683a:	2400      	movs	r4, #0
   d683c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d683e:	2014      	movs	r0, #20
   d6840:	606c      	str	r4, [r5, #4]
   d6842:	60ac      	str	r4, [r5, #8]
   d6844:	9307      	str	r3, [sp, #28]
   d6846:	f7fd fc28 	bl	d409a <_Znwj>
   d684a:	4601      	mov	r1, r0
   d684c:	b118      	cbz	r0, d6856 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d684e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6850:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6852:	6044      	str	r4, [r0, #4]
   d6854:	6084      	str	r4, [r0, #8]
   d6856:	a804      	add	r0, sp, #16
   d6858:	9103      	str	r1, [sp, #12]
   d685a:	f7ff feef 	bl	d663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d685e:	4b22      	ldr	r3, [pc, #136]	; (d68e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6860:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6862:	2008      	movs	r0, #8
   d6864:	f7fd fc19 	bl	d409a <_Znwj>
   d6868:	4604      	mov	r4, r0
   d686a:	b128      	cbz	r0, d6878 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d686c:	9b03      	ldr	r3, [sp, #12]
   d686e:	f840 3b04 	str.w	r3, [r0], #4
   d6872:	a904      	add	r1, sp, #16
   d6874:	f7ff fc44 	bl	d6100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6878:	9500      	str	r5, [sp, #0]
   d687a:	fa5f f38a 	uxtb.w	r3, sl
   d687e:	464a      	mov	r2, r9
   d6880:	4641      	mov	r1, r8
   d6882:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6884:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6886:	f7ff faa7 	bl	d5dd8 <spark_send_event>
   d688a:	b920      	cbnz	r0, d6896 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d688c:	9b03      	ldr	r3, [sp, #12]
   d688e:	785b      	ldrb	r3, [r3, #1]
   d6890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6894:	b183      	cbz	r3, d68b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6896:	9b03      	ldr	r3, [sp, #12]
   d6898:	9305      	str	r3, [sp, #20]
   d689a:	a904      	add	r1, sp, #16
   d689c:	a806      	add	r0, sp, #24
   d689e:	f7ff fc2f 	bl	d6100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d68a2:	a905      	add	r1, sp, #20
   d68a4:	4630      	mov	r0, r6
   d68a6:	f7ff fe99 	bl	d65dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68aa:	a806      	add	r0, sp, #24
   d68ac:	f7ff fc2f 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68b0:	a804      	add	r0, sp, #16
   d68b2:	f7ff fc2c 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68b6:	e013      	b.n	d68e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d68b8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d68bc:	a905      	add	r1, sp, #20
   d68be:	a803      	add	r0, sp, #12
   d68c0:	9205      	str	r2, [sp, #20]
   d68c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d68c6:	f7ff fefd 	bl	d66c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d68ca:	a805      	add	r0, sp, #20
   d68cc:	f7ff fe5c 	bl	d6588 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d68d0:	a805      	add	r0, sp, #20
   d68d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d68d4:	f7ff fe93 	bl	d65fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d68d8:	a806      	add	r0, sp, #24
   d68da:	f7ff fc18 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68de:	e7da      	b.n	d6896 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d68e0:	4630      	mov	r0, r6
   d68e2:	b00b      	add	sp, #44	; 0x2c
   d68e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68e8:	000d6a5d 	.word	0x000d6a5d

000d68ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d68ec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d68ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68f0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d68f2:	d006      	beq.n	d6902 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d68f4:	2a03      	cmp	r2, #3
   d68f6:	d017      	beq.n	d6928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d68f8:	2a01      	cmp	r2, #1
   d68fa:	d122      	bne.n	d6942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d68fc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d68fe:	6003      	str	r3, [r0, #0]
	      break;
   d6900:	e01f      	b.n	d6942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6902:	2018      	movs	r0, #24
   d6904:	680e      	ldr	r6, [r1, #0]
   d6906:	f7fd fbc8 	bl	d409a <_Znwj>
   d690a:	4605      	mov	r5, r0
   d690c:	b150      	cbz	r0, d6924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d690e:	4631      	mov	r1, r6
   d6910:	f7ff fec8 	bl	d66a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6914:	6930      	ldr	r0, [r6, #16]
   d6916:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d691a:	b108      	cbz	r0, d6920 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d691c:	f002 ff02 	bl	d9724 <strdup>
   d6920:	6128      	str	r0, [r5, #16]
   d6922:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6924:	6025      	str	r5, [r4, #0]
   d6926:	e00c      	b.n	d6942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6928:	6804      	ldr	r4, [r0, #0]
   d692a:	b154      	cbz	r4, d6942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d692c:	f104 0010 	add.w	r0, r4, #16
   d6930:	f7ff fe2a 	bl	d6588 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6934:	4620      	mov	r0, r4
   d6936:	f7ff fd54 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d693a:	2118      	movs	r1, #24
   d693c:	4620      	mov	r0, r4
   d693e:	f000 fd4b 	bl	d73d8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6942:	2000      	movs	r0, #0
   d6944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6946 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6946:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6948:	2300      	movs	r3, #0
   d694a:	6083      	str	r3, [r0, #8]
   d694c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d694e:	4604      	mov	r4, r0
   d6950:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6952:	b12b      	cbz	r3, d6960 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6954:	2202      	movs	r2, #2
   d6956:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6958:	68eb      	ldr	r3, [r5, #12]
   d695a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d695c:	68ab      	ldr	r3, [r5, #8]
   d695e:	60a3      	str	r3, [r4, #8]
	}
    }
   d6960:	4620      	mov	r0, r4
   d6962:	bd38      	pop	{r3, r4, r5, pc}

000d6964 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6964:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6966:	b570      	push	{r4, r5, r6, lr}
   d6968:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d696a:	d006      	beq.n	d697a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d696c:	2a03      	cmp	r2, #3
   d696e:	d011      	beq.n	d6994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6970:	2a01      	cmp	r2, #1
   d6972:	d118      	bne.n	d69a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6974:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6976:	6003      	str	r3, [r0, #0]
	      break;
   d6978:	e015      	b.n	d69a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d697a:	2014      	movs	r0, #20
   d697c:	680e      	ldr	r6, [r1, #0]
   d697e:	f7fd fb8c 	bl	d409a <_Znwj>
   d6982:	4605      	mov	r5, r0
   d6984:	b120      	cbz	r0, d6990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6986:	4631      	mov	r1, r6
   d6988:	f7ff ffdd 	bl	d6946 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d698c:	7c33      	ldrb	r3, [r6, #16]
   d698e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6990:	6025      	str	r5, [r4, #0]
   d6992:	e008      	b.n	d69a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6994:	6804      	ldr	r4, [r0, #0]
   d6996:	b134      	cbz	r4, d69a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6998:	4620      	mov	r0, r4
   d699a:	f7ff fd22 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d699e:	2114      	movs	r1, #20
   d69a0:	4620      	mov	r0, r4
   d69a2:	f000 fd19 	bl	d73d8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d69a6:	2000      	movs	r0, #0
   d69a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d69ac:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d69ae:	2300      	movs	r3, #0
   d69b0:	b087      	sub	sp, #28
   d69b2:	460c      	mov	r4, r1
   d69b4:	f3bf 8f5f 	dmb	sy
   d69b8:	e850 6f00 	ldrex	r6, [r0]
   d69bc:	e840 3200 	strex	r2, r3, [r0]
   d69c0:	2a00      	cmp	r2, #0
   d69c2:	d1f9      	bne.n	d69b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d69c4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d69c8:	2e00      	cmp	r6, #0
   d69ca:	d03f      	beq.n	d6a4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d69cc:	4618      	mov	r0, r3
   d69ce:	f7ff f987 	bl	d5ce0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d69d2:	4607      	mov	r7, r0
   d69d4:	b120      	cbz	r0, d69e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d69d6:	4621      	mov	r1, r4
   d69d8:	4630      	mov	r0, r6
   d69da:	f7ff fe53 	bl	d6684 <_ZNKSt8functionIFvRKbEEclES1_>
   d69de:	e02e      	b.n	d6a3e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d69e0:	4631      	mov	r1, r6
   d69e2:	a801      	add	r0, sp, #4
   d69e4:	f7ff ffaf 	bl	d6946 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d69e8:	7823      	ldrb	r3, [r4, #0]
   d69ea:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d69ee:	2010      	movs	r0, #16
   d69f0:	f7fd fb53 	bl	d409a <_Znwj>
   d69f4:	4605      	mov	r5, r0
   d69f6:	b1d0      	cbz	r0, d6a2e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d69f8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d69fa:	2014      	movs	r0, #20
   d69fc:	f7fd fb4d 	bl	d409a <_Znwj>
   d6a00:	4604      	mov	r4, r0
   d6a02:	b178      	cbz	r0, d6a24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a04:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6a06:	4601      	mov	r1, r0
   d6a08:	a801      	add	r0, sp, #4
   d6a0a:	f7ff fcf9 	bl	d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a0e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6a10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6a16:	9203      	str	r2, [sp, #12]
   d6a18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a1a:	60e3      	str	r3, [r4, #12]
   d6a1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6a20:	9204      	str	r2, [sp, #16]
   d6a22:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6a24:	4b0a      	ldr	r3, [pc, #40]	; (d6a50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6a26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6a28:	4b0a      	ldr	r3, [pc, #40]	; (d6a54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a2a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6a2c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a2e:	a801      	add	r0, sp, #4
   d6a30:	f7ff fcd7 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6a34:	2200      	movs	r2, #0
   d6a36:	4629      	mov	r1, r5
   d6a38:	4807      	ldr	r0, [pc, #28]	; (d6a58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6a3a:	f7ff f959 	bl	d5cf0 <application_thread_invoke>
   d6a3e:	4630      	mov	r0, r6
   d6a40:	f7ff fccf 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6a44:	2110      	movs	r1, #16
   d6a46:	4630      	mov	r0, r6
   d6a48:	f000 fcc6 	bl	d73d8 <_ZdlPvj>
        }
    }
   d6a4c:	b007      	add	sp, #28
   d6a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a50:	000d6697 	.word	0x000d6697
   d6a54:	000d6965 	.word	0x000d6965
   d6a58:	000d6dcd 	.word	0x000d6dcd

000d6a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6a5c:	b530      	push	{r4, r5, lr}
   d6a5e:	b085      	sub	sp, #20
   d6a60:	4604      	mov	r4, r0
   d6a62:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6a64:	4668      	mov	r0, sp
   d6a66:	4611      	mov	r1, r2
   d6a68:	f7ff fdc9 	bl	d65fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6a6c:	b17c      	cbz	r4, d6a8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6a6e:	b224      	sxth	r4, r4
   d6a70:	4628      	mov	r0, r5
   d6a72:	b10d      	cbz	r5, d6a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6a74:	f002 fe56 	bl	d9724 <strdup>
   d6a78:	9002      	str	r0, [sp, #8]
   d6a7a:	a902      	add	r1, sp, #8
   d6a7c:	4668      	mov	r0, sp
   d6a7e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6a82:	f7ff fe1f 	bl	d66c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6a86:	a802      	add	r0, sp, #8
   d6a88:	f7ff fd7e 	bl	d6588 <_ZN8particle5ErrorD1Ev>
   d6a8c:	e01d      	b.n	d6aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6a8e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6a90:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6a94:	f04f 0201 	mov.w	r2, #1
   d6a98:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6a9c:	42a3      	cmp	r3, r4
   d6a9e:	d103      	bne.n	d6aa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6aa0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6aa4:	2900      	cmp	r1, #0
   d6aa6:	d1f7      	bne.n	d6a98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6aa8:	d002      	beq.n	d6ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6aaa:	f88d 3008 	strb.w	r3, [sp, #8]
   d6aae:	e00c      	b.n	d6aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6ab0:	f110 010c 	adds.w	r1, r0, #12
   d6ab4:	f04f 0301 	mov.w	r3, #1
   d6ab8:	bf18      	it	ne
   d6aba:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6abc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6ac0:	3004      	adds	r0, #4
   d6ac2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6ac6:	f7ff ff71 	bl	d69ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6aca:	a801      	add	r0, sp, #4
   d6acc:	f7ff fb1f 	bl	d610e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6ad0:	b005      	add	sp, #20
   d6ad2:	bd30      	pop	{r4, r5, pc}

000d6ad4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ad4:	4770      	bx	lr

000d6ad6 <_ZN9IPAddressD0Ev>:
   d6ad6:	b510      	push	{r4, lr}
   d6ad8:	2118      	movs	r1, #24
   d6ada:	4604      	mov	r4, r0
   d6adc:	f000 fc7c 	bl	d73d8 <_ZdlPvj>
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	bd10      	pop	{r4, pc}

000d6ae4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ae6:	7d03      	ldrb	r3, [r0, #20]
   d6ae8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6aea:	b08d      	sub	sp, #52	; 0x34
   d6aec:	460e      	mov	r6, r1
   d6aee:	f100 0704 	add.w	r7, r0, #4
   d6af2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6af6:	d002      	beq.n	d6afe <_ZNK9IPAddress7printToER5Print+0x1a>
   d6af8:	f100 0508 	add.w	r5, r0, #8
   d6afc:	e018      	b.n	d6b30 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6afe:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b00:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b02:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b06:	232f      	movs	r3, #47	; 0x2f
   d6b08:	462a      	mov	r2, r5
   d6b0a:	200a      	movs	r0, #10
   d6b0c:	f7ff f800 	bl	d5b10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b10:	4628      	mov	r0, r5
   d6b12:	f002 fe22 	bl	d975a <strlen>
   d6b16:	6833      	ldr	r3, [r6, #0]
   d6b18:	4602      	mov	r2, r0
   d6b1a:	68db      	ldr	r3, [r3, #12]
   d6b1c:	4629      	mov	r1, r5
   d6b1e:	4630      	mov	r0, r6
   d6b20:	4798      	blx	r3
   d6b22:	e00f      	b.n	d6b44 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6b24:	b124      	cbz	r4, d6b30 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6b26:	212e      	movs	r1, #46	; 0x2e
   d6b28:	4630      	mov	r0, r6
   d6b2a:	f7ff fb3b 	bl	d61a4 <_ZN5Print5printEc>
   d6b2e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6b30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6b34:	220a      	movs	r2, #10
   d6b36:	4630      	mov	r0, r6
   d6b38:	f7ff fb4f 	bl	d61da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b3c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b3e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b40:	d1f0      	bne.n	d6b24 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b42:	4620      	mov	r0, r4
    }
    return n;
}
   d6b44:	b00d      	add	sp, #52	; 0x34
   d6b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b48 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6b48:	b510      	push	{r4, lr}
   d6b4a:	4b05      	ldr	r3, [pc, #20]	; (d6b60 <_ZN9IPAddressC1Ev+0x18>)
   d6b4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b4e:	2211      	movs	r2, #17
   d6b50:	f840 3b04 	str.w	r3, [r0], #4
   d6b54:	2100      	movs	r1, #0
   d6b56:	f002 fdb4 	bl	d96c2 <memset>
{
    clear();
}
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	bd10      	pop	{r4, pc}
   d6b5e:	bf00      	nop
   d6b60:	000d9c30 	.word	0x000d9c30

000d6b64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b64:	4603      	mov	r3, r0
   d6b66:	4a07      	ldr	r2, [pc, #28]	; (d6b84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b68:	b510      	push	{r4, lr}
   d6b6a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6b6e:	f101 0210 	add.w	r2, r1, #16
   d6b72:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b76:	f843 4b04 	str.w	r4, [r3], #4
   d6b7a:	4291      	cmp	r1, r2
   d6b7c:	d1f9      	bne.n	d6b72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b7e:	780a      	ldrb	r2, [r1, #0]
   d6b80:	701a      	strb	r2, [r3, #0]
}
   d6b82:	bd10      	pop	{r4, pc}
   d6b84:	000d9c30 	.word	0x000d9c30

000d6b88 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6b88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6b9a:	2304      	movs	r3, #4
   d6b9c:	6041      	str	r1, [r0, #4]
   d6b9e:	7503      	strb	r3, [r0, #20]
   d6ba0:	bd10      	pop	{r4, pc}

000d6ba2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6ba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6ba4:	780d      	ldrb	r5, [r1, #0]
   d6ba6:	788b      	ldrb	r3, [r1, #2]
   d6ba8:	784a      	ldrb	r2, [r1, #1]
   d6baa:	78c9      	ldrb	r1, [r1, #3]
   d6bac:	9100      	str	r1, [sp, #0]
   d6bae:	4629      	mov	r1, r5
   d6bb0:	f7ff ffea 	bl	d6b88 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6bb4:	b003      	add	sp, #12
   d6bb6:	bd30      	pop	{r4, r5, pc}

000d6bb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bb8:	7441      	strb	r1, [r0, #17]
   d6bba:	4770      	bx	lr

000d6bbc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6bbc:	4770      	bx	lr

000d6bbe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6bbe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6bc0:	2100      	movs	r1, #0
   d6bc2:	7c00      	ldrb	r0, [r0, #16]
   d6bc4:	f7ff f864 	bl	d5c90 <HAL_USB_USART_Receive_Data>
}
   d6bc8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bcc:	bf28      	it	cs
   d6bce:	f04f 30ff 	movcs.w	r0, #4294967295
   d6bd2:	bd08      	pop	{r3, pc}

000d6bd4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6bd4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6bd6:	2101      	movs	r1, #1
   d6bd8:	7c00      	ldrb	r0, [r0, #16]
   d6bda:	f7ff f859 	bl	d5c90 <HAL_USB_USART_Receive_Data>
}
   d6bde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6be2:	bf28      	it	cs
   d6be4:	f04f 30ff 	movcs.w	r0, #4294967295
   d6be8:	bd08      	pop	{r3, pc}

000d6bea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6bea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6bec:	7c00      	ldrb	r0, [r0, #16]
   d6bee:	f7ff f847 	bl	d5c80 <HAL_USB_USART_Available_Data_For_Write>
}
   d6bf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bf6:	bd08      	pop	{r3, pc}

000d6bf8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6bf8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6bfa:	7c00      	ldrb	r0, [r0, #16]
   d6bfc:	f7ff f838 	bl	d5c70 <HAL_USB_USART_Available_Data>
}
   d6c00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c04:	bd08      	pop	{r3, pc}

000d6c06 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c06:	7c00      	ldrb	r0, [r0, #16]
   d6c08:	f7ff b852 	b.w	d5cb0 <HAL_USB_USART_Flush_Data>

000d6c0c <_ZN9USBSerialD0Ev>:
   d6c0c:	b510      	push	{r4, lr}
   d6c0e:	2114      	movs	r1, #20
   d6c10:	4604      	mov	r4, r0
   d6c12:	f000 fbe1 	bl	d73d8 <_ZdlPvj>
   d6c16:	4620      	mov	r0, r4
   d6c18:	bd10      	pop	{r4, pc}

000d6c1a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c1a:	b538      	push	{r3, r4, r5, lr}
   d6c1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c1e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c22:	f7ff f82d 	bl	d5c80 <HAL_USB_USART_Available_Data_For_Write>
   d6c26:	2800      	cmp	r0, #0
   d6c28:	dc01      	bgt.n	d6c2e <_ZN9USBSerial5writeEh+0x14>
   d6c2a:	7c60      	ldrb	r0, [r4, #17]
   d6c2c:	b128      	cbz	r0, d6c3a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6c2e:	4629      	mov	r1, r5
   d6c30:	7c20      	ldrb	r0, [r4, #16]
   d6c32:	f7ff f835 	bl	d5ca0 <HAL_USB_USART_Send_Data>
   d6c36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6c3a:	bd38      	pop	{r3, r4, r5, pc}

000d6c3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c3c:	b510      	push	{r4, lr}
   d6c3e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6c40:	2300      	movs	r3, #0
   d6c42:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c48:	60a3      	str	r3, [r4, #8]
   d6c4a:	4b05      	ldr	r3, [pc, #20]	; (d6c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6c4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c50:	4608      	mov	r0, r1
{
  _serial = serial;
   d6c52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6c54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6c56:	4611      	mov	r1, r2
   d6c58:	f7fe fffa 	bl	d5c50 <HAL_USB_USART_Init>
}
   d6c5c:	4620      	mov	r0, r4
   d6c5e:	bd10      	pop	{r4, pc}
   d6c60:	000d9c44 	.word	0x000d9c44

000d6c64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6c64:	2200      	movs	r2, #0
   d6c66:	7c00      	ldrb	r0, [r0, #16]
   d6c68:	f7fe bffa 	b.w	d5c60 <HAL_USB_USART_Begin>

000d6c6c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c6e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c72:	2100      	movs	r1, #0
   d6c74:	f002 fd25 	bl	d96c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c78:	4620      	mov	r0, r4
   d6c7a:	bd10      	pop	{r4, pc}

000d6c7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c7e:	4d0e      	ldr	r5, [pc, #56]	; (d6cb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6c80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c82:	a801      	add	r0, sp, #4
   d6c84:	f7ff fff2 	bl	d6c6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c88:	6829      	ldr	r1, [r5, #0]
   d6c8a:	f011 0401 	ands.w	r4, r1, #1
   d6c8e:	d110      	bne.n	d6cb2 <_Z16_fetch_usbserialv+0x36>
   d6c90:	4628      	mov	r0, r5
   d6c92:	f7fd fa08 	bl	d40a6 <__cxa_guard_acquire>
   d6c96:	b160      	cbz	r0, d6cb2 <_Z16_fetch_usbserialv+0x36>
   d6c98:	aa01      	add	r2, sp, #4
   d6c9a:	4621      	mov	r1, r4
   d6c9c:	4807      	ldr	r0, [pc, #28]	; (d6cbc <_Z16_fetch_usbserialv+0x40>)
   d6c9e:	f7ff ffcd 	bl	d6c3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ca2:	4628      	mov	r0, r5
   d6ca4:	f7fd fa04 	bl	d40b0 <__cxa_guard_release>
   d6ca8:	4a05      	ldr	r2, [pc, #20]	; (d6cc0 <_Z16_fetch_usbserialv+0x44>)
   d6caa:	4906      	ldr	r1, [pc, #24]	; (d6cc4 <_Z16_fetch_usbserialv+0x48>)
   d6cac:	4803      	ldr	r0, [pc, #12]	; (d6cbc <_Z16_fetch_usbserialv+0x40>)
   d6cae:	f000 fb85 	bl	d73bc <__aeabi_atexit>
	return _usbserial;
}
   d6cb2:	4802      	ldr	r0, [pc, #8]	; (d6cbc <_Z16_fetch_usbserialv+0x40>)
   d6cb4:	b007      	add	sp, #28
   d6cb6:	bd30      	pop	{r4, r5, pc}
   d6cb8:	2003e408 	.word	0x2003e408
   d6cbc:	2003e40c 	.word	0x2003e40c
   d6cc0:	2003e308 	.word	0x2003e308
   d6cc4:	000d6bbd 	.word	0x000d6bbd

000d6cc8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6cc8:	4770      	bx	lr

000d6cca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6cca:	7441      	strb	r1, [r0, #17]
   d6ccc:	4770      	bx	lr

000d6cce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6cce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6cd0:	7c00      	ldrb	r0, [r0, #16]
   d6cd2:	f7fe ff5d 	bl	d5b90 <HAL_USART_Available_Data_For_Write>
}
   d6cd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cda:	bd08      	pop	{r3, pc}

000d6cdc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6cdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6cde:	7c00      	ldrb	r0, [r0, #16]
   d6ce0:	f7fe ff2e 	bl	d5b40 <HAL_USART_Available_Data>
}
   d6ce4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ce8:	bd08      	pop	{r3, pc}

000d6cea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6cea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6cec:	7c00      	ldrb	r0, [r0, #16]
   d6cee:	f7fe ff37 	bl	d5b60 <HAL_USART_Peek_Data>
}
   d6cf2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cf6:	bf28      	it	cs
   d6cf8:	f04f 30ff 	movcs.w	r0, #4294967295
   d6cfc:	bd08      	pop	{r3, pc}

000d6cfe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6cfe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6d00:	7c00      	ldrb	r0, [r0, #16]
   d6d02:	f7fe ff25 	bl	d5b50 <HAL_USART_Read_Data>
}
   d6d06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d0a:	bf28      	it	cs
   d6d0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d10:	bd08      	pop	{r3, pc}

000d6d12 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6d12:	7c00      	ldrb	r0, [r0, #16]
   d6d14:	f7fe bf2c 	b.w	d5b70 <HAL_USART_Flush_Data>

000d6d18 <_ZN11USARTSerialD0Ev>:
   d6d18:	b510      	push	{r4, lr}
   d6d1a:	2114      	movs	r1, #20
   d6d1c:	4604      	mov	r4, r0
   d6d1e:	f000 fb5b 	bl	d73d8 <_ZdlPvj>
   d6d22:	4620      	mov	r0, r4
   d6d24:	bd10      	pop	{r4, pc}

000d6d26 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6d26:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6d28:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6d2a:	4604      	mov	r4, r0
   d6d2c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6d2e:	b925      	cbnz	r5, d6d3a <_ZN11USARTSerial5writeEh+0x14>
   d6d30:	7c00      	ldrb	r0, [r0, #16]
   d6d32:	f7fe ff2d 	bl	d5b90 <HAL_USART_Available_Data_For_Write>
   d6d36:	2800      	cmp	r0, #0
   d6d38:	dd05      	ble.n	d6d46 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6d3a:	4631      	mov	r1, r6
   d6d3c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6d42:	f7fe bef5 	b.w	d5b30 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6d46:	4628      	mov	r0, r5
   d6d48:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6d4c:	b510      	push	{r4, lr}
   d6d4e:	4604      	mov	r4, r0
   d6d50:	4608      	mov	r0, r1
   d6d52:	4611      	mov	r1, r2
   d6d54:	2200      	movs	r2, #0
   d6d56:	6062      	str	r2, [r4, #4]
   d6d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6d5c:	60a2      	str	r2, [r4, #8]
   d6d5e:	4a05      	ldr	r2, [pc, #20]	; (d6d74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6d60:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6d62:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6d64:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6d66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6d68:	461a      	mov	r2, r3
   d6d6a:	f7fe fed9 	bl	d5b20 <HAL_USART_Init>
}
   d6d6e:	4620      	mov	r0, r4
   d6d70:	bd10      	pop	{r4, pc}
   d6d72:	bf00      	nop
   d6d74:	000d9c74 	.word	0x000d9c74

000d6d78 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6d78:	7c00      	ldrb	r0, [r0, #16]
   d6d7a:	f7fe bf01 	b.w	d5b80 <HAL_USART_Is_Enabled>
	...

000d6d80 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6d80:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6d82:	4d0c      	ldr	r5, [pc, #48]	; (d6db4 <_Z22__fetch_global_Serial1v+0x34>)
   d6d84:	6829      	ldr	r1, [r5, #0]
   d6d86:	f011 0401 	ands.w	r4, r1, #1
   d6d8a:	d111      	bne.n	d6db0 <_Z22__fetch_global_Serial1v+0x30>
   d6d8c:	4628      	mov	r0, r5
   d6d8e:	f7fd f98a 	bl	d40a6 <__cxa_guard_acquire>
   d6d92:	b168      	cbz	r0, d6db0 <_Z22__fetch_global_Serial1v+0x30>
   d6d94:	4a08      	ldr	r2, [pc, #32]	; (d6db8 <_Z22__fetch_global_Serial1v+0x38>)
   d6d96:	4b09      	ldr	r3, [pc, #36]	; (d6dbc <_Z22__fetch_global_Serial1v+0x3c>)
   d6d98:	4809      	ldr	r0, [pc, #36]	; (d6dc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6d9a:	4621      	mov	r1, r4
   d6d9c:	f7ff ffd6 	bl	d6d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6da0:	4628      	mov	r0, r5
   d6da2:	f7fd f985 	bl	d40b0 <__cxa_guard_release>
   d6da6:	4a07      	ldr	r2, [pc, #28]	; (d6dc4 <_Z22__fetch_global_Serial1v+0x44>)
   d6da8:	4907      	ldr	r1, [pc, #28]	; (d6dc8 <_Z22__fetch_global_Serial1v+0x48>)
   d6daa:	4805      	ldr	r0, [pc, #20]	; (d6dc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6dac:	f000 fb06 	bl	d73bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6db0:	4803      	ldr	r0, [pc, #12]	; (d6dc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6db2:	bd38      	pop	{r3, r4, r5, pc}
   d6db4:	2003e4b8 	.word	0x2003e4b8
   d6db8:	2003e4bc 	.word	0x2003e4bc
   d6dbc:	2003e434 	.word	0x2003e434
   d6dc0:	2003e420 	.word	0x2003e420
   d6dc4:	2003e308 	.word	0x2003e308
   d6dc8:	000d6cc9 	.word	0x000d6cc9

000d6dcc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6dcc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6dce:	6883      	ldr	r3, [r0, #8]
   d6dd0:	4604      	mov	r4, r0
   d6dd2:	b90b      	cbnz	r3, d6dd8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6dd4:	f000 fb13 	bl	d73fe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6dd8:	68c3      	ldr	r3, [r0, #12]
   d6dda:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6ddc:	68a3      	ldr	r3, [r4, #8]
   d6dde:	b11b      	cbz	r3, d6de8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6de0:	2203      	movs	r2, #3
   d6de2:	4621      	mov	r1, r4
   d6de4:	4620      	mov	r0, r4
   d6de6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6de8:	4620      	mov	r0, r4
   d6dea:	2110      	movs	r1, #16
}
   d6dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6df0:	f000 baf2 	b.w	d73d8 <_ZdlPvj>

000d6df4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6df4:	4770      	bx	lr

000d6df6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6df8:	4606      	mov	r6, r0
   d6dfa:	4615      	mov	r5, r2
   d6dfc:	460c      	mov	r4, r1
   d6dfe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e00:	42bc      	cmp	r4, r7
   d6e02:	d006      	beq.n	d6e12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6e04:	6833      	ldr	r3, [r6, #0]
   d6e06:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e0a:	689b      	ldr	r3, [r3, #8]
   d6e0c:	4630      	mov	r0, r6
   d6e0e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e10:	e7f6      	b.n	d6e00 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6e12:	4628      	mov	r0, r5
   d6e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e16 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6e16:	2200      	movs	r2, #0
   d6e18:	7c00      	ldrb	r0, [r0, #16]
   d6e1a:	f7fe bed9 	b.w	d5bd0 <HAL_I2C_Write_Data>

000d6e1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6e1e:	2100      	movs	r1, #0
   d6e20:	7c00      	ldrb	r0, [r0, #16]
   d6e22:	f7fe bedd 	b.w	d5be0 <HAL_I2C_Available_Data>

000d6e26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6e26:	2100      	movs	r1, #0
   d6e28:	7c00      	ldrb	r0, [r0, #16]
   d6e2a:	f7fe bee1 	b.w	d5bf0 <HAL_I2C_Read_Data>

000d6e2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6e2e:	2100      	movs	r1, #0
   d6e30:	7c00      	ldrb	r0, [r0, #16]
   d6e32:	f7fe bee5 	b.w	d5c00 <HAL_I2C_Peek_Data>

000d6e36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6e36:	2100      	movs	r1, #0
   d6e38:	7c00      	ldrb	r0, [r0, #16]
   d6e3a:	f7fe bee9 	b.w	d5c10 <HAL_I2C_Flush_Data>

000d6e3e <_ZN7TwoWireD0Ev>:
   d6e3e:	b510      	push	{r4, lr}
   d6e40:	2114      	movs	r1, #20
   d6e42:	4604      	mov	r4, r0
   d6e44:	f000 fac8 	bl	d73d8 <_ZdlPvj>
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6e4c:	b510      	push	{r4, lr}
   d6e4e:	4604      	mov	r4, r0
   d6e50:	2300      	movs	r3, #0
   d6e52:	6063      	str	r3, [r4, #4]
   d6e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6e58:	60a3      	str	r3, [r4, #8]
   d6e5a:	4b04      	ldr	r3, [pc, #16]	; (d6e6c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6e5c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6e5e:	4608      	mov	r0, r1
   d6e60:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6e62:	4611      	mov	r1, r2
   d6e64:	f7fe fee4 	bl	d5c30 <HAL_I2C_Init>
}
   d6e68:	4620      	mov	r0, r4
   d6e6a:	bd10      	pop	{r4, pc}
   d6e6c:	000d9ca4 	.word	0x000d9ca4

000d6e70 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6e70:	2300      	movs	r3, #0
   d6e72:	461a      	mov	r2, r3
   d6e74:	4619      	mov	r1, r3
   d6e76:	7c00      	ldrb	r0, [r0, #16]
   d6e78:	f7fe be92 	b.w	d5ba0 <HAL_I2C_Begin>

000d6e7c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6e7c:	b570      	push	{r4, r5, r6, lr}
   d6e7e:	460c      	mov	r4, r1
   d6e80:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6e82:	2514      	movs	r5, #20
   d6e84:	4606      	mov	r6, r0
   d6e86:	462a      	mov	r2, r5
   d6e88:	2100      	movs	r1, #0
   d6e8a:	a801      	add	r0, sp, #4
   d6e8c:	f002 fc19 	bl	d96c2 <memset>
   d6e90:	7823      	ldrb	r3, [r4, #0]
   d6e92:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e96:	6863      	ldr	r3, [r4, #4]
   d6e98:	9303      	str	r3, [sp, #12]
   d6e9a:	68e3      	ldr	r3, [r4, #12]
   d6e9c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6e9e:	2200      	movs	r2, #0
   d6ea0:	7a23      	ldrb	r3, [r4, #8]
   d6ea2:	7c30      	ldrb	r0, [r6, #16]
   d6ea4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6ea8:	a901      	add	r1, sp, #4
   d6eaa:	9305      	str	r3, [sp, #20]
   d6eac:	f7fe fec8 	bl	d5c40 <HAL_I2C_Request_Data_Ex>
}
   d6eb0:	b006      	add	sp, #24
   d6eb2:	bd70      	pop	{r4, r5, r6, pc}

000d6eb4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6eb6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6eb8:	f88d 1000 	strb.w	r1, [sp]
   d6ebc:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6ec0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6ec2:	bf18      	it	ne
   d6ec4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6ec6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6ec8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6eca:	f88d 3008 	strb.w	r3, [sp, #8]
   d6ece:	f7ff ffd5 	bl	d6e7c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6ed2:	b005      	add	sp, #20
   d6ed4:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ed8 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6ed8:	2301      	movs	r3, #1
   d6eda:	f7ff bfeb 	b.w	d6eb4 <_ZN7TwoWire11requestFromEhjh>

000d6ede <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6ede:	2200      	movs	r2, #0
   d6ee0:	7c00      	ldrb	r0, [r0, #16]
   d6ee2:	f7fe be65 	b.w	d5bb0 <HAL_I2C_Begin_Transmission>

000d6ee6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6ee6:	2200      	movs	r2, #0
   d6ee8:	7c00      	ldrb	r0, [r0, #16]
   d6eea:	f7fe be69 	b.w	d5bc0 <HAL_I2C_End_Transmission>

000d6eee <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6eee:	2101      	movs	r1, #1
   d6ef0:	f7ff bff9 	b.w	d6ee6 <_ZN7TwoWire15endTransmissionEh>

000d6ef4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6ef4:	2100      	movs	r1, #0
   d6ef6:	7c00      	ldrb	r0, [r0, #16]
   d6ef8:	f7fe be92 	b.w	d5c20 <HAL_I2C_Is_Enabled>

000d6efc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6efc:	2200      	movs	r2, #0
   d6efe:	4611      	mov	r1, r2
   d6f00:	6840      	ldr	r0, [r0, #4]
   d6f02:	f7fe bf49 	b.w	d5d98 <network_listening>

000d6f06 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f06:	2200      	movs	r2, #0
   d6f08:	4611      	mov	r1, r2
   d6f0a:	6840      	ldr	r0, [r0, #4]
   d6f0c:	f7fe bf54 	b.w	d5db8 <network_get_listen_timeout>

000d6f10 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f10:	2200      	movs	r2, #0
   d6f12:	6840      	ldr	r0, [r0, #4]
   d6f14:	f7fe bf48 	b.w	d5da8 <network_set_listen_timeout>

000d6f18 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f18:	2200      	movs	r2, #0
   d6f1a:	f081 0101 	eor.w	r1, r1, #1
   d6f1e:	6840      	ldr	r0, [r0, #4]
   d6f20:	f7fe bf32 	b.w	d5d88 <network_listen>

000d6f24 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6f24:	2300      	movs	r3, #0
   d6f26:	461a      	mov	r2, r3
   d6f28:	2101      	movs	r1, #1
   d6f2a:	6840      	ldr	r0, [r0, #4]
   d6f2c:	f7fe bf24 	b.w	d5d78 <network_off>

000d6f30 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f30:	2300      	movs	r3, #0
   d6f32:	461a      	mov	r2, r3
   d6f34:	4619      	mov	r1, r3
   d6f36:	6840      	ldr	r0, [r0, #4]
   d6f38:	f7fe bf16 	b.w	d5d68 <network_on>

000d6f3c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f3c:	2200      	movs	r2, #0
   d6f3e:	4611      	mov	r1, r2
   d6f40:	6840      	ldr	r0, [r0, #4]
   d6f42:	f7fe bf09 	b.w	d5d58 <network_ready>

000d6f46 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f46:	2200      	movs	r2, #0
   d6f48:	4611      	mov	r1, r2
   d6f4a:	6840      	ldr	r0, [r0, #4]
   d6f4c:	f7fe bef4 	b.w	d5d38 <network_connecting>

000d6f50 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f50:	2200      	movs	r2, #0
   d6f52:	2102      	movs	r1, #2
   d6f54:	6840      	ldr	r0, [r0, #4]
   d6f56:	f7fe bef7 	b.w	d5d48 <network_disconnect>

000d6f5a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f5a:	2300      	movs	r3, #0
   d6f5c:	461a      	mov	r2, r3
   d6f5e:	6840      	ldr	r0, [r0, #4]
   d6f60:	f7fe bee2 	b.w	d5d28 <network_connect>

000d6f64 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f64:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f66:	4605      	mov	r5, r0
   d6f68:	b188      	cbz	r0, d6f8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f6a:	6804      	ldr	r4, [r0, #0]
   d6f6c:	b14c      	cbz	r4, d6f82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6f6e:	68a3      	ldr	r3, [r4, #8]
   d6f70:	b11b      	cbz	r3, d6f7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f72:	2203      	movs	r2, #3
   d6f74:	4621      	mov	r1, r4
   d6f76:	4620      	mov	r0, r4
   d6f78:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f7a:	2110      	movs	r1, #16
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	f000 fa2b 	bl	d73d8 <_ZdlPvj>
   d6f82:	4628      	mov	r0, r5
   d6f84:	2114      	movs	r1, #20
      }
   d6f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f8a:	f000 ba25 	b.w	d73d8 <_ZdlPvj>
   d6f8e:	bd38      	pop	{r3, r4, r5, pc}

000d6f90 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6f90:	b110      	cbz	r0, d6f98 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6f92:	6803      	ldr	r3, [r0, #0]
   d6f94:	685b      	ldr	r3, [r3, #4]
   d6f96:	4718      	bx	r3
   d6f98:	4770      	bx	lr

000d6f9a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6f9a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f9c:	6803      	ldr	r3, [r0, #0]
   d6f9e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6fa0:	b1bb      	cbz	r3, d6fd2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6fa2:	6858      	ldr	r0, [r3, #4]
   d6fa4:	f7fe fd8c 	bl	d5ac0 <os_thread_is_current>
   d6fa8:	b978      	cbnz	r0, d6fca <_ZN6ThreadD1Ev+0x30>
   d6faa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6fac:	7c5a      	ldrb	r2, [r3, #17]
   d6fae:	b912      	cbnz	r2, d6fb6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6fb0:	6858      	ldr	r0, [r3, #4]
   d6fb2:	f7fe fd8d 	bl	d5ad0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6fb6:	6823      	ldr	r3, [r4, #0]
   d6fb8:	6858      	ldr	r0, [r3, #4]
   d6fba:	f7fe fd91 	bl	d5ae0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fbe:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fc0:	2300      	movs	r3, #0
   d6fc2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6fc4:	b128      	cbz	r0, d6fd2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6fc6:	f7ff ffcd 	bl	d6f64 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fca:	6820      	ldr	r0, [r4, #0]
   d6fcc:	b108      	cbz	r0, d6fd2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6fce:	f7ff ffc9 	bl	d6f64 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	bd10      	pop	{r4, pc}

000d6fd6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6fd6:	b538      	push	{r3, r4, r5, lr}
   d6fd8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fda:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6fde:	b108      	cbz	r0, d6fe4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6fe0:	f7fd f85f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6fe4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6fe8:	b108      	cbz	r0, d6fee <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6fea:	f7fe fd89 	bl	d5b00 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fee:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6ff2:	b135      	cbz	r5, d7002 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ff4:	4628      	mov	r0, r5
   d6ff6:	f7ff ffd0 	bl	d6f9a <_ZN6ThreadD1Ev>
   d6ffa:	2104      	movs	r1, #4
   d6ffc:	4628      	mov	r0, r5
   d6ffe:	f000 f9eb 	bl	d73d8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7002:	6820      	ldr	r0, [r4, #0]
   d7004:	b108      	cbz	r0, d700a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7006:	f7ff ffc3 	bl	d6f90 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d700a:	4620      	mov	r0, r4
   d700c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7010 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7010:	b510      	push	{r4, lr}
   d7012:	4b04      	ldr	r3, [pc, #16]	; (d7024 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7014:	4604      	mov	r4, r0
   d7016:	f840 3b08 	str.w	r3, [r0], #8
   d701a:	f7ff ffdc 	bl	d6fd6 <_ZN5spark11MeshPublishD1Ev>
   d701e:	4620      	mov	r0, r4
   d7020:	bd10      	pop	{r4, pc}
   d7022:	bf00      	nop
   d7024:	000d9ccc 	.word	0x000d9ccc

000d7028 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7028:	b538      	push	{r3, r4, r5, lr}
   d702a:	4c0e      	ldr	r4, [pc, #56]	; (d7064 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d702c:	4b0e      	ldr	r3, [pc, #56]	; (d7068 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d702e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7030:	2500      	movs	r5, #0
   d7032:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7034:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7038:	6063      	str	r3, [r4, #4]
   d703a:	60a5      	str	r5, [r4, #8]
   d703c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7040:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7044:	f7fe fd54 	bl	d5af0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7048:	4b08      	ldr	r3, [pc, #32]	; (d706c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d704a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d704e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7052:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7054:	4620      	mov	r0, r4
   d7056:	4a06      	ldr	r2, [pc, #24]	; (d7070 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7058:	4906      	ldr	r1, [pc, #24]	; (d7074 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d705a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d705e:	f000 b9ad 	b.w	d73bc <__aeabi_atexit>
   d7062:	bf00      	nop
   d7064:	2003e540 	.word	0x2003e540
   d7068:	000d9d34 	.word	0x000d9d34
   d706c:	000d9ccc 	.word	0x000d9ccc
   d7070:	2003e308 	.word	0x2003e308
   d7074:	000d7011 	.word	0x000d7011

000d7078 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7078:	2200      	movs	r2, #0
   d707a:	4611      	mov	r1, r2
   d707c:	6840      	ldr	r0, [r0, #4]
   d707e:	f7fe be6b 	b.w	d5d58 <network_ready>

000d7082 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7082:	2200      	movs	r2, #0
   d7084:	4611      	mov	r1, r2
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7fe be86 	b.w	d5d98 <network_listening>

000d708c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d708c:	2200      	movs	r2, #0
   d708e:	4611      	mov	r1, r2
   d7090:	6840      	ldr	r0, [r0, #4]
   d7092:	f7fe be91 	b.w	d5db8 <network_get_listen_timeout>

000d7096 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7096:	2200      	movs	r2, #0
   d7098:	6840      	ldr	r0, [r0, #4]
   d709a:	f7fe be85 	b.w	d5da8 <network_set_listen_timeout>

000d709e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d709e:	2200      	movs	r2, #0
   d70a0:	f081 0101 	eor.w	r1, r1, #1
   d70a4:	6840      	ldr	r0, [r0, #4]
   d70a6:	f7fe be6f 	b.w	d5d88 <network_listen>

000d70aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d70aa:	2300      	movs	r3, #0
   d70ac:	461a      	mov	r2, r3
   d70ae:	4619      	mov	r1, r3
   d70b0:	6840      	ldr	r0, [r0, #4]
   d70b2:	f7fe be61 	b.w	d5d78 <network_off>

000d70b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d70b6:	2300      	movs	r3, #0
   d70b8:	461a      	mov	r2, r3
   d70ba:	4619      	mov	r1, r3
   d70bc:	6840      	ldr	r0, [r0, #4]
   d70be:	f7fe be53 	b.w	d5d68 <network_on>

000d70c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d70c2:	2200      	movs	r2, #0
   d70c4:	4611      	mov	r1, r2
   d70c6:	6840      	ldr	r0, [r0, #4]
   d70c8:	f7fe be36 	b.w	d5d38 <network_connecting>

000d70cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d70cc:	2200      	movs	r2, #0
   d70ce:	2102      	movs	r1, #2
   d70d0:	6840      	ldr	r0, [r0, #4]
   d70d2:	f7fe be39 	b.w	d5d48 <network_disconnect>

000d70d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d70d6:	2300      	movs	r3, #0
   d70d8:	461a      	mov	r2, r3
   d70da:	6840      	ldr	r0, [r0, #4]
   d70dc:	f7fe be24 	b.w	d5d28 <network_connect>

000d70e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d70e0:	4b02      	ldr	r3, [pc, #8]	; (d70ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d70e2:	2204      	movs	r2, #4
   d70e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d70e6:	4a02      	ldr	r2, [pc, #8]	; (d70f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d70e8:	601a      	str	r2, [r3, #0]
   d70ea:	4770      	bx	lr
   d70ec:	2003e714 	.word	0x2003e714
   d70f0:	000d9d00 	.word	0x000d9d00

000d70f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d70f4:	2300      	movs	r3, #0
   d70f6:	461a      	mov	r2, r3
   d70f8:	6840      	ldr	r0, [r0, #4]
   d70fa:	f7fe be15 	b.w	d5d28 <network_connect>

000d70fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70fe:	2200      	movs	r2, #0
   d7100:	2102      	movs	r1, #2
   d7102:	6840      	ldr	r0, [r0, #4]
   d7104:	f7fe be20 	b.w	d5d48 <network_disconnect>

000d7108 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7108:	2200      	movs	r2, #0
   d710a:	4611      	mov	r1, r2
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	f7fe be13 	b.w	d5d38 <network_connecting>

000d7112 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7112:	2200      	movs	r2, #0
   d7114:	4611      	mov	r1, r2
   d7116:	6840      	ldr	r0, [r0, #4]
   d7118:	f7fe be1e 	b.w	d5d58 <network_ready>

000d711c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d711c:	2300      	movs	r3, #0
   d711e:	461a      	mov	r2, r3
   d7120:	4619      	mov	r1, r3
   d7122:	6840      	ldr	r0, [r0, #4]
   d7124:	f7fe be20 	b.w	d5d68 <network_on>

000d7128 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7128:	2300      	movs	r3, #0
   d712a:	461a      	mov	r2, r3
   d712c:	4619      	mov	r1, r3
   d712e:	6840      	ldr	r0, [r0, #4]
   d7130:	f7fe be22 	b.w	d5d78 <network_off>

000d7134 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7134:	2200      	movs	r2, #0
   d7136:	f081 0101 	eor.w	r1, r1, #1
   d713a:	6840      	ldr	r0, [r0, #4]
   d713c:	f7fe be24 	b.w	d5d88 <network_listen>

000d7140 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7140:	2200      	movs	r2, #0
   d7142:	6840      	ldr	r0, [r0, #4]
   d7144:	f7fe be30 	b.w	d5da8 <network_set_listen_timeout>

000d7148 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7148:	2200      	movs	r2, #0
   d714a:	4611      	mov	r1, r2
   d714c:	6840      	ldr	r0, [r0, #4]
   d714e:	f7fe be33 	b.w	d5db8 <network_get_listen_timeout>

000d7152 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7152:	2200      	movs	r2, #0
   d7154:	4611      	mov	r1, r2
   d7156:	6840      	ldr	r0, [r0, #4]
   d7158:	f7fe be1e 	b.w	d5d98 <network_listening>

000d715c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d715c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7160:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7162:	b095      	sub	sp, #84	; 0x54
   d7164:	4616      	mov	r6, r2
   d7166:	460d      	mov	r5, r1
   d7168:	4607      	mov	r7, r0
    IPAddress addr;
   d716a:	f7ff fced 	bl	d6b48 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d716e:	4621      	mov	r1, r4
   d7170:	2220      	movs	r2, #32
   d7172:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7174:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7176:	f002 faa4 	bl	d96c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d717a:	2340      	movs	r3, #64	; 0x40
   d717c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d717e:	4621      	mov	r1, r4
   d7180:	466b      	mov	r3, sp
   d7182:	aa0c      	add	r2, sp, #48	; 0x30
   d7184:	4630      	mov	r0, r6
   d7186:	f7fe fc0b 	bl	d59a0 <netdb_getaddrinfo>
    if (!r) {
   d718a:	4604      	mov	r4, r0
   d718c:	2800      	cmp	r0, #0
   d718e:	d144      	bne.n	d721a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7190:	4602      	mov	r2, r0
   d7192:	2101      	movs	r1, #1
   d7194:	6868      	ldr	r0, [r5, #4]
   d7196:	f7fe fddf 	bl	d5d58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d719a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d719c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d719e:	4622      	mov	r2, r4
   d71a0:	6868      	ldr	r0, [r5, #4]
   d71a2:	f7fe fdd9 	bl	d5d58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d71a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d71a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d71aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d71ac:	2e00      	cmp	r6, #0
   d71ae:	d034      	beq.n	d721a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d71b0:	2900      	cmp	r1, #0
   d71b2:	d132      	bne.n	d721a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d71b4:	6873      	ldr	r3, [r6, #4]
   d71b6:	2b02      	cmp	r3, #2
   d71b8:	d002      	beq.n	d71c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d71ba:	2b0a      	cmp	r3, #10
   d71bc:	d009      	beq.n	d71d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d71be:	e02a      	b.n	d7216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d71c0:	f1b8 0f00 	cmp.w	r8, #0
   d71c4:	d027      	beq.n	d7216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d71c6:	6971      	ldr	r1, [r6, #20]
   d71c8:	4638      	mov	r0, r7
   d71ca:	3104      	adds	r1, #4
   d71cc:	f7ff fce9 	bl	d6ba2 <_ZN9IPAddressaSEPKh>
   d71d0:	e020      	b.n	d7214 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d71d2:	f1b9 0f00 	cmp.w	r9, #0
   d71d6:	d01e      	beq.n	d7216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d71d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d71da:	2211      	movs	r2, #17
   d71dc:	a801      	add	r0, sp, #4
   d71de:	f002 fa70 	bl	d96c2 <memset>
                    a.v = 6;
   d71e2:	2306      	movs	r3, #6
   d71e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71e8:	ad01      	add	r5, sp, #4
   d71ea:	f104 0308 	add.w	r3, r4, #8
   d71ee:	3418      	adds	r4, #24
   d71f0:	6818      	ldr	r0, [r3, #0]
   d71f2:	6859      	ldr	r1, [r3, #4]
   d71f4:	462a      	mov	r2, r5
   d71f6:	c203      	stmia	r2!, {r0, r1}
   d71f8:	3308      	adds	r3, #8
   d71fa:	42a3      	cmp	r3, r4
   d71fc:	4615      	mov	r5, r2
   d71fe:	d1f7      	bne.n	d71f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7200:	a901      	add	r1, sp, #4
   d7202:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7204:	ad07      	add	r5, sp, #28
   d7206:	f7ff fcad 	bl	d6b64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d720a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d720c:	1d3c      	adds	r4, r7, #4
   d720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7210:	682b      	ldr	r3, [r5, #0]
   d7212:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7214:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7216:	69f6      	ldr	r6, [r6, #28]
   d7218:	e7c8      	b.n	d71ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d721a:	9800      	ldr	r0, [sp, #0]
   d721c:	f7fe fbb8 	bl	d5990 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7220:	4638      	mov	r0, r7
   d7222:	b015      	add	sp, #84	; 0x54
   d7224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7228 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7228:	4b02      	ldr	r3, [pc, #8]	; (d7234 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d722a:	4a03      	ldr	r2, [pc, #12]	; (d7238 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d722c:	601a      	str	r2, [r3, #0]
   d722e:	2200      	movs	r2, #0
   d7230:	605a      	str	r2, [r3, #4]
   d7232:	4770      	bx	lr
   d7234:	2003e71c 	.word	0x2003e71c
   d7238:	000d9d34 	.word	0x000d9d34

000d723c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d723c:	b510      	push	{r4, lr}
   d723e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7240:	f000 f85c 	bl	d72fc <_ZN8particle7globals11instanceSpiEv>
   d7244:	f7fe ff17 	bl	d6076 <_ZN8SPIClass9isEnabledEv>
   d7248:	b128      	cbz	r0, d7256 <pinAvailable+0x1a>
   d724a:	f1a4 030b 	sub.w	r3, r4, #11
   d724e:	2b02      	cmp	r3, #2
   d7250:	d801      	bhi.n	d7256 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d7252:	2000      	movs	r0, #0
   d7254:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7256:	f000 f88b 	bl	d7370 <_Z19__fetch_global_Wirev>
   d725a:	f7ff fe4b 	bl	d6ef4 <_ZN7TwoWire9isEnabledEv>
   d725e:	b108      	cbz	r0, d7264 <pinAvailable+0x28>
   d7260:	2c01      	cmp	r4, #1
   d7262:	d9f6      	bls.n	d7252 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7264:	f7ff fd8c 	bl	d6d80 <_Z22__fetch_global_Serial1v>
   d7268:	f7ff fd86 	bl	d6d78 <_ZN11USARTSerial9isEnabledEv>
   d726c:	b118      	cbz	r0, d7276 <pinAvailable+0x3a>
   d726e:	f1a4 0309 	sub.w	r3, r4, #9
   d7272:	2b01      	cmp	r3, #1
   d7274:	d9ed      	bls.n	d7252 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7276:	2c23      	cmp	r4, #35	; 0x23
   d7278:	bf8c      	ite	hi
   d727a:	2000      	movhi	r0, #0
   d727c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d727e:	bd10      	pop	{r4, pc}

000d7280 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7280:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7282:	b538      	push	{r3, r4, r5, lr}
   d7284:	4604      	mov	r4, r0
   d7286:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7288:	d80a      	bhi.n	d72a0 <pinMode+0x20>
   d728a:	29ff      	cmp	r1, #255	; 0xff
   d728c:	d008      	beq.n	d72a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d728e:	f7ff ffd5 	bl	d723c <pinAvailable>
   d7292:	b128      	cbz	r0, d72a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7294:	4629      	mov	r1, r5
   d7296:	4620      	mov	r0, r4
}
   d7298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d729c:	f7fe bb90 	b.w	d59c0 <HAL_Pin_Mode>
   d72a0:	bd38      	pop	{r3, r4, r5, pc}

000d72a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d72a2:	b538      	push	{r3, r4, r5, lr}
   d72a4:	4604      	mov	r4, r0
   d72a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d72a8:	f7fe fb92 	bl	d59d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d72ac:	28ff      	cmp	r0, #255	; 0xff
   d72ae:	d010      	beq.n	d72d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d72b0:	2806      	cmp	r0, #6
   d72b2:	d804      	bhi.n	d72be <digitalWrite+0x1c>
   d72b4:	234d      	movs	r3, #77	; 0x4d
   d72b6:	fa23 f000 	lsr.w	r0, r3, r0
   d72ba:	07c3      	lsls	r3, r0, #31
   d72bc:	d409      	bmi.n	d72d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d72be:	4620      	mov	r0, r4
   d72c0:	f7ff ffbc 	bl	d723c <pinAvailable>
   d72c4:	b128      	cbz	r0, d72d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d72c6:	4629      	mov	r1, r5
   d72c8:	4620      	mov	r0, r4
}
   d72ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d72ce:	f7fe bb87 	b.w	d59e0 <HAL_GPIO_Write>
   d72d2:	bd38      	pop	{r3, r4, r5, pc}

000d72d4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d72d4:	b510      	push	{r4, lr}
   d72d6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d72d8:	f7fe fb7a 	bl	d59d0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d72dc:	3804      	subs	r0, #4
   d72de:	b2c0      	uxtb	r0, r0
   d72e0:	2801      	cmp	r0, #1
   d72e2:	d908      	bls.n	d72f6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d72e4:	4620      	mov	r0, r4
   d72e6:	f7ff ffa9 	bl	d723c <pinAvailable>
   d72ea:	b120      	cbz	r0, d72f6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d72ec:	4620      	mov	r0, r4
}
   d72ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d72f2:	f7fe bb7d 	b.w	d59f0 <HAL_GPIO_Read>
}
   d72f6:	2000      	movs	r0, #0
   d72f8:	bd10      	pop	{r4, pc}
	...

000d72fc <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d72fc:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d72fe:	4d0b      	ldr	r5, [pc, #44]	; (d732c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7300:	6829      	ldr	r1, [r5, #0]
   d7302:	f011 0401 	ands.w	r4, r1, #1
   d7306:	d10f      	bne.n	d7328 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7308:	4628      	mov	r0, r5
   d730a:	f7fc fecc 	bl	d40a6 <__cxa_guard_acquire>
   d730e:	b158      	cbz	r0, d7328 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7310:	4621      	mov	r1, r4
   d7312:	4807      	ldr	r0, [pc, #28]	; (d7330 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7314:	f7fe fdec 	bl	d5ef0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7318:	4628      	mov	r0, r5
   d731a:	f7fc fec9 	bl	d40b0 <__cxa_guard_release>
   d731e:	4a05      	ldr	r2, [pc, #20]	; (d7334 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7320:	4905      	ldr	r1, [pc, #20]	; (d7338 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d7322:	4803      	ldr	r0, [pc, #12]	; (d7330 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7324:	f000 f84a 	bl	d73bc <__aeabi_atexit>
    return instance;
}
   d7328:	4801      	ldr	r0, [pc, #4]	; (d7330 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d732a:	bd38      	pop	{r3, r4, r5, pc}
   d732c:	2003e730 	.word	0x2003e730
   d7330:	2003e724 	.word	0x2003e724
   d7334:	2003e308 	.word	0x2003e308
   d7338:	000d5ed5 	.word	0x000d5ed5

000d733c <_Z17acquireWireBufferv>:
   d733c:	b570      	push	{r4, r5, r6, lr}
   d733e:	4604      	mov	r4, r0
   d7340:	2514      	movs	r5, #20
   d7342:	462a      	mov	r2, r5
   d7344:	4e09      	ldr	r6, [pc, #36]	; (d736c <_Z17acquireWireBufferv+0x30>)
   d7346:	2100      	movs	r1, #0
   d7348:	f002 f9bb 	bl	d96c2 <memset>
   d734c:	8025      	strh	r5, [r4, #0]
   d734e:	2520      	movs	r5, #32
   d7350:	4631      	mov	r1, r6
   d7352:	60a5      	str	r5, [r4, #8]
   d7354:	6125      	str	r5, [r4, #16]
   d7356:	4628      	mov	r0, r5
   d7358:	f000 f840 	bl	d73dc <_ZnajRKSt9nothrow_t>
   d735c:	4631      	mov	r1, r6
   d735e:	6060      	str	r0, [r4, #4]
   d7360:	4628      	mov	r0, r5
   d7362:	f000 f83b 	bl	d73dc <_ZnajRKSt9nothrow_t>
   d7366:	60e0      	str	r0, [r4, #12]
   d7368:	4620      	mov	r0, r4
   d736a:	bd70      	pop	{r4, r5, r6, pc}
   d736c:	000d9d60 	.word	0x000d9d60

000d7370 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7370:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7372:	4d0e      	ldr	r5, [pc, #56]	; (d73ac <_Z19__fetch_global_Wirev+0x3c>)
   d7374:	6829      	ldr	r1, [r5, #0]
   d7376:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d737a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d737c:	d113      	bne.n	d73a6 <_Z19__fetch_global_Wirev+0x36>
   d737e:	4628      	mov	r0, r5
   d7380:	f7fc fe91 	bl	d40a6 <__cxa_guard_acquire>
   d7384:	b178      	cbz	r0, d73a6 <_Z19__fetch_global_Wirev+0x36>
   d7386:	a801      	add	r0, sp, #4
   d7388:	f7ff ffd8 	bl	d733c <_Z17acquireWireBufferv>
   d738c:	aa01      	add	r2, sp, #4
   d738e:	4621      	mov	r1, r4
   d7390:	4807      	ldr	r0, [pc, #28]	; (d73b0 <_Z19__fetch_global_Wirev+0x40>)
   d7392:	f7ff fd5b 	bl	d6e4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7396:	4628      	mov	r0, r5
   d7398:	f7fc fe8a 	bl	d40b0 <__cxa_guard_release>
   d739c:	4a05      	ldr	r2, [pc, #20]	; (d73b4 <_Z19__fetch_global_Wirev+0x44>)
   d739e:	4906      	ldr	r1, [pc, #24]	; (d73b8 <_Z19__fetch_global_Wirev+0x48>)
   d73a0:	4803      	ldr	r0, [pc, #12]	; (d73b0 <_Z19__fetch_global_Wirev+0x40>)
   d73a2:	f000 f80b 	bl	d73bc <__aeabi_atexit>
	return wire;
}
   d73a6:	4802      	ldr	r0, [pc, #8]	; (d73b0 <_Z19__fetch_global_Wirev+0x40>)
   d73a8:	b007      	add	sp, #28
   d73aa:	bd30      	pop	{r4, r5, pc}
   d73ac:	2003e738 	.word	0x2003e738
   d73b0:	2003e73c 	.word	0x2003e73c
   d73b4:	2003e308 	.word	0x2003e308
   d73b8:	000d6df5 	.word	0x000d6df5

000d73bc <__aeabi_atexit>:
   d73bc:	460b      	mov	r3, r1
   d73be:	4601      	mov	r1, r0
   d73c0:	4618      	mov	r0, r3
   d73c2:	f002 b965 	b.w	d9690 <__cxa_atexit>
	...

000d73c8 <_ZSt15get_new_handlerv>:
   d73c8:	4b02      	ldr	r3, [pc, #8]	; (d73d4 <_ZSt15get_new_handlerv+0xc>)
   d73ca:	6818      	ldr	r0, [r3, #0]
   d73cc:	f3bf 8f5f 	dmb	sy
   d73d0:	4770      	bx	lr
   d73d2:	bf00      	nop
   d73d4:	2003e750 	.word	0x2003e750

000d73d8 <_ZdlPvj>:
   d73d8:	f7fc be61 	b.w	d409e <_ZdlPv>

000d73dc <_ZnajRKSt9nothrow_t>:
   d73dc:	f000 b800 	b.w	d73e0 <_ZnwjRKSt9nothrow_t>

000d73e0 <_ZnwjRKSt9nothrow_t>:
   d73e0:	b510      	push	{r4, lr}
   d73e2:	2800      	cmp	r0, #0
   d73e4:	bf14      	ite	ne
   d73e6:	4604      	movne	r4, r0
   d73e8:	2401      	moveq	r4, #1
   d73ea:	4620      	mov	r0, r4
   d73ec:	f7fe fd04 	bl	d5df8 <malloc>
   d73f0:	b920      	cbnz	r0, d73fc <_ZnwjRKSt9nothrow_t+0x1c>
   d73f2:	f7ff ffe9 	bl	d73c8 <_ZSt15get_new_handlerv>
   d73f6:	b108      	cbz	r0, d73fc <_ZnwjRKSt9nothrow_t+0x1c>
   d73f8:	4780      	blx	r0
   d73fa:	e7f6      	b.n	d73ea <_ZnwjRKSt9nothrow_t+0xa>
   d73fc:	bd10      	pop	{r4, pc}

000d73fe <_ZSt25__throw_bad_function_callv>:
   d73fe:	b508      	push	{r3, lr}
   d7400:	f7fe fd12 	bl	d5e28 <abort>

000d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7404:	4b18      	ldr	r3, [pc, #96]	; (d7468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7406:	681a      	ldr	r2, [r3, #0]
   d7408:	07d1      	lsls	r1, r2, #31
   d740a:	bf5c      	itt	pl
   d740c:	2201      	movpl	r2, #1
   d740e:	601a      	strpl	r2, [r3, #0]
   d7410:	4b16      	ldr	r3, [pc, #88]	; (d746c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7412:	681a      	ldr	r2, [r3, #0]
   d7414:	07d2      	lsls	r2, r2, #31
   d7416:	bf5c      	itt	pl
   d7418:	2201      	movpl	r2, #1
   d741a:	601a      	strpl	r2, [r3, #0]
   d741c:	4b14      	ldr	r3, [pc, #80]	; (d7470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d741e:	681a      	ldr	r2, [r3, #0]
   d7420:	07d0      	lsls	r0, r2, #31
   d7422:	bf5c      	itt	pl
   d7424:	2201      	movpl	r2, #1
   d7426:	601a      	strpl	r2, [r3, #0]
   d7428:	4b12      	ldr	r3, [pc, #72]	; (d7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d742a:	681a      	ldr	r2, [r3, #0]
   d742c:	07d1      	lsls	r1, r2, #31
   d742e:	bf5c      	itt	pl
   d7430:	2201      	movpl	r2, #1
   d7432:	601a      	strpl	r2, [r3, #0]
   d7434:	4b10      	ldr	r3, [pc, #64]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7436:	681a      	ldr	r2, [r3, #0]
   d7438:	07d2      	lsls	r2, r2, #31
   d743a:	bf5c      	itt	pl
   d743c:	2201      	movpl	r2, #1
   d743e:	601a      	strpl	r2, [r3, #0]
   d7440:	4b0e      	ldr	r3, [pc, #56]	; (d747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7442:	681a      	ldr	r2, [r3, #0]
   d7444:	07d0      	lsls	r0, r2, #31
   d7446:	bf5c      	itt	pl
   d7448:	2201      	movpl	r2, #1
   d744a:	601a      	strpl	r2, [r3, #0]
   d744c:	4b0c      	ldr	r3, [pc, #48]	; (d7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d744e:	681a      	ldr	r2, [r3, #0]
   d7450:	07d1      	lsls	r1, r2, #31
   d7452:	bf5c      	itt	pl
   d7454:	2201      	movpl	r2, #1
   d7456:	601a      	strpl	r2, [r3, #0]
   d7458:	4b0a      	ldr	r3, [pc, #40]	; (d7484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d745a:	681a      	ldr	r2, [r3, #0]
   d745c:	07d2      	lsls	r2, r2, #31
   d745e:	bf5c      	itt	pl
   d7460:	2201      	movpl	r2, #1
   d7462:	601a      	strpl	r2, [r3, #0]
   d7464:	4770      	bx	lr
   d7466:	bf00      	nop
   d7468:	2003e770 	.word	0x2003e770
   d746c:	2003e76c 	.word	0x2003e76c
   d7470:	2003e768 	.word	0x2003e768
   d7474:	2003e764 	.word	0x2003e764
   d7478:	2003e760 	.word	0x2003e760
   d747c:	2003e75c 	.word	0x2003e75c
   d7480:	2003e758 	.word	0x2003e758
   d7484:	2003e754 	.word	0x2003e754

000d7488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7488:	4b24      	ldr	r3, [pc, #144]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d748a:	681a      	ldr	r2, [r3, #0]
   d748c:	07d0      	lsls	r0, r2, #31
   d748e:	bf5c      	itt	pl
   d7490:	2201      	movpl	r2, #1
   d7492:	601a      	strpl	r2, [r3, #0]
   d7494:	4b22      	ldr	r3, [pc, #136]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7496:	681a      	ldr	r2, [r3, #0]
   d7498:	07d1      	lsls	r1, r2, #31
   d749a:	bf5c      	itt	pl
   d749c:	2201      	movpl	r2, #1
   d749e:	601a      	strpl	r2, [r3, #0]
   d74a0:	4b20      	ldr	r3, [pc, #128]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d74a2:	681a      	ldr	r2, [r3, #0]
   d74a4:	07d2      	lsls	r2, r2, #31
   d74a6:	bf5c      	itt	pl
   d74a8:	2201      	movpl	r2, #1
   d74aa:	601a      	strpl	r2, [r3, #0]
   d74ac:	4b1e      	ldr	r3, [pc, #120]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d74ae:	681a      	ldr	r2, [r3, #0]
   d74b0:	07d0      	lsls	r0, r2, #31
   d74b2:	bf5c      	itt	pl
   d74b4:	2201      	movpl	r2, #1
   d74b6:	601a      	strpl	r2, [r3, #0]
   d74b8:	4b1c      	ldr	r3, [pc, #112]	; (d752c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d74ba:	681a      	ldr	r2, [r3, #0]
   d74bc:	07d1      	lsls	r1, r2, #31
   d74be:	bf5c      	itt	pl
   d74c0:	2201      	movpl	r2, #1
   d74c2:	601a      	strpl	r2, [r3, #0]
   d74c4:	4b1a      	ldr	r3, [pc, #104]	; (d7530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d74c6:	681a      	ldr	r2, [r3, #0]
   d74c8:	07d2      	lsls	r2, r2, #31
   d74ca:	bf5c      	itt	pl
   d74cc:	2201      	movpl	r2, #1
   d74ce:	601a      	strpl	r2, [r3, #0]
   d74d0:	4b18      	ldr	r3, [pc, #96]	; (d7534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d74d2:	681a      	ldr	r2, [r3, #0]
   d74d4:	07d0      	lsls	r0, r2, #31
   d74d6:	bf5c      	itt	pl
   d74d8:	2201      	movpl	r2, #1
   d74da:	601a      	strpl	r2, [r3, #0]
   d74dc:	4b16      	ldr	r3, [pc, #88]	; (d7538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d74de:	681a      	ldr	r2, [r3, #0]
   d74e0:	07d1      	lsls	r1, r2, #31
   d74e2:	bf5c      	itt	pl
   d74e4:	2201      	movpl	r2, #1
   d74e6:	601a      	strpl	r2, [r3, #0]
   d74e8:	4b14      	ldr	r3, [pc, #80]	; (d753c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d74ea:	681a      	ldr	r2, [r3, #0]
   d74ec:	07d2      	lsls	r2, r2, #31
   d74ee:	bf5c      	itt	pl
   d74f0:	2201      	movpl	r2, #1
   d74f2:	601a      	strpl	r2, [r3, #0]
   d74f4:	4b12      	ldr	r3, [pc, #72]	; (d7540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d74f6:	681a      	ldr	r2, [r3, #0]
   d74f8:	07d0      	lsls	r0, r2, #31
   d74fa:	bf5c      	itt	pl
   d74fc:	2201      	movpl	r2, #1
   d74fe:	601a      	strpl	r2, [r3, #0]
   d7500:	4b10      	ldr	r3, [pc, #64]	; (d7544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7502:	681a      	ldr	r2, [r3, #0]
   d7504:	07d1      	lsls	r1, r2, #31
   d7506:	bf5c      	itt	pl
   d7508:	2201      	movpl	r2, #1
   d750a:	601a      	strpl	r2, [r3, #0]
   d750c:	4b0e      	ldr	r3, [pc, #56]	; (d7548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d750e:	681a      	ldr	r2, [r3, #0]
   d7510:	07d2      	lsls	r2, r2, #31
   d7512:	bf5c      	itt	pl
   d7514:	2201      	movpl	r2, #1
   d7516:	601a      	strpl	r2, [r3, #0]
   d7518:	4770      	bx	lr
   d751a:	bf00      	nop
   d751c:	2003e7a0 	.word	0x2003e7a0
   d7520:	2003e79c 	.word	0x2003e79c
   d7524:	2003e798 	.word	0x2003e798
   d7528:	2003e794 	.word	0x2003e794
   d752c:	2003e790 	.word	0x2003e790
   d7530:	2003e78c 	.word	0x2003e78c
   d7534:	2003e788 	.word	0x2003e788
   d7538:	2003e784 	.word	0x2003e784
   d753c:	2003e780 	.word	0x2003e780
   d7540:	2003e77c 	.word	0x2003e77c
   d7544:	2003e778 	.word	0x2003e778
   d7548:	2003e774 	.word	0x2003e774

000d754c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d754c:	4b24      	ldr	r3, [pc, #144]	; (d75e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d754e:	681a      	ldr	r2, [r3, #0]
   d7550:	07d0      	lsls	r0, r2, #31
   d7552:	bf5c      	itt	pl
   d7554:	2201      	movpl	r2, #1
   d7556:	601a      	strpl	r2, [r3, #0]
   d7558:	4b22      	ldr	r3, [pc, #136]	; (d75e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d755a:	681a      	ldr	r2, [r3, #0]
   d755c:	07d1      	lsls	r1, r2, #31
   d755e:	bf5c      	itt	pl
   d7560:	2201      	movpl	r2, #1
   d7562:	601a      	strpl	r2, [r3, #0]
   d7564:	4b20      	ldr	r3, [pc, #128]	; (d75e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7566:	681a      	ldr	r2, [r3, #0]
   d7568:	07d2      	lsls	r2, r2, #31
   d756a:	bf5c      	itt	pl
   d756c:	2201      	movpl	r2, #1
   d756e:	601a      	strpl	r2, [r3, #0]
   d7570:	4b1e      	ldr	r3, [pc, #120]	; (d75ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7572:	681a      	ldr	r2, [r3, #0]
   d7574:	07d0      	lsls	r0, r2, #31
   d7576:	bf5c      	itt	pl
   d7578:	2201      	movpl	r2, #1
   d757a:	601a      	strpl	r2, [r3, #0]
   d757c:	4b1c      	ldr	r3, [pc, #112]	; (d75f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d757e:	681a      	ldr	r2, [r3, #0]
   d7580:	07d1      	lsls	r1, r2, #31
   d7582:	bf5c      	itt	pl
   d7584:	2201      	movpl	r2, #1
   d7586:	601a      	strpl	r2, [r3, #0]
   d7588:	4b1a      	ldr	r3, [pc, #104]	; (d75f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d758a:	681a      	ldr	r2, [r3, #0]
   d758c:	07d2      	lsls	r2, r2, #31
   d758e:	bf5c      	itt	pl
   d7590:	2201      	movpl	r2, #1
   d7592:	601a      	strpl	r2, [r3, #0]
   d7594:	4b18      	ldr	r3, [pc, #96]	; (d75f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7596:	681a      	ldr	r2, [r3, #0]
   d7598:	07d0      	lsls	r0, r2, #31
   d759a:	bf5c      	itt	pl
   d759c:	2201      	movpl	r2, #1
   d759e:	601a      	strpl	r2, [r3, #0]
   d75a0:	4b16      	ldr	r3, [pc, #88]	; (d75fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d75a2:	681a      	ldr	r2, [r3, #0]
   d75a4:	07d1      	lsls	r1, r2, #31
   d75a6:	bf5c      	itt	pl
   d75a8:	2201      	movpl	r2, #1
   d75aa:	601a      	strpl	r2, [r3, #0]
   d75ac:	4b14      	ldr	r3, [pc, #80]	; (d7600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d75ae:	681a      	ldr	r2, [r3, #0]
   d75b0:	07d2      	lsls	r2, r2, #31
   d75b2:	bf5c      	itt	pl
   d75b4:	2201      	movpl	r2, #1
   d75b6:	601a      	strpl	r2, [r3, #0]
   d75b8:	4b12      	ldr	r3, [pc, #72]	; (d7604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d75ba:	681a      	ldr	r2, [r3, #0]
   d75bc:	07d0      	lsls	r0, r2, #31
   d75be:	bf5c      	itt	pl
   d75c0:	2201      	movpl	r2, #1
   d75c2:	601a      	strpl	r2, [r3, #0]
   d75c4:	4b10      	ldr	r3, [pc, #64]	; (d7608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d75c6:	681a      	ldr	r2, [r3, #0]
   d75c8:	07d1      	lsls	r1, r2, #31
   d75ca:	bf5c      	itt	pl
   d75cc:	2201      	movpl	r2, #1
   d75ce:	601a      	strpl	r2, [r3, #0]
   d75d0:	4b0e      	ldr	r3, [pc, #56]	; (d760c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d75d2:	681a      	ldr	r2, [r3, #0]
   d75d4:	07d2      	lsls	r2, r2, #31
   d75d6:	bf5c      	itt	pl
   d75d8:	2201      	movpl	r2, #1
   d75da:	601a      	strpl	r2, [r3, #0]
   d75dc:	4770      	bx	lr
   d75de:	bf00      	nop
   d75e0:	2003e7d0 	.word	0x2003e7d0
   d75e4:	2003e7cc 	.word	0x2003e7cc
   d75e8:	2003e7c8 	.word	0x2003e7c8
   d75ec:	2003e7c4 	.word	0x2003e7c4
   d75f0:	2003e7c0 	.word	0x2003e7c0
   d75f4:	2003e7bc 	.word	0x2003e7bc
   d75f8:	2003e7b8 	.word	0x2003e7b8
   d75fc:	2003e7b4 	.word	0x2003e7b4
   d7600:	2003e7b0 	.word	0x2003e7b0
   d7604:	2003e7ac 	.word	0x2003e7ac
   d7608:	2003e7a8 	.word	0x2003e7a8
   d760c:	2003e7a4 	.word	0x2003e7a4

000d7610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7610:	4b18      	ldr	r3, [pc, #96]	; (d7674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7612:	681a      	ldr	r2, [r3, #0]
   d7614:	07d1      	lsls	r1, r2, #31
   d7616:	bf5c      	itt	pl
   d7618:	2201      	movpl	r2, #1
   d761a:	601a      	strpl	r2, [r3, #0]
   d761c:	4b16      	ldr	r3, [pc, #88]	; (d7678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d761e:	681a      	ldr	r2, [r3, #0]
   d7620:	07d2      	lsls	r2, r2, #31
   d7622:	bf5c      	itt	pl
   d7624:	2201      	movpl	r2, #1
   d7626:	601a      	strpl	r2, [r3, #0]
   d7628:	4b14      	ldr	r3, [pc, #80]	; (d767c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d762a:	681a      	ldr	r2, [r3, #0]
   d762c:	07d0      	lsls	r0, r2, #31
   d762e:	bf5c      	itt	pl
   d7630:	2201      	movpl	r2, #1
   d7632:	601a      	strpl	r2, [r3, #0]
   d7634:	4b12      	ldr	r3, [pc, #72]	; (d7680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7636:	681a      	ldr	r2, [r3, #0]
   d7638:	07d1      	lsls	r1, r2, #31
   d763a:	bf5c      	itt	pl
   d763c:	2201      	movpl	r2, #1
   d763e:	601a      	strpl	r2, [r3, #0]
   d7640:	4b10      	ldr	r3, [pc, #64]	; (d7684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7642:	681a      	ldr	r2, [r3, #0]
   d7644:	07d2      	lsls	r2, r2, #31
   d7646:	bf5c      	itt	pl
   d7648:	2201      	movpl	r2, #1
   d764a:	601a      	strpl	r2, [r3, #0]
   d764c:	4b0e      	ldr	r3, [pc, #56]	; (d7688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d764e:	681a      	ldr	r2, [r3, #0]
   d7650:	07d0      	lsls	r0, r2, #31
   d7652:	bf5c      	itt	pl
   d7654:	2201      	movpl	r2, #1
   d7656:	601a      	strpl	r2, [r3, #0]
   d7658:	4b0c      	ldr	r3, [pc, #48]	; (d768c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d765a:	681a      	ldr	r2, [r3, #0]
   d765c:	07d1      	lsls	r1, r2, #31
   d765e:	bf5c      	itt	pl
   d7660:	2201      	movpl	r2, #1
   d7662:	601a      	strpl	r2, [r3, #0]
   d7664:	4b0a      	ldr	r3, [pc, #40]	; (d7690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7666:	681a      	ldr	r2, [r3, #0]
   d7668:	07d2      	lsls	r2, r2, #31
   d766a:	bf5c      	itt	pl
   d766c:	2201      	movpl	r2, #1
   d766e:	601a      	strpl	r2, [r3, #0]
   d7670:	4770      	bx	lr
   d7672:	bf00      	nop
   d7674:	2003e7f0 	.word	0x2003e7f0
   d7678:	2003e7ec 	.word	0x2003e7ec
   d767c:	2003e7e8 	.word	0x2003e7e8
   d7680:	2003e7e4 	.word	0x2003e7e4
   d7684:	2003e7e0 	.word	0x2003e7e0
   d7688:	2003e7dc 	.word	0x2003e7dc
   d768c:	2003e7d8 	.word	0x2003e7d8
   d7690:	2003e7d4 	.word	0x2003e7d4
   d7694:	00000000 	.word	0x00000000

000d7698 <pow>:
   d7698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d769c:	ed2d 8b02 	vpush	{d8}
   d76a0:	f8df a324 	ldr.w	sl, [pc, #804]	; d79c8 <pow+0x330>
   d76a4:	b08b      	sub	sp, #44	; 0x2c
   d76a6:	ec57 6b10 	vmov	r6, r7, d0
   d76aa:	ec55 4b11 	vmov	r4, r5, d1
   d76ae:	f000 f98f 	bl	d79d0 <__ieee754_pow>
   d76b2:	f99a 8000 	ldrsb.w	r8, [sl]
   d76b6:	eeb0 8a40 	vmov.f32	s16, s0
   d76ba:	eef0 8a60 	vmov.f32	s17, s1
   d76be:	f1b8 3fff 	cmp.w	r8, #4294967295
   d76c2:	d048      	beq.n	d7756 <pow+0xbe>
   d76c4:	4622      	mov	r2, r4
   d76c6:	462b      	mov	r3, r5
   d76c8:	4620      	mov	r0, r4
   d76ca:	4629      	mov	r1, r5
   d76cc:	f001 fd6e 	bl	d91ac <__aeabi_dcmpun>
   d76d0:	4683      	mov	fp, r0
   d76d2:	2800      	cmp	r0, #0
   d76d4:	d13f      	bne.n	d7756 <pow+0xbe>
   d76d6:	4632      	mov	r2, r6
   d76d8:	463b      	mov	r3, r7
   d76da:	4630      	mov	r0, r6
   d76dc:	4639      	mov	r1, r7
   d76de:	f001 fd65 	bl	d91ac <__aeabi_dcmpun>
   d76e2:	4681      	mov	r9, r0
   d76e4:	2800      	cmp	r0, #0
   d76e6:	f040 8090 	bne.w	d780a <pow+0x172>
   d76ea:	4630      	mov	r0, r6
   d76ec:	4639      	mov	r1, r7
   d76ee:	2200      	movs	r2, #0
   d76f0:	2300      	movs	r3, #0
   d76f2:	f001 fd29 	bl	d9148 <__aeabi_dcmpeq>
   d76f6:	2800      	cmp	r0, #0
   d76f8:	d036      	beq.n	d7768 <pow+0xd0>
   d76fa:	2200      	movs	r2, #0
   d76fc:	2300      	movs	r3, #0
   d76fe:	4620      	mov	r0, r4
   d7700:	4629      	mov	r1, r5
   d7702:	f001 fd21 	bl	d9148 <__aeabi_dcmpeq>
   d7706:	4683      	mov	fp, r0
   d7708:	b1b8      	cbz	r0, d773a <pow+0xa2>
   d770a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d79a0 <pow+0x308>
   d770e:	2201      	movs	r2, #1
   d7710:	4ba9      	ldr	r3, [pc, #676]	; (d79b8 <pow+0x320>)
   d7712:	f8cd 9020 	str.w	r9, [sp, #32]
   d7716:	9200      	str	r2, [sp, #0]
   d7718:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d771c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7720:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7724:	9301      	str	r3, [sp, #4]
   d7726:	f1b8 0f00 	cmp.w	r8, #0
   d772a:	d05b      	beq.n	d77e4 <pow+0x14c>
   d772c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d79a8 <pow+0x310>
   d7730:	b00b      	add	sp, #44	; 0x2c
   d7732:	ecbd 8b02 	vpop	{d8}
   d7736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d773a:	ec45 4b10 	vmov	d0, r4, r5
   d773e:	f000 ffa7 	bl	d8690 <finite>
   d7742:	b140      	cbz	r0, d7756 <pow+0xbe>
   d7744:	2200      	movs	r2, #0
   d7746:	2300      	movs	r3, #0
   d7748:	4620      	mov	r0, r4
   d774a:	4629      	mov	r1, r5
   d774c:	f001 fd06 	bl	d915c <__aeabi_dcmplt>
   d7750:	2800      	cmp	r0, #0
   d7752:	f040 80c5 	bne.w	d78e0 <pow+0x248>
   d7756:	eeb0 0a48 	vmov.f32	s0, s16
   d775a:	eef0 0a68 	vmov.f32	s1, s17
   d775e:	b00b      	add	sp, #44	; 0x2c
   d7760:	ecbd 8b02 	vpop	{d8}
   d7764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7768:	eeb0 0a48 	vmov.f32	s0, s16
   d776c:	eef0 0a68 	vmov.f32	s1, s17
   d7770:	f000 ff8e 	bl	d8690 <finite>
   d7774:	4680      	mov	r8, r0
   d7776:	2800      	cmp	r0, #0
   d7778:	d061      	beq.n	d783e <pow+0x1a6>
   d777a:	f04f 0800 	mov.w	r8, #0
   d777e:	f04f 0900 	mov.w	r9, #0
   d7782:	ec51 0b18 	vmov	r0, r1, d8
   d7786:	4642      	mov	r2, r8
   d7788:	464b      	mov	r3, r9
   d778a:	f001 fcdd 	bl	d9148 <__aeabi_dcmpeq>
   d778e:	2800      	cmp	r0, #0
   d7790:	d0e1      	beq.n	d7756 <pow+0xbe>
   d7792:	ec47 6b10 	vmov	d0, r6, r7
   d7796:	f000 ff7b 	bl	d8690 <finite>
   d779a:	2800      	cmp	r0, #0
   d779c:	d0db      	beq.n	d7756 <pow+0xbe>
   d779e:	ec45 4b10 	vmov	d0, r4, r5
   d77a2:	f000 ff75 	bl	d8690 <finite>
   d77a6:	2800      	cmp	r0, #0
   d77a8:	d0d5      	beq.n	d7756 <pow+0xbe>
   d77aa:	f99a 3000 	ldrsb.w	r3, [sl]
   d77ae:	4a82      	ldr	r2, [pc, #520]	; (d79b8 <pow+0x320>)
   d77b0:	9201      	str	r2, [sp, #4]
   d77b2:	2104      	movs	r1, #4
   d77b4:	2200      	movs	r2, #0
   d77b6:	2b02      	cmp	r3, #2
   d77b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d77bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d77c0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d77c4:	9100      	str	r1, [sp, #0]
   d77c6:	9208      	str	r2, [sp, #32]
   d77c8:	d003      	beq.n	d77d2 <pow+0x13a>
   d77ca:	4668      	mov	r0, sp
   d77cc:	f000 ff68 	bl	d86a0 <matherr>
   d77d0:	b970      	cbnz	r0, d77f0 <pow+0x158>
   d77d2:	f7fe fb39 	bl	d5e48 <__errno>
   d77d6:	2322      	movs	r3, #34	; 0x22
   d77d8:	6003      	str	r3, [r0, #0]
   d77da:	e009      	b.n	d77f0 <pow+0x158>
   d77dc:	ed9f 7b70 	vldr	d7, [pc, #448]	; d79a0 <pow+0x308>
   d77e0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d77e4:	4668      	mov	r0, sp
   d77e6:	f000 ff5b 	bl	d86a0 <matherr>
   d77ea:	2800      	cmp	r0, #0
   d77ec:	f000 808e 	beq.w	d790c <pow+0x274>
   d77f0:	9b08      	ldr	r3, [sp, #32]
   d77f2:	b11b      	cbz	r3, d77fc <pow+0x164>
   d77f4:	f7fe fb28 	bl	d5e48 <__errno>
   d77f8:	9b08      	ldr	r3, [sp, #32]
   d77fa:	6003      	str	r3, [r0, #0]
   d77fc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7800:	b00b      	add	sp, #44	; 0x2c
   d7802:	ecbd 8b02 	vpop	{d8}
   d7806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d780a:	2200      	movs	r2, #0
   d780c:	2300      	movs	r3, #0
   d780e:	4620      	mov	r0, r4
   d7810:	4629      	mov	r1, r5
   d7812:	f001 fc99 	bl	d9148 <__aeabi_dcmpeq>
   d7816:	2800      	cmp	r0, #0
   d7818:	d09d      	beq.n	d7756 <pow+0xbe>
   d781a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d79a8 <pow+0x310>
   d781e:	4b66      	ldr	r3, [pc, #408]	; (d79b8 <pow+0x320>)
   d7820:	f8cd b020 	str.w	fp, [sp, #32]
   d7824:	2201      	movs	r2, #1
   d7826:	f1b8 0f02 	cmp.w	r8, #2
   d782a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d782e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7832:	ed8d 0b06 	vstr	d0, [sp, #24]
   d7836:	e88d 000c 	stmia.w	sp, {r2, r3}
   d783a:	d1d3      	bne.n	d77e4 <pow+0x14c>
   d783c:	e78f      	b.n	d775e <pow+0xc6>
   d783e:	ec47 6b10 	vmov	d0, r6, r7
   d7842:	f000 ff25 	bl	d8690 <finite>
   d7846:	2800      	cmp	r0, #0
   d7848:	d097      	beq.n	d777a <pow+0xe2>
   d784a:	ec45 4b10 	vmov	d0, r4, r5
   d784e:	f000 ff1f 	bl	d8690 <finite>
   d7852:	2800      	cmp	r0, #0
   d7854:	d091      	beq.n	d777a <pow+0xe2>
   d7856:	ec53 2b18 	vmov	r2, r3, d8
   d785a:	ee18 0a10 	vmov	r0, s16
   d785e:	4619      	mov	r1, r3
   d7860:	f001 fca4 	bl	d91ac <__aeabi_dcmpun>
   d7864:	2800      	cmp	r0, #0
   d7866:	d17c      	bne.n	d7962 <pow+0x2ca>
   d7868:	2303      	movs	r3, #3
   d786a:	f99a 8000 	ldrsb.w	r8, [sl]
   d786e:	9300      	str	r3, [sp, #0]
   d7870:	4b51      	ldr	r3, [pc, #324]	; (d79b8 <pow+0x320>)
   d7872:	9008      	str	r0, [sp, #32]
   d7874:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7878:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d787c:	9301      	str	r3, [sp, #4]
   d787e:	f1b8 0f00 	cmp.w	r8, #0
   d7882:	d148      	bne.n	d7916 <pow+0x27e>
   d7884:	f8df 9144 	ldr.w	r9, [pc, #324]	; d79cc <pow+0x334>
   d7888:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d788c:	2200      	movs	r2, #0
   d788e:	2300      	movs	r3, #0
   d7890:	4630      	mov	r0, r6
   d7892:	4639      	mov	r1, r7
   d7894:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7898:	f001 fc60 	bl	d915c <__aeabi_dcmplt>
   d789c:	2800      	cmp	r0, #0
   d789e:	d094      	beq.n	d77ca <pow+0x132>
   d78a0:	2200      	movs	r2, #0
   d78a2:	4b46      	ldr	r3, [pc, #280]	; (d79bc <pow+0x324>)
   d78a4:	4620      	mov	r0, r4
   d78a6:	4629      	mov	r1, r5
   d78a8:	f001 f9e6 	bl	d8c78 <__aeabi_dmul>
   d78ac:	4604      	mov	r4, r0
   d78ae:	460d      	mov	r5, r1
   d78b0:	ec45 4b10 	vmov	d0, r4, r5
   d78b4:	f000 ff00 	bl	d86b8 <rint>
   d78b8:	4620      	mov	r0, r4
   d78ba:	ec53 2b10 	vmov	r2, r3, d0
   d78be:	4629      	mov	r1, r5
   d78c0:	f001 fc42 	bl	d9148 <__aeabi_dcmpeq>
   d78c4:	2800      	cmp	r0, #0
   d78c6:	d149      	bne.n	d795c <pow+0x2c4>
   d78c8:	4b3d      	ldr	r3, [pc, #244]	; (d79c0 <pow+0x328>)
   d78ca:	f99a 8000 	ldrsb.w	r8, [sl]
   d78ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d78d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d78d6:	f1b8 0f02 	cmp.w	r8, #2
   d78da:	f47f af76 	bne.w	d77ca <pow+0x132>
   d78de:	e778      	b.n	d77d2 <pow+0x13a>
   d78e0:	4a35      	ldr	r2, [pc, #212]	; (d79b8 <pow+0x320>)
   d78e2:	f99a 3000 	ldrsb.w	r3, [sl]
   d78e6:	f8cd b020 	str.w	fp, [sp, #32]
   d78ea:	2101      	movs	r1, #1
   d78ec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d78f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d78f4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d78f8:	2b00      	cmp	r3, #0
   d78fa:	f43f af6f 	beq.w	d77dc <pow+0x144>
   d78fe:	4931      	ldr	r1, [pc, #196]	; (d79c4 <pow+0x32c>)
   d7900:	2000      	movs	r0, #0
   d7902:	2b02      	cmp	r3, #2
   d7904:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7908:	f47f af6c 	bne.w	d77e4 <pow+0x14c>
   d790c:	f7fe fa9c 	bl	d5e48 <__errno>
   d7910:	2321      	movs	r3, #33	; 0x21
   d7912:	6003      	str	r3, [r0, #0]
   d7914:	e76c      	b.n	d77f0 <pow+0x158>
   d7916:	ed9f 7b26 	vldr	d7, [pc, #152]	; d79b0 <pow+0x318>
   d791a:	2200      	movs	r2, #0
   d791c:	2300      	movs	r3, #0
   d791e:	4630      	mov	r0, r6
   d7920:	4639      	mov	r1, r7
   d7922:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7926:	f001 fc19 	bl	d915c <__aeabi_dcmplt>
   d792a:	2800      	cmp	r0, #0
   d792c:	d0d3      	beq.n	d78d6 <pow+0x23e>
   d792e:	2200      	movs	r2, #0
   d7930:	4b22      	ldr	r3, [pc, #136]	; (d79bc <pow+0x324>)
   d7932:	4620      	mov	r0, r4
   d7934:	4629      	mov	r1, r5
   d7936:	f001 f99f 	bl	d8c78 <__aeabi_dmul>
   d793a:	4604      	mov	r4, r0
   d793c:	460d      	mov	r5, r1
   d793e:	ec45 4b10 	vmov	d0, r4, r5
   d7942:	f000 feb9 	bl	d86b8 <rint>
   d7946:	4620      	mov	r0, r4
   d7948:	ec53 2b10 	vmov	r2, r3, d0
   d794c:	4629      	mov	r1, r5
   d794e:	f001 fbfb 	bl	d9148 <__aeabi_dcmpeq>
   d7952:	b918      	cbnz	r0, d795c <pow+0x2c4>
   d7954:	4b1b      	ldr	r3, [pc, #108]	; (d79c4 <pow+0x32c>)
   d7956:	2200      	movs	r2, #0
   d7958:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d795c:	f99a 8000 	ldrsb.w	r8, [sl]
   d7960:	e7b9      	b.n	d78d6 <pow+0x23e>
   d7962:	4b15      	ldr	r3, [pc, #84]	; (d79b8 <pow+0x320>)
   d7964:	f99a 9000 	ldrsb.w	r9, [sl]
   d7968:	f8cd 8020 	str.w	r8, [sp, #32]
   d796c:	2201      	movs	r2, #1
   d796e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7972:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7976:	e88d 000c 	stmia.w	sp, {r2, r3}
   d797a:	f1b9 0f00 	cmp.w	r9, #0
   d797e:	f43f af2d 	beq.w	d77dc <pow+0x144>
   d7982:	2200      	movs	r2, #0
   d7984:	2300      	movs	r3, #0
   d7986:	4610      	mov	r0, r2
   d7988:	4619      	mov	r1, r3
   d798a:	f001 fa9f 	bl	d8ecc <__aeabi_ddiv>
   d798e:	f1b9 0f02 	cmp.w	r9, #2
   d7992:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7996:	d0b9      	beq.n	d790c <pow+0x274>
   d7998:	e724      	b.n	d77e4 <pow+0x14c>
   d799a:	bf00      	nop
   d799c:	f3af 8000 	nop.w
	...
   d79ac:	3ff00000 	.word	0x3ff00000
   d79b0:	00000000 	.word	0x00000000
   d79b4:	7ff00000 	.word	0x7ff00000
   d79b8:	000d9d64 	.word	0x000d9d64
   d79bc:	3fe00000 	.word	0x3fe00000
   d79c0:	c7efffff 	.word	0xc7efffff
   d79c4:	fff00000 	.word	0xfff00000
   d79c8:	2003e29c 	.word	0x2003e29c
   d79cc:	47efffff 	.word	0x47efffff

000d79d0 <__ieee754_pow>:
   d79d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79d4:	ec51 0b11 	vmov	r0, r1, d1
   d79d8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d79dc:	ea58 0400 	orrs.w	r4, r8, r0
   d79e0:	b093      	sub	sp, #76	; 0x4c
   d79e2:	d03c      	beq.n	d7a5e <__ieee754_pow+0x8e>
   d79e4:	ec53 2b10 	vmov	r2, r3, d0
   d79e8:	4e6d      	ldr	r6, [pc, #436]	; (d7ba0 <__ieee754_pow+0x1d0>)
   d79ea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d79ee:	42b4      	cmp	r4, r6
   d79f0:	ee10 aa10 	vmov	sl, s0
   d79f4:	461d      	mov	r5, r3
   d79f6:	dc2b      	bgt.n	d7a50 <__ieee754_pow+0x80>
   d79f8:	4689      	mov	r9, r1
   d79fa:	ee11 ea10 	vmov	lr, s2
   d79fe:	d026      	beq.n	d7a4e <__ieee754_pow+0x7e>
   d7a00:	45b0      	cmp	r8, r6
   d7a02:	dc25      	bgt.n	d7a50 <__ieee754_pow+0x80>
   d7a04:	4e66      	ldr	r6, [pc, #408]	; (d7ba0 <__ieee754_pow+0x1d0>)
   d7a06:	45b0      	cmp	r8, r6
   d7a08:	d077      	beq.n	d7afa <__ieee754_pow+0x12a>
   d7a0a:	2d00      	cmp	r5, #0
   d7a0c:	4616      	mov	r6, r2
   d7a0e:	461f      	mov	r7, r3
   d7a10:	e9cd 0100 	strd	r0, r1, [sp]
   d7a14:	db75      	blt.n	d7b02 <__ieee754_pow+0x132>
   d7a16:	f04f 0b00 	mov.w	fp, #0
   d7a1a:	f1be 0f00 	cmp.w	lr, #0
   d7a1e:	d12d      	bne.n	d7a7c <__ieee754_pow+0xac>
   d7a20:	4b5f      	ldr	r3, [pc, #380]	; (d7ba0 <__ieee754_pow+0x1d0>)
   d7a22:	4598      	cmp	r8, r3
   d7a24:	f000 8089 	beq.w	d7b3a <__ieee754_pow+0x16a>
   d7a28:	4b5e      	ldr	r3, [pc, #376]	; (d7ba4 <__ieee754_pow+0x1d4>)
   d7a2a:	4598      	cmp	r8, r3
   d7a2c:	d05e      	beq.n	d7aec <__ieee754_pow+0x11c>
   d7a2e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d7a32:	f000 83de 	beq.w	d81f2 <__ieee754_pow+0x822>
   d7a36:	4b5c      	ldr	r3, [pc, #368]	; (d7ba8 <__ieee754_pow+0x1d8>)
   d7a38:	4599      	cmp	r9, r3
   d7a3a:	d11f      	bne.n	d7a7c <__ieee754_pow+0xac>
   d7a3c:	2d00      	cmp	r5, #0
   d7a3e:	db1d      	blt.n	d7a7c <__ieee754_pow+0xac>
   d7a40:	ec47 6b10 	vmov	d0, r6, r7
   d7a44:	b013      	add	sp, #76	; 0x4c
   d7a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a4a:	f000 bd49 	b.w	d84e0 <__ieee754_sqrt>
   d7a4e:	b15a      	cbz	r2, d7a68 <__ieee754_pow+0x98>
   d7a50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7a54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7a58:	ea54 030a 	orrs.w	r3, r4, sl
   d7a5c:	d106      	bne.n	d7a6c <__ieee754_pow+0x9c>
   d7a5e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7b88 <__ieee754_pow+0x1b8>
   d7a62:	b013      	add	sp, #76	; 0x4c
   d7a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a68:	45a0      	cmp	r8, r4
   d7a6a:	ddcb      	ble.n	d7a04 <__ieee754_pow+0x34>
   d7a6c:	484f      	ldr	r0, [pc, #316]	; (d7bac <__ieee754_pow+0x1dc>)
   d7a6e:	b013      	add	sp, #76	; 0x4c
   d7a70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a74:	f000 be18 	b.w	d86a8 <nan>
   d7a78:	f04f 0b00 	mov.w	fp, #0
   d7a7c:	ec47 6b10 	vmov	d0, r6, r7
   d7a80:	f000 fdfe 	bl	d8680 <fabs>
   d7a84:	ec51 0b10 	vmov	r0, r1, d0
   d7a88:	f1ba 0f00 	cmp.w	sl, #0
   d7a8c:	d01e      	beq.n	d7acc <__ieee754_pow+0xfc>
   d7a8e:	0fed      	lsrs	r5, r5, #31
   d7a90:	f105 3aff 	add.w	sl, r5, #4294967295
   d7a94:	ea5b 030a 	orrs.w	r3, fp, sl
   d7a98:	d063      	beq.n	d7b62 <__ieee754_pow+0x192>
   d7a9a:	4b45      	ldr	r3, [pc, #276]	; (d7bb0 <__ieee754_pow+0x1e0>)
   d7a9c:	4598      	cmp	r8, r3
   d7a9e:	f340 808d 	ble.w	d7bbc <__ieee754_pow+0x1ec>
   d7aa2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7aa6:	4598      	cmp	r8, r3
   d7aa8:	f340 8438 	ble.w	d831c <__ieee754_pow+0x94c>
   d7aac:	4b41      	ldr	r3, [pc, #260]	; (d7bb4 <__ieee754_pow+0x1e4>)
   d7aae:	429c      	cmp	r4, r3
   d7ab0:	dd62      	ble.n	d7b78 <__ieee754_pow+0x1a8>
   d7ab2:	f1b9 0f00 	cmp.w	r9, #0
   d7ab6:	dd62      	ble.n	d7b7e <__ieee754_pow+0x1ae>
   d7ab8:	a335      	add	r3, pc, #212	; (adr r3, d7b90 <__ieee754_pow+0x1c0>)
   d7aba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7abe:	4610      	mov	r0, r2
   d7ac0:	4619      	mov	r1, r3
   d7ac2:	f001 f8d9 	bl	d8c78 <__aeabi_dmul>
   d7ac6:	ec41 0b10 	vmov	d0, r0, r1
   d7aca:	e7ca      	b.n	d7a62 <__ieee754_pow+0x92>
   d7acc:	b124      	cbz	r4, d7ad8 <__ieee754_pow+0x108>
   d7ace:	4b35      	ldr	r3, [pc, #212]	; (d7ba4 <__ieee754_pow+0x1d4>)
   d7ad0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d7ad4:	429a      	cmp	r2, r3
   d7ad6:	d1da      	bne.n	d7a8e <__ieee754_pow+0xbe>
   d7ad8:	f1b9 0f00 	cmp.w	r9, #0
   d7adc:	f2c0 83cb 	blt.w	d8276 <__ieee754_pow+0x8a6>
   d7ae0:	2d00      	cmp	r5, #0
   d7ae2:	f2c0 8374 	blt.w	d81ce <__ieee754_pow+0x7fe>
   d7ae6:	ec41 0b10 	vmov	d0, r0, r1
   d7aea:	e7ba      	b.n	d7a62 <__ieee754_pow+0x92>
   d7aec:	f1b9 0f00 	cmp.w	r9, #0
   d7af0:	f2c0 847a 	blt.w	d83e8 <__ieee754_pow+0xa18>
   d7af4:	ec47 6b10 	vmov	d0, r6, r7
   d7af8:	e7b3      	b.n	d7a62 <__ieee754_pow+0x92>
   d7afa:	f1be 0f00 	cmp.w	lr, #0
   d7afe:	d084      	beq.n	d7a0a <__ieee754_pow+0x3a>
   d7b00:	e7a6      	b.n	d7a50 <__ieee754_pow+0x80>
   d7b02:	4b2d      	ldr	r3, [pc, #180]	; (d7bb8 <__ieee754_pow+0x1e8>)
   d7b04:	4598      	cmp	r8, r3
   d7b06:	dc29      	bgt.n	d7b5c <__ieee754_pow+0x18c>
   d7b08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d7b0c:	4598      	cmp	r8, r3
   d7b0e:	dd82      	ble.n	d7a16 <__ieee754_pow+0x46>
   d7b10:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7b14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7b18:	2b14      	cmp	r3, #20
   d7b1a:	f340 847f 	ble.w	d841c <__ieee754_pow+0xa4c>
   d7b1e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d7b22:	fa2e f203 	lsr.w	r2, lr, r3
   d7b26:	fa02 f303 	lsl.w	r3, r2, r3
   d7b2a:	459e      	cmp	lr, r3
   d7b2c:	f47f af73 	bne.w	d7a16 <__ieee754_pow+0x46>
   d7b30:	f002 0201 	and.w	r2, r2, #1
   d7b34:	f1c2 0b02 	rsb	fp, r2, #2
   d7b38:	e76f      	b.n	d7a1a <__ieee754_pow+0x4a>
   d7b3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d7b3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d7b42:	ea53 030a 	orrs.w	r3, r3, sl
   d7b46:	d08a      	beq.n	d7a5e <__ieee754_pow+0x8e>
   d7b48:	4b1a      	ldr	r3, [pc, #104]	; (d7bb4 <__ieee754_pow+0x1e4>)
   d7b4a:	429c      	cmp	r4, r3
   d7b4c:	f340 8385 	ble.w	d825a <__ieee754_pow+0x88a>
   d7b50:	f1b9 0f00 	cmp.w	r9, #0
   d7b54:	db13      	blt.n	d7b7e <__ieee754_pow+0x1ae>
   d7b56:	ed9d 0b00 	vldr	d0, [sp]
   d7b5a:	e782      	b.n	d7a62 <__ieee754_pow+0x92>
   d7b5c:	f04f 0b02 	mov.w	fp, #2
   d7b60:	e75b      	b.n	d7a1a <__ieee754_pow+0x4a>
   d7b62:	4632      	mov	r2, r6
   d7b64:	463b      	mov	r3, r7
   d7b66:	4610      	mov	r0, r2
   d7b68:	4619      	mov	r1, r3
   d7b6a:	f000 fed1 	bl	d8910 <__aeabi_dsub>
   d7b6e:	4602      	mov	r2, r0
   d7b70:	460b      	mov	r3, r1
   d7b72:	f001 f9ab 	bl	d8ecc <__aeabi_ddiv>
   d7b76:	e7b6      	b.n	d7ae6 <__ieee754_pow+0x116>
   d7b78:	f1b9 0f00 	cmp.w	r9, #0
   d7b7c:	db9c      	blt.n	d7ab8 <__ieee754_pow+0xe8>
   d7b7e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7b98 <__ieee754_pow+0x1c8>
   d7b82:	e76e      	b.n	d7a62 <__ieee754_pow+0x92>
   d7b84:	f3af 8000 	nop.w
   d7b88:	00000000 	.word	0x00000000
   d7b8c:	3ff00000 	.word	0x3ff00000
   d7b90:	8800759c 	.word	0x8800759c
   d7b94:	7e37e43c 	.word	0x7e37e43c
	...
   d7ba0:	7ff00000 	.word	0x7ff00000
   d7ba4:	3ff00000 	.word	0x3ff00000
   d7ba8:	3fe00000 	.word	0x3fe00000
   d7bac:	000d9d68 	.word	0x000d9d68
   d7bb0:	41e00000 	.word	0x41e00000
   d7bb4:	3fefffff 	.word	0x3fefffff
   d7bb8:	433fffff 	.word	0x433fffff
   d7bbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7bc0:	f04f 0200 	mov.w	r2, #0
   d7bc4:	da05      	bge.n	d7bd2 <__ieee754_pow+0x202>
   d7bc6:	4bd6      	ldr	r3, [pc, #856]	; (d7f20 <__ieee754_pow+0x550>)
   d7bc8:	f001 f856 	bl	d8c78 <__aeabi_dmul>
   d7bcc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7bd0:	460c      	mov	r4, r1
   d7bd2:	1523      	asrs	r3, r4, #20
   d7bd4:	4ed3      	ldr	r6, [pc, #844]	; (d7f24 <__ieee754_pow+0x554>)
   d7bd6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d7bda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7bde:	4413      	add	r3, r2
   d7be0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d7be4:	42b4      	cmp	r4, r6
   d7be6:	461a      	mov	r2, r3
   d7be8:	930d      	str	r3, [sp, #52]	; 0x34
   d7bea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d7bee:	f340 8349 	ble.w	d8284 <__ieee754_pow+0x8b4>
   d7bf2:	4bcd      	ldr	r3, [pc, #820]	; (d7f28 <__ieee754_pow+0x558>)
   d7bf4:	429c      	cmp	r4, r3
   d7bf6:	f340 842d 	ble.w	d8454 <__ieee754_pow+0xa84>
   d7bfa:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7ec8 <__ieee754_pow+0x4f8>
   d7bfe:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7c02:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7c06:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7ed0 <__ieee754_pow+0x500>
   d7c0a:	4613      	mov	r3, r2
   d7c0c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7c10:	3301      	adds	r3, #1
   d7c12:	930d      	str	r3, [sp, #52]	; 0x34
   d7c14:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7c18:	f04f 0800 	mov.w	r8, #0
   d7c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7c20:	4629      	mov	r1, r5
   d7c22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7c26:	f000 fe73 	bl	d8910 <__aeabi_dsub>
   d7c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7c2e:	4606      	mov	r6, r0
   d7c30:	460f      	mov	r7, r1
   d7c32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7c36:	f000 fe6d 	bl	d8914 <__adddf3>
   d7c3a:	4602      	mov	r2, r0
   d7c3c:	460b      	mov	r3, r1
   d7c3e:	2000      	movs	r0, #0
   d7c40:	49ba      	ldr	r1, [pc, #744]	; (d7f2c <__ieee754_pow+0x55c>)
   d7c42:	f001 f943 	bl	d8ecc <__aeabi_ddiv>
   d7c46:	4603      	mov	r3, r0
   d7c48:	460c      	mov	r4, r1
   d7c4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7c4e:	4602      	mov	r2, r0
   d7c50:	460b      	mov	r3, r1
   d7c52:	4630      	mov	r0, r6
   d7c54:	4639      	mov	r1, r7
   d7c56:	f001 f80f 	bl	d8c78 <__aeabi_dmul>
   d7c5a:	106b      	asrs	r3, r5, #1
   d7c5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7c60:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d7c64:	eb03 0508 	add.w	r5, r3, r8
   d7c68:	460a      	mov	r2, r1
   d7c6a:	2300      	movs	r3, #0
   d7c6c:	4601      	mov	r1, r0
   d7c6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7c72:	9302      	str	r3, [sp, #8]
   d7c74:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7c78:	2400      	movs	r4, #0
   d7c7a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7c7e:	462b      	mov	r3, r5
   d7c80:	4622      	mov	r2, r4
   d7c82:	4640      	mov	r0, r8
   d7c84:	4649      	mov	r1, r9
   d7c86:	f000 fff7 	bl	d8c78 <__aeabi_dmul>
   d7c8a:	4602      	mov	r2, r0
   d7c8c:	460b      	mov	r3, r1
   d7c8e:	4630      	mov	r0, r6
   d7c90:	4639      	mov	r1, r7
   d7c92:	f000 fe3d 	bl	d8910 <__aeabi_dsub>
   d7c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7c9a:	4606      	mov	r6, r0
   d7c9c:	460f      	mov	r7, r1
   d7c9e:	4620      	mov	r0, r4
   d7ca0:	4629      	mov	r1, r5
   d7ca2:	f000 fe35 	bl	d8910 <__aeabi_dsub>
   d7ca6:	4602      	mov	r2, r0
   d7ca8:	460b      	mov	r3, r1
   d7caa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7cae:	f000 fe2f 	bl	d8910 <__aeabi_dsub>
   d7cb2:	4642      	mov	r2, r8
   d7cb4:	464b      	mov	r3, r9
   d7cb6:	f000 ffdf 	bl	d8c78 <__aeabi_dmul>
   d7cba:	4602      	mov	r2, r0
   d7cbc:	460b      	mov	r3, r1
   d7cbe:	4630      	mov	r0, r6
   d7cc0:	4639      	mov	r1, r7
   d7cc2:	f000 fe25 	bl	d8910 <__aeabi_dsub>
   d7cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d7cca:	f000 ffd5 	bl	d8c78 <__aeabi_dmul>
   d7cce:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d7cd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7cd6:	4622      	mov	r2, r4
   d7cd8:	462b      	mov	r3, r5
   d7cda:	4620      	mov	r0, r4
   d7cdc:	4629      	mov	r1, r5
   d7cde:	f000 ffcb 	bl	d8c78 <__aeabi_dmul>
   d7ce2:	a37d      	add	r3, pc, #500	; (adr r3, d7ed8 <__ieee754_pow+0x508>)
   d7ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ce8:	4604      	mov	r4, r0
   d7cea:	460d      	mov	r5, r1
   d7cec:	f000 ffc4 	bl	d8c78 <__aeabi_dmul>
   d7cf0:	a37b      	add	r3, pc, #492	; (adr r3, d7ee0 <__ieee754_pow+0x510>)
   d7cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cf6:	f000 fe0d 	bl	d8914 <__adddf3>
   d7cfa:	4622      	mov	r2, r4
   d7cfc:	462b      	mov	r3, r5
   d7cfe:	f000 ffbb 	bl	d8c78 <__aeabi_dmul>
   d7d02:	a379      	add	r3, pc, #484	; (adr r3, d7ee8 <__ieee754_pow+0x518>)
   d7d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d08:	f000 fe04 	bl	d8914 <__adddf3>
   d7d0c:	4622      	mov	r2, r4
   d7d0e:	462b      	mov	r3, r5
   d7d10:	f000 ffb2 	bl	d8c78 <__aeabi_dmul>
   d7d14:	a376      	add	r3, pc, #472	; (adr r3, d7ef0 <__ieee754_pow+0x520>)
   d7d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d1a:	f000 fdfb 	bl	d8914 <__adddf3>
   d7d1e:	4622      	mov	r2, r4
   d7d20:	462b      	mov	r3, r5
   d7d22:	f000 ffa9 	bl	d8c78 <__aeabi_dmul>
   d7d26:	a374      	add	r3, pc, #464	; (adr r3, d7ef8 <__ieee754_pow+0x528>)
   d7d28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d2c:	f000 fdf2 	bl	d8914 <__adddf3>
   d7d30:	4622      	mov	r2, r4
   d7d32:	462b      	mov	r3, r5
   d7d34:	f000 ffa0 	bl	d8c78 <__aeabi_dmul>
   d7d38:	a371      	add	r3, pc, #452	; (adr r3, d7f00 <__ieee754_pow+0x530>)
   d7d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d3e:	f000 fde9 	bl	d8914 <__adddf3>
   d7d42:	4622      	mov	r2, r4
   d7d44:	4606      	mov	r6, r0
   d7d46:	460f      	mov	r7, r1
   d7d48:	462b      	mov	r3, r5
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	4629      	mov	r1, r5
   d7d4e:	f000 ff93 	bl	d8c78 <__aeabi_dmul>
   d7d52:	4602      	mov	r2, r0
   d7d54:	460b      	mov	r3, r1
   d7d56:	4630      	mov	r0, r6
   d7d58:	4639      	mov	r1, r7
   d7d5a:	f000 ff8d 	bl	d8c78 <__aeabi_dmul>
   d7d5e:	4642      	mov	r2, r8
   d7d60:	4604      	mov	r4, r0
   d7d62:	460d      	mov	r5, r1
   d7d64:	464b      	mov	r3, r9
   d7d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7d6a:	f000 fdd3 	bl	d8914 <__adddf3>
   d7d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7d72:	f000 ff81 	bl	d8c78 <__aeabi_dmul>
   d7d76:	4622      	mov	r2, r4
   d7d78:	462b      	mov	r3, r5
   d7d7a:	f000 fdcb 	bl	d8914 <__adddf3>
   d7d7e:	4642      	mov	r2, r8
   d7d80:	4606      	mov	r6, r0
   d7d82:	460f      	mov	r7, r1
   d7d84:	464b      	mov	r3, r9
   d7d86:	4640      	mov	r0, r8
   d7d88:	4649      	mov	r1, r9
   d7d8a:	f000 ff75 	bl	d8c78 <__aeabi_dmul>
   d7d8e:	2200      	movs	r2, #0
   d7d90:	4b67      	ldr	r3, [pc, #412]	; (d7f30 <__ieee754_pow+0x560>)
   d7d92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7d96:	f000 fdbd 	bl	d8914 <__adddf3>
   d7d9a:	4632      	mov	r2, r6
   d7d9c:	463b      	mov	r3, r7
   d7d9e:	f000 fdb9 	bl	d8914 <__adddf3>
   d7da2:	9802      	ldr	r0, [sp, #8]
   d7da4:	460d      	mov	r5, r1
   d7da6:	4604      	mov	r4, r0
   d7da8:	4622      	mov	r2, r4
   d7daa:	462b      	mov	r3, r5
   d7dac:	4640      	mov	r0, r8
   d7dae:	4649      	mov	r1, r9
   d7db0:	f000 ff62 	bl	d8c78 <__aeabi_dmul>
   d7db4:	2200      	movs	r2, #0
   d7db6:	4680      	mov	r8, r0
   d7db8:	4689      	mov	r9, r1
   d7dba:	4b5d      	ldr	r3, [pc, #372]	; (d7f30 <__ieee754_pow+0x560>)
   d7dbc:	4620      	mov	r0, r4
   d7dbe:	4629      	mov	r1, r5
   d7dc0:	f000 fda6 	bl	d8910 <__aeabi_dsub>
   d7dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7dc8:	f000 fda2 	bl	d8910 <__aeabi_dsub>
   d7dcc:	4602      	mov	r2, r0
   d7dce:	460b      	mov	r3, r1
   d7dd0:	4630      	mov	r0, r6
   d7dd2:	4639      	mov	r1, r7
   d7dd4:	f000 fd9c 	bl	d8910 <__aeabi_dsub>
   d7dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7ddc:	f000 ff4c 	bl	d8c78 <__aeabi_dmul>
   d7de0:	4622      	mov	r2, r4
   d7de2:	4606      	mov	r6, r0
   d7de4:	460f      	mov	r7, r1
   d7de6:	462b      	mov	r3, r5
   d7de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7dec:	f000 ff44 	bl	d8c78 <__aeabi_dmul>
   d7df0:	4602      	mov	r2, r0
   d7df2:	460b      	mov	r3, r1
   d7df4:	4630      	mov	r0, r6
   d7df6:	4639      	mov	r1, r7
   d7df8:	f000 fd8c 	bl	d8914 <__adddf3>
   d7dfc:	4606      	mov	r6, r0
   d7dfe:	460f      	mov	r7, r1
   d7e00:	4602      	mov	r2, r0
   d7e02:	460b      	mov	r3, r1
   d7e04:	4640      	mov	r0, r8
   d7e06:	4649      	mov	r1, r9
   d7e08:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7e0c:	f000 fd82 	bl	d8914 <__adddf3>
   d7e10:	9802      	ldr	r0, [sp, #8]
   d7e12:	a33d      	add	r3, pc, #244	; (adr r3, d7f08 <__ieee754_pow+0x538>)
   d7e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e18:	4604      	mov	r4, r0
   d7e1a:	460d      	mov	r5, r1
   d7e1c:	f000 ff2c 	bl	d8c78 <__aeabi_dmul>
   d7e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7e24:	4680      	mov	r8, r0
   d7e26:	4689      	mov	r9, r1
   d7e28:	4620      	mov	r0, r4
   d7e2a:	4629      	mov	r1, r5
   d7e2c:	f000 fd70 	bl	d8910 <__aeabi_dsub>
   d7e30:	4602      	mov	r2, r0
   d7e32:	460b      	mov	r3, r1
   d7e34:	4630      	mov	r0, r6
   d7e36:	4639      	mov	r1, r7
   d7e38:	f000 fd6a 	bl	d8910 <__aeabi_dsub>
   d7e3c:	a334      	add	r3, pc, #208	; (adr r3, d7f10 <__ieee754_pow+0x540>)
   d7e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e42:	f000 ff19 	bl	d8c78 <__aeabi_dmul>
   d7e46:	a334      	add	r3, pc, #208	; (adr r3, d7f18 <__ieee754_pow+0x548>)
   d7e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e4c:	4606      	mov	r6, r0
   d7e4e:	460f      	mov	r7, r1
   d7e50:	4620      	mov	r0, r4
   d7e52:	4629      	mov	r1, r5
   d7e54:	f000 ff10 	bl	d8c78 <__aeabi_dmul>
   d7e58:	4602      	mov	r2, r0
   d7e5a:	460b      	mov	r3, r1
   d7e5c:	4630      	mov	r0, r6
   d7e5e:	4639      	mov	r1, r7
   d7e60:	f000 fd58 	bl	d8914 <__adddf3>
   d7e64:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7e68:	f000 fd54 	bl	d8914 <__adddf3>
   d7e6c:	4606      	mov	r6, r0
   d7e6e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7e70:	460f      	mov	r7, r1
   d7e72:	f000 fe9b 	bl	d8bac <__aeabi_i2d>
   d7e76:	4632      	mov	r2, r6
   d7e78:	4604      	mov	r4, r0
   d7e7a:	460d      	mov	r5, r1
   d7e7c:	463b      	mov	r3, r7
   d7e7e:	4640      	mov	r0, r8
   d7e80:	4649      	mov	r1, r9
   d7e82:	f000 fd47 	bl	d8914 <__adddf3>
   d7e86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7e8a:	f000 fd43 	bl	d8914 <__adddf3>
   d7e8e:	4622      	mov	r2, r4
   d7e90:	462b      	mov	r3, r5
   d7e92:	f000 fd3f 	bl	d8914 <__adddf3>
   d7e96:	9802      	ldr	r0, [sp, #8]
   d7e98:	4622      	mov	r2, r4
   d7e9a:	462b      	mov	r3, r5
   d7e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7ea0:	f000 fd36 	bl	d8910 <__aeabi_dsub>
   d7ea4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7ea8:	f000 fd32 	bl	d8910 <__aeabi_dsub>
   d7eac:	4642      	mov	r2, r8
   d7eae:	464b      	mov	r3, r9
   d7eb0:	f000 fd2e 	bl	d8910 <__aeabi_dsub>
   d7eb4:	4602      	mov	r2, r0
   d7eb6:	460b      	mov	r3, r1
   d7eb8:	4630      	mov	r0, r6
   d7eba:	4639      	mov	r1, r7
   d7ebc:	f000 fd28 	bl	d8910 <__aeabi_dsub>
   d7ec0:	4680      	mov	r8, r0
   d7ec2:	4689      	mov	r9, r1
   d7ec4:	e036      	b.n	d7f34 <__ieee754_pow+0x564>
   d7ec6:	bf00      	nop
	...
   d7ed4:	3ff00000 	.word	0x3ff00000
   d7ed8:	4a454eef 	.word	0x4a454eef
   d7edc:	3fca7e28 	.word	0x3fca7e28
   d7ee0:	93c9db65 	.word	0x93c9db65
   d7ee4:	3fcd864a 	.word	0x3fcd864a
   d7ee8:	a91d4101 	.word	0xa91d4101
   d7eec:	3fd17460 	.word	0x3fd17460
   d7ef0:	518f264d 	.word	0x518f264d
   d7ef4:	3fd55555 	.word	0x3fd55555
   d7ef8:	db6fabff 	.word	0xdb6fabff
   d7efc:	3fdb6db6 	.word	0x3fdb6db6
   d7f00:	33333303 	.word	0x33333303
   d7f04:	3fe33333 	.word	0x3fe33333
   d7f08:	e0000000 	.word	0xe0000000
   d7f0c:	3feec709 	.word	0x3feec709
   d7f10:	dc3a03fd 	.word	0xdc3a03fd
   d7f14:	3feec709 	.word	0x3feec709
   d7f18:	145b01f5 	.word	0x145b01f5
   d7f1c:	be3e2fe0 	.word	0xbe3e2fe0
   d7f20:	43400000 	.word	0x43400000
   d7f24:	0003988e 	.word	0x0003988e
   d7f28:	000bb679 	.word	0x000bb679
   d7f2c:	3ff00000 	.word	0x3ff00000
   d7f30:	40080000 	.word	0x40080000
   d7f34:	f10b 33ff 	add.w	r3, fp, #4294967295
   d7f38:	ea53 030a 	orrs.w	r3, r3, sl
   d7f3c:	f000 8188 	beq.w	d8250 <__ieee754_pow+0x880>
   d7f40:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d82a0 <__ieee754_pow+0x8d0>
   d7f44:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7f48:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7f4c:	4653      	mov	r3, sl
   d7f4e:	465c      	mov	r4, fp
   d7f50:	e9cd 3400 	strd	r3, r4, [sp]
   d7f54:	2300      	movs	r3, #0
   d7f56:	9300      	str	r3, [sp, #0]
   d7f58:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7f5c:	4650      	mov	r0, sl
   d7f5e:	4622      	mov	r2, r4
   d7f60:	462b      	mov	r3, r5
   d7f62:	4659      	mov	r1, fp
   d7f64:	f000 fcd4 	bl	d8910 <__aeabi_dsub>
   d7f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7f6c:	f000 fe84 	bl	d8c78 <__aeabi_dmul>
   d7f70:	4652      	mov	r2, sl
   d7f72:	4606      	mov	r6, r0
   d7f74:	460f      	mov	r7, r1
   d7f76:	465b      	mov	r3, fp
   d7f78:	4640      	mov	r0, r8
   d7f7a:	4649      	mov	r1, r9
   d7f7c:	f000 fe7c 	bl	d8c78 <__aeabi_dmul>
   d7f80:	4602      	mov	r2, r0
   d7f82:	460b      	mov	r3, r1
   d7f84:	4630      	mov	r0, r6
   d7f86:	4639      	mov	r1, r7
   d7f88:	f000 fcc4 	bl	d8914 <__adddf3>
   d7f8c:	4622      	mov	r2, r4
   d7f8e:	4680      	mov	r8, r0
   d7f90:	4689      	mov	r9, r1
   d7f92:	462b      	mov	r3, r5
   d7f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7f98:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7f9c:	f000 fe6c 	bl	d8c78 <__aeabi_dmul>
   d7fa0:	460b      	mov	r3, r1
   d7fa2:	4602      	mov	r2, r0
   d7fa4:	4606      	mov	r6, r0
   d7fa6:	460f      	mov	r7, r1
   d7fa8:	4640      	mov	r0, r8
   d7faa:	4649      	mov	r1, r9
   d7fac:	f000 fcb2 	bl	d8914 <__adddf3>
   d7fb0:	4bd5      	ldr	r3, [pc, #852]	; (d8308 <__ieee754_pow+0x938>)
   d7fb2:	4299      	cmp	r1, r3
   d7fb4:	4604      	mov	r4, r0
   d7fb6:	460d      	mov	r5, r1
   d7fb8:	468a      	mov	sl, r1
   d7fba:	f340 8123 	ble.w	d8204 <__ieee754_pow+0x834>
   d7fbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7fc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7fc6:	4303      	orrs	r3, r0
   d7fc8:	f040 8218 	bne.w	d83fc <__ieee754_pow+0xa2c>
   d7fcc:	a3b6      	add	r3, pc, #728	; (adr r3, d82a8 <__ieee754_pow+0x8d8>)
   d7fce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7fd6:	f000 fc9d 	bl	d8914 <__adddf3>
   d7fda:	4632      	mov	r2, r6
   d7fdc:	4680      	mov	r8, r0
   d7fde:	4689      	mov	r9, r1
   d7fe0:	463b      	mov	r3, r7
   d7fe2:	4620      	mov	r0, r4
   d7fe4:	4629      	mov	r1, r5
   d7fe6:	f000 fc93 	bl	d8910 <__aeabi_dsub>
   d7fea:	4602      	mov	r2, r0
   d7fec:	460b      	mov	r3, r1
   d7fee:	4640      	mov	r0, r8
   d7ff0:	4649      	mov	r1, r9
   d7ff2:	f001 f8d1 	bl	d9198 <__aeabi_dcmpgt>
   d7ff6:	2800      	cmp	r0, #0
   d7ff8:	f040 8200 	bne.w	d83fc <__ieee754_pow+0xa2c>
   d7ffc:	46a8      	mov	r8, r5
   d7ffe:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8006:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d800a:	fa42 f303 	asr.w	r3, r2, r3
   d800e:	4453      	add	r3, sl
   d8010:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8014:	4dbd      	ldr	r5, [pc, #756]	; (d830c <__ieee754_pow+0x93c>)
   d8016:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d801a:	4115      	asrs	r5, r2
   d801c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8020:	2000      	movs	r0, #0
   d8022:	f1c2 0414 	rsb	r4, r2, #20
   d8026:	ea23 0105 	bic.w	r1, r3, r5
   d802a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d802e:	f1ba 0f00 	cmp.w	sl, #0
   d8032:	4602      	mov	r2, r0
   d8034:	460b      	mov	r3, r1
   d8036:	fa4b fb04 	asr.w	fp, fp, r4
   d803a:	4630      	mov	r0, r6
   d803c:	4639      	mov	r1, r7
   d803e:	bfb8      	it	lt
   d8040:	f1cb 0b00 	rsblt	fp, fp, #0
   d8044:	f000 fc64 	bl	d8910 <__aeabi_dsub>
   d8048:	4602      	mov	r2, r0
   d804a:	460b      	mov	r3, r1
   d804c:	4606      	mov	r6, r0
   d804e:	460f      	mov	r7, r1
   d8050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8054:	f000 fc5e 	bl	d8914 <__adddf3>
   d8058:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d805c:	2400      	movs	r4, #0
   d805e:	a394      	add	r3, pc, #592	; (adr r3, d82b0 <__ieee754_pow+0x8e0>)
   d8060:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8064:	4620      	mov	r0, r4
   d8066:	460d      	mov	r5, r1
   d8068:	f000 fe06 	bl	d8c78 <__aeabi_dmul>
   d806c:	4632      	mov	r2, r6
   d806e:	4680      	mov	r8, r0
   d8070:	4689      	mov	r9, r1
   d8072:	463b      	mov	r3, r7
   d8074:	4620      	mov	r0, r4
   d8076:	4629      	mov	r1, r5
   d8078:	f000 fc4a 	bl	d8910 <__aeabi_dsub>
   d807c:	4602      	mov	r2, r0
   d807e:	460b      	mov	r3, r1
   d8080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8084:	f000 fc44 	bl	d8910 <__aeabi_dsub>
   d8088:	a38b      	add	r3, pc, #556	; (adr r3, d82b8 <__ieee754_pow+0x8e8>)
   d808a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d808e:	f000 fdf3 	bl	d8c78 <__aeabi_dmul>
   d8092:	a38b      	add	r3, pc, #556	; (adr r3, d82c0 <__ieee754_pow+0x8f0>)
   d8094:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8098:	4606      	mov	r6, r0
   d809a:	460f      	mov	r7, r1
   d809c:	4620      	mov	r0, r4
   d809e:	4629      	mov	r1, r5
   d80a0:	f000 fdea 	bl	d8c78 <__aeabi_dmul>
   d80a4:	4602      	mov	r2, r0
   d80a6:	460b      	mov	r3, r1
   d80a8:	4630      	mov	r0, r6
   d80aa:	4639      	mov	r1, r7
   d80ac:	f000 fc32 	bl	d8914 <__adddf3>
   d80b0:	4606      	mov	r6, r0
   d80b2:	460f      	mov	r7, r1
   d80b4:	4602      	mov	r2, r0
   d80b6:	460b      	mov	r3, r1
   d80b8:	4640      	mov	r0, r8
   d80ba:	4649      	mov	r1, r9
   d80bc:	f000 fc2a 	bl	d8914 <__adddf3>
   d80c0:	4642      	mov	r2, r8
   d80c2:	464b      	mov	r3, r9
   d80c4:	4604      	mov	r4, r0
   d80c6:	460d      	mov	r5, r1
   d80c8:	f000 fc22 	bl	d8910 <__aeabi_dsub>
   d80cc:	4602      	mov	r2, r0
   d80ce:	460b      	mov	r3, r1
   d80d0:	4630      	mov	r0, r6
   d80d2:	4639      	mov	r1, r7
   d80d4:	f000 fc1c 	bl	d8910 <__aeabi_dsub>
   d80d8:	4622      	mov	r2, r4
   d80da:	4680      	mov	r8, r0
   d80dc:	4689      	mov	r9, r1
   d80de:	462b      	mov	r3, r5
   d80e0:	4620      	mov	r0, r4
   d80e2:	4629      	mov	r1, r5
   d80e4:	f000 fdc8 	bl	d8c78 <__aeabi_dmul>
   d80e8:	a377      	add	r3, pc, #476	; (adr r3, d82c8 <__ieee754_pow+0x8f8>)
   d80ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80ee:	4606      	mov	r6, r0
   d80f0:	460f      	mov	r7, r1
   d80f2:	f000 fdc1 	bl	d8c78 <__aeabi_dmul>
   d80f6:	a376      	add	r3, pc, #472	; (adr r3, d82d0 <__ieee754_pow+0x900>)
   d80f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80fc:	f000 fc08 	bl	d8910 <__aeabi_dsub>
   d8100:	4632      	mov	r2, r6
   d8102:	463b      	mov	r3, r7
   d8104:	f000 fdb8 	bl	d8c78 <__aeabi_dmul>
   d8108:	a373      	add	r3, pc, #460	; (adr r3, d82d8 <__ieee754_pow+0x908>)
   d810a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d810e:	f000 fc01 	bl	d8914 <__adddf3>
   d8112:	4632      	mov	r2, r6
   d8114:	463b      	mov	r3, r7
   d8116:	f000 fdaf 	bl	d8c78 <__aeabi_dmul>
   d811a:	a371      	add	r3, pc, #452	; (adr r3, d82e0 <__ieee754_pow+0x910>)
   d811c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8120:	f000 fbf6 	bl	d8910 <__aeabi_dsub>
   d8124:	4632      	mov	r2, r6
   d8126:	463b      	mov	r3, r7
   d8128:	f000 fda6 	bl	d8c78 <__aeabi_dmul>
   d812c:	a36e      	add	r3, pc, #440	; (adr r3, d82e8 <__ieee754_pow+0x918>)
   d812e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8132:	f000 fbef 	bl	d8914 <__adddf3>
   d8136:	4632      	mov	r2, r6
   d8138:	463b      	mov	r3, r7
   d813a:	f000 fd9d 	bl	d8c78 <__aeabi_dmul>
   d813e:	4602      	mov	r2, r0
   d8140:	460b      	mov	r3, r1
   d8142:	4620      	mov	r0, r4
   d8144:	4629      	mov	r1, r5
   d8146:	f000 fbe3 	bl	d8910 <__aeabi_dsub>
   d814a:	4606      	mov	r6, r0
   d814c:	460f      	mov	r7, r1
   d814e:	4602      	mov	r2, r0
   d8150:	460b      	mov	r3, r1
   d8152:	4620      	mov	r0, r4
   d8154:	4629      	mov	r1, r5
   d8156:	f000 fd8f 	bl	d8c78 <__aeabi_dmul>
   d815a:	2200      	movs	r2, #0
   d815c:	e9cd 0100 	strd	r0, r1, [sp]
   d8160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8164:	4630      	mov	r0, r6
   d8166:	4639      	mov	r1, r7
   d8168:	f000 fbd2 	bl	d8910 <__aeabi_dsub>
   d816c:	4602      	mov	r2, r0
   d816e:	460b      	mov	r3, r1
   d8170:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8174:	f000 feaa 	bl	d8ecc <__aeabi_ddiv>
   d8178:	4642      	mov	r2, r8
   d817a:	4606      	mov	r6, r0
   d817c:	460f      	mov	r7, r1
   d817e:	464b      	mov	r3, r9
   d8180:	4620      	mov	r0, r4
   d8182:	4629      	mov	r1, r5
   d8184:	f000 fd78 	bl	d8c78 <__aeabi_dmul>
   d8188:	4642      	mov	r2, r8
   d818a:	464b      	mov	r3, r9
   d818c:	f000 fbc2 	bl	d8914 <__adddf3>
   d8190:	4602      	mov	r2, r0
   d8192:	460b      	mov	r3, r1
   d8194:	4630      	mov	r0, r6
   d8196:	4639      	mov	r1, r7
   d8198:	f000 fbba 	bl	d8910 <__aeabi_dsub>
   d819c:	4622      	mov	r2, r4
   d819e:	462b      	mov	r3, r5
   d81a0:	f000 fbb6 	bl	d8910 <__aeabi_dsub>
   d81a4:	4602      	mov	r2, r0
   d81a6:	460b      	mov	r3, r1
   d81a8:	2000      	movs	r0, #0
   d81aa:	4959      	ldr	r1, [pc, #356]	; (d8310 <__ieee754_pow+0x940>)
   d81ac:	f000 fbb0 	bl	d8910 <__aeabi_dsub>
   d81b0:	448a      	add	sl, r1
   d81b2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d81b6:	4602      	mov	r2, r0
   d81b8:	460b      	mov	r3, r1
   d81ba:	f2c0 815b 	blt.w	d8474 <__ieee754_pow+0xaa4>
   d81be:	4651      	mov	r1, sl
   d81c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d81c4:	f000 fd58 	bl	d8c78 <__aeabi_dmul>
   d81c8:	ec41 0b10 	vmov	d0, r0, r1
   d81cc:	e449      	b.n	d7a62 <__ieee754_pow+0x92>
   d81ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d81d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d81d6:	ea54 030b 	orrs.w	r3, r4, fp
   d81da:	f000 8137 	beq.w	d844c <__ieee754_pow+0xa7c>
   d81de:	f1bb 0f01 	cmp.w	fp, #1
   d81e2:	f47f ac80 	bne.w	d7ae6 <__ieee754_pow+0x116>
   d81e6:	4602      	mov	r2, r0
   d81e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d81ec:	ec43 2b10 	vmov	d0, r2, r3
   d81f0:	e437      	b.n	d7a62 <__ieee754_pow+0x92>
   d81f2:	4632      	mov	r2, r6
   d81f4:	463b      	mov	r3, r7
   d81f6:	4630      	mov	r0, r6
   d81f8:	4639      	mov	r1, r7
   d81fa:	f000 fd3d 	bl	d8c78 <__aeabi_dmul>
   d81fe:	ec41 0b10 	vmov	d0, r0, r1
   d8202:	e42e      	b.n	d7a62 <__ieee754_pow+0x92>
   d8204:	4b43      	ldr	r3, [pc, #268]	; (d8314 <__ieee754_pow+0x944>)
   d8206:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d820a:	4598      	cmp	r8, r3
   d820c:	f340 8115 	ble.w	d843a <__ieee754_pow+0xa6a>
   d8210:	4b41      	ldr	r3, [pc, #260]	; (d8318 <__ieee754_pow+0x948>)
   d8212:	440b      	add	r3, r1
   d8214:	4303      	orrs	r3, r0
   d8216:	d10c      	bne.n	d8232 <__ieee754_pow+0x862>
   d8218:	4632      	mov	r2, r6
   d821a:	463b      	mov	r3, r7
   d821c:	f000 fb78 	bl	d8910 <__aeabi_dsub>
   d8220:	4602      	mov	r2, r0
   d8222:	460b      	mov	r3, r1
   d8224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8228:	f000 ffa2 	bl	d9170 <__aeabi_dcmple>
   d822c:	2800      	cmp	r0, #0
   d822e:	f43f aee6 	beq.w	d7ffe <__ieee754_pow+0x62e>
   d8232:	a32f      	add	r3, pc, #188	; (adr r3, d82f0 <__ieee754_pow+0x920>)
   d8234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d823c:	f000 fd1c 	bl	d8c78 <__aeabi_dmul>
   d8240:	a32b      	add	r3, pc, #172	; (adr r3, d82f0 <__ieee754_pow+0x920>)
   d8242:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8246:	f000 fd17 	bl	d8c78 <__aeabi_dmul>
   d824a:	ec41 0b10 	vmov	d0, r0, r1
   d824e:	e408      	b.n	d7a62 <__ieee754_pow+0x92>
   d8250:	ed9f 7b29 	vldr	d7, [pc, #164]	; d82f8 <__ieee754_pow+0x928>
   d8254:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8258:	e676      	b.n	d7f48 <__ieee754_pow+0x578>
   d825a:	f1b9 0f00 	cmp.w	r9, #0
   d825e:	f6bf ac8e 	bge.w	d7b7e <__ieee754_pow+0x1ae>
   d8262:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8266:	ee00 3a10 	vmov	s0, r3
   d826a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d826e:	ee00 3a90 	vmov	s1, r3
   d8272:	f7ff bbf6 	b.w	d7a62 <__ieee754_pow+0x92>
   d8276:	4602      	mov	r2, r0
   d8278:	460b      	mov	r3, r1
   d827a:	2000      	movs	r0, #0
   d827c:	4924      	ldr	r1, [pc, #144]	; (d8310 <__ieee754_pow+0x940>)
   d827e:	f000 fe25 	bl	d8ecc <__aeabi_ddiv>
   d8282:	e42d      	b.n	d7ae0 <__ieee754_pow+0x110>
   d8284:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d8300 <__ieee754_pow+0x930>
   d8288:	ed8d 7b08 	vstr	d7, [sp, #32]
   d828c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8290:	ed9f 7b03 	vldr	d7, [pc, #12]	; d82a0 <__ieee754_pow+0x8d0>
   d8294:	f04f 0800 	mov.w	r8, #0
   d8298:	ed8d 7b06 	vstr	d7, [sp, #24]
   d829c:	e4be      	b.n	d7c1c <__ieee754_pow+0x24c>
   d829e:	bf00      	nop
   d82a0:	00000000 	.word	0x00000000
   d82a4:	3ff00000 	.word	0x3ff00000
   d82a8:	652b82fe 	.word	0x652b82fe
   d82ac:	3c971547 	.word	0x3c971547
   d82b0:	00000000 	.word	0x00000000
   d82b4:	3fe62e43 	.word	0x3fe62e43
   d82b8:	fefa39ef 	.word	0xfefa39ef
   d82bc:	3fe62e42 	.word	0x3fe62e42
   d82c0:	0ca86c39 	.word	0x0ca86c39
   d82c4:	be205c61 	.word	0xbe205c61
   d82c8:	72bea4d0 	.word	0x72bea4d0
   d82cc:	3e663769 	.word	0x3e663769
   d82d0:	c5d26bf1 	.word	0xc5d26bf1
   d82d4:	3ebbbd41 	.word	0x3ebbbd41
   d82d8:	af25de2c 	.word	0xaf25de2c
   d82dc:	3f11566a 	.word	0x3f11566a
   d82e0:	16bebd93 	.word	0x16bebd93
   d82e4:	3f66c16c 	.word	0x3f66c16c
   d82e8:	5555553e 	.word	0x5555553e
   d82ec:	3fc55555 	.word	0x3fc55555
   d82f0:	c2f8f359 	.word	0xc2f8f359
   d82f4:	01a56e1f 	.word	0x01a56e1f
   d82f8:	00000000 	.word	0x00000000
   d82fc:	bff00000 	.word	0xbff00000
	...
   d8308:	408fffff 	.word	0x408fffff
   d830c:	000fffff 	.word	0x000fffff
   d8310:	3ff00000 	.word	0x3ff00000
   d8314:	4090cbff 	.word	0x4090cbff
   d8318:	3f6f3400 	.word	0x3f6f3400
   d831c:	4b6c      	ldr	r3, [pc, #432]	; (d84d0 <__ieee754_pow+0xb00>)
   d831e:	429c      	cmp	r4, r3
   d8320:	f77f ac2a 	ble.w	d7b78 <__ieee754_pow+0x1a8>
   d8324:	4b6b      	ldr	r3, [pc, #428]	; (d84d4 <__ieee754_pow+0xb04>)
   d8326:	429c      	cmp	r4, r3
   d8328:	f73f abc3 	bgt.w	d7ab2 <__ieee754_pow+0xe2>
   d832c:	2200      	movs	r2, #0
   d832e:	4b69      	ldr	r3, [pc, #420]	; (d84d4 <__ieee754_pow+0xb04>)
   d8330:	f000 faee 	bl	d8910 <__aeabi_dsub>
   d8334:	a356      	add	r3, pc, #344	; (adr r3, d8490 <__ieee754_pow+0xac0>)
   d8336:	e9d3 2300 	ldrd	r2, r3, [r3]
   d833a:	4604      	mov	r4, r0
   d833c:	460d      	mov	r5, r1
   d833e:	f000 fc9b 	bl	d8c78 <__aeabi_dmul>
   d8342:	a355      	add	r3, pc, #340	; (adr r3, d8498 <__ieee754_pow+0xac8>)
   d8344:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8348:	4680      	mov	r8, r0
   d834a:	4689      	mov	r9, r1
   d834c:	4620      	mov	r0, r4
   d834e:	4629      	mov	r1, r5
   d8350:	f000 fc92 	bl	d8c78 <__aeabi_dmul>
   d8354:	2200      	movs	r2, #0
   d8356:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d835a:	4b5f      	ldr	r3, [pc, #380]	; (d84d8 <__ieee754_pow+0xb08>)
   d835c:	4620      	mov	r0, r4
   d835e:	4629      	mov	r1, r5
   d8360:	f000 fc8a 	bl	d8c78 <__aeabi_dmul>
   d8364:	4602      	mov	r2, r0
   d8366:	460b      	mov	r3, r1
   d8368:	a14d      	add	r1, pc, #308	; (adr r1, d84a0 <__ieee754_pow+0xad0>)
   d836a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d836e:	f000 facf 	bl	d8910 <__aeabi_dsub>
   d8372:	4622      	mov	r2, r4
   d8374:	462b      	mov	r3, r5
   d8376:	f000 fc7f 	bl	d8c78 <__aeabi_dmul>
   d837a:	4602      	mov	r2, r0
   d837c:	460b      	mov	r3, r1
   d837e:	2000      	movs	r0, #0
   d8380:	4956      	ldr	r1, [pc, #344]	; (d84dc <__ieee754_pow+0xb0c>)
   d8382:	f000 fac5 	bl	d8910 <__aeabi_dsub>
   d8386:	4622      	mov	r2, r4
   d8388:	462b      	mov	r3, r5
   d838a:	4606      	mov	r6, r0
   d838c:	460f      	mov	r7, r1
   d838e:	4620      	mov	r0, r4
   d8390:	4629      	mov	r1, r5
   d8392:	f000 fc71 	bl	d8c78 <__aeabi_dmul>
   d8396:	4602      	mov	r2, r0
   d8398:	460b      	mov	r3, r1
   d839a:	4630      	mov	r0, r6
   d839c:	4639      	mov	r1, r7
   d839e:	f000 fc6b 	bl	d8c78 <__aeabi_dmul>
   d83a2:	a341      	add	r3, pc, #260	; (adr r3, d84a8 <__ieee754_pow+0xad8>)
   d83a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83a8:	f000 fc66 	bl	d8c78 <__aeabi_dmul>
   d83ac:	4602      	mov	r2, r0
   d83ae:	460b      	mov	r3, r1
   d83b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d83b4:	f000 faac 	bl	d8910 <__aeabi_dsub>
   d83b8:	4602      	mov	r2, r0
   d83ba:	460b      	mov	r3, r1
   d83bc:	4604      	mov	r4, r0
   d83be:	460d      	mov	r5, r1
   d83c0:	4640      	mov	r0, r8
   d83c2:	4649      	mov	r1, r9
   d83c4:	f000 faa6 	bl	d8914 <__adddf3>
   d83c8:	4642      	mov	r2, r8
   d83ca:	464b      	mov	r3, r9
   d83cc:	2000      	movs	r0, #0
   d83ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d83d2:	f000 fa9d 	bl	d8910 <__aeabi_dsub>
   d83d6:	4602      	mov	r2, r0
   d83d8:	460b      	mov	r3, r1
   d83da:	4620      	mov	r0, r4
   d83dc:	4629      	mov	r1, r5
   d83de:	f000 fa97 	bl	d8910 <__aeabi_dsub>
   d83e2:	4680      	mov	r8, r0
   d83e4:	4689      	mov	r9, r1
   d83e6:	e5a5      	b.n	d7f34 <__ieee754_pow+0x564>
   d83e8:	4632      	mov	r2, r6
   d83ea:	463b      	mov	r3, r7
   d83ec:	2000      	movs	r0, #0
   d83ee:	4939      	ldr	r1, [pc, #228]	; (d84d4 <__ieee754_pow+0xb04>)
   d83f0:	f000 fd6c 	bl	d8ecc <__aeabi_ddiv>
   d83f4:	ec41 0b10 	vmov	d0, r0, r1
   d83f8:	f7ff bb33 	b.w	d7a62 <__ieee754_pow+0x92>
   d83fc:	a32c      	add	r3, pc, #176	; (adr r3, d84b0 <__ieee754_pow+0xae0>)
   d83fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8406:	f000 fc37 	bl	d8c78 <__aeabi_dmul>
   d840a:	a329      	add	r3, pc, #164	; (adr r3, d84b0 <__ieee754_pow+0xae0>)
   d840c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8410:	f000 fc32 	bl	d8c78 <__aeabi_dmul>
   d8414:	ec41 0b10 	vmov	d0, r0, r1
   d8418:	f7ff bb23 	b.w	d7a62 <__ieee754_pow+0x92>
   d841c:	f1be 0f00 	cmp.w	lr, #0
   d8420:	f47f ab2a 	bne.w	d7a78 <__ieee754_pow+0xa8>
   d8424:	f1c3 0314 	rsb	r3, r3, #20
   d8428:	fa48 f203 	asr.w	r2, r8, r3
   d842c:	fa02 f303 	lsl.w	r3, r2, r3
   d8430:	4598      	cmp	r8, r3
   d8432:	d027      	beq.n	d8484 <__ieee754_pow+0xab4>
   d8434:	46f3      	mov	fp, lr
   d8436:	f7ff baf7 	b.w	d7a28 <__ieee754_pow+0x58>
   d843a:	4b28      	ldr	r3, [pc, #160]	; (d84dc <__ieee754_pow+0xb0c>)
   d843c:	4598      	cmp	r8, r3
   d843e:	f73f adde 	bgt.w	d7ffe <__ieee754_pow+0x62e>
   d8442:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8446:	469a      	mov	sl, r3
   d8448:	469b      	mov	fp, r3
   d844a:	e607      	b.n	d805c <__ieee754_pow+0x68c>
   d844c:	4602      	mov	r2, r0
   d844e:	460b      	mov	r3, r1
   d8450:	f7ff bb89 	b.w	d7b66 <__ieee754_pow+0x196>
   d8454:	ed9f 7b18 	vldr	d7, [pc, #96]	; d84b8 <__ieee754_pow+0xae8>
   d8458:	ed8d 7b08 	vstr	d7, [sp, #32]
   d845c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d84c0 <__ieee754_pow+0xaf0>
   d8460:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8464:	ed9f 7b18 	vldr	d7, [pc, #96]	; d84c8 <__ieee754_pow+0xaf8>
   d8468:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d846c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8470:	f7ff bbd4 	b.w	d7c1c <__ieee754_pow+0x24c>
   d8474:	4658      	mov	r0, fp
   d8476:	ec43 2b10 	vmov	d0, r2, r3
   d847a:	f000 f9b1 	bl	d87e0 <scalbn>
   d847e:	ec51 0b10 	vmov	r0, r1, d0
   d8482:	e69d      	b.n	d81c0 <__ieee754_pow+0x7f0>
   d8484:	f002 0201 	and.w	r2, r2, #1
   d8488:	f1c2 0b02 	rsb	fp, r2, #2
   d848c:	f7ff bacc 	b.w	d7a28 <__ieee754_pow+0x58>
   d8490:	60000000 	.word	0x60000000
   d8494:	3ff71547 	.word	0x3ff71547
   d8498:	f85ddf44 	.word	0xf85ddf44
   d849c:	3e54ae0b 	.word	0x3e54ae0b
   d84a0:	55555555 	.word	0x55555555
   d84a4:	3fd55555 	.word	0x3fd55555
   d84a8:	652b82fe 	.word	0x652b82fe
   d84ac:	3ff71547 	.word	0x3ff71547
   d84b0:	8800759c 	.word	0x8800759c
   d84b4:	7e37e43c 	.word	0x7e37e43c
   d84b8:	40000000 	.word	0x40000000
   d84bc:	3fe2b803 	.word	0x3fe2b803
   d84c0:	43cfd006 	.word	0x43cfd006
   d84c4:	3e4cfdeb 	.word	0x3e4cfdeb
   d84c8:	00000000 	.word	0x00000000
   d84cc:	3ff80000 	.word	0x3ff80000
   d84d0:	3feffffe 	.word	0x3feffffe
   d84d4:	3ff00000 	.word	0x3ff00000
   d84d8:	3fd00000 	.word	0x3fd00000
   d84dc:	3fe00000 	.word	0x3fe00000

000d84e0 <__ieee754_sqrt>:
   d84e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84e4:	4965      	ldr	r1, [pc, #404]	; (d867c <__ieee754_sqrt+0x19c>)
   d84e6:	ec55 4b10 	vmov	r4, r5, d0
   d84ea:	460e      	mov	r6, r1
   d84ec:	4029      	ands	r1, r5
   d84ee:	42b1      	cmp	r1, r6
   d84f0:	f000 8097 	beq.w	d8622 <__ieee754_sqrt+0x142>
   d84f4:	2d00      	cmp	r5, #0
   d84f6:	462b      	mov	r3, r5
   d84f8:	ee10 2a10 	vmov	r2, s0
   d84fc:	dd74      	ble.n	d85e8 <__ieee754_sqrt+0x108>
   d84fe:	152f      	asrs	r7, r5, #20
   d8500:	d07f      	beq.n	d8602 <__ieee754_sqrt+0x122>
   d8502:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d8506:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d850a:	07f9      	lsls	r1, r7, #31
   d850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8510:	d465      	bmi.n	d85de <__ieee754_sqrt+0xfe>
   d8512:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d8516:	2600      	movs	r6, #0
   d8518:	440b      	add	r3, r1
   d851a:	107f      	asrs	r7, r7, #1
   d851c:	0052      	lsls	r2, r2, #1
   d851e:	46b6      	mov	lr, r6
   d8520:	2016      	movs	r0, #22
   d8522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d8526:	eb0e 0401 	add.w	r4, lr, r1
   d852a:	429c      	cmp	r4, r3
   d852c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8530:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8534:	dc03      	bgt.n	d853e <__ieee754_sqrt+0x5e>
   d8536:	1b1b      	subs	r3, r3, r4
   d8538:	eb04 0e01 	add.w	lr, r4, r1
   d853c:	440e      	add	r6, r1
   d853e:	3801      	subs	r0, #1
   d8540:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8544:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8548:	d1ed      	bne.n	d8526 <__ieee754_sqrt+0x46>
   d854a:	4684      	mov	ip, r0
   d854c:	2420      	movs	r4, #32
   d854e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8552:	e009      	b.n	d8568 <__ieee754_sqrt+0x88>
   d8554:	d020      	beq.n	d8598 <__ieee754_sqrt+0xb8>
   d8556:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d855a:	3c01      	subs	r4, #1
   d855c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8560:	442b      	add	r3, r5
   d8562:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8566:	d020      	beq.n	d85aa <__ieee754_sqrt+0xca>
   d8568:	459e      	cmp	lr, r3
   d856a:	eb01 050c 	add.w	r5, r1, ip
   d856e:	daf1      	bge.n	d8554 <__ieee754_sqrt+0x74>
   d8570:	2d00      	cmp	r5, #0
   d8572:	eb05 0c01 	add.w	ip, r5, r1
   d8576:	db09      	blt.n	d858c <__ieee754_sqrt+0xac>
   d8578:	46f0      	mov	r8, lr
   d857a:	4295      	cmp	r5, r2
   d857c:	ebce 0303 	rsb	r3, lr, r3
   d8580:	d900      	bls.n	d8584 <__ieee754_sqrt+0xa4>
   d8582:	3b01      	subs	r3, #1
   d8584:	1b52      	subs	r2, r2, r5
   d8586:	4408      	add	r0, r1
   d8588:	46c6      	mov	lr, r8
   d858a:	e7e4      	b.n	d8556 <__ieee754_sqrt+0x76>
   d858c:	f1bc 0f00 	cmp.w	ip, #0
   d8590:	dbf2      	blt.n	d8578 <__ieee754_sqrt+0x98>
   d8592:	f10e 0801 	add.w	r8, lr, #1
   d8596:	e7f0      	b.n	d857a <__ieee754_sqrt+0x9a>
   d8598:	4295      	cmp	r5, r2
   d859a:	d81e      	bhi.n	d85da <__ieee754_sqrt+0xfa>
   d859c:	2d00      	cmp	r5, #0
   d859e:	eb05 0c01 	add.w	ip, r5, r1
   d85a2:	db50      	blt.n	d8646 <__ieee754_sqrt+0x166>
   d85a4:	4698      	mov	r8, r3
   d85a6:	2300      	movs	r3, #0
   d85a8:	e7ec      	b.n	d8584 <__ieee754_sqrt+0xa4>
   d85aa:	4313      	orrs	r3, r2
   d85ac:	d004      	beq.n	d85b8 <__ieee754_sqrt+0xd8>
   d85ae:	1c42      	adds	r2, r0, #1
   d85b0:	d04d      	beq.n	d864e <__ieee754_sqrt+0x16e>
   d85b2:	f000 0301 	and.w	r3, r0, #1
   d85b6:	4418      	add	r0, r3
   d85b8:	0840      	lsrs	r0, r0, #1
   d85ba:	1071      	asrs	r1, r6, #1
   d85bc:	07f3      	lsls	r3, r6, #31
   d85be:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d85c2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d85c6:	bf48      	it	mi
   d85c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d85cc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d85d0:	4602      	mov	r2, r0
   d85d2:	ec43 2b10 	vmov	d0, r2, r3
   d85d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d85da:	4673      	mov	r3, lr
   d85dc:	e7bb      	b.n	d8556 <__ieee754_sqrt+0x76>
   d85de:	005b      	lsls	r3, r3, #1
   d85e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d85e4:	0052      	lsls	r2, r2, #1
   d85e6:	e794      	b.n	d8512 <__ieee754_sqrt+0x32>
   d85e8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d85ec:	4321      	orrs	r1, r4
   d85ee:	d028      	beq.n	d8642 <__ieee754_sqrt+0x162>
   d85f0:	bbad      	cbnz	r5, d865e <__ieee754_sqrt+0x17e>
   d85f2:	462f      	mov	r7, r5
   d85f4:	0ad3      	lsrs	r3, r2, #11
   d85f6:	3f15      	subs	r7, #21
   d85f8:	0552      	lsls	r2, r2, #21
   d85fa:	2b00      	cmp	r3, #0
   d85fc:	d0fa      	beq.n	d85f4 <__ieee754_sqrt+0x114>
   d85fe:	02dd      	lsls	r5, r3, #11
   d8600:	d428      	bmi.n	d8654 <__ieee754_sqrt+0x174>
   d8602:	2100      	movs	r1, #0
   d8604:	e000      	b.n	d8608 <__ieee754_sqrt+0x128>
   d8606:	4601      	mov	r1, r0
   d8608:	005b      	lsls	r3, r3, #1
   d860a:	02dc      	lsls	r4, r3, #11
   d860c:	f101 0001 	add.w	r0, r1, #1
   d8610:	d5f9      	bpl.n	d8606 <__ieee754_sqrt+0x126>
   d8612:	f1c0 0420 	rsb	r4, r0, #32
   d8616:	fa22 f404 	lsr.w	r4, r2, r4
   d861a:	4323      	orrs	r3, r4
   d861c:	1a7f      	subs	r7, r7, r1
   d861e:	4082      	lsls	r2, r0
   d8620:	e76f      	b.n	d8502 <__ieee754_sqrt+0x22>
   d8622:	ee10 2a10 	vmov	r2, s0
   d8626:	462b      	mov	r3, r5
   d8628:	ee10 0a10 	vmov	r0, s0
   d862c:	4629      	mov	r1, r5
   d862e:	f000 fb23 	bl	d8c78 <__aeabi_dmul>
   d8632:	4622      	mov	r2, r4
   d8634:	462b      	mov	r3, r5
   d8636:	f000 f96d 	bl	d8914 <__adddf3>
   d863a:	ec41 0b10 	vmov	d0, r0, r1
   d863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8646:	f1bc 0f00 	cmp.w	ip, #0
   d864a:	daa2      	bge.n	d8592 <__ieee754_sqrt+0xb2>
   d864c:	e7aa      	b.n	d85a4 <__ieee754_sqrt+0xc4>
   d864e:	3601      	adds	r6, #1
   d8650:	4620      	mov	r0, r4
   d8652:	e7b2      	b.n	d85ba <__ieee754_sqrt+0xda>
   d8654:	2420      	movs	r4, #32
   d8656:	f04f 31ff 	mov.w	r1, #4294967295
   d865a:	2000      	movs	r0, #0
   d865c:	e7db      	b.n	d8616 <__ieee754_sqrt+0x136>
   d865e:	ee10 2a10 	vmov	r2, s0
   d8662:	462b      	mov	r3, r5
   d8664:	4620      	mov	r0, r4
   d8666:	4629      	mov	r1, r5
   d8668:	f000 f952 	bl	d8910 <__aeabi_dsub>
   d866c:	4602      	mov	r2, r0
   d866e:	460b      	mov	r3, r1
   d8670:	f000 fc2c 	bl	d8ecc <__aeabi_ddiv>
   d8674:	ec41 0b10 	vmov	d0, r0, r1
   d8678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d867c:	7ff00000 	.word	0x7ff00000

000d8680 <fabs>:
   d8680:	ec53 2b10 	vmov	r2, r3, d0
   d8684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8688:	ec43 2b10 	vmov	d0, r2, r3
   d868c:	4770      	bx	lr
   d868e:	bf00      	nop

000d8690 <finite>:
   d8690:	ee10 3a90 	vmov	r3, s1
   d8694:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8698:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d869c:	0fc0      	lsrs	r0, r0, #31
   d869e:	4770      	bx	lr

000d86a0 <matherr>:
   d86a0:	2000      	movs	r0, #0
   d86a2:	4770      	bx	lr
   d86a4:	0000      	movs	r0, r0
	...

000d86a8 <nan>:
   d86a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d86b0 <nan+0x8>
   d86ac:	4770      	bx	lr
   d86ae:	bf00      	nop
   d86b0:	00000000 	.word	0x00000000
   d86b4:	7ff80000 	.word	0x7ff80000

000d86b8 <rint>:
   d86b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d86ba:	ec53 2b10 	vmov	r2, r3, d0
   d86be:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d86c2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d86c6:	2813      	cmp	r0, #19
   d86c8:	b083      	sub	sp, #12
   d86ca:	4619      	mov	r1, r3
   d86cc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d86d0:	ee10 5a10 	vmov	r5, s0
   d86d4:	dc2f      	bgt.n	d8736 <rint+0x7e>
   d86d6:	2800      	cmp	r0, #0
   d86d8:	db49      	blt.n	d876e <rint+0xb6>
   d86da:	4e3f      	ldr	r6, [pc, #252]	; (d87d8 <rint+0x120>)
   d86dc:	4106      	asrs	r6, r0
   d86de:	ea03 0706 	and.w	r7, r3, r6
   d86e2:	4317      	orrs	r7, r2
   d86e4:	d02c      	beq.n	d8740 <rint+0x88>
   d86e6:	0876      	lsrs	r6, r6, #1
   d86e8:	4033      	ands	r3, r6
   d86ea:	431d      	orrs	r5, r3
   d86ec:	d00c      	beq.n	d8708 <rint+0x50>
   d86ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d86f2:	2813      	cmp	r0, #19
   d86f4:	ea21 0606 	bic.w	r6, r1, r6
   d86f8:	fa43 f100 	asr.w	r1, r3, r0
   d86fc:	ea41 0106 	orr.w	r1, r1, r6
   d8700:	bf0c      	ite	eq
   d8702:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8706:	2500      	movne	r5, #0
   d8708:	4834      	ldr	r0, [pc, #208]	; (d87dc <rint+0x124>)
   d870a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d870e:	462a      	mov	r2, r5
   d8710:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8714:	4610      	mov	r0, r2
   d8716:	462b      	mov	r3, r5
   d8718:	4622      	mov	r2, r4
   d871a:	f000 f8fb 	bl	d8914 <__adddf3>
   d871e:	e9cd 0100 	strd	r0, r1, [sp]
   d8722:	4622      	mov	r2, r4
   d8724:	462b      	mov	r3, r5
   d8726:	e9dd 0100 	ldrd	r0, r1, [sp]
   d872a:	f000 f8f1 	bl	d8910 <__aeabi_dsub>
   d872e:	ec41 0b10 	vmov	d0, r0, r1
   d8732:	b003      	add	sp, #12
   d8734:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8736:	2833      	cmp	r0, #51	; 0x33
   d8738:	dd06      	ble.n	d8748 <rint+0x90>
   d873a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d873e:	d042      	beq.n	d87c6 <rint+0x10e>
   d8740:	ec43 2b10 	vmov	d0, r2, r3
   d8744:	b003      	add	sp, #12
   d8746:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8748:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d874c:	f04f 30ff 	mov.w	r0, #4294967295
   d8750:	40f0      	lsrs	r0, r6
   d8752:	4202      	tst	r2, r0
   d8754:	d0f4      	beq.n	d8740 <rint+0x88>
   d8756:	0840      	lsrs	r0, r0, #1
   d8758:	4202      	tst	r2, r0
   d875a:	d0d5      	beq.n	d8708 <rint+0x50>
   d875c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8760:	ea25 0000 	bic.w	r0, r5, r0
   d8764:	fa43 f606 	asr.w	r6, r3, r6
   d8768:	ea46 0500 	orr.w	r5, r6, r0
   d876c:	e7cc      	b.n	d8708 <rint+0x50>
   d876e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8772:	4310      	orrs	r0, r2
   d8774:	ee10 7a10 	vmov	r7, s0
   d8778:	d0e2      	beq.n	d8740 <rint+0x88>
   d877a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d877e:	4307      	orrs	r7, r0
   d8780:	4278      	negs	r0, r7
   d8782:	4307      	orrs	r7, r0
   d8784:	4815      	ldr	r0, [pc, #84]	; (d87dc <rint+0x124>)
   d8786:	0c59      	lsrs	r1, r3, #17
   d8788:	0b3f      	lsrs	r7, r7, #12
   d878a:	0449      	lsls	r1, r1, #17
   d878c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8790:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8794:	ea47 0301 	orr.w	r3, r7, r1
   d8798:	e9d0 6700 	ldrd	r6, r7, [r0]
   d879c:	4619      	mov	r1, r3
   d879e:	4610      	mov	r0, r2
   d87a0:	463b      	mov	r3, r7
   d87a2:	4632      	mov	r2, r6
   d87a4:	f000 f8b6 	bl	d8914 <__adddf3>
   d87a8:	e9cd 0100 	strd	r0, r1, [sp]
   d87ac:	463b      	mov	r3, r7
   d87ae:	4632      	mov	r2, r6
   d87b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d87b4:	f000 f8ac 	bl	d8910 <__aeabi_dsub>
   d87b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d87bc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d87c0:	ec41 0b10 	vmov	d0, r0, r1
   d87c4:	e7be      	b.n	d8744 <rint+0x8c>
   d87c6:	ee10 0a10 	vmov	r0, s0
   d87ca:	4619      	mov	r1, r3
   d87cc:	f000 f8a2 	bl	d8914 <__adddf3>
   d87d0:	ec41 0b10 	vmov	d0, r0, r1
   d87d4:	e7b6      	b.n	d8744 <rint+0x8c>
   d87d6:	bf00      	nop
   d87d8:	000fffff 	.word	0x000fffff
   d87dc:	000d9d70 	.word	0x000d9d70

000d87e0 <scalbn>:
   d87e0:	ec53 2b10 	vmov	r2, r3, d0
   d87e4:	b570      	push	{r4, r5, r6, lr}
   d87e6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d87ea:	4619      	mov	r1, r3
   d87ec:	4605      	mov	r5, r0
   d87ee:	bb14      	cbnz	r4, d8836 <scalbn+0x56>
   d87f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d87f4:	4311      	orrs	r1, r2
   d87f6:	d02a      	beq.n	d884e <scalbn+0x6e>
   d87f8:	4619      	mov	r1, r3
   d87fa:	2200      	movs	r2, #0
   d87fc:	4b38      	ldr	r3, [pc, #224]	; (d88e0 <scalbn+0x100>)
   d87fe:	4e39      	ldr	r6, [pc, #228]	; (d88e4 <scalbn+0x104>)
   d8800:	ee10 0a10 	vmov	r0, s0
   d8804:	f000 fa38 	bl	d8c78 <__aeabi_dmul>
   d8808:	42b5      	cmp	r5, r6
   d880a:	4602      	mov	r2, r0
   d880c:	460b      	mov	r3, r1
   d880e:	db1f      	blt.n	d8850 <scalbn+0x70>
   d8810:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d8814:	3c36      	subs	r4, #54	; 0x36
   d8816:	442c      	add	r4, r5
   d8818:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d881c:	4284      	cmp	r4, r0
   d881e:	dc1f      	bgt.n	d8860 <scalbn+0x80>
   d8820:	2c00      	cmp	r4, #0
   d8822:	dd2d      	ble.n	d8880 <scalbn+0xa0>
   d8824:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8828:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d882c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8830:	ec43 2b10 	vmov	d0, r2, r3
   d8834:	bd70      	pop	{r4, r5, r6, pc}
   d8836:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d883a:	4284      	cmp	r4, r0
   d883c:	d1eb      	bne.n	d8816 <scalbn+0x36>
   d883e:	ee10 0a10 	vmov	r0, s0
   d8842:	4619      	mov	r1, r3
   d8844:	f000 f866 	bl	d8914 <__adddf3>
   d8848:	ec41 0b10 	vmov	d0, r0, r1
   d884c:	bd70      	pop	{r4, r5, r6, pc}
   d884e:	bd70      	pop	{r4, r5, r6, pc}
   d8850:	a31f      	add	r3, pc, #124	; (adr r3, d88d0 <scalbn+0xf0>)
   d8852:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8856:	f000 fa0f 	bl	d8c78 <__aeabi_dmul>
   d885a:	ec41 0b10 	vmov	d0, r0, r1
   d885e:	bd70      	pop	{r4, r5, r6, pc}
   d8860:	ec43 2b11 	vmov	d1, r2, r3
   d8864:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d88d8 <scalbn+0xf8>
   d8868:	f000 f840 	bl	d88ec <copysign>
   d886c:	a31a      	add	r3, pc, #104	; (adr r3, d88d8 <scalbn+0xf8>)
   d886e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8872:	ec51 0b10 	vmov	r0, r1, d0
   d8876:	f000 f9ff 	bl	d8c78 <__aeabi_dmul>
   d887a:	ec41 0b10 	vmov	d0, r0, r1
   d887e:	bd70      	pop	{r4, r5, r6, pc}
   d8880:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d8884:	da13      	bge.n	d88ae <scalbn+0xce>
   d8886:	f24c 3150 	movw	r1, #50000	; 0xc350
   d888a:	428d      	cmp	r5, r1
   d888c:	ec43 2b11 	vmov	d1, r2, r3
   d8890:	dce8      	bgt.n	d8864 <scalbn+0x84>
   d8892:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d88d0 <scalbn+0xf0>
   d8896:	f000 f829 	bl	d88ec <copysign>
   d889a:	a30d      	add	r3, pc, #52	; (adr r3, d88d0 <scalbn+0xf0>)
   d889c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88a0:	ec51 0b10 	vmov	r0, r1, d0
   d88a4:	f000 f9e8 	bl	d8c78 <__aeabi_dmul>
   d88a8:	ec41 0b10 	vmov	d0, r0, r1
   d88ac:	bd70      	pop	{r4, r5, r6, pc}
   d88ae:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d88b2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d88b6:	3436      	adds	r4, #54	; 0x36
   d88b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d88bc:	4610      	mov	r0, r2
   d88be:	4619      	mov	r1, r3
   d88c0:	2200      	movs	r2, #0
   d88c2:	4b09      	ldr	r3, [pc, #36]	; (d88e8 <scalbn+0x108>)
   d88c4:	f000 f9d8 	bl	d8c78 <__aeabi_dmul>
   d88c8:	ec41 0b10 	vmov	d0, r0, r1
   d88cc:	bd70      	pop	{r4, r5, r6, pc}
   d88ce:	bf00      	nop
   d88d0:	c2f8f359 	.word	0xc2f8f359
   d88d4:	01a56e1f 	.word	0x01a56e1f
   d88d8:	8800759c 	.word	0x8800759c
   d88dc:	7e37e43c 	.word	0x7e37e43c
   d88e0:	43500000 	.word	0x43500000
   d88e4:	ffff3cb0 	.word	0xffff3cb0
   d88e8:	3c900000 	.word	0x3c900000

000d88ec <copysign>:
   d88ec:	ec53 2b10 	vmov	r2, r3, d0
   d88f0:	ee11 0a90 	vmov	r0, s3
   d88f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d88f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d88fc:	ea41 0300 	orr.w	r3, r1, r0
   d8900:	ec43 2b10 	vmov	d0, r2, r3
   d8904:	4770      	bx	lr
   d8906:	bf00      	nop

000d8908 <__aeabi_drsub>:
   d8908:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d890c:	e002      	b.n	d8914 <__adddf3>
   d890e:	bf00      	nop

000d8910 <__aeabi_dsub>:
   d8910:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8914 <__adddf3>:
   d8914:	b530      	push	{r4, r5, lr}
   d8916:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d891a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d891e:	ea94 0f05 	teq	r4, r5
   d8922:	bf08      	it	eq
   d8924:	ea90 0f02 	teqeq	r0, r2
   d8928:	bf1f      	itttt	ne
   d892a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d892e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8932:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8936:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d893a:	f000 80e2 	beq.w	d8b02 <__adddf3+0x1ee>
   d893e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8942:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8946:	bfb8      	it	lt
   d8948:	426d      	neglt	r5, r5
   d894a:	dd0c      	ble.n	d8966 <__adddf3+0x52>
   d894c:	442c      	add	r4, r5
   d894e:	ea80 0202 	eor.w	r2, r0, r2
   d8952:	ea81 0303 	eor.w	r3, r1, r3
   d8956:	ea82 0000 	eor.w	r0, r2, r0
   d895a:	ea83 0101 	eor.w	r1, r3, r1
   d895e:	ea80 0202 	eor.w	r2, r0, r2
   d8962:	ea81 0303 	eor.w	r3, r1, r3
   d8966:	2d36      	cmp	r5, #54	; 0x36
   d8968:	bf88      	it	hi
   d896a:	bd30      	pophi	{r4, r5, pc}
   d896c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8970:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8974:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8978:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d897c:	d002      	beq.n	d8984 <__adddf3+0x70>
   d897e:	4240      	negs	r0, r0
   d8980:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8984:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8988:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d898c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8990:	d002      	beq.n	d8998 <__adddf3+0x84>
   d8992:	4252      	negs	r2, r2
   d8994:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8998:	ea94 0f05 	teq	r4, r5
   d899c:	f000 80a7 	beq.w	d8aee <__adddf3+0x1da>
   d89a0:	f1a4 0401 	sub.w	r4, r4, #1
   d89a4:	f1d5 0e20 	rsbs	lr, r5, #32
   d89a8:	db0d      	blt.n	d89c6 <__adddf3+0xb2>
   d89aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d89ae:	fa22 f205 	lsr.w	r2, r2, r5
   d89b2:	1880      	adds	r0, r0, r2
   d89b4:	f141 0100 	adc.w	r1, r1, #0
   d89b8:	fa03 f20e 	lsl.w	r2, r3, lr
   d89bc:	1880      	adds	r0, r0, r2
   d89be:	fa43 f305 	asr.w	r3, r3, r5
   d89c2:	4159      	adcs	r1, r3
   d89c4:	e00e      	b.n	d89e4 <__adddf3+0xd0>
   d89c6:	f1a5 0520 	sub.w	r5, r5, #32
   d89ca:	f10e 0e20 	add.w	lr, lr, #32
   d89ce:	2a01      	cmp	r2, #1
   d89d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d89d4:	bf28      	it	cs
   d89d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d89da:	fa43 f305 	asr.w	r3, r3, r5
   d89de:	18c0      	adds	r0, r0, r3
   d89e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d89e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89e8:	d507      	bpl.n	d89fa <__adddf3+0xe6>
   d89ea:	f04f 0e00 	mov.w	lr, #0
   d89ee:	f1dc 0c00 	rsbs	ip, ip, #0
   d89f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d89f6:	eb6e 0101 	sbc.w	r1, lr, r1
   d89fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d89fe:	d31b      	bcc.n	d8a38 <__adddf3+0x124>
   d8a00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8a04:	d30c      	bcc.n	d8a20 <__adddf3+0x10c>
   d8a06:	0849      	lsrs	r1, r1, #1
   d8a08:	ea5f 0030 	movs.w	r0, r0, rrx
   d8a0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8a10:	f104 0401 	add.w	r4, r4, #1
   d8a14:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8a18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8a1c:	f080 809a 	bcs.w	d8b54 <__adddf3+0x240>
   d8a20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8a24:	bf08      	it	eq
   d8a26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a2a:	f150 0000 	adcs.w	r0, r0, #0
   d8a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a32:	ea41 0105 	orr.w	r1, r1, r5
   d8a36:	bd30      	pop	{r4, r5, pc}
   d8a38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8a3c:	4140      	adcs	r0, r0
   d8a3e:	eb41 0101 	adc.w	r1, r1, r1
   d8a42:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a46:	f1a4 0401 	sub.w	r4, r4, #1
   d8a4a:	d1e9      	bne.n	d8a20 <__adddf3+0x10c>
   d8a4c:	f091 0f00 	teq	r1, #0
   d8a50:	bf04      	itt	eq
   d8a52:	4601      	moveq	r1, r0
   d8a54:	2000      	moveq	r0, #0
   d8a56:	fab1 f381 	clz	r3, r1
   d8a5a:	bf08      	it	eq
   d8a5c:	3320      	addeq	r3, #32
   d8a5e:	f1a3 030b 	sub.w	r3, r3, #11
   d8a62:	f1b3 0220 	subs.w	r2, r3, #32
   d8a66:	da0c      	bge.n	d8a82 <__adddf3+0x16e>
   d8a68:	320c      	adds	r2, #12
   d8a6a:	dd08      	ble.n	d8a7e <__adddf3+0x16a>
   d8a6c:	f102 0c14 	add.w	ip, r2, #20
   d8a70:	f1c2 020c 	rsb	r2, r2, #12
   d8a74:	fa01 f00c 	lsl.w	r0, r1, ip
   d8a78:	fa21 f102 	lsr.w	r1, r1, r2
   d8a7c:	e00c      	b.n	d8a98 <__adddf3+0x184>
   d8a7e:	f102 0214 	add.w	r2, r2, #20
   d8a82:	bfd8      	it	le
   d8a84:	f1c2 0c20 	rsble	ip, r2, #32
   d8a88:	fa01 f102 	lsl.w	r1, r1, r2
   d8a8c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8a90:	bfdc      	itt	le
   d8a92:	ea41 010c 	orrle.w	r1, r1, ip
   d8a96:	4090      	lslle	r0, r2
   d8a98:	1ae4      	subs	r4, r4, r3
   d8a9a:	bfa2      	ittt	ge
   d8a9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8aa0:	4329      	orrge	r1, r5
   d8aa2:	bd30      	popge	{r4, r5, pc}
   d8aa4:	ea6f 0404 	mvn.w	r4, r4
   d8aa8:	3c1f      	subs	r4, #31
   d8aaa:	da1c      	bge.n	d8ae6 <__adddf3+0x1d2>
   d8aac:	340c      	adds	r4, #12
   d8aae:	dc0e      	bgt.n	d8ace <__adddf3+0x1ba>
   d8ab0:	f104 0414 	add.w	r4, r4, #20
   d8ab4:	f1c4 0220 	rsb	r2, r4, #32
   d8ab8:	fa20 f004 	lsr.w	r0, r0, r4
   d8abc:	fa01 f302 	lsl.w	r3, r1, r2
   d8ac0:	ea40 0003 	orr.w	r0, r0, r3
   d8ac4:	fa21 f304 	lsr.w	r3, r1, r4
   d8ac8:	ea45 0103 	orr.w	r1, r5, r3
   d8acc:	bd30      	pop	{r4, r5, pc}
   d8ace:	f1c4 040c 	rsb	r4, r4, #12
   d8ad2:	f1c4 0220 	rsb	r2, r4, #32
   d8ad6:	fa20 f002 	lsr.w	r0, r0, r2
   d8ada:	fa01 f304 	lsl.w	r3, r1, r4
   d8ade:	ea40 0003 	orr.w	r0, r0, r3
   d8ae2:	4629      	mov	r1, r5
   d8ae4:	bd30      	pop	{r4, r5, pc}
   d8ae6:	fa21 f004 	lsr.w	r0, r1, r4
   d8aea:	4629      	mov	r1, r5
   d8aec:	bd30      	pop	{r4, r5, pc}
   d8aee:	f094 0f00 	teq	r4, #0
   d8af2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8af6:	bf06      	itte	eq
   d8af8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8afc:	3401      	addeq	r4, #1
   d8afe:	3d01      	subne	r5, #1
   d8b00:	e74e      	b.n	d89a0 <__adddf3+0x8c>
   d8b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b06:	bf18      	it	ne
   d8b08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b0c:	d029      	beq.n	d8b62 <__adddf3+0x24e>
   d8b0e:	ea94 0f05 	teq	r4, r5
   d8b12:	bf08      	it	eq
   d8b14:	ea90 0f02 	teqeq	r0, r2
   d8b18:	d005      	beq.n	d8b26 <__adddf3+0x212>
   d8b1a:	ea54 0c00 	orrs.w	ip, r4, r0
   d8b1e:	bf04      	itt	eq
   d8b20:	4619      	moveq	r1, r3
   d8b22:	4610      	moveq	r0, r2
   d8b24:	bd30      	pop	{r4, r5, pc}
   d8b26:	ea91 0f03 	teq	r1, r3
   d8b2a:	bf1e      	ittt	ne
   d8b2c:	2100      	movne	r1, #0
   d8b2e:	2000      	movne	r0, #0
   d8b30:	bd30      	popne	{r4, r5, pc}
   d8b32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8b36:	d105      	bne.n	d8b44 <__adddf3+0x230>
   d8b38:	0040      	lsls	r0, r0, #1
   d8b3a:	4149      	adcs	r1, r1
   d8b3c:	bf28      	it	cs
   d8b3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8b42:	bd30      	pop	{r4, r5, pc}
   d8b44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8b48:	bf3c      	itt	cc
   d8b4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8b4e:	bd30      	popcc	{r4, r5, pc}
   d8b50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8b5c:	f04f 0000 	mov.w	r0, #0
   d8b60:	bd30      	pop	{r4, r5, pc}
   d8b62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b66:	bf1a      	itte	ne
   d8b68:	4619      	movne	r1, r3
   d8b6a:	4610      	movne	r0, r2
   d8b6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8b70:	bf1c      	itt	ne
   d8b72:	460b      	movne	r3, r1
   d8b74:	4602      	movne	r2, r0
   d8b76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b7a:	bf06      	itte	eq
   d8b7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8b80:	ea91 0f03 	teqeq	r1, r3
   d8b84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8b88:	bd30      	pop	{r4, r5, pc}
   d8b8a:	bf00      	nop

000d8b8c <__aeabi_ui2d>:
   d8b8c:	f090 0f00 	teq	r0, #0
   d8b90:	bf04      	itt	eq
   d8b92:	2100      	moveq	r1, #0
   d8b94:	4770      	bxeq	lr
   d8b96:	b530      	push	{r4, r5, lr}
   d8b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ba0:	f04f 0500 	mov.w	r5, #0
   d8ba4:	f04f 0100 	mov.w	r1, #0
   d8ba8:	e750      	b.n	d8a4c <__adddf3+0x138>
   d8baa:	bf00      	nop

000d8bac <__aeabi_i2d>:
   d8bac:	f090 0f00 	teq	r0, #0
   d8bb0:	bf04      	itt	eq
   d8bb2:	2100      	moveq	r1, #0
   d8bb4:	4770      	bxeq	lr
   d8bb6:	b530      	push	{r4, r5, lr}
   d8bb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8bc4:	bf48      	it	mi
   d8bc6:	4240      	negmi	r0, r0
   d8bc8:	f04f 0100 	mov.w	r1, #0
   d8bcc:	e73e      	b.n	d8a4c <__adddf3+0x138>
   d8bce:	bf00      	nop

000d8bd0 <__aeabi_f2d>:
   d8bd0:	0042      	lsls	r2, r0, #1
   d8bd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8bd6:	ea4f 0131 	mov.w	r1, r1, rrx
   d8bda:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8bde:	bf1f      	itttt	ne
   d8be0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8be4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8be8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8bec:	4770      	bxne	lr
   d8bee:	f092 0f00 	teq	r2, #0
   d8bf2:	bf14      	ite	ne
   d8bf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8bf8:	4770      	bxeq	lr
   d8bfa:	b530      	push	{r4, r5, lr}
   d8bfc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8c00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c08:	e720      	b.n	d8a4c <__adddf3+0x138>
   d8c0a:	bf00      	nop

000d8c0c <__aeabi_ul2d>:
   d8c0c:	ea50 0201 	orrs.w	r2, r0, r1
   d8c10:	bf08      	it	eq
   d8c12:	4770      	bxeq	lr
   d8c14:	b530      	push	{r4, r5, lr}
   d8c16:	f04f 0500 	mov.w	r5, #0
   d8c1a:	e00a      	b.n	d8c32 <__aeabi_l2d+0x16>

000d8c1c <__aeabi_l2d>:
   d8c1c:	ea50 0201 	orrs.w	r2, r0, r1
   d8c20:	bf08      	it	eq
   d8c22:	4770      	bxeq	lr
   d8c24:	b530      	push	{r4, r5, lr}
   d8c26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8c2a:	d502      	bpl.n	d8c32 <__aeabi_l2d+0x16>
   d8c2c:	4240      	negs	r0, r0
   d8c2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8c3e:	f43f aedc 	beq.w	d89fa <__adddf3+0xe6>
   d8c42:	f04f 0203 	mov.w	r2, #3
   d8c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c4a:	bf18      	it	ne
   d8c4c:	3203      	addne	r2, #3
   d8c4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c52:	bf18      	it	ne
   d8c54:	3203      	addne	r2, #3
   d8c56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8c5a:	f1c2 0320 	rsb	r3, r2, #32
   d8c5e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8c62:	fa20 f002 	lsr.w	r0, r0, r2
   d8c66:	fa01 fe03 	lsl.w	lr, r1, r3
   d8c6a:	ea40 000e 	orr.w	r0, r0, lr
   d8c6e:	fa21 f102 	lsr.w	r1, r1, r2
   d8c72:	4414      	add	r4, r2
   d8c74:	e6c1      	b.n	d89fa <__adddf3+0xe6>
   d8c76:	bf00      	nop

000d8c78 <__aeabi_dmul>:
   d8c78:	b570      	push	{r4, r5, r6, lr}
   d8c7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c86:	bf1d      	ittte	ne
   d8c88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c8c:	ea94 0f0c 	teqne	r4, ip
   d8c90:	ea95 0f0c 	teqne	r5, ip
   d8c94:	f000 f8de 	bleq	d8e54 <__aeabi_dmul+0x1dc>
   d8c98:	442c      	add	r4, r5
   d8c9a:	ea81 0603 	eor.w	r6, r1, r3
   d8c9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8ca2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8ca6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8caa:	bf18      	it	ne
   d8cac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8cb8:	d038      	beq.n	d8d2c <__aeabi_dmul+0xb4>
   d8cba:	fba0 ce02 	umull	ip, lr, r0, r2
   d8cbe:	f04f 0500 	mov.w	r5, #0
   d8cc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8cc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8cca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8cce:	f04f 0600 	mov.w	r6, #0
   d8cd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8cd6:	f09c 0f00 	teq	ip, #0
   d8cda:	bf18      	it	ne
   d8cdc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ce0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ce4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8ce8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8cec:	d204      	bcs.n	d8cf8 <__aeabi_dmul+0x80>
   d8cee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8cf2:	416d      	adcs	r5, r5
   d8cf4:	eb46 0606 	adc.w	r6, r6, r6
   d8cf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8cfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8d00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8d04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8d08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8d0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d10:	bf88      	it	hi
   d8d12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d16:	d81e      	bhi.n	d8d56 <__aeabi_dmul+0xde>
   d8d18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8d1c:	bf08      	it	eq
   d8d1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8d22:	f150 0000 	adcs.w	r0, r0, #0
   d8d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d2a:	bd70      	pop	{r4, r5, r6, pc}
   d8d2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8d30:	ea46 0101 	orr.w	r1, r6, r1
   d8d34:	ea40 0002 	orr.w	r0, r0, r2
   d8d38:	ea81 0103 	eor.w	r1, r1, r3
   d8d3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8d40:	bfc2      	ittt	gt
   d8d42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d4a:	bd70      	popgt	{r4, r5, r6, pc}
   d8d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d50:	f04f 0e00 	mov.w	lr, #0
   d8d54:	3c01      	subs	r4, #1
   d8d56:	f300 80ab 	bgt.w	d8eb0 <__aeabi_dmul+0x238>
   d8d5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8d5e:	bfde      	ittt	le
   d8d60:	2000      	movle	r0, #0
   d8d62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8d66:	bd70      	pople	{r4, r5, r6, pc}
   d8d68:	f1c4 0400 	rsb	r4, r4, #0
   d8d6c:	3c20      	subs	r4, #32
   d8d6e:	da35      	bge.n	d8ddc <__aeabi_dmul+0x164>
   d8d70:	340c      	adds	r4, #12
   d8d72:	dc1b      	bgt.n	d8dac <__aeabi_dmul+0x134>
   d8d74:	f104 0414 	add.w	r4, r4, #20
   d8d78:	f1c4 0520 	rsb	r5, r4, #32
   d8d7c:	fa00 f305 	lsl.w	r3, r0, r5
   d8d80:	fa20 f004 	lsr.w	r0, r0, r4
   d8d84:	fa01 f205 	lsl.w	r2, r1, r5
   d8d88:	ea40 0002 	orr.w	r0, r0, r2
   d8d8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d98:	fa21 f604 	lsr.w	r6, r1, r4
   d8d9c:	eb42 0106 	adc.w	r1, r2, r6
   d8da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8da4:	bf08      	it	eq
   d8da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8daa:	bd70      	pop	{r4, r5, r6, pc}
   d8dac:	f1c4 040c 	rsb	r4, r4, #12
   d8db0:	f1c4 0520 	rsb	r5, r4, #32
   d8db4:	fa00 f304 	lsl.w	r3, r0, r4
   d8db8:	fa20 f005 	lsr.w	r0, r0, r5
   d8dbc:	fa01 f204 	lsl.w	r2, r1, r4
   d8dc0:	ea40 0002 	orr.w	r0, r0, r2
   d8dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8dcc:	f141 0100 	adc.w	r1, r1, #0
   d8dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8dd4:	bf08      	it	eq
   d8dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8dda:	bd70      	pop	{r4, r5, r6, pc}
   d8ddc:	f1c4 0520 	rsb	r5, r4, #32
   d8de0:	fa00 f205 	lsl.w	r2, r0, r5
   d8de4:	ea4e 0e02 	orr.w	lr, lr, r2
   d8de8:	fa20 f304 	lsr.w	r3, r0, r4
   d8dec:	fa01 f205 	lsl.w	r2, r1, r5
   d8df0:	ea43 0302 	orr.w	r3, r3, r2
   d8df4:	fa21 f004 	lsr.w	r0, r1, r4
   d8df8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dfc:	fa21 f204 	lsr.w	r2, r1, r4
   d8e00:	ea20 0002 	bic.w	r0, r0, r2
   d8e04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8e08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e0c:	bf08      	it	eq
   d8e0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e12:	bd70      	pop	{r4, r5, r6, pc}
   d8e14:	f094 0f00 	teq	r4, #0
   d8e18:	d10f      	bne.n	d8e3a <__aeabi_dmul+0x1c2>
   d8e1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8e1e:	0040      	lsls	r0, r0, #1
   d8e20:	eb41 0101 	adc.w	r1, r1, r1
   d8e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e28:	bf08      	it	eq
   d8e2a:	3c01      	subeq	r4, #1
   d8e2c:	d0f7      	beq.n	d8e1e <__aeabi_dmul+0x1a6>
   d8e2e:	ea41 0106 	orr.w	r1, r1, r6
   d8e32:	f095 0f00 	teq	r5, #0
   d8e36:	bf18      	it	ne
   d8e38:	4770      	bxne	lr
   d8e3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8e3e:	0052      	lsls	r2, r2, #1
   d8e40:	eb43 0303 	adc.w	r3, r3, r3
   d8e44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8e48:	bf08      	it	eq
   d8e4a:	3d01      	subeq	r5, #1
   d8e4c:	d0f7      	beq.n	d8e3e <__aeabi_dmul+0x1c6>
   d8e4e:	ea43 0306 	orr.w	r3, r3, r6
   d8e52:	4770      	bx	lr
   d8e54:	ea94 0f0c 	teq	r4, ip
   d8e58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e5c:	bf18      	it	ne
   d8e5e:	ea95 0f0c 	teqne	r5, ip
   d8e62:	d00c      	beq.n	d8e7e <__aeabi_dmul+0x206>
   d8e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e68:	bf18      	it	ne
   d8e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e6e:	d1d1      	bne.n	d8e14 <__aeabi_dmul+0x19c>
   d8e70:	ea81 0103 	eor.w	r1, r1, r3
   d8e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e78:	f04f 0000 	mov.w	r0, #0
   d8e7c:	bd70      	pop	{r4, r5, r6, pc}
   d8e7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e82:	bf06      	itte	eq
   d8e84:	4610      	moveq	r0, r2
   d8e86:	4619      	moveq	r1, r3
   d8e88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e8c:	d019      	beq.n	d8ec2 <__aeabi_dmul+0x24a>
   d8e8e:	ea94 0f0c 	teq	r4, ip
   d8e92:	d102      	bne.n	d8e9a <__aeabi_dmul+0x222>
   d8e94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8e98:	d113      	bne.n	d8ec2 <__aeabi_dmul+0x24a>
   d8e9a:	ea95 0f0c 	teq	r5, ip
   d8e9e:	d105      	bne.n	d8eac <__aeabi_dmul+0x234>
   d8ea0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ea4:	bf1c      	itt	ne
   d8ea6:	4610      	movne	r0, r2
   d8ea8:	4619      	movne	r1, r3
   d8eaa:	d10a      	bne.n	d8ec2 <__aeabi_dmul+0x24a>
   d8eac:	ea81 0103 	eor.w	r1, r1, r3
   d8eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8eb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ebc:	f04f 0000 	mov.w	r0, #0
   d8ec0:	bd70      	pop	{r4, r5, r6, pc}
   d8ec2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ec6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8eca:	bd70      	pop	{r4, r5, r6, pc}

000d8ecc <__aeabi_ddiv>:
   d8ecc:	b570      	push	{r4, r5, r6, lr}
   d8ece:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ed2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ed6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8eda:	bf1d      	ittte	ne
   d8edc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ee0:	ea94 0f0c 	teqne	r4, ip
   d8ee4:	ea95 0f0c 	teqne	r5, ip
   d8ee8:	f000 f8a7 	bleq	d903a <__aeabi_ddiv+0x16e>
   d8eec:	eba4 0405 	sub.w	r4, r4, r5
   d8ef0:	ea81 0e03 	eor.w	lr, r1, r3
   d8ef4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ef8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8efc:	f000 8088 	beq.w	d9010 <__aeabi_ddiv+0x144>
   d8f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8f08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8f0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8f10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8f14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8f18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8f1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8f20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8f24:	429d      	cmp	r5, r3
   d8f26:	bf08      	it	eq
   d8f28:	4296      	cmpeq	r6, r2
   d8f2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8f2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8f32:	d202      	bcs.n	d8f3a <__aeabi_ddiv+0x6e>
   d8f34:	085b      	lsrs	r3, r3, #1
   d8f36:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f3a:	1ab6      	subs	r6, r6, r2
   d8f3c:	eb65 0503 	sbc.w	r5, r5, r3
   d8f40:	085b      	lsrs	r3, r3, #1
   d8f42:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8f4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f56:	bf22      	ittt	cs
   d8f58:	1ab6      	subcs	r6, r6, r2
   d8f5a:	4675      	movcs	r5, lr
   d8f5c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8f60:	085b      	lsrs	r3, r3, #1
   d8f62:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f66:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f6e:	bf22      	ittt	cs
   d8f70:	1ab6      	subcs	r6, r6, r2
   d8f72:	4675      	movcs	r5, lr
   d8f74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8f78:	085b      	lsrs	r3, r3, #1
   d8f7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f86:	bf22      	ittt	cs
   d8f88:	1ab6      	subcs	r6, r6, r2
   d8f8a:	4675      	movcs	r5, lr
   d8f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8f90:	085b      	lsrs	r3, r3, #1
   d8f92:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f96:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f9e:	bf22      	ittt	cs
   d8fa0:	1ab6      	subcs	r6, r6, r2
   d8fa2:	4675      	movcs	r5, lr
   d8fa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8fa8:	ea55 0e06 	orrs.w	lr, r5, r6
   d8fac:	d018      	beq.n	d8fe0 <__aeabi_ddiv+0x114>
   d8fae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8fb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8fb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8fba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8fbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8fc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8fc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8fca:	d1c0      	bne.n	d8f4e <__aeabi_ddiv+0x82>
   d8fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fd0:	d10b      	bne.n	d8fea <__aeabi_ddiv+0x11e>
   d8fd2:	ea41 0100 	orr.w	r1, r1, r0
   d8fd6:	f04f 0000 	mov.w	r0, #0
   d8fda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8fde:	e7b6      	b.n	d8f4e <__aeabi_ddiv+0x82>
   d8fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fe4:	bf04      	itt	eq
   d8fe6:	4301      	orreq	r1, r0
   d8fe8:	2000      	moveq	r0, #0
   d8fea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8fee:	bf88      	it	hi
   d8ff0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ff4:	f63f aeaf 	bhi.w	d8d56 <__aeabi_dmul+0xde>
   d8ff8:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ffc:	bf04      	itt	eq
   d8ffe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9002:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9006:	f150 0000 	adcs.w	r0, r0, #0
   d900a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d900e:	bd70      	pop	{r4, r5, r6, pc}
   d9010:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9014:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9018:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d901c:	bfc2      	ittt	gt
   d901e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9022:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9026:	bd70      	popgt	{r4, r5, r6, pc}
   d9028:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d902c:	f04f 0e00 	mov.w	lr, #0
   d9030:	3c01      	subs	r4, #1
   d9032:	e690      	b.n	d8d56 <__aeabi_dmul+0xde>
   d9034:	ea45 0e06 	orr.w	lr, r5, r6
   d9038:	e68d      	b.n	d8d56 <__aeabi_dmul+0xde>
   d903a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d903e:	ea94 0f0c 	teq	r4, ip
   d9042:	bf08      	it	eq
   d9044:	ea95 0f0c 	teqeq	r5, ip
   d9048:	f43f af3b 	beq.w	d8ec2 <__aeabi_dmul+0x24a>
   d904c:	ea94 0f0c 	teq	r4, ip
   d9050:	d10a      	bne.n	d9068 <__aeabi_ddiv+0x19c>
   d9052:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9056:	f47f af34 	bne.w	d8ec2 <__aeabi_dmul+0x24a>
   d905a:	ea95 0f0c 	teq	r5, ip
   d905e:	f47f af25 	bne.w	d8eac <__aeabi_dmul+0x234>
   d9062:	4610      	mov	r0, r2
   d9064:	4619      	mov	r1, r3
   d9066:	e72c      	b.n	d8ec2 <__aeabi_dmul+0x24a>
   d9068:	ea95 0f0c 	teq	r5, ip
   d906c:	d106      	bne.n	d907c <__aeabi_ddiv+0x1b0>
   d906e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9072:	f43f aefd 	beq.w	d8e70 <__aeabi_dmul+0x1f8>
   d9076:	4610      	mov	r0, r2
   d9078:	4619      	mov	r1, r3
   d907a:	e722      	b.n	d8ec2 <__aeabi_dmul+0x24a>
   d907c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9080:	bf18      	it	ne
   d9082:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9086:	f47f aec5 	bne.w	d8e14 <__aeabi_dmul+0x19c>
   d908a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d908e:	f47f af0d 	bne.w	d8eac <__aeabi_dmul+0x234>
   d9092:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9096:	f47f aeeb 	bne.w	d8e70 <__aeabi_dmul+0x1f8>
   d909a:	e712      	b.n	d8ec2 <__aeabi_dmul+0x24a>

000d909c <__gedf2>:
   d909c:	f04f 3cff 	mov.w	ip, #4294967295
   d90a0:	e006      	b.n	d90b0 <__cmpdf2+0x4>
   d90a2:	bf00      	nop

000d90a4 <__ledf2>:
   d90a4:	f04f 0c01 	mov.w	ip, #1
   d90a8:	e002      	b.n	d90b0 <__cmpdf2+0x4>
   d90aa:	bf00      	nop

000d90ac <__cmpdf2>:
   d90ac:	f04f 0c01 	mov.w	ip, #1
   d90b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d90b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d90b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d90bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d90c0:	bf18      	it	ne
   d90c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d90c6:	d01b      	beq.n	d9100 <__cmpdf2+0x54>
   d90c8:	b001      	add	sp, #4
   d90ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d90ce:	bf0c      	ite	eq
   d90d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d90d4:	ea91 0f03 	teqne	r1, r3
   d90d8:	bf02      	ittt	eq
   d90da:	ea90 0f02 	teqeq	r0, r2
   d90de:	2000      	moveq	r0, #0
   d90e0:	4770      	bxeq	lr
   d90e2:	f110 0f00 	cmn.w	r0, #0
   d90e6:	ea91 0f03 	teq	r1, r3
   d90ea:	bf58      	it	pl
   d90ec:	4299      	cmppl	r1, r3
   d90ee:	bf08      	it	eq
   d90f0:	4290      	cmpeq	r0, r2
   d90f2:	bf2c      	ite	cs
   d90f4:	17d8      	asrcs	r0, r3, #31
   d90f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d90fa:	f040 0001 	orr.w	r0, r0, #1
   d90fe:	4770      	bx	lr
   d9100:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9104:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9108:	d102      	bne.n	d9110 <__cmpdf2+0x64>
   d910a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d910e:	d107      	bne.n	d9120 <__cmpdf2+0x74>
   d9110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9118:	d1d6      	bne.n	d90c8 <__cmpdf2+0x1c>
   d911a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d911e:	d0d3      	beq.n	d90c8 <__cmpdf2+0x1c>
   d9120:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9124:	4770      	bx	lr
   d9126:	bf00      	nop

000d9128 <__aeabi_cdrcmple>:
   d9128:	4684      	mov	ip, r0
   d912a:	4610      	mov	r0, r2
   d912c:	4662      	mov	r2, ip
   d912e:	468c      	mov	ip, r1
   d9130:	4619      	mov	r1, r3
   d9132:	4663      	mov	r3, ip
   d9134:	e000      	b.n	d9138 <__aeabi_cdcmpeq>
   d9136:	bf00      	nop

000d9138 <__aeabi_cdcmpeq>:
   d9138:	b501      	push	{r0, lr}
   d913a:	f7ff ffb7 	bl	d90ac <__cmpdf2>
   d913e:	2800      	cmp	r0, #0
   d9140:	bf48      	it	mi
   d9142:	f110 0f00 	cmnmi.w	r0, #0
   d9146:	bd01      	pop	{r0, pc}

000d9148 <__aeabi_dcmpeq>:
   d9148:	f84d ed08 	str.w	lr, [sp, #-8]!
   d914c:	f7ff fff4 	bl	d9138 <__aeabi_cdcmpeq>
   d9150:	bf0c      	ite	eq
   d9152:	2001      	moveq	r0, #1
   d9154:	2000      	movne	r0, #0
   d9156:	f85d fb08 	ldr.w	pc, [sp], #8
   d915a:	bf00      	nop

000d915c <__aeabi_dcmplt>:
   d915c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9160:	f7ff ffea 	bl	d9138 <__aeabi_cdcmpeq>
   d9164:	bf34      	ite	cc
   d9166:	2001      	movcc	r0, #1
   d9168:	2000      	movcs	r0, #0
   d916a:	f85d fb08 	ldr.w	pc, [sp], #8
   d916e:	bf00      	nop

000d9170 <__aeabi_dcmple>:
   d9170:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9174:	f7ff ffe0 	bl	d9138 <__aeabi_cdcmpeq>
   d9178:	bf94      	ite	ls
   d917a:	2001      	movls	r0, #1
   d917c:	2000      	movhi	r0, #0
   d917e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9182:	bf00      	nop

000d9184 <__aeabi_dcmpge>:
   d9184:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9188:	f7ff ffce 	bl	d9128 <__aeabi_cdrcmple>
   d918c:	bf94      	ite	ls
   d918e:	2001      	movls	r0, #1
   d9190:	2000      	movhi	r0, #0
   d9192:	f85d fb08 	ldr.w	pc, [sp], #8
   d9196:	bf00      	nop

000d9198 <__aeabi_dcmpgt>:
   d9198:	f84d ed08 	str.w	lr, [sp, #-8]!
   d919c:	f7ff ffc4 	bl	d9128 <__aeabi_cdrcmple>
   d91a0:	bf34      	ite	cc
   d91a2:	2001      	movcc	r0, #1
   d91a4:	2000      	movcs	r0, #0
   d91a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d91aa:	bf00      	nop

000d91ac <__aeabi_dcmpun>:
   d91ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d91b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d91b4:	d102      	bne.n	d91bc <__aeabi_dcmpun+0x10>
   d91b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d91ba:	d10a      	bne.n	d91d2 <__aeabi_dcmpun+0x26>
   d91bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d91c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d91c4:	d102      	bne.n	d91cc <__aeabi_dcmpun+0x20>
   d91c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d91ca:	d102      	bne.n	d91d2 <__aeabi_dcmpun+0x26>
   d91cc:	f04f 0000 	mov.w	r0, #0
   d91d0:	4770      	bx	lr
   d91d2:	f04f 0001 	mov.w	r0, #1
   d91d6:	4770      	bx	lr

000d91d8 <__aeabi_d2iz>:
   d91d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d91dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d91e0:	d215      	bcs.n	d920e <__aeabi_d2iz+0x36>
   d91e2:	d511      	bpl.n	d9208 <__aeabi_d2iz+0x30>
   d91e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d91e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d91ec:	d912      	bls.n	d9214 <__aeabi_d2iz+0x3c>
   d91ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d91f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d91f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d91fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d91fe:	fa23 f002 	lsr.w	r0, r3, r2
   d9202:	bf18      	it	ne
   d9204:	4240      	negne	r0, r0
   d9206:	4770      	bx	lr
   d9208:	f04f 0000 	mov.w	r0, #0
   d920c:	4770      	bx	lr
   d920e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9212:	d105      	bne.n	d9220 <__aeabi_d2iz+0x48>
   d9214:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9218:	bf08      	it	eq
   d921a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d921e:	4770      	bx	lr
   d9220:	f04f 0000 	mov.w	r0, #0
   d9224:	4770      	bx	lr
   d9226:	bf00      	nop

000d9228 <__aeabi_d2uiz>:
   d9228:	004a      	lsls	r2, r1, #1
   d922a:	d211      	bcs.n	d9250 <__aeabi_d2uiz+0x28>
   d922c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9230:	d211      	bcs.n	d9256 <__aeabi_d2uiz+0x2e>
   d9232:	d50d      	bpl.n	d9250 <__aeabi_d2uiz+0x28>
   d9234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d923c:	d40e      	bmi.n	d925c <__aeabi_d2uiz+0x34>
   d923e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d924a:	fa23 f002 	lsr.w	r0, r3, r2
   d924e:	4770      	bx	lr
   d9250:	f04f 0000 	mov.w	r0, #0
   d9254:	4770      	bx	lr
   d9256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d925a:	d102      	bne.n	d9262 <__aeabi_d2uiz+0x3a>
   d925c:	f04f 30ff 	mov.w	r0, #4294967295
   d9260:	4770      	bx	lr
   d9262:	f04f 0000 	mov.w	r0, #0
   d9266:	4770      	bx	lr

000d9268 <__aeabi_d2f>:
   d9268:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d926c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9270:	bf24      	itt	cs
   d9272:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9276:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d927a:	d90d      	bls.n	d9298 <__aeabi_d2f+0x30>
   d927c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9280:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9284:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9288:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d928c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9290:	bf08      	it	eq
   d9292:	f020 0001 	biceq.w	r0, r0, #1
   d9296:	4770      	bx	lr
   d9298:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d929c:	d121      	bne.n	d92e2 <__aeabi_d2f+0x7a>
   d929e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d92a2:	bfbc      	itt	lt
   d92a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d92a8:	4770      	bxlt	lr
   d92aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d92ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d92b2:	f1c2 0218 	rsb	r2, r2, #24
   d92b6:	f1c2 0c20 	rsb	ip, r2, #32
   d92ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d92be:	fa20 f002 	lsr.w	r0, r0, r2
   d92c2:	bf18      	it	ne
   d92c4:	f040 0001 	orrne.w	r0, r0, #1
   d92c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d92cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d92d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d92d4:	ea40 000c 	orr.w	r0, r0, ip
   d92d8:	fa23 f302 	lsr.w	r3, r3, r2
   d92dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d92e0:	e7cc      	b.n	d927c <__aeabi_d2f+0x14>
   d92e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d92e6:	d107      	bne.n	d92f8 <__aeabi_d2f+0x90>
   d92e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d92ec:	bf1e      	ittt	ne
   d92ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d92f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d92f6:	4770      	bxne	lr
   d92f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d92fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9300:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9304:	4770      	bx	lr
   d9306:	bf00      	nop

000d9308 <__aeabi_ldivmod>:
   d9308:	b97b      	cbnz	r3, d932a <__aeabi_ldivmod+0x22>
   d930a:	b972      	cbnz	r2, d932a <__aeabi_ldivmod+0x22>
   d930c:	2900      	cmp	r1, #0
   d930e:	bfbe      	ittt	lt
   d9310:	2000      	movlt	r0, #0
   d9312:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9316:	e006      	blt.n	d9326 <__aeabi_ldivmod+0x1e>
   d9318:	bf08      	it	eq
   d931a:	2800      	cmpeq	r0, #0
   d931c:	bf1c      	itt	ne
   d931e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9322:	f04f 30ff 	movne.w	r0, #4294967295
   d9326:	f000 b9b1 	b.w	d968c <__aeabi_idiv0>
   d932a:	f1ad 0c08 	sub.w	ip, sp, #8
   d932e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9332:	2900      	cmp	r1, #0
   d9334:	db09      	blt.n	d934a <__aeabi_ldivmod+0x42>
   d9336:	2b00      	cmp	r3, #0
   d9338:	db1a      	blt.n	d9370 <__aeabi_ldivmod+0x68>
   d933a:	f000 f835 	bl	d93a8 <__udivmoddi4>
   d933e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9346:	b004      	add	sp, #16
   d9348:	4770      	bx	lr
   d934a:	4240      	negs	r0, r0
   d934c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9350:	2b00      	cmp	r3, #0
   d9352:	db1b      	blt.n	d938c <__aeabi_ldivmod+0x84>
   d9354:	f000 f828 	bl	d93a8 <__udivmoddi4>
   d9358:	f8dd e004 	ldr.w	lr, [sp, #4]
   d935c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9360:	b004      	add	sp, #16
   d9362:	4240      	negs	r0, r0
   d9364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9368:	4252      	negs	r2, r2
   d936a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d936e:	4770      	bx	lr
   d9370:	4252      	negs	r2, r2
   d9372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9376:	f000 f817 	bl	d93a8 <__udivmoddi4>
   d937a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d937e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9382:	b004      	add	sp, #16
   d9384:	4240      	negs	r0, r0
   d9386:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d938a:	4770      	bx	lr
   d938c:	4252      	negs	r2, r2
   d938e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9392:	f000 f809 	bl	d93a8 <__udivmoddi4>
   d9396:	f8dd e004 	ldr.w	lr, [sp, #4]
   d939a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d939e:	b004      	add	sp, #16
   d93a0:	4252      	negs	r2, r2
   d93a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d93a6:	4770      	bx	lr

000d93a8 <__udivmoddi4>:
   d93a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93ac:	468c      	mov	ip, r1
   d93ae:	460e      	mov	r6, r1
   d93b0:	4604      	mov	r4, r0
   d93b2:	9d08      	ldr	r5, [sp, #32]
   d93b4:	2b00      	cmp	r3, #0
   d93b6:	d150      	bne.n	d945a <__udivmoddi4+0xb2>
   d93b8:	428a      	cmp	r2, r1
   d93ba:	4617      	mov	r7, r2
   d93bc:	d96c      	bls.n	d9498 <__udivmoddi4+0xf0>
   d93be:	fab2 fe82 	clz	lr, r2
   d93c2:	f1be 0f00 	cmp.w	lr, #0
   d93c6:	d00b      	beq.n	d93e0 <__udivmoddi4+0x38>
   d93c8:	f1ce 0420 	rsb	r4, lr, #32
   d93cc:	fa20 f404 	lsr.w	r4, r0, r4
   d93d0:	fa01 f60e 	lsl.w	r6, r1, lr
   d93d4:	ea44 0c06 	orr.w	ip, r4, r6
   d93d8:	fa02 f70e 	lsl.w	r7, r2, lr
   d93dc:	fa00 f40e 	lsl.w	r4, r0, lr
   d93e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d93e4:	0c22      	lsrs	r2, r4, #16
   d93e6:	fbbc f0f9 	udiv	r0, ip, r9
   d93ea:	fa1f f887 	uxth.w	r8, r7
   d93ee:	fb09 c610 	mls	r6, r9, r0, ip
   d93f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d93f6:	fb00 f308 	mul.w	r3, r0, r8
   d93fa:	42b3      	cmp	r3, r6
   d93fc:	d909      	bls.n	d9412 <__udivmoddi4+0x6a>
   d93fe:	19f6      	adds	r6, r6, r7
   d9400:	f100 32ff 	add.w	r2, r0, #4294967295
   d9404:	f080 8122 	bcs.w	d964c <__udivmoddi4+0x2a4>
   d9408:	42b3      	cmp	r3, r6
   d940a:	f240 811f 	bls.w	d964c <__udivmoddi4+0x2a4>
   d940e:	3802      	subs	r0, #2
   d9410:	443e      	add	r6, r7
   d9412:	1af6      	subs	r6, r6, r3
   d9414:	b2a2      	uxth	r2, r4
   d9416:	fbb6 f3f9 	udiv	r3, r6, r9
   d941a:	fb09 6613 	mls	r6, r9, r3, r6
   d941e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9422:	fb03 f808 	mul.w	r8, r3, r8
   d9426:	45a0      	cmp	r8, r4
   d9428:	d909      	bls.n	d943e <__udivmoddi4+0x96>
   d942a:	19e4      	adds	r4, r4, r7
   d942c:	f103 32ff 	add.w	r2, r3, #4294967295
   d9430:	f080 810a 	bcs.w	d9648 <__udivmoddi4+0x2a0>
   d9434:	45a0      	cmp	r8, r4
   d9436:	f240 8107 	bls.w	d9648 <__udivmoddi4+0x2a0>
   d943a:	3b02      	subs	r3, #2
   d943c:	443c      	add	r4, r7
   d943e:	ebc8 0404 	rsb	r4, r8, r4
   d9442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9446:	2100      	movs	r1, #0
   d9448:	2d00      	cmp	r5, #0
   d944a:	d062      	beq.n	d9512 <__udivmoddi4+0x16a>
   d944c:	fa24 f40e 	lsr.w	r4, r4, lr
   d9450:	2300      	movs	r3, #0
   d9452:	602c      	str	r4, [r5, #0]
   d9454:	606b      	str	r3, [r5, #4]
   d9456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d945a:	428b      	cmp	r3, r1
   d945c:	d907      	bls.n	d946e <__udivmoddi4+0xc6>
   d945e:	2d00      	cmp	r5, #0
   d9460:	d055      	beq.n	d950e <__udivmoddi4+0x166>
   d9462:	2100      	movs	r1, #0
   d9464:	e885 0041 	stmia.w	r5, {r0, r6}
   d9468:	4608      	mov	r0, r1
   d946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d946e:	fab3 f183 	clz	r1, r3
   d9472:	2900      	cmp	r1, #0
   d9474:	f040 8090 	bne.w	d9598 <__udivmoddi4+0x1f0>
   d9478:	42b3      	cmp	r3, r6
   d947a:	d302      	bcc.n	d9482 <__udivmoddi4+0xda>
   d947c:	4282      	cmp	r2, r0
   d947e:	f200 80f8 	bhi.w	d9672 <__udivmoddi4+0x2ca>
   d9482:	1a84      	subs	r4, r0, r2
   d9484:	eb66 0603 	sbc.w	r6, r6, r3
   d9488:	2001      	movs	r0, #1
   d948a:	46b4      	mov	ip, r6
   d948c:	2d00      	cmp	r5, #0
   d948e:	d040      	beq.n	d9512 <__udivmoddi4+0x16a>
   d9490:	e885 1010 	stmia.w	r5, {r4, ip}
   d9494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9498:	b912      	cbnz	r2, d94a0 <__udivmoddi4+0xf8>
   d949a:	2701      	movs	r7, #1
   d949c:	fbb7 f7f2 	udiv	r7, r7, r2
   d94a0:	fab7 fe87 	clz	lr, r7
   d94a4:	f1be 0f00 	cmp.w	lr, #0
   d94a8:	d135      	bne.n	d9516 <__udivmoddi4+0x16e>
   d94aa:	1bf3      	subs	r3, r6, r7
   d94ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d94b0:	fa1f fc87 	uxth.w	ip, r7
   d94b4:	2101      	movs	r1, #1
   d94b6:	fbb3 f0f8 	udiv	r0, r3, r8
   d94ba:	0c22      	lsrs	r2, r4, #16
   d94bc:	fb08 3610 	mls	r6, r8, r0, r3
   d94c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d94c4:	fb0c f300 	mul.w	r3, ip, r0
   d94c8:	42b3      	cmp	r3, r6
   d94ca:	d907      	bls.n	d94dc <__udivmoddi4+0x134>
   d94cc:	19f6      	adds	r6, r6, r7
   d94ce:	f100 32ff 	add.w	r2, r0, #4294967295
   d94d2:	d202      	bcs.n	d94da <__udivmoddi4+0x132>
   d94d4:	42b3      	cmp	r3, r6
   d94d6:	f200 80ce 	bhi.w	d9676 <__udivmoddi4+0x2ce>
   d94da:	4610      	mov	r0, r2
   d94dc:	1af6      	subs	r6, r6, r3
   d94de:	b2a2      	uxth	r2, r4
   d94e0:	fbb6 f3f8 	udiv	r3, r6, r8
   d94e4:	fb08 6613 	mls	r6, r8, r3, r6
   d94e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d94ec:	fb0c fc03 	mul.w	ip, ip, r3
   d94f0:	45a4      	cmp	ip, r4
   d94f2:	d907      	bls.n	d9504 <__udivmoddi4+0x15c>
   d94f4:	19e4      	adds	r4, r4, r7
   d94f6:	f103 32ff 	add.w	r2, r3, #4294967295
   d94fa:	d202      	bcs.n	d9502 <__udivmoddi4+0x15a>
   d94fc:	45a4      	cmp	ip, r4
   d94fe:	f200 80b5 	bhi.w	d966c <__udivmoddi4+0x2c4>
   d9502:	4613      	mov	r3, r2
   d9504:	ebcc 0404 	rsb	r4, ip, r4
   d9508:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d950c:	e79c      	b.n	d9448 <__udivmoddi4+0xa0>
   d950e:	4629      	mov	r1, r5
   d9510:	4628      	mov	r0, r5
   d9512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9516:	f1ce 0120 	rsb	r1, lr, #32
   d951a:	fa06 f30e 	lsl.w	r3, r6, lr
   d951e:	fa07 f70e 	lsl.w	r7, r7, lr
   d9522:	fa20 f901 	lsr.w	r9, r0, r1
   d9526:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d952a:	40ce      	lsrs	r6, r1
   d952c:	ea49 0903 	orr.w	r9, r9, r3
   d9530:	fbb6 faf8 	udiv	sl, r6, r8
   d9534:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9538:	fb08 661a 	mls	r6, r8, sl, r6
   d953c:	fa1f fc87 	uxth.w	ip, r7
   d9540:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9544:	fb0a f20c 	mul.w	r2, sl, ip
   d9548:	429a      	cmp	r2, r3
   d954a:	fa00 f40e 	lsl.w	r4, r0, lr
   d954e:	d90a      	bls.n	d9566 <__udivmoddi4+0x1be>
   d9550:	19db      	adds	r3, r3, r7
   d9552:	f10a 31ff 	add.w	r1, sl, #4294967295
   d9556:	f080 8087 	bcs.w	d9668 <__udivmoddi4+0x2c0>
   d955a:	429a      	cmp	r2, r3
   d955c:	f240 8084 	bls.w	d9668 <__udivmoddi4+0x2c0>
   d9560:	f1aa 0a02 	sub.w	sl, sl, #2
   d9564:	443b      	add	r3, r7
   d9566:	1a9b      	subs	r3, r3, r2
   d9568:	fa1f f989 	uxth.w	r9, r9
   d956c:	fbb3 f1f8 	udiv	r1, r3, r8
   d9570:	fb08 3311 	mls	r3, r8, r1, r3
   d9574:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9578:	fb01 f60c 	mul.w	r6, r1, ip
   d957c:	429e      	cmp	r6, r3
   d957e:	d907      	bls.n	d9590 <__udivmoddi4+0x1e8>
   d9580:	19db      	adds	r3, r3, r7
   d9582:	f101 32ff 	add.w	r2, r1, #4294967295
   d9586:	d26b      	bcs.n	d9660 <__udivmoddi4+0x2b8>
   d9588:	429e      	cmp	r6, r3
   d958a:	d969      	bls.n	d9660 <__udivmoddi4+0x2b8>
   d958c:	3902      	subs	r1, #2
   d958e:	443b      	add	r3, r7
   d9590:	1b9b      	subs	r3, r3, r6
   d9592:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d9596:	e78e      	b.n	d94b6 <__udivmoddi4+0x10e>
   d9598:	f1c1 0e20 	rsb	lr, r1, #32
   d959c:	fa22 f40e 	lsr.w	r4, r2, lr
   d95a0:	408b      	lsls	r3, r1
   d95a2:	4323      	orrs	r3, r4
   d95a4:	fa20 f70e 	lsr.w	r7, r0, lr
   d95a8:	fa06 f401 	lsl.w	r4, r6, r1
   d95ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d95b0:	fa26 f60e 	lsr.w	r6, r6, lr
   d95b4:	433c      	orrs	r4, r7
   d95b6:	fbb6 f9fc 	udiv	r9, r6, ip
   d95ba:	0c27      	lsrs	r7, r4, #16
   d95bc:	fb0c 6619 	mls	r6, ip, r9, r6
   d95c0:	fa1f f883 	uxth.w	r8, r3
   d95c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d95c8:	fb09 f708 	mul.w	r7, r9, r8
   d95cc:	42b7      	cmp	r7, r6
   d95ce:	fa02 f201 	lsl.w	r2, r2, r1
   d95d2:	fa00 fa01 	lsl.w	sl, r0, r1
   d95d6:	d908      	bls.n	d95ea <__udivmoddi4+0x242>
   d95d8:	18f6      	adds	r6, r6, r3
   d95da:	f109 30ff 	add.w	r0, r9, #4294967295
   d95de:	d241      	bcs.n	d9664 <__udivmoddi4+0x2bc>
   d95e0:	42b7      	cmp	r7, r6
   d95e2:	d93f      	bls.n	d9664 <__udivmoddi4+0x2bc>
   d95e4:	f1a9 0902 	sub.w	r9, r9, #2
   d95e8:	441e      	add	r6, r3
   d95ea:	1bf6      	subs	r6, r6, r7
   d95ec:	b2a0      	uxth	r0, r4
   d95ee:	fbb6 f4fc 	udiv	r4, r6, ip
   d95f2:	fb0c 6614 	mls	r6, ip, r4, r6
   d95f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d95fa:	fb04 f808 	mul.w	r8, r4, r8
   d95fe:	45b8      	cmp	r8, r7
   d9600:	d907      	bls.n	d9612 <__udivmoddi4+0x26a>
   d9602:	18ff      	adds	r7, r7, r3
   d9604:	f104 30ff 	add.w	r0, r4, #4294967295
   d9608:	d228      	bcs.n	d965c <__udivmoddi4+0x2b4>
   d960a:	45b8      	cmp	r8, r7
   d960c:	d926      	bls.n	d965c <__udivmoddi4+0x2b4>
   d960e:	3c02      	subs	r4, #2
   d9610:	441f      	add	r7, r3
   d9612:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d9616:	ebc8 0707 	rsb	r7, r8, r7
   d961a:	fba0 8902 	umull	r8, r9, r0, r2
   d961e:	454f      	cmp	r7, r9
   d9620:	4644      	mov	r4, r8
   d9622:	464e      	mov	r6, r9
   d9624:	d314      	bcc.n	d9650 <__udivmoddi4+0x2a8>
   d9626:	d029      	beq.n	d967c <__udivmoddi4+0x2d4>
   d9628:	b365      	cbz	r5, d9684 <__udivmoddi4+0x2dc>
   d962a:	ebba 0304 	subs.w	r3, sl, r4
   d962e:	eb67 0706 	sbc.w	r7, r7, r6
   d9632:	fa07 fe0e 	lsl.w	lr, r7, lr
   d9636:	40cb      	lsrs	r3, r1
   d9638:	40cf      	lsrs	r7, r1
   d963a:	ea4e 0303 	orr.w	r3, lr, r3
   d963e:	e885 0088 	stmia.w	r5, {r3, r7}
   d9642:	2100      	movs	r1, #0
   d9644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9648:	4613      	mov	r3, r2
   d964a:	e6f8      	b.n	d943e <__udivmoddi4+0x96>
   d964c:	4610      	mov	r0, r2
   d964e:	e6e0      	b.n	d9412 <__udivmoddi4+0x6a>
   d9650:	ebb8 0402 	subs.w	r4, r8, r2
   d9654:	eb69 0603 	sbc.w	r6, r9, r3
   d9658:	3801      	subs	r0, #1
   d965a:	e7e5      	b.n	d9628 <__udivmoddi4+0x280>
   d965c:	4604      	mov	r4, r0
   d965e:	e7d8      	b.n	d9612 <__udivmoddi4+0x26a>
   d9660:	4611      	mov	r1, r2
   d9662:	e795      	b.n	d9590 <__udivmoddi4+0x1e8>
   d9664:	4681      	mov	r9, r0
   d9666:	e7c0      	b.n	d95ea <__udivmoddi4+0x242>
   d9668:	468a      	mov	sl, r1
   d966a:	e77c      	b.n	d9566 <__udivmoddi4+0x1be>
   d966c:	3b02      	subs	r3, #2
   d966e:	443c      	add	r4, r7
   d9670:	e748      	b.n	d9504 <__udivmoddi4+0x15c>
   d9672:	4608      	mov	r0, r1
   d9674:	e70a      	b.n	d948c <__udivmoddi4+0xe4>
   d9676:	3802      	subs	r0, #2
   d9678:	443e      	add	r6, r7
   d967a:	e72f      	b.n	d94dc <__udivmoddi4+0x134>
   d967c:	45c2      	cmp	sl, r8
   d967e:	d3e7      	bcc.n	d9650 <__udivmoddi4+0x2a8>
   d9680:	463e      	mov	r6, r7
   d9682:	e7d1      	b.n	d9628 <__udivmoddi4+0x280>
   d9684:	4629      	mov	r1, r5
   d9686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d968a:	bf00      	nop

000d968c <__aeabi_idiv0>:
   d968c:	4770      	bx	lr
   d968e:	bf00      	nop

000d9690 <__cxa_atexit>:
   d9690:	b510      	push	{r4, lr}
   d9692:	4c05      	ldr	r4, [pc, #20]	; (d96a8 <__cxa_atexit+0x18>)
   d9694:	4613      	mov	r3, r2
   d9696:	b12c      	cbz	r4, d96a4 <__cxa_atexit+0x14>
   d9698:	460a      	mov	r2, r1
   d969a:	4601      	mov	r1, r0
   d969c:	2002      	movs	r0, #2
   d969e:	f3af 8000 	nop.w
   d96a2:	bd10      	pop	{r4, pc}
   d96a4:	4620      	mov	r0, r4
   d96a6:	bd10      	pop	{r4, pc}
   d96a8:	00000000 	.word	0x00000000

000d96ac <memcpy>:
   d96ac:	b510      	push	{r4, lr}
   d96ae:	1e43      	subs	r3, r0, #1
   d96b0:	440a      	add	r2, r1
   d96b2:	4291      	cmp	r1, r2
   d96b4:	d004      	beq.n	d96c0 <memcpy+0x14>
   d96b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d96ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d96be:	e7f8      	b.n	d96b2 <memcpy+0x6>
   d96c0:	bd10      	pop	{r4, pc}

000d96c2 <memset>:
   d96c2:	4402      	add	r2, r0
   d96c4:	4603      	mov	r3, r0
   d96c6:	4293      	cmp	r3, r2
   d96c8:	d002      	beq.n	d96d0 <memset+0xe>
   d96ca:	f803 1b01 	strb.w	r1, [r3], #1
   d96ce:	e7fa      	b.n	d96c6 <memset+0x4>
   d96d0:	4770      	bx	lr
	...

000d96d4 <srand>:
   d96d4:	b538      	push	{r3, r4, r5, lr}
   d96d6:	4b12      	ldr	r3, [pc, #72]	; (d9720 <srand+0x4c>)
   d96d8:	681c      	ldr	r4, [r3, #0]
   d96da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d96dc:	4605      	mov	r5, r0
   d96de:	b9d3      	cbnz	r3, d9716 <srand+0x42>
   d96e0:	2018      	movs	r0, #24
   d96e2:	f7fc fb89 	bl	d5df8 <malloc>
   d96e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d96ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d96ec:	8003      	strh	r3, [r0, #0]
   d96ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d96f2:	8043      	strh	r3, [r0, #2]
   d96f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d96f8:	8083      	strh	r3, [r0, #4]
   d96fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d96fe:	80c3      	strh	r3, [r0, #6]
   d9700:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9704:	8103      	strh	r3, [r0, #8]
   d9706:	2305      	movs	r3, #5
   d9708:	8143      	strh	r3, [r0, #10]
   d970a:	230b      	movs	r3, #11
   d970c:	8183      	strh	r3, [r0, #12]
   d970e:	2201      	movs	r2, #1
   d9710:	2300      	movs	r3, #0
   d9712:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9718:	2200      	movs	r2, #0
   d971a:	611d      	str	r5, [r3, #16]
   d971c:	615a      	str	r2, [r3, #20]
   d971e:	bd38      	pop	{r3, r4, r5, pc}
   d9720:	2003e300 	.word	0x2003e300

000d9724 <strdup>:
   d9724:	4b02      	ldr	r3, [pc, #8]	; (d9730 <strdup+0xc>)
   d9726:	4601      	mov	r1, r0
   d9728:	6818      	ldr	r0, [r3, #0]
   d972a:	f000 b803 	b.w	d9734 <_strdup_r>
   d972e:	bf00      	nop
   d9730:	2003e300 	.word	0x2003e300

000d9734 <_strdup_r>:
   d9734:	b570      	push	{r4, r5, r6, lr}
   d9736:	4606      	mov	r6, r0
   d9738:	4608      	mov	r0, r1
   d973a:	460c      	mov	r4, r1
   d973c:	f000 f80d 	bl	d975a <strlen>
   d9740:	1c45      	adds	r5, r0, #1
   d9742:	4629      	mov	r1, r5
   d9744:	4630      	mov	r0, r6
   d9746:	f7fc fb77 	bl	d5e38 <_malloc_r>
   d974a:	4606      	mov	r6, r0
   d974c:	b118      	cbz	r0, d9756 <_strdup_r+0x22>
   d974e:	462a      	mov	r2, r5
   d9750:	4621      	mov	r1, r4
   d9752:	f7ff ffab 	bl	d96ac <memcpy>
   d9756:	4630      	mov	r0, r6
   d9758:	bd70      	pop	{r4, r5, r6, pc}

000d975a <strlen>:
   d975a:	4603      	mov	r3, r0
   d975c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9760:	2a00      	cmp	r2, #0
   d9762:	d1fb      	bne.n	d975c <strlen+0x2>
   d9764:	1a18      	subs	r0, r3, r0
   d9766:	3801      	subs	r0, #1
   d9768:	4770      	bx	lr

000d976a <link_code_end>:
	...

000d976c <dynalib_user>:
   d976c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d977c:	0000 0000                                   ....

000d9780 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d9788:	40b9 000d 40cd 000d 2020 7700 6f72 676e     .@...@..  .wrong
   d9798:	6320 6568 6b63 7553 216d 2121 0021 4d42      checkSum!!!!.BM
   d97a8:	3245 3038 7420 7365 0074 6553 6972 6c61     E280 test.Serial
   d97b8:	7320 6174 7472 4800 334d 3033 2058 6e69      start.HM330X in
   d97c8:	7469 6620 6961 656c 2164 2121 4300 756f     it failed!!!.Cou
   d97d8:	646c 6e20 746f 6620 6e69 2064 2061 6176     ld not find a va
   d97e8:	696c 2064 4d42 3645 3038 7320 6e65 6f73     lid BME680 senso
   d97f8:	2c72 6320 6568 6b63 7720 7269 6e69 2167     r, check wiring!
   d9808:	5400 6d65 6570 6172 7574 6572 3d20 0020     .Temperature = .
   d9818:	2a20 0043 7250 7365 7573 6572 3d20 0020      *C.Pressure = .
   d9828:	6820 6150 4100 7070 6f72 2e78 4120 746c      hPa.Approx. Alt
   d9838:	7469 6475 2065 203d 2000 006d 7548 696d     itude = . m.Humi
   d9848:	6964 7974 3d20 0020 2520 5400 6d65 6570     dity = . %.Tempe
   d9858:	6172 7574 6572 5000 6572 7373 7275 0065     rature.Pressure.
   d9868:	7548 696d 6964 7974 5000 324d 0035 6425     Humidity.PM25.%d
   d9878:	6500 766e 762d 6c61 0073 4d48 3333 5830     .env-vals.HM330X
   d9888:	7220 6165 2064 6572 7573 746c 6620 6961      read result fai
   d9898:	656c 2164 2121 5300 6174 7472 6e69 2067     led!!!.Starting 
   d98a8:	6944 7073 616c 0079 7250 6e69 6974 676e     Display.Printing
   d98b8:	4320 6e6f 6563 746e 6172 6974 6e6f 0073      Concentrations.
   d98c8:	4d50 2e32 2035 6144 6174 7300 6e65 6f73     PM2.5 Data.senso
   d98d8:	2072 756e 3a6d 0020 4d50 2e31 2030 6f63     r num: .PM1.0 co
   d98e8:	636e 6e65 7274 7461 6f69 286e 4643 313d     ncentration(CF=1
   d98f8:	532c 6174 646e 7261 2064 6170 7472 6369     ,Standard partic
   d9908:	6c75 7461 2065 616d 7474 7265 752c 696e     ulate matter,uni
   d9918:	3a74 6775 6d2f 2933 203a 5000 324d 352e     t:ug/m3): .PM2.5
   d9928:	6320 6e6f 6563 746e 6172 6974 6e6f 4328      concentration(C
   d9938:	3d46 2c31 7453 6e61 6164 6472 7020 7261     F=1,Standard par
   d9948:	6974 7563 616c 6574 6d20 7461 6574 2c72     ticulate matter,
   d9958:	6e75 7469 753a 2f67 336d 3a29 0020 4d50     unit:ug/m3): .PM
   d9968:	3031 6320 6e6f 6563 746e 6172 6974 6e6f     10 concentration
   d9978:	4328 3d46 2c31 7453 6e61 6164 6472 7020     (CF=1,Standard p
   d9988:	7261 6974 7563 616c 6574 6d20 7461 6574     articulate matte
   d9998:	2c72 6e75 7469 753a 2f67 336d 3a29 0020     r,unit:ug/m3): .
   d99a8:	4d50 2e31 2030 6f63 636e 6e65 7274 7461     PM1.0 concentrat
   d99b8:	6f69 286e 7441 6f6d 7073 6568 6972 2063     ion(Atmospheric 
   d99c8:	6e65 6976 6f72 6d6e 6e65 2c74 6e75 7469     environment,unit
   d99d8:	753a 2f67 336d 3a29 0020 4d50 2e32 2035     :ug/m3): .PM2.5 
   d99e8:	6f63 636e 6e65 7274 7461 6f69 286e 7441     concentration(At
   d99f8:	6f6d 7073 6568 6972 2063 6e65 6976 6f72     mospheric enviro
   d9a08:	6d6e 6e65 2c74 6e75 7469 753a 2f67 336d     nment,unit:ug/m3
   d9a18:	3a29 0020 4d50 3031 6320 6e6f 6563 746e     ): .PM10 concent
   d9a28:	6172 6974 6e6f 4128 6d74 736f 6870 7265     ration(Atmospher
   d9a38:	6369 6520 766e 7269 6e6f 656d 746e 752c     ic environment,u
   d9a48:	696e 3a74 6775 6d2f 2933 203a 0000 0000     nit:ug/m3): ....

000d9a58 <_ZTV10JsonBuffer>:
	...
   d9a60:	460d 000d 4629 000d                         .F..)F..

000d9a68 <_ZTV10JsonWriter>:
	...
   d9a70:	463d 000d 4651 000d 6c25 0075 3025 7834     =F..QF..%lu.%04x
   d9a80:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d9a90:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d9aa0:	2500 666c 0000 0201 0804 0010               .%lf........

000d9aac <_ZTVN5spark13EthernetClassE>:
	...
   d9ab4:	5eb7 000d 5ead 000d 5ea3 000d 5e99 000d     .^...^...^...^..
   d9ac4:	5e8d 000d 5e81 000d 5e75 000d 5e6d 000d     .^...^..u^..m^..
   d9ad4:	5e63 000d 5e59 000d 715d 000d               c^..Y^..]q..

000d9ae0 <_ZTV8SPIClass>:
	...
   d9ae8:	5ed5 000d 5ed7 000d                         .^...^..

000d9af0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9af0:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d9b00:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d9b10:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d9b20:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d9b30:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d9b40:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d9b50:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d9b60:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d9b70:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d9b80:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   d9b90:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   d9ba0:	6961 736c 3d20 0020 0a0d 6c00 006e 6e66     ails = ....ln.fn
   d9bb0:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
   d9bc0:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   d9bd0:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   d9be0:	006c 005a 2b25 3330 3a64 3025 7532 2500     l.Z.%+03d:%02u.%
   d9bf0:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d9c00:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d9c0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c14:	654d 000d 6553 000d 6597 000d 6561 000d     Me..Se...e..ae..
   d9c24:	654f 000d                                   Oe..

000d9c28 <_ZTV9IPAddress>:
	...
   d9c30:	6ae5 000d 6ad5 000d 6ad7 000d               .j...j...j..

000d9c3c <_ZTV9USBSerial>:
	...
   d9c44:	6bbd 000d 6c0d 000d 6c1b 000d 6151 000d     .k...l...l..Qa..
   d9c54:	6bf9 000d 6bbf 000d 6bd5 000d 6c07 000d     .k...k...k...l..
   d9c64:	6beb 000d 6bb9 000d                         .k...k..

000d9c6c <_ZTV11USARTSerial>:
	...
   d9c74:	6cc9 000d 6d19 000d 6d27 000d 6151 000d     .l...m..'m..Qa..
   d9c84:	6cdd 000d 6cff 000d 6ceb 000d 6d13 000d     .l...l...l...m..
   d9c94:	6ccb 000d 6ccf 000d                         .l...l..

000d9c9c <_ZTV7TwoWire>:
	...
   d9ca4:	6df5 000d 6e3f 000d 6e17 000d 6df7 000d     .m..?n...n...m..
   d9cb4:	6e1f 000d 6e27 000d 6e2f 000d 6e37 000d     .n..'n../n..7n..

000d9cc4 <_ZTVN5spark9MeshClassE>:
	...
   d9ccc:	6f5b 000d 6f51 000d 6f47 000d 6f3d 000d     [o..Qo..Go..=o..
   d9cdc:	6f31 000d 6f25 000d 6f19 000d 6f11 000d     1o..%o...o...o..
   d9cec:	6f07 000d 6efd 000d 715d 000d               .o...n..]q..

000d9cf8 <_ZTVN5spark9WiFiClassE>:
	...
   d9d00:	70d7 000d 70cd 000d 70c3 000d 7079 000d     .p...p...p..yp..
   d9d10:	70b7 000d 70ab 000d 709f 000d 7097 000d     .p...p...p...p..
   d9d20:	708d 000d 7083 000d 715d 000d               .p...p..]q..

000d9d2c <_ZTVN5spark12NetworkClassE>:
	...
   d9d34:	70f5 000d 70ff 000d 7109 000d 7113 000d     .p...p...q...q..
   d9d44:	711d 000d 7129 000d 7135 000d 7141 000d     .q..)q..5q..Aq..
   d9d54:	7149 000d 7153 000d 715d 000d               Iq..Sq..]q..

000d9d60 <_ZSt7nothrow>:
   d9d60:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000d9d70 <TWO52>:
   d9d70:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9d80 <__sf_fake_stdin>:
	...

000d9da0 <__sf_fake_stdout>:
	...

000d9dc0 <__sf_fake_stderr>:
	...

000d9de0 <link_const_variable_data_end>:
   d9de0:	000d45d1 	.word	0x000d45d1
   d9de4:	000d4601 	.word	0x000d4601
   d9de8:	000d4605 	.word	0x000d4605
   d9dec:	000d4609 	.word	0x000d4609
   d9df0:	000d48d9 	.word	0x000d48d9
   d9df4:	000d4911 	.word	0x000d4911
   d9df8:	000d498b 	.word	0x000d498b
   d9dfc:	000d598b 	.word	0x000d598b
   d9e00:	000d5ec1 	.word	0x000d5ec1
   d9e04:	000d609d 	.word	0x000d609d
   d9e08:	000d6129 	.word	0x000d6129
   d9e0c:	000d63b9 	.word	0x000d63b9
   d9e10:	000d63c9 	.word	0x000d63c9
   d9e14:	000d6421 	.word	0x000d6421
   d9e18:	000d7029 	.word	0x000d7029
   d9e1c:	000d70e1 	.word	0x000d70e1
   d9e20:	000d7229 	.word	0x000d7229
   d9e24:	000d7405 	.word	0x000d7405
   d9e28:	000d7489 	.word	0x000d7489
   d9e2c:	000d754d 	.word	0x000d754d
   d9e30:	000d7611 	.word	0x000d7611

000d9e34 <link_constructors_end>:
	...
