
c:/Users/IoTPa/Documents/jarvis/FunkyFunk2/target/1.5.2/argon/FunkyFunk2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001504  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5520  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e36c  000d5524  0001e36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000040c  2003e3e4  2003e3e4  0002e3e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d559c  000d559c  0002559c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d55c4  000d55c4  000255c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a68e1  00000000  00000000  000255c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c705  00000000  00000000  000cbea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000179a7  00000000  00000000  000d85ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d40  00000000  00000000  000eff55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003958  00000000  00000000  000f1c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ecf2  00000000  00000000  000f55ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d890  00000000  00000000  001242df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fdb0e  00000000  00000000  00141b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b69c  00000000  00000000  0023f680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f859 	bl	d50e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f85e 	bl	d50fa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e36c 	.word	0x2003e36c
   d4048:	000d5524 	.word	0x000d5524
   d404c:	2003e3e4 	.word	0x2003e3e4
   d4050:	2003e3e4 	.word	0x2003e3e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fb8d 	bl	d4778 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5514 	.word	0x000d5514
   d4080:	000d54dc 	.word	0x000d54dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f823 	bl	d40d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bb33 	b.w	d46fc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 b9bd 	b.w	d4414 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 b9bb 	b.w	d4414 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_Z3addii>:
  delay(3000);
}

int add(int x,int y) {
  return x+y;
}
   d40ae:	4408      	add	r0, r1
   d40b0:	4770      	bx	lr

000d40b2 <_Z3subii>:

int sub(int x,int y) {
  return x-y;
}
   d40b2:	1a40      	subs	r0, r0, r1
   d40b4:	4770      	bx	lr

000d40b6 <_Z4multii>:

int mult(int x,int y) {
  return x*y;
}
   d40b6:	4348      	muls	r0, r1
   d40b8:	4770      	bx	lr

000d40ba <_Z4diviii>:

int divi(int x,int y) {
  return x/y;
   d40ba:	fb90 f0f1 	sdiv	r0, r0, r1
   d40be:	4770      	bx	lr

000d40c0 <setup>:
//Declare global variables
int a,b;
int answer;
int i;

void setup() {
   d40c0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40c2:	f000 fc59 	bl	d4978 <_Z16_fetch_usbserialv>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   d40ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
int a,b;
int answer;
int i;

void setup() {
  Serial.begin(9600);
   d40ce:	f000 bc47 	b.w	d4960 <_ZN9USBSerial5beginEl>
	...

000d40d4 <loop>:
}

void loop() {
   d40d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  a = random(0,100);
   d40d8:	2164      	movs	r1, #100	; 0x64

void setup() {
  Serial.begin(9600);
}

void loop() {
   d40da:	b085      	sub	sp, #20
  a = random(0,100);
   d40dc:	2000      	movs	r0, #0
   d40de:	f000 fcfa 	bl	d4ad6 <_Z6randomii>
   d40e2:	4c1e      	ldr	r4, [pc, #120]	; (d415c <loop+0x88>)
  b = random(0,100);
  for(i=0;i<4;i++) {
   d40e4:	4e1e      	ldr	r6, [pc, #120]	; (d4160 <loop+0x8c>)
void setup() {
  Serial.begin(9600);
}

void loop() {
  a = random(0,100);
   d40e6:	6020      	str	r0, [r4, #0]
  b = random(0,100);
   d40e8:	2164      	movs	r1, #100	; 0x64
   d40ea:	2000      	movs	r0, #0
   d40ec:	f000 fcf3 	bl	d4ad6 <_Z6randomii>
   d40f0:	4d1c      	ldr	r5, [pc, #112]	; (d4164 <loop+0x90>)
  for(i=0;i<4;i++) {
    answer = funky[i](a,b);
   d40f2:	f8df 907c 	ldr.w	r9, [pc, #124]	; d4170 <loop+0x9c>
   d40f6:	f8df 807c 	ldr.w	r8, [pc, #124]	; d4174 <loop+0xa0>
  Serial.begin(9600);
}

void loop() {
  a = random(0,100);
  b = random(0,100);
   d40fa:	6028      	str	r0, [r5, #0]
  for(i=0;i<4;i++) {
   d40fc:	2300      	movs	r3, #0
   d40fe:	6033      	str	r3, [r6, #0]
   d4100:	4637      	mov	r7, r6
   d4102:	6833      	ldr	r3, [r6, #0]
   d4104:	2b03      	cmp	r3, #3
   d4106:	dc1b      	bgt.n	d4140 <loop+0x6c>
    answer = funky[i](a,b);
   d4108:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d410c:	6829      	ldr	r1, [r5, #0]
   d410e:	6820      	ldr	r0, [r4, #0]
   d4110:	4798      	blx	r3
   d4112:	f8c8 0000 	str.w	r0, [r8]
    Serial.printf("For function %i: a = %i and b = %i equals %i \n",i,a,b,answer);  
   d4116:	f000 fc2f 	bl	d4978 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d411a:	f8d8 3000 	ldr.w	r3, [r8]
   d411e:	9302      	str	r3, [sp, #8]
   d4120:	682b      	ldr	r3, [r5, #0]
   d4122:	9301      	str	r3, [sp, #4]
   d4124:	6823      	ldr	r3, [r4, #0]
   d4126:	9300      	str	r3, [sp, #0]
   d4128:	683b      	ldr	r3, [r7, #0]
   d412a:	4a0f      	ldr	r2, [pc, #60]	; (d4168 <loop+0x94>)
   d412c:	2100      	movs	r1, #0
   d412e:	f000 fa5a 	bl	d45e6 <_ZN5Print11printf_implEbPKcz>
    delay(250);
   d4132:	20fa      	movs	r0, #250	; 0xfa
   d4134:	f000 faa4 	bl	d4680 <delay>
}

void loop() {
  a = random(0,100);
  b = random(0,100);
  for(i=0;i<4;i++) {
   d4138:	683b      	ldr	r3, [r7, #0]
   d413a:	3301      	adds	r3, #1
   d413c:	603b      	str	r3, [r7, #0]
   d413e:	e7e0      	b.n	d4102 <loop+0x2e>
    answer = funky[i](a,b);
    Serial.printf("For function %i: a = %i and b = %i equals %i \n",i,a,b,answer);  
    delay(250);
  }
  Serial.printf("\n\n\n");
   d4140:	f000 fc1a 	bl	d4978 <_Z16_fetch_usbserialv>
   d4144:	4a09      	ldr	r2, [pc, #36]	; (d416c <loop+0x98>)
   d4146:	2100      	movs	r1, #0
   d4148:	f000 fa4d 	bl	d45e6 <_ZN5Print11printf_implEbPKcz>
  delay(3000);
   d414c:	f640 30b8 	movw	r0, #3000	; 0xbb8
}
   d4150:	b005      	add	sp, #20
   d4152:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    answer = funky[i](a,b);
    Serial.printf("For function %i: a = %i and b = %i equals %i \n",i,a,b,answer);  
    delay(250);
  }
  Serial.printf("\n\n\n");
  delay(3000);
   d4156:	f000 ba93 	b.w	d4680 <delay>
   d415a:	bf00      	nop
   d415c:	2003e3f0 	.word	0x2003e3f0
   d4160:	2003e3e8 	.word	0x2003e3e8
   d4164:	2003e3f4 	.word	0x2003e3f4
   d4168:	000d51f4 	.word	0x000d51f4
   d416c:	000d5223 	.word	0x000d5223
   d4170:	2003e36c 	.word	0x2003e36c
   d4174:	2003e3ec 	.word	0x2003e3ec

000d4178 <_GLOBAL__sub_I_funky>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4178:	f000 b810 	b.w	d419c <HAL_Pin_Map>

000d417c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d417c:	b508      	push	{r3, lr}
   d417e:	4b02      	ldr	r3, [pc, #8]	; (d4188 <netdb_freeaddrinfo+0xc>)
   d4180:	681b      	ldr	r3, [r3, #0]
   d4182:	689b      	ldr	r3, [r3, #8]
   d4184:	9301      	str	r3, [sp, #4]
   d4186:	bd08      	pop	{r3, pc}
   d4188:	00030268 	.word	0x00030268

000d418c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d418c:	b508      	push	{r3, lr}
   d418e:	4b02      	ldr	r3, [pc, #8]	; (d4198 <netdb_getaddrinfo+0xc>)
   d4190:	681b      	ldr	r3, [r3, #0]
   d4192:	68db      	ldr	r3, [r3, #12]
   d4194:	9301      	str	r3, [sp, #4]
   d4196:	bd08      	pop	{r3, pc}
   d4198:	00030268 	.word	0x00030268

000d419c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <HAL_Pin_Map+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	681b      	ldr	r3, [r3, #0]
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	0003022c 	.word	0x0003022c

000d41ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <HAL_RNG_GetRandomNumber+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	685b      	ldr	r3, [r3, #4]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030218 	.word	0x00030218

000d41bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	695b      	ldr	r3, [r3, #20]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	00030218 	.word	0x00030218

000d41cc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <os_thread_is_current+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	689b      	ldr	r3, [r3, #8]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	00030248 	.word	0x00030248

000d41dc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <os_thread_join+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	691b      	ldr	r3, [r3, #16]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	00030248 	.word	0x00030248

000d41ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <os_thread_cleanup+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	00030248 	.word	0x00030248

000d41fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <os_mutex_recursive_create+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	00030248 	.word	0x00030248

000d420c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <os_mutex_recursive_destroy+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	00030248 	.word	0x00030248

000d421c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <inet_inet_ntop+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	695b      	ldr	r3, [r3, #20]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030264 	.word	0x00030264

000d422c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_USART_Init+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	681b      	ldr	r3, [r3, #0]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003023c 	.word	0x0003023c

000d423c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_USART_Write_Data+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	68db      	ldr	r3, [r3, #12]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	0003023c 	.word	0x0003023c

000d424c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_USART_Available_Data+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	691b      	ldr	r3, [r3, #16]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	0003023c 	.word	0x0003023c

000d425c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_USART_Read_Data+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	695b      	ldr	r3, [r3, #20]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	0003023c 	.word	0x0003023c

000d426c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_USART_Peek_Data+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	699b      	ldr	r3, [r3, #24]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	0003023c 	.word	0x0003023c

000d427c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_USART_Flush_Data+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	69db      	ldr	r3, [r3, #28]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	0003023c 	.word	0x0003023c

000d428c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_USART_Available_Data_For_Write+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	0003023c 	.word	0x0003023c

000d429c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <HAL_USB_USART_Init+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	681b      	ldr	r3, [r3, #0]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	0003024c 	.word	0x0003024c

000d42ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <HAL_USB_USART_Begin+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	685b      	ldr	r3, [r3, #4]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	0003024c 	.word	0x0003024c

000d42bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <HAL_USB_USART_Available_Data+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	691b      	ldr	r3, [r3, #16]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	0003024c 	.word	0x0003024c

000d42cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	695b      	ldr	r3, [r3, #20]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	0003024c 	.word	0x0003024c

000d42dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_USB_USART_Receive_Data+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	699b      	ldr	r3, [r3, #24]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003024c 	.word	0x0003024c

000d42ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_USB_USART_Send_Data+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	69db      	ldr	r3, [r3, #28]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003024c 	.word	0x0003024c

000d42fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_USB_USART_Flush_Data+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6a1b      	ldr	r3, [r3, #32]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003024c 	.word	0x0003024c

000d430c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <set_system_mode+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	685b      	ldr	r3, [r3, #4]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030220 	.word	0x00030220

000d431c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <system_delay_ms+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030220 	.word	0x00030220

000d432c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b03      	ldr	r3, [pc, #12]	; (d433c <system_ctrl_set_app_request_handler+0x10>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4336:	9301      	str	r3, [sp, #4]
   d4338:	bd08      	pop	{r3, pc}
   d433a:	0000      	.short	0x0000
   d433c:	00030220 	.word	0x00030220

000d4340 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b03      	ldr	r3, [pc, #12]	; (d4350 <system_ctrl_set_result+0x10>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d434a:	9301      	str	r3, [sp, #4]
   d434c:	bd08      	pop	{r3, pc}
   d434e:	0000      	.short	0x0000
   d4350:	00030220 	.word	0x00030220

000d4354 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <network_connect+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	685b      	ldr	r3, [r3, #4]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030240 	.word	0x00030240

000d4364 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <network_connecting+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	689b      	ldr	r3, [r3, #8]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030240 	.word	0x00030240

000d4374 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <network_disconnect+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	68db      	ldr	r3, [r3, #12]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030240 	.word	0x00030240

000d4384 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <network_ready+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	691b      	ldr	r3, [r3, #16]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030240 	.word	0x00030240

000d4394 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <network_on+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	695b      	ldr	r3, [r3, #20]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030240 	.word	0x00030240

000d43a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <network_off+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	699b      	ldr	r3, [r3, #24]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030240 	.word	0x00030240

000d43b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <network_listen+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	69db      	ldr	r3, [r3, #28]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030240 	.word	0x00030240

000d43c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <network_listening+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6a1b      	ldr	r3, [r3, #32]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030240 	.word	0x00030240

000d43d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <network_set_listen_timeout+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030240 	.word	0x00030240

000d43e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <network_get_listen_timeout+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030240 	.word	0x00030240

000d43f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <spark_set_random_seed_from_cloud_handler+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030244 	.word	0x00030244

000d4404 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <malloc+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	681b      	ldr	r3, [r3, #0]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003021c 	.word	0x0003021c

000d4414 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <free+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	685b      	ldr	r3, [r3, #4]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003021c 	.word	0x0003021c

000d4424 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <vsnprintf+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003021c 	.word	0x0003021c

000d4434 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4434:	2200      	movs	r2, #0
   d4436:	4611      	mov	r1, r2
   d4438:	6840      	ldr	r0, [r0, #4]
   d443a:	f7ff bfc3 	b.w	d43c4 <network_listening>

000d443e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d443e:	2200      	movs	r2, #0
   d4440:	4611      	mov	r1, r2
   d4442:	6840      	ldr	r0, [r0, #4]
   d4444:	f7ff bfce 	b.w	d43e4 <network_get_listen_timeout>

000d4448 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4448:	2200      	movs	r2, #0
   d444a:	6840      	ldr	r0, [r0, #4]
   d444c:	f7ff bfc2 	b.w	d43d4 <network_set_listen_timeout>

000d4450 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4450:	2200      	movs	r2, #0
   d4452:	f081 0101 	eor.w	r1, r1, #1
   d4456:	6840      	ldr	r0, [r0, #4]
   d4458:	f7ff bfac 	b.w	d43b4 <network_listen>

000d445c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d445c:	2300      	movs	r3, #0
   d445e:	461a      	mov	r2, r3
   d4460:	4619      	mov	r1, r3
   d4462:	6840      	ldr	r0, [r0, #4]
   d4464:	f7ff bf9e 	b.w	d43a4 <network_off>

000d4468 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4468:	2300      	movs	r3, #0
   d446a:	461a      	mov	r2, r3
   d446c:	4619      	mov	r1, r3
   d446e:	6840      	ldr	r0, [r0, #4]
   d4470:	f7ff bf90 	b.w	d4394 <network_on>

000d4474 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4474:	2200      	movs	r2, #0
   d4476:	4611      	mov	r1, r2
   d4478:	6840      	ldr	r0, [r0, #4]
   d447a:	f7ff bf83 	b.w	d4384 <network_ready>

000d447e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d447e:	2200      	movs	r2, #0
   d4480:	4611      	mov	r1, r2
   d4482:	6840      	ldr	r0, [r0, #4]
   d4484:	f7ff bf6e 	b.w	d4364 <network_connecting>

000d4488 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4488:	2200      	movs	r2, #0
   d448a:	2102      	movs	r1, #2
   d448c:	6840      	ldr	r0, [r0, #4]
   d448e:	f7ff bf71 	b.w	d4374 <network_disconnect>

000d4492 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4492:	2300      	movs	r3, #0
   d4494:	461a      	mov	r2, r3
   d4496:	6840      	ldr	r0, [r0, #4]
   d4498:	f7ff bf5c 	b.w	d4354 <network_connect>

000d449c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d449c:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d449e:	2203      	movs	r2, #3
   d44a0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d44a2:	4a02      	ldr	r2, [pc, #8]	; (d44ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d44a4:	601a      	str	r2, [r3, #0]
   d44a6:	4770      	bx	lr
   d44a8:	2003e3f8 	.word	0x2003e3f8
   d44ac:	000d5230 	.word	0x000d5230

000d44b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d44b0:	b510      	push	{r4, lr}
   d44b2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d44b4:	6800      	ldr	r0, [r0, #0]
   d44b6:	b118      	cbz	r0, d44c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d44b8:	f7ff ffac 	bl	d4414 <free>
            wakeupSource_ = nullptr;
   d44bc:	2300      	movs	r3, #0
   d44be:	6023      	str	r3, [r4, #0]
   d44c0:	bd10      	pop	{r4, pc}

000d44c2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d44c2:	b510      	push	{r4, lr}
   d44c4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d44c6:	f7ff fff3 	bl	d44b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d44ca:	4620      	mov	r0, r4
   d44cc:	bd10      	pop	{r4, pc}
	...

000d44d0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d44d0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d44d2:	4c09      	ldr	r4, [pc, #36]	; (d44f8 <_GLOBAL__sub_I_System+0x28>)
   d44d4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d44d6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d44da:	6020      	str	r0, [r4, #0]
   d44dc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d44de:	71a0      	strb	r0, [r4, #6]
   d44e0:	8120      	strh	r0, [r4, #8]
   d44e2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d44e4:	f7ff ff12 	bl	d430c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d44e8:	4620      	mov	r0, r4
   d44ea:	4a04      	ldr	r2, [pc, #16]	; (d44fc <_GLOBAL__sub_I_System+0x2c>)
   d44ec:	4904      	ldr	r1, [pc, #16]	; (d4500 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d44ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d44f2:	f000 bc99 	b.w	d4e28 <__aeabi_atexit>
   d44f6:	bf00      	nop
   d44f8:	2003e400 	.word	0x2003e400
   d44fc:	2003e3e4 	.word	0x2003e3e4
   d4500:	000d44c3 	.word	0x000d44c3

000d4504 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4504:	b510      	push	{r4, lr}
   d4506:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4508:	6800      	ldr	r0, [r0, #0]
   d450a:	b108      	cbz	r0, d4510 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d450c:	f7ff fe7e 	bl	d420c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4510:	4620      	mov	r0, r4
   d4512:	bd10      	pop	{r4, pc}

000d4514 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4514:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4516:	4c06      	ldr	r4, [pc, #24]	; (d4530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4518:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d451a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d451c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d451e:	f7ff fe6d 	bl	d41fc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4522:	4620      	mov	r0, r4
   d4524:	4a03      	ldr	r2, [pc, #12]	; (d4534 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4526:	4904      	ldr	r1, [pc, #16]	; (d4538 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d452c:	f000 bc7c 	b.w	d4e28 <__aeabi_atexit>
   d4530:	2003e40c 	.word	0x2003e40c
   d4534:	2003e3e4 	.word	0x2003e3e4
   d4538:	000d4505 	.word	0x000d4505

000d453c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d453e:	4606      	mov	r6, r0
   d4540:	460d      	mov	r5, r1
   d4542:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4544:	2400      	movs	r4, #0
  while (size--) {
   d4546:	42bd      	cmp	r5, r7
   d4548:	d00c      	beq.n	d4564 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d454a:	6833      	ldr	r3, [r6, #0]
   d454c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4550:	689b      	ldr	r3, [r3, #8]
   d4552:	4630      	mov	r0, r6
   d4554:	4798      	blx	r3
     if (chunk>=0)
   d4556:	2800      	cmp	r0, #0
   d4558:	db01      	blt.n	d455e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d455a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d455c:	e7f3      	b.n	d4546 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d455e:	2c00      	cmp	r4, #0
   d4560:	bf08      	it	eq
   d4562:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4564:	4620      	mov	r0, r4
   d4566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4568 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4568:	b570      	push	{r4, r5, r6, lr}
   d456a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d456c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d456e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4570:	b149      	cbz	r1, d4586 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4572:	f000 fe2d 	bl	d51d0 <strlen>
   d4576:	682b      	ldr	r3, [r5, #0]
   d4578:	4602      	mov	r2, r0
   d457a:	4621      	mov	r1, r4
   d457c:	4628      	mov	r0, r5
   d457e:	68db      	ldr	r3, [r3, #12]
    }
   d4580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4584:	4718      	bx	r3
    }
   d4586:	bd70      	pop	{r4, r5, r6, pc}

000d4588 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4588:	6803      	ldr	r3, [r0, #0]
   d458a:	689b      	ldr	r3, [r3, #8]
   d458c:	4718      	bx	r3

000d458e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d458e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4590:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4592:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4594:	f7ff fff8 	bl	d4588 <_ZN5Print5printEc>
  n += print('\n');
   d4598:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d459a:	4604      	mov	r4, r0
  n += print('\n');
   d459c:	4628      	mov	r0, r5
   d459e:	f7ff fff3 	bl	d4588 <_ZN5Print5printEc>
  return n;
}
   d45a2:	4420      	add	r0, r4
   d45a4:	bd38      	pop	{r3, r4, r5, pc}

000d45a6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d45a6:	b530      	push	{r4, r5, lr}
   d45a8:	b08b      	sub	sp, #44	; 0x2c
   d45aa:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d45ac:	2100      	movs	r1, #0
   d45ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d45b2:	2a01      	cmp	r2, #1
   d45b4:	bf98      	it	ls
   d45b6:	220a      	movls	r2, #10
   d45b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d45bc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d45c0:	fb05 3312 	mls	r3, r5, r2, r3
   d45c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d45c8:	2b09      	cmp	r3, #9
   d45ca:	bf94      	ite	ls
   d45cc:	3330      	addls	r3, #48	; 0x30
   d45ce:	3337      	addhi	r3, #55	; 0x37
   d45d0:	b2db      	uxtb	r3, r3
   d45d2:	4621      	mov	r1, r4
   d45d4:	f804 3901 	strb.w	r3, [r4], #-1
   d45d8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d45da:	2d00      	cmp	r5, #0
   d45dc:	d1ee      	bne.n	d45bc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d45de:	f7ff ffc3 	bl	d4568 <_ZN5Print5writeEPKc>
}
   d45e2:	b00b      	add	sp, #44	; 0x2c
   d45e4:	bd30      	pop	{r4, r5, pc}

000d45e6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d45e6:	b40c      	push	{r2, r3}
   d45e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d45ec:	b087      	sub	sp, #28
   d45ee:	af00      	add	r7, sp, #0
   d45f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d45f4:	4605      	mov	r5, r0
   d45f6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d45fa:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d45fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d45fe:	4623      	mov	r3, r4
   d4600:	464a      	mov	r2, r9
   d4602:	2114      	movs	r1, #20
   d4604:	1d38      	adds	r0, r7, #4
   d4606:	f7ff ff0d 	bl	d4424 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d460a:	2813      	cmp	r0, #19
   d460c:	d805      	bhi.n	d461a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d460e:	1d39      	adds	r1, r7, #4
   d4610:	4628      	mov	r0, r5
   d4612:	f7ff ffa9 	bl	d4568 <_ZN5Print5writeEPKc>
   d4616:	4604      	mov	r4, r0
   d4618:	e013      	b.n	d4642 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d461a:	f100 0308 	add.w	r3, r0, #8
   d461e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4622:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4624:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4628:	1c41      	adds	r1, r0, #1
   d462a:	4623      	mov	r3, r4
   d462c:	464a      	mov	r2, r9
   d462e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4630:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4632:	f7ff fef7 	bl	d4424 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4636:	4669      	mov	r1, sp
   d4638:	4628      	mov	r0, r5
   d463a:	f7ff ff95 	bl	d4568 <_ZN5Print5writeEPKc>
   d463e:	4604      	mov	r4, r0
   d4640:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4642:	b11e      	cbz	r6, d464c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4644:	4628      	mov	r0, r5
   d4646:	f7ff ffa2 	bl	d458e <_ZN5Print7printlnEv>
   d464a:	4404      	add	r4, r0
    return n;
}
   d464c:	4620      	mov	r0, r4
   d464e:	371c      	adds	r7, #28
   d4650:	46bd      	mov	sp, r7
   d4652:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4656:	b002      	add	sp, #8
   d4658:	4770      	bx	lr
	...

000d465c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d465c:	4b01      	ldr	r3, [pc, #4]	; (d4664 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d465e:	4a02      	ldr	r2, [pc, #8]	; (d4668 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4660:	601a      	str	r2, [r3, #0]
   d4662:	4770      	bx	lr
   d4664:	2003e410 	.word	0x2003e410
   d4668:	000d52cf 	.word	0x000d52cf

000d466c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d466c:	4b02      	ldr	r3, [pc, #8]	; (d4678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d466e:	681a      	ldr	r2, [r3, #0]
   d4670:	4b02      	ldr	r3, [pc, #8]	; (d467c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4672:	601a      	str	r2, [r3, #0]
   d4674:	4770      	bx	lr
   d4676:	bf00      	nop
   d4678:	2003e37c 	.word	0x2003e37c
   d467c:	2003e414 	.word	0x2003e414

000d4680 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4680:	2100      	movs	r1, #0
   d4682:	f7ff be4b 	b.w	d431c <system_delay_ms>

000d4686 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4686:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4688:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d468a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d468c:	b113      	cbz	r3, d4694 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d468e:	2203      	movs	r2, #3
   d4690:	4601      	mov	r1, r0
   d4692:	4798      	blx	r3
    }
   d4694:	4620      	mov	r0, r4
   d4696:	bd10      	pop	{r4, pc}

000d4698 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4698:	b510      	push	{r4, lr}
   d469a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d469c:	f7ff fff3 	bl	d4686 <_ZNSt14_Function_baseD1Ev>
   d46a0:	4620      	mov	r0, r4
   d46a2:	bd10      	pop	{r4, pc}

000d46a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d46a4:	4803      	ldr	r0, [pc, #12]	; (d46b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d46a6:	4a04      	ldr	r2, [pc, #16]	; (d46b8 <_GLOBAL__sub_I_RGB+0x14>)
   d46a8:	4904      	ldr	r1, [pc, #16]	; (d46bc <_GLOBAL__sub_I_RGB+0x18>)
   d46aa:	2300      	movs	r3, #0
   d46ac:	6083      	str	r3, [r0, #8]
   d46ae:	f000 bbbb 	b.w	d4e28 <__aeabi_atexit>
   d46b2:	bf00      	nop
   d46b4:	2003e418 	.word	0x2003e418
   d46b8:	2003e3e4 	.word	0x2003e3e4
   d46bc:	000d4699 	.word	0x000d4699

000d46c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d46c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d46c2:	4b0c      	ldr	r3, [pc, #48]	; (d46f4 <serialEventRun+0x34>)
   d46c4:	b133      	cbz	r3, d46d4 <serialEventRun+0x14>
   d46c6:	f000 f957 	bl	d4978 <_Z16_fetch_usbserialv>
   d46ca:	6803      	ldr	r3, [r0, #0]
   d46cc:	691b      	ldr	r3, [r3, #16]
   d46ce:	4798      	blx	r3
   d46d0:	2800      	cmp	r0, #0
   d46d2:	dc09      	bgt.n	d46e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d46d4:	4b08      	ldr	r3, [pc, #32]	; (d46f8 <serialEventRun+0x38>)
   d46d6:	b163      	cbz	r3, d46f2 <serialEventRun+0x32>
   d46d8:	f000 f9cc 	bl	d4a74 <_Z22__fetch_global_Serial1v>
   d46dc:	6803      	ldr	r3, [r0, #0]
   d46de:	691b      	ldr	r3, [r3, #16]
   d46e0:	4798      	blx	r3
   d46e2:	2800      	cmp	r0, #0
   d46e4:	dc03      	bgt.n	d46ee <serialEventRun+0x2e>
   d46e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d46e8:	f3af 8000 	nop.w
   d46ec:	e7f2      	b.n	d46d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d46ee:	f3af 8000 	nop.w
   d46f2:	bd08      	pop	{r3, pc}
	...

000d46fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d46fc:	b508      	push	{r3, lr}
	serialEventRun();
   d46fe:	f7ff ffdf 	bl	d46c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4702:	f7ff fd5b 	bl	d41bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4706:	4b01      	ldr	r3, [pc, #4]	; (d470c <_post_loop+0x10>)
   d4708:	6018      	str	r0, [r3, #0]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	2003e74c 	.word	0x2003e74c

000d4710 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4710:	4802      	ldr	r0, [pc, #8]	; (d471c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4712:	4a03      	ldr	r2, [pc, #12]	; (d4720 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4714:	4903      	ldr	r1, [pc, #12]	; (d4724 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4716:	1a12      	subs	r2, r2, r0
   d4718:	f000 bce4 	b.w	d50e4 <memcpy>
   d471c:	2003f400 	.word	0x2003f400
   d4720:	2003f404 	.word	0x2003f404
   d4724:	000d5520 	.word	0x000d5520

000d4728 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4728:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d472a:	2300      	movs	r3, #0
   d472c:	9300      	str	r3, [sp, #0]
   d472e:	461a      	mov	r2, r3
   d4730:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4734:	f7ff fe04 	bl	d4340 <system_ctrl_set_result>
}
   d4738:	b003      	add	sp, #12
   d473a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4740 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4740:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4742:	8843      	ldrh	r3, [r0, #2]
   d4744:	2b0a      	cmp	r3, #10
   d4746:	d008      	beq.n	d475a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4748:	2b50      	cmp	r3, #80	; 0x50
   d474a:	d109      	bne.n	d4760 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d474c:	4b09      	ldr	r3, [pc, #36]	; (d4774 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d474e:	681b      	ldr	r3, [r3, #0]
   d4750:	b13b      	cbz	r3, d4762 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4752:	b003      	add	sp, #12
   d4754:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4758:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d475a:	f7ff ffe5 	bl	d4728 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d475e:	e006      	b.n	d476e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4760:	2300      	movs	r3, #0
   d4762:	9300      	str	r3, [sp, #0]
   d4764:	461a      	mov	r2, r3
   d4766:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d476a:	f7ff fde9 	bl	d4340 <system_ctrl_set_result>
        break;
    }
}
   d476e:	b003      	add	sp, #12
   d4770:	f85d fb04 	ldr.w	pc, [sp], #4
   d4774:	2003e428 	.word	0x2003e428

000d4778 <module_user_init_hook>:

void module_user_init_hook()
{
   d4778:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d477a:	4c10      	ldr	r4, [pc, #64]	; (d47bc <module_user_init_hook+0x44>)
   d477c:	4d10      	ldr	r5, [pc, #64]	; (d47c0 <module_user_init_hook+0x48>)
   d477e:	6823      	ldr	r3, [r4, #0]
   d4780:	42ab      	cmp	r3, r5
   d4782:	4b10      	ldr	r3, [pc, #64]	; (d47c4 <module_user_init_hook+0x4c>)
   d4784:	bf0c      	ite	eq
   d4786:	2201      	moveq	r2, #1
   d4788:	2200      	movne	r2, #0
   d478a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d478c:	d002      	beq.n	d4794 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d478e:	f7ff ffbf 	bl	d4710 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4792:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4794:	f7ff fd0a 	bl	d41ac <HAL_RNG_GetRandomNumber>
   d4798:	4604      	mov	r4, r0
    srand(seed);
   d479a:	f000 fcb7 	bl	d510c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d479e:	4b0a      	ldr	r3, [pc, #40]	; (d47c8 <module_user_init_hook+0x50>)
   d47a0:	b113      	cbz	r3, d47a8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d47a2:	4620      	mov	r0, r4
   d47a4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d47a8:	2100      	movs	r1, #0
   d47aa:	4807      	ldr	r0, [pc, #28]	; (d47c8 <module_user_init_hook+0x50>)
   d47ac:	f7ff fe22 	bl	d43f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d47b0:	2100      	movs	r1, #0
   d47b2:	4806      	ldr	r0, [pc, #24]	; (d47cc <module_user_init_hook+0x54>)
}
   d47b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d47b8:	f7ff bdb8 	b.w	d432c <system_ctrl_set_app_request_handler>
   d47bc:	2003f400 	.word	0x2003f400
   d47c0:	9a271c1e 	.word	0x9a271c1e
   d47c4:	2003e42c 	.word	0x2003e42c
   d47c8:	00000000 	.word	0x00000000
   d47cc:	000d4741 	.word	0x000d4741

000d47d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d47d0:	4770      	bx	lr

000d47d2 <_ZN9IPAddressD0Ev>:
   d47d2:	b510      	push	{r4, lr}
   d47d4:	2118      	movs	r1, #24
   d47d6:	4604      	mov	r4, r0
   d47d8:	f000 fb2b 	bl	d4e32 <_ZdlPvj>
   d47dc:	4620      	mov	r0, r4
   d47de:	bd10      	pop	{r4, pc}

000d47e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47e2:	7d03      	ldrb	r3, [r0, #20]
   d47e4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47e6:	b08d      	sub	sp, #52	; 0x34
   d47e8:	460e      	mov	r6, r1
   d47ea:	f100 0704 	add.w	r7, r0, #4
   d47ee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47f2:	d002      	beq.n	d47fa <_ZNK9IPAddress7printToER5Print+0x1a>
   d47f4:	f100 0508 	add.w	r5, r0, #8
   d47f8:	e018      	b.n	d482c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47fa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47fc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47fe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4802:	232f      	movs	r3, #47	; 0x2f
   d4804:	462a      	mov	r2, r5
   d4806:	200a      	movs	r0, #10
   d4808:	f7ff fd08 	bl	d421c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d480c:	4628      	mov	r0, r5
   d480e:	f000 fcdf 	bl	d51d0 <strlen>
   d4812:	6833      	ldr	r3, [r6, #0]
   d4814:	4602      	mov	r2, r0
   d4816:	68db      	ldr	r3, [r3, #12]
   d4818:	4629      	mov	r1, r5
   d481a:	4630      	mov	r0, r6
   d481c:	4798      	blx	r3
   d481e:	e00f      	b.n	d4840 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4820:	b124      	cbz	r4, d482c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4822:	212e      	movs	r1, #46	; 0x2e
   d4824:	4630      	mov	r0, r6
   d4826:	f7ff feaf 	bl	d4588 <_ZN5Print5printEc>
   d482a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d482c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4830:	220a      	movs	r2, #10
   d4832:	4630      	mov	r0, r6
   d4834:	f7ff feb7 	bl	d45a6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4838:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d483a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d483c:	d1f0      	bne.n	d4820 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d483e:	4620      	mov	r0, r4
    }
    return n;
}
   d4840:	b00d      	add	sp, #52	; 0x34
   d4842:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4844 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4844:	b510      	push	{r4, lr}
   d4846:	4b05      	ldr	r3, [pc, #20]	; (d485c <_ZN9IPAddressC1Ev+0x18>)
   d4848:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d484a:	2211      	movs	r2, #17
   d484c:	f840 3b04 	str.w	r3, [r0], #4
   d4850:	2100      	movs	r1, #0
   d4852:	f000 fc52 	bl	d50fa <memset>
{
    clear();
}
   d4856:	4620      	mov	r0, r4
   d4858:	bd10      	pop	{r4, pc}
   d485a:	bf00      	nop
   d485c:	000d5370 	.word	0x000d5370

000d4860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4860:	4603      	mov	r3, r0
   d4862:	4a07      	ldr	r2, [pc, #28]	; (d4880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4864:	b510      	push	{r4, lr}
   d4866:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d486a:	f101 0210 	add.w	r2, r1, #16
   d486e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4872:	f843 4b04 	str.w	r4, [r3], #4
   d4876:	4291      	cmp	r1, r2
   d4878:	d1f9      	bne.n	d486e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d487a:	780a      	ldrb	r2, [r1, #0]
   d487c:	701a      	strb	r2, [r3, #0]
}
   d487e:	bd10      	pop	{r4, pc}
   d4880:	000d5370 	.word	0x000d5370

000d4884 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4884:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4886:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d488a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d488e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4892:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4896:	2304      	movs	r3, #4
   d4898:	6041      	str	r1, [r0, #4]
   d489a:	7503      	strb	r3, [r0, #20]
   d489c:	bd10      	pop	{r4, pc}

000d489e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d489e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d48a0:	780d      	ldrb	r5, [r1, #0]
   d48a2:	788b      	ldrb	r3, [r1, #2]
   d48a4:	784a      	ldrb	r2, [r1, #1]
   d48a6:	78c9      	ldrb	r1, [r1, #3]
   d48a8:	9100      	str	r1, [sp, #0]
   d48aa:	4629      	mov	r1, r5
   d48ac:	f7ff ffea 	bl	d4884 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d48b0:	b003      	add	sp, #12
   d48b2:	bd30      	pop	{r4, r5, pc}

000d48b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d48b4:	7441      	strb	r1, [r0, #17]
   d48b6:	4770      	bx	lr

000d48b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d48b8:	4770      	bx	lr

000d48ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d48ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d48bc:	2100      	movs	r1, #0
   d48be:	7c00      	ldrb	r0, [r0, #16]
   d48c0:	f7ff fd0c 	bl	d42dc <HAL_USB_USART_Receive_Data>
}
   d48c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d48c8:	bf28      	it	cs
   d48ca:	f04f 30ff 	movcs.w	r0, #4294967295
   d48ce:	bd08      	pop	{r3, pc}

000d48d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d48d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d48d2:	2101      	movs	r1, #1
   d48d4:	7c00      	ldrb	r0, [r0, #16]
   d48d6:	f7ff fd01 	bl	d42dc <HAL_USB_USART_Receive_Data>
}
   d48da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d48de:	bf28      	it	cs
   d48e0:	f04f 30ff 	movcs.w	r0, #4294967295
   d48e4:	bd08      	pop	{r3, pc}

000d48e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d48e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d48e8:	7c00      	ldrb	r0, [r0, #16]
   d48ea:	f7ff fcef 	bl	d42cc <HAL_USB_USART_Available_Data_For_Write>
}
   d48ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d48f2:	bd08      	pop	{r3, pc}

000d48f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d48f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d48f6:	7c00      	ldrb	r0, [r0, #16]
   d48f8:	f7ff fce0 	bl	d42bc <HAL_USB_USART_Available_Data>
}
   d48fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4900:	bd08      	pop	{r3, pc}

000d4902 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4902:	7c00      	ldrb	r0, [r0, #16]
   d4904:	f7ff bcfa 	b.w	d42fc <HAL_USB_USART_Flush_Data>

000d4908 <_ZN9USBSerialD0Ev>:
   d4908:	b510      	push	{r4, lr}
   d490a:	2114      	movs	r1, #20
   d490c:	4604      	mov	r4, r0
   d490e:	f000 fa90 	bl	d4e32 <_ZdlPvj>
   d4912:	4620      	mov	r0, r4
   d4914:	bd10      	pop	{r4, pc}

000d4916 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4916:	b538      	push	{r3, r4, r5, lr}
   d4918:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d491a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d491c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d491e:	f7ff fcd5 	bl	d42cc <HAL_USB_USART_Available_Data_For_Write>
   d4922:	2800      	cmp	r0, #0
   d4924:	dc01      	bgt.n	d492a <_ZN9USBSerial5writeEh+0x14>
   d4926:	7c60      	ldrb	r0, [r4, #17]
   d4928:	b128      	cbz	r0, d4936 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d492a:	4629      	mov	r1, r5
   d492c:	7c20      	ldrb	r0, [r4, #16]
   d492e:	f7ff fcdd 	bl	d42ec <HAL_USB_USART_Send_Data>
   d4932:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4936:	bd38      	pop	{r3, r4, r5, pc}

000d4938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4938:	b510      	push	{r4, lr}
   d493a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d493c:	2300      	movs	r3, #0
   d493e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4944:	60a3      	str	r3, [r4, #8]
   d4946:	4b05      	ldr	r3, [pc, #20]	; (d495c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4948:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d494a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d494c:	4608      	mov	r0, r1
{
  _serial = serial;
   d494e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4950:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4952:	4611      	mov	r1, r2
   d4954:	f7ff fca2 	bl	d429c <HAL_USB_USART_Init>
}
   d4958:	4620      	mov	r0, r4
   d495a:	bd10      	pop	{r4, pc}
   d495c:	000d5384 	.word	0x000d5384

000d4960 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4960:	2200      	movs	r2, #0
   d4962:	7c00      	ldrb	r0, [r0, #16]
   d4964:	f7ff bca2 	b.w	d42ac <HAL_USB_USART_Begin>

000d4968 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4968:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d496a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d496c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d496e:	2100      	movs	r1, #0
   d4970:	f000 fbc3 	bl	d50fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4974:	4620      	mov	r0, r4
   d4976:	bd10      	pop	{r4, pc}

000d4978 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4978:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d497a:	4d0e      	ldr	r5, [pc, #56]	; (d49b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d497c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d497e:	a801      	add	r0, sp, #4
   d4980:	f7ff fff2 	bl	d4968 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4984:	6829      	ldr	r1, [r5, #0]
   d4986:	f011 0401 	ands.w	r4, r1, #1
   d498a:	d110      	bne.n	d49ae <_Z16_fetch_usbserialv+0x36>
   d498c:	4628      	mov	r0, r5
   d498e:	f7ff fb86 	bl	d409e <__cxa_guard_acquire>
   d4992:	b160      	cbz	r0, d49ae <_Z16_fetch_usbserialv+0x36>
   d4994:	aa01      	add	r2, sp, #4
   d4996:	4621      	mov	r1, r4
   d4998:	4807      	ldr	r0, [pc, #28]	; (d49b8 <_Z16_fetch_usbserialv+0x40>)
   d499a:	f7ff ffcd 	bl	d4938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d499e:	4628      	mov	r0, r5
   d49a0:	f7ff fb82 	bl	d40a8 <__cxa_guard_release>
   d49a4:	4a05      	ldr	r2, [pc, #20]	; (d49bc <_Z16_fetch_usbserialv+0x44>)
   d49a6:	4906      	ldr	r1, [pc, #24]	; (d49c0 <_Z16_fetch_usbserialv+0x48>)
   d49a8:	4803      	ldr	r0, [pc, #12]	; (d49b8 <_Z16_fetch_usbserialv+0x40>)
   d49aa:	f000 fa3d 	bl	d4e28 <__aeabi_atexit>
	return _usbserial;
}
   d49ae:	4802      	ldr	r0, [pc, #8]	; (d49b8 <_Z16_fetch_usbserialv+0x40>)
   d49b0:	b007      	add	sp, #28
   d49b2:	bd30      	pop	{r4, r5, pc}
   d49b4:	2003e430 	.word	0x2003e430
   d49b8:	2003e434 	.word	0x2003e434
   d49bc:	2003e3e4 	.word	0x2003e3e4
   d49c0:	000d48b9 	.word	0x000d48b9

000d49c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d49c4:	4770      	bx	lr

000d49c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d49c6:	7441      	strb	r1, [r0, #17]
   d49c8:	4770      	bx	lr

000d49ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d49ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d49cc:	7c00      	ldrb	r0, [r0, #16]
   d49ce:	f7ff fc5d 	bl	d428c <HAL_USART_Available_Data_For_Write>
}
   d49d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49d6:	bd08      	pop	{r3, pc}

000d49d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d49d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d49da:	7c00      	ldrb	r0, [r0, #16]
   d49dc:	f7ff fc36 	bl	d424c <HAL_USART_Available_Data>
}
   d49e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49e4:	bd08      	pop	{r3, pc}

000d49e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d49e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d49e8:	7c00      	ldrb	r0, [r0, #16]
   d49ea:	f7ff fc3f 	bl	d426c <HAL_USART_Peek_Data>
}
   d49ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d49f2:	bf28      	it	cs
   d49f4:	f04f 30ff 	movcs.w	r0, #4294967295
   d49f8:	bd08      	pop	{r3, pc}

000d49fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d49fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d49fc:	7c00      	ldrb	r0, [r0, #16]
   d49fe:	f7ff fc2d 	bl	d425c <HAL_USART_Read_Data>
}
   d4a02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a06:	bf28      	it	cs
   d4a08:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a0c:	bd08      	pop	{r3, pc}

000d4a0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4a0e:	7c00      	ldrb	r0, [r0, #16]
   d4a10:	f7ff bc34 	b.w	d427c <HAL_USART_Flush_Data>

000d4a14 <_ZN11USARTSerialD0Ev>:
   d4a14:	b510      	push	{r4, lr}
   d4a16:	2114      	movs	r1, #20
   d4a18:	4604      	mov	r4, r0
   d4a1a:	f000 fa0a 	bl	d4e32 <_ZdlPvj>
   d4a1e:	4620      	mov	r0, r4
   d4a20:	bd10      	pop	{r4, pc}

000d4a22 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4a22:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4a24:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4a26:	4604      	mov	r4, r0
   d4a28:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4a2a:	b925      	cbnz	r5, d4a36 <_ZN11USARTSerial5writeEh+0x14>
   d4a2c:	7c00      	ldrb	r0, [r0, #16]
   d4a2e:	f7ff fc2d 	bl	d428c <HAL_USART_Available_Data_For_Write>
   d4a32:	2800      	cmp	r0, #0
   d4a34:	dd05      	ble.n	d4a42 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4a36:	4631      	mov	r1, r6
   d4a38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4a3e:	f7ff bbfd 	b.w	d423c <HAL_USART_Write_Data>
  }
  return 0;
}
   d4a42:	4628      	mov	r0, r5
   d4a44:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4a48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4a48:	b510      	push	{r4, lr}
   d4a4a:	4604      	mov	r4, r0
   d4a4c:	4608      	mov	r0, r1
   d4a4e:	4611      	mov	r1, r2
   d4a50:	2200      	movs	r2, #0
   d4a52:	6062      	str	r2, [r4, #4]
   d4a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a58:	60a2      	str	r2, [r4, #8]
   d4a5a:	4a05      	ldr	r2, [pc, #20]	; (d4a70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4a5c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4a5e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4a60:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4a62:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4a64:	461a      	mov	r2, r3
   d4a66:	f7ff fbe1 	bl	d422c <HAL_USART_Init>
}
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	bd10      	pop	{r4, pc}
   d4a6e:	bf00      	nop
   d4a70:	000d53b4 	.word	0x000d53b4

000d4a74 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4a74:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4a76:	4d0c      	ldr	r5, [pc, #48]	; (d4aa8 <_Z22__fetch_global_Serial1v+0x34>)
   d4a78:	6829      	ldr	r1, [r5, #0]
   d4a7a:	f011 0401 	ands.w	r4, r1, #1
   d4a7e:	d111      	bne.n	d4aa4 <_Z22__fetch_global_Serial1v+0x30>
   d4a80:	4628      	mov	r0, r5
   d4a82:	f7ff fb0c 	bl	d409e <__cxa_guard_acquire>
   d4a86:	b168      	cbz	r0, d4aa4 <_Z22__fetch_global_Serial1v+0x30>
   d4a88:	4a08      	ldr	r2, [pc, #32]	; (d4aac <_Z22__fetch_global_Serial1v+0x38>)
   d4a8a:	4b09      	ldr	r3, [pc, #36]	; (d4ab0 <_Z22__fetch_global_Serial1v+0x3c>)
   d4a8c:	4809      	ldr	r0, [pc, #36]	; (d4ab4 <_Z22__fetch_global_Serial1v+0x40>)
   d4a8e:	4621      	mov	r1, r4
   d4a90:	f7ff ffda 	bl	d4a48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4a94:	4628      	mov	r0, r5
   d4a96:	f7ff fb07 	bl	d40a8 <__cxa_guard_release>
   d4a9a:	4a07      	ldr	r2, [pc, #28]	; (d4ab8 <_Z22__fetch_global_Serial1v+0x44>)
   d4a9c:	4907      	ldr	r1, [pc, #28]	; (d4abc <_Z22__fetch_global_Serial1v+0x48>)
   d4a9e:	4805      	ldr	r0, [pc, #20]	; (d4ab4 <_Z22__fetch_global_Serial1v+0x40>)
   d4aa0:	f000 f9c2 	bl	d4e28 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4aa4:	4803      	ldr	r0, [pc, #12]	; (d4ab4 <_Z22__fetch_global_Serial1v+0x40>)
   d4aa6:	bd38      	pop	{r3, r4, r5, pc}
   d4aa8:	2003e4e0 	.word	0x2003e4e0
   d4aac:	2003e4e4 	.word	0x2003e4e4
   d4ab0:	2003e45c 	.word	0x2003e45c
   d4ab4:	2003e448 	.word	0x2003e448
   d4ab8:	2003e3e4 	.word	0x2003e3e4
   d4abc:	000d49c5 	.word	0x000d49c5

000d4ac0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d4ac0:	b510      	push	{r4, lr}
  if (0 == max) {
   d4ac2:	4604      	mov	r4, r0
   d4ac4:	b130      	cbz	r0, d4ad4 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d4ac6:	f000 fb49 	bl	d515c <rand>
   d4aca:	fb90 f3f4 	sdiv	r3, r0, r4
   d4ace:	fb03 0014 	mls	r0, r3, r4, r0
   d4ad2:	bd10      	pop	{r4, pc}
}
   d4ad4:	bd10      	pop	{r4, pc}

000d4ad6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d4ad6:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d4ad8:	b510      	push	{r4, lr}
   d4ada:	4604      	mov	r4, r0
  if (min >= max) {
   d4adc:	da04      	bge.n	d4ae8 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d4ade:	1a08      	subs	r0, r1, r0
   d4ae0:	f7ff ffee 	bl	d4ac0 <_Z6randomi>
   d4ae4:	4420      	add	r0, r4
   d4ae6:	bd10      	pop	{r4, pc}
}
   d4ae8:	bd10      	pop	{r4, pc}

000d4aea <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4aea:	2200      	movs	r2, #0
   d4aec:	4611      	mov	r1, r2
   d4aee:	6840      	ldr	r0, [r0, #4]
   d4af0:	f7ff bc68 	b.w	d43c4 <network_listening>

000d4af4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4af4:	2200      	movs	r2, #0
   d4af6:	4611      	mov	r1, r2
   d4af8:	6840      	ldr	r0, [r0, #4]
   d4afa:	f7ff bc73 	b.w	d43e4 <network_get_listen_timeout>

000d4afe <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4afe:	2200      	movs	r2, #0
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f7ff bc67 	b.w	d43d4 <network_set_listen_timeout>

000d4b06 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b06:	2200      	movs	r2, #0
   d4b08:	f081 0101 	eor.w	r1, r1, #1
   d4b0c:	6840      	ldr	r0, [r0, #4]
   d4b0e:	f7ff bc51 	b.w	d43b4 <network_listen>

000d4b12 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4b12:	2300      	movs	r3, #0
   d4b14:	461a      	mov	r2, r3
   d4b16:	2101      	movs	r1, #1
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	f7ff bc43 	b.w	d43a4 <network_off>

000d4b1e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b1e:	2300      	movs	r3, #0
   d4b20:	461a      	mov	r2, r3
   d4b22:	4619      	mov	r1, r3
   d4b24:	6840      	ldr	r0, [r0, #4]
   d4b26:	f7ff bc35 	b.w	d4394 <network_on>

000d4b2a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	4611      	mov	r1, r2
   d4b2e:	6840      	ldr	r0, [r0, #4]
   d4b30:	f7ff bc28 	b.w	d4384 <network_ready>

000d4b34 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b34:	2200      	movs	r2, #0
   d4b36:	4611      	mov	r1, r2
   d4b38:	6840      	ldr	r0, [r0, #4]
   d4b3a:	f7ff bc13 	b.w	d4364 <network_connecting>

000d4b3e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b3e:	2200      	movs	r2, #0
   d4b40:	2102      	movs	r1, #2
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	f7ff bc16 	b.w	d4374 <network_disconnect>

000d4b48 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b48:	2300      	movs	r3, #0
   d4b4a:	461a      	mov	r2, r3
   d4b4c:	6840      	ldr	r0, [r0, #4]
   d4b4e:	f7ff bc01 	b.w	d4354 <network_connect>

000d4b52 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4b52:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b54:	4605      	mov	r5, r0
   d4b56:	b188      	cbz	r0, d4b7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b58:	6804      	ldr	r4, [r0, #0]
   d4b5a:	b14c      	cbz	r4, d4b70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4b5c:	68a3      	ldr	r3, [r4, #8]
   d4b5e:	b11b      	cbz	r3, d4b68 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b60:	2203      	movs	r2, #3
   d4b62:	4621      	mov	r1, r4
   d4b64:	4620      	mov	r0, r4
   d4b66:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b68:	2110      	movs	r1, #16
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	f000 f961 	bl	d4e32 <_ZdlPvj>
   d4b70:	4628      	mov	r0, r5
   d4b72:	2114      	movs	r1, #20
      }
   d4b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b78:	f000 b95b 	b.w	d4e32 <_ZdlPvj>
   d4b7c:	bd38      	pop	{r3, r4, r5, pc}

000d4b7e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4b7e:	b110      	cbz	r0, d4b86 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4b80:	6803      	ldr	r3, [r0, #0]
   d4b82:	685b      	ldr	r3, [r3, #4]
   d4b84:	4718      	bx	r3
   d4b86:	4770      	bx	lr

000d4b88 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4b88:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b8a:	6803      	ldr	r3, [r0, #0]
   d4b8c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4b8e:	b1bb      	cbz	r3, d4bc0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4b90:	6858      	ldr	r0, [r3, #4]
   d4b92:	f7ff fb1b 	bl	d41cc <os_thread_is_current>
   d4b96:	b978      	cbnz	r0, d4bb8 <_ZN6ThreadD1Ev+0x30>
   d4b98:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4b9a:	7c5a      	ldrb	r2, [r3, #17]
   d4b9c:	b912      	cbnz	r2, d4ba4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4b9e:	6858      	ldr	r0, [r3, #4]
   d4ba0:	f7ff fb1c 	bl	d41dc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ba4:	6823      	ldr	r3, [r4, #0]
   d4ba6:	6858      	ldr	r0, [r3, #4]
   d4ba8:	f7ff fb20 	bl	d41ec <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bac:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4bae:	2300      	movs	r3, #0
   d4bb0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4bb2:	b128      	cbz	r0, d4bc0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4bb4:	f7ff ffcd 	bl	d4b52 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bb8:	6820      	ldr	r0, [r4, #0]
   d4bba:	b108      	cbz	r0, d4bc0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4bbc:	f7ff ffc9 	bl	d4b52 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	bd10      	pop	{r4, pc}

000d4bc4 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4bc4:	b538      	push	{r3, r4, r5, lr}
   d4bc6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bc8:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4bcc:	b108      	cbz	r0, d4bd2 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4bce:	f7ff fa64 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4bd2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4bd6:	b108      	cbz	r0, d4bdc <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4bd8:	f7ff fb18 	bl	d420c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bdc:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4be0:	b135      	cbz	r5, d4bf0 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4be2:	4628      	mov	r0, r5
   d4be4:	f7ff ffd0 	bl	d4b88 <_ZN6ThreadD1Ev>
   d4be8:	2104      	movs	r1, #4
   d4bea:	4628      	mov	r0, r5
   d4bec:	f000 f921 	bl	d4e32 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bf0:	6820      	ldr	r0, [r4, #0]
   d4bf2:	b108      	cbz	r0, d4bf8 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4bf4:	f7ff ffc3 	bl	d4b7e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd38      	pop	{r3, r4, r5, pc}

000d4bfc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4bfc:	b510      	push	{r4, lr}
   d4bfe:	4b04      	ldr	r3, [pc, #16]	; (d4c10 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4c00:	4604      	mov	r4, r0
   d4c02:	f840 3b08 	str.w	r3, [r0], #8
   d4c06:	f7ff ffdd 	bl	d4bc4 <_ZN5spark11MeshPublishD1Ev>
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	bd10      	pop	{r4, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d53e4 	.word	0x000d53e4

000d4c14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4c14:	b538      	push	{r3, r4, r5, lr}
   d4c16:	4c0e      	ldr	r4, [pc, #56]	; (d4c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4c18:	4b0e      	ldr	r3, [pc, #56]	; (d4c54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4c1a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c1c:	2500      	movs	r5, #0
   d4c1e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4c20:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4c24:	6063      	str	r3, [r4, #4]
   d4c26:	60a5      	str	r5, [r4, #8]
   d4c28:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c2c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4c30:	f7ff fae4 	bl	d41fc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4c34:	4b08      	ldr	r3, [pc, #32]	; (d4c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4c36:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c3a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4c3e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4c40:	4620      	mov	r0, r4
   d4c42:	4a06      	ldr	r2, [pc, #24]	; (d4c5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4c44:	4906      	ldr	r1, [pc, #24]	; (d4c60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4c4a:	f000 b8ed 	b.w	d4e28 <__aeabi_atexit>
   d4c4e:	bf00      	nop
   d4c50:	2003e568 	.word	0x2003e568
   d4c54:	000d544c 	.word	0x000d544c
   d4c58:	000d53e4 	.word	0x000d53e4
   d4c5c:	2003e3e4 	.word	0x2003e3e4
   d4c60:	000d4bfd 	.word	0x000d4bfd

000d4c64 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4c64:	2200      	movs	r2, #0
   d4c66:	4611      	mov	r1, r2
   d4c68:	6840      	ldr	r0, [r0, #4]
   d4c6a:	f7ff bb8b 	b.w	d4384 <network_ready>

000d4c6e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c6e:	2200      	movs	r2, #0
   d4c70:	4611      	mov	r1, r2
   d4c72:	6840      	ldr	r0, [r0, #4]
   d4c74:	f7ff bba6 	b.w	d43c4 <network_listening>

000d4c78 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c78:	2200      	movs	r2, #0
   d4c7a:	4611      	mov	r1, r2
   d4c7c:	6840      	ldr	r0, [r0, #4]
   d4c7e:	f7ff bbb1 	b.w	d43e4 <network_get_listen_timeout>

000d4c82 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c82:	2200      	movs	r2, #0
   d4c84:	6840      	ldr	r0, [r0, #4]
   d4c86:	f7ff bba5 	b.w	d43d4 <network_set_listen_timeout>

000d4c8a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c8a:	2200      	movs	r2, #0
   d4c8c:	f081 0101 	eor.w	r1, r1, #1
   d4c90:	6840      	ldr	r0, [r0, #4]
   d4c92:	f7ff bb8f 	b.w	d43b4 <network_listen>

000d4c96 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4c96:	2300      	movs	r3, #0
   d4c98:	461a      	mov	r2, r3
   d4c9a:	4619      	mov	r1, r3
   d4c9c:	6840      	ldr	r0, [r0, #4]
   d4c9e:	f7ff bb81 	b.w	d43a4 <network_off>

000d4ca2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	461a      	mov	r2, r3
   d4ca6:	4619      	mov	r1, r3
   d4ca8:	6840      	ldr	r0, [r0, #4]
   d4caa:	f7ff bb73 	b.w	d4394 <network_on>

000d4cae <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cae:	2200      	movs	r2, #0
   d4cb0:	4611      	mov	r1, r2
   d4cb2:	6840      	ldr	r0, [r0, #4]
   d4cb4:	f7ff bb56 	b.w	d4364 <network_connecting>

000d4cb8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cb8:	2200      	movs	r2, #0
   d4cba:	2102      	movs	r1, #2
   d4cbc:	6840      	ldr	r0, [r0, #4]
   d4cbe:	f7ff bb59 	b.w	d4374 <network_disconnect>

000d4cc2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cc2:	2300      	movs	r3, #0
   d4cc4:	461a      	mov	r2, r3
   d4cc6:	6840      	ldr	r0, [r0, #4]
   d4cc8:	f7ff bb44 	b.w	d4354 <network_connect>

000d4ccc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4ccc:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4cce:	2204      	movs	r2, #4
   d4cd0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4cd2:	4a02      	ldr	r2, [pc, #8]	; (d4cdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4cd4:	601a      	str	r2, [r3, #0]
   d4cd6:	4770      	bx	lr
   d4cd8:	2003e73c 	.word	0x2003e73c
   d4cdc:	000d5418 	.word	0x000d5418

000d4ce0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ce0:	2300      	movs	r3, #0
   d4ce2:	461a      	mov	r2, r3
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	f7ff bb35 	b.w	d4354 <network_connect>

000d4cea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4cea:	2200      	movs	r2, #0
   d4cec:	2102      	movs	r1, #2
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	f7ff bb40 	b.w	d4374 <network_disconnect>

000d4cf4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	4611      	mov	r1, r2
   d4cf8:	6840      	ldr	r0, [r0, #4]
   d4cfa:	f7ff bb33 	b.w	d4364 <network_connecting>

000d4cfe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4cfe:	2200      	movs	r2, #0
   d4d00:	4611      	mov	r1, r2
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	f7ff bb3e 	b.w	d4384 <network_ready>

000d4d08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d08:	2300      	movs	r3, #0
   d4d0a:	461a      	mov	r2, r3
   d4d0c:	4619      	mov	r1, r3
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	f7ff bb40 	b.w	d4394 <network_on>

000d4d14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d14:	2300      	movs	r3, #0
   d4d16:	461a      	mov	r2, r3
   d4d18:	4619      	mov	r1, r3
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bb42 	b.w	d43a4 <network_off>

000d4d20 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d20:	2200      	movs	r2, #0
   d4d22:	f081 0101 	eor.w	r1, r1, #1
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bb44 	b.w	d43b4 <network_listen>

000d4d2c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	f7ff bb50 	b.w	d43d4 <network_set_listen_timeout>

000d4d34 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d34:	2200      	movs	r2, #0
   d4d36:	4611      	mov	r1, r2
   d4d38:	6840      	ldr	r0, [r0, #4]
   d4d3a:	f7ff bb53 	b.w	d43e4 <network_get_listen_timeout>

000d4d3e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d3e:	2200      	movs	r2, #0
   d4d40:	4611      	mov	r1, r2
   d4d42:	6840      	ldr	r0, [r0, #4]
   d4d44:	f7ff bb3e 	b.w	d43c4 <network_listening>

000d4d48 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d4c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d4e:	b095      	sub	sp, #84	; 0x54
   d4d50:	4616      	mov	r6, r2
   d4d52:	460d      	mov	r5, r1
   d4d54:	4607      	mov	r7, r0
    IPAddress addr;
   d4d56:	f7ff fd75 	bl	d4844 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4d5a:	4621      	mov	r1, r4
   d4d5c:	2220      	movs	r2, #32
   d4d5e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d60:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d62:	f000 f9ca 	bl	d50fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d66:	2340      	movs	r3, #64	; 0x40
   d4d68:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d6a:	4621      	mov	r1, r4
   d4d6c:	466b      	mov	r3, sp
   d4d6e:	aa0c      	add	r2, sp, #48	; 0x30
   d4d70:	4630      	mov	r0, r6
   d4d72:	f7ff fa0b 	bl	d418c <netdb_getaddrinfo>
    if (!r) {
   d4d76:	4604      	mov	r4, r0
   d4d78:	2800      	cmp	r0, #0
   d4d7a:	d144      	bne.n	d4e06 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d7c:	4602      	mov	r2, r0
   d4d7e:	2101      	movs	r1, #1
   d4d80:	6868      	ldr	r0, [r5, #4]
   d4d82:	f7ff faff 	bl	d4384 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d86:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d88:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d8a:	4622      	mov	r2, r4
   d4d8c:	6868      	ldr	r0, [r5, #4]
   d4d8e:	f7ff faf9 	bl	d4384 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d92:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d94:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4d96:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d98:	2e00      	cmp	r6, #0
   d4d9a:	d034      	beq.n	d4e06 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4d9c:	2900      	cmp	r1, #0
   d4d9e:	d132      	bne.n	d4e06 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4da0:	6873      	ldr	r3, [r6, #4]
   d4da2:	2b02      	cmp	r3, #2
   d4da4:	d002      	beq.n	d4dac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4da6:	2b0a      	cmp	r3, #10
   d4da8:	d009      	beq.n	d4dbe <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4daa:	e02a      	b.n	d4e02 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4dac:	f1b8 0f00 	cmp.w	r8, #0
   d4db0:	d027      	beq.n	d4e02 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4db2:	6971      	ldr	r1, [r6, #20]
   d4db4:	4638      	mov	r0, r7
   d4db6:	3104      	adds	r1, #4
   d4db8:	f7ff fd71 	bl	d489e <_ZN9IPAddressaSEPKh>
   d4dbc:	e020      	b.n	d4e00 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4dbe:	f1b9 0f00 	cmp.w	r9, #0
   d4dc2:	d01e      	beq.n	d4e02 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4dc4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4dc6:	2211      	movs	r2, #17
   d4dc8:	a801      	add	r0, sp, #4
   d4dca:	f000 f996 	bl	d50fa <memset>
                    a.v = 6;
   d4dce:	2306      	movs	r3, #6
   d4dd0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4dd4:	ad01      	add	r5, sp, #4
   d4dd6:	f104 0308 	add.w	r3, r4, #8
   d4dda:	3418      	adds	r4, #24
   d4ddc:	6818      	ldr	r0, [r3, #0]
   d4dde:	6859      	ldr	r1, [r3, #4]
   d4de0:	462a      	mov	r2, r5
   d4de2:	c203      	stmia	r2!, {r0, r1}
   d4de4:	3308      	adds	r3, #8
   d4de6:	42a3      	cmp	r3, r4
   d4de8:	4615      	mov	r5, r2
   d4dea:	d1f7      	bne.n	d4ddc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4dec:	a901      	add	r1, sp, #4
   d4dee:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4df0:	ad07      	add	r5, sp, #28
   d4df2:	f7ff fd35 	bl	d4860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4df8:	1d3c      	adds	r4, r7, #4
   d4dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4dfc:	682b      	ldr	r3, [r5, #0]
   d4dfe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4e00:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e02:	69f6      	ldr	r6, [r6, #28]
   d4e04:	e7c8      	b.n	d4d98 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e06:	9800      	ldr	r0, [sp, #0]
   d4e08:	f7ff f9b8 	bl	d417c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e0c:	4638      	mov	r0, r7
   d4e0e:	b015      	add	sp, #84	; 0x54
   d4e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e14:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e16:	4a03      	ldr	r2, [pc, #12]	; (d4e24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e18:	601a      	str	r2, [r3, #0]
   d4e1a:	2200      	movs	r2, #0
   d4e1c:	605a      	str	r2, [r3, #4]
   d4e1e:	4770      	bx	lr
   d4e20:	2003e744 	.word	0x2003e744
   d4e24:	000d544c 	.word	0x000d544c

000d4e28 <__aeabi_atexit>:
   d4e28:	460b      	mov	r3, r1
   d4e2a:	4601      	mov	r1, r0
   d4e2c:	4618      	mov	r0, r3
   d4e2e:	f000 b94b 	b.w	d50c8 <__cxa_atexit>

000d4e32 <_ZdlPvj>:
   d4e32:	f7ff b930 	b.w	d4096 <_ZdlPv>
	...

000d4e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4e38:	4b18      	ldr	r3, [pc, #96]	; (d4e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4e3a:	681a      	ldr	r2, [r3, #0]
   d4e3c:	07d1      	lsls	r1, r2, #31
   d4e3e:	bf5c      	itt	pl
   d4e40:	2201      	movpl	r2, #1
   d4e42:	601a      	strpl	r2, [r3, #0]
   d4e44:	4b16      	ldr	r3, [pc, #88]	; (d4ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4e46:	681a      	ldr	r2, [r3, #0]
   d4e48:	07d2      	lsls	r2, r2, #31
   d4e4a:	bf5c      	itt	pl
   d4e4c:	2201      	movpl	r2, #1
   d4e4e:	601a      	strpl	r2, [r3, #0]
   d4e50:	4b14      	ldr	r3, [pc, #80]	; (d4ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4e52:	681a      	ldr	r2, [r3, #0]
   d4e54:	07d0      	lsls	r0, r2, #31
   d4e56:	bf5c      	itt	pl
   d4e58:	2201      	movpl	r2, #1
   d4e5a:	601a      	strpl	r2, [r3, #0]
   d4e5c:	4b12      	ldr	r3, [pc, #72]	; (d4ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4e5e:	681a      	ldr	r2, [r3, #0]
   d4e60:	07d1      	lsls	r1, r2, #31
   d4e62:	bf5c      	itt	pl
   d4e64:	2201      	movpl	r2, #1
   d4e66:	601a      	strpl	r2, [r3, #0]
   d4e68:	4b10      	ldr	r3, [pc, #64]	; (d4eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4e6a:	681a      	ldr	r2, [r3, #0]
   d4e6c:	07d2      	lsls	r2, r2, #31
   d4e6e:	bf5c      	itt	pl
   d4e70:	2201      	movpl	r2, #1
   d4e72:	601a      	strpl	r2, [r3, #0]
   d4e74:	4b0e      	ldr	r3, [pc, #56]	; (d4eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4e76:	681a      	ldr	r2, [r3, #0]
   d4e78:	07d0      	lsls	r0, r2, #31
   d4e7a:	bf5c      	itt	pl
   d4e7c:	2201      	movpl	r2, #1
   d4e7e:	601a      	strpl	r2, [r3, #0]
   d4e80:	4b0c      	ldr	r3, [pc, #48]	; (d4eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4e82:	681a      	ldr	r2, [r3, #0]
   d4e84:	07d1      	lsls	r1, r2, #31
   d4e86:	bf5c      	itt	pl
   d4e88:	2201      	movpl	r2, #1
   d4e8a:	601a      	strpl	r2, [r3, #0]
   d4e8c:	4b0a      	ldr	r3, [pc, #40]	; (d4eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4e8e:	681a      	ldr	r2, [r3, #0]
   d4e90:	07d2      	lsls	r2, r2, #31
   d4e92:	bf5c      	itt	pl
   d4e94:	2201      	movpl	r2, #1
   d4e96:	601a      	strpl	r2, [r3, #0]
   d4e98:	4770      	bx	lr
   d4e9a:	bf00      	nop
   d4e9c:	2003e76c 	.word	0x2003e76c
   d4ea0:	2003e768 	.word	0x2003e768
   d4ea4:	2003e764 	.word	0x2003e764
   d4ea8:	2003e760 	.word	0x2003e760
   d4eac:	2003e75c 	.word	0x2003e75c
   d4eb0:	2003e758 	.word	0x2003e758
   d4eb4:	2003e754 	.word	0x2003e754
   d4eb8:	2003e750 	.word	0x2003e750

000d4ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d4ebc:	4b24      	ldr	r3, [pc, #144]	; (d4f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d4ebe:	681a      	ldr	r2, [r3, #0]
   d4ec0:	07d0      	lsls	r0, r2, #31
   d4ec2:	bf5c      	itt	pl
   d4ec4:	2201      	movpl	r2, #1
   d4ec6:	601a      	strpl	r2, [r3, #0]
   d4ec8:	4b22      	ldr	r3, [pc, #136]	; (d4f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d4eca:	681a      	ldr	r2, [r3, #0]
   d4ecc:	07d1      	lsls	r1, r2, #31
   d4ece:	bf5c      	itt	pl
   d4ed0:	2201      	movpl	r2, #1
   d4ed2:	601a      	strpl	r2, [r3, #0]
   d4ed4:	4b20      	ldr	r3, [pc, #128]	; (d4f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d4ed6:	681a      	ldr	r2, [r3, #0]
   d4ed8:	07d2      	lsls	r2, r2, #31
   d4eda:	bf5c      	itt	pl
   d4edc:	2201      	movpl	r2, #1
   d4ede:	601a      	strpl	r2, [r3, #0]
   d4ee0:	4b1e      	ldr	r3, [pc, #120]	; (d4f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d4ee2:	681a      	ldr	r2, [r3, #0]
   d4ee4:	07d0      	lsls	r0, r2, #31
   d4ee6:	bf5c      	itt	pl
   d4ee8:	2201      	movpl	r2, #1
   d4eea:	601a      	strpl	r2, [r3, #0]
   d4eec:	4b1c      	ldr	r3, [pc, #112]	; (d4f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d4eee:	681a      	ldr	r2, [r3, #0]
   d4ef0:	07d1      	lsls	r1, r2, #31
   d4ef2:	bf5c      	itt	pl
   d4ef4:	2201      	movpl	r2, #1
   d4ef6:	601a      	strpl	r2, [r3, #0]
   d4ef8:	4b1a      	ldr	r3, [pc, #104]	; (d4f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d4efa:	681a      	ldr	r2, [r3, #0]
   d4efc:	07d2      	lsls	r2, r2, #31
   d4efe:	bf5c      	itt	pl
   d4f00:	2201      	movpl	r2, #1
   d4f02:	601a      	strpl	r2, [r3, #0]
   d4f04:	4b18      	ldr	r3, [pc, #96]	; (d4f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d4f06:	681a      	ldr	r2, [r3, #0]
   d4f08:	07d0      	lsls	r0, r2, #31
   d4f0a:	bf5c      	itt	pl
   d4f0c:	2201      	movpl	r2, #1
   d4f0e:	601a      	strpl	r2, [r3, #0]
   d4f10:	4b16      	ldr	r3, [pc, #88]	; (d4f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d4f12:	681a      	ldr	r2, [r3, #0]
   d4f14:	07d1      	lsls	r1, r2, #31
   d4f16:	bf5c      	itt	pl
   d4f18:	2201      	movpl	r2, #1
   d4f1a:	601a      	strpl	r2, [r3, #0]
   d4f1c:	4b14      	ldr	r3, [pc, #80]	; (d4f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d4f1e:	681a      	ldr	r2, [r3, #0]
   d4f20:	07d2      	lsls	r2, r2, #31
   d4f22:	bf5c      	itt	pl
   d4f24:	2201      	movpl	r2, #1
   d4f26:	601a      	strpl	r2, [r3, #0]
   d4f28:	4b12      	ldr	r3, [pc, #72]	; (d4f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d4f2a:	681a      	ldr	r2, [r3, #0]
   d4f2c:	07d0      	lsls	r0, r2, #31
   d4f2e:	bf5c      	itt	pl
   d4f30:	2201      	movpl	r2, #1
   d4f32:	601a      	strpl	r2, [r3, #0]
   d4f34:	4b10      	ldr	r3, [pc, #64]	; (d4f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d4f36:	681a      	ldr	r2, [r3, #0]
   d4f38:	07d1      	lsls	r1, r2, #31
   d4f3a:	bf5c      	itt	pl
   d4f3c:	2201      	movpl	r2, #1
   d4f3e:	601a      	strpl	r2, [r3, #0]
   d4f40:	4b0e      	ldr	r3, [pc, #56]	; (d4f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d4f42:	681a      	ldr	r2, [r3, #0]
   d4f44:	07d2      	lsls	r2, r2, #31
   d4f46:	bf5c      	itt	pl
   d4f48:	2201      	movpl	r2, #1
   d4f4a:	601a      	strpl	r2, [r3, #0]
   d4f4c:	4770      	bx	lr
   d4f4e:	bf00      	nop
   d4f50:	2003e79c 	.word	0x2003e79c
   d4f54:	2003e798 	.word	0x2003e798
   d4f58:	2003e794 	.word	0x2003e794
   d4f5c:	2003e790 	.word	0x2003e790
   d4f60:	2003e78c 	.word	0x2003e78c
   d4f64:	2003e788 	.word	0x2003e788
   d4f68:	2003e784 	.word	0x2003e784
   d4f6c:	2003e780 	.word	0x2003e780
   d4f70:	2003e77c 	.word	0x2003e77c
   d4f74:	2003e778 	.word	0x2003e778
   d4f78:	2003e774 	.word	0x2003e774
   d4f7c:	2003e770 	.word	0x2003e770

000d4f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d4f80:	4b24      	ldr	r3, [pc, #144]	; (d5014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d4f82:	681a      	ldr	r2, [r3, #0]
   d4f84:	07d0      	lsls	r0, r2, #31
   d4f86:	bf5c      	itt	pl
   d4f88:	2201      	movpl	r2, #1
   d4f8a:	601a      	strpl	r2, [r3, #0]
   d4f8c:	4b22      	ldr	r3, [pc, #136]	; (d5018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d4f8e:	681a      	ldr	r2, [r3, #0]
   d4f90:	07d1      	lsls	r1, r2, #31
   d4f92:	bf5c      	itt	pl
   d4f94:	2201      	movpl	r2, #1
   d4f96:	601a      	strpl	r2, [r3, #0]
   d4f98:	4b20      	ldr	r3, [pc, #128]	; (d501c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d4f9a:	681a      	ldr	r2, [r3, #0]
   d4f9c:	07d2      	lsls	r2, r2, #31
   d4f9e:	bf5c      	itt	pl
   d4fa0:	2201      	movpl	r2, #1
   d4fa2:	601a      	strpl	r2, [r3, #0]
   d4fa4:	4b1e      	ldr	r3, [pc, #120]	; (d5020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d4fa6:	681a      	ldr	r2, [r3, #0]
   d4fa8:	07d0      	lsls	r0, r2, #31
   d4faa:	bf5c      	itt	pl
   d4fac:	2201      	movpl	r2, #1
   d4fae:	601a      	strpl	r2, [r3, #0]
   d4fb0:	4b1c      	ldr	r3, [pc, #112]	; (d5024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d4fb2:	681a      	ldr	r2, [r3, #0]
   d4fb4:	07d1      	lsls	r1, r2, #31
   d4fb6:	bf5c      	itt	pl
   d4fb8:	2201      	movpl	r2, #1
   d4fba:	601a      	strpl	r2, [r3, #0]
   d4fbc:	4b1a      	ldr	r3, [pc, #104]	; (d5028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d4fbe:	681a      	ldr	r2, [r3, #0]
   d4fc0:	07d2      	lsls	r2, r2, #31
   d4fc2:	bf5c      	itt	pl
   d4fc4:	2201      	movpl	r2, #1
   d4fc6:	601a      	strpl	r2, [r3, #0]
   d4fc8:	4b18      	ldr	r3, [pc, #96]	; (d502c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d4fca:	681a      	ldr	r2, [r3, #0]
   d4fcc:	07d0      	lsls	r0, r2, #31
   d4fce:	bf5c      	itt	pl
   d4fd0:	2201      	movpl	r2, #1
   d4fd2:	601a      	strpl	r2, [r3, #0]
   d4fd4:	4b16      	ldr	r3, [pc, #88]	; (d5030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d4fd6:	681a      	ldr	r2, [r3, #0]
   d4fd8:	07d1      	lsls	r1, r2, #31
   d4fda:	bf5c      	itt	pl
   d4fdc:	2201      	movpl	r2, #1
   d4fde:	601a      	strpl	r2, [r3, #0]
   d4fe0:	4b14      	ldr	r3, [pc, #80]	; (d5034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d4fe2:	681a      	ldr	r2, [r3, #0]
   d4fe4:	07d2      	lsls	r2, r2, #31
   d4fe6:	bf5c      	itt	pl
   d4fe8:	2201      	movpl	r2, #1
   d4fea:	601a      	strpl	r2, [r3, #0]
   d4fec:	4b12      	ldr	r3, [pc, #72]	; (d5038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d4fee:	681a      	ldr	r2, [r3, #0]
   d4ff0:	07d0      	lsls	r0, r2, #31
   d4ff2:	bf5c      	itt	pl
   d4ff4:	2201      	movpl	r2, #1
   d4ff6:	601a      	strpl	r2, [r3, #0]
   d4ff8:	4b10      	ldr	r3, [pc, #64]	; (d503c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d4ffa:	681a      	ldr	r2, [r3, #0]
   d4ffc:	07d1      	lsls	r1, r2, #31
   d4ffe:	bf5c      	itt	pl
   d5000:	2201      	movpl	r2, #1
   d5002:	601a      	strpl	r2, [r3, #0]
   d5004:	4b0e      	ldr	r3, [pc, #56]	; (d5040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5006:	681a      	ldr	r2, [r3, #0]
   d5008:	07d2      	lsls	r2, r2, #31
   d500a:	bf5c      	itt	pl
   d500c:	2201      	movpl	r2, #1
   d500e:	601a      	strpl	r2, [r3, #0]
   d5010:	4770      	bx	lr
   d5012:	bf00      	nop
   d5014:	2003e7cc 	.word	0x2003e7cc
   d5018:	2003e7c8 	.word	0x2003e7c8
   d501c:	2003e7c4 	.word	0x2003e7c4
   d5020:	2003e7c0 	.word	0x2003e7c0
   d5024:	2003e7bc 	.word	0x2003e7bc
   d5028:	2003e7b8 	.word	0x2003e7b8
   d502c:	2003e7b4 	.word	0x2003e7b4
   d5030:	2003e7b0 	.word	0x2003e7b0
   d5034:	2003e7ac 	.word	0x2003e7ac
   d5038:	2003e7a8 	.word	0x2003e7a8
   d503c:	2003e7a4 	.word	0x2003e7a4
   d5040:	2003e7a0 	.word	0x2003e7a0

000d5044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5044:	4b18      	ldr	r3, [pc, #96]	; (d50a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5046:	681a      	ldr	r2, [r3, #0]
   d5048:	07d1      	lsls	r1, r2, #31
   d504a:	bf5c      	itt	pl
   d504c:	2201      	movpl	r2, #1
   d504e:	601a      	strpl	r2, [r3, #0]
   d5050:	4b16      	ldr	r3, [pc, #88]	; (d50ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5052:	681a      	ldr	r2, [r3, #0]
   d5054:	07d2      	lsls	r2, r2, #31
   d5056:	bf5c      	itt	pl
   d5058:	2201      	movpl	r2, #1
   d505a:	601a      	strpl	r2, [r3, #0]
   d505c:	4b14      	ldr	r3, [pc, #80]	; (d50b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d505e:	681a      	ldr	r2, [r3, #0]
   d5060:	07d0      	lsls	r0, r2, #31
   d5062:	bf5c      	itt	pl
   d5064:	2201      	movpl	r2, #1
   d5066:	601a      	strpl	r2, [r3, #0]
   d5068:	4b12      	ldr	r3, [pc, #72]	; (d50b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d506a:	681a      	ldr	r2, [r3, #0]
   d506c:	07d1      	lsls	r1, r2, #31
   d506e:	bf5c      	itt	pl
   d5070:	2201      	movpl	r2, #1
   d5072:	601a      	strpl	r2, [r3, #0]
   d5074:	4b10      	ldr	r3, [pc, #64]	; (d50b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5076:	681a      	ldr	r2, [r3, #0]
   d5078:	07d2      	lsls	r2, r2, #31
   d507a:	bf5c      	itt	pl
   d507c:	2201      	movpl	r2, #1
   d507e:	601a      	strpl	r2, [r3, #0]
   d5080:	4b0e      	ldr	r3, [pc, #56]	; (d50bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5082:	681a      	ldr	r2, [r3, #0]
   d5084:	07d0      	lsls	r0, r2, #31
   d5086:	bf5c      	itt	pl
   d5088:	2201      	movpl	r2, #1
   d508a:	601a      	strpl	r2, [r3, #0]
   d508c:	4b0c      	ldr	r3, [pc, #48]	; (d50c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d508e:	681a      	ldr	r2, [r3, #0]
   d5090:	07d1      	lsls	r1, r2, #31
   d5092:	bf5c      	itt	pl
   d5094:	2201      	movpl	r2, #1
   d5096:	601a      	strpl	r2, [r3, #0]
   d5098:	4b0a      	ldr	r3, [pc, #40]	; (d50c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d509a:	681a      	ldr	r2, [r3, #0]
   d509c:	07d2      	lsls	r2, r2, #31
   d509e:	bf5c      	itt	pl
   d50a0:	2201      	movpl	r2, #1
   d50a2:	601a      	strpl	r2, [r3, #0]
   d50a4:	4770      	bx	lr
   d50a6:	bf00      	nop
   d50a8:	2003e7ec 	.word	0x2003e7ec
   d50ac:	2003e7e8 	.word	0x2003e7e8
   d50b0:	2003e7e4 	.word	0x2003e7e4
   d50b4:	2003e7e0 	.word	0x2003e7e0
   d50b8:	2003e7dc 	.word	0x2003e7dc
   d50bc:	2003e7d8 	.word	0x2003e7d8
   d50c0:	2003e7d4 	.word	0x2003e7d4
   d50c4:	2003e7d0 	.word	0x2003e7d0

000d50c8 <__cxa_atexit>:
   d50c8:	b510      	push	{r4, lr}
   d50ca:	4c05      	ldr	r4, [pc, #20]	; (d50e0 <__cxa_atexit+0x18>)
   d50cc:	4613      	mov	r3, r2
   d50ce:	b12c      	cbz	r4, d50dc <__cxa_atexit+0x14>
   d50d0:	460a      	mov	r2, r1
   d50d2:	4601      	mov	r1, r0
   d50d4:	2002      	movs	r0, #2
   d50d6:	f3af 8000 	nop.w
   d50da:	bd10      	pop	{r4, pc}
   d50dc:	4620      	mov	r0, r4
   d50de:	bd10      	pop	{r4, pc}
   d50e0:	00000000 	.word	0x00000000

000d50e4 <memcpy>:
   d50e4:	b510      	push	{r4, lr}
   d50e6:	1e43      	subs	r3, r0, #1
   d50e8:	440a      	add	r2, r1
   d50ea:	4291      	cmp	r1, r2
   d50ec:	d004      	beq.n	d50f8 <memcpy+0x14>
   d50ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d50f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d50f6:	e7f8      	b.n	d50ea <memcpy+0x6>
   d50f8:	bd10      	pop	{r4, pc}

000d50fa <memset>:
   d50fa:	4402      	add	r2, r0
   d50fc:	4603      	mov	r3, r0
   d50fe:	4293      	cmp	r3, r2
   d5100:	d002      	beq.n	d5108 <memset+0xe>
   d5102:	f803 1b01 	strb.w	r1, [r3], #1
   d5106:	e7fa      	b.n	d50fe <memset+0x4>
   d5108:	4770      	bx	lr
	...

000d510c <srand>:
   d510c:	b538      	push	{r3, r4, r5, lr}
   d510e:	4b12      	ldr	r3, [pc, #72]	; (d5158 <srand+0x4c>)
   d5110:	681c      	ldr	r4, [r3, #0]
   d5112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5114:	4605      	mov	r5, r0
   d5116:	b9d3      	cbnz	r3, d514e <srand+0x42>
   d5118:	2018      	movs	r0, #24
   d511a:	f7ff f973 	bl	d4404 <malloc>
   d511e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5122:	63a0      	str	r0, [r4, #56]	; 0x38
   d5124:	8003      	strh	r3, [r0, #0]
   d5126:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d512a:	8043      	strh	r3, [r0, #2]
   d512c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5130:	8083      	strh	r3, [r0, #4]
   d5132:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5136:	80c3      	strh	r3, [r0, #6]
   d5138:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d513c:	8103      	strh	r3, [r0, #8]
   d513e:	2305      	movs	r3, #5
   d5140:	8143      	strh	r3, [r0, #10]
   d5142:	230b      	movs	r3, #11
   d5144:	8183      	strh	r3, [r0, #12]
   d5146:	2201      	movs	r2, #1
   d5148:	2300      	movs	r3, #0
   d514a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d514e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5150:	2200      	movs	r2, #0
   d5152:	611d      	str	r5, [r3, #16]
   d5154:	615a      	str	r2, [r3, #20]
   d5156:	bd38      	pop	{r3, r4, r5, pc}
   d5158:	2003e3e0 	.word	0x2003e3e0

000d515c <rand>:
   d515c:	4b19      	ldr	r3, [pc, #100]	; (d51c4 <rand+0x68>)
   d515e:	b510      	push	{r4, lr}
   d5160:	681c      	ldr	r4, [r3, #0]
   d5162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5164:	b9d3      	cbnz	r3, d519c <rand+0x40>
   d5166:	2018      	movs	r0, #24
   d5168:	f7ff f94c 	bl	d4404 <malloc>
   d516c:	f243 330e 	movw	r3, #13070	; 0x330e
   d5170:	63a0      	str	r0, [r4, #56]	; 0x38
   d5172:	8003      	strh	r3, [r0, #0]
   d5174:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5178:	8043      	strh	r3, [r0, #2]
   d517a:	f241 2334 	movw	r3, #4660	; 0x1234
   d517e:	8083      	strh	r3, [r0, #4]
   d5180:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5184:	80c3      	strh	r3, [r0, #6]
   d5186:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d518a:	8103      	strh	r3, [r0, #8]
   d518c:	2305      	movs	r3, #5
   d518e:	8143      	strh	r3, [r0, #10]
   d5190:	230b      	movs	r3, #11
   d5192:	8183      	strh	r3, [r0, #12]
   d5194:	2201      	movs	r2, #1
   d5196:	2300      	movs	r3, #0
   d5198:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d519c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d519e:	4c0a      	ldr	r4, [pc, #40]	; (d51c8 <rand+0x6c>)
   d51a0:	690b      	ldr	r3, [r1, #16]
   d51a2:	6948      	ldr	r0, [r1, #20]
   d51a4:	4a09      	ldr	r2, [pc, #36]	; (d51cc <rand+0x70>)
   d51a6:	435c      	muls	r4, r3
   d51a8:	fb02 4000 	mla	r0, r2, r0, r4
   d51ac:	fba3 2302 	umull	r2, r3, r3, r2
   d51b0:	3201      	adds	r2, #1
   d51b2:	4403      	add	r3, r0
   d51b4:	f143 0300 	adc.w	r3, r3, #0
   d51b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d51bc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d51c0:	bd10      	pop	{r4, pc}
   d51c2:	bf00      	nop
   d51c4:	2003e3e0 	.word	0x2003e3e0
   d51c8:	5851f42d 	.word	0x5851f42d
   d51cc:	4c957f2d 	.word	0x4c957f2d

000d51d0 <strlen>:
   d51d0:	4603      	mov	r3, r0
   d51d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d51d6:	2a00      	cmp	r2, #0
   d51d8:	d1fb      	bne.n	d51d2 <strlen+0x2>
   d51da:	1a18      	subs	r0, r3, r0
   d51dc:	3801      	subs	r0, #1
   d51de:	4770      	bx	lr

000d51e0 <dynalib_user>:
   d51e0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d51f0:	0000 0000 6f46 2072 7566 636e 6974 6e6f     ....For function
   d5200:	2520 3a69 6120 3d20 2520 2069 6e61 2064      %i: a = %i and 
   d5210:	2062 203d 6925 6520 7571 6c61 2073 6925     b = %i equals %i
   d5220:	0a20 0a00 0a0a 0000                          .......

000d5228 <_ZTVN5spark13EthernetClassE>:
	...
   d5230:	4493 000d 4489 000d 447f 000d 4475 000d     .D...D...D..uD..
   d5240:	4469 000d 445d 000d 4451 000d 4449 000d     iD..]D..QD..ID..
   d5250:	443f 000d 4435 000d 4d49 000d 6162 6475     ?D..5D..IM..baud
   d5260:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5270:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5280:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5290:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d52a0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d52b0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d52c0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d52d0:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d52e0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d52f0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5300:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5310:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5320:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5330:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5340:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5350:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5360:	7463 6d69 0065 0000                         ctime...

000d5368 <_ZTV9IPAddress>:
	...
   d5370:	47e1 000d 47d1 000d 47d3 000d               .G...G...G..

000d537c <_ZTV9USBSerial>:
	...
   d5384:	48b9 000d 4909 000d 4917 000d 453d 000d     .H...I...I..=E..
   d5394:	48f5 000d 48bb 000d 48d1 000d 4903 000d     .H...H...H...I..
   d53a4:	48e7 000d 48b5 000d                         .H...H..

000d53ac <_ZTV11USARTSerial>:
	...
   d53b4:	49c5 000d 4a15 000d 4a23 000d 453d 000d     .I...J..#J..=E..
   d53c4:	49d9 000d 49fb 000d 49e7 000d 4a0f 000d     .I...I...I...J..
   d53d4:	49c7 000d 49cb 000d                         .I...I..

000d53dc <_ZTVN5spark9MeshClassE>:
	...
   d53e4:	4b49 000d 4b3f 000d 4b35 000d 4b2b 000d     IK..?K..5K..+K..
   d53f4:	4b1f 000d 4b13 000d 4b07 000d 4aff 000d     .K...K...K...J..
   d5404:	4af5 000d 4aeb 000d 4d49 000d               .J...J..IM..

000d5410 <_ZTVN5spark9WiFiClassE>:
	...
   d5418:	4cc3 000d 4cb9 000d 4caf 000d 4c65 000d     .L...L...L..eL..
   d5428:	4ca3 000d 4c97 000d 4c8b 000d 4c83 000d     .L...L...L...L..
   d5438:	4c79 000d 4c6f 000d 4d49 000d               yL..oL..IM..

000d5444 <_ZTVN5spark12NetworkClassE>:
	...
   d544c:	4ce1 000d 4ceb 000d 4cf5 000d 4cff 000d     .L...L...L...L..
   d545c:	4d09 000d 4d15 000d 4d21 000d 4d2d 000d     .M...M..!M..-M..
   d546c:	4d35 000d 4d3f 000d 4d49 000d               5M..?M..IM..

000d5478 <__sf_fake_stdin>:
	...

000d5498 <__sf_fake_stdout>:
	...

000d54b8 <__sf_fake_stderr>:
	...
   d54d8:	0043                                        C.

000d54da <link_const_variable_data_end>:
	...

000d54dc <link_constructors_location>:
   d54dc:	000d4179 	.word	0x000d4179
   d54e0:	000d449d 	.word	0x000d449d
   d54e4:	000d44d1 	.word	0x000d44d1
   d54e8:	000d4515 	.word	0x000d4515
   d54ec:	000d465d 	.word	0x000d465d
   d54f0:	000d466d 	.word	0x000d466d
   d54f4:	000d46a5 	.word	0x000d46a5
   d54f8:	000d4c15 	.word	0x000d4c15
   d54fc:	000d4ccd 	.word	0x000d4ccd
   d5500:	000d4e15 	.word	0x000d4e15
   d5504:	000d4e39 	.word	0x000d4e39
   d5508:	000d4ebd 	.word	0x000d4ebd
   d550c:	000d4f81 	.word	0x000d4f81
   d5510:	000d5045 	.word	0x000d5045

000d5514 <link_constructors_end>:
	...
