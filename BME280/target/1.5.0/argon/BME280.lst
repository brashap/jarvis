
c:/Users/IoTPa/Documents/jarvis/BME280/target/1.5.0/argon/BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004ac0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d8ae0  000d8ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d8ae8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e314  000d8aec  0001e314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000470  2003e380  2003e380  0002e380  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d8b58  000d8b58  00028b58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8b80  000d8b80  00028b80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000cc530  00000000  00000000  00028b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010418  00000000  00000000  000f50b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ad22  00000000  00000000  001054cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002268  00000000  00000000  001201ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004110  00000000  00000000  00122456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00035d2a  00000000  00000000  00126566  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000278e9  00000000  00000000  0015c290  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00102cdb  00000000  00000000  00183b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c78c  00000000  00000000  00286854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fa6d 	bl	d8510 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fa72 	bl	d8526 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e314 	.word	0x2003e314
   d404c:	000d8aec 	.word	0x000d8aec
   d4050:	2003e380 	.word	0x2003e380
   d4054:	2003e380 	.word	0x2003e380
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fb43 	bl	d56e8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8adc 	.word	0x000d8adc
   d4084:	000d8aa0 	.word	0x000d8aa0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8eb 	bl	d4268 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bae9 	b.w	d566c <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bfc1 	b.w	d5020 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bfbf 	b.w	d5020 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
//Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK); // software SPI

unsigned long delayTime;

void setup()
{
   d40b4:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d40b6:	f001 fc1d 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f001 fc07 	bl	d58d0 <_ZN9USBSerial5beginEl>
    while (!Serial)
   d40c2:	f001 fc17 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40c6:	f001 fc0a 	bl	d58de <_ZN9USBSerialcvbEv>
   d40ca:	2800      	cmp	r0, #0
   d40cc:	d0f9      	beq.n	d40c2 <setup+0xe>
        ; // time to get serial running
    Serial.println(F("BME280 test"));
   d40ce:	f001 fc11 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40d2:	4921      	ldr	r1, [pc, #132]	; (d4158 <setup+0xa4>)
   d40d4:	f001 f94f 	bl	d5376 <_ZN5Print7printlnEPK19__FlashStringHelper>

    unsigned status;

    // default settings
    // (you can also pass in a Wire library object like &Wire2)
    status = bme.begin();
   d40d8:	4820      	ldr	r0, [pc, #128]	; (d415c <setup+0xa8>)
   d40da:	f000 fbe5 	bl	d48a8 <_ZN15Adafruit_BME2805beginEv>
    if (!status)
   d40de:	bb60      	cbnz	r0, d413a <setup+0x86>
    {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d40e0:	f001 fc08 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40e4:	491e      	ldr	r1, [pc, #120]	; (d4160 <setup+0xac>)
   d40e6:	f001 f93c 	bl	d5362 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d40ea:	f001 fc03 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40ee:	491d      	ldr	r1, [pc, #116]	; (d4164 <setup+0xb0>)
   d40f0:	f001 f924 	bl	d533c <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d40f4:	f001 fbfe 	bl	d58f4 <_Z16_fetch_usbserialv>
   d40f8:	4604      	mov	r4, r0
   d40fa:	4818      	ldr	r0, [pc, #96]	; (d415c <setup+0xa8>)
   d40fc:	f000 fd78 	bl	d4bf0 <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4100:	2210      	movs	r2, #16
   d4102:	4601      	mov	r1, r0
   d4104:	4620      	mov	r0, r4
   d4106:	f001 f938 	bl	d537a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d410a:	4620      	mov	r0, r4
   d410c:	f001 f91d 	bl	d534a <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d4110:	f001 fbf0 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4114:	4914      	ldr	r1, [pc, #80]	; (d4168 <setup+0xb4>)
   d4116:	f001 f911 	bl	d533c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d411a:	f001 fbeb 	bl	d58f4 <_Z16_fetch_usbserialv>
   d411e:	4913      	ldr	r1, [pc, #76]	; (d416c <setup+0xb8>)
   d4120:	f001 f90c 	bl	d533c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d4124:	f001 fbe6 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4128:	4911      	ldr	r1, [pc, #68]	; (d4170 <setup+0xbc>)
   d412a:	f001 f907 	bl	d533c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d412e:	f001 fbe1 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4132:	4910      	ldr	r1, [pc, #64]	; (d4174 <setup+0xc0>)
   d4134:	f001 f902 	bl	d533c <_ZN5Print5printEPKc>
   d4138:	e7fe      	b.n	d4138 <setup+0x84>
        while (1)
            ;
    }

    Serial.println("-- Default Test --");
   d413a:	f001 fbdb 	bl	d58f4 <_Z16_fetch_usbserialv>
   d413e:	490e      	ldr	r1, [pc, #56]	; (d4178 <setup+0xc4>)
   d4140:	f001 f90f 	bl	d5362 <_ZN5Print7printlnEPKc>
    delayTime = 1000;
   d4144:	4b0d      	ldr	r3, [pc, #52]	; (d417c <setup+0xc8>)
   d4146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d414a:	601a      	str	r2, [r3, #0]

    Serial.println();
   d414c:	f001 fbd2 	bl	d58f4 <_Z16_fetch_usbserialv>
}
   d4150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    Serial.println("-- Default Test --");
    delayTime = 1000;

    Serial.println();
   d4154:	f001 b8f9 	b.w	d534a <_ZN5Print7printlnEv>
   d4158:	000d85ac 	.word	0x000d85ac
   d415c:	2003e388 	.word	0x2003e388
   d4160:	000d85b8 	.word	0x000d85b8
   d4164:	000d8600 	.word	0x000d8600
   d4168:	000d8611 	.word	0x000d8611
   d416c:	000d8658 	.word	0x000d8658
   d4170:	000d8682 	.word	0x000d8682
   d4174:	000d86ac 	.word	0x000d86ac
   d4178:	000d86d6 	.word	0x000d86d6
   d417c:	2003e384 	.word	0x2003e384

000d4180 <_Z11printValuesv>:
    printValues();
    delay(delayTime);
}

void printValues()
{
   d4180:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d4182:	f001 fbb7 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4186:	492d      	ldr	r1, [pc, #180]	; (d423c <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d4188:	4c2d      	ldr	r4, [pc, #180]	; (d4240 <_Z11printValuesv+0xc0>)
    delay(delayTime);
}

void printValues()
{
    Serial.print("Temperature = ");
   d418a:	f001 f8d7 	bl	d533c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d418e:	f001 fbb1 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4192:	4605      	mov	r5, r0
   d4194:	4620      	mov	r0, r4
   d4196:	f000 fb9b 	bl	d48d0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d419a:	2102      	movs	r1, #2
   d419c:	4628      	mov	r0, r5
   d419e:	f001 f9cb 	bl	d5538 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d41a2:	f001 fba7 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41a6:	4927      	ldr	r1, [pc, #156]	; (d4244 <_Z11printValuesv+0xc4>)
   d41a8:	f001 f8db 	bl	d5362 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d41ac:	f001 fba2 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41b0:	4925      	ldr	r1, [pc, #148]	; (d4248 <_Z11printValuesv+0xc8>)
   d41b2:	f001 f8c3 	bl	d533c <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d41b6:	f001 fb9d 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41ba:	4605      	mov	r5, r0
   d41bc:	4620      	mov	r0, r4
   d41be:	f000 fbb5 	bl	d492c <_ZN15Adafruit_BME28012readPressureEv>
   d41c2:	eddf 7a22 	vldr	s15, [pc, #136]	; d424c <_Z11printValuesv+0xcc>
   d41c6:	2102      	movs	r1, #2
   d41c8:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d41cc:	4628      	mov	r0, r5
   d41ce:	f001 f9b3 	bl	d5538 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d41d2:	f001 fb8f 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41d6:	491e      	ldr	r1, [pc, #120]	; (d4250 <_Z11printValuesv+0xd0>)
   d41d8:	f001 f8c3 	bl	d5362 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d41dc:	f001 fb8a 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41e0:	491c      	ldr	r1, [pc, #112]	; (d4254 <_Z11printValuesv+0xd4>)
   d41e2:	f001 f8ab 	bl	d533c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d41e6:	f001 fb85 	bl	d58f4 <_Z16_fetch_usbserialv>
   d41ea:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d4258 <_Z11printValuesv+0xd8>
   d41ee:	4605      	mov	r5, r0
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fcc5 	bl	d4b80 <_ZN15Adafruit_BME28012readAltitudeEf>
   d41f6:	2102      	movs	r1, #2
   d41f8:	4628      	mov	r0, r5
   d41fa:	f001 f99d 	bl	d5538 <_ZN5Print5printEfi>
    Serial.println(" m");
   d41fe:	f001 fb79 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4202:	4916      	ldr	r1, [pc, #88]	; (d425c <_Z11printValuesv+0xdc>)
   d4204:	f001 f8ad 	bl	d5362 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d4208:	f001 fb74 	bl	d58f4 <_Z16_fetch_usbserialv>
   d420c:	4914      	ldr	r1, [pc, #80]	; (d4260 <_Z11printValuesv+0xe0>)
   d420e:	f001 f895 	bl	d533c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d4212:	f001 fb6f 	bl	d58f4 <_Z16_fetch_usbserialv>
   d4216:	4605      	mov	r5, r0
   d4218:	4620      	mov	r0, r4
   d421a:	f000 fc65 	bl	d4ae8 <_ZN15Adafruit_BME28012readHumidityEv>
   d421e:	2102      	movs	r1, #2
   d4220:	4628      	mov	r0, r5
   d4222:	f001 f989 	bl	d5538 <_ZN5Print5printEfi>
    Serial.println(" %");
   d4226:	f001 fb65 	bl	d58f4 <_Z16_fetch_usbserialv>
   d422a:	490e      	ldr	r1, [pc, #56]	; (d4264 <_Z11printValuesv+0xe4>)
   d422c:	f001 f899 	bl	d5362 <_ZN5Print7printlnEPKc>

    Serial.println();
   d4230:	f001 fb60 	bl	d58f4 <_Z16_fetch_usbserialv>
}
   d4234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4238:	f001 b887 	b.w	d534a <_ZN5Print7printlnEv>
   d423c:	000d86e9 	.word	0x000d86e9
   d4240:	2003e388 	.word	0x2003e388
   d4244:	000d86f8 	.word	0x000d86f8
   d4248:	000d86fc 	.word	0x000d86fc
   d424c:	42c80000 	.word	0x42c80000
   d4250:	000d8708 	.word	0x000d8708
   d4254:	000d870d 	.word	0x000d870d
   d4258:	447d5000 	.word	0x447d5000
   d425c:	000d8721 	.word	0x000d8721
   d4260:	000d8724 	.word	0x000d8724
   d4264:	000d8730 	.word	0x000d8730

000d4268 <loop>:

    Serial.println();
}

void loop()
{
   d4268:	b508      	push	{r3, lr}
    printValues();
   d426a:	f7ff ff89 	bl	d4180 <_Z11printValuesv>
    delay(delayTime);
   d426e:	4b03      	ldr	r3, [pc, #12]	; (d427c <loop+0x14>)
   d4270:	6818      	ldr	r0, [r3, #0]
}
   d4272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop()
{
    printValues();
    delay(delayTime);
   d4276:	f001 b9bb 	b.w	d55f0 <delay>
   d427a:	bf00      	nop
   d427c:	2003e384 	.word	0x2003e384

000d4280 <_GLOBAL__sub_I_bme>:
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
}
   d4280:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4282:	f000 fcc9 	bl	d4c18 <HAL_Pin_Map>
#define BME_MOSI D2
#define BME_CS D5

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme; // I2C
   d4286:	4802      	ldr	r0, [pc, #8]	; (d4290 <_GLOBAL__sub_I_bme+0x10>)
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
}
   d4288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define BME_MOSI D2
#define BME_CS D5

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme; // I2C
   d428c:	f000 b82e 	b.w	d42ec <_ZN15Adafruit_BME280C1Ev>
   d4290:	2003e388 	.word	0x2003e388

000d4294 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4296:	4602      	mov	r2, r0
   d4298:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d429a:	7913      	ldrb	r3, [r2, #4]
   d429c:	6895      	ldr	r5, [r2, #8]
   d429e:	b133      	cbz	r3, d42ae <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d42a0:	b93d      	cbnz	r5, d42b2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d42a2:	490c      	ldr	r1, [pc, #48]	; (d42d4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d42a4:	b004      	add	sp, #16
   d42a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d42aa:	f001 b847 	b.w	d533c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d42ae:	4b0a      	ldr	r3, [pc, #40]	; (d42d8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d42b0:	e000      	b.n	d42b4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d42b2:	4b0a      	ldr	r3, [pc, #40]	; (d42dc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d42b4:	7b16      	ldrb	r6, [r2, #12]
   d42b6:	4c0a      	ldr	r4, [pc, #40]	; (d42e0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d42b8:	490a      	ldr	r1, [pc, #40]	; (d42e4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42ba:	7b52      	ldrb	r2, [r2, #13]
   d42bc:	9202      	str	r2, [sp, #8]
   d42be:	2e01      	cmp	r6, #1
   d42c0:	bf08      	it	eq
   d42c2:	4621      	moveq	r1, r4
   d42c4:	9101      	str	r1, [sp, #4]
   d42c6:	9500      	str	r5, [sp, #0]
   d42c8:	4a07      	ldr	r2, [pc, #28]	; (d42e8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d42ca:	2100      	movs	r1, #0
   d42cc:	f001 f943 	bl	d5556 <_ZN5Print11printf_implEbPKcz>
  }
   d42d0:	b004      	add	sp, #16
   d42d2:	bd70      	pop	{r4, r5, r6, pc}
   d42d4:	000d8751 	.word	0x000d8751
   d42d8:	000d8889 	.word	0x000d8889
   d42dc:	000d8740 	.word	0x000d8740
   d42e0:	000d8749 	.word	0x000d8749
   d42e4:	000d874d 	.word	0x000d874d
   d42e8:	000d8767 	.word	0x000d8767

000d42ec <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d42ec:	22ff      	movs	r2, #255	; 0xff
   d42ee:	7402      	strb	r2, [r0, #16]
   d42f0:	7442      	strb	r2, [r0, #17]
   d42f2:	7482      	strb	r2, [r0, #18]
   d42f4:	74c2      	strb	r2, [r0, #19]
{ }
   d42f6:	4770      	bx	lr

000d42f8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d42f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d42fc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4300:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4302:	4605      	mov	r5, r0
   d4304:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4306:	d106      	bne.n	d4316 <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return SPI.transfer(x);
   d4308:	f001 fe20 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d430c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d430e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d4312:	f000 bf91 	b.w	d5238 <_ZN8SPIClass8transferEh>
   d4316:	2607      	movs	r6, #7
   d4318:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d431a:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d431e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4322:	2100      	movs	r1, #0
   d4324:	b280      	uxth	r0, r0
   d4326:	f001 fde4 	bl	d5ef2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d432a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d432e:	fa08 f106 	lsl.w	r1, r8, r6
   d4332:	4039      	ands	r1, r7
   d4334:	b280      	uxth	r0, r0
   d4336:	f001 fddc 	bl	d5ef2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d433a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d433e:	2101      	movs	r1, #1
   d4340:	b280      	uxth	r0, r0
   d4342:	f001 fdd6 	bl	d5ef2 <digitalWrite>
        if (digitalRead(_miso))
   d4346:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d434a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d434c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d434e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4350:	f001 fde8 	bl	d5f24 <digitalRead>
   d4354:	b108      	cbz	r0, d435a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4356:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d435a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d435e:	d2de      	bcs.n	d431e <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4360:	4620      	mov	r0, r4
   d4362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4368 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d436a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d436e:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4370:	4604      	mov	r4, r0
   d4372:	460e      	mov	r6, r1
   d4374:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4376:	d111      	bne.n	d439c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4378:	7901      	ldrb	r1, [r0, #4]
   d437a:	6800      	ldr	r0, [r0, #0]
   d437c:	f001 fbd7 	bl	d5b2e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4380:	6820      	ldr	r0, [r4, #0]
   d4382:	6803      	ldr	r3, [r0, #0]
   d4384:	4631      	mov	r1, r6
   d4386:	689b      	ldr	r3, [r3, #8]
   d4388:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d438a:	6820      	ldr	r0, [r4, #0]
   d438c:	6803      	ldr	r3, [r0, #0]
   d438e:	4629      	mov	r1, r5
   d4390:	689b      	ldr	r3, [r3, #8]
   d4392:	4798      	blx	r3
        _wire -> endTransmission();
   d4394:	6820      	ldr	r0, [r4, #0]
   d4396:	f001 fbd2 	bl	d5b3e <_ZN7TwoWire15endTransmissionEv>
   d439a:	e031      	b.n	d4400 <_ZN15Adafruit_BME2806write8Ehh+0x98>
    } else {
        if (_sck == -1)
   d439c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d43a0:	3301      	adds	r3, #1
   d43a2:	d110      	bne.n	d43c6 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d43a4:	f001 fdd2 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d43a8:	4b16      	ldr	r3, [pc, #88]	; (d4404 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d43aa:	4a17      	ldr	r2, [pc, #92]	; (d4408 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d43ac:	9300      	str	r3, [sp, #0]
   d43ae:	9202      	str	r2, [sp, #8]
   d43b0:	2300      	movs	r3, #0
   d43b2:	2201      	movs	r2, #1
   d43b4:	4669      	mov	r1, sp
   d43b6:	f88d 3004 	strb.w	r3, [sp, #4]
   d43ba:	f88d 200c 	strb.w	r2, [sp, #12]
   d43be:	f88d 300d 	strb.w	r3, [sp, #13]
   d43c2:	f000 fec9 	bl	d5158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d43c6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d43ca:	2100      	movs	r1, #0
   d43cc:	b280      	uxth	r0, r0
   d43ce:	f001 fd90 	bl	d5ef2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d43d2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d43d6:	4620      	mov	r0, r4
   d43d8:	f7ff ff8e 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d43dc:	4629      	mov	r1, r5
   d43de:	4620      	mov	r0, r4
   d43e0:	f7ff ff8a 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d43e4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d43e8:	2101      	movs	r1, #1
   d43ea:	b280      	uxth	r0, r0
   d43ec:	f001 fd81 	bl	d5ef2 <digitalWrite>
    if (_sck == -1)
   d43f0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d43f4:	3301      	adds	r3, #1
   d43f6:	d103      	bne.n	d4400 <_ZN15Adafruit_BME2806write8Ehh+0x98>
        SPI.endTransaction(); // release the SPI bus
   d43f8:	f001 fda8 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d43fc:	f000 fe93 	bl	d5126 <_ZN8SPIClass14endTransactionEv>
    }
}
   d4400:	b004      	add	sp, #16
   d4402:	bd70      	pop	{r4, r5, r6, pc}
   d4404:	000d873c 	.word	0x000d873c
   d4408:	0007a120 	.word	0x0007a120

000d440c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d440e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4412:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4416:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d441a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d441e:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4422:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4426:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d442a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d442e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4432:	f366 1347 	bfi	r3, r6, #5, #3
   d4436:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d443a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d443e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4442:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4444:	f367 0302 	bfi	r3, r7, #0, #3
   d4448:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d444c:	f006 0207 	and.w	r2, r6, #7
   d4450:	21f2      	movs	r1, #242	; 0xf2
   d4452:	f7ff ff89 	bl	d4368 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4456:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d445a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d445e:	f002 0107 	and.w	r1, r2, #7
   d4462:	009b      	lsls	r3, r3, #2
   d4464:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4468:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d446c:	4620      	mov	r0, r4
   d446e:	21f5      	movs	r1, #245	; 0xf5
   d4470:	f7ff ff7a 	bl	d4368 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4474:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4478:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d447c:	f002 0107 	and.w	r1, r2, #7
   d4480:	009b      	lsls	r3, r3, #2
   d4482:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4486:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d448a:	4620      	mov	r0, r4
   d448c:	21f4      	movs	r1, #244	; 0xf4
}
   d448e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4492:	f7ff bf69 	b.w	d4368 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4498 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4498:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d449a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d449e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d44a0:	b085      	sub	sp, #20
   d44a2:	4604      	mov	r4, r0
   d44a4:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d44a6:	d116      	bne.n	d44d6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d44a8:	7901      	ldrb	r1, [r0, #4]
   d44aa:	6800      	ldr	r0, [r0, #0]
   d44ac:	f001 fb3f 	bl	d5b2e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44b0:	6820      	ldr	r0, [r4, #0]
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	4629      	mov	r1, r5
   d44b6:	689b      	ldr	r3, [r3, #8]
   d44b8:	4798      	blx	r3
        _wire -> endTransmission();
   d44ba:	6820      	ldr	r0, [r4, #0]
   d44bc:	f001 fb3f 	bl	d5b3e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d44c0:	2201      	movs	r2, #1
   d44c2:	7921      	ldrb	r1, [r4, #4]
   d44c4:	6820      	ldr	r0, [r4, #0]
   d44c6:	f001 fb2f 	bl	d5b28 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d44ca:	6820      	ldr	r0, [r4, #0]
   d44cc:	6803      	ldr	r3, [r0, #0]
   d44ce:	695b      	ldr	r3, [r3, #20]
   d44d0:	4798      	blx	r3
   d44d2:	b2c5      	uxtb	r5, r0
   d44d4:	e032      	b.n	d453c <_ZN15Adafruit_BME2805read8Eh+0xa4>
    } else {
        if (_sck == -1)
   d44d6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44da:	3301      	adds	r3, #1
   d44dc:	d110      	bne.n	d4500 <_ZN15Adafruit_BME2805read8Eh+0x68>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d44de:	f001 fd35 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d44e2:	4b18      	ldr	r3, [pc, #96]	; (d4544 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d44e4:	4a18      	ldr	r2, [pc, #96]	; (d4548 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d44e6:	9300      	str	r3, [sp, #0]
   d44e8:	9202      	str	r2, [sp, #8]
   d44ea:	2300      	movs	r3, #0
   d44ec:	2201      	movs	r2, #1
   d44ee:	4669      	mov	r1, sp
   d44f0:	f88d 3004 	strb.w	r3, [sp, #4]
   d44f4:	f88d 200c 	strb.w	r2, [sp, #12]
   d44f8:	f88d 300d 	strb.w	r3, [sp, #13]
   d44fc:	f000 fe2c 	bl	d5158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4500:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4504:	2100      	movs	r1, #0
   d4506:	b280      	uxth	r0, r0
   d4508:	f001 fcf3 	bl	d5ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d450c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4510:	4620      	mov	r0, r4
   d4512:	f7ff fef1 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4516:	2100      	movs	r1, #0
   d4518:	4620      	mov	r0, r4
   d451a:	f7ff feed 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
   d451e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4520:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4524:	2101      	movs	r1, #1
   d4526:	b280      	uxth	r0, r0
   d4528:	f001 fce3 	bl	d5ef2 <digitalWrite>
        if (_sck == -1)
   d452c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4530:	3301      	adds	r3, #1
   d4532:	d103      	bne.n	d453c <_ZN15Adafruit_BME2805read8Eh+0xa4>
            SPI.endTransaction(); // release the SPI bus
   d4534:	f001 fd0a 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d4538:	f000 fdf5 	bl	d5126 <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d453c:	4628      	mov	r0, r5
   d453e:	b005      	add	sp, #20
   d4540:	bd30      	pop	{r4, r5, pc}
   d4542:	bf00      	nop
   d4544:	000d873c 	.word	0x000d873c
   d4548:	0007a120 	.word	0x0007a120

000d454c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d454c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d454e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4552:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4554:	b085      	sub	sp, #20
   d4556:	4604      	mov	r4, r0
   d4558:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d455a:	d11d      	bne.n	d4598 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d455c:	7901      	ldrb	r1, [r0, #4]
   d455e:	6800      	ldr	r0, [r0, #0]
   d4560:	f001 fae5 	bl	d5b2e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4564:	6820      	ldr	r0, [r4, #0]
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	4629      	mov	r1, r5
   d456a:	689b      	ldr	r3, [r3, #8]
   d456c:	4798      	blx	r3
        _wire -> endTransmission();
   d456e:	6820      	ldr	r0, [r4, #0]
   d4570:	f001 fae5 	bl	d5b3e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4574:	2202      	movs	r2, #2
   d4576:	7921      	ldrb	r1, [r4, #4]
   d4578:	6820      	ldr	r0, [r4, #0]
   d457a:	f001 fad5 	bl	d5b28 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d457e:	6820      	ldr	r0, [r4, #0]
   d4580:	6803      	ldr	r3, [r0, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	4798      	blx	r3
   d4586:	4605      	mov	r5, r0
   d4588:	6820      	ldr	r0, [r4, #0]
   d458a:	6803      	ldr	r3, [r0, #0]
   d458c:	695b      	ldr	r3, [r3, #20]
   d458e:	4798      	blx	r3
   d4590:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4594:	b285      	uxth	r5, r0
   d4596:	e039      	b.n	d460c <_ZN15Adafruit_BME2806read16Eh+0xc0>
    } else {
        if (_sck == -1)
   d4598:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d459c:	3301      	adds	r3, #1
   d459e:	d110      	bne.n	d45c2 <_ZN15Adafruit_BME2806read16Eh+0x76>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45a0:	f001 fcd4 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d45a4:	4b1b      	ldr	r3, [pc, #108]	; (d4614 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d45a6:	4a1c      	ldr	r2, [pc, #112]	; (d4618 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d45a8:	9300      	str	r3, [sp, #0]
   d45aa:	9202      	str	r2, [sp, #8]
   d45ac:	2300      	movs	r3, #0
   d45ae:	2201      	movs	r2, #1
   d45b0:	4669      	mov	r1, sp
   d45b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d45b6:	f88d 200c 	strb.w	r2, [sp, #12]
   d45ba:	f88d 300d 	strb.w	r3, [sp, #13]
   d45be:	f000 fdcb 	bl	d5158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d45c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45c6:	2100      	movs	r1, #0
   d45c8:	b280      	uxth	r0, r0
   d45ca:	f001 fc92 	bl	d5ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45ce:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d45d2:	4620      	mov	r0, r4
   d45d4:	f7ff fe90 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d45d8:	2100      	movs	r1, #0
   d45da:	4620      	mov	r0, r4
   d45dc:	f7ff fe8c 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
   d45e0:	2100      	movs	r1, #0
   d45e2:	4605      	mov	r5, r0
   d45e4:	4620      	mov	r0, r4
   d45e6:	f7ff fe87 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
   d45ea:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d45ee:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d45f0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45f4:	2101      	movs	r1, #1
   d45f6:	b280      	uxth	r0, r0
   d45f8:	f001 fc7b 	bl	d5ef2 <digitalWrite>
        if (_sck == -1)
   d45fc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4600:	3301      	adds	r3, #1
   d4602:	d103      	bne.n	d460c <_ZN15Adafruit_BME2806read16Eh+0xc0>
            SPI.endTransaction(); // release the SPI bus
   d4604:	f001 fca2 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d4608:	f000 fd8d 	bl	d5126 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d460c:	4628      	mov	r0, r5
   d460e:	b005      	add	sp, #20
   d4610:	bd30      	pop	{r4, r5, pc}
   d4612:	bf00      	nop
   d4614:	000d873c 	.word	0x000d873c
   d4618:	0007a120 	.word	0x0007a120

000d461c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d461c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d461e:	f7ff ff95 	bl	d454c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4622:	ba40      	rev16	r0, r0
}
   d4624:	b280      	uxth	r0, r0
   d4626:	bd08      	pop	{r3, pc}

000d4628 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4628:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d462a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d462e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4630:	b085      	sub	sp, #20
   d4632:	4604      	mov	r4, r0
   d4634:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4636:	d121      	bne.n	d467c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4638:	7901      	ldrb	r1, [r0, #4]
   d463a:	6800      	ldr	r0, [r0, #0]
   d463c:	f001 fa77 	bl	d5b2e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4640:	6820      	ldr	r0, [r4, #0]
   d4642:	6803      	ldr	r3, [r0, #0]
   d4644:	4629      	mov	r1, r5
   d4646:	689b      	ldr	r3, [r3, #8]
   d4648:	4798      	blx	r3
        _wire -> endTransmission();
   d464a:	6820      	ldr	r0, [r4, #0]
   d464c:	f001 fa77 	bl	d5b3e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4650:	2203      	movs	r2, #3
   d4652:	7921      	ldrb	r1, [r4, #4]
   d4654:	6820      	ldr	r0, [r4, #0]
   d4656:	f001 fa67 	bl	d5b28 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d465a:	6820      	ldr	r0, [r4, #0]
   d465c:	6803      	ldr	r3, [r0, #0]
   d465e:	695b      	ldr	r3, [r3, #20]
   d4660:	4798      	blx	r3
        value <<= 8;
   d4662:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4664:	6820      	ldr	r0, [r4, #0]
   d4666:	6803      	ldr	r3, [r0, #0]
   d4668:	695b      	ldr	r3, [r3, #20]
   d466a:	4798      	blx	r3
   d466c:	4328      	orrs	r0, r5
        value <<= 8;
   d466e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4670:	6820      	ldr	r0, [r4, #0]
   d4672:	6803      	ldr	r3, [r0, #0]
   d4674:	695b      	ldr	r3, [r3, #20]
   d4676:	4798      	blx	r3
   d4678:	4305      	orrs	r5, r0
   d467a:	e03d      	b.n	d46f8 <_ZN15Adafruit_BME2806read24Eh+0xd0>
    } else {
        if (_sck == -1)
   d467c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4680:	3301      	adds	r3, #1
   d4682:	d110      	bne.n	d46a6 <_ZN15Adafruit_BME2806read24Eh+0x7e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4684:	f001 fc62 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d4688:	4b1d      	ldr	r3, [pc, #116]	; (d4700 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d468a:	4a1e      	ldr	r2, [pc, #120]	; (d4704 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d468c:	9300      	str	r3, [sp, #0]
   d468e:	9202      	str	r2, [sp, #8]
   d4690:	2300      	movs	r3, #0
   d4692:	2201      	movs	r2, #1
   d4694:	4669      	mov	r1, sp
   d4696:	f88d 3004 	strb.w	r3, [sp, #4]
   d469a:	f88d 200c 	strb.w	r2, [sp, #12]
   d469e:	f88d 300d 	strb.w	r3, [sp, #13]
   d46a2:	f000 fd59 	bl	d5158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d46a6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46aa:	2100      	movs	r1, #0
   d46ac:	b280      	uxth	r0, r0
   d46ae:	f001 fc20 	bl	d5ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46b2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46b6:	4620      	mov	r0, r4
   d46b8:	f7ff fe1e 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d46bc:	2100      	movs	r1, #0
   d46be:	4620      	mov	r0, r4
   d46c0:	f7ff fe1a 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d46c4:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d46c6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46c8:	4620      	mov	r0, r4
   d46ca:	f7ff fe15 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
   d46ce:	4328      	orrs	r0, r5
        value <<= 8;
   d46d0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46d2:	2100      	movs	r1, #0
   d46d4:	4620      	mov	r0, r4
   d46d6:	f7ff fe0f 	bl	d42f8 <_ZN15Adafruit_BME2807spixferEh>
   d46da:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d46dc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46e0:	2101      	movs	r1, #1
   d46e2:	b280      	uxth	r0, r0
   d46e4:	f001 fc05 	bl	d5ef2 <digitalWrite>
        if (_sck == -1)
   d46e8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46ec:	3301      	adds	r3, #1
   d46ee:	d103      	bne.n	d46f8 <_ZN15Adafruit_BME2806read24Eh+0xd0>
            SPI.endTransaction(); // release the SPI bus
   d46f0:	f001 fc2c 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d46f4:	f000 fd17 	bl	d5126 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d46f8:	4628      	mov	r0, r5
   d46fa:	b005      	add	sp, #20
   d46fc:	bd30      	pop	{r4, r5, pc}
   d46fe:	bf00      	nop
   d4700:	000d873c 	.word	0x000d873c
   d4704:	0007a120 	.word	0x0007a120

000d4708 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4708:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d470a:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d470c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d470e:	f7ff ff85 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4712:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4714:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4716:	4620      	mov	r0, r4
   d4718:	f7ff ff80 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d471c:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d471e:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4720:	4620      	mov	r0, r4
   d4722:	f7ff ff7b 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4726:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4728:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d472a:	4620      	mov	r0, r4
   d472c:	f7ff ff76 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4730:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4732:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4734:	4620      	mov	r0, r4
   d4736:	f7ff ff71 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d473a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d473c:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d473e:	4620      	mov	r0, r4
   d4740:	f7ff ff6c 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d4744:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4746:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4748:	4620      	mov	r0, r4
   d474a:	f7ff ff67 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d474e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4750:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4752:	4620      	mov	r0, r4
   d4754:	f7ff ff62 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d4758:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d475a:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d475c:	4620      	mov	r0, r4
   d475e:	f7ff ff5d 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d4762:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4764:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4766:	4620      	mov	r0, r4
   d4768:	f7ff ff58 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d476c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d476e:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4770:	4620      	mov	r0, r4
   d4772:	f7ff ff53 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
   d4776:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4778:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff ff4e 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4780:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4782:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4784:	4620      	mov	r0, r4
   d4786:	f7ff fe87 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d478a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d478c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4790:	4620      	mov	r0, r4
   d4792:	f7ff ff43 	bl	d461c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4796:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4798:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d479a:	4620      	mov	r0, r4
   d479c:	f7ff fe7c 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47a0:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d47a2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff fe76 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
   d47ac:	21e5      	movs	r1, #229	; 0xe5
   d47ae:	4605      	mov	r5, r0
   d47b0:	4620      	mov	r0, r4
   d47b2:	f7ff fe71 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
   d47b6:	f000 000f 	and.w	r0, r0, #15
   d47ba:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d47be:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d47c0:	21e6      	movs	r1, #230	; 0xe6
   d47c2:	4620      	mov	r0, r4
   d47c4:	f7ff fe68 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
   d47c8:	21e5      	movs	r1, #229	; 0xe5
   d47ca:	4605      	mov	r5, r0
   d47cc:	4620      	mov	r0, r4
   d47ce:	f7ff fe63 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
   d47d2:	1100      	asrs	r0, r0, #4
   d47d4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d47d8:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d47da:	21e7      	movs	r1, #231	; 0xe7
   d47dc:	4620      	mov	r0, r4
   d47de:	f7ff fe5b 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
   d47e2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d47e6:	bd38      	pop	{r3, r4, r5, pc}

000d47e8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d47e8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d47ea:	21f3      	movs	r1, #243	; 0xf3
   d47ec:	f7ff fe54 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d47f0:	f000 0001 	and.w	r0, r0, #1
   d47f4:	bd08      	pop	{r3, pc}

000d47f6 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d47f6:	b530      	push	{r4, r5, lr}
   d47f8:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d47fa:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d47fe:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4800:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4802:	d103      	bne.n	d480c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4804:	6820      	ldr	r0, [r4, #0]
   d4806:	f001 f95b 	bl	d5ac0 <_ZN7TwoWire5beginEv>
   d480a:	e022      	b.n	d4852 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d480c:	2101      	movs	r1, #1
   d480e:	b280      	uxth	r0, r0
   d4810:	f001 fb6f 	bl	d5ef2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4814:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4818:	2101      	movs	r1, #1
   d481a:	b280      	uxth	r0, r0
   d481c:	f001 fb58 	bl	d5ed0 <pinMode>
        if (_sck == -1) {
   d4820:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4824:	1c43      	adds	r3, r0, #1
   d4826:	d104      	bne.n	d4832 <_ZN15Adafruit_BME2804initEv+0x3c>
            // hardware SPI
            SPI.begin();
   d4828:	f001 fb90 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d482c:	f000 fc6a 	bl	d5104 <_ZN8SPIClass5beginEv>
   d4830:	e00f      	b.n	d4852 <_ZN15Adafruit_BME2804initEv+0x5c>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4832:	2101      	movs	r1, #1
   d4834:	b280      	uxth	r0, r0
   d4836:	f001 fb4b 	bl	d5ed0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d483a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d483e:	2101      	movs	r1, #1
   d4840:	b280      	uxth	r0, r0
   d4842:	f001 fb45 	bl	d5ed0 <pinMode>
            pinMode(_miso, INPUT);
   d4846:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d484a:	2100      	movs	r1, #0
   d484c:	b280      	uxth	r0, r0
   d484e:	f001 fb3f 	bl	d5ed0 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4852:	21d0      	movs	r1, #208	; 0xd0
   d4854:	4620      	mov	r0, r4
   d4856:	f7ff fe1f 	bl	d4498 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d485a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d485c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d485e:	d120      	bne.n	d48a2 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4860:	4620      	mov	r0, r4
   d4862:	22b6      	movs	r2, #182	; 0xb6
   d4864:	21e0      	movs	r1, #224	; 0xe0
   d4866:	f7ff fd7f 	bl	d4368 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d486a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d486e:	f000 febf 	bl	d55f0 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4872:	4620      	mov	r0, r4
   d4874:	f7ff ffb8 	bl	d47e8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4878:	4605      	mov	r5, r0
   d487a:	b108      	cbz	r0, d4880 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d487c:	2064      	movs	r0, #100	; 0x64
   d487e:	e7f6      	b.n	d486e <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff ff41 	bl	d4708 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4886:	2305      	movs	r3, #5
   d4888:	9300      	str	r3, [sp, #0]
   d488a:	461a      	mov	r2, r3
   d488c:	2103      	movs	r1, #3
   d488e:	4620      	mov	r0, r4
   d4890:	9502      	str	r5, [sp, #8]
   d4892:	9501      	str	r5, [sp, #4]
   d4894:	f7ff fdba 	bl	d440c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4898:	2064      	movs	r0, #100	; 0x64
   d489a:	f000 fea9 	bl	d55f0 <delay>

    return true;
   d489e:	2001      	movs	r0, #1
   d48a0:	e000      	b.n	d48a4 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d48a2:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d48a4:	b005      	add	sp, #20
   d48a6:	bd30      	pop	{r4, r5, pc}

000d48a8 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48a8:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48aa:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48ac:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48ae:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d48b0:	f001 fb86 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d48b4:	6020      	str	r0, [r4, #0]
	status = init();
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff ff9d 	bl	d47f6 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d48bc:	b930      	cbnz	r0, d48cc <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d48be:	2376      	movs	r3, #118	; 0x76
   d48c0:	7123      	strb	r3, [r4, #4]
 		status = init();
   d48c2:	4620      	mov	r0, r4
 		}
	return status;
}
   d48c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d48c8:	f7ff bf95 	b.w	d47f6 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d48cc:	bd10      	pop	{r4, pc}
	...

000d48d0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d48d0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d48d2:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d48d4:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d48d6:	f7ff fea7 	bl	d4628 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d48da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d48de:	d01e      	beq.n	d491e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d48e0:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d48e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4924 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d48e6:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d48ea:	0052      	lsls	r2, r2, #1
   d48ec:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d48f0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d48f4:	435b      	muls	r3, r3
   d48f6:	4350      	muls	r0, r2
   d48f8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d48fc:	131b      	asrs	r3, r3, #12
   d48fe:	4353      	muls	r3, r2
   d4900:	139b      	asrs	r3, r3, #14
   d4902:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4906:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4908:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d490c:	3080      	adds	r0, #128	; 0x80
   d490e:	1200      	asrs	r0, r0, #8
   d4910:	ee07 0a90 	vmov	s15, r0
   d4914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4918:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d491c:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d491e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4928 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4922:	bd10      	pop	{r4, pc}
   d4924:	42c80000 	.word	0x42c80000
   d4928:	7fc00000 	.word	0x7fc00000

000d492c <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d492c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4930:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4932:	f7ff ffcd 	bl	d48d0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4936:	21f7      	movs	r1, #247	; 0xf7
   d4938:	4630      	mov	r0, r6
   d493a:	f7ff fe75 	bl	d4628 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d493e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4942:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4944:	f000 80c1 	beq.w	d4aca <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4948:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d494a:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d494e:	17e5      	asrs	r5, r4, #31
   d4950:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4954:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4958:	fba4 8904 	umull	r8, r9, r4, r4
   d495c:	fb04 f305 	mul.w	r3, r4, r5
   d4960:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4964:	fb02 f105 	mul.w	r1, r2, r5
   d4968:	17d3      	asrs	r3, r2, #31
   d496a:	fb04 1103 	mla	r1, r4, r3, r1
   d496e:	fba2 2304 	umull	r2, r3, r2, r4
   d4972:	440b      	add	r3, r1
   d4974:	0319      	lsls	r1, r3, #12
   d4976:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d497a:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d497c:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4980:	17d3      	asrs	r3, r2, #31
   d4982:	fb02 fe09 	mul.w	lr, r2, r9
   d4986:	fb08 ee03 	mla	lr, r8, r3, lr
   d498a:	fba2 2308 	umull	r2, r3, r2, r8
   d498e:	4473      	add	r3, lr
   d4990:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4994:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4998:	eb1a 0a00 	adds.w	sl, sl, r0
   d499c:	8b72      	ldrh	r2, [r6, #26]
   d499e:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d49a2:	eb4b 0b01 	adc.w	fp, fp, r1
   d49a6:	f11a 0000 	adds.w	r0, sl, #0
   d49aa:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d49ae:	fba0 ab02 	umull	sl, fp, r0, r2
   d49b2:	fb02 bb01 	mla	fp, r2, r1, fp
   d49b6:	ea4f 026b 	mov.w	r2, fp, asr #1
   d49ba:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d49be:	ea52 0103 	orrs.w	r1, r2, r3
   d49c2:	f000 8086 	beq.w	d4ad2 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d49c6:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d49ca:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d49ce:	fb0a f109 	mul.w	r1, sl, r9
   d49d2:	fb08 110b 	mla	r1, r8, fp, r1
   d49d6:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d49da:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d49de:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d49e0:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d49e4:	fb0a f105 	mul.w	r1, sl, r5
   d49e8:	fb04 110b 	mla	r1, r4, fp, r1
   d49ec:	fbaa 4504 	umull	r4, r5, sl, r4
   d49f0:	440d      	add	r5, r1
   d49f2:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d49f6:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d49fa:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d49fc:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4a00:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4a04:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4a08:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4a0c:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4a10:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4a14:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4a18:	07c4      	lsls	r4, r0, #31
   d4a1a:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4a1e:	f04f 0800 	mov.w	r8, #0
   d4a22:	eb18 080a 	adds.w	r8, r8, sl
   d4a26:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4a2a:	eb49 090b 	adc.w	r9, r9, fp
   d4a2e:	f640 4735 	movw	r7, #3125	; 0xc35
   d4a32:	ebb4 0408 	subs.w	r4, r4, r8
   d4a36:	eb65 0509 	sbc.w	r5, r5, r9
   d4a3a:	fba4 0107 	umull	r0, r1, r4, r7
   d4a3e:	fb07 1105 	mla	r1, r7, r5, r1
   d4a42:	f003 fb93 	bl	d816c <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4a46:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4a4a:	134c      	asrs	r4, r1, #13
   d4a4c:	0b45      	lsrs	r5, r0, #13
   d4a4e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4a52:	fb02 f704 	mul.w	r7, r2, r4
   d4a56:	17d3      	asrs	r3, r2, #31
   d4a58:	fb05 7703 	mla	r7, r5, r3, r7
   d4a5c:	fba2 2305 	umull	r2, r3, r2, r5
   d4a60:	443b      	add	r3, r7
   d4a62:	4354      	muls	r4, r2
   d4a64:	fb05 4403 	mla	r4, r5, r3, r4
   d4a68:	fba2 2305 	umull	r2, r3, r2, r5
   d4a6c:	4423      	add	r3, r4
   d4a6e:	0e54      	lsrs	r4, r2, #25
   d4a70:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4a74:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4a78:	1824      	adds	r4, r4, r0
   d4a7a:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4a7e:	414d      	adcs	r5, r1
   d4a80:	17d3      	asrs	r3, r2, #31
   d4a82:	4351      	muls	r1, r2
   d4a84:	fb00 1303 	mla	r3, r0, r3, r1
   d4a88:	fba2 0100 	umull	r0, r1, r2, r0
   d4a8c:	4419      	add	r1, r3
   d4a8e:	0cc2      	lsrs	r2, r0, #19
   d4a90:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4a94:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4a96:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4a9a:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4a9e:	416b      	adcs	r3, r5
   d4aa0:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4aa2:	17e5      	asrs	r5, r4, #31
   d4aa4:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4aa6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4aaa:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4aac:	012b      	lsls	r3, r5, #4
   d4aae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4ab2:	1880      	adds	r0, r0, r2
   d4ab4:	4159      	adcs	r1, r3
   d4ab6:	f003 fb1b 	bl	d80f0 <__aeabi_l2f>
   d4aba:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4adc <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4abe:	ee07 0a90 	vmov	s15, r0
   d4ac2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4aca:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4ae0 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4ace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4ad2:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4ae4 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ada:	bf00      	nop
   d4adc:	3b800000 	.word	0x3b800000
   d4ae0:	7fc00000 	.word	0x7fc00000
   d4ae4:	00000000 	.word	0x00000000

000d4ae8 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4ae8:	b510      	push	{r4, lr}
   d4aea:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4aec:	f7ff fef0 	bl	d48d0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4af0:	21fd      	movs	r1, #253	; 0xfd
   d4af2:	4620      	mov	r0, r4
   d4af4:	f7ff fd2a 	bl	d454c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4af8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4afc:	d038      	beq.n	d4b70 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4afe:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b02:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b04:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4b08:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b0a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b0e:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4b12:	fb02 3311 	mls	r3, r2, r1, r3
   d4b16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4b1a:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4b1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4b20:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4b24:	4353      	muls	r3, r2
   d4b26:	12db      	asrs	r3, r3, #11
   d4b28:	4342      	muls	r2, r0
   d4b2a:	1292      	asrs	r2, r2, #10
   d4b2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4b30:	4353      	muls	r3, r2
   d4b32:	129b      	asrs	r3, r3, #10
   d4b34:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4b38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4b3c:	4353      	muls	r3, r2
   d4b3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4b42:	139b      	asrs	r3, r3, #14
   d4b44:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4b46:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4b48:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4b4c:	4352      	muls	r2, r2
   d4b4e:	11d2      	asrs	r2, r2, #7
   d4b50:	434a      	muls	r2, r1
   d4b52:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4b56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4b5a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4b5e:	bfa8      	it	ge
   d4b60:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4b64:	131b      	asrs	r3, r3, #12
   d4b66:	ee00 3a10 	vmov	s0, r3
   d4b6a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4b6e:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4b70:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4b78 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4b74:	bd10      	pop	{r4, pc}
   d4b76:	bf00      	nop
   d4b78:	7fc00000 	.word	0x7fc00000
   d4b7c:	00000000 	.word	0x00000000

000d4b80 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d4b80:	b508      	push	{r3, lr}
   d4b82:	ed2d 8b02 	vpush	{d8}
   d4b86:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d4b8a:	f7ff fecf 	bl	d492c <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d4b8e:	eddf 7a16 	vldr	s15, [pc, #88]	; d4be8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d4b92:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4b96:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d4b9a:	ee17 0a90 	vmov	r0, s15
   d4b9e:	f002 fe3b 	bl	d7818 <__aeabi_f2d>
   d4ba2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d4bd8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d4ba6:	ec41 0b10 	vmov	d0, r0, r1
   d4baa:	f001 fb99 	bl	d62e0 <pow>
   d4bae:	2000      	movs	r0, #0
   d4bb0:	ec53 2b10 	vmov	r2, r3, d0
   d4bb4:	490d      	ldr	r1, [pc, #52]	; (d4bec <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d4bb6:	f002 fccf 	bl	d7558 <__aeabi_dsub>
   d4bba:	a309      	add	r3, pc, #36	; (adr r3, d4be0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d4bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bc0:	f002 fe7e 	bl	d78c0 <__aeabi_dmul>
   d4bc4:	f003 f974 	bl	d7eb0 <__aeabi_d2f>
}
   d4bc8:	ecbd 8b02 	vpop	{d8}
   d4bcc:	ee00 0a10 	vmov	s0, r0
   d4bd0:	bd08      	pop	{r3, pc}
   d4bd2:	bf00      	nop
   d4bd4:	f3af 8000 	nop.w
   d4bd8:	1a36e2eb 	.word	0x1a36e2eb
   d4bdc:	3fc85bc0 	.word	0x3fc85bc0
   d4be0:	00000000 	.word	0x00000000
   d4be4:	40e5a540 	.word	0x40e5a540
   d4be8:	42c80000 	.word	0x42c80000
   d4bec:	3ff00000 	.word	0x3ff00000

000d4bf0 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4bf0:	6880      	ldr	r0, [r0, #8]
   d4bf2:	4770      	bx	lr

000d4bf4 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4bf4:	f000 b810 	b.w	d4c18 <HAL_Pin_Map>

000d4bf8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <netdb_freeaddrinfo+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	689b      	ldr	r3, [r3, #8]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030268 	.word	0x00030268

000d4c08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <netdb_getaddrinfo+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	68db      	ldr	r3, [r3, #12]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030268 	.word	0x00030268

000d4c18 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <HAL_Pin_Map+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	681b      	ldr	r3, [r3, #0]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	0003022c 	.word	0x0003022c

000d4c28 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <HAL_Pin_Mode+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	0003022c 	.word	0x0003022c

000d4c38 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <HAL_Get_Pin_Mode+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	68db      	ldr	r3, [r3, #12]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	0003022c 	.word	0x0003022c

000d4c48 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <HAL_GPIO_Write+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	691b      	ldr	r3, [r3, #16]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	0003022c 	.word	0x0003022c

000d4c58 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <HAL_GPIO_Read+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	695b      	ldr	r3, [r3, #20]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	0003022c 	.word	0x0003022c

000d4c68 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <HAL_SPI_Begin+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	681b      	ldr	r3, [r3, #0]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030230 	.word	0x00030230

000d4c78 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <HAL_SPI_Send_Receive_Data+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	695b      	ldr	r3, [r3, #20]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030230 	.word	0x00030230

000d4c88 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <HAL_SPI_Init+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	69db      	ldr	r3, [r3, #28]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030230 	.word	0x00030230

000d4c98 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <HAL_SPI_Is_Enabled+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6a1b      	ldr	r3, [r3, #32]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030230 	.word	0x00030230

000d4ca8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <HAL_SPI_Info+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030230 	.word	0x00030230

000d4cb8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <HAL_SPI_Set_Settings+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030230 	.word	0x00030230

000d4cc8 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <HAL_SPI_Acquire+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030230 	.word	0x00030230

000d4cd8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <HAL_SPI_Release+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030230 	.word	0x00030230

000d4ce8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <HAL_RNG_GetRandomNumber+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	685b      	ldr	r3, [r3, #4]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030218 	.word	0x00030218

000d4cf8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	695b      	ldr	r3, [r3, #20]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030218 	.word	0x00030218

000d4d08 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <os_thread_is_current+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	689b      	ldr	r3, [r3, #8]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030248 	.word	0x00030248

000d4d18 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <os_thread_join+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	691b      	ldr	r3, [r3, #16]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030248 	.word	0x00030248

000d4d28 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <os_thread_cleanup+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	695b      	ldr	r3, [r3, #20]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030248 	.word	0x00030248

000d4d38 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <os_mutex_recursive_create+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030248 	.word	0x00030248

000d4d48 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <os_mutex_recursive_destroy+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030248 	.word	0x00030248

000d4d58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <inet_inet_ntop+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	695b      	ldr	r3, [r3, #20]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030264 	.word	0x00030264

000d4d68 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <HAL_USART_Init+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	681b      	ldr	r3, [r3, #0]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003023c 	.word	0x0003023c

000d4d78 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <HAL_USART_Write_Data+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	68db      	ldr	r3, [r3, #12]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003023c 	.word	0x0003023c

000d4d88 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <HAL_USART_Available_Data+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	691b      	ldr	r3, [r3, #16]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003023c 	.word	0x0003023c

000d4d98 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_USART_Read_Data+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	695b      	ldr	r3, [r3, #20]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <HAL_USART_Peek_Data+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	699b      	ldr	r3, [r3, #24]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_USART_Flush_Data+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	69db      	ldr	r3, [r3, #28]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	0003023c 	.word	0x0003023c

000d4dc8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_USART_Is_Enabled+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6a1b      	ldr	r3, [r3, #32]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	0003023c 	.word	0x0003023c

000d4dd8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <HAL_USART_Available_Data_For_Write+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	0003023c 	.word	0x0003023c

000d4de8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <HAL_I2C_Begin+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	68db      	ldr	r3, [r3, #12]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030228 	.word	0x00030228

000d4df8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <HAL_I2C_Begin_Transmission+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	699b      	ldr	r3, [r3, #24]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030228 	.word	0x00030228

000d4e08 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_I2C_End_Transmission+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	69db      	ldr	r3, [r3, #28]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030228 	.word	0x00030228

000d4e18 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_I2C_Write_Data+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6a1b      	ldr	r3, [r3, #32]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030228 	.word	0x00030228

000d4e28 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_I2C_Available_Data+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030228 	.word	0x00030228

000d4e38 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_I2C_Read_Data+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030228 	.word	0x00030228

000d4e48 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_I2C_Peek_Data+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030228 	.word	0x00030228

000d4e58 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <HAL_I2C_Flush_Data+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030228 	.word	0x00030228

000d4e68 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <HAL_I2C_Is_Enabled+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030228 	.word	0x00030228

000d4e78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_I2C_Init+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030228 	.word	0x00030228

000d4e88 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_I2C_Request_Data_Ex+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030228 	.word	0x00030228

000d4e98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_USB_USART_Init+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	681b      	ldr	r3, [r3, #0]
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003024c 	.word	0x0003024c

000d4ea8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_USB_USART_Begin+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	685b      	ldr	r3, [r3, #4]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	0003024c 	.word	0x0003024c

000d4eb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_USB_USART_Available_Data+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	691b      	ldr	r3, [r3, #16]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	0003024c 	.word	0x0003024c

000d4ec8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	695b      	ldr	r3, [r3, #20]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	0003024c 	.word	0x0003024c

000d4ed8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Receive_Data+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	699b      	ldr	r3, [r3, #24]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Send_Data+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	69db      	ldr	r3, [r3, #28]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Flush_Data+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6a1b      	ldr	r3, [r3, #32]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_USB_USART_Is_Enabled+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	0003024c 	.word	0x0003024c

000d4f18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <set_system_mode+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	685b      	ldr	r3, [r3, #4]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030220 	.word	0x00030220

000d4f28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <system_delay_ms+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	695b      	ldr	r3, [r3, #20]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	00030220 	.word	0x00030220

000d4f38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b03      	ldr	r3, [pc, #12]	; (d4f48 <system_ctrl_set_app_request_handler+0x10>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f42:	9301      	str	r3, [sp, #4]
   d4f44:	bd08      	pop	{r3, pc}
   d4f46:	0000      	.short	0x0000
   d4f48:	00030220 	.word	0x00030220

000d4f4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b03      	ldr	r3, [pc, #12]	; (d4f5c <system_ctrl_set_result+0x10>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f56:	9301      	str	r3, [sp, #4]
   d4f58:	bd08      	pop	{r3, pc}
   d4f5a:	0000      	.short	0x0000
   d4f5c:	00030220 	.word	0x00030220

000d4f60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <network_connect+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	685b      	ldr	r3, [r3, #4]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030240 	.word	0x00030240

000d4f70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <network_connecting+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	689b      	ldr	r3, [r3, #8]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030240 	.word	0x00030240

000d4f80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <network_disconnect+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	68db      	ldr	r3, [r3, #12]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030240 	.word	0x00030240

000d4f90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <network_ready+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	691b      	ldr	r3, [r3, #16]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030240 	.word	0x00030240

000d4fa0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <network_on+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030240 	.word	0x00030240

000d4fb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <network_off+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	699b      	ldr	r3, [r3, #24]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030240 	.word	0x00030240

000d4fc0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <network_listen+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	69db      	ldr	r3, [r3, #28]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030240 	.word	0x00030240

000d4fd0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <network_listening+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6a1b      	ldr	r3, [r3, #32]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030240 	.word	0x00030240

000d4fe0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <network_set_listen_timeout+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030240 	.word	0x00030240

000d4ff0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_get_listen_timeout+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030244 	.word	0x00030244

000d5010 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <malloc+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	681b      	ldr	r3, [r3, #0]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	0003021c 	.word	0x0003021c

000d5020 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <free+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	685b      	ldr	r3, [r3, #4]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	0003021c 	.word	0x0003021c

000d5030 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <vsnprintf+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	0003021c 	.word	0x0003021c

000d5040 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <__errno+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003021c 	.word	0x0003021c

000d5050 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5050:	2200      	movs	r2, #0
   d5052:	4611      	mov	r1, r2
   d5054:	6840      	ldr	r0, [r0, #4]
   d5056:	f7ff bfbb 	b.w	d4fd0 <network_listening>

000d505a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d505a:	2200      	movs	r2, #0
   d505c:	4611      	mov	r1, r2
   d505e:	6840      	ldr	r0, [r0, #4]
   d5060:	f7ff bfc6 	b.w	d4ff0 <network_get_listen_timeout>

000d5064 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5064:	2200      	movs	r2, #0
   d5066:	6840      	ldr	r0, [r0, #4]
   d5068:	f7ff bfba 	b.w	d4fe0 <network_set_listen_timeout>

000d506c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d506c:	2200      	movs	r2, #0
   d506e:	f081 0101 	eor.w	r1, r1, #1
   d5072:	6840      	ldr	r0, [r0, #4]
   d5074:	f7ff bfa4 	b.w	d4fc0 <network_listen>

000d5078 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5078:	2300      	movs	r3, #0
   d507a:	461a      	mov	r2, r3
   d507c:	4619      	mov	r1, r3
   d507e:	6840      	ldr	r0, [r0, #4]
   d5080:	f7ff bf96 	b.w	d4fb0 <network_off>

000d5084 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5084:	2300      	movs	r3, #0
   d5086:	461a      	mov	r2, r3
   d5088:	4619      	mov	r1, r3
   d508a:	6840      	ldr	r0, [r0, #4]
   d508c:	f7ff bf88 	b.w	d4fa0 <network_on>

000d5090 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5090:	2200      	movs	r2, #0
   d5092:	4611      	mov	r1, r2
   d5094:	6840      	ldr	r0, [r0, #4]
   d5096:	f7ff bf7b 	b.w	d4f90 <network_ready>

000d509a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d509a:	2200      	movs	r2, #0
   d509c:	4611      	mov	r1, r2
   d509e:	6840      	ldr	r0, [r0, #4]
   d50a0:	f7ff bf66 	b.w	d4f70 <network_connecting>

000d50a4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50a4:	2200      	movs	r2, #0
   d50a6:	2102      	movs	r1, #2
   d50a8:	6840      	ldr	r0, [r0, #4]
   d50aa:	f7ff bf69 	b.w	d4f80 <network_disconnect>

000d50ae <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50ae:	2300      	movs	r3, #0
   d50b0:	461a      	mov	r2, r3
   d50b2:	6840      	ldr	r0, [r0, #4]
   d50b4:	f7ff bf54 	b.w	d4f60 <network_connect>

000d50b8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50b8:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50ba:	2203      	movs	r2, #3
   d50bc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50be:	4a02      	ldr	r2, [pc, #8]	; (d50c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50c0:	601a      	str	r2, [r3, #0]
   d50c2:	4770      	bx	lr
   d50c4:	2003e3cc 	.word	0x2003e3cc
   d50c8:	000d8790 	.word	0x000d8790

000d50cc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d50cc:	4770      	bx	lr

000d50ce <_ZN8SPIClassD0Ev>:
   d50ce:	b510      	push	{r4, lr}
   d50d0:	210c      	movs	r1, #12
   d50d2:	4604      	mov	r4, r0
   d50d4:	f000 ffa8 	bl	d6028 <_ZdlPvj>
   d50d8:	4620      	mov	r0, r4
   d50da:	bd10      	pop	{r4, pc}

000d50dc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d50dc:	2100      	movs	r1, #0
   d50de:	f7ff bdf3 	b.w	d4cc8 <HAL_SPI_Acquire>

000d50e2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d50e2:	2100      	movs	r1, #0
   d50e4:	f7ff bdf8 	b.w	d4cd8 <HAL_SPI_Release>

000d50e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d50e8:	b510      	push	{r4, lr}
   d50ea:	4b05      	ldr	r3, [pc, #20]	; (d5100 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d50ec:	6003      	str	r3, [r0, #0]
   d50ee:	4604      	mov	r4, r0
{
    _spi = spi;
   d50f0:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d50f2:	4608      	mov	r0, r1
   d50f4:	f7ff fdc8 	bl	d4c88 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d50f8:	2300      	movs	r3, #0
   d50fa:	60a3      	str	r3, [r4, #8]
}
   d50fc:	4620      	mov	r0, r4
   d50fe:	bd10      	pop	{r4, pc}
   d5100:	000d87c4 	.word	0x000d87c4

000d5104 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5108:	7900      	ldrb	r0, [r0, #4]
   d510a:	f7ff ffe7 	bl	d50dc <_ZN8SPIClass4lockEv.isra.0>
   d510e:	b948      	cbnz	r0, d5124 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5110:	7920      	ldrb	r0, [r4, #4]
   d5112:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5116:	f7ff fda7 	bl	d4c68 <HAL_SPI_Begin>
        unlock();
   d511a:	7920      	ldrb	r0, [r4, #4]
    }
}
   d511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5120:	f7ff bfdf 	b.w	d50e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5124:	bd10      	pop	{r4, pc}

000d5126 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5126:	7900      	ldrb	r0, [r0, #4]
   d5128:	f7ff bfdb 	b.w	d50e2 <_ZN8SPIClass6unlockEv.isra.1>

000d512c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d512c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d512e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5130:	6018      	str	r0, [r3, #0]
   d5132:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5134:	6818      	ldr	r0, [r3, #0]
   d5136:	4288      	cmp	r0, r1
   d5138:	b2e5      	uxtb	r5, r4
   d513a:	d906      	bls.n	d514a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d513c:	3401      	adds	r4, #1
   d513e:	2c08      	cmp	r4, #8
   d5140:	d002      	beq.n	d5148 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5142:	0840      	lsrs	r0, r0, #1
   d5144:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5146:	e7f5      	b.n	d5134 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5148:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d514c:	5d5b      	ldrb	r3, [r3, r5]
   d514e:	7013      	strb	r3, [r2, #0]
   d5150:	bd30      	pop	{r4, r5, pc}
   d5152:	bf00      	nop
   d5154:	000d87cc 	.word	0x000d87cc

000d5158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d515c:	4607      	mov	r7, r0
   d515e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5160:	7900      	ldrb	r0, [r0, #4]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5162:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5164:	f7ff ffba 	bl	d50dc <_ZN8SPIClass4lockEv.isra.0>
   d5168:	2800      	cmp	r0, #0
   d516a:	db62      	blt.n	d5232 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d516c:	793c      	ldrb	r4, [r7, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d516e:	2214      	movs	r2, #20
   d5170:	2100      	movs	r1, #0
   d5172:	a809      	add	r0, sp, #36	; 0x24
   d5174:	f003 f9d7 	bl	d8526 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5178:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d517a:	4620      	mov	r0, r4
   d517c:	2200      	movs	r2, #0
   d517e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5180:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5184:	f7ff fd90 	bl	d4ca8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5188:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d518c:	b154      	cbz	r4, d51a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d518e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5192:	b935      	cbnz	r5, d51a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5194:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5198:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d519c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d51a0:	e003      	b.n	d51aa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d51a2:	2400      	movs	r4, #0
   d51a4:	46a1      	mov	r9, r4
   d51a6:	46a0      	mov	r8, r4
   d51a8:	2501      	movs	r5, #1
   d51aa:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d51ac:	b105      	cbz	r5, d51b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d51ae:	b9bb      	cbnz	r3, d51e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d51b0:	429d      	cmp	r5, r3
   d51b2:	d10b      	bne.n	d51cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d51b4:	68b2      	ldr	r2, [r6, #8]
   d51b6:	4542      	cmp	r2, r8
   d51b8:	d108      	bne.n	d51cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d51ba:	f88d 9020 	strb.w	r9, [sp, #32]
   d51be:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d51c2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d51c6:	89b2      	ldrh	r2, [r6, #12]
   d51c8:	4291      	cmp	r1, r2
   d51ca:	d009      	beq.n	d51e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d51cc:	b153      	cbz	r3, d51e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d51ce:	2400      	movs	r4, #0
   d51d0:	7938      	ldrb	r0, [r7, #4]
   d51d2:	9401      	str	r4, [sp, #4]
   d51d4:	9400      	str	r4, [sp, #0]
   d51d6:	4623      	mov	r3, r4
   d51d8:	4622      	mov	r2, r4
   d51da:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d51dc:	f7ff fd6c 	bl	d4cb8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d51e0:	2000      	movs	r0, #0
   d51e2:	e026      	b.n	d5232 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d51e4:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d51e8:	68b1      	ldr	r1, [r6, #8]
   d51ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   d51ec:	ab04      	add	r3, sp, #16
   d51ee:	f10d 020f 	add.w	r2, sp, #15
   d51f2:	f7ff ff9b 	bl	d512c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d51f6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d51f8:	b105      	cbz	r5, d51fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d51fa:	b9b1      	cbnz	r1, d522a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d51fc:	42a9      	cmp	r1, r5
   d51fe:	d008      	beq.n	d5212 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5200:	2400      	movs	r4, #0
   d5202:	7938      	ldrb	r0, [r7, #4]
   d5204:	9401      	str	r4, [sp, #4]
   d5206:	7b74      	ldrb	r4, [r6, #13]
   d5208:	7b33      	ldrb	r3, [r6, #12]
   d520a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d520e:	9400      	str	r4, [sp, #0]
   d5210:	e7e4      	b.n	d51dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5212:	68b3      	ldr	r3, [r6, #8]
   d5214:	4543      	cmp	r3, r8
   d5216:	d3f3      	bcc.n	d5200 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5218:	f88d 9020 	strb.w	r9, [sp, #32]
   d521c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5220:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5224:	89b3      	ldrh	r3, [r6, #12]
   d5226:	429a      	cmp	r2, r3
   d5228:	d1ea      	bne.n	d5200 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d522a:	9b04      	ldr	r3, [sp, #16]
   d522c:	4543      	cmp	r3, r8
   d522e:	d1e7      	bne.n	d5200 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5230:	e7d6      	b.n	d51e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5232:	b00f      	add	sp, #60	; 0x3c
   d5234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5238 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5238:	b538      	push	{r3, r4, r5, lr}
   d523a:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d523c:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d523e:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d5240:	f7ff ff4c 	bl	d50dc <_ZN8SPIClass4lockEv.isra.0>
   d5244:	b940      	cbnz	r0, d5258 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5246:	4629      	mov	r1, r5
   d5248:	7920      	ldrb	r0, [r4, #4]
   d524a:	f7ff fd15 	bl	d4c78 <HAL_SPI_Send_Receive_Data>
   d524e:	4605      	mov	r5, r0
        unlock();
   d5250:	7920      	ldrb	r0, [r4, #4]
   d5252:	f7ff ff46 	bl	d50e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5256:	e000      	b.n	d525a <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5258:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d525a:	b2e8      	uxtb	r0, r5
   d525c:	bd38      	pop	{r3, r4, r5, pc}

000d525e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d525e:	7900      	ldrb	r0, [r0, #4]
   d5260:	f7ff bd1a 	b.w	d4c98 <HAL_SPI_Is_Enabled>

000d5264 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5264:	b510      	push	{r4, lr}
   d5266:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5268:	6800      	ldr	r0, [r0, #0]
   d526a:	b118      	cbz	r0, d5274 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d526c:	f7ff fed8 	bl	d5020 <free>
            wakeupSource_ = nullptr;
   d5270:	2300      	movs	r3, #0
   d5272:	6023      	str	r3, [r4, #0]
   d5274:	bd10      	pop	{r4, pc}

000d5276 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5276:	b510      	push	{r4, lr}
   d5278:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d527a:	f7ff fff3 	bl	d5264 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d527e:	4620      	mov	r0, r4
   d5280:	bd10      	pop	{r4, pc}
	...

000d5284 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5284:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5286:	4c09      	ldr	r4, [pc, #36]	; (d52ac <_GLOBAL__sub_I_System+0x28>)
   d5288:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d528a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d528e:	6020      	str	r0, [r4, #0]
   d5290:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5292:	71a0      	strb	r0, [r4, #6]
   d5294:	8120      	strh	r0, [r4, #8]
   d5296:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5298:	f7ff fe3e 	bl	d4f18 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d529c:	4620      	mov	r0, r4
   d529e:	4a04      	ldr	r2, [pc, #16]	; (d52b0 <_GLOBAL__sub_I_System+0x2c>)
   d52a0:	4904      	ldr	r1, [pc, #16]	; (d52b4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d52a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d52a6:	f000 beb1 	b.w	d600c <__aeabi_atexit>
   d52aa:	bf00      	nop
   d52ac:	2003e3d4 	.word	0x2003e3d4
   d52b0:	2003e380 	.word	0x2003e380
   d52b4:	000d5277 	.word	0x000d5277

000d52b8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d52b8:	b510      	push	{r4, lr}
   d52ba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d52bc:	6800      	ldr	r0, [r0, #0]
   d52be:	b108      	cbz	r0, d52c4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d52c0:	f7ff fd42 	bl	d4d48 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d52c4:	4620      	mov	r0, r4
   d52c6:	bd10      	pop	{r4, pc}

000d52c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d52c8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52ca:	4c06      	ldr	r4, [pc, #24]	; (d52e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d52cc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d52ce:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52d0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d52d2:	f7ff fd31 	bl	d4d38 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d52d6:	4620      	mov	r0, r4
   d52d8:	4a03      	ldr	r2, [pc, #12]	; (d52e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d52da:	4904      	ldr	r1, [pc, #16]	; (d52ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d52dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d52e0:	f000 be94 	b.w	d600c <__aeabi_atexit>
   d52e4:	2003e3e0 	.word	0x2003e3e0
   d52e8:	2003e380 	.word	0x2003e380
   d52ec:	000d52b9 	.word	0x000d52b9

000d52f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d52f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52f2:	4606      	mov	r6, r0
   d52f4:	460d      	mov	r5, r1
   d52f6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d52f8:	2400      	movs	r4, #0
  while (size--) {
   d52fa:	42bd      	cmp	r5, r7
   d52fc:	d00c      	beq.n	d5318 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d52fe:	6833      	ldr	r3, [r6, #0]
   d5300:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5304:	689b      	ldr	r3, [r3, #8]
   d5306:	4630      	mov	r0, r6
   d5308:	4798      	blx	r3
     if (chunk>=0)
   d530a:	2800      	cmp	r0, #0
   d530c:	db01      	blt.n	d5312 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d530e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5310:	e7f3      	b.n	d52fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5312:	2c00      	cmp	r4, #0
   d5314:	bf08      	it	eq
   d5316:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5318:	4620      	mov	r0, r4
   d531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d531c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d531c:	b570      	push	{r4, r5, r6, lr}
   d531e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5320:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5322:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5324:	b149      	cbz	r1, d533a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5326:	f003 f92f 	bl	d8588 <strlen>
   d532a:	682b      	ldr	r3, [r5, #0]
   d532c:	4602      	mov	r2, r0
   d532e:	4621      	mov	r1, r4
   d5330:	4628      	mov	r0, r5
   d5332:	68db      	ldr	r3, [r3, #12]
    }
   d5334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5338:	4718      	bx	r3
    }
   d533a:	bd70      	pop	{r4, r5, r6, pc}

000d533c <_ZN5Print5printEPKc>:
   d533c:	b508      	push	{r3, lr}
   d533e:	f7ff ffed 	bl	d531c <_ZN5Print5writeEPKc>
   d5342:	bd08      	pop	{r3, pc}

000d5344 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5344:	6803      	ldr	r3, [r0, #0]
   d5346:	689b      	ldr	r3, [r3, #8]
   d5348:	4718      	bx	r3

000d534a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d534a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d534c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d534e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5350:	f7ff fff8 	bl	d5344 <_ZN5Print5printEc>
  n += print('\n');
   d5354:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5356:	4604      	mov	r4, r0
  n += print('\n');
   d5358:	4628      	mov	r0, r5
   d535a:	f7ff fff3 	bl	d5344 <_ZN5Print5printEc>
  return n;
}
   d535e:	4420      	add	r0, r4
   d5360:	bd38      	pop	{r3, r4, r5, pc}

000d5362 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5362:	b538      	push	{r3, r4, r5, lr}
   d5364:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5366:	f7ff ffd9 	bl	d531c <_ZN5Print5writeEPKc>
   d536a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d536c:	4628      	mov	r0, r5
   d536e:	f7ff ffec 	bl	d534a <_ZN5Print7printlnEv>
  return n;
}
   d5372:	4420      	add	r0, r4
   d5374:	bd38      	pop	{r3, r4, r5, pc}

000d5376 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d5376:	f7ff bff4 	b.w	d5362 <_ZN5Print7printlnEPKc>

000d537a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d537a:	b530      	push	{r4, r5, lr}
   d537c:	b08b      	sub	sp, #44	; 0x2c
   d537e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5380:	2100      	movs	r1, #0
   d5382:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5386:	2a01      	cmp	r2, #1
   d5388:	bf98      	it	ls
   d538a:	220a      	movls	r2, #10
   d538c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5390:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5394:	fb05 3312 	mls	r3, r5, r2, r3
   d5398:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d539c:	2b09      	cmp	r3, #9
   d539e:	bf94      	ite	ls
   d53a0:	3330      	addls	r3, #48	; 0x30
   d53a2:	3337      	addhi	r3, #55	; 0x37
   d53a4:	b2db      	uxtb	r3, r3
   d53a6:	4621      	mov	r1, r4
   d53a8:	f804 3901 	strb.w	r3, [r4], #-1
   d53ac:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53ae:	2d00      	cmp	r5, #0
   d53b0:	d1ee      	bne.n	d5390 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53b2:	f7ff ffb3 	bl	d531c <_ZN5Print5writeEPKc>
}
   d53b6:	b00b      	add	sp, #44	; 0x2c
   d53b8:	bd30      	pop	{r4, r5, pc}
	...

000d53bc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d53bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d53c0:	ec57 6b10 	vmov	r6, r7, d0
   d53c4:	4682      	mov	sl, r0
   d53c6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d53c8:	ee10 2a10 	vmov	r2, s0
   d53cc:	463b      	mov	r3, r7
   d53ce:	ee10 0a10 	vmov	r0, s0
   d53d2:	4639      	mov	r1, r7
   d53d4:	f002 fd0e 	bl	d7df4 <__aeabi_dcmpun>
   d53d8:	b108      	cbz	r0, d53de <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53da:	494e      	ldr	r1, [pc, #312]	; (d5514 <_ZN5Print10printFloatEdh+0x158>)
   d53dc:	e012      	b.n	d5404 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53de:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d53e2:	f04f 32ff 	mov.w	r2, #4294967295
   d53e6:	4b4c      	ldr	r3, [pc, #304]	; (d5518 <_ZN5Print10printFloatEdh+0x15c>)
   d53e8:	4630      	mov	r0, r6
   d53ea:	4649      	mov	r1, r9
   d53ec:	f002 fd02 	bl	d7df4 <__aeabi_dcmpun>
   d53f0:	b968      	cbnz	r0, d540e <_ZN5Print10printFloatEdh+0x52>
   d53f2:	f04f 32ff 	mov.w	r2, #4294967295
   d53f6:	4b48      	ldr	r3, [pc, #288]	; (d5518 <_ZN5Print10printFloatEdh+0x15c>)
   d53f8:	4630      	mov	r0, r6
   d53fa:	4649      	mov	r1, r9
   d53fc:	f002 fcdc 	bl	d7db8 <__aeabi_dcmple>
   d5400:	b928      	cbnz	r0, d540e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5402:	4946      	ldr	r1, [pc, #280]	; (d551c <_ZN5Print10printFloatEdh+0x160>)
   d5404:	4650      	mov	r0, sl
   d5406:	f7ff ff89 	bl	d531c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d540e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5412:	4b43      	ldr	r3, [pc, #268]	; (d5520 <_ZN5Print10printFloatEdh+0x164>)
   d5414:	4630      	mov	r0, r6
   d5416:	4639      	mov	r1, r7
   d5418:	f002 fce2 	bl	d7de0 <__aeabi_dcmpgt>
   d541c:	b108      	cbz	r0, d5422 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d541e:	4941      	ldr	r1, [pc, #260]	; (d5524 <_ZN5Print10printFloatEdh+0x168>)
   d5420:	e7f0      	b.n	d5404 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5422:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5426:	4b40      	ldr	r3, [pc, #256]	; (d5528 <_ZN5Print10printFloatEdh+0x16c>)
   d5428:	4630      	mov	r0, r6
   d542a:	4639      	mov	r1, r7
   d542c:	f002 fcba 	bl	d7da4 <__aeabi_dcmplt>
   d5430:	2800      	cmp	r0, #0
   d5432:	d1f4      	bne.n	d541e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5434:	2200      	movs	r2, #0
   d5436:	2300      	movs	r3, #0
   d5438:	4630      	mov	r0, r6
   d543a:	4639      	mov	r1, r7
   d543c:	f002 fcb2 	bl	d7da4 <__aeabi_dcmplt>
   d5440:	b140      	cbz	r0, d5454 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5442:	212d      	movs	r1, #45	; 0x2d
   d5444:	4650      	mov	r0, sl
   d5446:	f7ff ff7d 	bl	d5344 <_ZN5Print5printEc>
     number = -number;
   d544a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d544e:	4604      	mov	r4, r0
     number = -number;
   d5450:	461f      	mov	r7, r3
   d5452:	e000      	b.n	d5456 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5454:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5456:	4935      	ldr	r1, [pc, #212]	; (d552c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5458:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d545c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d545e:	fa5f f388 	uxtb.w	r3, r8
   d5462:	429d      	cmp	r5, r3
   d5464:	d906      	bls.n	d5474 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5466:	2200      	movs	r2, #0
   d5468:	4b31      	ldr	r3, [pc, #196]	; (d5530 <_ZN5Print10printFloatEdh+0x174>)
   d546a:	f002 fb53 	bl	d7b14 <__aeabi_ddiv>
   d546e:	f108 0801 	add.w	r8, r8, #1
   d5472:	e7f4      	b.n	d545e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5474:	4632      	mov	r2, r6
   d5476:	463b      	mov	r3, r7
   d5478:	f002 f870 	bl	d755c <__adddf3>
   d547c:	460f      	mov	r7, r1
   d547e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5480:	f002 fcf6 	bl	d7e70 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5484:	220a      	movs	r2, #10
   d5486:	4601      	mov	r1, r0
   d5488:	4680      	mov	r8, r0
   d548a:	4650      	mov	r0, sl
   d548c:	f7ff ff75 	bl	d537a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5490:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5492:	b3e5      	cbz	r5, d550e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5494:	4640      	mov	r0, r8
   d5496:	f002 f99d 	bl	d77d4 <__aeabi_ui2d>
   d549a:	4602      	mov	r2, r0
   d549c:	460b      	mov	r3, r1
   d549e:	4630      	mov	r0, r6
   d54a0:	4639      	mov	r1, r7
   d54a2:	f002 f859 	bl	d7558 <__aeabi_dsub>
   d54a6:	4606      	mov	r6, r0
   d54a8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54aa:	4650      	mov	r0, sl
   d54ac:	4921      	ldr	r1, [pc, #132]	; (d5534 <_ZN5Print10printFloatEdh+0x178>)
   d54ae:	f7ff ff35 	bl	d531c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d54b2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d54b4:	2200      	movs	r2, #0
   d54b6:	4b1e      	ldr	r3, [pc, #120]	; (d5530 <_ZN5Print10printFloatEdh+0x174>)
   d54b8:	4630      	mov	r0, r6
   d54ba:	4639      	mov	r1, r7
   d54bc:	f002 fa00 	bl	d78c0 <__aeabi_dmul>
   d54c0:	4606      	mov	r6, r0
   d54c2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d54c4:	f002 fcac 	bl	d7e20 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d54c8:	f1b0 0900 	subs.w	r9, r0, #0
   d54cc:	da07      	bge.n	d54de <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d54ce:	212d      	movs	r1, #45	; 0x2d
   d54d0:	4650      	mov	r0, sl
   d54d2:	f7ff ff37 	bl	d5344 <_ZN5Print5printEc>
            val = -n;
   d54d6:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d54da:	4680      	mov	r8, r0
   d54dc:	e002      	b.n	d54e4 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d54de:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d54e0:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d54e4:	220a      	movs	r2, #10
   d54e6:	4650      	mov	r0, sl
   d54e8:	f7ff ff47 	bl	d537a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d54ec:	4440      	add	r0, r8
   d54ee:	4404      	add	r4, r0
    remainder -= toPrint;
   d54f0:	4648      	mov	r0, r9
   d54f2:	f002 f97f 	bl	d77f4 <__aeabi_i2d>
   d54f6:	4602      	mov	r2, r0
   d54f8:	460b      	mov	r3, r1
   d54fa:	4630      	mov	r0, r6
   d54fc:	4639      	mov	r1, r7
   d54fe:	f002 f82b 	bl	d7558 <__aeabi_dsub>
   d5502:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5504:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5508:	4606      	mov	r6, r0
   d550a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d550c:	d1d2      	bne.n	d54b4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d550e:	4620      	mov	r0, r4
   d5510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5514:	000d87d4 	.word	0x000d87d4
   d5518:	7fefffff 	.word	0x7fefffff
   d551c:	000d87de 	.word	0x000d87de
   d5520:	41efffff 	.word	0x41efffff
   d5524:	000d87d8 	.word	0x000d87d8
   d5528:	c1efffff 	.word	0xc1efffff
   d552c:	3fe00000 	.word	0x3fe00000
   d5530:	40240000 	.word	0x40240000
   d5534:	000d87dc 	.word	0x000d87dc

000d5538 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d5538:	b538      	push	{r3, r4, r5, lr}
   d553a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d553c:	ee10 0a10 	vmov	r0, s0
   d5540:	b2cd      	uxtb	r5, r1
   d5542:	f002 f969 	bl	d7818 <__aeabi_f2d>
   d5546:	ec41 0b10 	vmov	d0, r0, r1
   d554a:	4629      	mov	r1, r5
   d554c:	4620      	mov	r0, r4
}
   d554e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d5552:	f7ff bf33 	b.w	d53bc <_ZN5Print10printFloatEdh>

000d5556 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5556:	b40c      	push	{r2, r3}
   d5558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d555c:	b087      	sub	sp, #28
   d555e:	af00      	add	r7, sp, #0
   d5560:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5564:	4605      	mov	r5, r0
   d5566:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d556a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d556c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d556e:	4623      	mov	r3, r4
   d5570:	464a      	mov	r2, r9
   d5572:	2114      	movs	r1, #20
   d5574:	1d38      	adds	r0, r7, #4
   d5576:	f7ff fd5b 	bl	d5030 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d557a:	2813      	cmp	r0, #19
   d557c:	d805      	bhi.n	d558a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d557e:	1d39      	adds	r1, r7, #4
   d5580:	4628      	mov	r0, r5
   d5582:	f7ff fecb 	bl	d531c <_ZN5Print5writeEPKc>
   d5586:	4604      	mov	r4, r0
   d5588:	e013      	b.n	d55b2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d558a:	f100 0308 	add.w	r3, r0, #8
   d558e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5592:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5594:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5598:	1c41      	adds	r1, r0, #1
   d559a:	4623      	mov	r3, r4
   d559c:	464a      	mov	r2, r9
   d559e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d55a0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d55a2:	f7ff fd45 	bl	d5030 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55a6:	4669      	mov	r1, sp
   d55a8:	4628      	mov	r0, r5
   d55aa:	f7ff feb7 	bl	d531c <_ZN5Print5writeEPKc>
   d55ae:	4604      	mov	r4, r0
   d55b0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d55b2:	b11e      	cbz	r6, d55bc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d55b4:	4628      	mov	r0, r5
   d55b6:	f7ff fec8 	bl	d534a <_ZN5Print7printlnEv>
   d55ba:	4404      	add	r4, r0
    return n;
}
   d55bc:	4620      	mov	r0, r4
   d55be:	371c      	adds	r7, #28
   d55c0:	46bd      	mov	sp, r7
   d55c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55c6:	b002      	add	sp, #8
   d55c8:	4770      	bx	lr
	...

000d55cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55cc:	4b01      	ldr	r3, [pc, #4]	; (d55d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55ce:	4a02      	ldr	r2, [pc, #8]	; (d55d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55d0:	601a      	str	r2, [r3, #0]
   d55d2:	4770      	bx	lr
   d55d4:	2003e3e4 	.word	0x2003e3e4
   d55d8:	000d8855 	.word	0x000d8855

000d55dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55dc:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55de:	681a      	ldr	r2, [r3, #0]
   d55e0:	4b02      	ldr	r3, [pc, #8]	; (d55ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55e2:	601a      	str	r2, [r3, #0]
   d55e4:	4770      	bx	lr
   d55e6:	bf00      	nop
   d55e8:	2003e314 	.word	0x2003e314
   d55ec:	2003e3e8 	.word	0x2003e3e8

000d55f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d55f0:	2100      	movs	r1, #0
   d55f2:	f7ff bc99 	b.w	d4f28 <system_delay_ms>

000d55f6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d55f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d55f8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d55fa:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d55fc:	b113      	cbz	r3, d5604 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55fe:	2203      	movs	r2, #3
   d5600:	4601      	mov	r1, r0
   d5602:	4798      	blx	r3
    }
   d5604:	4620      	mov	r0, r4
   d5606:	bd10      	pop	{r4, pc}

000d5608 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5608:	b510      	push	{r4, lr}
   d560a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d560c:	f7ff fff3 	bl	d55f6 <_ZNSt14_Function_baseD1Ev>
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5614:	4803      	ldr	r0, [pc, #12]	; (d5624 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5616:	4a04      	ldr	r2, [pc, #16]	; (d5628 <_GLOBAL__sub_I_RGB+0x14>)
   d5618:	4904      	ldr	r1, [pc, #16]	; (d562c <_GLOBAL__sub_I_RGB+0x18>)
   d561a:	2300      	movs	r3, #0
   d561c:	6083      	str	r3, [r0, #8]
   d561e:	f000 bcf5 	b.w	d600c <__aeabi_atexit>
   d5622:	bf00      	nop
   d5624:	2003e3ec 	.word	0x2003e3ec
   d5628:	2003e380 	.word	0x2003e380
   d562c:	000d5609 	.word	0x000d5609

000d5630 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5630:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5632:	4b0c      	ldr	r3, [pc, #48]	; (d5664 <serialEventRun+0x34>)
   d5634:	b133      	cbz	r3, d5644 <serialEventRun+0x14>
   d5636:	f000 f95d 	bl	d58f4 <_Z16_fetch_usbserialv>
   d563a:	6803      	ldr	r3, [r0, #0]
   d563c:	691b      	ldr	r3, [r3, #16]
   d563e:	4798      	blx	r3
   d5640:	2800      	cmp	r0, #0
   d5642:	dc09      	bgt.n	d5658 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5644:	4b08      	ldr	r3, [pc, #32]	; (d5668 <serialEventRun+0x38>)
   d5646:	b163      	cbz	r3, d5662 <serialEventRun+0x32>
   d5648:	f000 f9d6 	bl	d59f8 <_Z22__fetch_global_Serial1v>
   d564c:	6803      	ldr	r3, [r0, #0]
   d564e:	691b      	ldr	r3, [r3, #16]
   d5650:	4798      	blx	r3
   d5652:	2800      	cmp	r0, #0
   d5654:	dc03      	bgt.n	d565e <serialEventRun+0x2e>
   d5656:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5658:	f3af 8000 	nop.w
   d565c:	e7f2      	b.n	d5644 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d565e:	f3af 8000 	nop.w
   d5662:	bd08      	pop	{r3, pc}
	...

000d566c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d566c:	b508      	push	{r3, lr}
	serialEventRun();
   d566e:	f7ff ffdf 	bl	d5630 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5672:	f7ff fb41 	bl	d4cf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5676:	4b01      	ldr	r3, [pc, #4]	; (d567c <_post_loop+0x10>)
   d5678:	6018      	str	r0, [r3, #0]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	2003e730 	.word	0x2003e730

000d5680 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5680:	4802      	ldr	r0, [pc, #8]	; (d568c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5682:	4a03      	ldr	r2, [pc, #12]	; (d5690 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5684:	4903      	ldr	r1, [pc, #12]	; (d5694 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5686:	1a12      	subs	r2, r2, r0
   d5688:	f002 bf42 	b.w	d8510 <memcpy>
   d568c:	2003f400 	.word	0x2003f400
   d5690:	2003f404 	.word	0x2003f404
   d5694:	000d8ae8 	.word	0x000d8ae8

000d5698 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5698:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d569a:	2300      	movs	r3, #0
   d569c:	9300      	str	r3, [sp, #0]
   d569e:	461a      	mov	r2, r3
   d56a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56a4:	f7ff fc52 	bl	d4f4c <system_ctrl_set_result>
}
   d56a8:	b003      	add	sp, #12
   d56aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d56b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56b2:	8843      	ldrh	r3, [r0, #2]
   d56b4:	2b0a      	cmp	r3, #10
   d56b6:	d008      	beq.n	d56ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d56b8:	2b50      	cmp	r3, #80	; 0x50
   d56ba:	d109      	bne.n	d56d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d56bc:	4b09      	ldr	r3, [pc, #36]	; (d56e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56be:	681b      	ldr	r3, [r3, #0]
   d56c0:	b13b      	cbz	r3, d56d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d56c2:	b003      	add	sp, #12
   d56c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d56c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d56ca:	f7ff ffe5 	bl	d5698 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d56ce:	e006      	b.n	d56de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56d0:	2300      	movs	r3, #0
   d56d2:	9300      	str	r3, [sp, #0]
   d56d4:	461a      	mov	r2, r3
   d56d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56da:	f7ff fc37 	bl	d4f4c <system_ctrl_set_result>
        break;
    }
}
   d56de:	b003      	add	sp, #12
   d56e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d56e4:	2003e3fc 	.word	0x2003e3fc

000d56e8 <module_user_init_hook>:

void module_user_init_hook()
{
   d56e8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d56ea:	4c10      	ldr	r4, [pc, #64]	; (d572c <module_user_init_hook+0x44>)
   d56ec:	4d10      	ldr	r5, [pc, #64]	; (d5730 <module_user_init_hook+0x48>)
   d56ee:	6823      	ldr	r3, [r4, #0]
   d56f0:	42ab      	cmp	r3, r5
   d56f2:	4b10      	ldr	r3, [pc, #64]	; (d5734 <module_user_init_hook+0x4c>)
   d56f4:	bf0c      	ite	eq
   d56f6:	2201      	moveq	r2, #1
   d56f8:	2200      	movne	r2, #0
   d56fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d56fc:	d002      	beq.n	d5704 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d56fe:	f7ff ffbf 	bl	d5680 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5702:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5704:	f7ff faf0 	bl	d4ce8 <HAL_RNG_GetRandomNumber>
   d5708:	4604      	mov	r4, r0
    srand(seed);
   d570a:	f002 ff15 	bl	d8538 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d570e:	4b0a      	ldr	r3, [pc, #40]	; (d5738 <module_user_init_hook+0x50>)
   d5710:	b113      	cbz	r3, d5718 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5712:	4620      	mov	r0, r4
   d5714:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5718:	2100      	movs	r1, #0
   d571a:	4807      	ldr	r0, [pc, #28]	; (d5738 <module_user_init_hook+0x50>)
   d571c:	f7ff fc70 	bl	d5000 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5720:	2100      	movs	r1, #0
   d5722:	4806      	ldr	r0, [pc, #24]	; (d573c <module_user_init_hook+0x54>)
}
   d5724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5728:	f7ff bc06 	b.w	d4f38 <system_ctrl_set_app_request_handler>
   d572c:	2003f400 	.word	0x2003f400
   d5730:	9a271c1e 	.word	0x9a271c1e
   d5734:	2003e400 	.word	0x2003e400
   d5738:	00000000 	.word	0x00000000
   d573c:	000d56b1 	.word	0x000d56b1

000d5740 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5740:	4770      	bx	lr

000d5742 <_ZN9IPAddressD0Ev>:
   d5742:	b510      	push	{r4, lr}
   d5744:	2118      	movs	r1, #24
   d5746:	4604      	mov	r4, r0
   d5748:	f000 fc6e 	bl	d6028 <_ZdlPvj>
   d574c:	4620      	mov	r0, r4
   d574e:	bd10      	pop	{r4, pc}

000d5750 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5750:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5752:	7d03      	ldrb	r3, [r0, #20]
   d5754:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5756:	b08d      	sub	sp, #52	; 0x34
   d5758:	460e      	mov	r6, r1
   d575a:	f100 0704 	add.w	r7, r0, #4
   d575e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5762:	d002      	beq.n	d576a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5764:	f100 0508 	add.w	r5, r0, #8
   d5768:	e018      	b.n	d579c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d576a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d576c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d576e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5772:	232f      	movs	r3, #47	; 0x2f
   d5774:	462a      	mov	r2, r5
   d5776:	200a      	movs	r0, #10
   d5778:	f7ff faee 	bl	d4d58 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d577c:	4628      	mov	r0, r5
   d577e:	f002 ff03 	bl	d8588 <strlen>
   d5782:	6833      	ldr	r3, [r6, #0]
   d5784:	4602      	mov	r2, r0
   d5786:	68db      	ldr	r3, [r3, #12]
   d5788:	4629      	mov	r1, r5
   d578a:	4630      	mov	r0, r6
   d578c:	4798      	blx	r3
   d578e:	e00f      	b.n	d57b0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5790:	b124      	cbz	r4, d579c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5792:	212e      	movs	r1, #46	; 0x2e
   d5794:	4630      	mov	r0, r6
   d5796:	f7ff fdd5 	bl	d5344 <_ZN5Print5printEc>
   d579a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d579c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d57a0:	220a      	movs	r2, #10
   d57a2:	4630      	mov	r0, r6
   d57a4:	f7ff fde9 	bl	d537a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d57a8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57aa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d57ac:	d1f0      	bne.n	d5790 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57ae:	4620      	mov	r0, r4
    }
    return n;
}
   d57b0:	b00d      	add	sp, #52	; 0x34
   d57b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57b4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d57b4:	b510      	push	{r4, lr}
   d57b6:	4b05      	ldr	r3, [pc, #20]	; (d57cc <_ZN9IPAddressC1Ev+0x18>)
   d57b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d57ba:	2211      	movs	r2, #17
   d57bc:	f840 3b04 	str.w	r3, [r0], #4
   d57c0:	2100      	movs	r1, #0
   d57c2:	f002 feb0 	bl	d8526 <memset>
{
    clear();
}
   d57c6:	4620      	mov	r0, r4
   d57c8:	bd10      	pop	{r4, pc}
   d57ca:	bf00      	nop
   d57cc:	000d88f4 	.word	0x000d88f4

000d57d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d57d0:	4603      	mov	r3, r0
   d57d2:	4a07      	ldr	r2, [pc, #28]	; (d57f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57d4:	b510      	push	{r4, lr}
   d57d6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d57da:	f101 0210 	add.w	r2, r1, #16
   d57de:	f851 4b04 	ldr.w	r4, [r1], #4
   d57e2:	f843 4b04 	str.w	r4, [r3], #4
   d57e6:	4291      	cmp	r1, r2
   d57e8:	d1f9      	bne.n	d57de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57ea:	780a      	ldrb	r2, [r1, #0]
   d57ec:	701a      	strb	r2, [r3, #0]
}
   d57ee:	bd10      	pop	{r4, pc}
   d57f0:	000d88f4 	.word	0x000d88f4

000d57f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d57f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d57f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d57fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d57fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5802:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5806:	2304      	movs	r3, #4
   d5808:	6041      	str	r1, [r0, #4]
   d580a:	7503      	strb	r3, [r0, #20]
   d580c:	bd10      	pop	{r4, pc}

000d580e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d580e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5810:	780d      	ldrb	r5, [r1, #0]
   d5812:	788b      	ldrb	r3, [r1, #2]
   d5814:	784a      	ldrb	r2, [r1, #1]
   d5816:	78c9      	ldrb	r1, [r1, #3]
   d5818:	9100      	str	r1, [sp, #0]
   d581a:	4629      	mov	r1, r5
   d581c:	f7ff ffea 	bl	d57f4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5820:	b003      	add	sp, #12
   d5822:	bd30      	pop	{r4, r5, pc}

000d5824 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5824:	7441      	strb	r1, [r0, #17]
   d5826:	4770      	bx	lr

000d5828 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5828:	4770      	bx	lr

000d582a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d582a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d582c:	2100      	movs	r1, #0
   d582e:	7c00      	ldrb	r0, [r0, #16]
   d5830:	f7ff fb52 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d5834:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5838:	bf28      	it	cs
   d583a:	f04f 30ff 	movcs.w	r0, #4294967295
   d583e:	bd08      	pop	{r3, pc}

000d5840 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5840:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5842:	2101      	movs	r1, #1
   d5844:	7c00      	ldrb	r0, [r0, #16]
   d5846:	f7ff fb47 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d584a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d584e:	bf28      	it	cs
   d5850:	f04f 30ff 	movcs.w	r0, #4294967295
   d5854:	bd08      	pop	{r3, pc}

000d5856 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5856:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5858:	7c00      	ldrb	r0, [r0, #16]
   d585a:	f7ff fb35 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
}
   d585e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5862:	bd08      	pop	{r3, pc}

000d5864 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5864:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5866:	7c00      	ldrb	r0, [r0, #16]
   d5868:	f7ff fb26 	bl	d4eb8 <HAL_USB_USART_Available_Data>
}
   d586c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5870:	bd08      	pop	{r3, pc}

000d5872 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5872:	7c00      	ldrb	r0, [r0, #16]
   d5874:	f7ff bb40 	b.w	d4ef8 <HAL_USB_USART_Flush_Data>

000d5878 <_ZN9USBSerialD0Ev>:
   d5878:	b510      	push	{r4, lr}
   d587a:	2114      	movs	r1, #20
   d587c:	4604      	mov	r4, r0
   d587e:	f000 fbd3 	bl	d6028 <_ZdlPvj>
   d5882:	4620      	mov	r0, r4
   d5884:	bd10      	pop	{r4, pc}

000d5886 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5886:	b538      	push	{r3, r4, r5, lr}
   d5888:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d588a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d588c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d588e:	f7ff fb1b 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
   d5892:	2800      	cmp	r0, #0
   d5894:	dc01      	bgt.n	d589a <_ZN9USBSerial5writeEh+0x14>
   d5896:	7c60      	ldrb	r0, [r4, #17]
   d5898:	b128      	cbz	r0, d58a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d589a:	4629      	mov	r1, r5
   d589c:	7c20      	ldrb	r0, [r4, #16]
   d589e:	f7ff fb23 	bl	d4ee8 <HAL_USB_USART_Send_Data>
   d58a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d58a6:	bd38      	pop	{r3, r4, r5, pc}

000d58a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58a8:	b510      	push	{r4, lr}
   d58aa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d58ac:	2300      	movs	r3, #0
   d58ae:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d58b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58b4:	60a3      	str	r3, [r4, #8]
   d58b6:	4b05      	ldr	r3, [pc, #20]	; (d58cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d58b8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d58ba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58bc:	4608      	mov	r0, r1
{
  _serial = serial;
   d58be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d58c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d58c2:	4611      	mov	r1, r2
   d58c4:	f7ff fae8 	bl	d4e98 <HAL_USB_USART_Init>
}
   d58c8:	4620      	mov	r0, r4
   d58ca:	bd10      	pop	{r4, pc}
   d58cc:	000d8908 	.word	0x000d8908

000d58d0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d58d0:	2200      	movs	r2, #0
   d58d2:	7c00      	ldrb	r0, [r0, #16]
   d58d4:	f7ff bae8 	b.w	d4ea8 <HAL_USB_USART_Begin>

000d58d8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d58d8:	7c00      	ldrb	r0, [r0, #16]
   d58da:	f7ff bb15 	b.w	d4f08 <HAL_USB_USART_Is_Enabled>

000d58de <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d58de:	f7ff bffb 	b.w	d58d8 <_ZN9USBSerial9isEnabledEv>

000d58e2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58e2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d58e4:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d58e8:	2100      	movs	r1, #0
   d58ea:	f002 fe1c 	bl	d8526 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d58ee:	4620      	mov	r0, r4
   d58f0:	bd10      	pop	{r4, pc}
	...

000d58f4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d58f4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58f6:	4d0e      	ldr	r5, [pc, #56]	; (d5930 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d58f8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d58fa:	a801      	add	r0, sp, #4
   d58fc:	f7ff fff1 	bl	d58e2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5900:	6829      	ldr	r1, [r5, #0]
   d5902:	f011 0401 	ands.w	r4, r1, #1
   d5906:	d110      	bne.n	d592a <_Z16_fetch_usbserialv+0x36>
   d5908:	4628      	mov	r0, r5
   d590a:	f7fe fbca 	bl	d40a2 <__cxa_guard_acquire>
   d590e:	b160      	cbz	r0, d592a <_Z16_fetch_usbserialv+0x36>
   d5910:	aa01      	add	r2, sp, #4
   d5912:	4621      	mov	r1, r4
   d5914:	4807      	ldr	r0, [pc, #28]	; (d5934 <_Z16_fetch_usbserialv+0x40>)
   d5916:	f7ff ffc7 	bl	d58a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d591a:	4628      	mov	r0, r5
   d591c:	f7fe fbc6 	bl	d40ac <__cxa_guard_release>
   d5920:	4a05      	ldr	r2, [pc, #20]	; (d5938 <_Z16_fetch_usbserialv+0x44>)
   d5922:	4906      	ldr	r1, [pc, #24]	; (d593c <_Z16_fetch_usbserialv+0x48>)
   d5924:	4803      	ldr	r0, [pc, #12]	; (d5934 <_Z16_fetch_usbserialv+0x40>)
   d5926:	f000 fb71 	bl	d600c <__aeabi_atexit>
	return _usbserial;
}
   d592a:	4802      	ldr	r0, [pc, #8]	; (d5934 <_Z16_fetch_usbserialv+0x40>)
   d592c:	b007      	add	sp, #28
   d592e:	bd30      	pop	{r4, r5, pc}
   d5930:	2003e404 	.word	0x2003e404
   d5934:	2003e408 	.word	0x2003e408
   d5938:	2003e380 	.word	0x2003e380
   d593c:	000d5829 	.word	0x000d5829

000d5940 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5940:	4770      	bx	lr

000d5942 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5942:	7441      	strb	r1, [r0, #17]
   d5944:	4770      	bx	lr

000d5946 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5946:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5948:	7c00      	ldrb	r0, [r0, #16]
   d594a:	f7ff fa45 	bl	d4dd8 <HAL_USART_Available_Data_For_Write>
}
   d594e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5952:	bd08      	pop	{r3, pc}

000d5954 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5954:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5956:	7c00      	ldrb	r0, [r0, #16]
   d5958:	f7ff fa16 	bl	d4d88 <HAL_USART_Available_Data>
}
   d595c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5960:	bd08      	pop	{r3, pc}

000d5962 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5962:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5964:	7c00      	ldrb	r0, [r0, #16]
   d5966:	f7ff fa1f 	bl	d4da8 <HAL_USART_Peek_Data>
}
   d596a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d596e:	bf28      	it	cs
   d5970:	f04f 30ff 	movcs.w	r0, #4294967295
   d5974:	bd08      	pop	{r3, pc}

000d5976 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5976:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5978:	7c00      	ldrb	r0, [r0, #16]
   d597a:	f7ff fa0d 	bl	d4d98 <HAL_USART_Read_Data>
}
   d597e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5982:	bf28      	it	cs
   d5984:	f04f 30ff 	movcs.w	r0, #4294967295
   d5988:	bd08      	pop	{r3, pc}

000d598a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d598a:	7c00      	ldrb	r0, [r0, #16]
   d598c:	f7ff ba14 	b.w	d4db8 <HAL_USART_Flush_Data>

000d5990 <_ZN11USARTSerialD0Ev>:
   d5990:	b510      	push	{r4, lr}
   d5992:	2114      	movs	r1, #20
   d5994:	4604      	mov	r4, r0
   d5996:	f000 fb47 	bl	d6028 <_ZdlPvj>
   d599a:	4620      	mov	r0, r4
   d599c:	bd10      	pop	{r4, pc}

000d599e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d599e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d59a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d59a2:	4604      	mov	r4, r0
   d59a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d59a6:	b925      	cbnz	r5, d59b2 <_ZN11USARTSerial5writeEh+0x14>
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7ff fa15 	bl	d4dd8 <HAL_USART_Available_Data_For_Write>
   d59ae:	2800      	cmp	r0, #0
   d59b0:	dd05      	ble.n	d59be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d59b2:	4631      	mov	r1, r6
   d59b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d59b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d59ba:	f7ff b9dd 	b.w	d4d78 <HAL_USART_Write_Data>
  }
  return 0;
}
   d59be:	4628      	mov	r0, r5
   d59c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d59c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d59c4:	b510      	push	{r4, lr}
   d59c6:	4604      	mov	r4, r0
   d59c8:	4608      	mov	r0, r1
   d59ca:	4611      	mov	r1, r2
   d59cc:	2200      	movs	r2, #0
   d59ce:	6062      	str	r2, [r4, #4]
   d59d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d59d4:	60a2      	str	r2, [r4, #8]
   d59d6:	4a05      	ldr	r2, [pc, #20]	; (d59ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d59d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d59da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d59dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d59de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d59e0:	461a      	mov	r2, r3
   d59e2:	f7ff f9c1 	bl	d4d68 <HAL_USART_Init>
}
   d59e6:	4620      	mov	r0, r4
   d59e8:	bd10      	pop	{r4, pc}
   d59ea:	bf00      	nop
   d59ec:	000d8938 	.word	0x000d8938

000d59f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d59f0:	7c00      	ldrb	r0, [r0, #16]
   d59f2:	f7ff b9e9 	b.w	d4dc8 <HAL_USART_Is_Enabled>
	...

000d59f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d59f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d59fa:	4d0c      	ldr	r5, [pc, #48]	; (d5a2c <_Z22__fetch_global_Serial1v+0x34>)
   d59fc:	6829      	ldr	r1, [r5, #0]
   d59fe:	f011 0401 	ands.w	r4, r1, #1
   d5a02:	d111      	bne.n	d5a28 <_Z22__fetch_global_Serial1v+0x30>
   d5a04:	4628      	mov	r0, r5
   d5a06:	f7fe fb4c 	bl	d40a2 <__cxa_guard_acquire>
   d5a0a:	b168      	cbz	r0, d5a28 <_Z22__fetch_global_Serial1v+0x30>
   d5a0c:	4a08      	ldr	r2, [pc, #32]	; (d5a30 <_Z22__fetch_global_Serial1v+0x38>)
   d5a0e:	4b09      	ldr	r3, [pc, #36]	; (d5a34 <_Z22__fetch_global_Serial1v+0x3c>)
   d5a10:	4809      	ldr	r0, [pc, #36]	; (d5a38 <_Z22__fetch_global_Serial1v+0x40>)
   d5a12:	4621      	mov	r1, r4
   d5a14:	f7ff ffd6 	bl	d59c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5a18:	4628      	mov	r0, r5
   d5a1a:	f7fe fb47 	bl	d40ac <__cxa_guard_release>
   d5a1e:	4a07      	ldr	r2, [pc, #28]	; (d5a3c <_Z22__fetch_global_Serial1v+0x44>)
   d5a20:	4907      	ldr	r1, [pc, #28]	; (d5a40 <_Z22__fetch_global_Serial1v+0x48>)
   d5a22:	4805      	ldr	r0, [pc, #20]	; (d5a38 <_Z22__fetch_global_Serial1v+0x40>)
   d5a24:	f000 faf2 	bl	d600c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5a28:	4803      	ldr	r0, [pc, #12]	; (d5a38 <_Z22__fetch_global_Serial1v+0x40>)
   d5a2a:	bd38      	pop	{r3, r4, r5, pc}
   d5a2c:	2003e4b4 	.word	0x2003e4b4
   d5a30:	2003e4b8 	.word	0x2003e4b8
   d5a34:	2003e430 	.word	0x2003e430
   d5a38:	2003e41c 	.word	0x2003e41c
   d5a3c:	2003e380 	.word	0x2003e380
   d5a40:	000d5941 	.word	0x000d5941

000d5a44 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5a44:	4770      	bx	lr

000d5a46 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a48:	4606      	mov	r6, r0
   d5a4a:	4615      	mov	r5, r2
   d5a4c:	460c      	mov	r4, r1
   d5a4e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a50:	42bc      	cmp	r4, r7
   d5a52:	d006      	beq.n	d5a62 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a54:	6833      	ldr	r3, [r6, #0]
   d5a56:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a5a:	689b      	ldr	r3, [r3, #8]
   d5a5c:	4630      	mov	r0, r6
   d5a5e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a60:	e7f6      	b.n	d5a50 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5a62:	4628      	mov	r0, r5
   d5a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a66 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a66:	2200      	movs	r2, #0
   d5a68:	7c00      	ldrb	r0, [r0, #16]
   d5a6a:	f7ff b9d5 	b.w	d4e18 <HAL_I2C_Write_Data>

000d5a6e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5a6e:	2100      	movs	r1, #0
   d5a70:	7c00      	ldrb	r0, [r0, #16]
   d5a72:	f7ff b9d9 	b.w	d4e28 <HAL_I2C_Available_Data>

000d5a76 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5a76:	2100      	movs	r1, #0
   d5a78:	7c00      	ldrb	r0, [r0, #16]
   d5a7a:	f7ff b9dd 	b.w	d4e38 <HAL_I2C_Read_Data>

000d5a7e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5a7e:	2100      	movs	r1, #0
   d5a80:	7c00      	ldrb	r0, [r0, #16]
   d5a82:	f7ff b9e1 	b.w	d4e48 <HAL_I2C_Peek_Data>

000d5a86 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5a86:	2100      	movs	r1, #0
   d5a88:	7c00      	ldrb	r0, [r0, #16]
   d5a8a:	f7ff b9e5 	b.w	d4e58 <HAL_I2C_Flush_Data>

000d5a8e <_ZN7TwoWireD0Ev>:
   d5a8e:	b510      	push	{r4, lr}
   d5a90:	2114      	movs	r1, #20
   d5a92:	4604      	mov	r4, r0
   d5a94:	f000 fac8 	bl	d6028 <_ZdlPvj>
   d5a98:	4620      	mov	r0, r4
   d5a9a:	bd10      	pop	{r4, pc}

000d5a9c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5a9c:	b510      	push	{r4, lr}
   d5a9e:	4604      	mov	r4, r0
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	6063      	str	r3, [r4, #4]
   d5aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5aa8:	60a3      	str	r3, [r4, #8]
   d5aaa:	4b04      	ldr	r3, [pc, #16]	; (d5abc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5aac:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5aae:	4608      	mov	r0, r1
   d5ab0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5ab2:	4611      	mov	r1, r2
   d5ab4:	f7ff f9e0 	bl	d4e78 <HAL_I2C_Init>
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}
   d5abc:	000d8968 	.word	0x000d8968

000d5ac0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ac0:	2300      	movs	r3, #0
   d5ac2:	461a      	mov	r2, r3
   d5ac4:	4619      	mov	r1, r3
   d5ac6:	7c00      	ldrb	r0, [r0, #16]
   d5ac8:	f7ff b98e 	b.w	d4de8 <HAL_I2C_Begin>

000d5acc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5acc:	b570      	push	{r4, r5, r6, lr}
   d5ace:	460c      	mov	r4, r1
   d5ad0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5ad2:	2514      	movs	r5, #20
   d5ad4:	4606      	mov	r6, r0
   d5ad6:	462a      	mov	r2, r5
   d5ad8:	2100      	movs	r1, #0
   d5ada:	a801      	add	r0, sp, #4
   d5adc:	f002 fd23 	bl	d8526 <memset>
   d5ae0:	7823      	ldrb	r3, [r4, #0]
   d5ae2:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ae6:	6863      	ldr	r3, [r4, #4]
   d5ae8:	9303      	str	r3, [sp, #12]
   d5aea:	68e3      	ldr	r3, [r4, #12]
   d5aec:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5aee:	2200      	movs	r2, #0
   d5af0:	7a23      	ldrb	r3, [r4, #8]
   d5af2:	7c30      	ldrb	r0, [r6, #16]
   d5af4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5af8:	a901      	add	r1, sp, #4
   d5afa:	9305      	str	r3, [sp, #20]
   d5afc:	f7ff f9c4 	bl	d4e88 <HAL_I2C_Request_Data_Ex>
}
   d5b00:	b006      	add	sp, #24
   d5b02:	bd70      	pop	{r4, r5, r6, pc}

000d5b04 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5b06:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5b08:	f88d 1000 	strb.w	r1, [sp]
   d5b0c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5b10:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5b12:	bf18      	it	ne
   d5b14:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5b16:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5b18:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5b1a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b1e:	f7ff ffd5 	bl	d5acc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5b22:	b005      	add	sp, #20
   d5b24:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b28 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5b28:	2301      	movs	r3, #1
   d5b2a:	f7ff bfeb 	b.w	d5b04 <_ZN7TwoWire11requestFromEhjh>

000d5b2e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5b2e:	2200      	movs	r2, #0
   d5b30:	7c00      	ldrb	r0, [r0, #16]
   d5b32:	f7ff b961 	b.w	d4df8 <HAL_I2C_Begin_Transmission>

000d5b36 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5b36:	2200      	movs	r2, #0
   d5b38:	7c00      	ldrb	r0, [r0, #16]
   d5b3a:	f7ff b965 	b.w	d4e08 <HAL_I2C_End_Transmission>

000d5b3e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5b3e:	2101      	movs	r1, #1
   d5b40:	f7ff bff9 	b.w	d5b36 <_ZN7TwoWire15endTransmissionEh>

000d5b44 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b44:	2100      	movs	r1, #0
   d5b46:	7c00      	ldrb	r0, [r0, #16]
   d5b48:	f7ff b98e 	b.w	d4e68 <HAL_I2C_Is_Enabled>

000d5b4c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	4611      	mov	r1, r2
   d5b50:	6840      	ldr	r0, [r0, #4]
   d5b52:	f7ff ba3d 	b.w	d4fd0 <network_listening>

000d5b56 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b56:	2200      	movs	r2, #0
   d5b58:	4611      	mov	r1, r2
   d5b5a:	6840      	ldr	r0, [r0, #4]
   d5b5c:	f7ff ba48 	b.w	d4ff0 <network_get_listen_timeout>

000d5b60 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b60:	2200      	movs	r2, #0
   d5b62:	6840      	ldr	r0, [r0, #4]
   d5b64:	f7ff ba3c 	b.w	d4fe0 <network_set_listen_timeout>

000d5b68 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b68:	2200      	movs	r2, #0
   d5b6a:	f081 0101 	eor.w	r1, r1, #1
   d5b6e:	6840      	ldr	r0, [r0, #4]
   d5b70:	f7ff ba26 	b.w	d4fc0 <network_listen>

000d5b74 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5b74:	2300      	movs	r3, #0
   d5b76:	461a      	mov	r2, r3
   d5b78:	2101      	movs	r1, #1
   d5b7a:	6840      	ldr	r0, [r0, #4]
   d5b7c:	f7ff ba18 	b.w	d4fb0 <network_off>

000d5b80 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b80:	2300      	movs	r3, #0
   d5b82:	461a      	mov	r2, r3
   d5b84:	4619      	mov	r1, r3
   d5b86:	6840      	ldr	r0, [r0, #4]
   d5b88:	f7ff ba0a 	b.w	d4fa0 <network_on>

000d5b8c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b8c:	2200      	movs	r2, #0
   d5b8e:	4611      	mov	r1, r2
   d5b90:	6840      	ldr	r0, [r0, #4]
   d5b92:	f7ff b9fd 	b.w	d4f90 <network_ready>

000d5b96 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b96:	2200      	movs	r2, #0
   d5b98:	4611      	mov	r1, r2
   d5b9a:	6840      	ldr	r0, [r0, #4]
   d5b9c:	f7ff b9e8 	b.w	d4f70 <network_connecting>

000d5ba0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ba0:	2200      	movs	r2, #0
   d5ba2:	2102      	movs	r1, #2
   d5ba4:	6840      	ldr	r0, [r0, #4]
   d5ba6:	f7ff b9eb 	b.w	d4f80 <network_disconnect>

000d5baa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5baa:	2300      	movs	r3, #0
   d5bac:	461a      	mov	r2, r3
   d5bae:	6840      	ldr	r0, [r0, #4]
   d5bb0:	f7ff b9d6 	b.w	d4f60 <network_connect>

000d5bb4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5bb4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bb6:	4605      	mov	r5, r0
   d5bb8:	b188      	cbz	r0, d5bde <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bba:	6804      	ldr	r4, [r0, #0]
   d5bbc:	b14c      	cbz	r4, d5bd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5bbe:	68a3      	ldr	r3, [r4, #8]
   d5bc0:	b11b      	cbz	r3, d5bca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bc2:	2203      	movs	r2, #3
   d5bc4:	4621      	mov	r1, r4
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bca:	2110      	movs	r1, #16
   d5bcc:	4620      	mov	r0, r4
   d5bce:	f000 fa2b 	bl	d6028 <_ZdlPvj>
   d5bd2:	4628      	mov	r0, r5
   d5bd4:	2114      	movs	r1, #20
      }
   d5bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bda:	f000 ba25 	b.w	d6028 <_ZdlPvj>
   d5bde:	bd38      	pop	{r3, r4, r5, pc}

000d5be0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5be0:	b110      	cbz	r0, d5be8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5be2:	6803      	ldr	r3, [r0, #0]
   d5be4:	685b      	ldr	r3, [r3, #4]
   d5be6:	4718      	bx	r3
   d5be8:	4770      	bx	lr

000d5bea <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5bea:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5bec:	6803      	ldr	r3, [r0, #0]
   d5bee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5bf0:	b1bb      	cbz	r3, d5c22 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5bf2:	6858      	ldr	r0, [r3, #4]
   d5bf4:	f7ff f888 	bl	d4d08 <os_thread_is_current>
   d5bf8:	b978      	cbnz	r0, d5c1a <_ZN6ThreadD1Ev+0x30>
   d5bfa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5bfc:	7c5a      	ldrb	r2, [r3, #17]
   d5bfe:	b912      	cbnz	r2, d5c06 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5c00:	6858      	ldr	r0, [r3, #4]
   d5c02:	f7ff f889 	bl	d4d18 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5c06:	6823      	ldr	r3, [r4, #0]
   d5c08:	6858      	ldr	r0, [r3, #4]
   d5c0a:	f7ff f88d 	bl	d4d28 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c0e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c10:	2300      	movs	r3, #0
   d5c12:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5c14:	b128      	cbz	r0, d5c22 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5c16:	f7ff ffcd 	bl	d5bb4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c1a:	6820      	ldr	r0, [r4, #0]
   d5c1c:	b108      	cbz	r0, d5c22 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5c1e:	f7ff ffc9 	bl	d5bb4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5c22:	4620      	mov	r0, r4
   d5c24:	bd10      	pop	{r4, pc}

000d5c26 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5c26:	b538      	push	{r3, r4, r5, lr}
   d5c28:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c2a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5c2e:	b108      	cbz	r0, d5c34 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5c30:	f7fe fa35 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c34:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5c38:	b108      	cbz	r0, d5c3e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5c3a:	f7ff f885 	bl	d4d48 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c3e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5c42:	b135      	cbz	r5, d5c52 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c44:	4628      	mov	r0, r5
   d5c46:	f7ff ffd0 	bl	d5bea <_ZN6ThreadD1Ev>
   d5c4a:	2104      	movs	r1, #4
   d5c4c:	4628      	mov	r0, r5
   d5c4e:	f000 f9eb 	bl	d6028 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c52:	6820      	ldr	r0, [r4, #0]
   d5c54:	b108      	cbz	r0, d5c5a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5c56:	f7ff ffc3 	bl	d5be0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c60 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5c60:	b510      	push	{r4, lr}
   d5c62:	4b04      	ldr	r3, [pc, #16]	; (d5c74 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5c64:	4604      	mov	r4, r0
   d5c66:	f840 3b08 	str.w	r3, [r0], #8
   d5c6a:	f7ff ffdc 	bl	d5c26 <_ZN5spark11MeshPublishD1Ev>
   d5c6e:	4620      	mov	r0, r4
   d5c70:	bd10      	pop	{r4, pc}
   d5c72:	bf00      	nop
   d5c74:	000d8990 	.word	0x000d8990

000d5c78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5c78:	b538      	push	{r3, r4, r5, lr}
   d5c7a:	4c0e      	ldr	r4, [pc, #56]	; (d5cb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5c7c:	4b0e      	ldr	r3, [pc, #56]	; (d5cb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5c7e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c80:	2500      	movs	r5, #0
   d5c82:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5c84:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c88:	6063      	str	r3, [r4, #4]
   d5c8a:	60a5      	str	r5, [r4, #8]
   d5c8c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c90:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c94:	f7ff f850 	bl	d4d38 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c98:	4b08      	ldr	r3, [pc, #32]	; (d5cbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5c9a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5c9e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5ca2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	4a06      	ldr	r2, [pc, #24]	; (d5cc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5ca8:	4906      	ldr	r1, [pc, #24]	; (d5cc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5cae:	f000 b9ad 	b.w	d600c <__aeabi_atexit>
   d5cb2:	bf00      	nop
   d5cb4:	2003e53c 	.word	0x2003e53c
   d5cb8:	000d89f8 	.word	0x000d89f8
   d5cbc:	000d8990 	.word	0x000d8990
   d5cc0:	2003e380 	.word	0x2003e380
   d5cc4:	000d5c61 	.word	0x000d5c61

000d5cc8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5cc8:	2200      	movs	r2, #0
   d5cca:	4611      	mov	r1, r2
   d5ccc:	6840      	ldr	r0, [r0, #4]
   d5cce:	f7ff b95f 	b.w	d4f90 <network_ready>

000d5cd2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cd2:	2200      	movs	r2, #0
   d5cd4:	4611      	mov	r1, r2
   d5cd6:	6840      	ldr	r0, [r0, #4]
   d5cd8:	f7ff b97a 	b.w	d4fd0 <network_listening>

000d5cdc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cdc:	2200      	movs	r2, #0
   d5cde:	4611      	mov	r1, r2
   d5ce0:	6840      	ldr	r0, [r0, #4]
   d5ce2:	f7ff b985 	b.w	d4ff0 <network_get_listen_timeout>

000d5ce6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ce6:	2200      	movs	r2, #0
   d5ce8:	6840      	ldr	r0, [r0, #4]
   d5cea:	f7ff b979 	b.w	d4fe0 <network_set_listen_timeout>

000d5cee <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cee:	2200      	movs	r2, #0
   d5cf0:	f081 0101 	eor.w	r1, r1, #1
   d5cf4:	6840      	ldr	r0, [r0, #4]
   d5cf6:	f7ff b963 	b.w	d4fc0 <network_listen>

000d5cfa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5cfa:	2300      	movs	r3, #0
   d5cfc:	461a      	mov	r2, r3
   d5cfe:	4619      	mov	r1, r3
   d5d00:	6840      	ldr	r0, [r0, #4]
   d5d02:	f7ff b955 	b.w	d4fb0 <network_off>

000d5d06 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5d06:	2300      	movs	r3, #0
   d5d08:	461a      	mov	r2, r3
   d5d0a:	4619      	mov	r1, r3
   d5d0c:	6840      	ldr	r0, [r0, #4]
   d5d0e:	f7ff b947 	b.w	d4fa0 <network_on>

000d5d12 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d12:	2200      	movs	r2, #0
   d5d14:	4611      	mov	r1, r2
   d5d16:	6840      	ldr	r0, [r0, #4]
   d5d18:	f7ff b92a 	b.w	d4f70 <network_connecting>

000d5d1c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	2102      	movs	r1, #2
   d5d20:	6840      	ldr	r0, [r0, #4]
   d5d22:	f7ff b92d 	b.w	d4f80 <network_disconnect>

000d5d26 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d26:	2300      	movs	r3, #0
   d5d28:	461a      	mov	r2, r3
   d5d2a:	6840      	ldr	r0, [r0, #4]
   d5d2c:	f7ff b918 	b.w	d4f60 <network_connect>

000d5d30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d30:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d32:	2204      	movs	r2, #4
   d5d34:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d36:	4a02      	ldr	r2, [pc, #8]	; (d5d40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d38:	601a      	str	r2, [r3, #0]
   d5d3a:	4770      	bx	lr
   d5d3c:	2003e710 	.word	0x2003e710
   d5d40:	000d89c4 	.word	0x000d89c4

000d5d44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d44:	2300      	movs	r3, #0
   d5d46:	461a      	mov	r2, r3
   d5d48:	6840      	ldr	r0, [r0, #4]
   d5d4a:	f7ff b909 	b.w	d4f60 <network_connect>

000d5d4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d4e:	2200      	movs	r2, #0
   d5d50:	2102      	movs	r1, #2
   d5d52:	6840      	ldr	r0, [r0, #4]
   d5d54:	f7ff b914 	b.w	d4f80 <network_disconnect>

000d5d58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d58:	2200      	movs	r2, #0
   d5d5a:	4611      	mov	r1, r2
   d5d5c:	6840      	ldr	r0, [r0, #4]
   d5d5e:	f7ff b907 	b.w	d4f70 <network_connecting>

000d5d62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d62:	2200      	movs	r2, #0
   d5d64:	4611      	mov	r1, r2
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	f7ff b912 	b.w	d4f90 <network_ready>

000d5d6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d6c:	2300      	movs	r3, #0
   d5d6e:	461a      	mov	r2, r3
   d5d70:	4619      	mov	r1, r3
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	f7ff b914 	b.w	d4fa0 <network_on>

000d5d78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d78:	2300      	movs	r3, #0
   d5d7a:	461a      	mov	r2, r3
   d5d7c:	4619      	mov	r1, r3
   d5d7e:	6840      	ldr	r0, [r0, #4]
   d5d80:	f7ff b916 	b.w	d4fb0 <network_off>

000d5d84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d84:	2200      	movs	r2, #0
   d5d86:	f081 0101 	eor.w	r1, r1, #1
   d5d8a:	6840      	ldr	r0, [r0, #4]
   d5d8c:	f7ff b918 	b.w	d4fc0 <network_listen>

000d5d90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d90:	2200      	movs	r2, #0
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff b924 	b.w	d4fe0 <network_set_listen_timeout>

000d5d98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d98:	2200      	movs	r2, #0
   d5d9a:	4611      	mov	r1, r2
   d5d9c:	6840      	ldr	r0, [r0, #4]
   d5d9e:	f7ff b927 	b.w	d4ff0 <network_get_listen_timeout>

000d5da2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5da2:	2200      	movs	r2, #0
   d5da4:	4611      	mov	r1, r2
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	f7ff b912 	b.w	d4fd0 <network_listening>

000d5dac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5db0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5db2:	b095      	sub	sp, #84	; 0x54
   d5db4:	4616      	mov	r6, r2
   d5db6:	460d      	mov	r5, r1
   d5db8:	4607      	mov	r7, r0
    IPAddress addr;
   d5dba:	f7ff fcfb 	bl	d57b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5dbe:	4621      	mov	r1, r4
   d5dc0:	2220      	movs	r2, #32
   d5dc2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5dc4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5dc6:	f002 fbae 	bl	d8526 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5dca:	2340      	movs	r3, #64	; 0x40
   d5dcc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5dce:	4621      	mov	r1, r4
   d5dd0:	466b      	mov	r3, sp
   d5dd2:	aa0c      	add	r2, sp, #48	; 0x30
   d5dd4:	4630      	mov	r0, r6
   d5dd6:	f7fe ff17 	bl	d4c08 <netdb_getaddrinfo>
    if (!r) {
   d5dda:	4604      	mov	r4, r0
   d5ddc:	2800      	cmp	r0, #0
   d5dde:	d144      	bne.n	d5e6a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5de0:	4602      	mov	r2, r0
   d5de2:	2101      	movs	r1, #1
   d5de4:	6868      	ldr	r0, [r5, #4]
   d5de6:	f7ff f8d3 	bl	d4f90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dea:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5dec:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dee:	4622      	mov	r2, r4
   d5df0:	6868      	ldr	r0, [r5, #4]
   d5df2:	f7ff f8cd 	bl	d4f90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5df6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5df8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5dfa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dfc:	2e00      	cmp	r6, #0
   d5dfe:	d034      	beq.n	d5e6a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e00:	2900      	cmp	r1, #0
   d5e02:	d132      	bne.n	d5e6a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e04:	6873      	ldr	r3, [r6, #4]
   d5e06:	2b02      	cmp	r3, #2
   d5e08:	d002      	beq.n	d5e10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e0a:	2b0a      	cmp	r3, #10
   d5e0c:	d009      	beq.n	d5e22 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5e0e:	e02a      	b.n	d5e66 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5e10:	f1b8 0f00 	cmp.w	r8, #0
   d5e14:	d027      	beq.n	d5e66 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e16:	6971      	ldr	r1, [r6, #20]
   d5e18:	4638      	mov	r0, r7
   d5e1a:	3104      	adds	r1, #4
   d5e1c:	f7ff fcf7 	bl	d580e <_ZN9IPAddressaSEPKh>
   d5e20:	e020      	b.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e22:	f1b9 0f00 	cmp.w	r9, #0
   d5e26:	d01e      	beq.n	d5e66 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e28:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e2a:	2211      	movs	r2, #17
   d5e2c:	a801      	add	r0, sp, #4
   d5e2e:	f002 fb7a 	bl	d8526 <memset>
                    a.v = 6;
   d5e32:	2306      	movs	r3, #6
   d5e34:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e38:	ad01      	add	r5, sp, #4
   d5e3a:	f104 0308 	add.w	r3, r4, #8
   d5e3e:	3418      	adds	r4, #24
   d5e40:	6818      	ldr	r0, [r3, #0]
   d5e42:	6859      	ldr	r1, [r3, #4]
   d5e44:	462a      	mov	r2, r5
   d5e46:	c203      	stmia	r2!, {r0, r1}
   d5e48:	3308      	adds	r3, #8
   d5e4a:	42a3      	cmp	r3, r4
   d5e4c:	4615      	mov	r5, r2
   d5e4e:	d1f7      	bne.n	d5e40 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5e50:	a901      	add	r1, sp, #4
   d5e52:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e54:	ad07      	add	r5, sp, #28
   d5e56:	f7ff fcbb 	bl	d57d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e5c:	1d3c      	adds	r4, r7, #4
   d5e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e60:	682b      	ldr	r3, [r5, #0]
   d5e62:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5e64:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e66:	69f6      	ldr	r6, [r6, #28]
   d5e68:	e7c8      	b.n	d5dfc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e6a:	9800      	ldr	r0, [sp, #0]
   d5e6c:	f7fe fec4 	bl	d4bf8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e70:	4638      	mov	r0, r7
   d5e72:	b015      	add	sp, #84	; 0x54
   d5e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e78 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e78:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e7a:	4a03      	ldr	r2, [pc, #12]	; (d5e88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e7c:	601a      	str	r2, [r3, #0]
   d5e7e:	2200      	movs	r2, #0
   d5e80:	605a      	str	r2, [r3, #4]
   d5e82:	4770      	bx	lr
   d5e84:	2003e718 	.word	0x2003e718
   d5e88:	000d89f8 	.word	0x000d89f8

000d5e8c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5e8c:	b510      	push	{r4, lr}
   d5e8e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5e90:	f000 f85c 	bl	d5f4c <_ZN8particle7globals11instanceSpiEv>
   d5e94:	f7ff f9e3 	bl	d525e <_ZN8SPIClass9isEnabledEv>
   d5e98:	b128      	cbz	r0, d5ea6 <pinAvailable+0x1a>
   d5e9a:	f1a4 030b 	sub.w	r3, r4, #11
   d5e9e:	2b02      	cmp	r3, #2
   d5ea0:	d801      	bhi.n	d5ea6 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5ea2:	2000      	movs	r0, #0
   d5ea4:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5ea6:	f000 f88b 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d5eaa:	f7ff fe4b 	bl	d5b44 <_ZN7TwoWire9isEnabledEv>
   d5eae:	b108      	cbz	r0, d5eb4 <pinAvailable+0x28>
   d5eb0:	2c01      	cmp	r4, #1
   d5eb2:	d9f6      	bls.n	d5ea2 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5eb4:	f7ff fda0 	bl	d59f8 <_Z22__fetch_global_Serial1v>
   d5eb8:	f7ff fd9a 	bl	d59f0 <_ZN11USARTSerial9isEnabledEv>
   d5ebc:	b118      	cbz	r0, d5ec6 <pinAvailable+0x3a>
   d5ebe:	f1a4 0309 	sub.w	r3, r4, #9
   d5ec2:	2b01      	cmp	r3, #1
   d5ec4:	d9ed      	bls.n	d5ea2 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5ec6:	2c23      	cmp	r4, #35	; 0x23
   d5ec8:	bf8c      	ite	hi
   d5eca:	2000      	movhi	r0, #0
   d5ecc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5ece:	bd10      	pop	{r4, pc}

000d5ed0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ed0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5ed2:	b538      	push	{r3, r4, r5, lr}
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ed8:	d80a      	bhi.n	d5ef0 <pinMode+0x20>
   d5eda:	29ff      	cmp	r1, #255	; 0xff
   d5edc:	d008      	beq.n	d5ef0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5ede:	f7ff ffd5 	bl	d5e8c <pinAvailable>
   d5ee2:	b128      	cbz	r0, d5ef0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ee4:	4629      	mov	r1, r5
   d5ee6:	4620      	mov	r0, r4
}
   d5ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5eec:	f7fe be9c 	b.w	d4c28 <HAL_Pin_Mode>
   d5ef0:	bd38      	pop	{r3, r4, r5, pc}

000d5ef2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5ef2:	b538      	push	{r3, r4, r5, lr}
   d5ef4:	4604      	mov	r4, r0
   d5ef6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ef8:	f7fe fe9e 	bl	d4c38 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5efc:	28ff      	cmp	r0, #255	; 0xff
   d5efe:	d010      	beq.n	d5f22 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5f00:	2806      	cmp	r0, #6
   d5f02:	d804      	bhi.n	d5f0e <digitalWrite+0x1c>
   d5f04:	234d      	movs	r3, #77	; 0x4d
   d5f06:	fa23 f000 	lsr.w	r0, r3, r0
   d5f0a:	07c3      	lsls	r3, r0, #31
   d5f0c:	d409      	bmi.n	d5f22 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f0e:	4620      	mov	r0, r4
   d5f10:	f7ff ffbc 	bl	d5e8c <pinAvailable>
   d5f14:	b128      	cbz	r0, d5f22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f16:	4629      	mov	r1, r5
   d5f18:	4620      	mov	r0, r4
}
   d5f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f1e:	f7fe be93 	b.w	d4c48 <HAL_GPIO_Write>
   d5f22:	bd38      	pop	{r3, r4, r5, pc}

000d5f24 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5f24:	b510      	push	{r4, lr}
   d5f26:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f28:	f7fe fe86 	bl	d4c38 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5f2c:	3804      	subs	r0, #4
   d5f2e:	b2c0      	uxtb	r0, r0
   d5f30:	2801      	cmp	r0, #1
   d5f32:	d908      	bls.n	d5f46 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5f34:	4620      	mov	r0, r4
   d5f36:	f7ff ffa9 	bl	d5e8c <pinAvailable>
   d5f3a:	b120      	cbz	r0, d5f46 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f3c:	4620      	mov	r0, r4
}
   d5f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f42:	f7fe be89 	b.w	d4c58 <HAL_GPIO_Read>
}
   d5f46:	2000      	movs	r0, #0
   d5f48:	bd10      	pop	{r4, pc}
	...

000d5f4c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5f4c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5f4e:	4d0b      	ldr	r5, [pc, #44]	; (d5f7c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5f50:	6829      	ldr	r1, [r5, #0]
   d5f52:	f011 0401 	ands.w	r4, r1, #1
   d5f56:	d10f      	bne.n	d5f78 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5f58:	4628      	mov	r0, r5
   d5f5a:	f7fe f8a2 	bl	d40a2 <__cxa_guard_acquire>
   d5f5e:	b158      	cbz	r0, d5f78 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5f60:	4621      	mov	r1, r4
   d5f62:	4807      	ldr	r0, [pc, #28]	; (d5f80 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f64:	f7ff f8c0 	bl	d50e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f68:	4628      	mov	r0, r5
   d5f6a:	f7fe f89f 	bl	d40ac <__cxa_guard_release>
   d5f6e:	4a05      	ldr	r2, [pc, #20]	; (d5f84 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5f70:	4905      	ldr	r1, [pc, #20]	; (d5f88 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5f72:	4803      	ldr	r0, [pc, #12]	; (d5f80 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f74:	f000 f84a 	bl	d600c <__aeabi_atexit>
    return instance;
}
   d5f78:	4801      	ldr	r0, [pc, #4]	; (d5f80 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f7a:	bd38      	pop	{r3, r4, r5, pc}
   d5f7c:	2003e72c 	.word	0x2003e72c
   d5f80:	2003e720 	.word	0x2003e720
   d5f84:	2003e380 	.word	0x2003e380
   d5f88:	000d50cd 	.word	0x000d50cd

000d5f8c <_Z17acquireWireBufferv>:
   d5f8c:	b570      	push	{r4, r5, r6, lr}
   d5f8e:	4604      	mov	r4, r0
   d5f90:	2514      	movs	r5, #20
   d5f92:	462a      	mov	r2, r5
   d5f94:	4e09      	ldr	r6, [pc, #36]	; (d5fbc <_Z17acquireWireBufferv+0x30>)
   d5f96:	2100      	movs	r1, #0
   d5f98:	f002 fac5 	bl	d8526 <memset>
   d5f9c:	8025      	strh	r5, [r4, #0]
   d5f9e:	2520      	movs	r5, #32
   d5fa0:	4631      	mov	r1, r6
   d5fa2:	60a5      	str	r5, [r4, #8]
   d5fa4:	6125      	str	r5, [r4, #16]
   d5fa6:	4628      	mov	r0, r5
   d5fa8:	f000 f840 	bl	d602c <_ZnajRKSt9nothrow_t>
   d5fac:	4631      	mov	r1, r6
   d5fae:	6060      	str	r0, [r4, #4]
   d5fb0:	4628      	mov	r0, r5
   d5fb2:	f000 f83b 	bl	d602c <_ZnajRKSt9nothrow_t>
   d5fb6:	60e0      	str	r0, [r4, #12]
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bd70      	pop	{r4, r5, r6, pc}
   d5fbc:	000d8a24 	.word	0x000d8a24

000d5fc0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5fc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5fc2:	4d0e      	ldr	r5, [pc, #56]	; (d5ffc <_Z19__fetch_global_Wirev+0x3c>)
   d5fc4:	6829      	ldr	r1, [r5, #0]
   d5fc6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5fca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5fcc:	d113      	bne.n	d5ff6 <_Z19__fetch_global_Wirev+0x36>
   d5fce:	4628      	mov	r0, r5
   d5fd0:	f7fe f867 	bl	d40a2 <__cxa_guard_acquire>
   d5fd4:	b178      	cbz	r0, d5ff6 <_Z19__fetch_global_Wirev+0x36>
   d5fd6:	a801      	add	r0, sp, #4
   d5fd8:	f7ff ffd8 	bl	d5f8c <_Z17acquireWireBufferv>
   d5fdc:	aa01      	add	r2, sp, #4
   d5fde:	4621      	mov	r1, r4
   d5fe0:	4807      	ldr	r0, [pc, #28]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5fe2:	f7ff fd5b 	bl	d5a9c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5fe6:	4628      	mov	r0, r5
   d5fe8:	f7fe f860 	bl	d40ac <__cxa_guard_release>
   d5fec:	4a05      	ldr	r2, [pc, #20]	; (d6004 <_Z19__fetch_global_Wirev+0x44>)
   d5fee:	4906      	ldr	r1, [pc, #24]	; (d6008 <_Z19__fetch_global_Wirev+0x48>)
   d5ff0:	4803      	ldr	r0, [pc, #12]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5ff2:	f000 f80b 	bl	d600c <__aeabi_atexit>
	return wire;
}
   d5ff6:	4802      	ldr	r0, [pc, #8]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5ff8:	b007      	add	sp, #28
   d5ffa:	bd30      	pop	{r4, r5, pc}
   d5ffc:	2003e734 	.word	0x2003e734
   d6000:	2003e738 	.word	0x2003e738
   d6004:	2003e380 	.word	0x2003e380
   d6008:	000d5a45 	.word	0x000d5a45

000d600c <__aeabi_atexit>:
   d600c:	460b      	mov	r3, r1
   d600e:	4601      	mov	r1, r0
   d6010:	4618      	mov	r0, r3
   d6012:	f002 ba6f 	b.w	d84f4 <__cxa_atexit>
	...

000d6018 <_ZSt15get_new_handlerv>:
   d6018:	4b02      	ldr	r3, [pc, #8]	; (d6024 <_ZSt15get_new_handlerv+0xc>)
   d601a:	6818      	ldr	r0, [r3, #0]
   d601c:	f3bf 8f5f 	dmb	sy
   d6020:	4770      	bx	lr
   d6022:	bf00      	nop
   d6024:	2003e74c 	.word	0x2003e74c

000d6028 <_ZdlPvj>:
   d6028:	f7fe b837 	b.w	d409a <_ZdlPv>

000d602c <_ZnajRKSt9nothrow_t>:
   d602c:	f000 b800 	b.w	d6030 <_ZnwjRKSt9nothrow_t>

000d6030 <_ZnwjRKSt9nothrow_t>:
   d6030:	b510      	push	{r4, lr}
   d6032:	2800      	cmp	r0, #0
   d6034:	bf14      	ite	ne
   d6036:	4604      	movne	r4, r0
   d6038:	2401      	moveq	r4, #1
   d603a:	4620      	mov	r0, r4
   d603c:	f7fe ffe8 	bl	d5010 <malloc>
   d6040:	b920      	cbnz	r0, d604c <_ZnwjRKSt9nothrow_t+0x1c>
   d6042:	f7ff ffe9 	bl	d6018 <_ZSt15get_new_handlerv>
   d6046:	b108      	cbz	r0, d604c <_ZnwjRKSt9nothrow_t+0x1c>
   d6048:	4780      	blx	r0
   d604a:	e7f6      	b.n	d603a <_ZnwjRKSt9nothrow_t+0xa>
   d604c:	bd10      	pop	{r4, pc}
	...

000d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6050:	4b18      	ldr	r3, [pc, #96]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6052:	681a      	ldr	r2, [r3, #0]
   d6054:	07d1      	lsls	r1, r2, #31
   d6056:	bf5c      	itt	pl
   d6058:	2201      	movpl	r2, #1
   d605a:	601a      	strpl	r2, [r3, #0]
   d605c:	4b16      	ldr	r3, [pc, #88]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d605e:	681a      	ldr	r2, [r3, #0]
   d6060:	07d2      	lsls	r2, r2, #31
   d6062:	bf5c      	itt	pl
   d6064:	2201      	movpl	r2, #1
   d6066:	601a      	strpl	r2, [r3, #0]
   d6068:	4b14      	ldr	r3, [pc, #80]	; (d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d606a:	681a      	ldr	r2, [r3, #0]
   d606c:	07d0      	lsls	r0, r2, #31
   d606e:	bf5c      	itt	pl
   d6070:	2201      	movpl	r2, #1
   d6072:	601a      	strpl	r2, [r3, #0]
   d6074:	4b12      	ldr	r3, [pc, #72]	; (d60c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6076:	681a      	ldr	r2, [r3, #0]
   d6078:	07d1      	lsls	r1, r2, #31
   d607a:	bf5c      	itt	pl
   d607c:	2201      	movpl	r2, #1
   d607e:	601a      	strpl	r2, [r3, #0]
   d6080:	4b10      	ldr	r3, [pc, #64]	; (d60c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d2      	lsls	r2, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b0e      	ldr	r3, [pc, #56]	; (d60c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d0      	lsls	r0, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b0c      	ldr	r3, [pc, #48]	; (d60cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d1      	lsls	r1, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b0a      	ldr	r3, [pc, #40]	; (d60d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d2      	lsls	r2, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4770      	bx	lr
   d60b2:	bf00      	nop
   d60b4:	2003e76c 	.word	0x2003e76c
   d60b8:	2003e768 	.word	0x2003e768
   d60bc:	2003e764 	.word	0x2003e764
   d60c0:	2003e760 	.word	0x2003e760
   d60c4:	2003e75c 	.word	0x2003e75c
   d60c8:	2003e758 	.word	0x2003e758
   d60cc:	2003e754 	.word	0x2003e754
   d60d0:	2003e750 	.word	0x2003e750

000d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d60d4:	4b24      	ldr	r3, [pc, #144]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d0      	lsls	r0, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b22      	ldr	r3, [pc, #136]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d1      	lsls	r1, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b20      	ldr	r3, [pc, #128]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d2      	lsls	r2, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b1e      	ldr	r3, [pc, #120]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d0      	lsls	r0, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b1c      	ldr	r3, [pc, #112]	; (d6178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d1      	lsls	r1, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b1a      	ldr	r3, [pc, #104]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d2      	lsls	r2, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b18      	ldr	r3, [pc, #96]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d0      	lsls	r0, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b16      	ldr	r3, [pc, #88]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d1      	lsls	r1, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b14      	ldr	r3, [pc, #80]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d2      	lsls	r2, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b12      	ldr	r3, [pc, #72]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d0      	lsls	r0, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4b10      	ldr	r3, [pc, #64]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d614e:	681a      	ldr	r2, [r3, #0]
   d6150:	07d1      	lsls	r1, r2, #31
   d6152:	bf5c      	itt	pl
   d6154:	2201      	movpl	r2, #1
   d6156:	601a      	strpl	r2, [r3, #0]
   d6158:	4b0e      	ldr	r3, [pc, #56]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d2      	lsls	r2, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4770      	bx	lr
   d6166:	bf00      	nop
   d6168:	2003e79c 	.word	0x2003e79c
   d616c:	2003e798 	.word	0x2003e798
   d6170:	2003e794 	.word	0x2003e794
   d6174:	2003e790 	.word	0x2003e790
   d6178:	2003e78c 	.word	0x2003e78c
   d617c:	2003e788 	.word	0x2003e788
   d6180:	2003e784 	.word	0x2003e784
   d6184:	2003e780 	.word	0x2003e780
   d6188:	2003e77c 	.word	0x2003e77c
   d618c:	2003e778 	.word	0x2003e778
   d6190:	2003e774 	.word	0x2003e774
   d6194:	2003e770 	.word	0x2003e770

000d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6198:	4b24      	ldr	r3, [pc, #144]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d0      	lsls	r0, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b22      	ldr	r3, [pc, #136]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d1      	lsls	r1, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b20      	ldr	r3, [pc, #128]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d2      	lsls	r2, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b1e      	ldr	r3, [pc, #120]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d0      	lsls	r0, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b1c      	ldr	r3, [pc, #112]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d1      	lsls	r1, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b1a      	ldr	r3, [pc, #104]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d2      	lsls	r2, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b18      	ldr	r3, [pc, #96]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d0      	lsls	r0, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b16      	ldr	r3, [pc, #88]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d1      	lsls	r1, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b14      	ldr	r3, [pc, #80]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d2      	lsls	r2, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b12      	ldr	r3, [pc, #72]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d0      	lsls	r0, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b10      	ldr	r3, [pc, #64]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d1      	lsls	r1, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b0e      	ldr	r3, [pc, #56]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d2      	lsls	r2, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4770      	bx	lr
   d622a:	bf00      	nop
   d622c:	2003e7cc 	.word	0x2003e7cc
   d6230:	2003e7c8 	.word	0x2003e7c8
   d6234:	2003e7c4 	.word	0x2003e7c4
   d6238:	2003e7c0 	.word	0x2003e7c0
   d623c:	2003e7bc 	.word	0x2003e7bc
   d6240:	2003e7b8 	.word	0x2003e7b8
   d6244:	2003e7b4 	.word	0x2003e7b4
   d6248:	2003e7b0 	.word	0x2003e7b0
   d624c:	2003e7ac 	.word	0x2003e7ac
   d6250:	2003e7a8 	.word	0x2003e7a8
   d6254:	2003e7a4 	.word	0x2003e7a4
   d6258:	2003e7a0 	.word	0x2003e7a0

000d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d625c:	4b18      	ldr	r3, [pc, #96]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d1      	lsls	r1, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b16      	ldr	r3, [pc, #88]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d2      	lsls	r2, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b14      	ldr	r3, [pc, #80]	; (d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b12      	ldr	r3, [pc, #72]	; (d62cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b10      	ldr	r3, [pc, #64]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b0e      	ldr	r3, [pc, #56]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b0c      	ldr	r3, [pc, #48]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b0a      	ldr	r3, [pc, #40]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4770      	bx	lr
   d62be:	bf00      	nop
   d62c0:	2003e7ec 	.word	0x2003e7ec
   d62c4:	2003e7e8 	.word	0x2003e7e8
   d62c8:	2003e7e4 	.word	0x2003e7e4
   d62cc:	2003e7e0 	.word	0x2003e7e0
   d62d0:	2003e7dc 	.word	0x2003e7dc
   d62d4:	2003e7d8 	.word	0x2003e7d8
   d62d8:	2003e7d4 	.word	0x2003e7d4
   d62dc:	2003e7d0 	.word	0x2003e7d0

000d62e0 <pow>:
   d62e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62e4:	ed2d 8b02 	vpush	{d8}
   d62e8:	f8df a324 	ldr.w	sl, [pc, #804]	; d6610 <pow+0x330>
   d62ec:	b08b      	sub	sp, #44	; 0x2c
   d62ee:	ec57 6b10 	vmov	r6, r7, d0
   d62f2:	ec55 4b11 	vmov	r4, r5, d1
   d62f6:	f000 f98f 	bl	d6618 <__ieee754_pow>
   d62fa:	f99a 8000 	ldrsb.w	r8, [sl]
   d62fe:	eeb0 8a40 	vmov.f32	s16, s0
   d6302:	eef0 8a60 	vmov.f32	s17, s1
   d6306:	f1b8 3fff 	cmp.w	r8, #4294967295
   d630a:	d048      	beq.n	d639e <pow+0xbe>
   d630c:	4622      	mov	r2, r4
   d630e:	462b      	mov	r3, r5
   d6310:	4620      	mov	r0, r4
   d6312:	4629      	mov	r1, r5
   d6314:	f001 fd6e 	bl	d7df4 <__aeabi_dcmpun>
   d6318:	4683      	mov	fp, r0
   d631a:	2800      	cmp	r0, #0
   d631c:	d13f      	bne.n	d639e <pow+0xbe>
   d631e:	4632      	mov	r2, r6
   d6320:	463b      	mov	r3, r7
   d6322:	4630      	mov	r0, r6
   d6324:	4639      	mov	r1, r7
   d6326:	f001 fd65 	bl	d7df4 <__aeabi_dcmpun>
   d632a:	4681      	mov	r9, r0
   d632c:	2800      	cmp	r0, #0
   d632e:	f040 8090 	bne.w	d6452 <pow+0x172>
   d6332:	4630      	mov	r0, r6
   d6334:	4639      	mov	r1, r7
   d6336:	2200      	movs	r2, #0
   d6338:	2300      	movs	r3, #0
   d633a:	f001 fd29 	bl	d7d90 <__aeabi_dcmpeq>
   d633e:	2800      	cmp	r0, #0
   d6340:	d036      	beq.n	d63b0 <pow+0xd0>
   d6342:	2200      	movs	r2, #0
   d6344:	2300      	movs	r3, #0
   d6346:	4620      	mov	r0, r4
   d6348:	4629      	mov	r1, r5
   d634a:	f001 fd21 	bl	d7d90 <__aeabi_dcmpeq>
   d634e:	4683      	mov	fp, r0
   d6350:	b1b8      	cbz	r0, d6382 <pow+0xa2>
   d6352:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d65e8 <pow+0x308>
   d6356:	2201      	movs	r2, #1
   d6358:	4ba9      	ldr	r3, [pc, #676]	; (d6600 <pow+0x320>)
   d635a:	f8cd 9020 	str.w	r9, [sp, #32]
   d635e:	9200      	str	r2, [sp, #0]
   d6360:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6364:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6368:	ed8d 7b06 	vstr	d7, [sp, #24]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	f1b8 0f00 	cmp.w	r8, #0
   d6372:	d05b      	beq.n	d642c <pow+0x14c>
   d6374:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d65f0 <pow+0x310>
   d6378:	b00b      	add	sp, #44	; 0x2c
   d637a:	ecbd 8b02 	vpop	{d8}
   d637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6382:	ec45 4b10 	vmov	d0, r4, r5
   d6386:	f000 ffa7 	bl	d72d8 <finite>
   d638a:	b140      	cbz	r0, d639e <pow+0xbe>
   d638c:	2200      	movs	r2, #0
   d638e:	2300      	movs	r3, #0
   d6390:	4620      	mov	r0, r4
   d6392:	4629      	mov	r1, r5
   d6394:	f001 fd06 	bl	d7da4 <__aeabi_dcmplt>
   d6398:	2800      	cmp	r0, #0
   d639a:	f040 80c5 	bne.w	d6528 <pow+0x248>
   d639e:	eeb0 0a48 	vmov.f32	s0, s16
   d63a2:	eef0 0a68 	vmov.f32	s1, s17
   d63a6:	b00b      	add	sp, #44	; 0x2c
   d63a8:	ecbd 8b02 	vpop	{d8}
   d63ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63b0:	eeb0 0a48 	vmov.f32	s0, s16
   d63b4:	eef0 0a68 	vmov.f32	s1, s17
   d63b8:	f000 ff8e 	bl	d72d8 <finite>
   d63bc:	4680      	mov	r8, r0
   d63be:	2800      	cmp	r0, #0
   d63c0:	d061      	beq.n	d6486 <pow+0x1a6>
   d63c2:	f04f 0800 	mov.w	r8, #0
   d63c6:	f04f 0900 	mov.w	r9, #0
   d63ca:	ec51 0b18 	vmov	r0, r1, d8
   d63ce:	4642      	mov	r2, r8
   d63d0:	464b      	mov	r3, r9
   d63d2:	f001 fcdd 	bl	d7d90 <__aeabi_dcmpeq>
   d63d6:	2800      	cmp	r0, #0
   d63d8:	d0e1      	beq.n	d639e <pow+0xbe>
   d63da:	ec47 6b10 	vmov	d0, r6, r7
   d63de:	f000 ff7b 	bl	d72d8 <finite>
   d63e2:	2800      	cmp	r0, #0
   d63e4:	d0db      	beq.n	d639e <pow+0xbe>
   d63e6:	ec45 4b10 	vmov	d0, r4, r5
   d63ea:	f000 ff75 	bl	d72d8 <finite>
   d63ee:	2800      	cmp	r0, #0
   d63f0:	d0d5      	beq.n	d639e <pow+0xbe>
   d63f2:	f99a 3000 	ldrsb.w	r3, [sl]
   d63f6:	4a82      	ldr	r2, [pc, #520]	; (d6600 <pow+0x320>)
   d63f8:	9201      	str	r2, [sp, #4]
   d63fa:	2104      	movs	r1, #4
   d63fc:	2200      	movs	r2, #0
   d63fe:	2b02      	cmp	r3, #2
   d6400:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6404:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6408:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d640c:	9100      	str	r1, [sp, #0]
   d640e:	9208      	str	r2, [sp, #32]
   d6410:	d003      	beq.n	d641a <pow+0x13a>
   d6412:	4668      	mov	r0, sp
   d6414:	f000 ff68 	bl	d72e8 <matherr>
   d6418:	b970      	cbnz	r0, d6438 <pow+0x158>
   d641a:	f7fe fe11 	bl	d5040 <__errno>
   d641e:	2322      	movs	r3, #34	; 0x22
   d6420:	6003      	str	r3, [r0, #0]
   d6422:	e009      	b.n	d6438 <pow+0x158>
   d6424:	ed9f 7b70 	vldr	d7, [pc, #448]	; d65e8 <pow+0x308>
   d6428:	ed8d 7b06 	vstr	d7, [sp, #24]
   d642c:	4668      	mov	r0, sp
   d642e:	f000 ff5b 	bl	d72e8 <matherr>
   d6432:	2800      	cmp	r0, #0
   d6434:	f000 808e 	beq.w	d6554 <pow+0x274>
   d6438:	9b08      	ldr	r3, [sp, #32]
   d643a:	b11b      	cbz	r3, d6444 <pow+0x164>
   d643c:	f7fe fe00 	bl	d5040 <__errno>
   d6440:	9b08      	ldr	r3, [sp, #32]
   d6442:	6003      	str	r3, [r0, #0]
   d6444:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6448:	b00b      	add	sp, #44	; 0x2c
   d644a:	ecbd 8b02 	vpop	{d8}
   d644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6452:	2200      	movs	r2, #0
   d6454:	2300      	movs	r3, #0
   d6456:	4620      	mov	r0, r4
   d6458:	4629      	mov	r1, r5
   d645a:	f001 fc99 	bl	d7d90 <__aeabi_dcmpeq>
   d645e:	2800      	cmp	r0, #0
   d6460:	d09d      	beq.n	d639e <pow+0xbe>
   d6462:	ed9f 0b63 	vldr	d0, [pc, #396]	; d65f0 <pow+0x310>
   d6466:	4b66      	ldr	r3, [pc, #408]	; (d6600 <pow+0x320>)
   d6468:	f8cd b020 	str.w	fp, [sp, #32]
   d646c:	2201      	movs	r2, #1
   d646e:	f1b8 0f02 	cmp.w	r8, #2
   d6472:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6476:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d647a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d647e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6482:	d1d3      	bne.n	d642c <pow+0x14c>
   d6484:	e78f      	b.n	d63a6 <pow+0xc6>
   d6486:	ec47 6b10 	vmov	d0, r6, r7
   d648a:	f000 ff25 	bl	d72d8 <finite>
   d648e:	2800      	cmp	r0, #0
   d6490:	d097      	beq.n	d63c2 <pow+0xe2>
   d6492:	ec45 4b10 	vmov	d0, r4, r5
   d6496:	f000 ff1f 	bl	d72d8 <finite>
   d649a:	2800      	cmp	r0, #0
   d649c:	d091      	beq.n	d63c2 <pow+0xe2>
   d649e:	ec53 2b18 	vmov	r2, r3, d8
   d64a2:	ee18 0a10 	vmov	r0, s16
   d64a6:	4619      	mov	r1, r3
   d64a8:	f001 fca4 	bl	d7df4 <__aeabi_dcmpun>
   d64ac:	2800      	cmp	r0, #0
   d64ae:	d17c      	bne.n	d65aa <pow+0x2ca>
   d64b0:	2303      	movs	r3, #3
   d64b2:	f99a 8000 	ldrsb.w	r8, [sl]
   d64b6:	9300      	str	r3, [sp, #0]
   d64b8:	4b51      	ldr	r3, [pc, #324]	; (d6600 <pow+0x320>)
   d64ba:	9008      	str	r0, [sp, #32]
   d64bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d64c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	f1b8 0f00 	cmp.w	r8, #0
   d64ca:	d148      	bne.n	d655e <pow+0x27e>
   d64cc:	f8df 9144 	ldr.w	r9, [pc, #324]	; d6614 <pow+0x334>
   d64d0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d64d4:	2200      	movs	r2, #0
   d64d6:	2300      	movs	r3, #0
   d64d8:	4630      	mov	r0, r6
   d64da:	4639      	mov	r1, r7
   d64dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d64e0:	f001 fc60 	bl	d7da4 <__aeabi_dcmplt>
   d64e4:	2800      	cmp	r0, #0
   d64e6:	d094      	beq.n	d6412 <pow+0x132>
   d64e8:	2200      	movs	r2, #0
   d64ea:	4b46      	ldr	r3, [pc, #280]	; (d6604 <pow+0x324>)
   d64ec:	4620      	mov	r0, r4
   d64ee:	4629      	mov	r1, r5
   d64f0:	f001 f9e6 	bl	d78c0 <__aeabi_dmul>
   d64f4:	4604      	mov	r4, r0
   d64f6:	460d      	mov	r5, r1
   d64f8:	ec45 4b10 	vmov	d0, r4, r5
   d64fc:	f000 ff00 	bl	d7300 <rint>
   d6500:	4620      	mov	r0, r4
   d6502:	ec53 2b10 	vmov	r2, r3, d0
   d6506:	4629      	mov	r1, r5
   d6508:	f001 fc42 	bl	d7d90 <__aeabi_dcmpeq>
   d650c:	2800      	cmp	r0, #0
   d650e:	d149      	bne.n	d65a4 <pow+0x2c4>
   d6510:	4b3d      	ldr	r3, [pc, #244]	; (d6608 <pow+0x328>)
   d6512:	f99a 8000 	ldrsb.w	r8, [sl]
   d6516:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d651a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d651e:	f1b8 0f02 	cmp.w	r8, #2
   d6522:	f47f af76 	bne.w	d6412 <pow+0x132>
   d6526:	e778      	b.n	d641a <pow+0x13a>
   d6528:	4a35      	ldr	r2, [pc, #212]	; (d6600 <pow+0x320>)
   d652a:	f99a 3000 	ldrsb.w	r3, [sl]
   d652e:	f8cd b020 	str.w	fp, [sp, #32]
   d6532:	2101      	movs	r1, #1
   d6534:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6538:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d653c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d6540:	2b00      	cmp	r3, #0
   d6542:	f43f af6f 	beq.w	d6424 <pow+0x144>
   d6546:	4931      	ldr	r1, [pc, #196]	; (d660c <pow+0x32c>)
   d6548:	2000      	movs	r0, #0
   d654a:	2b02      	cmp	r3, #2
   d654c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6550:	f47f af6c 	bne.w	d642c <pow+0x14c>
   d6554:	f7fe fd74 	bl	d5040 <__errno>
   d6558:	2321      	movs	r3, #33	; 0x21
   d655a:	6003      	str	r3, [r0, #0]
   d655c:	e76c      	b.n	d6438 <pow+0x158>
   d655e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d65f8 <pow+0x318>
   d6562:	2200      	movs	r2, #0
   d6564:	2300      	movs	r3, #0
   d6566:	4630      	mov	r0, r6
   d6568:	4639      	mov	r1, r7
   d656a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d656e:	f001 fc19 	bl	d7da4 <__aeabi_dcmplt>
   d6572:	2800      	cmp	r0, #0
   d6574:	d0d3      	beq.n	d651e <pow+0x23e>
   d6576:	2200      	movs	r2, #0
   d6578:	4b22      	ldr	r3, [pc, #136]	; (d6604 <pow+0x324>)
   d657a:	4620      	mov	r0, r4
   d657c:	4629      	mov	r1, r5
   d657e:	f001 f99f 	bl	d78c0 <__aeabi_dmul>
   d6582:	4604      	mov	r4, r0
   d6584:	460d      	mov	r5, r1
   d6586:	ec45 4b10 	vmov	d0, r4, r5
   d658a:	f000 feb9 	bl	d7300 <rint>
   d658e:	4620      	mov	r0, r4
   d6590:	ec53 2b10 	vmov	r2, r3, d0
   d6594:	4629      	mov	r1, r5
   d6596:	f001 fbfb 	bl	d7d90 <__aeabi_dcmpeq>
   d659a:	b918      	cbnz	r0, d65a4 <pow+0x2c4>
   d659c:	4b1b      	ldr	r3, [pc, #108]	; (d660c <pow+0x32c>)
   d659e:	2200      	movs	r2, #0
   d65a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d65a4:	f99a 8000 	ldrsb.w	r8, [sl]
   d65a8:	e7b9      	b.n	d651e <pow+0x23e>
   d65aa:	4b15      	ldr	r3, [pc, #84]	; (d6600 <pow+0x320>)
   d65ac:	f99a 9000 	ldrsb.w	r9, [sl]
   d65b0:	f8cd 8020 	str.w	r8, [sp, #32]
   d65b4:	2201      	movs	r2, #1
   d65b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d65ba:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d65be:	e88d 000c 	stmia.w	sp, {r2, r3}
   d65c2:	f1b9 0f00 	cmp.w	r9, #0
   d65c6:	f43f af2d 	beq.w	d6424 <pow+0x144>
   d65ca:	2200      	movs	r2, #0
   d65cc:	2300      	movs	r3, #0
   d65ce:	4610      	mov	r0, r2
   d65d0:	4619      	mov	r1, r3
   d65d2:	f001 fa9f 	bl	d7b14 <__aeabi_ddiv>
   d65d6:	f1b9 0f02 	cmp.w	r9, #2
   d65da:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d65de:	d0b9      	beq.n	d6554 <pow+0x274>
   d65e0:	e724      	b.n	d642c <pow+0x14c>
   d65e2:	bf00      	nop
   d65e4:	f3af 8000 	nop.w
	...
   d65f4:	3ff00000 	.word	0x3ff00000
   d65f8:	00000000 	.word	0x00000000
   d65fc:	7ff00000 	.word	0x7ff00000
   d6600:	000d8a28 	.word	0x000d8a28
   d6604:	3fe00000 	.word	0x3fe00000
   d6608:	c7efffff 	.word	0xc7efffff
   d660c:	fff00000 	.word	0xfff00000
   d6610:	2003e318 	.word	0x2003e318
   d6614:	47efffff 	.word	0x47efffff

000d6618 <__ieee754_pow>:
   d6618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d661c:	ec51 0b11 	vmov	r0, r1, d1
   d6620:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d6624:	ea58 0400 	orrs.w	r4, r8, r0
   d6628:	b093      	sub	sp, #76	; 0x4c
   d662a:	d03c      	beq.n	d66a6 <__ieee754_pow+0x8e>
   d662c:	ec53 2b10 	vmov	r2, r3, d0
   d6630:	4e6d      	ldr	r6, [pc, #436]	; (d67e8 <__ieee754_pow+0x1d0>)
   d6632:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d6636:	42b4      	cmp	r4, r6
   d6638:	ee10 aa10 	vmov	sl, s0
   d663c:	461d      	mov	r5, r3
   d663e:	dc2b      	bgt.n	d6698 <__ieee754_pow+0x80>
   d6640:	4689      	mov	r9, r1
   d6642:	ee11 ea10 	vmov	lr, s2
   d6646:	d026      	beq.n	d6696 <__ieee754_pow+0x7e>
   d6648:	45b0      	cmp	r8, r6
   d664a:	dc25      	bgt.n	d6698 <__ieee754_pow+0x80>
   d664c:	4e66      	ldr	r6, [pc, #408]	; (d67e8 <__ieee754_pow+0x1d0>)
   d664e:	45b0      	cmp	r8, r6
   d6650:	d077      	beq.n	d6742 <__ieee754_pow+0x12a>
   d6652:	2d00      	cmp	r5, #0
   d6654:	4616      	mov	r6, r2
   d6656:	461f      	mov	r7, r3
   d6658:	e9cd 0100 	strd	r0, r1, [sp]
   d665c:	db75      	blt.n	d674a <__ieee754_pow+0x132>
   d665e:	f04f 0b00 	mov.w	fp, #0
   d6662:	f1be 0f00 	cmp.w	lr, #0
   d6666:	d12d      	bne.n	d66c4 <__ieee754_pow+0xac>
   d6668:	4b5f      	ldr	r3, [pc, #380]	; (d67e8 <__ieee754_pow+0x1d0>)
   d666a:	4598      	cmp	r8, r3
   d666c:	f000 8089 	beq.w	d6782 <__ieee754_pow+0x16a>
   d6670:	4b5e      	ldr	r3, [pc, #376]	; (d67ec <__ieee754_pow+0x1d4>)
   d6672:	4598      	cmp	r8, r3
   d6674:	d05e      	beq.n	d6734 <__ieee754_pow+0x11c>
   d6676:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d667a:	f000 83de 	beq.w	d6e3a <__ieee754_pow+0x822>
   d667e:	4b5c      	ldr	r3, [pc, #368]	; (d67f0 <__ieee754_pow+0x1d8>)
   d6680:	4599      	cmp	r9, r3
   d6682:	d11f      	bne.n	d66c4 <__ieee754_pow+0xac>
   d6684:	2d00      	cmp	r5, #0
   d6686:	db1d      	blt.n	d66c4 <__ieee754_pow+0xac>
   d6688:	ec47 6b10 	vmov	d0, r6, r7
   d668c:	b013      	add	sp, #76	; 0x4c
   d668e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6692:	f000 bd49 	b.w	d7128 <__ieee754_sqrt>
   d6696:	b15a      	cbz	r2, d66b0 <__ieee754_pow+0x98>
   d6698:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d669c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d66a0:	ea54 030a 	orrs.w	r3, r4, sl
   d66a4:	d106      	bne.n	d66b4 <__ieee754_pow+0x9c>
   d66a6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d67d0 <__ieee754_pow+0x1b8>
   d66aa:	b013      	add	sp, #76	; 0x4c
   d66ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66b0:	45a0      	cmp	r8, r4
   d66b2:	ddcb      	ble.n	d664c <__ieee754_pow+0x34>
   d66b4:	484f      	ldr	r0, [pc, #316]	; (d67f4 <__ieee754_pow+0x1dc>)
   d66b6:	b013      	add	sp, #76	; 0x4c
   d66b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66bc:	f000 be18 	b.w	d72f0 <nan>
   d66c0:	f04f 0b00 	mov.w	fp, #0
   d66c4:	ec47 6b10 	vmov	d0, r6, r7
   d66c8:	f000 fdfe 	bl	d72c8 <fabs>
   d66cc:	ec51 0b10 	vmov	r0, r1, d0
   d66d0:	f1ba 0f00 	cmp.w	sl, #0
   d66d4:	d01e      	beq.n	d6714 <__ieee754_pow+0xfc>
   d66d6:	0fed      	lsrs	r5, r5, #31
   d66d8:	f105 3aff 	add.w	sl, r5, #4294967295
   d66dc:	ea5b 030a 	orrs.w	r3, fp, sl
   d66e0:	d063      	beq.n	d67aa <__ieee754_pow+0x192>
   d66e2:	4b45      	ldr	r3, [pc, #276]	; (d67f8 <__ieee754_pow+0x1e0>)
   d66e4:	4598      	cmp	r8, r3
   d66e6:	f340 808d 	ble.w	d6804 <__ieee754_pow+0x1ec>
   d66ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d66ee:	4598      	cmp	r8, r3
   d66f0:	f340 8438 	ble.w	d6f64 <__ieee754_pow+0x94c>
   d66f4:	4b41      	ldr	r3, [pc, #260]	; (d67fc <__ieee754_pow+0x1e4>)
   d66f6:	429c      	cmp	r4, r3
   d66f8:	dd62      	ble.n	d67c0 <__ieee754_pow+0x1a8>
   d66fa:	f1b9 0f00 	cmp.w	r9, #0
   d66fe:	dd62      	ble.n	d67c6 <__ieee754_pow+0x1ae>
   d6700:	a335      	add	r3, pc, #212	; (adr r3, d67d8 <__ieee754_pow+0x1c0>)
   d6702:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6706:	4610      	mov	r0, r2
   d6708:	4619      	mov	r1, r3
   d670a:	f001 f8d9 	bl	d78c0 <__aeabi_dmul>
   d670e:	ec41 0b10 	vmov	d0, r0, r1
   d6712:	e7ca      	b.n	d66aa <__ieee754_pow+0x92>
   d6714:	b124      	cbz	r4, d6720 <__ieee754_pow+0x108>
   d6716:	4b35      	ldr	r3, [pc, #212]	; (d67ec <__ieee754_pow+0x1d4>)
   d6718:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d671c:	429a      	cmp	r2, r3
   d671e:	d1da      	bne.n	d66d6 <__ieee754_pow+0xbe>
   d6720:	f1b9 0f00 	cmp.w	r9, #0
   d6724:	f2c0 83cb 	blt.w	d6ebe <__ieee754_pow+0x8a6>
   d6728:	2d00      	cmp	r5, #0
   d672a:	f2c0 8374 	blt.w	d6e16 <__ieee754_pow+0x7fe>
   d672e:	ec41 0b10 	vmov	d0, r0, r1
   d6732:	e7ba      	b.n	d66aa <__ieee754_pow+0x92>
   d6734:	f1b9 0f00 	cmp.w	r9, #0
   d6738:	f2c0 847a 	blt.w	d7030 <__ieee754_pow+0xa18>
   d673c:	ec47 6b10 	vmov	d0, r6, r7
   d6740:	e7b3      	b.n	d66aa <__ieee754_pow+0x92>
   d6742:	f1be 0f00 	cmp.w	lr, #0
   d6746:	d084      	beq.n	d6652 <__ieee754_pow+0x3a>
   d6748:	e7a6      	b.n	d6698 <__ieee754_pow+0x80>
   d674a:	4b2d      	ldr	r3, [pc, #180]	; (d6800 <__ieee754_pow+0x1e8>)
   d674c:	4598      	cmp	r8, r3
   d674e:	dc29      	bgt.n	d67a4 <__ieee754_pow+0x18c>
   d6750:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d6754:	4598      	cmp	r8, r3
   d6756:	dd82      	ble.n	d665e <__ieee754_pow+0x46>
   d6758:	ea4f 5328 	mov.w	r3, r8, asr #20
   d675c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d6760:	2b14      	cmp	r3, #20
   d6762:	f340 847f 	ble.w	d7064 <__ieee754_pow+0xa4c>
   d6766:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d676a:	fa2e f203 	lsr.w	r2, lr, r3
   d676e:	fa02 f303 	lsl.w	r3, r2, r3
   d6772:	459e      	cmp	lr, r3
   d6774:	f47f af73 	bne.w	d665e <__ieee754_pow+0x46>
   d6778:	f002 0201 	and.w	r2, r2, #1
   d677c:	f1c2 0b02 	rsb	fp, r2, #2
   d6780:	e76f      	b.n	d6662 <__ieee754_pow+0x4a>
   d6782:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d6786:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d678a:	ea53 030a 	orrs.w	r3, r3, sl
   d678e:	d08a      	beq.n	d66a6 <__ieee754_pow+0x8e>
   d6790:	4b1a      	ldr	r3, [pc, #104]	; (d67fc <__ieee754_pow+0x1e4>)
   d6792:	429c      	cmp	r4, r3
   d6794:	f340 8385 	ble.w	d6ea2 <__ieee754_pow+0x88a>
   d6798:	f1b9 0f00 	cmp.w	r9, #0
   d679c:	db13      	blt.n	d67c6 <__ieee754_pow+0x1ae>
   d679e:	ed9d 0b00 	vldr	d0, [sp]
   d67a2:	e782      	b.n	d66aa <__ieee754_pow+0x92>
   d67a4:	f04f 0b02 	mov.w	fp, #2
   d67a8:	e75b      	b.n	d6662 <__ieee754_pow+0x4a>
   d67aa:	4632      	mov	r2, r6
   d67ac:	463b      	mov	r3, r7
   d67ae:	4610      	mov	r0, r2
   d67b0:	4619      	mov	r1, r3
   d67b2:	f000 fed1 	bl	d7558 <__aeabi_dsub>
   d67b6:	4602      	mov	r2, r0
   d67b8:	460b      	mov	r3, r1
   d67ba:	f001 f9ab 	bl	d7b14 <__aeabi_ddiv>
   d67be:	e7b6      	b.n	d672e <__ieee754_pow+0x116>
   d67c0:	f1b9 0f00 	cmp.w	r9, #0
   d67c4:	db9c      	blt.n	d6700 <__ieee754_pow+0xe8>
   d67c6:	ed9f 0b06 	vldr	d0, [pc, #24]	; d67e0 <__ieee754_pow+0x1c8>
   d67ca:	e76e      	b.n	d66aa <__ieee754_pow+0x92>
   d67cc:	f3af 8000 	nop.w
   d67d0:	00000000 	.word	0x00000000
   d67d4:	3ff00000 	.word	0x3ff00000
   d67d8:	8800759c 	.word	0x8800759c
   d67dc:	7e37e43c 	.word	0x7e37e43c
	...
   d67e8:	7ff00000 	.word	0x7ff00000
   d67ec:	3ff00000 	.word	0x3ff00000
   d67f0:	3fe00000 	.word	0x3fe00000
   d67f4:	000d8a2c 	.word	0x000d8a2c
   d67f8:	41e00000 	.word	0x41e00000
   d67fc:	3fefffff 	.word	0x3fefffff
   d6800:	433fffff 	.word	0x433fffff
   d6804:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d6808:	f04f 0200 	mov.w	r2, #0
   d680c:	da05      	bge.n	d681a <__ieee754_pow+0x202>
   d680e:	4bd6      	ldr	r3, [pc, #856]	; (d6b68 <__ieee754_pow+0x550>)
   d6810:	f001 f856 	bl	d78c0 <__aeabi_dmul>
   d6814:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d6818:	460c      	mov	r4, r1
   d681a:	1523      	asrs	r3, r4, #20
   d681c:	4ed3      	ldr	r6, [pc, #844]	; (d6b6c <__ieee754_pow+0x554>)
   d681e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d6822:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d6826:	4413      	add	r3, r2
   d6828:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d682c:	42b4      	cmp	r4, r6
   d682e:	461a      	mov	r2, r3
   d6830:	930d      	str	r3, [sp, #52]	; 0x34
   d6832:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d6836:	f340 8349 	ble.w	d6ecc <__ieee754_pow+0x8b4>
   d683a:	4bcd      	ldr	r3, [pc, #820]	; (d6b70 <__ieee754_pow+0x558>)
   d683c:	429c      	cmp	r4, r3
   d683e:	f340 842d 	ble.w	d709c <__ieee754_pow+0xa84>
   d6842:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d6b10 <__ieee754_pow+0x4f8>
   d6846:	ed8d 7b08 	vstr	d7, [sp, #32]
   d684a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d684e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d6b18 <__ieee754_pow+0x500>
   d6852:	4613      	mov	r3, r2
   d6854:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6858:	3301      	adds	r3, #1
   d685a:	930d      	str	r3, [sp, #52]	; 0x34
   d685c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d6860:	f04f 0800 	mov.w	r8, #0
   d6864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6868:	4629      	mov	r1, r5
   d686a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d686e:	f000 fe73 	bl	d7558 <__aeabi_dsub>
   d6872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6876:	4606      	mov	r6, r0
   d6878:	460f      	mov	r7, r1
   d687a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d687e:	f000 fe6d 	bl	d755c <__adddf3>
   d6882:	4602      	mov	r2, r0
   d6884:	460b      	mov	r3, r1
   d6886:	2000      	movs	r0, #0
   d6888:	49ba      	ldr	r1, [pc, #744]	; (d6b74 <__ieee754_pow+0x55c>)
   d688a:	f001 f943 	bl	d7b14 <__aeabi_ddiv>
   d688e:	4603      	mov	r3, r0
   d6890:	460c      	mov	r4, r1
   d6892:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d6896:	4602      	mov	r2, r0
   d6898:	460b      	mov	r3, r1
   d689a:	4630      	mov	r0, r6
   d689c:	4639      	mov	r1, r7
   d689e:	f001 f80f 	bl	d78c0 <__aeabi_dmul>
   d68a2:	106b      	asrs	r3, r5, #1
   d68a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d68a8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d68ac:	eb03 0508 	add.w	r5, r3, r8
   d68b0:	460a      	mov	r2, r1
   d68b2:	2300      	movs	r3, #0
   d68b4:	4601      	mov	r1, r0
   d68b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d68ba:	9302      	str	r3, [sp, #8]
   d68bc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d68c0:	2400      	movs	r4, #0
   d68c2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d68c6:	462b      	mov	r3, r5
   d68c8:	4622      	mov	r2, r4
   d68ca:	4640      	mov	r0, r8
   d68cc:	4649      	mov	r1, r9
   d68ce:	f000 fff7 	bl	d78c0 <__aeabi_dmul>
   d68d2:	4602      	mov	r2, r0
   d68d4:	460b      	mov	r3, r1
   d68d6:	4630      	mov	r0, r6
   d68d8:	4639      	mov	r1, r7
   d68da:	f000 fe3d 	bl	d7558 <__aeabi_dsub>
   d68de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d68e2:	4606      	mov	r6, r0
   d68e4:	460f      	mov	r7, r1
   d68e6:	4620      	mov	r0, r4
   d68e8:	4629      	mov	r1, r5
   d68ea:	f000 fe35 	bl	d7558 <__aeabi_dsub>
   d68ee:	4602      	mov	r2, r0
   d68f0:	460b      	mov	r3, r1
   d68f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d68f6:	f000 fe2f 	bl	d7558 <__aeabi_dsub>
   d68fa:	4642      	mov	r2, r8
   d68fc:	464b      	mov	r3, r9
   d68fe:	f000 ffdf 	bl	d78c0 <__aeabi_dmul>
   d6902:	4602      	mov	r2, r0
   d6904:	460b      	mov	r3, r1
   d6906:	4630      	mov	r0, r6
   d6908:	4639      	mov	r1, r7
   d690a:	f000 fe25 	bl	d7558 <__aeabi_dsub>
   d690e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d6912:	f000 ffd5 	bl	d78c0 <__aeabi_dmul>
   d6916:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d691a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d691e:	4622      	mov	r2, r4
   d6920:	462b      	mov	r3, r5
   d6922:	4620      	mov	r0, r4
   d6924:	4629      	mov	r1, r5
   d6926:	f000 ffcb 	bl	d78c0 <__aeabi_dmul>
   d692a:	a37d      	add	r3, pc, #500	; (adr r3, d6b20 <__ieee754_pow+0x508>)
   d692c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6930:	4604      	mov	r4, r0
   d6932:	460d      	mov	r5, r1
   d6934:	f000 ffc4 	bl	d78c0 <__aeabi_dmul>
   d6938:	a37b      	add	r3, pc, #492	; (adr r3, d6b28 <__ieee754_pow+0x510>)
   d693a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d693e:	f000 fe0d 	bl	d755c <__adddf3>
   d6942:	4622      	mov	r2, r4
   d6944:	462b      	mov	r3, r5
   d6946:	f000 ffbb 	bl	d78c0 <__aeabi_dmul>
   d694a:	a379      	add	r3, pc, #484	; (adr r3, d6b30 <__ieee754_pow+0x518>)
   d694c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6950:	f000 fe04 	bl	d755c <__adddf3>
   d6954:	4622      	mov	r2, r4
   d6956:	462b      	mov	r3, r5
   d6958:	f000 ffb2 	bl	d78c0 <__aeabi_dmul>
   d695c:	a376      	add	r3, pc, #472	; (adr r3, d6b38 <__ieee754_pow+0x520>)
   d695e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6962:	f000 fdfb 	bl	d755c <__adddf3>
   d6966:	4622      	mov	r2, r4
   d6968:	462b      	mov	r3, r5
   d696a:	f000 ffa9 	bl	d78c0 <__aeabi_dmul>
   d696e:	a374      	add	r3, pc, #464	; (adr r3, d6b40 <__ieee754_pow+0x528>)
   d6970:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6974:	f000 fdf2 	bl	d755c <__adddf3>
   d6978:	4622      	mov	r2, r4
   d697a:	462b      	mov	r3, r5
   d697c:	f000 ffa0 	bl	d78c0 <__aeabi_dmul>
   d6980:	a371      	add	r3, pc, #452	; (adr r3, d6b48 <__ieee754_pow+0x530>)
   d6982:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6986:	f000 fde9 	bl	d755c <__adddf3>
   d698a:	4622      	mov	r2, r4
   d698c:	4606      	mov	r6, r0
   d698e:	460f      	mov	r7, r1
   d6990:	462b      	mov	r3, r5
   d6992:	4620      	mov	r0, r4
   d6994:	4629      	mov	r1, r5
   d6996:	f000 ff93 	bl	d78c0 <__aeabi_dmul>
   d699a:	4602      	mov	r2, r0
   d699c:	460b      	mov	r3, r1
   d699e:	4630      	mov	r0, r6
   d69a0:	4639      	mov	r1, r7
   d69a2:	f000 ff8d 	bl	d78c0 <__aeabi_dmul>
   d69a6:	4642      	mov	r2, r8
   d69a8:	4604      	mov	r4, r0
   d69aa:	460d      	mov	r5, r1
   d69ac:	464b      	mov	r3, r9
   d69ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d69b2:	f000 fdd3 	bl	d755c <__adddf3>
   d69b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d69ba:	f000 ff81 	bl	d78c0 <__aeabi_dmul>
   d69be:	4622      	mov	r2, r4
   d69c0:	462b      	mov	r3, r5
   d69c2:	f000 fdcb 	bl	d755c <__adddf3>
   d69c6:	4642      	mov	r2, r8
   d69c8:	4606      	mov	r6, r0
   d69ca:	460f      	mov	r7, r1
   d69cc:	464b      	mov	r3, r9
   d69ce:	4640      	mov	r0, r8
   d69d0:	4649      	mov	r1, r9
   d69d2:	f000 ff75 	bl	d78c0 <__aeabi_dmul>
   d69d6:	2200      	movs	r2, #0
   d69d8:	4b67      	ldr	r3, [pc, #412]	; (d6b78 <__ieee754_pow+0x560>)
   d69da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d69de:	f000 fdbd 	bl	d755c <__adddf3>
   d69e2:	4632      	mov	r2, r6
   d69e4:	463b      	mov	r3, r7
   d69e6:	f000 fdb9 	bl	d755c <__adddf3>
   d69ea:	9802      	ldr	r0, [sp, #8]
   d69ec:	460d      	mov	r5, r1
   d69ee:	4604      	mov	r4, r0
   d69f0:	4622      	mov	r2, r4
   d69f2:	462b      	mov	r3, r5
   d69f4:	4640      	mov	r0, r8
   d69f6:	4649      	mov	r1, r9
   d69f8:	f000 ff62 	bl	d78c0 <__aeabi_dmul>
   d69fc:	2200      	movs	r2, #0
   d69fe:	4680      	mov	r8, r0
   d6a00:	4689      	mov	r9, r1
   d6a02:	4b5d      	ldr	r3, [pc, #372]	; (d6b78 <__ieee754_pow+0x560>)
   d6a04:	4620      	mov	r0, r4
   d6a06:	4629      	mov	r1, r5
   d6a08:	f000 fda6 	bl	d7558 <__aeabi_dsub>
   d6a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d6a10:	f000 fda2 	bl	d7558 <__aeabi_dsub>
   d6a14:	4602      	mov	r2, r0
   d6a16:	460b      	mov	r3, r1
   d6a18:	4630      	mov	r0, r6
   d6a1a:	4639      	mov	r1, r7
   d6a1c:	f000 fd9c 	bl	d7558 <__aeabi_dsub>
   d6a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d6a24:	f000 ff4c 	bl	d78c0 <__aeabi_dmul>
   d6a28:	4622      	mov	r2, r4
   d6a2a:	4606      	mov	r6, r0
   d6a2c:	460f      	mov	r7, r1
   d6a2e:	462b      	mov	r3, r5
   d6a30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6a34:	f000 ff44 	bl	d78c0 <__aeabi_dmul>
   d6a38:	4602      	mov	r2, r0
   d6a3a:	460b      	mov	r3, r1
   d6a3c:	4630      	mov	r0, r6
   d6a3e:	4639      	mov	r1, r7
   d6a40:	f000 fd8c 	bl	d755c <__adddf3>
   d6a44:	4606      	mov	r6, r0
   d6a46:	460f      	mov	r7, r1
   d6a48:	4602      	mov	r2, r0
   d6a4a:	460b      	mov	r3, r1
   d6a4c:	4640      	mov	r0, r8
   d6a4e:	4649      	mov	r1, r9
   d6a50:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d6a54:	f000 fd82 	bl	d755c <__adddf3>
   d6a58:	9802      	ldr	r0, [sp, #8]
   d6a5a:	a33d      	add	r3, pc, #244	; (adr r3, d6b50 <__ieee754_pow+0x538>)
   d6a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a60:	4604      	mov	r4, r0
   d6a62:	460d      	mov	r5, r1
   d6a64:	f000 ff2c 	bl	d78c0 <__aeabi_dmul>
   d6a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d6a6c:	4680      	mov	r8, r0
   d6a6e:	4689      	mov	r9, r1
   d6a70:	4620      	mov	r0, r4
   d6a72:	4629      	mov	r1, r5
   d6a74:	f000 fd70 	bl	d7558 <__aeabi_dsub>
   d6a78:	4602      	mov	r2, r0
   d6a7a:	460b      	mov	r3, r1
   d6a7c:	4630      	mov	r0, r6
   d6a7e:	4639      	mov	r1, r7
   d6a80:	f000 fd6a 	bl	d7558 <__aeabi_dsub>
   d6a84:	a334      	add	r3, pc, #208	; (adr r3, d6b58 <__ieee754_pow+0x540>)
   d6a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a8a:	f000 ff19 	bl	d78c0 <__aeabi_dmul>
   d6a8e:	a334      	add	r3, pc, #208	; (adr r3, d6b60 <__ieee754_pow+0x548>)
   d6a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a94:	4606      	mov	r6, r0
   d6a96:	460f      	mov	r7, r1
   d6a98:	4620      	mov	r0, r4
   d6a9a:	4629      	mov	r1, r5
   d6a9c:	f000 ff10 	bl	d78c0 <__aeabi_dmul>
   d6aa0:	4602      	mov	r2, r0
   d6aa2:	460b      	mov	r3, r1
   d6aa4:	4630      	mov	r0, r6
   d6aa6:	4639      	mov	r1, r7
   d6aa8:	f000 fd58 	bl	d755c <__adddf3>
   d6aac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d6ab0:	f000 fd54 	bl	d755c <__adddf3>
   d6ab4:	4606      	mov	r6, r0
   d6ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
   d6ab8:	460f      	mov	r7, r1
   d6aba:	f000 fe9b 	bl	d77f4 <__aeabi_i2d>
   d6abe:	4632      	mov	r2, r6
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	460d      	mov	r5, r1
   d6ac4:	463b      	mov	r3, r7
   d6ac6:	4640      	mov	r0, r8
   d6ac8:	4649      	mov	r1, r9
   d6aca:	f000 fd47 	bl	d755c <__adddf3>
   d6ace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d6ad2:	f000 fd43 	bl	d755c <__adddf3>
   d6ad6:	4622      	mov	r2, r4
   d6ad8:	462b      	mov	r3, r5
   d6ada:	f000 fd3f 	bl	d755c <__adddf3>
   d6ade:	9802      	ldr	r0, [sp, #8]
   d6ae0:	4622      	mov	r2, r4
   d6ae2:	462b      	mov	r3, r5
   d6ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6ae8:	f000 fd36 	bl	d7558 <__aeabi_dsub>
   d6aec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d6af0:	f000 fd32 	bl	d7558 <__aeabi_dsub>
   d6af4:	4642      	mov	r2, r8
   d6af6:	464b      	mov	r3, r9
   d6af8:	f000 fd2e 	bl	d7558 <__aeabi_dsub>
   d6afc:	4602      	mov	r2, r0
   d6afe:	460b      	mov	r3, r1
   d6b00:	4630      	mov	r0, r6
   d6b02:	4639      	mov	r1, r7
   d6b04:	f000 fd28 	bl	d7558 <__aeabi_dsub>
   d6b08:	4680      	mov	r8, r0
   d6b0a:	4689      	mov	r9, r1
   d6b0c:	e036      	b.n	d6b7c <__ieee754_pow+0x564>
   d6b0e:	bf00      	nop
	...
   d6b1c:	3ff00000 	.word	0x3ff00000
   d6b20:	4a454eef 	.word	0x4a454eef
   d6b24:	3fca7e28 	.word	0x3fca7e28
   d6b28:	93c9db65 	.word	0x93c9db65
   d6b2c:	3fcd864a 	.word	0x3fcd864a
   d6b30:	a91d4101 	.word	0xa91d4101
   d6b34:	3fd17460 	.word	0x3fd17460
   d6b38:	518f264d 	.word	0x518f264d
   d6b3c:	3fd55555 	.word	0x3fd55555
   d6b40:	db6fabff 	.word	0xdb6fabff
   d6b44:	3fdb6db6 	.word	0x3fdb6db6
   d6b48:	33333303 	.word	0x33333303
   d6b4c:	3fe33333 	.word	0x3fe33333
   d6b50:	e0000000 	.word	0xe0000000
   d6b54:	3feec709 	.word	0x3feec709
   d6b58:	dc3a03fd 	.word	0xdc3a03fd
   d6b5c:	3feec709 	.word	0x3feec709
   d6b60:	145b01f5 	.word	0x145b01f5
   d6b64:	be3e2fe0 	.word	0xbe3e2fe0
   d6b68:	43400000 	.word	0x43400000
   d6b6c:	0003988e 	.word	0x0003988e
   d6b70:	000bb679 	.word	0x000bb679
   d6b74:	3ff00000 	.word	0x3ff00000
   d6b78:	40080000 	.word	0x40080000
   d6b7c:	f10b 33ff 	add.w	r3, fp, #4294967295
   d6b80:	ea53 030a 	orrs.w	r3, r3, sl
   d6b84:	f000 8188 	beq.w	d6e98 <__ieee754_pow+0x880>
   d6b88:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d6ee8 <__ieee754_pow+0x8d0>
   d6b8c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6b90:	e9dd ab00 	ldrd	sl, fp, [sp]
   d6b94:	4653      	mov	r3, sl
   d6b96:	465c      	mov	r4, fp
   d6b98:	e9cd 3400 	strd	r3, r4, [sp]
   d6b9c:	2300      	movs	r3, #0
   d6b9e:	9300      	str	r3, [sp, #0]
   d6ba0:	e9dd 4500 	ldrd	r4, r5, [sp]
   d6ba4:	4650      	mov	r0, sl
   d6ba6:	4622      	mov	r2, r4
   d6ba8:	462b      	mov	r3, r5
   d6baa:	4659      	mov	r1, fp
   d6bac:	f000 fcd4 	bl	d7558 <__aeabi_dsub>
   d6bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6bb4:	f000 fe84 	bl	d78c0 <__aeabi_dmul>
   d6bb8:	4652      	mov	r2, sl
   d6bba:	4606      	mov	r6, r0
   d6bbc:	460f      	mov	r7, r1
   d6bbe:	465b      	mov	r3, fp
   d6bc0:	4640      	mov	r0, r8
   d6bc2:	4649      	mov	r1, r9
   d6bc4:	f000 fe7c 	bl	d78c0 <__aeabi_dmul>
   d6bc8:	4602      	mov	r2, r0
   d6bca:	460b      	mov	r3, r1
   d6bcc:	4630      	mov	r0, r6
   d6bce:	4639      	mov	r1, r7
   d6bd0:	f000 fcc4 	bl	d755c <__adddf3>
   d6bd4:	4622      	mov	r2, r4
   d6bd6:	4680      	mov	r8, r0
   d6bd8:	4689      	mov	r9, r1
   d6bda:	462b      	mov	r3, r5
   d6bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6be0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d6be4:	f000 fe6c 	bl	d78c0 <__aeabi_dmul>
   d6be8:	460b      	mov	r3, r1
   d6bea:	4602      	mov	r2, r0
   d6bec:	4606      	mov	r6, r0
   d6bee:	460f      	mov	r7, r1
   d6bf0:	4640      	mov	r0, r8
   d6bf2:	4649      	mov	r1, r9
   d6bf4:	f000 fcb2 	bl	d755c <__adddf3>
   d6bf8:	4bd5      	ldr	r3, [pc, #852]	; (d6f50 <__ieee754_pow+0x938>)
   d6bfa:	4299      	cmp	r1, r3
   d6bfc:	4604      	mov	r4, r0
   d6bfe:	460d      	mov	r5, r1
   d6c00:	468a      	mov	sl, r1
   d6c02:	f340 8123 	ble.w	d6e4c <__ieee754_pow+0x834>
   d6c06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d6c0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d6c0e:	4303      	orrs	r3, r0
   d6c10:	f040 8218 	bne.w	d7044 <__ieee754_pow+0xa2c>
   d6c14:	a3b6      	add	r3, pc, #728	; (adr r3, d6ef0 <__ieee754_pow+0x8d8>)
   d6c16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6c1e:	f000 fc9d 	bl	d755c <__adddf3>
   d6c22:	4632      	mov	r2, r6
   d6c24:	4680      	mov	r8, r0
   d6c26:	4689      	mov	r9, r1
   d6c28:	463b      	mov	r3, r7
   d6c2a:	4620      	mov	r0, r4
   d6c2c:	4629      	mov	r1, r5
   d6c2e:	f000 fc93 	bl	d7558 <__aeabi_dsub>
   d6c32:	4602      	mov	r2, r0
   d6c34:	460b      	mov	r3, r1
   d6c36:	4640      	mov	r0, r8
   d6c38:	4649      	mov	r1, r9
   d6c3a:	f001 f8d1 	bl	d7de0 <__aeabi_dcmpgt>
   d6c3e:	2800      	cmp	r0, #0
   d6c40:	f040 8200 	bne.w	d7044 <__ieee754_pow+0xa2c>
   d6c44:	46a8      	mov	r8, r5
   d6c46:	ea4f 5328 	mov.w	r3, r8, asr #20
   d6c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d6c4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d6c52:	fa42 f303 	asr.w	r3, r2, r3
   d6c56:	4453      	add	r3, sl
   d6c58:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d6c5c:	4dbd      	ldr	r5, [pc, #756]	; (d6f54 <__ieee754_pow+0x93c>)
   d6c5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d6c62:	4115      	asrs	r5, r2
   d6c64:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d6c68:	2000      	movs	r0, #0
   d6c6a:	f1c2 0414 	rsb	r4, r2, #20
   d6c6e:	ea23 0105 	bic.w	r1, r3, r5
   d6c72:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d6c76:	f1ba 0f00 	cmp.w	sl, #0
   d6c7a:	4602      	mov	r2, r0
   d6c7c:	460b      	mov	r3, r1
   d6c7e:	fa4b fb04 	asr.w	fp, fp, r4
   d6c82:	4630      	mov	r0, r6
   d6c84:	4639      	mov	r1, r7
   d6c86:	bfb8      	it	lt
   d6c88:	f1cb 0b00 	rsblt	fp, fp, #0
   d6c8c:	f000 fc64 	bl	d7558 <__aeabi_dsub>
   d6c90:	4602      	mov	r2, r0
   d6c92:	460b      	mov	r3, r1
   d6c94:	4606      	mov	r6, r0
   d6c96:	460f      	mov	r7, r1
   d6c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6c9c:	f000 fc5e 	bl	d755c <__adddf3>
   d6ca0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d6ca4:	2400      	movs	r4, #0
   d6ca6:	a394      	add	r3, pc, #592	; (adr r3, d6ef8 <__ieee754_pow+0x8e0>)
   d6ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6cac:	4620      	mov	r0, r4
   d6cae:	460d      	mov	r5, r1
   d6cb0:	f000 fe06 	bl	d78c0 <__aeabi_dmul>
   d6cb4:	4632      	mov	r2, r6
   d6cb6:	4680      	mov	r8, r0
   d6cb8:	4689      	mov	r9, r1
   d6cba:	463b      	mov	r3, r7
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	4629      	mov	r1, r5
   d6cc0:	f000 fc4a 	bl	d7558 <__aeabi_dsub>
   d6cc4:	4602      	mov	r2, r0
   d6cc6:	460b      	mov	r3, r1
   d6cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6ccc:	f000 fc44 	bl	d7558 <__aeabi_dsub>
   d6cd0:	a38b      	add	r3, pc, #556	; (adr r3, d6f00 <__ieee754_pow+0x8e8>)
   d6cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6cd6:	f000 fdf3 	bl	d78c0 <__aeabi_dmul>
   d6cda:	a38b      	add	r3, pc, #556	; (adr r3, d6f08 <__ieee754_pow+0x8f0>)
   d6cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ce0:	4606      	mov	r6, r0
   d6ce2:	460f      	mov	r7, r1
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	4629      	mov	r1, r5
   d6ce8:	f000 fdea 	bl	d78c0 <__aeabi_dmul>
   d6cec:	4602      	mov	r2, r0
   d6cee:	460b      	mov	r3, r1
   d6cf0:	4630      	mov	r0, r6
   d6cf2:	4639      	mov	r1, r7
   d6cf4:	f000 fc32 	bl	d755c <__adddf3>
   d6cf8:	4606      	mov	r6, r0
   d6cfa:	460f      	mov	r7, r1
   d6cfc:	4602      	mov	r2, r0
   d6cfe:	460b      	mov	r3, r1
   d6d00:	4640      	mov	r0, r8
   d6d02:	4649      	mov	r1, r9
   d6d04:	f000 fc2a 	bl	d755c <__adddf3>
   d6d08:	4642      	mov	r2, r8
   d6d0a:	464b      	mov	r3, r9
   d6d0c:	4604      	mov	r4, r0
   d6d0e:	460d      	mov	r5, r1
   d6d10:	f000 fc22 	bl	d7558 <__aeabi_dsub>
   d6d14:	4602      	mov	r2, r0
   d6d16:	460b      	mov	r3, r1
   d6d18:	4630      	mov	r0, r6
   d6d1a:	4639      	mov	r1, r7
   d6d1c:	f000 fc1c 	bl	d7558 <__aeabi_dsub>
   d6d20:	4622      	mov	r2, r4
   d6d22:	4680      	mov	r8, r0
   d6d24:	4689      	mov	r9, r1
   d6d26:	462b      	mov	r3, r5
   d6d28:	4620      	mov	r0, r4
   d6d2a:	4629      	mov	r1, r5
   d6d2c:	f000 fdc8 	bl	d78c0 <__aeabi_dmul>
   d6d30:	a377      	add	r3, pc, #476	; (adr r3, d6f10 <__ieee754_pow+0x8f8>)
   d6d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d36:	4606      	mov	r6, r0
   d6d38:	460f      	mov	r7, r1
   d6d3a:	f000 fdc1 	bl	d78c0 <__aeabi_dmul>
   d6d3e:	a376      	add	r3, pc, #472	; (adr r3, d6f18 <__ieee754_pow+0x900>)
   d6d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d44:	f000 fc08 	bl	d7558 <__aeabi_dsub>
   d6d48:	4632      	mov	r2, r6
   d6d4a:	463b      	mov	r3, r7
   d6d4c:	f000 fdb8 	bl	d78c0 <__aeabi_dmul>
   d6d50:	a373      	add	r3, pc, #460	; (adr r3, d6f20 <__ieee754_pow+0x908>)
   d6d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d56:	f000 fc01 	bl	d755c <__adddf3>
   d6d5a:	4632      	mov	r2, r6
   d6d5c:	463b      	mov	r3, r7
   d6d5e:	f000 fdaf 	bl	d78c0 <__aeabi_dmul>
   d6d62:	a371      	add	r3, pc, #452	; (adr r3, d6f28 <__ieee754_pow+0x910>)
   d6d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d68:	f000 fbf6 	bl	d7558 <__aeabi_dsub>
   d6d6c:	4632      	mov	r2, r6
   d6d6e:	463b      	mov	r3, r7
   d6d70:	f000 fda6 	bl	d78c0 <__aeabi_dmul>
   d6d74:	a36e      	add	r3, pc, #440	; (adr r3, d6f30 <__ieee754_pow+0x918>)
   d6d76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d7a:	f000 fbef 	bl	d755c <__adddf3>
   d6d7e:	4632      	mov	r2, r6
   d6d80:	463b      	mov	r3, r7
   d6d82:	f000 fd9d 	bl	d78c0 <__aeabi_dmul>
   d6d86:	4602      	mov	r2, r0
   d6d88:	460b      	mov	r3, r1
   d6d8a:	4620      	mov	r0, r4
   d6d8c:	4629      	mov	r1, r5
   d6d8e:	f000 fbe3 	bl	d7558 <__aeabi_dsub>
   d6d92:	4606      	mov	r6, r0
   d6d94:	460f      	mov	r7, r1
   d6d96:	4602      	mov	r2, r0
   d6d98:	460b      	mov	r3, r1
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	4629      	mov	r1, r5
   d6d9e:	f000 fd8f 	bl	d78c0 <__aeabi_dmul>
   d6da2:	2200      	movs	r2, #0
   d6da4:	e9cd 0100 	strd	r0, r1, [sp]
   d6da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6dac:	4630      	mov	r0, r6
   d6dae:	4639      	mov	r1, r7
   d6db0:	f000 fbd2 	bl	d7558 <__aeabi_dsub>
   d6db4:	4602      	mov	r2, r0
   d6db6:	460b      	mov	r3, r1
   d6db8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6dbc:	f000 feaa 	bl	d7b14 <__aeabi_ddiv>
   d6dc0:	4642      	mov	r2, r8
   d6dc2:	4606      	mov	r6, r0
   d6dc4:	460f      	mov	r7, r1
   d6dc6:	464b      	mov	r3, r9
   d6dc8:	4620      	mov	r0, r4
   d6dca:	4629      	mov	r1, r5
   d6dcc:	f000 fd78 	bl	d78c0 <__aeabi_dmul>
   d6dd0:	4642      	mov	r2, r8
   d6dd2:	464b      	mov	r3, r9
   d6dd4:	f000 fbc2 	bl	d755c <__adddf3>
   d6dd8:	4602      	mov	r2, r0
   d6dda:	460b      	mov	r3, r1
   d6ddc:	4630      	mov	r0, r6
   d6dde:	4639      	mov	r1, r7
   d6de0:	f000 fbba 	bl	d7558 <__aeabi_dsub>
   d6de4:	4622      	mov	r2, r4
   d6de6:	462b      	mov	r3, r5
   d6de8:	f000 fbb6 	bl	d7558 <__aeabi_dsub>
   d6dec:	4602      	mov	r2, r0
   d6dee:	460b      	mov	r3, r1
   d6df0:	2000      	movs	r0, #0
   d6df2:	4959      	ldr	r1, [pc, #356]	; (d6f58 <__ieee754_pow+0x940>)
   d6df4:	f000 fbb0 	bl	d7558 <__aeabi_dsub>
   d6df8:	448a      	add	sl, r1
   d6dfa:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d6dfe:	4602      	mov	r2, r0
   d6e00:	460b      	mov	r3, r1
   d6e02:	f2c0 815b 	blt.w	d70bc <__ieee754_pow+0xaa4>
   d6e06:	4651      	mov	r1, sl
   d6e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6e0c:	f000 fd58 	bl	d78c0 <__aeabi_dmul>
   d6e10:	ec41 0b10 	vmov	d0, r0, r1
   d6e14:	e449      	b.n	d66aa <__ieee754_pow+0x92>
   d6e16:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d6e1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d6e1e:	ea54 030b 	orrs.w	r3, r4, fp
   d6e22:	f000 8137 	beq.w	d7094 <__ieee754_pow+0xa7c>
   d6e26:	f1bb 0f01 	cmp.w	fp, #1
   d6e2a:	f47f ac80 	bne.w	d672e <__ieee754_pow+0x116>
   d6e2e:	4602      	mov	r2, r0
   d6e30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6e34:	ec43 2b10 	vmov	d0, r2, r3
   d6e38:	e437      	b.n	d66aa <__ieee754_pow+0x92>
   d6e3a:	4632      	mov	r2, r6
   d6e3c:	463b      	mov	r3, r7
   d6e3e:	4630      	mov	r0, r6
   d6e40:	4639      	mov	r1, r7
   d6e42:	f000 fd3d 	bl	d78c0 <__aeabi_dmul>
   d6e46:	ec41 0b10 	vmov	d0, r0, r1
   d6e4a:	e42e      	b.n	d66aa <__ieee754_pow+0x92>
   d6e4c:	4b43      	ldr	r3, [pc, #268]	; (d6f5c <__ieee754_pow+0x944>)
   d6e4e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d6e52:	4598      	cmp	r8, r3
   d6e54:	f340 8115 	ble.w	d7082 <__ieee754_pow+0xa6a>
   d6e58:	4b41      	ldr	r3, [pc, #260]	; (d6f60 <__ieee754_pow+0x948>)
   d6e5a:	440b      	add	r3, r1
   d6e5c:	4303      	orrs	r3, r0
   d6e5e:	d10c      	bne.n	d6e7a <__ieee754_pow+0x862>
   d6e60:	4632      	mov	r2, r6
   d6e62:	463b      	mov	r3, r7
   d6e64:	f000 fb78 	bl	d7558 <__aeabi_dsub>
   d6e68:	4602      	mov	r2, r0
   d6e6a:	460b      	mov	r3, r1
   d6e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6e70:	f000 ffa2 	bl	d7db8 <__aeabi_dcmple>
   d6e74:	2800      	cmp	r0, #0
   d6e76:	f43f aee6 	beq.w	d6c46 <__ieee754_pow+0x62e>
   d6e7a:	a32f      	add	r3, pc, #188	; (adr r3, d6f38 <__ieee754_pow+0x920>)
   d6e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6e84:	f000 fd1c 	bl	d78c0 <__aeabi_dmul>
   d6e88:	a32b      	add	r3, pc, #172	; (adr r3, d6f38 <__ieee754_pow+0x920>)
   d6e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e8e:	f000 fd17 	bl	d78c0 <__aeabi_dmul>
   d6e92:	ec41 0b10 	vmov	d0, r0, r1
   d6e96:	e408      	b.n	d66aa <__ieee754_pow+0x92>
   d6e98:	ed9f 7b29 	vldr	d7, [pc, #164]	; d6f40 <__ieee754_pow+0x928>
   d6e9c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6ea0:	e676      	b.n	d6b90 <__ieee754_pow+0x578>
   d6ea2:	f1b9 0f00 	cmp.w	r9, #0
   d6ea6:	f6bf ac8e 	bge.w	d67c6 <__ieee754_pow+0x1ae>
   d6eaa:	e9dd 3400 	ldrd	r3, r4, [sp]
   d6eae:	ee00 3a10 	vmov	s0, r3
   d6eb2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d6eb6:	ee00 3a90 	vmov	s1, r3
   d6eba:	f7ff bbf6 	b.w	d66aa <__ieee754_pow+0x92>
   d6ebe:	4602      	mov	r2, r0
   d6ec0:	460b      	mov	r3, r1
   d6ec2:	2000      	movs	r0, #0
   d6ec4:	4924      	ldr	r1, [pc, #144]	; (d6f58 <__ieee754_pow+0x940>)
   d6ec6:	f000 fe25 	bl	d7b14 <__aeabi_ddiv>
   d6eca:	e42d      	b.n	d6728 <__ieee754_pow+0x110>
   d6ecc:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d6f48 <__ieee754_pow+0x930>
   d6ed0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6ed4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d6ed8:	ed9f 7b03 	vldr	d7, [pc, #12]	; d6ee8 <__ieee754_pow+0x8d0>
   d6edc:	f04f 0800 	mov.w	r8, #0
   d6ee0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6ee4:	e4be      	b.n	d6864 <__ieee754_pow+0x24c>
   d6ee6:	bf00      	nop
   d6ee8:	00000000 	.word	0x00000000
   d6eec:	3ff00000 	.word	0x3ff00000
   d6ef0:	652b82fe 	.word	0x652b82fe
   d6ef4:	3c971547 	.word	0x3c971547
   d6ef8:	00000000 	.word	0x00000000
   d6efc:	3fe62e43 	.word	0x3fe62e43
   d6f00:	fefa39ef 	.word	0xfefa39ef
   d6f04:	3fe62e42 	.word	0x3fe62e42
   d6f08:	0ca86c39 	.word	0x0ca86c39
   d6f0c:	be205c61 	.word	0xbe205c61
   d6f10:	72bea4d0 	.word	0x72bea4d0
   d6f14:	3e663769 	.word	0x3e663769
   d6f18:	c5d26bf1 	.word	0xc5d26bf1
   d6f1c:	3ebbbd41 	.word	0x3ebbbd41
   d6f20:	af25de2c 	.word	0xaf25de2c
   d6f24:	3f11566a 	.word	0x3f11566a
   d6f28:	16bebd93 	.word	0x16bebd93
   d6f2c:	3f66c16c 	.word	0x3f66c16c
   d6f30:	5555553e 	.word	0x5555553e
   d6f34:	3fc55555 	.word	0x3fc55555
   d6f38:	c2f8f359 	.word	0xc2f8f359
   d6f3c:	01a56e1f 	.word	0x01a56e1f
   d6f40:	00000000 	.word	0x00000000
   d6f44:	bff00000 	.word	0xbff00000
	...
   d6f50:	408fffff 	.word	0x408fffff
   d6f54:	000fffff 	.word	0x000fffff
   d6f58:	3ff00000 	.word	0x3ff00000
   d6f5c:	4090cbff 	.word	0x4090cbff
   d6f60:	3f6f3400 	.word	0x3f6f3400
   d6f64:	4b6c      	ldr	r3, [pc, #432]	; (d7118 <__ieee754_pow+0xb00>)
   d6f66:	429c      	cmp	r4, r3
   d6f68:	f77f ac2a 	ble.w	d67c0 <__ieee754_pow+0x1a8>
   d6f6c:	4b6b      	ldr	r3, [pc, #428]	; (d711c <__ieee754_pow+0xb04>)
   d6f6e:	429c      	cmp	r4, r3
   d6f70:	f73f abc3 	bgt.w	d66fa <__ieee754_pow+0xe2>
   d6f74:	2200      	movs	r2, #0
   d6f76:	4b69      	ldr	r3, [pc, #420]	; (d711c <__ieee754_pow+0xb04>)
   d6f78:	f000 faee 	bl	d7558 <__aeabi_dsub>
   d6f7c:	a356      	add	r3, pc, #344	; (adr r3, d70d8 <__ieee754_pow+0xac0>)
   d6f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f82:	4604      	mov	r4, r0
   d6f84:	460d      	mov	r5, r1
   d6f86:	f000 fc9b 	bl	d78c0 <__aeabi_dmul>
   d6f8a:	a355      	add	r3, pc, #340	; (adr r3, d70e0 <__ieee754_pow+0xac8>)
   d6f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f90:	4680      	mov	r8, r0
   d6f92:	4689      	mov	r9, r1
   d6f94:	4620      	mov	r0, r4
   d6f96:	4629      	mov	r1, r5
   d6f98:	f000 fc92 	bl	d78c0 <__aeabi_dmul>
   d6f9c:	2200      	movs	r2, #0
   d6f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6fa2:	4b5f      	ldr	r3, [pc, #380]	; (d7120 <__ieee754_pow+0xb08>)
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	4629      	mov	r1, r5
   d6fa8:	f000 fc8a 	bl	d78c0 <__aeabi_dmul>
   d6fac:	4602      	mov	r2, r0
   d6fae:	460b      	mov	r3, r1
   d6fb0:	a14d      	add	r1, pc, #308	; (adr r1, d70e8 <__ieee754_pow+0xad0>)
   d6fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6fb6:	f000 facf 	bl	d7558 <__aeabi_dsub>
   d6fba:	4622      	mov	r2, r4
   d6fbc:	462b      	mov	r3, r5
   d6fbe:	f000 fc7f 	bl	d78c0 <__aeabi_dmul>
   d6fc2:	4602      	mov	r2, r0
   d6fc4:	460b      	mov	r3, r1
   d6fc6:	2000      	movs	r0, #0
   d6fc8:	4956      	ldr	r1, [pc, #344]	; (d7124 <__ieee754_pow+0xb0c>)
   d6fca:	f000 fac5 	bl	d7558 <__aeabi_dsub>
   d6fce:	4622      	mov	r2, r4
   d6fd0:	462b      	mov	r3, r5
   d6fd2:	4606      	mov	r6, r0
   d6fd4:	460f      	mov	r7, r1
   d6fd6:	4620      	mov	r0, r4
   d6fd8:	4629      	mov	r1, r5
   d6fda:	f000 fc71 	bl	d78c0 <__aeabi_dmul>
   d6fde:	4602      	mov	r2, r0
   d6fe0:	460b      	mov	r3, r1
   d6fe2:	4630      	mov	r0, r6
   d6fe4:	4639      	mov	r1, r7
   d6fe6:	f000 fc6b 	bl	d78c0 <__aeabi_dmul>
   d6fea:	a341      	add	r3, pc, #260	; (adr r3, d70f0 <__ieee754_pow+0xad8>)
   d6fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ff0:	f000 fc66 	bl	d78c0 <__aeabi_dmul>
   d6ff4:	4602      	mov	r2, r0
   d6ff6:	460b      	mov	r3, r1
   d6ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6ffc:	f000 faac 	bl	d7558 <__aeabi_dsub>
   d7000:	4602      	mov	r2, r0
   d7002:	460b      	mov	r3, r1
   d7004:	4604      	mov	r4, r0
   d7006:	460d      	mov	r5, r1
   d7008:	4640      	mov	r0, r8
   d700a:	4649      	mov	r1, r9
   d700c:	f000 faa6 	bl	d755c <__adddf3>
   d7010:	4642      	mov	r2, r8
   d7012:	464b      	mov	r3, r9
   d7014:	2000      	movs	r0, #0
   d7016:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d701a:	f000 fa9d 	bl	d7558 <__aeabi_dsub>
   d701e:	4602      	mov	r2, r0
   d7020:	460b      	mov	r3, r1
   d7022:	4620      	mov	r0, r4
   d7024:	4629      	mov	r1, r5
   d7026:	f000 fa97 	bl	d7558 <__aeabi_dsub>
   d702a:	4680      	mov	r8, r0
   d702c:	4689      	mov	r9, r1
   d702e:	e5a5      	b.n	d6b7c <__ieee754_pow+0x564>
   d7030:	4632      	mov	r2, r6
   d7032:	463b      	mov	r3, r7
   d7034:	2000      	movs	r0, #0
   d7036:	4939      	ldr	r1, [pc, #228]	; (d711c <__ieee754_pow+0xb04>)
   d7038:	f000 fd6c 	bl	d7b14 <__aeabi_ddiv>
   d703c:	ec41 0b10 	vmov	d0, r0, r1
   d7040:	f7ff bb33 	b.w	d66aa <__ieee754_pow+0x92>
   d7044:	a32c      	add	r3, pc, #176	; (adr r3, d70f8 <__ieee754_pow+0xae0>)
   d7046:	e9d3 2300 	ldrd	r2, r3, [r3]
   d704a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d704e:	f000 fc37 	bl	d78c0 <__aeabi_dmul>
   d7052:	a329      	add	r3, pc, #164	; (adr r3, d70f8 <__ieee754_pow+0xae0>)
   d7054:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7058:	f000 fc32 	bl	d78c0 <__aeabi_dmul>
   d705c:	ec41 0b10 	vmov	d0, r0, r1
   d7060:	f7ff bb23 	b.w	d66aa <__ieee754_pow+0x92>
   d7064:	f1be 0f00 	cmp.w	lr, #0
   d7068:	f47f ab2a 	bne.w	d66c0 <__ieee754_pow+0xa8>
   d706c:	f1c3 0314 	rsb	r3, r3, #20
   d7070:	fa48 f203 	asr.w	r2, r8, r3
   d7074:	fa02 f303 	lsl.w	r3, r2, r3
   d7078:	4598      	cmp	r8, r3
   d707a:	d027      	beq.n	d70cc <__ieee754_pow+0xab4>
   d707c:	46f3      	mov	fp, lr
   d707e:	f7ff baf7 	b.w	d6670 <__ieee754_pow+0x58>
   d7082:	4b28      	ldr	r3, [pc, #160]	; (d7124 <__ieee754_pow+0xb0c>)
   d7084:	4598      	cmp	r8, r3
   d7086:	f73f adde 	bgt.w	d6c46 <__ieee754_pow+0x62e>
   d708a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d708e:	469a      	mov	sl, r3
   d7090:	469b      	mov	fp, r3
   d7092:	e607      	b.n	d6ca4 <__ieee754_pow+0x68c>
   d7094:	4602      	mov	r2, r0
   d7096:	460b      	mov	r3, r1
   d7098:	f7ff bb89 	b.w	d67ae <__ieee754_pow+0x196>
   d709c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7100 <__ieee754_pow+0xae8>
   d70a0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d70a4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7108 <__ieee754_pow+0xaf0>
   d70a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d70ac:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7110 <__ieee754_pow+0xaf8>
   d70b0:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d70b4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d70b8:	f7ff bbd4 	b.w	d6864 <__ieee754_pow+0x24c>
   d70bc:	4658      	mov	r0, fp
   d70be:	ec43 2b10 	vmov	d0, r2, r3
   d70c2:	f000 f9b1 	bl	d7428 <scalbn>
   d70c6:	ec51 0b10 	vmov	r0, r1, d0
   d70ca:	e69d      	b.n	d6e08 <__ieee754_pow+0x7f0>
   d70cc:	f002 0201 	and.w	r2, r2, #1
   d70d0:	f1c2 0b02 	rsb	fp, r2, #2
   d70d4:	f7ff bacc 	b.w	d6670 <__ieee754_pow+0x58>
   d70d8:	60000000 	.word	0x60000000
   d70dc:	3ff71547 	.word	0x3ff71547
   d70e0:	f85ddf44 	.word	0xf85ddf44
   d70e4:	3e54ae0b 	.word	0x3e54ae0b
   d70e8:	55555555 	.word	0x55555555
   d70ec:	3fd55555 	.word	0x3fd55555
   d70f0:	652b82fe 	.word	0x652b82fe
   d70f4:	3ff71547 	.word	0x3ff71547
   d70f8:	8800759c 	.word	0x8800759c
   d70fc:	7e37e43c 	.word	0x7e37e43c
   d7100:	40000000 	.word	0x40000000
   d7104:	3fe2b803 	.word	0x3fe2b803
   d7108:	43cfd006 	.word	0x43cfd006
   d710c:	3e4cfdeb 	.word	0x3e4cfdeb
   d7110:	00000000 	.word	0x00000000
   d7114:	3ff80000 	.word	0x3ff80000
   d7118:	3feffffe 	.word	0x3feffffe
   d711c:	3ff00000 	.word	0x3ff00000
   d7120:	3fd00000 	.word	0x3fd00000
   d7124:	3fe00000 	.word	0x3fe00000

000d7128 <__ieee754_sqrt>:
   d7128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d712c:	4965      	ldr	r1, [pc, #404]	; (d72c4 <__ieee754_sqrt+0x19c>)
   d712e:	ec55 4b10 	vmov	r4, r5, d0
   d7132:	460e      	mov	r6, r1
   d7134:	4029      	ands	r1, r5
   d7136:	42b1      	cmp	r1, r6
   d7138:	f000 8097 	beq.w	d726a <__ieee754_sqrt+0x142>
   d713c:	2d00      	cmp	r5, #0
   d713e:	462b      	mov	r3, r5
   d7140:	ee10 2a10 	vmov	r2, s0
   d7144:	dd74      	ble.n	d7230 <__ieee754_sqrt+0x108>
   d7146:	152f      	asrs	r7, r5, #20
   d7148:	d07f      	beq.n	d724a <__ieee754_sqrt+0x122>
   d714a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d714e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7152:	07f9      	lsls	r1, r7, #31
   d7154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7158:	d465      	bmi.n	d7226 <__ieee754_sqrt+0xfe>
   d715a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d715e:	2600      	movs	r6, #0
   d7160:	440b      	add	r3, r1
   d7162:	107f      	asrs	r7, r7, #1
   d7164:	0052      	lsls	r2, r2, #1
   d7166:	46b6      	mov	lr, r6
   d7168:	2016      	movs	r0, #22
   d716a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d716e:	eb0e 0401 	add.w	r4, lr, r1
   d7172:	429c      	cmp	r4, r3
   d7174:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d7178:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d717c:	dc03      	bgt.n	d7186 <__ieee754_sqrt+0x5e>
   d717e:	1b1b      	subs	r3, r3, r4
   d7180:	eb04 0e01 	add.w	lr, r4, r1
   d7184:	440e      	add	r6, r1
   d7186:	3801      	subs	r0, #1
   d7188:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d718c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d7190:	d1ed      	bne.n	d716e <__ieee754_sqrt+0x46>
   d7192:	4684      	mov	ip, r0
   d7194:	2420      	movs	r4, #32
   d7196:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d719a:	e009      	b.n	d71b0 <__ieee754_sqrt+0x88>
   d719c:	d020      	beq.n	d71e0 <__ieee754_sqrt+0xb8>
   d719e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d71a2:	3c01      	subs	r4, #1
   d71a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d71a8:	442b      	add	r3, r5
   d71aa:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d71ae:	d020      	beq.n	d71f2 <__ieee754_sqrt+0xca>
   d71b0:	459e      	cmp	lr, r3
   d71b2:	eb01 050c 	add.w	r5, r1, ip
   d71b6:	daf1      	bge.n	d719c <__ieee754_sqrt+0x74>
   d71b8:	2d00      	cmp	r5, #0
   d71ba:	eb05 0c01 	add.w	ip, r5, r1
   d71be:	db09      	blt.n	d71d4 <__ieee754_sqrt+0xac>
   d71c0:	46f0      	mov	r8, lr
   d71c2:	4295      	cmp	r5, r2
   d71c4:	ebce 0303 	rsb	r3, lr, r3
   d71c8:	d900      	bls.n	d71cc <__ieee754_sqrt+0xa4>
   d71ca:	3b01      	subs	r3, #1
   d71cc:	1b52      	subs	r2, r2, r5
   d71ce:	4408      	add	r0, r1
   d71d0:	46c6      	mov	lr, r8
   d71d2:	e7e4      	b.n	d719e <__ieee754_sqrt+0x76>
   d71d4:	f1bc 0f00 	cmp.w	ip, #0
   d71d8:	dbf2      	blt.n	d71c0 <__ieee754_sqrt+0x98>
   d71da:	f10e 0801 	add.w	r8, lr, #1
   d71de:	e7f0      	b.n	d71c2 <__ieee754_sqrt+0x9a>
   d71e0:	4295      	cmp	r5, r2
   d71e2:	d81e      	bhi.n	d7222 <__ieee754_sqrt+0xfa>
   d71e4:	2d00      	cmp	r5, #0
   d71e6:	eb05 0c01 	add.w	ip, r5, r1
   d71ea:	db50      	blt.n	d728e <__ieee754_sqrt+0x166>
   d71ec:	4698      	mov	r8, r3
   d71ee:	2300      	movs	r3, #0
   d71f0:	e7ec      	b.n	d71cc <__ieee754_sqrt+0xa4>
   d71f2:	4313      	orrs	r3, r2
   d71f4:	d004      	beq.n	d7200 <__ieee754_sqrt+0xd8>
   d71f6:	1c42      	adds	r2, r0, #1
   d71f8:	d04d      	beq.n	d7296 <__ieee754_sqrt+0x16e>
   d71fa:	f000 0301 	and.w	r3, r0, #1
   d71fe:	4418      	add	r0, r3
   d7200:	0840      	lsrs	r0, r0, #1
   d7202:	1071      	asrs	r1, r6, #1
   d7204:	07f3      	lsls	r3, r6, #31
   d7206:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d720a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d720e:	bf48      	it	mi
   d7210:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d7214:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d7218:	4602      	mov	r2, r0
   d721a:	ec43 2b10 	vmov	d0, r2, r3
   d721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7222:	4673      	mov	r3, lr
   d7224:	e7bb      	b.n	d719e <__ieee754_sqrt+0x76>
   d7226:	005b      	lsls	r3, r3, #1
   d7228:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d722c:	0052      	lsls	r2, r2, #1
   d722e:	e794      	b.n	d715a <__ieee754_sqrt+0x32>
   d7230:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d7234:	4321      	orrs	r1, r4
   d7236:	d028      	beq.n	d728a <__ieee754_sqrt+0x162>
   d7238:	bbad      	cbnz	r5, d72a6 <__ieee754_sqrt+0x17e>
   d723a:	462f      	mov	r7, r5
   d723c:	0ad3      	lsrs	r3, r2, #11
   d723e:	3f15      	subs	r7, #21
   d7240:	0552      	lsls	r2, r2, #21
   d7242:	2b00      	cmp	r3, #0
   d7244:	d0fa      	beq.n	d723c <__ieee754_sqrt+0x114>
   d7246:	02dd      	lsls	r5, r3, #11
   d7248:	d428      	bmi.n	d729c <__ieee754_sqrt+0x174>
   d724a:	2100      	movs	r1, #0
   d724c:	e000      	b.n	d7250 <__ieee754_sqrt+0x128>
   d724e:	4601      	mov	r1, r0
   d7250:	005b      	lsls	r3, r3, #1
   d7252:	02dc      	lsls	r4, r3, #11
   d7254:	f101 0001 	add.w	r0, r1, #1
   d7258:	d5f9      	bpl.n	d724e <__ieee754_sqrt+0x126>
   d725a:	f1c0 0420 	rsb	r4, r0, #32
   d725e:	fa22 f404 	lsr.w	r4, r2, r4
   d7262:	4323      	orrs	r3, r4
   d7264:	1a7f      	subs	r7, r7, r1
   d7266:	4082      	lsls	r2, r0
   d7268:	e76f      	b.n	d714a <__ieee754_sqrt+0x22>
   d726a:	ee10 2a10 	vmov	r2, s0
   d726e:	462b      	mov	r3, r5
   d7270:	ee10 0a10 	vmov	r0, s0
   d7274:	4629      	mov	r1, r5
   d7276:	f000 fb23 	bl	d78c0 <__aeabi_dmul>
   d727a:	4622      	mov	r2, r4
   d727c:	462b      	mov	r3, r5
   d727e:	f000 f96d 	bl	d755c <__adddf3>
   d7282:	ec41 0b10 	vmov	d0, r0, r1
   d7286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d728a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d728e:	f1bc 0f00 	cmp.w	ip, #0
   d7292:	daa2      	bge.n	d71da <__ieee754_sqrt+0xb2>
   d7294:	e7aa      	b.n	d71ec <__ieee754_sqrt+0xc4>
   d7296:	3601      	adds	r6, #1
   d7298:	4620      	mov	r0, r4
   d729a:	e7b2      	b.n	d7202 <__ieee754_sqrt+0xda>
   d729c:	2420      	movs	r4, #32
   d729e:	f04f 31ff 	mov.w	r1, #4294967295
   d72a2:	2000      	movs	r0, #0
   d72a4:	e7db      	b.n	d725e <__ieee754_sqrt+0x136>
   d72a6:	ee10 2a10 	vmov	r2, s0
   d72aa:	462b      	mov	r3, r5
   d72ac:	4620      	mov	r0, r4
   d72ae:	4629      	mov	r1, r5
   d72b0:	f000 f952 	bl	d7558 <__aeabi_dsub>
   d72b4:	4602      	mov	r2, r0
   d72b6:	460b      	mov	r3, r1
   d72b8:	f000 fc2c 	bl	d7b14 <__aeabi_ddiv>
   d72bc:	ec41 0b10 	vmov	d0, r0, r1
   d72c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72c4:	7ff00000 	.word	0x7ff00000

000d72c8 <fabs>:
   d72c8:	ec53 2b10 	vmov	r2, r3, d0
   d72cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d72d0:	ec43 2b10 	vmov	d0, r2, r3
   d72d4:	4770      	bx	lr
   d72d6:	bf00      	nop

000d72d8 <finite>:
   d72d8:	ee10 3a90 	vmov	r3, s1
   d72dc:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d72e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d72e4:	0fc0      	lsrs	r0, r0, #31
   d72e6:	4770      	bx	lr

000d72e8 <matherr>:
   d72e8:	2000      	movs	r0, #0
   d72ea:	4770      	bx	lr
   d72ec:	0000      	movs	r0, r0
	...

000d72f0 <nan>:
   d72f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d72f8 <nan+0x8>
   d72f4:	4770      	bx	lr
   d72f6:	bf00      	nop
   d72f8:	00000000 	.word	0x00000000
   d72fc:	7ff80000 	.word	0x7ff80000

000d7300 <rint>:
   d7300:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7302:	ec53 2b10 	vmov	r2, r3, d0
   d7306:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d730a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d730e:	2813      	cmp	r0, #19
   d7310:	b083      	sub	sp, #12
   d7312:	4619      	mov	r1, r3
   d7314:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7318:	ee10 5a10 	vmov	r5, s0
   d731c:	dc2f      	bgt.n	d737e <rint+0x7e>
   d731e:	2800      	cmp	r0, #0
   d7320:	db49      	blt.n	d73b6 <rint+0xb6>
   d7322:	4e3f      	ldr	r6, [pc, #252]	; (d7420 <rint+0x120>)
   d7324:	4106      	asrs	r6, r0
   d7326:	ea03 0706 	and.w	r7, r3, r6
   d732a:	4317      	orrs	r7, r2
   d732c:	d02c      	beq.n	d7388 <rint+0x88>
   d732e:	0876      	lsrs	r6, r6, #1
   d7330:	4033      	ands	r3, r6
   d7332:	431d      	orrs	r5, r3
   d7334:	d00c      	beq.n	d7350 <rint+0x50>
   d7336:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d733a:	2813      	cmp	r0, #19
   d733c:	ea21 0606 	bic.w	r6, r1, r6
   d7340:	fa43 f100 	asr.w	r1, r3, r0
   d7344:	ea41 0106 	orr.w	r1, r1, r6
   d7348:	bf0c      	ite	eq
   d734a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d734e:	2500      	movne	r5, #0
   d7350:	4834      	ldr	r0, [pc, #208]	; (d7424 <rint+0x124>)
   d7352:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7356:	462a      	mov	r2, r5
   d7358:	e9d4 4500 	ldrd	r4, r5, [r4]
   d735c:	4610      	mov	r0, r2
   d735e:	462b      	mov	r3, r5
   d7360:	4622      	mov	r2, r4
   d7362:	f000 f8fb 	bl	d755c <__adddf3>
   d7366:	e9cd 0100 	strd	r0, r1, [sp]
   d736a:	4622      	mov	r2, r4
   d736c:	462b      	mov	r3, r5
   d736e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7372:	f000 f8f1 	bl	d7558 <__aeabi_dsub>
   d7376:	ec41 0b10 	vmov	d0, r0, r1
   d737a:	b003      	add	sp, #12
   d737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d737e:	2833      	cmp	r0, #51	; 0x33
   d7380:	dd06      	ble.n	d7390 <rint+0x90>
   d7382:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7386:	d042      	beq.n	d740e <rint+0x10e>
   d7388:	ec43 2b10 	vmov	d0, r2, r3
   d738c:	b003      	add	sp, #12
   d738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7390:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7394:	f04f 30ff 	mov.w	r0, #4294967295
   d7398:	40f0      	lsrs	r0, r6
   d739a:	4202      	tst	r2, r0
   d739c:	d0f4      	beq.n	d7388 <rint+0x88>
   d739e:	0840      	lsrs	r0, r0, #1
   d73a0:	4202      	tst	r2, r0
   d73a2:	d0d5      	beq.n	d7350 <rint+0x50>
   d73a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d73a8:	ea25 0000 	bic.w	r0, r5, r0
   d73ac:	fa43 f606 	asr.w	r6, r3, r6
   d73b0:	ea46 0500 	orr.w	r5, r6, r0
   d73b4:	e7cc      	b.n	d7350 <rint+0x50>
   d73b6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d73ba:	4310      	orrs	r0, r2
   d73bc:	ee10 7a10 	vmov	r7, s0
   d73c0:	d0e2      	beq.n	d7388 <rint+0x88>
   d73c2:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d73c6:	4307      	orrs	r7, r0
   d73c8:	4278      	negs	r0, r7
   d73ca:	4307      	orrs	r7, r0
   d73cc:	4815      	ldr	r0, [pc, #84]	; (d7424 <rint+0x124>)
   d73ce:	0c59      	lsrs	r1, r3, #17
   d73d0:	0b3f      	lsrs	r7, r7, #12
   d73d2:	0449      	lsls	r1, r1, #17
   d73d4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d73d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d73dc:	ea47 0301 	orr.w	r3, r7, r1
   d73e0:	e9d0 6700 	ldrd	r6, r7, [r0]
   d73e4:	4619      	mov	r1, r3
   d73e6:	4610      	mov	r0, r2
   d73e8:	463b      	mov	r3, r7
   d73ea:	4632      	mov	r2, r6
   d73ec:	f000 f8b6 	bl	d755c <__adddf3>
   d73f0:	e9cd 0100 	strd	r0, r1, [sp]
   d73f4:	463b      	mov	r3, r7
   d73f6:	4632      	mov	r2, r6
   d73f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d73fc:	f000 f8ac 	bl	d7558 <__aeabi_dsub>
   d7400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7404:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7408:	ec41 0b10 	vmov	d0, r0, r1
   d740c:	e7be      	b.n	d738c <rint+0x8c>
   d740e:	ee10 0a10 	vmov	r0, s0
   d7412:	4619      	mov	r1, r3
   d7414:	f000 f8a2 	bl	d755c <__adddf3>
   d7418:	ec41 0b10 	vmov	d0, r0, r1
   d741c:	e7b6      	b.n	d738c <rint+0x8c>
   d741e:	bf00      	nop
   d7420:	000fffff 	.word	0x000fffff
   d7424:	000d8a30 	.word	0x000d8a30

000d7428 <scalbn>:
   d7428:	ec53 2b10 	vmov	r2, r3, d0
   d742c:	b570      	push	{r4, r5, r6, lr}
   d742e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d7432:	4619      	mov	r1, r3
   d7434:	4605      	mov	r5, r0
   d7436:	bb14      	cbnz	r4, d747e <scalbn+0x56>
   d7438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d743c:	4311      	orrs	r1, r2
   d743e:	d02a      	beq.n	d7496 <scalbn+0x6e>
   d7440:	4619      	mov	r1, r3
   d7442:	2200      	movs	r2, #0
   d7444:	4b38      	ldr	r3, [pc, #224]	; (d7528 <scalbn+0x100>)
   d7446:	4e39      	ldr	r6, [pc, #228]	; (d752c <scalbn+0x104>)
   d7448:	ee10 0a10 	vmov	r0, s0
   d744c:	f000 fa38 	bl	d78c0 <__aeabi_dmul>
   d7450:	42b5      	cmp	r5, r6
   d7452:	4602      	mov	r2, r0
   d7454:	460b      	mov	r3, r1
   d7456:	db1f      	blt.n	d7498 <scalbn+0x70>
   d7458:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d745c:	3c36      	subs	r4, #54	; 0x36
   d745e:	442c      	add	r4, r5
   d7460:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7464:	4284      	cmp	r4, r0
   d7466:	dc1f      	bgt.n	d74a8 <scalbn+0x80>
   d7468:	2c00      	cmp	r4, #0
   d746a:	dd2d      	ble.n	d74c8 <scalbn+0xa0>
   d746c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d7470:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d7474:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7478:	ec43 2b10 	vmov	d0, r2, r3
   d747c:	bd70      	pop	{r4, r5, r6, pc}
   d747e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7482:	4284      	cmp	r4, r0
   d7484:	d1eb      	bne.n	d745e <scalbn+0x36>
   d7486:	ee10 0a10 	vmov	r0, s0
   d748a:	4619      	mov	r1, r3
   d748c:	f000 f866 	bl	d755c <__adddf3>
   d7490:	ec41 0b10 	vmov	d0, r0, r1
   d7494:	bd70      	pop	{r4, r5, r6, pc}
   d7496:	bd70      	pop	{r4, r5, r6, pc}
   d7498:	a31f      	add	r3, pc, #124	; (adr r3, d7518 <scalbn+0xf0>)
   d749a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d749e:	f000 fa0f 	bl	d78c0 <__aeabi_dmul>
   d74a2:	ec41 0b10 	vmov	d0, r0, r1
   d74a6:	bd70      	pop	{r4, r5, r6, pc}
   d74a8:	ec43 2b11 	vmov	d1, r2, r3
   d74ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d7520 <scalbn+0xf8>
   d74b0:	f000 f840 	bl	d7534 <copysign>
   d74b4:	a31a      	add	r3, pc, #104	; (adr r3, d7520 <scalbn+0xf8>)
   d74b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74ba:	ec51 0b10 	vmov	r0, r1, d0
   d74be:	f000 f9ff 	bl	d78c0 <__aeabi_dmul>
   d74c2:	ec41 0b10 	vmov	d0, r0, r1
   d74c6:	bd70      	pop	{r4, r5, r6, pc}
   d74c8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d74cc:	da13      	bge.n	d74f6 <scalbn+0xce>
   d74ce:	f24c 3150 	movw	r1, #50000	; 0xc350
   d74d2:	428d      	cmp	r5, r1
   d74d4:	ec43 2b11 	vmov	d1, r2, r3
   d74d8:	dce8      	bgt.n	d74ac <scalbn+0x84>
   d74da:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d7518 <scalbn+0xf0>
   d74de:	f000 f829 	bl	d7534 <copysign>
   d74e2:	a30d      	add	r3, pc, #52	; (adr r3, d7518 <scalbn+0xf0>)
   d74e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74e8:	ec51 0b10 	vmov	r0, r1, d0
   d74ec:	f000 f9e8 	bl	d78c0 <__aeabi_dmul>
   d74f0:	ec41 0b10 	vmov	d0, r0, r1
   d74f4:	bd70      	pop	{r4, r5, r6, pc}
   d74f6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d74fa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d74fe:	3436      	adds	r4, #54	; 0x36
   d7500:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7504:	4610      	mov	r0, r2
   d7506:	4619      	mov	r1, r3
   d7508:	2200      	movs	r2, #0
   d750a:	4b09      	ldr	r3, [pc, #36]	; (d7530 <scalbn+0x108>)
   d750c:	f000 f9d8 	bl	d78c0 <__aeabi_dmul>
   d7510:	ec41 0b10 	vmov	d0, r0, r1
   d7514:	bd70      	pop	{r4, r5, r6, pc}
   d7516:	bf00      	nop
   d7518:	c2f8f359 	.word	0xc2f8f359
   d751c:	01a56e1f 	.word	0x01a56e1f
   d7520:	8800759c 	.word	0x8800759c
   d7524:	7e37e43c 	.word	0x7e37e43c
   d7528:	43500000 	.word	0x43500000
   d752c:	ffff3cb0 	.word	0xffff3cb0
   d7530:	3c900000 	.word	0x3c900000

000d7534 <copysign>:
   d7534:	ec53 2b10 	vmov	r2, r3, d0
   d7538:	ee11 0a90 	vmov	r0, s3
   d753c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d7540:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d7544:	ea41 0300 	orr.w	r3, r1, r0
   d7548:	ec43 2b10 	vmov	d0, r2, r3
   d754c:	4770      	bx	lr
   d754e:	bf00      	nop

000d7550 <__aeabi_drsub>:
   d7550:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7554:	e002      	b.n	d755c <__adddf3>
   d7556:	bf00      	nop

000d7558 <__aeabi_dsub>:
   d7558:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d755c <__adddf3>:
   d755c:	b530      	push	{r4, r5, lr}
   d755e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7562:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7566:	ea94 0f05 	teq	r4, r5
   d756a:	bf08      	it	eq
   d756c:	ea90 0f02 	teqeq	r0, r2
   d7570:	bf1f      	itttt	ne
   d7572:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7576:	ea55 0c02 	orrsne.w	ip, r5, r2
   d757a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d757e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7582:	f000 80e2 	beq.w	d774a <__adddf3+0x1ee>
   d7586:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d758a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d758e:	bfb8      	it	lt
   d7590:	426d      	neglt	r5, r5
   d7592:	dd0c      	ble.n	d75ae <__adddf3+0x52>
   d7594:	442c      	add	r4, r5
   d7596:	ea80 0202 	eor.w	r2, r0, r2
   d759a:	ea81 0303 	eor.w	r3, r1, r3
   d759e:	ea82 0000 	eor.w	r0, r2, r0
   d75a2:	ea83 0101 	eor.w	r1, r3, r1
   d75a6:	ea80 0202 	eor.w	r2, r0, r2
   d75aa:	ea81 0303 	eor.w	r3, r1, r3
   d75ae:	2d36      	cmp	r5, #54	; 0x36
   d75b0:	bf88      	it	hi
   d75b2:	bd30      	pophi	{r4, r5, pc}
   d75b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d75b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d75bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d75c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d75c4:	d002      	beq.n	d75cc <__adddf3+0x70>
   d75c6:	4240      	negs	r0, r0
   d75c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d75cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d75d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d75d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d75d8:	d002      	beq.n	d75e0 <__adddf3+0x84>
   d75da:	4252      	negs	r2, r2
   d75dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d75e0:	ea94 0f05 	teq	r4, r5
   d75e4:	f000 80a7 	beq.w	d7736 <__adddf3+0x1da>
   d75e8:	f1a4 0401 	sub.w	r4, r4, #1
   d75ec:	f1d5 0e20 	rsbs	lr, r5, #32
   d75f0:	db0d      	blt.n	d760e <__adddf3+0xb2>
   d75f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d75f6:	fa22 f205 	lsr.w	r2, r2, r5
   d75fa:	1880      	adds	r0, r0, r2
   d75fc:	f141 0100 	adc.w	r1, r1, #0
   d7600:	fa03 f20e 	lsl.w	r2, r3, lr
   d7604:	1880      	adds	r0, r0, r2
   d7606:	fa43 f305 	asr.w	r3, r3, r5
   d760a:	4159      	adcs	r1, r3
   d760c:	e00e      	b.n	d762c <__adddf3+0xd0>
   d760e:	f1a5 0520 	sub.w	r5, r5, #32
   d7612:	f10e 0e20 	add.w	lr, lr, #32
   d7616:	2a01      	cmp	r2, #1
   d7618:	fa03 fc0e 	lsl.w	ip, r3, lr
   d761c:	bf28      	it	cs
   d761e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7622:	fa43 f305 	asr.w	r3, r3, r5
   d7626:	18c0      	adds	r0, r0, r3
   d7628:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d762c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7630:	d507      	bpl.n	d7642 <__adddf3+0xe6>
   d7632:	f04f 0e00 	mov.w	lr, #0
   d7636:	f1dc 0c00 	rsbs	ip, ip, #0
   d763a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d763e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7642:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7646:	d31b      	bcc.n	d7680 <__adddf3+0x124>
   d7648:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d764c:	d30c      	bcc.n	d7668 <__adddf3+0x10c>
   d764e:	0849      	lsrs	r1, r1, #1
   d7650:	ea5f 0030 	movs.w	r0, r0, rrx
   d7654:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7658:	f104 0401 	add.w	r4, r4, #1
   d765c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7660:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7664:	f080 809a 	bcs.w	d779c <__adddf3+0x240>
   d7668:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d766c:	bf08      	it	eq
   d766e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7672:	f150 0000 	adcs.w	r0, r0, #0
   d7676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d767a:	ea41 0105 	orr.w	r1, r1, r5
   d767e:	bd30      	pop	{r4, r5, pc}
   d7680:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7684:	4140      	adcs	r0, r0
   d7686:	eb41 0101 	adc.w	r1, r1, r1
   d768a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d768e:	f1a4 0401 	sub.w	r4, r4, #1
   d7692:	d1e9      	bne.n	d7668 <__adddf3+0x10c>
   d7694:	f091 0f00 	teq	r1, #0
   d7698:	bf04      	itt	eq
   d769a:	4601      	moveq	r1, r0
   d769c:	2000      	moveq	r0, #0
   d769e:	fab1 f381 	clz	r3, r1
   d76a2:	bf08      	it	eq
   d76a4:	3320      	addeq	r3, #32
   d76a6:	f1a3 030b 	sub.w	r3, r3, #11
   d76aa:	f1b3 0220 	subs.w	r2, r3, #32
   d76ae:	da0c      	bge.n	d76ca <__adddf3+0x16e>
   d76b0:	320c      	adds	r2, #12
   d76b2:	dd08      	ble.n	d76c6 <__adddf3+0x16a>
   d76b4:	f102 0c14 	add.w	ip, r2, #20
   d76b8:	f1c2 020c 	rsb	r2, r2, #12
   d76bc:	fa01 f00c 	lsl.w	r0, r1, ip
   d76c0:	fa21 f102 	lsr.w	r1, r1, r2
   d76c4:	e00c      	b.n	d76e0 <__adddf3+0x184>
   d76c6:	f102 0214 	add.w	r2, r2, #20
   d76ca:	bfd8      	it	le
   d76cc:	f1c2 0c20 	rsble	ip, r2, #32
   d76d0:	fa01 f102 	lsl.w	r1, r1, r2
   d76d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d76d8:	bfdc      	itt	le
   d76da:	ea41 010c 	orrle.w	r1, r1, ip
   d76de:	4090      	lslle	r0, r2
   d76e0:	1ae4      	subs	r4, r4, r3
   d76e2:	bfa2      	ittt	ge
   d76e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d76e8:	4329      	orrge	r1, r5
   d76ea:	bd30      	popge	{r4, r5, pc}
   d76ec:	ea6f 0404 	mvn.w	r4, r4
   d76f0:	3c1f      	subs	r4, #31
   d76f2:	da1c      	bge.n	d772e <__adddf3+0x1d2>
   d76f4:	340c      	adds	r4, #12
   d76f6:	dc0e      	bgt.n	d7716 <__adddf3+0x1ba>
   d76f8:	f104 0414 	add.w	r4, r4, #20
   d76fc:	f1c4 0220 	rsb	r2, r4, #32
   d7700:	fa20 f004 	lsr.w	r0, r0, r4
   d7704:	fa01 f302 	lsl.w	r3, r1, r2
   d7708:	ea40 0003 	orr.w	r0, r0, r3
   d770c:	fa21 f304 	lsr.w	r3, r1, r4
   d7710:	ea45 0103 	orr.w	r1, r5, r3
   d7714:	bd30      	pop	{r4, r5, pc}
   d7716:	f1c4 040c 	rsb	r4, r4, #12
   d771a:	f1c4 0220 	rsb	r2, r4, #32
   d771e:	fa20 f002 	lsr.w	r0, r0, r2
   d7722:	fa01 f304 	lsl.w	r3, r1, r4
   d7726:	ea40 0003 	orr.w	r0, r0, r3
   d772a:	4629      	mov	r1, r5
   d772c:	bd30      	pop	{r4, r5, pc}
   d772e:	fa21 f004 	lsr.w	r0, r1, r4
   d7732:	4629      	mov	r1, r5
   d7734:	bd30      	pop	{r4, r5, pc}
   d7736:	f094 0f00 	teq	r4, #0
   d773a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d773e:	bf06      	itte	eq
   d7740:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7744:	3401      	addeq	r4, #1
   d7746:	3d01      	subne	r5, #1
   d7748:	e74e      	b.n	d75e8 <__adddf3+0x8c>
   d774a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d774e:	bf18      	it	ne
   d7750:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7754:	d029      	beq.n	d77aa <__adddf3+0x24e>
   d7756:	ea94 0f05 	teq	r4, r5
   d775a:	bf08      	it	eq
   d775c:	ea90 0f02 	teqeq	r0, r2
   d7760:	d005      	beq.n	d776e <__adddf3+0x212>
   d7762:	ea54 0c00 	orrs.w	ip, r4, r0
   d7766:	bf04      	itt	eq
   d7768:	4619      	moveq	r1, r3
   d776a:	4610      	moveq	r0, r2
   d776c:	bd30      	pop	{r4, r5, pc}
   d776e:	ea91 0f03 	teq	r1, r3
   d7772:	bf1e      	ittt	ne
   d7774:	2100      	movne	r1, #0
   d7776:	2000      	movne	r0, #0
   d7778:	bd30      	popne	{r4, r5, pc}
   d777a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d777e:	d105      	bne.n	d778c <__adddf3+0x230>
   d7780:	0040      	lsls	r0, r0, #1
   d7782:	4149      	adcs	r1, r1
   d7784:	bf28      	it	cs
   d7786:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d778a:	bd30      	pop	{r4, r5, pc}
   d778c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7790:	bf3c      	itt	cc
   d7792:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7796:	bd30      	popcc	{r4, r5, pc}
   d7798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d779c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d77a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77a4:	f04f 0000 	mov.w	r0, #0
   d77a8:	bd30      	pop	{r4, r5, pc}
   d77aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d77ae:	bf1a      	itte	ne
   d77b0:	4619      	movne	r1, r3
   d77b2:	4610      	movne	r0, r2
   d77b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d77b8:	bf1c      	itt	ne
   d77ba:	460b      	movne	r3, r1
   d77bc:	4602      	movne	r2, r0
   d77be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77c2:	bf06      	itte	eq
   d77c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d77c8:	ea91 0f03 	teqeq	r1, r3
   d77cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d77d0:	bd30      	pop	{r4, r5, pc}
   d77d2:	bf00      	nop

000d77d4 <__aeabi_ui2d>:
   d77d4:	f090 0f00 	teq	r0, #0
   d77d8:	bf04      	itt	eq
   d77da:	2100      	moveq	r1, #0
   d77dc:	4770      	bxeq	lr
   d77de:	b530      	push	{r4, r5, lr}
   d77e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d77e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d77e8:	f04f 0500 	mov.w	r5, #0
   d77ec:	f04f 0100 	mov.w	r1, #0
   d77f0:	e750      	b.n	d7694 <__adddf3+0x138>
   d77f2:	bf00      	nop

000d77f4 <__aeabi_i2d>:
   d77f4:	f090 0f00 	teq	r0, #0
   d77f8:	bf04      	itt	eq
   d77fa:	2100      	moveq	r1, #0
   d77fc:	4770      	bxeq	lr
   d77fe:	b530      	push	{r4, r5, lr}
   d7800:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7804:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7808:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d780c:	bf48      	it	mi
   d780e:	4240      	negmi	r0, r0
   d7810:	f04f 0100 	mov.w	r1, #0
   d7814:	e73e      	b.n	d7694 <__adddf3+0x138>
   d7816:	bf00      	nop

000d7818 <__aeabi_f2d>:
   d7818:	0042      	lsls	r2, r0, #1
   d781a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d781e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7822:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7826:	bf1f      	itttt	ne
   d7828:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d782c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7830:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7834:	4770      	bxne	lr
   d7836:	f092 0f00 	teq	r2, #0
   d783a:	bf14      	ite	ne
   d783c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7840:	4770      	bxeq	lr
   d7842:	b530      	push	{r4, r5, lr}
   d7844:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d784c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7850:	e720      	b.n	d7694 <__adddf3+0x138>
   d7852:	bf00      	nop

000d7854 <__aeabi_ul2d>:
   d7854:	ea50 0201 	orrs.w	r2, r0, r1
   d7858:	bf08      	it	eq
   d785a:	4770      	bxeq	lr
   d785c:	b530      	push	{r4, r5, lr}
   d785e:	f04f 0500 	mov.w	r5, #0
   d7862:	e00a      	b.n	d787a <__aeabi_l2d+0x16>

000d7864 <__aeabi_l2d>:
   d7864:	ea50 0201 	orrs.w	r2, r0, r1
   d7868:	bf08      	it	eq
   d786a:	4770      	bxeq	lr
   d786c:	b530      	push	{r4, r5, lr}
   d786e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7872:	d502      	bpl.n	d787a <__aeabi_l2d+0x16>
   d7874:	4240      	negs	r0, r0
   d7876:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d787a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d787e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7882:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7886:	f43f aedc 	beq.w	d7642 <__adddf3+0xe6>
   d788a:	f04f 0203 	mov.w	r2, #3
   d788e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7892:	bf18      	it	ne
   d7894:	3203      	addne	r2, #3
   d7896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d789a:	bf18      	it	ne
   d789c:	3203      	addne	r2, #3
   d789e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d78a2:	f1c2 0320 	rsb	r3, r2, #32
   d78a6:	fa00 fc03 	lsl.w	ip, r0, r3
   d78aa:	fa20 f002 	lsr.w	r0, r0, r2
   d78ae:	fa01 fe03 	lsl.w	lr, r1, r3
   d78b2:	ea40 000e 	orr.w	r0, r0, lr
   d78b6:	fa21 f102 	lsr.w	r1, r1, r2
   d78ba:	4414      	add	r4, r2
   d78bc:	e6c1      	b.n	d7642 <__adddf3+0xe6>
   d78be:	bf00      	nop

000d78c0 <__aeabi_dmul>:
   d78c0:	b570      	push	{r4, r5, r6, lr}
   d78c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d78c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d78ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d78ce:	bf1d      	ittte	ne
   d78d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d78d4:	ea94 0f0c 	teqne	r4, ip
   d78d8:	ea95 0f0c 	teqne	r5, ip
   d78dc:	f000 f8de 	bleq	d7a9c <__aeabi_dmul+0x1dc>
   d78e0:	442c      	add	r4, r5
   d78e2:	ea81 0603 	eor.w	r6, r1, r3
   d78e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d78ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d78ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d78f2:	bf18      	it	ne
   d78f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d78f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d78fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7900:	d038      	beq.n	d7974 <__aeabi_dmul+0xb4>
   d7902:	fba0 ce02 	umull	ip, lr, r0, r2
   d7906:	f04f 0500 	mov.w	r5, #0
   d790a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d790e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7912:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7916:	f04f 0600 	mov.w	r6, #0
   d791a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d791e:	f09c 0f00 	teq	ip, #0
   d7922:	bf18      	it	ne
   d7924:	f04e 0e01 	orrne.w	lr, lr, #1
   d7928:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d792c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7930:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7934:	d204      	bcs.n	d7940 <__aeabi_dmul+0x80>
   d7936:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d793a:	416d      	adcs	r5, r5
   d793c:	eb46 0606 	adc.w	r6, r6, r6
   d7940:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7944:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7948:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d794c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7950:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7954:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7958:	bf88      	it	hi
   d795a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d795e:	d81e      	bhi.n	d799e <__aeabi_dmul+0xde>
   d7960:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7964:	bf08      	it	eq
   d7966:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d796a:	f150 0000 	adcs.w	r0, r0, #0
   d796e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7972:	bd70      	pop	{r4, r5, r6, pc}
   d7974:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7978:	ea46 0101 	orr.w	r1, r6, r1
   d797c:	ea40 0002 	orr.w	r0, r0, r2
   d7980:	ea81 0103 	eor.w	r1, r1, r3
   d7984:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7988:	bfc2      	ittt	gt
   d798a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d798e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7992:	bd70      	popgt	{r4, r5, r6, pc}
   d7994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7998:	f04f 0e00 	mov.w	lr, #0
   d799c:	3c01      	subs	r4, #1
   d799e:	f300 80ab 	bgt.w	d7af8 <__aeabi_dmul+0x238>
   d79a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d79a6:	bfde      	ittt	le
   d79a8:	2000      	movle	r0, #0
   d79aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d79ae:	bd70      	pople	{r4, r5, r6, pc}
   d79b0:	f1c4 0400 	rsb	r4, r4, #0
   d79b4:	3c20      	subs	r4, #32
   d79b6:	da35      	bge.n	d7a24 <__aeabi_dmul+0x164>
   d79b8:	340c      	adds	r4, #12
   d79ba:	dc1b      	bgt.n	d79f4 <__aeabi_dmul+0x134>
   d79bc:	f104 0414 	add.w	r4, r4, #20
   d79c0:	f1c4 0520 	rsb	r5, r4, #32
   d79c4:	fa00 f305 	lsl.w	r3, r0, r5
   d79c8:	fa20 f004 	lsr.w	r0, r0, r4
   d79cc:	fa01 f205 	lsl.w	r2, r1, r5
   d79d0:	ea40 0002 	orr.w	r0, r0, r2
   d79d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d79d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d79dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d79e0:	fa21 f604 	lsr.w	r6, r1, r4
   d79e4:	eb42 0106 	adc.w	r1, r2, r6
   d79e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d79ec:	bf08      	it	eq
   d79ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d79f2:	bd70      	pop	{r4, r5, r6, pc}
   d79f4:	f1c4 040c 	rsb	r4, r4, #12
   d79f8:	f1c4 0520 	rsb	r5, r4, #32
   d79fc:	fa00 f304 	lsl.w	r3, r0, r4
   d7a00:	fa20 f005 	lsr.w	r0, r0, r5
   d7a04:	fa01 f204 	lsl.w	r2, r1, r4
   d7a08:	ea40 0002 	orr.w	r0, r0, r2
   d7a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a14:	f141 0100 	adc.w	r1, r1, #0
   d7a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a1c:	bf08      	it	eq
   d7a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a22:	bd70      	pop	{r4, r5, r6, pc}
   d7a24:	f1c4 0520 	rsb	r5, r4, #32
   d7a28:	fa00 f205 	lsl.w	r2, r0, r5
   d7a2c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7a30:	fa20 f304 	lsr.w	r3, r0, r4
   d7a34:	fa01 f205 	lsl.w	r2, r1, r5
   d7a38:	ea43 0302 	orr.w	r3, r3, r2
   d7a3c:	fa21 f004 	lsr.w	r0, r1, r4
   d7a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a44:	fa21 f204 	lsr.w	r2, r1, r4
   d7a48:	ea20 0002 	bic.w	r0, r0, r2
   d7a4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a54:	bf08      	it	eq
   d7a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a5a:	bd70      	pop	{r4, r5, r6, pc}
   d7a5c:	f094 0f00 	teq	r4, #0
   d7a60:	d10f      	bne.n	d7a82 <__aeabi_dmul+0x1c2>
   d7a62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7a66:	0040      	lsls	r0, r0, #1
   d7a68:	eb41 0101 	adc.w	r1, r1, r1
   d7a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a70:	bf08      	it	eq
   d7a72:	3c01      	subeq	r4, #1
   d7a74:	d0f7      	beq.n	d7a66 <__aeabi_dmul+0x1a6>
   d7a76:	ea41 0106 	orr.w	r1, r1, r6
   d7a7a:	f095 0f00 	teq	r5, #0
   d7a7e:	bf18      	it	ne
   d7a80:	4770      	bxne	lr
   d7a82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7a86:	0052      	lsls	r2, r2, #1
   d7a88:	eb43 0303 	adc.w	r3, r3, r3
   d7a8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7a90:	bf08      	it	eq
   d7a92:	3d01      	subeq	r5, #1
   d7a94:	d0f7      	beq.n	d7a86 <__aeabi_dmul+0x1c6>
   d7a96:	ea43 0306 	orr.w	r3, r3, r6
   d7a9a:	4770      	bx	lr
   d7a9c:	ea94 0f0c 	teq	r4, ip
   d7aa0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7aa4:	bf18      	it	ne
   d7aa6:	ea95 0f0c 	teqne	r5, ip
   d7aaa:	d00c      	beq.n	d7ac6 <__aeabi_dmul+0x206>
   d7aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ab0:	bf18      	it	ne
   d7ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ab6:	d1d1      	bne.n	d7a5c <__aeabi_dmul+0x19c>
   d7ab8:	ea81 0103 	eor.w	r1, r1, r3
   d7abc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ac0:	f04f 0000 	mov.w	r0, #0
   d7ac4:	bd70      	pop	{r4, r5, r6, pc}
   d7ac6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7aca:	bf06      	itte	eq
   d7acc:	4610      	moveq	r0, r2
   d7ace:	4619      	moveq	r1, r3
   d7ad0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ad4:	d019      	beq.n	d7b0a <__aeabi_dmul+0x24a>
   d7ad6:	ea94 0f0c 	teq	r4, ip
   d7ada:	d102      	bne.n	d7ae2 <__aeabi_dmul+0x222>
   d7adc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7ae0:	d113      	bne.n	d7b0a <__aeabi_dmul+0x24a>
   d7ae2:	ea95 0f0c 	teq	r5, ip
   d7ae6:	d105      	bne.n	d7af4 <__aeabi_dmul+0x234>
   d7ae8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7aec:	bf1c      	itt	ne
   d7aee:	4610      	movne	r0, r2
   d7af0:	4619      	movne	r1, r3
   d7af2:	d10a      	bne.n	d7b0a <__aeabi_dmul+0x24a>
   d7af4:	ea81 0103 	eor.w	r1, r1, r3
   d7af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7afc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b04:	f04f 0000 	mov.w	r0, #0
   d7b08:	bd70      	pop	{r4, r5, r6, pc}
   d7b0a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b0e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7b12:	bd70      	pop	{r4, r5, r6, pc}

000d7b14 <__aeabi_ddiv>:
   d7b14:	b570      	push	{r4, r5, r6, lr}
   d7b16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7b1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7b1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7b22:	bf1d      	ittte	ne
   d7b24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7b28:	ea94 0f0c 	teqne	r4, ip
   d7b2c:	ea95 0f0c 	teqne	r5, ip
   d7b30:	f000 f8a7 	bleq	d7c82 <__aeabi_ddiv+0x16e>
   d7b34:	eba4 0405 	sub.w	r4, r4, r5
   d7b38:	ea81 0e03 	eor.w	lr, r1, r3
   d7b3c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b44:	f000 8088 	beq.w	d7c58 <__aeabi_ddiv+0x144>
   d7b48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7b50:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7b54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7b58:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7b5c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7b60:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7b64:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7b68:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7b6c:	429d      	cmp	r5, r3
   d7b6e:	bf08      	it	eq
   d7b70:	4296      	cmpeq	r6, r2
   d7b72:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7b76:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7b7a:	d202      	bcs.n	d7b82 <__aeabi_ddiv+0x6e>
   d7b7c:	085b      	lsrs	r3, r3, #1
   d7b7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7b82:	1ab6      	subs	r6, r6, r2
   d7b84:	eb65 0503 	sbc.w	r5, r5, r3
   d7b88:	085b      	lsrs	r3, r3, #1
   d7b8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7b8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7b92:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7b96:	ebb6 0e02 	subs.w	lr, r6, r2
   d7b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7b9e:	bf22      	ittt	cs
   d7ba0:	1ab6      	subcs	r6, r6, r2
   d7ba2:	4675      	movcs	r5, lr
   d7ba4:	ea40 000c 	orrcs.w	r0, r0, ip
   d7ba8:	085b      	lsrs	r3, r3, #1
   d7baa:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bae:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bb6:	bf22      	ittt	cs
   d7bb8:	1ab6      	subcs	r6, r6, r2
   d7bba:	4675      	movcs	r5, lr
   d7bbc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7bc0:	085b      	lsrs	r3, r3, #1
   d7bc2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bce:	bf22      	ittt	cs
   d7bd0:	1ab6      	subcs	r6, r6, r2
   d7bd2:	4675      	movcs	r5, lr
   d7bd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7bd8:	085b      	lsrs	r3, r3, #1
   d7bda:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bde:	ebb6 0e02 	subs.w	lr, r6, r2
   d7be2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7be6:	bf22      	ittt	cs
   d7be8:	1ab6      	subcs	r6, r6, r2
   d7bea:	4675      	movcs	r5, lr
   d7bec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7bf0:	ea55 0e06 	orrs.w	lr, r5, r6
   d7bf4:	d018      	beq.n	d7c28 <__aeabi_ddiv+0x114>
   d7bf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7bfa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7bfe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7c02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7c06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7c0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7c0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7c12:	d1c0      	bne.n	d7b96 <__aeabi_ddiv+0x82>
   d7c14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c18:	d10b      	bne.n	d7c32 <__aeabi_ddiv+0x11e>
   d7c1a:	ea41 0100 	orr.w	r1, r1, r0
   d7c1e:	f04f 0000 	mov.w	r0, #0
   d7c22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7c26:	e7b6      	b.n	d7b96 <__aeabi_ddiv+0x82>
   d7c28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c2c:	bf04      	itt	eq
   d7c2e:	4301      	orreq	r1, r0
   d7c30:	2000      	moveq	r0, #0
   d7c32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c36:	bf88      	it	hi
   d7c38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c3c:	f63f aeaf 	bhi.w	d799e <__aeabi_dmul+0xde>
   d7c40:	ebb5 0c03 	subs.w	ip, r5, r3
   d7c44:	bf04      	itt	eq
   d7c46:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7c4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c4e:	f150 0000 	adcs.w	r0, r0, #0
   d7c52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c56:	bd70      	pop	{r4, r5, r6, pc}
   d7c58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7c5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7c60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7c64:	bfc2      	ittt	gt
   d7c66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7c6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7c6e:	bd70      	popgt	{r4, r5, r6, pc}
   d7c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c74:	f04f 0e00 	mov.w	lr, #0
   d7c78:	3c01      	subs	r4, #1
   d7c7a:	e690      	b.n	d799e <__aeabi_dmul+0xde>
   d7c7c:	ea45 0e06 	orr.w	lr, r5, r6
   d7c80:	e68d      	b.n	d799e <__aeabi_dmul+0xde>
   d7c82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7c86:	ea94 0f0c 	teq	r4, ip
   d7c8a:	bf08      	it	eq
   d7c8c:	ea95 0f0c 	teqeq	r5, ip
   d7c90:	f43f af3b 	beq.w	d7b0a <__aeabi_dmul+0x24a>
   d7c94:	ea94 0f0c 	teq	r4, ip
   d7c98:	d10a      	bne.n	d7cb0 <__aeabi_ddiv+0x19c>
   d7c9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7c9e:	f47f af34 	bne.w	d7b0a <__aeabi_dmul+0x24a>
   d7ca2:	ea95 0f0c 	teq	r5, ip
   d7ca6:	f47f af25 	bne.w	d7af4 <__aeabi_dmul+0x234>
   d7caa:	4610      	mov	r0, r2
   d7cac:	4619      	mov	r1, r3
   d7cae:	e72c      	b.n	d7b0a <__aeabi_dmul+0x24a>
   d7cb0:	ea95 0f0c 	teq	r5, ip
   d7cb4:	d106      	bne.n	d7cc4 <__aeabi_ddiv+0x1b0>
   d7cb6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7cba:	f43f aefd 	beq.w	d7ab8 <__aeabi_dmul+0x1f8>
   d7cbe:	4610      	mov	r0, r2
   d7cc0:	4619      	mov	r1, r3
   d7cc2:	e722      	b.n	d7b0a <__aeabi_dmul+0x24a>
   d7cc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7cc8:	bf18      	it	ne
   d7cca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7cce:	f47f aec5 	bne.w	d7a5c <__aeabi_dmul+0x19c>
   d7cd2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7cd6:	f47f af0d 	bne.w	d7af4 <__aeabi_dmul+0x234>
   d7cda:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7cde:	f47f aeeb 	bne.w	d7ab8 <__aeabi_dmul+0x1f8>
   d7ce2:	e712      	b.n	d7b0a <__aeabi_dmul+0x24a>

000d7ce4 <__gedf2>:
   d7ce4:	f04f 3cff 	mov.w	ip, #4294967295
   d7ce8:	e006      	b.n	d7cf8 <__cmpdf2+0x4>
   d7cea:	bf00      	nop

000d7cec <__ledf2>:
   d7cec:	f04f 0c01 	mov.w	ip, #1
   d7cf0:	e002      	b.n	d7cf8 <__cmpdf2+0x4>
   d7cf2:	bf00      	nop

000d7cf4 <__cmpdf2>:
   d7cf4:	f04f 0c01 	mov.w	ip, #1
   d7cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7cfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d08:	bf18      	it	ne
   d7d0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7d0e:	d01b      	beq.n	d7d48 <__cmpdf2+0x54>
   d7d10:	b001      	add	sp, #4
   d7d12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7d16:	bf0c      	ite	eq
   d7d18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7d1c:	ea91 0f03 	teqne	r1, r3
   d7d20:	bf02      	ittt	eq
   d7d22:	ea90 0f02 	teqeq	r0, r2
   d7d26:	2000      	moveq	r0, #0
   d7d28:	4770      	bxeq	lr
   d7d2a:	f110 0f00 	cmn.w	r0, #0
   d7d2e:	ea91 0f03 	teq	r1, r3
   d7d32:	bf58      	it	pl
   d7d34:	4299      	cmppl	r1, r3
   d7d36:	bf08      	it	eq
   d7d38:	4290      	cmpeq	r0, r2
   d7d3a:	bf2c      	ite	cs
   d7d3c:	17d8      	asrcs	r0, r3, #31
   d7d3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7d42:	f040 0001 	orr.w	r0, r0, #1
   d7d46:	4770      	bx	lr
   d7d48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d50:	d102      	bne.n	d7d58 <__cmpdf2+0x64>
   d7d52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7d56:	d107      	bne.n	d7d68 <__cmpdf2+0x74>
   d7d58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d60:	d1d6      	bne.n	d7d10 <__cmpdf2+0x1c>
   d7d62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7d66:	d0d3      	beq.n	d7d10 <__cmpdf2+0x1c>
   d7d68:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7d6c:	4770      	bx	lr
   d7d6e:	bf00      	nop

000d7d70 <__aeabi_cdrcmple>:
   d7d70:	4684      	mov	ip, r0
   d7d72:	4610      	mov	r0, r2
   d7d74:	4662      	mov	r2, ip
   d7d76:	468c      	mov	ip, r1
   d7d78:	4619      	mov	r1, r3
   d7d7a:	4663      	mov	r3, ip
   d7d7c:	e000      	b.n	d7d80 <__aeabi_cdcmpeq>
   d7d7e:	bf00      	nop

000d7d80 <__aeabi_cdcmpeq>:
   d7d80:	b501      	push	{r0, lr}
   d7d82:	f7ff ffb7 	bl	d7cf4 <__cmpdf2>
   d7d86:	2800      	cmp	r0, #0
   d7d88:	bf48      	it	mi
   d7d8a:	f110 0f00 	cmnmi.w	r0, #0
   d7d8e:	bd01      	pop	{r0, pc}

000d7d90 <__aeabi_dcmpeq>:
   d7d90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7d94:	f7ff fff4 	bl	d7d80 <__aeabi_cdcmpeq>
   d7d98:	bf0c      	ite	eq
   d7d9a:	2001      	moveq	r0, #1
   d7d9c:	2000      	movne	r0, #0
   d7d9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7da2:	bf00      	nop

000d7da4 <__aeabi_dcmplt>:
   d7da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7da8:	f7ff ffea 	bl	d7d80 <__aeabi_cdcmpeq>
   d7dac:	bf34      	ite	cc
   d7dae:	2001      	movcc	r0, #1
   d7db0:	2000      	movcs	r0, #0
   d7db2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7db6:	bf00      	nop

000d7db8 <__aeabi_dcmple>:
   d7db8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7dbc:	f7ff ffe0 	bl	d7d80 <__aeabi_cdcmpeq>
   d7dc0:	bf94      	ite	ls
   d7dc2:	2001      	movls	r0, #1
   d7dc4:	2000      	movhi	r0, #0
   d7dc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dca:	bf00      	nop

000d7dcc <__aeabi_dcmpge>:
   d7dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7dd0:	f7ff ffce 	bl	d7d70 <__aeabi_cdrcmple>
   d7dd4:	bf94      	ite	ls
   d7dd6:	2001      	movls	r0, #1
   d7dd8:	2000      	movhi	r0, #0
   d7dda:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dde:	bf00      	nop

000d7de0 <__aeabi_dcmpgt>:
   d7de0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7de4:	f7ff ffc4 	bl	d7d70 <__aeabi_cdrcmple>
   d7de8:	bf34      	ite	cc
   d7dea:	2001      	movcc	r0, #1
   d7dec:	2000      	movcs	r0, #0
   d7dee:	f85d fb08 	ldr.w	pc, [sp], #8
   d7df2:	bf00      	nop

000d7df4 <__aeabi_dcmpun>:
   d7df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7dfc:	d102      	bne.n	d7e04 <__aeabi_dcmpun+0x10>
   d7dfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7e02:	d10a      	bne.n	d7e1a <__aeabi_dcmpun+0x26>
   d7e04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7e08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7e0c:	d102      	bne.n	d7e14 <__aeabi_dcmpun+0x20>
   d7e0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7e12:	d102      	bne.n	d7e1a <__aeabi_dcmpun+0x26>
   d7e14:	f04f 0000 	mov.w	r0, #0
   d7e18:	4770      	bx	lr
   d7e1a:	f04f 0001 	mov.w	r0, #1
   d7e1e:	4770      	bx	lr

000d7e20 <__aeabi_d2iz>:
   d7e20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7e24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7e28:	d215      	bcs.n	d7e56 <__aeabi_d2iz+0x36>
   d7e2a:	d511      	bpl.n	d7e50 <__aeabi_d2iz+0x30>
   d7e2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7e30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7e34:	d912      	bls.n	d7e5c <__aeabi_d2iz+0x3c>
   d7e36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7e3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7e42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7e46:	fa23 f002 	lsr.w	r0, r3, r2
   d7e4a:	bf18      	it	ne
   d7e4c:	4240      	negne	r0, r0
   d7e4e:	4770      	bx	lr
   d7e50:	f04f 0000 	mov.w	r0, #0
   d7e54:	4770      	bx	lr
   d7e56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7e5a:	d105      	bne.n	d7e68 <__aeabi_d2iz+0x48>
   d7e5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7e60:	bf08      	it	eq
   d7e62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7e66:	4770      	bx	lr
   d7e68:	f04f 0000 	mov.w	r0, #0
   d7e6c:	4770      	bx	lr
   d7e6e:	bf00      	nop

000d7e70 <__aeabi_d2uiz>:
   d7e70:	004a      	lsls	r2, r1, #1
   d7e72:	d211      	bcs.n	d7e98 <__aeabi_d2uiz+0x28>
   d7e74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7e78:	d211      	bcs.n	d7e9e <__aeabi_d2uiz+0x2e>
   d7e7a:	d50d      	bpl.n	d7e98 <__aeabi_d2uiz+0x28>
   d7e7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7e80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7e84:	d40e      	bmi.n	d7ea4 <__aeabi_d2uiz+0x34>
   d7e86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7e8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7e92:	fa23 f002 	lsr.w	r0, r3, r2
   d7e96:	4770      	bx	lr
   d7e98:	f04f 0000 	mov.w	r0, #0
   d7e9c:	4770      	bx	lr
   d7e9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7ea2:	d102      	bne.n	d7eaa <__aeabi_d2uiz+0x3a>
   d7ea4:	f04f 30ff 	mov.w	r0, #4294967295
   d7ea8:	4770      	bx	lr
   d7eaa:	f04f 0000 	mov.w	r0, #0
   d7eae:	4770      	bx	lr

000d7eb0 <__aeabi_d2f>:
   d7eb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7eb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7eb8:	bf24      	itt	cs
   d7eba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7ebe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7ec2:	d90d      	bls.n	d7ee0 <__aeabi_d2f+0x30>
   d7ec4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7ec8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7ecc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7ed0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7ed4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7ed8:	bf08      	it	eq
   d7eda:	f020 0001 	biceq.w	r0, r0, #1
   d7ede:	4770      	bx	lr
   d7ee0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7ee4:	d121      	bne.n	d7f2a <__aeabi_d2f+0x7a>
   d7ee6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7eea:	bfbc      	itt	lt
   d7eec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7ef0:	4770      	bxlt	lr
   d7ef2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ef6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7efa:	f1c2 0218 	rsb	r2, r2, #24
   d7efe:	f1c2 0c20 	rsb	ip, r2, #32
   d7f02:	fa10 f30c 	lsls.w	r3, r0, ip
   d7f06:	fa20 f002 	lsr.w	r0, r0, r2
   d7f0a:	bf18      	it	ne
   d7f0c:	f040 0001 	orrne.w	r0, r0, #1
   d7f10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7f14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7f18:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7f1c:	ea40 000c 	orr.w	r0, r0, ip
   d7f20:	fa23 f302 	lsr.w	r3, r3, r2
   d7f24:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7f28:	e7cc      	b.n	d7ec4 <__aeabi_d2f+0x14>
   d7f2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7f2e:	d107      	bne.n	d7f40 <__aeabi_d2f+0x90>
   d7f30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7f34:	bf1e      	ittt	ne
   d7f36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7f3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7f3e:	4770      	bxne	lr
   d7f40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7f44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7f48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7f4c:	4770      	bx	lr
   d7f4e:	bf00      	nop

000d7f50 <__aeabi_frsub>:
   d7f50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d7f54:	e002      	b.n	d7f5c <__addsf3>
   d7f56:	bf00      	nop

000d7f58 <__aeabi_fsub>:
   d7f58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d7f5c <__addsf3>:
   d7f5c:	0042      	lsls	r2, r0, #1
   d7f5e:	bf1f      	itttt	ne
   d7f60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d7f64:	ea92 0f03 	teqne	r2, r3
   d7f68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d7f6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d7f70:	d06a      	beq.n	d8048 <__addsf3+0xec>
   d7f72:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d7f76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d7f7a:	bfc1      	itttt	gt
   d7f7c:	18d2      	addgt	r2, r2, r3
   d7f7e:	4041      	eorgt	r1, r0
   d7f80:	4048      	eorgt	r0, r1
   d7f82:	4041      	eorgt	r1, r0
   d7f84:	bfb8      	it	lt
   d7f86:	425b      	neglt	r3, r3
   d7f88:	2b19      	cmp	r3, #25
   d7f8a:	bf88      	it	hi
   d7f8c:	4770      	bxhi	lr
   d7f8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d7f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7f96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d7f9a:	bf18      	it	ne
   d7f9c:	4240      	negne	r0, r0
   d7f9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7fa2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d7fa6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d7faa:	bf18      	it	ne
   d7fac:	4249      	negne	r1, r1
   d7fae:	ea92 0f03 	teq	r2, r3
   d7fb2:	d03f      	beq.n	d8034 <__addsf3+0xd8>
   d7fb4:	f1a2 0201 	sub.w	r2, r2, #1
   d7fb8:	fa41 fc03 	asr.w	ip, r1, r3
   d7fbc:	eb10 000c 	adds.w	r0, r0, ip
   d7fc0:	f1c3 0320 	rsb	r3, r3, #32
   d7fc4:	fa01 f103 	lsl.w	r1, r1, r3
   d7fc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d7fcc:	d502      	bpl.n	d7fd4 <__addsf3+0x78>
   d7fce:	4249      	negs	r1, r1
   d7fd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d7fd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d7fd8:	d313      	bcc.n	d8002 <__addsf3+0xa6>
   d7fda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d7fde:	d306      	bcc.n	d7fee <__addsf3+0x92>
   d7fe0:	0840      	lsrs	r0, r0, #1
   d7fe2:	ea4f 0131 	mov.w	r1, r1, rrx
   d7fe6:	f102 0201 	add.w	r2, r2, #1
   d7fea:	2afe      	cmp	r2, #254	; 0xfe
   d7fec:	d251      	bcs.n	d8092 <__addsf3+0x136>
   d7fee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d7ff2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d7ff6:	bf08      	it	eq
   d7ff8:	f020 0001 	biceq.w	r0, r0, #1
   d7ffc:	ea40 0003 	orr.w	r0, r0, r3
   d8000:	4770      	bx	lr
   d8002:	0049      	lsls	r1, r1, #1
   d8004:	eb40 0000 	adc.w	r0, r0, r0
   d8008:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d800c:	f1a2 0201 	sub.w	r2, r2, #1
   d8010:	d1ed      	bne.n	d7fee <__addsf3+0x92>
   d8012:	fab0 fc80 	clz	ip, r0
   d8016:	f1ac 0c08 	sub.w	ip, ip, #8
   d801a:	ebb2 020c 	subs.w	r2, r2, ip
   d801e:	fa00 f00c 	lsl.w	r0, r0, ip
   d8022:	bfaa      	itet	ge
   d8024:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d8028:	4252      	neglt	r2, r2
   d802a:	4318      	orrge	r0, r3
   d802c:	bfbc      	itt	lt
   d802e:	40d0      	lsrlt	r0, r2
   d8030:	4318      	orrlt	r0, r3
   d8032:	4770      	bx	lr
   d8034:	f092 0f00 	teq	r2, #0
   d8038:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d803c:	bf06      	itte	eq
   d803e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d8042:	3201      	addeq	r2, #1
   d8044:	3b01      	subne	r3, #1
   d8046:	e7b5      	b.n	d7fb4 <__addsf3+0x58>
   d8048:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d804c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d8050:	bf18      	it	ne
   d8052:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8056:	d021      	beq.n	d809c <__addsf3+0x140>
   d8058:	ea92 0f03 	teq	r2, r3
   d805c:	d004      	beq.n	d8068 <__addsf3+0x10c>
   d805e:	f092 0f00 	teq	r2, #0
   d8062:	bf08      	it	eq
   d8064:	4608      	moveq	r0, r1
   d8066:	4770      	bx	lr
   d8068:	ea90 0f01 	teq	r0, r1
   d806c:	bf1c      	itt	ne
   d806e:	2000      	movne	r0, #0
   d8070:	4770      	bxne	lr
   d8072:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d8076:	d104      	bne.n	d8082 <__addsf3+0x126>
   d8078:	0040      	lsls	r0, r0, #1
   d807a:	bf28      	it	cs
   d807c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d8080:	4770      	bx	lr
   d8082:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d8086:	bf3c      	itt	cc
   d8088:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d808c:	4770      	bxcc	lr
   d808e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8092:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d8096:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d809a:	4770      	bx	lr
   d809c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d80a0:	bf16      	itet	ne
   d80a2:	4608      	movne	r0, r1
   d80a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d80a8:	4601      	movne	r1, r0
   d80aa:	0242      	lsls	r2, r0, #9
   d80ac:	bf06      	itte	eq
   d80ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d80b2:	ea90 0f01 	teqeq	r0, r1
   d80b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d80ba:	4770      	bx	lr

000d80bc <__aeabi_ui2f>:
   d80bc:	f04f 0300 	mov.w	r3, #0
   d80c0:	e004      	b.n	d80cc <__aeabi_i2f+0x8>
   d80c2:	bf00      	nop

000d80c4 <__aeabi_i2f>:
   d80c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d80c8:	bf48      	it	mi
   d80ca:	4240      	negmi	r0, r0
   d80cc:	ea5f 0c00 	movs.w	ip, r0
   d80d0:	bf08      	it	eq
   d80d2:	4770      	bxeq	lr
   d80d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d80d8:	4601      	mov	r1, r0
   d80da:	f04f 0000 	mov.w	r0, #0
   d80de:	e01c      	b.n	d811a <__aeabi_l2f+0x2a>

000d80e0 <__aeabi_ul2f>:
   d80e0:	ea50 0201 	orrs.w	r2, r0, r1
   d80e4:	bf08      	it	eq
   d80e6:	4770      	bxeq	lr
   d80e8:	f04f 0300 	mov.w	r3, #0
   d80ec:	e00a      	b.n	d8104 <__aeabi_l2f+0x14>
   d80ee:	bf00      	nop

000d80f0 <__aeabi_l2f>:
   d80f0:	ea50 0201 	orrs.w	r2, r0, r1
   d80f4:	bf08      	it	eq
   d80f6:	4770      	bxeq	lr
   d80f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d80fc:	d502      	bpl.n	d8104 <__aeabi_l2f+0x14>
   d80fe:	4240      	negs	r0, r0
   d8100:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8104:	ea5f 0c01 	movs.w	ip, r1
   d8108:	bf02      	ittt	eq
   d810a:	4684      	moveq	ip, r0
   d810c:	4601      	moveq	r1, r0
   d810e:	2000      	moveq	r0, #0
   d8110:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d8114:	bf08      	it	eq
   d8116:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d811a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d811e:	fabc f28c 	clz	r2, ip
   d8122:	3a08      	subs	r2, #8
   d8124:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d8128:	db10      	blt.n	d814c <__aeabi_l2f+0x5c>
   d812a:	fa01 fc02 	lsl.w	ip, r1, r2
   d812e:	4463      	add	r3, ip
   d8130:	fa00 fc02 	lsl.w	ip, r0, r2
   d8134:	f1c2 0220 	rsb	r2, r2, #32
   d8138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d813c:	fa20 f202 	lsr.w	r2, r0, r2
   d8140:	eb43 0002 	adc.w	r0, r3, r2
   d8144:	bf08      	it	eq
   d8146:	f020 0001 	biceq.w	r0, r0, #1
   d814a:	4770      	bx	lr
   d814c:	f102 0220 	add.w	r2, r2, #32
   d8150:	fa01 fc02 	lsl.w	ip, r1, r2
   d8154:	f1c2 0220 	rsb	r2, r2, #32
   d8158:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d815c:	fa21 f202 	lsr.w	r2, r1, r2
   d8160:	eb43 0002 	adc.w	r0, r3, r2
   d8164:	bf08      	it	eq
   d8166:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d816a:	4770      	bx	lr

000d816c <__aeabi_ldivmod>:
   d816c:	b97b      	cbnz	r3, d818e <__aeabi_ldivmod+0x22>
   d816e:	b972      	cbnz	r2, d818e <__aeabi_ldivmod+0x22>
   d8170:	2900      	cmp	r1, #0
   d8172:	bfbe      	ittt	lt
   d8174:	2000      	movlt	r0, #0
   d8176:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d817a:	e006      	blt.n	d818a <__aeabi_ldivmod+0x1e>
   d817c:	bf08      	it	eq
   d817e:	2800      	cmpeq	r0, #0
   d8180:	bf1c      	itt	ne
   d8182:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d8186:	f04f 30ff 	movne.w	r0, #4294967295
   d818a:	f000 b9b1 	b.w	d84f0 <__aeabi_idiv0>
   d818e:	f1ad 0c08 	sub.w	ip, sp, #8
   d8192:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8196:	2900      	cmp	r1, #0
   d8198:	db09      	blt.n	d81ae <__aeabi_ldivmod+0x42>
   d819a:	2b00      	cmp	r3, #0
   d819c:	db1a      	blt.n	d81d4 <__aeabi_ldivmod+0x68>
   d819e:	f000 f835 	bl	d820c <__udivmoddi4>
   d81a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d81a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d81aa:	b004      	add	sp, #16
   d81ac:	4770      	bx	lr
   d81ae:	4240      	negs	r0, r0
   d81b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81b4:	2b00      	cmp	r3, #0
   d81b6:	db1b      	blt.n	d81f0 <__aeabi_ldivmod+0x84>
   d81b8:	f000 f828 	bl	d820c <__udivmoddi4>
   d81bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d81c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d81c4:	b004      	add	sp, #16
   d81c6:	4240      	negs	r0, r0
   d81c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81cc:	4252      	negs	r2, r2
   d81ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d81d2:	4770      	bx	lr
   d81d4:	4252      	negs	r2, r2
   d81d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d81da:	f000 f817 	bl	d820c <__udivmoddi4>
   d81de:	f8dd e004 	ldr.w	lr, [sp, #4]
   d81e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d81e6:	b004      	add	sp, #16
   d81e8:	4240      	negs	r0, r0
   d81ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81ee:	4770      	bx	lr
   d81f0:	4252      	negs	r2, r2
   d81f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d81f6:	f000 f809 	bl	d820c <__udivmoddi4>
   d81fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   d81fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8202:	b004      	add	sp, #16
   d8204:	4252      	negs	r2, r2
   d8206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d820a:	4770      	bx	lr

000d820c <__udivmoddi4>:
   d820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8210:	468c      	mov	ip, r1
   d8212:	460e      	mov	r6, r1
   d8214:	4604      	mov	r4, r0
   d8216:	9d08      	ldr	r5, [sp, #32]
   d8218:	2b00      	cmp	r3, #0
   d821a:	d150      	bne.n	d82be <__udivmoddi4+0xb2>
   d821c:	428a      	cmp	r2, r1
   d821e:	4617      	mov	r7, r2
   d8220:	d96c      	bls.n	d82fc <__udivmoddi4+0xf0>
   d8222:	fab2 fe82 	clz	lr, r2
   d8226:	f1be 0f00 	cmp.w	lr, #0
   d822a:	d00b      	beq.n	d8244 <__udivmoddi4+0x38>
   d822c:	f1ce 0420 	rsb	r4, lr, #32
   d8230:	fa20 f404 	lsr.w	r4, r0, r4
   d8234:	fa01 f60e 	lsl.w	r6, r1, lr
   d8238:	ea44 0c06 	orr.w	ip, r4, r6
   d823c:	fa02 f70e 	lsl.w	r7, r2, lr
   d8240:	fa00 f40e 	lsl.w	r4, r0, lr
   d8244:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8248:	0c22      	lsrs	r2, r4, #16
   d824a:	fbbc f0f9 	udiv	r0, ip, r9
   d824e:	fa1f f887 	uxth.w	r8, r7
   d8252:	fb09 c610 	mls	r6, r9, r0, ip
   d8256:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d825a:	fb00 f308 	mul.w	r3, r0, r8
   d825e:	42b3      	cmp	r3, r6
   d8260:	d909      	bls.n	d8276 <__udivmoddi4+0x6a>
   d8262:	19f6      	adds	r6, r6, r7
   d8264:	f100 32ff 	add.w	r2, r0, #4294967295
   d8268:	f080 8122 	bcs.w	d84b0 <__udivmoddi4+0x2a4>
   d826c:	42b3      	cmp	r3, r6
   d826e:	f240 811f 	bls.w	d84b0 <__udivmoddi4+0x2a4>
   d8272:	3802      	subs	r0, #2
   d8274:	443e      	add	r6, r7
   d8276:	1af6      	subs	r6, r6, r3
   d8278:	b2a2      	uxth	r2, r4
   d827a:	fbb6 f3f9 	udiv	r3, r6, r9
   d827e:	fb09 6613 	mls	r6, r9, r3, r6
   d8282:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8286:	fb03 f808 	mul.w	r8, r3, r8
   d828a:	45a0      	cmp	r8, r4
   d828c:	d909      	bls.n	d82a2 <__udivmoddi4+0x96>
   d828e:	19e4      	adds	r4, r4, r7
   d8290:	f103 32ff 	add.w	r2, r3, #4294967295
   d8294:	f080 810a 	bcs.w	d84ac <__udivmoddi4+0x2a0>
   d8298:	45a0      	cmp	r8, r4
   d829a:	f240 8107 	bls.w	d84ac <__udivmoddi4+0x2a0>
   d829e:	3b02      	subs	r3, #2
   d82a0:	443c      	add	r4, r7
   d82a2:	ebc8 0404 	rsb	r4, r8, r4
   d82a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d82aa:	2100      	movs	r1, #0
   d82ac:	2d00      	cmp	r5, #0
   d82ae:	d062      	beq.n	d8376 <__udivmoddi4+0x16a>
   d82b0:	fa24 f40e 	lsr.w	r4, r4, lr
   d82b4:	2300      	movs	r3, #0
   d82b6:	602c      	str	r4, [r5, #0]
   d82b8:	606b      	str	r3, [r5, #4]
   d82ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82be:	428b      	cmp	r3, r1
   d82c0:	d907      	bls.n	d82d2 <__udivmoddi4+0xc6>
   d82c2:	2d00      	cmp	r5, #0
   d82c4:	d055      	beq.n	d8372 <__udivmoddi4+0x166>
   d82c6:	2100      	movs	r1, #0
   d82c8:	e885 0041 	stmia.w	r5, {r0, r6}
   d82cc:	4608      	mov	r0, r1
   d82ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82d2:	fab3 f183 	clz	r1, r3
   d82d6:	2900      	cmp	r1, #0
   d82d8:	f040 8090 	bne.w	d83fc <__udivmoddi4+0x1f0>
   d82dc:	42b3      	cmp	r3, r6
   d82de:	d302      	bcc.n	d82e6 <__udivmoddi4+0xda>
   d82e0:	4282      	cmp	r2, r0
   d82e2:	f200 80f8 	bhi.w	d84d6 <__udivmoddi4+0x2ca>
   d82e6:	1a84      	subs	r4, r0, r2
   d82e8:	eb66 0603 	sbc.w	r6, r6, r3
   d82ec:	2001      	movs	r0, #1
   d82ee:	46b4      	mov	ip, r6
   d82f0:	2d00      	cmp	r5, #0
   d82f2:	d040      	beq.n	d8376 <__udivmoddi4+0x16a>
   d82f4:	e885 1010 	stmia.w	r5, {r4, ip}
   d82f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82fc:	b912      	cbnz	r2, d8304 <__udivmoddi4+0xf8>
   d82fe:	2701      	movs	r7, #1
   d8300:	fbb7 f7f2 	udiv	r7, r7, r2
   d8304:	fab7 fe87 	clz	lr, r7
   d8308:	f1be 0f00 	cmp.w	lr, #0
   d830c:	d135      	bne.n	d837a <__udivmoddi4+0x16e>
   d830e:	1bf3      	subs	r3, r6, r7
   d8310:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8314:	fa1f fc87 	uxth.w	ip, r7
   d8318:	2101      	movs	r1, #1
   d831a:	fbb3 f0f8 	udiv	r0, r3, r8
   d831e:	0c22      	lsrs	r2, r4, #16
   d8320:	fb08 3610 	mls	r6, r8, r0, r3
   d8324:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8328:	fb0c f300 	mul.w	r3, ip, r0
   d832c:	42b3      	cmp	r3, r6
   d832e:	d907      	bls.n	d8340 <__udivmoddi4+0x134>
   d8330:	19f6      	adds	r6, r6, r7
   d8332:	f100 32ff 	add.w	r2, r0, #4294967295
   d8336:	d202      	bcs.n	d833e <__udivmoddi4+0x132>
   d8338:	42b3      	cmp	r3, r6
   d833a:	f200 80ce 	bhi.w	d84da <__udivmoddi4+0x2ce>
   d833e:	4610      	mov	r0, r2
   d8340:	1af6      	subs	r6, r6, r3
   d8342:	b2a2      	uxth	r2, r4
   d8344:	fbb6 f3f8 	udiv	r3, r6, r8
   d8348:	fb08 6613 	mls	r6, r8, r3, r6
   d834c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8350:	fb0c fc03 	mul.w	ip, ip, r3
   d8354:	45a4      	cmp	ip, r4
   d8356:	d907      	bls.n	d8368 <__udivmoddi4+0x15c>
   d8358:	19e4      	adds	r4, r4, r7
   d835a:	f103 32ff 	add.w	r2, r3, #4294967295
   d835e:	d202      	bcs.n	d8366 <__udivmoddi4+0x15a>
   d8360:	45a4      	cmp	ip, r4
   d8362:	f200 80b5 	bhi.w	d84d0 <__udivmoddi4+0x2c4>
   d8366:	4613      	mov	r3, r2
   d8368:	ebcc 0404 	rsb	r4, ip, r4
   d836c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8370:	e79c      	b.n	d82ac <__udivmoddi4+0xa0>
   d8372:	4629      	mov	r1, r5
   d8374:	4628      	mov	r0, r5
   d8376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d837a:	f1ce 0120 	rsb	r1, lr, #32
   d837e:	fa06 f30e 	lsl.w	r3, r6, lr
   d8382:	fa07 f70e 	lsl.w	r7, r7, lr
   d8386:	fa20 f901 	lsr.w	r9, r0, r1
   d838a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d838e:	40ce      	lsrs	r6, r1
   d8390:	ea49 0903 	orr.w	r9, r9, r3
   d8394:	fbb6 faf8 	udiv	sl, r6, r8
   d8398:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d839c:	fb08 661a 	mls	r6, r8, sl, r6
   d83a0:	fa1f fc87 	uxth.w	ip, r7
   d83a4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d83a8:	fb0a f20c 	mul.w	r2, sl, ip
   d83ac:	429a      	cmp	r2, r3
   d83ae:	fa00 f40e 	lsl.w	r4, r0, lr
   d83b2:	d90a      	bls.n	d83ca <__udivmoddi4+0x1be>
   d83b4:	19db      	adds	r3, r3, r7
   d83b6:	f10a 31ff 	add.w	r1, sl, #4294967295
   d83ba:	f080 8087 	bcs.w	d84cc <__udivmoddi4+0x2c0>
   d83be:	429a      	cmp	r2, r3
   d83c0:	f240 8084 	bls.w	d84cc <__udivmoddi4+0x2c0>
   d83c4:	f1aa 0a02 	sub.w	sl, sl, #2
   d83c8:	443b      	add	r3, r7
   d83ca:	1a9b      	subs	r3, r3, r2
   d83cc:	fa1f f989 	uxth.w	r9, r9
   d83d0:	fbb3 f1f8 	udiv	r1, r3, r8
   d83d4:	fb08 3311 	mls	r3, r8, r1, r3
   d83d8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d83dc:	fb01 f60c 	mul.w	r6, r1, ip
   d83e0:	429e      	cmp	r6, r3
   d83e2:	d907      	bls.n	d83f4 <__udivmoddi4+0x1e8>
   d83e4:	19db      	adds	r3, r3, r7
   d83e6:	f101 32ff 	add.w	r2, r1, #4294967295
   d83ea:	d26b      	bcs.n	d84c4 <__udivmoddi4+0x2b8>
   d83ec:	429e      	cmp	r6, r3
   d83ee:	d969      	bls.n	d84c4 <__udivmoddi4+0x2b8>
   d83f0:	3902      	subs	r1, #2
   d83f2:	443b      	add	r3, r7
   d83f4:	1b9b      	subs	r3, r3, r6
   d83f6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d83fa:	e78e      	b.n	d831a <__udivmoddi4+0x10e>
   d83fc:	f1c1 0e20 	rsb	lr, r1, #32
   d8400:	fa22 f40e 	lsr.w	r4, r2, lr
   d8404:	408b      	lsls	r3, r1
   d8406:	4323      	orrs	r3, r4
   d8408:	fa20 f70e 	lsr.w	r7, r0, lr
   d840c:	fa06 f401 	lsl.w	r4, r6, r1
   d8410:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8414:	fa26 f60e 	lsr.w	r6, r6, lr
   d8418:	433c      	orrs	r4, r7
   d841a:	fbb6 f9fc 	udiv	r9, r6, ip
   d841e:	0c27      	lsrs	r7, r4, #16
   d8420:	fb0c 6619 	mls	r6, ip, r9, r6
   d8424:	fa1f f883 	uxth.w	r8, r3
   d8428:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d842c:	fb09 f708 	mul.w	r7, r9, r8
   d8430:	42b7      	cmp	r7, r6
   d8432:	fa02 f201 	lsl.w	r2, r2, r1
   d8436:	fa00 fa01 	lsl.w	sl, r0, r1
   d843a:	d908      	bls.n	d844e <__udivmoddi4+0x242>
   d843c:	18f6      	adds	r6, r6, r3
   d843e:	f109 30ff 	add.w	r0, r9, #4294967295
   d8442:	d241      	bcs.n	d84c8 <__udivmoddi4+0x2bc>
   d8444:	42b7      	cmp	r7, r6
   d8446:	d93f      	bls.n	d84c8 <__udivmoddi4+0x2bc>
   d8448:	f1a9 0902 	sub.w	r9, r9, #2
   d844c:	441e      	add	r6, r3
   d844e:	1bf6      	subs	r6, r6, r7
   d8450:	b2a0      	uxth	r0, r4
   d8452:	fbb6 f4fc 	udiv	r4, r6, ip
   d8456:	fb0c 6614 	mls	r6, ip, r4, r6
   d845a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d845e:	fb04 f808 	mul.w	r8, r4, r8
   d8462:	45b8      	cmp	r8, r7
   d8464:	d907      	bls.n	d8476 <__udivmoddi4+0x26a>
   d8466:	18ff      	adds	r7, r7, r3
   d8468:	f104 30ff 	add.w	r0, r4, #4294967295
   d846c:	d228      	bcs.n	d84c0 <__udivmoddi4+0x2b4>
   d846e:	45b8      	cmp	r8, r7
   d8470:	d926      	bls.n	d84c0 <__udivmoddi4+0x2b4>
   d8472:	3c02      	subs	r4, #2
   d8474:	441f      	add	r7, r3
   d8476:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d847a:	ebc8 0707 	rsb	r7, r8, r7
   d847e:	fba0 8902 	umull	r8, r9, r0, r2
   d8482:	454f      	cmp	r7, r9
   d8484:	4644      	mov	r4, r8
   d8486:	464e      	mov	r6, r9
   d8488:	d314      	bcc.n	d84b4 <__udivmoddi4+0x2a8>
   d848a:	d029      	beq.n	d84e0 <__udivmoddi4+0x2d4>
   d848c:	b365      	cbz	r5, d84e8 <__udivmoddi4+0x2dc>
   d848e:	ebba 0304 	subs.w	r3, sl, r4
   d8492:	eb67 0706 	sbc.w	r7, r7, r6
   d8496:	fa07 fe0e 	lsl.w	lr, r7, lr
   d849a:	40cb      	lsrs	r3, r1
   d849c:	40cf      	lsrs	r7, r1
   d849e:	ea4e 0303 	orr.w	r3, lr, r3
   d84a2:	e885 0088 	stmia.w	r5, {r3, r7}
   d84a6:	2100      	movs	r1, #0
   d84a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84ac:	4613      	mov	r3, r2
   d84ae:	e6f8      	b.n	d82a2 <__udivmoddi4+0x96>
   d84b0:	4610      	mov	r0, r2
   d84b2:	e6e0      	b.n	d8276 <__udivmoddi4+0x6a>
   d84b4:	ebb8 0402 	subs.w	r4, r8, r2
   d84b8:	eb69 0603 	sbc.w	r6, r9, r3
   d84bc:	3801      	subs	r0, #1
   d84be:	e7e5      	b.n	d848c <__udivmoddi4+0x280>
   d84c0:	4604      	mov	r4, r0
   d84c2:	e7d8      	b.n	d8476 <__udivmoddi4+0x26a>
   d84c4:	4611      	mov	r1, r2
   d84c6:	e795      	b.n	d83f4 <__udivmoddi4+0x1e8>
   d84c8:	4681      	mov	r9, r0
   d84ca:	e7c0      	b.n	d844e <__udivmoddi4+0x242>
   d84cc:	468a      	mov	sl, r1
   d84ce:	e77c      	b.n	d83ca <__udivmoddi4+0x1be>
   d84d0:	3b02      	subs	r3, #2
   d84d2:	443c      	add	r4, r7
   d84d4:	e748      	b.n	d8368 <__udivmoddi4+0x15c>
   d84d6:	4608      	mov	r0, r1
   d84d8:	e70a      	b.n	d82f0 <__udivmoddi4+0xe4>
   d84da:	3802      	subs	r0, #2
   d84dc:	443e      	add	r6, r7
   d84de:	e72f      	b.n	d8340 <__udivmoddi4+0x134>
   d84e0:	45c2      	cmp	sl, r8
   d84e2:	d3e7      	bcc.n	d84b4 <__udivmoddi4+0x2a8>
   d84e4:	463e      	mov	r6, r7
   d84e6:	e7d1      	b.n	d848c <__udivmoddi4+0x280>
   d84e8:	4629      	mov	r1, r5
   d84ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84ee:	bf00      	nop

000d84f0 <__aeabi_idiv0>:
   d84f0:	4770      	bx	lr
   d84f2:	bf00      	nop

000d84f4 <__cxa_atexit>:
   d84f4:	b510      	push	{r4, lr}
   d84f6:	4c05      	ldr	r4, [pc, #20]	; (d850c <__cxa_atexit+0x18>)
   d84f8:	4613      	mov	r3, r2
   d84fa:	b12c      	cbz	r4, d8508 <__cxa_atexit+0x14>
   d84fc:	460a      	mov	r2, r1
   d84fe:	4601      	mov	r1, r0
   d8500:	2002      	movs	r0, #2
   d8502:	f3af 8000 	nop.w
   d8506:	bd10      	pop	{r4, pc}
   d8508:	4620      	mov	r0, r4
   d850a:	bd10      	pop	{r4, pc}
   d850c:	00000000 	.word	0x00000000

000d8510 <memcpy>:
   d8510:	b510      	push	{r4, lr}
   d8512:	1e43      	subs	r3, r0, #1
   d8514:	440a      	add	r2, r1
   d8516:	4291      	cmp	r1, r2
   d8518:	d004      	beq.n	d8524 <memcpy+0x14>
   d851a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d851e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8522:	e7f8      	b.n	d8516 <memcpy+0x6>
   d8524:	bd10      	pop	{r4, pc}

000d8526 <memset>:
   d8526:	4402      	add	r2, r0
   d8528:	4603      	mov	r3, r0
   d852a:	4293      	cmp	r3, r2
   d852c:	d002      	beq.n	d8534 <memset+0xe>
   d852e:	f803 1b01 	strb.w	r1, [r3], #1
   d8532:	e7fa      	b.n	d852a <memset+0x4>
   d8534:	4770      	bx	lr
	...

000d8538 <srand>:
   d8538:	b538      	push	{r3, r4, r5, lr}
   d853a:	4b12      	ldr	r3, [pc, #72]	; (d8584 <srand+0x4c>)
   d853c:	681c      	ldr	r4, [r3, #0]
   d853e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8540:	4605      	mov	r5, r0
   d8542:	b9d3      	cbnz	r3, d857a <srand+0x42>
   d8544:	2018      	movs	r0, #24
   d8546:	f7fc fd63 	bl	d5010 <malloc>
   d854a:	f243 330e 	movw	r3, #13070	; 0x330e
   d854e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8550:	8003      	strh	r3, [r0, #0]
   d8552:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8556:	8043      	strh	r3, [r0, #2]
   d8558:	f241 2334 	movw	r3, #4660	; 0x1234
   d855c:	8083      	strh	r3, [r0, #4]
   d855e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8562:	80c3      	strh	r3, [r0, #6]
   d8564:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8568:	8103      	strh	r3, [r0, #8]
   d856a:	2305      	movs	r3, #5
   d856c:	8143      	strh	r3, [r0, #10]
   d856e:	230b      	movs	r3, #11
   d8570:	8183      	strh	r3, [r0, #12]
   d8572:	2201      	movs	r2, #1
   d8574:	2300      	movs	r3, #0
   d8576:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d857a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d857c:	2200      	movs	r2, #0
   d857e:	611d      	str	r5, [r3, #16]
   d8580:	615a      	str	r2, [r3, #20]
   d8582:	bd38      	pop	{r3, r4, r5, pc}
   d8584:	2003e37c 	.word	0x2003e37c

000d8588 <strlen>:
   d8588:	4603      	mov	r3, r0
   d858a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d858e:	2a00      	cmp	r2, #0
   d8590:	d1fb      	bne.n	d858a <strlen+0x2>
   d8592:	1a18      	subs	r0, r3, r0
   d8594:	3801      	subs	r0, #1
   d8596:	4770      	bx	lr

000d8598 <dynalib_user>:
   d8598:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d85a8:	0000 0000 4d42 3245 3038 7420 7365 0074     ....BME280 test.
   d85b8:	6f43 6c75 2064 6f6e 2074 6966 646e 6120     Could not find a
   d85c8:	7620 6c61 6469 4220 454d 3832 2030 6573      valid BME280 se
   d85d8:	736e 726f 202c 6863 6365 206b 6977 6972     nsor, check wiri
   d85e8:	676e 202c 6461 7264 7365 2c73 7320 6e65     ng, address, sen
   d85f8:	6f73 2072 4449 0021 6553 736e 726f 4449     sor ID!.SensorID
   d8608:	7720 7361 203a 7830 2000 2020 2020 2020      was: 0x.       
   d8618:	4920 2044 666f 3020 4678 2046 7270 626f      ID of 0xFF prob
   d8628:	6261 796c 6d20 6165 736e 6120 6220 6461     ably means a bad
   d8638:	6120 6464 6572 7373 202c 2061 4d42 2050      address, a BMP 
   d8648:	3831 2030 726f 4220 504d 3020 3538 000a     180 or BMP 085..
   d8658:	2020 4920 2044 666f 3020 3578 2d36 7830        ID of 0x56-0x
   d8668:	3835 7220 7065 6572 6573 746e 2073 2061     58 represents a 
   d8678:	4d42 2050 3832 2c30 000a 2020 2020 2020     BMP 280,..      
   d8688:	2020 4449 6f20 2066 7830 3036 7220 7065       ID of 0x60 rep
   d8698:	6572 6573 746e 2073 2061 4d42 2045 3832     resents a BME 28
   d86a8:	2e30 000a 2020 2020 2020 2020 4449 6f20     0...        ID o
   d86b8:	2066 7830 3136 7220 7065 6572 6573 746e     f 0x61 represent
   d86c8:	2073 2061 4d42 2045 3836 2e30 000a 2d2d     s a BME 680...--
   d86d8:	4420 6665 7561 746c 5420 7365 2074 2d2d      Default Test --
   d86e8:	5400 6d65 6570 6172 7574 6572 3d20 0020     .Temperature = .
   d86f8:	2a20 0043 7250 7365 7573 6572 3d20 0020      *C.Pressure = .
   d8708:	6820 6150 4100 7070 6f72 2e78 4120 746c      hPa.Approx. Alt
   d8718:	7469 6475 2065 203d 2000 006d 7548 696d     itude = . m.Humi
   d8728:	6964 7974 3d20 0020 2520 0000               dity = . %..

000d8734 <_ZTVN8particle13__SPISettingsE>:
	...
   d873c:	4295 000d 6564 6166 6c75 2074 4d00 4253     .B..default .MSB
   d874c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d875c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d876c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d877c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d8788 <_ZTVN5spark13EthernetClassE>:
	...
   d8790:	50af 000d 50a5 000d 509b 000d 5091 000d     .P...P...P...P..
   d87a0:	5085 000d 5079 000d 506d 000d 5065 000d     .P..yP..mP..eP..
   d87b0:	505b 000d 5051 000d 5dad 000d               [P..QP...]..

000d87bc <_ZTV8SPIClass>:
	...
   d87c4:	50cd 000d 50cf 000d                         .P...P..

000d87cc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d87cc:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d87dc:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d87ec:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d87fc:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d880c:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d881c:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d882c:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d883c:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d884c:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d885c:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d886c:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d887c:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d888c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d889c:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d88ac:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d88bc:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d88cc:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d88dc:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d88ec <_ZTV9IPAddress>:
	...
   d88f4:	5751 000d 5741 000d 5743 000d               QW..AW..CW..

000d8900 <_ZTV9USBSerial>:
	...
   d8908:	5829 000d 5879 000d 5887 000d 52f1 000d     )X..yX...X...R..
   d8918:	5865 000d 582b 000d 5841 000d 5873 000d     eX..+X..AX..sX..
   d8928:	5857 000d 5825 000d                         WX..%X..

000d8930 <_ZTV11USARTSerial>:
	...
   d8938:	5941 000d 5991 000d 599f 000d 52f1 000d     AY...Y...Y...R..
   d8948:	5955 000d 5977 000d 5963 000d 598b 000d     UY..wY..cY...Y..
   d8958:	5943 000d 5947 000d                         CY..GY..

000d8960 <_ZTV7TwoWire>:
	...
   d8968:	5a45 000d 5a8f 000d 5a67 000d 5a47 000d     EZ...Z..gZ..GZ..
   d8978:	5a6f 000d 5a77 000d 5a7f 000d 5a87 000d     oZ..wZ...Z...Z..

000d8988 <_ZTVN5spark9MeshClassE>:
	...
   d8990:	5bab 000d 5ba1 000d 5b97 000d 5b8d 000d     .[...[...[...[..
   d89a0:	5b81 000d 5b75 000d 5b69 000d 5b61 000d     .[..u[..i[..a[..
   d89b0:	5b57 000d 5b4d 000d 5dad 000d               W[..M[...]..

000d89bc <_ZTVN5spark9WiFiClassE>:
	...
   d89c4:	5d27 000d 5d1d 000d 5d13 000d 5cc9 000d     ']...]...]...\..
   d89d4:	5d07 000d 5cfb 000d 5cef 000d 5ce7 000d     .]...\...\...\..
   d89e4:	5cdd 000d 5cd3 000d 5dad 000d               .\...\...]..

000d89f0 <_ZTVN5spark12NetworkClassE>:
	...
   d89f8:	5d45 000d 5d4f 000d 5d59 000d 5d63 000d     E]..O]..Y]..c]..
   d8a08:	5d6d 000d 5d79 000d 5d85 000d 5d91 000d     m]..y]...]...]..
   d8a18:	5d99 000d 5da3 000d 5dad 000d               .]...]...]..

000d8a24 <_ZSt7nothrow>:
   d8a24:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d8a30 <TWO52>:
   d8a30:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d8a40 <__sf_fake_stdin>:
	...

000d8a60 <__sf_fake_stdout>:
	...

000d8a80 <__sf_fake_stderr>:
	...

000d8aa0 <link_const_variable_data_end>:
   d8aa0:	000d4281 	.word	0x000d4281
   d8aa4:	000d4bf5 	.word	0x000d4bf5
   d8aa8:	000d50b9 	.word	0x000d50b9
   d8aac:	000d5285 	.word	0x000d5285
   d8ab0:	000d52c9 	.word	0x000d52c9
   d8ab4:	000d55cd 	.word	0x000d55cd
   d8ab8:	000d55dd 	.word	0x000d55dd
   d8abc:	000d5615 	.word	0x000d5615
   d8ac0:	000d5c79 	.word	0x000d5c79
   d8ac4:	000d5d31 	.word	0x000d5d31
   d8ac8:	000d5e79 	.word	0x000d5e79
   d8acc:	000d6051 	.word	0x000d6051
   d8ad0:	000d60d5 	.word	0x000d60d5
   d8ad4:	000d6199 	.word	0x000d6199
   d8ad8:	000d625d 	.word	0x000d625d

000d8adc <link_constructors_end>:
   d8adc:	00000000 	.word	0x00000000
