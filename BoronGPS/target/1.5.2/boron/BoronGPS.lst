
c:/Users/IoTPa/Documents/jarvis/BoronGPS/target/1.5.2/boron/BoronGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8b70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000047c  2003de1c  000d8b74  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000558  2003e298  2003e298  0002e298  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8ff0  000d8ff0  00028ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9018  000d9018  00029018  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f76cf  00000000  00000000  0002901c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013cbb  00000000  00000000  001206eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023cc9  00000000  00000000  001343a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d0  00000000  00000000  0015806f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004dd0  00000000  00000000  0015aa3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a0c8  00000000  00000000  0015f80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000319ea  00000000  00000000  001998d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001098aa  00000000  00000000  001cb2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000df20  00000000  00000000  002d4b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fea7 	bl	d7d84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 feac 	bl	d7d9a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de1c 	.word	0x2003de1c
   d404c:	000d8b74 	.word	0x000d8b74
   d4050:	2003e298 	.word	0x2003e298
   d4054:	2003e298 	.word	0x2003e298
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f985 	bl	d636c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8b6c 	.word	0x000d8b6c
   d4084:	000d8b24 	.word	0x000d8b24

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b858 	b.w	d413c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa31 	bl	d44f4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b92b 	b.w	d62f0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bea7 	b.w	d5dec <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bead 	b.w	d5dfc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 beab 	b.w	d5dfc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fdf0 	bl	d5c94 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5a75 	.word	0x000d5a75

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f000 ffc4 	bl	d5064 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000d803c 	.word	0x000d803c

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f003 f8bd 	bl	d7270 <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
	...

000d40fc <_Z10helloWorldv>:
			}
		}
	}
}

void helloWorld() {
   d40fc:	b510      	push	{r4, lr}
	display.clearDisplay();
   d40fe:	4c0d      	ldr	r4, [pc, #52]	; (d4134 <_Z10helloWorldv+0x38>)
   d4100:	4620      	mov	r0, r4
   d4102:	f000 fc13 	bl	d492c <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
   d4106:	4620      	mov	r0, r4
   d4108:	2101      	movs	r1, #1
   d410a:	f000 ff81 	bl	d5010 <_ZN12Adafruit_GFX11setTextSizeEh>
  	display.setTextColor(WHITE);
   d410e:	4620      	mov	r0, r4
   d4110:	2101      	movs	r1, #1
   d4112:	f000 ff82 	bl	d501a <_ZN12Adafruit_GFX12setTextColorEt>
  	display.setCursor(20,5);
   d4116:	4620      	mov	r0, r4
   d4118:	2205      	movs	r2, #5
   d411a:	2114      	movs	r1, #20
   d411c:	f000 ff75 	bl	d500a <_ZN12Adafruit_GFX9setCursorEss>
  	display.println("GPS Initializing");
   d4120:	4620      	mov	r0, r4
   d4122:	4905      	ldr	r1, [pc, #20]	; (d4138 <_Z10helloWorldv+0x3c>)
   d4124:	f002 f81f 	bl	d6166 <_ZN5Print7printlnEPKc>
	display.display();
   d4128:	4620      	mov	r0, r4
}
   d412a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	display.clearDisplay();
	display.setTextSize(1);
  	display.setTextColor(WHITE);
  	display.setCursor(20,5);
  	display.println("GPS Initializing");
	display.display();
   d412e:	f000 bd37 	b.w	d4ba0 <_ZN16Adafruit_SSD13067displayEv>
   d4132:	bf00      	nop
   d4134:	2003e378 	.word	0x2003e378
   d4138:	000d8044 	.word	0x000d8044

000d413c <setup>:

float lat,lon,alt;
float lat_ref, lon_ref;

void setup()
{
   d413c:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d413e:	f002 fcd9 	bl	d6af4 <_Z16_fetch_usbserialv>
   d4142:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4146:	f002 fcc9 	bl	d6adc <_ZN9USBSerial5beginEl>

	// The GPS module initialization
	Serial1.begin(9600);
   d414a:	f002 fda7 	bl	d6c9c <_Z22__fetch_global_Serial1v>
   d414e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4152:	f002 fd9d 	bl	d6c90 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4156:	f001 fc95 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d415a:	4b09      	ldr	r3, [pc, #36]	; (d4180 <setup+0x44>)
   d415c:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d415e:	4b09      	ldr	r3, [pc, #36]	; (d4184 <setup+0x48>)
	
	// OLED Display initialization
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4160:	4809      	ldr	r0, [pc, #36]	; (d4188 <setup+0x4c>)
	Serial.begin(9600);

	// The GPS module initialization
	Serial1.begin(9600);
    startFix = millis();
    gettingFix = true;
   d4162:	2201      	movs	r2, #1
   d4164:	701a      	strb	r2, [r3, #0]
	
	// OLED Display initialization
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4166:	2102      	movs	r1, #2
   d4168:	223c      	movs	r2, #60	; 0x3c
   d416a:	f000 fc47 	bl	d49fc <_ZN16Adafruit_SSD13065beginEhh>
	helloWorld();
   d416e:	f7ff ffc5 	bl	d40fc <_Z10helloWorldv>

	pinMode(D2,INPUT_PULLDOWN);
   d4172:	2103      	movs	r1, #3
   d4174:	2002      	movs	r0, #2
}
   d4176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	
	// OLED Display initialization
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
	helloWorld();

	pinMode(D2,INPUT_PULLDOWN);
   d417a:	f002 bfcb 	b.w	d7114 <pinMode>
   d417e:	bf00      	nop
   d4180:	2003e3a0 	.word	0x2003e3a0
   d4184:	2003e39c 	.word	0x2003e39c
   d4188:	2003e378 	.word	0x2003e378

000d418c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d418c:	b538      	push	{r3, r4, r5, lr}
   d418e:	4604      	mov	r4, r0
   d4190:	ed2d 8b02 	vpush	{d8}
   d4194:	460d      	mov	r5, r1
   d4196:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d419a:	f001 f86b 	bl	d5274 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d419e:	4629      	mov	r1, r5
   d41a0:	4620      	mov	r0, r4
   d41a2:	2201      	movs	r2, #1
   d41a4:	f000 ffda 	bl	d515c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d41a8:	4620      	mov	r0, r4
   d41aa:	213a      	movs	r1, #58	; 0x3a
   d41ac:	f000 ff8a 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d41b0:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d41b4:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d41b8:	4620      	mov	r0, r4
	}
   d41ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d41be:	f001 b87d 	b.w	d52bc <_ZN10JsonWriter11insertValueEf>
	...

000d41c4 <_Z8sendJSONfff>:
  	display.setCursor(20,5);
  	display.println("GPS Initializing");
	display.display();
}

void sendJSON(float jlat, float jlon, float jalt) {
   d41c4:	b510      	push	{r4, lr}
   d41c6:	ed2d 8b04 	vpush	{d8-d9}
   d41ca:	b0d2      	sub	sp, #328	; 0x148
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d41cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   d41d0:	a912      	add	r1, sp, #72	; 0x48
   d41d2:	a806      	add	r0, sp, #24
   d41d4:	eef0 8a60 	vmov.f32	s17, s1
   d41d8:	eeb0 8a41 	vmov.f32	s16, s2
   d41dc:	eeb0 9a40 	vmov.f32	s18, s0
   d41e0:	f000 ff5e 	bl	d50a0 <_ZN10JsonWriterC1EPcj>
   d41e4:	4b38      	ldr	r3, [pc, #224]	; (d42c8 <_Z8sendJSONfff+0x104>)
   d41e6:	9306      	str	r3, [sp, #24]
	JsonWriterStatic<256> jw;
	int vibration;

	vibration = random(1,11);
   d41e8:	210b      	movs	r1, #11
   d41ea:	2001      	movs	r0, #1
   d41ec:	f002 fdf1 	bl	d6dd2 <_Z6randomii>
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d41f0:	227d      	movs	r2, #125	; 0x7d
   d41f2:	4604      	mov	r4, r0
   d41f4:	217b      	movs	r1, #123	; 0x7b
   d41f6:	a806      	add	r0, sp, #24
   d41f8:	f001 f847 	bl	d528a <_ZN10JsonWriter18startObjectOrArrayEcc>

    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Latitude", jlat);
   d41fc:	eeb0 0a49 	vmov.f32	s0, s18
   d4200:	4932      	ldr	r1, [pc, #200]	; (d42cc <_Z8sendJSONfff+0x108>)
   d4202:	a806      	add	r0, sp, #24
   d4204:	f7ff ffc2 	bl	d418c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Longitude", jlon);
   d4208:	eeb0 0a68 	vmov.f32	s0, s17
   d420c:	4930      	ldr	r1, [pc, #192]	; (d42d0 <_Z8sendJSONfff+0x10c>)
   d420e:	a806      	add	r0, sp, #24
   d4210:	f7ff ffbc 	bl	d418c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Altitude", jalt);
   d4214:	eeb0 0a48 	vmov.f32	s0, s16
   d4218:	492e      	ldr	r1, [pc, #184]	; (d42d4 <_Z8sendJSONfff+0x110>)
   d421a:	a806      	add	r0, sp, #24
   d421c:	f7ff ffb6 	bl	d418c <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4220:	a806      	add	r0, sp, #24
   d4222:	f001 f827 	bl	d5274 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4226:	2201      	movs	r2, #1
   d4228:	492b      	ldr	r1, [pc, #172]	; (d42d8 <_Z8sendJSONfff+0x114>)
   d422a:	a806      	add	r0, sp, #24
   d422c:	f000 ff96 	bl	d515c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4230:	213a      	movs	r1, #58	; 0x3a
   d4232:	a806      	add	r0, sp, #24
   d4234:	f000 ff46 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4238:	4622      	mov	r2, r4
   d423a:	4928      	ldr	r1, [pc, #160]	; (d42dc <_Z8sendJSONfff+0x118>)
   d423c:	a806      	add	r0, sp, #24
   d423e:	f000 ff80 	bl	d5142 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4242:	9b07      	ldr	r3, [sp, #28]
   d4244:	9303      	str	r3, [sp, #12]
   d4246:	4b26      	ldr	r3, [pc, #152]	; (d42e0 <_Z8sendJSONfff+0x11c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4248:	9a03      	ldr	r2, [sp, #12]
   d424a:	781b      	ldrb	r3, [r3, #0]
   d424c:	f88d 3000 	strb.w	r3, [sp]
   d4250:	4924      	ldr	r1, [pc, #144]	; (d42e4 <_Z8sendJSONfff+0x120>)
   d4252:	233c      	movs	r3, #60	; 0x3c
   d4254:	a804      	add	r0, sp, #16
   d4256:	f002 f9f7 	bl	d6648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d425a:	9c05      	ldr	r4, [sp, #20]
   d425c:	b17c      	cbz	r4, d427e <_Z8sendJSONfff+0xba>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d425e:	6863      	ldr	r3, [r4, #4]
   d4260:	3b01      	subs	r3, #1
   d4262:	6063      	str	r3, [r4, #4]
   d4264:	b95b      	cbnz	r3, d427e <_Z8sendJSONfff+0xba>
        {
          _M_dispose();
   d4266:	6823      	ldr	r3, [r4, #0]
   d4268:	4620      	mov	r0, r4
   d426a:	689b      	ldr	r3, [r3, #8]
   d426c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d426e:	68a3      	ldr	r3, [r4, #8]
   d4270:	3b01      	subs	r3, #1
   d4272:	60a3      	str	r3, [r4, #8]
   d4274:	b91b      	cbnz	r3, d427e <_Z8sendJSONfff+0xba>
            _M_destroy();
   d4276:	6823      	ldr	r3, [r4, #0]
   d4278:	4620      	mov	r0, r4
   d427a:	68db      	ldr	r3, [r3, #12]
   d427c:	4798      	blx	r3
    jw.insertKeyValue("Vibration", vibration);
  
	Particle.publish("gps_data",jw.getBuffer(), PRIVATE);

	display.clearDisplay();
   d427e:	481a      	ldr	r0, [pc, #104]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d4280:	f000 fb54 	bl	d492c <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(2);
   d4284:	2102      	movs	r1, #2
   d4286:	4818      	ldr	r0, [pc, #96]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d4288:	f000 fec2 	bl	d5010 <_ZN12Adafruit_GFX11setTextSizeEh>
  	display.setTextColor(WHITE);
   d428c:	2101      	movs	r1, #1
   d428e:	4816      	ldr	r0, [pc, #88]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d4290:	f000 fec3 	bl	d501a <_ZN12Adafruit_GFX12setTextColorEt>
  	display.setCursor(20,5);
   d4294:	2205      	movs	r2, #5
   d4296:	2114      	movs	r1, #20
   d4298:	4813      	ldr	r0, [pc, #76]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d429a:	f000 feb6 	bl	d500a <_ZN12Adafruit_GFX9setCursorEss>
  	display.println("Publish");
   d429e:	4913      	ldr	r1, [pc, #76]	; (d42ec <_Z8sendJSONfff+0x128>)
   d42a0:	4811      	ldr	r0, [pc, #68]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d42a2:	f001 ff60 	bl	d6166 <_ZN5Print7printlnEPKc>
	display.display();
   d42a6:	4810      	ldr	r0, [pc, #64]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d42a8:	f000 fc7a 	bl	d4ba0 <_ZN16Adafruit_SSD13067displayEv>
	display.setTextSize(1);
   d42ac:	2101      	movs	r1, #1
   d42ae:	480e      	ldr	r0, [pc, #56]	; (d42e8 <_Z8sendJSONfff+0x124>)
   d42b0:	f000 feae 	bl	d5010 <_ZN12Adafruit_GFX11setTextSizeEh>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d42b4:	a806      	add	r0, sp, #24
   d42b6:	f000 ff13 	bl	d50e0 <_ZN10JsonWriter19finishObjectOrArrayEv>
  	display.println("GPS Initializing");
	display.display();
}

void sendJSON(float jlat, float jlon, float jalt) {
	JsonWriterStatic<256> jw;
   d42ba:	a806      	add	r0, sp, #24
   d42bc:	f7ff ff08 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
  	display.setCursor(20,5);
  	display.println("Publish");
	display.display();
	display.setTextSize(1);

   d42c0:	b052      	add	sp, #328	; 0x148
   d42c2:	ecbd 8b04 	vpop	{d8-d9}
   d42c6:	bd10      	pop	{r4, pc}
   d42c8:	000d803c 	.word	0x000d803c
   d42cc:	000d8055 	.word	0x000d8055
   d42d0:	000d805e 	.word	0x000d805e
   d42d4:	000d8068 	.word	0x000d8068
   d42d8:	000d8071 	.word	0x000d8071
   d42dc:	000d807b 	.word	0x000d807b
   d42e0:	2003e374 	.word	0x2003e374
   d42e4:	000d807e 	.word	0x000d807e
   d42e8:	2003e378 	.word	0x2003e378
   d42ec:	000d8087 	.word	0x000d8087

000d42f0 <_Z11displayInfov>:
		}
	}
 
}

void displayInfo() {
   d42f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float lat,lon,alt;
	uint8_t hr,mn,se,cs,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d42f4:	4c72      	ldr	r4, [pc, #456]	; (d44c0 <_Z11displayInfov+0x1d0>)
		}
	}
 
}

void displayInfo() {
   d42f6:	b0ad      	sub	sp, #180	; 0xb4
   d42f8:	f001 fbc4 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
	float lat,lon,alt;
	uint8_t hr,mn,se,cs,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d42fc:	6823      	ldr	r3, [r4, #0]
   d42fe:	1ac0      	subs	r0, r0, r3
   d4300:	f241 3387 	movw	r3, #4999	; 0x1387
   d4304:	4298      	cmp	r0, r3
   d4306:	f240 80d7 	bls.w	d44b8 <_Z11displayInfov+0x1c8>
   d430a:	f001 fbbb 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d430e:	6020      	str	r0, [r4, #0]
   d4310:	4c6c      	ldr	r4, [pc, #432]	; (d44c4 <_Z11displayInfov+0x1d4>)

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d4312:	7823      	ldrb	r3, [r4, #0]
   d4314:	2b00      	cmp	r3, #0
   d4316:	f000 80c2 	beq.w	d449e <_Z11displayInfov+0x1ae>
   d431a:	f001 fbb3 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   d431e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d4320:	1ac0      	subs	r0, r0, r3
   d4322:	f242 730f 	movw	r3, #9999	; 0x270f
   d4326:	4298      	cmp	r0, r3
   d4328:	f200 80b9 	bhi.w	d449e <_Z11displayInfov+0x1ae>
			lat = gps.location.lat();
   d432c:	4620      	mov	r0, r4
   d432e:	f001 f8bb 	bl	d54a8 <_ZN15TinyGPSLocation3latEv>
   d4332:	ec51 0b10 	vmov	r0, r1, d0
   d4336:	f003 fcc3 	bl	d7cc0 <__aeabi_d2f>
   d433a:	4605      	mov	r5, r0
			lon = gps.location.lng(); 
   d433c:	4620      	mov	r0, r4
   d433e:	f001 f8db 	bl	d54f8 <_ZN15TinyGPSLocation3lngEv>
   d4342:	ec51 0b10 	vmov	r0, r1, d0
   d4346:	f003 fcbb 	bl	d7cc0 <__aeabi_d2f>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   d434a:	f04f 0a00 	mov.w	sl, #0
   d434e:	f884 a079 	strb.w	sl, [r4, #121]	; 0x79
   d4352:	4606      	mov	r6, r0
			alt = gps.altitude.meters();
   d4354:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d4358:	f003 fa3a 	bl	d77d0 <__aeabi_i2d>
   d435c:	4b5a      	ldr	r3, [pc, #360]	; (d44c8 <_Z11displayInfov+0x1d8>)
   d435e:	2200      	movs	r2, #0
   d4360:	f003 fbc6 	bl	d7af0 <__aeabi_ddiv>
   d4364:	f003 fcac 	bl	d7cc0 <__aeabi_d2f>
   d4368:	4607      	mov	r7, r0
			hr = gps.time.hour();
   d436a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d436e:	f001 f90f 	bl	d5590 <_ZN11TinyGPSTime4hourEv>
   d4372:	4683      	mov	fp, r0
			mn = gps.time.minute();
   d4374:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4378:	f001 f914 	bl	d55a4 <_ZN11TinyGPSTime6minuteEv>
   d437c:	4680      	mov	r8, r0
			se = gps.time.second();
   d437e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4382:	f001 f91d 	bl	d55c0 <_ZN11TinyGPSTime6secondEv>
   d4386:	4681      	mov	r9, r0
			cs = gps.time.centisecond();
   d4388:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d438c:	f001 f924 	bl	d55d8 <_ZN11TinyGPSTime11centisecondEv>
			sat = gps.satellites.value();

			if(hr > 7) {
   d4390:	f1bb 0f07 	cmp.w	fp, #7
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }
   d4394:	f884 a089 	strb.w	sl, [r4, #137]	; 0x89
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
			cs = gps.time.centisecond();
   d4398:	4603      	mov	r3, r0
   d439a:	f8d4 a090 	ldr.w	sl, [r4, #144]	; 0x90
			sat = gps.satellites.value();

			if(hr > 7) {
   d439e:	d902      	bls.n	d43a6 <_Z11displayInfov+0xb6>
				hr = hr + UTC_offset;
   d43a0:	f1ab 0407 	sub.w	r4, fp, #7
   d43a4:	e001      	b.n	d43aa <_Z11displayInfov+0xba>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d43a6:	f10b 0411 	add.w	r4, fp, #17
   d43aa:	9306      	str	r3, [sp, #24]
   d43ac:	b2e4      	uxtb	r4, r4
			}
			Serial.printf("Time: %02i:%02i:%02i:%02i --- ",hr,mn,se,cs);
   d43ae:	f002 fba1 	bl	d6af4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d43b2:	9b06      	ldr	r3, [sp, #24]
   d43b4:	4a45      	ldr	r2, [pc, #276]	; (d44cc <_Z11displayInfov+0x1dc>)
   d43b6:	9302      	str	r3, [sp, #8]
   d43b8:	2100      	movs	r1, #0
   d43ba:	4623      	mov	r3, r4
   d43bc:	e88d 0300 	stmia.w	sp, {r8, r9}
   d43c0:	f001 fefb 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f, alt: %f \n", lat,lon,alt);
   d43c4:	f002 fb96 	bl	d6af4 <_Z16_fetch_usbserialv>
   d43c8:	4683      	mov	fp, r0
   d43ca:	4628      	mov	r0, r5
   d43cc:	f003 fa12 	bl	d77f4 <__aeabi_f2d>
   d43d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d43d4:	4630      	mov	r0, r6
   d43d6:	f003 fa0d 	bl	d77f4 <__aeabi_f2d>
   d43da:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d43de:	4638      	mov	r0, r7
   d43e0:	f003 fa08 	bl	d77f4 <__aeabi_f2d>
   d43e4:	ed9d 7b08 	vldr	d7, [sp, #32]
   d43e8:	ed8d 7b02 	vstr	d7, [sp, #8]
   d43ec:	ed9d 7b06 	vldr	d7, [sp, #24]
   d43f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d43f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43f8:	4a35      	ldr	r2, [pc, #212]	; (d44d0 <_Z11displayInfov+0x1e0>)
   d43fa:	ed8d 7b00 	vstr	d7, [sp]
   d43fe:	2100      	movs	r1, #0
   d4400:	4658      	mov	r0, fp
   d4402:	f001 feda 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
			if (gettingFix) {
   d4406:	4b33      	ldr	r3, [pc, #204]	; (d44d4 <_Z11displayInfov+0x1e4>)
   d4408:	781a      	ldrb	r2, [r3, #0]
   d440a:	b172      	cbz	r2, d442a <_Z11displayInfov+0x13a>
				gettingFix = false;
   d440c:	2200      	movs	r2, #0
   d440e:	701a      	strb	r2, [r3, #0]
   d4410:	f001 fb38 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4414:	4b30      	ldr	r3, [pc, #192]	; (d44d8 <_Z11displayInfov+0x1e8>)
   d4416:	681b      	ldr	r3, [r3, #0]
   d4418:	ebc3 0b00 	rsb	fp, r3, r0
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d441c:	f002 fb6a 	bl	d6af4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4420:	465b      	mov	r3, fp
   d4422:	4a2e      	ldr	r2, [pc, #184]	; (d44dc <_Z11displayInfov+0x1ec>)
   d4424:	2101      	movs	r1, #1
   d4426:	f001 fec8 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
			}
			display.clearDisplay();
   d442a:	482d      	ldr	r0, [pc, #180]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d442c:	f000 fa7e 	bl	d492c <_ZN16Adafruit_SSD130612clearDisplayEv>
			display.setCursor(0,0);
   d4430:	2200      	movs	r2, #0
   d4432:	4611      	mov	r1, r2
   d4434:	482a      	ldr	r0, [pc, #168]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d4436:	f000 fde8 	bl	d500a <_ZN12Adafruit_GFX9setCursorEss>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d443a:	4623      	mov	r3, r4
   d443c:	4a29      	ldr	r2, [pc, #164]	; (d44e4 <_Z11displayInfov+0x1f4>)
   d443e:	4828      	ldr	r0, [pc, #160]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d4440:	2100      	movs	r1, #0
   d4442:	e88d 0300 	stmia.w	sp, {r8, r9}
   d4446:	f001 feb8 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
   d444a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   d444e:	ed8d 7b04 	vstr	d7, [sp, #16]
   d4452:	ed9d 7b08 	vldr	d7, [sp, #32]
   d4456:	ed8d 7b02 	vstr	d7, [sp, #8]
   d445a:	ed9d 7b06 	vldr	d7, [sp, #24]
   d445e:	4a22      	ldr	r2, [pc, #136]	; (d44e8 <_Z11displayInfov+0x1f8>)
   d4460:	481f      	ldr	r0, [pc, #124]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d4462:	ed8d 7b00 	vstr	d7, [sp]
   d4466:	2100      	movs	r1, #0
   d4468:	f001 fea7 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
   d446c:	fa5f f38a 	uxtb.w	r3, sl
   d4470:	4a1e      	ldr	r2, [pc, #120]	; (d44ec <_Z11displayInfov+0x1fc>)
   d4472:	481b      	ldr	r0, [pc, #108]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d4474:	2100      	movs	r1, #0
   d4476:	f001 fea0 	bl	d61ba <_ZN5Print11printf_implEbPKcz>
			display.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
			display.printf("lat    %f \nlong %f \nalt %f\n", lat,lon,alt);
			display.printf("satelites %i \n", sat);
			display.display();
   d447a:	4819      	ldr	r0, [pc, #100]	; (d44e0 <_Z11displayInfov+0x1f0>)
   d447c:	f000 fb90 	bl	d4ba0 <_ZN16Adafruit_SSD13067displayEv>

			if(digitalRead(D2)) {
   d4480:	2002      	movs	r0, #2
   d4482:	f002 fe71 	bl	d7168 <digitalRead>
   d4486:	b1b8      	cbz	r0, d44b8 <_Z11displayInfov+0x1c8>
				sendJSON(lat,lon,alt);
   d4488:	ee01 7a10 	vmov	s2, r7
   d448c:	ee00 6a90 	vmov	s1, r6
   d4490:	ee00 5a10 	vmov	s0, r5
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d4494:	b02d      	add	sp, #180	; 0xb4
   d4496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			display.printf("lat    %f \nlong %f \nalt %f\n", lat,lon,alt);
			display.printf("satelites %i \n", sat);
			display.display();

			if(digitalRead(D2)) {
				sendJSON(lat,lon,alt);
   d449a:	f7ff be93 	b.w	d41c4 <_Z8sendJSONfff>
			}
		}
		else {
			strcpy(buf, "no location");
   d449e:	4914      	ldr	r1, [pc, #80]	; (d44f0 <_Z11displayInfov+0x200>)
   d44a0:	a80c      	add	r0, sp, #48	; 0x30
   d44a2:	f003 fcef 	bl	d7e84 <strcpy>
			if (!gettingFix) {
   d44a6:	4b0b      	ldr	r3, [pc, #44]	; (d44d4 <_Z11displayInfov+0x1e4>)
   d44a8:	781a      	ldrb	r2, [r3, #0]
   d44aa:	b92a      	cbnz	r2, d44b8 <_Z11displayInfov+0x1c8>
				gettingFix = true;
   d44ac:	2201      	movs	r2, #1
   d44ae:	701a      	strb	r2, [r3, #0]
   d44b0:	f001 fae8 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d44b4:	4b08      	ldr	r3, [pc, #32]	; (d44d8 <_Z11displayInfov+0x1e8>)
   d44b6:	6018      	str	r0, [r3, #0]
			}
		}
	}
}
   d44b8:	b02d      	add	sp, #180	; 0xb4
   d44ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44be:	bf00      	nop
   d44c0:	2003e3a4 	.word	0x2003e3a4
   d44c4:	2003e29c 	.word	0x2003e29c
   d44c8:	40590000 	.word	0x40590000
   d44cc:	000d808f 	.word	0x000d808f
   d44d0:	000d80ae 	.word	0x000d80ae
   d44d4:	2003e39c 	.word	0x2003e39c
   d44d8:	2003e3a0 	.word	0x2003e3a0
   d44dc:	000d80cb 	.word	0x000d80cb
   d44e0:	2003e378 	.word	0x2003e378
   d44e4:	000d80eb 	.word	0x000d80eb
   d44e8:	000d8102 	.word	0x000d8102
   d44ec:	000d811e 	.word	0x000d811e
   d44f0:	000d812d 	.word	0x000d812d

000d44f4 <loop>:

	pinMode(D2,INPUT_PULLDOWN);
}

void loop()
{
   d44f4:	b508      	push	{r3, lr}
	while (Serial1.available() > 0) {
   d44f6:	f002 fbd1 	bl	d6c9c <_Z22__fetch_global_Serial1v>
   d44fa:	6803      	ldr	r3, [r0, #0]
   d44fc:	691b      	ldr	r3, [r3, #16]
   d44fe:	4798      	blx	r3
   d4500:	2800      	cmp	r0, #0
   d4502:	dd0d      	ble.n	d4520 <loop+0x2c>
		if (gps.encode(Serial1.read())) {
   d4504:	f002 fbca 	bl	d6c9c <_Z22__fetch_global_Serial1v>
   d4508:	6803      	ldr	r3, [r0, #0]
   d450a:	695b      	ldr	r3, [r3, #20]
   d450c:	4798      	blx	r3
   d450e:	b2c1      	uxtb	r1, r0
   d4510:	4804      	ldr	r0, [pc, #16]	; (d4524 <loop+0x30>)
   d4512:	f001 f9c5 	bl	d58a0 <_ZN11TinyGPSPlus6encodeEc>
   d4516:	2800      	cmp	r0, #0
   d4518:	d0ed      	beq.n	d44f6 <loop+0x2>
			displayInfo();
   d451a:	f7ff fee9 	bl	d42f0 <_Z11displayInfov>
   d451e:	e7ea      	b.n	d44f6 <loop+0x2>
   d4520:	bd08      	pop	{r3, pc}
   d4522:	bf00      	nop
   d4524:	2003e29c 	.word	0x2003e29c

000d4528 <_ZN16Adafruit_SSD1306D0Ev>:
   d4528:	b510      	push	{r4, lr}
   d452a:	2124      	movs	r1, #36	; 0x24
   d452c:	4604      	mov	r4, r0
   d452e:	f002 fe9f 	bl	d7270 <_ZdlPvj>
   d4532:	4620      	mov	r0, r4
   d4534:	bd10      	pop	{r4, pc}
	...

000d4538 <_GLOBAL__sub_I_display>:
  	display.setCursor(20,5);
  	display.println("Publish");
	display.display();
	display.setTextSize(1);

   d4538:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d453a:	4b0c      	ldr	r3, [pc, #48]	; (d456c <_GLOBAL__sub_I_display+0x34>)

#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d453c:	4d0c      	ldr	r5, [pc, #48]	; (d4570 <_GLOBAL__sub_I_display+0x38>)
   d453e:	2401      	movs	r4, #1
   d4540:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4542:	f001 fa17 	bl	d5974 <HAL_Pin_Map>
   d4546:	2104      	movs	r1, #4
   d4548:	4628      	mov	r0, r5
   d454a:	f000 f9d9 	bl	d4900 <_ZN16Adafruit_SSD1306C1Ea>
   d454e:	4a09      	ldr	r2, [pc, #36]	; (d4574 <_GLOBAL__sub_I_display+0x3c>)
   d4550:	4909      	ldr	r1, [pc, #36]	; (d4578 <_GLOBAL__sub_I_display+0x40>)
   d4552:	4628      	mov	r0, r5
   d4554:	f002 fe7e 	bl	d7254 <__aeabi_atexit>

SYSTEM_THREAD(ENABLED);
   d4558:	4620      	mov	r0, r4
   d455a:	2100      	movs	r1, #0
   d455c:	f001 fbb2 	bl	d5cc4 <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4560:	4806      	ldr	r0, [pc, #24]	; (d457c <_GLOBAL__sub_I_display+0x44>)
  	display.setCursor(20,5);
  	display.println("Publish");
	display.display();
	display.setTextSize(1);

   d4562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4566:	f000 becd 	b.w	d5304 <_ZN11TinyGPSPlusC1Ev>
   d456a:	bf00      	nop
   d456c:	2003e374 	.word	0x2003e374
   d4570:	2003e378 	.word	0x2003e378
   d4574:	2003e298 	.word	0x2003e298
   d4578:	000d40cd 	.word	0x000d40cd
   d457c:	2003e29c 	.word	0x2003e29c

000d4580 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4580:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4582:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4584:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4588:	2c02      	cmp	r4, #2
   d458a:	d008      	beq.n	d459e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d458c:	2c03      	cmp	r4, #3
   d458e:	d00f      	beq.n	d45b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4590:	2c01      	cmp	r4, #1
   d4592:	d170      	bne.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4594:	8904      	ldrh	r4, [r0, #8]
   d4596:	3c01      	subs	r4, #1
   d4598:	1aa2      	subs	r2, r4, r2
   d459a:	b212      	sxth	r2, r2
      break;
   d459c:	e00c      	b.n	d45b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d459e:	8944      	ldrh	r4, [r0, #10]
   d45a0:	3c01      	subs	r4, #1
   d45a2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d45a4:	8904      	ldrh	r4, [r0, #8]
   d45a6:	1ae4      	subs	r4, r4, r3
   d45a8:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d45aa:	b212      	sxth	r2, r2
      x -= (w-1);
   d45ac:	b209      	sxth	r1, r1
      break;
   d45ae:	e062      	b.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d45b0:	8944      	ldrh	r4, [r0, #10]
   d45b2:	1ae4      	subs	r4, r4, r3
   d45b4:	1a61      	subs	r1, r4, r1
   d45b6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d45b8:	2a00      	cmp	r2, #0
   d45ba:	db5b      	blt.n	d4674 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d45bc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d45c0:	4294      	cmp	r4, r2
   d45c2:	f340 8090 	ble.w	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d45c6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d45c8:	bfbe      	ittt	lt
   d45ca:	185b      	addlt	r3, r3, r1
   d45cc:	b21b      	sxthlt	r3, r3
    __y = 0;
   d45ce:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d45d0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d45d4:	18cc      	adds	r4, r1, r3
   d45d6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d45d8:	bfc4      	itt	gt
   d45da:	1a43      	subgt	r3, r0, r1
   d45dc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d45de:	2b00      	cmp	r3, #0
   d45e0:	f340 8081 	ble.w	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d45e4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d45e6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d45e8:	4f3f      	ldr	r7, [pc, #252]	; (d46e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d45ea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d45ee:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d45f2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d45f4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d45f8:	d017      	beq.n	d462a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d45fa:	f1c1 0108 	rsb	r1, r1, #8
   d45fe:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4600:	493a      	ldr	r1, [pc, #232]	; (d46ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4602:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4604:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4606:	bf3f      	itttt	cc
   d4608:	ebc3 0e00 	rsbcc	lr, r3, r0
   d460c:	21ff      	movcc	r1, #255	; 0xff
   d460e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4612:	400e      	andcc	r6, r1
   d4614:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4616:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4618:	bf0c      	ite	eq
   d461a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d461c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d461e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4620:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4622:	d360      	bcc.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4624:	1a18      	subs	r0, r3, r0
   d4626:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4628:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d462a:	2b07      	cmp	r3, #7
   d462c:	d917      	bls.n	d465e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d462e:	2d01      	cmp	r5, #1
   d4630:	bf0c      	ite	eq
   d4632:	20ff      	moveq	r0, #255	; 0xff
   d4634:	2000      	movne	r0, #0
   d4636:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d463a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d463c:	3a08      	subs	r2, #8
   d463e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4640:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4642:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4646:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d464a:	d8f7      	bhi.n	d463c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d464c:	f1a3 0208 	sub.w	r2, r3, #8
   d4650:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4654:	3201      	adds	r2, #1
   d4656:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d465a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d465e:	2b00      	cmp	r3, #0
   d4660:	d041      	beq.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4662:	4a23      	ldr	r2, [pc, #140]	; (d46f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4664:	5cd2      	ldrb	r2, [r2, r3]
   d4666:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4668:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d466a:	bf0c      	ite	eq
   d466c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d466e:	4393      	bicne	r3, r2
   d4670:	7023      	strb	r3, [r4, #0]
   d4672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4676:	2a00      	cmp	r2, #0
   d4678:	db35      	blt.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d467a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d467e:	4294      	cmp	r4, r2
   d4680:	dd31      	ble.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4682:	2900      	cmp	r1, #0
    w += x;
   d4684:	bfbc      	itt	lt
   d4686:	18c9      	addlt	r1, r1, r3
   d4688:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d468a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d468e:	bfb8      	it	lt
   d4690:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4692:	18ce      	adds	r6, r1, r3
   d4694:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4696:	bfc4      	itt	gt
   d4698:	1a63      	subgt	r3, r4, r1
   d469a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d469c:	2b00      	cmp	r3, #0
   d469e:	dd22      	ble.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d46a0:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d46a2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d46a6:	4810      	ldr	r0, [pc, #64]	; (d46e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d46a8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46ac:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d46ae:	2001      	movs	r0, #1
   d46b0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d46b4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d46b6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d46b8:	d109      	bne.n	d46ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d46ba:	3b01      	subs	r3, #1
   d46bc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d46be:	1c5c      	adds	r4, r3, #1
   d46c0:	d011      	beq.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d46c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d46c6:	4310      	orrs	r0, r2
   d46c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d46cc:	e7f5      	b.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d46ce:	43d2      	mvns	r2, r2
   d46d0:	b2d2      	uxtb	r2, r2
   d46d2:	3b01      	subs	r3, #1
   d46d4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d46d6:	1c58      	adds	r0, r3, #1
   d46d8:	d005      	beq.n	d46e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d46da:	f811 0b01 	ldrb.w	r0, [r1], #1
   d46de:	4010      	ands	r0, r2
   d46e0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d46e4:	e7f5      	b.n	d46d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d46e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46e8:	2003de2c 	.word	0x2003de2c
   d46ec:	2003de24 	.word	0x2003de24
   d46f0:	2003de1c 	.word	0x2003de1c

000d46f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d46f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d46f6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d46f8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d46fc:	2c02      	cmp	r4, #2
   d46fe:	d008      	beq.n	d4712 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4700:	2c03      	cmp	r4, #3
   d4702:	d00f      	beq.n	d4724 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4704:	2c01      	cmp	r4, #1
   d4706:	d112      	bne.n	d472e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4708:	8904      	ldrh	r4, [r0, #8]
   d470a:	1ae4      	subs	r4, r4, r3
   d470c:	1aa2      	subs	r2, r4, r2
   d470e:	b212      	sxth	r2, r2
      break;
   d4710:	e06d      	b.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4712:	8904      	ldrh	r4, [r0, #8]
   d4714:	3c01      	subs	r4, #1
   d4716:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4718:	8944      	ldrh	r4, [r0, #10]
   d471a:	1ae4      	subs	r4, r4, r3
   d471c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d471e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4720:	b212      	sxth	r2, r2
      break;
   d4722:	e004      	b.n	d472e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4724:	8944      	ldrh	r4, [r0, #10]
   d4726:	3c01      	subs	r4, #1
   d4728:	1a61      	subs	r1, r4, r1
   d472a:	b209      	sxth	r1, r1
      break;
   d472c:	e05f      	b.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d472e:	2900      	cmp	r1, #0
   d4730:	db5c      	blt.n	d47ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4732:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4736:	428c      	cmp	r4, r1
   d4738:	f340 8091 	ble.w	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d473c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d473e:	bfbc      	itt	lt
   d4740:	18d2      	addlt	r2, r2, r3
   d4742:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4744:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4748:	bfb8      	it	lt
   d474a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d474c:	18d4      	adds	r4, r2, r3
   d474e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4750:	bfc4      	itt	gt
   d4752:	1a83      	subgt	r3, r0, r2
   d4754:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4756:	2b00      	cmp	r3, #0
   d4758:	f340 8081 	ble.w	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d475c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d475e:	4e40      	ldr	r6, [pc, #256]	; (d4860 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4760:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4762:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4764:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4768:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d476c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4770:	d017      	beq.n	d47a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4772:	f1c4 0408 	rsb	r4, r4, #8
   d4776:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4778:	4c3a      	ldr	r4, [pc, #232]	; (d4864 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d477a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d477c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d477e:	bf3f      	itttt	cc
   d4780:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4784:	24ff      	movcc	r4, #255	; 0xff
   d4786:	fa44 f40e 	asrcc.w	r4, r4, lr
   d478a:	4027      	andcc	r7, r4
   d478c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d478e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4790:	bf0c      	ite	eq
   d4792:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4794:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4796:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4798:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d479a:	d360      	bcc.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d479c:	1a10      	subs	r0, r2, r0
   d479e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d47a0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d47a2:	2a07      	cmp	r2, #7
   d47a4:	d917      	bls.n	d47d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d47a6:	2d01      	cmp	r5, #1
   d47a8:	bf0c      	ite	eq
   d47aa:	24ff      	moveq	r4, #255	; 0xff
   d47ac:	2400      	movne	r4, #0
   d47ae:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d47b2:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d47b4:	3908      	subs	r1, #8
   d47b6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d47b8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d47ba:	f800 4c80 	strb.w	r4, [r0, #-128]
   d47be:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d47c2:	d8f7      	bhi.n	d47b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d47c4:	f1a2 0108 	sub.w	r1, r2, #8
   d47c8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d47cc:	3101      	adds	r1, #1
   d47ce:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d47d2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d47d6:	2a00      	cmp	r2, #0
   d47d8:	d041      	beq.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d47da:	4923      	ldr	r1, [pc, #140]	; (d4868 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d47dc:	5c89      	ldrb	r1, [r1, r2]
   d47de:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d47e0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d47e2:	bf0c      	ite	eq
   d47e4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d47e6:	438a      	bicne	r2, r1
   d47e8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d47ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d47ee:	2900      	cmp	r1, #0
   d47f0:	db35      	blt.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d47f2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d47f6:	428c      	cmp	r4, r1
   d47f8:	dd31      	ble.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d47fa:	2a00      	cmp	r2, #0
    w += x;
   d47fc:	bfbc      	itt	lt
   d47fe:	18d2      	addlt	r2, r2, r3
   d4800:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4802:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4806:	bfb8      	it	lt
   d4808:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d480a:	18d6      	adds	r6, r2, r3
   d480c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d480e:	bfc4      	itt	gt
   d4810:	1aa3      	subgt	r3, r4, r2
   d4812:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4814:	2b00      	cmp	r3, #0
   d4816:	dd22      	ble.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4818:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d481a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d481e:	4810      	ldr	r0, [pc, #64]	; (d4860 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4820:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4824:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4826:	2201      	movs	r2, #1
   d4828:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d482c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d482e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4830:	d109      	bne.n	d4846 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4832:	1e5a      	subs	r2, r3, #1
   d4834:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4836:	1c5c      	adds	r4, r3, #1
   d4838:	d011      	beq.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d483a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d483e:	430a      	orrs	r2, r1
   d4840:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4844:	e7f5      	b.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4846:	43c9      	mvns	r1, r1
   d4848:	b2c9      	uxtb	r1, r1
   d484a:	1e5a      	subs	r2, r3, #1
   d484c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d484e:	1c5a      	adds	r2, r3, #1
   d4850:	d005      	beq.n	d485e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4852:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4856:	400a      	ands	r2, r1
   d4858:	f800 2c01 	strb.w	r2, [r0, #-1]
   d485c:	e7f5      	b.n	d484a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4860:	2003de2c 	.word	0x2003de2c
   d4864:	2003de24 	.word	0x2003de24
   d4868:	2003de1c 	.word	0x2003de1c

000d486c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d486e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4870:	4606      	mov	r6, r0
   d4872:	4614      	mov	r4, r2
   d4874:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4876:	db3f      	blt.n	d48f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4878:	f000 fbd4 	bl	d5024 <_ZN12Adafruit_GFX5widthEv>
   d487c:	4285      	cmp	r5, r0
   d487e:	da3b      	bge.n	d48f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4880:	2c00      	cmp	r4, #0
   d4882:	db39      	blt.n	d48f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4884:	4630      	mov	r0, r6
   d4886:	f000 fbd0 	bl	d502a <_ZN12Adafruit_GFX6heightEv>
   d488a:	4284      	cmp	r4, r0
   d488c:	da34      	bge.n	d48f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d488e:	4630      	mov	r0, r6
   d4890:	f000 fbc6 	bl	d5020 <_ZN12Adafruit_GFX11getRotationEv>
   d4894:	2802      	cmp	r0, #2
   d4896:	d127      	bne.n	d48e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4898:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d489a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d489c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d489e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d48a0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d48a2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d48a4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d48a6:	b204      	sxth	r4, r0
   d48a8:	e006      	b.n	d48b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d48aa:	2801      	cmp	r0, #1
   d48ac:	d104      	bne.n	d48b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d48ae:	8933      	ldrh	r3, [r6, #8]
   d48b0:	3b01      	subs	r3, #1
   d48b2:	1b1b      	subs	r3, r3, r4
   d48b4:	462c      	mov	r4, r5
   d48b6:	b21d      	sxth	r5, r3
   d48b8:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d48ba:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d48bc:	fb94 f0f0 	sdiv	r0, r4, r0
   d48c0:	b200      	sxth	r0, r0
   d48c2:	4b0e      	ldr	r3, [pc, #56]	; (d48fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d48c4:	f004 0207 	and.w	r2, r4, #7
   d48c8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d48cc:	d104      	bne.n	d48d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d48ce:	4097      	lsls	r7, r2
   d48d0:	5c5a      	ldrb	r2, [r3, r1]
   d48d2:	4317      	orrs	r7, r2
   d48d4:	545f      	strb	r7, [r3, r1]
   d48d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d48d8:	5c58      	ldrb	r0, [r3, r1]
   d48da:	2701      	movs	r7, #1
   d48dc:	fa07 f202 	lsl.w	r2, r7, r2
   d48e0:	ea20 0202 	bic.w	r2, r0, r2
   d48e4:	545a      	strb	r2, [r3, r1]
   d48e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d48e8:	2803      	cmp	r0, #3
   d48ea:	d1de      	bne.n	d48aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d48ec:	8973      	ldrh	r3, [r6, #10]
   d48ee:	3b01      	subs	r3, #1
   d48f0:	1b5b      	subs	r3, r3, r5
   d48f2:	4625      	mov	r5, r4
   d48f4:	b21c      	sxth	r4, r3
   d48f6:	e7df      	b.n	d48b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d48f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48fa:	bf00      	nop
   d48fc:	2003de2c 	.word	0x2003de2c

000d4900 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4900:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4902:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4904:	4604      	mov	r4, r0
   d4906:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4908:	2180      	movs	r1, #128	; 0x80
   d490a:	f000 fa9f 	bl	d4e4c <_ZN12Adafruit_GFXC1Ess>
   d490e:	4b06      	ldr	r3, [pc, #24]	; (d4928 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4910:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4912:	23ff      	movs	r3, #255	; 0xff
   d4914:	7763      	strb	r3, [r4, #29]
   d4916:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d491a:	77e3      	strb	r3, [r4, #31]
   d491c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d491e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4922:	4620      	mov	r0, r4
   d4924:	bd38      	pop	{r3, r4, r5, pc}
   d4926:	bf00      	nop
   d4928:	000d8144 	.word	0x000d8144

000d492c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d492c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4930:	2100      	movs	r1, #0
   d4932:	4801      	ldr	r0, [pc, #4]	; (d4938 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4934:	f003 ba31 	b.w	d7d9a <memset>
   d4938:	2003de2c 	.word	0x2003de2c

000d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d493c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d493e:	4d09      	ldr	r5, [pc, #36]	; (d4964 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4940:	6829      	ldr	r1, [r5, #0]
   d4942:	f011 0401 	ands.w	r4, r1, #1
   d4946:	d10a      	bne.n	d495e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4948:	4628      	mov	r0, r5
   d494a:	f7ff fbb7 	bl	d40bc <__cxa_guard_acquire>
   d494e:	b130      	cbz	r0, d495e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4950:	4621      	mov	r1, r4
   d4952:	4805      	ldr	r0, [pc, #20]	; (d4968 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4954:	f001 fab6 	bl	d5ec4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4958:	4628      	mov	r0, r5
   d495a:	f7ff fbb4 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d495e:	4802      	ldr	r0, [pc, #8]	; (d4968 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4960:	bd38      	pop	{r3, r4, r5, pc}
   d4962:	bf00      	nop
   d4964:	2003e3a8 	.word	0x2003e3a8
   d4968:	2003e3ac 	.word	0x2003e3ac

000d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d496c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d496e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4972:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4974:	4604      	mov	r4, r0
   d4976:	460d      	mov	r5, r1
  if (sid != -1)
   d4978:	d028      	beq.n	d49cc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d497a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d497e:	2101      	movs	r1, #1
   d4980:	b280      	uxth	r0, r0
   d4982:	f002 fbd8 	bl	d7136 <digitalWrite>
    digitalWrite(dc, LOW);
   d4986:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d498a:	2100      	movs	r1, #0
   d498c:	b280      	uxth	r0, r0
   d498e:	f002 fbd2 	bl	d7136 <digitalWrite>
    digitalWrite(cs, LOW);
   d4992:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4996:	2100      	movs	r1, #0
   d4998:	b280      	uxth	r0, r0
   d499a:	f002 fbcc 	bl	d7136 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d499e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d49a2:	b12b      	cbz	r3, d49b0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d49a4:	f7ff ffca 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d49a8:	4629      	mov	r1, r5
   d49aa:	f001 fb35 	bl	d6018 <_ZN8SPIClass8transferEh>
   d49ae:	e005      	b.n	d49bc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d49b0:	462b      	mov	r3, r5
   d49b2:	2201      	movs	r2, #1
   d49b4:	7fa1      	ldrb	r1, [r4, #30]
   d49b6:	7f60      	ldrb	r0, [r4, #29]
   d49b8:	f002 fbe9 	bl	d718e <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d49bc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49c0:	2101      	movs	r1, #1
   d49c2:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d49c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d49c8:	f002 bbb5 	b.w	d7136 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d49cc:	f002 fc1c 	bl	d7208 <_Z19__fetch_global_Wirev>
   d49d0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d49d4:	f002 f9e4 	bl	d6da0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d49d8:	f002 fc16 	bl	d7208 <_Z19__fetch_global_Wirev>
   d49dc:	6803      	ldr	r3, [r0, #0]
   d49de:	2100      	movs	r1, #0
   d49e0:	689b      	ldr	r3, [r3, #8]
   d49e2:	4798      	blx	r3
    Wire.write(c);
   d49e4:	f002 fc10 	bl	d7208 <_Z19__fetch_global_Wirev>
   d49e8:	6803      	ldr	r3, [r0, #0]
   d49ea:	4629      	mov	r1, r5
   d49ec:	689b      	ldr	r3, [r3, #8]
   d49ee:	4798      	blx	r3
    Wire.endTransmission();
   d49f0:	f002 fc0a 	bl	d7208 <_Z19__fetch_global_Wirev>
  }
}
   d49f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d49f8:	f002 b9d9 	b.w	d6dae <_ZN7TwoWire15endTransmissionEv>

000d49fc <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d49fc:	b538      	push	{r3, r4, r5, lr}
   d49fe:	4604      	mov	r4, r0
   d4a00:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4a02:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4a04:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4a08:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4a0a:	3301      	adds	r3, #1
   d4a0c:	d037      	beq.n	d4a7e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4a0e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4a12:	2101      	movs	r1, #1
   d4a14:	b280      	uxth	r0, r0
   d4a16:	f002 fb7d 	bl	d7114 <pinMode>
    pinMode(cs, OUTPUT);
   d4a1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a1e:	2101      	movs	r1, #1
   d4a20:	b280      	uxth	r0, r0
   d4a22:	f002 fb77 	bl	d7114 <pinMode>
    if (!hwSPI){
   d4a26:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a2a:	b95b      	cbnz	r3, d4a44 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4a2c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4a30:	2101      	movs	r1, #1
   d4a32:	b280      	uxth	r0, r0
   d4a34:	f002 fb6e 	bl	d7114 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4a38:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4a3c:	2101      	movs	r1, #1
   d4a3e:	b280      	uxth	r0, r0
   d4a40:	f002 fb68 	bl	d7114 <pinMode>
    	}
    if (hwSPI){
   d4a44:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a48:	b1eb      	cbz	r3, d4a86 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4a4a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a4e:	2101      	movs	r1, #1
   d4a50:	b280      	uxth	r0, r0
   d4a52:	f002 fb70 	bl	d7136 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4a56:	f7ff ff71 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a5a:	2101      	movs	r1, #1
   d4a5c:	f001 fa4d 	bl	d5efa <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4a60:	f7ff ff6c 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a64:	2110      	movs	r1, #16
   d4a66:	f001 fab3 	bl	d5fd0 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4a6a:	f7ff ff67 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a6e:	2100      	movs	r1, #0
   d4a70:	f001 fa54 	bl	d5f1c <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4a74:	f7ff ff62 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a78:	f001 fa2e 	bl	d5ed8 <_ZN8SPIClass5beginEv>
   d4a7c:	e003      	b.n	d4a86 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4a7e:	f002 fbc3 	bl	d7208 <_Z19__fetch_global_Wirev>
   d4a82:	f002 f983 	bl	d6d8c <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4a86:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a8a:	2101      	movs	r1, #1
   d4a8c:	b280      	uxth	r0, r0
   d4a8e:	f002 fb41 	bl	d7114 <pinMode>
  digitalWrite(rst, HIGH);
   d4a92:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a96:	2101      	movs	r1, #1
   d4a98:	b280      	uxth	r0, r0
   d4a9a:	f002 fb4c 	bl	d7136 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4a9e:	2001      	movs	r0, #1
   d4aa0:	f001 fbd8 	bl	d6254 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4aa4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4aa8:	2100      	movs	r1, #0
   d4aaa:	b280      	uxth	r0, r0
   d4aac:	f002 fb43 	bl	d7136 <digitalWrite>
  // wait 10ms
  delay(10);
   d4ab0:	200a      	movs	r0, #10
   d4ab2:	f001 fbcf 	bl	d6254 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4ab6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4aba:	2101      	movs	r1, #1
   d4abc:	b280      	uxth	r0, r0
   d4abe:	f002 fb3a 	bl	d7136 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	21ae      	movs	r1, #174	; 0xae
   d4ac6:	f7ff ff51 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4aca:	4620      	mov	r0, r4
   d4acc:	21d5      	movs	r1, #213	; 0xd5
   d4ace:	f7ff ff4d 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	2180      	movs	r1, #128	; 0x80
   d4ad6:	f7ff ff49 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4ada:	4620      	mov	r0, r4
   d4adc:	21a8      	movs	r1, #168	; 0xa8
   d4ade:	f7ff ff45 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	213f      	movs	r1, #63	; 0x3f
   d4ae6:	f7ff ff41 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4aea:	4620      	mov	r0, r4
   d4aec:	21d3      	movs	r1, #211	; 0xd3
   d4aee:	f7ff ff3d 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4af2:	4620      	mov	r0, r4
   d4af4:	2100      	movs	r1, #0
   d4af6:	f7ff ff39 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4afa:	4620      	mov	r0, r4
   d4afc:	2140      	movs	r1, #64	; 0x40
   d4afe:	f7ff ff35 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4b02:	218d      	movs	r1, #141	; 0x8d
   d4b04:	4620      	mov	r0, r4
   d4b06:	f7ff ff31 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4b0a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4b0c:	bf0c      	ite	eq
   d4b0e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4b10:	2114      	movne	r1, #20
   d4b12:	4620      	mov	r0, r4
   d4b14:	f7ff ff2a 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4b18:	4620      	mov	r0, r4
   d4b1a:	2120      	movs	r1, #32
   d4b1c:	f7ff ff26 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4b20:	4620      	mov	r0, r4
   d4b22:	2100      	movs	r1, #0
   d4b24:	f7ff ff22 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4b28:	4620      	mov	r0, r4
   d4b2a:	21a1      	movs	r1, #161	; 0xa1
   d4b2c:	f7ff ff1e 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4b30:	4620      	mov	r0, r4
   d4b32:	21c8      	movs	r1, #200	; 0xc8
   d4b34:	f7ff ff1a 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4b38:	4620      	mov	r0, r4
   d4b3a:	21da      	movs	r1, #218	; 0xda
   d4b3c:	f7ff ff16 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4b40:	4620      	mov	r0, r4
   d4b42:	2112      	movs	r1, #18
   d4b44:	f7ff ff12 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4b48:	2181      	movs	r1, #129	; 0x81
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	f7ff ff0e 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4b50:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4b52:	bf0c      	ite	eq
   d4b54:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4b56:	21cf      	movne	r1, #207	; 0xcf
   d4b58:	4620      	mov	r0, r4
   d4b5a:	f7ff ff07 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4b5e:	21d9      	movs	r1, #217	; 0xd9
   d4b60:	4620      	mov	r0, r4
   d4b62:	f7ff ff03 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4b66:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4b68:	bf0c      	ite	eq
   d4b6a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4b6c:	21f1      	movne	r1, #241	; 0xf1
   d4b6e:	4620      	mov	r0, r4
   d4b70:	f7ff fefc 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4b74:	4620      	mov	r0, r4
   d4b76:	21db      	movs	r1, #219	; 0xdb
   d4b78:	f7ff fef8 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	2140      	movs	r1, #64	; 0x40
   d4b80:	f7ff fef4 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4b84:	4620      	mov	r0, r4
   d4b86:	21a4      	movs	r1, #164	; 0xa4
   d4b88:	f7ff fef0 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	21a6      	movs	r1, #166	; 0xa6
   d4b90:	f7ff feec 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4b94:	4620      	mov	r0, r4
   d4b96:	21af      	movs	r1, #175	; 0xaf
}
   d4b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4b9c:	f7ff bee6 	b.w	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4ba0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4ba4:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4ba6:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4ba8:	f7ff fee0 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4bac:	2100      	movs	r1, #0
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff fedc 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4bb4:	217f      	movs	r1, #127	; 0x7f
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	f7ff fed8 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4bbc:	2122      	movs	r1, #34	; 0x22
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	f7ff fed4 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4bc4:	2100      	movs	r1, #0
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f7ff fed0 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4bcc:	2107      	movs	r1, #7
   d4bce:	4620      	mov	r0, r4
   d4bd0:	f7ff fecc 	bl	d496c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4bd4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4bd8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4c98 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4bdc:	3301      	adds	r3, #1
   d4bde:	d035      	beq.n	d4c4c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4be0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4be4:	2101      	movs	r1, #1
   d4be6:	b280      	uxth	r0, r0
   d4be8:	f002 faa5 	bl	d7136 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4bec:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4bf0:	2101      	movs	r1, #1
   d4bf2:	b280      	uxth	r0, r0
   d4bf4:	f002 fa9f 	bl	d7136 <digitalWrite>
    digitalWrite(cs, LOW);
   d4bf8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4bfc:	2100      	movs	r1, #0
   d4bfe:	b280      	uxth	r0, r0
   d4c00:	f002 fa99 	bl	d7136 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c04:	2001      	movs	r0, #1
   d4c06:	f000 ff35 	bl	d5a74 <HAL_Delay_Microseconds>
   d4c0a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4c0c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4c10:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4c14:	b12b      	cbz	r3, d4c22 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4c16:	f7ff fe91 	bl	d493c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c1a:	4631      	mov	r1, r6
   d4c1c:	f001 f9fc 	bl	d6018 <_ZN8SPIClass8transferEh>
   d4c20:	e005      	b.n	d4c2e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4c22:	4633      	mov	r3, r6
   d4c24:	2201      	movs	r2, #1
   d4c26:	7fa1      	ldrb	r1, [r4, #30]
   d4c28:	7f60      	ldrb	r0, [r4, #29]
   d4c2a:	f002 fab0 	bl	d718e <shiftOut>
   d4c2e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4c30:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4c34:	d1ea      	bne.n	d4c0c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4c36:	2001      	movs	r0, #1
   d4c38:	f000 ff1c 	bl	d5a74 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4c3c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c40:	2101      	movs	r1, #1
   d4c42:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4c48:	f002 ba75 	b.w	d7136 <digitalWrite>
   d4c4c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4c4e:	f002 fadb 	bl	d7208 <_Z19__fetch_global_Wirev>
   d4c52:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4c56:	f002 f8a3 	bl	d6da0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4c5a:	f002 fad5 	bl	d7208 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4c5e:	6803      	ldr	r3, [r0, #0]
   d4c60:	2140      	movs	r1, #64	; 0x40
   d4c62:	689b      	ldr	r3, [r3, #8]
   d4c64:	4798      	blx	r3
   d4c66:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4c68:	f002 face 	bl	d7208 <_Z19__fetch_global_Wirev>
   d4c6c:	19af      	adds	r7, r5, r6
   d4c6e:	6803      	ldr	r3, [r0, #0]
   d4c70:	b2bf      	uxth	r7, r7
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4c78:	3601      	adds	r6, #1
   d4c7a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4c7c:	2e10      	cmp	r6, #16
   d4c7e:	d1f3      	bne.n	d4c68 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4c80:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4c82:	f002 fac1 	bl	d7208 <_Z19__fetch_global_Wirev>
   d4c86:	b2ad      	uxth	r5, r5
   d4c88:	f002 f891 	bl	d6dae <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4c8c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4c90:	d1dd      	bne.n	d4c4e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c96:	bf00      	nop
   d4c98:	2003de2c 	.word	0x2003de2c

000d4c9c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4c9c:	f000 be6a 	b.w	d5974 <HAL_Pin_Map>

000d4ca0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ca4:	b085      	sub	sp, #20
   d4ca6:	461e      	mov	r6, r3
   d4ca8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4cac:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4cb0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4cb2:	1a9a      	subs	r2, r3, r2
   d4cb4:	2a00      	cmp	r2, #0
   d4cb6:	bfb8      	it	lt
   d4cb8:	4252      	neglt	r2, r2
   d4cba:	9200      	str	r2, [sp, #0]
   d4cbc:	1a72      	subs	r2, r6, r1
   d4cbe:	2a00      	cmp	r2, #0
   d4cc0:	bfb8      	it	lt
   d4cc2:	4252      	neglt	r2, r2
   d4cc4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4cc6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4cc8:	9a00      	ldr	r2, [sp, #0]
   d4cca:	9901      	ldr	r1, [sp, #4]
   d4ccc:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4cce:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4cd0:	dd05      	ble.n	d4cde <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4cd2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4cd4:	461e      	mov	r6, r3
   d4cd6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4cd8:	4622      	mov	r2, r4
    swap(x0, y0);
   d4cda:	462c      	mov	r4, r5
   d4cdc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4cde:	42b4      	cmp	r4, r6
   d4ce0:	dd05      	ble.n	d4cee <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4ce2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4ce4:	461d      	mov	r5, r3
   d4ce6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4ce8:	4622      	mov	r2, r4
   d4cea:	4634      	mov	r4, r6
   d4cec:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4cee:	1b5a      	subs	r2, r3, r5
   d4cf0:	2a00      	cmp	r2, #0
   d4cf2:	bfb8      	it	lt
   d4cf4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4cf6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4cfa:	429d      	cmp	r5, r3
   d4cfc:	bfb4      	ite	lt
   d4cfe:	2301      	movlt	r3, #1
   d4d00:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4d04:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4d08:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4d0a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4d0c:	fa0f f788 	sxth.w	r7, r8
   d4d10:	2202      	movs	r2, #2
   d4d12:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4d16:	42b4      	cmp	r4, r6
   d4d18:	dc1f      	bgt.n	d4d5a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4d1a:	9a01      	ldr	r2, [sp, #4]
   d4d1c:	9b00      	ldr	r3, [sp, #0]
   d4d1e:	4293      	cmp	r3, r2
   d4d20:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4d24:	bfc8      	it	gt
   d4d26:	4622      	movgt	r2, r4
   d4d28:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4d2c:	bfc8      	it	gt
   d4d2e:	4629      	movgt	r1, r5
   d4d30:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4d32:	bfdc      	itt	le
   d4d34:	462a      	movle	r2, r5
   d4d36:	4621      	movle	r1, r4
   d4d38:	4648      	mov	r0, r9
   d4d3a:	47d8      	blx	fp
    }
    err -= dy;
   d4d3c:	9b03      	ldr	r3, [sp, #12]
   d4d3e:	1aff      	subs	r7, r7, r3
   d4d40:	b2bb      	uxth	r3, r7
   d4d42:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4d44:	2f00      	cmp	r7, #0
   d4d46:	da05      	bge.n	d4d54 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4d48:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4d4a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4d4e:	4415      	add	r5, r2
   d4d50:	b22d      	sxth	r5, r5
      err += dx;
   d4d52:	b23f      	sxth	r7, r7
   d4d54:	3401      	adds	r4, #1
   d4d56:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4d58:	e7dd      	b.n	d4d16 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4d5a:	b005      	add	sp, #20
   d4d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d60 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4d60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4d64:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4d68:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4d6a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4d6e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4d70:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4d72:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4d74:	4691      	mov	r9, r2
   d4d76:	460d      	mov	r5, r1
   d4d78:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4d7a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4d7c:	6823      	ldr	r3, [r4, #0]
   d4d7e:	9600      	str	r6, [sp, #0]
   d4d80:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4d84:	444a      	add	r2, r9
   d4d86:	69df      	ldr	r7, [r3, #28]
   d4d88:	4629      	mov	r1, r5
   d4d8a:	4643      	mov	r3, r8
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	b212      	sxth	r2, r2
   d4d90:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4d92:	6823      	ldr	r3, [r4, #0]
   d4d94:	9600      	str	r6, [sp, #0]
   d4d96:	699f      	ldr	r7, [r3, #24]
   d4d98:	464a      	mov	r2, r9
   d4d9a:	4653      	mov	r3, sl
   d4d9c:	4629      	mov	r1, r5
   d4d9e:	4620      	mov	r0, r4
   d4da0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4da2:	6823      	ldr	r3, [r4, #0]
   d4da4:	960a      	str	r6, [sp, #40]	; 0x28
   d4da6:	f108 31ff 	add.w	r1, r8, #4294967295
   d4daa:	4429      	add	r1, r5
   d4dac:	699d      	ldr	r5, [r3, #24]
   d4dae:	464a      	mov	r2, r9
   d4db0:	4653      	mov	r3, sl
   d4db2:	b209      	sxth	r1, r1
   d4db4:	4620      	mov	r0, r4
   d4db6:	46ac      	mov	ip, r5
}
   d4db8:	b002      	add	sp, #8
   d4dba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4dbe:	4760      	bx	ip

000d4dc0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4dc2:	3b01      	subs	r3, #1
   d4dc4:	4413      	add	r3, r2
   d4dc6:	6804      	ldr	r4, [r0, #0]
   d4dc8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4dcc:	9501      	str	r5, [sp, #4]
   d4dce:	b21b      	sxth	r3, r3
   d4dd0:	9300      	str	r3, [sp, #0]
   d4dd2:	6964      	ldr	r4, [r4, #20]
   d4dd4:	460b      	mov	r3, r1
   d4dd6:	47a0      	blx	r4
}
   d4dd8:	b003      	add	sp, #12
   d4dda:	bd30      	pop	{r4, r5, pc}

000d4ddc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4dde:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4de2:	6804      	ldr	r4, [r0, #0]
   d4de4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4de8:	3b01      	subs	r3, #1
   d4dea:	440b      	add	r3, r1
   d4dec:	6964      	ldr	r4, [r4, #20]
   d4dee:	b21b      	sxth	r3, r3
   d4df0:	47a0      	blx	r4
}
   d4df2:	b003      	add	sp, #12
   d4df4:	bd30      	pop	{r4, r5, pc}

000d4df6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4df6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4dfa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4dfe:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4e02:	4605      	mov	r5, r0
   d4e04:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4e06:	460c      	mov	r4, r1
   d4e08:	eb01 0a03 	add.w	sl, r1, r3
   d4e0c:	4554      	cmp	r4, sl
   d4e0e:	da0b      	bge.n	d4e28 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4e10:	682b      	ldr	r3, [r5, #0]
   d4e12:	f8cd 9000 	str.w	r9, [sp]
   d4e16:	699e      	ldr	r6, [r3, #24]
   d4e18:	4621      	mov	r1, r4
   d4e1a:	4643      	mov	r3, r8
   d4e1c:	463a      	mov	r2, r7
   d4e1e:	4628      	mov	r0, r5
   d4e20:	3401      	adds	r4, #1
   d4e22:	47b0      	blx	r6
   d4e24:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4e26:	e7f1      	b.n	d4e0c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4e28:	b002      	add	sp, #8
   d4e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4e2e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4e2e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4e30:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4e34:	6804      	ldr	r4, [r0, #0]
   d4e36:	9101      	str	r1, [sp, #4]
   d4e38:	9200      	str	r2, [sp, #0]
   d4e3a:	2200      	movs	r2, #0
   d4e3c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4e40:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4e42:	4611      	mov	r1, r2
   d4e44:	47a0      	blx	r4
}
   d4e46:	b002      	add	sp, #8
   d4e48:	bd10      	pop	{r4, pc}

000d4e4a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4e4a:	4770      	bx	lr

000d4e4c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4e4c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4e4e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e50:	2400      	movs	r4, #0
   d4e52:	4d08      	ldr	r5, [pc, #32]	; (d4e74 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4e54:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4e56:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4e58:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4e5e:	2201      	movs	r2, #1
   d4e60:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4e62:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4e64:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4e66:	8204      	strh	r4, [r0, #16]
   d4e68:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4e6a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4e6c:	82c1      	strh	r1, [r0, #22]
   d4e6e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4e70:	7682      	strb	r2, [r0, #26]
}
   d4e72:	bd30      	pop	{r4, r5, pc}
   d4e74:	000d817c 	.word	0x000d817c

000d4e78 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e7c:	b08f      	sub	sp, #60	; 0x3c
   d4e7e:	4605      	mov	r5, r0
   d4e80:	9106      	str	r1, [sp, #24]
   d4e82:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4e86:	9107      	str	r1, [sp, #28]
   d4e88:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4e8c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4e8e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4e92:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4e94:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4e98:	4281      	cmp	r1, r0
   d4e9a:	dd7c      	ble.n	d4f96 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4e9c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4ea0:	4291      	cmp	r1, r2
   d4ea2:	dd78      	ble.n	d4f96 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4ea4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4ea6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4eaa:	2800      	cmp	r0, #0
   d4eac:	dd73      	ble.n	d4f96 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4eae:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4eb2:	2800      	cmp	r0, #0
   d4eb4:	dd6f      	ble.n	d4f96 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4eba:	b296      	uxth	r6, r2
   d4ebc:	930c      	str	r3, [sp, #48]	; 0x30
   d4ebe:	f106 0308 	add.w	r3, r6, #8
   d4ec2:	b29b      	uxth	r3, r3
   d4ec4:	9109      	str	r1, [sp, #36]	; 0x24
   d4ec6:	2400      	movs	r4, #0
   d4ec8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4eca:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4ecc:	bf1c      	itt	ne
   d4ece:	4b33      	ldrne	r3, [pc, #204]	; (d4f9c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4ed0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ed2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4ed4:	bf16      	itet	ne
   d4ed6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4ed8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4edc:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ee0:	9604      	str	r6, [sp, #16]
   d4ee2:	fa1f f388 	uxth.w	r3, r8
   d4ee6:	9303      	str	r3, [sp, #12]
   d4ee8:	9a03      	ldr	r2, [sp, #12]
   d4eea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4eee:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4ef2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4ef6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4ef8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4efa:	920a      	str	r2, [sp, #40]	; 0x28
   d4efc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4efe:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4f02:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4f04:	f019 0f01 	tst.w	r9, #1
   d4f08:	d011      	beq.n	d4f2e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4f0a:	f1b8 0f01 	cmp.w	r8, #1
   d4f0e:	682b      	ldr	r3, [r5, #0]
   d4f10:	d103      	bne.n	d4f1a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4f12:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4f16:	9b07      	ldr	r3, [sp, #28]
   d4f18:	e014      	b.n	d4f44 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f1a:	9a07      	ldr	r2, [sp, #28]
   d4f1c:	9201      	str	r2, [sp, #4]
   d4f1e:	f8cd a000 	str.w	sl, [sp]
   d4f22:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4f26:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4f2a:	4653      	mov	r3, sl
   d4f2c:	e018      	b.n	d4f60 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4f2e:	9b07      	ldr	r3, [sp, #28]
   d4f30:	9a08      	ldr	r2, [sp, #32]
   d4f32:	4293      	cmp	r3, r2
   d4f34:	d017      	beq.n	d4f66 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4f36:	f1b8 0f01 	cmp.w	r8, #1
   d4f3a:	682b      	ldr	r3, [r5, #0]
   d4f3c:	d107      	bne.n	d4f4e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4f3e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4f42:	4613      	mov	r3, r2
   d4f44:	b23a      	sxth	r2, r7
   d4f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4f48:	4628      	mov	r0, r5
   d4f4a:	47d8      	blx	fp
   d4f4c:	e00b      	b.n	d4f66 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4f4e:	9a08      	ldr	r2, [sp, #32]
   d4f50:	9201      	str	r2, [sp, #4]
   d4f52:	f8cd a000 	str.w	sl, [sp]
   d4f56:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4f5a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4f5e:	4653      	mov	r3, sl
   d4f60:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4f62:	4628      	mov	r0, r5
   d4f64:	47d8      	blx	fp
   d4f66:	9b04      	ldr	r3, [sp, #16]
   d4f68:	9a03      	ldr	r2, [sp, #12]
   d4f6a:	4413      	add	r3, r2
   d4f6c:	b29b      	uxth	r3, r3
   d4f6e:	9304      	str	r3, [sp, #16]
   d4f70:	9b05      	ldr	r3, [sp, #20]
   d4f72:	4413      	add	r3, r2
   d4f74:	b29b      	uxth	r3, r3
   d4f76:	3701      	adds	r7, #1
   d4f78:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4f7c:	b2bf      	uxth	r7, r7
   d4f7e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4f80:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4f84:	d1be      	bne.n	d4f04 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4f88:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4f8a:	3401      	adds	r4, #1
   d4f8c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4f90:	b264      	sxtb	r4, r4
   d4f92:	9309      	str	r3, [sp, #36]	; 0x24
   d4f94:	d199      	bne.n	d4eca <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4f96:	b00f      	add	sp, #60	; 0x3c
   d4f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f9c:	000d81ac 	.word	0x000d81ac

000d4fa0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4fa0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4fa2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4fa4:	b085      	sub	sp, #20
   d4fa6:	4604      	mov	r4, r0
   d4fa8:	460b      	mov	r3, r1

  if (c == '\n') {
   d4faa:	d104      	bne.n	d4fb6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4fac:	7e02      	ldrb	r2, [r0, #24]
   d4fae:	8a43      	ldrh	r3, [r0, #18]
   d4fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4fb4:	e023      	b.n	d4ffe <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4fb6:	290d      	cmp	r1, #13
   d4fb8:	d024      	beq.n	d5004 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4fba:	7e05      	ldrb	r5, [r0, #24]
   d4fbc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4fc0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4fc4:	9502      	str	r5, [sp, #8]
   d4fc6:	8ac5      	ldrh	r5, [r0, #22]
   d4fc8:	9501      	str	r5, [sp, #4]
   d4fca:	8a85      	ldrh	r5, [r0, #20]
   d4fcc:	9500      	str	r5, [sp, #0]
   d4fce:	f7ff ff53 	bl	d4e78 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4fd2:	7e22      	ldrb	r2, [r4, #24]
   d4fd4:	8a23      	ldrh	r3, [r4, #16]
   d4fd6:	b291      	uxth	r1, r2
   d4fd8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4fdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4fe0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4fe2:	b21b      	sxth	r3, r3
   d4fe4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4fe6:	b168      	cbz	r0, d5004 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4fe8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4fec:	f06f 0505 	mvn.w	r5, #5
   d4ff0:	fb05 0202 	mla	r2, r5, r2, r0
   d4ff4:	4293      	cmp	r3, r2
   d4ff6:	dd05      	ble.n	d5004 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4ff8:	8a63      	ldrh	r3, [r4, #18]
   d4ffa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4ffe:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5000:	2300      	movs	r3, #0
   d5002:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5004:	2001      	movs	r0, #1
   d5006:	b005      	add	sp, #20
   d5008:	bd30      	pop	{r4, r5, pc}

000d500a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d500a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d500c:	8242      	strh	r2, [r0, #18]
   d500e:	4770      	bx	lr

000d5010 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d5010:	2900      	cmp	r1, #0
   d5012:	bf08      	it	eq
   d5014:	2101      	moveq	r1, #1
   d5016:	7601      	strb	r1, [r0, #24]
   d5018:	4770      	bx	lr

000d501a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d501a:	82c1      	strh	r1, [r0, #22]
   d501c:	8281      	strh	r1, [r0, #20]
   d501e:	4770      	bx	lr

000d5020 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d5020:	7e40      	ldrb	r0, [r0, #25]
   d5022:	4770      	bx	lr

000d5024 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d5024:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5028:	4770      	bx	lr

000d502a <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d502a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d502e:	4770      	bx	lr

000d5030 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5030:	f000 bca0 	b.w	d5974 <HAL_Pin_Map>

000d5034 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5034:	b510      	push	{r4, lr}
   d5036:	4b05      	ldr	r3, [pc, #20]	; (d504c <_ZN10JsonBufferD1Ev+0x18>)
   d5038:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d503a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d503c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d503e:	b91b      	cbnz	r3, d5048 <_ZN10JsonBufferD1Ev+0x14>
   d5040:	6840      	ldr	r0, [r0, #4]
   d5042:	b108      	cbz	r0, d5048 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5044:	f000 feda 	bl	d5dfc <free>
	}
}
   d5048:	4620      	mov	r0, r4
   d504a:	bd10      	pop	{r4, pc}
   d504c:	000d86b0 	.word	0x000d86b0

000d5050 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5050:	b510      	push	{r4, lr}
   d5052:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5054:	f7ff ffee 	bl	d5034 <_ZN10JsonBufferD1Ev>
   d5058:	4620      	mov	r0, r4
   d505a:	2114      	movs	r1, #20
   d505c:	f002 f908 	bl	d7270 <_ZdlPvj>
   d5060:	4620      	mov	r0, r4
   d5062:	bd10      	pop	{r4, pc}

000d5064 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5064:	b510      	push	{r4, lr}
   d5066:	4b03      	ldr	r3, [pc, #12]	; (d5074 <_ZN10JsonWriterD1Ev+0x10>)
   d5068:	6003      	str	r3, [r0, #0]
   d506a:	4604      	mov	r4, r0
   d506c:	f7ff ffe2 	bl	d5034 <_ZN10JsonBufferD1Ev>

}
   d5070:	4620      	mov	r0, r4
   d5072:	bd10      	pop	{r4, pc}
   d5074:	000d86c0 	.word	0x000d86c0

000d5078 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5078:	b510      	push	{r4, lr}
   d507a:	4604      	mov	r4, r0

}
   d507c:	f7ff fff2 	bl	d5064 <_ZN10JsonWriterD1Ev>
   d5080:	4620      	mov	r0, r4
   d5082:	2130      	movs	r1, #48	; 0x30
   d5084:	f002 f8f4 	bl	d7270 <_ZdlPvj>
   d5088:	4620      	mov	r0, r4
   d508a:	bd10      	pop	{r4, pc}

000d508c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d508c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d508e:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5090:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5092:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5094:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5096:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5098:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d509c:	4770      	bx	lr
	...

000d50a0 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d50a0:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d50a2:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d50a4:	60c3      	str	r3, [r0, #12]
   d50a6:	2301      	movs	r3, #1
   d50a8:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d50aa:	4b05      	ldr	r3, [pc, #20]	; (d50c0 <_ZN10JsonWriterC1EPcj+0x20>)
   d50ac:	6003      	str	r3, [r0, #0]
   d50ae:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d50b2:	6041      	str	r1, [r0, #4]
   d50b4:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d50b6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d50b8:	f7ff ffe8 	bl	d508c <_ZN10JsonWriter4initEv>
}
   d50bc:	bd10      	pop	{r4, pc}
   d50be:	bf00      	nop
   d50c0:	000d86c0 	.word	0x000d86c0

000d50c4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d50c4:	68c3      	ldr	r3, [r0, #12]
   d50c6:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d50c8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d50ca:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d50cc:	bf3f      	itttt	cc
   d50ce:	6842      	ldrcc	r2, [r0, #4]
   d50d0:	1c5c      	addcc	r4, r3, #1
   d50d2:	60c4      	strcc	r4, [r0, #12]
   d50d4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d50d6:	bf24      	itt	cs
   d50d8:	2301      	movcs	r3, #1
   d50da:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d50de:	bd10      	pop	{r4, pc}

000d50e0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d50e0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d50e2:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d50e4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d50e6:	b143      	cbz	r3, d50fa <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d50e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d50ec:	7e59      	ldrb	r1, [r3, #25]
   d50ee:	b109      	cbz	r1, d50f4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d50f0:	f7ff ffe8 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d50f4:	6963      	ldr	r3, [r4, #20]
   d50f6:	3b01      	subs	r3, #1
   d50f8:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d50fa:	68a3      	ldr	r3, [r4, #8]
   d50fc:	68e0      	ldr	r0, [r4, #12]
   d50fe:	6861      	ldr	r1, [r4, #4]
   d5100:	4298      	cmp	r0, r3
   d5102:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5106:	bf2a      	itet	cs
   d5108:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d510a:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d510c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5110:	bd10      	pop	{r4, pc}

000d5112 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5112:	b570      	push	{r4, r5, r6, lr}
   d5114:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5116:	68c0      	ldr	r0, [r0, #12]
   d5118:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d511a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d511c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d511e:	4613      	mov	r3, r2
   d5120:	4430      	add	r0, r6
   d5122:	460a      	mov	r2, r1
   d5124:	4629      	mov	r1, r5
   d5126:	f000 fe71 	bl	d5e0c <vsnprintf>
	if (count <= spaceAvailable) {
   d512a:	4285      	cmp	r5, r0
		offset += count;
   d512c:	bf2d      	iteet	cs
   d512e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5130:	68a3      	ldrcc	r3, [r4, #8]
   d5132:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5134:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5136:	bf36      	itet	cc
   d5138:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d513a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d513c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5140:	bd70      	pop	{r4, r5, r6, pc}

000d5142 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5142:	b40e      	push	{r1, r2, r3}
   d5144:	b503      	push	{r0, r1, lr}
   d5146:	aa03      	add	r2, sp, #12
   d5148:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d514c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d514e:	f7ff ffe0 	bl	d5112 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5152:	b002      	add	sp, #8
   d5154:	f85d eb04 	ldr.w	lr, [sp], #4
   d5158:	b003      	add	sp, #12
   d515a:	4770      	bx	lr

000d515c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5160:	4604      	mov	r4, r0
   d5162:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5164:	4617      	mov	r7, r2
   d5166:	b112      	cbz	r2, d516e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5168:	2122      	movs	r1, #34	; 0x22
   d516a:	f7ff ffab 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d516e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5170:	5d71      	ldrb	r1, [r6, r5]
   d5172:	eb06 0805 	add.w	r8, r6, r5
   d5176:	2900      	cmp	r1, #0
   d5178:	d071      	beq.n	d525e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d517a:	68e2      	ldr	r2, [r4, #12]
   d517c:	68a3      	ldr	r3, [r4, #8]
   d517e:	429a      	cmp	r2, r3
   d5180:	d26d      	bcs.n	d525e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5182:	060b      	lsls	r3, r1, #24
   d5184:	d533      	bpl.n	d51ee <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5186:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d518a:	2be0      	cmp	r3, #224	; 0xe0
   d518c:	d117      	bne.n	d51be <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d518e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5192:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5196:	2a80      	cmp	r2, #128	; 0x80
   d5198:	d111      	bne.n	d51be <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d519a:	f105 0802 	add.w	r8, r5, #2
   d519e:	f816 2008 	ldrb.w	r2, [r6, r8]
   d51a2:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d51a6:	2880      	cmp	r0, #128	; 0x80
   d51a8:	d109      	bne.n	d51be <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d51aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d51ae:	019b      	lsls	r3, r3, #6
   d51b0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d51b4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d51b8:	431a      	orrs	r2, r3
   d51ba:	b292      	uxth	r2, r2
   d51bc:	e011      	b.n	d51e2 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d51be:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d51c2:	2bc0      	cmp	r3, #192	; 0xc0
   d51c4:	d146      	bne.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d51c6:	f105 0801 	add.w	r8, r5, #1
   d51ca:	f816 3008 	ldrb.w	r3, [r6, r8]
   d51ce:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d51d2:	2a80      	cmp	r2, #128	; 0x80
   d51d4:	d13e      	bne.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d51d6:	0189      	lsls	r1, r1, #6
   d51d8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d51dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d51e0:	431a      	orrs	r2, r3
   d51e2:	4923      	ldr	r1, [pc, #140]	; (d5270 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff ffac 	bl	d5142 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d51ea:	4645      	mov	r5, r8
   d51ec:	e035      	b.n	d525a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d51ee:	290c      	cmp	r1, #12
   d51f0:	d018      	beq.n	d5224 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d51f2:	d80b      	bhi.n	d520c <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d51f4:	2909      	cmp	r1, #9
   d51f6:	d021      	beq.n	d523c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d51f8:	290a      	cmp	r1, #10
   d51fa:	d019      	beq.n	d5230 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d51fc:	2908      	cmp	r1, #8
   d51fe:	d129      	bne.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5200:	215c      	movs	r1, #92	; 0x5c
   d5202:	4620      	mov	r0, r4
   d5204:	f7ff ff5e 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5208:	2162      	movs	r1, #98	; 0x62
   d520a:	e023      	b.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d520c:	2922      	cmp	r1, #34	; 0x22
   d520e:	d01b      	beq.n	d5248 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5210:	295c      	cmp	r1, #92	; 0x5c
   d5212:	d019      	beq.n	d5248 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5214:	290d      	cmp	r1, #13
   d5216:	d11d      	bne.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5218:	215c      	movs	r1, #92	; 0x5c
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff ff52 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5220:	2172      	movs	r1, #114	; 0x72
   d5222:	e017      	b.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5224:	215c      	movs	r1, #92	; 0x5c
   d5226:	4620      	mov	r0, r4
   d5228:	f7ff ff4c 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d522c:	2166      	movs	r1, #102	; 0x66
   d522e:	e011      	b.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5230:	215c      	movs	r1, #92	; 0x5c
   d5232:	4620      	mov	r0, r4
   d5234:	f7ff ff46 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5238:	216e      	movs	r1, #110	; 0x6e
   d523a:	e00b      	b.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d523c:	215c      	movs	r1, #92	; 0x5c
   d523e:	4620      	mov	r0, r4
   d5240:	f7ff ff40 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5244:	2174      	movs	r1, #116	; 0x74
   d5246:	e005      	b.n	d5254 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5248:	215c      	movs	r1, #92	; 0x5c
   d524a:	4620      	mov	r0, r4
   d524c:	f7ff ff3a 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5250:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5254:	4620      	mov	r0, r4
   d5256:	f7ff ff35 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d525a:	3501      	adds	r5, #1
   d525c:	e788      	b.n	d5170 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d525e:	b12f      	cbz	r7, d526c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5260:	4620      	mov	r0, r4
   d5262:	2122      	movs	r1, #34	; 0x22
	}

}
   d5264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5268:	f7ff bf2c 	b.w	d50c4 <_ZN10JsonWriter10insertCharEc>
   d526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5270:	000d86d1 	.word	0x000d86d1

000d5274 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5274:	6942      	ldr	r2, [r0, #20]
   d5276:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d527a:	7e1a      	ldrb	r2, [r3, #24]
   d527c:	b112      	cbz	r2, d5284 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d527e:	2200      	movs	r2, #0
   d5280:	761a      	strb	r2, [r3, #24]
   d5282:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5284:	212c      	movs	r1, #44	; 0x2c
   d5286:	f7ff bf1d 	b.w	d50c4 <_ZN10JsonWriter10insertCharEc>

000d528a <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d528c:	6943      	ldr	r3, [r0, #20]
   d528e:	3301      	adds	r3, #1
   d5290:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5292:	460e      	mov	r6, r1
   d5294:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5296:	d80e      	bhi.n	d52b6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5298:	f7ff ffec 	bl	d5274 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d529c:	6943      	ldr	r3, [r0, #20]
   d529e:	1c5a      	adds	r2, r3, #1
   d52a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d52a4:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d52a6:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d52a8:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d52aa:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d52ac:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d52ae:	f7ff ff09 	bl	d50c4 <_ZN10JsonWriter10insertCharEc>
   d52b2:	4620      	mov	r0, r4
   d52b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d52b6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d52b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d52bc <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d52bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d52be:	4604      	mov	r4, r0
   d52c0:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d52c4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d52c6:	2d00      	cmp	r5, #0
   d52c8:	db0a      	blt.n	d52e0 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d52ca:	f002 fa93 	bl	d77f4 <__aeabi_f2d>
   d52ce:	462a      	mov	r2, r5
   d52d0:	e9cd 0100 	strd	r0, r1, [sp]
   d52d4:	4908      	ldr	r1, [pc, #32]	; (d52f8 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d52d6:	4620      	mov	r0, r4
   d52d8:	f7ff ff33 	bl	d5142 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d52dc:	b003      	add	sp, #12
   d52de:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d52e0:	f002 fa88 	bl	d77f4 <__aeabi_f2d>
   d52e4:	460b      	mov	r3, r1
   d52e6:	4905      	ldr	r1, [pc, #20]	; (d52fc <_ZN10JsonWriter11insertValueEf+0x40>)
   d52e8:	4602      	mov	r2, r0
   d52ea:	4620      	mov	r0, r4
	}
}
   d52ec:	b003      	add	sp, #12
   d52ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d52f2:	f7ff bf26 	b.w	d5142 <_ZN10JsonWriter13insertsprintfEPKcz>
   d52f6:	bf00      	nop
   d52f8:	000d86e3 	.word	0x000d86e3
   d52fc:	000d86e8 	.word	0x000d86e8

000d5300 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5300:	f000 bb38 	b.w	d5974 <HAL_Pin_Map>

000d5304 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d5304:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5306:	2102      	movs	r1, #2
   d5308:	7002      	strb	r2, [r0, #0]
   d530a:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d530c:	8082      	strh	r2, [r0, #4]
   d530e:	6082      	str	r2, [r0, #8]
   d5310:	7302      	strb	r2, [r0, #12]
   d5312:	8202      	strh	r2, [r0, #16]
   d5314:	6142      	str	r2, [r0, #20]
   d5316:	7602      	strb	r2, [r0, #24]
   d5318:	8382      	strh	r2, [r0, #28]
   d531a:	6202      	str	r2, [r0, #32]
   d531c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5320:	8502      	strh	r2, [r0, #40]	; 0x28
   d5322:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5324:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d5328:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d532c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d5330:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d5332:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d5336:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d533a:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d533c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d5340:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d5344:	6602      	str	r2, [r0, #96]	; 0x60
   d5346:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d534a:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d534e:	6702      	str	r2, [r0, #112]	; 0x70
   d5350:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d5354:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d5358:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d535c:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d5360:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d5364:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5368:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d536c:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d5370:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d5374:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d5378:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d537c:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d5380:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d5384:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d5388:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d538c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d5390:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d5394:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d5398:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d539c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d53a0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d53a4:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d53a8:	4770      	bx	lr

000d53aa <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d53aa:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d53ae:	2b05      	cmp	r3, #5
   d53b0:	d802      	bhi.n	d53b8 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d53b2:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d53b6:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d53b8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d53bc:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d53be:	bf94      	ite	ls
   d53c0:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d53c4:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d53c8:	4770      	bx	lr

000d53ca <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d53ca:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d53cc:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d53ce:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d53d0:	2d2d      	cmp	r5, #45	; 0x2d
   d53d2:	bf08      	it	eq
   d53d4:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d53d6:	4620      	mov	r0, r4
   d53d8:	f002 fcc2 	bl	d7d60 <atol>
   d53dc:	2364      	movs	r3, #100	; 0x64
   d53de:	4358      	muls	r0, r3
   d53e0:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d53e2:	f814 3b01 	ldrb.w	r3, [r4], #1
   d53e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d53ea:	2909      	cmp	r1, #9
   d53ec:	d9f8      	bls.n	d53e0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d53ee:	2b2e      	cmp	r3, #46	; 0x2e
   d53f0:	d10b      	bne.n	d540a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d53f2:	7853      	ldrb	r3, [r2, #1]
   d53f4:	3b30      	subs	r3, #48	; 0x30
   d53f6:	2b09      	cmp	r3, #9
   d53f8:	d807      	bhi.n	d540a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d53fa:	210a      	movs	r1, #10
   d53fc:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5400:	7893      	ldrb	r3, [r2, #2]
   d5402:	3b30      	subs	r3, #48	; 0x30
   d5404:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5406:	bf98      	it	ls
   d5408:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d540a:	2d2d      	cmp	r5, #45	; 0x2d
   d540c:	bf08      	it	eq
   d540e:	4240      	negeq	r0, r0
}
   d5410:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5414 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5414:	b538      	push	{r3, r4, r5, lr}
   d5416:	4604      	mov	r4, r0
   d5418:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d541a:	f002 fca1 	bl	d7d60 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d541e:	2364      	movs	r3, #100	; 0x64
   d5420:	fbb0 f2f3 	udiv	r2, r0, r3
   d5424:	fb03 0012 	mls	r0, r3, r2, r0
   d5428:	4b11      	ldr	r3, [pc, #68]	; (d5470 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d542a:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d542c:	4343      	muls	r3, r0
   d542e:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d5430:	7802      	ldrb	r2, [r0, #0]
   d5432:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d5436:	2909      	cmp	r1, #9
   d5438:	4604      	mov	r4, r0
   d543a:	f100 0001 	add.w	r0, r0, #1
   d543e:	d9f7      	bls.n	d5430 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5440:	2a2e      	cmp	r2, #46	; 0x2e
   d5442:	d10b      	bne.n	d545c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d5444:	490a      	ldr	r1, [pc, #40]	; (d5470 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5446:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d5448:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d544c:	3a30      	subs	r2, #48	; 0x30
   d544e:	2a09      	cmp	r2, #9
   d5450:	d804      	bhi.n	d545c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d5452:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5456:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d545a:	e7f5      	b.n	d5448 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d545c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5460:	3301      	adds	r3, #1
   d5462:	2203      	movs	r2, #3
   d5464:	fbb3 f3f2 	udiv	r3, r3, r2
   d5468:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d546a:	2300      	movs	r3, #0
   d546c:	722b      	strb	r3, [r5, #8]
   d546e:	bd38      	pop	{r3, r4, r5, pc}
   d5470:	00989680 	.word	0x00989680

000d5474 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5474:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5476:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5478:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d547a:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d547e:	6042      	str	r2, [r0, #4]
   d5480:	685a      	ldr	r2, [r3, #4]
   d5482:	6082      	str	r2, [r0, #8]
   d5484:	7a1b      	ldrb	r3, [r3, #8]
   d5486:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5488:	4603      	mov	r3, r0
   d548a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d548e:	6102      	str	r2, [r0, #16]
   d5490:	685a      	ldr	r2, [r3, #4]
   d5492:	6142      	str	r2, [r0, #20]
   d5494:	7a1b      	ldrb	r3, [r3, #8]
   d5496:	7603      	strb	r3, [r0, #24]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5498:	f000 faf4 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d549c:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d549e:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d54a0:	7063      	strb	r3, [r4, #1]
   d54a2:	7023      	strb	r3, [r4, #0]
   d54a4:	bd10      	pop	{r4, pc}
	...

000d54a8 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d54a8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d54aa:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d54ac:	4604      	mov	r4, r0
   updated = false;
   d54ae:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d54b0:	6880      	ldr	r0, [r0, #8]
   d54b2:	f002 f97d 	bl	d77b0 <__aeabi_ui2d>
   d54b6:	a30e      	add	r3, pc, #56	; (adr r3, d54f0 <_ZN15TinyGPSLocation3latEv+0x48>)
   d54b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54bc:	f002 fb18 	bl	d7af0 <__aeabi_ddiv>
   d54c0:	4606      	mov	r6, r0
   d54c2:	88a0      	ldrh	r0, [r4, #4]
   d54c4:	460f      	mov	r7, r1
   d54c6:	f002 f983 	bl	d77d0 <__aeabi_i2d>
   d54ca:	460b      	mov	r3, r1
   d54cc:	4602      	mov	r2, r0
   d54ce:	4639      	mov	r1, r7
   d54d0:	4630      	mov	r0, r6
   d54d2:	f002 f831 	bl	d7538 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d54d6:	7b23      	ldrb	r3, [r4, #12]
   d54d8:	b11b      	cbz	r3, d54e2 <_ZN15TinyGPSLocation3latEv+0x3a>
   d54da:	4602      	mov	r2, r0
   d54dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d54e0:	e001      	b.n	d54e6 <_ZN15TinyGPSLocation3latEv+0x3e>
   d54e2:	4602      	mov	r2, r0
   d54e4:	460b      	mov	r3, r1
}
   d54e6:	ec43 2b10 	vmov	d0, r2, r3
   d54ea:	bdd0      	pop	{r4, r6, r7, pc}
   d54ec:	f3af 8000 	nop.w
   d54f0:	00000000 	.word	0x00000000
   d54f4:	41cdcd65 	.word	0x41cdcd65

000d54f8 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d54f8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d54fa:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d54fc:	4604      	mov	r4, r0
   updated = false;
   d54fe:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5500:	6940      	ldr	r0, [r0, #20]
   d5502:	f002 f955 	bl	d77b0 <__aeabi_ui2d>
   d5506:	a30e      	add	r3, pc, #56	; (adr r3, d5540 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d5508:	e9d3 2300 	ldrd	r2, r3, [r3]
   d550c:	f002 faf0 	bl	d7af0 <__aeabi_ddiv>
   d5510:	4606      	mov	r6, r0
   d5512:	8a20      	ldrh	r0, [r4, #16]
   d5514:	460f      	mov	r7, r1
   d5516:	f002 f95b 	bl	d77d0 <__aeabi_i2d>
   d551a:	460b      	mov	r3, r1
   d551c:	4602      	mov	r2, r0
   d551e:	4639      	mov	r1, r7
   d5520:	4630      	mov	r0, r6
   d5522:	f002 f809 	bl	d7538 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5526:	7e23      	ldrb	r3, [r4, #24]
   d5528:	b11b      	cbz	r3, d5532 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d552a:	4602      	mov	r2, r0
   d552c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5530:	e001      	b.n	d5536 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d5532:	4602      	mov	r2, r0
   d5534:	460b      	mov	r3, r1
}
   d5536:	ec43 2b10 	vmov	d0, r2, r3
   d553a:	bdd0      	pop	{r4, r6, r7, pc}
   d553c:	f3af 8000 	nop.w
   d5540:	00000000 	.word	0x00000000
   d5544:	41cdcd65 	.word	0x41cdcd65

000d5548 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5548:	b510      	push	{r4, lr}
   date = newDate;
   d554a:	6883      	ldr	r3, [r0, #8]
   d554c:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d554e:	4604      	mov	r4, r0
   d5550:	f000 fa98 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d5554:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d5556:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5558:	7063      	strb	r3, [r4, #1]
   d555a:	7023      	strb	r3, [r4, #0]
   d555c:	bd10      	pop	{r4, pc}

000d555e <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d555e:	b510      	push	{r4, lr}
   time = newTime;
   d5560:	6883      	ldr	r3, [r0, #8]
   d5562:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d5564:	4604      	mov	r4, r0
   d5566:	f000 fa8d 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d556a:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d556c:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d556e:	7063      	strb	r3, [r4, #1]
   d5570:	7023      	strb	r3, [r4, #0]
   d5572:	bd10      	pop	{r4, pc}

000d5574 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d5574:	b510      	push	{r4, lr}
   d5576:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5578:	4608      	mov	r0, r1
   d557a:	f7ff ff26 	bl	d53ca <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d557e:	60a0      	str	r0, [r4, #8]
   d5580:	bd10      	pop	{r4, pc}

000d5582 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d5582:	b510      	push	{r4, lr}
   d5584:	4604      	mov	r4, r0
   newDate = atol(term);
   d5586:	4608      	mov	r0, r1
   d5588:	f002 fbea 	bl	d7d60 <atol>
   d558c:	60a0      	str	r0, [r4, #8]
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN11TinyGPSTime4hourEv>:
   return date / 10000;
}

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d5590:	2300      	movs	r3, #0
   d5592:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d5594:	6843      	ldr	r3, [r0, #4]
   d5596:	4802      	ldr	r0, [pc, #8]	; (d55a0 <_ZN11TinyGPSTime4hourEv+0x10>)
   d5598:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d559c:	b2c0      	uxtb	r0, r0
   d559e:	4770      	bx	lr
   d55a0:	000f4240 	.word	0x000f4240

000d55a4 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d55a4:	2300      	movs	r3, #0
   d55a6:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d55a8:	6843      	ldr	r3, [r0, #4]
   d55aa:	f242 7010 	movw	r0, #10000	; 0x2710
   d55ae:	fbb3 f3f0 	udiv	r3, r3, r0
   d55b2:	2064      	movs	r0, #100	; 0x64
   d55b4:	fbb3 f2f0 	udiv	r2, r3, r0
   d55b8:	fb00 3012 	mls	r0, r0, r2, r3
}
   d55bc:	b2c0      	uxtb	r0, r0
   d55be:	4770      	bx	lr

000d55c0 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d55c0:	2300      	movs	r3, #0
   d55c2:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d55c4:	6843      	ldr	r3, [r0, #4]
   d55c6:	2064      	movs	r0, #100	; 0x64
   d55c8:	fbb3 f3f0 	udiv	r3, r3, r0
   d55cc:	fbb3 f2f0 	udiv	r2, r3, r0
   d55d0:	fb00 3012 	mls	r0, r0, r2, r3
}
   d55d4:	b2c0      	uxtb	r0, r0
   d55d6:	4770      	bx	lr

000d55d8 <_ZN11TinyGPSTime11centisecondEv>:

uint8_t TinyGPSTime::centisecond()
{
   updated = false;
   d55d8:	2300      	movs	r3, #0
   d55da:	7043      	strb	r3, [r0, #1]
   return time % 100;
   d55dc:	6840      	ldr	r0, [r0, #4]
   d55de:	2264      	movs	r2, #100	; 0x64
   d55e0:	fbb0 f3f2 	udiv	r3, r0, r2
   d55e4:	fb02 0013 	mls	r0, r2, r3, r0
}
   d55e8:	b2c0      	uxtb	r0, r0
   d55ea:	4770      	bx	lr

000d55ec <_ZN14TinyGPSDecimal6commitEv>:

void TinyGPSDecimal::commit()
{
   d55ec:	b510      	push	{r4, lr}
   val = newval;
   d55ee:	68c3      	ldr	r3, [r0, #12]
   d55f0:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d55f2:	4604      	mov	r4, r0
   d55f4:	f000 fa46 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d55f8:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d55fa:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d55fc:	7063      	strb	r3, [r4, #1]
   d55fe:	7023      	strb	r3, [r4, #0]
   d5600:	bd10      	pop	{r4, pc}

000d5602 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d5602:	b510      	push	{r4, lr}
   d5604:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5606:	4608      	mov	r0, r1
   d5608:	f7ff fedf 	bl	d53ca <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d560c:	60e0      	str	r0, [r4, #12]
   d560e:	bd10      	pop	{r4, pc}

000d5610 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d5610:	b510      	push	{r4, lr}
   val = newval;
   d5612:	68c3      	ldr	r3, [r0, #12]
   d5614:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d5616:	4604      	mov	r4, r0
   d5618:	f000 fa34 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d561c:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d561e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5620:	7063      	strb	r3, [r4, #1]
   d5622:	7023      	strb	r3, [r4, #0]
   d5624:	bd10      	pop	{r4, pc}

000d5626 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d5626:	b510      	push	{r4, lr}
   d5628:	4604      	mov	r4, r0
   newval = atol(term);
   d562a:	4608      	mov	r0, r1
   d562c:	f002 fb98 	bl	d7d60 <atol>
   d5630:	60e0      	str	r0, [r4, #12]
   d5632:	bd10      	pop	{r4, pc}

000d5634 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5634:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d5636:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5638:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d563a:	3010      	adds	r0, #16
   d563c:	f002 fc22 	bl	d7e84 <strcpy>
   d5640:	f000 fa20 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5644:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d5646:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d5648:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d564c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d5650:	bd10      	pop	{r4, pc}

000d5652 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d5652:	2210      	movs	r2, #16
   d5654:	f002 bc41 	b.w	d7eda <strncpy>

000d5658 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d5658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d565a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d565e:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d5660:	2d00      	cmp	r5, #0
   d5662:	d067      	beq.n	d5734 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5664:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d5668:	f7ff fe9f 	bl	d53aa <_ZN11TinyGPSPlus7fromHexEc>
   d566c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d5670:	4602      	mov	r2, r0
   d5672:	4620      	mov	r0, r4
   d5674:	f7ff fe99 	bl	d53aa <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d5678:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d567c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d5680:	b2c0      	uxtb	r0, r0
   d5682:	4283      	cmp	r3, r0
   d5684:	d14f      	bne.n	d5726 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d5686:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d568a:	3301      	adds	r3, #1
   d568c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d5690:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5694:	b123      	cbz	r3, d56a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d5696:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d569a:	3301      	adds	r3, #1
   d569c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d56a0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d56a4:	b1b3      	cbz	r3, d56d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d56a6:	2b01      	cmp	r3, #1
   d56a8:	d12a      	bne.n	d5700 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d56aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d56ae:	f7ff ff4b 	bl	d5548 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d56b2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d56b6:	f7ff ff52 	bl	d555e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d56ba:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d56be:	b1fb      	cbz	r3, d5700 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d56c0:	4620      	mov	r0, r4
   d56c2:	f7ff fed7 	bl	d5474 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d56c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d56ca:	f7ff ff8f 	bl	d55ec <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d56ce:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d56d2:	e013      	b.n	d56fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d56d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d56d8:	f7ff ff41 	bl	d555e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d56dc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d56e0:	b133      	cbz	r3, d56f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d56e2:	4620      	mov	r0, r4
   d56e4:	f7ff fec6 	bl	d5474 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d56e8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d56ec:	f7ff ff7e 	bl	d55ec <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d56f0:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d56f4:	f7ff ff8c 	bl	d5610 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d56f8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d56fc:	f7ff ff76 	bl	d55ec <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5700:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5704:	2e00      	cmp	r6, #0
   d5706:	f000 80c5 	beq.w	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d570a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d570e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5710:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d5712:	f002 fbad 	bl	d7e70 <strcmp>
   d5716:	2800      	cmp	r0, #0
   d5718:	f040 80bc 	bne.w	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d571c:	4630      	mov	r0, r6
   d571e:	f7ff ff89 	bl	d5634 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5722:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5724:	e7ee      	b.n	d5704 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d5726:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d572a:	3301      	adds	r3, #1
   d572c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d5730:	2500      	movs	r5, #0
   d5732:	e0af      	b.n	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d5734:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d5738:	bb2a      	cbnz	r2, d5786 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d573a:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d573e:	4956      	ldr	r1, [pc, #344]	; (d5898 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d5740:	4638      	mov	r0, r7
   d5742:	f002 fb95 	bl	d7e70 <strcmp>
   d5746:	b908      	cbnz	r0, d574c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d5748:	2301      	movs	r3, #1
   d574a:	e008      	b.n	d575e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d574c:	4953      	ldr	r1, [pc, #332]	; (d589c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d574e:	4638      	mov	r0, r7
   d5750:	f002 fb8e 	bl	d7e70 <strcmp>
   d5754:	b910      	cbnz	r0, d575c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d5756:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d575a:	e002      	b.n	d5762 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d575c:	2302      	movs	r3, #2
   d575e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d5762:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d5766:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d576a:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d576e:	2e00      	cmp	r6, #0
   d5770:	f000 8090 	beq.w	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5774:	4639      	mov	r1, r7
   d5776:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5778:	f002 fb7a 	bl	d7e70 <strcmp>
   d577c:	2800      	cmp	r0, #0
   d577e:	f280 8085 	bge.w	d588c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d5782:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d5784:	e7ef      	b.n	d5766 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d5786:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d578a:	2902      	cmp	r1, #2
   d578c:	d066      	beq.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d578e:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d5792:	2b00      	cmp	r3, #0
   d5794:	d062      	beq.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d5796:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d579a:	3a01      	subs	r2, #1
   d579c:	2a28      	cmp	r2, #40	; 0x28
   d579e:	d85d      	bhi.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d57a0:	e8df f002 	tbb	[pc, r2]
   d57a4:	2a232015 	.word	0x2a232015
   d57a8:	534d4631 	.word	0x534d4631
   d57ac:	5c5c5c57 	.word	0x5c5c5c57
   d57b0:	5c5c5c5c 	.word	0x5c5c5c5c
   d57b4:	5c5c5c5c 	.word	0x5c5c5c5c
   d57b8:	5c5c5c5c 	.word	0x5c5c5c5c
   d57bc:	5c5c5c5c 	.word	0x5c5c5c5c
   d57c0:	5c5c5c5c 	.word	0x5c5c5c5c
   d57c4:	23201b15 	.word	0x23201b15
   d57c8:	3c38312a 	.word	0x3c38312a
   d57cc:	40          	.byte	0x40
   d57cd:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d57ce:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d57d2:	3048      	adds	r0, #72	; 0x48
   d57d4:	f7ff fece 	bl	d5574 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d57d8:	e040      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d57da:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d57de:	4243      	negs	r3, r0
   d57e0:	4143      	adcs	r3, r0
   d57e2:	e029      	b.n	d5838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d57e4:	f100 011c 	add.w	r1, r0, #28
   d57e8:	e008      	b.n	d57fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d57ea:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d57ee:	424b      	negs	r3, r1
   d57f0:	414b      	adcs	r3, r1
   d57f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d57f6:	e031      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d57f8:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d57fc:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d5800:	f7ff fe08 	bl	d5414 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d5804:	e02a      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d5806:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d580a:	4253      	negs	r3, r2
   d580c:	4153      	adcs	r3, r2
   d580e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d5812:	e023      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d5814:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5818:	3058      	adds	r0, #88	; 0x58
   d581a:	e01d      	b.n	d5858 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d581c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5820:	3068      	adds	r0, #104	; 0x68
   d5822:	e019      	b.n	d5858 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d5824:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5828:	3038      	adds	r0, #56	; 0x38
   d582a:	f7ff feaa 	bl	d5582 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d582e:	e015      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d5830:	2b30      	cmp	r3, #48	; 0x30
   d5832:	bf94      	ite	ls
   d5834:	2300      	movls	r3, #0
   d5836:	2301      	movhi	r3, #1
   d5838:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d583c:	e00e      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d583e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5842:	3088      	adds	r0, #136	; 0x88
   d5844:	f7ff feef 	bl	d5626 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d5848:	e008      	b.n	d585c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d584a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d584e:	3098      	adds	r0, #152	; 0x98
   d5850:	e002      	b.n	d5858 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d5852:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5856:	3078      	adds	r0, #120	; 0x78
   d5858:	f7ff fed3 	bl	d5602 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d585c:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d5860:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5864:	b1b6      	cbz	r6, d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5866:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d586a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d586c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d586e:	f002 faff 	bl	d7e70 <strcmp>
   d5872:	b978      	cbnz	r0, d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5874:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d5876:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d587a:	429a      	cmp	r2, r3
   d587c:	dc0a      	bgt.n	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d587e:	d103      	bne.n	d5888 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d5880:	4639      	mov	r1, r7
   d5882:	4630      	mov	r0, r6
   d5884:	f7ff fee5 	bl	d5652 <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5888:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d588a:	e7eb      	b.n	d5864 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d588c:	d002      	beq.n	d5894 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d588e:	2300      	movs	r3, #0
   d5890:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d5894:	4628      	mov	r0, r5
   d5896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5898:	000d86f5 	.word	0x000d86f5
   d589c:	000d86fb 	.word	0x000d86fb

000d58a0 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d58a0:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d58a2:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d58a6:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d58a8:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d58ac:	4604      	mov	r4, r0
   d58ae:	460d      	mov	r5, r1
  ++encodedCharCount;
   d58b0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d58b4:	d02a      	beq.n	d590c <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d58b6:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d58ba:	d804      	bhi.n	d58c6 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d58bc:	290a      	cmp	r1, #10
   d58be:	d00c      	beq.n	d58da <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d58c0:	290d      	cmp	r1, #13
   d58c2:	d132      	bne.n	d592a <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d58c4:	e009      	b.n	d58da <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d58c6:	292a      	cmp	r1, #42	; 0x2a
   d58c8:	d007      	beq.n	d58da <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d58ca:	292c      	cmp	r1, #44	; 0x2c
   d58cc:	d12d      	bne.n	d592a <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d58ce:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d58d2:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d58d6:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d58da:	2b0e      	cmp	r3, #14
   d58dc:	f04f 0000 	mov.w	r0, #0
   d58e0:	d805      	bhi.n	d58ee <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d58e2:	4423      	add	r3, r4
   d58e4:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d58e8:	4620      	mov	r0, r4
   d58ea:	f7ff feb5 	bl	d5658 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d58ee:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d58f2:	3301      	adds	r3, #1
   d58f4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d58f8:	2300      	movs	r3, #0
   d58fa:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d58fe:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d5902:	425d      	negs	r5, r3
   d5904:	415d      	adcs	r5, r3
   d5906:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d590a:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d590c:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d590e:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d5910:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d5914:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d5918:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d591c:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d5920:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d5924:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d5928:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d592a:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d592c:	bf9f      	itttt	ls
   d592e:	1c5a      	addls	r2, r3, #1
   d5930:	191b      	addls	r3, r3, r4
   d5932:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d5936:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d593a:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d593e:	b928      	cbnz	r0, d594c <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d5940:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d5944:	404d      	eors	r5, r1
   d5946:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d594a:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d594c:	2000      	movs	r0, #0
  }

  return false;
}
   d594e:	bd38      	pop	{r3, r4, r5, pc}

000d5950 <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d5950:	f000 b810 	b.w	d5974 <HAL_Pin_Map>

000d5954 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <netdb_freeaddrinfo+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	689b      	ldr	r3, [r3, #8]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030268 	.word	0x00030268

000d5964 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <netdb_getaddrinfo+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	68db      	ldr	r3, [r3, #12]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030268 	.word	0x00030268

000d5974 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <HAL_Pin_Map+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	681b      	ldr	r3, [r3, #0]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	0003022c 	.word	0x0003022c

000d5984 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <HAL_Pin_Mode+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	689b      	ldr	r3, [r3, #8]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	0003022c 	.word	0x0003022c

000d5994 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <HAL_Get_Pin_Mode+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	68db      	ldr	r3, [r3, #12]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	0003022c 	.word	0x0003022c

000d59a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <HAL_GPIO_Write+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	691b      	ldr	r3, [r3, #16]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	0003022c 	.word	0x0003022c

000d59b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <HAL_GPIO_Read+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	695b      	ldr	r3, [r3, #20]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003022c 	.word	0x0003022c

000d59c4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <HAL_SPI_Begin+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	681b      	ldr	r3, [r3, #0]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030230 	.word	0x00030230

000d59d4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <HAL_SPI_Set_Bit_Order+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	689b      	ldr	r3, [r3, #8]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030230 	.word	0x00030230

000d59e4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <HAL_SPI_Set_Data_Mode+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	68db      	ldr	r3, [r3, #12]
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030230 	.word	0x00030230

000d59f4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <HAL_SPI_Set_Clock_Divider+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	691b      	ldr	r3, [r3, #16]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030230 	.word	0x00030230

000d5a04 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <HAL_SPI_Send_Receive_Data+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	695b      	ldr	r3, [r3, #20]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030230 	.word	0x00030230

000d5a14 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <HAL_SPI_Init+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	69db      	ldr	r3, [r3, #28]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030230 	.word	0x00030230

000d5a24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <HAL_SPI_Is_Enabled+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	6a1b      	ldr	r3, [r3, #32]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030230 	.word	0x00030230

000d5a34 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <HAL_SPI_Info+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030230 	.word	0x00030230

000d5a44 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <HAL_SPI_Acquire+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030230 	.word	0x00030230

000d5a54 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <HAL_SPI_Release+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030230 	.word	0x00030230

000d5a64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <HAL_RNG_GetRandomNumber+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	685b      	ldr	r3, [r3, #4]
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030218 	.word	0x00030218

000d5a74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <HAL_Delay_Microseconds+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	68db      	ldr	r3, [r3, #12]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030218 	.word	0x00030218

000d5a84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	695b      	ldr	r3, [r3, #20]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030218 	.word	0x00030218

000d5a94 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <os_thread_is_current+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	689b      	ldr	r3, [r3, #8]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030248 	.word	0x00030248

000d5aa4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <os_thread_join+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	691b      	ldr	r3, [r3, #16]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030248 	.word	0x00030248

000d5ab4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <os_thread_cleanup+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	695b      	ldr	r3, [r3, #20]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030248 	.word	0x00030248

000d5ac4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <os_mutex_recursive_create+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030248 	.word	0x00030248

000d5ad4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <os_mutex_recursive_destroy+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030248 	.word	0x00030248

000d5ae4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <inet_inet_ntop+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	695b      	ldr	r3, [r3, #20]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030264 	.word	0x00030264

000d5af4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <HAL_USART_Init+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	681b      	ldr	r3, [r3, #0]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	0003023c 	.word	0x0003023c

000d5b04 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <HAL_USART_Write_Data+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	68db      	ldr	r3, [r3, #12]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	0003023c 	.word	0x0003023c

000d5b14 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <HAL_USART_Available_Data+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	691b      	ldr	r3, [r3, #16]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	0003023c 	.word	0x0003023c

000d5b24 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <HAL_USART_Read_Data+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	695b      	ldr	r3, [r3, #20]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	0003023c 	.word	0x0003023c

000d5b34 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <HAL_USART_Peek_Data+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	699b      	ldr	r3, [r3, #24]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	0003023c 	.word	0x0003023c

000d5b44 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_USART_Flush_Data+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	69db      	ldr	r3, [r3, #28]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003023c 	.word	0x0003023c

000d5b54 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <HAL_USART_Is_Enabled+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	6a1b      	ldr	r3, [r3, #32]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003023c 	.word	0x0003023c

000d5b64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <HAL_USART_Available_Data_For_Write+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003023c 	.word	0x0003023c

000d5b74 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_USART_BeginConfig+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003023c 	.word	0x0003023c

000d5b84 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <HAL_I2C_Begin+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	68db      	ldr	r3, [r3, #12]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	00030228 	.word	0x00030228

000d5b94 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <HAL_I2C_Begin_Transmission+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	699b      	ldr	r3, [r3, #24]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	00030228 	.word	0x00030228

000d5ba4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <HAL_I2C_End_Transmission+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	69db      	ldr	r3, [r3, #28]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	00030228 	.word	0x00030228

000d5bb4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <HAL_I2C_Write_Data+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	6a1b      	ldr	r3, [r3, #32]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	00030228 	.word	0x00030228

000d5bc4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_I2C_Available_Data+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030228 	.word	0x00030228

000d5bd4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_I2C_Read_Data+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030228 	.word	0x00030228

000d5be4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_I2C_Peek_Data+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030228 	.word	0x00030228

000d5bf4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <HAL_I2C_Flush_Data+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030228 	.word	0x00030228

000d5c04 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <HAL_I2C_Is_Enabled+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030228 	.word	0x00030228

000d5c14 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_I2C_Init+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030228 	.word	0x00030228

000d5c24 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_USB_USART_Init+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	681b      	ldr	r3, [r3, #0]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	0003024c 	.word	0x0003024c

000d5c34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_USB_USART_Begin+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	685b      	ldr	r3, [r3, #4]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	0003024c 	.word	0x0003024c

000d5c44 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_USB_USART_Available_Data+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	691b      	ldr	r3, [r3, #16]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	0003024c 	.word	0x0003024c

000d5c54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	695b      	ldr	r3, [r3, #20]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	0003024c 	.word	0x0003024c

000d5c64 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_USB_USART_Receive_Data+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	699b      	ldr	r3, [r3, #24]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	0003024c 	.word	0x0003024c

000d5c74 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_USB_USART_Send_Data+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	69db      	ldr	r3, [r3, #28]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	0003024c 	.word	0x0003024c

000d5c84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_USB_USART_Flush_Data+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6a1b      	ldr	r3, [r3, #32]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	0003024c 	.word	0x0003024c

000d5c94 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <panic_+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030260 	.word	0x00030260

000d5ca4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <set_system_mode+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	685b      	ldr	r3, [r3, #4]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030220 	.word	0x00030220

000d5cb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <system_delay_ms+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	695b      	ldr	r3, [r3, #20]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030220 	.word	0x00030220

000d5cc4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <system_thread_set_state+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030220 	.word	0x00030220

000d5cd4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <application_thread_current+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030220 	.word	0x00030220

000d5ce4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <application_thread_invoke+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030220 	.word	0x00030220

000d5cf4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b03      	ldr	r3, [pc, #12]	; (d5d04 <system_ctrl_set_app_request_handler+0x10>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5cfe:	9301      	str	r3, [sp, #4]
   d5d00:	bd08      	pop	{r3, pc}
   d5d02:	0000      	.short	0x0000
   d5d04:	00030220 	.word	0x00030220

000d5d08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b03      	ldr	r3, [pc, #12]	; (d5d18 <system_ctrl_set_result+0x10>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d12:	9301      	str	r3, [sp, #4]
   d5d14:	bd08      	pop	{r3, pc}
   d5d16:	0000      	.short	0x0000
   d5d18:	00030220 	.word	0x00030220

000d5d1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <network_connect+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	685b      	ldr	r3, [r3, #4]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030240 	.word	0x00030240

000d5d2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <network_connecting+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	689b      	ldr	r3, [r3, #8]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030240 	.word	0x00030240

000d5d3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <network_disconnect+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	68db      	ldr	r3, [r3, #12]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030240 	.word	0x00030240

000d5d4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <network_ready+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	691b      	ldr	r3, [r3, #16]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030240 	.word	0x00030240

000d5d5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <network_on+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	695b      	ldr	r3, [r3, #20]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030240 	.word	0x00030240

000d5d6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <network_off+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	699b      	ldr	r3, [r3, #24]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030240 	.word	0x00030240

000d5d7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <network_listen+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	69db      	ldr	r3, [r3, #28]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030240 	.word	0x00030240

000d5d8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <network_listening+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	6a1b      	ldr	r3, [r3, #32]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030240 	.word	0x00030240

000d5d9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <network_set_listen_timeout+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030240 	.word	0x00030240

000d5dac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <network_get_listen_timeout+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030240 	.word	0x00030240

000d5dbc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <spark_cloud_flag_connected+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	695b      	ldr	r3, [r3, #20]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030244 	.word	0x00030244

000d5dcc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <spark_send_event+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	6a1b      	ldr	r3, [r3, #32]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030244 	.word	0x00030244

000d5ddc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	00030244 	.word	0x00030244

000d5dec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <malloc+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	681b      	ldr	r3, [r3, #0]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003021c 	.word	0x0003021c

000d5dfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <free+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	685b      	ldr	r3, [r3, #4]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003021c 	.word	0x0003021c

000d5e0c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <vsnprintf+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003021c 	.word	0x0003021c

000d5e1c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <abort+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	0003021c 	.word	0x0003021c

000d5e2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <_malloc_r+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	0003021c 	.word	0x0003021c

000d5e3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e3c:	2200      	movs	r2, #0
   d5e3e:	4611      	mov	r1, r2
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	f7ff bfa3 	b.w	d5d8c <network_listening>

000d5e46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e46:	2200      	movs	r2, #0
   d5e48:	4611      	mov	r1, r2
   d5e4a:	6840      	ldr	r0, [r0, #4]
   d5e4c:	f7ff bfae 	b.w	d5dac <network_get_listen_timeout>

000d5e50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e50:	2200      	movs	r2, #0
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bfa2 	b.w	d5d9c <network_set_listen_timeout>

000d5e58 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e58:	2200      	movs	r2, #0
   d5e5a:	f081 0101 	eor.w	r1, r1, #1
   d5e5e:	6840      	ldr	r0, [r0, #4]
   d5e60:	f7ff bf8c 	b.w	d5d7c <network_listen>

000d5e64 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e64:	2300      	movs	r3, #0
   d5e66:	461a      	mov	r2, r3
   d5e68:	4619      	mov	r1, r3
   d5e6a:	6840      	ldr	r0, [r0, #4]
   d5e6c:	f7ff bf7e 	b.w	d5d6c <network_off>

000d5e70 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e70:	2300      	movs	r3, #0
   d5e72:	461a      	mov	r2, r3
   d5e74:	4619      	mov	r1, r3
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	f7ff bf70 	b.w	d5d5c <network_on>

000d5e7c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e7c:	2200      	movs	r2, #0
   d5e7e:	4611      	mov	r1, r2
   d5e80:	6840      	ldr	r0, [r0, #4]
   d5e82:	f7ff bf63 	b.w	d5d4c <network_ready>

000d5e86 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e86:	2200      	movs	r2, #0
   d5e88:	4611      	mov	r1, r2
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7ff bf4e 	b.w	d5d2c <network_connecting>

000d5e90 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e90:	2200      	movs	r2, #0
   d5e92:	2102      	movs	r1, #2
   d5e94:	6840      	ldr	r0, [r0, #4]
   d5e96:	f7ff bf51 	b.w	d5d3c <network_disconnect>

000d5e9a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e9a:	2300      	movs	r3, #0
   d5e9c:	461a      	mov	r2, r3
   d5e9e:	6840      	ldr	r0, [r0, #4]
   d5ea0:	f7ff bf3c 	b.w	d5d1c <network_connect>

000d5ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ea4:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ea6:	2203      	movs	r2, #3
   d5ea8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5eaa:	4a02      	ldr	r2, [pc, #8]	; (d5eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5eac:	601a      	str	r2, [r3, #0]
   d5eae:	4770      	bx	lr
   d5eb0:	2003e3b4 	.word	0x2003e3b4
   d5eb4:	000d8730 	.word	0x000d8730

000d5eb8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5eb8:	2100      	movs	r1, #0
   d5eba:	f7ff bdc3 	b.w	d5a44 <HAL_SPI_Acquire>

000d5ebe <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5ebe:	2100      	movs	r1, #0
   d5ec0:	f7ff bdc8 	b.w	d5a54 <HAL_SPI_Release>

000d5ec4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4604      	mov	r4, r0
{
    _spi = spi;
   d5ec8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5eca:	4608      	mov	r0, r1
   d5ecc:	f7ff fda2 	bl	d5a14 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	6063      	str	r3, [r4, #4]
}
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	bd10      	pop	{r4, pc}

000d5ed8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5ed8:	b510      	push	{r4, lr}
   d5eda:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5edc:	7800      	ldrb	r0, [r0, #0]
   d5ede:	f7ff ffeb 	bl	d5eb8 <_ZN8SPIClass4lockEv.isra.0>
   d5ee2:	b948      	cbnz	r0, d5ef8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5ee4:	7820      	ldrb	r0, [r4, #0]
   d5ee6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5eea:	f7ff fd6b 	bl	d59c4 <HAL_SPI_Begin>
        unlock();
   d5eee:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5ef4:	f7ff bfe3 	b.w	d5ebe <_ZN8SPIClass6unlockEv.isra.1>
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5efa:	b538      	push	{r3, r4, r5, lr}
   d5efc:	4604      	mov	r4, r0
    if (!lock())
   d5efe:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f00:	460d      	mov	r5, r1
    if (!lock())
   d5f02:	f7ff ffd9 	bl	d5eb8 <_ZN8SPIClass4lockEv.isra.0>
   d5f06:	b940      	cbnz	r0, d5f1a <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5f08:	7820      	ldrb	r0, [r4, #0]
   d5f0a:	4629      	mov	r1, r5
   d5f0c:	f7ff fd62 	bl	d59d4 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5f10:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5f16:	f7ff bfd2 	b.w	d5ebe <_ZN8SPIClass6unlockEv.isra.1>
   d5f1a:	bd38      	pop	{r3, r4, r5, pc}

000d5f1c <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f1c:	b538      	push	{r3, r4, r5, lr}
   d5f1e:	4604      	mov	r4, r0
    if (!lock())
   d5f20:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f22:	460d      	mov	r5, r1
    if (!lock())
   d5f24:	f7ff ffc8 	bl	d5eb8 <_ZN8SPIClass4lockEv.isra.0>
   d5f28:	b940      	cbnz	r0, d5f3c <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5f2a:	7820      	ldrb	r0, [r4, #0]
   d5f2c:	4629      	mov	r1, r5
   d5f2e:	f7ff fd59 	bl	d59e4 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5f32:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5f38:	f7ff bfc1 	b.w	d5ebe <_ZN8SPIClass6unlockEv.isra.1>
   d5f3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f40:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5f42:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f44:	6018      	str	r0, [r3, #0]
   d5f46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5f48:	6818      	ldr	r0, [r3, #0]
   d5f4a:	4288      	cmp	r0, r1
   d5f4c:	b2e5      	uxtb	r5, r4
   d5f4e:	d906      	bls.n	d5f5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5f50:	3401      	adds	r4, #1
   d5f52:	2c08      	cmp	r4, #8
   d5f54:	d002      	beq.n	d5f5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5f56:	0840      	lsrs	r0, r0, #1
   d5f58:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5f5a:	e7f5      	b.n	d5f48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5f5c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5f60:	5d5b      	ldrb	r3, [r3, r5]
   d5f62:	7013      	strb	r3, [r2, #0]
   d5f64:	bd30      	pop	{r4, r5, pc}
   d5f66:	bf00      	nop
   d5f68:	000d875c 	.word	0x000d875c

000d5f6c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f70:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5f72:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5f74:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5f76:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5f78:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5f7a:	460e      	mov	r6, r1
   d5f7c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5f7e:	f7ff ff9b 	bl	d5eb8 <_ZN8SPIClass4lockEv.isra.0>
   d5f82:	4605      	mov	r5, r0
   d5f84:	bb00      	cbnz	r0, d5fc8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5f86:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5f8a:	4601      	mov	r1, r0
   d5f8c:	2214      	movs	r2, #20
   d5f8e:	a803      	add	r0, sp, #12
   d5f90:	f001 ff03 	bl	d7d9a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5f94:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5f96:	462a      	mov	r2, r5
   d5f98:	a903      	add	r1, sp, #12
   d5f9a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5f9c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5fa0:	f7ff fd48 	bl	d5a34 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fa4:	ab02      	add	r3, sp, #8
   d5fa6:	f10d 0207 	add.w	r2, sp, #7
   d5faa:	fb07 f106 	mul.w	r1, r7, r6
   d5fae:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5fb0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5fb4:	f7ff ffc4 	bl	d5f40 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5fb8:	7820      	ldrb	r0, [r4, #0]
   d5fba:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5fbe:	f7ff fd19 	bl	d59f4 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5fc2:	7820      	ldrb	r0, [r4, #0]
   d5fc4:	f7ff ff7b 	bl	d5ebe <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5fc8:	9802      	ldr	r0, [sp, #8]
   d5fca:	b008      	add	sp, #32
   d5fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fd0 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5fd0:	b538      	push	{r3, r4, r5, lr}
   d5fd2:	4604      	mov	r4, r0
    if (!lock())
   d5fd4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5fd6:	460d      	mov	r5, r1
    if (!lock())
   d5fd8:	f7ff ff6e 	bl	d5eb8 <_ZN8SPIClass4lockEv.isra.0>
   d5fdc:	b9c8      	cbnz	r0, d6012 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5fde:	6861      	ldr	r1, [r4, #4]
   d5fe0:	b171      	cbz	r1, d6000 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5fe2:	4b0c      	ldr	r3, [pc, #48]	; (d6014 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5fe4:	5cc2      	ldrb	r2, [r0, r3]
   d5fe6:	42aa      	cmp	r2, r5
   d5fe8:	d002      	beq.n	d5ff0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5fea:	3001      	adds	r0, #1
   d5fec:	2808      	cmp	r0, #8
   d5fee:	d1f9      	bne.n	d5fe4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5ff0:	3001      	adds	r0, #1
   d5ff2:	b2c0      	uxtb	r0, r0
   d5ff4:	40c1      	lsrs	r1, r0
   d5ff6:	2201      	movs	r2, #1
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	f7ff ffb7 	bl	d5f6c <_ZN8SPIClass13setClockSpeedEjj>
   d5ffe:	e003      	b.n	d6008 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6000:	4629      	mov	r1, r5
   d6002:	7820      	ldrb	r0, [r4, #0]
   d6004:	f7ff fcf6 	bl	d59f4 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6008:	7820      	ldrb	r0, [r4, #0]
    }
}
   d600a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d600e:	f7ff bf56 	b.w	d5ebe <_ZN8SPIClass6unlockEv.isra.1>
   d6012:	bd38      	pop	{r3, r4, r5, pc}
   d6014:	000d875c 	.word	0x000d875c

000d6018 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6018:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d601a:	7800      	ldrb	r0, [r0, #0]
   d601c:	f7ff fcf2 	bl	d5a04 <HAL_SPI_Send_Receive_Data>
}
   d6020:	b2c0      	uxtb	r0, r0
   d6022:	bd08      	pop	{r3, pc}

000d6024 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6024:	7800      	ldrb	r0, [r0, #0]
   d6026:	f7ff bcfd 	b.w	d5a24 <HAL_SPI_Is_Enabled>

000d602a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d602a:	b510      	push	{r4, lr}
   d602c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d602e:	6800      	ldr	r0, [r0, #0]
   d6030:	b118      	cbz	r0, d603a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6032:	f7ff fee3 	bl	d5dfc <free>
            wakeupSource_ = nullptr;
   d6036:	2300      	movs	r3, #0
   d6038:	6023      	str	r3, [r4, #0]
   d603a:	bd10      	pop	{r4, pc}

000d603c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d603c:	b510      	push	{r4, lr}
   d603e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6040:	f7ff fff3 	bl	d602a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6044:	4620      	mov	r0, r4
   d6046:	bd10      	pop	{r4, pc}

000d6048 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6048:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d604a:	4c09      	ldr	r4, [pc, #36]	; (d6070 <_GLOBAL__sub_I_System+0x28>)
   d604c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d604e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6052:	6020      	str	r0, [r4, #0]
   d6054:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6056:	71a0      	strb	r0, [r4, #6]
   d6058:	8120      	strh	r0, [r4, #8]
   d605a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d605c:	f7ff fe22 	bl	d5ca4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6060:	4620      	mov	r0, r4
   d6062:	4a04      	ldr	r2, [pc, #16]	; (d6074 <_GLOBAL__sub_I_System+0x2c>)
   d6064:	4904      	ldr	r1, [pc, #16]	; (d6078 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d606a:	f001 b8f3 	b.w	d7254 <__aeabi_atexit>
   d606e:	bf00      	nop
   d6070:	2003e3bc 	.word	0x2003e3bc
   d6074:	2003e298 	.word	0x2003e298
   d6078:	000d603d 	.word	0x000d603d

000d607c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d607c:	b510      	push	{r4, lr}
   d607e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6080:	6800      	ldr	r0, [r0, #0]
   d6082:	b108      	cbz	r0, d6088 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6084:	f7ff fd26 	bl	d5ad4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6088:	4620      	mov	r0, r4
   d608a:	bd10      	pop	{r4, pc}

000d608c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d608c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d608e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6090:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6092:	689b      	ldr	r3, [r3, #8]
   d6094:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6096:	68a3      	ldr	r3, [r4, #8]
   d6098:	3b01      	subs	r3, #1
   d609a:	60a3      	str	r3, [r4, #8]
   d609c:	b92b      	cbnz	r3, d60aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d609e:	6823      	ldr	r3, [r4, #0]
   d60a0:	4620      	mov	r0, r4
   d60a2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d60a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d60a8:	4718      	bx	r3
   d60aa:	bd10      	pop	{r4, pc}

000d60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d60ac:	680b      	ldr	r3, [r1, #0]
   d60ae:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d60b0:	b113      	cbz	r3, d60b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d60b2:	685a      	ldr	r2, [r3, #4]
   d60b4:	3201      	adds	r2, #1
   d60b6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d60b8:	4770      	bx	lr

000d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d60ba:	b510      	push	{r4, lr}
   d60bc:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d60be:	6800      	ldr	r0, [r0, #0]
   d60c0:	b128      	cbz	r0, d60ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d60c2:	6843      	ldr	r3, [r0, #4]
   d60c4:	3b01      	subs	r3, #1
   d60c6:	6043      	str	r3, [r0, #4]
   d60c8:	b90b      	cbnz	r3, d60ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d60ca:	f7ff ffdf 	bl	d608c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d60ce:	4620      	mov	r0, r4
   d60d0:	bd10      	pop	{r4, pc}
	...

000d60d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d60d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60d6:	4c06      	ldr	r4, [pc, #24]	; (d60f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d60d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d60da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d60de:	f7ff fcf1 	bl	d5ac4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d60e2:	4620      	mov	r0, r4
   d60e4:	4a03      	ldr	r2, [pc, #12]	; (d60f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d60e6:	4904      	ldr	r1, [pc, #16]	; (d60f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d60e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d60ec:	f001 b8b2 	b.w	d7254 <__aeabi_atexit>
   d60f0:	2003e3c8 	.word	0x2003e3c8
   d60f4:	2003e298 	.word	0x2003e298
   d60f8:	000d607d 	.word	0x000d607d

000d60fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d60fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60fe:	4606      	mov	r6, r0
   d6100:	460d      	mov	r5, r1
   d6102:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6104:	2400      	movs	r4, #0
  while (size--) {
   d6106:	42bd      	cmp	r5, r7
   d6108:	d00c      	beq.n	d6124 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d610a:	6833      	ldr	r3, [r6, #0]
   d610c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6110:	689b      	ldr	r3, [r3, #8]
   d6112:	4630      	mov	r0, r6
   d6114:	4798      	blx	r3
     if (chunk>=0)
   d6116:	2800      	cmp	r0, #0
   d6118:	db01      	blt.n	d611e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d611a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d611c:	e7f3      	b.n	d6106 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d611e:	2c00      	cmp	r4, #0
   d6120:	bf08      	it	eq
   d6122:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6124:	4620      	mov	r0, r4
   d6126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6128 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6128:	b570      	push	{r4, r5, r6, lr}
   d612a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d612c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d612e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6130:	b149      	cbz	r1, d6146 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6132:	f001 feca 	bl	d7eca <strlen>
   d6136:	682b      	ldr	r3, [r5, #0]
   d6138:	4602      	mov	r2, r0
   d613a:	4621      	mov	r1, r4
   d613c:	4628      	mov	r0, r5
   d613e:	68db      	ldr	r3, [r3, #12]
    }
   d6140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6144:	4718      	bx	r3
    }
   d6146:	bd70      	pop	{r4, r5, r6, pc}

000d6148 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6148:	6803      	ldr	r3, [r0, #0]
   d614a:	689b      	ldr	r3, [r3, #8]
   d614c:	4718      	bx	r3

000d614e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d614e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6150:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6152:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6154:	f7ff fff8 	bl	d6148 <_ZN5Print5printEc>
  n += print('\n');
   d6158:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d615a:	4604      	mov	r4, r0
  n += print('\n');
   d615c:	4628      	mov	r0, r5
   d615e:	f7ff fff3 	bl	d6148 <_ZN5Print5printEc>
  return n;
}
   d6162:	4420      	add	r0, r4
   d6164:	bd38      	pop	{r3, r4, r5, pc}

000d6166 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6166:	b538      	push	{r3, r4, r5, lr}
   d6168:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d616a:	f7ff ffdd 	bl	d6128 <_ZN5Print5writeEPKc>
   d616e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6170:	4628      	mov	r0, r5
   d6172:	f7ff ffec 	bl	d614e <_ZN5Print7printlnEv>
  return n;
}
   d6176:	4420      	add	r0, r4
   d6178:	bd38      	pop	{r3, r4, r5, pc}

000d617a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d617a:	b530      	push	{r4, r5, lr}
   d617c:	b08b      	sub	sp, #44	; 0x2c
   d617e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6180:	2100      	movs	r1, #0
   d6182:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6186:	2a01      	cmp	r2, #1
   d6188:	bf98      	it	ls
   d618a:	220a      	movls	r2, #10
   d618c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6190:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6194:	fb05 3312 	mls	r3, r5, r2, r3
   d6198:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d619c:	2b09      	cmp	r3, #9
   d619e:	bf94      	ite	ls
   d61a0:	3330      	addls	r3, #48	; 0x30
   d61a2:	3337      	addhi	r3, #55	; 0x37
   d61a4:	b2db      	uxtb	r3, r3
   d61a6:	4621      	mov	r1, r4
   d61a8:	f804 3901 	strb.w	r3, [r4], #-1
   d61ac:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d61ae:	2d00      	cmp	r5, #0
   d61b0:	d1ee      	bne.n	d6190 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d61b2:	f7ff ffb9 	bl	d6128 <_ZN5Print5writeEPKc>
}
   d61b6:	b00b      	add	sp, #44	; 0x2c
   d61b8:	bd30      	pop	{r4, r5, pc}

000d61ba <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d61ba:	b40c      	push	{r2, r3}
   d61bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61c0:	b087      	sub	sp, #28
   d61c2:	af00      	add	r7, sp, #0
   d61c4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d61c8:	4605      	mov	r5, r0
   d61ca:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d61ce:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d61d0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d61d2:	4623      	mov	r3, r4
   d61d4:	464a      	mov	r2, r9
   d61d6:	2114      	movs	r1, #20
   d61d8:	1d38      	adds	r0, r7, #4
   d61da:	f7ff fe17 	bl	d5e0c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d61de:	2813      	cmp	r0, #19
   d61e0:	d805      	bhi.n	d61ee <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d61e2:	1d39      	adds	r1, r7, #4
   d61e4:	4628      	mov	r0, r5
   d61e6:	f7ff ff9f 	bl	d6128 <_ZN5Print5writeEPKc>
   d61ea:	4604      	mov	r4, r0
   d61ec:	e013      	b.n	d6216 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d61ee:	f100 0308 	add.w	r3, r0, #8
   d61f2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d61f6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d61f8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d61fc:	1c41      	adds	r1, r0, #1
   d61fe:	4623      	mov	r3, r4
   d6200:	464a      	mov	r2, r9
   d6202:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6204:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6206:	f7ff fe01 	bl	d5e0c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d620a:	4669      	mov	r1, sp
   d620c:	4628      	mov	r0, r5
   d620e:	f7ff ff8b 	bl	d6128 <_ZN5Print5writeEPKc>
   d6212:	4604      	mov	r4, r0
   d6214:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6216:	b11e      	cbz	r6, d6220 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6218:	4628      	mov	r0, r5
   d621a:	f7ff ff98 	bl	d614e <_ZN5Print7printlnEv>
   d621e:	4404      	add	r4, r0
    return n;
}
   d6220:	4620      	mov	r0, r4
   d6222:	371c      	adds	r7, #28
   d6224:	46bd      	mov	sp, r7
   d6226:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d622a:	b002      	add	sp, #8
   d622c:	4770      	bx	lr
	...

000d6230 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6230:	4b01      	ldr	r3, [pc, #4]	; (d6238 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6232:	4a02      	ldr	r2, [pc, #8]	; (d623c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6234:	601a      	str	r2, [r3, #0]
   d6236:	4770      	bx	lr
   d6238:	2003e3cc 	.word	0x2003e3cc
   d623c:	000d87d7 	.word	0x000d87d7

000d6240 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6240:	4b02      	ldr	r3, [pc, #8]	; (d624c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	4b02      	ldr	r3, [pc, #8]	; (d6250 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6246:	601a      	str	r2, [r3, #0]
   d6248:	4770      	bx	lr
   d624a:	bf00      	nop
   d624c:	2003e22c 	.word	0x2003e22c
   d6250:	2003e3d0 	.word	0x2003e3d0

000d6254 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6254:	2100      	movs	r1, #0
   d6256:	f7ff bd2d 	b.w	d5cb4 <system_delay_ms>

000d625a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d625a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d625c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d625e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6260:	b113      	cbz	r3, d6268 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6262:	2203      	movs	r2, #3
   d6264:	4601      	mov	r1, r0
   d6266:	4798      	blx	r3
    }
   d6268:	4620      	mov	r0, r4
   d626a:	bd10      	pop	{r4, pc}

000d626c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d626c:	b510      	push	{r4, lr}
   d626e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6270:	f7ff fff3 	bl	d625a <_ZNSt14_Function_baseD1Ev>
   d6274:	4620      	mov	r0, r4
   d6276:	bd10      	pop	{r4, pc}

000d6278 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6278:	b513      	push	{r0, r1, r4, lr}
   d627a:	460b      	mov	r3, r1
   d627c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d627e:	c803      	ldmia	r0, {r0, r1}
   d6280:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6284:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6288:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d628c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6290:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6294:	b002      	add	sp, #8
   d6296:	bd10      	pop	{r4, pc}

000d6298 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6298:	4803      	ldr	r0, [pc, #12]	; (d62a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d629a:	4a04      	ldr	r2, [pc, #16]	; (d62ac <_GLOBAL__sub_I_RGB+0x14>)
   d629c:	4904      	ldr	r1, [pc, #16]	; (d62b0 <_GLOBAL__sub_I_RGB+0x18>)
   d629e:	2300      	movs	r3, #0
   d62a0:	6083      	str	r3, [r0, #8]
   d62a2:	f000 bfd7 	b.w	d7254 <__aeabi_atexit>
   d62a6:	bf00      	nop
   d62a8:	2003e3d4 	.word	0x2003e3d4
   d62ac:	2003e298 	.word	0x2003e298
   d62b0:	000d626d 	.word	0x000d626d

000d62b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d62b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d62b6:	4b0c      	ldr	r3, [pc, #48]	; (d62e8 <serialEventRun+0x34>)
   d62b8:	b133      	cbz	r3, d62c8 <serialEventRun+0x14>
   d62ba:	f000 fc1b 	bl	d6af4 <_Z16_fetch_usbserialv>
   d62be:	6803      	ldr	r3, [r0, #0]
   d62c0:	691b      	ldr	r3, [r3, #16]
   d62c2:	4798      	blx	r3
   d62c4:	2800      	cmp	r0, #0
   d62c6:	dc09      	bgt.n	d62dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d62c8:	4b08      	ldr	r3, [pc, #32]	; (d62ec <serialEventRun+0x38>)
   d62ca:	b163      	cbz	r3, d62e6 <serialEventRun+0x32>
   d62cc:	f000 fce6 	bl	d6c9c <_Z22__fetch_global_Serial1v>
   d62d0:	6803      	ldr	r3, [r0, #0]
   d62d2:	691b      	ldr	r3, [r3, #16]
   d62d4:	4798      	blx	r3
   d62d6:	2800      	cmp	r0, #0
   d62d8:	dc03      	bgt.n	d62e2 <serialEventRun+0x2e>
   d62da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d62dc:	f3af 8000 	nop.w
   d62e0:	e7f2      	b.n	d62c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d62e2:	f3af 8000 	nop.w
   d62e6:	bd08      	pop	{r3, pc}
	...

000d62f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d62f0:	b508      	push	{r3, lr}
	serialEventRun();
   d62f2:	f7ff ffdf 	bl	d62b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62f6:	f7ff fbc5 	bl	d5a84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62fa:	4b01      	ldr	r3, [pc, #4]	; (d6300 <_post_loop+0x10>)
   d62fc:	6018      	str	r0, [r3, #0]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	2003e730 	.word	0x2003e730

000d6304 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6304:	4802      	ldr	r0, [pc, #8]	; (d6310 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6306:	4a03      	ldr	r2, [pc, #12]	; (d6314 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6308:	4903      	ldr	r1, [pc, #12]	; (d6318 <_Z33system_initialize_user_backup_ramv+0x14>)
   d630a:	1a12      	subs	r2, r2, r0
   d630c:	f001 bd3a 	b.w	d7d84 <memcpy>
   d6310:	2003f400 	.word	0x2003f400
   d6314:	2003f404 	.word	0x2003f404
   d6318:	000d8b70 	.word	0x000d8b70

000d631c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d631c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d631e:	2300      	movs	r3, #0
   d6320:	9300      	str	r3, [sp, #0]
   d6322:	461a      	mov	r2, r3
   d6324:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6328:	f7ff fcee 	bl	d5d08 <system_ctrl_set_result>
}
   d632c:	b003      	add	sp, #12
   d632e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6334 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6334:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6336:	8843      	ldrh	r3, [r0, #2]
   d6338:	2b0a      	cmp	r3, #10
   d633a:	d008      	beq.n	d634e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d633c:	2b50      	cmp	r3, #80	; 0x50
   d633e:	d109      	bne.n	d6354 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6340:	4b09      	ldr	r3, [pc, #36]	; (d6368 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6342:	681b      	ldr	r3, [r3, #0]
   d6344:	b13b      	cbz	r3, d6356 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6346:	b003      	add	sp, #12
   d6348:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d634c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d634e:	f7ff ffe5 	bl	d631c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6352:	e006      	b.n	d6362 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6354:	2300      	movs	r3, #0
   d6356:	9300      	str	r3, [sp, #0]
   d6358:	461a      	mov	r2, r3
   d635a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d635e:	f7ff fcd3 	bl	d5d08 <system_ctrl_set_result>
        break;
    }
}
   d6362:	b003      	add	sp, #12
   d6364:	f85d fb04 	ldr.w	pc, [sp], #4
   d6368:	2003e3e4 	.word	0x2003e3e4

000d636c <module_user_init_hook>:

void module_user_init_hook()
{
   d636c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d636e:	4c10      	ldr	r4, [pc, #64]	; (d63b0 <module_user_init_hook+0x44>)
   d6370:	4d10      	ldr	r5, [pc, #64]	; (d63b4 <module_user_init_hook+0x48>)
   d6372:	6823      	ldr	r3, [r4, #0]
   d6374:	42ab      	cmp	r3, r5
   d6376:	4b10      	ldr	r3, [pc, #64]	; (d63b8 <module_user_init_hook+0x4c>)
   d6378:	bf0c      	ite	eq
   d637a:	2201      	moveq	r2, #1
   d637c:	2200      	movne	r2, #0
   d637e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6380:	d002      	beq.n	d6388 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6382:	f7ff ffbf 	bl	d6304 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6386:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6388:	f7ff fb6c 	bl	d5a64 <HAL_RNG_GetRandomNumber>
   d638c:	4604      	mov	r4, r0
    srand(seed);
   d638e:	f001 fd0d 	bl	d7dac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6392:	4b0a      	ldr	r3, [pc, #40]	; (d63bc <module_user_init_hook+0x50>)
   d6394:	b113      	cbz	r3, d639c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6396:	4620      	mov	r0, r4
   d6398:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d639c:	2100      	movs	r1, #0
   d639e:	4807      	ldr	r0, [pc, #28]	; (d63bc <module_user_init_hook+0x50>)
   d63a0:	f7ff fd1c 	bl	d5ddc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d63a4:	2100      	movs	r1, #0
   d63a6:	4806      	ldr	r0, [pc, #24]	; (d63c0 <module_user_init_hook+0x54>)
}
   d63a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d63ac:	f7ff bca2 	b.w	d5cf4 <system_ctrl_set_app_request_handler>
   d63b0:	2003f400 	.word	0x2003f400
   d63b4:	9a271c1e 	.word	0x9a271c1e
   d63b8:	2003e3e8 	.word	0x2003e3e8
   d63bc:	00000000 	.word	0x00000000
   d63c0:	000d6335 	.word	0x000d6335

000d63c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63c4:	4770      	bx	lr

000d63c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d63c6:	2000      	movs	r0, #0
   d63c8:	4770      	bx	lr

000d63ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63ca:	b510      	push	{r4, lr}
   d63cc:	2110      	movs	r1, #16
   d63ce:	4604      	mov	r4, r0
   d63d0:	f000 ff4e 	bl	d7270 <_ZdlPvj>
   d63d4:	4620      	mov	r0, r4
   d63d6:	bd10      	pop	{r4, pc}

000d63d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d63d8:	b508      	push	{r3, lr}
      { delete this; }
   d63da:	b108      	cbz	r0, d63e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d63dc:	f7ff fff5 	bl	d63ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d63e0:	bd08      	pop	{r3, pc}

000d63e2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d63e2:	2200      	movs	r2, #0
   d63e4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d63e6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d63e8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d63ec:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d63ee:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d63f2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d63f4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63f6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d63f8:	680c      	ldr	r4, [r1, #0]
   d63fa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d63fc:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6400:	b510      	push	{r4, lr}
   d6402:	4604      	mov	r4, r0
    free((void*)msg_);
   d6404:	6800      	ldr	r0, [r0, #0]
   d6406:	f7ff fcf9 	bl	d5dfc <free>
}
   d640a:	4620      	mov	r0, r4
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d640e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6410:	68c4      	ldr	r4, [r0, #12]
   d6412:	b1f4      	cbz	r4, d6452 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6414:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6416:	2b02      	cmp	r3, #2
   d6418:	d103      	bne.n	d6422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d641a:	f104 000c 	add.w	r0, r4, #12
   d641e:	f7ff ffef 	bl	d6400 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6422:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6424:	b135      	cbz	r5, d6434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6426:	4628      	mov	r0, r5
   d6428:	f7ff ff17 	bl	d625a <_ZNSt14_Function_baseD1Ev>
   d642c:	2110      	movs	r1, #16
   d642e:	4628      	mov	r0, r5
   d6430:	f000 ff1e 	bl	d7270 <_ZdlPvj>
   d6434:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6436:	b135      	cbz	r5, d6446 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6438:	4628      	mov	r0, r5
   d643a:	f7ff ff0e 	bl	d625a <_ZNSt14_Function_baseD1Ev>
   d643e:	2110      	movs	r1, #16
   d6440:	4628      	mov	r0, r5
   d6442:	f000 ff15 	bl	d7270 <_ZdlPvj>
   d6446:	4620      	mov	r0, r4
   d6448:	2114      	movs	r1, #20
   d644a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d644e:	f000 bf0f 	b.w	d7270 <_ZdlPvj>
   d6452:	bd38      	pop	{r3, r4, r5, pc}

000d6454 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6454:	b513      	push	{r0, r1, r4, lr}
   d6456:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6458:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d645c:	2300      	movs	r3, #0
   d645e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6460:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6462:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6464:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6466:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6468:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d646a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d646c:	f7ff fe25 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6470:	4620      	mov	r0, r4
   d6472:	b002      	add	sp, #8
   d6474:	bd10      	pop	{r4, pc}

000d6476 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6478:	460c      	mov	r4, r1
   d647a:	ad02      	add	r5, sp, #8
   d647c:	f854 3b04 	ldr.w	r3, [r4], #4
   d6480:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6484:	4606      	mov	r6, r0
   d6486:	460f      	mov	r7, r1
   d6488:	a801      	add	r0, sp, #4
   d648a:	4621      	mov	r1, r4
   d648c:	f7ff fe0e 	bl	d60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6490:	4629      	mov	r1, r5
   d6492:	4630      	mov	r0, r6
   d6494:	f7ff ffde 	bl	d6454 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6498:	a801      	add	r0, sp, #4
   d649a:	f7ff fe0e 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d649e:	4620      	mov	r0, r4
   d64a0:	f7ff fe0b 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d64a4:	4638      	mov	r0, r7
   d64a6:	2108      	movs	r1, #8
   d64a8:	f000 fee2 	bl	d7270 <_ZdlPvj>
        return p;
    }
   d64ac:	4630      	mov	r0, r6
   d64ae:	b003      	add	sp, #12
   d64b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d64b4:	b538      	push	{r3, r4, r5, lr}
   d64b6:	2300      	movs	r3, #0
   d64b8:	4604      	mov	r4, r0
   d64ba:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64bc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d64be:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64c0:	f7fd fdeb 	bl	d409a <_Znwj>
   d64c4:	b128      	cbz	r0, d64d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64c6:	2301      	movs	r3, #1
   d64c8:	6043      	str	r3, [r0, #4]
   d64ca:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d64cc:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d64ce:	6003      	str	r3, [r0, #0]
   d64d0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64d2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d64d4:	4620      	mov	r0, r4
   d64d6:	bd38      	pop	{r3, r4, r5, pc}
   d64d8:	000d8874 	.word	0x000d8874

000d64dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64dc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d64de:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64e0:	b90a      	cbnz	r2, d64e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d64e2:	f000 fed8 	bl	d7296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64e6:	68c3      	ldr	r3, [r0, #12]
    }
   d64e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64ec:	4718      	bx	r3

000d64ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64ee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d64f0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d64f2:	f100 0110 	add.w	r1, r0, #16
   d64f6:	f7ff fff1 	bl	d64dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d64fa:	bd08      	pop	{r3, pc}

000d64fc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d64fc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d64fe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6500:	b90a      	cbnz	r2, d6506 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6502:	f000 fec8 	bl	d7296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6506:	68c3      	ldr	r3, [r0, #12]
    }
   d6508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d650c:	4718      	bx	r3

000d650e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d650e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6510:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6512:	f100 0110 	add.w	r1, r0, #16
   d6516:	f7ff fff1 	bl	d64fc <_ZNKSt8functionIFvRKbEEclES1_>
   d651a:	bd08      	pop	{r3, pc}

000d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d651c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d651e:	2300      	movs	r3, #0
   d6520:	6083      	str	r3, [r0, #8]
   d6522:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6524:	4604      	mov	r4, r0
   d6526:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6528:	b12b      	cbz	r3, d6536 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d652a:	2202      	movs	r2, #2
   d652c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d652e:	68eb      	ldr	r3, [r5, #12]
   d6530:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6532:	68ab      	ldr	r3, [r5, #8]
   d6534:	60a3      	str	r3, [r4, #8]
	}
    }
   d6536:	4620      	mov	r0, r4
   d6538:	bd38      	pop	{r3, r4, r5, pc}
	...

000d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d653e:	b089      	sub	sp, #36	; 0x24
   d6540:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6542:	4668      	mov	r0, sp
   d6544:	f7ff ff4d 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6548:	2300      	movs	r3, #0
   d654a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d654e:	f04f 0202 	mov.w	r2, #2
   d6552:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6556:	2b00      	cmp	r3, #0
   d6558:	d103      	bne.n	d6562 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d655a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d655e:	2900      	cmp	r1, #0
   d6560:	d1f7      	bne.n	d6552 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6562:	d002      	beq.n	d656a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6564:	f88d 3008 	strb.w	r3, [sp, #8]
   d6568:	e063      	b.n	d6632 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d656a:	f114 050c 	adds.w	r5, r4, #12
   d656e:	d003      	beq.n	d6578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6570:	4669      	mov	r1, sp
   d6572:	4628      	mov	r0, r5
   d6574:	f7ff ff35 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6578:	f3bf 8f5f 	dmb	sy
   d657c:	2301      	movs	r3, #1
   d657e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6580:	2000      	movs	r0, #0
   d6582:	f104 0308 	add.w	r3, r4, #8
   d6586:	f3bf 8f5f 	dmb	sy
   d658a:	e853 6f00 	ldrex	r6, [r3]
   d658e:	e843 0200 	strex	r2, r0, [r3]
   d6592:	2a00      	cmp	r2, #0
   d6594:	d1f9      	bne.n	d658a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6596:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d659a:	2e00      	cmp	r6, #0
   d659c:	d049      	beq.n	d6632 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d659e:	f7ff fb99 	bl	d5cd4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d65a2:	b120      	cbz	r0, d65ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65a4:	4629      	mov	r1, r5
   d65a6:	4630      	mov	r0, r6
   d65a8:	f7ff ff98 	bl	d64dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d65ac:	e03a      	b.n	d6624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65ae:	4631      	mov	r1, r6
   d65b0:	a802      	add	r0, sp, #8
   d65b2:	f7ff ffb3 	bl	d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d65b6:	68e0      	ldr	r0, [r4, #12]
   d65b8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d65bc:	b108      	cbz	r0, d65c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d65be:	f001 fc69 	bl	d7e94 <strdup>
   d65c2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65c4:	2010      	movs	r0, #16
   d65c6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d65ca:	f7fd fd66 	bl	d409a <_Znwj>
   d65ce:	4605      	mov	r5, r0
   d65d0:	b1e8      	cbz	r0, d660e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65d2:	2700      	movs	r7, #0
   d65d4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65d6:	2018      	movs	r0, #24
   d65d8:	f7fd fd5f 	bl	d409a <_Znwj>
   d65dc:	4604      	mov	r4, r0
   d65de:	b188      	cbz	r0, d6604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d65e0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65e2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d65e4:	a802      	add	r0, sp, #8
   d65e6:	f7ff fe47 	bl	d6278 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ea:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d65ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65ee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65f0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d65f2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65f4:	a906      	add	r1, sp, #24
   d65f6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d65f8:	60e3      	str	r3, [r4, #12]
   d65fa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d65fe:	9205      	str	r2, [sp, #20]
   d6600:	f7ff feef 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6604:	4b0d      	ldr	r3, [pc, #52]	; (d663c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6606:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6608:	4b0d      	ldr	r3, [pc, #52]	; (d6640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d660a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d660c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d660e:	a806      	add	r0, sp, #24
   d6610:	f7ff fef6 	bl	d6400 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6614:	a802      	add	r0, sp, #8
   d6616:	f7ff fe20 	bl	d625a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d661a:	2200      	movs	r2, #0
   d661c:	4629      	mov	r1, r5
   d661e:	4809      	ldr	r0, [pc, #36]	; (d6644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6620:	f7ff fb60 	bl	d5ce4 <application_thread_invoke>
   d6624:	4630      	mov	r0, r6
   d6626:	f7ff fe18 	bl	d625a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d662a:	2110      	movs	r1, #16
   d662c:	4630      	mov	r0, r6
   d662e:	f000 fe1f 	bl	d7270 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6632:	4668      	mov	r0, sp
   d6634:	f7ff fee4 	bl	d6400 <_ZN8particle5ErrorD1Ev>
    }
   d6638:	b009      	add	sp, #36	; 0x24
   d663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d663c:	000d64ef 	.word	0x000d64ef
   d6640:	000d6765 	.word	0x000d6765
   d6644:	000d6ce9 	.word	0x000d6ce9

000d6648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d664c:	b08b      	sub	sp, #44	; 0x2c
   d664e:	4606      	mov	r6, r0
   d6650:	460f      	mov	r7, r1
   d6652:	4690      	mov	r8, r2
   d6654:	4699      	mov	r9, r3
   d6656:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d665a:	f7ff fbaf 	bl	d5dbc <spark_cloud_flag_connected>
   d665e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6660:	4683      	mov	fp, r0
   d6662:	bb30      	cbnz	r0, d66b2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6664:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6668:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d666a:	a905      	add	r1, sp, #20
   d666c:	4628      	mov	r0, r5
   d666e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6672:	f7ff feb6 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
   d6676:	2014      	movs	r0, #20
   d6678:	f7fd fd0f 	bl	d409a <_Znwj>
   d667c:	4604      	mov	r4, r0
   d667e:	b158      	cbz	r0, d6698 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6680:	2302      	movs	r3, #2
   d6682:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6684:	2301      	movs	r3, #1
   d6686:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6688:	f8c0 b004 	str.w	fp, [r0, #4]
   d668c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6690:	4629      	mov	r1, r5
   d6692:	300c      	adds	r0, #12
   d6694:	f7ff fea5 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6698:	4630      	mov	r0, r6
   d669a:	4621      	mov	r1, r4
   d669c:	f840 4b04 	str.w	r4, [r0], #4
   d66a0:	f7ff ff08 	bl	d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66a4:	4628      	mov	r0, r5
   d66a6:	f7ff feab 	bl	d6400 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d66aa:	a805      	add	r0, sp, #20
   d66ac:	f7ff fea8 	bl	d6400 <_ZN8particle5ErrorD1Ev>
   d66b0:	e052      	b.n	d6758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66b2:	2400      	movs	r4, #0
   d66b4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66b6:	2014      	movs	r0, #20
   d66b8:	606c      	str	r4, [r5, #4]
   d66ba:	60ac      	str	r4, [r5, #8]
   d66bc:	9307      	str	r3, [sp, #28]
   d66be:	f7fd fcec 	bl	d409a <_Znwj>
   d66c2:	4601      	mov	r1, r0
   d66c4:	b118      	cbz	r0, d66ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d66c6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66c8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66ca:	6044      	str	r4, [r0, #4]
   d66cc:	6084      	str	r4, [r0, #8]
   d66ce:	a804      	add	r0, sp, #16
   d66d0:	9103      	str	r1, [sp, #12]
   d66d2:	f7ff feef 	bl	d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d66d6:	4b22      	ldr	r3, [pc, #136]	; (d6760 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d66d8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d66da:	2008      	movs	r0, #8
   d66dc:	f7fd fcdd 	bl	d409a <_Znwj>
   d66e0:	4604      	mov	r4, r0
   d66e2:	b128      	cbz	r0, d66f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66e4:	9b03      	ldr	r3, [sp, #12]
   d66e6:	f840 3b04 	str.w	r3, [r0], #4
   d66ea:	a904      	add	r1, sp, #16
   d66ec:	f7ff fcde 	bl	d60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66f0:	9500      	str	r5, [sp, #0]
   d66f2:	fa5f f38a 	uxtb.w	r3, sl
   d66f6:	464a      	mov	r2, r9
   d66f8:	4641      	mov	r1, r8
   d66fa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d66fc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66fe:	f7ff fb65 	bl	d5dcc <spark_send_event>
   d6702:	b920      	cbnz	r0, d670e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6704:	9b03      	ldr	r3, [sp, #12]
   d6706:	785b      	ldrb	r3, [r3, #1]
   d6708:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d670c:	b183      	cbz	r3, d6730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d670e:	9b03      	ldr	r3, [sp, #12]
   d6710:	9305      	str	r3, [sp, #20]
   d6712:	a904      	add	r1, sp, #16
   d6714:	a806      	add	r0, sp, #24
   d6716:	f7ff fcc9 	bl	d60ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d671a:	a905      	add	r1, sp, #20
   d671c:	4630      	mov	r0, r6
   d671e:	f7ff fe99 	bl	d6454 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6722:	a806      	add	r0, sp, #24
   d6724:	f7ff fcc9 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6728:	a804      	add	r0, sp, #16
   d672a:	f7ff fcc6 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d672e:	e013      	b.n	d6758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6730:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6734:	a905      	add	r1, sp, #20
   d6736:	a803      	add	r0, sp, #12
   d6738:	9205      	str	r2, [sp, #20]
   d673a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d673e:	f7ff fefd 	bl	d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6742:	a805      	add	r0, sp, #20
   d6744:	f7ff fe5c 	bl	d6400 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6748:	a805      	add	r0, sp, #20
   d674a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d674c:	f7ff fe93 	bl	d6476 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6750:	a806      	add	r0, sp, #24
   d6752:	f7ff fcb2 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6756:	e7da      	b.n	d670e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6758:	4630      	mov	r0, r6
   d675a:	b00b      	add	sp, #44	; 0x2c
   d675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6760:	000d68d5 	.word	0x000d68d5

000d6764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6764:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6768:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d676a:	d006      	beq.n	d677a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d676c:	2a03      	cmp	r2, #3
   d676e:	d017      	beq.n	d67a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6770:	2a01      	cmp	r2, #1
   d6772:	d122      	bne.n	d67ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6774:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6776:	6003      	str	r3, [r0, #0]
	      break;
   d6778:	e01f      	b.n	d67ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d677a:	2018      	movs	r0, #24
   d677c:	680e      	ldr	r6, [r1, #0]
   d677e:	f7fd fc8c 	bl	d409a <_Znwj>
   d6782:	4605      	mov	r5, r0
   d6784:	b150      	cbz	r0, d679c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6786:	4631      	mov	r1, r6
   d6788:	f7ff fec8 	bl	d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d678c:	6930      	ldr	r0, [r6, #16]
   d678e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6792:	b108      	cbz	r0, d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6794:	f001 fb7e 	bl	d7e94 <strdup>
   d6798:	6128      	str	r0, [r5, #16]
   d679a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d679c:	6025      	str	r5, [r4, #0]
   d679e:	e00c      	b.n	d67ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67a0:	6804      	ldr	r4, [r0, #0]
   d67a2:	b154      	cbz	r4, d67ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d67a4:	f104 0010 	add.w	r0, r4, #16
   d67a8:	f7ff fe2a 	bl	d6400 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67ac:	4620      	mov	r0, r4
   d67ae:	f7ff fd54 	bl	d625a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67b2:	2118      	movs	r1, #24
   d67b4:	4620      	mov	r0, r4
   d67b6:	f000 fd5b 	bl	d7270 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d67ba:	2000      	movs	r0, #0
   d67bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67be <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67be:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67c0:	2300      	movs	r3, #0
   d67c2:	6083      	str	r3, [r0, #8]
   d67c4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d67c6:	4604      	mov	r4, r0
   d67c8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d67ca:	b12b      	cbz	r3, d67d8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67cc:	2202      	movs	r2, #2
   d67ce:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67d0:	68eb      	ldr	r3, [r5, #12]
   d67d2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67d4:	68ab      	ldr	r3, [r5, #8]
   d67d6:	60a3      	str	r3, [r4, #8]
	}
    }
   d67d8:	4620      	mov	r0, r4
   d67da:	bd38      	pop	{r3, r4, r5, pc}

000d67dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d67dc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67de:	b570      	push	{r4, r5, r6, lr}
   d67e0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d67e2:	d006      	beq.n	d67f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d67e4:	2a03      	cmp	r2, #3
   d67e6:	d011      	beq.n	d680c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d67e8:	2a01      	cmp	r2, #1
   d67ea:	d118      	bne.n	d681e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67ec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67ee:	6003      	str	r3, [r0, #0]
	      break;
   d67f0:	e015      	b.n	d681e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67f2:	2014      	movs	r0, #20
   d67f4:	680e      	ldr	r6, [r1, #0]
   d67f6:	f7fd fc50 	bl	d409a <_Znwj>
   d67fa:	4605      	mov	r5, r0
   d67fc:	b120      	cbz	r0, d6808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67fe:	4631      	mov	r1, r6
   d6800:	f7ff ffdd 	bl	d67be <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6804:	7c33      	ldrb	r3, [r6, #16]
   d6806:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6808:	6025      	str	r5, [r4, #0]
   d680a:	e008      	b.n	d681e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d680c:	6804      	ldr	r4, [r0, #0]
   d680e:	b134      	cbz	r4, d681e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6810:	4620      	mov	r0, r4
   d6812:	f7ff fd22 	bl	d625a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6816:	2114      	movs	r1, #20
   d6818:	4620      	mov	r0, r4
   d681a:	f000 fd29 	bl	d7270 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d681e:	2000      	movs	r0, #0
   d6820:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6824 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6824:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6826:	2300      	movs	r3, #0
   d6828:	b087      	sub	sp, #28
   d682a:	460c      	mov	r4, r1
   d682c:	f3bf 8f5f 	dmb	sy
   d6830:	e850 6f00 	ldrex	r6, [r0]
   d6834:	e840 3200 	strex	r2, r3, [r0]
   d6838:	2a00      	cmp	r2, #0
   d683a:	d1f9      	bne.n	d6830 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d683c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6840:	2e00      	cmp	r6, #0
   d6842:	d03f      	beq.n	d68c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6844:	4618      	mov	r0, r3
   d6846:	f7ff fa45 	bl	d5cd4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d684a:	4607      	mov	r7, r0
   d684c:	b120      	cbz	r0, d6858 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d684e:	4621      	mov	r1, r4
   d6850:	4630      	mov	r0, r6
   d6852:	f7ff fe53 	bl	d64fc <_ZNKSt8functionIFvRKbEEclES1_>
   d6856:	e02e      	b.n	d68b6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6858:	4631      	mov	r1, r6
   d685a:	a801      	add	r0, sp, #4
   d685c:	f7ff ffaf 	bl	d67be <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6860:	7823      	ldrb	r3, [r4, #0]
   d6862:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6866:	2010      	movs	r0, #16
   d6868:	f7fd fc17 	bl	d409a <_Znwj>
   d686c:	4605      	mov	r5, r0
   d686e:	b1d0      	cbz	r0, d68a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6870:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6872:	2014      	movs	r0, #20
   d6874:	f7fd fc11 	bl	d409a <_Znwj>
   d6878:	4604      	mov	r4, r0
   d687a:	b178      	cbz	r0, d689c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d687c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d687e:	4601      	mov	r1, r0
   d6880:	a801      	add	r0, sp, #4
   d6882:	f7ff fcf9 	bl	d6278 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6886:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6888:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d688a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d688c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d688e:	9203      	str	r2, [sp, #12]
   d6890:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6892:	60e3      	str	r3, [r4, #12]
   d6894:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6898:	9204      	str	r2, [sp, #16]
   d689a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d689c:	4b0a      	ldr	r3, [pc, #40]	; (d68c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d689e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68a0:	4b0a      	ldr	r3, [pc, #40]	; (d68cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68a2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d68a4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68a6:	a801      	add	r0, sp, #4
   d68a8:	f7ff fcd7 	bl	d625a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d68ac:	2200      	movs	r2, #0
   d68ae:	4629      	mov	r1, r5
   d68b0:	4807      	ldr	r0, [pc, #28]	; (d68d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d68b2:	f7ff fa17 	bl	d5ce4 <application_thread_invoke>
   d68b6:	4630      	mov	r0, r6
   d68b8:	f7ff fccf 	bl	d625a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d68bc:	2110      	movs	r1, #16
   d68be:	4630      	mov	r0, r6
   d68c0:	f000 fcd6 	bl	d7270 <_ZdlPvj>
        }
    }
   d68c4:	b007      	add	sp, #28
   d68c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68c8:	000d650f 	.word	0x000d650f
   d68cc:	000d67dd 	.word	0x000d67dd
   d68d0:	000d6ce9 	.word	0x000d6ce9

000d68d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d68d4:	b530      	push	{r4, r5, lr}
   d68d6:	b085      	sub	sp, #20
   d68d8:	4604      	mov	r4, r0
   d68da:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d68dc:	4668      	mov	r0, sp
   d68de:	4611      	mov	r1, r2
   d68e0:	f7ff fdc9 	bl	d6476 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d68e4:	b17c      	cbz	r4, d6906 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d68e6:	b224      	sxth	r4, r4
   d68e8:	4628      	mov	r0, r5
   d68ea:	b10d      	cbz	r5, d68f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d68ec:	f001 fad2 	bl	d7e94 <strdup>
   d68f0:	9002      	str	r0, [sp, #8]
   d68f2:	a902      	add	r1, sp, #8
   d68f4:	4668      	mov	r0, sp
   d68f6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d68fa:	f7ff fe1f 	bl	d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d68fe:	a802      	add	r0, sp, #8
   d6900:	f7ff fd7e 	bl	d6400 <_ZN8particle5ErrorD1Ev>
   d6904:	e01d      	b.n	d6942 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6906:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6908:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d690c:	f04f 0201 	mov.w	r2, #1
   d6910:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6914:	42a3      	cmp	r3, r4
   d6916:	d103      	bne.n	d6920 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6918:	e8c0 2f41 	strexb	r1, r2, [r0]
   d691c:	2900      	cmp	r1, #0
   d691e:	d1f7      	bne.n	d6910 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6920:	d002      	beq.n	d6928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6922:	f88d 3008 	strb.w	r3, [sp, #8]
   d6926:	e00c      	b.n	d6942 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6928:	f110 010c 	adds.w	r1, r0, #12
   d692c:	f04f 0301 	mov.w	r3, #1
   d6930:	bf18      	it	ne
   d6932:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6934:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6938:	3004      	adds	r0, #4
   d693a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d693e:	f7ff ff71 	bl	d6824 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6942:	a801      	add	r0, sp, #4
   d6944:	f7ff fbb9 	bl	d60ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6948:	b005      	add	sp, #20
   d694a:	bd30      	pop	{r4, r5, pc}

000d694c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d694c:	4770      	bx	lr

000d694e <_ZN9IPAddressD0Ev>:
   d694e:	b510      	push	{r4, lr}
   d6950:	2118      	movs	r1, #24
   d6952:	4604      	mov	r4, r0
   d6954:	f000 fc8c 	bl	d7270 <_ZdlPvj>
   d6958:	4620      	mov	r0, r4
   d695a:	bd10      	pop	{r4, pc}

000d695c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d695c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d695e:	7d03      	ldrb	r3, [r0, #20]
   d6960:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6962:	b08d      	sub	sp, #52	; 0x34
   d6964:	460e      	mov	r6, r1
   d6966:	f100 0704 	add.w	r7, r0, #4
   d696a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d696e:	d002      	beq.n	d6976 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6970:	f100 0508 	add.w	r5, r0, #8
   d6974:	e018      	b.n	d69a8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6976:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6978:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d697a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d697e:	232f      	movs	r3, #47	; 0x2f
   d6980:	462a      	mov	r2, r5
   d6982:	200a      	movs	r0, #10
   d6984:	f7ff f8ae 	bl	d5ae4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6988:	4628      	mov	r0, r5
   d698a:	f001 fa9e 	bl	d7eca <strlen>
   d698e:	6833      	ldr	r3, [r6, #0]
   d6990:	4602      	mov	r2, r0
   d6992:	68db      	ldr	r3, [r3, #12]
   d6994:	4629      	mov	r1, r5
   d6996:	4630      	mov	r0, r6
   d6998:	4798      	blx	r3
   d699a:	e00f      	b.n	d69bc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d699c:	b124      	cbz	r4, d69a8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d699e:	212e      	movs	r1, #46	; 0x2e
   d69a0:	4630      	mov	r0, r6
   d69a2:	f7ff fbd1 	bl	d6148 <_ZN5Print5printEc>
   d69a6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d69a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d69ac:	220a      	movs	r2, #10
   d69ae:	4630      	mov	r0, r6
   d69b0:	f7ff fbe3 	bl	d617a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d69b4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d69b6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d69b8:	d1f0      	bne.n	d699c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d69ba:	4620      	mov	r0, r4
    }
    return n;
}
   d69bc:	b00d      	add	sp, #52	; 0x34
   d69be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69c0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d69c0:	b510      	push	{r4, lr}
   d69c2:	4b05      	ldr	r3, [pc, #20]	; (d69d8 <_ZN9IPAddressC1Ev+0x18>)
   d69c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d69c6:	2211      	movs	r2, #17
   d69c8:	f840 3b04 	str.w	r3, [r0], #4
   d69cc:	2100      	movs	r1, #0
   d69ce:	f001 f9e4 	bl	d7d9a <memset>
{
    clear();
}
   d69d2:	4620      	mov	r0, r4
   d69d4:	bd10      	pop	{r4, pc}
   d69d6:	bf00      	nop
   d69d8:	000d8890 	.word	0x000d8890

000d69dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d69dc:	4603      	mov	r3, r0
   d69de:	4a07      	ldr	r2, [pc, #28]	; (d69fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d69e0:	b510      	push	{r4, lr}
   d69e2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d69e6:	f101 0210 	add.w	r2, r1, #16
   d69ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d69ee:	f843 4b04 	str.w	r4, [r3], #4
   d69f2:	4291      	cmp	r1, r2
   d69f4:	d1f9      	bne.n	d69ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d69f6:	780a      	ldrb	r2, [r1, #0]
   d69f8:	701a      	strb	r2, [r3, #0]
}
   d69fa:	bd10      	pop	{r4, pc}
   d69fc:	000d8890 	.word	0x000d8890

000d6a00 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6a00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6a02:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6a06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6a0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6a0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6a12:	2304      	movs	r3, #4
   d6a14:	6041      	str	r1, [r0, #4]
   d6a16:	7503      	strb	r3, [r0, #20]
   d6a18:	bd10      	pop	{r4, pc}

000d6a1a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6a1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6a1c:	780d      	ldrb	r5, [r1, #0]
   d6a1e:	788b      	ldrb	r3, [r1, #2]
   d6a20:	784a      	ldrb	r2, [r1, #1]
   d6a22:	78c9      	ldrb	r1, [r1, #3]
   d6a24:	9100      	str	r1, [sp, #0]
   d6a26:	4629      	mov	r1, r5
   d6a28:	f7ff ffea 	bl	d6a00 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6a2c:	b003      	add	sp, #12
   d6a2e:	bd30      	pop	{r4, r5, pc}

000d6a30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a30:	7441      	strb	r1, [r0, #17]
   d6a32:	4770      	bx	lr

000d6a34 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6a34:	4770      	bx	lr

000d6a36 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6a36:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6a38:	2100      	movs	r1, #0
   d6a3a:	7c00      	ldrb	r0, [r0, #16]
   d6a3c:	f7ff f912 	bl	d5c64 <HAL_USB_USART_Receive_Data>
}
   d6a40:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a44:	bf28      	it	cs
   d6a46:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a4a:	bd08      	pop	{r3, pc}

000d6a4c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6a4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6a4e:	2101      	movs	r1, #1
   d6a50:	7c00      	ldrb	r0, [r0, #16]
   d6a52:	f7ff f907 	bl	d5c64 <HAL_USB_USART_Receive_Data>
}
   d6a56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a5a:	bf28      	it	cs
   d6a5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a60:	bd08      	pop	{r3, pc}

000d6a62 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6a62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6a64:	7c00      	ldrb	r0, [r0, #16]
   d6a66:	f7ff f8f5 	bl	d5c54 <HAL_USB_USART_Available_Data_For_Write>
}
   d6a6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a6e:	bd08      	pop	{r3, pc}

000d6a70 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6a70:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6a72:	7c00      	ldrb	r0, [r0, #16]
   d6a74:	f7ff f8e6 	bl	d5c44 <HAL_USB_USART_Available_Data>
}
   d6a78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a7c:	bd08      	pop	{r3, pc}

000d6a7e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6a7e:	7c00      	ldrb	r0, [r0, #16]
   d6a80:	f7ff b900 	b.w	d5c84 <HAL_USB_USART_Flush_Data>

000d6a84 <_ZN9USBSerialD0Ev>:
   d6a84:	b510      	push	{r4, lr}
   d6a86:	2114      	movs	r1, #20
   d6a88:	4604      	mov	r4, r0
   d6a8a:	f000 fbf1 	bl	d7270 <_ZdlPvj>
   d6a8e:	4620      	mov	r0, r4
   d6a90:	bd10      	pop	{r4, pc}

000d6a92 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a92:	b538      	push	{r3, r4, r5, lr}
   d6a94:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a96:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a98:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a9a:	f7ff f8db 	bl	d5c54 <HAL_USB_USART_Available_Data_For_Write>
   d6a9e:	2800      	cmp	r0, #0
   d6aa0:	dc01      	bgt.n	d6aa6 <_ZN9USBSerial5writeEh+0x14>
   d6aa2:	7c60      	ldrb	r0, [r4, #17]
   d6aa4:	b128      	cbz	r0, d6ab2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6aa6:	4629      	mov	r1, r5
   d6aa8:	7c20      	ldrb	r0, [r4, #16]
   d6aaa:	f7ff f8e3 	bl	d5c74 <HAL_USB_USART_Send_Data>
   d6aae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6ab2:	bd38      	pop	{r3, r4, r5, pc}

000d6ab4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ab4:	b510      	push	{r4, lr}
   d6ab6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ab8:	2300      	movs	r3, #0
   d6aba:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ac0:	60a3      	str	r3, [r4, #8]
   d6ac2:	4b05      	ldr	r3, [pc, #20]	; (d6ad8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6ac4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6ac6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ac8:	4608      	mov	r0, r1
{
  _serial = serial;
   d6aca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6acc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6ace:	4611      	mov	r1, r2
   d6ad0:	f7ff f8a8 	bl	d5c24 <HAL_USB_USART_Init>
}
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	bd10      	pop	{r4, pc}
   d6ad8:	000d88a4 	.word	0x000d88a4

000d6adc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6adc:	2200      	movs	r2, #0
   d6ade:	7c00      	ldrb	r0, [r0, #16]
   d6ae0:	f7ff b8a8 	b.w	d5c34 <HAL_USB_USART_Begin>

000d6ae4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ae4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6ae6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ae8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6aea:	2100      	movs	r1, #0
   d6aec:	f001 f955 	bl	d7d9a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6af0:	4620      	mov	r0, r4
   d6af2:	bd10      	pop	{r4, pc}

000d6af4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6af4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6af6:	4d0e      	ldr	r5, [pc, #56]	; (d6b30 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6af8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6afa:	a801      	add	r0, sp, #4
   d6afc:	f7ff fff2 	bl	d6ae4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b00:	6829      	ldr	r1, [r5, #0]
   d6b02:	f011 0401 	ands.w	r4, r1, #1
   d6b06:	d110      	bne.n	d6b2a <_Z16_fetch_usbserialv+0x36>
   d6b08:	4628      	mov	r0, r5
   d6b0a:	f7fd fad7 	bl	d40bc <__cxa_guard_acquire>
   d6b0e:	b160      	cbz	r0, d6b2a <_Z16_fetch_usbserialv+0x36>
   d6b10:	aa01      	add	r2, sp, #4
   d6b12:	4621      	mov	r1, r4
   d6b14:	4807      	ldr	r0, [pc, #28]	; (d6b34 <_Z16_fetch_usbserialv+0x40>)
   d6b16:	f7ff ffcd 	bl	d6ab4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6b1a:	4628      	mov	r0, r5
   d6b1c:	f7fd fad3 	bl	d40c6 <__cxa_guard_release>
   d6b20:	4a05      	ldr	r2, [pc, #20]	; (d6b38 <_Z16_fetch_usbserialv+0x44>)
   d6b22:	4906      	ldr	r1, [pc, #24]	; (d6b3c <_Z16_fetch_usbserialv+0x48>)
   d6b24:	4803      	ldr	r0, [pc, #12]	; (d6b34 <_Z16_fetch_usbserialv+0x40>)
   d6b26:	f000 fb95 	bl	d7254 <__aeabi_atexit>
	return _usbserial;
}
   d6b2a:	4802      	ldr	r0, [pc, #8]	; (d6b34 <_Z16_fetch_usbserialv+0x40>)
   d6b2c:	b007      	add	sp, #28
   d6b2e:	bd30      	pop	{r4, r5, pc}
   d6b30:	2003e3ec 	.word	0x2003e3ec
   d6b34:	2003e3f0 	.word	0x2003e3f0
   d6b38:	2003e298 	.word	0x2003e298
   d6b3c:	000d6a35 	.word	0x000d6a35

000d6b40 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6b40:	2200      	movs	r2, #0
   d6b42:	4611      	mov	r1, r2
   d6b44:	6840      	ldr	r0, [r0, #4]
   d6b46:	f7ff b901 	b.w	d5d4c <network_ready>

000d6b4a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b4a:	2200      	movs	r2, #0
   d6b4c:	4611      	mov	r1, r2
   d6b4e:	6840      	ldr	r0, [r0, #4]
   d6b50:	f7ff b91c 	b.w	d5d8c <network_listening>

000d6b54 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b54:	2200      	movs	r2, #0
   d6b56:	4611      	mov	r1, r2
   d6b58:	6840      	ldr	r0, [r0, #4]
   d6b5a:	f7ff b927 	b.w	d5dac <network_get_listen_timeout>

000d6b5e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b5e:	2200      	movs	r2, #0
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	f7ff b91b 	b.w	d5d9c <network_set_listen_timeout>

000d6b66 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b66:	2200      	movs	r2, #0
   d6b68:	f081 0101 	eor.w	r1, r1, #1
   d6b6c:	6840      	ldr	r0, [r0, #4]
   d6b6e:	f7ff b905 	b.w	d5d7c <network_listen>

000d6b72 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6b72:	2300      	movs	r3, #0
   d6b74:	461a      	mov	r2, r3
   d6b76:	4619      	mov	r1, r3
   d6b78:	6840      	ldr	r0, [r0, #4]
   d6b7a:	f7ff b8f7 	b.w	d5d6c <network_off>

000d6b7e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6b7e:	2300      	movs	r3, #0
   d6b80:	461a      	mov	r2, r3
   d6b82:	4619      	mov	r1, r3
   d6b84:	6840      	ldr	r0, [r0, #4]
   d6b86:	f7ff b8e9 	b.w	d5d5c <network_on>

000d6b8a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b8a:	2200      	movs	r2, #0
   d6b8c:	4611      	mov	r1, r2
   d6b8e:	6840      	ldr	r0, [r0, #4]
   d6b90:	f7ff b8cc 	b.w	d5d2c <network_connecting>

000d6b94 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b94:	2200      	movs	r2, #0
   d6b96:	2102      	movs	r1, #2
   d6b98:	6840      	ldr	r0, [r0, #4]
   d6b9a:	f7ff b8cf 	b.w	d5d3c <network_disconnect>

000d6b9e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b9e:	2300      	movs	r3, #0
   d6ba0:	461a      	mov	r2, r3
   d6ba2:	6840      	ldr	r0, [r0, #4]
   d6ba4:	f7ff b8ba 	b.w	d5d1c <network_connect>

000d6ba8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6ba8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6baa:	4c08      	ldr	r4, [pc, #32]	; (d6bcc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6bac:	2528      	movs	r5, #40	; 0x28
   d6bae:	462a      	mov	r2, r5
   d6bb0:	2100      	movs	r1, #0
   d6bb2:	4620      	mov	r0, r4
   d6bb4:	f001 f8f1 	bl	d7d9a <memset>
        cid = -1;
   d6bb8:	f04f 33ff 	mov.w	r3, #4294967295
   d6bbc:	6063      	str	r3, [r4, #4]
   d6bbe:	4b04      	ldr	r3, [pc, #16]	; (d6bd0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6bc0:	8025      	strh	r5, [r4, #0]
   d6bc2:	2204      	movs	r2, #4
   d6bc4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6bc6:	4a03      	ldr	r2, [pc, #12]	; (d6bd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6bc8:	601a      	str	r2, [r3, #0]
   d6bca:	bd38      	pop	{r3, r4, r5, pc}
   d6bcc:	2003e40c 	.word	0x2003e40c
   d6bd0:	2003e404 	.word	0x2003e404
   d6bd4:	000d88d4 	.word	0x000d88d4

000d6bd8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6bd8:	4770      	bx	lr

000d6bda <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bda:	7441      	strb	r1, [r0, #17]
   d6bdc:	4770      	bx	lr

000d6bde <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6bde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6be0:	7c00      	ldrb	r0, [r0, #16]
   d6be2:	f7fe ffbf 	bl	d5b64 <HAL_USART_Available_Data_For_Write>
}
   d6be6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bea:	bd08      	pop	{r3, pc}

000d6bec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6bee:	7c00      	ldrb	r0, [r0, #16]
   d6bf0:	f7fe ff90 	bl	d5b14 <HAL_USART_Available_Data>
}
   d6bf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bf8:	bd08      	pop	{r3, pc}

000d6bfa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bfc:	7c00      	ldrb	r0, [r0, #16]
   d6bfe:	f7fe ff99 	bl	d5b34 <HAL_USART_Peek_Data>
}
   d6c02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c06:	bf28      	it	cs
   d6c08:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c0c:	bd08      	pop	{r3, pc}

000d6c0e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6c0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6c10:	7c00      	ldrb	r0, [r0, #16]
   d6c12:	f7fe ff87 	bl	d5b24 <HAL_USART_Read_Data>
}
   d6c16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c1a:	bf28      	it	cs
   d6c1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c20:	bd08      	pop	{r3, pc}

000d6c22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c22:	7c00      	ldrb	r0, [r0, #16]
   d6c24:	f7fe bf8e 	b.w	d5b44 <HAL_USART_Flush_Data>

000d6c28 <_ZN11USARTSerialD0Ev>:
   d6c28:	b510      	push	{r4, lr}
   d6c2a:	2114      	movs	r1, #20
   d6c2c:	4604      	mov	r4, r0
   d6c2e:	f000 fb1f 	bl	d7270 <_ZdlPvj>
   d6c32:	4620      	mov	r0, r4
   d6c34:	bd10      	pop	{r4, pc}

000d6c36 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c36:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c38:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c3e:	b925      	cbnz	r5, d6c4a <_ZN11USARTSerial5writeEh+0x14>
   d6c40:	7c00      	ldrb	r0, [r0, #16]
   d6c42:	f7fe ff8f 	bl	d5b64 <HAL_USART_Available_Data_For_Write>
   d6c46:	2800      	cmp	r0, #0
   d6c48:	dd05      	ble.n	d6c56 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c4a:	4631      	mov	r1, r6
   d6c4c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c52:	f7fe bf57 	b.w	d5b04 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c56:	4628      	mov	r0, r5
   d6c58:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c5c:	b510      	push	{r4, lr}
   d6c5e:	4604      	mov	r4, r0
   d6c60:	4608      	mov	r0, r1
   d6c62:	4611      	mov	r1, r2
   d6c64:	2200      	movs	r2, #0
   d6c66:	6062      	str	r2, [r4, #4]
   d6c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c6c:	60a2      	str	r2, [r4, #8]
   d6c6e:	4a05      	ldr	r2, [pc, #20]	; (d6c84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c70:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c72:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c74:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c76:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c78:	461a      	mov	r2, r3
   d6c7a:	f7fe ff3b 	bl	d5af4 <HAL_USART_Init>
}
   d6c7e:	4620      	mov	r0, r4
   d6c80:	bd10      	pop	{r4, pc}
   d6c82:	bf00      	nop
   d6c84:	000d8908 	.word	0x000d8908

000d6c88 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6c88:	2300      	movs	r3, #0
   d6c8a:	7c00      	ldrb	r0, [r0, #16]
   d6c8c:	f7fe bf72 	b.w	d5b74 <HAL_USART_BeginConfig>

000d6c90 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6c90:	2200      	movs	r2, #0
   d6c92:	f7ff bff9 	b.w	d6c88 <_ZN11USARTSerial5beginEmm>

000d6c96 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c96:	7c00      	ldrb	r0, [r0, #16]
   d6c98:	f7fe bf5c 	b.w	d5b54 <HAL_USART_Is_Enabled>

000d6c9c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c9c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c9e:	4d0c      	ldr	r5, [pc, #48]	; (d6cd0 <_Z22__fetch_global_Serial1v+0x34>)
   d6ca0:	6829      	ldr	r1, [r5, #0]
   d6ca2:	f011 0401 	ands.w	r4, r1, #1
   d6ca6:	d111      	bne.n	d6ccc <_Z22__fetch_global_Serial1v+0x30>
   d6ca8:	4628      	mov	r0, r5
   d6caa:	f7fd fa07 	bl	d40bc <__cxa_guard_acquire>
   d6cae:	b168      	cbz	r0, d6ccc <_Z22__fetch_global_Serial1v+0x30>
   d6cb0:	4a08      	ldr	r2, [pc, #32]	; (d6cd4 <_Z22__fetch_global_Serial1v+0x38>)
   d6cb2:	4b09      	ldr	r3, [pc, #36]	; (d6cd8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6cb4:	4809      	ldr	r0, [pc, #36]	; (d6cdc <_Z22__fetch_global_Serial1v+0x40>)
   d6cb6:	4621      	mov	r1, r4
   d6cb8:	f7ff ffd0 	bl	d6c5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6cbc:	4628      	mov	r0, r5
   d6cbe:	f7fd fa02 	bl	d40c6 <__cxa_guard_release>
   d6cc2:	4a07      	ldr	r2, [pc, #28]	; (d6ce0 <_Z22__fetch_global_Serial1v+0x44>)
   d6cc4:	4907      	ldr	r1, [pc, #28]	; (d6ce4 <_Z22__fetch_global_Serial1v+0x48>)
   d6cc6:	4805      	ldr	r0, [pc, #20]	; (d6cdc <_Z22__fetch_global_Serial1v+0x40>)
   d6cc8:	f000 fac4 	bl	d7254 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6ccc:	4803      	ldr	r0, [pc, #12]	; (d6cdc <_Z22__fetch_global_Serial1v+0x40>)
   d6cce:	bd38      	pop	{r3, r4, r5, pc}
   d6cd0:	2003e4cc 	.word	0x2003e4cc
   d6cd4:	2003e4d0 	.word	0x2003e4d0
   d6cd8:	2003e448 	.word	0x2003e448
   d6cdc:	2003e434 	.word	0x2003e434
   d6ce0:	2003e298 	.word	0x2003e298
   d6ce4:	000d6bd9 	.word	0x000d6bd9

000d6ce8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6ce8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cea:	6883      	ldr	r3, [r0, #8]
   d6cec:	4604      	mov	r4, r0
   d6cee:	b90b      	cbnz	r3, d6cf4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6cf0:	f000 fad1 	bl	d7296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cf4:	68c3      	ldr	r3, [r0, #12]
   d6cf6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6cf8:	68a3      	ldr	r3, [r4, #8]
   d6cfa:	b11b      	cbz	r3, d6d04 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cfc:	2203      	movs	r2, #3
   d6cfe:	4621      	mov	r1, r4
   d6d00:	4620      	mov	r0, r4
   d6d02:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6d04:	4620      	mov	r0, r4
   d6d06:	2110      	movs	r1, #16
}
   d6d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6d0c:	f000 bab0 	b.w	d7270 <_ZdlPvj>

000d6d10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6d10:	4770      	bx	lr

000d6d12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d14:	4606      	mov	r6, r0
   d6d16:	4615      	mov	r5, r2
   d6d18:	460c      	mov	r4, r1
   d6d1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d1c:	42bc      	cmp	r4, r7
   d6d1e:	d006      	beq.n	d6d2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d20:	6833      	ldr	r3, [r6, #0]
   d6d22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d26:	689b      	ldr	r3, [r3, #8]
   d6d28:	4630      	mov	r0, r6
   d6d2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d2c:	e7f6      	b.n	d6d1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d2e:	4628      	mov	r0, r5
   d6d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d32:	2200      	movs	r2, #0
   d6d34:	7c00      	ldrb	r0, [r0, #16]
   d6d36:	f7fe bf3d 	b.w	d5bb4 <HAL_I2C_Write_Data>

000d6d3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d3a:	2100      	movs	r1, #0
   d6d3c:	7c00      	ldrb	r0, [r0, #16]
   d6d3e:	f7fe bf41 	b.w	d5bc4 <HAL_I2C_Available_Data>

000d6d42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d42:	2100      	movs	r1, #0
   d6d44:	7c00      	ldrb	r0, [r0, #16]
   d6d46:	f7fe bf45 	b.w	d5bd4 <HAL_I2C_Read_Data>

000d6d4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d4a:	2100      	movs	r1, #0
   d6d4c:	7c00      	ldrb	r0, [r0, #16]
   d6d4e:	f7fe bf49 	b.w	d5be4 <HAL_I2C_Peek_Data>

000d6d52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d52:	2100      	movs	r1, #0
   d6d54:	7c00      	ldrb	r0, [r0, #16]
   d6d56:	f7fe bf4d 	b.w	d5bf4 <HAL_I2C_Flush_Data>

000d6d5a <_ZN7TwoWireD0Ev>:
   d6d5a:	b510      	push	{r4, lr}
   d6d5c:	2114      	movs	r1, #20
   d6d5e:	4604      	mov	r4, r0
   d6d60:	f000 fa86 	bl	d7270 <_ZdlPvj>
   d6d64:	4620      	mov	r0, r4
   d6d66:	bd10      	pop	{r4, pc}

000d6d68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d68:	b510      	push	{r4, lr}
   d6d6a:	4604      	mov	r4, r0
   d6d6c:	2300      	movs	r3, #0
   d6d6e:	6063      	str	r3, [r4, #4]
   d6d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d74:	60a3      	str	r3, [r4, #8]
   d6d76:	4b04      	ldr	r3, [pc, #16]	; (d6d88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6d78:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6d7a:	4608      	mov	r0, r1
   d6d7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6d7e:	4611      	mov	r1, r2
   d6d80:	f7fe ff48 	bl	d5c14 <HAL_I2C_Init>
}
   d6d84:	4620      	mov	r0, r4
   d6d86:	bd10      	pop	{r4, pc}
   d6d88:	000d8938 	.word	0x000d8938

000d6d8c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6d8c:	2300      	movs	r3, #0
   d6d8e:	461a      	mov	r2, r3
   d6d90:	4619      	mov	r1, r3
   d6d92:	7c00      	ldrb	r0, [r0, #16]
   d6d94:	f7fe bef6 	b.w	d5b84 <HAL_I2C_Begin>

000d6d98 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6d98:	2200      	movs	r2, #0
   d6d9a:	7c00      	ldrb	r0, [r0, #16]
   d6d9c:	f7fe befa 	b.w	d5b94 <HAL_I2C_Begin_Transmission>

000d6da0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6da0:	b2c9      	uxtb	r1, r1
   d6da2:	f7ff bff9 	b.w	d6d98 <_ZN7TwoWire17beginTransmissionEh>

000d6da6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6da6:	2200      	movs	r2, #0
   d6da8:	7c00      	ldrb	r0, [r0, #16]
   d6daa:	f7fe befb 	b.w	d5ba4 <HAL_I2C_End_Transmission>

000d6dae <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6dae:	2101      	movs	r1, #1
   d6db0:	f7ff bff9 	b.w	d6da6 <_ZN7TwoWire15endTransmissionEh>

000d6db4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6db4:	2100      	movs	r1, #0
   d6db6:	7c00      	ldrb	r0, [r0, #16]
   d6db8:	f7fe bf24 	b.w	d5c04 <HAL_I2C_Is_Enabled>

000d6dbc <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6dbc:	b510      	push	{r4, lr}
  if (0 == max) {
   d6dbe:	4604      	mov	r4, r0
   d6dc0:	b130      	cbz	r0, d6dd0 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6dc2:	f001 f81b 	bl	d7dfc <rand>
   d6dc6:	fb90 f3f4 	sdiv	r3, r0, r4
   d6dca:	fb03 0014 	mls	r0, r3, r4, r0
   d6dce:	bd10      	pop	{r4, pc}
}
   d6dd0:	bd10      	pop	{r4, pc}

000d6dd2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6dd2:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d6dd4:	b510      	push	{r4, lr}
   d6dd6:	4604      	mov	r4, r0
  if (min >= max) {
   d6dd8:	da04      	bge.n	d6de4 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d6dda:	1a08      	subs	r0, r1, r0
   d6ddc:	f7ff ffee 	bl	d6dbc <_Z6randomi>
   d6de0:	4420      	add	r0, r4
   d6de2:	bd10      	pop	{r4, pc}
}
   d6de4:	bd10      	pop	{r4, pc}

000d6de6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6de6:	2200      	movs	r2, #0
   d6de8:	4611      	mov	r1, r2
   d6dea:	6840      	ldr	r0, [r0, #4]
   d6dec:	f7fe bfce 	b.w	d5d8c <network_listening>

000d6df0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6df0:	2200      	movs	r2, #0
   d6df2:	4611      	mov	r1, r2
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	f7fe bfd9 	b.w	d5dac <network_get_listen_timeout>

000d6dfa <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6dfa:	2200      	movs	r2, #0
   d6dfc:	6840      	ldr	r0, [r0, #4]
   d6dfe:	f7fe bfcd 	b.w	d5d9c <network_set_listen_timeout>

000d6e02 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e02:	2200      	movs	r2, #0
   d6e04:	f081 0101 	eor.w	r1, r1, #1
   d6e08:	6840      	ldr	r0, [r0, #4]
   d6e0a:	f7fe bfb7 	b.w	d5d7c <network_listen>

000d6e0e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6e0e:	2300      	movs	r3, #0
   d6e10:	461a      	mov	r2, r3
   d6e12:	2101      	movs	r1, #1
   d6e14:	6840      	ldr	r0, [r0, #4]
   d6e16:	f7fe bfa9 	b.w	d5d6c <network_off>

000d6e1a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e1a:	2300      	movs	r3, #0
   d6e1c:	461a      	mov	r2, r3
   d6e1e:	4619      	mov	r1, r3
   d6e20:	6840      	ldr	r0, [r0, #4]
   d6e22:	f7fe bf9b 	b.w	d5d5c <network_on>

000d6e26 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e26:	2200      	movs	r2, #0
   d6e28:	4611      	mov	r1, r2
   d6e2a:	6840      	ldr	r0, [r0, #4]
   d6e2c:	f7fe bf8e 	b.w	d5d4c <network_ready>

000d6e30 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e30:	2200      	movs	r2, #0
   d6e32:	4611      	mov	r1, r2
   d6e34:	6840      	ldr	r0, [r0, #4]
   d6e36:	f7fe bf79 	b.w	d5d2c <network_connecting>

000d6e3a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e3a:	2200      	movs	r2, #0
   d6e3c:	2102      	movs	r1, #2
   d6e3e:	6840      	ldr	r0, [r0, #4]
   d6e40:	f7fe bf7c 	b.w	d5d3c <network_disconnect>

000d6e44 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e44:	2300      	movs	r3, #0
   d6e46:	461a      	mov	r2, r3
   d6e48:	6840      	ldr	r0, [r0, #4]
   d6e4a:	f7fe bf67 	b.w	d5d1c <network_connect>

000d6e4e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6e4e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e50:	4605      	mov	r5, r0
   d6e52:	b188      	cbz	r0, d6e78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6e54:	6804      	ldr	r4, [r0, #0]
   d6e56:	b14c      	cbz	r4, d6e6c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6e58:	68a3      	ldr	r3, [r4, #8]
   d6e5a:	b11b      	cbz	r3, d6e64 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e5c:	2203      	movs	r2, #3
   d6e5e:	4621      	mov	r1, r4
   d6e60:	4620      	mov	r0, r4
   d6e62:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e64:	2110      	movs	r1, #16
   d6e66:	4620      	mov	r0, r4
   d6e68:	f000 fa02 	bl	d7270 <_ZdlPvj>
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	2114      	movs	r1, #20
      }
   d6e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e74:	f000 b9fc 	b.w	d7270 <_ZdlPvj>
   d6e78:	bd38      	pop	{r3, r4, r5, pc}

000d6e7a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6e7a:	b110      	cbz	r0, d6e82 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6e7c:	6803      	ldr	r3, [r0, #0]
   d6e7e:	685b      	ldr	r3, [r3, #4]
   d6e80:	4718      	bx	r3
   d6e82:	4770      	bx	lr

000d6e84 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6e84:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6e86:	6803      	ldr	r3, [r0, #0]
   d6e88:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6e8a:	b1bb      	cbz	r3, d6ebc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6e8c:	6858      	ldr	r0, [r3, #4]
   d6e8e:	f7fe fe01 	bl	d5a94 <os_thread_is_current>
   d6e92:	b978      	cbnz	r0, d6eb4 <_ZN6ThreadD1Ev+0x30>
   d6e94:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6e96:	7c5a      	ldrb	r2, [r3, #17]
   d6e98:	b912      	cbnz	r2, d6ea0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6e9a:	6858      	ldr	r0, [r3, #4]
   d6e9c:	f7fe fe02 	bl	d5aa4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ea0:	6823      	ldr	r3, [r4, #0]
   d6ea2:	6858      	ldr	r0, [r3, #4]
   d6ea4:	f7fe fe06 	bl	d5ab4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ea8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6eaa:	2300      	movs	r3, #0
   d6eac:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6eae:	b128      	cbz	r0, d6ebc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6eb0:	f7ff ffcd 	bl	d6e4e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6eb4:	6820      	ldr	r0, [r4, #0]
   d6eb6:	b108      	cbz	r0, d6ebc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6eb8:	f7ff ffc9 	bl	d6e4e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	bd10      	pop	{r4, pc}

000d6ec0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6ec0:	b538      	push	{r3, r4, r5, lr}
   d6ec2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ec4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6ec8:	b108      	cbz	r0, d6ece <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6eca:	f7fd f8ea 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6ece:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6ed2:	b108      	cbz	r0, d6ed8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6ed4:	f7fe fdfe 	bl	d5ad4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ed8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6edc:	b135      	cbz	r5, d6eec <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ede:	4628      	mov	r0, r5
   d6ee0:	f7ff ffd0 	bl	d6e84 <_ZN6ThreadD1Ev>
   d6ee4:	2104      	movs	r1, #4
   d6ee6:	4628      	mov	r0, r5
   d6ee8:	f000 f9c2 	bl	d7270 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6eec:	6820      	ldr	r0, [r4, #0]
   d6eee:	b108      	cbz	r0, d6ef4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6ef0:	f7ff ffc3 	bl	d6e7a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	bd38      	pop	{r3, r4, r5, pc}

000d6ef8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6ef8:	b510      	push	{r4, lr}
   d6efa:	4b04      	ldr	r3, [pc, #16]	; (d6f0c <_ZN5spark9MeshClassD1Ev+0x14>)
   d6efc:	4604      	mov	r4, r0
   d6efe:	f840 3b08 	str.w	r3, [r0], #8
   d6f02:	f7ff ffdd 	bl	d6ec0 <_ZN5spark11MeshPublishD1Ev>
   d6f06:	4620      	mov	r0, r4
   d6f08:	bd10      	pop	{r4, pc}
   d6f0a:	bf00      	nop
   d6f0c:	000d8960 	.word	0x000d8960

000d6f10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6f10:	b538      	push	{r3, r4, r5, lr}
   d6f12:	4c0e      	ldr	r4, [pc, #56]	; (d6f4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6f14:	4b0e      	ldr	r3, [pc, #56]	; (d6f50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6f16:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f18:	2500      	movs	r5, #0
   d6f1a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f1c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f20:	6063      	str	r3, [r4, #4]
   d6f22:	60a5      	str	r5, [r4, #8]
   d6f24:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f28:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f2c:	f7fe fdca 	bl	d5ac4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f30:	4b08      	ldr	r3, [pc, #32]	; (d6f54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6f32:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f36:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6f3a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	4a06      	ldr	r2, [pc, #24]	; (d6f58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f40:	4906      	ldr	r1, [pc, #24]	; (d6f5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f46:	f000 b985 	b.w	d7254 <__aeabi_atexit>
   d6f4a:	bf00      	nop
   d6f4c:	2003e554 	.word	0x2003e554
   d6f50:	000d8994 	.word	0x000d8994
   d6f54:	000d8960 	.word	0x000d8960
   d6f58:	2003e298 	.word	0x2003e298
   d6f5c:	000d6ef9 	.word	0x000d6ef9

000d6f60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6f60:	2300      	movs	r3, #0
   d6f62:	461a      	mov	r2, r3
   d6f64:	6840      	ldr	r0, [r0, #4]
   d6f66:	f7fe bed9 	b.w	d5d1c <network_connect>

000d6f6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6f6a:	2200      	movs	r2, #0
   d6f6c:	2102      	movs	r1, #2
   d6f6e:	6840      	ldr	r0, [r0, #4]
   d6f70:	f7fe bee4 	b.w	d5d3c <network_disconnect>

000d6f74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6f74:	2200      	movs	r2, #0
   d6f76:	4611      	mov	r1, r2
   d6f78:	6840      	ldr	r0, [r0, #4]
   d6f7a:	f7fe bed7 	b.w	d5d2c <network_connecting>

000d6f7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6f7e:	2200      	movs	r2, #0
   d6f80:	4611      	mov	r1, r2
   d6f82:	6840      	ldr	r0, [r0, #4]
   d6f84:	f7fe bee2 	b.w	d5d4c <network_ready>

000d6f88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6f88:	2300      	movs	r3, #0
   d6f8a:	461a      	mov	r2, r3
   d6f8c:	4619      	mov	r1, r3
   d6f8e:	6840      	ldr	r0, [r0, #4]
   d6f90:	f7fe bee4 	b.w	d5d5c <network_on>

000d6f94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6f94:	2300      	movs	r3, #0
   d6f96:	461a      	mov	r2, r3
   d6f98:	4619      	mov	r1, r3
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	f7fe bee6 	b.w	d5d6c <network_off>

000d6fa0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6fa0:	2200      	movs	r2, #0
   d6fa2:	f081 0101 	eor.w	r1, r1, #1
   d6fa6:	6840      	ldr	r0, [r0, #4]
   d6fa8:	f7fe bee8 	b.w	d5d7c <network_listen>

000d6fac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6fac:	2200      	movs	r2, #0
   d6fae:	6840      	ldr	r0, [r0, #4]
   d6fb0:	f7fe bef4 	b.w	d5d9c <network_set_listen_timeout>

000d6fb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6fb4:	2200      	movs	r2, #0
   d6fb6:	4611      	mov	r1, r2
   d6fb8:	6840      	ldr	r0, [r0, #4]
   d6fba:	f7fe bef7 	b.w	d5dac <network_get_listen_timeout>

000d6fbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6fbe:	2200      	movs	r2, #0
   d6fc0:	4611      	mov	r1, r2
   d6fc2:	6840      	ldr	r0, [r0, #4]
   d6fc4:	f7fe bee2 	b.w	d5d8c <network_listening>

000d6fc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6fcc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6fce:	b095      	sub	sp, #84	; 0x54
   d6fd0:	4616      	mov	r6, r2
   d6fd2:	460d      	mov	r5, r1
   d6fd4:	4607      	mov	r7, r0
    IPAddress addr;
   d6fd6:	f7ff fcf3 	bl	d69c0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6fda:	4621      	mov	r1, r4
   d6fdc:	2220      	movs	r2, #32
   d6fde:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6fe0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6fe2:	f000 feda 	bl	d7d9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6fe6:	2340      	movs	r3, #64	; 0x40
   d6fe8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6fea:	4621      	mov	r1, r4
   d6fec:	466b      	mov	r3, sp
   d6fee:	aa0c      	add	r2, sp, #48	; 0x30
   d6ff0:	4630      	mov	r0, r6
   d6ff2:	f7fe fcb7 	bl	d5964 <netdb_getaddrinfo>
    if (!r) {
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	2800      	cmp	r0, #0
   d6ffa:	d144      	bne.n	d7086 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ffc:	4602      	mov	r2, r0
   d6ffe:	2101      	movs	r1, #1
   d7000:	6868      	ldr	r0, [r5, #4]
   d7002:	f7fe fea3 	bl	d5d4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7006:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7008:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d700a:	4622      	mov	r2, r4
   d700c:	6868      	ldr	r0, [r5, #4]
   d700e:	f7fe fe9d 	bl	d5d4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7012:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7014:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7016:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7018:	2e00      	cmp	r6, #0
   d701a:	d034      	beq.n	d7086 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d701c:	2900      	cmp	r1, #0
   d701e:	d132      	bne.n	d7086 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7020:	6873      	ldr	r3, [r6, #4]
   d7022:	2b02      	cmp	r3, #2
   d7024:	d002      	beq.n	d702c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7026:	2b0a      	cmp	r3, #10
   d7028:	d009      	beq.n	d703e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d702a:	e02a      	b.n	d7082 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d702c:	f1b8 0f00 	cmp.w	r8, #0
   d7030:	d027      	beq.n	d7082 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7032:	6971      	ldr	r1, [r6, #20]
   d7034:	4638      	mov	r0, r7
   d7036:	3104      	adds	r1, #4
   d7038:	f7ff fcef 	bl	d6a1a <_ZN9IPAddressaSEPKh>
   d703c:	e020      	b.n	d7080 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d703e:	f1b9 0f00 	cmp.w	r9, #0
   d7042:	d01e      	beq.n	d7082 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7044:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7046:	2211      	movs	r2, #17
   d7048:	a801      	add	r0, sp, #4
   d704a:	f000 fea6 	bl	d7d9a <memset>
                    a.v = 6;
   d704e:	2306      	movs	r3, #6
   d7050:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7054:	ad01      	add	r5, sp, #4
   d7056:	f104 0308 	add.w	r3, r4, #8
   d705a:	3418      	adds	r4, #24
   d705c:	6818      	ldr	r0, [r3, #0]
   d705e:	6859      	ldr	r1, [r3, #4]
   d7060:	462a      	mov	r2, r5
   d7062:	c203      	stmia	r2!, {r0, r1}
   d7064:	3308      	adds	r3, #8
   d7066:	42a3      	cmp	r3, r4
   d7068:	4615      	mov	r5, r2
   d706a:	d1f7      	bne.n	d705c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d706c:	a901      	add	r1, sp, #4
   d706e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7070:	ad07      	add	r5, sp, #28
   d7072:	f7ff fcb3 	bl	d69dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7078:	1d3c      	adds	r4, r7, #4
   d707a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d707c:	682b      	ldr	r3, [r5, #0]
   d707e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7080:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7082:	69f6      	ldr	r6, [r6, #28]
   d7084:	e7c8      	b.n	d7018 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7086:	9800      	ldr	r0, [sp, #0]
   d7088:	f7fe fc64 	bl	d5954 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d708c:	4638      	mov	r0, r7
   d708e:	b015      	add	sp, #84	; 0x54
   d7090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7094 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7094:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7096:	4a03      	ldr	r2, [pc, #12]	; (d70a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7098:	601a      	str	r2, [r3, #0]
   d709a:	2200      	movs	r2, #0
   d709c:	605a      	str	r2, [r3, #4]
   d709e:	4770      	bx	lr
   d70a0:	2003e728 	.word	0x2003e728
   d70a4:	000d8994 	.word	0x000d8994

000d70a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d70a8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d70aa:	4e18      	ldr	r6, [pc, #96]	; (d710c <pinAvailable+0x64>)
   d70ac:	6831      	ldr	r1, [r6, #0]
   d70ae:	f011 0501 	ands.w	r5, r1, #1
   d70b2:	4604      	mov	r4, r0
   d70b4:	d10a      	bne.n	d70cc <pinAvailable+0x24>
   d70b6:	4630      	mov	r0, r6
   d70b8:	f7fd f800 	bl	d40bc <__cxa_guard_acquire>
   d70bc:	b130      	cbz	r0, d70cc <pinAvailable+0x24>
   d70be:	4629      	mov	r1, r5
   d70c0:	4813      	ldr	r0, [pc, #76]	; (d7110 <pinAvailable+0x68>)
   d70c2:	f7fe feff 	bl	d5ec4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d70c6:	4630      	mov	r0, r6
   d70c8:	f7fc fffd 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d70cc:	4810      	ldr	r0, [pc, #64]	; (d7110 <pinAvailable+0x68>)
   d70ce:	f7fe ffa9 	bl	d6024 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d70d2:	b128      	cbz	r0, d70e0 <pinAvailable+0x38>
   d70d4:	f1a4 030b 	sub.w	r3, r4, #11
   d70d8:	2b02      	cmp	r3, #2
   d70da:	d801      	bhi.n	d70e0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d70dc:	2000      	movs	r0, #0
   d70de:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d70e0:	f000 f892 	bl	d7208 <_Z19__fetch_global_Wirev>
   d70e4:	f7ff fe66 	bl	d6db4 <_ZN7TwoWire9isEnabledEv>
   d70e8:	b108      	cbz	r0, d70ee <pinAvailable+0x46>
   d70ea:	2c01      	cmp	r4, #1
   d70ec:	d9f6      	bls.n	d70dc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d70ee:	f7ff fdd5 	bl	d6c9c <_Z22__fetch_global_Serial1v>
   d70f2:	f7ff fdd0 	bl	d6c96 <_ZN11USARTSerial9isEnabledEv>
   d70f6:	b118      	cbz	r0, d7100 <pinAvailable+0x58>
   d70f8:	f1a4 0309 	sub.w	r3, r4, #9
   d70fc:	2b01      	cmp	r3, #1
   d70fe:	d9ed      	bls.n	d70dc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7100:	2c23      	cmp	r4, #35	; 0x23
   d7102:	bf8c      	ite	hi
   d7104:	2000      	movhi	r0, #0
   d7106:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7108:	bd70      	pop	{r4, r5, r6, pc}
   d710a:	bf00      	nop
   d710c:	2003e3a8 	.word	0x2003e3a8
   d7110:	2003e3ac 	.word	0x2003e3ac

000d7114 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7114:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7116:	b538      	push	{r3, r4, r5, lr}
   d7118:	4604      	mov	r4, r0
   d711a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d711c:	d80a      	bhi.n	d7134 <pinMode+0x20>
   d711e:	29ff      	cmp	r1, #255	; 0xff
   d7120:	d008      	beq.n	d7134 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7122:	f7ff ffc1 	bl	d70a8 <pinAvailable>
   d7126:	b128      	cbz	r0, d7134 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7128:	4629      	mov	r1, r5
   d712a:	4620      	mov	r0, r4
}
   d712c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7130:	f7fe bc28 	b.w	d5984 <HAL_Pin_Mode>
   d7134:	bd38      	pop	{r3, r4, r5, pc}

000d7136 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7136:	b538      	push	{r3, r4, r5, lr}
   d7138:	4604      	mov	r4, r0
   d713a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d713c:	f7fe fc2a 	bl	d5994 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7140:	28ff      	cmp	r0, #255	; 0xff
   d7142:	d010      	beq.n	d7166 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7144:	2806      	cmp	r0, #6
   d7146:	d804      	bhi.n	d7152 <digitalWrite+0x1c>
   d7148:	234d      	movs	r3, #77	; 0x4d
   d714a:	fa23 f000 	lsr.w	r0, r3, r0
   d714e:	07c3      	lsls	r3, r0, #31
   d7150:	d409      	bmi.n	d7166 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7152:	4620      	mov	r0, r4
   d7154:	f7ff ffa8 	bl	d70a8 <pinAvailable>
   d7158:	b128      	cbz	r0, d7166 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d715a:	4629      	mov	r1, r5
   d715c:	4620      	mov	r0, r4
}
   d715e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7162:	f7fe bc1f 	b.w	d59a4 <HAL_GPIO_Write>
   d7166:	bd38      	pop	{r3, r4, r5, pc}

000d7168 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7168:	b510      	push	{r4, lr}
   d716a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d716c:	f7fe fc12 	bl	d5994 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7170:	3804      	subs	r0, #4
   d7172:	b2c0      	uxtb	r0, r0
   d7174:	2801      	cmp	r0, #1
   d7176:	d908      	bls.n	d718a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7178:	4620      	mov	r0, r4
   d717a:	f7ff ff95 	bl	d70a8 <pinAvailable>
   d717e:	b120      	cbz	r0, d718a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7180:	4620      	mov	r0, r4
}
   d7182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7186:	f7fe bc15 	b.w	d59b4 <HAL_GPIO_Read>
}
   d718a:	2000      	movs	r0, #0
   d718c:	bd10      	pop	{r4, pc}

000d718e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7192:	4690      	mov	r8, r2
   d7194:	461e      	mov	r6, r3
   d7196:	2407      	movs	r4, #7
   d7198:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d719a:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d719c:	f1b8 0f00 	cmp.w	r8, #0
   d71a0:	d104      	bne.n	d71ac <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d71a2:	f1c4 0107 	rsb	r1, r4, #7
   d71a6:	fa46 f101 	asr.w	r1, r6, r1
   d71aa:	e001      	b.n	d71b0 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d71ac:	fa46 f104 	asr.w	r1, r6, r4
   d71b0:	f001 0101 	and.w	r1, r1, #1
   d71b4:	4638      	mov	r0, r7
   d71b6:	f7ff ffbe 	bl	d7136 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d71ba:	2101      	movs	r1, #1
   d71bc:	4628      	mov	r0, r5
   d71be:	f7ff ffba 	bl	d7136 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d71c2:	2100      	movs	r1, #0
   d71c4:	4628      	mov	r0, r5
   d71c6:	f7ff ffb6 	bl	d7136 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d71ca:	f114 34ff 	adds.w	r4, r4, #4294967295
   d71ce:	d2e5      	bcs.n	d719c <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d71d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d71d4 <_Z17acquireWireBufferv>:
   d71d4:	b570      	push	{r4, r5, r6, lr}
   d71d6:	4604      	mov	r4, r0
   d71d8:	2514      	movs	r5, #20
   d71da:	462a      	mov	r2, r5
   d71dc:	4e09      	ldr	r6, [pc, #36]	; (d7204 <_Z17acquireWireBufferv+0x30>)
   d71de:	2100      	movs	r1, #0
   d71e0:	f000 fddb 	bl	d7d9a <memset>
   d71e4:	8025      	strh	r5, [r4, #0]
   d71e6:	2520      	movs	r5, #32
   d71e8:	4631      	mov	r1, r6
   d71ea:	60a5      	str	r5, [r4, #8]
   d71ec:	6125      	str	r5, [r4, #16]
   d71ee:	4628      	mov	r0, r5
   d71f0:	f000 f840 	bl	d7274 <_ZnajRKSt9nothrow_t>
   d71f4:	4631      	mov	r1, r6
   d71f6:	6060      	str	r0, [r4, #4]
   d71f8:	4628      	mov	r0, r5
   d71fa:	f000 f83b 	bl	d7274 <_ZnajRKSt9nothrow_t>
   d71fe:	60e0      	str	r0, [r4, #12]
   d7200:	4620      	mov	r0, r4
   d7202:	bd70      	pop	{r4, r5, r6, pc}
   d7204:	000d89c0 	.word	0x000d89c0

000d7208 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7208:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d720a:	4d0e      	ldr	r5, [pc, #56]	; (d7244 <_Z19__fetch_global_Wirev+0x3c>)
   d720c:	6829      	ldr	r1, [r5, #0]
   d720e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7212:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7214:	d113      	bne.n	d723e <_Z19__fetch_global_Wirev+0x36>
   d7216:	4628      	mov	r0, r5
   d7218:	f7fc ff50 	bl	d40bc <__cxa_guard_acquire>
   d721c:	b178      	cbz	r0, d723e <_Z19__fetch_global_Wirev+0x36>
   d721e:	a801      	add	r0, sp, #4
   d7220:	f7ff ffd8 	bl	d71d4 <_Z17acquireWireBufferv>
   d7224:	aa01      	add	r2, sp, #4
   d7226:	4621      	mov	r1, r4
   d7228:	4807      	ldr	r0, [pc, #28]	; (d7248 <_Z19__fetch_global_Wirev+0x40>)
   d722a:	f7ff fd9d 	bl	d6d68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d722e:	4628      	mov	r0, r5
   d7230:	f7fc ff49 	bl	d40c6 <__cxa_guard_release>
   d7234:	4a05      	ldr	r2, [pc, #20]	; (d724c <_Z19__fetch_global_Wirev+0x44>)
   d7236:	4906      	ldr	r1, [pc, #24]	; (d7250 <_Z19__fetch_global_Wirev+0x48>)
   d7238:	4803      	ldr	r0, [pc, #12]	; (d7248 <_Z19__fetch_global_Wirev+0x40>)
   d723a:	f000 f80b 	bl	d7254 <__aeabi_atexit>
	return wire;
}
   d723e:	4802      	ldr	r0, [pc, #8]	; (d7248 <_Z19__fetch_global_Wirev+0x40>)
   d7240:	b007      	add	sp, #28
   d7242:	bd30      	pop	{r4, r5, pc}
   d7244:	2003e734 	.word	0x2003e734
   d7248:	2003e738 	.word	0x2003e738
   d724c:	2003e298 	.word	0x2003e298
   d7250:	000d6d11 	.word	0x000d6d11

000d7254 <__aeabi_atexit>:
   d7254:	460b      	mov	r3, r1
   d7256:	4601      	mov	r1, r0
   d7258:	4618      	mov	r0, r3
   d725a:	f000 bd85 	b.w	d7d68 <__cxa_atexit>
	...

000d7260 <_ZSt15get_new_handlerv>:
   d7260:	4b02      	ldr	r3, [pc, #8]	; (d726c <_ZSt15get_new_handlerv+0xc>)
   d7262:	6818      	ldr	r0, [r3, #0]
   d7264:	f3bf 8f5f 	dmb	sy
   d7268:	4770      	bx	lr
   d726a:	bf00      	nop
   d726c:	2003e74c 	.word	0x2003e74c

000d7270 <_ZdlPvj>:
   d7270:	f7fc bf15 	b.w	d409e <_ZdlPv>

000d7274 <_ZnajRKSt9nothrow_t>:
   d7274:	f000 b800 	b.w	d7278 <_ZnwjRKSt9nothrow_t>

000d7278 <_ZnwjRKSt9nothrow_t>:
   d7278:	b510      	push	{r4, lr}
   d727a:	2800      	cmp	r0, #0
   d727c:	bf14      	ite	ne
   d727e:	4604      	movne	r4, r0
   d7280:	2401      	moveq	r4, #1
   d7282:	4620      	mov	r0, r4
   d7284:	f7fe fdb2 	bl	d5dec <malloc>
   d7288:	b920      	cbnz	r0, d7294 <_ZnwjRKSt9nothrow_t+0x1c>
   d728a:	f7ff ffe9 	bl	d7260 <_ZSt15get_new_handlerv>
   d728e:	b108      	cbz	r0, d7294 <_ZnwjRKSt9nothrow_t+0x1c>
   d7290:	4780      	blx	r0
   d7292:	e7f6      	b.n	d7282 <_ZnwjRKSt9nothrow_t+0xa>
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZSt25__throw_bad_function_callv>:
   d7296:	b508      	push	{r3, lr}
   d7298:	f7fe fdc0 	bl	d5e1c <abort>

000d729c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d729c:	4b18      	ldr	r3, [pc, #96]	; (d7300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d729e:	681a      	ldr	r2, [r3, #0]
   d72a0:	07d1      	lsls	r1, r2, #31
   d72a2:	bf5c      	itt	pl
   d72a4:	2201      	movpl	r2, #1
   d72a6:	601a      	strpl	r2, [r3, #0]
   d72a8:	4b16      	ldr	r3, [pc, #88]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d72aa:	681a      	ldr	r2, [r3, #0]
   d72ac:	07d2      	lsls	r2, r2, #31
   d72ae:	bf5c      	itt	pl
   d72b0:	2201      	movpl	r2, #1
   d72b2:	601a      	strpl	r2, [r3, #0]
   d72b4:	4b14      	ldr	r3, [pc, #80]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d72b6:	681a      	ldr	r2, [r3, #0]
   d72b8:	07d0      	lsls	r0, r2, #31
   d72ba:	bf5c      	itt	pl
   d72bc:	2201      	movpl	r2, #1
   d72be:	601a      	strpl	r2, [r3, #0]
   d72c0:	4b12      	ldr	r3, [pc, #72]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d72c2:	681a      	ldr	r2, [r3, #0]
   d72c4:	07d1      	lsls	r1, r2, #31
   d72c6:	bf5c      	itt	pl
   d72c8:	2201      	movpl	r2, #1
   d72ca:	601a      	strpl	r2, [r3, #0]
   d72cc:	4b10      	ldr	r3, [pc, #64]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d2      	lsls	r2, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4b0e      	ldr	r3, [pc, #56]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d0      	lsls	r0, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b0c      	ldr	r3, [pc, #48]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d1      	lsls	r1, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b0a      	ldr	r3, [pc, #40]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d2      	lsls	r2, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4770      	bx	lr
   d72fe:	bf00      	nop
   d7300:	2003e76c 	.word	0x2003e76c
   d7304:	2003e768 	.word	0x2003e768
   d7308:	2003e764 	.word	0x2003e764
   d730c:	2003e760 	.word	0x2003e760
   d7310:	2003e75c 	.word	0x2003e75c
   d7314:	2003e758 	.word	0x2003e758
   d7318:	2003e754 	.word	0x2003e754
   d731c:	2003e750 	.word	0x2003e750

000d7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7320:	4b24      	ldr	r3, [pc, #144]	; (d73b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	07d0      	lsls	r0, r2, #31
   d7326:	bf5c      	itt	pl
   d7328:	2201      	movpl	r2, #1
   d732a:	601a      	strpl	r2, [r3, #0]
   d732c:	4b22      	ldr	r3, [pc, #136]	; (d73b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	07d1      	lsls	r1, r2, #31
   d7332:	bf5c      	itt	pl
   d7334:	2201      	movpl	r2, #1
   d7336:	601a      	strpl	r2, [r3, #0]
   d7338:	4b20      	ldr	r3, [pc, #128]	; (d73bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d733a:	681a      	ldr	r2, [r3, #0]
   d733c:	07d2      	lsls	r2, r2, #31
   d733e:	bf5c      	itt	pl
   d7340:	2201      	movpl	r2, #1
   d7342:	601a      	strpl	r2, [r3, #0]
   d7344:	4b1e      	ldr	r3, [pc, #120]	; (d73c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7346:	681a      	ldr	r2, [r3, #0]
   d7348:	07d0      	lsls	r0, r2, #31
   d734a:	bf5c      	itt	pl
   d734c:	2201      	movpl	r2, #1
   d734e:	601a      	strpl	r2, [r3, #0]
   d7350:	4b1c      	ldr	r3, [pc, #112]	; (d73c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7352:	681a      	ldr	r2, [r3, #0]
   d7354:	07d1      	lsls	r1, r2, #31
   d7356:	bf5c      	itt	pl
   d7358:	2201      	movpl	r2, #1
   d735a:	601a      	strpl	r2, [r3, #0]
   d735c:	4b1a      	ldr	r3, [pc, #104]	; (d73c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d735e:	681a      	ldr	r2, [r3, #0]
   d7360:	07d2      	lsls	r2, r2, #31
   d7362:	bf5c      	itt	pl
   d7364:	2201      	movpl	r2, #1
   d7366:	601a      	strpl	r2, [r3, #0]
   d7368:	4b18      	ldr	r3, [pc, #96]	; (d73cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d736a:	681a      	ldr	r2, [r3, #0]
   d736c:	07d0      	lsls	r0, r2, #31
   d736e:	bf5c      	itt	pl
   d7370:	2201      	movpl	r2, #1
   d7372:	601a      	strpl	r2, [r3, #0]
   d7374:	4b16      	ldr	r3, [pc, #88]	; (d73d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7376:	681a      	ldr	r2, [r3, #0]
   d7378:	07d1      	lsls	r1, r2, #31
   d737a:	bf5c      	itt	pl
   d737c:	2201      	movpl	r2, #1
   d737e:	601a      	strpl	r2, [r3, #0]
   d7380:	4b14      	ldr	r3, [pc, #80]	; (d73d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7382:	681a      	ldr	r2, [r3, #0]
   d7384:	07d2      	lsls	r2, r2, #31
   d7386:	bf5c      	itt	pl
   d7388:	2201      	movpl	r2, #1
   d738a:	601a      	strpl	r2, [r3, #0]
   d738c:	4b12      	ldr	r3, [pc, #72]	; (d73d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d738e:	681a      	ldr	r2, [r3, #0]
   d7390:	07d0      	lsls	r0, r2, #31
   d7392:	bf5c      	itt	pl
   d7394:	2201      	movpl	r2, #1
   d7396:	601a      	strpl	r2, [r3, #0]
   d7398:	4b10      	ldr	r3, [pc, #64]	; (d73dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d739a:	681a      	ldr	r2, [r3, #0]
   d739c:	07d1      	lsls	r1, r2, #31
   d739e:	bf5c      	itt	pl
   d73a0:	2201      	movpl	r2, #1
   d73a2:	601a      	strpl	r2, [r3, #0]
   d73a4:	4b0e      	ldr	r3, [pc, #56]	; (d73e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d73a6:	681a      	ldr	r2, [r3, #0]
   d73a8:	07d2      	lsls	r2, r2, #31
   d73aa:	bf5c      	itt	pl
   d73ac:	2201      	movpl	r2, #1
   d73ae:	601a      	strpl	r2, [r3, #0]
   d73b0:	4770      	bx	lr
   d73b2:	bf00      	nop
   d73b4:	2003e79c 	.word	0x2003e79c
   d73b8:	2003e798 	.word	0x2003e798
   d73bc:	2003e794 	.word	0x2003e794
   d73c0:	2003e790 	.word	0x2003e790
   d73c4:	2003e78c 	.word	0x2003e78c
   d73c8:	2003e788 	.word	0x2003e788
   d73cc:	2003e784 	.word	0x2003e784
   d73d0:	2003e780 	.word	0x2003e780
   d73d4:	2003e77c 	.word	0x2003e77c
   d73d8:	2003e778 	.word	0x2003e778
   d73dc:	2003e774 	.word	0x2003e774
   d73e0:	2003e770 	.word	0x2003e770

000d73e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d73e4:	4b24      	ldr	r3, [pc, #144]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d0      	lsls	r0, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4b22      	ldr	r3, [pc, #136]	; (d747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d73f2:	681a      	ldr	r2, [r3, #0]
   d73f4:	07d1      	lsls	r1, r2, #31
   d73f6:	bf5c      	itt	pl
   d73f8:	2201      	movpl	r2, #1
   d73fa:	601a      	strpl	r2, [r3, #0]
   d73fc:	4b20      	ldr	r3, [pc, #128]	; (d7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	07d2      	lsls	r2, r2, #31
   d7402:	bf5c      	itt	pl
   d7404:	2201      	movpl	r2, #1
   d7406:	601a      	strpl	r2, [r3, #0]
   d7408:	4b1e      	ldr	r3, [pc, #120]	; (d7484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d0      	lsls	r0, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b1c      	ldr	r3, [pc, #112]	; (d7488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d1      	lsls	r1, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4b1a      	ldr	r3, [pc, #104]	; (d748c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d2      	lsls	r2, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b18      	ldr	r3, [pc, #96]	; (d7490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d0      	lsls	r0, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b16      	ldr	r3, [pc, #88]	; (d7494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d1      	lsls	r1, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b14      	ldr	r3, [pc, #80]	; (d7498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d2      	lsls	r2, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b12      	ldr	r3, [pc, #72]	; (d749c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d0      	lsls	r0, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4b10      	ldr	r3, [pc, #64]	; (d74a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d745e:	681a      	ldr	r2, [r3, #0]
   d7460:	07d1      	lsls	r1, r2, #31
   d7462:	bf5c      	itt	pl
   d7464:	2201      	movpl	r2, #1
   d7466:	601a      	strpl	r2, [r3, #0]
   d7468:	4b0e      	ldr	r3, [pc, #56]	; (d74a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d746a:	681a      	ldr	r2, [r3, #0]
   d746c:	07d2      	lsls	r2, r2, #31
   d746e:	bf5c      	itt	pl
   d7470:	2201      	movpl	r2, #1
   d7472:	601a      	strpl	r2, [r3, #0]
   d7474:	4770      	bx	lr
   d7476:	bf00      	nop
   d7478:	2003e7cc 	.word	0x2003e7cc
   d747c:	2003e7c8 	.word	0x2003e7c8
   d7480:	2003e7c4 	.word	0x2003e7c4
   d7484:	2003e7c0 	.word	0x2003e7c0
   d7488:	2003e7bc 	.word	0x2003e7bc
   d748c:	2003e7b8 	.word	0x2003e7b8
   d7490:	2003e7b4 	.word	0x2003e7b4
   d7494:	2003e7b0 	.word	0x2003e7b0
   d7498:	2003e7ac 	.word	0x2003e7ac
   d749c:	2003e7a8 	.word	0x2003e7a8
   d74a0:	2003e7a4 	.word	0x2003e7a4
   d74a4:	2003e7a0 	.word	0x2003e7a0

000d74a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d74a8:	4b18      	ldr	r3, [pc, #96]	; (d750c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d74aa:	681a      	ldr	r2, [r3, #0]
   d74ac:	07d1      	lsls	r1, r2, #31
   d74ae:	bf5c      	itt	pl
   d74b0:	2201      	movpl	r2, #1
   d74b2:	601a      	strpl	r2, [r3, #0]
   d74b4:	4b16      	ldr	r3, [pc, #88]	; (d7510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d74b6:	681a      	ldr	r2, [r3, #0]
   d74b8:	07d2      	lsls	r2, r2, #31
   d74ba:	bf5c      	itt	pl
   d74bc:	2201      	movpl	r2, #1
   d74be:	601a      	strpl	r2, [r3, #0]
   d74c0:	4b14      	ldr	r3, [pc, #80]	; (d7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d74c2:	681a      	ldr	r2, [r3, #0]
   d74c4:	07d0      	lsls	r0, r2, #31
   d74c6:	bf5c      	itt	pl
   d74c8:	2201      	movpl	r2, #1
   d74ca:	601a      	strpl	r2, [r3, #0]
   d74cc:	4b12      	ldr	r3, [pc, #72]	; (d7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d74ce:	681a      	ldr	r2, [r3, #0]
   d74d0:	07d1      	lsls	r1, r2, #31
   d74d2:	bf5c      	itt	pl
   d74d4:	2201      	movpl	r2, #1
   d74d6:	601a      	strpl	r2, [r3, #0]
   d74d8:	4b10      	ldr	r3, [pc, #64]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d74da:	681a      	ldr	r2, [r3, #0]
   d74dc:	07d2      	lsls	r2, r2, #31
   d74de:	bf5c      	itt	pl
   d74e0:	2201      	movpl	r2, #1
   d74e2:	601a      	strpl	r2, [r3, #0]
   d74e4:	4b0e      	ldr	r3, [pc, #56]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d74e6:	681a      	ldr	r2, [r3, #0]
   d74e8:	07d0      	lsls	r0, r2, #31
   d74ea:	bf5c      	itt	pl
   d74ec:	2201      	movpl	r2, #1
   d74ee:	601a      	strpl	r2, [r3, #0]
   d74f0:	4b0c      	ldr	r3, [pc, #48]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d74f2:	681a      	ldr	r2, [r3, #0]
   d74f4:	07d1      	lsls	r1, r2, #31
   d74f6:	bf5c      	itt	pl
   d74f8:	2201      	movpl	r2, #1
   d74fa:	601a      	strpl	r2, [r3, #0]
   d74fc:	4b0a      	ldr	r3, [pc, #40]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d74fe:	681a      	ldr	r2, [r3, #0]
   d7500:	07d2      	lsls	r2, r2, #31
   d7502:	bf5c      	itt	pl
   d7504:	2201      	movpl	r2, #1
   d7506:	601a      	strpl	r2, [r3, #0]
   d7508:	4770      	bx	lr
   d750a:	bf00      	nop
   d750c:	2003e7ec 	.word	0x2003e7ec
   d7510:	2003e7e8 	.word	0x2003e7e8
   d7514:	2003e7e4 	.word	0x2003e7e4
   d7518:	2003e7e0 	.word	0x2003e7e0
   d751c:	2003e7dc 	.word	0x2003e7dc
   d7520:	2003e7d8 	.word	0x2003e7d8
   d7524:	2003e7d4 	.word	0x2003e7d4
   d7528:	2003e7d0 	.word	0x2003e7d0

000d752c <__aeabi_drsub>:
   d752c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7530:	e002      	b.n	d7538 <__adddf3>
   d7532:	bf00      	nop

000d7534 <__aeabi_dsub>:
   d7534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7538 <__adddf3>:
   d7538:	b530      	push	{r4, r5, lr}
   d753a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d753e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7542:	ea94 0f05 	teq	r4, r5
   d7546:	bf08      	it	eq
   d7548:	ea90 0f02 	teqeq	r0, r2
   d754c:	bf1f      	itttt	ne
   d754e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7552:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d755a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d755e:	f000 80e2 	beq.w	d7726 <__adddf3+0x1ee>
   d7562:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d756a:	bfb8      	it	lt
   d756c:	426d      	neglt	r5, r5
   d756e:	dd0c      	ble.n	d758a <__adddf3+0x52>
   d7570:	442c      	add	r4, r5
   d7572:	ea80 0202 	eor.w	r2, r0, r2
   d7576:	ea81 0303 	eor.w	r3, r1, r3
   d757a:	ea82 0000 	eor.w	r0, r2, r0
   d757e:	ea83 0101 	eor.w	r1, r3, r1
   d7582:	ea80 0202 	eor.w	r2, r0, r2
   d7586:	ea81 0303 	eor.w	r3, r1, r3
   d758a:	2d36      	cmp	r5, #54	; 0x36
   d758c:	bf88      	it	hi
   d758e:	bd30      	pophi	{r4, r5, pc}
   d7590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7594:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d759c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d75a0:	d002      	beq.n	d75a8 <__adddf3+0x70>
   d75a2:	4240      	negs	r0, r0
   d75a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d75a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d75ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d75b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d75b4:	d002      	beq.n	d75bc <__adddf3+0x84>
   d75b6:	4252      	negs	r2, r2
   d75b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d75bc:	ea94 0f05 	teq	r4, r5
   d75c0:	f000 80a7 	beq.w	d7712 <__adddf3+0x1da>
   d75c4:	f1a4 0401 	sub.w	r4, r4, #1
   d75c8:	f1d5 0e20 	rsbs	lr, r5, #32
   d75cc:	db0d      	blt.n	d75ea <__adddf3+0xb2>
   d75ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d75d2:	fa22 f205 	lsr.w	r2, r2, r5
   d75d6:	1880      	adds	r0, r0, r2
   d75d8:	f141 0100 	adc.w	r1, r1, #0
   d75dc:	fa03 f20e 	lsl.w	r2, r3, lr
   d75e0:	1880      	adds	r0, r0, r2
   d75e2:	fa43 f305 	asr.w	r3, r3, r5
   d75e6:	4159      	adcs	r1, r3
   d75e8:	e00e      	b.n	d7608 <__adddf3+0xd0>
   d75ea:	f1a5 0520 	sub.w	r5, r5, #32
   d75ee:	f10e 0e20 	add.w	lr, lr, #32
   d75f2:	2a01      	cmp	r2, #1
   d75f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d75f8:	bf28      	it	cs
   d75fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d75fe:	fa43 f305 	asr.w	r3, r3, r5
   d7602:	18c0      	adds	r0, r0, r3
   d7604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d760c:	d507      	bpl.n	d761e <__adddf3+0xe6>
   d760e:	f04f 0e00 	mov.w	lr, #0
   d7612:	f1dc 0c00 	rsbs	ip, ip, #0
   d7616:	eb7e 0000 	sbcs.w	r0, lr, r0
   d761a:	eb6e 0101 	sbc.w	r1, lr, r1
   d761e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7622:	d31b      	bcc.n	d765c <__adddf3+0x124>
   d7624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7628:	d30c      	bcc.n	d7644 <__adddf3+0x10c>
   d762a:	0849      	lsrs	r1, r1, #1
   d762c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7630:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7634:	f104 0401 	add.w	r4, r4, #1
   d7638:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d763c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7640:	f080 809a 	bcs.w	d7778 <__adddf3+0x240>
   d7644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7648:	bf08      	it	eq
   d764a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d764e:	f150 0000 	adcs.w	r0, r0, #0
   d7652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7656:	ea41 0105 	orr.w	r1, r1, r5
   d765a:	bd30      	pop	{r4, r5, pc}
   d765c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7660:	4140      	adcs	r0, r0
   d7662:	eb41 0101 	adc.w	r1, r1, r1
   d7666:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d766a:	f1a4 0401 	sub.w	r4, r4, #1
   d766e:	d1e9      	bne.n	d7644 <__adddf3+0x10c>
   d7670:	f091 0f00 	teq	r1, #0
   d7674:	bf04      	itt	eq
   d7676:	4601      	moveq	r1, r0
   d7678:	2000      	moveq	r0, #0
   d767a:	fab1 f381 	clz	r3, r1
   d767e:	bf08      	it	eq
   d7680:	3320      	addeq	r3, #32
   d7682:	f1a3 030b 	sub.w	r3, r3, #11
   d7686:	f1b3 0220 	subs.w	r2, r3, #32
   d768a:	da0c      	bge.n	d76a6 <__adddf3+0x16e>
   d768c:	320c      	adds	r2, #12
   d768e:	dd08      	ble.n	d76a2 <__adddf3+0x16a>
   d7690:	f102 0c14 	add.w	ip, r2, #20
   d7694:	f1c2 020c 	rsb	r2, r2, #12
   d7698:	fa01 f00c 	lsl.w	r0, r1, ip
   d769c:	fa21 f102 	lsr.w	r1, r1, r2
   d76a0:	e00c      	b.n	d76bc <__adddf3+0x184>
   d76a2:	f102 0214 	add.w	r2, r2, #20
   d76a6:	bfd8      	it	le
   d76a8:	f1c2 0c20 	rsble	ip, r2, #32
   d76ac:	fa01 f102 	lsl.w	r1, r1, r2
   d76b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d76b4:	bfdc      	itt	le
   d76b6:	ea41 010c 	orrle.w	r1, r1, ip
   d76ba:	4090      	lslle	r0, r2
   d76bc:	1ae4      	subs	r4, r4, r3
   d76be:	bfa2      	ittt	ge
   d76c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d76c4:	4329      	orrge	r1, r5
   d76c6:	bd30      	popge	{r4, r5, pc}
   d76c8:	ea6f 0404 	mvn.w	r4, r4
   d76cc:	3c1f      	subs	r4, #31
   d76ce:	da1c      	bge.n	d770a <__adddf3+0x1d2>
   d76d0:	340c      	adds	r4, #12
   d76d2:	dc0e      	bgt.n	d76f2 <__adddf3+0x1ba>
   d76d4:	f104 0414 	add.w	r4, r4, #20
   d76d8:	f1c4 0220 	rsb	r2, r4, #32
   d76dc:	fa20 f004 	lsr.w	r0, r0, r4
   d76e0:	fa01 f302 	lsl.w	r3, r1, r2
   d76e4:	ea40 0003 	orr.w	r0, r0, r3
   d76e8:	fa21 f304 	lsr.w	r3, r1, r4
   d76ec:	ea45 0103 	orr.w	r1, r5, r3
   d76f0:	bd30      	pop	{r4, r5, pc}
   d76f2:	f1c4 040c 	rsb	r4, r4, #12
   d76f6:	f1c4 0220 	rsb	r2, r4, #32
   d76fa:	fa20 f002 	lsr.w	r0, r0, r2
   d76fe:	fa01 f304 	lsl.w	r3, r1, r4
   d7702:	ea40 0003 	orr.w	r0, r0, r3
   d7706:	4629      	mov	r1, r5
   d7708:	bd30      	pop	{r4, r5, pc}
   d770a:	fa21 f004 	lsr.w	r0, r1, r4
   d770e:	4629      	mov	r1, r5
   d7710:	bd30      	pop	{r4, r5, pc}
   d7712:	f094 0f00 	teq	r4, #0
   d7716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d771a:	bf06      	itte	eq
   d771c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7720:	3401      	addeq	r4, #1
   d7722:	3d01      	subne	r5, #1
   d7724:	e74e      	b.n	d75c4 <__adddf3+0x8c>
   d7726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d772a:	bf18      	it	ne
   d772c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7730:	d029      	beq.n	d7786 <__adddf3+0x24e>
   d7732:	ea94 0f05 	teq	r4, r5
   d7736:	bf08      	it	eq
   d7738:	ea90 0f02 	teqeq	r0, r2
   d773c:	d005      	beq.n	d774a <__adddf3+0x212>
   d773e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7742:	bf04      	itt	eq
   d7744:	4619      	moveq	r1, r3
   d7746:	4610      	moveq	r0, r2
   d7748:	bd30      	pop	{r4, r5, pc}
   d774a:	ea91 0f03 	teq	r1, r3
   d774e:	bf1e      	ittt	ne
   d7750:	2100      	movne	r1, #0
   d7752:	2000      	movne	r0, #0
   d7754:	bd30      	popne	{r4, r5, pc}
   d7756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d775a:	d105      	bne.n	d7768 <__adddf3+0x230>
   d775c:	0040      	lsls	r0, r0, #1
   d775e:	4149      	adcs	r1, r1
   d7760:	bf28      	it	cs
   d7762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7766:	bd30      	pop	{r4, r5, pc}
   d7768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d776c:	bf3c      	itt	cc
   d776e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7772:	bd30      	popcc	{r4, r5, pc}
   d7774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d777c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7780:	f04f 0000 	mov.w	r0, #0
   d7784:	bd30      	pop	{r4, r5, pc}
   d7786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d778a:	bf1a      	itte	ne
   d778c:	4619      	movne	r1, r3
   d778e:	4610      	movne	r0, r2
   d7790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7794:	bf1c      	itt	ne
   d7796:	460b      	movne	r3, r1
   d7798:	4602      	movne	r2, r0
   d779a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d779e:	bf06      	itte	eq
   d77a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d77a4:	ea91 0f03 	teqeq	r1, r3
   d77a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d77ac:	bd30      	pop	{r4, r5, pc}
   d77ae:	bf00      	nop

000d77b0 <__aeabi_ui2d>:
   d77b0:	f090 0f00 	teq	r0, #0
   d77b4:	bf04      	itt	eq
   d77b6:	2100      	moveq	r1, #0
   d77b8:	4770      	bxeq	lr
   d77ba:	b530      	push	{r4, r5, lr}
   d77bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d77c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d77c4:	f04f 0500 	mov.w	r5, #0
   d77c8:	f04f 0100 	mov.w	r1, #0
   d77cc:	e750      	b.n	d7670 <__adddf3+0x138>
   d77ce:	bf00      	nop

000d77d0 <__aeabi_i2d>:
   d77d0:	f090 0f00 	teq	r0, #0
   d77d4:	bf04      	itt	eq
   d77d6:	2100      	moveq	r1, #0
   d77d8:	4770      	bxeq	lr
   d77da:	b530      	push	{r4, r5, lr}
   d77dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d77e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d77e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d77e8:	bf48      	it	mi
   d77ea:	4240      	negmi	r0, r0
   d77ec:	f04f 0100 	mov.w	r1, #0
   d77f0:	e73e      	b.n	d7670 <__adddf3+0x138>
   d77f2:	bf00      	nop

000d77f4 <__aeabi_f2d>:
   d77f4:	0042      	lsls	r2, r0, #1
   d77f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d77fa:	ea4f 0131 	mov.w	r1, r1, rrx
   d77fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7802:	bf1f      	itttt	ne
   d7804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d780c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7810:	4770      	bxne	lr
   d7812:	f092 0f00 	teq	r2, #0
   d7816:	bf14      	ite	ne
   d7818:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d781c:	4770      	bxeq	lr
   d781e:	b530      	push	{r4, r5, lr}
   d7820:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d782c:	e720      	b.n	d7670 <__adddf3+0x138>
   d782e:	bf00      	nop

000d7830 <__aeabi_ul2d>:
   d7830:	ea50 0201 	orrs.w	r2, r0, r1
   d7834:	bf08      	it	eq
   d7836:	4770      	bxeq	lr
   d7838:	b530      	push	{r4, r5, lr}
   d783a:	f04f 0500 	mov.w	r5, #0
   d783e:	e00a      	b.n	d7856 <__aeabi_l2d+0x16>

000d7840 <__aeabi_l2d>:
   d7840:	ea50 0201 	orrs.w	r2, r0, r1
   d7844:	bf08      	it	eq
   d7846:	4770      	bxeq	lr
   d7848:	b530      	push	{r4, r5, lr}
   d784a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d784e:	d502      	bpl.n	d7856 <__aeabi_l2d+0x16>
   d7850:	4240      	negs	r0, r0
   d7852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7856:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d785a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d785e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7862:	f43f aedc 	beq.w	d761e <__adddf3+0xe6>
   d7866:	f04f 0203 	mov.w	r2, #3
   d786a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d786e:	bf18      	it	ne
   d7870:	3203      	addne	r2, #3
   d7872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7876:	bf18      	it	ne
   d7878:	3203      	addne	r2, #3
   d787a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d787e:	f1c2 0320 	rsb	r3, r2, #32
   d7882:	fa00 fc03 	lsl.w	ip, r0, r3
   d7886:	fa20 f002 	lsr.w	r0, r0, r2
   d788a:	fa01 fe03 	lsl.w	lr, r1, r3
   d788e:	ea40 000e 	orr.w	r0, r0, lr
   d7892:	fa21 f102 	lsr.w	r1, r1, r2
   d7896:	4414      	add	r4, r2
   d7898:	e6c1      	b.n	d761e <__adddf3+0xe6>
   d789a:	bf00      	nop

000d789c <__aeabi_dmul>:
   d789c:	b570      	push	{r4, r5, r6, lr}
   d789e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d78a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d78a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d78aa:	bf1d      	ittte	ne
   d78ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d78b0:	ea94 0f0c 	teqne	r4, ip
   d78b4:	ea95 0f0c 	teqne	r5, ip
   d78b8:	f000 f8de 	bleq	d7a78 <__aeabi_dmul+0x1dc>
   d78bc:	442c      	add	r4, r5
   d78be:	ea81 0603 	eor.w	r6, r1, r3
   d78c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d78c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d78ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d78ce:	bf18      	it	ne
   d78d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d78d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d78d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d78dc:	d038      	beq.n	d7950 <__aeabi_dmul+0xb4>
   d78de:	fba0 ce02 	umull	ip, lr, r0, r2
   d78e2:	f04f 0500 	mov.w	r5, #0
   d78e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d78ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d78ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d78f2:	f04f 0600 	mov.w	r6, #0
   d78f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d78fa:	f09c 0f00 	teq	ip, #0
   d78fe:	bf18      	it	ne
   d7900:	f04e 0e01 	orrne.w	lr, lr, #1
   d7904:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7908:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d790c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7910:	d204      	bcs.n	d791c <__aeabi_dmul+0x80>
   d7912:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7916:	416d      	adcs	r5, r5
   d7918:	eb46 0606 	adc.w	r6, r6, r6
   d791c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7920:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7924:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7928:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d792c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7930:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7934:	bf88      	it	hi
   d7936:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d793a:	d81e      	bhi.n	d797a <__aeabi_dmul+0xde>
   d793c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7940:	bf08      	it	eq
   d7942:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7946:	f150 0000 	adcs.w	r0, r0, #0
   d794a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d794e:	bd70      	pop	{r4, r5, r6, pc}
   d7950:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7954:	ea46 0101 	orr.w	r1, r6, r1
   d7958:	ea40 0002 	orr.w	r0, r0, r2
   d795c:	ea81 0103 	eor.w	r1, r1, r3
   d7960:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7964:	bfc2      	ittt	gt
   d7966:	ebd4 050c 	rsbsgt	r5, r4, ip
   d796a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d796e:	bd70      	popgt	{r4, r5, r6, pc}
   d7970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7974:	f04f 0e00 	mov.w	lr, #0
   d7978:	3c01      	subs	r4, #1
   d797a:	f300 80ab 	bgt.w	d7ad4 <__aeabi_dmul+0x238>
   d797e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7982:	bfde      	ittt	le
   d7984:	2000      	movle	r0, #0
   d7986:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d798a:	bd70      	pople	{r4, r5, r6, pc}
   d798c:	f1c4 0400 	rsb	r4, r4, #0
   d7990:	3c20      	subs	r4, #32
   d7992:	da35      	bge.n	d7a00 <__aeabi_dmul+0x164>
   d7994:	340c      	adds	r4, #12
   d7996:	dc1b      	bgt.n	d79d0 <__aeabi_dmul+0x134>
   d7998:	f104 0414 	add.w	r4, r4, #20
   d799c:	f1c4 0520 	rsb	r5, r4, #32
   d79a0:	fa00 f305 	lsl.w	r3, r0, r5
   d79a4:	fa20 f004 	lsr.w	r0, r0, r4
   d79a8:	fa01 f205 	lsl.w	r2, r1, r5
   d79ac:	ea40 0002 	orr.w	r0, r0, r2
   d79b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d79b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d79b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d79bc:	fa21 f604 	lsr.w	r6, r1, r4
   d79c0:	eb42 0106 	adc.w	r1, r2, r6
   d79c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d79c8:	bf08      	it	eq
   d79ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d79ce:	bd70      	pop	{r4, r5, r6, pc}
   d79d0:	f1c4 040c 	rsb	r4, r4, #12
   d79d4:	f1c4 0520 	rsb	r5, r4, #32
   d79d8:	fa00 f304 	lsl.w	r3, r0, r4
   d79dc:	fa20 f005 	lsr.w	r0, r0, r5
   d79e0:	fa01 f204 	lsl.w	r2, r1, r4
   d79e4:	ea40 0002 	orr.w	r0, r0, r2
   d79e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d79f0:	f141 0100 	adc.w	r1, r1, #0
   d79f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d79f8:	bf08      	it	eq
   d79fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d79fe:	bd70      	pop	{r4, r5, r6, pc}
   d7a00:	f1c4 0520 	rsb	r5, r4, #32
   d7a04:	fa00 f205 	lsl.w	r2, r0, r5
   d7a08:	ea4e 0e02 	orr.w	lr, lr, r2
   d7a0c:	fa20 f304 	lsr.w	r3, r0, r4
   d7a10:	fa01 f205 	lsl.w	r2, r1, r5
   d7a14:	ea43 0302 	orr.w	r3, r3, r2
   d7a18:	fa21 f004 	lsr.w	r0, r1, r4
   d7a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a20:	fa21 f204 	lsr.w	r2, r1, r4
   d7a24:	ea20 0002 	bic.w	r0, r0, r2
   d7a28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a30:	bf08      	it	eq
   d7a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a36:	bd70      	pop	{r4, r5, r6, pc}
   d7a38:	f094 0f00 	teq	r4, #0
   d7a3c:	d10f      	bne.n	d7a5e <__aeabi_dmul+0x1c2>
   d7a3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7a42:	0040      	lsls	r0, r0, #1
   d7a44:	eb41 0101 	adc.w	r1, r1, r1
   d7a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a4c:	bf08      	it	eq
   d7a4e:	3c01      	subeq	r4, #1
   d7a50:	d0f7      	beq.n	d7a42 <__aeabi_dmul+0x1a6>
   d7a52:	ea41 0106 	orr.w	r1, r1, r6
   d7a56:	f095 0f00 	teq	r5, #0
   d7a5a:	bf18      	it	ne
   d7a5c:	4770      	bxne	lr
   d7a5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7a62:	0052      	lsls	r2, r2, #1
   d7a64:	eb43 0303 	adc.w	r3, r3, r3
   d7a68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7a6c:	bf08      	it	eq
   d7a6e:	3d01      	subeq	r5, #1
   d7a70:	d0f7      	beq.n	d7a62 <__aeabi_dmul+0x1c6>
   d7a72:	ea43 0306 	orr.w	r3, r3, r6
   d7a76:	4770      	bx	lr
   d7a78:	ea94 0f0c 	teq	r4, ip
   d7a7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7a80:	bf18      	it	ne
   d7a82:	ea95 0f0c 	teqne	r5, ip
   d7a86:	d00c      	beq.n	d7aa2 <__aeabi_dmul+0x206>
   d7a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7a8c:	bf18      	it	ne
   d7a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7a92:	d1d1      	bne.n	d7a38 <__aeabi_dmul+0x19c>
   d7a94:	ea81 0103 	eor.w	r1, r1, r3
   d7a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a9c:	f04f 0000 	mov.w	r0, #0
   d7aa0:	bd70      	pop	{r4, r5, r6, pc}
   d7aa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7aa6:	bf06      	itte	eq
   d7aa8:	4610      	moveq	r0, r2
   d7aaa:	4619      	moveq	r1, r3
   d7aac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ab0:	d019      	beq.n	d7ae6 <__aeabi_dmul+0x24a>
   d7ab2:	ea94 0f0c 	teq	r4, ip
   d7ab6:	d102      	bne.n	d7abe <__aeabi_dmul+0x222>
   d7ab8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7abc:	d113      	bne.n	d7ae6 <__aeabi_dmul+0x24a>
   d7abe:	ea95 0f0c 	teq	r5, ip
   d7ac2:	d105      	bne.n	d7ad0 <__aeabi_dmul+0x234>
   d7ac4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7ac8:	bf1c      	itt	ne
   d7aca:	4610      	movne	r0, r2
   d7acc:	4619      	movne	r1, r3
   d7ace:	d10a      	bne.n	d7ae6 <__aeabi_dmul+0x24a>
   d7ad0:	ea81 0103 	eor.w	r1, r1, r3
   d7ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ad8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7adc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ae0:	f04f 0000 	mov.w	r0, #0
   d7ae4:	bd70      	pop	{r4, r5, r6, pc}
   d7ae6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7aea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7aee:	bd70      	pop	{r4, r5, r6, pc}

000d7af0 <__aeabi_ddiv>:
   d7af0:	b570      	push	{r4, r5, r6, lr}
   d7af2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7af6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7afa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7afe:	bf1d      	ittte	ne
   d7b00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7b04:	ea94 0f0c 	teqne	r4, ip
   d7b08:	ea95 0f0c 	teqne	r5, ip
   d7b0c:	f000 f8a7 	bleq	d7c5e <__aeabi_ddiv+0x16e>
   d7b10:	eba4 0405 	sub.w	r4, r4, r5
   d7b14:	ea81 0e03 	eor.w	lr, r1, r3
   d7b18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b20:	f000 8088 	beq.w	d7c34 <__aeabi_ddiv+0x144>
   d7b24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7b2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7b30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7b34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7b38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7b3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7b40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7b44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7b48:	429d      	cmp	r5, r3
   d7b4a:	bf08      	it	eq
   d7b4c:	4296      	cmpeq	r6, r2
   d7b4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7b52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7b56:	d202      	bcs.n	d7b5e <__aeabi_ddiv+0x6e>
   d7b58:	085b      	lsrs	r3, r3, #1
   d7b5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7b5e:	1ab6      	subs	r6, r6, r2
   d7b60:	eb65 0503 	sbc.w	r5, r5, r3
   d7b64:	085b      	lsrs	r3, r3, #1
   d7b66:	ea4f 0232 	mov.w	r2, r2, rrx
   d7b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7b6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7b72:	ebb6 0e02 	subs.w	lr, r6, r2
   d7b76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7b7a:	bf22      	ittt	cs
   d7b7c:	1ab6      	subcs	r6, r6, r2
   d7b7e:	4675      	movcs	r5, lr
   d7b80:	ea40 000c 	orrcs.w	r0, r0, ip
   d7b84:	085b      	lsrs	r3, r3, #1
   d7b86:	ea4f 0232 	mov.w	r2, r2, rrx
   d7b8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7b92:	bf22      	ittt	cs
   d7b94:	1ab6      	subcs	r6, r6, r2
   d7b96:	4675      	movcs	r5, lr
   d7b98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7b9c:	085b      	lsrs	r3, r3, #1
   d7b9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ba2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7baa:	bf22      	ittt	cs
   d7bac:	1ab6      	subcs	r6, r6, r2
   d7bae:	4675      	movcs	r5, lr
   d7bb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7bb4:	085b      	lsrs	r3, r3, #1
   d7bb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bba:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bc2:	bf22      	ittt	cs
   d7bc4:	1ab6      	subcs	r6, r6, r2
   d7bc6:	4675      	movcs	r5, lr
   d7bc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7bcc:	ea55 0e06 	orrs.w	lr, r5, r6
   d7bd0:	d018      	beq.n	d7c04 <__aeabi_ddiv+0x114>
   d7bd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7bd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7bda:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7bde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7be2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7be6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7bea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7bee:	d1c0      	bne.n	d7b72 <__aeabi_ddiv+0x82>
   d7bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7bf4:	d10b      	bne.n	d7c0e <__aeabi_ddiv+0x11e>
   d7bf6:	ea41 0100 	orr.w	r1, r1, r0
   d7bfa:	f04f 0000 	mov.w	r0, #0
   d7bfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7c02:	e7b6      	b.n	d7b72 <__aeabi_ddiv+0x82>
   d7c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c08:	bf04      	itt	eq
   d7c0a:	4301      	orreq	r1, r0
   d7c0c:	2000      	moveq	r0, #0
   d7c0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c12:	bf88      	it	hi
   d7c14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c18:	f63f aeaf 	bhi.w	d797a <__aeabi_dmul+0xde>
   d7c1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7c20:	bf04      	itt	eq
   d7c22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7c26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c2a:	f150 0000 	adcs.w	r0, r0, #0
   d7c2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c32:	bd70      	pop	{r4, r5, r6, pc}
   d7c34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7c38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7c3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7c40:	bfc2      	ittt	gt
   d7c42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7c4a:	bd70      	popgt	{r4, r5, r6, pc}
   d7c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c50:	f04f 0e00 	mov.w	lr, #0
   d7c54:	3c01      	subs	r4, #1
   d7c56:	e690      	b.n	d797a <__aeabi_dmul+0xde>
   d7c58:	ea45 0e06 	orr.w	lr, r5, r6
   d7c5c:	e68d      	b.n	d797a <__aeabi_dmul+0xde>
   d7c5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7c62:	ea94 0f0c 	teq	r4, ip
   d7c66:	bf08      	it	eq
   d7c68:	ea95 0f0c 	teqeq	r5, ip
   d7c6c:	f43f af3b 	beq.w	d7ae6 <__aeabi_dmul+0x24a>
   d7c70:	ea94 0f0c 	teq	r4, ip
   d7c74:	d10a      	bne.n	d7c8c <__aeabi_ddiv+0x19c>
   d7c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7c7a:	f47f af34 	bne.w	d7ae6 <__aeabi_dmul+0x24a>
   d7c7e:	ea95 0f0c 	teq	r5, ip
   d7c82:	f47f af25 	bne.w	d7ad0 <__aeabi_dmul+0x234>
   d7c86:	4610      	mov	r0, r2
   d7c88:	4619      	mov	r1, r3
   d7c8a:	e72c      	b.n	d7ae6 <__aeabi_dmul+0x24a>
   d7c8c:	ea95 0f0c 	teq	r5, ip
   d7c90:	d106      	bne.n	d7ca0 <__aeabi_ddiv+0x1b0>
   d7c92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7c96:	f43f aefd 	beq.w	d7a94 <__aeabi_dmul+0x1f8>
   d7c9a:	4610      	mov	r0, r2
   d7c9c:	4619      	mov	r1, r3
   d7c9e:	e722      	b.n	d7ae6 <__aeabi_dmul+0x24a>
   d7ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ca4:	bf18      	it	ne
   d7ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7caa:	f47f aec5 	bne.w	d7a38 <__aeabi_dmul+0x19c>
   d7cae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7cb2:	f47f af0d 	bne.w	d7ad0 <__aeabi_dmul+0x234>
   d7cb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7cba:	f47f aeeb 	bne.w	d7a94 <__aeabi_dmul+0x1f8>
   d7cbe:	e712      	b.n	d7ae6 <__aeabi_dmul+0x24a>

000d7cc0 <__aeabi_d2f>:
   d7cc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7cc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7cc8:	bf24      	itt	cs
   d7cca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7cce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7cd2:	d90d      	bls.n	d7cf0 <__aeabi_d2f+0x30>
   d7cd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7cd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7cdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7ce0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7ce4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7ce8:	bf08      	it	eq
   d7cea:	f020 0001 	biceq.w	r0, r0, #1
   d7cee:	4770      	bx	lr
   d7cf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7cf4:	d121      	bne.n	d7d3a <__aeabi_d2f+0x7a>
   d7cf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7cfa:	bfbc      	itt	lt
   d7cfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7d00:	4770      	bxlt	lr
   d7d02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7d0a:	f1c2 0218 	rsb	r2, r2, #24
   d7d0e:	f1c2 0c20 	rsb	ip, r2, #32
   d7d12:	fa10 f30c 	lsls.w	r3, r0, ip
   d7d16:	fa20 f002 	lsr.w	r0, r0, r2
   d7d1a:	bf18      	it	ne
   d7d1c:	f040 0001 	orrne.w	r0, r0, #1
   d7d20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7d24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7d28:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7d2c:	ea40 000c 	orr.w	r0, r0, ip
   d7d30:	fa23 f302 	lsr.w	r3, r3, r2
   d7d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7d38:	e7cc      	b.n	d7cd4 <__aeabi_d2f+0x14>
   d7d3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7d3e:	d107      	bne.n	d7d50 <__aeabi_d2f+0x90>
   d7d40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7d44:	bf1e      	ittt	ne
   d7d46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7d4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7d4e:	4770      	bxne	lr
   d7d50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7d5c:	4770      	bx	lr
   d7d5e:	bf00      	nop

000d7d60 <atol>:
   d7d60:	220a      	movs	r2, #10
   d7d62:	2100      	movs	r1, #0
   d7d64:	f000 b952 	b.w	d800c <strtol>

000d7d68 <__cxa_atexit>:
   d7d68:	b510      	push	{r4, lr}
   d7d6a:	4c05      	ldr	r4, [pc, #20]	; (d7d80 <__cxa_atexit+0x18>)
   d7d6c:	4613      	mov	r3, r2
   d7d6e:	b12c      	cbz	r4, d7d7c <__cxa_atexit+0x14>
   d7d70:	460a      	mov	r2, r1
   d7d72:	4601      	mov	r1, r0
   d7d74:	2002      	movs	r0, #2
   d7d76:	f3af 8000 	nop.w
   d7d7a:	bd10      	pop	{r4, pc}
   d7d7c:	4620      	mov	r0, r4
   d7d7e:	bd10      	pop	{r4, pc}
   d7d80:	00000000 	.word	0x00000000

000d7d84 <memcpy>:
   d7d84:	b510      	push	{r4, lr}
   d7d86:	1e43      	subs	r3, r0, #1
   d7d88:	440a      	add	r2, r1
   d7d8a:	4291      	cmp	r1, r2
   d7d8c:	d004      	beq.n	d7d98 <memcpy+0x14>
   d7d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d92:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7d96:	e7f8      	b.n	d7d8a <memcpy+0x6>
   d7d98:	bd10      	pop	{r4, pc}

000d7d9a <memset>:
   d7d9a:	4402      	add	r2, r0
   d7d9c:	4603      	mov	r3, r0
   d7d9e:	4293      	cmp	r3, r2
   d7da0:	d002      	beq.n	d7da8 <memset+0xe>
   d7da2:	f803 1b01 	strb.w	r1, [r3], #1
   d7da6:	e7fa      	b.n	d7d9e <memset+0x4>
   d7da8:	4770      	bx	lr
	...

000d7dac <srand>:
   d7dac:	b538      	push	{r3, r4, r5, lr}
   d7dae:	4b12      	ldr	r3, [pc, #72]	; (d7df8 <srand+0x4c>)
   d7db0:	681c      	ldr	r4, [r3, #0]
   d7db2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7db4:	4605      	mov	r5, r0
   d7db6:	b9d3      	cbnz	r3, d7dee <srand+0x42>
   d7db8:	2018      	movs	r0, #24
   d7dba:	f7fe f817 	bl	d5dec <malloc>
   d7dbe:	f243 330e 	movw	r3, #13070	; 0x330e
   d7dc2:	63a0      	str	r0, [r4, #56]	; 0x38
   d7dc4:	8003      	strh	r3, [r0, #0]
   d7dc6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7dca:	8043      	strh	r3, [r0, #2]
   d7dcc:	f241 2334 	movw	r3, #4660	; 0x1234
   d7dd0:	8083      	strh	r3, [r0, #4]
   d7dd2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7dd6:	80c3      	strh	r3, [r0, #6]
   d7dd8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ddc:	8103      	strh	r3, [r0, #8]
   d7dde:	2305      	movs	r3, #5
   d7de0:	8143      	strh	r3, [r0, #10]
   d7de2:	230b      	movs	r3, #11
   d7de4:	8183      	strh	r3, [r0, #12]
   d7de6:	2201      	movs	r2, #1
   d7de8:	2300      	movs	r3, #0
   d7dea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7df0:	2200      	movs	r2, #0
   d7df2:	611d      	str	r5, [r3, #16]
   d7df4:	615a      	str	r2, [r3, #20]
   d7df6:	bd38      	pop	{r3, r4, r5, pc}
   d7df8:	2003e294 	.word	0x2003e294

000d7dfc <rand>:
   d7dfc:	4b19      	ldr	r3, [pc, #100]	; (d7e64 <rand+0x68>)
   d7dfe:	b510      	push	{r4, lr}
   d7e00:	681c      	ldr	r4, [r3, #0]
   d7e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e04:	b9d3      	cbnz	r3, d7e3c <rand+0x40>
   d7e06:	2018      	movs	r0, #24
   d7e08:	f7fd fff0 	bl	d5dec <malloc>
   d7e0c:	f243 330e 	movw	r3, #13070	; 0x330e
   d7e10:	63a0      	str	r0, [r4, #56]	; 0x38
   d7e12:	8003      	strh	r3, [r0, #0]
   d7e14:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7e18:	8043      	strh	r3, [r0, #2]
   d7e1a:	f241 2334 	movw	r3, #4660	; 0x1234
   d7e1e:	8083      	strh	r3, [r0, #4]
   d7e20:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7e24:	80c3      	strh	r3, [r0, #6]
   d7e26:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7e2a:	8103      	strh	r3, [r0, #8]
   d7e2c:	2305      	movs	r3, #5
   d7e2e:	8143      	strh	r3, [r0, #10]
   d7e30:	230b      	movs	r3, #11
   d7e32:	8183      	strh	r3, [r0, #12]
   d7e34:	2201      	movs	r2, #1
   d7e36:	2300      	movs	r3, #0
   d7e38:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d7e3e:	4c0a      	ldr	r4, [pc, #40]	; (d7e68 <rand+0x6c>)
   d7e40:	690b      	ldr	r3, [r1, #16]
   d7e42:	6948      	ldr	r0, [r1, #20]
   d7e44:	4a09      	ldr	r2, [pc, #36]	; (d7e6c <rand+0x70>)
   d7e46:	435c      	muls	r4, r3
   d7e48:	fb02 4000 	mla	r0, r2, r0, r4
   d7e4c:	fba3 2302 	umull	r2, r3, r3, r2
   d7e50:	3201      	adds	r2, #1
   d7e52:	4403      	add	r3, r0
   d7e54:	f143 0300 	adc.w	r3, r3, #0
   d7e58:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7e5c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7e60:	bd10      	pop	{r4, pc}
   d7e62:	bf00      	nop
   d7e64:	2003e294 	.word	0x2003e294
   d7e68:	5851f42d 	.word	0x5851f42d
   d7e6c:	4c957f2d 	.word	0x4c957f2d

000d7e70 <strcmp>:
   d7e70:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7e74:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7e78:	2a01      	cmp	r2, #1
   d7e7a:	bf28      	it	cs
   d7e7c:	429a      	cmpcs	r2, r3
   d7e7e:	d0f7      	beq.n	d7e70 <strcmp>
   d7e80:	1ad0      	subs	r0, r2, r3
   d7e82:	4770      	bx	lr

000d7e84 <strcpy>:
   d7e84:	4603      	mov	r3, r0
   d7e86:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7e8a:	f803 2b01 	strb.w	r2, [r3], #1
   d7e8e:	2a00      	cmp	r2, #0
   d7e90:	d1f9      	bne.n	d7e86 <strcpy+0x2>
   d7e92:	4770      	bx	lr

000d7e94 <strdup>:
   d7e94:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <strdup+0xc>)
   d7e96:	4601      	mov	r1, r0
   d7e98:	6818      	ldr	r0, [r3, #0]
   d7e9a:	f000 b803 	b.w	d7ea4 <_strdup_r>
   d7e9e:	bf00      	nop
   d7ea0:	2003e294 	.word	0x2003e294

000d7ea4 <_strdup_r>:
   d7ea4:	b570      	push	{r4, r5, r6, lr}
   d7ea6:	4606      	mov	r6, r0
   d7ea8:	4608      	mov	r0, r1
   d7eaa:	460c      	mov	r4, r1
   d7eac:	f000 f80d 	bl	d7eca <strlen>
   d7eb0:	1c45      	adds	r5, r0, #1
   d7eb2:	4629      	mov	r1, r5
   d7eb4:	4630      	mov	r0, r6
   d7eb6:	f7fd ffb9 	bl	d5e2c <_malloc_r>
   d7eba:	4606      	mov	r6, r0
   d7ebc:	b118      	cbz	r0, d7ec6 <_strdup_r+0x22>
   d7ebe:	462a      	mov	r2, r5
   d7ec0:	4621      	mov	r1, r4
   d7ec2:	f7ff ff5f 	bl	d7d84 <memcpy>
   d7ec6:	4630      	mov	r0, r6
   d7ec8:	bd70      	pop	{r4, r5, r6, pc}

000d7eca <strlen>:
   d7eca:	4603      	mov	r3, r0
   d7ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7ed0:	2a00      	cmp	r2, #0
   d7ed2:	d1fb      	bne.n	d7ecc <strlen+0x2>
   d7ed4:	1a18      	subs	r0, r3, r0
   d7ed6:	3801      	subs	r0, #1
   d7ed8:	4770      	bx	lr

000d7eda <strncpy>:
   d7eda:	b510      	push	{r4, lr}
   d7edc:	4603      	mov	r3, r0
   d7ede:	b142      	cbz	r2, d7ef2 <strncpy+0x18>
   d7ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7ee4:	f803 4b01 	strb.w	r4, [r3], #1
   d7ee8:	3a01      	subs	r2, #1
   d7eea:	2c00      	cmp	r4, #0
   d7eec:	d1f7      	bne.n	d7ede <strncpy+0x4>
   d7eee:	441a      	add	r2, r3
   d7ef0:	e000      	b.n	d7ef4 <strncpy+0x1a>
   d7ef2:	bd10      	pop	{r4, pc}
   d7ef4:	4293      	cmp	r3, r2
   d7ef6:	d002      	beq.n	d7efe <strncpy+0x24>
   d7ef8:	f803 4b01 	strb.w	r4, [r3], #1
   d7efc:	e7fa      	b.n	d7ef4 <strncpy+0x1a>
   d7efe:	bd10      	pop	{r4, pc}

000d7f00 <_strtol_r>:
   d7f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7f04:	4680      	mov	r8, r0
   d7f06:	4840      	ldr	r0, [pc, #256]	; (d8008 <_strtol_r+0x108>)
   d7f08:	f8d0 9000 	ldr.w	r9, [r0]
   d7f0c:	460f      	mov	r7, r1
   d7f0e:	463d      	mov	r5, r7
   d7f10:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7f14:	eb09 0004 	add.w	r0, r9, r4
   d7f18:	7840      	ldrb	r0, [r0, #1]
   d7f1a:	f000 0008 	and.w	r0, r0, #8
   d7f1e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7f22:	b108      	cbz	r0, d7f28 <_strtol_r+0x28>
   d7f24:	462f      	mov	r7, r5
   d7f26:	e7f2      	b.n	d7f0e <_strtol_r+0xe>
   d7f28:	2c2d      	cmp	r4, #45	; 0x2d
   d7f2a:	d103      	bne.n	d7f34 <_strtol_r+0x34>
   d7f2c:	1cbd      	adds	r5, r7, #2
   d7f2e:	787c      	ldrb	r4, [r7, #1]
   d7f30:	2601      	movs	r6, #1
   d7f32:	e003      	b.n	d7f3c <_strtol_r+0x3c>
   d7f34:	2c2b      	cmp	r4, #43	; 0x2b
   d7f36:	bf04      	itt	eq
   d7f38:	787c      	ldrbeq	r4, [r7, #1]
   d7f3a:	1cbd      	addeq	r5, r7, #2
   d7f3c:	b113      	cbz	r3, d7f44 <_strtol_r+0x44>
   d7f3e:	2b10      	cmp	r3, #16
   d7f40:	d10a      	bne.n	d7f58 <_strtol_r+0x58>
   d7f42:	e05b      	b.n	d7ffc <_strtol_r+0xfc>
   d7f44:	2c30      	cmp	r4, #48	; 0x30
   d7f46:	d157      	bne.n	d7ff8 <_strtol_r+0xf8>
   d7f48:	7828      	ldrb	r0, [r5, #0]
   d7f4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7f4e:	2858      	cmp	r0, #88	; 0x58
   d7f50:	d14d      	bne.n	d7fee <_strtol_r+0xee>
   d7f52:	786c      	ldrb	r4, [r5, #1]
   d7f54:	2310      	movs	r3, #16
   d7f56:	3502      	adds	r5, #2
   d7f58:	2e00      	cmp	r6, #0
   d7f5a:	bf14      	ite	ne
   d7f5c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7f60:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7f64:	2700      	movs	r7, #0
   d7f66:	fbbc faf3 	udiv	sl, ip, r3
   d7f6a:	4638      	mov	r0, r7
   d7f6c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7f70:	eb09 0e04 	add.w	lr, r9, r4
   d7f74:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7f78:	f01e 0f04 	tst.w	lr, #4
   d7f7c:	d001      	beq.n	d7f82 <_strtol_r+0x82>
   d7f7e:	3c30      	subs	r4, #48	; 0x30
   d7f80:	e00b      	b.n	d7f9a <_strtol_r+0x9a>
   d7f82:	f01e 0e03 	ands.w	lr, lr, #3
   d7f86:	d01b      	beq.n	d7fc0 <_strtol_r+0xc0>
   d7f88:	f1be 0f01 	cmp.w	lr, #1
   d7f8c:	bf0c      	ite	eq
   d7f8e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7f92:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7f96:	ebce 0404 	rsb	r4, lr, r4
   d7f9a:	42a3      	cmp	r3, r4
   d7f9c:	dd10      	ble.n	d7fc0 <_strtol_r+0xc0>
   d7f9e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7fa2:	d00a      	beq.n	d7fba <_strtol_r+0xba>
   d7fa4:	4550      	cmp	r0, sl
   d7fa6:	d806      	bhi.n	d7fb6 <_strtol_r+0xb6>
   d7fa8:	d101      	bne.n	d7fae <_strtol_r+0xae>
   d7faa:	4564      	cmp	r4, ip
   d7fac:	dc03      	bgt.n	d7fb6 <_strtol_r+0xb6>
   d7fae:	fb03 4000 	mla	r0, r3, r0, r4
   d7fb2:	2701      	movs	r7, #1
   d7fb4:	e001      	b.n	d7fba <_strtol_r+0xba>
   d7fb6:	f04f 37ff 	mov.w	r7, #4294967295
   d7fba:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7fbe:	e7d7      	b.n	d7f70 <_strtol_r+0x70>
   d7fc0:	1c7b      	adds	r3, r7, #1
   d7fc2:	d10c      	bne.n	d7fde <_strtol_r+0xde>
   d7fc4:	2e00      	cmp	r6, #0
   d7fc6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7fca:	bf14      	ite	ne
   d7fcc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7fd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7fd4:	f8c8 3000 	str.w	r3, [r8]
   d7fd8:	b92a      	cbnz	r2, d7fe6 <_strtol_r+0xe6>
   d7fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7fde:	b106      	cbz	r6, d7fe2 <_strtol_r+0xe2>
   d7fe0:	4240      	negs	r0, r0
   d7fe2:	b172      	cbz	r2, d8002 <_strtol_r+0x102>
   d7fe4:	b107      	cbz	r7, d7fe8 <_strtol_r+0xe8>
   d7fe6:	1e69      	subs	r1, r5, #1
   d7fe8:	6011      	str	r1, [r2, #0]
   d7fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7fee:	2430      	movs	r4, #48	; 0x30
   d7ff0:	2b00      	cmp	r3, #0
   d7ff2:	d1b1      	bne.n	d7f58 <_strtol_r+0x58>
   d7ff4:	2308      	movs	r3, #8
   d7ff6:	e7af      	b.n	d7f58 <_strtol_r+0x58>
   d7ff8:	230a      	movs	r3, #10
   d7ffa:	e7ad      	b.n	d7f58 <_strtol_r+0x58>
   d7ffc:	2c30      	cmp	r4, #48	; 0x30
   d7ffe:	d0a3      	beq.n	d7f48 <_strtol_r+0x48>
   d8000:	e7aa      	b.n	d7f58 <_strtol_r+0x58>
   d8002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8006:	bf00      	nop
   d8008:	2003e230 	.word	0x2003e230

000d800c <strtol>:
   d800c:	4613      	mov	r3, r2
   d800e:	460a      	mov	r2, r1
   d8010:	4601      	mov	r1, r0
   d8012:	4802      	ldr	r0, [pc, #8]	; (d801c <strtol+0x10>)
   d8014:	6800      	ldr	r0, [r0, #0]
   d8016:	f7ff bf73 	b.w	d7f00 <_strtol_r>
   d801a:	bf00      	nop
   d801c:	2003e294 	.word	0x2003e294

000d8020 <dynalib_user>:
   d8020:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d8030:	00000000                                ....

000d8034 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d803c:	000d40d1 000d40e5 20535047 74696e49     .@...@..GPS Init
   d804c:	696c6169 676e697a 74614c00 64757469     ializing.Latitud
   d805c:	6f4c0065 7469676e 00656475 69746c41     e.Longitude.Alti
   d806c:	65647574 62695600 69746172 25006e6f     tude.Vibration.%
   d807c:	70670064 61645f73 50006174 696c6275     d.gps_data.Publi
   d808c:	54006873 3a656d69 32302520 30253a69     sh.Time: %02i:%0
   d809c:	253a6932 3a693230 69323025 2d2d2d20     2i:%02i:%02i ---
   d80ac:	616c0020 25203a74 6c202c66 3a676e6f      .lat: %f, long:
   d80bc:	2c662520 746c6120 6625203a 25000a20      %f, alt: %f ..%
   d80cc:	6d20756c 696c6c69 6f636573 2073646e     lu milliseconds 
   d80dc:	67206f74 47207465 66205350 54007869     to get GPS fix.T
   d80ec:	3a656d69 32302520 30253a69 253a6932     ime: %02i:%02i:%
   d80fc:	20693230 616c000a 20202074 20662520     02i ..lat    %f 
   d810c:	6e6f6c0a 66252067 6c610a20 66252074     .long %f .alt %f
   d811c:	6173000a 696c6574 20736574 0a206925     ..satelites %i .
   d812c:	206f6e00 61636f6c 6e6f6974 00000000     .no location....

000d813c <_ZTV16Adafruit_SSD1306>:
	...
   d8144:	000d40cd 000d4529 000d4fa1 000d60fd     .@..)E...O...`..
   d8154:	000d486d 000d4ca1 000d46f5 000d4581     mH...L...F...E..
   d8164:	000d4d61 000d4df7 000d4e2f 000d4e4b     aM...M../N..KN..

000d8174 <_ZTV12Adafruit_GFX>:
	...
   d8184:	000d4fa1 000d60fd 000d40a9 000d4ca1     .O...`...@...L..
   d8194:	000d4dc1 000d4ddd 000d4d61 000d4df7     .M...M..aM...M..
   d81a4:	000d4e2f 000d4e4b                       /N..KN..

000d81ac <_ZL4font>:
   d81ac:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d81bc:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d81cc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d81dc:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d81ec:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d81fc:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d820c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d821c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d822c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d823c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d824c:	00000000 5f000000 07000000 14000700     ......._........
   d825c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d826c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d827c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d828c:	08080800 00000808 20006060 02040810     ........``. ....
   d829c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d82ac:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d82bc:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d82cc:	00001e29 00000014 00003440 22140800     ).......@4....."
   d82dc:	14141441 41001414 02081422 06095901     A......A"....Y..
   d82ec:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d82fc:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d830c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d831c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d832c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d833c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d834c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d835c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d836c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d837c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d838c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d839c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d83ac:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d83bc:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d83cc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d83dc:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d83ec:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d83fc:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d840c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d841c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d842c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d843c:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   d844c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d845c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d846c:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   d847c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d848c:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   d849c:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   d84ac:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   d84bc:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d84cc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d84dc:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d84ec:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d84fc:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d850c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d851c:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   d852c:	00ff1010 ff141414 ff101000 1010ff00     ................
   d853c:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   d854c:	1414ff00 14fc04f4 1f101714 101f1010     ................
   d855c:	1414141f 1010001f 0000f010 101f0000     ................
   d856c:	1f101010 10101010 000010f0 1010ff00     ................
   d857c:	10101010 ff101010 00000010 000014ff     ................
   d858c:	00ff00ff 17101f00 04fc0000 171414f4     ................
   d859c:	14141710 00f404f4 f700ff00 14141414     ................
   d85ac:	f7141414 1414f700 10141714 1f101f10     ................
   d85bc:	f4141414 f0101014 0000f010 001f101f     ................
   d85cc:	141f0000 fc000000 f0000014 1010f010     ................
   d85dc:	14ff10ff 14ff1414 1f101010 00000000     ................
   d85ec:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   d85fc:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   d860c:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   d861c:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   d862c:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   d863c:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   d864c:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   d865c:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   d866c:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   d867c:	06362436 060f090f 18180000 10000000     6$6.............
   d868c:	40300010 000101ff 1e01011f 171d1900     ..0@............
   d869c:	3c3c0012 00003c3c 00000000              ..<<<<......

000d86a8 <_ZTV10JsonBuffer>:
	...
   d86b0:	000d5035 000d5051                       5P..QP..

000d86b8 <_ZTV10JsonWriter>:
	...
   d86c0:	000d5065 000d5079 00756c25 78343025     eP..yP..%lu.%04x
   d86d0:	25755c00 00583430 65757274 6c616600     .\u%04X.true.fal
   d86e0:	25006573 00662a2e 25006625 666c2a2e     se.%.*f.%f.%.*lf
   d86f0:	666c2500 52504700 4700434d 41474750     .%lf.GPRMC.GPGGA
   d8700:	4e004e00 4500454e 4500454e 53004553     .N.NNE.ENE.ESE.S
   d8710:	53004553 57535300 57535700 574e5700     SE.S.SSW.WSW.WNW
   d8720:	574e4e00 00000000                       .NNW....

000d8728 <_ZTVN5spark13EthernetClassE>:
	...
   d8730:	000d5e9b 000d5e91 000d5e87 000d5e7d     .^...^...^..}^..
   d8740:	000d5e71 000d5e65 000d5e59 000d5e51     q^..e^..Y^..Q^..
   d8750:	000d5e47 000d5e3d 000d6fc9              G^..=^...o..

000d875c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d875c:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d876c:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d877c:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d878c:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d879c:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d87ac:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d87bc:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d87cc:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d87dc:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d87ec:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d87fc:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   d880c:	63006e66 0065646f 61746564 6e006c69     fn.code.detail.n
   d881c:	00656e6f 63617274 6e690065 77006f66     one.trace.info.w
   d882c:	006e7261 6f727265 61700072 0063696e     arn.error.panic.
   d883c:	006c6c61 2b25005a 3a643330 75323025     all.Z.%+03d:%02u
   d884c:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
   d885c:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

000d886c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8874:	000d63c5 000d63cb 000d640f 000d63d9     .c...c...d...c..
   d8884:	000d63c7                                .c..

000d8888 <_ZTV9IPAddress>:
	...
   d8890:	000d695d 000d694d 000d694f              ]i..Mi..Oi..

000d889c <_ZTV9USBSerial>:
	...
   d88a4:	000d6a35 000d6a85 000d6a93 000d60fd     5j...j...j...`..
   d88b4:	000d6a71 000d6a37 000d6a4d 000d6a7f     qj..7j..Mj...j..
   d88c4:	000d6a63 000d6a31                       cj..1j..

000d88cc <_ZTVN5spark13CellularClassE>:
	...
   d88d4:	000d6b9f 000d6b95 000d6b8b 000d6b41     .k...k...k..Ak..
   d88e4:	000d6b7f 000d6b73 000d6b67 000d6b5f     .k..sk..gk.._k..
   d88f4:	000d6b55 000d6b4b 000d6fc9              Uk..Kk...o..

000d8900 <_ZTV11USARTSerial>:
	...
   d8908:	000d6bd9 000d6c29 000d6c37 000d60fd     .k..)l..7l...`..
   d8918:	000d6bed 000d6c0f 000d6bfb 000d6c23     .k...l...k..#l..
   d8928:	000d6bdb 000d6bdf                       .k...k..

000d8930 <_ZTV7TwoWire>:
	...
   d8938:	000d6d11 000d6d5b 000d6d33 000d6d13     .m..[m..3m...m..
   d8948:	000d6d3b 000d6d43 000d6d4b 000d6d53     ;m..Cm..Km..Sm..

000d8958 <_ZTVN5spark9MeshClassE>:
	...
   d8960:	000d6e45 000d6e3b 000d6e31 000d6e27     En..;n..1n..'n..
   d8970:	000d6e1b 000d6e0f 000d6e03 000d6dfb     .n...n...n...m..
   d8980:	000d6df1 000d6de7 000d6fc9              .m...m...o..

000d898c <_ZTVN5spark12NetworkClassE>:
	...
   d8994:	000d6f61 000d6f6b 000d6f75 000d6f7f     ao..ko..uo...o..
   d89a4:	000d6f89 000d6f95 000d6fa1 000d6fad     .o...o...o...o..
   d89b4:	000d6fb5 000d6fbf 000d6fc9              .o...o...o..

000d89c0 <_ZSt7nothrow>:
	...

000d89c1 <_ctype_>:
   d89c1:	20202000 20202020 28282020 20282828     .         ((((( 
   d89d1:	20202020 20202020 20202020 20202020                     
   d89e1:	10108820 10101010 10101010 10101010      ...............
   d89f1:	04040410 04040404 10040404 10101010     ................
   d8a01:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8a11:	01010101 01010101 01010101 10101010     ................
   d8a21:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8a31:	02020202 02020202 02020202 10101010     ................
   d8a41:	00000020 00000000 00000000 00000000      ...............
	...

000d8ac4 <__sf_fake_stdin>:
	...

000d8ae4 <__sf_fake_stdout>:
	...

000d8b04 <__sf_fake_stderr>:
	...

000d8b24 <link_const_variable_data_end>:
   d8b24:	000d4539 	.word	0x000d4539
   d8b28:	000d4c9d 	.word	0x000d4c9d
   d8b2c:	000d5031 	.word	0x000d5031
   d8b30:	000d5301 	.word	0x000d5301
   d8b34:	000d5951 	.word	0x000d5951
   d8b38:	000d5ea5 	.word	0x000d5ea5
   d8b3c:	000d6049 	.word	0x000d6049
   d8b40:	000d60d5 	.word	0x000d60d5
   d8b44:	000d6231 	.word	0x000d6231
   d8b48:	000d6241 	.word	0x000d6241
   d8b4c:	000d6299 	.word	0x000d6299
   d8b50:	000d6ba9 	.word	0x000d6ba9
   d8b54:	000d6f11 	.word	0x000d6f11
   d8b58:	000d7095 	.word	0x000d7095
   d8b5c:	000d729d 	.word	0x000d729d
   d8b60:	000d7321 	.word	0x000d7321
   d8b64:	000d73e5 	.word	0x000d73e5
   d8b68:	000d74a9 	.word	0x000d74a9

000d8b6c <link_constructors_end>:
   d8b6c:	00000000 	.word	0x00000000
