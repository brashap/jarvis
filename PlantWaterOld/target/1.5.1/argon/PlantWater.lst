
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.1/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008270  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dc290  000dc290  0000c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dc298  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  2003e0a8  000dc29c  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000067c  2003e178  2003e178  0002e178  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dc368  000dc368  0002c368  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dc390  000dc390  0002c390  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00110e12  00000000  00000000  0002c394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001578a  00000000  00000000  0013d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002755c  00000000  00000000  00152930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002fb0  00000000  00000000  00179e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005a10  00000000  00000000  0017ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c432  00000000  00000000  0018284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00034a87  00000000  00000000  001bec7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00110d9e  00000000  00000000  001f3705  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f4b4  00000000  00000000  003044a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fe41 	bl	dacb8 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fe61 	bl	dad04 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0a8 	.word	0x2003e0a8
   d404c:	000dc29c 	.word	0x000dc29c
   d4050:	2003e174 	.word	0x2003e174
   d4054:	2003e178 	.word	0x2003e178
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	f002 ffd1 	bl	d7004 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc290 	.word	0x000dc290
   d4084:	000dc248 	.word	0x000dc248

000d4088 <module_user_setup>:
   d4088:	f000 b838 	b.w	d40fc <setup>

000d408c <module_user_loop>:
   d408c:	b508      	push	{r3, lr}
   d408e:	f000 fb37 	bl	d4700 <loop>
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4096:	f002 bf77 	b.w	d6f88 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b9ab 	b.w	d63f4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b9b1 	b.w	d6404 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f002 b9af 	b.w	d6404 <free>
	...

000d40a8 <__cxa_pure_virtual>:
   d40a8:	b508      	push	{r3, lr}
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f8c4 	bl	d623c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5f7d 	.word	0x000d5f7d

000d40bc <__cxa_guard_acquire>:
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f001 fd60 	bl	d5b9c <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000db6d8 	.word	0x000db6d8

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 f9e3 	bl	d84bc <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
	...

000d40fc <setup>:
int button;
int i;

int delayStart;

void setup() {
   d40fc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40fe:	f003 fb5b 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4102:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4106:	f003 fb4b 	bl	d77a0 <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d410a:	4b36      	ldr	r3, [pc, #216]	; (d41e4 <setup+0xe8>)
  pinMode(pumpPin,OUTPUT);
   d410c:	4c36      	ldr	r4, [pc, #216]	; (d41e8 <setup+0xec>)

int delayStart;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d410e:	8818      	ldrh	r0, [r3, #0]
   d4110:	2100      	movs	r1, #0
   d4112:	f004 f92f 	bl	d8374 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d4116:	2101      	movs	r1, #1
   d4118:	8820      	ldrh	r0, [r4, #0]
   d411a:	f004 f92b 	bl	d8374 <pinMode>
  pinMode(D7,OUTPUT);
   d411e:	2101      	movs	r1, #1
   d4120:	2007      	movs	r0, #7
   d4122:	f004 f927 	bl	d8374 <pinMode>
  digitalWrite(pumpPin,LOW);
   d4126:	2100      	movs	r1, #0
   d4128:	8820      	ldrh	r0, [r4, #0]
   d412a:	f004 f934 	bl	d8396 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d412e:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4132:	f002 fe6b 	bl	d6e0c <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4136:	f002 f935 	bl	d63a4 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d413a:	b110      	cbz	r0, d4142 <setup+0x46>
            return false;
        }
        return spark_sync_time(NULL);
   d413c:	2000      	movs	r0, #0
   d413e:	f002 f941 	bl	d63c4 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4142:	2300      	movs	r3, #0
   d4144:	2202      	movs	r2, #2
   d4146:	4929      	ldr	r1, [pc, #164]	; (d41ec <setup+0xf0>)
   d4148:	4829      	ldr	r0, [pc, #164]	; (d41f0 <setup+0xf4>)
   d414a:	f002 f91b 	bl	d6384 <spark_variable>
   d414e:	2300      	movs	r3, #0
   d4150:	2209      	movs	r2, #9
   d4152:	4928      	ldr	r1, [pc, #160]	; (d41f4 <setup+0xf8>)
   d4154:	4828      	ldr	r0, [pc, #160]	; (d41f8 <setup+0xfc>)
   d4156:	f002 f915 	bl	d6384 <spark_variable>
   d415a:	2300      	movs	r3, #0
   d415c:	2202      	movs	r2, #2
   d415e:	4927      	ldr	r1, [pc, #156]	; (d41fc <setup+0x100>)
   d4160:	4827      	ldr	r0, [pc, #156]	; (d4200 <setup+0x104>)
   d4162:	f002 f90f 	bl	d6384 <spark_variable>
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4166:	4927      	ldr	r1, [pc, #156]	; (d4204 <setup+0x108>)
   d4168:	4827      	ldr	r0, [pc, #156]	; (d4208 <setup+0x10c>)
   d416a:	f001 fac9 	bl	d5700 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d416e:	f003 fb23 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4172:	4926      	ldr	r1, [pc, #152]	; (d420c <setup+0x110>)
   d4174:	f002 fcef 	bl	d6b56 <_ZN5Print7printlnEPK19__FlashStringHelper>
    
    status = bme.begin(0x76);
   d4178:	2176      	movs	r1, #118	; 0x76
   d417a:	4825      	ldr	r0, [pc, #148]	; (d4210 <setup+0x114>)
   d417c:	f001 f966 	bl	d544c <_ZN15Adafruit_BME2805beginEh>
   d4180:	4b24      	ldr	r3, [pc, #144]	; (d4214 <setup+0x118>)
   d4182:	6018      	str	r0, [r3, #0]
    if (!status)
   d4184:	bb60      	cbnz	r0, d41e0 <setup+0xe4>
    {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d4186:	f003 fb17 	bl	d77b8 <_Z16_fetch_usbserialv>
   d418a:	4923      	ldr	r1, [pc, #140]	; (d4218 <setup+0x11c>)
   d418c:	f002 fcd9 	bl	d6b42 <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d4190:	f003 fb12 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4194:	4921      	ldr	r1, [pc, #132]	; (d421c <setup+0x120>)
   d4196:	f002 fcc1 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d419a:	f003 fb0d 	bl	d77b8 <_Z16_fetch_usbserialv>
   d419e:	4604      	mov	r4, r0
   d41a0:	481b      	ldr	r0, [pc, #108]	; (d4210 <setup+0x114>)
   d41a2:	f000 fcd3 	bl	d4b4c <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d41a6:	2210      	movs	r2, #16
   d41a8:	4601      	mov	r1, r0
   d41aa:	4620      	mov	r0, r4
   d41ac:	f002 fcd5 	bl	d6b5a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41b0:	4620      	mov	r0, r4
   d41b2:	f002 fcba 	bl	d6b2a <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d41b6:	f003 faff 	bl	d77b8 <_Z16_fetch_usbserialv>
   d41ba:	4919      	ldr	r1, [pc, #100]	; (d4220 <setup+0x124>)
   d41bc:	f002 fcae 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d41c0:	f003 fafa 	bl	d77b8 <_Z16_fetch_usbserialv>
   d41c4:	4917      	ldr	r1, [pc, #92]	; (d4224 <setup+0x128>)
   d41c6:	f002 fca9 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d41ca:	f003 faf5 	bl	d77b8 <_Z16_fetch_usbserialv>
   d41ce:	4916      	ldr	r1, [pc, #88]	; (d4228 <setup+0x12c>)
   d41d0:	f002 fca4 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d41d4:	f003 faf0 	bl	d77b8 <_Z16_fetch_usbserialv>
   d41d8:	4914      	ldr	r1, [pc, #80]	; (d422c <setup+0x130>)
   d41da:	f002 fc9f 	bl	d6b1c <_ZN5Print5printEPKc>
   d41de:	e7fe      	b.n	d41de <setup+0xe2>
   d41e0:	bd10      	pop	{r4, pc}
   d41e2:	bf00      	nop
   d41e4:	2003e0ac 	.word	0x2003e0ac
   d41e8:	2003e0b0 	.word	0x2003e0b0
   d41ec:	2003e37c 	.word	0x2003e37c
   d41f0:	000db971 	.word	0x000db971
   d41f4:	2003e1c0 	.word	0x2003e1c0
   d41f8:	000db953 	.word	0x000db953
   d41fc:	2003e334 	.word	0x2003e334
   d4200:	000db6e0 	.word	0x000db6e0
   d4204:	2003e2c0 	.word	0x2003e2c0
   d4208:	2003e1d8 	.word	0x2003e1d8
   d420c:	000db6ee 	.word	0x000db6ee
   d4210:	2003e338 	.word	0x2003e338
   d4214:	2003e2f8 	.word	0x2003e2f8
   d4218:	000db6fa 	.word	0x000db6fa
   d421c:	000db742 	.word	0x000db742
   d4220:	000db753 	.word	0x000db753
   d4224:	000db79a 	.word	0x000db79a
   d4228:	000db7c4 	.word	0x000db7c4
   d422c:	000db7ee 	.word	0x000db7ee

000d4230 <_Z10waterPlanti>:
          }
        }
    }    
}

int waterPlant(int moistVal) {
   d4230:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d4232:	4c16      	ldr	r4, [pc, #88]	; (d428c <_Z10waterPlanti+0x5c>)
   d4234:	4d16      	ldr	r5, [pc, #88]	; (d4290 <_Z10waterPlanti+0x60>)
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	4283      	cmp	r3, r0
   d423a:	da1b      	bge.n	d4274 <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d423c:	f003 fabc 	bl	d77b8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4a14      	ldr	r2, [pc, #80]	; (d4294 <_Z10waterPlanti+0x64>)
   d4244:	9300      	str	r3, [sp, #0]
   d4246:	2101      	movs	r1, #1
   d4248:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d424a:	4c13      	ldr	r4, [pc, #76]	; (d4298 <_Z10waterPlanti+0x68>)
   d424c:	f002 fd8d 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
}

int waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4254:	f002 fe4a 	bl	d6eec <delay>
    digitalWrite(pumpPin,HIGH);
   d4258:	2101      	movs	r1, #1
   d425a:	8820      	ldrh	r0, [r4, #0]
   d425c:	f004 f89b 	bl	d8396 <digitalWrite>
    delay(waterTime);
   d4260:	4b0e      	ldr	r3, [pc, #56]	; (d429c <_Z10waterPlanti+0x6c>)
   d4262:	6818      	ldr	r0, [r3, #0]
   d4264:	f002 fe42 	bl	d6eec <delay>
    digitalWrite(pumpPin,LOW);
   d4268:	8820      	ldrh	r0, [r4, #0]
   d426a:	2100      	movs	r1, #0
   d426c:	f004 f893 	bl	d8396 <digitalWrite>
   d4270:	2001      	movs	r0, #1
   d4272:	e009      	b.n	d4288 <_Z10waterPlanti+0x58>
    return 1;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d4274:	f003 faa0 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	9300      	str	r3, [sp, #0]
   d427c:	4a08      	ldr	r2, [pc, #32]	; (d42a0 <_Z10waterPlanti+0x70>)
   d427e:	682b      	ldr	r3, [r5, #0]
   d4280:	2101      	movs	r1, #1
   d4282:	f002 fd72 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
    return 0;
   d4286:	2000      	movs	r0, #0
  }
    
}
   d4288:	b003      	add	sp, #12
   d428a:	bd30      	pop	{r4, r5, pc}
   d428c:	2003e0a8 	.word	0x2003e0a8
   d4290:	2003e37c 	.word	0x2003e37c
   d4294:	000db818 	.word	0x000db818
   d4298:	2003e0b0 	.word	0x2003e0b0
   d429c:	2003e0b4 	.word	0x2003e0b4
   d42a0:	000db835 	.word	0x000db835

000d42a4 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d42a4:	b570      	push	{r4, r5, r6, lr}
   d42a6:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d42a8:	f002 fe0f 	bl	d6eca <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d42ac:	4c1f      	ldr	r4, [pc, #124]	; (d432c <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d42ae:	4e20      	ldr	r6, [pc, #128]	; (d4330 <_Z10printMoisti+0x8c>)
   d42b0:	4d20      	ldr	r5, [pc, #128]	; (d4334 <_Z10printMoisti+0x90>)
   d42b2:	4601      	mov	r1, r0
   d42b4:	a802      	add	r0, sp, #8
   d42b6:	f002 fdc5 	bl	d6e44 <_ZN9TimeClass7timeStrEl>
   d42ba:	a902      	add	r1, sp, #8
   d42bc:	4620      	mov	r0, r4
   d42be:	f002 fb6c 	bl	d699a <_ZN6StringaSEOS_>
   d42c2:	a802      	add	r0, sp, #8
   d42c4:	f002 faf2 	bl	d68ac <_ZN6StringD1Ev>
   d42c8:	4631      	mov	r1, r6
   d42ca:	4620      	mov	r0, r4
   d42cc:	2300      	movs	r3, #0
   d42ce:	2219      	movs	r2, #25
   d42d0:	f002 fba2 	bl	d6a18 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d42d4:	4621      	mov	r1, r4
   d42d6:	4c18      	ldr	r4, [pc, #96]	; (d4338 <_Z10printMoisti+0x94>)
   d42d8:	2313      	movs	r3, #19
   d42da:	220b      	movs	r2, #11
   d42dc:	a802      	add	r0, sp, #8
   d42de:	f002 fbb3 	bl	d6a48 <_ZNK6String9substringEjj>
   d42e2:	a902      	add	r1, sp, #8
   d42e4:	4620      	mov	r0, r4
   d42e6:	f002 fb58 	bl	d699a <_ZN6StringaSEOS_>
   d42ea:	a802      	add	r0, sp, #8
   d42ec:	f002 fade 	bl	d68ac <_ZN6StringD1Ev>
   d42f0:	2300      	movs	r3, #0
   d42f2:	2209      	movs	r2, #9
   d42f4:	4629      	mov	r1, r5
   d42f6:	4620      	mov	r0, r4
   d42f8:	f002 fb8e 	bl	d6a18 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d42fc:	f003 fa5c 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4300:	6821      	ldr	r1, [r4, #0]
   d4302:	f002 fc1e 	bl	d6b42 <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d4306:	f003 fa57 	bl	d77b8 <_Z16_fetch_usbserialv>
   d430a:	4b0c      	ldr	r3, [pc, #48]	; (d433c <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d430c:	4a0c      	ldr	r2, [pc, #48]	; (d4340 <_Z10printMoisti+0x9c>)
   d430e:	681b      	ldr	r3, [r3, #0]
   d4310:	9300      	str	r3, [sp, #0]
   d4312:	2100      	movs	r1, #0
   d4314:	4633      	mov	r3, r6
   d4316:	f002 fd28 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d431a:	f003 fa4d 	bl	d77b8 <_Z16_fetch_usbserialv>
   d431e:	462b      	mov	r3, r5
   d4320:	4a08      	ldr	r2, [pc, #32]	; (d4344 <_Z10printMoisti+0xa0>)
   d4322:	2100      	movs	r1, #0
   d4324:	f002 fd21 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
}
   d4328:	b006      	add	sp, #24
   d432a:	bd70      	pop	{r4, r5, r6, pc}
   d432c:	2003e324 	.word	0x2003e324
   d4330:	2003e388 	.word	0x2003e388
   d4334:	2003e17c 	.word	0x2003e17c
   d4338:	2003e1c8 	.word	0x2003e1c8
   d433c:	2003e37c 	.word	0x2003e37c
   d4340:	000db851 	.word	0x000db851
   d4344:	000db874 	.word	0x000db874

000d4348 <_Z11printValuesv>:
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d4348:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d434a:	f003 fa35 	bl	d77b8 <_Z16_fetch_usbserialv>
   d434e:	492d      	ldr	r1, [pc, #180]	; (d4404 <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d4350:	4c2d      	ldr	r4, [pc, #180]	; (d4408 <_Z11printValuesv+0xc0>)
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d4352:	f002 fbe3 	bl	d6b1c <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4356:	f003 fa2f 	bl	d77b8 <_Z16_fetch_usbserialv>
   d435a:	4605      	mov	r5, r0
   d435c:	4620      	mov	r0, r4
   d435e:	f000 fcc3 	bl	d4ce8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4362:	2102      	movs	r1, #2
   d4364:	4628      	mov	r0, r5
   d4366:	f002 fcd7 	bl	d6d18 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d436a:	f003 fa25 	bl	d77b8 <_Z16_fetch_usbserialv>
   d436e:	4927      	ldr	r1, [pc, #156]	; (d440c <_Z11printValuesv+0xc4>)
   d4370:	f002 fbe7 	bl	d6b42 <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4374:	f003 fa20 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4378:	4925      	ldr	r1, [pc, #148]	; (d4410 <_Z11printValuesv+0xc8>)
   d437a:	f002 fbcf 	bl	d6b1c <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d437e:	f003 fa1b 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4382:	4605      	mov	r5, r0
   d4384:	4620      	mov	r0, r4
   d4386:	f000 fcdd 	bl	d4d44 <_ZN15Adafruit_BME28012readPressureEv>
   d438a:	eddf 7a22 	vldr	s15, [pc, #136]	; d4414 <_Z11printValuesv+0xcc>
   d438e:	2102      	movs	r1, #2
   d4390:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4394:	4628      	mov	r0, r5
   d4396:	f002 fcbf 	bl	d6d18 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d439a:	f003 fa0d 	bl	d77b8 <_Z16_fetch_usbserialv>
   d439e:	491e      	ldr	r1, [pc, #120]	; (d4418 <_Z11printValuesv+0xd0>)
   d43a0:	f002 fbcf 	bl	d6b42 <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d43a4:	f003 fa08 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43a8:	491c      	ldr	r1, [pc, #112]	; (d441c <_Z11printValuesv+0xd4>)
   d43aa:	f002 fbb7 	bl	d6b1c <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d43ae:	f003 fa03 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43b2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d4420 <_Z11printValuesv+0xd8>
   d43b6:	4605      	mov	r5, r0
   d43b8:	4620      	mov	r0, r4
   d43ba:	f000 fda1 	bl	d4f00 <_ZN15Adafruit_BME28012readAltitudeEf>
   d43be:	2102      	movs	r1, #2
   d43c0:	4628      	mov	r0, r5
   d43c2:	f002 fca9 	bl	d6d18 <_ZN5Print5printEfi>
    Serial.println(" m");
   d43c6:	f003 f9f7 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43ca:	4916      	ldr	r1, [pc, #88]	; (d4424 <_Z11printValuesv+0xdc>)
   d43cc:	f002 fbb9 	bl	d6b42 <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d43d0:	f003 f9f2 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43d4:	4914      	ldr	r1, [pc, #80]	; (d4428 <_Z11printValuesv+0xe0>)
   d43d6:	f002 fba1 	bl	d6b1c <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d43da:	f003 f9ed 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43de:	4605      	mov	r5, r0
   d43e0:	4620      	mov	r0, r4
   d43e2:	f000 fe2f 	bl	d5044 <_ZN15Adafruit_BME28012readHumidityEv>
   d43e6:	2102      	movs	r1, #2
   d43e8:	4628      	mov	r0, r5
   d43ea:	f002 fc95 	bl	d6d18 <_ZN5Print5printEfi>
    Serial.println(" %");
   d43ee:	f003 f9e3 	bl	d77b8 <_Z16_fetch_usbserialv>
   d43f2:	490e      	ldr	r1, [pc, #56]	; (d442c <_Z11printValuesv+0xe4>)
   d43f4:	f002 fba5 	bl	d6b42 <_ZN5Print7printlnEPKc>

    Serial.println();
   d43f8:	f003 f9de 	bl	d77b8 <_Z16_fetch_usbserialv>
}
   d43fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d4400:	f002 bb93 	b.w	d6b2a <_ZN5Print7printlnEv>
   d4404:	000db885 	.word	0x000db885
   d4408:	2003e338 	.word	0x2003e338
   d440c:	000db894 	.word	0x000db894
   d4410:	000db898 	.word	0x000db898
   d4414:	42c80000 	.word	0x42c80000
   d4418:	000db8a4 	.word	0x000db8a4
   d441c:	000db8a9 	.word	0x000db8a9
   d4420:	447d5000 	.word	0x447d5000
   d4424:	000db8bd 	.word	0x000db8bd
   d4428:	000db8c0 	.word	0x000db8c0
   d442c:	000db8cc 	.word	0x000db8cc

000d4430 <_Z7getDustv>:
}

float getDust() {
   d4430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d4434:	2100      	movs	r1, #0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4436:	ed2d 8b02 	vpush	{d8}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d443a:	2008      	movs	r0, #8
   d443c:	f003 ff9a 	bl	d8374 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4440:	f001 fda4 	bl	d5f8c <HAL_Timer_Get_Milli_Seconds>
   d4444:	4605      	mov	r5, r0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4446:	2400      	movs	r4, #0

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4448:	f247 5630 	movw	r6, #30000	; 0x7530

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
   d444c:	2100      	movs	r1, #0
   d444e:	2008      	movs	r0, #8
   d4450:	f003 ffe4 	bl	d841c <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d4454:	4404      	add	r4, r0
   d4456:	f001 fd99 	bl	d5f8c <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d445a:	1b40      	subs	r0, r0, r5
   d445c:	42b0      	cmp	r0, r6
   d445e:	d9f5      	bls.n	d444c <_Z7getDustv+0x1c>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4460:	4620      	mov	r0, r4
   d4462:	f005 fc03 	bl	d9c6c <__aeabi_ui2d>
   d4466:	a340      	add	r3, pc, #256	; (adr r3, d4568 <_Z7getDustv+0x138>)
   d4468:	e9d3 2300 	ldrd	r2, r3, [r3]
   d446c:	f005 fd9e 	bl	d9fac <__aeabi_ddiv>
   d4470:	f005 ff6a 	bl	da348 <__aeabi_d2f>
   d4474:	ee08 0a90 	vmov	s17, r0
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d4478:	f005 fc1a 	bl	d9cb0 <__aeabi_f2d>
   d447c:	4606      	mov	r6, r0
   d447e:	460f      	mov	r7, r1
   d4480:	ed9f 1b33 	vldr	d1, [pc, #204]	; d4550 <_Z7getDustv+0x120>
   d4484:	ec47 6b10 	vmov	d0, r6, r7
   d4488:	f004 f976 	bl	d8778 <pow>
   d448c:	a338      	add	r3, pc, #224	; (adr r3, d4570 <_Z7getDustv+0x140>)
   d448e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4492:	ec51 0b10 	vmov	r0, r1, d0
   d4496:	f005 fc5f 	bl	d9d58 <__aeabi_dmul>
   d449a:	4632      	mov	r2, r6
   d449c:	463b      	mov	r3, r7
   d449e:	4680      	mov	r8, r0
   d44a0:	4689      	mov	r9, r1
   d44a2:	4630      	mov	r0, r6
   d44a4:	4639      	mov	r1, r7
   d44a6:	f005 fc57 	bl	d9d58 <__aeabi_dmul>
   d44aa:	a333      	add	r3, pc, #204	; (adr r3, d4578 <_Z7getDustv+0x148>)
   d44ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44b0:	f005 fc52 	bl	d9d58 <__aeabi_dmul>
   d44b4:	4602      	mov	r2, r0
   d44b6:	460b      	mov	r3, r1
   d44b8:	4640      	mov	r0, r8
   d44ba:	4649      	mov	r1, r9
   d44bc:	f005 fa98 	bl	d99f0 <__aeabi_dsub>
   d44c0:	eddf 7a27 	vldr	s15, [pc, #156]	; d4560 <_Z7getDustv+0x130>
   d44c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
   d44c8:	4606      	mov	r6, r0
   d44ca:	ee17 0a90 	vmov	r0, s15
   d44ce:	460f      	mov	r7, r1
   d44d0:	f005 fbee 	bl	d9cb0 <__aeabi_f2d>
   d44d4:	4602      	mov	r2, r0
   d44d6:	460b      	mov	r3, r1
   d44d8:	4630      	mov	r0, r6
   d44da:	4639      	mov	r1, r7
   d44dc:	f005 fa8a 	bl	d99f4 <__adddf3>
   d44e0:	a31d      	add	r3, pc, #116	; (adr r3, d4558 <_Z7getDustv+0x128>)
   d44e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e6:	f005 fa85 	bl	d99f4 <__adddf3>
   d44ea:	f005 ff2d 	bl	da348 <__aeabi_d2f>
   d44ee:	ee08 0a10 	vmov	s16, r0
        Serial.print(lowpulseoccupancy);
   d44f2:	f003 f961 	bl	d77b8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d44f6:	220a      	movs	r2, #10
   d44f8:	4621      	mov	r1, r4
   d44fa:	f002 fb2e 	bl	d6b5a <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d44fe:	f003 f95b 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4502:	4918      	ldr	r1, [pc, #96]	; (d4564 <_Z7getDustv+0x134>)
   d4504:	f002 fb0a 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d4508:	f003 f956 	bl	d77b8 <_Z16_fetch_usbserialv>
   d450c:	eeb0 0a68 	vmov.f32	s0, s17
   d4510:	2102      	movs	r1, #2
   d4512:	f002 fc01 	bl	d6d18 <_ZN5Print5printEfi>
        Serial.print(",");
   d4516:	f003 f94f 	bl	d77b8 <_Z16_fetch_usbserialv>
   d451a:	4912      	ldr	r1, [pc, #72]	; (d4564 <_Z7getDustv+0x134>)
   d451c:	f002 fafe 	bl	d6b1c <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d4520:	f003 f94a 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4524:	2102      	movs	r1, #2
   d4526:	eeb0 0a48 	vmov.f32	s0, s16
   d452a:	f002 fc0f 	bl	d6d4c <_ZN5Print7printlnEfi>
   d452e:	f001 fd2d 	bl	d5f8c <HAL_Timer_Get_Milli_Seconds>
  float concentration = -1;

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
   d4532:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4536:	eeb4 8a67 	vcmp.f32	s16, s15
   d453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d453e:	4605      	mov	r5, r0
   d4540:	d081      	beq.n	d4446 <_Z7getDustv+0x16>
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d4542:	eeb0 0a48 	vmov.f32	s0, s16
   d4546:	ecbd 8b02 	vpop	{d8}
   d454a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d454e:	bf00      	nop
   d4550:	00000000 	.word	0x00000000
   d4554:	40080000 	.word	0x40080000
   d4558:	3d70a3d7 	.word	0x3d70a3d7
   d455c:	3fe3d70a 	.word	0x3fe3d70a
   d4560:	44020000 	.word	0x44020000
   d4564:	000db8cf 	.word	0x000db8cf
   d4568:	00000000 	.word	0x00000000
   d456c:	41124f80 	.word	0x41124f80
   d4570:	9999999a 	.word	0x9999999a
   d4574:	3ff19999 	.word	0x3ff19999
   d4578:	66666666 	.word	0x66666666
   d457c:	400e6666 	.word	0x400e6666

000d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4580:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4582:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4584:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4586:	b17c      	cbz	r4, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4588:	6863      	ldr	r3, [r4, #4]
   d458a:	3b01      	subs	r3, #1
   d458c:	6063      	str	r3, [r4, #4]
   d458e:	b95b      	cbnz	r3, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4590:	6823      	ldr	r3, [r4, #0]
   d4592:	4620      	mov	r0, r4
   d4594:	689b      	ldr	r3, [r3, #8]
   d4596:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4598:	68a3      	ldr	r3, [r4, #8]
   d459a:	3b01      	subs	r3, #1
   d459c:	60a3      	str	r3, [r4, #8]
   d459e:	b91b      	cbnz	r3, d45a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d45a0:	6823      	ldr	r3, [r4, #0]
   d45a2:	4620      	mov	r0, r4
   d45a4:	68db      	ldr	r3, [r3, #12]
   d45a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d45a8:	4628      	mov	r0, r5
   d45aa:	bd38      	pop	{r3, r4, r5, pc}

000d45ac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d45ac:	b510      	push	{r4, lr}
   d45ae:	4b04      	ldr	r3, [pc, #16]	; (d45c0 <_ZN9TCPClientD1Ev+0x14>)
   d45b0:	4604      	mov	r4, r0
   d45b2:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d45b6:	f7ff ffe3 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45ba:	4620      	mov	r0, r4
   d45bc:	bd10      	pop	{r4, pc}
   d45be:	bf00      	nop
   d45c0:	000dbf10 	.word	0x000dbf10

000d45c4 <_ZN9TCPClientD0Ev>:
   d45c4:	b510      	push	{r4, lr}
   d45c6:	4604      	mov	r4, r0
   d45c8:	f7ff fff0 	bl	d45ac <_ZN9TCPClientD1Ev>
   d45cc:	4620      	mov	r0, r4
   d45ce:	211c      	movs	r1, #28
   d45d0:	f003 ff74 	bl	d84bc <_ZdlPvj>
   d45d4:	4620      	mov	r0, r4
   d45d6:	bd10      	pop	{r4, pc}

000d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d45d8:	b570      	push	{r4, r5, r6, lr}
   d45da:	4604      	mov	r4, r0
   d45dc:	460e      	mov	r6, r1
   d45de:	4615      	mov	r5, r2
		insertCheckSeparator();
   d45e0:	f001 fbe4 	bl	d5dac <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d45e4:	2201      	movs	r2, #1
   d45e6:	4631      	mov	r1, r6
   d45e8:	4620      	mov	r0, r4
   d45ea:	f001 fb53 	bl	d5c94 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d45ee:	4620      	mov	r0, r4
   d45f0:	213a      	movs	r1, #58	; 0x3a
   d45f2:	f001 fb03 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d45f6:	462a      	mov	r2, r5
   d45f8:	4620      	mov	r0, r4
   d45fa:	4902      	ldr	r1, [pc, #8]	; (d4604 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d45fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4600:	f001 bb3b 	b.w	d5c7a <_ZN10JsonWriter13insertsprintfEPKcz>
   d4604:	000dbf68 	.word	0x000dbf68

000d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4608:	b538      	push	{r3, r4, r5, lr}
   d460a:	4604      	mov	r4, r0
   d460c:	ed2d 8b02 	vpush	{d8}
   d4610:	460d      	mov	r5, r1
   d4612:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4616:	f001 fbc9 	bl	d5dac <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d461a:	4629      	mov	r1, r5
   d461c:	4620      	mov	r0, r4
   d461e:	2201      	movs	r2, #1
   d4620:	f001 fb38 	bl	d5c94 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4624:	4620      	mov	r0, r4
   d4626:	213a      	movs	r1, #58	; 0x3a
   d4628:	f001 fae8 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d462c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4630:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4634:	4620      	mov	r0, r4
	}
   d4636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d463a:	f001 bbdb 	b.w	d5df4 <_ZN10JsonWriter11insertValueEf>
	...

000d4640 <_Z18createEventPayLoadifffi>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
   d4640:	b530      	push	{r4, r5, lr}
   d4642:	ed2d 8b04 	vpush	{d8-d9}
   d4646:	b0d3      	sub	sp, #332	; 0x14c
   d4648:	4605      	mov	r5, r0
   d464a:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d464c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4650:	a912      	add	r1, sp, #72	; 0x48
   d4652:	a806      	add	r0, sp, #24
   d4654:	eef0 8a60 	vmov.f32	s17, s1
   d4658:	eeb0 8a41 	vmov.f32	s16, s2
   d465c:	eeb0 9a40 	vmov.f32	s18, s0
   d4660:	f001 faba 	bl	d5bd8 <_ZN10JsonWriterC1EPcj>
   d4664:	4b1d      	ldr	r3, [pc, #116]	; (d46dc <_Z18createEventPayLoadifffi+0x9c>)
   d4666:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4668:	227d      	movs	r2, #125	; 0x7d
   d466a:	217b      	movs	r1, #123	; 0x7b
   d466c:	a806      	add	r0, sp, #24
   d466e:	f001 fba8 	bl	d5dc2 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d4672:	462a      	mov	r2, r5
   d4674:	a806      	add	r0, sp, #24
   d4676:	491a      	ldr	r1, [pc, #104]	; (d46e0 <_Z18createEventPayLoadifffi+0xa0>)
   d4678:	f7ff ffae 	bl	d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d467c:	eeb0 0a49 	vmov.f32	s0, s18
   d4680:	a806      	add	r0, sp, #24
   d4682:	4918      	ldr	r1, [pc, #96]	; (d46e4 <_Z18createEventPayLoadifffi+0xa4>)
   d4684:	f7ff ffc0 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d4688:	eeb0 0a68 	vmov.f32	s0, s17
   d468c:	a806      	add	r0, sp, #24
   d468e:	4916      	ldr	r1, [pc, #88]	; (d46e8 <_Z18createEventPayLoadifffi+0xa8>)
   d4690:	f7ff ffba 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d4694:	eeb0 0a48 	vmov.f32	s0, s16
   d4698:	a806      	add	r0, sp, #24
   d469a:	4914      	ldr	r1, [pc, #80]	; (d46ec <_Z18createEventPayLoadifffi+0xac>)
   d469c:	f7ff ffb4 	bl	d4608 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Plant Watered", waterED);
   d46a0:	4622      	mov	r2, r4
   d46a2:	4913      	ldr	r1, [pc, #76]	; (d46f0 <_Z18createEventPayLoadifffi+0xb0>)
   d46a4:	a806      	add	r0, sp, #24
   d46a6:	f7ff ff97 	bl	d45d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f001 fab4 	bl	d5c18 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d46b0:	9b07      	ldr	r3, [sp, #28]
   d46b2:	9303      	str	r3, [sp, #12]
   d46b4:	4b0f      	ldr	r3, [pc, #60]	; (d46f4 <_Z18createEventPayLoadifffi+0xb4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46b6:	9a03      	ldr	r2, [sp, #12]
   d46b8:	781b      	ldrb	r3, [r3, #0]
   d46ba:	490f      	ldr	r1, [pc, #60]	; (d46f8 <_Z18createEventPayLoadifffi+0xb8>)
   d46bc:	f88d 3000 	strb.w	r3, [sp]
   d46c0:	a804      	add	r0, sp, #16
   d46c2:	233c      	movs	r3, #60	; 0x3c
   d46c4:	f002 fe0c 	bl	d72e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d46c8:	a805      	add	r0, sp, #20
   d46ca:	f7ff ff59 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
  JsonWriterStatic<256> jw;
   d46ce:	a806      	add	r0, sp, #24
   d46d0:	f7ff fcfe 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d46d4:	b053      	add	sp, #332	; 0x14c
   d46d6:	ecbd 8b04 	vpop	{d8-d9}
   d46da:	bd30      	pop	{r4, r5, pc}
   d46dc:	000db6d8 	.word	0x000db6d8
   d46e0:	000db971 	.word	0x000db971
   d46e4:	000db953 	.word	0x000db953
   d46e8:	000db9a4 	.word	0x000db9a4
   d46ec:	000db9bf 	.word	0x000db9bf
   d46f0:	000db6e0 	.word	0x000db6e0
   d46f4:	2003e2fc 	.word	0x2003e2fc
   d46f8:	000db8d1 	.word	0x000db8d1
   d46fc:	00000000 	.word	0x00000000

000d4700 <loop>:
            ;
    }

}

void loop() {
   d4700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  moist = analogRead(soilPin);
   d4704:	4b8e      	ldr	r3, [pc, #568]	; (d4940 <loop+0x240>)
   d4706:	4c8f      	ldr	r4, [pc, #572]	; (d4944 <loop+0x244>)
   d4708:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d470a:	4d8f      	ldr	r5, [pc, #572]	; (d4948 <loop+0x248>)
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d470c:	4e8f      	ldr	r6, [pc, #572]	; (d494c <loop+0x24c>)
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d470e:	4f90      	ldr	r7, [pc, #576]	; (d4950 <loop+0x250>)
  hum = bme.readHumidity();
  dust = getDust();
   d4710:	f8df 8284 	ldr.w	r8, [pc, #644]	; d4998 <loop+0x298>
            ;
    }

}

void loop() {
   d4714:	b08b      	sub	sp, #44	; 0x2c
  moist = analogRead(soilPin);
   d4716:	f003 fe6a 	bl	d83ee <analogRead>
   d471a:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d471c:	f7ff fd88 	bl	d4230 <_Z10waterPlanti>
   d4720:	6028      	str	r0, [r5, #0]
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4722:	488c      	ldr	r0, [pc, #560]	; (d4954 <loop+0x254>)
   d4724:	f000 fae0 	bl	d4ce8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4728:	ee10 0a10 	vmov	r0, s0
   d472c:	f005 fac0 	bl	d9cb0 <__aeabi_f2d>
   d4730:	a37f      	add	r3, pc, #508	; (adr r3, d4930 <loop+0x230>)
   d4732:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4736:	f005 fb0f 	bl	d9d58 <__aeabi_dmul>
   d473a:	2200      	movs	r2, #0
   d473c:	4b86      	ldr	r3, [pc, #536]	; (d4958 <loop+0x258>)
   d473e:	f005 f959 	bl	d99f4 <__adddf3>
   d4742:	e9c6 0100 	strd	r0, r1, [r6]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4746:	4883      	ldr	r0, [pc, #524]	; (d4954 <loop+0x254>)
   d4748:	f000 fafc 	bl	d4d44 <_ZN15Adafruit_BME28012readPressureEv>
   d474c:	eddf 7a83 	vldr	s15, [pc, #524]	; d495c <loop+0x25c>
   d4750:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4754:	ee17 0a10 	vmov	r0, s14
   d4758:	f005 faaa 	bl	d9cb0 <__aeabi_f2d>
   d475c:	a376      	add	r3, pc, #472	; (adr r3, d4938 <loop+0x238>)
   d475e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4762:	f005 faf9 	bl	d9d58 <__aeabi_dmul>
   d4766:	2200      	movs	r2, #0
   d4768:	4b7d      	ldr	r3, [pc, #500]	; (d4960 <loop+0x260>)
   d476a:	f005 f943 	bl	d99f4 <__adddf3>
   d476e:	e9c7 0100 	strd	r0, r1, [r7]
  hum = bme.readHumidity();
   d4772:	4878      	ldr	r0, [pc, #480]	; (d4954 <loop+0x254>)
   d4774:	f000 fc66 	bl	d5044 <_ZN15Adafruit_BME28012readHumidityEv>
   d4778:	ee10 0a10 	vmov	r0, s0
   d477c:	f005 fa98 	bl	d9cb0 <__aeabi_f2d>
   d4780:	4b78      	ldr	r3, [pc, #480]	; (d4964 <loop+0x264>)
   d4782:	e9c3 0100 	strd	r0, r1, [r3]
  dust = getDust();
   d4786:	f7ff fe53 	bl	d4430 <_Z7getDustv>
   d478a:	ed88 0a00 	vstr	s0, [r8]
  Serial.printf("Dust Value = %0.2f \n",dust);
   d478e:	f003 f813 	bl	d77b8 <_Z16_fetch_usbserialv>
   d4792:	4681      	mov	r9, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4794:	f8d8 0000 	ldr.w	r0, [r8]
   d4798:	f005 fa8a 	bl	d9cb0 <__aeabi_f2d>
   d479c:	4a72      	ldr	r2, [pc, #456]	; (d4968 <loop+0x268>)
   d479e:	e9cd 0100 	strd	r0, r1, [sp]
   d47a2:	2100      	movs	r1, #0
   d47a4:	4648      	mov	r0, r9
   d47a6:	f002 fae0 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
  printMoist(moist);
   d47aa:	6820      	ldr	r0, [r4, #0]
   d47ac:	f7ff fd7a 	bl	d42a4 <_Z10printMoisti>
  printValues();
   d47b0:	f7ff fdca 	bl	d4348 <_Z11printValuesv>

    if(mqtt.Update()) {
   d47b4:	486d      	ldr	r0, [pc, #436]	; (d496c <loop+0x26c>)
   d47b6:	f000 fed4 	bl	d5562 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d47ba:	46b8      	mov	r8, r7
   d47bc:	b168      	cbz	r0, d47da <loop+0xda>
       Htemp.publish(temp); 
   d47be:	2102      	movs	r1, #2
   d47c0:	ed96 0b00 	vldr	d0, [r6]
   d47c4:	486a      	ldr	r0, [pc, #424]	; (d4970 <loop+0x270>)
   d47c6:	f001 f9a3 	bl	d5b10 <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hmoist.publish(moist);
   d47ca:	6821      	ldr	r1, [r4, #0]
   d47cc:	4869      	ldr	r0, [pc, #420]	; (d4974 <loop+0x274>)
   d47ce:	f001 f99d 	bl	d5b0c <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hwater.publish(watered);
   d47d2:	6829      	ldr	r1, [r5, #0]
   d47d4:	4868      	ldr	r0, [pc, #416]	; (d4978 <loop+0x278>)
   d47d6:	f001 f999 	bl	d5b0c <_ZN21Adafruit_MQTT_Publish7publishEi>
   d47da:	4f68      	ldr	r7, [pc, #416]	; (d497c <loop+0x27c>)
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d47dc:	6821      	ldr	r1, [r4, #0]

    for(i=0;i<60;i++) {
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
          if (subscription == &onoffbutton) {
   d47de:	f8df 91bc 	ldr.w	r9, [pc, #444]	; d499c <loop+0x29c>
       Htemp.publish(temp); 
       Hmoist.publish(moist);
       Hwater.publish(watered);
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d47e2:	220a      	movs	r2, #10
   d47e4:	a806      	add	r0, sp, #24
   d47e6:	f002 f8f1 	bl	d69cc <_ZN6StringC1Eih>
   d47ea:	783b      	ldrb	r3, [r7, #0]
   d47ec:	9a06      	ldr	r2, [sp, #24]
   d47ee:	4964      	ldr	r1, [pc, #400]	; (d4980 <loop+0x280>)
   d47f0:	f88d 3000 	strb.w	r3, [sp]
   d47f4:	a804      	add	r0, sp, #16
   d47f6:	233c      	movs	r3, #60	; 0x3c
   d47f8:	f002 fd72 	bl	d72e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d47fc:	a805      	add	r0, sp, #20
   d47fe:	f7ff febf 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4802:	a806      	add	r0, sp, #24
   d4804:	f002 f852 	bl	d68ac <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d4808:	ed96 0b00 	vldr	d0, [r6]
   d480c:	2106      	movs	r1, #6
   d480e:	a806      	add	r0, sp, #24
   d4810:	f002 f8ef 	bl	d69f2 <_ZN6StringC1Edi>
   d4814:	783b      	ldrb	r3, [r7, #0]
   d4816:	9a06      	ldr	r2, [sp, #24]
   d4818:	495a      	ldr	r1, [pc, #360]	; (d4984 <loop+0x284>)
   d481a:	f88d 3000 	strb.w	r3, [sp]
   d481e:	a804      	add	r0, sp, #16
   d4820:	233c      	movs	r3, #60	; 0x3c
   d4822:	f002 fd5d 	bl	d72e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4826:	a805      	add	r0, sp, #20
   d4828:	f7ff feaa 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d482c:	a806      	add	r0, sp, #24
   d482e:	f002 f83d 	bl	d68ac <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d4832:	220a      	movs	r2, #10
   d4834:	6829      	ldr	r1, [r5, #0]
   d4836:	a806      	add	r0, sp, #24
   d4838:	f002 f8c8 	bl	d69cc <_ZN6StringC1Eih>
   d483c:	783b      	ldrb	r3, [r7, #0]
   d483e:	9a06      	ldr	r2, [sp, #24]
   d4840:	4951      	ldr	r1, [pc, #324]	; (d4988 <loop+0x288>)
   d4842:	f88d 3000 	strb.w	r3, [sp]
   d4846:	a804      	add	r0, sp, #16
   d4848:	233c      	movs	r3, #60	; 0x3c
   d484a:	f002 fd49 	bl	d72e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d484e:	a805      	add	r0, sp, #20
   d4850:	f7ff fe96 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4854:	a806      	add	r0, sp, #24
   d4856:	f002 f829 	bl	d68ac <_ZN6StringD1Ev>
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d485a:	4b42      	ldr	r3, [pc, #264]	; (d4964 <loop+0x264>)

    for(i=0;i<60;i++) {
   d485c:	4f4b      	ldr	r7, [pc, #300]	; (d498c <loop+0x28c>)

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d485e:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4862:	f005 fd71 	bl	da348 <__aeabi_d2f>
   d4866:	9003      	str	r0, [sp, #12]
   d4868:	e9d8 0100 	ldrd	r0, r1, [r8]
   d486c:	f005 fd6c 	bl	da348 <__aeabi_d2f>
   d4870:	9002      	str	r0, [sp, #8]
   d4872:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4876:	f005 fd67 	bl	da348 <__aeabi_d2f>
   d487a:	6829      	ldr	r1, [r5, #0]
   d487c:	ed9d 1a03 	vldr	s2, [sp, #12]
   d4880:	eddd 0a02 	vldr	s1, [sp, #8]
   d4884:	ee00 0a10 	vmov	s0, r0
   d4888:	6820      	ldr	r0, [r4, #0]
   d488a:	f7ff fed9 	bl	d4640 <_Z18createEventPayLoadifffi>

    for(i=0;i<60;i++) {
   d488e:	2300      	movs	r3, #0
   d4890:	603b      	str	r3, [r7, #0]
   d4892:	683b      	ldr	r3, [r7, #0]
   d4894:	2b3b      	cmp	r3, #59	; 0x3b
   d4896:	dc47      	bgt.n	d4928 <loop+0x228>
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
   d4898:	f002 ff8e 	bl	d77b8 <_Z16_fetch_usbserialv>
   d489c:	4b3b      	ldr	r3, [pc, #236]	; (d498c <loop+0x28c>)
   d489e:	4a3c      	ldr	r2, [pc, #240]	; (d4990 <loop+0x290>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	2100      	movs	r1, #0
   d48a4:	f002 fa61 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d48a8:	f242 7110 	movw	r1, #10000	; 0x2710
   d48ac:	482f      	ldr	r0, [pc, #188]	; (d496c <loop+0x26c>)
   d48ae:	f000 ff43 	bl	d5738 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d48b2:	b3a8      	cbz	r0, d4920 <loop+0x220>
          if (subscription == &onoffbutton) {
   d48b4:	4548      	cmp	r0, r9
   d48b6:	d1f7      	bne.n	d48a8 <loop+0x1a8>
            button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d48b8:	f109 0005 	add.w	r0, r9, #5
   d48bc:	f006 f8de 	bl	daa7c <atoi>
   d48c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; d49a0 <loop+0x2a0>
   d48c4:	f8c8 0000 	str.w	r0, [r8]
            Serial.printf("Button State is %i \n",button);
   d48c8:	f002 ff76 	bl	d77b8 <_Z16_fetch_usbserialv>
   d48cc:	2100      	movs	r1, #0
   d48ce:	f8d8 3000 	ldr.w	r3, [r8]
   d48d2:	4a30      	ldr	r2, [pc, #192]	; (d4994 <loop+0x294>)
   d48d4:	f002 fa49 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
            if(button==1) {
   d48d8:	f8d8 1000 	ldr.w	r1, [r8]
   d48dc:	2901      	cmp	r1, #1
   d48de:	d1e3      	bne.n	d48a8 <loop+0x1a8>
              digitalWrite(D7,1);
   d48e0:	2007      	movs	r0, #7
   d48e2:	f003 fd58 	bl	d8396 <digitalWrite>
              watered = waterPlant(3000);
   d48e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d48ea:	f7ff fca1 	bl	d4230 <_Z10waterPlanti>
   d48ee:	6028      	str	r0, [r5, #0]
                  if(mqtt.Update()) {
   d48f0:	481e      	ldr	r0, [pc, #120]	; (d496c <loop+0x26c>)
   d48f2:	f000 fe36 	bl	d5562 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d48f6:	b170      	cbz	r0, d4916 <loop+0x216>
                    Htemp.publish(temp); 
   d48f8:	2102      	movs	r1, #2
   d48fa:	ed96 0b00 	vldr	d0, [r6]
   d48fe:	481c      	ldr	r0, [pc, #112]	; (d4970 <loop+0x270>)
   d4900:	f001 f906 	bl	d5b10 <_ZN21Adafruit_MQTT_Publish7publishEdh>
                    Hmoist.publish(moist);
   d4904:	6821      	ldr	r1, [r4, #0]
   d4906:	481b      	ldr	r0, [pc, #108]	; (d4974 <loop+0x274>)
   d4908:	f001 f900 	bl	d5b0c <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hwater.publish(watered);
   d490c:	4b0e      	ldr	r3, [pc, #56]	; (d4948 <loop+0x248>)
   d490e:	481a      	ldr	r0, [pc, #104]	; (d4978 <loop+0x278>)
   d4910:	6819      	ldr	r1, [r3, #0]
   d4912:	f001 f8fb 	bl	d5b0c <_ZN21Adafruit_MQTT_Publish7publishEi>
                  } 
              digitalWrite(D7,0);
   d4916:	2100      	movs	r1, #0
   d4918:	2007      	movs	r0, #7
   d491a:	f003 fd3c 	bl	d8396 <digitalWrite>
   d491e:	e7c3      	b.n	d48a8 <loop+0x1a8>
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);

    for(i=0;i<60;i++) {
   d4920:	683b      	ldr	r3, [r7, #0]
   d4922:	3301      	adds	r3, #1
   d4924:	603b      	str	r3, [r7, #0]
   d4926:	e7b4      	b.n	d4892 <loop+0x192>
              digitalWrite(D7,0);
            }
          }
        }
    }    
}
   d4928:	b00b      	add	sp, #44	; 0x2c
   d492a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d492e:	bf00      	nop
   d4930:	cccccccd 	.word	0xcccccccd
   d4934:	3ffccccc 	.word	0x3ffccccc
   d4938:	c100e6b0 	.word	0xc100e6b0
   d493c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4940:	2003e0ac 	.word	0x2003e0ac
   d4944:	2003e37c 	.word	0x2003e37c
   d4948:	2003e334 	.word	0x2003e334
   d494c:	2003e1c0 	.word	0x2003e1c0
   d4950:	2003e380 	.word	0x2003e380
   d4954:	2003e338 	.word	0x2003e338
   d4958:	40400000 	.word	0x40400000
   d495c:	42c80000 	.word	0x42c80000
   d4960:	40140000 	.word	0x40140000
   d4964:	2003e2b8 	.word	0x2003e2b8
   d4968:	000db8da 	.word	0x000db8da
   d496c:	2003e1d8 	.word	0x2003e1d8
   d4970:	2003e314 	.word	0x2003e314
   d4974:	2003e1b0 	.word	0x2003e1b0
   d4978:	2003e188 	.word	0x2003e188
   d497c:	2003e2fc 	.word	0x2003e2fc
   d4980:	000db971 	.word	0x000db971
   d4984:	000db953 	.word	0x000db953
   d4988:	000db6e0 	.word	0x000db6e0
   d498c:	2003e300 	.word	0x2003e300
   d4990:	000db8ef 	.word	0x000db8ef
   d4994:	000db8f4 	.word	0x000db8f4
   d4998:	2003e310 	.word	0x2003e310
   d499c:	2003e2c0 	.word	0x2003e2c0
   d49a0:	2003e320 	.word	0x2003e320

000d49a4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d49a4:	b510      	push	{r4, lr}
   d49a6:	21d4      	movs	r1, #212	; 0xd4
   d49a8:	4604      	mov	r4, r0
   d49aa:	f003 fd87 	bl	d84bc <_ZdlPvj>
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_GLOBAL__sub_I_TheClient>:
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d49b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d49b6:	4b31      	ldr	r3, [pc, #196]	; (d4a7c <_GLOBAL__sub_I_TheClient+0xc8>)
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d49b8:	4e31      	ldr	r6, [pc, #196]	; (d4a80 <_GLOBAL__sub_I_TheClient+0xcc>)
   d49ba:	4d32      	ldr	r5, [pc, #200]	; (d4a84 <_GLOBAL__sub_I_TheClient+0xd0>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d49bc:	4c32      	ldr	r4, [pc, #200]	; (d4a88 <_GLOBAL__sub_I_TheClient+0xd4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d49be:	4f33      	ldr	r7, [pc, #204]	; (d4a8c <_GLOBAL__sub_I_TheClient+0xd8>)
   d49c0:	2201      	movs	r2, #1
   d49c2:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49c4:	f001 fa4a 	bl	d5e5c <HAL_Pin_Map>
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d49c8:	4630      	mov	r0, r6
   d49ca:	f003 fb9d 	bl	d8108 <_ZN9TCPClientC1Ev>
   d49ce:	462a      	mov	r2, r5
   d49d0:	492f      	ldr	r1, [pc, #188]	; (d4a90 <_GLOBAL__sub_I_TheClient+0xdc>)
   d49d2:	4630      	mov	r0, r6
   d49d4:	f003 fd64 	bl	d84a0 <__aeabi_atexit>
   d49d8:	4b2e      	ldr	r3, [pc, #184]	; (d4a94 <_GLOBAL__sub_I_TheClient+0xe0>)
   d49da:	9300      	str	r3, [sp, #0]
   d49dc:	f240 725b 	movw	r2, #1883	; 0x75b
   d49e0:	4b2d      	ldr	r3, [pc, #180]	; (d4a98 <_GLOBAL__sub_I_TheClient+0xe4>)
   d49e2:	492e      	ldr	r1, [pc, #184]	; (d4a9c <_GLOBAL__sub_I_TheClient+0xe8>)
   d49e4:	4620      	mov	r0, r4
   d49e6:	f000 fdf1 	bl	d55cc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d49ea:	4b2d      	ldr	r3, [pc, #180]	; (d4aa0 <_GLOBAL__sub_I_TheClient+0xec>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d49ec:	492d      	ldr	r1, [pc, #180]	; (d4aa4 <_GLOBAL__sub_I_TheClient+0xf0>)
   d49ee:	6023      	str	r3, [r4, #0]
   d49f0:	462a      	mov	r2, r5
   d49f2:	4620      	mov	r0, r4
   d49f4:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d49f8:	f003 fd52 	bl	d84a0 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d49fc:	4621      	mov	r1, r4
   d49fe:	2300      	movs	r3, #0
   d4a00:	4a29      	ldr	r2, [pc, #164]	; (d4aa8 <_GLOBAL__sub_I_TheClient+0xf4>)
   d4a02:	482a      	ldr	r0, [pc, #168]	; (d4aac <_GLOBAL__sub_I_TheClient+0xf8>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a04:	4e2a      	ldr	r6, [pc, #168]	; (d4ab0 <_GLOBAL__sub_I_TheClient+0xfc>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4a06:	f001 f86d 	bl	d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d4a0a:	4621      	mov	r1, r4
   d4a0c:	2300      	movs	r3, #0
   d4a0e:	4a29      	ldr	r2, [pc, #164]	; (d4ab4 <_GLOBAL__sub_I_TheClient+0x100>)
   d4a10:	4829      	ldr	r0, [pc, #164]	; (d4ab8 <_GLOBAL__sub_I_TheClient+0x104>)
   d4a12:	f001 f867 	bl	d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4a16:	4621      	mov	r1, r4
   d4a18:	2300      	movs	r3, #0
   d4a1a:	4a28      	ldr	r2, [pc, #160]	; (d4abc <_GLOBAL__sub_I_TheClient+0x108>)
   d4a1c:	4828      	ldr	r0, [pc, #160]	; (d4ac0 <_GLOBAL__sub_I_TheClient+0x10c>)
   d4a1e:	f001 f861 	bl	d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4a22:	4621      	mov	r1, r4
   d4a24:	2300      	movs	r3, #0
   d4a26:	4a27      	ldr	r2, [pc, #156]	; (d4ac4 <_GLOBAL__sub_I_TheClient+0x110>)
   d4a28:	4827      	ldr	r0, [pc, #156]	; (d4ac8 <_GLOBAL__sub_I_TheClient+0x114>)
   d4a2a:	f001 f85b 	bl	d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d4a2e:	4621      	mov	r1, r4
   d4a30:	2300      	movs	r3, #0
   d4a32:	4a26      	ldr	r2, [pc, #152]	; (d4acc <_GLOBAL__sub_I_TheClient+0x118>)
   d4a34:	4826      	ldr	r0, [pc, #152]	; (d4ad0 <_GLOBAL__sub_I_TheClient+0x11c>)
   d4a36:	f001 f855 	bl	d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4a3a:	2300      	movs	r3, #0
   d4a3c:	4a25      	ldr	r2, [pc, #148]	; (d4ad4 <_GLOBAL__sub_I_TheClient+0x120>)
   d4a3e:	4826      	ldr	r0, [pc, #152]	; (d4ad8 <_GLOBAL__sub_I_TheClient+0x124>)
   d4a40:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a42:	4c26      	ldr	r4, [pc, #152]	; (d4adc <_GLOBAL__sub_I_TheClient+0x128>)
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4a44:	f001 f882 	bl	d5b4c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4a48:	4825      	ldr	r0, [pc, #148]	; (d4ae0 <_GLOBAL__sub_I_TheClient+0x12c>)
   d4a4a:	f000 f879 	bl	d4b40 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a4e:	4639      	mov	r1, r7
   d4a50:	4620      	mov	r0, r4
   d4a52:	f001 ff72 	bl	d693a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a56:	4620      	mov	r0, r4
String t2;
   d4a58:	4c22      	ldr	r4, [pc, #136]	; (d4ae4 <_GLOBAL__sub_I_TheClient+0x130>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a5a:	462a      	mov	r2, r5
   d4a5c:	4631      	mov	r1, r6
   d4a5e:	f003 fd1f 	bl	d84a0 <__aeabi_atexit>
String t2;
   d4a62:	4639      	mov	r1, r7
   d4a64:	4620      	mov	r0, r4
   d4a66:	f001 ff68 	bl	d693a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a6a:	462a      	mov	r2, r5
   d4a6c:	4631      	mov	r1, r6
   d4a6e:	4620      	mov	r0, r4
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
   d4a70:	b003      	add	sp, #12
   d4a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d4a76:	f003 bd13 	b.w	d84a0 <__aeabi_atexit>
   d4a7a:	bf00      	nop
   d4a7c:	2003e2fc 	.word	0x2003e2fc
   d4a80:	2003e194 	.word	0x2003e194
   d4a84:	2003e178 	.word	0x2003e178
   d4a88:	2003e1d8 	.word	0x2003e1d8
   d4a8c:	000dba85 	.word	0x000dba85
   d4a90:	000d45ad 	.word	0x000d45ad
   d4a94:	000db920 	.word	0x000db920
   d4a98:	000db909 	.word	0x000db909
   d4a9c:	000db910 	.word	0x000db910
   d4aa0:	000dba38 	.word	0x000dba38
   d4aa4:	000d40cd 	.word	0x000d40cd
   d4aa8:	000db941 	.word	0x000db941
   d4aac:	2003e314 	.word	0x2003e314
   d4ab0:	000d68ad 	.word	0x000d68ad
   d4ab4:	000db95f 	.word	0x000db95f
   d4ab8:	2003e1b0 	.word	0x2003e1b0
   d4abc:	000db97a 	.word	0x000db97a
   d4ac0:	2003e188 	.word	0x2003e188
   d4ac4:	000db992 	.word	0x000db992
   d4ac8:	2003e2ac 	.word	0x2003e2ac
   d4acc:	000db9ad 	.word	0x000db9ad
   d4ad0:	2003e304 	.word	0x2003e304
   d4ad4:	000db9c8 	.word	0x000db9c8
   d4ad8:	2003e2c0 	.word	0x2003e2c0
   d4adc:	2003e324 	.word	0x2003e324
   d4ae0:	2003e338 	.word	0x2003e338
   d4ae4:	2003e1c8 	.word	0x2003e1c8

000d4ae8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4ae8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4aea:	4602      	mov	r2, r0
   d4aec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4aee:	7913      	ldrb	r3, [r2, #4]
   d4af0:	6895      	ldr	r5, [r2, #8]
   d4af2:	b133      	cbz	r3, d4b02 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4af4:	b93d      	cbnz	r5, d4b06 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4af6:	490c      	ldr	r1, [pc, #48]	; (d4b28 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4af8:	b004      	add	sp, #16
   d4afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4afe:	f002 b80d 	b.w	d6b1c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4b02:	4b0a      	ldr	r3, [pc, #40]	; (d4b2c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4b04:	e000      	b.n	d4b08 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4b06:	4b0a      	ldr	r3, [pc, #40]	; (d4b30 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4b08:	7b16      	ldrb	r6, [r2, #12]
   d4b0a:	4c0a      	ldr	r4, [pc, #40]	; (d4b34 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4b0c:	490a      	ldr	r1, [pc, #40]	; (d4b38 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4b0e:	7b52      	ldrb	r2, [r2, #13]
   d4b10:	9202      	str	r2, [sp, #8]
   d4b12:	2e01      	cmp	r6, #1
   d4b14:	bf08      	it	eq
   d4b16:	4621      	moveq	r1, r4
   d4b18:	9101      	str	r1, [sp, #4]
   d4b1a:	9500      	str	r5, [sp, #0]
   d4b1c:	4a07      	ldr	r2, [pc, #28]	; (d4b3c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4b1e:	2100      	movs	r1, #0
   d4b20:	f002 f923 	bl	d6d6a <_ZN5Print11printf_implEbPKcz>
  }
   d4b24:	b004      	add	sp, #16
   d4b26:	bd70      	pop	{r4, r5, r6, pc}
   d4b28:	000db9f9 	.word	0x000db9f9
   d4b2c:	000dba85 	.word	0x000dba85
   d4b30:	000db9e8 	.word	0x000db9e8
   d4b34:	000db9f1 	.word	0x000db9f1
   d4b38:	000db9f5 	.word	0x000db9f5
   d4b3c:	000dba0f 	.word	0x000dba0f

000d4b40 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4b40:	22ff      	movs	r2, #255	; 0xff
   d4b42:	7402      	strb	r2, [r0, #16]
   d4b44:	7442      	strb	r2, [r0, #17]
   d4b46:	7482      	strb	r2, [r0, #18]
   d4b48:	74c2      	strb	r2, [r0, #19]
{ }
   d4b4a:	4770      	bx	lr

000d4b4c <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4b4c:	6880      	ldr	r0, [r0, #8]
   d4b4e:	4770      	bx	lr

000d4b50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b50:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4b52:	4d09      	ldr	r5, [pc, #36]	; (d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4b54:	6829      	ldr	r1, [r5, #0]
   d4b56:	f011 0401 	ands.w	r4, r1, #1
   d4b5a:	d10a      	bne.n	d4b72 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4b5c:	4628      	mov	r0, r5
   d4b5e:	f7ff faad 	bl	d40bc <__cxa_guard_acquire>
   d4b62:	b130      	cbz	r0, d4b72 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4b64:	4621      	mov	r1, r4
   d4b66:	4805      	ldr	r0, [pc, #20]	; (d4b7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4b68:	f001 fcd8 	bl	d651c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4b6c:	4628      	mov	r0, r5
   d4b6e:	f7ff faaa 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4b72:	4802      	ldr	r0, [pc, #8]	; (d4b7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4b74:	bd38      	pop	{r3, r4, r5, pc}
   d4b76:	bf00      	nop
   d4b78:	2003e3a4 	.word	0x2003e3a4
   d4b7c:	2003e3a8 	.word	0x2003e3a8

000d4b80 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4b84:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b88:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4b8a:	4605      	mov	r5, r0
   d4b8c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4b8e:	d106      	bne.n	d4b9e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4b90:	f7ff ffde 	bl	d4b50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4b94:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4b9a:	f001 bd63 	b.w	d6664 <_ZN8SPIClass8transferEh>
   d4b9e:	2607      	movs	r6, #7
   d4ba0:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4ba2:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4ba6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4baa:	2100      	movs	r1, #0
   d4bac:	b280      	uxth	r0, r0
   d4bae:	f003 fbf2 	bl	d8396 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4bb2:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4bb6:	fa08 f106 	lsl.w	r1, r8, r6
   d4bba:	4039      	ands	r1, r7
   d4bbc:	b280      	uxth	r0, r0
   d4bbe:	f003 fbea 	bl	d8396 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4bc2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4bc6:	2101      	movs	r1, #1
   d4bc8:	b280      	uxth	r0, r0
   d4bca:	f003 fbe4 	bl	d8396 <digitalWrite>
        if (digitalRead(_miso))
   d4bce:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4bd2:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4bd4:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4bd6:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4bd8:	f003 fbf6 	bl	d83c8 <digitalRead>
   d4bdc:	b108      	cbz	r0, d4be2 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4bde:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4be2:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4be6:	d2de      	bcs.n	d4ba6 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4be8:	4620      	mov	r0, r4
   d4bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4bee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4bee:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4bf0:	f7ff ffae 	bl	d4b50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4bf8:	f001 bcab 	b.w	d6552 <_ZN8SPIClass14endTransactionEv>

000d4bfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4bfc:	b510      	push	{r4, lr}
   d4bfe:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4c00:	f7ff ffa6 	bl	d4b50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c04:	4621      	mov	r1, r4
    }
   d4c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4c0a:	f001 bcbb 	b.w	d6584 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4c10 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4c10:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4c12:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4c16:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4c18:	b085      	sub	sp, #20
   d4c1a:	4604      	mov	r4, r0
   d4c1c:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4c1e:	d121      	bne.n	d4c64 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4c20:	7901      	ldrb	r1, [r0, #4]
   d4c22:	6800      	ldr	r0, [r0, #0]
   d4c24:	f002 fef9 	bl	d7a1a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4c28:	6820      	ldr	r0, [r4, #0]
   d4c2a:	6803      	ldr	r3, [r0, #0]
   d4c2c:	4629      	mov	r1, r5
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	4798      	blx	r3
        _wire -> endTransmission();
   d4c32:	6820      	ldr	r0, [r4, #0]
   d4c34:	f002 fef9 	bl	d7a2a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4c38:	2203      	movs	r2, #3
   d4c3a:	7921      	ldrb	r1, [r4, #4]
   d4c3c:	6820      	ldr	r0, [r4, #0]
   d4c3e:	f002 fee9 	bl	d7a14 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4c42:	6820      	ldr	r0, [r4, #0]
   d4c44:	6803      	ldr	r3, [r0, #0]
   d4c46:	695b      	ldr	r3, [r3, #20]
   d4c48:	4798      	blx	r3
        value <<= 8;
   d4c4a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c4c:	6820      	ldr	r0, [r4, #0]
   d4c4e:	6803      	ldr	r3, [r0, #0]
   d4c50:	695b      	ldr	r3, [r3, #20]
   d4c52:	4798      	blx	r3
   d4c54:	4328      	orrs	r0, r5
        value <<= 8;
   d4c56:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c58:	6820      	ldr	r0, [r4, #0]
   d4c5a:	6803      	ldr	r3, [r0, #0]
   d4c5c:	695b      	ldr	r3, [r3, #20]
   d4c5e:	4798      	blx	r3
   d4c60:	4305      	orrs	r5, r0
   d4c62:	e039      	b.n	d4cd8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4c64:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c68:	3301      	adds	r3, #1
   d4c6a:	d10e      	bne.n	d4c8a <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4c6c:	4b1c      	ldr	r3, [pc, #112]	; (d4ce0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4c6e:	4a1d      	ldr	r2, [pc, #116]	; (d4ce4 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4c70:	9300      	str	r3, [sp, #0]
   d4c72:	9202      	str	r2, [sp, #8]
   d4c74:	2300      	movs	r3, #0
   d4c76:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c78:	4668      	mov	r0, sp
   d4c7a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c7e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c82:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c86:	f7ff ffb9 	bl	d4bfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4c8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c8e:	2100      	movs	r1, #0
   d4c90:	b280      	uxth	r0, r0
   d4c92:	f003 fb80 	bl	d8396 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c96:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	f7ff ff70 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4ca0:	2100      	movs	r1, #0
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	f7ff ff6c 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4ca8:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4caa:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4cac:	4620      	mov	r0, r4
   d4cae:	f7ff ff67 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
   d4cb2:	4328      	orrs	r0, r5
        value <<= 8;
   d4cb4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4cb6:	2100      	movs	r1, #0
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f7ff ff61 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
   d4cbe:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4cc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4cc4:	2101      	movs	r1, #1
   d4cc6:	b280      	uxth	r0, r0
   d4cc8:	f003 fb65 	bl	d8396 <digitalWrite>
        if (_sck == -1)
   d4ccc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4cd0:	3301      	adds	r3, #1
   d4cd2:	d101      	bne.n	d4cd8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4cd4:	f7ff ff8b 	bl	d4bee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4cd8:	4628      	mov	r0, r5
   d4cda:	b005      	add	sp, #20
   d4cdc:	bd30      	pop	{r4, r5, pc}
   d4cde:	bf00      	nop
   d4ce0:	000db9e4 	.word	0x000db9e4
   d4ce4:	0007a120 	.word	0x0007a120

000d4ce8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4ce8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4cea:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4cec:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4cee:	f7ff ff8f 	bl	d4c10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4cf2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4cf6:	d01e      	beq.n	d4d36 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4cf8:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4cfa:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4d3c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4cfe:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4d02:	0052      	lsls	r2, r2, #1
   d4d04:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4d08:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4d0c:	435b      	muls	r3, r3
   d4d0e:	4350      	muls	r0, r2
   d4d10:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4d14:	131b      	asrs	r3, r3, #12
   d4d16:	4353      	muls	r3, r2
   d4d18:	139b      	asrs	r3, r3, #14
   d4d1a:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4d1e:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4d20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4d24:	3080      	adds	r0, #128	; 0x80
   d4d26:	1200      	asrs	r0, r0, #8
   d4d28:	ee07 0a90 	vmov	s15, r0
   d4d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4d30:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4d34:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4d36:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4d40 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4d3a:	bd10      	pop	{r4, pc}
   d4d3c:	42c80000 	.word	0x42c80000
   d4d40:	7fc00000 	.word	0x7fc00000

000d4d44 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d48:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4d4a:	f7ff ffcd 	bl	d4ce8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4d4e:	21f7      	movs	r1, #247	; 0xf7
   d4d50:	4630      	mov	r0, r6
   d4d52:	f7ff ff5d 	bl	d4c10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4d56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4d5a:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4d5c:	f000 80c1 	beq.w	d4ee2 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4d60:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4d62:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4d66:	17e5      	asrs	r5, r4, #31
   d4d68:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4d6c:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d70:	fba4 8904 	umull	r8, r9, r4, r4
   d4d74:	fb04 f305 	mul.w	r3, r4, r5
   d4d78:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4d7c:	fb02 f105 	mul.w	r1, r2, r5
   d4d80:	17d3      	asrs	r3, r2, #31
   d4d82:	fb04 1103 	mla	r1, r4, r3, r1
   d4d86:	fba2 2304 	umull	r2, r3, r2, r4
   d4d8a:	440b      	add	r3, r1
   d4d8c:	0319      	lsls	r1, r3, #12
   d4d8e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4d92:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4d94:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4d98:	17d3      	asrs	r3, r2, #31
   d4d9a:	fb02 fe09 	mul.w	lr, r2, r9
   d4d9e:	fb08 ee03 	mla	lr, r8, r3, lr
   d4da2:	fba2 2308 	umull	r2, r3, r2, r8
   d4da6:	4473      	add	r3, lr
   d4da8:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4dac:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4db0:	eb1a 0a00 	adds.w	sl, sl, r0
   d4db4:	8b72      	ldrh	r2, [r6, #26]
   d4db6:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4dba:	eb4b 0b01 	adc.w	fp, fp, r1
   d4dbe:	f11a 0000 	adds.w	r0, sl, #0
   d4dc2:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4dc6:	fba0 ab02 	umull	sl, fp, r0, r2
   d4dca:	fb02 bb01 	mla	fp, r2, r1, fp
   d4dce:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4dd2:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4dd6:	ea52 0103 	orrs.w	r1, r2, r3
   d4dda:	f000 8086 	beq.w	d4eea <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4dde:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4de2:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4de6:	fb0a f109 	mul.w	r1, sl, r9
   d4dea:	fb08 110b 	mla	r1, r8, fp, r1
   d4dee:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4df2:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4df6:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4df8:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4dfc:	fb0a f105 	mul.w	r1, sl, r5
   d4e00:	fb04 110b 	mla	r1, r4, fp, r1
   d4e04:	fbaa 4504 	umull	r4, r5, sl, r4
   d4e08:	440d      	add	r5, r1
   d4e0a:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4e0e:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4e12:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4e14:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4e18:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4e1c:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4e20:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4e24:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4e28:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4e2c:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4e30:	07c4      	lsls	r4, r0, #31
   d4e32:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4e36:	f04f 0800 	mov.w	r8, #0
   d4e3a:	eb18 080a 	adds.w	r8, r8, sl
   d4e3e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4e42:	eb49 090b 	adc.w	r9, r9, fp
   d4e46:	f640 4735 	movw	r7, #3125	; 0xc35
   d4e4a:	ebb4 0408 	subs.w	r4, r4, r8
   d4e4e:	eb65 0509 	sbc.w	r5, r5, r9
   d4e52:	fba4 0107 	umull	r0, r1, r4, r7
   d4e56:	fb07 1105 	mla	r1, r7, r5, r1
   d4e5a:	f005 fbd3 	bl	da604 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e5e:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4e62:	134c      	asrs	r4, r1, #13
   d4e64:	0b45      	lsrs	r5, r0, #13
   d4e66:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e6a:	fb02 f704 	mul.w	r7, r2, r4
   d4e6e:	17d3      	asrs	r3, r2, #31
   d4e70:	fb05 7703 	mla	r7, r5, r3, r7
   d4e74:	fba2 2305 	umull	r2, r3, r2, r5
   d4e78:	443b      	add	r3, r7
   d4e7a:	4354      	muls	r4, r2
   d4e7c:	fb05 4403 	mla	r4, r5, r3, r4
   d4e80:	fba2 2305 	umull	r2, r3, r2, r5
   d4e84:	4423      	add	r3, r4
   d4e86:	0e54      	lsrs	r4, r2, #25
   d4e88:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4e8c:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4e90:	1824      	adds	r4, r4, r0
   d4e92:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4e96:	414d      	adcs	r5, r1
   d4e98:	17d3      	asrs	r3, r2, #31
   d4e9a:	4351      	muls	r1, r2
   d4e9c:	fb00 1303 	mla	r3, r0, r3, r1
   d4ea0:	fba2 0100 	umull	r0, r1, r2, r0
   d4ea4:	4419      	add	r1, r3
   d4ea6:	0cc2      	lsrs	r2, r0, #19
   d4ea8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4eac:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4eae:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4eb2:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4eb6:	416b      	adcs	r3, r5
   d4eb8:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4eba:	17e5      	asrs	r5, r4, #31
   d4ebc:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4ebe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4ec2:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4ec4:	012b      	lsls	r3, r5, #4
   d4ec6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4eca:	1880      	adds	r0, r0, r2
   d4ecc:	4159      	adcs	r1, r3
   d4ece:	f005 fb5b 	bl	da588 <__aeabi_l2f>
   d4ed2:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4ef4 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4ed6:	ee07 0a90 	vmov	s15, r0
   d4eda:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4ee2:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4ef8 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4eea:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4efc <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ef2:	bf00      	nop
   d4ef4:	3b800000 	.word	0x3b800000
   d4ef8:	7fc00000 	.word	0x7fc00000
   d4efc:	00000000 	.word	0x00000000

000d4f00 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d4f00:	b508      	push	{r3, lr}
   d4f02:	ed2d 8b02 	vpush	{d8}
   d4f06:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d4f0a:	f7ff ff1b 	bl	d4d44 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d4f0e:	eddf 7a16 	vldr	s15, [pc, #88]	; d4f68 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d4f12:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4f16:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d4f1a:	ee17 0a90 	vmov	r0, s15
   d4f1e:	f004 fec7 	bl	d9cb0 <__aeabi_f2d>
   d4f22:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d4f58 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d4f26:	ec41 0b10 	vmov	d0, r0, r1
   d4f2a:	f003 fc25 	bl	d8778 <pow>
   d4f2e:	2000      	movs	r0, #0
   d4f30:	ec53 2b10 	vmov	r2, r3, d0
   d4f34:	490d      	ldr	r1, [pc, #52]	; (d4f6c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d4f36:	f004 fd5b 	bl	d99f0 <__aeabi_dsub>
   d4f3a:	a309      	add	r3, pc, #36	; (adr r3, d4f60 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d4f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f40:	f004 ff0a 	bl	d9d58 <__aeabi_dmul>
   d4f44:	f005 fa00 	bl	da348 <__aeabi_d2f>
}
   d4f48:	ecbd 8b02 	vpop	{d8}
   d4f4c:	ee00 0a10 	vmov	s0, r0
   d4f50:	bd08      	pop	{r3, pc}
   d4f52:	bf00      	nop
   d4f54:	f3af 8000 	nop.w
   d4f58:	1a36e2eb 	.word	0x1a36e2eb
   d4f5c:	3fc85bc0 	.word	0x3fc85bc0
   d4f60:	00000000 	.word	0x00000000
   d4f64:	40e5a540 	.word	0x40e5a540
   d4f68:	42c80000 	.word	0x42c80000
   d4f6c:	3ff00000 	.word	0x3ff00000

000d4f70 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4f70:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4f72:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f76:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4f78:	b085      	sub	sp, #20
   d4f7a:	4604      	mov	r4, r0
   d4f7c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4f7e:	d11d      	bne.n	d4fbc <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4f80:	7901      	ldrb	r1, [r0, #4]
   d4f82:	6800      	ldr	r0, [r0, #0]
   d4f84:	f002 fd49 	bl	d7a1a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4f88:	6820      	ldr	r0, [r4, #0]
   d4f8a:	6803      	ldr	r3, [r0, #0]
   d4f8c:	4629      	mov	r1, r5
   d4f8e:	689b      	ldr	r3, [r3, #8]
   d4f90:	4798      	blx	r3
        _wire -> endTransmission();
   d4f92:	6820      	ldr	r0, [r4, #0]
   d4f94:	f002 fd49 	bl	d7a2a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4f98:	2202      	movs	r2, #2
   d4f9a:	7921      	ldrb	r1, [r4, #4]
   d4f9c:	6820      	ldr	r0, [r4, #0]
   d4f9e:	f002 fd39 	bl	d7a14 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4fa2:	6820      	ldr	r0, [r4, #0]
   d4fa4:	6803      	ldr	r3, [r0, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	4798      	blx	r3
   d4faa:	4605      	mov	r5, r0
   d4fac:	6820      	ldr	r0, [r4, #0]
   d4fae:	6803      	ldr	r3, [r0, #0]
   d4fb0:	695b      	ldr	r3, [r3, #20]
   d4fb2:	4798      	blx	r3
   d4fb4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4fb8:	b285      	uxth	r5, r0
   d4fba:	e035      	b.n	d5028 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4fbc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fc0:	3301      	adds	r3, #1
   d4fc2:	d10e      	bne.n	d4fe2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4fc4:	4b1a      	ldr	r3, [pc, #104]	; (d5030 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4fc6:	4a1b      	ldr	r2, [pc, #108]	; (d5034 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4fc8:	9300      	str	r3, [sp, #0]
   d4fca:	9202      	str	r2, [sp, #8]
   d4fcc:	2300      	movs	r3, #0
   d4fce:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fd0:	4668      	mov	r0, sp
   d4fd2:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fd6:	f88d 200c 	strb.w	r2, [sp, #12]
   d4fda:	f88d 300d 	strb.w	r3, [sp, #13]
   d4fde:	f7ff fe0d 	bl	d4bfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4fe2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4fe6:	2100      	movs	r1, #0
   d4fe8:	b280      	uxth	r0, r0
   d4fea:	f003 f9d4 	bl	d8396 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4fee:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f7ff fdc4 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff fdc0 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
   d5000:	2100      	movs	r1, #0
   d5002:	4605      	mov	r5, r0
   d5004:	4620      	mov	r0, r4
   d5006:	f7ff fdbb 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
   d500a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d500e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5010:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5014:	2101      	movs	r1, #1
   d5016:	b280      	uxth	r0, r0
   d5018:	f003 f9bd 	bl	d8396 <digitalWrite>
        if (_sck == -1)
   d501c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5020:	3301      	adds	r3, #1
   d5022:	d101      	bne.n	d5028 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d5024:	f7ff fde3 	bl	d4bee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d5028:	4628      	mov	r0, r5
   d502a:	b005      	add	sp, #20
   d502c:	bd30      	pop	{r4, r5, pc}
   d502e:	bf00      	nop
   d5030:	000db9e4 	.word	0x000db9e4
   d5034:	0007a120 	.word	0x0007a120

000d5038 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5038:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d503a:	f7ff ff99 	bl	d4f70 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d503e:	ba40      	rev16	r0, r0
}
   d5040:	b280      	uxth	r0, r0
   d5042:	bd08      	pop	{r3, pc}

000d5044 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d5044:	b510      	push	{r4, lr}
   d5046:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5048:	f7ff fe4e 	bl	d4ce8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d504c:	21fd      	movs	r1, #253	; 0xfd
   d504e:	4620      	mov	r0, r4
   d5050:	f7ff ff8e 	bl	d4f70 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5054:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5058:	d038      	beq.n	d50cc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d505a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d505e:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5060:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d5064:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5066:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d506a:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d506e:	fb02 3311 	mls	r3, r2, r1, r3
   d5072:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5076:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5078:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d507c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5080:	4353      	muls	r3, r2
   d5082:	12db      	asrs	r3, r3, #11
   d5084:	4342      	muls	r2, r0
   d5086:	1292      	asrs	r2, r2, #10
   d5088:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d508c:	4353      	muls	r3, r2
   d508e:	129b      	asrs	r3, r3, #10
   d5090:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d5094:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d5098:	4353      	muls	r3, r2
   d509a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d509e:	139b      	asrs	r3, r3, #14
   d50a0:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d50a2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d50a4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d50a8:	4352      	muls	r2, r2
   d50aa:	11d2      	asrs	r2, r2, #7
   d50ac:	434a      	muls	r2, r1
   d50ae:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d50b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d50b6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d50ba:	bfa8      	it	ge
   d50bc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d50c0:	131b      	asrs	r3, r3, #12
   d50c2:	ee00 3a10 	vmov	s0, r3
   d50c6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d50ca:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d50cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d50d4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d50d0:	bd10      	pop	{r4, pc}
   d50d2:	bf00      	nop
   d50d4:	7fc00000 	.word	0x7fc00000

000d50d8 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d50d8:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d50da:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d50de:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d50e0:	b085      	sub	sp, #20
   d50e2:	4604      	mov	r4, r0
   d50e4:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d50e6:	d116      	bne.n	d5116 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d50e8:	7901      	ldrb	r1, [r0, #4]
   d50ea:	6800      	ldr	r0, [r0, #0]
   d50ec:	f002 fc95 	bl	d7a1a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50f0:	6820      	ldr	r0, [r4, #0]
   d50f2:	6803      	ldr	r3, [r0, #0]
   d50f4:	4629      	mov	r1, r5
   d50f6:	689b      	ldr	r3, [r3, #8]
   d50f8:	4798      	blx	r3
        _wire -> endTransmission();
   d50fa:	6820      	ldr	r0, [r4, #0]
   d50fc:	f002 fc95 	bl	d7a2a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5100:	2201      	movs	r2, #1
   d5102:	7921      	ldrb	r1, [r4, #4]
   d5104:	6820      	ldr	r0, [r4, #0]
   d5106:	f002 fc85 	bl	d7a14 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d510a:	6820      	ldr	r0, [r4, #0]
   d510c:	6803      	ldr	r3, [r0, #0]
   d510e:	695b      	ldr	r3, [r3, #20]
   d5110:	4798      	blx	r3
   d5112:	b2c5      	uxtb	r5, r0
   d5114:	e02e      	b.n	d5174 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d5116:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d511a:	3301      	adds	r3, #1
   d511c:	d10e      	bne.n	d513c <_ZN15Adafruit_BME2805read8Eh+0x64>
   d511e:	4b17      	ldr	r3, [pc, #92]	; (d517c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5120:	4a17      	ldr	r2, [pc, #92]	; (d5180 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d5122:	9300      	str	r3, [sp, #0]
   d5124:	9202      	str	r2, [sp, #8]
   d5126:	2300      	movs	r3, #0
   d5128:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d512a:	4668      	mov	r0, sp
   d512c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5130:	f88d 200c 	strb.w	r2, [sp, #12]
   d5134:	f88d 300d 	strb.w	r3, [sp, #13]
   d5138:	f7ff fd60 	bl	d4bfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d513c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5140:	2100      	movs	r1, #0
   d5142:	b280      	uxth	r0, r0
   d5144:	f003 f927 	bl	d8396 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5148:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d514c:	4620      	mov	r0, r4
   d514e:	f7ff fd17 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5152:	2100      	movs	r1, #0
   d5154:	4620      	mov	r0, r4
   d5156:	f7ff fd13 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
   d515a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d515c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5160:	2101      	movs	r1, #1
   d5162:	b280      	uxth	r0, r0
   d5164:	f003 f917 	bl	d8396 <digitalWrite>
        if (_sck == -1)
   d5168:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d516c:	3301      	adds	r3, #1
   d516e:	d101      	bne.n	d5174 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d5170:	f7ff fd3d 	bl	d4bee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d5174:	4628      	mov	r0, r5
   d5176:	b005      	add	sp, #20
   d5178:	bd30      	pop	{r4, r5, pc}
   d517a:	bf00      	nop
   d517c:	000db9e4 	.word	0x000db9e4
   d5180:	0007a120 	.word	0x0007a120

000d5184 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d5184:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5186:	21f3      	movs	r1, #243	; 0xf3
   d5188:	f7ff ffa6 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d518c:	f000 0001 	and.w	r0, r0, #1
   d5190:	bd08      	pop	{r3, pc}

000d5192 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5192:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5194:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5196:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5198:	f7ff ff4e 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d519c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d519e:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51a0:	4620      	mov	r0, r4
   d51a2:	f7ff ff49 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51a6:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d51a8:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51aa:	4620      	mov	r0, r4
   d51ac:	f7ff ff44 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d51b0:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d51b2:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d51b4:	4620      	mov	r0, r4
   d51b6:	f7ff ff3f 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51ba:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d51bc:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51be:	4620      	mov	r0, r4
   d51c0:	f7ff ff3a 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51c4:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d51c6:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51c8:	4620      	mov	r0, r4
   d51ca:	f7ff ff35 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51ce:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d51d0:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51d2:	4620      	mov	r0, r4
   d51d4:	f7ff ff30 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51d8:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d51da:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51dc:	4620      	mov	r0, r4
   d51de:	f7ff ff2b 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51e2:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d51e4:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51e6:	4620      	mov	r0, r4
   d51e8:	f7ff ff26 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51ec:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d51ee:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51f0:	4620      	mov	r0, r4
   d51f2:	f7ff ff21 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d51f6:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d51f8:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d51fa:	4620      	mov	r0, r4
   d51fc:	f7ff ff1c 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
   d5200:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5202:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5204:	4620      	mov	r0, r4
   d5206:	f7ff ff17 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d520a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d520c:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d520e:	4620      	mov	r0, r4
   d5210:	f7ff ff62 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5214:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5216:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff ff0c 	bl	d5038 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5220:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5222:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff ff57 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d522a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d522c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff ff51 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
   d5236:	21e5      	movs	r1, #229	; 0xe5
   d5238:	4605      	mov	r5, r0
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff4c 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
   d5240:	f000 000f 	and.w	r0, r0, #15
   d5244:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5248:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d524a:	21e6      	movs	r1, #230	; 0xe6
   d524c:	4620      	mov	r0, r4
   d524e:	f7ff ff43 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
   d5252:	21e5      	movs	r1, #229	; 0xe5
   d5254:	4605      	mov	r5, r0
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff ff3e 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
   d525c:	1100      	asrs	r0, r0, #4
   d525e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5262:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5264:	21e7      	movs	r1, #231	; 0xe7
   d5266:	4620      	mov	r0, r4
   d5268:	f7ff ff36 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
   d526c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d5270:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5274 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d5274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d5276:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d527a:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d527c:	4604      	mov	r4, r0
   d527e:	460e      	mov	r6, r1
   d5280:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5282:	d111      	bne.n	d52a8 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5284:	7901      	ldrb	r1, [r0, #4]
   d5286:	6800      	ldr	r0, [r0, #0]
   d5288:	f002 fbc7 	bl	d7a1a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d528c:	6820      	ldr	r0, [r4, #0]
   d528e:	6803      	ldr	r3, [r0, #0]
   d5290:	4631      	mov	r1, r6
   d5292:	689b      	ldr	r3, [r3, #8]
   d5294:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d5296:	6820      	ldr	r0, [r4, #0]
   d5298:	6803      	ldr	r3, [r0, #0]
   d529a:	4629      	mov	r1, r5
   d529c:	689b      	ldr	r3, [r3, #8]
   d529e:	4798      	blx	r3
        _wire -> endTransmission();
   d52a0:	6820      	ldr	r0, [r4, #0]
   d52a2:	f002 fbc2 	bl	d7a2a <_ZN7TwoWire15endTransmissionEv>
   d52a6:	e02d      	b.n	d5304 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d52a8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d52ac:	3301      	adds	r3, #1
   d52ae:	d10e      	bne.n	d52ce <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d52b0:	4b15      	ldr	r3, [pc, #84]	; (d5308 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d52b2:	4a16      	ldr	r2, [pc, #88]	; (d530c <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d52b4:	9300      	str	r3, [sp, #0]
   d52b6:	9202      	str	r2, [sp, #8]
   d52b8:	2300      	movs	r3, #0
   d52ba:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d52bc:	4668      	mov	r0, sp
   d52be:	f88d 3004 	strb.w	r3, [sp, #4]
   d52c2:	f88d 200c 	strb.w	r2, [sp, #12]
   d52c6:	f88d 300d 	strb.w	r3, [sp, #13]
   d52ca:	f7ff fc97 	bl	d4bfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d52ce:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52d2:	2100      	movs	r1, #0
   d52d4:	b280      	uxth	r0, r0
   d52d6:	f003 f85e 	bl	d8396 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d52da:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d52de:	4620      	mov	r0, r4
   d52e0:	f7ff fc4e 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d52e4:	4629      	mov	r1, r5
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff fc4a 	bl	d4b80 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d52ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52f0:	2101      	movs	r1, #1
   d52f2:	b280      	uxth	r0, r0
   d52f4:	f003 f84f 	bl	d8396 <digitalWrite>
    if (_sck == -1)
   d52f8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d52fc:	3301      	adds	r3, #1
   d52fe:	d101      	bne.n	d5304 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d5300:	f7ff fc75 	bl	d4bee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d5304:	b004      	add	sp, #16
   d5306:	bd70      	pop	{r4, r5, r6, pc}
   d5308:	000db9e4 	.word	0x000db9e4
   d530c:	0007a120 	.word	0x0007a120

000d5310 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d5310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d5312:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d5316:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d531a:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d531e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d5322:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d5326:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d532a:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d532e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d5332:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d5336:	f366 1347 	bfi	r3, r6, #5, #3
   d533a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d533e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5342:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d5346:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d5348:	f367 0302 	bfi	r3, r7, #0, #3
   d534c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5350:	f006 0207 	and.w	r2, r6, #7
   d5354:	21f2      	movs	r1, #242	; 0xf2
   d5356:	f7ff ff8d 	bl	d5274 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d535a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d535e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5362:	f002 0107 	and.w	r1, r2, #7
   d5366:	009b      	lsls	r3, r3, #2
   d5368:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d536c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5370:	4620      	mov	r0, r4
   d5372:	21f5      	movs	r1, #245	; 0xf5
   d5374:	f7ff ff7e 	bl	d5274 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5378:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d537c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5380:	f002 0107 	and.w	r1, r2, #7
   d5384:	009b      	lsls	r3, r3, #2
   d5386:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d538a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d538e:	4620      	mov	r0, r4
   d5390:	21f4      	movs	r1, #244	; 0xf4
}
   d5392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5396:	f7ff bf6d 	b.w	d5274 <_ZN15Adafruit_BME2806write8Ehh>

000d539a <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d539a:	b530      	push	{r4, r5, lr}
   d539c:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d539e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d53a2:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d53a4:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d53a6:	d103      	bne.n	d53b0 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d53a8:	6820      	ldr	r0, [r4, #0]
   d53aa:	f002 faff 	bl	d79ac <_ZN7TwoWire5beginEv>
   d53ae:	e022      	b.n	d53f6 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d53b0:	2101      	movs	r1, #1
   d53b2:	b280      	uxth	r0, r0
   d53b4:	f002 ffef 	bl	d8396 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d53b8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d53bc:	2101      	movs	r1, #1
   d53be:	b280      	uxth	r0, r0
   d53c0:	f002 ffd8 	bl	d8374 <pinMode>
        if (_sck == -1) {
   d53c4:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d53c8:	1c43      	adds	r3, r0, #1
   d53ca:	d104      	bne.n	d53d6 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d53cc:	f7ff fbc0 	bl	d4b50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53d0:	f001 f8ae 	bl	d6530 <_ZN8SPIClass5beginEv>
   d53d4:	e00f      	b.n	d53f6 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d53d6:	2101      	movs	r1, #1
   d53d8:	b280      	uxth	r0, r0
   d53da:	f002 ffcb 	bl	d8374 <pinMode>
            pinMode(_mosi, OUTPUT);
   d53de:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d53e2:	2101      	movs	r1, #1
   d53e4:	b280      	uxth	r0, r0
   d53e6:	f002 ffc5 	bl	d8374 <pinMode>
            pinMode(_miso, INPUT);
   d53ea:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d53ee:	2100      	movs	r1, #0
   d53f0:	b280      	uxth	r0, r0
   d53f2:	f002 ffbf 	bl	d8374 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d53f6:	21d0      	movs	r1, #208	; 0xd0
   d53f8:	4620      	mov	r0, r4
   d53fa:	f7ff fe6d 	bl	d50d8 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d53fe:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5400:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5402:	d120      	bne.n	d5446 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5404:	4620      	mov	r0, r4
   d5406:	22b6      	movs	r2, #182	; 0xb6
   d5408:	21e0      	movs	r1, #224	; 0xe0
   d540a:	f7ff ff33 	bl	d5274 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d540e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5412:	f001 fd6b 	bl	d6eec <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d5416:	4620      	mov	r0, r4
   d5418:	f7ff feb4 	bl	d5184 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d541c:	4605      	mov	r5, r0
   d541e:	b108      	cbz	r0, d5424 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5420:	2064      	movs	r0, #100	; 0x64
   d5422:	e7f6      	b.n	d5412 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5424:	4620      	mov	r0, r4
   d5426:	f7ff feb4 	bl	d5192 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d542a:	2305      	movs	r3, #5
   d542c:	9300      	str	r3, [sp, #0]
   d542e:	461a      	mov	r2, r3
   d5430:	2103      	movs	r1, #3
   d5432:	4620      	mov	r0, r4
   d5434:	9502      	str	r5, [sp, #8]
   d5436:	9501      	str	r5, [sp, #4]
   d5438:	f7ff ff6a 	bl	d5310 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d543c:	2064      	movs	r0, #100	; 0x64
   d543e:	f001 fd55 	bl	d6eec <delay>
   d5442:	2001      	movs	r0, #1
   d5444:	e000      	b.n	d5448 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d5446:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d5448:	b005      	add	sp, #20
   d544a:	bd30      	pop	{r4, r5, pc}

000d544c <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d544c:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d544e:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d5450:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d5452:	f002 ffff 	bl	d8454 <_Z19__fetch_global_Wirev>
   d5456:	6020      	str	r0, [r4, #0]
	return init();
   d5458:	4620      	mov	r0, r4
}
   d545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d545e:	f7ff bf9c 	b.w	d539a <_ZN15Adafruit_BME2804initEv>

000d5462 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d5462:	f000 bcfb 	b.w	d5e5c <HAL_Pin_Map>

000d5466 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5466:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5468:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d546c:	6803      	ldr	r3, [r0, #0]
   d546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5470:	4798      	blx	r3
}
   d5472:	3000      	adds	r0, #0
   d5474:	bf18      	it	ne
   d5476:	2001      	movne	r0, #1
   d5478:	bd08      	pop	{r3, pc}

000d547a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d547a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d547c:	4606      	mov	r6, r0
   d547e:	460f      	mov	r7, r1
   d5480:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5482:	b1c4      	cbz	r4, d54b6 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5484:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5488:	6803      	ldr	r3, [r0, #0]
   d548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d548c:	4798      	blx	r3
   d548e:	b908      	cbnz	r0, d5494 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5490:	2000      	movs	r0, #0
   d5492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5494:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5498:	2cfa      	cmp	r4, #250	; 0xfa
   d549a:	6803      	ldr	r3, [r0, #0]
   d549c:	4625      	mov	r5, r4
   d549e:	bfa8      	it	ge
   d54a0:	25fa      	movge	r5, #250	; 0xfa
   d54a2:	68db      	ldr	r3, [r3, #12]
   d54a4:	462a      	mov	r2, r5
   d54a6:	4639      	mov	r1, r7
   d54a8:	4798      	blx	r3
   d54aa:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d54ac:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d54ae:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d54b0:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d54b2:	d0e6      	beq.n	d5482 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d54b4:	e7ec      	b.n	d5490 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d54b6:	2001      	movs	r0, #1
}
   d54b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54ba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d54ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54be:	4606      	mov	r6, r0
   d54c0:	4688      	mov	r8, r1
   d54c2:	4691      	mov	r9, r2
   d54c4:	461f      	mov	r7, r3
   d54c6:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d54c8:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d54ca:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54ce:	6803      	ldr	r3, [r0, #0]
   d54d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54d2:	4798      	blx	r3
   d54d4:	b1d0      	cbz	r0, d550c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d54d6:	2d00      	cmp	r5, #0
   d54d8:	db18      	blt.n	d550c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d54da:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54de:	6803      	ldr	r3, [r0, #0]
   d54e0:	691b      	ldr	r3, [r3, #16]
   d54e2:	4798      	blx	r3
   d54e4:	b160      	cbz	r0, d5500 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d54e6:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54ea:	6803      	ldr	r3, [r0, #0]
   d54ec:	695b      	ldr	r3, [r3, #20]
   d54ee:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d54f0:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d54f4:	3401      	adds	r4, #1
   d54f6:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d54f8:	454c      	cmp	r4, r9
   d54fa:	d007      	beq.n	d550c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d54fc:	463d      	mov	r5, r7
   d54fe:	e7ec      	b.n	d54da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5500:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5502:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5504:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5506:	f001 fcf1 	bl	d6eec <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d550a:	e7de      	b.n	d54ca <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d550c:	4620      	mov	r0, r4
   d550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5512 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5512:	b570      	push	{r4, r5, r6, lr}
   d5514:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5516:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d551a:	2296      	movs	r2, #150	; 0x96
   d551c:	2100      	movs	r1, #0
   d551e:	4628      	mov	r0, r5
   d5520:	f005 fbf0 	bl	dad04 <memset>
  strcpy((char *)buffer, servername);
   d5524:	6861      	ldr	r1, [r4, #4]
   d5526:	4628      	mov	r0, r5
   d5528:	f005 fc26 	bl	dad78 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d552c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5530:	8922      	ldrh	r2, [r4, #8]
   d5532:	6803      	ldr	r3, [r0, #0]
   d5534:	4629      	mov	r1, r5
   d5536:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5538:	2300      	movs	r3, #0
   d553a:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d553c:	3000      	adds	r0, #0
   d553e:	bf18      	it	ne
   d5540:	2001      	movne	r0, #1
   d5542:	bd70      	pop	{r4, r5, r6, pc}

000d5544 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5544:	b510      	push	{r4, lr}
   d5546:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5548:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d554c:	6803      	ldr	r3, [r0, #0]
   d554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5550:	4798      	blx	r3
   d5552:	b120      	cbz	r0, d555e <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5554:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5558:	6803      	ldr	r3, [r0, #0]
   d555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d555c:	4798      	blx	r3
  }
  return true;
}
   d555e:	2001      	movs	r0, #1
   d5560:	bd10      	pop	{r4, pc}

000d5562 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5562:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5564:	6803      	ldr	r3, [r0, #0]
   d5566:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5568:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d556a:	4798      	blx	r3
   d556c:	b9c8      	cbnz	r0, d55a2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d556e:	4620      	mov	r0, r4
   d5570:	f000 fa5f 	bl	d5a32 <_ZN13Adafruit_MQTT7connectEv>
   d5574:	2504      	movs	r5, #4
   d5576:	b170      	cbz	r0, d5596 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5578:	3d01      	subs	r5, #1
   d557a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d557e:	d00a      	beq.n	d5596 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5580:	4620      	mov	r0, r4
   d5582:	f000 f8a9 	bl	d56d8 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5586:	f241 3088 	movw	r0, #5000	; 0x1388
   d558a:	f001 fcaf 	bl	d6eec <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d558e:	4620      	mov	r0, r4
   d5590:	f000 fa4f 	bl	d5a32 <_ZN13Adafruit_MQTT7connectEv>
   d5594:	e7ef      	b.n	d5576 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5596:	6823      	ldr	r3, [r4, #0]
   d5598:	4620      	mov	r0, r4
   d559a:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d559c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d55a0:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d55a2:	bd70      	pop	{r4, r5, r6, pc}

000d55a4 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d55a4:	f000 bc5a 	b.w	d5e5c <HAL_Pin_Map>

000d55a8 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d55a8:	b570      	push	{r4, r5, r6, lr}
   d55aa:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d55ac:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d55ae:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d55b0:	f005 fc05 	bl	dadbe <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d55b4:	1203      	asrs	r3, r0, #8
   d55b6:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d55b8:	7060      	strb	r0, [r4, #1]
   d55ba:	b285      	uxth	r5, r0
   d55bc:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d55be:	462a      	mov	r2, r5
   d55c0:	4631      	mov	r1, r6
   d55c2:	4620      	mov	r0, r4
   d55c4:	f005 fc3d 	bl	dae42 <strncpy>
  return p+len;
}
   d55c8:	1960      	adds	r0, r4, r5
   d55ca:	bd70      	pop	{r4, r5, r6, pc}

000d55cc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d55cc:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d55ce:	6103      	str	r3, [r0, #16]
  password = pass;
   d55d0:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d55d2:	4d0d      	ldr	r5, [pc, #52]	; (d5608 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d55d4:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d55d6:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d55d8:	4a0c      	ldr	r2, [pc, #48]	; (d560c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d55da:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d55dc:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d55de:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d55e0:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d55e2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d55e6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d55ea:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d55ee:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d55f2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d55f6:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d55f8:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d55fa:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d55fe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5602:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5606:	bd30      	pop	{r4, r5, pc}
   d5608:	000dba5c 	.word	0x000dba5c
   d560c:	000dba85 	.word	0x000dba85

000d5610 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5614:	fa0f fa83 	sxth.w	sl, r3
   d5618:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d561a:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d561c:	699d      	ldr	r5, [r3, #24]
   d561e:	2201      	movs	r2, #1
   d5620:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5622:	4606      	mov	r6, r0
   d5624:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5626:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5628:	b2c0      	uxtb	r0, r0
   d562a:	2801      	cmp	r0, #1
   d562c:	d001      	beq.n	d5632 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d562e:	2000      	movs	r0, #0
   d5630:	e034      	b.n	d569c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d5632:	1c65      	adds	r5, r4, #1
   d5634:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5638:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d563a:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d563e:	6833      	ldr	r3, [r6, #0]
   d5640:	699b      	ldr	r3, [r3, #24]
   d5642:	2201      	movs	r2, #1
   d5644:	461f      	mov	r7, r3
   d5646:	4629      	mov	r1, r5
   d5648:	4653      	mov	r3, sl
   d564a:	4630      	mov	r0, r6
   d564c:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d564e:	b2c0      	uxtb	r0, r0
   d5650:	2801      	cmp	r0, #1
   d5652:	d1ec      	bne.n	d562e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5654:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d565c:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d565e:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5662:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5666:	d0e2      	beq.n	d562e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5668:	061b      	lsls	r3, r3, #24
   d566a:	d4e8      	bmi.n	d563e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d566c:	9b01      	ldr	r3, [sp, #4]
   d566e:	1b2c      	subs	r4, r5, r4
   d5670:	1b1b      	subs	r3, r3, r4
   d5672:	3b01      	subs	r3, #1
   d5674:	4599      	cmp	r9, r3
   d5676:	6833      	ldr	r3, [r6, #0]
   d5678:	d906      	bls.n	d5688 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d567a:	9a01      	ldr	r2, [sp, #4]
   d567c:	699f      	ldr	r7, [r3, #24]
   d567e:	3a01      	subs	r2, #1
   d5680:	1b12      	subs	r2, r2, r4
   d5682:	4653      	mov	r3, sl
   d5684:	b292      	uxth	r2, r2
   d5686:	e003      	b.n	d5690 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5688:	699f      	ldr	r7, [r3, #24]
   d568a:	fa1f f289 	uxth.w	r2, r9
   d568e:	4653      	mov	r3, sl
   d5690:	4629      	mov	r1, r5
   d5692:	4630      	mov	r0, r6
   d5694:	47b8      	blx	r7
   d5696:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5698:	4420      	add	r0, r4
   d569a:	b280      	uxth	r0, r0
}
   d569c:	b003      	add	sp, #12
   d569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d56a4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56a6:	4605      	mov	r5, r0
   d56a8:	460c      	mov	r4, r1
   d56aa:	4616      	mov	r6, r2
   d56ac:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d56ae:	463b      	mov	r3, r7
   d56b0:	2296      	movs	r2, #150	; 0x96
   d56b2:	4621      	mov	r1, r4
   d56b4:	4628      	mov	r0, r5
   d56b6:	f7ff ffab 	bl	d5610 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d56ba:	b148      	cbz	r0, d56d0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d56bc:	7823      	ldrb	r3, [r4, #0]
   d56be:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d56c2:	d005      	beq.n	d56d0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d56c4:	f002 f878 	bl	d77b8 <_Z16_fetch_usbserialv>
   d56c8:	4902      	ldr	r1, [pc, #8]	; (d56d4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d56ca:	f001 fa3a 	bl	d6b42 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d56ce:	e7ee      	b.n	d56ae <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56d2:	bf00      	nop
   d56d4:	000dba86 	.word	0x000dba86

000d56d8 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d56d8:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d56da:	23e0      	movs	r3, #224	; 0xe0
   d56dc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d56e0:	2300      	movs	r3, #0
   d56e2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d56e6:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d56e8:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d56ea:	695b      	ldr	r3, [r3, #20]
   d56ec:	2202      	movs	r2, #2
   d56ee:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d56f2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d56f4:	6823      	ldr	r3, [r4, #0]
   d56f6:	4620      	mov	r0, r4
   d56f8:	691b      	ldr	r3, [r3, #16]

}
   d56fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d56fe:	4718      	bx	r3

000d5700 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5700:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d5704:	b530      	push	{r4, r5, lr}
   d5706:	4613      	mov	r3, r2
   d5708:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d570c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d5710:	428d      	cmp	r5, r1
   d5712:	d00f      	beq.n	d5734 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5714:	42a3      	cmp	r3, r4
   d5716:	d1f9      	bne.n	d570c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d5718:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d571a:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d571e:	b924      	cbnz	r4, d572a <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d5720:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d5724:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d5728:	e004      	b.n	d5734 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d572a:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d572c:	2b05      	cmp	r3, #5
   d572e:	d1f4      	bne.n	d571a <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d5730:	2000      	movs	r0, #0
   d5732:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d5734:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d5736:	bd30      	pop	{r4, r5, pc}

000d5738 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d573c:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5740:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5742:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5744:	2296      	movs	r2, #150	; 0x96
   d5746:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5748:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d574a:	f7ff ff61 	bl	d5610 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d574e:	4606      	mov	r6, r0
   d5750:	b310      	cbz	r0, d5798 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5752:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5756:	b2bb      	uxth	r3, r7
   d5758:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d575a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d575e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5762:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5764:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5766:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d576a:	f1bb 0f00 	cmp.w	fp, #0
   d576e:	d00e      	beq.n	d578e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5770:	f8db 1000 	ldr.w	r1, [fp]
   d5774:	9103      	str	r1, [sp, #12]
   d5776:	4608      	mov	r0, r1
   d5778:	f005 fb21 	bl	dadbe <strlen>
   d577c:	42b8      	cmp	r0, r7
   d577e:	4680      	mov	r8, r0
   d5780:	9903      	ldr	r1, [sp, #12]
   d5782:	d104      	bne.n	d578e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5784:	463a      	mov	r2, r7
   d5786:	9802      	ldr	r0, [sp, #8]
   d5788:	f005 fb22 	bl	dadd0 <strncasecmp>
   d578c:	b128      	cbz	r0, d579a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d578e:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5790:	2d05      	cmp	r5, #5
   d5792:	d1e8      	bne.n	d5766 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5794:	2000      	movs	r0, #0
   d5796:	e04a      	b.n	d582e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5798:	e049      	b.n	d582e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d579a:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d579e:	f00a 0a06 	and.w	sl, sl, #6
   d57a2:	f1ba 0f02 	cmp.w	sl, #2
   d57a6:	d13f      	bne.n	d5828 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d57a8:	19e2      	adds	r2, r4, r7
   d57aa:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d57ae:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d57b2:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d57b6:	2214      	movs	r2, #20
   d57b8:	2100      	movs	r1, #0
   d57ba:	f10b 0005 	add.w	r0, fp, #5
   d57be:	f005 faa1 	bl	dad04 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d57c2:	9b01      	ldr	r3, [sp, #4]
   d57c4:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d57c8:	30fc      	adds	r0, #252	; 0xfc
   d57ca:	4406      	add	r6, r0
   d57cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d57d0:	ebca 0606 	rsb	r6, sl, r6
   d57d4:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d57d6:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d57d8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d57dc:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d57e0:	bf28      	it	cs
   d57e2:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d57e4:	4451      	add	r1, sl
   d57e6:	4632      	mov	r2, r6
   d57e8:	4449      	add	r1, r9
   d57ea:	3005      	adds	r0, #5
   d57ec:	f005 fa6f 	bl	dacce <memmove>
  subscriptions[i]->datalen = datalen;
   d57f0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d57f4:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d57f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d57fa:	f003 0306 	and.w	r3, r3, #6
   d57fe:	2b02      	cmp	r3, #2
   d5800:	d10f      	bne.n	d5822 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5802:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5806:	123b      	asrs	r3, r7, #8
   d5808:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d580c:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d580e:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5812:	2240      	movs	r2, #64	; 0x40
   d5814:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5818:	695b      	ldr	r3, [r3, #20]
   d581a:	2204      	movs	r2, #4
   d581c:	a905      	add	r1, sp, #20
   d581e:	4620      	mov	r0, r4
   d5820:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5822:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5826:	e002      	b.n	d582e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5828:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d582a:	4682      	mov	sl, r0
   d582c:	e7c3      	b.n	d57b6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d582e:	b007      	add	sp, #28
   d5830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5834 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5834:	b538      	push	{r3, r4, r5, lr}
   d5836:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5838:	4608      	mov	r0, r1
   d583a:	2310      	movs	r3, #16
   d583c:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5840:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5842:	4929      	ldr	r1, [pc, #164]	; (d58e8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5844:	f7ff feb0 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5848:	2304      	movs	r3, #4
   d584a:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d584c:	2302      	movs	r3, #2
   d584e:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5850:	69a3      	ldr	r3, [r4, #24]
   d5852:	b1ab      	cbz	r3, d5880 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5854:	781b      	ldrb	r3, [r3, #0]
   d5856:	b19b      	cbz	r3, d5880 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5858:	2306      	movs	r3, #6
   d585a:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d585c:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5860:	2b01      	cmp	r3, #1
   d5862:	d101      	bne.n	d5868 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5864:	230e      	movs	r3, #14
   d5866:	e002      	b.n	d586e <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5868:	2b02      	cmp	r3, #2
   d586a:	d101      	bne.n	d5870 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d586c:	231e      	movs	r3, #30
   d586e:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5870:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5874:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5876:	bf02      	ittt	eq
   d5878:	7843      	ldrbeq	r3, [r0, #1]
   d587a:	f043 0320 	orreq.w	r3, r3, #32
   d587e:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5880:	6923      	ldr	r3, [r4, #16]
   d5882:	781b      	ldrb	r3, [r3, #0]
   d5884:	b11b      	cbz	r3, d588e <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5886:	7843      	ldrb	r3, [r0, #1]
   d5888:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d588c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d588e:	6963      	ldr	r3, [r4, #20]
   d5890:	781b      	ldrb	r3, [r3, #0]
   d5892:	b11b      	cbz	r3, d589c <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5894:	7843      	ldrb	r3, [r0, #1]
   d5896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d589a:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d589c:	2301      	movs	r3, #1
   d589e:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d58a0:	232c      	movs	r3, #44	; 0x2c
   d58a2:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d58a4:	68e1      	ldr	r1, [r4, #12]
   d58a6:	780b      	ldrb	r3, [r1, #0]
   d58a8:	b11b      	cbz	r3, d58b2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d58aa:	3004      	adds	r0, #4
   d58ac:	f7ff fe7c 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
   d58b0:	e002      	b.n	d58b8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d58b2:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d58b4:	7143      	strb	r3, [r0, #5]
      p++;
   d58b6:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d58b8:	69a1      	ldr	r1, [r4, #24]
   d58ba:	b131      	cbz	r1, d58ca <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d58bc:	780b      	ldrb	r3, [r1, #0]
   d58be:	b123      	cbz	r3, d58ca <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d58c0:	f7ff fe72 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d58c4:	69e1      	ldr	r1, [r4, #28]
   d58c6:	f7ff fe6f 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d58ca:	6921      	ldr	r1, [r4, #16]
   d58cc:	780b      	ldrb	r3, [r1, #0]
   d58ce:	b10b      	cbz	r3, d58d4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d58d0:	f7ff fe6a 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d58d4:	6961      	ldr	r1, [r4, #20]
   d58d6:	780b      	ldrb	r3, [r1, #0]
   d58d8:	b10b      	cbz	r3, d58de <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d58da:	f7ff fe65 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d58de:	1b40      	subs	r0, r0, r5
   d58e0:	b2c0      	uxtb	r0, r0
   d58e2:	1e83      	subs	r3, r0, #2
   d58e4:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d58e6:	bd38      	pop	{r3, r4, r5, pc}
   d58e8:	000dbaa5 	.word	0x000dbaa5

000d58ec <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d58ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d58f0:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d58f2:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d58f4:	460e      	mov	r6, r1
   d58f6:	4691      	mov	r9, r2
   d58f8:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d58fa:	f005 fa60 	bl	dadbe <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d58fe:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5902:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5906:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5908:	f1b8 0f00 	cmp.w	r8, #0
   d590c:	d101      	bne.n	d5912 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d590e:	1c83      	adds	r3, r0, #2
   d5910:	e000      	b.n	d5914 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5912:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5914:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5918:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d591a:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d591c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5920:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5922:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5926:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d592c:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d592e:	bf18      	it	ne
   d5930:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5934:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5938:	2b00      	cmp	r3, #0
   d593a:	d1f5      	bne.n	d5928 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d593c:	4649      	mov	r1, r9
   d593e:	f7ff fe33 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>
   d5942:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5944:	f1b8 0f00 	cmp.w	r8, #0
   d5948:	d00c      	beq.n	d5964 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d594a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d594e:	0a12      	lsrs	r2, r2, #8
   d5950:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5952:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5956:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5958:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d595c:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d595e:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5960:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5964:	4622      	mov	r2, r4
   d5966:	4639      	mov	r1, r7
   d5968:	4618      	mov	r0, r3
   d596a:	f005 f9b0 	bl	dacce <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d596e:	4420      	add	r0, r4
   d5970:	1b80      	subs	r0, r0, r6
}
   d5972:	b280      	uxth	r0, r0
   d5974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5978 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5978:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d597a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d597e:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5982:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5984:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5988:	4613      	mov	r3, r2
   d598a:	460a      	mov	r2, r1
   d598c:	4629      	mov	r1, r5
   d598e:	f7ff ffad 	bl	d58ec <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5992:	6823      	ldr	r3, [r4, #0]
   d5994:	4602      	mov	r2, r0
   d5996:	695b      	ldr	r3, [r3, #20]
   d5998:	4629      	mov	r1, r5
   d599a:	4620      	mov	r0, r4
   d599c:	4798      	blx	r3
   d599e:	b908      	cbnz	r0, d59a4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d59a0:	2000      	movs	r0, #0
   d59a2:	e017      	b.n	d59d4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d59a4:	b1b6      	cbz	r6, d59d4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d59a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d59aa:	2296      	movs	r2, #150	; 0x96
   d59ac:	4629      	mov	r1, r5
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fe2e 	bl	d5610 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d59b4:	2804      	cmp	r0, #4
   d59b6:	d1f3      	bne.n	d59a0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d59b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d59bc:	111b      	asrs	r3, r3, #4
   d59be:	2b04      	cmp	r3, #4
   d59c0:	d1ee      	bne.n	d59a0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d59c2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d59c4:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d59c8:	ba5b      	rev16	r3, r3
   d59ca:	3301      	adds	r3, #1
   d59cc:	b29b      	uxth	r3, r3
   d59ce:	1ac3      	subs	r3, r0, r3
   d59d0:	4258      	negs	r0, r3
   d59d2:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d59d4:	b002      	add	sp, #8
   d59d6:	bd70      	pop	{r4, r5, r6, pc}

000d59d8 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d59d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d59da:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d59dc:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d59de:	461f      	mov	r7, r3
   d59e0:	460e      	mov	r6, r1
   d59e2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d59e4:	f005 f9eb 	bl	dadbe <strlen>
   d59e8:	9700      	str	r7, [sp, #0]
   d59ea:	b283      	uxth	r3, r0
   d59ec:	4622      	mov	r2, r4
   d59ee:	4631      	mov	r1, r6
   d59f0:	4628      	mov	r0, r5
   d59f2:	f7ff ffc1 	bl	d5978 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d59f6:	b003      	add	sp, #12
   d59f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59fa <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d59fa:	b538      	push	{r3, r4, r5, lr}
   d59fc:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d59fe:	2382      	movs	r3, #130	; 0x82
   d5a00:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5a02:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5a04:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5a08:	0a09      	lsrs	r1, r1, #8
   d5a0a:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5a0c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5a10:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5a12:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5a16:	3101      	adds	r1, #1
   d5a18:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5a1c:	4611      	mov	r1, r2
   d5a1e:	1d20      	adds	r0, r4, #4
   d5a20:	f7ff fdc2 	bl	d55a8 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5a24:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5a28:	1b00      	subs	r0, r0, r4
   d5a2a:	b2c0      	uxtb	r0, r0
   d5a2c:	1e83      	subs	r3, r0, #2
   d5a2e:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5a30:	bd38      	pop	{r3, r4, r5, pc}

000d5a32 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5a36:	6803      	ldr	r3, [r0, #0]
   d5a38:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5a3a:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5a3c:	4798      	blx	r3
   d5a3e:	b918      	cbnz	r0, d5a48 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5a40:	f04f 30ff 	mov.w	r0, #4294967295
   d5a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5a48:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5a4c:	4629      	mov	r1, r5
   d5a4e:	4620      	mov	r0, r4
   d5a50:	f7ff fef0 	bl	d5834 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5a54:	6823      	ldr	r3, [r4, #0]
   d5a56:	b282      	uxth	r2, r0
   d5a58:	695b      	ldr	r3, [r3, #20]
   d5a5a:	4629      	mov	r1, r5
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	4798      	blx	r3
   d5a60:	2800      	cmp	r0, #0
   d5a62:	d0ed      	beq.n	d5a40 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5a64:	f241 7370 	movw	r3, #6000	; 0x1770
   d5a68:	2296      	movs	r2, #150	; 0x96
   d5a6a:	4629      	mov	r1, r5
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	f7ff fdcf 	bl	d5610 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5a72:	b2c0      	uxtb	r0, r0
   d5a74:	2804      	cmp	r0, #4
   d5a76:	d1e3      	bne.n	d5a40 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5a78:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5a7a:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5a7e:	d1df      	bne.n	d5a40 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5a80:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5a84:	b110      	cbz	r0, d5a8c <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5a86:	b240      	sxtb	r0, r0
   d5a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a8c:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5a90:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5a94:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5a98:	b1fb      	cbz	r3, d5ada <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5a9a:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5a9c:	683a      	ldr	r2, [r7, #0]
   d5a9e:	4629      	mov	r1, r5
   d5aa0:	7913      	ldrb	r3, [r2, #4]
   d5aa2:	6812      	ldr	r2, [r2, #0]
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	f7ff ffa8 	bl	d59fa <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5aaa:	6823      	ldr	r3, [r4, #0]
   d5aac:	b282      	uxth	r2, r0
   d5aae:	695b      	ldr	r3, [r3, #20]
   d5ab0:	4629      	mov	r1, r5
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	4798      	blx	r3
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	d0c2      	beq.n	d5a40 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5aba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5abe:	2209      	movs	r2, #9
   d5ac0:	4629      	mov	r1, r5
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	f7ff fdee 	bl	d56a4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5ac8:	b938      	cbnz	r0, d5ada <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5aca:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5acc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5ad0:	d1e4      	bne.n	d5a9c <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5ad2:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5ada:	4547      	cmp	r7, r8
   d5adc:	d1da      	bne.n	d5a94 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5ade:	2000      	movs	r0, #0
   d5ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ae4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5ae4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5ae6:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5aea:	7203      	strb	r3, [r0, #8]
}
   d5aec:	bd10      	pop	{r4, pc}

000d5aee <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5aee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5af0:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5af2:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5af4:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5af6:	a901      	add	r1, sp, #4
   d5af8:	f000 fdf7 	bl	d66ea <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5afc:	7a23      	ldrb	r3, [r4, #8]
   d5afe:	aa01      	add	r2, sp, #4
   d5b00:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b04:	f7ff ff68 	bl	d59d8 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5b08:	b004      	add	sp, #16
   d5b0a:	bd10      	pop	{r4, pc}

000d5b0c <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5b0c:	f7ff bfef 	b.w	d5aee <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5b10 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5b10:	b510      	push	{r4, lr}
   d5b12:	b092      	sub	sp, #72	; 0x48
   d5b14:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5b16:	460b      	mov	r3, r1
   d5b18:	2200      	movs	r2, #0
   d5b1a:	490b      	ldr	r1, [pc, #44]	; (d5b48 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5b1c:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5b1e:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5b22:	f000 fc7f 	bl	d6424 <sprintf>
  sprintf(sout, fmt, val);
   d5b26:	ed9d 0b00 	vldr	d0, [sp]
   d5b2a:	a902      	add	r1, sp, #8
   d5b2c:	ec53 2b10 	vmov	r2, r3, d0
   d5b30:	a807      	add	r0, sp, #28
   d5b32:	f000 fc77 	bl	d6424 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5b36:	7a23      	ldrb	r3, [r4, #8]
   d5b38:	aa07      	add	r2, sp, #28
   d5b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b3e:	f7ff ff4b 	bl	d59d8 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5b42:	b012      	add	sp, #72	; 0x48
   d5b44:	bd10      	pop	{r4, pc}
   d5b46:	bf00      	nop
   d5b48:	000dbaaa 	.word	0x000dbaaa

000d5b4c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5b4c:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5b4e:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5b50:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5b52:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5b54:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5b56:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5b58:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5b5a:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5b5c:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5b5e:	6283      	str	r3, [r0, #40]	; 0x28
   d5b60:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5b62:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5b64:	bd10      	pop	{r4, pc}

000d5b66 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5b66:	f000 b979 	b.w	d5e5c <HAL_Pin_Map>
	...

000d5b6c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5b6c:	b510      	push	{r4, lr}
   d5b6e:	4b05      	ldr	r3, [pc, #20]	; (d5b84 <_ZN10JsonBufferD1Ev+0x18>)
   d5b70:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5b72:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5b74:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5b76:	b91b      	cbnz	r3, d5b80 <_ZN10JsonBufferD1Ev+0x14>
   d5b78:	6840      	ldr	r0, [r0, #4]
   d5b7a:	b108      	cbz	r0, d5b80 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5b7c:	f000 fc42 	bl	d6404 <free>
	}
}
   d5b80:	4620      	mov	r0, r4
   d5b82:	bd10      	pop	{r4, pc}
   d5b84:	000dbc74 	.word	0x000dbc74

000d5b88 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5b88:	b510      	push	{r4, lr}
   d5b8a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5b8c:	f7ff ffee 	bl	d5b6c <_ZN10JsonBufferD1Ev>
   d5b90:	4620      	mov	r0, r4
   d5b92:	2114      	movs	r1, #20
   d5b94:	f002 fc92 	bl	d84bc <_ZdlPvj>
   d5b98:	4620      	mov	r0, r4
   d5b9a:	bd10      	pop	{r4, pc}

000d5b9c <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	4b03      	ldr	r3, [pc, #12]	; (d5bac <_ZN10JsonWriterD1Ev+0x10>)
   d5ba0:	6003      	str	r3, [r0, #0]
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	f7ff ffe2 	bl	d5b6c <_ZN10JsonBufferD1Ev>

}
   d5ba8:	4620      	mov	r0, r4
   d5baa:	bd10      	pop	{r4, pc}
   d5bac:	000dbc84 	.word	0x000dbc84

000d5bb0 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5bb0:	b510      	push	{r4, lr}
   d5bb2:	4604      	mov	r4, r0

}
   d5bb4:	f7ff fff2 	bl	d5b9c <_ZN10JsonWriterD1Ev>
   d5bb8:	4620      	mov	r0, r4
   d5bba:	2130      	movs	r1, #48	; 0x30
   d5bbc:	f002 fc7e 	bl	d84bc <_ZdlPvj>
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5bc4:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5bc6:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5bc8:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5bca:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5bcc:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5bce:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5bd0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5bd4:	4770      	bx	lr
	...

000d5bd8 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5bd8:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5bda:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5bdc:	60c3      	str	r3, [r0, #12]
   d5bde:	2301      	movs	r3, #1
   d5be0:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5be2:	4b05      	ldr	r3, [pc, #20]	; (d5bf8 <_ZN10JsonWriterC1EPcj+0x20>)
   d5be4:	6003      	str	r3, [r0, #0]
   d5be6:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5bea:	6041      	str	r1, [r0, #4]
   d5bec:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5bee:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5bf0:	f7ff ffe8 	bl	d5bc4 <_ZN10JsonWriter4initEv>
}
   d5bf4:	bd10      	pop	{r4, pc}
   d5bf6:	bf00      	nop
   d5bf8:	000dbc84 	.word	0x000dbc84

000d5bfc <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5bfc:	68c3      	ldr	r3, [r0, #12]
   d5bfe:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5c00:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d5c02:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5c04:	bf3f      	itttt	cc
   d5c06:	6842      	ldrcc	r2, [r0, #4]
   d5c08:	1c5c      	addcc	r4, r3, #1
   d5c0a:	60c4      	strcc	r4, [r0, #12]
   d5c0c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5c0e:	bf24      	itt	cs
   d5c10:	2301      	movcs	r3, #1
   d5c12:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5c18:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5c1a:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5c1c:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5c1e:	b143      	cbz	r3, d5c32 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5c20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5c24:	7e59      	ldrb	r1, [r3, #25]
   d5c26:	b109      	cbz	r1, d5c2c <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5c28:	f7ff ffe8 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5c2c:	6963      	ldr	r3, [r4, #20]
   d5c2e:	3b01      	subs	r3, #1
   d5c30:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d5c32:	68a3      	ldr	r3, [r4, #8]
   d5c34:	68e0      	ldr	r0, [r4, #12]
   d5c36:	6861      	ldr	r1, [r4, #4]
   d5c38:	4298      	cmp	r0, r3
   d5c3a:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5c3e:	bf2a      	itet	cs
   d5c40:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d5c42:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5c44:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5c48:	bd10      	pop	{r4, pc}

000d5c4a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5c4a:	b570      	push	{r4, r5, r6, lr}
   d5c4c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5c4e:	68c0      	ldr	r0, [r0, #12]
   d5c50:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5c52:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5c54:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5c56:	4613      	mov	r3, r2
   d5c58:	4430      	add	r0, r6
   d5c5a:	460a      	mov	r2, r1
   d5c5c:	4629      	mov	r1, r5
   d5c5e:	f000 fbf9 	bl	d6454 <vsnprintf>
	if (count <= spaceAvailable) {
   d5c62:	4285      	cmp	r5, r0
		offset += count;
   d5c64:	bf2d      	iteet	cs
   d5c66:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5c68:	68a3      	ldrcc	r3, [r4, #8]
   d5c6a:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5c6c:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5c6e:	bf36      	itet	cc
   d5c70:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5c72:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5c74:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5c78:	bd70      	pop	{r4, r5, r6, pc}

000d5c7a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5c7a:	b40e      	push	{r1, r2, r3}
   d5c7c:	b503      	push	{r0, r1, lr}
   d5c7e:	aa03      	add	r2, sp, #12
   d5c80:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5c84:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5c86:	f7ff ffe0 	bl	d5c4a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5c8a:	b002      	add	sp, #8
   d5c8c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5c90:	b003      	add	sp, #12
   d5c92:	4770      	bx	lr

000d5c94 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c98:	4604      	mov	r4, r0
   d5c9a:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5c9c:	4617      	mov	r7, r2
   d5c9e:	b112      	cbz	r2, d5ca6 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5ca0:	2122      	movs	r1, #34	; 0x22
   d5ca2:	f7ff ffab 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5ca6:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5ca8:	5d71      	ldrb	r1, [r6, r5]
   d5caa:	eb06 0805 	add.w	r8, r6, r5
   d5cae:	2900      	cmp	r1, #0
   d5cb0:	d071      	beq.n	d5d96 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5cb2:	68e2      	ldr	r2, [r4, #12]
   d5cb4:	68a3      	ldr	r3, [r4, #8]
   d5cb6:	429a      	cmp	r2, r3
   d5cb8:	d26d      	bcs.n	d5d96 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5cba:	060b      	lsls	r3, r1, #24
   d5cbc:	d533      	bpl.n	d5d26 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5cbe:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5cc2:	2be0      	cmp	r3, #224	; 0xe0
   d5cc4:	d117      	bne.n	d5cf6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5cc6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5cca:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5cce:	2a80      	cmp	r2, #128	; 0x80
   d5cd0:	d111      	bne.n	d5cf6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5cd2:	f105 0802 	add.w	r8, r5, #2
   d5cd6:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5cda:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5cde:	2880      	cmp	r0, #128	; 0x80
   d5ce0:	d109      	bne.n	d5cf6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5ce6:	019b      	lsls	r3, r3, #6
   d5ce8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5cec:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5cf0:	431a      	orrs	r2, r3
   d5cf2:	b292      	uxth	r2, r2
   d5cf4:	e011      	b.n	d5d1a <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5cf6:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5cfa:	2bc0      	cmp	r3, #192	; 0xc0
   d5cfc:	d146      	bne.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d5cfe:	f105 0801 	add.w	r8, r5, #1
   d5d02:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5d06:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5d0a:	2a80      	cmp	r2, #128	; 0x80
   d5d0c:	d13e      	bne.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5d0e:	0189      	lsls	r1, r1, #6
   d5d10:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5d18:	431a      	orrs	r2, r3
   d5d1a:	4923      	ldr	r1, [pc, #140]	; (d5da8 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	f7ff ffac 	bl	d5c7a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5d22:	4645      	mov	r5, r8
   d5d24:	e035      	b.n	d5d92 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5d26:	290c      	cmp	r1, #12
   d5d28:	d018      	beq.n	d5d5c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5d2a:	d80b      	bhi.n	d5d44 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5d2c:	2909      	cmp	r1, #9
   d5d2e:	d021      	beq.n	d5d74 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5d30:	290a      	cmp	r1, #10
   d5d32:	d019      	beq.n	d5d68 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5d34:	2908      	cmp	r1, #8
   d5d36:	d129      	bne.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5d38:	215c      	movs	r1, #92	; 0x5c
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	f7ff ff5e 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5d40:	2162      	movs	r1, #98	; 0x62
   d5d42:	e023      	b.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5d44:	2922      	cmp	r1, #34	; 0x22
   d5d46:	d01b      	beq.n	d5d80 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5d48:	295c      	cmp	r1, #92	; 0x5c
   d5d4a:	d019      	beq.n	d5d80 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5d4c:	290d      	cmp	r1, #13
   d5d4e:	d11d      	bne.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5d50:	215c      	movs	r1, #92	; 0x5c
   d5d52:	4620      	mov	r0, r4
   d5d54:	f7ff ff52 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5d58:	2172      	movs	r1, #114	; 0x72
   d5d5a:	e017      	b.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5d5c:	215c      	movs	r1, #92	; 0x5c
   d5d5e:	4620      	mov	r0, r4
   d5d60:	f7ff ff4c 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5d64:	2166      	movs	r1, #102	; 0x66
   d5d66:	e011      	b.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5d68:	215c      	movs	r1, #92	; 0x5c
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	f7ff ff46 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5d70:	216e      	movs	r1, #110	; 0x6e
   d5d72:	e00b      	b.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5d74:	215c      	movs	r1, #92	; 0x5c
   d5d76:	4620      	mov	r0, r4
   d5d78:	f7ff ff40 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5d7c:	2174      	movs	r1, #116	; 0x74
   d5d7e:	e005      	b.n	d5d8c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5d80:	215c      	movs	r1, #92	; 0x5c
   d5d82:	4620      	mov	r0, r4
   d5d84:	f7ff ff3a 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5d88:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	f7ff ff35 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5d92:	3501      	adds	r5, #1
   d5d94:	e788      	b.n	d5ca8 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5d96:	b12f      	cbz	r7, d5da4 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5d98:	4620      	mov	r0, r4
   d5d9a:	2122      	movs	r1, #34	; 0x22
	}

}
   d5d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5da0:	f7ff bf2c 	b.w	d5bfc <_ZN10JsonWriter10insertCharEc>
   d5da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5da8:	000dbc95 	.word	0x000dbc95

000d5dac <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5dac:	6942      	ldr	r2, [r0, #20]
   d5dae:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5db2:	7e1a      	ldrb	r2, [r3, #24]
   d5db4:	b112      	cbz	r2, d5dbc <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5db6:	2200      	movs	r2, #0
   d5db8:	761a      	strb	r2, [r3, #24]
   d5dba:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5dbc:	212c      	movs	r1, #44	; 0x2c
   d5dbe:	f7ff bf1d 	b.w	d5bfc <_ZN10JsonWriter10insertCharEc>

000d5dc2 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5dc4:	6943      	ldr	r3, [r0, #20]
   d5dc6:	3301      	adds	r3, #1
   d5dc8:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5dca:	460e      	mov	r6, r1
   d5dcc:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5dce:	d80e      	bhi.n	d5dee <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5dd0:	f7ff ffec 	bl	d5dac <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5dd4:	6943      	ldr	r3, [r0, #20]
   d5dd6:	1c5a      	adds	r2, r3, #1
   d5dd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d5ddc:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d5dde:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5de0:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5de2:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5de4:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d5de6:	f7ff ff09 	bl	d5bfc <_ZN10JsonWriter10insertCharEc>
   d5dea:	4620      	mov	r0, r4
   d5dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d5dee:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5df4 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d5df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5df6:	4604      	mov	r4, r0
   d5df8:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d5dfc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d5dfe:	2d00      	cmp	r5, #0
   d5e00:	db0a      	blt.n	d5e18 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d5e02:	f003 ff55 	bl	d9cb0 <__aeabi_f2d>
   d5e06:	462a      	mov	r2, r5
   d5e08:	e9cd 0100 	strd	r0, r1, [sp]
   d5e0c:	4908      	ldr	r1, [pc, #32]	; (d5e30 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f7ff ff33 	bl	d5c7a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d5e14:	b003      	add	sp, #12
   d5e16:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5e18:	f003 ff4a 	bl	d9cb0 <__aeabi_f2d>
   d5e1c:	460b      	mov	r3, r1
   d5e1e:	4905      	ldr	r1, [pc, #20]	; (d5e34 <_ZN10JsonWriter11insertValueEf+0x40>)
   d5e20:	4602      	mov	r2, r0
   d5e22:	4620      	mov	r0, r4
	}
}
   d5e24:	b003      	add	sp, #12
   d5e26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5e2a:	f7ff bf26 	b.w	d5c7a <_ZN10JsonWriter13insertsprintfEPKcz>
   d5e2e:	bf00      	nop
   d5e30:	000dbca7 	.word	0x000dbca7
   d5e34:	000dbcac 	.word	0x000dbcac

000d5e38 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5e38:	f000 b810 	b.w	d5e5c <HAL_Pin_Map>

000d5e3c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <netdb_freeaddrinfo+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	689b      	ldr	r3, [r3, #8]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030268 	.word	0x00030268

000d5e4c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <netdb_getaddrinfo+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	68db      	ldr	r3, [r3, #12]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030268 	.word	0x00030268

000d5e5c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <HAL_Pin_Map+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	681b      	ldr	r3, [r3, #0]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	0003022c 	.word	0x0003022c

000d5e6c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <HAL_Validate_Pin_Function+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	685b      	ldr	r3, [r3, #4]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	0003022c 	.word	0x0003022c

000d5e7c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <HAL_Pin_Mode+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	689b      	ldr	r3, [r3, #8]
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	0003022c 	.word	0x0003022c

000d5e8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <HAL_Get_Pin_Mode+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	68db      	ldr	r3, [r3, #12]
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	0003022c 	.word	0x0003022c

000d5e9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <HAL_GPIO_Write+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	691b      	ldr	r3, [r3, #16]
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	0003022c 	.word	0x0003022c

000d5eac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <HAL_GPIO_Read+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	695b      	ldr	r3, [r3, #20]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	0003022c 	.word	0x0003022c

000d5ebc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <HAL_ADC_Read+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	0003022c 	.word	0x0003022c

000d5ecc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <HAL_Pulse_In+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	0003022c 	.word	0x0003022c

000d5edc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <HAL_SPI_Begin+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	681b      	ldr	r3, [r3, #0]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030230 	.word	0x00030230

000d5eec <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <HAL_SPI_Send_Receive_Data+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	695b      	ldr	r3, [r3, #20]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030230 	.word	0x00030230

000d5efc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <HAL_SPI_Init+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	69db      	ldr	r3, [r3, #28]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030230 	.word	0x00030230

000d5f0c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <HAL_SPI_Is_Enabled+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	6a1b      	ldr	r3, [r3, #32]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030230 	.word	0x00030230

000d5f1c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <HAL_SPI_Info+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030230 	.word	0x00030230

000d5f2c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <HAL_SPI_Set_Settings+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030230 	.word	0x00030230

000d5f3c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <HAL_SPI_Acquire+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030230 	.word	0x00030230

000d5f4c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <HAL_SPI_Release+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030230 	.word	0x00030230

000d5f5c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <if_index_to_name+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	695b      	ldr	r3, [r3, #20]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	0003026c 	.word	0x0003026c

000d5f6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <HAL_RNG_GetRandomNumber+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	685b      	ldr	r3, [r3, #4]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030218 	.word	0x00030218

000d5f7c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <HAL_Delay_Microseconds+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	68db      	ldr	r3, [r3, #12]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030218 	.word	0x00030218

000d5f8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	695b      	ldr	r3, [r3, #20]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030218 	.word	0x00030218

000d5f9c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <HAL_RTC_Get_UnixTime+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	69db      	ldr	r3, [r3, #28]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030218 	.word	0x00030218

000d5fac <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <HAL_RTC_Time_Is_Valid+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030218 	.word	0x00030218

000d5fbc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <os_thread_is_current+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	689b      	ldr	r3, [r3, #8]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030248 	.word	0x00030248

000d5fcc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <os_thread_join+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	691b      	ldr	r3, [r3, #16]
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030248 	.word	0x00030248

000d5fdc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <os_thread_cleanup+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	695b      	ldr	r3, [r3, #20]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030248 	.word	0x00030248

000d5fec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <os_mutex_recursive_create+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030248 	.word	0x00030248

000d5ffc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <os_mutex_recursive_destroy+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030248 	.word	0x00030248

000d600c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <inet_inet_ntop+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030264 	.word	0x00030264

000d601c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <inet_htonl+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6a1b      	ldr	r3, [r3, #32]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030264 	.word	0x00030264

000d602c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <inet_htons+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030264 	.word	0x00030264

000d603c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_USART_Init+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	681b      	ldr	r3, [r3, #0]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	0003023c 	.word	0x0003023c

000d604c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_USART_Write_Data+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	68db      	ldr	r3, [r3, #12]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	0003023c 	.word	0x0003023c

000d605c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_USART_Available_Data+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	691b      	ldr	r3, [r3, #16]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	0003023c 	.word	0x0003023c

000d606c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_USART_Read_Data+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	695b      	ldr	r3, [r3, #20]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	0003023c 	.word	0x0003023c

000d607c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_USART_Peek_Data+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	699b      	ldr	r3, [r3, #24]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	0003023c 	.word	0x0003023c

000d608c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_USART_Flush_Data+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	69db      	ldr	r3, [r3, #28]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003023c 	.word	0x0003023c

000d609c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_USART_Is_Enabled+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	6a1b      	ldr	r3, [r3, #32]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003023c 	.word	0x0003023c

000d60ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003023c 	.word	0x0003023c

000d60bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_I2C_Begin+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	68db      	ldr	r3, [r3, #12]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030228 	.word	0x00030228

000d60cc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_I2C_Begin_Transmission+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	699b      	ldr	r3, [r3, #24]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	00030228 	.word	0x00030228

000d60dc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <HAL_I2C_End_Transmission+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	69db      	ldr	r3, [r3, #28]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	00030228 	.word	0x00030228

000d60ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_I2C_Write_Data+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	6a1b      	ldr	r3, [r3, #32]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	00030228 	.word	0x00030228

000d60fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_I2C_Available_Data+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030228 	.word	0x00030228

000d610c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_I2C_Read_Data+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	00030228 	.word	0x00030228

000d611c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_I2C_Peek_Data+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	00030228 	.word	0x00030228

000d612c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_I2C_Flush_Data+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030228 	.word	0x00030228

000d613c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_I2C_Is_Enabled+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030228 	.word	0x00030228

000d614c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <HAL_I2C_Init+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030228 	.word	0x00030228

000d615c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <HAL_I2C_Request_Data_Ex+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030228 	.word	0x00030228

000d616c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <sock_setsockopt+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	699b      	ldr	r3, [r3, #24]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030238 	.word	0x00030238

000d617c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <sock_close+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	69db      	ldr	r3, [r3, #28]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030238 	.word	0x00030238

000d618c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <sock_connect+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6a1b      	ldr	r3, [r3, #32]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030238 	.word	0x00030238

000d619c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <sock_recv+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030238 	.word	0x00030238

000d61ac <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <sock_send+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030238 	.word	0x00030238

000d61bc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <sock_socket+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030238 	.word	0x00030238

000d61cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <HAL_USB_USART_Init+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	681b      	ldr	r3, [r3, #0]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	0003024c 	.word	0x0003024c

000d61dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <HAL_USB_USART_Begin+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	685b      	ldr	r3, [r3, #4]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	0003024c 	.word	0x0003024c

000d61ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_USB_USART_Available_Data+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	691b      	ldr	r3, [r3, #16]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	0003024c 	.word	0x0003024c

000d61fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	695b      	ldr	r3, [r3, #20]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	0003024c 	.word	0x0003024c

000d620c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <HAL_USB_USART_Receive_Data+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	699b      	ldr	r3, [r3, #24]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	0003024c 	.word	0x0003024c

000d621c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <HAL_USB_USART_Send_Data+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	69db      	ldr	r3, [r3, #28]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	0003024c 	.word	0x0003024c

000d622c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <HAL_USB_USART_Flush_Data+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	6a1b      	ldr	r3, [r3, #32]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	0003024c 	.word	0x0003024c

000d623c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <panic_+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030260 	.word	0x00030260

000d624c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <log_message+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030260 	.word	0x00030260

000d625c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <system_mode+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	681b      	ldr	r3, [r3, #0]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030220 	.word	0x00030220

000d626c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <set_system_mode+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	685b      	ldr	r3, [r3, #4]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030220 	.word	0x00030220

000d627c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <system_delay_ms+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	695b      	ldr	r3, [r3, #20]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030220 	.word	0x00030220

000d628c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <application_thread_current+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030220 	.word	0x00030220

000d629c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <application_thread_invoke+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	00030220 	.word	0x00030220

000d62ac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <system_thread_get_state+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	00030220 	.word	0x00030220

000d62bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b03      	ldr	r3, [pc, #12]	; (d62cc <system_ctrl_set_app_request_handler+0x10>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d62c6:	9301      	str	r3, [sp, #4]
   d62c8:	bd08      	pop	{r3, pc}
   d62ca:	0000      	.short	0x0000
   d62cc:	00030220 	.word	0x00030220

000d62d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b03      	ldr	r3, [pc, #12]	; (d62e0 <system_ctrl_set_result+0x10>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d62da:	9301      	str	r3, [sp, #4]
   d62dc:	bd08      	pop	{r3, pc}
   d62de:	0000      	.short	0x0000
   d62e0:	00030220 	.word	0x00030220

000d62e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <network_connect+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	685b      	ldr	r3, [r3, #4]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030240 	.word	0x00030240

000d62f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <network_connecting+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	689b      	ldr	r3, [r3, #8]
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030240 	.word	0x00030240

000d6304 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <network_disconnect+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	68db      	ldr	r3, [r3, #12]
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030240 	.word	0x00030240

000d6314 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <network_ready+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	691b      	ldr	r3, [r3, #16]
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030240 	.word	0x00030240

000d6324 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <network_on+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	695b      	ldr	r3, [r3, #20]
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030240 	.word	0x00030240

000d6334 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <network_off+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	699b      	ldr	r3, [r3, #24]
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	00030240 	.word	0x00030240

000d6344 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <network_listen+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	69db      	ldr	r3, [r3, #28]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	00030240 	.word	0x00030240

000d6354 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <network_listening+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	6a1b      	ldr	r3, [r3, #32]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	00030240 	.word	0x00030240

000d6364 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <network_set_listen_timeout+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	00030240 	.word	0x00030240

000d6374 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <network_get_listen_timeout+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	00030240 	.word	0x00030240

000d6384 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <spark_variable+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	681b      	ldr	r3, [r3, #0]
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	00030244 	.word	0x00030244

000d6394 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <spark_process+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	689b      	ldr	r3, [r3, #8]
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	00030244 	.word	0x00030244

000d63a4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <spark_cloud_flag_connected+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	695b      	ldr	r3, [r3, #20]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	00030244 	.word	0x00030244

000d63b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <spark_send_event+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	6a1b      	ldr	r3, [r3, #32]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	00030244 	.word	0x00030244

000d63c4 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <spark_sync_time+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030244 	.word	0x00030244

000d63d4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <spark_sync_time_pending+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	00030244 	.word	0x00030244

000d63e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	00030244 	.word	0x00030244

000d63f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <malloc+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	681b      	ldr	r3, [r3, #0]
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	0003021c 	.word	0x0003021c

000d6404 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <free+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	685b      	ldr	r3, [r3, #4]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	0003021c 	.word	0x0003021c

000d6414 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <realloc+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	689b      	ldr	r3, [r3, #8]
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	0003021c 	.word	0x0003021c

000d6424 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <sprintf+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	68db      	ldr	r3, [r3, #12]
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	0003021c 	.word	0x0003021c

000d6434 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <siprintf+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	691b      	ldr	r3, [r3, #16]
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	0003021c 	.word	0x0003021c

000d6444 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <siscanf+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	699b      	ldr	r3, [r3, #24]
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	0003021c 	.word	0x0003021c

000d6454 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <vsnprintf+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	0003021c 	.word	0x0003021c

000d6464 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <abort+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	0003021c 	.word	0x0003021c

000d6474 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <_malloc_r+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	0003021c 	.word	0x0003021c

000d6484 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <__errno+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	0003021c 	.word	0x0003021c

000d6494 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6494:	2200      	movs	r2, #0
   d6496:	4611      	mov	r1, r2
   d6498:	6840      	ldr	r0, [r0, #4]
   d649a:	f7ff bf5b 	b.w	d6354 <network_listening>

000d649e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d649e:	2200      	movs	r2, #0
   d64a0:	4611      	mov	r1, r2
   d64a2:	6840      	ldr	r0, [r0, #4]
   d64a4:	f7ff bf66 	b.w	d6374 <network_get_listen_timeout>

000d64a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d64a8:	2200      	movs	r2, #0
   d64aa:	6840      	ldr	r0, [r0, #4]
   d64ac:	f7ff bf5a 	b.w	d6364 <network_set_listen_timeout>

000d64b0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d64b0:	2200      	movs	r2, #0
   d64b2:	f081 0101 	eor.w	r1, r1, #1
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	f7ff bf44 	b.w	d6344 <network_listen>

000d64bc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d64bc:	2300      	movs	r3, #0
   d64be:	461a      	mov	r2, r3
   d64c0:	4619      	mov	r1, r3
   d64c2:	6840      	ldr	r0, [r0, #4]
   d64c4:	f7ff bf36 	b.w	d6334 <network_off>

000d64c8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d64c8:	2300      	movs	r3, #0
   d64ca:	461a      	mov	r2, r3
   d64cc:	4619      	mov	r1, r3
   d64ce:	6840      	ldr	r0, [r0, #4]
   d64d0:	f7ff bf28 	b.w	d6324 <network_on>

000d64d4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64d4:	2200      	movs	r2, #0
   d64d6:	4611      	mov	r1, r2
   d64d8:	6840      	ldr	r0, [r0, #4]
   d64da:	f7ff bf1b 	b.w	d6314 <network_ready>

000d64de <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64de:	2200      	movs	r2, #0
   d64e0:	4611      	mov	r1, r2
   d64e2:	6840      	ldr	r0, [r0, #4]
   d64e4:	f7ff bf06 	b.w	d62f4 <network_connecting>

000d64e8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64e8:	2200      	movs	r2, #0
   d64ea:	2102      	movs	r1, #2
   d64ec:	6840      	ldr	r0, [r0, #4]
   d64ee:	f7ff bf09 	b.w	d6304 <network_disconnect>

000d64f2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64f2:	2300      	movs	r3, #0
   d64f4:	461a      	mov	r2, r3
   d64f6:	6840      	ldr	r0, [r0, #4]
   d64f8:	f7ff bef4 	b.w	d62e4 <network_connect>

000d64fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d64fc:	4b02      	ldr	r3, [pc, #8]	; (d6508 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d64fe:	2203      	movs	r2, #3
   d6500:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6502:	4a02      	ldr	r2, [pc, #8]	; (d650c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6504:	601a      	str	r2, [r3, #0]
   d6506:	4770      	bx	lr
   d6508:	2003e3b0 	.word	0x2003e3b0
   d650c:	000dbcc4 	.word	0x000dbcc4

000d6510 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6510:	2100      	movs	r1, #0
   d6512:	f7ff bd13 	b.w	d5f3c <HAL_SPI_Acquire>

000d6516 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6516:	2100      	movs	r1, #0
   d6518:	f7ff bd18 	b.w	d5f4c <HAL_SPI_Release>

000d651c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d651c:	b510      	push	{r4, lr}
   d651e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6520:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6522:	4608      	mov	r0, r1
   d6524:	f7ff fcea 	bl	d5efc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6528:	2300      	movs	r3, #0
   d652a:	6063      	str	r3, [r4, #4]
}
   d652c:	4620      	mov	r0, r4
   d652e:	bd10      	pop	{r4, pc}

000d6530 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6530:	b510      	push	{r4, lr}
   d6532:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6534:	7800      	ldrb	r0, [r0, #0]
   d6536:	f7ff ffeb 	bl	d6510 <_ZN8SPIClass4lockEv.isra.0>
   d653a:	b948      	cbnz	r0, d6550 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d653c:	7820      	ldrb	r0, [r4, #0]
   d653e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6542:	f7ff fccb 	bl	d5edc <HAL_SPI_Begin>
        unlock();
   d6546:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d654c:	f7ff bfe3 	b.w	d6516 <_ZN8SPIClass6unlockEv.isra.1>
   d6550:	bd10      	pop	{r4, pc}

000d6552 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6552:	7800      	ldrb	r0, [r0, #0]
   d6554:	f7ff bfdf 	b.w	d6516 <_ZN8SPIClass6unlockEv.isra.1>

000d6558 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6558:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d655a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d655c:	6018      	str	r0, [r3, #0]
   d655e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6560:	6818      	ldr	r0, [r3, #0]
   d6562:	4288      	cmp	r0, r1
   d6564:	b2e5      	uxtb	r5, r4
   d6566:	d906      	bls.n	d6576 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6568:	3401      	adds	r4, #1
   d656a:	2c08      	cmp	r4, #8
   d656c:	d002      	beq.n	d6574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d656e:	0840      	lsrs	r0, r0, #1
   d6570:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6572:	e7f5      	b.n	d6560 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6574:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6578:	5d5b      	ldrb	r3, [r3, r5]
   d657a:	7013      	strb	r3, [r2, #0]
   d657c:	bd30      	pop	{r4, r5, pc}
   d657e:	bf00      	nop
   d6580:	000dbcf0 	.word	0x000dbcf0

000d6584 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6588:	4607      	mov	r7, r0
   d658a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d658c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d658e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6590:	f7ff ffbe 	bl	d6510 <_ZN8SPIClass4lockEv.isra.0>
   d6594:	2800      	cmp	r0, #0
   d6596:	db62      	blt.n	d665e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6598:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d659a:	2214      	movs	r2, #20
   d659c:	2100      	movs	r1, #0
   d659e:	a809      	add	r0, sp, #36	; 0x24
   d65a0:	f004 fbb0 	bl	dad04 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d65a4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d65a6:	4620      	mov	r0, r4
   d65a8:	2200      	movs	r2, #0
   d65aa:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d65ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d65b0:	f7ff fcb4 	bl	d5f1c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d65b4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d65b8:	b154      	cbz	r4, d65d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d65ba:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d65be:	b935      	cbnz	r5, d65ce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d65c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d65c4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d65c8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d65cc:	e003      	b.n	d65d6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d65ce:	2400      	movs	r4, #0
   d65d0:	46a1      	mov	r9, r4
   d65d2:	46a0      	mov	r8, r4
   d65d4:	2501      	movs	r5, #1
   d65d6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d65d8:	b105      	cbz	r5, d65dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d65da:	b9bb      	cbnz	r3, d660c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d65dc:	429d      	cmp	r5, r3
   d65de:	d10b      	bne.n	d65f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d65e0:	68b2      	ldr	r2, [r6, #8]
   d65e2:	4542      	cmp	r2, r8
   d65e4:	d108      	bne.n	d65f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d65e6:	f88d 9020 	strb.w	r9, [sp, #32]
   d65ea:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d65ee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d65f2:	89b2      	ldrh	r2, [r6, #12]
   d65f4:	4291      	cmp	r1, r2
   d65f6:	d009      	beq.n	d660c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d65f8:	b153      	cbz	r3, d6610 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d65fa:	2400      	movs	r4, #0
   d65fc:	7838      	ldrb	r0, [r7, #0]
   d65fe:	9401      	str	r4, [sp, #4]
   d6600:	9400      	str	r4, [sp, #0]
   d6602:	4623      	mov	r3, r4
   d6604:	4622      	mov	r2, r4
   d6606:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6608:	f7ff fc90 	bl	d5f2c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d660c:	2000      	movs	r0, #0
   d660e:	e026      	b.n	d665e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6610:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6614:	68b1      	ldr	r1, [r6, #8]
   d6616:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6618:	ab04      	add	r3, sp, #16
   d661a:	f10d 020f 	add.w	r2, sp, #15
   d661e:	f7ff ff9b 	bl	d6558 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6622:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6624:	b105      	cbz	r5, d6628 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6626:	b9b1      	cbnz	r1, d6656 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6628:	42a9      	cmp	r1, r5
   d662a:	d008      	beq.n	d663e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d662c:	2400      	movs	r4, #0
   d662e:	7838      	ldrb	r0, [r7, #0]
   d6630:	9401      	str	r4, [sp, #4]
   d6632:	7b74      	ldrb	r4, [r6, #13]
   d6634:	7b33      	ldrb	r3, [r6, #12]
   d6636:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d663a:	9400      	str	r4, [sp, #0]
   d663c:	e7e4      	b.n	d6608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d663e:	68b3      	ldr	r3, [r6, #8]
   d6640:	4543      	cmp	r3, r8
   d6642:	d3f3      	bcc.n	d662c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6644:	f88d 9020 	strb.w	r9, [sp, #32]
   d6648:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d664c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6650:	89b3      	ldrh	r3, [r6, #12]
   d6652:	429a      	cmp	r2, r3
   d6654:	d1ea      	bne.n	d662c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6656:	9b04      	ldr	r3, [sp, #16]
   d6658:	4543      	cmp	r3, r8
   d665a:	d1e7      	bne.n	d662c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d665c:	e7d6      	b.n	d660c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d665e:	b00f      	add	sp, #60	; 0x3c
   d6660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6664 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6664:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6666:	7800      	ldrb	r0, [r0, #0]
   d6668:	f7ff fc40 	bl	d5eec <HAL_SPI_Send_Receive_Data>
}
   d666c:	b2c0      	uxtb	r0, r0
   d666e:	bd08      	pop	{r3, pc}

000d6670 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6670:	7800      	ldrb	r0, [r0, #0]
   d6672:	f7ff bc4b 	b.w	d5f0c <HAL_SPI_Is_Enabled>

000d6676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6676:	b510      	push	{r4, lr}
   d6678:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d667a:	6800      	ldr	r0, [r0, #0]
   d667c:	b118      	cbz	r0, d6686 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d667e:	f7ff fec1 	bl	d6404 <free>
            wakeupSource_ = nullptr;
   d6682:	2300      	movs	r3, #0
   d6684:	6023      	str	r3, [r4, #0]
   d6686:	bd10      	pop	{r4, pc}

000d6688 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6688:	b510      	push	{r4, lr}
   d668a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d668c:	f7ff fff3 	bl	d6676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6690:	4620      	mov	r0, r4
   d6692:	bd10      	pop	{r4, pc}

000d6694 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6694:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6696:	4c09      	ldr	r4, [pc, #36]	; (d66bc <_GLOBAL__sub_I_System+0x28>)
   d6698:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d669a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d669e:	6020      	str	r0, [r4, #0]
   d66a0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d66a2:	71a0      	strb	r0, [r4, #6]
   d66a4:	8120      	strh	r0, [r4, #8]
   d66a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d66a8:	f7ff fde0 	bl	d626c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d66ac:	4620      	mov	r0, r4
   d66ae:	4a04      	ldr	r2, [pc, #16]	; (d66c0 <_GLOBAL__sub_I_System+0x2c>)
   d66b0:	4904      	ldr	r1, [pc, #16]	; (d66c4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d66b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d66b6:	f001 bef3 	b.w	d84a0 <__aeabi_atexit>
   d66ba:	bf00      	nop
   d66bc:	2003e3b8 	.word	0x2003e3b8
   d66c0:	2003e178 	.word	0x2003e178
   d66c4:	000d6689 	.word	0x000d6689

000d66c8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d66c8:	b510      	push	{r4, lr}
   d66ca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d66cc:	f004 fb77 	bl	dadbe <strlen>
   d66d0:	3801      	subs	r0, #1
   d66d2:	1823      	adds	r3, r4, r0
   d66d4:	4620      	mov	r0, r4
	while(i<j){
   d66d6:	4298      	cmp	r0, r3
   d66d8:	d206      	bcs.n	d66e8 <_Z11str_reversePc+0x20>
		c = *i;
   d66da:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d66dc:	7819      	ldrb	r1, [r3, #0]
   d66de:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d66e2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d66e6:	e7f6      	b.n	d66d6 <_Z11str_reversePc+0xe>
   d66e8:	bd10      	pop	{r4, pc}

000d66ea <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d66ee:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d66f0:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d66f2:	4615      	mov	r5, r2
   d66f4:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d66f6:	bf34      	ite	cc
   d66f8:	4615      	movcc	r5, r2
   d66fa:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d66fc:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d66fe:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6700:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6702:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d6706:	d107      	bne.n	d6718 <ltoa+0x2e>
   d6708:	4298      	cmp	r0, r3
   d670a:	da05      	bge.n	d6718 <ltoa+0x2e>
      {
            *head++ = '-';
   d670c:	232d      	movs	r3, #45	; 0x2d
   d670e:	f101 0801 	add.w	r8, r1, #1
   d6712:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d6714:	4240      	negs	r0, r0
   d6716:	e001      	b.n	d671c <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6718:	b1b0      	cbz	r0, d6748 <ltoa+0x5e>
   d671a:	46a0      	mov	r8, r4
   d671c:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6720:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6722:	462a      	mov	r2, r5
   d6724:	4601      	mov	r1, r0
   d6726:	a801      	add	r0, sp, #4
   d6728:	f004 fab2 	bl	dac90 <ldiv>
   d672c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d672e:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6730:	2b09      	cmp	r3, #9
   d6732:	bfcc      	ite	gt
   d6734:	2237      	movgt	r2, #55	; 0x37
   d6736:	2230      	movle	r2, #48	; 0x30
   d6738:	fa52 f383 	uxtab	r3, r2, r3
   d673c:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6740:	3701      	adds	r7, #1
   d6742:	2800      	cmp	r0, #0
   d6744:	d1ed      	bne.n	d6722 <ltoa+0x38>
   d6746:	e006      	b.n	d6756 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6748:	2330      	movs	r3, #48	; 0x30
   d674a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d674e:	46a0      	mov	r8, r4
   d6750:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d6754:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6756:	463a      	mov	r2, r7
   d6758:	1c71      	adds	r1, r6, #1
   d675a:	4640      	mov	r0, r8
   d675c:	f004 faac 	bl	dacb8 <memcpy>
      return str;
}
   d6760:	4620      	mov	r0, r4
   d6762:	b00c      	add	sp, #48	; 0x30
   d6764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6768 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6768:	b570      	push	{r4, r5, r6, lr}
   d676a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d676c:	1e91      	subs	r1, r2, #2
   d676e:	2922      	cmp	r1, #34	; 0x22
   d6770:	d820      	bhi.n	d67b4 <ultoa+0x4c>
   d6772:	4625      	mov	r5, r4
   d6774:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6776:	b910      	cbnz	r0, d677e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6778:	4423      	add	r3, r4
            *ptr++ = '0';
   d677a:	2230      	movs	r2, #48	; 0x30
   d677c:	e00e      	b.n	d679c <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d677e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6782:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6786:	b2c1      	uxtb	r1, r0
   d6788:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d678c:	2809      	cmp	r0, #9
                *ptr += '0';
   d678e:	bf94      	ite	ls
   d6790:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6792:	3157      	addhi	r1, #87	; 0x57
   d6794:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6798:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d679a:	e7eb      	b.n	d6774 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d679c:	4299      	cmp	r1, r3
   d679e:	d202      	bcs.n	d67a6 <ultoa+0x3e>
            *ptr++ = '0';
   d67a0:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d67a4:	e7fa      	b.n	d679c <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d67a6:	2300      	movs	r3, #0
	str_reverse(buffer);
   d67a8:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d67aa:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d67ac:	f7ff ff8c 	bl	d66c8 <_Z11str_reversePc>
	return buffer;
   d67b0:	4620      	mov	r0, r4
   d67b2:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d67b4:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d67b6:	bd70      	pop	{r4, r5, r6, pc}

000d67b8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d67b8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d67ba:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d67bc:	460c      	mov	r4, r1
   d67be:	4615      	mov	r5, r2
	if(a<0){
   d67c0:	da0b      	bge.n	d67da <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d67c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d67c6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d67ca:	bf14      	ite	ne
   d67cc:	4258      	negne	r0, r3
   d67ce:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d67d0:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d67d2:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d67d4:	462a      	mov	r2, r5
   d67d6:	4419      	add	r1, r3
   d67d8:	e000      	b.n	d67dc <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d67da:	2301      	movs	r3, #1
   d67dc:	f7ff ffc4 	bl	d6768 <ultoa>
	}
	return buffer;
}
   d67e0:	4620      	mov	r0, r4
   d67e2:	bd38      	pop	{r3, r4, r5, pc}

000d67e4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d67e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67e8:	ec59 8b10 	vmov	r8, r9, d0
   d67ec:	4607      	mov	r7, r0
   d67ee:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d67f0:	2200      	movs	r2, #0
   d67f2:	2300      	movs	r3, #0
   d67f4:	ee10 0a10 	vmov	r0, s0
   d67f8:	4649      	mov	r1, r9
   d67fa:	f003 fd1f 	bl	da23c <__aeabi_dcmplt>
   d67fe:	b128      	cbz	r0, d680c <_Z4dtoadhPc+0x28>
        val = -val;
   d6800:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6804:	4699      	mov	r9, r3
        *sout++ = '-';
   d6806:	232d      	movs	r3, #45	; 0x2d
   d6808:	7033      	strb	r3, [r6, #0]
   d680a:	3601      	adds	r6, #1
   d680c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d680e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6810:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6812:	b2d9      	uxtb	r1, r3
   d6814:	428f      	cmp	r7, r1
   d6816:	d902      	bls.n	d681e <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d6818:	4354      	muls	r4, r2
   d681a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d681c:	e7f9      	b.n	d6812 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d681e:	4620      	mov	r0, r4
   d6820:	f003 fa34 	bl	d9c8c <__aeabi_i2d>
   d6824:	4642      	mov	r2, r8
   d6826:	464b      	mov	r3, r9
   d6828:	f003 fa96 	bl	d9d58 <__aeabi_dmul>
   d682c:	4682      	mov	sl, r0
   d682e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6830:	f003 ff50 	bl	da6d4 <__aeabi_d2ulz>
   d6834:	4680      	mov	r8, r0
   d6836:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6838:	f003 fa58 	bl	d9cec <__aeabi_ul2d>
   d683c:	4602      	mov	r2, r0
   d683e:	460b      	mov	r3, r1
   d6840:	4650      	mov	r0, sl
   d6842:	4659      	mov	r1, fp
   d6844:	f003 f8d4 	bl	d99f0 <__aeabi_dsub>
   d6848:	2200      	movs	r2, #0
   d684a:	4b17      	ldr	r3, [pc, #92]	; (d68a8 <_Z4dtoadhPc+0xc4>)
   d684c:	f003 fd0a 	bl	da264 <__aeabi_dcmpge>
   d6850:	b118      	cbz	r0, d685a <_Z4dtoadhPc+0x76>
        fixed++;
   d6852:	f118 0801 	adds.w	r8, r8, #1
   d6856:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d685a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d685c:	4622      	mov	r2, r4
   d685e:	462b      	mov	r3, r5
   d6860:	4640      	mov	r0, r8
   d6862:	4649      	mov	r1, r9
   d6864:	f003 ff1e 	bl	da6a4 <__aeabi_uldivmod>
   d6868:	2301      	movs	r3, #1
   d686a:	220a      	movs	r2, #10
   d686c:	4631      	mov	r1, r6
   d686e:	f7ff ff7b 	bl	d6768 <ultoa>
    if (prec) {
   d6872:	b1af      	cbz	r7, d68a0 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d6874:	4630      	mov	r0, r6
   d6876:	f004 faa2 	bl	dadbe <strlen>
        *sout++ = '.';
   d687a:	232e      	movs	r3, #46	; 0x2e
   d687c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d687e:	3001      	adds	r0, #1
   d6880:	4406      	add	r6, r0
   d6882:	4622      	mov	r2, r4
   d6884:	462b      	mov	r3, r5
   d6886:	4640      	mov	r0, r8
   d6888:	4649      	mov	r1, r9
   d688a:	f003 ff0b 	bl	da6a4 <__aeabi_uldivmod>
   d688e:	463b      	mov	r3, r7
   d6890:	4610      	mov	r0, r2
   d6892:	4631      	mov	r1, r6
   d6894:	220a      	movs	r2, #10
    }
}
   d6896:	b001      	add	sp, #4
   d6898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d689c:	f7ff bf64 	b.w	d6768 <ultoa>
    }
}
   d68a0:	b001      	add	sp, #4
   d68a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68a6:	bf00      	nop
   d68a8:	3fe00000 	.word	0x3fe00000

000d68ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d68ac:	b510      	push	{r4, lr}
   d68ae:	4604      	mov	r4, r0
{
	free(buffer);
   d68b0:	6800      	ldr	r0, [r0, #0]
   d68b2:	f7ff fda7 	bl	d6404 <free>
}
   d68b6:	4620      	mov	r0, r4
   d68b8:	bd10      	pop	{r4, pc}

000d68ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d68ba:	b510      	push	{r4, lr}
   d68bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d68be:	6800      	ldr	r0, [r0, #0]
   d68c0:	b108      	cbz	r0, d68c6 <_ZN6String10invalidateEv+0xc>
   d68c2:	f7ff fd9f 	bl	d6404 <free>
	buffer = NULL;
   d68c6:	2300      	movs	r3, #0
   d68c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d68ca:	60a3      	str	r3, [r4, #8]
   d68cc:	6063      	str	r3, [r4, #4]
   d68ce:	bd10      	pop	{r4, pc}

000d68d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d68d0:	b538      	push	{r3, r4, r5, lr}
   d68d2:	4604      	mov	r4, r0
   d68d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d68d6:	6800      	ldr	r0, [r0, #0]
   d68d8:	3101      	adds	r1, #1
   d68da:	f7ff fd9b 	bl	d6414 <realloc>
	if (newbuffer) {
   d68de:	b110      	cbz	r0, d68e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d68e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d68e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d68e6:	bd38      	pop	{r3, r4, r5, pc}

000d68e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d68e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d68ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d68ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d68ee:	b113      	cbz	r3, d68f6 <_ZN6String7reserveEj+0xe>
   d68f0:	6843      	ldr	r3, [r0, #4]
   d68f2:	428b      	cmp	r3, r1
   d68f4:	d207      	bcs.n	d6906 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d68f6:	4620      	mov	r0, r4
   d68f8:	f7ff ffea 	bl	d68d0 <_ZN6String12changeBufferEj>
   d68fc:	b120      	cbz	r0, d6908 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d68fe:	68a3      	ldr	r3, [r4, #8]
   d6900:	b90b      	cbnz	r3, d6906 <_ZN6String7reserveEj+0x1e>
   d6902:	6822      	ldr	r2, [r4, #0]
   d6904:	7013      	strb	r3, [r2, #0]
   d6906:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6908:	bd10      	pop	{r4, pc}

000d690a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d690a:	b570      	push	{r4, r5, r6, lr}
   d690c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d690e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6910:	4604      	mov	r4, r0
   d6912:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6914:	f7ff ffe8 	bl	d68e8 <_ZN6String7reserveEj>
   d6918:	b918      	cbnz	r0, d6922 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d691a:	4620      	mov	r0, r4
   d691c:	f7ff ffcd 	bl	d68ba <_ZN6String10invalidateEv>
		return *this;
   d6920:	e009      	b.n	d6936 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6922:	462a      	mov	r2, r5
   d6924:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6926:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6928:	6820      	ldr	r0, [r4, #0]
   d692a:	f004 f9c5 	bl	dacb8 <memcpy>
	buffer[len] = 0;
   d692e:	6822      	ldr	r2, [r4, #0]
   d6930:	68a3      	ldr	r3, [r4, #8]
   d6932:	2100      	movs	r1, #0
   d6934:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6936:	4620      	mov	r0, r4
   d6938:	bd70      	pop	{r4, r5, r6, pc}

000d693a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d693a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d693c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d693e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6940:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6942:	6043      	str	r3, [r0, #4]
	len = 0;
   d6944:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6946:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6948:	460d      	mov	r5, r1
   d694a:	b139      	cbz	r1, d695c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d694c:	4608      	mov	r0, r1
   d694e:	f004 fa36 	bl	dadbe <strlen>
   d6952:	4629      	mov	r1, r5
   d6954:	4602      	mov	r2, r0
   d6956:	4620      	mov	r0, r4
   d6958:	f7ff ffd7 	bl	d690a <_ZN6String4copyEPKcj>
}
   d695c:	4620      	mov	r0, r4
   d695e:	bd38      	pop	{r3, r4, r5, pc}

000d6960 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6960:	b538      	push	{r3, r4, r5, lr}
   d6962:	4605      	mov	r5, r0
	if (buffer) {
   d6964:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6966:	460c      	mov	r4, r1
	if (buffer) {
   d6968:	b160      	cbz	r0, d6984 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d696a:	686a      	ldr	r2, [r5, #4]
   d696c:	688b      	ldr	r3, [r1, #8]
   d696e:	429a      	cmp	r2, r3
   d6970:	d306      	bcc.n	d6980 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d6972:	6809      	ldr	r1, [r1, #0]
   d6974:	f004 fa00 	bl	dad78 <strcpy>
			len = rhs.len;
   d6978:	68a3      	ldr	r3, [r4, #8]
   d697a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d697c:	2300      	movs	r3, #0
   d697e:	e00a      	b.n	d6996 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d6980:	f7ff fd40 	bl	d6404 <free>
		}
	}
	buffer = rhs.buffer;
   d6984:	6823      	ldr	r3, [r4, #0]
   d6986:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6988:	6863      	ldr	r3, [r4, #4]
   d698a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d698c:	68a3      	ldr	r3, [r4, #8]
   d698e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6990:	2300      	movs	r3, #0
   d6992:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6994:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d6996:	60a3      	str	r3, [r4, #8]
   d6998:	bd38      	pop	{r3, r4, r5, pc}

000d699a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d699a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d699c:	b510      	push	{r4, lr}
   d699e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d69a0:	d001      	beq.n	d69a6 <_ZN6StringaSEOS_+0xc>
   d69a2:	f7ff ffdd 	bl	d6960 <_ZN6String4moveERS_>
	return *this;
}
   d69a6:	4620      	mov	r0, r4
   d69a8:	bd10      	pop	{r4, pc}

000d69aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d69aa:	b538      	push	{r3, r4, r5, lr}
   d69ac:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d69ae:	460c      	mov	r4, r1
   d69b0:	b141      	cbz	r1, d69c4 <_ZN6StringaSEPKc+0x1a>
   d69b2:	4608      	mov	r0, r1
   d69b4:	f004 fa03 	bl	dadbe <strlen>
   d69b8:	4621      	mov	r1, r4
   d69ba:	4602      	mov	r2, r0
   d69bc:	4628      	mov	r0, r5
   d69be:	f7ff ffa4 	bl	d690a <_ZN6String4copyEPKcj>
   d69c2:	e001      	b.n	d69c8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d69c4:	f7ff ff79 	bl	d68ba <_ZN6String10invalidateEv>

	return *this;
}
   d69c8:	4628      	mov	r0, r5
   d69ca:	bd38      	pop	{r3, r4, r5, pc}

000d69cc <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69cc:	b510      	push	{r4, lr}
   d69ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69d0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69d2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69d4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d69d6:	6063      	str	r3, [r4, #4]
	len = 0;
   d69d8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d69da:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d69dc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d69de:	a901      	add	r1, sp, #4
   d69e0:	f7ff feea 	bl	d67b8 <itoa>
	*this = buf;
   d69e4:	a901      	add	r1, sp, #4
   d69e6:	4620      	mov	r0, r4
   d69e8:	f7ff ffdf 	bl	d69aa <_ZN6StringaSEPKc>
}
   d69ec:	4620      	mov	r0, r4
   d69ee:	b00a      	add	sp, #40	; 0x28
   d69f0:	bd10      	pop	{r4, pc}

000d69f2 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d69f2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69f4:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d69f6:	b08a      	sub	sp, #40	; 0x28
   d69f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69fa:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d69fc:	6043      	str	r3, [r0, #4]
	len = 0;
   d69fe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a00:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6a02:	b2c8      	uxtb	r0, r1
   d6a04:	a901      	add	r1, sp, #4
   d6a06:	f7ff feed 	bl	d67e4 <_Z4dtoadhPc>
        *this = buf;
   d6a0a:	a901      	add	r1, sp, #4
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7ff ffcc 	bl	d69aa <_ZN6StringaSEPKc>
}
   d6a12:	4620      	mov	r0, r4
   d6a14:	b00a      	add	sp, #40	; 0x28
   d6a16:	bd10      	pop	{r4, pc}

000d6a18 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6a18:	b570      	push	{r4, r5, r6, lr}
   d6a1a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6a1c:	b19a      	cbz	r2, d6a46 <_ZNK6String8getBytesEPhjj+0x2e>
   d6a1e:	b191      	cbz	r1, d6a46 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6a20:	6885      	ldr	r5, [r0, #8]
   d6a22:	429d      	cmp	r5, r3
   d6a24:	d802      	bhi.n	d6a2c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6a26:	2300      	movs	r3, #0
   d6a28:	700b      	strb	r3, [r1, #0]
		return;
   d6a2a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6a2c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6a2e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6a30:	6801      	ldr	r1, [r0, #0]
   d6a32:	42ac      	cmp	r4, r5
   d6a34:	bf28      	it	cs
   d6a36:	462c      	movcs	r4, r5
   d6a38:	4419      	add	r1, r3
   d6a3a:	4622      	mov	r2, r4
   d6a3c:	4630      	mov	r0, r6
   d6a3e:	f004 fa00 	bl	dae42 <strncpy>
	buf[n] = 0;
   d6a42:	2300      	movs	r3, #0
   d6a44:	5533      	strb	r3, [r6, r4]
   d6a46:	bd70      	pop	{r4, r5, r6, pc}

000d6a48 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6a4a:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a4c:	460f      	mov	r7, r1
   d6a4e:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6a50:	490c      	ldr	r1, [pc, #48]	; (d6a84 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d6a52:	bf88      	it	hi
   d6a54:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6a56:	4614      	mov	r4, r2
   d6a58:	4606      	mov	r6, r0
	if (left > right) {
   d6a5a:	bf84      	itt	hi
   d6a5c:	462c      	movhi	r4, r5
   d6a5e:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6a60:	f7ff ff6b 	bl	d693a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d6a64:	68ba      	ldr	r2, [r7, #8]
   d6a66:	4294      	cmp	r4, r2
   d6a68:	d80a      	bhi.n	d6a80 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6a6a:	6839      	ldr	r1, [r7, #0]
   d6a6c:	4295      	cmp	r5, r2
   d6a6e:	bf94      	ite	ls
   d6a70:	ebc4 0205 	rsbls	r2, r4, r5
   d6a74:	ebc4 0202 	rsbhi	r2, r4, r2
   d6a78:	4421      	add	r1, r4
   d6a7a:	4630      	mov	r0, r6
   d6a7c:	f7ff ff45 	bl	d690a <_ZN6String4copyEPKcj>
	return out;
}
   d6a80:	4630      	mov	r0, r6
   d6a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6a84:	000dba85 	.word	0x000dba85

000d6a88 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a88:	b510      	push	{r4, lr}
   d6a8a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a8c:	6800      	ldr	r0, [r0, #0]
   d6a8e:	b108      	cbz	r0, d6a94 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a90:	f7ff fab4 	bl	d5ffc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6a94:	4620      	mov	r0, r4
   d6a96:	bd10      	pop	{r4, pc}

000d6a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6a98:	680b      	ldr	r3, [r1, #0]
   d6a9a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6a9c:	b113      	cbz	r3, d6aa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6a9e:	685a      	ldr	r2, [r3, #4]
   d6aa0:	3201      	adds	r2, #1
   d6aa2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6aa4:	4770      	bx	lr
	...

000d6aa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6aa8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6aaa:	4c06      	ldr	r4, [pc, #24]	; (d6ac4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6aac:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6aae:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ab0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6ab2:	f7ff fa9b 	bl	d5fec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	4a03      	ldr	r2, [pc, #12]	; (d6ac8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6aba:	4904      	ldr	r1, [pc, #16]	; (d6acc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6ac0:	f001 bcee 	b.w	d84a0 <__aeabi_atexit>
   d6ac4:	2003e3c4 	.word	0x2003e3c4
   d6ac8:	2003e178 	.word	0x2003e178
   d6acc:	000d6a89 	.word	0x000d6a89

000d6ad0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ad2:	4606      	mov	r6, r0
   d6ad4:	460d      	mov	r5, r1
   d6ad6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6ad8:	2400      	movs	r4, #0
  while (size--) {
   d6ada:	42bd      	cmp	r5, r7
   d6adc:	d00c      	beq.n	d6af8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6ade:	6833      	ldr	r3, [r6, #0]
   d6ae0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ae4:	689b      	ldr	r3, [r3, #8]
   d6ae6:	4630      	mov	r0, r6
   d6ae8:	4798      	blx	r3
     if (chunk>=0)
   d6aea:	2800      	cmp	r0, #0
   d6aec:	db01      	blt.n	d6af2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6aee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6af0:	e7f3      	b.n	d6ada <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6af2:	2c00      	cmp	r4, #0
   d6af4:	bf08      	it	eq
   d6af6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6af8:	4620      	mov	r0, r4
   d6afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6afc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6afc:	b570      	push	{r4, r5, r6, lr}
   d6afe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6b00:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6b02:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6b04:	b149      	cbz	r1, d6b1a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6b06:	f004 f95a 	bl	dadbe <strlen>
   d6b0a:	682b      	ldr	r3, [r5, #0]
   d6b0c:	4602      	mov	r2, r0
   d6b0e:	4621      	mov	r1, r4
   d6b10:	4628      	mov	r0, r5
   d6b12:	68db      	ldr	r3, [r3, #12]
    }
   d6b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b18:	4718      	bx	r3
    }
   d6b1a:	bd70      	pop	{r4, r5, r6, pc}

000d6b1c <_ZN5Print5printEPKc>:
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	f7ff ffed 	bl	d6afc <_ZN5Print5writeEPKc>
   d6b22:	bd08      	pop	{r3, pc}

000d6b24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b24:	6803      	ldr	r3, [r0, #0]
   d6b26:	689b      	ldr	r3, [r3, #8]
   d6b28:	4718      	bx	r3

000d6b2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b2c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b2e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b30:	f7ff fff8 	bl	d6b24 <_ZN5Print5printEc>
  n += print('\n');
   d6b34:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6b36:	4604      	mov	r4, r0
  n += print('\n');
   d6b38:	4628      	mov	r0, r5
   d6b3a:	f7ff fff3 	bl	d6b24 <_ZN5Print5printEc>
  return n;
}
   d6b3e:	4420      	add	r0, r4
   d6b40:	bd38      	pop	{r3, r4, r5, pc}

000d6b42 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b42:	b538      	push	{r3, r4, r5, lr}
   d6b44:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6b46:	f7ff ffd9 	bl	d6afc <_ZN5Print5writeEPKc>
   d6b4a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6b4c:	4628      	mov	r0, r5
   d6b4e:	f7ff ffec 	bl	d6b2a <_ZN5Print7printlnEv>
  return n;
}
   d6b52:	4420      	add	r0, r4
   d6b54:	bd38      	pop	{r3, r4, r5, pc}

000d6b56 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d6b56:	f7ff bff4 	b.w	d6b42 <_ZN5Print7printlnEPKc>

000d6b5a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b5a:	b530      	push	{r4, r5, lr}
   d6b5c:	b08b      	sub	sp, #44	; 0x2c
   d6b5e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b60:	2100      	movs	r1, #0
   d6b62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b66:	2a01      	cmp	r2, #1
   d6b68:	bf98      	it	ls
   d6b6a:	220a      	movls	r2, #10
   d6b6c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6b70:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6b74:	fb05 3312 	mls	r3, r5, r2, r3
   d6b78:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b7c:	2b09      	cmp	r3, #9
   d6b7e:	bf94      	ite	ls
   d6b80:	3330      	addls	r3, #48	; 0x30
   d6b82:	3337      	addhi	r3, #55	; 0x37
   d6b84:	b2db      	uxtb	r3, r3
   d6b86:	4621      	mov	r1, r4
   d6b88:	f804 3901 	strb.w	r3, [r4], #-1
   d6b8c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6b8e:	2d00      	cmp	r5, #0
   d6b90:	d1ee      	bne.n	d6b70 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6b92:	f7ff ffb3 	bl	d6afc <_ZN5Print5writeEPKc>
}
   d6b96:	b00b      	add	sp, #44	; 0x2c
   d6b98:	bd30      	pop	{r4, r5, pc}
	...

000d6b9c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ba0:	ec57 6b10 	vmov	r6, r7, d0
   d6ba4:	4682      	mov	sl, r0
   d6ba6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6ba8:	ee10 2a10 	vmov	r2, s0
   d6bac:	463b      	mov	r3, r7
   d6bae:	ee10 0a10 	vmov	r0, s0
   d6bb2:	4639      	mov	r1, r7
   d6bb4:	f003 fb6a 	bl	da28c <__aeabi_dcmpun>
   d6bb8:	b108      	cbz	r0, d6bbe <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bba:	494e      	ldr	r1, [pc, #312]	; (d6cf4 <_ZN5Print10printFloatEdh+0x158>)
   d6bbc:	e012      	b.n	d6be4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6bbe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6bc2:	f04f 32ff 	mov.w	r2, #4294967295
   d6bc6:	4b4c      	ldr	r3, [pc, #304]	; (d6cf8 <_ZN5Print10printFloatEdh+0x15c>)
   d6bc8:	4630      	mov	r0, r6
   d6bca:	4649      	mov	r1, r9
   d6bcc:	f003 fb5e 	bl	da28c <__aeabi_dcmpun>
   d6bd0:	b968      	cbnz	r0, d6bee <_ZN5Print10printFloatEdh+0x52>
   d6bd2:	f04f 32ff 	mov.w	r2, #4294967295
   d6bd6:	4b48      	ldr	r3, [pc, #288]	; (d6cf8 <_ZN5Print10printFloatEdh+0x15c>)
   d6bd8:	4630      	mov	r0, r6
   d6bda:	4649      	mov	r1, r9
   d6bdc:	f003 fb38 	bl	da250 <__aeabi_dcmple>
   d6be0:	b928      	cbnz	r0, d6bee <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6be2:	4946      	ldr	r1, [pc, #280]	; (d6cfc <_ZN5Print10printFloatEdh+0x160>)
   d6be4:	4650      	mov	r0, sl
   d6be6:	f7ff ff89 	bl	d6afc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6bee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6bf2:	4b43      	ldr	r3, [pc, #268]	; (d6d00 <_ZN5Print10printFloatEdh+0x164>)
   d6bf4:	4630      	mov	r0, r6
   d6bf6:	4639      	mov	r1, r7
   d6bf8:	f003 fb3e 	bl	da278 <__aeabi_dcmpgt>
   d6bfc:	b108      	cbz	r0, d6c02 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bfe:	4941      	ldr	r1, [pc, #260]	; (d6d04 <_ZN5Print10printFloatEdh+0x168>)
   d6c00:	e7f0      	b.n	d6be4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6c02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6c06:	4b40      	ldr	r3, [pc, #256]	; (d6d08 <_ZN5Print10printFloatEdh+0x16c>)
   d6c08:	4630      	mov	r0, r6
   d6c0a:	4639      	mov	r1, r7
   d6c0c:	f003 fb16 	bl	da23c <__aeabi_dcmplt>
   d6c10:	2800      	cmp	r0, #0
   d6c12:	d1f4      	bne.n	d6bfe <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6c14:	2200      	movs	r2, #0
   d6c16:	2300      	movs	r3, #0
   d6c18:	4630      	mov	r0, r6
   d6c1a:	4639      	mov	r1, r7
   d6c1c:	f003 fb0e 	bl	da23c <__aeabi_dcmplt>
   d6c20:	b140      	cbz	r0, d6c34 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6c22:	212d      	movs	r1, #45	; 0x2d
   d6c24:	4650      	mov	r0, sl
   d6c26:	f7ff ff7d 	bl	d6b24 <_ZN5Print5printEc>
     number = -number;
   d6c2a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6c2e:	4604      	mov	r4, r0
     number = -number;
   d6c30:	461f      	mov	r7, r3
   d6c32:	e000      	b.n	d6c36 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6c34:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6c36:	4935      	ldr	r1, [pc, #212]	; (d6d0c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6c38:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6c3c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6c3e:	fa5f f388 	uxtb.w	r3, r8
   d6c42:	429d      	cmp	r5, r3
   d6c44:	d906      	bls.n	d6c54 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6c46:	2200      	movs	r2, #0
   d6c48:	4b31      	ldr	r3, [pc, #196]	; (d6d10 <_ZN5Print10printFloatEdh+0x174>)
   d6c4a:	f003 f9af 	bl	d9fac <__aeabi_ddiv>
   d6c4e:	f108 0801 	add.w	r8, r8, #1
   d6c52:	e7f4      	b.n	d6c3e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6c54:	4632      	mov	r2, r6
   d6c56:	463b      	mov	r3, r7
   d6c58:	f002 fecc 	bl	d99f4 <__adddf3>
   d6c5c:	460f      	mov	r7, r1
   d6c5e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6c60:	f003 fb52 	bl	da308 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6c64:	220a      	movs	r2, #10
   d6c66:	4601      	mov	r1, r0
   d6c68:	4680      	mov	r8, r0
   d6c6a:	4650      	mov	r0, sl
   d6c6c:	f7ff ff75 	bl	d6b5a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6c70:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6c72:	b3e5      	cbz	r5, d6cee <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6c74:	4640      	mov	r0, r8
   d6c76:	f002 fff9 	bl	d9c6c <__aeabi_ui2d>
   d6c7a:	4602      	mov	r2, r0
   d6c7c:	460b      	mov	r3, r1
   d6c7e:	4630      	mov	r0, r6
   d6c80:	4639      	mov	r1, r7
   d6c82:	f002 feb5 	bl	d99f0 <__aeabi_dsub>
   d6c86:	4606      	mov	r6, r0
   d6c88:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c8a:	4650      	mov	r0, sl
   d6c8c:	4921      	ldr	r1, [pc, #132]	; (d6d14 <_ZN5Print10printFloatEdh+0x178>)
   d6c8e:	f7ff ff35 	bl	d6afc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6c92:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6c94:	2200      	movs	r2, #0
   d6c96:	4b1e      	ldr	r3, [pc, #120]	; (d6d10 <_ZN5Print10printFloatEdh+0x174>)
   d6c98:	4630      	mov	r0, r6
   d6c9a:	4639      	mov	r1, r7
   d6c9c:	f003 f85c 	bl	d9d58 <__aeabi_dmul>
   d6ca0:	4606      	mov	r6, r0
   d6ca2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d6ca4:	f003 fb08 	bl	da2b8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6ca8:	f1b0 0900 	subs.w	r9, r0, #0
   d6cac:	da07      	bge.n	d6cbe <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d6cae:	212d      	movs	r1, #45	; 0x2d
   d6cb0:	4650      	mov	r0, sl
   d6cb2:	f7ff ff37 	bl	d6b24 <_ZN5Print5printEc>
            val = -n;
   d6cb6:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6cba:	4680      	mov	r8, r0
   d6cbc:	e002      	b.n	d6cc4 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d6cbe:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6cc0:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6cc4:	220a      	movs	r2, #10
   d6cc6:	4650      	mov	r0, sl
   d6cc8:	f7ff ff47 	bl	d6b5a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d6ccc:	4440      	add	r0, r8
   d6cce:	4404      	add	r4, r0
    remainder -= toPrint;
   d6cd0:	4648      	mov	r0, r9
   d6cd2:	f002 ffdb 	bl	d9c8c <__aeabi_i2d>
   d6cd6:	4602      	mov	r2, r0
   d6cd8:	460b      	mov	r3, r1
   d6cda:	4630      	mov	r0, r6
   d6cdc:	4639      	mov	r1, r7
   d6cde:	f002 fe87 	bl	d99f0 <__aeabi_dsub>
   d6ce2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6ce4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6ce8:	4606      	mov	r6, r0
   d6cea:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6cec:	d1d2      	bne.n	d6c94 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6cee:	4620      	mov	r0, r4
   d6cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cf4:	000dbcf8 	.word	0x000dbcf8
   d6cf8:	7fefffff 	.word	0x7fefffff
   d6cfc:	000dbd00 	.word	0x000dbd00
   d6d00:	41efffff 	.word	0x41efffff
   d6d04:	000dbcfc 	.word	0x000dbcfc
   d6d08:	c1efffff 	.word	0xc1efffff
   d6d0c:	3fe00000 	.word	0x3fe00000
   d6d10:	40240000 	.word	0x40240000
   d6d14:	000dbc05 	.word	0x000dbc05

000d6d18 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d6d18:	b538      	push	{r3, r4, r5, lr}
   d6d1a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d6d1c:	ee10 0a10 	vmov	r0, s0
   d6d20:	b2cd      	uxtb	r5, r1
   d6d22:	f002 ffc5 	bl	d9cb0 <__aeabi_f2d>
   d6d26:	ec41 0b10 	vmov	d0, r0, r1
   d6d2a:	4629      	mov	r1, r5
   d6d2c:	4620      	mov	r0, r4
}
   d6d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d6d32:	f7ff bf33 	b.w	d6b9c <_ZN5Print10printFloatEdh>

000d6d36 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6d36:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6d38:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6d3a:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6d3c:	f7ff ff2e 	bl	d6b9c <_ZN5Print10printFloatEdh>
   d6d40:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6d42:	4628      	mov	r0, r5
   d6d44:	f7ff fef1 	bl	d6b2a <_ZN5Print7printlnEv>
  return n;
}
   d6d48:	4420      	add	r0, r4
   d6d4a:	bd38      	pop	{r3, r4, r5, pc}

000d6d4c <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6d4c:	b538      	push	{r3, r4, r5, lr}
   d6d4e:	4604      	mov	r4, r0
    return println((double)num, digits);
   d6d50:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6d54:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6d56:	f002 ffab 	bl	d9cb0 <__aeabi_f2d>
   d6d5a:	ec41 0b10 	vmov	d0, r0, r1
   d6d5e:	4629      	mov	r1, r5
   d6d60:	4620      	mov	r0, r4
}
   d6d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d6d66:	f7ff bfe6 	b.w	d6d36 <_ZN5Print7printlnEdi>

000d6d6a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d6a:	b40c      	push	{r2, r3}
   d6d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d70:	b087      	sub	sp, #28
   d6d72:	af00      	add	r7, sp, #0
   d6d74:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d78:	4605      	mov	r5, r0
   d6d7a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d7e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d80:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d82:	4623      	mov	r3, r4
   d6d84:	464a      	mov	r2, r9
   d6d86:	2114      	movs	r1, #20
   d6d88:	1d38      	adds	r0, r7, #4
   d6d8a:	f7ff fb63 	bl	d6454 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6d8e:	2813      	cmp	r0, #19
   d6d90:	d805      	bhi.n	d6d9e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d92:	1d39      	adds	r1, r7, #4
   d6d94:	4628      	mov	r0, r5
   d6d96:	f7ff feb1 	bl	d6afc <_ZN5Print5writeEPKc>
   d6d9a:	4604      	mov	r4, r0
   d6d9c:	e013      	b.n	d6dc6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d9e:	f100 0308 	add.w	r3, r0, #8
   d6da2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6da6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6da8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6dac:	1c41      	adds	r1, r0, #1
   d6dae:	4623      	mov	r3, r4
   d6db0:	464a      	mov	r2, r9
   d6db2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6db4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6db6:	f7ff fb4d 	bl	d6454 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6dba:	4669      	mov	r1, sp
   d6dbc:	4628      	mov	r0, r5
   d6dbe:	f7ff fe9d 	bl	d6afc <_ZN5Print5writeEPKc>
   d6dc2:	4604      	mov	r4, r0
   d6dc4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6dc6:	b11e      	cbz	r6, d6dd0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6dc8:	4628      	mov	r0, r5
   d6dca:	f7ff feae 	bl	d6b2a <_ZN5Print7printlnEv>
   d6dce:	4404      	add	r4, r0
    return n;
}
   d6dd0:	4620      	mov	r0, r4
   d6dd2:	371c      	adds	r7, #28
   d6dd4:	46bd      	mov	sp, r7
   d6dd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6dda:	b002      	add	sp, #8
   d6ddc:	4770      	bx	lr
	...

000d6de0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6de0:	4b01      	ldr	r3, [pc, #4]	; (d6de8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6de2:	4a02      	ldr	r2, [pc, #8]	; (d6dec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6de4:	601a      	str	r2, [r3, #0]
   d6de6:	4770      	bx	lr
   d6de8:	2003e3c8 	.word	0x2003e3c8
   d6dec:	000dbd77 	.word	0x000dbd77

000d6df0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6df0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6df2:	2000      	movs	r0, #0
   d6df4:	f7ff faee 	bl	d63d4 <spark_sync_time_pending>
   d6df8:	b128      	cbz	r0, d6e06 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6dfa:	f7ff fad3 	bl	d63a4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6dfe:	f080 0001 	eor.w	r0, r0, #1
   d6e02:	b2c0      	uxtb	r0, r0
   d6e04:	bd08      	pop	{r3, pc}
   d6e06:	2001      	movs	r0, #1
    }
   d6e08:	bd08      	pop	{r3, pc}
	...

000d6e0c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6e0c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6e10:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e18:	d40f      	bmi.n	d6e3a <_ZN9TimeClass4zoneEf+0x2e>
   d6e1a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d6e1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e26:	dc08      	bgt.n	d6e3a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6e28:	eddf 7a04 	vldr	s15, [pc, #16]	; d6e3c <_ZN9TimeClass4zoneEf+0x30>
   d6e2c:	4b04      	ldr	r3, [pc, #16]	; (d6e40 <_ZN9TimeClass4zoneEf+0x34>)
   d6e2e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6e32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d6e36:	ed83 0a00 	vstr	s0, [r3]
   d6e3a:	4770      	bx	lr
   d6e3c:	45610000 	.word	0x45610000
   d6e40:	2003e3d4 	.word	0x2003e3d4

000d6e44 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d6e46:	4b0e      	ldr	r3, [pc, #56]	; (d6e80 <_ZN9TimeClass7timeStrEl+0x3c>)
   d6e48:	681b      	ldr	r3, [r3, #0]
   d6e4a:	4419      	add	r1, r3
   d6e4c:	4b0d      	ldr	r3, [pc, #52]	; (d6e84 <_ZN9TimeClass7timeStrEl+0x40>)
   d6e4e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6e50:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6e52:	a802      	add	r0, sp, #8
   d6e54:	4419      	add	r1, r3
   d6e56:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d6e5a:	f003 fe21 	bl	daaa0 <localtime>
        char* ascstr = asctime(calendar_time);
   d6e5e:	f003 fdd1 	bl	daa04 <asctime>
   d6e62:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6e64:	f003 ffab 	bl	dadbe <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6e68:	4428      	add	r0, r5
   d6e6a:	2300      	movs	r3, #0
   d6e6c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6e70:	4629      	mov	r1, r5
   d6e72:	4620      	mov	r0, r4
   d6e74:	f7ff fd61 	bl	d693a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6e78:	4620      	mov	r0, r4
   d6e7a:	b003      	add	sp, #12
   d6e7c:	bd30      	pop	{r4, r5, pc}
   d6e7e:	bf00      	nop
   d6e80:	2003e3d4 	.word	0x2003e3d4
   d6e84:	2003e3d0 	.word	0x2003e3d0

000d6e88 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6e88:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6e8a:	2000      	movs	r0, #0
   d6e8c:	f7ff f88e 	bl	d5fac <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6e90:	4604      	mov	r4, r0
   d6e92:	b968      	cbnz	r0, d6eb0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6e94:	f7ff f9e2 	bl	d625c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6e98:	2801      	cmp	r0, #1
   d6e9a:	d10b      	bne.n	d6eb4 <_ZN9TimeClass7isValidEv+0x2c>
   d6e9c:	4620      	mov	r0, r4
   d6e9e:	f7ff fa05 	bl	d62ac <system_thread_get_state>
   d6ea2:	b938      	cbnz	r0, d6eb4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6ea4:	f7ff ffa4 	bl	d6df0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6ea8:	b930      	cbnz	r0, d6eb8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6eaa:	f7ff fa73 	bl	d6394 <spark_process>
   d6eae:	e7f9      	b.n	d6ea4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6eb0:	2001      	movs	r0, #1
   d6eb2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6eb4:	2000      	movs	r0, #0
   d6eb6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6eb8:	f7ff ff9a 	bl	d6df0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6ebc:	2000      	movs	r0, #0
   d6ebe:	f7ff f875 	bl	d5fac <HAL_RTC_Time_Is_Valid>
   d6ec2:	3000      	adds	r0, #0
   d6ec4:	bf18      	it	ne
   d6ec6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6ec8:	bd10      	pop	{r4, pc}

000d6eca <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6eca:	b508      	push	{r3, lr}
    (void)isValid();
   d6ecc:	f7ff ffdc 	bl	d6e88 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6ed4:	f7ff b862 	b.w	d5f9c <HAL_RTC_Get_UnixTime>

000d6ed8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ed8:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6eda:	681a      	ldr	r2, [r3, #0]
   d6edc:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ede:	601a      	str	r2, [r3, #0]
   d6ee0:	4770      	bx	lr
   d6ee2:	bf00      	nop
   d6ee4:	2003e0b8 	.word	0x2003e0b8
   d6ee8:	2003e3cc 	.word	0x2003e3cc

000d6eec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6eec:	2100      	movs	r1, #0
   d6eee:	f7ff b9c5 	b.w	d627c <system_delay_ms>

000d6ef2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ef2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6ef4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ef6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6ef8:	b113      	cbz	r3, d6f00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6efa:	2203      	movs	r2, #3
   d6efc:	4601      	mov	r1, r0
   d6efe:	4798      	blx	r3
    }
   d6f00:	4620      	mov	r0, r4
   d6f02:	bd10      	pop	{r4, pc}

000d6f04 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f04:	b510      	push	{r4, lr}
   d6f06:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f08:	f7ff fff3 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	bd10      	pop	{r4, pc}

000d6f10 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6f10:	b513      	push	{r0, r1, r4, lr}
   d6f12:	460b      	mov	r3, r1
   d6f14:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f16:	c803      	ldmia	r0, {r0, r1}
   d6f18:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6f20:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6f24:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6f28:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6f2c:	b002      	add	sp, #8
   d6f2e:	bd10      	pop	{r4, pc}

000d6f30 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f30:	4803      	ldr	r0, [pc, #12]	; (d6f40 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f32:	4a04      	ldr	r2, [pc, #16]	; (d6f44 <_GLOBAL__sub_I_RGB+0x14>)
   d6f34:	4904      	ldr	r1, [pc, #16]	; (d6f48 <_GLOBAL__sub_I_RGB+0x18>)
   d6f36:	2300      	movs	r3, #0
   d6f38:	6083      	str	r3, [r0, #8]
   d6f3a:	f001 bab1 	b.w	d84a0 <__aeabi_atexit>
   d6f3e:	bf00      	nop
   d6f40:	2003e3d8 	.word	0x2003e3d8
   d6f44:	2003e178 	.word	0x2003e178
   d6f48:	000d6f05 	.word	0x000d6f05

000d6f4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6f4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6f4e:	4b0c      	ldr	r3, [pc, #48]	; (d6f80 <serialEventRun+0x34>)
   d6f50:	b133      	cbz	r3, d6f60 <serialEventRun+0x14>
   d6f52:	f000 fc31 	bl	d77b8 <_Z16_fetch_usbserialv>
   d6f56:	6803      	ldr	r3, [r0, #0]
   d6f58:	691b      	ldr	r3, [r3, #16]
   d6f5a:	4798      	blx	r3
   d6f5c:	2800      	cmp	r0, #0
   d6f5e:	dc09      	bgt.n	d6f74 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6f60:	4b08      	ldr	r3, [pc, #32]	; (d6f84 <serialEventRun+0x38>)
   d6f62:	b163      	cbz	r3, d6f7e <serialEventRun+0x32>
   d6f64:	f000 fcaa 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d6f68:	6803      	ldr	r3, [r0, #0]
   d6f6a:	691b      	ldr	r3, [r3, #16]
   d6f6c:	4798      	blx	r3
   d6f6e:	2800      	cmp	r0, #0
   d6f70:	dc03      	bgt.n	d6f7a <serialEventRun+0x2e>
   d6f72:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6f74:	f3af 8000 	nop.w
   d6f78:	e7f2      	b.n	d6f60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6f7a:	f3af 8000 	nop.w
   d6f7e:	bd08      	pop	{r3, pc}
	...

000d6f88 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6f88:	b508      	push	{r3, lr}
	serialEventRun();
   d6f8a:	f7ff ffdf 	bl	d6f4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6f8e:	f7fe fffd 	bl	d5f8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6f92:	4b01      	ldr	r3, [pc, #4]	; (d6f98 <_post_loop+0x10>)
   d6f94:	6018      	str	r0, [r3, #0]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	2003e70c 	.word	0x2003e70c

000d6f9c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6f9c:	4802      	ldr	r0, [pc, #8]	; (d6fa8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6f9e:	4a03      	ldr	r2, [pc, #12]	; (d6fac <_Z33system_initialize_user_backup_ramv+0x10>)
   d6fa0:	4903      	ldr	r1, [pc, #12]	; (d6fb0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6fa2:	1a12      	subs	r2, r2, r0
   d6fa4:	f003 be88 	b.w	dacb8 <memcpy>
   d6fa8:	2003f400 	.word	0x2003f400
   d6fac:	2003f404 	.word	0x2003f404
   d6fb0:	000dc298 	.word	0x000dc298

000d6fb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6fb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6fb6:	2300      	movs	r3, #0
   d6fb8:	9300      	str	r3, [sp, #0]
   d6fba:	461a      	mov	r2, r3
   d6fbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6fc0:	f7ff f986 	bl	d62d0 <system_ctrl_set_result>
}
   d6fc4:	b003      	add	sp, #12
   d6fc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6fcc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6fcc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6fce:	8843      	ldrh	r3, [r0, #2]
   d6fd0:	2b0a      	cmp	r3, #10
   d6fd2:	d008      	beq.n	d6fe6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6fd4:	2b50      	cmp	r3, #80	; 0x50
   d6fd6:	d109      	bne.n	d6fec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6fd8:	4b09      	ldr	r3, [pc, #36]	; (d7000 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6fda:	681b      	ldr	r3, [r3, #0]
   d6fdc:	b13b      	cbz	r3, d6fee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6fde:	b003      	add	sp, #12
   d6fe0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6fe4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6fe6:	f7ff ffe5 	bl	d6fb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6fea:	e006      	b.n	d6ffa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6fec:	2300      	movs	r3, #0
   d6fee:	9300      	str	r3, [sp, #0]
   d6ff0:	461a      	mov	r2, r3
   d6ff2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ff6:	f7ff f96b 	bl	d62d0 <system_ctrl_set_result>
        break;
    }
}
   d6ffa:	b003      	add	sp, #12
   d6ffc:	f85d fb04 	ldr.w	pc, [sp], #4
   d7000:	2003e3e8 	.word	0x2003e3e8

000d7004 <module_user_init_hook>:

void module_user_init_hook()
{
   d7004:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7006:	4c10      	ldr	r4, [pc, #64]	; (d7048 <module_user_init_hook+0x44>)
   d7008:	4d10      	ldr	r5, [pc, #64]	; (d704c <module_user_init_hook+0x48>)
   d700a:	6823      	ldr	r3, [r4, #0]
   d700c:	42ab      	cmp	r3, r5
   d700e:	4b10      	ldr	r3, [pc, #64]	; (d7050 <module_user_init_hook+0x4c>)
   d7010:	bf0c      	ite	eq
   d7012:	2201      	moveq	r2, #1
   d7014:	2200      	movne	r2, #0
   d7016:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7018:	d002      	beq.n	d7020 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d701a:	f7ff ffbf 	bl	d6f9c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d701e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7020:	f7fe ffa4 	bl	d5f6c <HAL_RNG_GetRandomNumber>
   d7024:	4604      	mov	r4, r0
    srand(seed);
   d7026:	f003 fe75 	bl	dad14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d702a:	4b0a      	ldr	r3, [pc, #40]	; (d7054 <module_user_init_hook+0x50>)
   d702c:	b113      	cbz	r3, d7034 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d702e:	4620      	mov	r0, r4
   d7030:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7034:	2100      	movs	r1, #0
   d7036:	4807      	ldr	r0, [pc, #28]	; (d7054 <module_user_init_hook+0x50>)
   d7038:	f7ff f9d4 	bl	d63e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d703c:	2100      	movs	r1, #0
   d703e:	4806      	ldr	r0, [pc, #24]	; (d7058 <module_user_init_hook+0x54>)
}
   d7040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7044:	f7ff b93a 	b.w	d62bc <system_ctrl_set_app_request_handler>
   d7048:	2003f400 	.word	0x2003f400
   d704c:	9a271c1e 	.word	0x9a271c1e
   d7050:	2003e3ec 	.word	0x2003e3ec
   d7054:	00000000 	.word	0x00000000
   d7058:	000d6fcd 	.word	0x000d6fcd

000d705c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d705c:	4770      	bx	lr

000d705e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d705e:	2000      	movs	r0, #0
   d7060:	4770      	bx	lr

000d7062 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7062:	b510      	push	{r4, lr}
   d7064:	2110      	movs	r1, #16
   d7066:	4604      	mov	r4, r0
   d7068:	f001 fa28 	bl	d84bc <_ZdlPvj>
   d706c:	4620      	mov	r0, r4
   d706e:	bd10      	pop	{r4, pc}

000d7070 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7070:	b508      	push	{r3, lr}
      { delete this; }
   d7072:	b108      	cbz	r0, d7078 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7074:	f7ff fff5 	bl	d7062 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7078:	bd08      	pop	{r3, pc}

000d707a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d707a:	2200      	movs	r2, #0
   d707c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d707e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7080:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7084:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7086:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d708a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d708c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d708e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7090:	680c      	ldr	r4, [r1, #0]
   d7092:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7094:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7096:	bd10      	pop	{r4, pc}

000d7098 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7098:	b510      	push	{r4, lr}
   d709a:	4604      	mov	r4, r0
    free((void*)msg_);
   d709c:	6800      	ldr	r0, [r0, #0]
   d709e:	f7ff f9b1 	bl	d6404 <free>
}
   d70a2:	4620      	mov	r0, r4
   d70a4:	bd10      	pop	{r4, pc}

000d70a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d70a6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d70a8:	68c4      	ldr	r4, [r0, #12]
   d70aa:	b1f4      	cbz	r4, d70ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d70ac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d70ae:	2b02      	cmp	r3, #2
   d70b0:	d103      	bne.n	d70ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d70b2:	f104 000c 	add.w	r0, r4, #12
   d70b6:	f7ff ffef 	bl	d7098 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d70ba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d70bc:	b135      	cbz	r5, d70cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70be:	4628      	mov	r0, r5
   d70c0:	f7ff ff17 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
   d70c4:	2110      	movs	r1, #16
   d70c6:	4628      	mov	r0, r5
   d70c8:	f001 f9f8 	bl	d84bc <_ZdlPvj>
   d70cc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d70ce:	b135      	cbz	r5, d70de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d70d0:	4628      	mov	r0, r5
   d70d2:	f7ff ff0e 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
   d70d6:	2110      	movs	r1, #16
   d70d8:	4628      	mov	r0, r5
   d70da:	f001 f9ef 	bl	d84bc <_ZdlPvj>
   d70de:	4620      	mov	r0, r4
   d70e0:	2114      	movs	r1, #20
   d70e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d70e6:	f001 b9e9 	b.w	d84bc <_ZdlPvj>
   d70ea:	bd38      	pop	{r3, r4, r5, pc}

000d70ec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d70ec:	b513      	push	{r0, r1, r4, lr}
   d70ee:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d70f0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d70f4:	2300      	movs	r3, #0
   d70f6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d70f8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d70fa:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d70fc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d70fe:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7100:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7102:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7104:	f7fd fa3c 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7108:	4620      	mov	r0, r4
   d710a:	b002      	add	sp, #8
   d710c:	bd10      	pop	{r4, pc}

000d710e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d710e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7110:	460c      	mov	r4, r1
   d7112:	ad02      	add	r5, sp, #8
   d7114:	f854 3b04 	ldr.w	r3, [r4], #4
   d7118:	f845 3d08 	str.w	r3, [r5, #-8]!
   d711c:	4606      	mov	r6, r0
   d711e:	460f      	mov	r7, r1
   d7120:	a801      	add	r0, sp, #4
   d7122:	4621      	mov	r1, r4
   d7124:	f7ff fcb8 	bl	d6a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7128:	4629      	mov	r1, r5
   d712a:	4630      	mov	r0, r6
   d712c:	f7ff ffde 	bl	d70ec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7130:	a801      	add	r0, sp, #4
   d7132:	f7fd fa25 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7136:	4620      	mov	r0, r4
   d7138:	f7fd fa22 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d713c:	4638      	mov	r0, r7
   d713e:	2108      	movs	r1, #8
   d7140:	f001 f9bc 	bl	d84bc <_ZdlPvj>
        return p;
    }
   d7144:	4630      	mov	r0, r6
   d7146:	b003      	add	sp, #12
   d7148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d714c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d714c:	b538      	push	{r3, r4, r5, lr}
   d714e:	2300      	movs	r3, #0
   d7150:	4604      	mov	r4, r0
   d7152:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7154:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7156:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7158:	f7fc ff9f 	bl	d409a <_Znwj>
   d715c:	b128      	cbz	r0, d716a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d715e:	2301      	movs	r3, #1
   d7160:	6043      	str	r3, [r0, #4]
   d7162:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7164:	4b02      	ldr	r3, [pc, #8]	; (d7170 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7166:	6003      	str	r3, [r0, #0]
   d7168:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d716a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d716c:	4620      	mov	r0, r4
   d716e:	bd38      	pop	{r3, r4, r5, pc}
   d7170:	000dbe08 	.word	0x000dbe08

000d7174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7174:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7176:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7178:	b90a      	cbnz	r2, d717e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d717a:	f001 f9b2 	bl	d84e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d717e:	68c3      	ldr	r3, [r0, #12]
    }
   d7180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7184:	4718      	bx	r3

000d7186 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7186:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7188:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d718a:	f100 0110 	add.w	r1, r0, #16
   d718e:	f7ff fff1 	bl	d7174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7192:	bd08      	pop	{r3, pc}

000d7194 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7194:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7196:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7198:	b90a      	cbnz	r2, d719e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d719a:	f001 f9a2 	bl	d84e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d719e:	68c3      	ldr	r3, [r0, #12]
    }
   d71a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71a4:	4718      	bx	r3

000d71a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d71a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d71a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d71aa:	f100 0110 	add.w	r1, r0, #16
   d71ae:	f7ff fff1 	bl	d7194 <_ZNKSt8functionIFvRKbEEclES1_>
   d71b2:	bd08      	pop	{r3, pc}

000d71b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d71b4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d71b6:	2300      	movs	r3, #0
   d71b8:	6083      	str	r3, [r0, #8]
   d71ba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d71bc:	4604      	mov	r4, r0
   d71be:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d71c0:	b12b      	cbz	r3, d71ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d71c2:	2202      	movs	r2, #2
   d71c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d71c6:	68eb      	ldr	r3, [r5, #12]
   d71c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d71ca:	68ab      	ldr	r3, [r5, #8]
   d71cc:	60a3      	str	r3, [r4, #8]
	}
    }
   d71ce:	4620      	mov	r0, r4
   d71d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d71d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d71d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71d6:	b089      	sub	sp, #36	; 0x24
   d71d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d71da:	4668      	mov	r0, sp
   d71dc:	f7ff ff4d 	bl	d707a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d71e0:	2300      	movs	r3, #0
   d71e2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d71e6:	f04f 0202 	mov.w	r2, #2
   d71ea:	e8d4 3f4f 	ldrexb	r3, [r4]
   d71ee:	2b00      	cmp	r3, #0
   d71f0:	d103      	bne.n	d71fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d71f2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d71f6:	2900      	cmp	r1, #0
   d71f8:	d1f7      	bne.n	d71ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d71fa:	d002      	beq.n	d7202 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d71fc:	f88d 3008 	strb.w	r3, [sp, #8]
   d7200:	e063      	b.n	d72ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7202:	f114 050c 	adds.w	r5, r4, #12
   d7206:	d003      	beq.n	d7210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7208:	4669      	mov	r1, sp
   d720a:	4628      	mov	r0, r5
   d720c:	f7ff ff35 	bl	d707a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7210:	f3bf 8f5f 	dmb	sy
   d7214:	2301      	movs	r3, #1
   d7216:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7218:	2000      	movs	r0, #0
   d721a:	f104 0308 	add.w	r3, r4, #8
   d721e:	f3bf 8f5f 	dmb	sy
   d7222:	e853 6f00 	ldrex	r6, [r3]
   d7226:	e843 0200 	strex	r2, r0, [r3]
   d722a:	2a00      	cmp	r2, #0
   d722c:	d1f9      	bne.n	d7222 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d722e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7232:	2e00      	cmp	r6, #0
   d7234:	d049      	beq.n	d72ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7236:	f7ff f829 	bl	d628c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d723a:	b120      	cbz	r0, d7246 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d723c:	4629      	mov	r1, r5
   d723e:	4630      	mov	r0, r6
   d7240:	f7ff ff98 	bl	d7174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7244:	e03a      	b.n	d72bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7246:	4631      	mov	r1, r6
   d7248:	a802      	add	r0, sp, #8
   d724a:	f7ff ffb3 	bl	d71b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d724e:	68e0      	ldr	r0, [r4, #12]
   d7250:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7254:	b108      	cbz	r0, d725a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7256:	f003 fd97 	bl	dad88 <strdup>
   d725a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d725c:	2010      	movs	r0, #16
   d725e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7262:	f7fc ff1a 	bl	d409a <_Znwj>
   d7266:	4605      	mov	r5, r0
   d7268:	b1e8      	cbz	r0, d72a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d726a:	2700      	movs	r7, #0
   d726c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d726e:	2018      	movs	r0, #24
   d7270:	f7fc ff13 	bl	d409a <_Znwj>
   d7274:	4604      	mov	r4, r0
   d7276:	b188      	cbz	r0, d729c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7278:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d727a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d727c:	a802      	add	r0, sp, #8
   d727e:	f7ff fe47 	bl	d6f10 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7282:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7284:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7286:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7288:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d728a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d728c:	a906      	add	r1, sp, #24
   d728e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7290:	60e3      	str	r3, [r4, #12]
   d7292:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7296:	9205      	str	r2, [sp, #20]
   d7298:	f7ff feef 	bl	d707a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d729c:	4b0d      	ldr	r3, [pc, #52]	; (d72d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d729e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d72a0:	4b0d      	ldr	r3, [pc, #52]	; (d72d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d72a2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d72a4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d72a6:	a806      	add	r0, sp, #24
   d72a8:	f7ff fef6 	bl	d7098 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d72ac:	a802      	add	r0, sp, #8
   d72ae:	f7ff fe20 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d72b2:	2200      	movs	r2, #0
   d72b4:	4629      	mov	r1, r5
   d72b6:	4809      	ldr	r0, [pc, #36]	; (d72dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d72b8:	f7fe fff0 	bl	d629c <application_thread_invoke>
   d72bc:	4630      	mov	r0, r6
   d72be:	f7ff fe18 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d72c2:	2110      	movs	r1, #16
   d72c4:	4630      	mov	r0, r6
   d72c6:	f001 f8f9 	bl	d84bc <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d72ca:	4668      	mov	r0, sp
   d72cc:	f7ff fee4 	bl	d7098 <_ZN8particle5ErrorD1Ev>
    }
   d72d0:	b009      	add	sp, #36	; 0x24
   d72d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d72d4:	000d7187 	.word	0x000d7187
   d72d8:	000d73fd 	.word	0x000d73fd
   d72dc:	000d7909 	.word	0x000d7909

000d72e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d72e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72e4:	b08b      	sub	sp, #44	; 0x2c
   d72e6:	4606      	mov	r6, r0
   d72e8:	460f      	mov	r7, r1
   d72ea:	4690      	mov	r8, r2
   d72ec:	4699      	mov	r9, r3
   d72ee:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d72f2:	f7ff f857 	bl	d63a4 <spark_cloud_flag_connected>
   d72f6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d72f8:	4683      	mov	fp, r0
   d72fa:	bb30      	cbnz	r0, d734a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d72fc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7300:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7302:	a905      	add	r1, sp, #20
   d7304:	4628      	mov	r0, r5
   d7306:	f8ad 3018 	strh.w	r3, [sp, #24]
   d730a:	f7ff feb6 	bl	d707a <_ZN8particle5ErrorC1EOS0_>
   d730e:	2014      	movs	r0, #20
   d7310:	f7fc fec3 	bl	d409a <_Znwj>
   d7314:	4604      	mov	r4, r0
   d7316:	b158      	cbz	r0, d7330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7318:	2302      	movs	r3, #2
   d731a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d731c:	2301      	movs	r3, #1
   d731e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7320:	f8c0 b004 	str.w	fp, [r0, #4]
   d7324:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7328:	4629      	mov	r1, r5
   d732a:	300c      	adds	r0, #12
   d732c:	f7ff fea5 	bl	d707a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7330:	4630      	mov	r0, r6
   d7332:	4621      	mov	r1, r4
   d7334:	f840 4b04 	str.w	r4, [r0], #4
   d7338:	f7ff ff08 	bl	d714c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d733c:	4628      	mov	r0, r5
   d733e:	f7ff feab 	bl	d7098 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7342:	a805      	add	r0, sp, #20
   d7344:	f7ff fea8 	bl	d7098 <_ZN8particle5ErrorD1Ev>
   d7348:	e052      	b.n	d73f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d734a:	2400      	movs	r4, #0
   d734c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d734e:	2014      	movs	r0, #20
   d7350:	606c      	str	r4, [r5, #4]
   d7352:	60ac      	str	r4, [r5, #8]
   d7354:	9307      	str	r3, [sp, #28]
   d7356:	f7fc fea0 	bl	d409a <_Znwj>
   d735a:	4601      	mov	r1, r0
   d735c:	b118      	cbz	r0, d7366 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d735e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7360:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7362:	6044      	str	r4, [r0, #4]
   d7364:	6084      	str	r4, [r0, #8]
   d7366:	a804      	add	r0, sp, #16
   d7368:	9103      	str	r1, [sp, #12]
   d736a:	f7ff feef 	bl	d714c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d736e:	4b22      	ldr	r3, [pc, #136]	; (d73f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7370:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7372:	2008      	movs	r0, #8
   d7374:	f7fc fe91 	bl	d409a <_Znwj>
   d7378:	4604      	mov	r4, r0
   d737a:	b128      	cbz	r0, d7388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d737c:	9b03      	ldr	r3, [sp, #12]
   d737e:	f840 3b04 	str.w	r3, [r0], #4
   d7382:	a904      	add	r1, sp, #16
   d7384:	f7ff fb88 	bl	d6a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7388:	9500      	str	r5, [sp, #0]
   d738a:	fa5f f38a 	uxtb.w	r3, sl
   d738e:	464a      	mov	r2, r9
   d7390:	4641      	mov	r1, r8
   d7392:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7394:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7396:	f7ff f80d 	bl	d63b4 <spark_send_event>
   d739a:	b920      	cbnz	r0, d73a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d739c:	9b03      	ldr	r3, [sp, #12]
   d739e:	785b      	ldrb	r3, [r3, #1]
   d73a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d73a4:	b183      	cbz	r3, d73c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d73a6:	9b03      	ldr	r3, [sp, #12]
   d73a8:	9305      	str	r3, [sp, #20]
   d73aa:	a904      	add	r1, sp, #16
   d73ac:	a806      	add	r0, sp, #24
   d73ae:	f7ff fb73 	bl	d6a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d73b2:	a905      	add	r1, sp, #20
   d73b4:	4630      	mov	r0, r6
   d73b6:	f7ff fe99 	bl	d70ec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73ba:	a806      	add	r0, sp, #24
   d73bc:	f7fd f8e0 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73c0:	a804      	add	r0, sp, #16
   d73c2:	f7fd f8dd 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73c6:	e013      	b.n	d73f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d73c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d73cc:	a905      	add	r1, sp, #20
   d73ce:	a803      	add	r0, sp, #12
   d73d0:	9205      	str	r2, [sp, #20]
   d73d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d73d6:	f7ff fefd 	bl	d71d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d73da:	a805      	add	r0, sp, #20
   d73dc:	f7ff fe5c 	bl	d7098 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d73e0:	a805      	add	r0, sp, #20
   d73e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d73e4:	f7ff fe93 	bl	d710e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d73e8:	a806      	add	r0, sp, #24
   d73ea:	f7fd f8c9 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73ee:	e7da      	b.n	d73a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d73f0:	4630      	mov	r0, r6
   d73f2:	b00b      	add	sp, #44	; 0x2c
   d73f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d73f8:	000d756d 	.word	0x000d756d

000d73fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d73fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d73fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7400:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7402:	d006      	beq.n	d7412 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7404:	2a03      	cmp	r2, #3
   d7406:	d017      	beq.n	d7438 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7408:	2a01      	cmp	r2, #1
   d740a:	d122      	bne.n	d7452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d740c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d740e:	6003      	str	r3, [r0, #0]
	      break;
   d7410:	e01f      	b.n	d7452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7412:	2018      	movs	r0, #24
   d7414:	680e      	ldr	r6, [r1, #0]
   d7416:	f7fc fe40 	bl	d409a <_Znwj>
   d741a:	4605      	mov	r5, r0
   d741c:	b150      	cbz	r0, d7434 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d741e:	4631      	mov	r1, r6
   d7420:	f7ff fec8 	bl	d71b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7424:	6930      	ldr	r0, [r6, #16]
   d7426:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d742a:	b108      	cbz	r0, d7430 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d742c:	f003 fcac 	bl	dad88 <strdup>
   d7430:	6128      	str	r0, [r5, #16]
   d7432:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7434:	6025      	str	r5, [r4, #0]
   d7436:	e00c      	b.n	d7452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7438:	6804      	ldr	r4, [r0, #0]
   d743a:	b154      	cbz	r4, d7452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d743c:	f104 0010 	add.w	r0, r4, #16
   d7440:	f7ff fe2a 	bl	d7098 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7444:	4620      	mov	r0, r4
   d7446:	f7ff fd54 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d744a:	2118      	movs	r1, #24
   d744c:	4620      	mov	r0, r4
   d744e:	f001 f835 	bl	d84bc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7452:	2000      	movs	r0, #0
   d7454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7456 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7456:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7458:	2300      	movs	r3, #0
   d745a:	6083      	str	r3, [r0, #8]
   d745c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d745e:	4604      	mov	r4, r0
   d7460:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7462:	b12b      	cbz	r3, d7470 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7464:	2202      	movs	r2, #2
   d7466:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7468:	68eb      	ldr	r3, [r5, #12]
   d746a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d746c:	68ab      	ldr	r3, [r5, #8]
   d746e:	60a3      	str	r3, [r4, #8]
	}
    }
   d7470:	4620      	mov	r0, r4
   d7472:	bd38      	pop	{r3, r4, r5, pc}

000d7474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7474:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7476:	b570      	push	{r4, r5, r6, lr}
   d7478:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d747a:	d006      	beq.n	d748a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d747c:	2a03      	cmp	r2, #3
   d747e:	d011      	beq.n	d74a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7480:	2a01      	cmp	r2, #1
   d7482:	d118      	bne.n	d74b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7484:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7486:	6003      	str	r3, [r0, #0]
	      break;
   d7488:	e015      	b.n	d74b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d748a:	2014      	movs	r0, #20
   d748c:	680e      	ldr	r6, [r1, #0]
   d748e:	f7fc fe04 	bl	d409a <_Znwj>
   d7492:	4605      	mov	r5, r0
   d7494:	b120      	cbz	r0, d74a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7496:	4631      	mov	r1, r6
   d7498:	f7ff ffdd 	bl	d7456 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d749c:	7c33      	ldrb	r3, [r6, #16]
   d749e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d74a0:	6025      	str	r5, [r4, #0]
   d74a2:	e008      	b.n	d74b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d74a4:	6804      	ldr	r4, [r0, #0]
   d74a6:	b134      	cbz	r4, d74b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74a8:	4620      	mov	r0, r4
   d74aa:	f7ff fd22 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d74ae:	2114      	movs	r1, #20
   d74b0:	4620      	mov	r0, r4
   d74b2:	f001 f803 	bl	d84bc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d74b6:	2000      	movs	r0, #0
   d74b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d74bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d74bc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d74be:	2300      	movs	r3, #0
   d74c0:	b087      	sub	sp, #28
   d74c2:	460c      	mov	r4, r1
   d74c4:	f3bf 8f5f 	dmb	sy
   d74c8:	e850 6f00 	ldrex	r6, [r0]
   d74cc:	e840 3200 	strex	r2, r3, [r0]
   d74d0:	2a00      	cmp	r2, #0
   d74d2:	d1f9      	bne.n	d74c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d74d4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d74d8:	2e00      	cmp	r6, #0
   d74da:	d03f      	beq.n	d755c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d74dc:	4618      	mov	r0, r3
   d74de:	f7fe fed5 	bl	d628c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d74e2:	4607      	mov	r7, r0
   d74e4:	b120      	cbz	r0, d74f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d74e6:	4621      	mov	r1, r4
   d74e8:	4630      	mov	r0, r6
   d74ea:	f7ff fe53 	bl	d7194 <_ZNKSt8functionIFvRKbEEclES1_>
   d74ee:	e02e      	b.n	d754e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74f0:	4631      	mov	r1, r6
   d74f2:	a801      	add	r0, sp, #4
   d74f4:	f7ff ffaf 	bl	d7456 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d74f8:	7823      	ldrb	r3, [r4, #0]
   d74fa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d74fe:	2010      	movs	r0, #16
   d7500:	f7fc fdcb 	bl	d409a <_Znwj>
   d7504:	4605      	mov	r5, r0
   d7506:	b1d0      	cbz	r0, d753e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7508:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d750a:	2014      	movs	r0, #20
   d750c:	f7fc fdc5 	bl	d409a <_Znwj>
   d7510:	4604      	mov	r4, r0
   d7512:	b178      	cbz	r0, d7534 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7514:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7516:	4601      	mov	r1, r0
   d7518:	a801      	add	r0, sp, #4
   d751a:	f7ff fcf9 	bl	d6f10 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d751e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7520:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7522:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7524:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7526:	9203      	str	r2, [sp, #12]
   d7528:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d752a:	60e3      	str	r3, [r4, #12]
   d752c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7530:	9204      	str	r2, [sp, #16]
   d7532:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7534:	4b0a      	ldr	r3, [pc, #40]	; (d7560 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7536:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7538:	4b0a      	ldr	r3, [pc, #40]	; (d7564 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d753a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d753c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d753e:	a801      	add	r0, sp, #4
   d7540:	f7ff fcd7 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7544:	2200      	movs	r2, #0
   d7546:	4629      	mov	r1, r5
   d7548:	4807      	ldr	r0, [pc, #28]	; (d7568 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d754a:	f7fe fea7 	bl	d629c <application_thread_invoke>
   d754e:	4630      	mov	r0, r6
   d7550:	f7ff fccf 	bl	d6ef2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7554:	2110      	movs	r1, #16
   d7556:	4630      	mov	r0, r6
   d7558:	f000 ffb0 	bl	d84bc <_ZdlPvj>
        }
    }
   d755c:	b007      	add	sp, #28
   d755e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7560:	000d71a7 	.word	0x000d71a7
   d7564:	000d7475 	.word	0x000d7475
   d7568:	000d7909 	.word	0x000d7909

000d756c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d756c:	b530      	push	{r4, r5, lr}
   d756e:	b085      	sub	sp, #20
   d7570:	4604      	mov	r4, r0
   d7572:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7574:	4668      	mov	r0, sp
   d7576:	4611      	mov	r1, r2
   d7578:	f7ff fdc9 	bl	d710e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d757c:	b17c      	cbz	r4, d759e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d757e:	b224      	sxth	r4, r4
   d7580:	4628      	mov	r0, r5
   d7582:	b10d      	cbz	r5, d7588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7584:	f003 fc00 	bl	dad88 <strdup>
   d7588:	9002      	str	r0, [sp, #8]
   d758a:	a902      	add	r1, sp, #8
   d758c:	4668      	mov	r0, sp
   d758e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7592:	f7ff fe1f 	bl	d71d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7596:	a802      	add	r0, sp, #8
   d7598:	f7ff fd7e 	bl	d7098 <_ZN8particle5ErrorD1Ev>
   d759c:	e01d      	b.n	d75da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d759e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d75a0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d75a4:	f04f 0201 	mov.w	r2, #1
   d75a8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d75ac:	42a3      	cmp	r3, r4
   d75ae:	d103      	bne.n	d75b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d75b0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d75b4:	2900      	cmp	r1, #0
   d75b6:	d1f7      	bne.n	d75a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d75b8:	d002      	beq.n	d75c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d75ba:	f88d 3008 	strb.w	r3, [sp, #8]
   d75be:	e00c      	b.n	d75da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d75c0:	f110 010c 	adds.w	r1, r0, #12
   d75c4:	f04f 0301 	mov.w	r3, #1
   d75c8:	bf18      	it	ne
   d75ca:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75cc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d75d0:	3004      	adds	r0, #4
   d75d2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d75d6:	f7ff ff71 	bl	d74bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d75da:	a801      	add	r0, sp, #4
   d75dc:	f7fc ffd0 	bl	d4580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d75e0:	b005      	add	sp, #20
   d75e2:	bd30      	pop	{r4, r5, pc}

000d75e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d75e4:	4770      	bx	lr

000d75e6 <_ZN9IPAddressD0Ev>:
   d75e6:	b510      	push	{r4, lr}
   d75e8:	2118      	movs	r1, #24
   d75ea:	4604      	mov	r4, r0
   d75ec:	f000 ff66 	bl	d84bc <_ZdlPvj>
   d75f0:	4620      	mov	r0, r4
   d75f2:	bd10      	pop	{r4, pc}

000d75f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d75f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d75f6:	7d03      	ldrb	r3, [r0, #20]
   d75f8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d75fa:	b08d      	sub	sp, #52	; 0x34
   d75fc:	460e      	mov	r6, r1
   d75fe:	f100 0704 	add.w	r7, r0, #4
   d7602:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7606:	d002      	beq.n	d760e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7608:	f100 0508 	add.w	r5, r0, #8
   d760c:	e018      	b.n	d7640 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d760e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7610:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7612:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7616:	232f      	movs	r3, #47	; 0x2f
   d7618:	462a      	mov	r2, r5
   d761a:	200a      	movs	r0, #10
   d761c:	f7fe fcf6 	bl	d600c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7620:	4628      	mov	r0, r5
   d7622:	f003 fbcc 	bl	dadbe <strlen>
   d7626:	6833      	ldr	r3, [r6, #0]
   d7628:	4602      	mov	r2, r0
   d762a:	68db      	ldr	r3, [r3, #12]
   d762c:	4629      	mov	r1, r5
   d762e:	4630      	mov	r0, r6
   d7630:	4798      	blx	r3
   d7632:	e00f      	b.n	d7654 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7634:	b124      	cbz	r4, d7640 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7636:	212e      	movs	r1, #46	; 0x2e
   d7638:	4630      	mov	r0, r6
   d763a:	f7ff fa73 	bl	d6b24 <_ZN5Print5printEc>
   d763e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7640:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7644:	220a      	movs	r2, #10
   d7646:	4630      	mov	r0, r6
   d7648:	f7ff fa87 	bl	d6b5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d764c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d764e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7650:	d1f0      	bne.n	d7634 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7652:	4620      	mov	r0, r4
    }
    return n;
}
   d7654:	b00d      	add	sp, #52	; 0x34
   d7656:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7658 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7658:	b510      	push	{r4, lr}
   d765a:	4b05      	ldr	r3, [pc, #20]	; (d7670 <_ZN9IPAddressC1Ev+0x18>)
   d765c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d765e:	2211      	movs	r2, #17
   d7660:	f840 3b04 	str.w	r3, [r0], #4
   d7664:	2100      	movs	r1, #0
   d7666:	f003 fb4d 	bl	dad04 <memset>
{
    clear();
}
   d766a:	4620      	mov	r0, r4
   d766c:	bd10      	pop	{r4, pc}
   d766e:	bf00      	nop
   d7670:	000dbe24 	.word	0x000dbe24

000d7674 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7674:	4603      	mov	r3, r0
   d7676:	4a07      	ldr	r2, [pc, #28]	; (d7694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7678:	b510      	push	{r4, lr}
   d767a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d767e:	f101 0210 	add.w	r2, r1, #16
   d7682:	f851 4b04 	ldr.w	r4, [r1], #4
   d7686:	f843 4b04 	str.w	r4, [r3], #4
   d768a:	4291      	cmp	r1, r2
   d768c:	d1f9      	bne.n	d7682 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d768e:	780a      	ldrb	r2, [r1, #0]
   d7690:	701a      	strb	r2, [r3, #0]
}
   d7692:	bd10      	pop	{r4, pc}
   d7694:	000dbe24 	.word	0x000dbe24

000d7698 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7698:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d769a:	2b04      	cmp	r3, #4
   d769c:	d101      	bne.n	d76a2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d769e:	6840      	ldr	r0, [r0, #4]
   d76a0:	e008      	b.n	d76b4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d76a2:	2b06      	cmp	r3, #6
   d76a4:	d10a      	bne.n	d76bc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d76a6:	6843      	ldr	r3, [r0, #4]
   d76a8:	b953      	cbnz	r3, d76c0 <_ZNK9IPAddresscvbEv+0x28>
   d76aa:	6883      	ldr	r3, [r0, #8]
   d76ac:	b943      	cbnz	r3, d76c0 <_ZNK9IPAddresscvbEv+0x28>
   d76ae:	68c3      	ldr	r3, [r0, #12]
   d76b0:	b933      	cbnz	r3, d76c0 <_ZNK9IPAddresscvbEv+0x28>
   d76b2:	6900      	ldr	r0, [r0, #16]
   d76b4:	3000      	adds	r0, #0
   d76b6:	bf18      	it	ne
   d76b8:	2001      	movne	r0, #1
   d76ba:	4770      	bx	lr
    } else {
        return false;
   d76bc:	2000      	movs	r0, #0
   d76be:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d76c0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d76c2:	4770      	bx	lr

000d76c4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d76c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d76c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d76ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d76ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d76d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d76d6:	2304      	movs	r3, #4
   d76d8:	6041      	str	r1, [r0, #4]
   d76da:	7503      	strb	r3, [r0, #20]
   d76dc:	bd10      	pop	{r4, pc}

000d76de <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d76de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d76e0:	780d      	ldrb	r5, [r1, #0]
   d76e2:	788b      	ldrb	r3, [r1, #2]
   d76e4:	784a      	ldrb	r2, [r1, #1]
   d76e6:	78c9      	ldrb	r1, [r1, #3]
   d76e8:	9100      	str	r1, [sp, #0]
   d76ea:	4629      	mov	r1, r5
   d76ec:	f7ff ffea 	bl	d76c4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d76f0:	b003      	add	sp, #12
   d76f2:	bd30      	pop	{r4, r5, pc}

000d76f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76f4:	7441      	strb	r1, [r0, #17]
   d76f6:	4770      	bx	lr

000d76f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d76f8:	4770      	bx	lr

000d76fa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d76fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d76fc:	2100      	movs	r1, #0
   d76fe:	7c00      	ldrb	r0, [r0, #16]
   d7700:	f7fe fd84 	bl	d620c <HAL_USB_USART_Receive_Data>
}
   d7704:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7708:	bf28      	it	cs
   d770a:	f04f 30ff 	movcs.w	r0, #4294967295
   d770e:	bd08      	pop	{r3, pc}

000d7710 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7710:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7712:	2101      	movs	r1, #1
   d7714:	7c00      	ldrb	r0, [r0, #16]
   d7716:	f7fe fd79 	bl	d620c <HAL_USB_USART_Receive_Data>
}
   d771a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d771e:	bf28      	it	cs
   d7720:	f04f 30ff 	movcs.w	r0, #4294967295
   d7724:	bd08      	pop	{r3, pc}

000d7726 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7726:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7728:	7c00      	ldrb	r0, [r0, #16]
   d772a:	f7fe fd67 	bl	d61fc <HAL_USB_USART_Available_Data_For_Write>
}
   d772e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7732:	bd08      	pop	{r3, pc}

000d7734 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7734:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7736:	7c00      	ldrb	r0, [r0, #16]
   d7738:	f7fe fd58 	bl	d61ec <HAL_USB_USART_Available_Data>
}
   d773c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7740:	bd08      	pop	{r3, pc}

000d7742 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7742:	7c00      	ldrb	r0, [r0, #16]
   d7744:	f7fe bd72 	b.w	d622c <HAL_USB_USART_Flush_Data>

000d7748 <_ZN9USBSerialD0Ev>:
   d7748:	b510      	push	{r4, lr}
   d774a:	2114      	movs	r1, #20
   d774c:	4604      	mov	r4, r0
   d774e:	f000 feb5 	bl	d84bc <_ZdlPvj>
   d7752:	4620      	mov	r0, r4
   d7754:	bd10      	pop	{r4, pc}

000d7756 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7756:	b538      	push	{r3, r4, r5, lr}
   d7758:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d775a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d775c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d775e:	f7fe fd4d 	bl	d61fc <HAL_USB_USART_Available_Data_For_Write>
   d7762:	2800      	cmp	r0, #0
   d7764:	dc01      	bgt.n	d776a <_ZN9USBSerial5writeEh+0x14>
   d7766:	7c60      	ldrb	r0, [r4, #17]
   d7768:	b128      	cbz	r0, d7776 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d776a:	4629      	mov	r1, r5
   d776c:	7c20      	ldrb	r0, [r4, #16]
   d776e:	f7fe fd55 	bl	d621c <HAL_USB_USART_Send_Data>
   d7772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7776:	bd38      	pop	{r3, r4, r5, pc}

000d7778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7778:	b510      	push	{r4, lr}
   d777a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d777c:	2300      	movs	r3, #0
   d777e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7784:	60a3      	str	r3, [r4, #8]
   d7786:	4b05      	ldr	r3, [pc, #20]	; (d779c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7788:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d778a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d778c:	4608      	mov	r0, r1
{
  _serial = serial;
   d778e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7790:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7792:	4611      	mov	r1, r2
   d7794:	f7fe fd1a 	bl	d61cc <HAL_USB_USART_Init>
}
   d7798:	4620      	mov	r0, r4
   d779a:	bd10      	pop	{r4, pc}
   d779c:	000dbe38 	.word	0x000dbe38

000d77a0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d77a0:	2200      	movs	r2, #0
   d77a2:	7c00      	ldrb	r0, [r0, #16]
   d77a4:	f7fe bd1a 	b.w	d61dc <HAL_USB_USART_Begin>

000d77a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d77aa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d77ae:	2100      	movs	r1, #0
   d77b0:	f003 faa8 	bl	dad04 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d77b4:	4620      	mov	r0, r4
   d77b6:	bd10      	pop	{r4, pc}

000d77b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d77b8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77ba:	4d0e      	ldr	r5, [pc, #56]	; (d77f4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d77bc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d77be:	a801      	add	r0, sp, #4
   d77c0:	f7ff fff2 	bl	d77a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77c4:	6829      	ldr	r1, [r5, #0]
   d77c6:	f011 0401 	ands.w	r4, r1, #1
   d77ca:	d110      	bne.n	d77ee <_Z16_fetch_usbserialv+0x36>
   d77cc:	4628      	mov	r0, r5
   d77ce:	f7fc fc75 	bl	d40bc <__cxa_guard_acquire>
   d77d2:	b160      	cbz	r0, d77ee <_Z16_fetch_usbserialv+0x36>
   d77d4:	aa01      	add	r2, sp, #4
   d77d6:	4621      	mov	r1, r4
   d77d8:	4807      	ldr	r0, [pc, #28]	; (d77f8 <_Z16_fetch_usbserialv+0x40>)
   d77da:	f7ff ffcd 	bl	d7778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77de:	4628      	mov	r0, r5
   d77e0:	f7fc fc71 	bl	d40c6 <__cxa_guard_release>
   d77e4:	4a05      	ldr	r2, [pc, #20]	; (d77fc <_Z16_fetch_usbserialv+0x44>)
   d77e6:	4906      	ldr	r1, [pc, #24]	; (d7800 <_Z16_fetch_usbserialv+0x48>)
   d77e8:	4803      	ldr	r0, [pc, #12]	; (d77f8 <_Z16_fetch_usbserialv+0x40>)
   d77ea:	f000 fe59 	bl	d84a0 <__aeabi_atexit>
	return _usbserial;
}
   d77ee:	4802      	ldr	r0, [pc, #8]	; (d77f8 <_Z16_fetch_usbserialv+0x40>)
   d77f0:	b007      	add	sp, #28
   d77f2:	bd30      	pop	{r4, r5, pc}
   d77f4:	2003e3f0 	.word	0x2003e3f0
   d77f8:	2003e3f4 	.word	0x2003e3f4
   d77fc:	2003e178 	.word	0x2003e178
   d7800:	000d76f9 	.word	0x000d76f9

000d7804 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7804:	4770      	bx	lr

000d7806 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7806:	7441      	strb	r1, [r0, #17]
   d7808:	4770      	bx	lr

000d780a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d780a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d780c:	7c00      	ldrb	r0, [r0, #16]
   d780e:	f7fe fc4d 	bl	d60ac <HAL_USART_Available_Data_For_Write>
}
   d7812:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7816:	bd08      	pop	{r3, pc}

000d7818 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7818:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d781a:	7c00      	ldrb	r0, [r0, #16]
   d781c:	f7fe fc1e 	bl	d605c <HAL_USART_Available_Data>
}
   d7820:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7824:	bd08      	pop	{r3, pc}

000d7826 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7826:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7828:	7c00      	ldrb	r0, [r0, #16]
   d782a:	f7fe fc27 	bl	d607c <HAL_USART_Peek_Data>
}
   d782e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7832:	bf28      	it	cs
   d7834:	f04f 30ff 	movcs.w	r0, #4294967295
   d7838:	bd08      	pop	{r3, pc}

000d783a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d783a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d783c:	7c00      	ldrb	r0, [r0, #16]
   d783e:	f7fe fc15 	bl	d606c <HAL_USART_Read_Data>
}
   d7842:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7846:	bf28      	it	cs
   d7848:	f04f 30ff 	movcs.w	r0, #4294967295
   d784c:	bd08      	pop	{r3, pc}

000d784e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d784e:	7c00      	ldrb	r0, [r0, #16]
   d7850:	f7fe bc1c 	b.w	d608c <HAL_USART_Flush_Data>

000d7854 <_ZN11USARTSerialD0Ev>:
   d7854:	b510      	push	{r4, lr}
   d7856:	2114      	movs	r1, #20
   d7858:	4604      	mov	r4, r0
   d785a:	f000 fe2f 	bl	d84bc <_ZdlPvj>
   d785e:	4620      	mov	r0, r4
   d7860:	bd10      	pop	{r4, pc}

000d7862 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7862:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7864:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7866:	4604      	mov	r4, r0
   d7868:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d786a:	b925      	cbnz	r5, d7876 <_ZN11USARTSerial5writeEh+0x14>
   d786c:	7c00      	ldrb	r0, [r0, #16]
   d786e:	f7fe fc1d 	bl	d60ac <HAL_USART_Available_Data_For_Write>
   d7872:	2800      	cmp	r0, #0
   d7874:	dd05      	ble.n	d7882 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7876:	4631      	mov	r1, r6
   d7878:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d787a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d787e:	f7fe bbe5 	b.w	d604c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7882:	4628      	mov	r0, r5
   d7884:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7888:	b510      	push	{r4, lr}
   d788a:	4604      	mov	r4, r0
   d788c:	4608      	mov	r0, r1
   d788e:	4611      	mov	r1, r2
   d7890:	2200      	movs	r2, #0
   d7892:	6062      	str	r2, [r4, #4]
   d7894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7898:	60a2      	str	r2, [r4, #8]
   d789a:	4a05      	ldr	r2, [pc, #20]	; (d78b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d789c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d789e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d78a0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d78a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d78a4:	461a      	mov	r2, r3
   d78a6:	f7fe fbc9 	bl	d603c <HAL_USART_Init>
}
   d78aa:	4620      	mov	r0, r4
   d78ac:	bd10      	pop	{r4, pc}
   d78ae:	bf00      	nop
   d78b0:	000dbe68 	.word	0x000dbe68

000d78b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d78b4:	7c00      	ldrb	r0, [r0, #16]
   d78b6:	f7fe bbf1 	b.w	d609c <HAL_USART_Is_Enabled>
	...

000d78bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78be:	4d0c      	ldr	r5, [pc, #48]	; (d78f0 <_Z22__fetch_global_Serial1v+0x34>)
   d78c0:	6829      	ldr	r1, [r5, #0]
   d78c2:	f011 0401 	ands.w	r4, r1, #1
   d78c6:	d111      	bne.n	d78ec <_Z22__fetch_global_Serial1v+0x30>
   d78c8:	4628      	mov	r0, r5
   d78ca:	f7fc fbf7 	bl	d40bc <__cxa_guard_acquire>
   d78ce:	b168      	cbz	r0, d78ec <_Z22__fetch_global_Serial1v+0x30>
   d78d0:	4a08      	ldr	r2, [pc, #32]	; (d78f4 <_Z22__fetch_global_Serial1v+0x38>)
   d78d2:	4b09      	ldr	r3, [pc, #36]	; (d78f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d78d4:	4809      	ldr	r0, [pc, #36]	; (d78fc <_Z22__fetch_global_Serial1v+0x40>)
   d78d6:	4621      	mov	r1, r4
   d78d8:	f7ff ffd6 	bl	d7888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d78dc:	4628      	mov	r0, r5
   d78de:	f7fc fbf2 	bl	d40c6 <__cxa_guard_release>
   d78e2:	4a07      	ldr	r2, [pc, #28]	; (d7900 <_Z22__fetch_global_Serial1v+0x44>)
   d78e4:	4907      	ldr	r1, [pc, #28]	; (d7904 <_Z22__fetch_global_Serial1v+0x48>)
   d78e6:	4805      	ldr	r0, [pc, #20]	; (d78fc <_Z22__fetch_global_Serial1v+0x40>)
   d78e8:	f000 fdda 	bl	d84a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78ec:	4803      	ldr	r0, [pc, #12]	; (d78fc <_Z22__fetch_global_Serial1v+0x40>)
   d78ee:	bd38      	pop	{r3, r4, r5, pc}
   d78f0:	2003e4a0 	.word	0x2003e4a0
   d78f4:	2003e4a4 	.word	0x2003e4a4
   d78f8:	2003e41c 	.word	0x2003e41c
   d78fc:	2003e408 	.word	0x2003e408
   d7900:	2003e178 	.word	0x2003e178
   d7904:	000d7805 	.word	0x000d7805

000d7908 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7908:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d790a:	6883      	ldr	r3, [r0, #8]
   d790c:	4604      	mov	r4, r0
   d790e:	b90b      	cbnz	r3, d7914 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7910:	f000 fde7 	bl	d84e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7914:	68c3      	ldr	r3, [r0, #12]
   d7916:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7918:	68a3      	ldr	r3, [r4, #8]
   d791a:	b11b      	cbz	r3, d7924 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d791c:	2203      	movs	r2, #3
   d791e:	4621      	mov	r1, r4
   d7920:	4620      	mov	r0, r4
   d7922:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7924:	4620      	mov	r0, r4
   d7926:	2110      	movs	r1, #16
}
   d7928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d792c:	f000 bdc6 	b.w	d84bc <_ZdlPvj>

000d7930 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7930:	4770      	bx	lr

000d7932 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7934:	4606      	mov	r6, r0
   d7936:	4615      	mov	r5, r2
   d7938:	460c      	mov	r4, r1
   d793a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d793c:	42bc      	cmp	r4, r7
   d793e:	d006      	beq.n	d794e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7940:	6833      	ldr	r3, [r6, #0]
   d7942:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7946:	689b      	ldr	r3, [r3, #8]
   d7948:	4630      	mov	r0, r6
   d794a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d794c:	e7f6      	b.n	d793c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d794e:	4628      	mov	r0, r5
   d7950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7952 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7952:	2200      	movs	r2, #0
   d7954:	7c00      	ldrb	r0, [r0, #16]
   d7956:	f7fe bbc9 	b.w	d60ec <HAL_I2C_Write_Data>

000d795a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d795a:	2100      	movs	r1, #0
   d795c:	7c00      	ldrb	r0, [r0, #16]
   d795e:	f7fe bbcd 	b.w	d60fc <HAL_I2C_Available_Data>

000d7962 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7962:	2100      	movs	r1, #0
   d7964:	7c00      	ldrb	r0, [r0, #16]
   d7966:	f7fe bbd1 	b.w	d610c <HAL_I2C_Read_Data>

000d796a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d796a:	2100      	movs	r1, #0
   d796c:	7c00      	ldrb	r0, [r0, #16]
   d796e:	f7fe bbd5 	b.w	d611c <HAL_I2C_Peek_Data>

000d7972 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7972:	2100      	movs	r1, #0
   d7974:	7c00      	ldrb	r0, [r0, #16]
   d7976:	f7fe bbd9 	b.w	d612c <HAL_I2C_Flush_Data>

000d797a <_ZN7TwoWireD0Ev>:
   d797a:	b510      	push	{r4, lr}
   d797c:	2114      	movs	r1, #20
   d797e:	4604      	mov	r4, r0
   d7980:	f000 fd9c 	bl	d84bc <_ZdlPvj>
   d7984:	4620      	mov	r0, r4
   d7986:	bd10      	pop	{r4, pc}

000d7988 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7988:	b510      	push	{r4, lr}
   d798a:	4604      	mov	r4, r0
   d798c:	2300      	movs	r3, #0
   d798e:	6063      	str	r3, [r4, #4]
   d7990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7994:	60a3      	str	r3, [r4, #8]
   d7996:	4b04      	ldr	r3, [pc, #16]	; (d79a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7998:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d799a:	4608      	mov	r0, r1
   d799c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d799e:	4611      	mov	r1, r2
   d79a0:	f7fe fbd4 	bl	d614c <HAL_I2C_Init>
}
   d79a4:	4620      	mov	r0, r4
   d79a6:	bd10      	pop	{r4, pc}
   d79a8:	000dbe98 	.word	0x000dbe98

000d79ac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d79ac:	2300      	movs	r3, #0
   d79ae:	461a      	mov	r2, r3
   d79b0:	4619      	mov	r1, r3
   d79b2:	7c00      	ldrb	r0, [r0, #16]
   d79b4:	f7fe bb82 	b.w	d60bc <HAL_I2C_Begin>

000d79b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d79b8:	b570      	push	{r4, r5, r6, lr}
   d79ba:	460c      	mov	r4, r1
   d79bc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d79be:	2514      	movs	r5, #20
   d79c0:	4606      	mov	r6, r0
   d79c2:	462a      	mov	r2, r5
   d79c4:	2100      	movs	r1, #0
   d79c6:	a801      	add	r0, sp, #4
   d79c8:	f003 f99c 	bl	dad04 <memset>
   d79cc:	7823      	ldrb	r3, [r4, #0]
   d79ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d79d2:	6863      	ldr	r3, [r4, #4]
   d79d4:	9303      	str	r3, [sp, #12]
   d79d6:	68e3      	ldr	r3, [r4, #12]
   d79d8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d79da:	2200      	movs	r2, #0
   d79dc:	7a23      	ldrb	r3, [r4, #8]
   d79de:	7c30      	ldrb	r0, [r6, #16]
   d79e0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d79e4:	a901      	add	r1, sp, #4
   d79e6:	9305      	str	r3, [sp, #20]
   d79e8:	f7fe fbb8 	bl	d615c <HAL_I2C_Request_Data_Ex>
}
   d79ec:	b006      	add	sp, #24
   d79ee:	bd70      	pop	{r4, r5, r6, pc}

000d79f0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d79f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d79f2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d79f4:	f88d 1000 	strb.w	r1, [sp]
   d79f8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d79fc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d79fe:	bf18      	it	ne
   d7a00:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7a02:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7a04:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7a06:	f88d 3008 	strb.w	r3, [sp, #8]
   d7a0a:	f7ff ffd5 	bl	d79b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7a0e:	b005      	add	sp, #20
   d7a10:	f85d fb04 	ldr.w	pc, [sp], #4

000d7a14 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7a14:	2301      	movs	r3, #1
   d7a16:	f7ff bfeb 	b.w	d79f0 <_ZN7TwoWire11requestFromEhjh>

000d7a1a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7a1a:	2200      	movs	r2, #0
   d7a1c:	7c00      	ldrb	r0, [r0, #16]
   d7a1e:	f7fe bb55 	b.w	d60cc <HAL_I2C_Begin_Transmission>

000d7a22 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7a22:	2200      	movs	r2, #0
   d7a24:	7c00      	ldrb	r0, [r0, #16]
   d7a26:	f7fe bb59 	b.w	d60dc <HAL_I2C_End_Transmission>

000d7a2a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7a2a:	2101      	movs	r1, #1
   d7a2c:	f7ff bff9 	b.w	d7a22 <_ZN7TwoWire15endTransmissionEh>

000d7a30 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7a30:	2100      	movs	r1, #0
   d7a32:	7c00      	ldrb	r0, [r0, #16]
   d7a34:	f7fe bb82 	b.w	d613c <HAL_I2C_Is_Enabled>

000d7a38 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a38:	2200      	movs	r2, #0
   d7a3a:	4611      	mov	r1, r2
   d7a3c:	6840      	ldr	r0, [r0, #4]
   d7a3e:	f7fe bc89 	b.w	d6354 <network_listening>

000d7a42 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7a42:	2200      	movs	r2, #0
   d7a44:	4611      	mov	r1, r2
   d7a46:	6840      	ldr	r0, [r0, #4]
   d7a48:	f7fe bc94 	b.w	d6374 <network_get_listen_timeout>

000d7a4c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7a4c:	2200      	movs	r2, #0
   d7a4e:	6840      	ldr	r0, [r0, #4]
   d7a50:	f7fe bc88 	b.w	d6364 <network_set_listen_timeout>

000d7a54 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a54:	2200      	movs	r2, #0
   d7a56:	f081 0101 	eor.w	r1, r1, #1
   d7a5a:	6840      	ldr	r0, [r0, #4]
   d7a5c:	f7fe bc72 	b.w	d6344 <network_listen>

000d7a60 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7a60:	2300      	movs	r3, #0
   d7a62:	461a      	mov	r2, r3
   d7a64:	2101      	movs	r1, #1
   d7a66:	6840      	ldr	r0, [r0, #4]
   d7a68:	f7fe bc64 	b.w	d6334 <network_off>

000d7a6c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7a6c:	2300      	movs	r3, #0
   d7a6e:	461a      	mov	r2, r3
   d7a70:	4619      	mov	r1, r3
   d7a72:	6840      	ldr	r0, [r0, #4]
   d7a74:	f7fe bc56 	b.w	d6324 <network_on>

000d7a78 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7a78:	2200      	movs	r2, #0
   d7a7a:	4611      	mov	r1, r2
   d7a7c:	6840      	ldr	r0, [r0, #4]
   d7a7e:	f7fe bc49 	b.w	d6314 <network_ready>

000d7a82 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7a82:	2200      	movs	r2, #0
   d7a84:	4611      	mov	r1, r2
   d7a86:	6840      	ldr	r0, [r0, #4]
   d7a88:	f7fe bc34 	b.w	d62f4 <network_connecting>

000d7a8c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	2102      	movs	r1, #2
   d7a90:	6840      	ldr	r0, [r0, #4]
   d7a92:	f7fe bc37 	b.w	d6304 <network_disconnect>

000d7a96 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7a96:	2300      	movs	r3, #0
   d7a98:	461a      	mov	r2, r3
   d7a9a:	6840      	ldr	r0, [r0, #4]
   d7a9c:	f7fe bc22 	b.w	d62e4 <network_connect>

000d7aa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7aa0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7aa2:	4605      	mov	r5, r0
   d7aa4:	b188      	cbz	r0, d7aca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7aa6:	6804      	ldr	r4, [r0, #0]
   d7aa8:	b14c      	cbz	r4, d7abe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7aaa:	68a3      	ldr	r3, [r4, #8]
   d7aac:	b11b      	cbz	r3, d7ab6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7aae:	2203      	movs	r2, #3
   d7ab0:	4621      	mov	r1, r4
   d7ab2:	4620      	mov	r0, r4
   d7ab4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ab6:	2110      	movs	r1, #16
   d7ab8:	4620      	mov	r0, r4
   d7aba:	f000 fcff 	bl	d84bc <_ZdlPvj>
   d7abe:	4628      	mov	r0, r5
   d7ac0:	2114      	movs	r1, #20
      }
   d7ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ac6:	f000 bcf9 	b.w	d84bc <_ZdlPvj>
   d7aca:	bd38      	pop	{r3, r4, r5, pc}

000d7acc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7acc:	b110      	cbz	r0, d7ad4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7ace:	6803      	ldr	r3, [r0, #0]
   d7ad0:	685b      	ldr	r3, [r3, #4]
   d7ad2:	4718      	bx	r3
   d7ad4:	4770      	bx	lr

000d7ad6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7ad6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ad8:	6803      	ldr	r3, [r0, #0]
   d7ada:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7adc:	b1bb      	cbz	r3, d7b0e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7ade:	6858      	ldr	r0, [r3, #4]
   d7ae0:	f7fe fa6c 	bl	d5fbc <os_thread_is_current>
   d7ae4:	b978      	cbnz	r0, d7b06 <_ZN6ThreadD1Ev+0x30>
   d7ae6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7ae8:	7c5a      	ldrb	r2, [r3, #17]
   d7aea:	b912      	cbnz	r2, d7af2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7aec:	6858      	ldr	r0, [r3, #4]
   d7aee:	f7fe fa6d 	bl	d5fcc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7af2:	6823      	ldr	r3, [r4, #0]
   d7af4:	6858      	ldr	r0, [r3, #4]
   d7af6:	f7fe fa71 	bl	d5fdc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7afa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7afc:	2300      	movs	r3, #0
   d7afe:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7b00:	b128      	cbz	r0, d7b0e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7b02:	f7ff ffcd 	bl	d7aa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b06:	6820      	ldr	r0, [r4, #0]
   d7b08:	b108      	cbz	r0, d7b0e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7b0a:	f7ff ffc9 	bl	d7aa0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7b0e:	4620      	mov	r0, r4
   d7b10:	bd10      	pop	{r4, pc}

000d7b12 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7b12:	b538      	push	{r3, r4, r5, lr}
   d7b14:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b16:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7b1a:	b108      	cbz	r0, d7b20 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7b1c:	f7fc fac1 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b20:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7b24:	b108      	cbz	r0, d7b2a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7b26:	f7fe fa69 	bl	d5ffc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b2a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7b2e:	b135      	cbz	r5, d7b3e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b30:	4628      	mov	r0, r5
   d7b32:	f7ff ffd0 	bl	d7ad6 <_ZN6ThreadD1Ev>
   d7b36:	2104      	movs	r1, #4
   d7b38:	4628      	mov	r0, r5
   d7b3a:	f000 fcbf 	bl	d84bc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b3e:	6820      	ldr	r0, [r4, #0]
   d7b40:	b108      	cbz	r0, d7b46 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7b42:	f7ff ffc3 	bl	d7acc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7b46:	4620      	mov	r0, r4
   d7b48:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7b4c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7b4c:	b510      	push	{r4, lr}
   d7b4e:	4b04      	ldr	r3, [pc, #16]	; (d7b60 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7b50:	4604      	mov	r4, r0
   d7b52:	f840 3b08 	str.w	r3, [r0], #8
   d7b56:	f7ff ffdc 	bl	d7b12 <_ZN5spark11MeshPublishD1Ev>
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	bd10      	pop	{r4, pc}
   d7b5e:	bf00      	nop
   d7b60:	000dbec0 	.word	0x000dbec0

000d7b64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7b64:	b538      	push	{r3, r4, r5, lr}
   d7b66:	4c0e      	ldr	r4, [pc, #56]	; (d7ba0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7b68:	4b0e      	ldr	r3, [pc, #56]	; (d7ba4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7b6a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7b6c:	2500      	movs	r5, #0
   d7b6e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7b70:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7b74:	6063      	str	r3, [r4, #4]
   d7b76:	60a5      	str	r5, [r4, #8]
   d7b78:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b7c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7b80:	f7fe fa34 	bl	d5fec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7b84:	4b08      	ldr	r3, [pc, #32]	; (d7ba8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7b86:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7b8a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7b8e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7b90:	4620      	mov	r0, r4
   d7b92:	4a06      	ldr	r2, [pc, #24]	; (d7bac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7b94:	4906      	ldr	r1, [pc, #24]	; (d7bb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7b9a:	f000 bc81 	b.w	d84a0 <__aeabi_atexit>
   d7b9e:	bf00      	nop
   d7ba0:	2003e528 	.word	0x2003e528
   d7ba4:	000dbfa8 	.word	0x000dbfa8
   d7ba8:	000dbec0 	.word	0x000dbec0
   d7bac:	2003e178 	.word	0x2003e178
   d7bb0:	000d7b4d 	.word	0x000d7b4d

000d7bb4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bb6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bb8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7bba:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bbe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7bc0:	2201      	movs	r2, #1
   d7bc2:	f04f 33ff 	mov.w	r3, #4294967295
   d7bc6:	4621      	mov	r1, r4
   d7bc8:	47a8      	blx	r5
}
   d7bca:	b003      	add	sp, #12
   d7bcc:	bd30      	pop	{r4, r5, pc}

000d7bce <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7bce:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7bd0:	6803      	ldr	r3, [r0, #0]
   d7bd2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7bd4:	f04f 33ff 	mov.w	r3, #4294967295
   d7bd8:	46a4      	mov	ip, r4
}
   d7bda:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7bde:	4760      	bx	ip

000d7be0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7be2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7be4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7be6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7bea:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7bec:	4621      	mov	r1, r4
   d7bee:	4613      	mov	r3, r2
   d7bf0:	2201      	movs	r2, #1
   d7bf2:	47a8      	blx	r5
}
   d7bf4:	b003      	add	sp, #12
   d7bf6:	bd30      	pop	{r4, r5, pc}

000d7bf8 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7bf8:	4770      	bx	lr

000d7bfa <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7bfa:	b538      	push	{r3, r4, r5, lr}
   d7bfc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7bfe:	681a      	ldr	r2, [r3, #0]
   d7c00:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c02:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7c04:	da05      	bge.n	d7c12 <_ZN9TCPClient9connectedEv+0x18>
   d7c06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c0a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c0e:	429a      	cmp	r2, r3
   d7c10:	d001      	beq.n	d7c16 <_ZN9TCPClient9connectedEv+0x1c>
   d7c12:	2501      	movs	r5, #1
   d7c14:	e00b      	b.n	d7c2e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7c16:	6803      	ldr	r3, [r0, #0]
   d7c18:	691b      	ldr	r3, [r3, #16]
   d7c1a:	4798      	blx	r3
   d7c1c:	2800      	cmp	r0, #0
   d7c1e:	bf14      	ite	ne
   d7c20:	2501      	movne	r5, #1
   d7c22:	2500      	moveq	r5, #0
        if (!rv) {
   d7c24:	d103      	bne.n	d7c2e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7c26:	6823      	ldr	r3, [r4, #0]
   d7c28:	4620      	mov	r0, r4
   d7c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c2c:	4798      	blx	r3
        }
    }
    return rv;
}
   d7c2e:	4628      	mov	r0, r5
   d7c30:	bd38      	pop	{r3, r4, r5, pc}

000d7c32 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7c32:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7c34:	6818      	ldr	r0, [r3, #0]
}
   d7c36:	43c0      	mvns	r0, r0
   d7c38:	0fc0      	lsrs	r0, r0, #31
   d7c3a:	4770      	bx	lr

000d7c3c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c3c:	4770      	bx	lr

000d7c3e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7c3e:	2000      	movs	r0, #0
   d7c40:	4770      	bx	lr

000d7c42 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c42:	b510      	push	{r4, lr}
   d7c44:	2114      	movs	r1, #20
   d7c46:	4604      	mov	r4, r0
   d7c48:	f000 fc38 	bl	d84bc <_ZdlPvj>
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	bd10      	pop	{r4, pc}

000d7c50 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7c50:	f7fc ba25 	b.w	d409e <_ZdlPv>

000d7c54 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7c56:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7c58:	2200      	movs	r2, #0
   d7c5a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7c5c:	9202      	str	r2, [sp, #8]
   d7c5e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c60:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7c62:	4604      	mov	r4, r0
   d7c64:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c66:	d008      	beq.n	d7c7a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c6c:	fbb3 f1f2 	udiv	r1, r3, r2
   d7c70:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7c72:	fb02 3111 	mls	r1, r2, r1, r3
   d7c76:	434a      	muls	r2, r1
   d7c78:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7c7a:	6960      	ldr	r0, [r4, #20]
   d7c7c:	2308      	movs	r3, #8
   d7c7e:	9300      	str	r3, [sp, #0]
   d7c80:	f241 0205 	movw	r2, #4101	; 0x1005
   d7c84:	446b      	add	r3, sp
   d7c86:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c8a:	6800      	ldr	r0, [r0, #0]
   d7c8c:	f7fe fa6e 	bl	d616c <sock_setsockopt>
    if (ret < 0) {
   d7c90:	2800      	cmp	r0, #0
   d7c92:	db08      	blt.n	d7ca6 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7c94:	6960      	ldr	r0, [r4, #20]
   d7c96:	2300      	movs	r3, #0
   d7c98:	4632      	mov	r2, r6
   d7c9a:	4629      	mov	r1, r5
   d7c9c:	6800      	ldr	r0, [r0, #0]
   d7c9e:	f7fe fa85 	bl	d61ac <sock_send>
    if (ret < 0) {
   d7ca2:	2800      	cmp	r0, #0
   d7ca4:	da04      	bge.n	d7cb0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7ca6:	f7fe fbed 	bl	d6484 <__errno>
   d7caa:	6803      	ldr	r3, [r0, #0]
   d7cac:	6063      	str	r3, [r4, #4]
   d7cae:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7cb0:	b004      	add	sp, #16
   d7cb2:	bd70      	pop	{r4, r5, r6, pc}

000d7cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7cb4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7cb6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7cb8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7cba:	689b      	ldr	r3, [r3, #8]
   d7cbc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7cbe:	68a3      	ldr	r3, [r4, #8]
   d7cc0:	3b01      	subs	r3, #1
   d7cc2:	60a3      	str	r3, [r4, #8]
   d7cc4:	b92b      	cbnz	r3, d7cd2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7cc6:	6823      	ldr	r3, [r4, #0]
   d7cc8:	4620      	mov	r0, r4
   d7cca:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7cd0:	4718      	bx	r3
   d7cd2:	bd10      	pop	{r4, pc}

000d7cd4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7cd4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7cd6:	4604      	mov	r4, r0
   d7cd8:	694d      	ldr	r5, [r1, #20]
   d7cda:	4b05      	ldr	r3, [pc, #20]	; (d7cf0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7cdc:	f844 3b04 	str.w	r3, [r4], #4
   d7ce0:	358c      	adds	r5, #140	; 0x8c
   d7ce2:	4606      	mov	r6, r0
   d7ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ce8:	682b      	ldr	r3, [r5, #0]
   d7cea:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7cec:	4630      	mov	r0, r6
   d7cee:	bd70      	pop	{r4, r5, r6, pc}
   d7cf0:	000dbe24 	.word	0x000dbe24

000d7cf4 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7cf4:	b510      	push	{r4, lr}
   d7cf6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7cf8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7cfc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d00:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7d02:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d04:	d005      	beq.n	d7d12 <_ZN9TCPClient4peekEv+0x1e>
   d7d06:	6962      	ldr	r2, [r4, #20]
   d7d08:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d0c:	4413      	add	r3, r2
   d7d0e:	7918      	ldrb	r0, [r3, #4]
   d7d10:	bd10      	pop	{r4, pc}
   d7d12:	6803      	ldr	r3, [r0, #0]
   d7d14:	691b      	ldr	r3, [r3, #16]
   d7d16:	4798      	blx	r3
   d7d18:	2800      	cmp	r0, #0
   d7d1a:	d1f4      	bne.n	d7d06 <_ZN9TCPClient4peekEv+0x12>
   d7d1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7d20:	bd10      	pop	{r4, pc}

000d7d22 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7d22:	b510      	push	{r4, lr}
   d7d24:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d26:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d2a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d2e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7d30:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d32:	d008      	beq.n	d7d46 <_ZN9TCPClient4readEv+0x24>
   d7d34:	6962      	ldr	r2, [r4, #20]
   d7d36:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d3a:	1c59      	adds	r1, r3, #1
   d7d3c:	4413      	add	r3, r2
   d7d3e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7d42:	7918      	ldrb	r0, [r3, #4]
   d7d44:	bd10      	pop	{r4, pc}
   d7d46:	6803      	ldr	r3, [r0, #0]
   d7d48:	691b      	ldr	r3, [r3, #16]
   d7d4a:	4798      	blx	r3
   d7d4c:	2800      	cmp	r0, #0
   d7d4e:	d1f1      	bne.n	d7d34 <_ZN9TCPClient4readEv+0x12>
   d7d50:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7d54:	bd10      	pop	{r4, pc}

000d7d56 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d58:	6943      	ldr	r3, [r0, #20]
   d7d5a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7d5c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d60:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d64:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d66:	4605      	mov	r5, r0
   d7d68:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7d6a:	d106      	bne.n	d7d7a <_ZN9TCPClient4readEPhj+0x24>
   d7d6c:	6803      	ldr	r3, [r0, #0]
   d7d6e:	691b      	ldr	r3, [r3, #16]
   d7d70:	4798      	blx	r3
   d7d72:	b910      	cbnz	r0, d7d7a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7d74:	f04f 34ff 	mov.w	r4, #4294967295
   d7d78:	e014      	b.n	d7da4 <_ZN9TCPClient4readEPhj+0x4e>
   d7d7a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7d7c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7d80:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7d84:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7d86:	42bc      	cmp	r4, r7
   d7d88:	bf28      	it	cs
   d7d8a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7d8c:	4419      	add	r1, r3
   d7d8e:	4622      	mov	r2, r4
   d7d90:	3104      	adds	r1, #4
   d7d92:	4630      	mov	r0, r6
   d7d94:	f002 ff90 	bl	dacb8 <memcpy>
   d7d98:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7d9a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d9e:	4423      	add	r3, r4
   d7da0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7da4:	4620      	mov	r0, r4
   d7da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7da8 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7dac:	4698      	mov	r8, r3
    stop();
   d7dae:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7db0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7db4:	460d      	mov	r5, r1
   d7db6:	4606      	mov	r6, r0
   d7db8:	4617      	mov	r7, r2
    stop();
   d7dba:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7dbc:	ab12      	add	r3, sp, #72	; 0x48
   d7dbe:	2400      	movs	r4, #0
   d7dc0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7dc4:	4622      	mov	r2, r4
   d7dc6:	4621      	mov	r1, r4
   d7dc8:	4628      	mov	r0, r5
   d7dca:	f7fe f83f 	bl	d5e4c <netdb_getaddrinfo>
   d7dce:	4681      	mov	r9, r0
   d7dd0:	2800      	cmp	r0, #0
   d7dd2:	d13d      	bne.n	d7e50 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7dd4:	9b00      	ldr	r3, [sp, #0]
   d7dd6:	2b00      	cmp	r3, #0
   d7dd8:	d056      	beq.n	d7e88 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7dda:	695b      	ldr	r3, [r3, #20]
   d7ddc:	2b00      	cmp	r3, #0
   d7dde:	d053      	beq.n	d7e88 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7de0:	a806      	add	r0, sp, #24
   d7de2:	f7ff fc39 	bl	d7658 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7de6:	9b00      	ldr	r3, [sp, #0]
   d7de8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7dea:	7863      	ldrb	r3, [r4, #1]
   d7dec:	2b02      	cmp	r3, #2
   d7dee:	d101      	bne.n	d7df4 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7df0:	1d21      	adds	r1, r4, #4
   d7df2:	e013      	b.n	d7e1c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7df4:	2b0a      	cmp	r3, #10
   d7df6:	d114      	bne.n	d7e22 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7df8:	2211      	movs	r2, #17
   d7dfa:	4649      	mov	r1, r9
   d7dfc:	a801      	add	r0, sp, #4
   d7dfe:	f002 ff81 	bl	dad04 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7e02:	68a3      	ldr	r3, [r4, #8]
   d7e04:	bb33      	cbnz	r3, d7e54 <_ZN9TCPClient7connectEPKctm+0xac>
   d7e06:	68e3      	ldr	r3, [r4, #12]
   d7e08:	bb23      	cbnz	r3, d7e54 <_ZN9TCPClient7connectEPKctm+0xac>
   d7e0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7e0e:	6925      	ldr	r5, [r4, #16]
   d7e10:	f7fe f904 	bl	d601c <inet_htonl>
   d7e14:	4285      	cmp	r5, r0
   d7e16:	d11d      	bne.n	d7e54 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7e18:	f104 0114 	add.w	r1, r4, #20
   d7e1c:	a806      	add	r0, sp, #24
   d7e1e:	f7ff fc5e 	bl	d76de <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7e22:	a806      	add	r0, sp, #24
   d7e24:	f7ff fc38 	bl	d7698 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7e28:	2800      	cmp	r0, #0
   d7e2a:	d02d      	beq.n	d7e88 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7e2c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7e2e:	ad07      	add	r5, sp, #28
   d7e30:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7e34:	4b18      	ldr	r3, [pc, #96]	; (d7e98 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7e36:	930c      	str	r3, [sp, #48]	; 0x30
   d7e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e3a:	ac0d      	add	r4, sp, #52	; 0x34
   d7e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e3e:	682b      	ldr	r3, [r5, #0]
   d7e40:	7023      	strb	r3, [r4, #0]
   d7e42:	463a      	mov	r2, r7
   d7e44:	4643      	mov	r3, r8
   d7e46:	a90c      	add	r1, sp, #48	; 0x30
   d7e48:	4630      	mov	r0, r6
   d7e4a:	47c8      	blx	r9
   d7e4c:	4681      	mov	r9, r0
   d7e4e:	e01b      	b.n	d7e88 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7e50:	46a1      	mov	r9, r4
   d7e52:	e019      	b.n	d7e88 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e54:	f104 0308 	add.w	r3, r4, #8
   d7e58:	ad01      	add	r5, sp, #4
   d7e5a:	3418      	adds	r4, #24
   d7e5c:	6818      	ldr	r0, [r3, #0]
   d7e5e:	6859      	ldr	r1, [r3, #4]
   d7e60:	462a      	mov	r2, r5
   d7e62:	c203      	stmia	r2!, {r0, r1}
   d7e64:	3308      	adds	r3, #8
   d7e66:	42a3      	cmp	r3, r4
   d7e68:	4615      	mov	r5, r2
   d7e6a:	d1f7      	bne.n	d7e5c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7e6c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7e6e:	a901      	add	r1, sp, #4
   d7e70:	a80c      	add	r0, sp, #48	; 0x30
   d7e72:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7e74:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7e78:	f7ff fbfc 	bl	d7674 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e7e:	ac07      	add	r4, sp, #28
   d7e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e82:	682b      	ldr	r3, [r5, #0]
   d7e84:	7023      	strb	r3, [r4, #0]
   d7e86:	e7cc      	b.n	d7e22 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7e88:	9800      	ldr	r0, [sp, #0]
   d7e8a:	f7fd ffd7 	bl	d5e3c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7e8e:	4648      	mov	r0, r9
   d7e90:	b013      	add	sp, #76	; 0x4c
   d7e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7e96:	bf00      	nop
   d7e98:	000dbe24 	.word	0x000dbe24

000d7e9c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7e9c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7e9e:	2300      	movs	r3, #0
   d7ea0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7ea4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7ea6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7eaa:	4770      	bx	lr

000d7eac <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7eb0:	461e      	mov	r6, r3
    stop();
   d7eb2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7eb4:	460c      	mov	r4, r1
   d7eb6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7eba:	4605      	mov	r5, r0
   d7ebc:	4617      	mov	r7, r2
    stop();
   d7ebe:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7ec0:	7d23      	ldrb	r3, [r4, #20]
   d7ec2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7ec6:	2b04      	cmp	r3, #4
   d7ec8:	bf0c      	ite	eq
   d7eca:	2002      	moveq	r0, #2
   d7ecc:	200a      	movne	r0, #10
   d7ece:	2206      	movs	r2, #6
   d7ed0:	2101      	movs	r1, #1
   d7ed2:	f7fe f973 	bl	d61bc <sock_socket>
   d7ed6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7eda:	696b      	ldr	r3, [r5, #20]
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	2b00      	cmp	r3, #0
   d7ee0:	db18      	blt.n	d7f14 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7ee2:	4628      	mov	r0, r5
   d7ee4:	f7ff ffda 	bl	d7e9c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7ee8:	b1d6      	cbz	r6, d7f20 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7eea:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7eec:	a903      	add	r1, sp, #12
   d7eee:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7ef0:	9303      	str	r3, [sp, #12]
   d7ef2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7ef6:	f7fe f831 	bl	d5f5c <if_index_to_name>
   d7efa:	b958      	cbnz	r0, d7f14 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7efc:	6968      	ldr	r0, [r5, #20]
   d7efe:	2306      	movs	r3, #6
   d7f00:	9300      	str	r3, [sp, #0]
   d7f02:	f241 020b 	movw	r2, #4107	; 0x100b
   d7f06:	ab03      	add	r3, sp, #12
   d7f08:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f0c:	6800      	ldr	r0, [r0, #0]
   d7f0e:	f7fe f92d 	bl	d616c <sock_setsockopt>
   d7f12:	b128      	cbz	r0, d7f20 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7f14:	682b      	ldr	r3, [r5, #0]
   d7f16:	4628      	mov	r0, r5
   d7f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7f1a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7f1c:	4798      	blx	r3
   d7f1e:	e03b      	b.n	d7f98 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7f20:	261c      	movs	r6, #28
   d7f22:	4632      	mov	r2, r6
   d7f24:	2100      	movs	r1, #0
   d7f26:	a803      	add	r0, sp, #12
   d7f28:	f002 feec 	bl	dad04 <memset>
    if (ip.version() == 4) {
   d7f2c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7f2e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7f32:	2b04      	cmp	r3, #4
   d7f34:	d10c      	bne.n	d7f50 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f36:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7f38:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f3a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7f3e:	f7fe f875 	bl	d602c <inet_htons>
   d7f42:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7f46:	6860      	ldr	r0, [r4, #4]
   d7f48:	f7fe f868 	bl	d601c <inet_htonl>
   d7f4c:	9004      	str	r0, [sp, #16]
   d7f4e:	e013      	b.n	d7f78 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f50:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7f52:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f54:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7f58:	f7fe f868 	bl	d602c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f5c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7f5e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f62:	1d23      	adds	r3, r4, #4
   d7f64:	f104 0714 	add.w	r7, r4, #20
   d7f68:	6818      	ldr	r0, [r3, #0]
   d7f6a:	6859      	ldr	r1, [r3, #4]
   d7f6c:	4632      	mov	r2, r6
   d7f6e:	c203      	stmia	r2!, {r0, r1}
   d7f70:	3308      	adds	r3, #8
   d7f72:	42bb      	cmp	r3, r7
   d7f74:	4616      	mov	r6, r2
   d7f76:	d1f7      	bne.n	d7f68 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7f78:	696b      	ldr	r3, [r5, #20]
   d7f7a:	221c      	movs	r2, #28
   d7f7c:	a903      	add	r1, sp, #12
   d7f7e:	6818      	ldr	r0, [r3, #0]
   d7f80:	f7fe f904 	bl	d618c <sock_connect>
   d7f84:	2800      	cmp	r0, #0
   d7f86:	d1c5      	bne.n	d7f14 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7f88:	3404      	adds	r4, #4
   d7f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f8c:	696d      	ldr	r5, [r5, #20]
   d7f8e:	358c      	adds	r5, #140	; 0x8c
   d7f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f92:	6823      	ldr	r3, [r4, #0]
   d7f94:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7f96:	2401      	movs	r4, #1
}
   d7f98:	4620      	mov	r0, r4
   d7f9a:	b00a      	add	sp, #40	; 0x28
   d7f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7fa0 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fa0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7fa2:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fa4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7fa6:	6818      	ldr	r0, [r3, #0]
   d7fa8:	2800      	cmp	r0, #0
   d7faa:	db01      	blt.n	d7fb0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7fac:	f7fe f8e6 	bl	d617c <sock_close>
   d7fb0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7fb2:	f04f 32ff 	mov.w	r2, #4294967295
   d7fb6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7fb8:	6960      	ldr	r0, [r4, #20]
   d7fba:	2211      	movs	r2, #17
   d7fbc:	2100      	movs	r1, #0
   d7fbe:	308c      	adds	r0, #140	; 0x8c
   d7fc0:	f002 fea0 	bl	dad04 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7fc4:	4620      	mov	r0, r4
}
   d7fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7fca:	f7ff bf67 	b.w	d7e9c <_ZN9TCPClient12flush_bufferEv>
	...

000d7fd0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7fd0:	b530      	push	{r4, r5, lr}
   d7fd2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7fd4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7fd8:	b08b      	sub	sp, #44	; 0x2c
   d7fda:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7fdc:	b11b      	cbz	r3, d7fe6 <_ZN9TCPClient9availableEv+0x16>
   d7fde:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7fe2:	429a      	cmp	r2, r3
   d7fe4:	d040      	beq.n	d8068 <_ZN9TCPClient9availableEv+0x98>
   d7fe6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7fe8:	6818      	ldr	r0, [r3, #0]
   d7fea:	2800      	cmp	r0, #0
   d7fec:	db3f      	blt.n	d806e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7fee:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7ff2:	2d7f      	cmp	r5, #127	; 0x7f
   d7ff4:	d83b      	bhi.n	d806e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7ff6:	1d19      	adds	r1, r3, #4
   d7ff8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7ffc:	2308      	movs	r3, #8
   d7ffe:	4429      	add	r1, r5
   d8000:	f7fe f8cc 	bl	d619c <sock_recv>
            if (ret > 0) {
   d8004:	2800      	cmp	r0, #0
   d8006:	dd0c      	ble.n	d8022 <_ZN9TCPClient9availableEv+0x52>
   d8008:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d800a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d800e:	b90a      	cbnz	r2, d8014 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8010:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8014:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8016:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d801a:	4418      	add	r0, r3
   d801c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8020:	e025      	b.n	d806e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8022:	f7fe fa2f 	bl	d6484 <__errno>
   d8026:	6803      	ldr	r3, [r0, #0]
   d8028:	2b0b      	cmp	r3, #11
   d802a:	d020      	beq.n	d806e <_ZN9TCPClient9availableEv+0x9e>
   d802c:	f7fe fa2a 	bl	d6484 <__errno>
   d8030:	6803      	ldr	r3, [r0, #0]
   d8032:	2b0b      	cmp	r3, #11
   d8034:	d01b      	beq.n	d806e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8036:	2320      	movs	r3, #32
   d8038:	2500      	movs	r5, #0
   d803a:	9302      	str	r3, [sp, #8]
   d803c:	9503      	str	r5, [sp, #12]
   d803e:	f7fe fa21 	bl	d6484 <__errno>
   d8042:	6803      	ldr	r3, [r0, #0]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	4b0e      	ldr	r3, [pc, #56]	; (d8080 <_ZN9TCPClient9availableEv+0xb0>)
   d8048:	9300      	str	r3, [sp, #0]
   d804a:	aa02      	add	r2, sp, #8
   d804c:	462b      	mov	r3, r5
   d804e:	490d      	ldr	r1, [pc, #52]	; (d8084 <_ZN9TCPClient9availableEv+0xb4>)
   d8050:	2032      	movs	r0, #50	; 0x32
   d8052:	f7fe f8fb 	bl	d624c <log_message>
                    sock_close(d_->sock);
   d8056:	6963      	ldr	r3, [r4, #20]
   d8058:	6818      	ldr	r0, [r3, #0]
   d805a:	f7fe f88f 	bl	d617c <sock_close>
   d805e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8060:	f04f 32ff 	mov.w	r2, #4294967295
   d8064:	601a      	str	r2, [r3, #0]
   d8066:	e002      	b.n	d806e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8068:	f7ff ff18 	bl	d7e9c <_ZN9TCPClient12flush_bufferEv>
   d806c:	e7bb      	b.n	d7fe6 <_ZN9TCPClient9availableEv+0x16>
   d806e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8070:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8074:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8078:	1a18      	subs	r0, r3, r0
}
   d807a:	b00b      	add	sp, #44	; 0x2c
   d807c:	bd30      	pop	{r4, r5, pc}
   d807e:	bf00      	nop
   d8080:	000dbf5b 	.word	0x000dbf5b
   d8084:	000dbf54 	.word	0x000dbf54

000d8088 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8088:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d808a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d808c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d808e:	6001      	str	r1, [r0, #0]
   d8090:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8094:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8098:	3088      	adds	r0, #136	; 0x88
   d809a:	f7ff fadd 	bl	d7658 <_ZN9IPAddressC1Ev>
}
   d809e:	4620      	mov	r0, r4
   d80a0:	bd10      	pop	{r4, pc}
	...

000d80a4 <_ZN9TCPClientC1Ei>:
   d80a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80a8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d80aa:	2300      	movs	r3, #0
   d80ac:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d80ae:	4a14      	ldr	r2, [pc, #80]	; (d8100 <_ZN9TCPClientC1Ei+0x5c>)
   d80b0:	6043      	str	r3, [r0, #4]
   d80b2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d80b4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d80b6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80b8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80ba:	20a0      	movs	r0, #160	; 0xa0
   d80bc:	460e      	mov	r6, r1
   d80be:	f7fb ffec 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80c2:	4605      	mov	r5, r0
   d80c4:	b110      	cbz	r0, d80cc <_ZN9TCPClientC1Ei+0x28>
   d80c6:	4631      	mov	r1, r6
   d80c8:	f7ff ffde 	bl	d8088 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80cc:	2014      	movs	r0, #20
   d80ce:	f7fb ffe4 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d80d2:	4603      	mov	r3, r0
   d80d4:	b128      	cbz	r0, d80e2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d80d6:	2201      	movs	r2, #1
   d80d8:	6042      	str	r2, [r0, #4]
   d80da:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d80dc:	4a09      	ldr	r2, [pc, #36]	; (d8104 <_ZN9TCPClientC1Ei+0x60>)
   d80de:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d80e0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d80e2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d80e4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d80e6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d80e8:	b128      	cbz	r0, d80f6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d80ea:	6843      	ldr	r3, [r0, #4]
   d80ec:	3b01      	subs	r3, #1
   d80ee:	6043      	str	r3, [r0, #4]
   d80f0:	b90b      	cbnz	r3, d80f6 <_ZN9TCPClientC1Ei+0x52>
   d80f2:	f7ff fddf 	bl	d7cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d80f6:	4620      	mov	r0, r4
   d80f8:	f7ff fed0 	bl	d7e9c <_ZN9TCPClient12flush_bufferEv>
}
   d80fc:	4620      	mov	r0, r4
   d80fe:	bd70      	pop	{r4, r5, r6, pc}
   d8100:	000dbf10 	.word	0x000dbf10
   d8104:	000dbef4 	.word	0x000dbef4

000d8108 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8108:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d810a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d810e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8110:	f7ff ffc8 	bl	d80a4 <_ZN9TCPClientC1Ei>
}
   d8114:	4620      	mov	r0, r4
   d8116:	bd10      	pop	{r4, pc}

000d8118 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8118:	b510      	push	{r4, lr}
   d811a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d811c:	6800      	ldr	r0, [r0, #0]
   d811e:	2800      	cmp	r0, #0
   d8120:	db01      	blt.n	d8126 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8122:	f7fe f82b 	bl	d617c <sock_close>
    }
}
   d8126:	4620      	mov	r0, r4
   d8128:	bd10      	pop	{r4, pc}

000d812a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d812a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d812c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d812e:	4620      	mov	r0, r4
   d8130:	f7ff fff2 	bl	d8118 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8134:	b124      	cbz	r4, d8140 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8136:	4620      	mov	r0, r4
   d8138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d813c:	f7fb bfaf 	b.w	d409e <_ZdlPv>
   d8140:	bd10      	pop	{r4, pc}

000d8142 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8142:	2200      	movs	r2, #0
   d8144:	4611      	mov	r1, r2
   d8146:	6840      	ldr	r0, [r0, #4]
   d8148:	f7fe b8e4 	b.w	d6314 <network_ready>

000d814c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d814c:	2200      	movs	r2, #0
   d814e:	4611      	mov	r1, r2
   d8150:	6840      	ldr	r0, [r0, #4]
   d8152:	f7fe b8ff 	b.w	d6354 <network_listening>

000d8156 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8156:	2200      	movs	r2, #0
   d8158:	4611      	mov	r1, r2
   d815a:	6840      	ldr	r0, [r0, #4]
   d815c:	f7fe b90a 	b.w	d6374 <network_get_listen_timeout>

000d8160 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8160:	2200      	movs	r2, #0
   d8162:	6840      	ldr	r0, [r0, #4]
   d8164:	f7fe b8fe 	b.w	d6364 <network_set_listen_timeout>

000d8168 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8168:	2200      	movs	r2, #0
   d816a:	f081 0101 	eor.w	r1, r1, #1
   d816e:	6840      	ldr	r0, [r0, #4]
   d8170:	f7fe b8e8 	b.w	d6344 <network_listen>

000d8174 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8174:	2300      	movs	r3, #0
   d8176:	461a      	mov	r2, r3
   d8178:	4619      	mov	r1, r3
   d817a:	6840      	ldr	r0, [r0, #4]
   d817c:	f7fe b8da 	b.w	d6334 <network_off>

000d8180 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8180:	2300      	movs	r3, #0
   d8182:	461a      	mov	r2, r3
   d8184:	4619      	mov	r1, r3
   d8186:	6840      	ldr	r0, [r0, #4]
   d8188:	f7fe b8cc 	b.w	d6324 <network_on>

000d818c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d818c:	2200      	movs	r2, #0
   d818e:	4611      	mov	r1, r2
   d8190:	6840      	ldr	r0, [r0, #4]
   d8192:	f7fe b8af 	b.w	d62f4 <network_connecting>

000d8196 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8196:	2200      	movs	r2, #0
   d8198:	2102      	movs	r1, #2
   d819a:	6840      	ldr	r0, [r0, #4]
   d819c:	f7fe b8b2 	b.w	d6304 <network_disconnect>

000d81a0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81a0:	2300      	movs	r3, #0
   d81a2:	461a      	mov	r2, r3
   d81a4:	6840      	ldr	r0, [r0, #4]
   d81a6:	f7fe b89d 	b.w	d62e4 <network_connect>
	...

000d81ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d81ac:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d81ae:	2204      	movs	r2, #4
   d81b0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d81b2:	4a02      	ldr	r2, [pc, #8]	; (d81bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d81b4:	601a      	str	r2, [r3, #0]
   d81b6:	4770      	bx	lr
   d81b8:	2003e6fc 	.word	0x2003e6fc
   d81bc:	000dbf74 	.word	0x000dbf74

000d81c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d81c0:	2300      	movs	r3, #0
   d81c2:	461a      	mov	r2, r3
   d81c4:	6840      	ldr	r0, [r0, #4]
   d81c6:	f7fe b88d 	b.w	d62e4 <network_connect>

000d81ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d81ca:	2200      	movs	r2, #0
   d81cc:	2102      	movs	r1, #2
   d81ce:	6840      	ldr	r0, [r0, #4]
   d81d0:	f7fe b898 	b.w	d6304 <network_disconnect>

000d81d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d81d4:	2200      	movs	r2, #0
   d81d6:	4611      	mov	r1, r2
   d81d8:	6840      	ldr	r0, [r0, #4]
   d81da:	f7fe b88b 	b.w	d62f4 <network_connecting>

000d81de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d81de:	2200      	movs	r2, #0
   d81e0:	4611      	mov	r1, r2
   d81e2:	6840      	ldr	r0, [r0, #4]
   d81e4:	f7fe b896 	b.w	d6314 <network_ready>

000d81e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d81e8:	2300      	movs	r3, #0
   d81ea:	461a      	mov	r2, r3
   d81ec:	4619      	mov	r1, r3
   d81ee:	6840      	ldr	r0, [r0, #4]
   d81f0:	f7fe b898 	b.w	d6324 <network_on>

000d81f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d81f4:	2300      	movs	r3, #0
   d81f6:	461a      	mov	r2, r3
   d81f8:	4619      	mov	r1, r3
   d81fa:	6840      	ldr	r0, [r0, #4]
   d81fc:	f7fe b89a 	b.w	d6334 <network_off>

000d8200 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8200:	2200      	movs	r2, #0
   d8202:	f081 0101 	eor.w	r1, r1, #1
   d8206:	6840      	ldr	r0, [r0, #4]
   d8208:	f7fe b89c 	b.w	d6344 <network_listen>

000d820c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d820c:	2200      	movs	r2, #0
   d820e:	6840      	ldr	r0, [r0, #4]
   d8210:	f7fe b8a8 	b.w	d6364 <network_set_listen_timeout>

000d8214 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8214:	2200      	movs	r2, #0
   d8216:	4611      	mov	r1, r2
   d8218:	6840      	ldr	r0, [r0, #4]
   d821a:	f7fe b8ab 	b.w	d6374 <network_get_listen_timeout>

000d821e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d821e:	2200      	movs	r2, #0
   d8220:	4611      	mov	r1, r2
   d8222:	6840      	ldr	r0, [r0, #4]
   d8224:	f7fe b896 	b.w	d6354 <network_listening>

000d8228 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d822c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d822e:	b095      	sub	sp, #84	; 0x54
   d8230:	4616      	mov	r6, r2
   d8232:	460d      	mov	r5, r1
   d8234:	4607      	mov	r7, r0
    IPAddress addr;
   d8236:	f7ff fa0f 	bl	d7658 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d823a:	4621      	mov	r1, r4
   d823c:	2220      	movs	r2, #32
   d823e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8240:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8242:	f002 fd5f 	bl	dad04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8246:	2340      	movs	r3, #64	; 0x40
   d8248:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d824a:	4621      	mov	r1, r4
   d824c:	466b      	mov	r3, sp
   d824e:	aa0c      	add	r2, sp, #48	; 0x30
   d8250:	4630      	mov	r0, r6
   d8252:	f7fd fdfb 	bl	d5e4c <netdb_getaddrinfo>
    if (!r) {
   d8256:	4604      	mov	r4, r0
   d8258:	2800      	cmp	r0, #0
   d825a:	d144      	bne.n	d82e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d825c:	4602      	mov	r2, r0
   d825e:	2101      	movs	r1, #1
   d8260:	6868      	ldr	r0, [r5, #4]
   d8262:	f7fe f857 	bl	d6314 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8266:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8268:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d826a:	4622      	mov	r2, r4
   d826c:	6868      	ldr	r0, [r5, #4]
   d826e:	f7fe f851 	bl	d6314 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8272:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8274:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8276:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8278:	2e00      	cmp	r6, #0
   d827a:	d034      	beq.n	d82e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d827c:	2900      	cmp	r1, #0
   d827e:	d132      	bne.n	d82e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8280:	6873      	ldr	r3, [r6, #4]
   d8282:	2b02      	cmp	r3, #2
   d8284:	d002      	beq.n	d828c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8286:	2b0a      	cmp	r3, #10
   d8288:	d009      	beq.n	d829e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d828a:	e02a      	b.n	d82e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d828c:	f1b8 0f00 	cmp.w	r8, #0
   d8290:	d027      	beq.n	d82e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8292:	6971      	ldr	r1, [r6, #20]
   d8294:	4638      	mov	r0, r7
   d8296:	3104      	adds	r1, #4
   d8298:	f7ff fa21 	bl	d76de <_ZN9IPAddressaSEPKh>
   d829c:	e020      	b.n	d82e0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d829e:	f1b9 0f00 	cmp.w	r9, #0
   d82a2:	d01e      	beq.n	d82e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d82a4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d82a6:	2211      	movs	r2, #17
   d82a8:	a801      	add	r0, sp, #4
   d82aa:	f002 fd2b 	bl	dad04 <memset>
                    a.v = 6;
   d82ae:	2306      	movs	r3, #6
   d82b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d82b4:	ad01      	add	r5, sp, #4
   d82b6:	f104 0308 	add.w	r3, r4, #8
   d82ba:	3418      	adds	r4, #24
   d82bc:	6818      	ldr	r0, [r3, #0]
   d82be:	6859      	ldr	r1, [r3, #4]
   d82c0:	462a      	mov	r2, r5
   d82c2:	c203      	stmia	r2!, {r0, r1}
   d82c4:	3308      	adds	r3, #8
   d82c6:	42a3      	cmp	r3, r4
   d82c8:	4615      	mov	r5, r2
   d82ca:	d1f7      	bne.n	d82bc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d82cc:	a901      	add	r1, sp, #4
   d82ce:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d82d0:	ad07      	add	r5, sp, #28
   d82d2:	f7ff f9cf 	bl	d7674 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d82d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d82d8:	1d3c      	adds	r4, r7, #4
   d82da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82dc:	682b      	ldr	r3, [r5, #0]
   d82de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d82e0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82e2:	69f6      	ldr	r6, [r6, #28]
   d82e4:	e7c8      	b.n	d8278 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d82e6:	9800      	ldr	r0, [sp, #0]
   d82e8:	f7fd fda8 	bl	d5e3c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d82ec:	4638      	mov	r0, r7
   d82ee:	b015      	add	sp, #84	; 0x54
   d82f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d82f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d82f4:	4b02      	ldr	r3, [pc, #8]	; (d8300 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d82f6:	4a03      	ldr	r2, [pc, #12]	; (d8304 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d82f8:	601a      	str	r2, [r3, #0]
   d82fa:	2200      	movs	r2, #0
   d82fc:	605a      	str	r2, [r3, #4]
   d82fe:	4770      	bx	lr
   d8300:	2003e704 	.word	0x2003e704
   d8304:	000dbfa8 	.word	0x000dbfa8

000d8308 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8308:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d830a:	4e18      	ldr	r6, [pc, #96]	; (d836c <pinAvailable+0x64>)
   d830c:	6831      	ldr	r1, [r6, #0]
   d830e:	f011 0501 	ands.w	r5, r1, #1
   d8312:	4604      	mov	r4, r0
   d8314:	d10a      	bne.n	d832c <pinAvailable+0x24>
   d8316:	4630      	mov	r0, r6
   d8318:	f7fb fed0 	bl	d40bc <__cxa_guard_acquire>
   d831c:	b130      	cbz	r0, d832c <pinAvailable+0x24>
   d831e:	4629      	mov	r1, r5
   d8320:	4813      	ldr	r0, [pc, #76]	; (d8370 <pinAvailable+0x68>)
   d8322:	f7fe f8fb 	bl	d651c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8326:	4630      	mov	r0, r6
   d8328:	f7fb fecd 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d832c:	4810      	ldr	r0, [pc, #64]	; (d8370 <pinAvailable+0x68>)
   d832e:	f7fe f99f 	bl	d6670 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8332:	b128      	cbz	r0, d8340 <pinAvailable+0x38>
   d8334:	f1a4 030b 	sub.w	r3, r4, #11
   d8338:	2b02      	cmp	r3, #2
   d833a:	d801      	bhi.n	d8340 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d833c:	2000      	movs	r0, #0
   d833e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8340:	f000 f888 	bl	d8454 <_Z19__fetch_global_Wirev>
   d8344:	f7ff fb74 	bl	d7a30 <_ZN7TwoWire9isEnabledEv>
   d8348:	b108      	cbz	r0, d834e <pinAvailable+0x46>
   d834a:	2c01      	cmp	r4, #1
   d834c:	d9f6      	bls.n	d833c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d834e:	f7ff fab5 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d8352:	f7ff faaf 	bl	d78b4 <_ZN11USARTSerial9isEnabledEv>
   d8356:	b118      	cbz	r0, d8360 <pinAvailable+0x58>
   d8358:	f1a4 0309 	sub.w	r3, r4, #9
   d835c:	2b01      	cmp	r3, #1
   d835e:	d9ed      	bls.n	d833c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8360:	2c23      	cmp	r4, #35	; 0x23
   d8362:	bf8c      	ite	hi
   d8364:	2000      	movhi	r0, #0
   d8366:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8368:	bd70      	pop	{r4, r5, r6, pc}
   d836a:	bf00      	nop
   d836c:	2003e3a4 	.word	0x2003e3a4
   d8370:	2003e3a8 	.word	0x2003e3a8

000d8374 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8374:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8376:	b538      	push	{r3, r4, r5, lr}
   d8378:	4604      	mov	r4, r0
   d837a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d837c:	d80a      	bhi.n	d8394 <pinMode+0x20>
   d837e:	29ff      	cmp	r1, #255	; 0xff
   d8380:	d008      	beq.n	d8394 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8382:	f7ff ffc1 	bl	d8308 <pinAvailable>
   d8386:	b128      	cbz	r0, d8394 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8388:	4629      	mov	r1, r5
   d838a:	4620      	mov	r0, r4
}
   d838c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8390:	f7fd bd74 	b.w	d5e7c <HAL_Pin_Mode>
   d8394:	bd38      	pop	{r3, r4, r5, pc}

000d8396 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8396:	b538      	push	{r3, r4, r5, lr}
   d8398:	4604      	mov	r4, r0
   d839a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d839c:	f7fd fd76 	bl	d5e8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d83a0:	28ff      	cmp	r0, #255	; 0xff
   d83a2:	d010      	beq.n	d83c6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d83a4:	2806      	cmp	r0, #6
   d83a6:	d804      	bhi.n	d83b2 <digitalWrite+0x1c>
   d83a8:	234d      	movs	r3, #77	; 0x4d
   d83aa:	fa23 f000 	lsr.w	r0, r3, r0
   d83ae:	07c3      	lsls	r3, r0, #31
   d83b0:	d409      	bmi.n	d83c6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d83b2:	4620      	mov	r0, r4
   d83b4:	f7ff ffa8 	bl	d8308 <pinAvailable>
   d83b8:	b128      	cbz	r0, d83c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d83ba:	4629      	mov	r1, r5
   d83bc:	4620      	mov	r0, r4
}
   d83be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d83c2:	f7fd bd6b 	b.w	d5e9c <HAL_GPIO_Write>
   d83c6:	bd38      	pop	{r3, r4, r5, pc}

000d83c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d83c8:	b510      	push	{r4, lr}
   d83ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d83cc:	f7fd fd5e 	bl	d5e8c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d83d0:	3804      	subs	r0, #4
   d83d2:	b2c0      	uxtb	r0, r0
   d83d4:	2801      	cmp	r0, #1
   d83d6:	d908      	bls.n	d83ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d83d8:	4620      	mov	r0, r4
   d83da:	f7ff ff95 	bl	d8308 <pinAvailable>
   d83de:	b120      	cbz	r0, d83ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d83e0:	4620      	mov	r0, r4
}
   d83e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d83e6:	f7fd bd61 	b.w	d5eac <HAL_GPIO_Read>
}
   d83ea:	2000      	movs	r0, #0
   d83ec:	bd10      	pop	{r4, pc}

000d83ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d83ee:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d83f0:	b510      	push	{r4, lr}
   d83f2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d83f4:	bf9c      	itt	ls
   d83f6:	340e      	addls	r4, #14
   d83f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d83fa:	4620      	mov	r0, r4
   d83fc:	f7ff ff84 	bl	d8308 <pinAvailable>
   d8400:	b150      	cbz	r0, d8418 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8402:	2103      	movs	r1, #3
   d8404:	4620      	mov	r0, r4
   d8406:	f7fd fd31 	bl	d5e6c <HAL_Validate_Pin_Function>
   d840a:	2803      	cmp	r0, #3
   d840c:	d104      	bne.n	d8418 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d840e:	4620      	mov	r0, r4
}
   d8410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8414:	f7fd bd52 	b.w	d5ebc <HAL_ADC_Read>
}
   d8418:	2000      	movs	r0, #0
   d841a:	bd10      	pop	{r4, pc}

000d841c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d841c:	f7fd bd56 	b.w	d5ecc <HAL_Pulse_In>

000d8420 <_Z17acquireWireBufferv>:
   d8420:	b570      	push	{r4, r5, r6, lr}
   d8422:	4604      	mov	r4, r0
   d8424:	2514      	movs	r5, #20
   d8426:	462a      	mov	r2, r5
   d8428:	4e09      	ldr	r6, [pc, #36]	; (d8450 <_Z17acquireWireBufferv+0x30>)
   d842a:	2100      	movs	r1, #0
   d842c:	f002 fc6a 	bl	dad04 <memset>
   d8430:	8025      	strh	r5, [r4, #0]
   d8432:	2520      	movs	r5, #32
   d8434:	4631      	mov	r1, r6
   d8436:	60a5      	str	r5, [r4, #8]
   d8438:	6125      	str	r5, [r4, #16]
   d843a:	4628      	mov	r0, r5
   d843c:	f000 f840 	bl	d84c0 <_ZnajRKSt9nothrow_t>
   d8440:	4631      	mov	r1, r6
   d8442:	6060      	str	r0, [r4, #4]
   d8444:	4628      	mov	r0, r5
   d8446:	f000 f83b 	bl	d84c0 <_ZnajRKSt9nothrow_t>
   d844a:	60e0      	str	r0, [r4, #12]
   d844c:	4620      	mov	r0, r4
   d844e:	bd70      	pop	{r4, r5, r6, pc}
   d8450:	000dbfd4 	.word	0x000dbfd4

000d8454 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8454:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8456:	4d0e      	ldr	r5, [pc, #56]	; (d8490 <_Z19__fetch_global_Wirev+0x3c>)
   d8458:	6829      	ldr	r1, [r5, #0]
   d845a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d845e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8460:	d113      	bne.n	d848a <_Z19__fetch_global_Wirev+0x36>
   d8462:	4628      	mov	r0, r5
   d8464:	f7fb fe2a 	bl	d40bc <__cxa_guard_acquire>
   d8468:	b178      	cbz	r0, d848a <_Z19__fetch_global_Wirev+0x36>
   d846a:	a801      	add	r0, sp, #4
   d846c:	f7ff ffd8 	bl	d8420 <_Z17acquireWireBufferv>
   d8470:	aa01      	add	r2, sp, #4
   d8472:	4621      	mov	r1, r4
   d8474:	4807      	ldr	r0, [pc, #28]	; (d8494 <_Z19__fetch_global_Wirev+0x40>)
   d8476:	f7ff fa87 	bl	d7988 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d847a:	4628      	mov	r0, r5
   d847c:	f7fb fe23 	bl	d40c6 <__cxa_guard_release>
   d8480:	4a05      	ldr	r2, [pc, #20]	; (d8498 <_Z19__fetch_global_Wirev+0x44>)
   d8482:	4906      	ldr	r1, [pc, #24]	; (d849c <_Z19__fetch_global_Wirev+0x48>)
   d8484:	4803      	ldr	r0, [pc, #12]	; (d8494 <_Z19__fetch_global_Wirev+0x40>)
   d8486:	f000 f80b 	bl	d84a0 <__aeabi_atexit>
	return wire;
}
   d848a:	4802      	ldr	r0, [pc, #8]	; (d8494 <_Z19__fetch_global_Wirev+0x40>)
   d848c:	b007      	add	sp, #28
   d848e:	bd30      	pop	{r4, r5, pc}
   d8490:	2003e710 	.word	0x2003e710
   d8494:	2003e714 	.word	0x2003e714
   d8498:	2003e178 	.word	0x2003e178
   d849c:	000d7931 	.word	0x000d7931

000d84a0 <__aeabi_atexit>:
   d84a0:	460b      	mov	r3, r1
   d84a2:	4601      	mov	r1, r0
   d84a4:	4618      	mov	r0, r3
   d84a6:	f002 baed 	b.w	daa84 <__cxa_atexit>
	...

000d84ac <_ZSt15get_new_handlerv>:
   d84ac:	4b02      	ldr	r3, [pc, #8]	; (d84b8 <_ZSt15get_new_handlerv+0xc>)
   d84ae:	6818      	ldr	r0, [r3, #0]
   d84b0:	f3bf 8f5f 	dmb	sy
   d84b4:	4770      	bx	lr
   d84b6:	bf00      	nop
   d84b8:	2003e728 	.word	0x2003e728

000d84bc <_ZdlPvj>:
   d84bc:	f7fb bdef 	b.w	d409e <_ZdlPv>

000d84c0 <_ZnajRKSt9nothrow_t>:
   d84c0:	f000 b800 	b.w	d84c4 <_ZnwjRKSt9nothrow_t>

000d84c4 <_ZnwjRKSt9nothrow_t>:
   d84c4:	b510      	push	{r4, lr}
   d84c6:	2800      	cmp	r0, #0
   d84c8:	bf14      	ite	ne
   d84ca:	4604      	movne	r4, r0
   d84cc:	2401      	moveq	r4, #1
   d84ce:	4620      	mov	r0, r4
   d84d0:	f7fd ff90 	bl	d63f4 <malloc>
   d84d4:	b920      	cbnz	r0, d84e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d84d6:	f7ff ffe9 	bl	d84ac <_ZSt15get_new_handlerv>
   d84da:	b108      	cbz	r0, d84e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d84dc:	4780      	blx	r0
   d84de:	e7f6      	b.n	d84ce <_ZnwjRKSt9nothrow_t+0xa>
   d84e0:	bd10      	pop	{r4, pc}

000d84e2 <_ZSt25__throw_bad_function_callv>:
   d84e2:	b508      	push	{r3, lr}
   d84e4:	f7fd ffbe 	bl	d6464 <abort>

000d84e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d84e8:	4b18      	ldr	r3, [pc, #96]	; (d854c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d84ea:	681a      	ldr	r2, [r3, #0]
   d84ec:	07d1      	lsls	r1, r2, #31
   d84ee:	bf5c      	itt	pl
   d84f0:	2201      	movpl	r2, #1
   d84f2:	601a      	strpl	r2, [r3, #0]
   d84f4:	4b16      	ldr	r3, [pc, #88]	; (d8550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d84f6:	681a      	ldr	r2, [r3, #0]
   d84f8:	07d2      	lsls	r2, r2, #31
   d84fa:	bf5c      	itt	pl
   d84fc:	2201      	movpl	r2, #1
   d84fe:	601a      	strpl	r2, [r3, #0]
   d8500:	4b14      	ldr	r3, [pc, #80]	; (d8554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8502:	681a      	ldr	r2, [r3, #0]
   d8504:	07d0      	lsls	r0, r2, #31
   d8506:	bf5c      	itt	pl
   d8508:	2201      	movpl	r2, #1
   d850a:	601a      	strpl	r2, [r3, #0]
   d850c:	4b12      	ldr	r3, [pc, #72]	; (d8558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d850e:	681a      	ldr	r2, [r3, #0]
   d8510:	07d1      	lsls	r1, r2, #31
   d8512:	bf5c      	itt	pl
   d8514:	2201      	movpl	r2, #1
   d8516:	601a      	strpl	r2, [r3, #0]
   d8518:	4b10      	ldr	r3, [pc, #64]	; (d855c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d851a:	681a      	ldr	r2, [r3, #0]
   d851c:	07d2      	lsls	r2, r2, #31
   d851e:	bf5c      	itt	pl
   d8520:	2201      	movpl	r2, #1
   d8522:	601a      	strpl	r2, [r3, #0]
   d8524:	4b0e      	ldr	r3, [pc, #56]	; (d8560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8526:	681a      	ldr	r2, [r3, #0]
   d8528:	07d0      	lsls	r0, r2, #31
   d852a:	bf5c      	itt	pl
   d852c:	2201      	movpl	r2, #1
   d852e:	601a      	strpl	r2, [r3, #0]
   d8530:	4b0c      	ldr	r3, [pc, #48]	; (d8564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8532:	681a      	ldr	r2, [r3, #0]
   d8534:	07d1      	lsls	r1, r2, #31
   d8536:	bf5c      	itt	pl
   d8538:	2201      	movpl	r2, #1
   d853a:	601a      	strpl	r2, [r3, #0]
   d853c:	4b0a      	ldr	r3, [pc, #40]	; (d8568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d853e:	681a      	ldr	r2, [r3, #0]
   d8540:	07d2      	lsls	r2, r2, #31
   d8542:	bf5c      	itt	pl
   d8544:	2201      	movpl	r2, #1
   d8546:	601a      	strpl	r2, [r3, #0]
   d8548:	4770      	bx	lr
   d854a:	bf00      	nop
   d854c:	2003e748 	.word	0x2003e748
   d8550:	2003e744 	.word	0x2003e744
   d8554:	2003e740 	.word	0x2003e740
   d8558:	2003e73c 	.word	0x2003e73c
   d855c:	2003e738 	.word	0x2003e738
   d8560:	2003e734 	.word	0x2003e734
   d8564:	2003e730 	.word	0x2003e730
   d8568:	2003e72c 	.word	0x2003e72c

000d856c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d856c:	4b24      	ldr	r3, [pc, #144]	; (d8600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d856e:	681a      	ldr	r2, [r3, #0]
   d8570:	07d0      	lsls	r0, r2, #31
   d8572:	bf5c      	itt	pl
   d8574:	2201      	movpl	r2, #1
   d8576:	601a      	strpl	r2, [r3, #0]
   d8578:	4b22      	ldr	r3, [pc, #136]	; (d8604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d857a:	681a      	ldr	r2, [r3, #0]
   d857c:	07d1      	lsls	r1, r2, #31
   d857e:	bf5c      	itt	pl
   d8580:	2201      	movpl	r2, #1
   d8582:	601a      	strpl	r2, [r3, #0]
   d8584:	4b20      	ldr	r3, [pc, #128]	; (d8608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8586:	681a      	ldr	r2, [r3, #0]
   d8588:	07d2      	lsls	r2, r2, #31
   d858a:	bf5c      	itt	pl
   d858c:	2201      	movpl	r2, #1
   d858e:	601a      	strpl	r2, [r3, #0]
   d8590:	4b1e      	ldr	r3, [pc, #120]	; (d860c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8592:	681a      	ldr	r2, [r3, #0]
   d8594:	07d0      	lsls	r0, r2, #31
   d8596:	bf5c      	itt	pl
   d8598:	2201      	movpl	r2, #1
   d859a:	601a      	strpl	r2, [r3, #0]
   d859c:	4b1c      	ldr	r3, [pc, #112]	; (d8610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d859e:	681a      	ldr	r2, [r3, #0]
   d85a0:	07d1      	lsls	r1, r2, #31
   d85a2:	bf5c      	itt	pl
   d85a4:	2201      	movpl	r2, #1
   d85a6:	601a      	strpl	r2, [r3, #0]
   d85a8:	4b1a      	ldr	r3, [pc, #104]	; (d8614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d85aa:	681a      	ldr	r2, [r3, #0]
   d85ac:	07d2      	lsls	r2, r2, #31
   d85ae:	bf5c      	itt	pl
   d85b0:	2201      	movpl	r2, #1
   d85b2:	601a      	strpl	r2, [r3, #0]
   d85b4:	4b18      	ldr	r3, [pc, #96]	; (d8618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d85b6:	681a      	ldr	r2, [r3, #0]
   d85b8:	07d0      	lsls	r0, r2, #31
   d85ba:	bf5c      	itt	pl
   d85bc:	2201      	movpl	r2, #1
   d85be:	601a      	strpl	r2, [r3, #0]
   d85c0:	4b16      	ldr	r3, [pc, #88]	; (d861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d85c2:	681a      	ldr	r2, [r3, #0]
   d85c4:	07d1      	lsls	r1, r2, #31
   d85c6:	bf5c      	itt	pl
   d85c8:	2201      	movpl	r2, #1
   d85ca:	601a      	strpl	r2, [r3, #0]
   d85cc:	4b14      	ldr	r3, [pc, #80]	; (d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d85ce:	681a      	ldr	r2, [r3, #0]
   d85d0:	07d2      	lsls	r2, r2, #31
   d85d2:	bf5c      	itt	pl
   d85d4:	2201      	movpl	r2, #1
   d85d6:	601a      	strpl	r2, [r3, #0]
   d85d8:	4b12      	ldr	r3, [pc, #72]	; (d8624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d85da:	681a      	ldr	r2, [r3, #0]
   d85dc:	07d0      	lsls	r0, r2, #31
   d85de:	bf5c      	itt	pl
   d85e0:	2201      	movpl	r2, #1
   d85e2:	601a      	strpl	r2, [r3, #0]
   d85e4:	4b10      	ldr	r3, [pc, #64]	; (d8628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d85e6:	681a      	ldr	r2, [r3, #0]
   d85e8:	07d1      	lsls	r1, r2, #31
   d85ea:	bf5c      	itt	pl
   d85ec:	2201      	movpl	r2, #1
   d85ee:	601a      	strpl	r2, [r3, #0]
   d85f0:	4b0e      	ldr	r3, [pc, #56]	; (d862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d85f2:	681a      	ldr	r2, [r3, #0]
   d85f4:	07d2      	lsls	r2, r2, #31
   d85f6:	bf5c      	itt	pl
   d85f8:	2201      	movpl	r2, #1
   d85fa:	601a      	strpl	r2, [r3, #0]
   d85fc:	4770      	bx	lr
   d85fe:	bf00      	nop
   d8600:	2003e778 	.word	0x2003e778
   d8604:	2003e774 	.word	0x2003e774
   d8608:	2003e770 	.word	0x2003e770
   d860c:	2003e76c 	.word	0x2003e76c
   d8610:	2003e768 	.word	0x2003e768
   d8614:	2003e764 	.word	0x2003e764
   d8618:	2003e760 	.word	0x2003e760
   d861c:	2003e75c 	.word	0x2003e75c
   d8620:	2003e758 	.word	0x2003e758
   d8624:	2003e754 	.word	0x2003e754
   d8628:	2003e750 	.word	0x2003e750
   d862c:	2003e74c 	.word	0x2003e74c

000d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8630:	4b24      	ldr	r3, [pc, #144]	; (d86c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8632:	681a      	ldr	r2, [r3, #0]
   d8634:	07d0      	lsls	r0, r2, #31
   d8636:	bf5c      	itt	pl
   d8638:	2201      	movpl	r2, #1
   d863a:	601a      	strpl	r2, [r3, #0]
   d863c:	4b22      	ldr	r3, [pc, #136]	; (d86c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d863e:	681a      	ldr	r2, [r3, #0]
   d8640:	07d1      	lsls	r1, r2, #31
   d8642:	bf5c      	itt	pl
   d8644:	2201      	movpl	r2, #1
   d8646:	601a      	strpl	r2, [r3, #0]
   d8648:	4b20      	ldr	r3, [pc, #128]	; (d86cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d864a:	681a      	ldr	r2, [r3, #0]
   d864c:	07d2      	lsls	r2, r2, #31
   d864e:	bf5c      	itt	pl
   d8650:	2201      	movpl	r2, #1
   d8652:	601a      	strpl	r2, [r3, #0]
   d8654:	4b1e      	ldr	r3, [pc, #120]	; (d86d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8656:	681a      	ldr	r2, [r3, #0]
   d8658:	07d0      	lsls	r0, r2, #31
   d865a:	bf5c      	itt	pl
   d865c:	2201      	movpl	r2, #1
   d865e:	601a      	strpl	r2, [r3, #0]
   d8660:	4b1c      	ldr	r3, [pc, #112]	; (d86d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8662:	681a      	ldr	r2, [r3, #0]
   d8664:	07d1      	lsls	r1, r2, #31
   d8666:	bf5c      	itt	pl
   d8668:	2201      	movpl	r2, #1
   d866a:	601a      	strpl	r2, [r3, #0]
   d866c:	4b1a      	ldr	r3, [pc, #104]	; (d86d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d866e:	681a      	ldr	r2, [r3, #0]
   d8670:	07d2      	lsls	r2, r2, #31
   d8672:	bf5c      	itt	pl
   d8674:	2201      	movpl	r2, #1
   d8676:	601a      	strpl	r2, [r3, #0]
   d8678:	4b18      	ldr	r3, [pc, #96]	; (d86dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d867a:	681a      	ldr	r2, [r3, #0]
   d867c:	07d0      	lsls	r0, r2, #31
   d867e:	bf5c      	itt	pl
   d8680:	2201      	movpl	r2, #1
   d8682:	601a      	strpl	r2, [r3, #0]
   d8684:	4b16      	ldr	r3, [pc, #88]	; (d86e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8686:	681a      	ldr	r2, [r3, #0]
   d8688:	07d1      	lsls	r1, r2, #31
   d868a:	bf5c      	itt	pl
   d868c:	2201      	movpl	r2, #1
   d868e:	601a      	strpl	r2, [r3, #0]
   d8690:	4b14      	ldr	r3, [pc, #80]	; (d86e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8692:	681a      	ldr	r2, [r3, #0]
   d8694:	07d2      	lsls	r2, r2, #31
   d8696:	bf5c      	itt	pl
   d8698:	2201      	movpl	r2, #1
   d869a:	601a      	strpl	r2, [r3, #0]
   d869c:	4b12      	ldr	r3, [pc, #72]	; (d86e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d869e:	681a      	ldr	r2, [r3, #0]
   d86a0:	07d0      	lsls	r0, r2, #31
   d86a2:	bf5c      	itt	pl
   d86a4:	2201      	movpl	r2, #1
   d86a6:	601a      	strpl	r2, [r3, #0]
   d86a8:	4b10      	ldr	r3, [pc, #64]	; (d86ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d86aa:	681a      	ldr	r2, [r3, #0]
   d86ac:	07d1      	lsls	r1, r2, #31
   d86ae:	bf5c      	itt	pl
   d86b0:	2201      	movpl	r2, #1
   d86b2:	601a      	strpl	r2, [r3, #0]
   d86b4:	4b0e      	ldr	r3, [pc, #56]	; (d86f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d86b6:	681a      	ldr	r2, [r3, #0]
   d86b8:	07d2      	lsls	r2, r2, #31
   d86ba:	bf5c      	itt	pl
   d86bc:	2201      	movpl	r2, #1
   d86be:	601a      	strpl	r2, [r3, #0]
   d86c0:	4770      	bx	lr
   d86c2:	bf00      	nop
   d86c4:	2003e7a8 	.word	0x2003e7a8
   d86c8:	2003e7a4 	.word	0x2003e7a4
   d86cc:	2003e7a0 	.word	0x2003e7a0
   d86d0:	2003e79c 	.word	0x2003e79c
   d86d4:	2003e798 	.word	0x2003e798
   d86d8:	2003e794 	.word	0x2003e794
   d86dc:	2003e790 	.word	0x2003e790
   d86e0:	2003e78c 	.word	0x2003e78c
   d86e4:	2003e788 	.word	0x2003e788
   d86e8:	2003e784 	.word	0x2003e784
   d86ec:	2003e780 	.word	0x2003e780
   d86f0:	2003e77c 	.word	0x2003e77c

000d86f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d86f4:	4b18      	ldr	r3, [pc, #96]	; (d8758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d86f6:	681a      	ldr	r2, [r3, #0]
   d86f8:	07d1      	lsls	r1, r2, #31
   d86fa:	bf5c      	itt	pl
   d86fc:	2201      	movpl	r2, #1
   d86fe:	601a      	strpl	r2, [r3, #0]
   d8700:	4b16      	ldr	r3, [pc, #88]	; (d875c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8702:	681a      	ldr	r2, [r3, #0]
   d8704:	07d2      	lsls	r2, r2, #31
   d8706:	bf5c      	itt	pl
   d8708:	2201      	movpl	r2, #1
   d870a:	601a      	strpl	r2, [r3, #0]
   d870c:	4b14      	ldr	r3, [pc, #80]	; (d8760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d870e:	681a      	ldr	r2, [r3, #0]
   d8710:	07d0      	lsls	r0, r2, #31
   d8712:	bf5c      	itt	pl
   d8714:	2201      	movpl	r2, #1
   d8716:	601a      	strpl	r2, [r3, #0]
   d8718:	4b12      	ldr	r3, [pc, #72]	; (d8764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d871a:	681a      	ldr	r2, [r3, #0]
   d871c:	07d1      	lsls	r1, r2, #31
   d871e:	bf5c      	itt	pl
   d8720:	2201      	movpl	r2, #1
   d8722:	601a      	strpl	r2, [r3, #0]
   d8724:	4b10      	ldr	r3, [pc, #64]	; (d8768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8726:	681a      	ldr	r2, [r3, #0]
   d8728:	07d2      	lsls	r2, r2, #31
   d872a:	bf5c      	itt	pl
   d872c:	2201      	movpl	r2, #1
   d872e:	601a      	strpl	r2, [r3, #0]
   d8730:	4b0e      	ldr	r3, [pc, #56]	; (d876c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8732:	681a      	ldr	r2, [r3, #0]
   d8734:	07d0      	lsls	r0, r2, #31
   d8736:	bf5c      	itt	pl
   d8738:	2201      	movpl	r2, #1
   d873a:	601a      	strpl	r2, [r3, #0]
   d873c:	4b0c      	ldr	r3, [pc, #48]	; (d8770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d873e:	681a      	ldr	r2, [r3, #0]
   d8740:	07d1      	lsls	r1, r2, #31
   d8742:	bf5c      	itt	pl
   d8744:	2201      	movpl	r2, #1
   d8746:	601a      	strpl	r2, [r3, #0]
   d8748:	4b0a      	ldr	r3, [pc, #40]	; (d8774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d874a:	681a      	ldr	r2, [r3, #0]
   d874c:	07d2      	lsls	r2, r2, #31
   d874e:	bf5c      	itt	pl
   d8750:	2201      	movpl	r2, #1
   d8752:	601a      	strpl	r2, [r3, #0]
   d8754:	4770      	bx	lr
   d8756:	bf00      	nop
   d8758:	2003e7c8 	.word	0x2003e7c8
   d875c:	2003e7c4 	.word	0x2003e7c4
   d8760:	2003e7c0 	.word	0x2003e7c0
   d8764:	2003e7bc 	.word	0x2003e7bc
   d8768:	2003e7b8 	.word	0x2003e7b8
   d876c:	2003e7b4 	.word	0x2003e7b4
   d8770:	2003e7b0 	.word	0x2003e7b0
   d8774:	2003e7ac 	.word	0x2003e7ac

000d8778 <pow>:
   d8778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d877c:	ed2d 8b02 	vpush	{d8}
   d8780:	f8df a324 	ldr.w	sl, [pc, #804]	; d8aa8 <pow+0x330>
   d8784:	b08b      	sub	sp, #44	; 0x2c
   d8786:	ec57 6b10 	vmov	r6, r7, d0
   d878a:	ec55 4b11 	vmov	r4, r5, d1
   d878e:	f000 f98f 	bl	d8ab0 <__ieee754_pow>
   d8792:	f99a 8000 	ldrsb.w	r8, [sl]
   d8796:	eeb0 8a40 	vmov.f32	s16, s0
   d879a:	eef0 8a60 	vmov.f32	s17, s1
   d879e:	f1b8 3fff 	cmp.w	r8, #4294967295
   d87a2:	d048      	beq.n	d8836 <pow+0xbe>
   d87a4:	4622      	mov	r2, r4
   d87a6:	462b      	mov	r3, r5
   d87a8:	4620      	mov	r0, r4
   d87aa:	4629      	mov	r1, r5
   d87ac:	f001 fd6e 	bl	da28c <__aeabi_dcmpun>
   d87b0:	4683      	mov	fp, r0
   d87b2:	2800      	cmp	r0, #0
   d87b4:	d13f      	bne.n	d8836 <pow+0xbe>
   d87b6:	4632      	mov	r2, r6
   d87b8:	463b      	mov	r3, r7
   d87ba:	4630      	mov	r0, r6
   d87bc:	4639      	mov	r1, r7
   d87be:	f001 fd65 	bl	da28c <__aeabi_dcmpun>
   d87c2:	4681      	mov	r9, r0
   d87c4:	2800      	cmp	r0, #0
   d87c6:	f040 8090 	bne.w	d88ea <pow+0x172>
   d87ca:	4630      	mov	r0, r6
   d87cc:	4639      	mov	r1, r7
   d87ce:	2200      	movs	r2, #0
   d87d0:	2300      	movs	r3, #0
   d87d2:	f001 fd29 	bl	da228 <__aeabi_dcmpeq>
   d87d6:	2800      	cmp	r0, #0
   d87d8:	d036      	beq.n	d8848 <pow+0xd0>
   d87da:	2200      	movs	r2, #0
   d87dc:	2300      	movs	r3, #0
   d87de:	4620      	mov	r0, r4
   d87e0:	4629      	mov	r1, r5
   d87e2:	f001 fd21 	bl	da228 <__aeabi_dcmpeq>
   d87e6:	4683      	mov	fp, r0
   d87e8:	b1b8      	cbz	r0, d881a <pow+0xa2>
   d87ea:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d8a80 <pow+0x308>
   d87ee:	2201      	movs	r2, #1
   d87f0:	4ba9      	ldr	r3, [pc, #676]	; (d8a98 <pow+0x320>)
   d87f2:	f8cd 9020 	str.w	r9, [sp, #32]
   d87f6:	9200      	str	r2, [sp, #0]
   d87f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d87fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8800:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8804:	9301      	str	r3, [sp, #4]
   d8806:	f1b8 0f00 	cmp.w	r8, #0
   d880a:	d05b      	beq.n	d88c4 <pow+0x14c>
   d880c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d8a88 <pow+0x310>
   d8810:	b00b      	add	sp, #44	; 0x2c
   d8812:	ecbd 8b02 	vpop	{d8}
   d8816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d881a:	ec45 4b10 	vmov	d0, r4, r5
   d881e:	f000 ffa7 	bl	d9770 <finite>
   d8822:	b140      	cbz	r0, d8836 <pow+0xbe>
   d8824:	2200      	movs	r2, #0
   d8826:	2300      	movs	r3, #0
   d8828:	4620      	mov	r0, r4
   d882a:	4629      	mov	r1, r5
   d882c:	f001 fd06 	bl	da23c <__aeabi_dcmplt>
   d8830:	2800      	cmp	r0, #0
   d8832:	f040 80c5 	bne.w	d89c0 <pow+0x248>
   d8836:	eeb0 0a48 	vmov.f32	s0, s16
   d883a:	eef0 0a68 	vmov.f32	s1, s17
   d883e:	b00b      	add	sp, #44	; 0x2c
   d8840:	ecbd 8b02 	vpop	{d8}
   d8844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8848:	eeb0 0a48 	vmov.f32	s0, s16
   d884c:	eef0 0a68 	vmov.f32	s1, s17
   d8850:	f000 ff8e 	bl	d9770 <finite>
   d8854:	4680      	mov	r8, r0
   d8856:	2800      	cmp	r0, #0
   d8858:	d061      	beq.n	d891e <pow+0x1a6>
   d885a:	f04f 0800 	mov.w	r8, #0
   d885e:	f04f 0900 	mov.w	r9, #0
   d8862:	ec51 0b18 	vmov	r0, r1, d8
   d8866:	4642      	mov	r2, r8
   d8868:	464b      	mov	r3, r9
   d886a:	f001 fcdd 	bl	da228 <__aeabi_dcmpeq>
   d886e:	2800      	cmp	r0, #0
   d8870:	d0e1      	beq.n	d8836 <pow+0xbe>
   d8872:	ec47 6b10 	vmov	d0, r6, r7
   d8876:	f000 ff7b 	bl	d9770 <finite>
   d887a:	2800      	cmp	r0, #0
   d887c:	d0db      	beq.n	d8836 <pow+0xbe>
   d887e:	ec45 4b10 	vmov	d0, r4, r5
   d8882:	f000 ff75 	bl	d9770 <finite>
   d8886:	2800      	cmp	r0, #0
   d8888:	d0d5      	beq.n	d8836 <pow+0xbe>
   d888a:	f99a 3000 	ldrsb.w	r3, [sl]
   d888e:	4a82      	ldr	r2, [pc, #520]	; (d8a98 <pow+0x320>)
   d8890:	9201      	str	r2, [sp, #4]
   d8892:	2104      	movs	r1, #4
   d8894:	2200      	movs	r2, #0
   d8896:	2b02      	cmp	r3, #2
   d8898:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d889c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d88a0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d88a4:	9100      	str	r1, [sp, #0]
   d88a6:	9208      	str	r2, [sp, #32]
   d88a8:	d003      	beq.n	d88b2 <pow+0x13a>
   d88aa:	4668      	mov	r0, sp
   d88ac:	f000 ff68 	bl	d9780 <matherr>
   d88b0:	b970      	cbnz	r0, d88d0 <pow+0x158>
   d88b2:	f7fd fde7 	bl	d6484 <__errno>
   d88b6:	2322      	movs	r3, #34	; 0x22
   d88b8:	6003      	str	r3, [r0, #0]
   d88ba:	e009      	b.n	d88d0 <pow+0x158>
   d88bc:	ed9f 7b70 	vldr	d7, [pc, #448]	; d8a80 <pow+0x308>
   d88c0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d88c4:	4668      	mov	r0, sp
   d88c6:	f000 ff5b 	bl	d9780 <matherr>
   d88ca:	2800      	cmp	r0, #0
   d88cc:	f000 808e 	beq.w	d89ec <pow+0x274>
   d88d0:	9b08      	ldr	r3, [sp, #32]
   d88d2:	b11b      	cbz	r3, d88dc <pow+0x164>
   d88d4:	f7fd fdd6 	bl	d6484 <__errno>
   d88d8:	9b08      	ldr	r3, [sp, #32]
   d88da:	6003      	str	r3, [r0, #0]
   d88dc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d88e0:	b00b      	add	sp, #44	; 0x2c
   d88e2:	ecbd 8b02 	vpop	{d8}
   d88e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d88ea:	2200      	movs	r2, #0
   d88ec:	2300      	movs	r3, #0
   d88ee:	4620      	mov	r0, r4
   d88f0:	4629      	mov	r1, r5
   d88f2:	f001 fc99 	bl	da228 <__aeabi_dcmpeq>
   d88f6:	2800      	cmp	r0, #0
   d88f8:	d09d      	beq.n	d8836 <pow+0xbe>
   d88fa:	ed9f 0b63 	vldr	d0, [pc, #396]	; d8a88 <pow+0x310>
   d88fe:	4b66      	ldr	r3, [pc, #408]	; (d8a98 <pow+0x320>)
   d8900:	f8cd b020 	str.w	fp, [sp, #32]
   d8904:	2201      	movs	r2, #1
   d8906:	f1b8 0f02 	cmp.w	r8, #2
   d890a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d890e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8912:	ed8d 0b06 	vstr	d0, [sp, #24]
   d8916:	e88d 000c 	stmia.w	sp, {r2, r3}
   d891a:	d1d3      	bne.n	d88c4 <pow+0x14c>
   d891c:	e78f      	b.n	d883e <pow+0xc6>
   d891e:	ec47 6b10 	vmov	d0, r6, r7
   d8922:	f000 ff25 	bl	d9770 <finite>
   d8926:	2800      	cmp	r0, #0
   d8928:	d097      	beq.n	d885a <pow+0xe2>
   d892a:	ec45 4b10 	vmov	d0, r4, r5
   d892e:	f000 ff1f 	bl	d9770 <finite>
   d8932:	2800      	cmp	r0, #0
   d8934:	d091      	beq.n	d885a <pow+0xe2>
   d8936:	ec53 2b18 	vmov	r2, r3, d8
   d893a:	ee18 0a10 	vmov	r0, s16
   d893e:	4619      	mov	r1, r3
   d8940:	f001 fca4 	bl	da28c <__aeabi_dcmpun>
   d8944:	2800      	cmp	r0, #0
   d8946:	d17c      	bne.n	d8a42 <pow+0x2ca>
   d8948:	2303      	movs	r3, #3
   d894a:	f99a 8000 	ldrsb.w	r8, [sl]
   d894e:	9300      	str	r3, [sp, #0]
   d8950:	4b51      	ldr	r3, [pc, #324]	; (d8a98 <pow+0x320>)
   d8952:	9008      	str	r0, [sp, #32]
   d8954:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8958:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d895c:	9301      	str	r3, [sp, #4]
   d895e:	f1b8 0f00 	cmp.w	r8, #0
   d8962:	d148      	bne.n	d89f6 <pow+0x27e>
   d8964:	f8df 9144 	ldr.w	r9, [pc, #324]	; d8aac <pow+0x334>
   d8968:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d896c:	2200      	movs	r2, #0
   d896e:	2300      	movs	r3, #0
   d8970:	4630      	mov	r0, r6
   d8972:	4639      	mov	r1, r7
   d8974:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8978:	f001 fc60 	bl	da23c <__aeabi_dcmplt>
   d897c:	2800      	cmp	r0, #0
   d897e:	d094      	beq.n	d88aa <pow+0x132>
   d8980:	2200      	movs	r2, #0
   d8982:	4b46      	ldr	r3, [pc, #280]	; (d8a9c <pow+0x324>)
   d8984:	4620      	mov	r0, r4
   d8986:	4629      	mov	r1, r5
   d8988:	f001 f9e6 	bl	d9d58 <__aeabi_dmul>
   d898c:	4604      	mov	r4, r0
   d898e:	460d      	mov	r5, r1
   d8990:	ec45 4b10 	vmov	d0, r4, r5
   d8994:	f000 ff00 	bl	d9798 <rint>
   d8998:	4620      	mov	r0, r4
   d899a:	ec53 2b10 	vmov	r2, r3, d0
   d899e:	4629      	mov	r1, r5
   d89a0:	f001 fc42 	bl	da228 <__aeabi_dcmpeq>
   d89a4:	2800      	cmp	r0, #0
   d89a6:	d149      	bne.n	d8a3c <pow+0x2c4>
   d89a8:	4b3d      	ldr	r3, [pc, #244]	; (d8aa0 <pow+0x328>)
   d89aa:	f99a 8000 	ldrsb.w	r8, [sl]
   d89ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d89b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d89b6:	f1b8 0f02 	cmp.w	r8, #2
   d89ba:	f47f af76 	bne.w	d88aa <pow+0x132>
   d89be:	e778      	b.n	d88b2 <pow+0x13a>
   d89c0:	4a35      	ldr	r2, [pc, #212]	; (d8a98 <pow+0x320>)
   d89c2:	f99a 3000 	ldrsb.w	r3, [sl]
   d89c6:	f8cd b020 	str.w	fp, [sp, #32]
   d89ca:	2101      	movs	r1, #1
   d89cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d89d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d89d4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d89d8:	2b00      	cmp	r3, #0
   d89da:	f43f af6f 	beq.w	d88bc <pow+0x144>
   d89de:	4931      	ldr	r1, [pc, #196]	; (d8aa4 <pow+0x32c>)
   d89e0:	2000      	movs	r0, #0
   d89e2:	2b02      	cmp	r3, #2
   d89e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d89e8:	f47f af6c 	bne.w	d88c4 <pow+0x14c>
   d89ec:	f7fd fd4a 	bl	d6484 <__errno>
   d89f0:	2321      	movs	r3, #33	; 0x21
   d89f2:	6003      	str	r3, [r0, #0]
   d89f4:	e76c      	b.n	d88d0 <pow+0x158>
   d89f6:	ed9f 7b26 	vldr	d7, [pc, #152]	; d8a90 <pow+0x318>
   d89fa:	2200      	movs	r2, #0
   d89fc:	2300      	movs	r3, #0
   d89fe:	4630      	mov	r0, r6
   d8a00:	4639      	mov	r1, r7
   d8a02:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8a06:	f001 fc19 	bl	da23c <__aeabi_dcmplt>
   d8a0a:	2800      	cmp	r0, #0
   d8a0c:	d0d3      	beq.n	d89b6 <pow+0x23e>
   d8a0e:	2200      	movs	r2, #0
   d8a10:	4b22      	ldr	r3, [pc, #136]	; (d8a9c <pow+0x324>)
   d8a12:	4620      	mov	r0, r4
   d8a14:	4629      	mov	r1, r5
   d8a16:	f001 f99f 	bl	d9d58 <__aeabi_dmul>
   d8a1a:	4604      	mov	r4, r0
   d8a1c:	460d      	mov	r5, r1
   d8a1e:	ec45 4b10 	vmov	d0, r4, r5
   d8a22:	f000 feb9 	bl	d9798 <rint>
   d8a26:	4620      	mov	r0, r4
   d8a28:	ec53 2b10 	vmov	r2, r3, d0
   d8a2c:	4629      	mov	r1, r5
   d8a2e:	f001 fbfb 	bl	da228 <__aeabi_dcmpeq>
   d8a32:	b918      	cbnz	r0, d8a3c <pow+0x2c4>
   d8a34:	4b1b      	ldr	r3, [pc, #108]	; (d8aa4 <pow+0x32c>)
   d8a36:	2200      	movs	r2, #0
   d8a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d8a3c:	f99a 8000 	ldrsb.w	r8, [sl]
   d8a40:	e7b9      	b.n	d89b6 <pow+0x23e>
   d8a42:	4b15      	ldr	r3, [pc, #84]	; (d8a98 <pow+0x320>)
   d8a44:	f99a 9000 	ldrsb.w	r9, [sl]
   d8a48:	f8cd 8020 	str.w	r8, [sp, #32]
   d8a4c:	2201      	movs	r2, #1
   d8a4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8a52:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8a56:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8a5a:	f1b9 0f00 	cmp.w	r9, #0
   d8a5e:	f43f af2d 	beq.w	d88bc <pow+0x144>
   d8a62:	2200      	movs	r2, #0
   d8a64:	2300      	movs	r3, #0
   d8a66:	4610      	mov	r0, r2
   d8a68:	4619      	mov	r1, r3
   d8a6a:	f001 fa9f 	bl	d9fac <__aeabi_ddiv>
   d8a6e:	f1b9 0f02 	cmp.w	r9, #2
   d8a72:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8a76:	d0b9      	beq.n	d89ec <pow+0x274>
   d8a78:	e724      	b.n	d88c4 <pow+0x14c>
   d8a7a:	bf00      	nop
   d8a7c:	f3af 8000 	nop.w
	...
   d8a8c:	3ff00000 	.word	0x3ff00000
   d8a90:	00000000 	.word	0x00000000
   d8a94:	7ff00000 	.word	0x7ff00000
   d8a98:	000dbfd8 	.word	0x000dbfd8
   d8a9c:	3fe00000 	.word	0x3fe00000
   d8aa0:	c7efffff 	.word	0xc7efffff
   d8aa4:	fff00000 	.word	0xfff00000
   d8aa8:	2003e0bc 	.word	0x2003e0bc
   d8aac:	47efffff 	.word	0x47efffff

000d8ab0 <__ieee754_pow>:
   d8ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ab4:	ec51 0b11 	vmov	r0, r1, d1
   d8ab8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8abc:	ea58 0400 	orrs.w	r4, r8, r0
   d8ac0:	b093      	sub	sp, #76	; 0x4c
   d8ac2:	d03c      	beq.n	d8b3e <__ieee754_pow+0x8e>
   d8ac4:	ec53 2b10 	vmov	r2, r3, d0
   d8ac8:	4e6d      	ldr	r6, [pc, #436]	; (d8c80 <__ieee754_pow+0x1d0>)
   d8aca:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8ace:	42b4      	cmp	r4, r6
   d8ad0:	ee10 aa10 	vmov	sl, s0
   d8ad4:	461d      	mov	r5, r3
   d8ad6:	dc2b      	bgt.n	d8b30 <__ieee754_pow+0x80>
   d8ad8:	4689      	mov	r9, r1
   d8ada:	ee11 ea10 	vmov	lr, s2
   d8ade:	d026      	beq.n	d8b2e <__ieee754_pow+0x7e>
   d8ae0:	45b0      	cmp	r8, r6
   d8ae2:	dc25      	bgt.n	d8b30 <__ieee754_pow+0x80>
   d8ae4:	4e66      	ldr	r6, [pc, #408]	; (d8c80 <__ieee754_pow+0x1d0>)
   d8ae6:	45b0      	cmp	r8, r6
   d8ae8:	d077      	beq.n	d8bda <__ieee754_pow+0x12a>
   d8aea:	2d00      	cmp	r5, #0
   d8aec:	4616      	mov	r6, r2
   d8aee:	461f      	mov	r7, r3
   d8af0:	e9cd 0100 	strd	r0, r1, [sp]
   d8af4:	db75      	blt.n	d8be2 <__ieee754_pow+0x132>
   d8af6:	f04f 0b00 	mov.w	fp, #0
   d8afa:	f1be 0f00 	cmp.w	lr, #0
   d8afe:	d12d      	bne.n	d8b5c <__ieee754_pow+0xac>
   d8b00:	4b5f      	ldr	r3, [pc, #380]	; (d8c80 <__ieee754_pow+0x1d0>)
   d8b02:	4598      	cmp	r8, r3
   d8b04:	f000 8089 	beq.w	d8c1a <__ieee754_pow+0x16a>
   d8b08:	4b5e      	ldr	r3, [pc, #376]	; (d8c84 <__ieee754_pow+0x1d4>)
   d8b0a:	4598      	cmp	r8, r3
   d8b0c:	d05e      	beq.n	d8bcc <__ieee754_pow+0x11c>
   d8b0e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d8b12:	f000 83de 	beq.w	d92d2 <__ieee754_pow+0x822>
   d8b16:	4b5c      	ldr	r3, [pc, #368]	; (d8c88 <__ieee754_pow+0x1d8>)
   d8b18:	4599      	cmp	r9, r3
   d8b1a:	d11f      	bne.n	d8b5c <__ieee754_pow+0xac>
   d8b1c:	2d00      	cmp	r5, #0
   d8b1e:	db1d      	blt.n	d8b5c <__ieee754_pow+0xac>
   d8b20:	ec47 6b10 	vmov	d0, r6, r7
   d8b24:	b013      	add	sp, #76	; 0x4c
   d8b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b2a:	f000 bd49 	b.w	d95c0 <__ieee754_sqrt>
   d8b2e:	b15a      	cbz	r2, d8b48 <__ieee754_pow+0x98>
   d8b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8b38:	ea54 030a 	orrs.w	r3, r4, sl
   d8b3c:	d106      	bne.n	d8b4c <__ieee754_pow+0x9c>
   d8b3e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d8c68 <__ieee754_pow+0x1b8>
   d8b42:	b013      	add	sp, #76	; 0x4c
   d8b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b48:	45a0      	cmp	r8, r4
   d8b4a:	ddcb      	ble.n	d8ae4 <__ieee754_pow+0x34>
   d8b4c:	484f      	ldr	r0, [pc, #316]	; (d8c8c <__ieee754_pow+0x1dc>)
   d8b4e:	b013      	add	sp, #76	; 0x4c
   d8b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b54:	f000 be18 	b.w	d9788 <nan>
   d8b58:	f04f 0b00 	mov.w	fp, #0
   d8b5c:	ec47 6b10 	vmov	d0, r6, r7
   d8b60:	f000 fdfe 	bl	d9760 <fabs>
   d8b64:	ec51 0b10 	vmov	r0, r1, d0
   d8b68:	f1ba 0f00 	cmp.w	sl, #0
   d8b6c:	d01e      	beq.n	d8bac <__ieee754_pow+0xfc>
   d8b6e:	0fed      	lsrs	r5, r5, #31
   d8b70:	f105 3aff 	add.w	sl, r5, #4294967295
   d8b74:	ea5b 030a 	orrs.w	r3, fp, sl
   d8b78:	d063      	beq.n	d8c42 <__ieee754_pow+0x192>
   d8b7a:	4b45      	ldr	r3, [pc, #276]	; (d8c90 <__ieee754_pow+0x1e0>)
   d8b7c:	4598      	cmp	r8, r3
   d8b7e:	f340 808d 	ble.w	d8c9c <__ieee754_pow+0x1ec>
   d8b82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8b86:	4598      	cmp	r8, r3
   d8b88:	f340 8438 	ble.w	d93fc <__ieee754_pow+0x94c>
   d8b8c:	4b41      	ldr	r3, [pc, #260]	; (d8c94 <__ieee754_pow+0x1e4>)
   d8b8e:	429c      	cmp	r4, r3
   d8b90:	dd62      	ble.n	d8c58 <__ieee754_pow+0x1a8>
   d8b92:	f1b9 0f00 	cmp.w	r9, #0
   d8b96:	dd62      	ble.n	d8c5e <__ieee754_pow+0x1ae>
   d8b98:	a335      	add	r3, pc, #212	; (adr r3, d8c70 <__ieee754_pow+0x1c0>)
   d8b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b9e:	4610      	mov	r0, r2
   d8ba0:	4619      	mov	r1, r3
   d8ba2:	f001 f8d9 	bl	d9d58 <__aeabi_dmul>
   d8ba6:	ec41 0b10 	vmov	d0, r0, r1
   d8baa:	e7ca      	b.n	d8b42 <__ieee754_pow+0x92>
   d8bac:	b124      	cbz	r4, d8bb8 <__ieee754_pow+0x108>
   d8bae:	4b35      	ldr	r3, [pc, #212]	; (d8c84 <__ieee754_pow+0x1d4>)
   d8bb0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d8bb4:	429a      	cmp	r2, r3
   d8bb6:	d1da      	bne.n	d8b6e <__ieee754_pow+0xbe>
   d8bb8:	f1b9 0f00 	cmp.w	r9, #0
   d8bbc:	f2c0 83cb 	blt.w	d9356 <__ieee754_pow+0x8a6>
   d8bc0:	2d00      	cmp	r5, #0
   d8bc2:	f2c0 8374 	blt.w	d92ae <__ieee754_pow+0x7fe>
   d8bc6:	ec41 0b10 	vmov	d0, r0, r1
   d8bca:	e7ba      	b.n	d8b42 <__ieee754_pow+0x92>
   d8bcc:	f1b9 0f00 	cmp.w	r9, #0
   d8bd0:	f2c0 847a 	blt.w	d94c8 <__ieee754_pow+0xa18>
   d8bd4:	ec47 6b10 	vmov	d0, r6, r7
   d8bd8:	e7b3      	b.n	d8b42 <__ieee754_pow+0x92>
   d8bda:	f1be 0f00 	cmp.w	lr, #0
   d8bde:	d084      	beq.n	d8aea <__ieee754_pow+0x3a>
   d8be0:	e7a6      	b.n	d8b30 <__ieee754_pow+0x80>
   d8be2:	4b2d      	ldr	r3, [pc, #180]	; (d8c98 <__ieee754_pow+0x1e8>)
   d8be4:	4598      	cmp	r8, r3
   d8be6:	dc29      	bgt.n	d8c3c <__ieee754_pow+0x18c>
   d8be8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d8bec:	4598      	cmp	r8, r3
   d8bee:	dd82      	ble.n	d8af6 <__ieee754_pow+0x46>
   d8bf0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8bf4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8bf8:	2b14      	cmp	r3, #20
   d8bfa:	f340 847f 	ble.w	d94fc <__ieee754_pow+0xa4c>
   d8bfe:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d8c02:	fa2e f203 	lsr.w	r2, lr, r3
   d8c06:	fa02 f303 	lsl.w	r3, r2, r3
   d8c0a:	459e      	cmp	lr, r3
   d8c0c:	f47f af73 	bne.w	d8af6 <__ieee754_pow+0x46>
   d8c10:	f002 0201 	and.w	r2, r2, #1
   d8c14:	f1c2 0b02 	rsb	fp, r2, #2
   d8c18:	e76f      	b.n	d8afa <__ieee754_pow+0x4a>
   d8c1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d8c1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8c22:	ea53 030a 	orrs.w	r3, r3, sl
   d8c26:	d08a      	beq.n	d8b3e <__ieee754_pow+0x8e>
   d8c28:	4b1a      	ldr	r3, [pc, #104]	; (d8c94 <__ieee754_pow+0x1e4>)
   d8c2a:	429c      	cmp	r4, r3
   d8c2c:	f340 8385 	ble.w	d933a <__ieee754_pow+0x88a>
   d8c30:	f1b9 0f00 	cmp.w	r9, #0
   d8c34:	db13      	blt.n	d8c5e <__ieee754_pow+0x1ae>
   d8c36:	ed9d 0b00 	vldr	d0, [sp]
   d8c3a:	e782      	b.n	d8b42 <__ieee754_pow+0x92>
   d8c3c:	f04f 0b02 	mov.w	fp, #2
   d8c40:	e75b      	b.n	d8afa <__ieee754_pow+0x4a>
   d8c42:	4632      	mov	r2, r6
   d8c44:	463b      	mov	r3, r7
   d8c46:	4610      	mov	r0, r2
   d8c48:	4619      	mov	r1, r3
   d8c4a:	f000 fed1 	bl	d99f0 <__aeabi_dsub>
   d8c4e:	4602      	mov	r2, r0
   d8c50:	460b      	mov	r3, r1
   d8c52:	f001 f9ab 	bl	d9fac <__aeabi_ddiv>
   d8c56:	e7b6      	b.n	d8bc6 <__ieee754_pow+0x116>
   d8c58:	f1b9 0f00 	cmp.w	r9, #0
   d8c5c:	db9c      	blt.n	d8b98 <__ieee754_pow+0xe8>
   d8c5e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d8c78 <__ieee754_pow+0x1c8>
   d8c62:	e76e      	b.n	d8b42 <__ieee754_pow+0x92>
   d8c64:	f3af 8000 	nop.w
   d8c68:	00000000 	.word	0x00000000
   d8c6c:	3ff00000 	.word	0x3ff00000
   d8c70:	8800759c 	.word	0x8800759c
   d8c74:	7e37e43c 	.word	0x7e37e43c
	...
   d8c80:	7ff00000 	.word	0x7ff00000
   d8c84:	3ff00000 	.word	0x3ff00000
   d8c88:	3fe00000 	.word	0x3fe00000
   d8c8c:	000dbfdc 	.word	0x000dbfdc
   d8c90:	41e00000 	.word	0x41e00000
   d8c94:	3fefffff 	.word	0x3fefffff
   d8c98:	433fffff 	.word	0x433fffff
   d8c9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8ca0:	f04f 0200 	mov.w	r2, #0
   d8ca4:	da05      	bge.n	d8cb2 <__ieee754_pow+0x202>
   d8ca6:	4bd6      	ldr	r3, [pc, #856]	; (d9000 <__ieee754_pow+0x550>)
   d8ca8:	f001 f856 	bl	d9d58 <__aeabi_dmul>
   d8cac:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8cb0:	460c      	mov	r4, r1
   d8cb2:	1523      	asrs	r3, r4, #20
   d8cb4:	4ed3      	ldr	r6, [pc, #844]	; (d9004 <__ieee754_pow+0x554>)
   d8cb6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d8cba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8cbe:	4413      	add	r3, r2
   d8cc0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d8cc4:	42b4      	cmp	r4, r6
   d8cc6:	461a      	mov	r2, r3
   d8cc8:	930d      	str	r3, [sp, #52]	; 0x34
   d8cca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d8cce:	f340 8349 	ble.w	d9364 <__ieee754_pow+0x8b4>
   d8cd2:	4bcd      	ldr	r3, [pc, #820]	; (d9008 <__ieee754_pow+0x558>)
   d8cd4:	429c      	cmp	r4, r3
   d8cd6:	f340 842d 	ble.w	d9534 <__ieee754_pow+0xa84>
   d8cda:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8fa8 <__ieee754_pow+0x4f8>
   d8cde:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8ce2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8ce6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8fb0 <__ieee754_pow+0x500>
   d8cea:	4613      	mov	r3, r2
   d8cec:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8cf0:	3301      	adds	r3, #1
   d8cf2:	930d      	str	r3, [sp, #52]	; 0x34
   d8cf4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8cf8:	f04f 0800 	mov.w	r8, #0
   d8cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d00:	4629      	mov	r1, r5
   d8d02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8d06:	f000 fe73 	bl	d99f0 <__aeabi_dsub>
   d8d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d0e:	4606      	mov	r6, r0
   d8d10:	460f      	mov	r7, r1
   d8d12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8d16:	f000 fe6d 	bl	d99f4 <__adddf3>
   d8d1a:	4602      	mov	r2, r0
   d8d1c:	460b      	mov	r3, r1
   d8d1e:	2000      	movs	r0, #0
   d8d20:	49ba      	ldr	r1, [pc, #744]	; (d900c <__ieee754_pow+0x55c>)
   d8d22:	f001 f943 	bl	d9fac <__aeabi_ddiv>
   d8d26:	4603      	mov	r3, r0
   d8d28:	460c      	mov	r4, r1
   d8d2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d8d2e:	4602      	mov	r2, r0
   d8d30:	460b      	mov	r3, r1
   d8d32:	4630      	mov	r0, r6
   d8d34:	4639      	mov	r1, r7
   d8d36:	f001 f80f 	bl	d9d58 <__aeabi_dmul>
   d8d3a:	106b      	asrs	r3, r5, #1
   d8d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d8d40:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d8d44:	eb03 0508 	add.w	r5, r3, r8
   d8d48:	460a      	mov	r2, r1
   d8d4a:	2300      	movs	r3, #0
   d8d4c:	4601      	mov	r1, r0
   d8d4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8d52:	9302      	str	r3, [sp, #8]
   d8d54:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d8d58:	2400      	movs	r4, #0
   d8d5a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8d5e:	462b      	mov	r3, r5
   d8d60:	4622      	mov	r2, r4
   d8d62:	4640      	mov	r0, r8
   d8d64:	4649      	mov	r1, r9
   d8d66:	f000 fff7 	bl	d9d58 <__aeabi_dmul>
   d8d6a:	4602      	mov	r2, r0
   d8d6c:	460b      	mov	r3, r1
   d8d6e:	4630      	mov	r0, r6
   d8d70:	4639      	mov	r1, r7
   d8d72:	f000 fe3d 	bl	d99f0 <__aeabi_dsub>
   d8d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8d7a:	4606      	mov	r6, r0
   d8d7c:	460f      	mov	r7, r1
   d8d7e:	4620      	mov	r0, r4
   d8d80:	4629      	mov	r1, r5
   d8d82:	f000 fe35 	bl	d99f0 <__aeabi_dsub>
   d8d86:	4602      	mov	r2, r0
   d8d88:	460b      	mov	r3, r1
   d8d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8d8e:	f000 fe2f 	bl	d99f0 <__aeabi_dsub>
   d8d92:	4642      	mov	r2, r8
   d8d94:	464b      	mov	r3, r9
   d8d96:	f000 ffdf 	bl	d9d58 <__aeabi_dmul>
   d8d9a:	4602      	mov	r2, r0
   d8d9c:	460b      	mov	r3, r1
   d8d9e:	4630      	mov	r0, r6
   d8da0:	4639      	mov	r1, r7
   d8da2:	f000 fe25 	bl	d99f0 <__aeabi_dsub>
   d8da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d8daa:	f000 ffd5 	bl	d9d58 <__aeabi_dmul>
   d8dae:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8db2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8db6:	4622      	mov	r2, r4
   d8db8:	462b      	mov	r3, r5
   d8dba:	4620      	mov	r0, r4
   d8dbc:	4629      	mov	r1, r5
   d8dbe:	f000 ffcb 	bl	d9d58 <__aeabi_dmul>
   d8dc2:	a37d      	add	r3, pc, #500	; (adr r3, d8fb8 <__ieee754_pow+0x508>)
   d8dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dc8:	4604      	mov	r4, r0
   d8dca:	460d      	mov	r5, r1
   d8dcc:	f000 ffc4 	bl	d9d58 <__aeabi_dmul>
   d8dd0:	a37b      	add	r3, pc, #492	; (adr r3, d8fc0 <__ieee754_pow+0x510>)
   d8dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dd6:	f000 fe0d 	bl	d99f4 <__adddf3>
   d8dda:	4622      	mov	r2, r4
   d8ddc:	462b      	mov	r3, r5
   d8dde:	f000 ffbb 	bl	d9d58 <__aeabi_dmul>
   d8de2:	a379      	add	r3, pc, #484	; (adr r3, d8fc8 <__ieee754_pow+0x518>)
   d8de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8de8:	f000 fe04 	bl	d99f4 <__adddf3>
   d8dec:	4622      	mov	r2, r4
   d8dee:	462b      	mov	r3, r5
   d8df0:	f000 ffb2 	bl	d9d58 <__aeabi_dmul>
   d8df4:	a376      	add	r3, pc, #472	; (adr r3, d8fd0 <__ieee754_pow+0x520>)
   d8df6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dfa:	f000 fdfb 	bl	d99f4 <__adddf3>
   d8dfe:	4622      	mov	r2, r4
   d8e00:	462b      	mov	r3, r5
   d8e02:	f000 ffa9 	bl	d9d58 <__aeabi_dmul>
   d8e06:	a374      	add	r3, pc, #464	; (adr r3, d8fd8 <__ieee754_pow+0x528>)
   d8e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e0c:	f000 fdf2 	bl	d99f4 <__adddf3>
   d8e10:	4622      	mov	r2, r4
   d8e12:	462b      	mov	r3, r5
   d8e14:	f000 ffa0 	bl	d9d58 <__aeabi_dmul>
   d8e18:	a371      	add	r3, pc, #452	; (adr r3, d8fe0 <__ieee754_pow+0x530>)
   d8e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e1e:	f000 fde9 	bl	d99f4 <__adddf3>
   d8e22:	4622      	mov	r2, r4
   d8e24:	4606      	mov	r6, r0
   d8e26:	460f      	mov	r7, r1
   d8e28:	462b      	mov	r3, r5
   d8e2a:	4620      	mov	r0, r4
   d8e2c:	4629      	mov	r1, r5
   d8e2e:	f000 ff93 	bl	d9d58 <__aeabi_dmul>
   d8e32:	4602      	mov	r2, r0
   d8e34:	460b      	mov	r3, r1
   d8e36:	4630      	mov	r0, r6
   d8e38:	4639      	mov	r1, r7
   d8e3a:	f000 ff8d 	bl	d9d58 <__aeabi_dmul>
   d8e3e:	4642      	mov	r2, r8
   d8e40:	4604      	mov	r4, r0
   d8e42:	460d      	mov	r5, r1
   d8e44:	464b      	mov	r3, r9
   d8e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8e4a:	f000 fdd3 	bl	d99f4 <__adddf3>
   d8e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8e52:	f000 ff81 	bl	d9d58 <__aeabi_dmul>
   d8e56:	4622      	mov	r2, r4
   d8e58:	462b      	mov	r3, r5
   d8e5a:	f000 fdcb 	bl	d99f4 <__adddf3>
   d8e5e:	4642      	mov	r2, r8
   d8e60:	4606      	mov	r6, r0
   d8e62:	460f      	mov	r7, r1
   d8e64:	464b      	mov	r3, r9
   d8e66:	4640      	mov	r0, r8
   d8e68:	4649      	mov	r1, r9
   d8e6a:	f000 ff75 	bl	d9d58 <__aeabi_dmul>
   d8e6e:	2200      	movs	r2, #0
   d8e70:	4b67      	ldr	r3, [pc, #412]	; (d9010 <__ieee754_pow+0x560>)
   d8e72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8e76:	f000 fdbd 	bl	d99f4 <__adddf3>
   d8e7a:	4632      	mov	r2, r6
   d8e7c:	463b      	mov	r3, r7
   d8e7e:	f000 fdb9 	bl	d99f4 <__adddf3>
   d8e82:	9802      	ldr	r0, [sp, #8]
   d8e84:	460d      	mov	r5, r1
   d8e86:	4604      	mov	r4, r0
   d8e88:	4622      	mov	r2, r4
   d8e8a:	462b      	mov	r3, r5
   d8e8c:	4640      	mov	r0, r8
   d8e8e:	4649      	mov	r1, r9
   d8e90:	f000 ff62 	bl	d9d58 <__aeabi_dmul>
   d8e94:	2200      	movs	r2, #0
   d8e96:	4680      	mov	r8, r0
   d8e98:	4689      	mov	r9, r1
   d8e9a:	4b5d      	ldr	r3, [pc, #372]	; (d9010 <__ieee754_pow+0x560>)
   d8e9c:	4620      	mov	r0, r4
   d8e9e:	4629      	mov	r1, r5
   d8ea0:	f000 fda6 	bl	d99f0 <__aeabi_dsub>
   d8ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8ea8:	f000 fda2 	bl	d99f0 <__aeabi_dsub>
   d8eac:	4602      	mov	r2, r0
   d8eae:	460b      	mov	r3, r1
   d8eb0:	4630      	mov	r0, r6
   d8eb2:	4639      	mov	r1, r7
   d8eb4:	f000 fd9c 	bl	d99f0 <__aeabi_dsub>
   d8eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8ebc:	f000 ff4c 	bl	d9d58 <__aeabi_dmul>
   d8ec0:	4622      	mov	r2, r4
   d8ec2:	4606      	mov	r6, r0
   d8ec4:	460f      	mov	r7, r1
   d8ec6:	462b      	mov	r3, r5
   d8ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8ecc:	f000 ff44 	bl	d9d58 <__aeabi_dmul>
   d8ed0:	4602      	mov	r2, r0
   d8ed2:	460b      	mov	r3, r1
   d8ed4:	4630      	mov	r0, r6
   d8ed6:	4639      	mov	r1, r7
   d8ed8:	f000 fd8c 	bl	d99f4 <__adddf3>
   d8edc:	4606      	mov	r6, r0
   d8ede:	460f      	mov	r7, r1
   d8ee0:	4602      	mov	r2, r0
   d8ee2:	460b      	mov	r3, r1
   d8ee4:	4640      	mov	r0, r8
   d8ee6:	4649      	mov	r1, r9
   d8ee8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8eec:	f000 fd82 	bl	d99f4 <__adddf3>
   d8ef0:	9802      	ldr	r0, [sp, #8]
   d8ef2:	a33d      	add	r3, pc, #244	; (adr r3, d8fe8 <__ieee754_pow+0x538>)
   d8ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ef8:	4604      	mov	r4, r0
   d8efa:	460d      	mov	r5, r1
   d8efc:	f000 ff2c 	bl	d9d58 <__aeabi_dmul>
   d8f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8f04:	4680      	mov	r8, r0
   d8f06:	4689      	mov	r9, r1
   d8f08:	4620      	mov	r0, r4
   d8f0a:	4629      	mov	r1, r5
   d8f0c:	f000 fd70 	bl	d99f0 <__aeabi_dsub>
   d8f10:	4602      	mov	r2, r0
   d8f12:	460b      	mov	r3, r1
   d8f14:	4630      	mov	r0, r6
   d8f16:	4639      	mov	r1, r7
   d8f18:	f000 fd6a 	bl	d99f0 <__aeabi_dsub>
   d8f1c:	a334      	add	r3, pc, #208	; (adr r3, d8ff0 <__ieee754_pow+0x540>)
   d8f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f22:	f000 ff19 	bl	d9d58 <__aeabi_dmul>
   d8f26:	a334      	add	r3, pc, #208	; (adr r3, d8ff8 <__ieee754_pow+0x548>)
   d8f28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f2c:	4606      	mov	r6, r0
   d8f2e:	460f      	mov	r7, r1
   d8f30:	4620      	mov	r0, r4
   d8f32:	4629      	mov	r1, r5
   d8f34:	f000 ff10 	bl	d9d58 <__aeabi_dmul>
   d8f38:	4602      	mov	r2, r0
   d8f3a:	460b      	mov	r3, r1
   d8f3c:	4630      	mov	r0, r6
   d8f3e:	4639      	mov	r1, r7
   d8f40:	f000 fd58 	bl	d99f4 <__adddf3>
   d8f44:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8f48:	f000 fd54 	bl	d99f4 <__adddf3>
   d8f4c:	4606      	mov	r6, r0
   d8f4e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8f50:	460f      	mov	r7, r1
   d8f52:	f000 fe9b 	bl	d9c8c <__aeabi_i2d>
   d8f56:	4632      	mov	r2, r6
   d8f58:	4604      	mov	r4, r0
   d8f5a:	460d      	mov	r5, r1
   d8f5c:	463b      	mov	r3, r7
   d8f5e:	4640      	mov	r0, r8
   d8f60:	4649      	mov	r1, r9
   d8f62:	f000 fd47 	bl	d99f4 <__adddf3>
   d8f66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8f6a:	f000 fd43 	bl	d99f4 <__adddf3>
   d8f6e:	4622      	mov	r2, r4
   d8f70:	462b      	mov	r3, r5
   d8f72:	f000 fd3f 	bl	d99f4 <__adddf3>
   d8f76:	9802      	ldr	r0, [sp, #8]
   d8f78:	4622      	mov	r2, r4
   d8f7a:	462b      	mov	r3, r5
   d8f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8f80:	f000 fd36 	bl	d99f0 <__aeabi_dsub>
   d8f84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8f88:	f000 fd32 	bl	d99f0 <__aeabi_dsub>
   d8f8c:	4642      	mov	r2, r8
   d8f8e:	464b      	mov	r3, r9
   d8f90:	f000 fd2e 	bl	d99f0 <__aeabi_dsub>
   d8f94:	4602      	mov	r2, r0
   d8f96:	460b      	mov	r3, r1
   d8f98:	4630      	mov	r0, r6
   d8f9a:	4639      	mov	r1, r7
   d8f9c:	f000 fd28 	bl	d99f0 <__aeabi_dsub>
   d8fa0:	4680      	mov	r8, r0
   d8fa2:	4689      	mov	r9, r1
   d8fa4:	e036      	b.n	d9014 <__ieee754_pow+0x564>
   d8fa6:	bf00      	nop
	...
   d8fb4:	3ff00000 	.word	0x3ff00000
   d8fb8:	4a454eef 	.word	0x4a454eef
   d8fbc:	3fca7e28 	.word	0x3fca7e28
   d8fc0:	93c9db65 	.word	0x93c9db65
   d8fc4:	3fcd864a 	.word	0x3fcd864a
   d8fc8:	a91d4101 	.word	0xa91d4101
   d8fcc:	3fd17460 	.word	0x3fd17460
   d8fd0:	518f264d 	.word	0x518f264d
   d8fd4:	3fd55555 	.word	0x3fd55555
   d8fd8:	db6fabff 	.word	0xdb6fabff
   d8fdc:	3fdb6db6 	.word	0x3fdb6db6
   d8fe0:	33333303 	.word	0x33333303
   d8fe4:	3fe33333 	.word	0x3fe33333
   d8fe8:	e0000000 	.word	0xe0000000
   d8fec:	3feec709 	.word	0x3feec709
   d8ff0:	dc3a03fd 	.word	0xdc3a03fd
   d8ff4:	3feec709 	.word	0x3feec709
   d8ff8:	145b01f5 	.word	0x145b01f5
   d8ffc:	be3e2fe0 	.word	0xbe3e2fe0
   d9000:	43400000 	.word	0x43400000
   d9004:	0003988e 	.word	0x0003988e
   d9008:	000bb679 	.word	0x000bb679
   d900c:	3ff00000 	.word	0x3ff00000
   d9010:	40080000 	.word	0x40080000
   d9014:	f10b 33ff 	add.w	r3, fp, #4294967295
   d9018:	ea53 030a 	orrs.w	r3, r3, sl
   d901c:	f000 8188 	beq.w	d9330 <__ieee754_pow+0x880>
   d9020:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d9380 <__ieee754_pow+0x8d0>
   d9024:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9028:	e9dd ab00 	ldrd	sl, fp, [sp]
   d902c:	4653      	mov	r3, sl
   d902e:	465c      	mov	r4, fp
   d9030:	e9cd 3400 	strd	r3, r4, [sp]
   d9034:	2300      	movs	r3, #0
   d9036:	9300      	str	r3, [sp, #0]
   d9038:	e9dd 4500 	ldrd	r4, r5, [sp]
   d903c:	4650      	mov	r0, sl
   d903e:	4622      	mov	r2, r4
   d9040:	462b      	mov	r3, r5
   d9042:	4659      	mov	r1, fp
   d9044:	f000 fcd4 	bl	d99f0 <__aeabi_dsub>
   d9048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d904c:	f000 fe84 	bl	d9d58 <__aeabi_dmul>
   d9050:	4652      	mov	r2, sl
   d9052:	4606      	mov	r6, r0
   d9054:	460f      	mov	r7, r1
   d9056:	465b      	mov	r3, fp
   d9058:	4640      	mov	r0, r8
   d905a:	4649      	mov	r1, r9
   d905c:	f000 fe7c 	bl	d9d58 <__aeabi_dmul>
   d9060:	4602      	mov	r2, r0
   d9062:	460b      	mov	r3, r1
   d9064:	4630      	mov	r0, r6
   d9066:	4639      	mov	r1, r7
   d9068:	f000 fcc4 	bl	d99f4 <__adddf3>
   d906c:	4622      	mov	r2, r4
   d906e:	4680      	mov	r8, r0
   d9070:	4689      	mov	r9, r1
   d9072:	462b      	mov	r3, r5
   d9074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9078:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d907c:	f000 fe6c 	bl	d9d58 <__aeabi_dmul>
   d9080:	460b      	mov	r3, r1
   d9082:	4602      	mov	r2, r0
   d9084:	4606      	mov	r6, r0
   d9086:	460f      	mov	r7, r1
   d9088:	4640      	mov	r0, r8
   d908a:	4649      	mov	r1, r9
   d908c:	f000 fcb2 	bl	d99f4 <__adddf3>
   d9090:	4bd5      	ldr	r3, [pc, #852]	; (d93e8 <__ieee754_pow+0x938>)
   d9092:	4299      	cmp	r1, r3
   d9094:	4604      	mov	r4, r0
   d9096:	460d      	mov	r5, r1
   d9098:	468a      	mov	sl, r1
   d909a:	f340 8123 	ble.w	d92e4 <__ieee754_pow+0x834>
   d909e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d90a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d90a6:	4303      	orrs	r3, r0
   d90a8:	f040 8218 	bne.w	d94dc <__ieee754_pow+0xa2c>
   d90ac:	a3b6      	add	r3, pc, #728	; (adr r3, d9388 <__ieee754_pow+0x8d8>)
   d90ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d90b6:	f000 fc9d 	bl	d99f4 <__adddf3>
   d90ba:	4632      	mov	r2, r6
   d90bc:	4680      	mov	r8, r0
   d90be:	4689      	mov	r9, r1
   d90c0:	463b      	mov	r3, r7
   d90c2:	4620      	mov	r0, r4
   d90c4:	4629      	mov	r1, r5
   d90c6:	f000 fc93 	bl	d99f0 <__aeabi_dsub>
   d90ca:	4602      	mov	r2, r0
   d90cc:	460b      	mov	r3, r1
   d90ce:	4640      	mov	r0, r8
   d90d0:	4649      	mov	r1, r9
   d90d2:	f001 f8d1 	bl	da278 <__aeabi_dcmpgt>
   d90d6:	2800      	cmp	r0, #0
   d90d8:	f040 8200 	bne.w	d94dc <__ieee754_pow+0xa2c>
   d90dc:	46a8      	mov	r8, r5
   d90de:	ea4f 5328 	mov.w	r3, r8, asr #20
   d90e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d90e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d90ea:	fa42 f303 	asr.w	r3, r2, r3
   d90ee:	4453      	add	r3, sl
   d90f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d90f4:	4dbd      	ldr	r5, [pc, #756]	; (d93ec <__ieee754_pow+0x93c>)
   d90f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d90fa:	4115      	asrs	r5, r2
   d90fc:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d9100:	2000      	movs	r0, #0
   d9102:	f1c2 0414 	rsb	r4, r2, #20
   d9106:	ea23 0105 	bic.w	r1, r3, r5
   d910a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d910e:	f1ba 0f00 	cmp.w	sl, #0
   d9112:	4602      	mov	r2, r0
   d9114:	460b      	mov	r3, r1
   d9116:	fa4b fb04 	asr.w	fp, fp, r4
   d911a:	4630      	mov	r0, r6
   d911c:	4639      	mov	r1, r7
   d911e:	bfb8      	it	lt
   d9120:	f1cb 0b00 	rsblt	fp, fp, #0
   d9124:	f000 fc64 	bl	d99f0 <__aeabi_dsub>
   d9128:	4602      	mov	r2, r0
   d912a:	460b      	mov	r3, r1
   d912c:	4606      	mov	r6, r0
   d912e:	460f      	mov	r7, r1
   d9130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9134:	f000 fc5e 	bl	d99f4 <__adddf3>
   d9138:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d913c:	2400      	movs	r4, #0
   d913e:	a394      	add	r3, pc, #592	; (adr r3, d9390 <__ieee754_pow+0x8e0>)
   d9140:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9144:	4620      	mov	r0, r4
   d9146:	460d      	mov	r5, r1
   d9148:	f000 fe06 	bl	d9d58 <__aeabi_dmul>
   d914c:	4632      	mov	r2, r6
   d914e:	4680      	mov	r8, r0
   d9150:	4689      	mov	r9, r1
   d9152:	463b      	mov	r3, r7
   d9154:	4620      	mov	r0, r4
   d9156:	4629      	mov	r1, r5
   d9158:	f000 fc4a 	bl	d99f0 <__aeabi_dsub>
   d915c:	4602      	mov	r2, r0
   d915e:	460b      	mov	r3, r1
   d9160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9164:	f000 fc44 	bl	d99f0 <__aeabi_dsub>
   d9168:	a38b      	add	r3, pc, #556	; (adr r3, d9398 <__ieee754_pow+0x8e8>)
   d916a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d916e:	f000 fdf3 	bl	d9d58 <__aeabi_dmul>
   d9172:	a38b      	add	r3, pc, #556	; (adr r3, d93a0 <__ieee754_pow+0x8f0>)
   d9174:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9178:	4606      	mov	r6, r0
   d917a:	460f      	mov	r7, r1
   d917c:	4620      	mov	r0, r4
   d917e:	4629      	mov	r1, r5
   d9180:	f000 fdea 	bl	d9d58 <__aeabi_dmul>
   d9184:	4602      	mov	r2, r0
   d9186:	460b      	mov	r3, r1
   d9188:	4630      	mov	r0, r6
   d918a:	4639      	mov	r1, r7
   d918c:	f000 fc32 	bl	d99f4 <__adddf3>
   d9190:	4606      	mov	r6, r0
   d9192:	460f      	mov	r7, r1
   d9194:	4602      	mov	r2, r0
   d9196:	460b      	mov	r3, r1
   d9198:	4640      	mov	r0, r8
   d919a:	4649      	mov	r1, r9
   d919c:	f000 fc2a 	bl	d99f4 <__adddf3>
   d91a0:	4642      	mov	r2, r8
   d91a2:	464b      	mov	r3, r9
   d91a4:	4604      	mov	r4, r0
   d91a6:	460d      	mov	r5, r1
   d91a8:	f000 fc22 	bl	d99f0 <__aeabi_dsub>
   d91ac:	4602      	mov	r2, r0
   d91ae:	460b      	mov	r3, r1
   d91b0:	4630      	mov	r0, r6
   d91b2:	4639      	mov	r1, r7
   d91b4:	f000 fc1c 	bl	d99f0 <__aeabi_dsub>
   d91b8:	4622      	mov	r2, r4
   d91ba:	4680      	mov	r8, r0
   d91bc:	4689      	mov	r9, r1
   d91be:	462b      	mov	r3, r5
   d91c0:	4620      	mov	r0, r4
   d91c2:	4629      	mov	r1, r5
   d91c4:	f000 fdc8 	bl	d9d58 <__aeabi_dmul>
   d91c8:	a377      	add	r3, pc, #476	; (adr r3, d93a8 <__ieee754_pow+0x8f8>)
   d91ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91ce:	4606      	mov	r6, r0
   d91d0:	460f      	mov	r7, r1
   d91d2:	f000 fdc1 	bl	d9d58 <__aeabi_dmul>
   d91d6:	a376      	add	r3, pc, #472	; (adr r3, d93b0 <__ieee754_pow+0x900>)
   d91d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91dc:	f000 fc08 	bl	d99f0 <__aeabi_dsub>
   d91e0:	4632      	mov	r2, r6
   d91e2:	463b      	mov	r3, r7
   d91e4:	f000 fdb8 	bl	d9d58 <__aeabi_dmul>
   d91e8:	a373      	add	r3, pc, #460	; (adr r3, d93b8 <__ieee754_pow+0x908>)
   d91ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91ee:	f000 fc01 	bl	d99f4 <__adddf3>
   d91f2:	4632      	mov	r2, r6
   d91f4:	463b      	mov	r3, r7
   d91f6:	f000 fdaf 	bl	d9d58 <__aeabi_dmul>
   d91fa:	a371      	add	r3, pc, #452	; (adr r3, d93c0 <__ieee754_pow+0x910>)
   d91fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9200:	f000 fbf6 	bl	d99f0 <__aeabi_dsub>
   d9204:	4632      	mov	r2, r6
   d9206:	463b      	mov	r3, r7
   d9208:	f000 fda6 	bl	d9d58 <__aeabi_dmul>
   d920c:	a36e      	add	r3, pc, #440	; (adr r3, d93c8 <__ieee754_pow+0x918>)
   d920e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9212:	f000 fbef 	bl	d99f4 <__adddf3>
   d9216:	4632      	mov	r2, r6
   d9218:	463b      	mov	r3, r7
   d921a:	f000 fd9d 	bl	d9d58 <__aeabi_dmul>
   d921e:	4602      	mov	r2, r0
   d9220:	460b      	mov	r3, r1
   d9222:	4620      	mov	r0, r4
   d9224:	4629      	mov	r1, r5
   d9226:	f000 fbe3 	bl	d99f0 <__aeabi_dsub>
   d922a:	4606      	mov	r6, r0
   d922c:	460f      	mov	r7, r1
   d922e:	4602      	mov	r2, r0
   d9230:	460b      	mov	r3, r1
   d9232:	4620      	mov	r0, r4
   d9234:	4629      	mov	r1, r5
   d9236:	f000 fd8f 	bl	d9d58 <__aeabi_dmul>
   d923a:	2200      	movs	r2, #0
   d923c:	e9cd 0100 	strd	r0, r1, [sp]
   d9240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9244:	4630      	mov	r0, r6
   d9246:	4639      	mov	r1, r7
   d9248:	f000 fbd2 	bl	d99f0 <__aeabi_dsub>
   d924c:	4602      	mov	r2, r0
   d924e:	460b      	mov	r3, r1
   d9250:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9254:	f000 feaa 	bl	d9fac <__aeabi_ddiv>
   d9258:	4642      	mov	r2, r8
   d925a:	4606      	mov	r6, r0
   d925c:	460f      	mov	r7, r1
   d925e:	464b      	mov	r3, r9
   d9260:	4620      	mov	r0, r4
   d9262:	4629      	mov	r1, r5
   d9264:	f000 fd78 	bl	d9d58 <__aeabi_dmul>
   d9268:	4642      	mov	r2, r8
   d926a:	464b      	mov	r3, r9
   d926c:	f000 fbc2 	bl	d99f4 <__adddf3>
   d9270:	4602      	mov	r2, r0
   d9272:	460b      	mov	r3, r1
   d9274:	4630      	mov	r0, r6
   d9276:	4639      	mov	r1, r7
   d9278:	f000 fbba 	bl	d99f0 <__aeabi_dsub>
   d927c:	4622      	mov	r2, r4
   d927e:	462b      	mov	r3, r5
   d9280:	f000 fbb6 	bl	d99f0 <__aeabi_dsub>
   d9284:	4602      	mov	r2, r0
   d9286:	460b      	mov	r3, r1
   d9288:	2000      	movs	r0, #0
   d928a:	4959      	ldr	r1, [pc, #356]	; (d93f0 <__ieee754_pow+0x940>)
   d928c:	f000 fbb0 	bl	d99f0 <__aeabi_dsub>
   d9290:	448a      	add	sl, r1
   d9292:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d9296:	4602      	mov	r2, r0
   d9298:	460b      	mov	r3, r1
   d929a:	f2c0 815b 	blt.w	d9554 <__ieee754_pow+0xaa4>
   d929e:	4651      	mov	r1, sl
   d92a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d92a4:	f000 fd58 	bl	d9d58 <__aeabi_dmul>
   d92a8:	ec41 0b10 	vmov	d0, r0, r1
   d92ac:	e449      	b.n	d8b42 <__ieee754_pow+0x92>
   d92ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d92b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d92b6:	ea54 030b 	orrs.w	r3, r4, fp
   d92ba:	f000 8137 	beq.w	d952c <__ieee754_pow+0xa7c>
   d92be:	f1bb 0f01 	cmp.w	fp, #1
   d92c2:	f47f ac80 	bne.w	d8bc6 <__ieee754_pow+0x116>
   d92c6:	4602      	mov	r2, r0
   d92c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d92cc:	ec43 2b10 	vmov	d0, r2, r3
   d92d0:	e437      	b.n	d8b42 <__ieee754_pow+0x92>
   d92d2:	4632      	mov	r2, r6
   d92d4:	463b      	mov	r3, r7
   d92d6:	4630      	mov	r0, r6
   d92d8:	4639      	mov	r1, r7
   d92da:	f000 fd3d 	bl	d9d58 <__aeabi_dmul>
   d92de:	ec41 0b10 	vmov	d0, r0, r1
   d92e2:	e42e      	b.n	d8b42 <__ieee754_pow+0x92>
   d92e4:	4b43      	ldr	r3, [pc, #268]	; (d93f4 <__ieee754_pow+0x944>)
   d92e6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d92ea:	4598      	cmp	r8, r3
   d92ec:	f340 8115 	ble.w	d951a <__ieee754_pow+0xa6a>
   d92f0:	4b41      	ldr	r3, [pc, #260]	; (d93f8 <__ieee754_pow+0x948>)
   d92f2:	440b      	add	r3, r1
   d92f4:	4303      	orrs	r3, r0
   d92f6:	d10c      	bne.n	d9312 <__ieee754_pow+0x862>
   d92f8:	4632      	mov	r2, r6
   d92fa:	463b      	mov	r3, r7
   d92fc:	f000 fb78 	bl	d99f0 <__aeabi_dsub>
   d9300:	4602      	mov	r2, r0
   d9302:	460b      	mov	r3, r1
   d9304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9308:	f000 ffa2 	bl	da250 <__aeabi_dcmple>
   d930c:	2800      	cmp	r0, #0
   d930e:	f43f aee6 	beq.w	d90de <__ieee754_pow+0x62e>
   d9312:	a32f      	add	r3, pc, #188	; (adr r3, d93d0 <__ieee754_pow+0x920>)
   d9314:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d931c:	f000 fd1c 	bl	d9d58 <__aeabi_dmul>
   d9320:	a32b      	add	r3, pc, #172	; (adr r3, d93d0 <__ieee754_pow+0x920>)
   d9322:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9326:	f000 fd17 	bl	d9d58 <__aeabi_dmul>
   d932a:	ec41 0b10 	vmov	d0, r0, r1
   d932e:	e408      	b.n	d8b42 <__ieee754_pow+0x92>
   d9330:	ed9f 7b29 	vldr	d7, [pc, #164]	; d93d8 <__ieee754_pow+0x928>
   d9334:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9338:	e676      	b.n	d9028 <__ieee754_pow+0x578>
   d933a:	f1b9 0f00 	cmp.w	r9, #0
   d933e:	f6bf ac8e 	bge.w	d8c5e <__ieee754_pow+0x1ae>
   d9342:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9346:	ee00 3a10 	vmov	s0, r3
   d934a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d934e:	ee00 3a90 	vmov	s1, r3
   d9352:	f7ff bbf6 	b.w	d8b42 <__ieee754_pow+0x92>
   d9356:	4602      	mov	r2, r0
   d9358:	460b      	mov	r3, r1
   d935a:	2000      	movs	r0, #0
   d935c:	4924      	ldr	r1, [pc, #144]	; (d93f0 <__ieee754_pow+0x940>)
   d935e:	f000 fe25 	bl	d9fac <__aeabi_ddiv>
   d9362:	e42d      	b.n	d8bc0 <__ieee754_pow+0x110>
   d9364:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d93e0 <__ieee754_pow+0x930>
   d9368:	ed8d 7b08 	vstr	d7, [sp, #32]
   d936c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9370:	ed9f 7b03 	vldr	d7, [pc, #12]	; d9380 <__ieee754_pow+0x8d0>
   d9374:	f04f 0800 	mov.w	r8, #0
   d9378:	ed8d 7b06 	vstr	d7, [sp, #24]
   d937c:	e4be      	b.n	d8cfc <__ieee754_pow+0x24c>
   d937e:	bf00      	nop
   d9380:	00000000 	.word	0x00000000
   d9384:	3ff00000 	.word	0x3ff00000
   d9388:	652b82fe 	.word	0x652b82fe
   d938c:	3c971547 	.word	0x3c971547
   d9390:	00000000 	.word	0x00000000
   d9394:	3fe62e43 	.word	0x3fe62e43
   d9398:	fefa39ef 	.word	0xfefa39ef
   d939c:	3fe62e42 	.word	0x3fe62e42
   d93a0:	0ca86c39 	.word	0x0ca86c39
   d93a4:	be205c61 	.word	0xbe205c61
   d93a8:	72bea4d0 	.word	0x72bea4d0
   d93ac:	3e663769 	.word	0x3e663769
   d93b0:	c5d26bf1 	.word	0xc5d26bf1
   d93b4:	3ebbbd41 	.word	0x3ebbbd41
   d93b8:	af25de2c 	.word	0xaf25de2c
   d93bc:	3f11566a 	.word	0x3f11566a
   d93c0:	16bebd93 	.word	0x16bebd93
   d93c4:	3f66c16c 	.word	0x3f66c16c
   d93c8:	5555553e 	.word	0x5555553e
   d93cc:	3fc55555 	.word	0x3fc55555
   d93d0:	c2f8f359 	.word	0xc2f8f359
   d93d4:	01a56e1f 	.word	0x01a56e1f
   d93d8:	00000000 	.word	0x00000000
   d93dc:	bff00000 	.word	0xbff00000
	...
   d93e8:	408fffff 	.word	0x408fffff
   d93ec:	000fffff 	.word	0x000fffff
   d93f0:	3ff00000 	.word	0x3ff00000
   d93f4:	4090cbff 	.word	0x4090cbff
   d93f8:	3f6f3400 	.word	0x3f6f3400
   d93fc:	4b6c      	ldr	r3, [pc, #432]	; (d95b0 <__ieee754_pow+0xb00>)
   d93fe:	429c      	cmp	r4, r3
   d9400:	f77f ac2a 	ble.w	d8c58 <__ieee754_pow+0x1a8>
   d9404:	4b6b      	ldr	r3, [pc, #428]	; (d95b4 <__ieee754_pow+0xb04>)
   d9406:	429c      	cmp	r4, r3
   d9408:	f73f abc3 	bgt.w	d8b92 <__ieee754_pow+0xe2>
   d940c:	2200      	movs	r2, #0
   d940e:	4b69      	ldr	r3, [pc, #420]	; (d95b4 <__ieee754_pow+0xb04>)
   d9410:	f000 faee 	bl	d99f0 <__aeabi_dsub>
   d9414:	a356      	add	r3, pc, #344	; (adr r3, d9570 <__ieee754_pow+0xac0>)
   d9416:	e9d3 2300 	ldrd	r2, r3, [r3]
   d941a:	4604      	mov	r4, r0
   d941c:	460d      	mov	r5, r1
   d941e:	f000 fc9b 	bl	d9d58 <__aeabi_dmul>
   d9422:	a355      	add	r3, pc, #340	; (adr r3, d9578 <__ieee754_pow+0xac8>)
   d9424:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9428:	4680      	mov	r8, r0
   d942a:	4689      	mov	r9, r1
   d942c:	4620      	mov	r0, r4
   d942e:	4629      	mov	r1, r5
   d9430:	f000 fc92 	bl	d9d58 <__aeabi_dmul>
   d9434:	2200      	movs	r2, #0
   d9436:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d943a:	4b5f      	ldr	r3, [pc, #380]	; (d95b8 <__ieee754_pow+0xb08>)
   d943c:	4620      	mov	r0, r4
   d943e:	4629      	mov	r1, r5
   d9440:	f000 fc8a 	bl	d9d58 <__aeabi_dmul>
   d9444:	4602      	mov	r2, r0
   d9446:	460b      	mov	r3, r1
   d9448:	a14d      	add	r1, pc, #308	; (adr r1, d9580 <__ieee754_pow+0xad0>)
   d944a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d944e:	f000 facf 	bl	d99f0 <__aeabi_dsub>
   d9452:	4622      	mov	r2, r4
   d9454:	462b      	mov	r3, r5
   d9456:	f000 fc7f 	bl	d9d58 <__aeabi_dmul>
   d945a:	4602      	mov	r2, r0
   d945c:	460b      	mov	r3, r1
   d945e:	2000      	movs	r0, #0
   d9460:	4956      	ldr	r1, [pc, #344]	; (d95bc <__ieee754_pow+0xb0c>)
   d9462:	f000 fac5 	bl	d99f0 <__aeabi_dsub>
   d9466:	4622      	mov	r2, r4
   d9468:	462b      	mov	r3, r5
   d946a:	4606      	mov	r6, r0
   d946c:	460f      	mov	r7, r1
   d946e:	4620      	mov	r0, r4
   d9470:	4629      	mov	r1, r5
   d9472:	f000 fc71 	bl	d9d58 <__aeabi_dmul>
   d9476:	4602      	mov	r2, r0
   d9478:	460b      	mov	r3, r1
   d947a:	4630      	mov	r0, r6
   d947c:	4639      	mov	r1, r7
   d947e:	f000 fc6b 	bl	d9d58 <__aeabi_dmul>
   d9482:	a341      	add	r3, pc, #260	; (adr r3, d9588 <__ieee754_pow+0xad8>)
   d9484:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9488:	f000 fc66 	bl	d9d58 <__aeabi_dmul>
   d948c:	4602      	mov	r2, r0
   d948e:	460b      	mov	r3, r1
   d9490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9494:	f000 faac 	bl	d99f0 <__aeabi_dsub>
   d9498:	4602      	mov	r2, r0
   d949a:	460b      	mov	r3, r1
   d949c:	4604      	mov	r4, r0
   d949e:	460d      	mov	r5, r1
   d94a0:	4640      	mov	r0, r8
   d94a2:	4649      	mov	r1, r9
   d94a4:	f000 faa6 	bl	d99f4 <__adddf3>
   d94a8:	4642      	mov	r2, r8
   d94aa:	464b      	mov	r3, r9
   d94ac:	2000      	movs	r0, #0
   d94ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d94b2:	f000 fa9d 	bl	d99f0 <__aeabi_dsub>
   d94b6:	4602      	mov	r2, r0
   d94b8:	460b      	mov	r3, r1
   d94ba:	4620      	mov	r0, r4
   d94bc:	4629      	mov	r1, r5
   d94be:	f000 fa97 	bl	d99f0 <__aeabi_dsub>
   d94c2:	4680      	mov	r8, r0
   d94c4:	4689      	mov	r9, r1
   d94c6:	e5a5      	b.n	d9014 <__ieee754_pow+0x564>
   d94c8:	4632      	mov	r2, r6
   d94ca:	463b      	mov	r3, r7
   d94cc:	2000      	movs	r0, #0
   d94ce:	4939      	ldr	r1, [pc, #228]	; (d95b4 <__ieee754_pow+0xb04>)
   d94d0:	f000 fd6c 	bl	d9fac <__aeabi_ddiv>
   d94d4:	ec41 0b10 	vmov	d0, r0, r1
   d94d8:	f7ff bb33 	b.w	d8b42 <__ieee754_pow+0x92>
   d94dc:	a32c      	add	r3, pc, #176	; (adr r3, d9590 <__ieee754_pow+0xae0>)
   d94de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d94e6:	f000 fc37 	bl	d9d58 <__aeabi_dmul>
   d94ea:	a329      	add	r3, pc, #164	; (adr r3, d9590 <__ieee754_pow+0xae0>)
   d94ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94f0:	f000 fc32 	bl	d9d58 <__aeabi_dmul>
   d94f4:	ec41 0b10 	vmov	d0, r0, r1
   d94f8:	f7ff bb23 	b.w	d8b42 <__ieee754_pow+0x92>
   d94fc:	f1be 0f00 	cmp.w	lr, #0
   d9500:	f47f ab2a 	bne.w	d8b58 <__ieee754_pow+0xa8>
   d9504:	f1c3 0314 	rsb	r3, r3, #20
   d9508:	fa48 f203 	asr.w	r2, r8, r3
   d950c:	fa02 f303 	lsl.w	r3, r2, r3
   d9510:	4598      	cmp	r8, r3
   d9512:	d027      	beq.n	d9564 <__ieee754_pow+0xab4>
   d9514:	46f3      	mov	fp, lr
   d9516:	f7ff baf7 	b.w	d8b08 <__ieee754_pow+0x58>
   d951a:	4b28      	ldr	r3, [pc, #160]	; (d95bc <__ieee754_pow+0xb0c>)
   d951c:	4598      	cmp	r8, r3
   d951e:	f73f adde 	bgt.w	d90de <__ieee754_pow+0x62e>
   d9522:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9526:	469a      	mov	sl, r3
   d9528:	469b      	mov	fp, r3
   d952a:	e607      	b.n	d913c <__ieee754_pow+0x68c>
   d952c:	4602      	mov	r2, r0
   d952e:	460b      	mov	r3, r1
   d9530:	f7ff bb89 	b.w	d8c46 <__ieee754_pow+0x196>
   d9534:	ed9f 7b18 	vldr	d7, [pc, #96]	; d9598 <__ieee754_pow+0xae8>
   d9538:	ed8d 7b08 	vstr	d7, [sp, #32]
   d953c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d95a0 <__ieee754_pow+0xaf0>
   d9540:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9544:	ed9f 7b18 	vldr	d7, [pc, #96]	; d95a8 <__ieee754_pow+0xaf8>
   d9548:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d954c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9550:	f7ff bbd4 	b.w	d8cfc <__ieee754_pow+0x24c>
   d9554:	4658      	mov	r0, fp
   d9556:	ec43 2b10 	vmov	d0, r2, r3
   d955a:	f000 f9b1 	bl	d98c0 <scalbn>
   d955e:	ec51 0b10 	vmov	r0, r1, d0
   d9562:	e69d      	b.n	d92a0 <__ieee754_pow+0x7f0>
   d9564:	f002 0201 	and.w	r2, r2, #1
   d9568:	f1c2 0b02 	rsb	fp, r2, #2
   d956c:	f7ff bacc 	b.w	d8b08 <__ieee754_pow+0x58>
   d9570:	60000000 	.word	0x60000000
   d9574:	3ff71547 	.word	0x3ff71547
   d9578:	f85ddf44 	.word	0xf85ddf44
   d957c:	3e54ae0b 	.word	0x3e54ae0b
   d9580:	55555555 	.word	0x55555555
   d9584:	3fd55555 	.word	0x3fd55555
   d9588:	652b82fe 	.word	0x652b82fe
   d958c:	3ff71547 	.word	0x3ff71547
   d9590:	8800759c 	.word	0x8800759c
   d9594:	7e37e43c 	.word	0x7e37e43c
   d9598:	40000000 	.word	0x40000000
   d959c:	3fe2b803 	.word	0x3fe2b803
   d95a0:	43cfd006 	.word	0x43cfd006
   d95a4:	3e4cfdeb 	.word	0x3e4cfdeb
   d95a8:	00000000 	.word	0x00000000
   d95ac:	3ff80000 	.word	0x3ff80000
   d95b0:	3feffffe 	.word	0x3feffffe
   d95b4:	3ff00000 	.word	0x3ff00000
   d95b8:	3fd00000 	.word	0x3fd00000
   d95bc:	3fe00000 	.word	0x3fe00000

000d95c0 <__ieee754_sqrt>:
   d95c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95c4:	4965      	ldr	r1, [pc, #404]	; (d975c <__ieee754_sqrt+0x19c>)
   d95c6:	ec55 4b10 	vmov	r4, r5, d0
   d95ca:	460e      	mov	r6, r1
   d95cc:	4029      	ands	r1, r5
   d95ce:	42b1      	cmp	r1, r6
   d95d0:	f000 8097 	beq.w	d9702 <__ieee754_sqrt+0x142>
   d95d4:	2d00      	cmp	r5, #0
   d95d6:	462b      	mov	r3, r5
   d95d8:	ee10 2a10 	vmov	r2, s0
   d95dc:	dd74      	ble.n	d96c8 <__ieee754_sqrt+0x108>
   d95de:	152f      	asrs	r7, r5, #20
   d95e0:	d07f      	beq.n	d96e2 <__ieee754_sqrt+0x122>
   d95e2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d95e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d95ea:	07f9      	lsls	r1, r7, #31
   d95ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d95f0:	d465      	bmi.n	d96be <__ieee754_sqrt+0xfe>
   d95f2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d95f6:	2600      	movs	r6, #0
   d95f8:	440b      	add	r3, r1
   d95fa:	107f      	asrs	r7, r7, #1
   d95fc:	0052      	lsls	r2, r2, #1
   d95fe:	46b6      	mov	lr, r6
   d9600:	2016      	movs	r0, #22
   d9602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d9606:	eb0e 0401 	add.w	r4, lr, r1
   d960a:	429c      	cmp	r4, r3
   d960c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d9610:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9614:	dc03      	bgt.n	d961e <__ieee754_sqrt+0x5e>
   d9616:	1b1b      	subs	r3, r3, r4
   d9618:	eb04 0e01 	add.w	lr, r4, r1
   d961c:	440e      	add	r6, r1
   d961e:	3801      	subs	r0, #1
   d9620:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d9624:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9628:	d1ed      	bne.n	d9606 <__ieee754_sqrt+0x46>
   d962a:	4684      	mov	ip, r0
   d962c:	2420      	movs	r4, #32
   d962e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d9632:	e009      	b.n	d9648 <__ieee754_sqrt+0x88>
   d9634:	d020      	beq.n	d9678 <__ieee754_sqrt+0xb8>
   d9636:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d963a:	3c01      	subs	r4, #1
   d963c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d9640:	442b      	add	r3, r5
   d9642:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9646:	d020      	beq.n	d968a <__ieee754_sqrt+0xca>
   d9648:	459e      	cmp	lr, r3
   d964a:	eb01 050c 	add.w	r5, r1, ip
   d964e:	daf1      	bge.n	d9634 <__ieee754_sqrt+0x74>
   d9650:	2d00      	cmp	r5, #0
   d9652:	eb05 0c01 	add.w	ip, r5, r1
   d9656:	db09      	blt.n	d966c <__ieee754_sqrt+0xac>
   d9658:	46f0      	mov	r8, lr
   d965a:	4295      	cmp	r5, r2
   d965c:	ebce 0303 	rsb	r3, lr, r3
   d9660:	d900      	bls.n	d9664 <__ieee754_sqrt+0xa4>
   d9662:	3b01      	subs	r3, #1
   d9664:	1b52      	subs	r2, r2, r5
   d9666:	4408      	add	r0, r1
   d9668:	46c6      	mov	lr, r8
   d966a:	e7e4      	b.n	d9636 <__ieee754_sqrt+0x76>
   d966c:	f1bc 0f00 	cmp.w	ip, #0
   d9670:	dbf2      	blt.n	d9658 <__ieee754_sqrt+0x98>
   d9672:	f10e 0801 	add.w	r8, lr, #1
   d9676:	e7f0      	b.n	d965a <__ieee754_sqrt+0x9a>
   d9678:	4295      	cmp	r5, r2
   d967a:	d81e      	bhi.n	d96ba <__ieee754_sqrt+0xfa>
   d967c:	2d00      	cmp	r5, #0
   d967e:	eb05 0c01 	add.w	ip, r5, r1
   d9682:	db50      	blt.n	d9726 <__ieee754_sqrt+0x166>
   d9684:	4698      	mov	r8, r3
   d9686:	2300      	movs	r3, #0
   d9688:	e7ec      	b.n	d9664 <__ieee754_sqrt+0xa4>
   d968a:	4313      	orrs	r3, r2
   d968c:	d004      	beq.n	d9698 <__ieee754_sqrt+0xd8>
   d968e:	1c42      	adds	r2, r0, #1
   d9690:	d04d      	beq.n	d972e <__ieee754_sqrt+0x16e>
   d9692:	f000 0301 	and.w	r3, r0, #1
   d9696:	4418      	add	r0, r3
   d9698:	0840      	lsrs	r0, r0, #1
   d969a:	1071      	asrs	r1, r6, #1
   d969c:	07f3      	lsls	r3, r6, #31
   d969e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d96a2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d96a6:	bf48      	it	mi
   d96a8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d96ac:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d96b0:	4602      	mov	r2, r0
   d96b2:	ec43 2b10 	vmov	d0, r2, r3
   d96b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d96ba:	4673      	mov	r3, lr
   d96bc:	e7bb      	b.n	d9636 <__ieee754_sqrt+0x76>
   d96be:	005b      	lsls	r3, r3, #1
   d96c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d96c4:	0052      	lsls	r2, r2, #1
   d96c6:	e794      	b.n	d95f2 <__ieee754_sqrt+0x32>
   d96c8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d96cc:	4321      	orrs	r1, r4
   d96ce:	d028      	beq.n	d9722 <__ieee754_sqrt+0x162>
   d96d0:	bbad      	cbnz	r5, d973e <__ieee754_sqrt+0x17e>
   d96d2:	462f      	mov	r7, r5
   d96d4:	0ad3      	lsrs	r3, r2, #11
   d96d6:	3f15      	subs	r7, #21
   d96d8:	0552      	lsls	r2, r2, #21
   d96da:	2b00      	cmp	r3, #0
   d96dc:	d0fa      	beq.n	d96d4 <__ieee754_sqrt+0x114>
   d96de:	02dd      	lsls	r5, r3, #11
   d96e0:	d428      	bmi.n	d9734 <__ieee754_sqrt+0x174>
   d96e2:	2100      	movs	r1, #0
   d96e4:	e000      	b.n	d96e8 <__ieee754_sqrt+0x128>
   d96e6:	4601      	mov	r1, r0
   d96e8:	005b      	lsls	r3, r3, #1
   d96ea:	02dc      	lsls	r4, r3, #11
   d96ec:	f101 0001 	add.w	r0, r1, #1
   d96f0:	d5f9      	bpl.n	d96e6 <__ieee754_sqrt+0x126>
   d96f2:	f1c0 0420 	rsb	r4, r0, #32
   d96f6:	fa22 f404 	lsr.w	r4, r2, r4
   d96fa:	4323      	orrs	r3, r4
   d96fc:	1a7f      	subs	r7, r7, r1
   d96fe:	4082      	lsls	r2, r0
   d9700:	e76f      	b.n	d95e2 <__ieee754_sqrt+0x22>
   d9702:	ee10 2a10 	vmov	r2, s0
   d9706:	462b      	mov	r3, r5
   d9708:	ee10 0a10 	vmov	r0, s0
   d970c:	4629      	mov	r1, r5
   d970e:	f000 fb23 	bl	d9d58 <__aeabi_dmul>
   d9712:	4622      	mov	r2, r4
   d9714:	462b      	mov	r3, r5
   d9716:	f000 f96d 	bl	d99f4 <__adddf3>
   d971a:	ec41 0b10 	vmov	d0, r0, r1
   d971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9726:	f1bc 0f00 	cmp.w	ip, #0
   d972a:	daa2      	bge.n	d9672 <__ieee754_sqrt+0xb2>
   d972c:	e7aa      	b.n	d9684 <__ieee754_sqrt+0xc4>
   d972e:	3601      	adds	r6, #1
   d9730:	4620      	mov	r0, r4
   d9732:	e7b2      	b.n	d969a <__ieee754_sqrt+0xda>
   d9734:	2420      	movs	r4, #32
   d9736:	f04f 31ff 	mov.w	r1, #4294967295
   d973a:	2000      	movs	r0, #0
   d973c:	e7db      	b.n	d96f6 <__ieee754_sqrt+0x136>
   d973e:	ee10 2a10 	vmov	r2, s0
   d9742:	462b      	mov	r3, r5
   d9744:	4620      	mov	r0, r4
   d9746:	4629      	mov	r1, r5
   d9748:	f000 f952 	bl	d99f0 <__aeabi_dsub>
   d974c:	4602      	mov	r2, r0
   d974e:	460b      	mov	r3, r1
   d9750:	f000 fc2c 	bl	d9fac <__aeabi_ddiv>
   d9754:	ec41 0b10 	vmov	d0, r0, r1
   d9758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d975c:	7ff00000 	.word	0x7ff00000

000d9760 <fabs>:
   d9760:	ec53 2b10 	vmov	r2, r3, d0
   d9764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d9768:	ec43 2b10 	vmov	d0, r2, r3
   d976c:	4770      	bx	lr
   d976e:	bf00      	nop

000d9770 <finite>:
   d9770:	ee10 3a90 	vmov	r3, s1
   d9774:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d9778:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d977c:	0fc0      	lsrs	r0, r0, #31
   d977e:	4770      	bx	lr

000d9780 <matherr>:
   d9780:	2000      	movs	r0, #0
   d9782:	4770      	bx	lr
   d9784:	0000      	movs	r0, r0
	...

000d9788 <nan>:
   d9788:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9790 <nan+0x8>
   d978c:	4770      	bx	lr
   d978e:	bf00      	nop
   d9790:	00000000 	.word	0x00000000
   d9794:	7ff80000 	.word	0x7ff80000

000d9798 <rint>:
   d9798:	b5f0      	push	{r4, r5, r6, r7, lr}
   d979a:	ec53 2b10 	vmov	r2, r3, d0
   d979e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d97a2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d97a6:	2813      	cmp	r0, #19
   d97a8:	b083      	sub	sp, #12
   d97aa:	4619      	mov	r1, r3
   d97ac:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d97b0:	ee10 5a10 	vmov	r5, s0
   d97b4:	dc2f      	bgt.n	d9816 <rint+0x7e>
   d97b6:	2800      	cmp	r0, #0
   d97b8:	db49      	blt.n	d984e <rint+0xb6>
   d97ba:	4e3f      	ldr	r6, [pc, #252]	; (d98b8 <rint+0x120>)
   d97bc:	4106      	asrs	r6, r0
   d97be:	ea03 0706 	and.w	r7, r3, r6
   d97c2:	4317      	orrs	r7, r2
   d97c4:	d02c      	beq.n	d9820 <rint+0x88>
   d97c6:	0876      	lsrs	r6, r6, #1
   d97c8:	4033      	ands	r3, r6
   d97ca:	431d      	orrs	r5, r3
   d97cc:	d00c      	beq.n	d97e8 <rint+0x50>
   d97ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d97d2:	2813      	cmp	r0, #19
   d97d4:	ea21 0606 	bic.w	r6, r1, r6
   d97d8:	fa43 f100 	asr.w	r1, r3, r0
   d97dc:	ea41 0106 	orr.w	r1, r1, r6
   d97e0:	bf0c      	ite	eq
   d97e2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d97e6:	2500      	movne	r5, #0
   d97e8:	4834      	ldr	r0, [pc, #208]	; (d98bc <rint+0x124>)
   d97ea:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d97ee:	462a      	mov	r2, r5
   d97f0:	e9d4 4500 	ldrd	r4, r5, [r4]
   d97f4:	4610      	mov	r0, r2
   d97f6:	462b      	mov	r3, r5
   d97f8:	4622      	mov	r2, r4
   d97fa:	f000 f8fb 	bl	d99f4 <__adddf3>
   d97fe:	e9cd 0100 	strd	r0, r1, [sp]
   d9802:	4622      	mov	r2, r4
   d9804:	462b      	mov	r3, r5
   d9806:	e9dd 0100 	ldrd	r0, r1, [sp]
   d980a:	f000 f8f1 	bl	d99f0 <__aeabi_dsub>
   d980e:	ec41 0b10 	vmov	d0, r0, r1
   d9812:	b003      	add	sp, #12
   d9814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9816:	2833      	cmp	r0, #51	; 0x33
   d9818:	dd06      	ble.n	d9828 <rint+0x90>
   d981a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d981e:	d042      	beq.n	d98a6 <rint+0x10e>
   d9820:	ec43 2b10 	vmov	d0, r2, r3
   d9824:	b003      	add	sp, #12
   d9826:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9828:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d982c:	f04f 30ff 	mov.w	r0, #4294967295
   d9830:	40f0      	lsrs	r0, r6
   d9832:	4202      	tst	r2, r0
   d9834:	d0f4      	beq.n	d9820 <rint+0x88>
   d9836:	0840      	lsrs	r0, r0, #1
   d9838:	4202      	tst	r2, r0
   d983a:	d0d5      	beq.n	d97e8 <rint+0x50>
   d983c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9840:	ea25 0000 	bic.w	r0, r5, r0
   d9844:	fa43 f606 	asr.w	r6, r3, r6
   d9848:	ea46 0500 	orr.w	r5, r6, r0
   d984c:	e7cc      	b.n	d97e8 <rint+0x50>
   d984e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9852:	4310      	orrs	r0, r2
   d9854:	ee10 7a10 	vmov	r7, s0
   d9858:	d0e2      	beq.n	d9820 <rint+0x88>
   d985a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d985e:	4307      	orrs	r7, r0
   d9860:	4278      	negs	r0, r7
   d9862:	4307      	orrs	r7, r0
   d9864:	4815      	ldr	r0, [pc, #84]	; (d98bc <rint+0x124>)
   d9866:	0c59      	lsrs	r1, r3, #17
   d9868:	0b3f      	lsrs	r7, r7, #12
   d986a:	0449      	lsls	r1, r1, #17
   d986c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d9870:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d9874:	ea47 0301 	orr.w	r3, r7, r1
   d9878:	e9d0 6700 	ldrd	r6, r7, [r0]
   d987c:	4619      	mov	r1, r3
   d987e:	4610      	mov	r0, r2
   d9880:	463b      	mov	r3, r7
   d9882:	4632      	mov	r2, r6
   d9884:	f000 f8b6 	bl	d99f4 <__adddf3>
   d9888:	e9cd 0100 	strd	r0, r1, [sp]
   d988c:	463b      	mov	r3, r7
   d988e:	4632      	mov	r2, r6
   d9890:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9894:	f000 f8ac 	bl	d99f0 <__aeabi_dsub>
   d9898:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d989c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d98a0:	ec41 0b10 	vmov	d0, r0, r1
   d98a4:	e7be      	b.n	d9824 <rint+0x8c>
   d98a6:	ee10 0a10 	vmov	r0, s0
   d98aa:	4619      	mov	r1, r3
   d98ac:	f000 f8a2 	bl	d99f4 <__adddf3>
   d98b0:	ec41 0b10 	vmov	d0, r0, r1
   d98b4:	e7b6      	b.n	d9824 <rint+0x8c>
   d98b6:	bf00      	nop
   d98b8:	000fffff 	.word	0x000fffff
   d98bc:	000dbfe0 	.word	0x000dbfe0

000d98c0 <scalbn>:
   d98c0:	ec53 2b10 	vmov	r2, r3, d0
   d98c4:	b570      	push	{r4, r5, r6, lr}
   d98c6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d98ca:	4619      	mov	r1, r3
   d98cc:	4605      	mov	r5, r0
   d98ce:	bb14      	cbnz	r4, d9916 <scalbn+0x56>
   d98d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d98d4:	4311      	orrs	r1, r2
   d98d6:	d02a      	beq.n	d992e <scalbn+0x6e>
   d98d8:	4619      	mov	r1, r3
   d98da:	2200      	movs	r2, #0
   d98dc:	4b38      	ldr	r3, [pc, #224]	; (d99c0 <scalbn+0x100>)
   d98de:	4e39      	ldr	r6, [pc, #228]	; (d99c4 <scalbn+0x104>)
   d98e0:	ee10 0a10 	vmov	r0, s0
   d98e4:	f000 fa38 	bl	d9d58 <__aeabi_dmul>
   d98e8:	42b5      	cmp	r5, r6
   d98ea:	4602      	mov	r2, r0
   d98ec:	460b      	mov	r3, r1
   d98ee:	db1f      	blt.n	d9930 <scalbn+0x70>
   d98f0:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d98f4:	3c36      	subs	r4, #54	; 0x36
   d98f6:	442c      	add	r4, r5
   d98f8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d98fc:	4284      	cmp	r4, r0
   d98fe:	dc1f      	bgt.n	d9940 <scalbn+0x80>
   d9900:	2c00      	cmp	r4, #0
   d9902:	dd2d      	ble.n	d9960 <scalbn+0xa0>
   d9904:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9908:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d990c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9910:	ec43 2b10 	vmov	d0, r2, r3
   d9914:	bd70      	pop	{r4, r5, r6, pc}
   d9916:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d991a:	4284      	cmp	r4, r0
   d991c:	d1eb      	bne.n	d98f6 <scalbn+0x36>
   d991e:	ee10 0a10 	vmov	r0, s0
   d9922:	4619      	mov	r1, r3
   d9924:	f000 f866 	bl	d99f4 <__adddf3>
   d9928:	ec41 0b10 	vmov	d0, r0, r1
   d992c:	bd70      	pop	{r4, r5, r6, pc}
   d992e:	bd70      	pop	{r4, r5, r6, pc}
   d9930:	a31f      	add	r3, pc, #124	; (adr r3, d99b0 <scalbn+0xf0>)
   d9932:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9936:	f000 fa0f 	bl	d9d58 <__aeabi_dmul>
   d993a:	ec41 0b10 	vmov	d0, r0, r1
   d993e:	bd70      	pop	{r4, r5, r6, pc}
   d9940:	ec43 2b11 	vmov	d1, r2, r3
   d9944:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d99b8 <scalbn+0xf8>
   d9948:	f000 f840 	bl	d99cc <copysign>
   d994c:	a31a      	add	r3, pc, #104	; (adr r3, d99b8 <scalbn+0xf8>)
   d994e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9952:	ec51 0b10 	vmov	r0, r1, d0
   d9956:	f000 f9ff 	bl	d9d58 <__aeabi_dmul>
   d995a:	ec41 0b10 	vmov	d0, r0, r1
   d995e:	bd70      	pop	{r4, r5, r6, pc}
   d9960:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d9964:	da13      	bge.n	d998e <scalbn+0xce>
   d9966:	f24c 3150 	movw	r1, #50000	; 0xc350
   d996a:	428d      	cmp	r5, r1
   d996c:	ec43 2b11 	vmov	d1, r2, r3
   d9970:	dce8      	bgt.n	d9944 <scalbn+0x84>
   d9972:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d99b0 <scalbn+0xf0>
   d9976:	f000 f829 	bl	d99cc <copysign>
   d997a:	a30d      	add	r3, pc, #52	; (adr r3, d99b0 <scalbn+0xf0>)
   d997c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9980:	ec51 0b10 	vmov	r0, r1, d0
   d9984:	f000 f9e8 	bl	d9d58 <__aeabi_dmul>
   d9988:	ec41 0b10 	vmov	d0, r0, r1
   d998c:	bd70      	pop	{r4, r5, r6, pc}
   d998e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9992:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d9996:	3436      	adds	r4, #54	; 0x36
   d9998:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d999c:	4610      	mov	r0, r2
   d999e:	4619      	mov	r1, r3
   d99a0:	2200      	movs	r2, #0
   d99a2:	4b09      	ldr	r3, [pc, #36]	; (d99c8 <scalbn+0x108>)
   d99a4:	f000 f9d8 	bl	d9d58 <__aeabi_dmul>
   d99a8:	ec41 0b10 	vmov	d0, r0, r1
   d99ac:	bd70      	pop	{r4, r5, r6, pc}
   d99ae:	bf00      	nop
   d99b0:	c2f8f359 	.word	0xc2f8f359
   d99b4:	01a56e1f 	.word	0x01a56e1f
   d99b8:	8800759c 	.word	0x8800759c
   d99bc:	7e37e43c 	.word	0x7e37e43c
   d99c0:	43500000 	.word	0x43500000
   d99c4:	ffff3cb0 	.word	0xffff3cb0
   d99c8:	3c900000 	.word	0x3c900000

000d99cc <copysign>:
   d99cc:	ec53 2b10 	vmov	r2, r3, d0
   d99d0:	ee11 0a90 	vmov	r0, s3
   d99d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d99d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d99dc:	ea41 0300 	orr.w	r3, r1, r0
   d99e0:	ec43 2b10 	vmov	d0, r2, r3
   d99e4:	4770      	bx	lr
   d99e6:	bf00      	nop

000d99e8 <__aeabi_drsub>:
   d99e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d99ec:	e002      	b.n	d99f4 <__adddf3>
   d99ee:	bf00      	nop

000d99f0 <__aeabi_dsub>:
   d99f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d99f4 <__adddf3>:
   d99f4:	b530      	push	{r4, r5, lr}
   d99f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d99fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d99fe:	ea94 0f05 	teq	r4, r5
   d9a02:	bf08      	it	eq
   d9a04:	ea90 0f02 	teqeq	r0, r2
   d9a08:	bf1f      	itttt	ne
   d9a0a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9a0e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9a12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9a16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a1a:	f000 80e2 	beq.w	d9be2 <__adddf3+0x1ee>
   d9a1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9a22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9a26:	bfb8      	it	lt
   d9a28:	426d      	neglt	r5, r5
   d9a2a:	dd0c      	ble.n	d9a46 <__adddf3+0x52>
   d9a2c:	442c      	add	r4, r5
   d9a2e:	ea80 0202 	eor.w	r2, r0, r2
   d9a32:	ea81 0303 	eor.w	r3, r1, r3
   d9a36:	ea82 0000 	eor.w	r0, r2, r0
   d9a3a:	ea83 0101 	eor.w	r1, r3, r1
   d9a3e:	ea80 0202 	eor.w	r2, r0, r2
   d9a42:	ea81 0303 	eor.w	r3, r1, r3
   d9a46:	2d36      	cmp	r5, #54	; 0x36
   d9a48:	bf88      	it	hi
   d9a4a:	bd30      	pophi	{r4, r5, pc}
   d9a4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a5c:	d002      	beq.n	d9a64 <__adddf3+0x70>
   d9a5e:	4240      	negs	r0, r0
   d9a60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9a68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9a70:	d002      	beq.n	d9a78 <__adddf3+0x84>
   d9a72:	4252      	negs	r2, r2
   d9a74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9a78:	ea94 0f05 	teq	r4, r5
   d9a7c:	f000 80a7 	beq.w	d9bce <__adddf3+0x1da>
   d9a80:	f1a4 0401 	sub.w	r4, r4, #1
   d9a84:	f1d5 0e20 	rsbs	lr, r5, #32
   d9a88:	db0d      	blt.n	d9aa6 <__adddf3+0xb2>
   d9a8a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9a8e:	fa22 f205 	lsr.w	r2, r2, r5
   d9a92:	1880      	adds	r0, r0, r2
   d9a94:	f141 0100 	adc.w	r1, r1, #0
   d9a98:	fa03 f20e 	lsl.w	r2, r3, lr
   d9a9c:	1880      	adds	r0, r0, r2
   d9a9e:	fa43 f305 	asr.w	r3, r3, r5
   d9aa2:	4159      	adcs	r1, r3
   d9aa4:	e00e      	b.n	d9ac4 <__adddf3+0xd0>
   d9aa6:	f1a5 0520 	sub.w	r5, r5, #32
   d9aaa:	f10e 0e20 	add.w	lr, lr, #32
   d9aae:	2a01      	cmp	r2, #1
   d9ab0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9ab4:	bf28      	it	cs
   d9ab6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9aba:	fa43 f305 	asr.w	r3, r3, r5
   d9abe:	18c0      	adds	r0, r0, r3
   d9ac0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9ac8:	d507      	bpl.n	d9ada <__adddf3+0xe6>
   d9aca:	f04f 0e00 	mov.w	lr, #0
   d9ace:	f1dc 0c00 	rsbs	ip, ip, #0
   d9ad2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9ad6:	eb6e 0101 	sbc.w	r1, lr, r1
   d9ada:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9ade:	d31b      	bcc.n	d9b18 <__adddf3+0x124>
   d9ae0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9ae4:	d30c      	bcc.n	d9b00 <__adddf3+0x10c>
   d9ae6:	0849      	lsrs	r1, r1, #1
   d9ae8:	ea5f 0030 	movs.w	r0, r0, rrx
   d9aec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9af0:	f104 0401 	add.w	r4, r4, #1
   d9af4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9af8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9afc:	f080 809a 	bcs.w	d9c34 <__adddf3+0x240>
   d9b00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9b04:	bf08      	it	eq
   d9b06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b0a:	f150 0000 	adcs.w	r0, r0, #0
   d9b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b12:	ea41 0105 	orr.w	r1, r1, r5
   d9b16:	bd30      	pop	{r4, r5, pc}
   d9b18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9b1c:	4140      	adcs	r0, r0
   d9b1e:	eb41 0101 	adc.w	r1, r1, r1
   d9b22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9b26:	f1a4 0401 	sub.w	r4, r4, #1
   d9b2a:	d1e9      	bne.n	d9b00 <__adddf3+0x10c>
   d9b2c:	f091 0f00 	teq	r1, #0
   d9b30:	bf04      	itt	eq
   d9b32:	4601      	moveq	r1, r0
   d9b34:	2000      	moveq	r0, #0
   d9b36:	fab1 f381 	clz	r3, r1
   d9b3a:	bf08      	it	eq
   d9b3c:	3320      	addeq	r3, #32
   d9b3e:	f1a3 030b 	sub.w	r3, r3, #11
   d9b42:	f1b3 0220 	subs.w	r2, r3, #32
   d9b46:	da0c      	bge.n	d9b62 <__adddf3+0x16e>
   d9b48:	320c      	adds	r2, #12
   d9b4a:	dd08      	ble.n	d9b5e <__adddf3+0x16a>
   d9b4c:	f102 0c14 	add.w	ip, r2, #20
   d9b50:	f1c2 020c 	rsb	r2, r2, #12
   d9b54:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b58:	fa21 f102 	lsr.w	r1, r1, r2
   d9b5c:	e00c      	b.n	d9b78 <__adddf3+0x184>
   d9b5e:	f102 0214 	add.w	r2, r2, #20
   d9b62:	bfd8      	it	le
   d9b64:	f1c2 0c20 	rsble	ip, r2, #32
   d9b68:	fa01 f102 	lsl.w	r1, r1, r2
   d9b6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9b70:	bfdc      	itt	le
   d9b72:	ea41 010c 	orrle.w	r1, r1, ip
   d9b76:	4090      	lslle	r0, r2
   d9b78:	1ae4      	subs	r4, r4, r3
   d9b7a:	bfa2      	ittt	ge
   d9b7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9b80:	4329      	orrge	r1, r5
   d9b82:	bd30      	popge	{r4, r5, pc}
   d9b84:	ea6f 0404 	mvn.w	r4, r4
   d9b88:	3c1f      	subs	r4, #31
   d9b8a:	da1c      	bge.n	d9bc6 <__adddf3+0x1d2>
   d9b8c:	340c      	adds	r4, #12
   d9b8e:	dc0e      	bgt.n	d9bae <__adddf3+0x1ba>
   d9b90:	f104 0414 	add.w	r4, r4, #20
   d9b94:	f1c4 0220 	rsb	r2, r4, #32
   d9b98:	fa20 f004 	lsr.w	r0, r0, r4
   d9b9c:	fa01 f302 	lsl.w	r3, r1, r2
   d9ba0:	ea40 0003 	orr.w	r0, r0, r3
   d9ba4:	fa21 f304 	lsr.w	r3, r1, r4
   d9ba8:	ea45 0103 	orr.w	r1, r5, r3
   d9bac:	bd30      	pop	{r4, r5, pc}
   d9bae:	f1c4 040c 	rsb	r4, r4, #12
   d9bb2:	f1c4 0220 	rsb	r2, r4, #32
   d9bb6:	fa20 f002 	lsr.w	r0, r0, r2
   d9bba:	fa01 f304 	lsl.w	r3, r1, r4
   d9bbe:	ea40 0003 	orr.w	r0, r0, r3
   d9bc2:	4629      	mov	r1, r5
   d9bc4:	bd30      	pop	{r4, r5, pc}
   d9bc6:	fa21 f004 	lsr.w	r0, r1, r4
   d9bca:	4629      	mov	r1, r5
   d9bcc:	bd30      	pop	{r4, r5, pc}
   d9bce:	f094 0f00 	teq	r4, #0
   d9bd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9bd6:	bf06      	itte	eq
   d9bd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9bdc:	3401      	addeq	r4, #1
   d9bde:	3d01      	subne	r5, #1
   d9be0:	e74e      	b.n	d9a80 <__adddf3+0x8c>
   d9be2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9be6:	bf18      	it	ne
   d9be8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9bec:	d029      	beq.n	d9c42 <__adddf3+0x24e>
   d9bee:	ea94 0f05 	teq	r4, r5
   d9bf2:	bf08      	it	eq
   d9bf4:	ea90 0f02 	teqeq	r0, r2
   d9bf8:	d005      	beq.n	d9c06 <__adddf3+0x212>
   d9bfa:	ea54 0c00 	orrs.w	ip, r4, r0
   d9bfe:	bf04      	itt	eq
   d9c00:	4619      	moveq	r1, r3
   d9c02:	4610      	moveq	r0, r2
   d9c04:	bd30      	pop	{r4, r5, pc}
   d9c06:	ea91 0f03 	teq	r1, r3
   d9c0a:	bf1e      	ittt	ne
   d9c0c:	2100      	movne	r1, #0
   d9c0e:	2000      	movne	r0, #0
   d9c10:	bd30      	popne	{r4, r5, pc}
   d9c12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9c16:	d105      	bne.n	d9c24 <__adddf3+0x230>
   d9c18:	0040      	lsls	r0, r0, #1
   d9c1a:	4149      	adcs	r1, r1
   d9c1c:	bf28      	it	cs
   d9c1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9c22:	bd30      	pop	{r4, r5, pc}
   d9c24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9c28:	bf3c      	itt	cc
   d9c2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9c2e:	bd30      	popcc	{r4, r5, pc}
   d9c30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9c38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c3c:	f04f 0000 	mov.w	r0, #0
   d9c40:	bd30      	pop	{r4, r5, pc}
   d9c42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c46:	bf1a      	itte	ne
   d9c48:	4619      	movne	r1, r3
   d9c4a:	4610      	movne	r0, r2
   d9c4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c50:	bf1c      	itt	ne
   d9c52:	460b      	movne	r3, r1
   d9c54:	4602      	movne	r2, r0
   d9c56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c5a:	bf06      	itte	eq
   d9c5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c60:	ea91 0f03 	teqeq	r1, r3
   d9c64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9c68:	bd30      	pop	{r4, r5, pc}
   d9c6a:	bf00      	nop

000d9c6c <__aeabi_ui2d>:
   d9c6c:	f090 0f00 	teq	r0, #0
   d9c70:	bf04      	itt	eq
   d9c72:	2100      	moveq	r1, #0
   d9c74:	4770      	bxeq	lr
   d9c76:	b530      	push	{r4, r5, lr}
   d9c78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9c80:	f04f 0500 	mov.w	r5, #0
   d9c84:	f04f 0100 	mov.w	r1, #0
   d9c88:	e750      	b.n	d9b2c <__adddf3+0x138>
   d9c8a:	bf00      	nop

000d9c8c <__aeabi_i2d>:
   d9c8c:	f090 0f00 	teq	r0, #0
   d9c90:	bf04      	itt	eq
   d9c92:	2100      	moveq	r1, #0
   d9c94:	4770      	bxeq	lr
   d9c96:	b530      	push	{r4, r5, lr}
   d9c98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ca0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9ca4:	bf48      	it	mi
   d9ca6:	4240      	negmi	r0, r0
   d9ca8:	f04f 0100 	mov.w	r1, #0
   d9cac:	e73e      	b.n	d9b2c <__adddf3+0x138>
   d9cae:	bf00      	nop

000d9cb0 <__aeabi_f2d>:
   d9cb0:	0042      	lsls	r2, r0, #1
   d9cb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9cb6:	ea4f 0131 	mov.w	r1, r1, rrx
   d9cba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9cbe:	bf1f      	itttt	ne
   d9cc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9cc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9cc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9ccc:	4770      	bxne	lr
   d9cce:	f092 0f00 	teq	r2, #0
   d9cd2:	bf14      	ite	ne
   d9cd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9cd8:	4770      	bxeq	lr
   d9cda:	b530      	push	{r4, r5, lr}
   d9cdc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9ce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9ce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9ce8:	e720      	b.n	d9b2c <__adddf3+0x138>
   d9cea:	bf00      	nop

000d9cec <__aeabi_ul2d>:
   d9cec:	ea50 0201 	orrs.w	r2, r0, r1
   d9cf0:	bf08      	it	eq
   d9cf2:	4770      	bxeq	lr
   d9cf4:	b530      	push	{r4, r5, lr}
   d9cf6:	f04f 0500 	mov.w	r5, #0
   d9cfa:	e00a      	b.n	d9d12 <__aeabi_l2d+0x16>

000d9cfc <__aeabi_l2d>:
   d9cfc:	ea50 0201 	orrs.w	r2, r0, r1
   d9d00:	bf08      	it	eq
   d9d02:	4770      	bxeq	lr
   d9d04:	b530      	push	{r4, r5, lr}
   d9d06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9d0a:	d502      	bpl.n	d9d12 <__aeabi_l2d+0x16>
   d9d0c:	4240      	negs	r0, r0
   d9d0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9d16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9d1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9d1e:	f43f aedc 	beq.w	d9ada <__adddf3+0xe6>
   d9d22:	f04f 0203 	mov.w	r2, #3
   d9d26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d2a:	bf18      	it	ne
   d9d2c:	3203      	addne	r2, #3
   d9d2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d32:	bf18      	it	ne
   d9d34:	3203      	addne	r2, #3
   d9d36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9d3a:	f1c2 0320 	rsb	r3, r2, #32
   d9d3e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9d42:	fa20 f002 	lsr.w	r0, r0, r2
   d9d46:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d4a:	ea40 000e 	orr.w	r0, r0, lr
   d9d4e:	fa21 f102 	lsr.w	r1, r1, r2
   d9d52:	4414      	add	r4, r2
   d9d54:	e6c1      	b.n	d9ada <__adddf3+0xe6>
   d9d56:	bf00      	nop

000d9d58 <__aeabi_dmul>:
   d9d58:	b570      	push	{r4, r5, r6, lr}
   d9d5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d66:	bf1d      	ittte	ne
   d9d68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d6c:	ea94 0f0c 	teqne	r4, ip
   d9d70:	ea95 0f0c 	teqne	r5, ip
   d9d74:	f000 f8de 	bleq	d9f34 <__aeabi_dmul+0x1dc>
   d9d78:	442c      	add	r4, r5
   d9d7a:	ea81 0603 	eor.w	r6, r1, r3
   d9d7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9d82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9d86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9d8a:	bf18      	it	ne
   d9d8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9d90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9d98:	d038      	beq.n	d9e0c <__aeabi_dmul+0xb4>
   d9d9a:	fba0 ce02 	umull	ip, lr, r0, r2
   d9d9e:	f04f 0500 	mov.w	r5, #0
   d9da2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9da6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9daa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9dae:	f04f 0600 	mov.w	r6, #0
   d9db2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9db6:	f09c 0f00 	teq	ip, #0
   d9dba:	bf18      	it	ne
   d9dbc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9dc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9dc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9dc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9dcc:	d204      	bcs.n	d9dd8 <__aeabi_dmul+0x80>
   d9dce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9dd2:	416d      	adcs	r5, r5
   d9dd4:	eb46 0606 	adc.w	r6, r6, r6
   d9dd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9ddc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9de0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9de4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9de8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9dec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9df0:	bf88      	it	hi
   d9df2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9df6:	d81e      	bhi.n	d9e36 <__aeabi_dmul+0xde>
   d9df8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9dfc:	bf08      	it	eq
   d9dfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9e02:	f150 0000 	adcs.w	r0, r0, #0
   d9e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e0a:	bd70      	pop	{r4, r5, r6, pc}
   d9e0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9e10:	ea46 0101 	orr.w	r1, r6, r1
   d9e14:	ea40 0002 	orr.w	r0, r0, r2
   d9e18:	ea81 0103 	eor.w	r1, r1, r3
   d9e1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9e20:	bfc2      	ittt	gt
   d9e22:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e2a:	bd70      	popgt	{r4, r5, r6, pc}
   d9e2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e30:	f04f 0e00 	mov.w	lr, #0
   d9e34:	3c01      	subs	r4, #1
   d9e36:	f300 80ab 	bgt.w	d9f90 <__aeabi_dmul+0x238>
   d9e3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9e3e:	bfde      	ittt	le
   d9e40:	2000      	movle	r0, #0
   d9e42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9e46:	bd70      	pople	{r4, r5, r6, pc}
   d9e48:	f1c4 0400 	rsb	r4, r4, #0
   d9e4c:	3c20      	subs	r4, #32
   d9e4e:	da35      	bge.n	d9ebc <__aeabi_dmul+0x164>
   d9e50:	340c      	adds	r4, #12
   d9e52:	dc1b      	bgt.n	d9e8c <__aeabi_dmul+0x134>
   d9e54:	f104 0414 	add.w	r4, r4, #20
   d9e58:	f1c4 0520 	rsb	r5, r4, #32
   d9e5c:	fa00 f305 	lsl.w	r3, r0, r5
   d9e60:	fa20 f004 	lsr.w	r0, r0, r4
   d9e64:	fa01 f205 	lsl.w	r2, r1, r5
   d9e68:	ea40 0002 	orr.w	r0, r0, r2
   d9e6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9e70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9e74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e78:	fa21 f604 	lsr.w	r6, r1, r4
   d9e7c:	eb42 0106 	adc.w	r1, r2, r6
   d9e80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9e84:	bf08      	it	eq
   d9e86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9e8a:	bd70      	pop	{r4, r5, r6, pc}
   d9e8c:	f1c4 040c 	rsb	r4, r4, #12
   d9e90:	f1c4 0520 	rsb	r5, r4, #32
   d9e94:	fa00 f304 	lsl.w	r3, r0, r4
   d9e98:	fa20 f005 	lsr.w	r0, r0, r5
   d9e9c:	fa01 f204 	lsl.w	r2, r1, r4
   d9ea0:	ea40 0002 	orr.w	r0, r0, r2
   d9ea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9eac:	f141 0100 	adc.w	r1, r1, #0
   d9eb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9eb4:	bf08      	it	eq
   d9eb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eba:	bd70      	pop	{r4, r5, r6, pc}
   d9ebc:	f1c4 0520 	rsb	r5, r4, #32
   d9ec0:	fa00 f205 	lsl.w	r2, r0, r5
   d9ec4:	ea4e 0e02 	orr.w	lr, lr, r2
   d9ec8:	fa20 f304 	lsr.w	r3, r0, r4
   d9ecc:	fa01 f205 	lsl.w	r2, r1, r5
   d9ed0:	ea43 0302 	orr.w	r3, r3, r2
   d9ed4:	fa21 f004 	lsr.w	r0, r1, r4
   d9ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9edc:	fa21 f204 	lsr.w	r2, r1, r4
   d9ee0:	ea20 0002 	bic.w	r0, r0, r2
   d9ee4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9ee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9eec:	bf08      	it	eq
   d9eee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9ef2:	bd70      	pop	{r4, r5, r6, pc}
   d9ef4:	f094 0f00 	teq	r4, #0
   d9ef8:	d10f      	bne.n	d9f1a <__aeabi_dmul+0x1c2>
   d9efa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9efe:	0040      	lsls	r0, r0, #1
   d9f00:	eb41 0101 	adc.w	r1, r1, r1
   d9f04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f08:	bf08      	it	eq
   d9f0a:	3c01      	subeq	r4, #1
   d9f0c:	d0f7      	beq.n	d9efe <__aeabi_dmul+0x1a6>
   d9f0e:	ea41 0106 	orr.w	r1, r1, r6
   d9f12:	f095 0f00 	teq	r5, #0
   d9f16:	bf18      	it	ne
   d9f18:	4770      	bxne	lr
   d9f1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9f1e:	0052      	lsls	r2, r2, #1
   d9f20:	eb43 0303 	adc.w	r3, r3, r3
   d9f24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9f28:	bf08      	it	eq
   d9f2a:	3d01      	subeq	r5, #1
   d9f2c:	d0f7      	beq.n	d9f1e <__aeabi_dmul+0x1c6>
   d9f2e:	ea43 0306 	orr.w	r3, r3, r6
   d9f32:	4770      	bx	lr
   d9f34:	ea94 0f0c 	teq	r4, ip
   d9f38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f3c:	bf18      	it	ne
   d9f3e:	ea95 0f0c 	teqne	r5, ip
   d9f42:	d00c      	beq.n	d9f5e <__aeabi_dmul+0x206>
   d9f44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f48:	bf18      	it	ne
   d9f4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f4e:	d1d1      	bne.n	d9ef4 <__aeabi_dmul+0x19c>
   d9f50:	ea81 0103 	eor.w	r1, r1, r3
   d9f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f58:	f04f 0000 	mov.w	r0, #0
   d9f5c:	bd70      	pop	{r4, r5, r6, pc}
   d9f5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f62:	bf06      	itte	eq
   d9f64:	4610      	moveq	r0, r2
   d9f66:	4619      	moveq	r1, r3
   d9f68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f6c:	d019      	beq.n	d9fa2 <__aeabi_dmul+0x24a>
   d9f6e:	ea94 0f0c 	teq	r4, ip
   d9f72:	d102      	bne.n	d9f7a <__aeabi_dmul+0x222>
   d9f74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9f78:	d113      	bne.n	d9fa2 <__aeabi_dmul+0x24a>
   d9f7a:	ea95 0f0c 	teq	r5, ip
   d9f7e:	d105      	bne.n	d9f8c <__aeabi_dmul+0x234>
   d9f80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9f84:	bf1c      	itt	ne
   d9f86:	4610      	movne	r0, r2
   d9f88:	4619      	movne	r1, r3
   d9f8a:	d10a      	bne.n	d9fa2 <__aeabi_dmul+0x24a>
   d9f8c:	ea81 0103 	eor.w	r1, r1, r3
   d9f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9f98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9f9c:	f04f 0000 	mov.w	r0, #0
   d9fa0:	bd70      	pop	{r4, r5, r6, pc}
   d9fa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9faa:	bd70      	pop	{r4, r5, r6, pc}

000d9fac <__aeabi_ddiv>:
   d9fac:	b570      	push	{r4, r5, r6, lr}
   d9fae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9fba:	bf1d      	ittte	ne
   d9fbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fc0:	ea94 0f0c 	teqne	r4, ip
   d9fc4:	ea95 0f0c 	teqne	r5, ip
   d9fc8:	f000 f8a7 	bleq	da11a <__aeabi_ddiv+0x16e>
   d9fcc:	eba4 0405 	sub.w	r4, r4, r5
   d9fd0:	ea81 0e03 	eor.w	lr, r1, r3
   d9fd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9fd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9fdc:	f000 8088 	beq.w	da0f0 <__aeabi_ddiv+0x144>
   d9fe0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9fe4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9fe8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9fec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9ff0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9ff4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9ff8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9ffc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da000:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da004:	429d      	cmp	r5, r3
   da006:	bf08      	it	eq
   da008:	4296      	cmpeq	r6, r2
   da00a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da00e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da012:	d202      	bcs.n	da01a <__aeabi_ddiv+0x6e>
   da014:	085b      	lsrs	r3, r3, #1
   da016:	ea4f 0232 	mov.w	r2, r2, rrx
   da01a:	1ab6      	subs	r6, r6, r2
   da01c:	eb65 0503 	sbc.w	r5, r5, r3
   da020:	085b      	lsrs	r3, r3, #1
   da022:	ea4f 0232 	mov.w	r2, r2, rrx
   da026:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da02a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da02e:	ebb6 0e02 	subs.w	lr, r6, r2
   da032:	eb75 0e03 	sbcs.w	lr, r5, r3
   da036:	bf22      	ittt	cs
   da038:	1ab6      	subcs	r6, r6, r2
   da03a:	4675      	movcs	r5, lr
   da03c:	ea40 000c 	orrcs.w	r0, r0, ip
   da040:	085b      	lsrs	r3, r3, #1
   da042:	ea4f 0232 	mov.w	r2, r2, rrx
   da046:	ebb6 0e02 	subs.w	lr, r6, r2
   da04a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da04e:	bf22      	ittt	cs
   da050:	1ab6      	subcs	r6, r6, r2
   da052:	4675      	movcs	r5, lr
   da054:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da058:	085b      	lsrs	r3, r3, #1
   da05a:	ea4f 0232 	mov.w	r2, r2, rrx
   da05e:	ebb6 0e02 	subs.w	lr, r6, r2
   da062:	eb75 0e03 	sbcs.w	lr, r5, r3
   da066:	bf22      	ittt	cs
   da068:	1ab6      	subcs	r6, r6, r2
   da06a:	4675      	movcs	r5, lr
   da06c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da070:	085b      	lsrs	r3, r3, #1
   da072:	ea4f 0232 	mov.w	r2, r2, rrx
   da076:	ebb6 0e02 	subs.w	lr, r6, r2
   da07a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da07e:	bf22      	ittt	cs
   da080:	1ab6      	subcs	r6, r6, r2
   da082:	4675      	movcs	r5, lr
   da084:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da088:	ea55 0e06 	orrs.w	lr, r5, r6
   da08c:	d018      	beq.n	da0c0 <__aeabi_ddiv+0x114>
   da08e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da092:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da096:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da09a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da09e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da0a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da0a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da0aa:	d1c0      	bne.n	da02e <__aeabi_ddiv+0x82>
   da0ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0b0:	d10b      	bne.n	da0ca <__aeabi_ddiv+0x11e>
   da0b2:	ea41 0100 	orr.w	r1, r1, r0
   da0b6:	f04f 0000 	mov.w	r0, #0
   da0ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da0be:	e7b6      	b.n	da02e <__aeabi_ddiv+0x82>
   da0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0c4:	bf04      	itt	eq
   da0c6:	4301      	orreq	r1, r0
   da0c8:	2000      	moveq	r0, #0
   da0ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da0ce:	bf88      	it	hi
   da0d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da0d4:	f63f aeaf 	bhi.w	d9e36 <__aeabi_dmul+0xde>
   da0d8:	ebb5 0c03 	subs.w	ip, r5, r3
   da0dc:	bf04      	itt	eq
   da0de:	ebb6 0c02 	subseq.w	ip, r6, r2
   da0e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da0e6:	f150 0000 	adcs.w	r0, r0, #0
   da0ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da0ee:	bd70      	pop	{r4, r5, r6, pc}
   da0f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da0f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da0f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da0fc:	bfc2      	ittt	gt
   da0fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   da102:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da106:	bd70      	popgt	{r4, r5, r6, pc}
   da108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da10c:	f04f 0e00 	mov.w	lr, #0
   da110:	3c01      	subs	r4, #1
   da112:	e690      	b.n	d9e36 <__aeabi_dmul+0xde>
   da114:	ea45 0e06 	orr.w	lr, r5, r6
   da118:	e68d      	b.n	d9e36 <__aeabi_dmul+0xde>
   da11a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da11e:	ea94 0f0c 	teq	r4, ip
   da122:	bf08      	it	eq
   da124:	ea95 0f0c 	teqeq	r5, ip
   da128:	f43f af3b 	beq.w	d9fa2 <__aeabi_dmul+0x24a>
   da12c:	ea94 0f0c 	teq	r4, ip
   da130:	d10a      	bne.n	da148 <__aeabi_ddiv+0x19c>
   da132:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da136:	f47f af34 	bne.w	d9fa2 <__aeabi_dmul+0x24a>
   da13a:	ea95 0f0c 	teq	r5, ip
   da13e:	f47f af25 	bne.w	d9f8c <__aeabi_dmul+0x234>
   da142:	4610      	mov	r0, r2
   da144:	4619      	mov	r1, r3
   da146:	e72c      	b.n	d9fa2 <__aeabi_dmul+0x24a>
   da148:	ea95 0f0c 	teq	r5, ip
   da14c:	d106      	bne.n	da15c <__aeabi_ddiv+0x1b0>
   da14e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da152:	f43f aefd 	beq.w	d9f50 <__aeabi_dmul+0x1f8>
   da156:	4610      	mov	r0, r2
   da158:	4619      	mov	r1, r3
   da15a:	e722      	b.n	d9fa2 <__aeabi_dmul+0x24a>
   da15c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da160:	bf18      	it	ne
   da162:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da166:	f47f aec5 	bne.w	d9ef4 <__aeabi_dmul+0x19c>
   da16a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da16e:	f47f af0d 	bne.w	d9f8c <__aeabi_dmul+0x234>
   da172:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da176:	f47f aeeb 	bne.w	d9f50 <__aeabi_dmul+0x1f8>
   da17a:	e712      	b.n	d9fa2 <__aeabi_dmul+0x24a>

000da17c <__gedf2>:
   da17c:	f04f 3cff 	mov.w	ip, #4294967295
   da180:	e006      	b.n	da190 <__cmpdf2+0x4>
   da182:	bf00      	nop

000da184 <__ledf2>:
   da184:	f04f 0c01 	mov.w	ip, #1
   da188:	e002      	b.n	da190 <__cmpdf2+0x4>
   da18a:	bf00      	nop

000da18c <__cmpdf2>:
   da18c:	f04f 0c01 	mov.w	ip, #1
   da190:	f84d cd04 	str.w	ip, [sp, #-4]!
   da194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da19c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1a0:	bf18      	it	ne
   da1a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da1a6:	d01b      	beq.n	da1e0 <__cmpdf2+0x54>
   da1a8:	b001      	add	sp, #4
   da1aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da1ae:	bf0c      	ite	eq
   da1b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da1b4:	ea91 0f03 	teqne	r1, r3
   da1b8:	bf02      	ittt	eq
   da1ba:	ea90 0f02 	teqeq	r0, r2
   da1be:	2000      	moveq	r0, #0
   da1c0:	4770      	bxeq	lr
   da1c2:	f110 0f00 	cmn.w	r0, #0
   da1c6:	ea91 0f03 	teq	r1, r3
   da1ca:	bf58      	it	pl
   da1cc:	4299      	cmppl	r1, r3
   da1ce:	bf08      	it	eq
   da1d0:	4290      	cmpeq	r0, r2
   da1d2:	bf2c      	ite	cs
   da1d4:	17d8      	asrcs	r0, r3, #31
   da1d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da1da:	f040 0001 	orr.w	r0, r0, #1
   da1de:	4770      	bx	lr
   da1e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1e8:	d102      	bne.n	da1f0 <__cmpdf2+0x64>
   da1ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da1ee:	d107      	bne.n	da200 <__cmpdf2+0x74>
   da1f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1f8:	d1d6      	bne.n	da1a8 <__cmpdf2+0x1c>
   da1fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da1fe:	d0d3      	beq.n	da1a8 <__cmpdf2+0x1c>
   da200:	f85d 0b04 	ldr.w	r0, [sp], #4
   da204:	4770      	bx	lr
   da206:	bf00      	nop

000da208 <__aeabi_cdrcmple>:
   da208:	4684      	mov	ip, r0
   da20a:	4610      	mov	r0, r2
   da20c:	4662      	mov	r2, ip
   da20e:	468c      	mov	ip, r1
   da210:	4619      	mov	r1, r3
   da212:	4663      	mov	r3, ip
   da214:	e000      	b.n	da218 <__aeabi_cdcmpeq>
   da216:	bf00      	nop

000da218 <__aeabi_cdcmpeq>:
   da218:	b501      	push	{r0, lr}
   da21a:	f7ff ffb7 	bl	da18c <__cmpdf2>
   da21e:	2800      	cmp	r0, #0
   da220:	bf48      	it	mi
   da222:	f110 0f00 	cmnmi.w	r0, #0
   da226:	bd01      	pop	{r0, pc}

000da228 <__aeabi_dcmpeq>:
   da228:	f84d ed08 	str.w	lr, [sp, #-8]!
   da22c:	f7ff fff4 	bl	da218 <__aeabi_cdcmpeq>
   da230:	bf0c      	ite	eq
   da232:	2001      	moveq	r0, #1
   da234:	2000      	movne	r0, #0
   da236:	f85d fb08 	ldr.w	pc, [sp], #8
   da23a:	bf00      	nop

000da23c <__aeabi_dcmplt>:
   da23c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da240:	f7ff ffea 	bl	da218 <__aeabi_cdcmpeq>
   da244:	bf34      	ite	cc
   da246:	2001      	movcc	r0, #1
   da248:	2000      	movcs	r0, #0
   da24a:	f85d fb08 	ldr.w	pc, [sp], #8
   da24e:	bf00      	nop

000da250 <__aeabi_dcmple>:
   da250:	f84d ed08 	str.w	lr, [sp, #-8]!
   da254:	f7ff ffe0 	bl	da218 <__aeabi_cdcmpeq>
   da258:	bf94      	ite	ls
   da25a:	2001      	movls	r0, #1
   da25c:	2000      	movhi	r0, #0
   da25e:	f85d fb08 	ldr.w	pc, [sp], #8
   da262:	bf00      	nop

000da264 <__aeabi_dcmpge>:
   da264:	f84d ed08 	str.w	lr, [sp, #-8]!
   da268:	f7ff ffce 	bl	da208 <__aeabi_cdrcmple>
   da26c:	bf94      	ite	ls
   da26e:	2001      	movls	r0, #1
   da270:	2000      	movhi	r0, #0
   da272:	f85d fb08 	ldr.w	pc, [sp], #8
   da276:	bf00      	nop

000da278 <__aeabi_dcmpgt>:
   da278:	f84d ed08 	str.w	lr, [sp, #-8]!
   da27c:	f7ff ffc4 	bl	da208 <__aeabi_cdrcmple>
   da280:	bf34      	ite	cc
   da282:	2001      	movcc	r0, #1
   da284:	2000      	movcs	r0, #0
   da286:	f85d fb08 	ldr.w	pc, [sp], #8
   da28a:	bf00      	nop

000da28c <__aeabi_dcmpun>:
   da28c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da294:	d102      	bne.n	da29c <__aeabi_dcmpun+0x10>
   da296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da29a:	d10a      	bne.n	da2b2 <__aeabi_dcmpun+0x26>
   da29c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da2a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2a4:	d102      	bne.n	da2ac <__aeabi_dcmpun+0x20>
   da2a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da2aa:	d102      	bne.n	da2b2 <__aeabi_dcmpun+0x26>
   da2ac:	f04f 0000 	mov.w	r0, #0
   da2b0:	4770      	bx	lr
   da2b2:	f04f 0001 	mov.w	r0, #1
   da2b6:	4770      	bx	lr

000da2b8 <__aeabi_d2iz>:
   da2b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da2bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da2c0:	d215      	bcs.n	da2ee <__aeabi_d2iz+0x36>
   da2c2:	d511      	bpl.n	da2e8 <__aeabi_d2iz+0x30>
   da2c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da2c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da2cc:	d912      	bls.n	da2f4 <__aeabi_d2iz+0x3c>
   da2ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da2d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da2d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da2da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da2de:	fa23 f002 	lsr.w	r0, r3, r2
   da2e2:	bf18      	it	ne
   da2e4:	4240      	negne	r0, r0
   da2e6:	4770      	bx	lr
   da2e8:	f04f 0000 	mov.w	r0, #0
   da2ec:	4770      	bx	lr
   da2ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da2f2:	d105      	bne.n	da300 <__aeabi_d2iz+0x48>
   da2f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da2f8:	bf08      	it	eq
   da2fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da2fe:	4770      	bx	lr
   da300:	f04f 0000 	mov.w	r0, #0
   da304:	4770      	bx	lr
   da306:	bf00      	nop

000da308 <__aeabi_d2uiz>:
   da308:	004a      	lsls	r2, r1, #1
   da30a:	d211      	bcs.n	da330 <__aeabi_d2uiz+0x28>
   da30c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da310:	d211      	bcs.n	da336 <__aeabi_d2uiz+0x2e>
   da312:	d50d      	bpl.n	da330 <__aeabi_d2uiz+0x28>
   da314:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da31c:	d40e      	bmi.n	da33c <__aeabi_d2uiz+0x34>
   da31e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da32a:	fa23 f002 	lsr.w	r0, r3, r2
   da32e:	4770      	bx	lr
   da330:	f04f 0000 	mov.w	r0, #0
   da334:	4770      	bx	lr
   da336:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da33a:	d102      	bne.n	da342 <__aeabi_d2uiz+0x3a>
   da33c:	f04f 30ff 	mov.w	r0, #4294967295
   da340:	4770      	bx	lr
   da342:	f04f 0000 	mov.w	r0, #0
   da346:	4770      	bx	lr

000da348 <__aeabi_d2f>:
   da348:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da34c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da350:	bf24      	itt	cs
   da352:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da356:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da35a:	d90d      	bls.n	da378 <__aeabi_d2f+0x30>
   da35c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da360:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da364:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da368:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da36c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da370:	bf08      	it	eq
   da372:	f020 0001 	biceq.w	r0, r0, #1
   da376:	4770      	bx	lr
   da378:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da37c:	d121      	bne.n	da3c2 <__aeabi_d2f+0x7a>
   da37e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da382:	bfbc      	itt	lt
   da384:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da388:	4770      	bxlt	lr
   da38a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da38e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da392:	f1c2 0218 	rsb	r2, r2, #24
   da396:	f1c2 0c20 	rsb	ip, r2, #32
   da39a:	fa10 f30c 	lsls.w	r3, r0, ip
   da39e:	fa20 f002 	lsr.w	r0, r0, r2
   da3a2:	bf18      	it	ne
   da3a4:	f040 0001 	orrne.w	r0, r0, #1
   da3a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da3ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da3b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da3b4:	ea40 000c 	orr.w	r0, r0, ip
   da3b8:	fa23 f302 	lsr.w	r3, r3, r2
   da3bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da3c0:	e7cc      	b.n	da35c <__aeabi_d2f+0x14>
   da3c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da3c6:	d107      	bne.n	da3d8 <__aeabi_d2f+0x90>
   da3c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da3cc:	bf1e      	ittt	ne
   da3ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da3d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da3d6:	4770      	bxne	lr
   da3d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da3dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da3e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da3e4:	4770      	bx	lr
   da3e6:	bf00      	nop

000da3e8 <__aeabi_frsub>:
   da3e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da3ec:	e002      	b.n	da3f4 <__addsf3>
   da3ee:	bf00      	nop

000da3f0 <__aeabi_fsub>:
   da3f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da3f4 <__addsf3>:
   da3f4:	0042      	lsls	r2, r0, #1
   da3f6:	bf1f      	itttt	ne
   da3f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da3fc:	ea92 0f03 	teqne	r2, r3
   da400:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da404:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da408:	d06a      	beq.n	da4e0 <__addsf3+0xec>
   da40a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da40e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da412:	bfc1      	itttt	gt
   da414:	18d2      	addgt	r2, r2, r3
   da416:	4041      	eorgt	r1, r0
   da418:	4048      	eorgt	r0, r1
   da41a:	4041      	eorgt	r1, r0
   da41c:	bfb8      	it	lt
   da41e:	425b      	neglt	r3, r3
   da420:	2b19      	cmp	r3, #25
   da422:	bf88      	it	hi
   da424:	4770      	bxhi	lr
   da426:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da42a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da42e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da432:	bf18      	it	ne
   da434:	4240      	negne	r0, r0
   da436:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da43a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da43e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da442:	bf18      	it	ne
   da444:	4249      	negne	r1, r1
   da446:	ea92 0f03 	teq	r2, r3
   da44a:	d03f      	beq.n	da4cc <__addsf3+0xd8>
   da44c:	f1a2 0201 	sub.w	r2, r2, #1
   da450:	fa41 fc03 	asr.w	ip, r1, r3
   da454:	eb10 000c 	adds.w	r0, r0, ip
   da458:	f1c3 0320 	rsb	r3, r3, #32
   da45c:	fa01 f103 	lsl.w	r1, r1, r3
   da460:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da464:	d502      	bpl.n	da46c <__addsf3+0x78>
   da466:	4249      	negs	r1, r1
   da468:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da46c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da470:	d313      	bcc.n	da49a <__addsf3+0xa6>
   da472:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da476:	d306      	bcc.n	da486 <__addsf3+0x92>
   da478:	0840      	lsrs	r0, r0, #1
   da47a:	ea4f 0131 	mov.w	r1, r1, rrx
   da47e:	f102 0201 	add.w	r2, r2, #1
   da482:	2afe      	cmp	r2, #254	; 0xfe
   da484:	d251      	bcs.n	da52a <__addsf3+0x136>
   da486:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da48a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da48e:	bf08      	it	eq
   da490:	f020 0001 	biceq.w	r0, r0, #1
   da494:	ea40 0003 	orr.w	r0, r0, r3
   da498:	4770      	bx	lr
   da49a:	0049      	lsls	r1, r1, #1
   da49c:	eb40 0000 	adc.w	r0, r0, r0
   da4a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   da4a4:	f1a2 0201 	sub.w	r2, r2, #1
   da4a8:	d1ed      	bne.n	da486 <__addsf3+0x92>
   da4aa:	fab0 fc80 	clz	ip, r0
   da4ae:	f1ac 0c08 	sub.w	ip, ip, #8
   da4b2:	ebb2 020c 	subs.w	r2, r2, ip
   da4b6:	fa00 f00c 	lsl.w	r0, r0, ip
   da4ba:	bfaa      	itet	ge
   da4bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da4c0:	4252      	neglt	r2, r2
   da4c2:	4318      	orrge	r0, r3
   da4c4:	bfbc      	itt	lt
   da4c6:	40d0      	lsrlt	r0, r2
   da4c8:	4318      	orrlt	r0, r3
   da4ca:	4770      	bx	lr
   da4cc:	f092 0f00 	teq	r2, #0
   da4d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da4d4:	bf06      	itte	eq
   da4d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da4da:	3201      	addeq	r2, #1
   da4dc:	3b01      	subne	r3, #1
   da4de:	e7b5      	b.n	da44c <__addsf3+0x58>
   da4e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da4e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da4e8:	bf18      	it	ne
   da4ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da4ee:	d021      	beq.n	da534 <__addsf3+0x140>
   da4f0:	ea92 0f03 	teq	r2, r3
   da4f4:	d004      	beq.n	da500 <__addsf3+0x10c>
   da4f6:	f092 0f00 	teq	r2, #0
   da4fa:	bf08      	it	eq
   da4fc:	4608      	moveq	r0, r1
   da4fe:	4770      	bx	lr
   da500:	ea90 0f01 	teq	r0, r1
   da504:	bf1c      	itt	ne
   da506:	2000      	movne	r0, #0
   da508:	4770      	bxne	lr
   da50a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da50e:	d104      	bne.n	da51a <__addsf3+0x126>
   da510:	0040      	lsls	r0, r0, #1
   da512:	bf28      	it	cs
   da514:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da518:	4770      	bx	lr
   da51a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da51e:	bf3c      	itt	cc
   da520:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da524:	4770      	bxcc	lr
   da526:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da52a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da52e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da532:	4770      	bx	lr
   da534:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da538:	bf16      	itet	ne
   da53a:	4608      	movne	r0, r1
   da53c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da540:	4601      	movne	r1, r0
   da542:	0242      	lsls	r2, r0, #9
   da544:	bf06      	itte	eq
   da546:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da54a:	ea90 0f01 	teqeq	r0, r1
   da54e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da552:	4770      	bx	lr

000da554 <__aeabi_ui2f>:
   da554:	f04f 0300 	mov.w	r3, #0
   da558:	e004      	b.n	da564 <__aeabi_i2f+0x8>
   da55a:	bf00      	nop

000da55c <__aeabi_i2f>:
   da55c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da560:	bf48      	it	mi
   da562:	4240      	negmi	r0, r0
   da564:	ea5f 0c00 	movs.w	ip, r0
   da568:	bf08      	it	eq
   da56a:	4770      	bxeq	lr
   da56c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da570:	4601      	mov	r1, r0
   da572:	f04f 0000 	mov.w	r0, #0
   da576:	e01c      	b.n	da5b2 <__aeabi_l2f+0x2a>

000da578 <__aeabi_ul2f>:
   da578:	ea50 0201 	orrs.w	r2, r0, r1
   da57c:	bf08      	it	eq
   da57e:	4770      	bxeq	lr
   da580:	f04f 0300 	mov.w	r3, #0
   da584:	e00a      	b.n	da59c <__aeabi_l2f+0x14>
   da586:	bf00      	nop

000da588 <__aeabi_l2f>:
   da588:	ea50 0201 	orrs.w	r2, r0, r1
   da58c:	bf08      	it	eq
   da58e:	4770      	bxeq	lr
   da590:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da594:	d502      	bpl.n	da59c <__aeabi_l2f+0x14>
   da596:	4240      	negs	r0, r0
   da598:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da59c:	ea5f 0c01 	movs.w	ip, r1
   da5a0:	bf02      	ittt	eq
   da5a2:	4684      	moveq	ip, r0
   da5a4:	4601      	moveq	r1, r0
   da5a6:	2000      	moveq	r0, #0
   da5a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da5ac:	bf08      	it	eq
   da5ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da5b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da5b6:	fabc f28c 	clz	r2, ip
   da5ba:	3a08      	subs	r2, #8
   da5bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da5c0:	db10      	blt.n	da5e4 <__aeabi_l2f+0x5c>
   da5c2:	fa01 fc02 	lsl.w	ip, r1, r2
   da5c6:	4463      	add	r3, ip
   da5c8:	fa00 fc02 	lsl.w	ip, r0, r2
   da5cc:	f1c2 0220 	rsb	r2, r2, #32
   da5d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da5d4:	fa20 f202 	lsr.w	r2, r0, r2
   da5d8:	eb43 0002 	adc.w	r0, r3, r2
   da5dc:	bf08      	it	eq
   da5de:	f020 0001 	biceq.w	r0, r0, #1
   da5e2:	4770      	bx	lr
   da5e4:	f102 0220 	add.w	r2, r2, #32
   da5e8:	fa01 fc02 	lsl.w	ip, r1, r2
   da5ec:	f1c2 0220 	rsb	r2, r2, #32
   da5f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da5f4:	fa21 f202 	lsr.w	r2, r1, r2
   da5f8:	eb43 0002 	adc.w	r0, r3, r2
   da5fc:	bf08      	it	eq
   da5fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da602:	4770      	bx	lr

000da604 <__aeabi_ldivmod>:
   da604:	b97b      	cbnz	r3, da626 <__aeabi_ldivmod+0x22>
   da606:	b972      	cbnz	r2, da626 <__aeabi_ldivmod+0x22>
   da608:	2900      	cmp	r1, #0
   da60a:	bfbe      	ittt	lt
   da60c:	2000      	movlt	r0, #0
   da60e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da612:	e006      	blt.n	da622 <__aeabi_ldivmod+0x1e>
   da614:	bf08      	it	eq
   da616:	2800      	cmpeq	r0, #0
   da618:	bf1c      	itt	ne
   da61a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da61e:	f04f 30ff 	movne.w	r0, #4294967295
   da622:	f000 b9ed 	b.w	daa00 <__aeabi_idiv0>
   da626:	f1ad 0c08 	sub.w	ip, sp, #8
   da62a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da62e:	2900      	cmp	r1, #0
   da630:	db09      	blt.n	da646 <__aeabi_ldivmod+0x42>
   da632:	2b00      	cmp	r3, #0
   da634:	db1a      	blt.n	da66c <__aeabi_ldivmod+0x68>
   da636:	f000 f871 	bl	da71c <__udivmoddi4>
   da63a:	f8dd e004 	ldr.w	lr, [sp, #4]
   da63e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da642:	b004      	add	sp, #16
   da644:	4770      	bx	lr
   da646:	4240      	negs	r0, r0
   da648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da64c:	2b00      	cmp	r3, #0
   da64e:	db1b      	blt.n	da688 <__aeabi_ldivmod+0x84>
   da650:	f000 f864 	bl	da71c <__udivmoddi4>
   da654:	f8dd e004 	ldr.w	lr, [sp, #4]
   da658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da65c:	b004      	add	sp, #16
   da65e:	4240      	negs	r0, r0
   da660:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da664:	4252      	negs	r2, r2
   da666:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da66a:	4770      	bx	lr
   da66c:	4252      	negs	r2, r2
   da66e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da672:	f000 f853 	bl	da71c <__udivmoddi4>
   da676:	f8dd e004 	ldr.w	lr, [sp, #4]
   da67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da67e:	b004      	add	sp, #16
   da680:	4240      	negs	r0, r0
   da682:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da686:	4770      	bx	lr
   da688:	4252      	negs	r2, r2
   da68a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da68e:	f000 f845 	bl	da71c <__udivmoddi4>
   da692:	f8dd e004 	ldr.w	lr, [sp, #4]
   da696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da69a:	b004      	add	sp, #16
   da69c:	4252      	negs	r2, r2
   da69e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da6a2:	4770      	bx	lr

000da6a4 <__aeabi_uldivmod>:
   da6a4:	b953      	cbnz	r3, da6bc <__aeabi_uldivmod+0x18>
   da6a6:	b94a      	cbnz	r2, da6bc <__aeabi_uldivmod+0x18>
   da6a8:	2900      	cmp	r1, #0
   da6aa:	bf08      	it	eq
   da6ac:	2800      	cmpeq	r0, #0
   da6ae:	bf1c      	itt	ne
   da6b0:	f04f 31ff 	movne.w	r1, #4294967295
   da6b4:	f04f 30ff 	movne.w	r0, #4294967295
   da6b8:	f000 b9a2 	b.w	daa00 <__aeabi_idiv0>
   da6bc:	f1ad 0c08 	sub.w	ip, sp, #8
   da6c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da6c4:	f000 f82a 	bl	da71c <__udivmoddi4>
   da6c8:	f8dd e004 	ldr.w	lr, [sp, #4]
   da6cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da6d0:	b004      	add	sp, #16
   da6d2:	4770      	bx	lr

000da6d4 <__aeabi_d2ulz>:
   da6d4:	b5d0      	push	{r4, r6, r7, lr}
   da6d6:	2200      	movs	r2, #0
   da6d8:	4b0e      	ldr	r3, [pc, #56]	; (da714 <__aeabi_d2ulz+0x40>)
   da6da:	4606      	mov	r6, r0
   da6dc:	460f      	mov	r7, r1
   da6de:	f7ff fb3b 	bl	d9d58 <__aeabi_dmul>
   da6e2:	f7ff fe11 	bl	da308 <__aeabi_d2uiz>
   da6e6:	4604      	mov	r4, r0
   da6e8:	f7ff fac0 	bl	d9c6c <__aeabi_ui2d>
   da6ec:	2200      	movs	r2, #0
   da6ee:	4b0a      	ldr	r3, [pc, #40]	; (da718 <__aeabi_d2ulz+0x44>)
   da6f0:	f7ff fb32 	bl	d9d58 <__aeabi_dmul>
   da6f4:	4602      	mov	r2, r0
   da6f6:	460b      	mov	r3, r1
   da6f8:	4630      	mov	r0, r6
   da6fa:	4639      	mov	r1, r7
   da6fc:	f7ff f978 	bl	d99f0 <__aeabi_dsub>
   da700:	f7ff fe02 	bl	da308 <__aeabi_d2uiz>
   da704:	4623      	mov	r3, r4
   da706:	2200      	movs	r2, #0
   da708:	ea42 0200 	orr.w	r2, r2, r0
   da70c:	4610      	mov	r0, r2
   da70e:	4619      	mov	r1, r3
   da710:	bdd0      	pop	{r4, r6, r7, pc}
   da712:	bf00      	nop
   da714:	3df00000 	.word	0x3df00000
   da718:	41f00000 	.word	0x41f00000

000da71c <__udivmoddi4>:
   da71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da720:	468c      	mov	ip, r1
   da722:	460e      	mov	r6, r1
   da724:	4604      	mov	r4, r0
   da726:	9d08      	ldr	r5, [sp, #32]
   da728:	2b00      	cmp	r3, #0
   da72a:	d150      	bne.n	da7ce <__udivmoddi4+0xb2>
   da72c:	428a      	cmp	r2, r1
   da72e:	4617      	mov	r7, r2
   da730:	d96c      	bls.n	da80c <__udivmoddi4+0xf0>
   da732:	fab2 fe82 	clz	lr, r2
   da736:	f1be 0f00 	cmp.w	lr, #0
   da73a:	d00b      	beq.n	da754 <__udivmoddi4+0x38>
   da73c:	f1ce 0420 	rsb	r4, lr, #32
   da740:	fa20 f404 	lsr.w	r4, r0, r4
   da744:	fa01 f60e 	lsl.w	r6, r1, lr
   da748:	ea44 0c06 	orr.w	ip, r4, r6
   da74c:	fa02 f70e 	lsl.w	r7, r2, lr
   da750:	fa00 f40e 	lsl.w	r4, r0, lr
   da754:	ea4f 4917 	mov.w	r9, r7, lsr #16
   da758:	0c22      	lsrs	r2, r4, #16
   da75a:	fbbc f0f9 	udiv	r0, ip, r9
   da75e:	fa1f f887 	uxth.w	r8, r7
   da762:	fb09 c610 	mls	r6, r9, r0, ip
   da766:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da76a:	fb00 f308 	mul.w	r3, r0, r8
   da76e:	42b3      	cmp	r3, r6
   da770:	d909      	bls.n	da786 <__udivmoddi4+0x6a>
   da772:	19f6      	adds	r6, r6, r7
   da774:	f100 32ff 	add.w	r2, r0, #4294967295
   da778:	f080 8122 	bcs.w	da9c0 <__udivmoddi4+0x2a4>
   da77c:	42b3      	cmp	r3, r6
   da77e:	f240 811f 	bls.w	da9c0 <__udivmoddi4+0x2a4>
   da782:	3802      	subs	r0, #2
   da784:	443e      	add	r6, r7
   da786:	1af6      	subs	r6, r6, r3
   da788:	b2a2      	uxth	r2, r4
   da78a:	fbb6 f3f9 	udiv	r3, r6, r9
   da78e:	fb09 6613 	mls	r6, r9, r3, r6
   da792:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da796:	fb03 f808 	mul.w	r8, r3, r8
   da79a:	45a0      	cmp	r8, r4
   da79c:	d909      	bls.n	da7b2 <__udivmoddi4+0x96>
   da79e:	19e4      	adds	r4, r4, r7
   da7a0:	f103 32ff 	add.w	r2, r3, #4294967295
   da7a4:	f080 810a 	bcs.w	da9bc <__udivmoddi4+0x2a0>
   da7a8:	45a0      	cmp	r8, r4
   da7aa:	f240 8107 	bls.w	da9bc <__udivmoddi4+0x2a0>
   da7ae:	3b02      	subs	r3, #2
   da7b0:	443c      	add	r4, r7
   da7b2:	ebc8 0404 	rsb	r4, r8, r4
   da7b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da7ba:	2100      	movs	r1, #0
   da7bc:	2d00      	cmp	r5, #0
   da7be:	d062      	beq.n	da886 <__udivmoddi4+0x16a>
   da7c0:	fa24 f40e 	lsr.w	r4, r4, lr
   da7c4:	2300      	movs	r3, #0
   da7c6:	602c      	str	r4, [r5, #0]
   da7c8:	606b      	str	r3, [r5, #4]
   da7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7ce:	428b      	cmp	r3, r1
   da7d0:	d907      	bls.n	da7e2 <__udivmoddi4+0xc6>
   da7d2:	2d00      	cmp	r5, #0
   da7d4:	d055      	beq.n	da882 <__udivmoddi4+0x166>
   da7d6:	2100      	movs	r1, #0
   da7d8:	e885 0041 	stmia.w	r5, {r0, r6}
   da7dc:	4608      	mov	r0, r1
   da7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7e2:	fab3 f183 	clz	r1, r3
   da7e6:	2900      	cmp	r1, #0
   da7e8:	f040 8090 	bne.w	da90c <__udivmoddi4+0x1f0>
   da7ec:	42b3      	cmp	r3, r6
   da7ee:	d302      	bcc.n	da7f6 <__udivmoddi4+0xda>
   da7f0:	4282      	cmp	r2, r0
   da7f2:	f200 80f8 	bhi.w	da9e6 <__udivmoddi4+0x2ca>
   da7f6:	1a84      	subs	r4, r0, r2
   da7f8:	eb66 0603 	sbc.w	r6, r6, r3
   da7fc:	2001      	movs	r0, #1
   da7fe:	46b4      	mov	ip, r6
   da800:	2d00      	cmp	r5, #0
   da802:	d040      	beq.n	da886 <__udivmoddi4+0x16a>
   da804:	e885 1010 	stmia.w	r5, {r4, ip}
   da808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da80c:	b912      	cbnz	r2, da814 <__udivmoddi4+0xf8>
   da80e:	2701      	movs	r7, #1
   da810:	fbb7 f7f2 	udiv	r7, r7, r2
   da814:	fab7 fe87 	clz	lr, r7
   da818:	f1be 0f00 	cmp.w	lr, #0
   da81c:	d135      	bne.n	da88a <__udivmoddi4+0x16e>
   da81e:	1bf3      	subs	r3, r6, r7
   da820:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da824:	fa1f fc87 	uxth.w	ip, r7
   da828:	2101      	movs	r1, #1
   da82a:	fbb3 f0f8 	udiv	r0, r3, r8
   da82e:	0c22      	lsrs	r2, r4, #16
   da830:	fb08 3610 	mls	r6, r8, r0, r3
   da834:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   da838:	fb0c f300 	mul.w	r3, ip, r0
   da83c:	42b3      	cmp	r3, r6
   da83e:	d907      	bls.n	da850 <__udivmoddi4+0x134>
   da840:	19f6      	adds	r6, r6, r7
   da842:	f100 32ff 	add.w	r2, r0, #4294967295
   da846:	d202      	bcs.n	da84e <__udivmoddi4+0x132>
   da848:	42b3      	cmp	r3, r6
   da84a:	f200 80ce 	bhi.w	da9ea <__udivmoddi4+0x2ce>
   da84e:	4610      	mov	r0, r2
   da850:	1af6      	subs	r6, r6, r3
   da852:	b2a2      	uxth	r2, r4
   da854:	fbb6 f3f8 	udiv	r3, r6, r8
   da858:	fb08 6613 	mls	r6, r8, r3, r6
   da85c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   da860:	fb0c fc03 	mul.w	ip, ip, r3
   da864:	45a4      	cmp	ip, r4
   da866:	d907      	bls.n	da878 <__udivmoddi4+0x15c>
   da868:	19e4      	adds	r4, r4, r7
   da86a:	f103 32ff 	add.w	r2, r3, #4294967295
   da86e:	d202      	bcs.n	da876 <__udivmoddi4+0x15a>
   da870:	45a4      	cmp	ip, r4
   da872:	f200 80b5 	bhi.w	da9e0 <__udivmoddi4+0x2c4>
   da876:	4613      	mov	r3, r2
   da878:	ebcc 0404 	rsb	r4, ip, r4
   da87c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   da880:	e79c      	b.n	da7bc <__udivmoddi4+0xa0>
   da882:	4629      	mov	r1, r5
   da884:	4628      	mov	r0, r5
   da886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da88a:	f1ce 0120 	rsb	r1, lr, #32
   da88e:	fa06 f30e 	lsl.w	r3, r6, lr
   da892:	fa07 f70e 	lsl.w	r7, r7, lr
   da896:	fa20 f901 	lsr.w	r9, r0, r1
   da89a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da89e:	40ce      	lsrs	r6, r1
   da8a0:	ea49 0903 	orr.w	r9, r9, r3
   da8a4:	fbb6 faf8 	udiv	sl, r6, r8
   da8a8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   da8ac:	fb08 661a 	mls	r6, r8, sl, r6
   da8b0:	fa1f fc87 	uxth.w	ip, r7
   da8b4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   da8b8:	fb0a f20c 	mul.w	r2, sl, ip
   da8bc:	429a      	cmp	r2, r3
   da8be:	fa00 f40e 	lsl.w	r4, r0, lr
   da8c2:	d90a      	bls.n	da8da <__udivmoddi4+0x1be>
   da8c4:	19db      	adds	r3, r3, r7
   da8c6:	f10a 31ff 	add.w	r1, sl, #4294967295
   da8ca:	f080 8087 	bcs.w	da9dc <__udivmoddi4+0x2c0>
   da8ce:	429a      	cmp	r2, r3
   da8d0:	f240 8084 	bls.w	da9dc <__udivmoddi4+0x2c0>
   da8d4:	f1aa 0a02 	sub.w	sl, sl, #2
   da8d8:	443b      	add	r3, r7
   da8da:	1a9b      	subs	r3, r3, r2
   da8dc:	fa1f f989 	uxth.w	r9, r9
   da8e0:	fbb3 f1f8 	udiv	r1, r3, r8
   da8e4:	fb08 3311 	mls	r3, r8, r1, r3
   da8e8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   da8ec:	fb01 f60c 	mul.w	r6, r1, ip
   da8f0:	429e      	cmp	r6, r3
   da8f2:	d907      	bls.n	da904 <__udivmoddi4+0x1e8>
   da8f4:	19db      	adds	r3, r3, r7
   da8f6:	f101 32ff 	add.w	r2, r1, #4294967295
   da8fa:	d26b      	bcs.n	da9d4 <__udivmoddi4+0x2b8>
   da8fc:	429e      	cmp	r6, r3
   da8fe:	d969      	bls.n	da9d4 <__udivmoddi4+0x2b8>
   da900:	3902      	subs	r1, #2
   da902:	443b      	add	r3, r7
   da904:	1b9b      	subs	r3, r3, r6
   da906:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   da90a:	e78e      	b.n	da82a <__udivmoddi4+0x10e>
   da90c:	f1c1 0e20 	rsb	lr, r1, #32
   da910:	fa22 f40e 	lsr.w	r4, r2, lr
   da914:	408b      	lsls	r3, r1
   da916:	4323      	orrs	r3, r4
   da918:	fa20 f70e 	lsr.w	r7, r0, lr
   da91c:	fa06 f401 	lsl.w	r4, r6, r1
   da920:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   da924:	fa26 f60e 	lsr.w	r6, r6, lr
   da928:	433c      	orrs	r4, r7
   da92a:	fbb6 f9fc 	udiv	r9, r6, ip
   da92e:	0c27      	lsrs	r7, r4, #16
   da930:	fb0c 6619 	mls	r6, ip, r9, r6
   da934:	fa1f f883 	uxth.w	r8, r3
   da938:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   da93c:	fb09 f708 	mul.w	r7, r9, r8
   da940:	42b7      	cmp	r7, r6
   da942:	fa02 f201 	lsl.w	r2, r2, r1
   da946:	fa00 fa01 	lsl.w	sl, r0, r1
   da94a:	d908      	bls.n	da95e <__udivmoddi4+0x242>
   da94c:	18f6      	adds	r6, r6, r3
   da94e:	f109 30ff 	add.w	r0, r9, #4294967295
   da952:	d241      	bcs.n	da9d8 <__udivmoddi4+0x2bc>
   da954:	42b7      	cmp	r7, r6
   da956:	d93f      	bls.n	da9d8 <__udivmoddi4+0x2bc>
   da958:	f1a9 0902 	sub.w	r9, r9, #2
   da95c:	441e      	add	r6, r3
   da95e:	1bf6      	subs	r6, r6, r7
   da960:	b2a0      	uxth	r0, r4
   da962:	fbb6 f4fc 	udiv	r4, r6, ip
   da966:	fb0c 6614 	mls	r6, ip, r4, r6
   da96a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   da96e:	fb04 f808 	mul.w	r8, r4, r8
   da972:	45b8      	cmp	r8, r7
   da974:	d907      	bls.n	da986 <__udivmoddi4+0x26a>
   da976:	18ff      	adds	r7, r7, r3
   da978:	f104 30ff 	add.w	r0, r4, #4294967295
   da97c:	d228      	bcs.n	da9d0 <__udivmoddi4+0x2b4>
   da97e:	45b8      	cmp	r8, r7
   da980:	d926      	bls.n	da9d0 <__udivmoddi4+0x2b4>
   da982:	3c02      	subs	r4, #2
   da984:	441f      	add	r7, r3
   da986:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   da98a:	ebc8 0707 	rsb	r7, r8, r7
   da98e:	fba0 8902 	umull	r8, r9, r0, r2
   da992:	454f      	cmp	r7, r9
   da994:	4644      	mov	r4, r8
   da996:	464e      	mov	r6, r9
   da998:	d314      	bcc.n	da9c4 <__udivmoddi4+0x2a8>
   da99a:	d029      	beq.n	da9f0 <__udivmoddi4+0x2d4>
   da99c:	b365      	cbz	r5, da9f8 <__udivmoddi4+0x2dc>
   da99e:	ebba 0304 	subs.w	r3, sl, r4
   da9a2:	eb67 0706 	sbc.w	r7, r7, r6
   da9a6:	fa07 fe0e 	lsl.w	lr, r7, lr
   da9aa:	40cb      	lsrs	r3, r1
   da9ac:	40cf      	lsrs	r7, r1
   da9ae:	ea4e 0303 	orr.w	r3, lr, r3
   da9b2:	e885 0088 	stmia.w	r5, {r3, r7}
   da9b6:	2100      	movs	r1, #0
   da9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da9bc:	4613      	mov	r3, r2
   da9be:	e6f8      	b.n	da7b2 <__udivmoddi4+0x96>
   da9c0:	4610      	mov	r0, r2
   da9c2:	e6e0      	b.n	da786 <__udivmoddi4+0x6a>
   da9c4:	ebb8 0402 	subs.w	r4, r8, r2
   da9c8:	eb69 0603 	sbc.w	r6, r9, r3
   da9cc:	3801      	subs	r0, #1
   da9ce:	e7e5      	b.n	da99c <__udivmoddi4+0x280>
   da9d0:	4604      	mov	r4, r0
   da9d2:	e7d8      	b.n	da986 <__udivmoddi4+0x26a>
   da9d4:	4611      	mov	r1, r2
   da9d6:	e795      	b.n	da904 <__udivmoddi4+0x1e8>
   da9d8:	4681      	mov	r9, r0
   da9da:	e7c0      	b.n	da95e <__udivmoddi4+0x242>
   da9dc:	468a      	mov	sl, r1
   da9de:	e77c      	b.n	da8da <__udivmoddi4+0x1be>
   da9e0:	3b02      	subs	r3, #2
   da9e2:	443c      	add	r4, r7
   da9e4:	e748      	b.n	da878 <__udivmoddi4+0x15c>
   da9e6:	4608      	mov	r0, r1
   da9e8:	e70a      	b.n	da800 <__udivmoddi4+0xe4>
   da9ea:	3802      	subs	r0, #2
   da9ec:	443e      	add	r6, r7
   da9ee:	e72f      	b.n	da850 <__udivmoddi4+0x134>
   da9f0:	45c2      	cmp	sl, r8
   da9f2:	d3e7      	bcc.n	da9c4 <__udivmoddi4+0x2a8>
   da9f4:	463e      	mov	r6, r7
   da9f6:	e7d1      	b.n	da99c <__udivmoddi4+0x280>
   da9f8:	4629      	mov	r1, r5
   da9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da9fe:	bf00      	nop

000daa00 <__aeabi_idiv0>:
   daa00:	4770      	bx	lr
   daa02:	bf00      	nop

000daa04 <asctime>:
   daa04:	4b09      	ldr	r3, [pc, #36]	; (daa2c <asctime+0x28>)
   daa06:	b570      	push	{r4, r5, r6, lr}
   daa08:	681c      	ldr	r4, [r3, #0]
   daa0a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   daa0c:	4606      	mov	r6, r0
   daa0e:	b93d      	cbnz	r5, daa20 <asctime+0x1c>
   daa10:	201a      	movs	r0, #26
   daa12:	f7fb fcef 	bl	d63f4 <malloc>
   daa16:	221a      	movs	r2, #26
   daa18:	6420      	str	r0, [r4, #64]	; 0x40
   daa1a:	4629      	mov	r1, r5
   daa1c:	f000 f972 	bl	dad04 <memset>
   daa20:	6c21      	ldr	r1, [r4, #64]	; 0x40
   daa22:	4630      	mov	r0, r6
   daa24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   daa28:	f000 b802 	b.w	daa30 <asctime_r>
   daa2c:	2003e124 	.word	0x2003e124

000daa30 <asctime_r>:
   daa30:	b510      	push	{r4, lr}
   daa32:	460c      	mov	r4, r1
   daa34:	6941      	ldr	r1, [r0, #20]
   daa36:	6903      	ldr	r3, [r0, #16]
   daa38:	6982      	ldr	r2, [r0, #24]
   daa3a:	b086      	sub	sp, #24
   daa3c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daa40:	9104      	str	r1, [sp, #16]
   daa42:	6801      	ldr	r1, [r0, #0]
   daa44:	9103      	str	r1, [sp, #12]
   daa46:	6841      	ldr	r1, [r0, #4]
   daa48:	9102      	str	r1, [sp, #8]
   daa4a:	6881      	ldr	r1, [r0, #8]
   daa4c:	9101      	str	r1, [sp, #4]
   daa4e:	68c1      	ldr	r1, [r0, #12]
   daa50:	9100      	str	r1, [sp, #0]
   daa52:	4907      	ldr	r1, [pc, #28]	; (daa70 <asctime_r+0x40>)
   daa54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daa58:	440b      	add	r3, r1
   daa5a:	4906      	ldr	r1, [pc, #24]	; (daa74 <asctime_r+0x44>)
   daa5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daa60:	440a      	add	r2, r1
   daa62:	4620      	mov	r0, r4
   daa64:	4904      	ldr	r1, [pc, #16]	; (daa78 <asctime_r+0x48>)
   daa66:	f7fb fce5 	bl	d6434 <siprintf>
   daa6a:	4620      	mov	r0, r4
   daa6c:	b006      	add	sp, #24
   daa6e:	bd10      	pop	{r4, pc}
   daa70:	000dc005 	.word	0x000dc005
   daa74:	000dbff0 	.word	0x000dbff0
   daa78:	000dc029 	.word	0x000dc029

000daa7c <atoi>:
   daa7c:	220a      	movs	r2, #10
   daa7e:	2100      	movs	r1, #0
   daa80:	f000 ba78 	b.w	daf74 <strtol>

000daa84 <__cxa_atexit>:
   daa84:	b510      	push	{r4, lr}
   daa86:	4c05      	ldr	r4, [pc, #20]	; (daa9c <__cxa_atexit+0x18>)
   daa88:	4613      	mov	r3, r2
   daa8a:	b12c      	cbz	r4, daa98 <__cxa_atexit+0x14>
   daa8c:	460a      	mov	r2, r1
   daa8e:	4601      	mov	r1, r0
   daa90:	2002      	movs	r0, #2
   daa92:	f3af 8000 	nop.w
   daa96:	bd10      	pop	{r4, pc}
   daa98:	4620      	mov	r0, r4
   daa9a:	bd10      	pop	{r4, pc}
   daa9c:	00000000 	.word	0x00000000

000daaa0 <localtime>:
   daaa0:	b538      	push	{r3, r4, r5, lr}
   daaa2:	4b07      	ldr	r3, [pc, #28]	; (daac0 <localtime+0x20>)
   daaa4:	681c      	ldr	r4, [r3, #0]
   daaa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daaa8:	4605      	mov	r5, r0
   daaaa:	b91b      	cbnz	r3, daab4 <localtime+0x14>
   daaac:	2024      	movs	r0, #36	; 0x24
   daaae:	f7fb fca1 	bl	d63f4 <malloc>
   daab2:	63e0      	str	r0, [r4, #60]	; 0x3c
   daab4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daab6:	4628      	mov	r0, r5
   daab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daabc:	f000 b802 	b.w	daac4 <localtime_r>
   daac0:	2003e124 	.word	0x2003e124

000daac4 <localtime_r>:
   daac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daac8:	460c      	mov	r4, r1
   daaca:	4680      	mov	r8, r0
   daacc:	f000 fd58 	bl	db580 <__gettzinfo>
   daad0:	4621      	mov	r1, r4
   daad2:	4607      	mov	r7, r0
   daad4:	4640      	mov	r0, r8
   daad6:	f000 fd57 	bl	db588 <gmtime_r>
   daada:	6946      	ldr	r6, [r0, #20]
   daadc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   daae0:	07b3      	lsls	r3, r6, #30
   daae2:	4604      	mov	r4, r0
   daae4:	d105      	bne.n	daaf2 <localtime_r+0x2e>
   daae6:	2264      	movs	r2, #100	; 0x64
   daae8:	fb96 f3f2 	sdiv	r3, r6, r2
   daaec:	fb02 6313 	mls	r3, r2, r3, r6
   daaf0:	b94b      	cbnz	r3, dab06 <localtime_r+0x42>
   daaf2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   daaf6:	fb96 f3f5 	sdiv	r3, r6, r5
   daafa:	fb05 6513 	mls	r5, r5, r3, r6
   daafe:	fab5 f385 	clz	r3, r5
   dab02:	095b      	lsrs	r3, r3, #5
   dab04:	e000      	b.n	dab08 <localtime_r+0x44>
   dab06:	2301      	movs	r3, #1
   dab08:	4a5f      	ldr	r2, [pc, #380]	; (dac88 <localtime_r+0x1c4>)
   dab0a:	2530      	movs	r5, #48	; 0x30
   dab0c:	fb05 2503 	mla	r5, r5, r3, r2
   dab10:	f000 fb6a 	bl	db1e8 <__tz_lock>
   dab14:	f000 fb6a 	bl	db1ec <_tzset_unlocked>
   dab18:	4b5c      	ldr	r3, [pc, #368]	; (dac8c <localtime_r+0x1c8>)
   dab1a:	681b      	ldr	r3, [r3, #0]
   dab1c:	b1f3      	cbz	r3, dab5c <localtime_r+0x98>
   dab1e:	687b      	ldr	r3, [r7, #4]
   dab20:	429e      	cmp	r6, r3
   dab22:	d105      	bne.n	dab30 <localtime_r+0x6c>
   dab24:	6839      	ldr	r1, [r7, #0]
   dab26:	f8d8 3000 	ldr.w	r3, [r8]
   dab2a:	69fa      	ldr	r2, [r7, #28]
   dab2c:	b941      	cbnz	r1, dab40 <localtime_r+0x7c>
   dab2e:	e00a      	b.n	dab46 <localtime_r+0x82>
   dab30:	4630      	mov	r0, r6
   dab32:	f000 fab1 	bl	db098 <__tzcalc_limits>
   dab36:	2800      	cmp	r0, #0
   dab38:	d1f4      	bne.n	dab24 <localtime_r+0x60>
   dab3a:	f04f 33ff 	mov.w	r3, #4294967295
   dab3e:	e00d      	b.n	dab5c <localtime_r+0x98>
   dab40:	4293      	cmp	r3, r2
   dab42:	db08      	blt.n	dab56 <localtime_r+0x92>
   dab44:	e001      	b.n	dab4a <localtime_r+0x86>
   dab46:	4293      	cmp	r3, r2
   dab48:	da07      	bge.n	dab5a <localtime_r+0x96>
   dab4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dab4c:	4293      	cmp	r3, r2
   dab4e:	bfac      	ite	ge
   dab50:	2300      	movge	r3, #0
   dab52:	2301      	movlt	r3, #1
   dab54:	e002      	b.n	dab5c <localtime_r+0x98>
   dab56:	2300      	movs	r3, #0
   dab58:	e000      	b.n	dab5c <localtime_r+0x98>
   dab5a:	2301      	movs	r3, #1
   dab5c:	6223      	str	r3, [r4, #32]
   dab5e:	6a23      	ldr	r3, [r4, #32]
   dab60:	2b01      	cmp	r3, #1
   dab62:	bf0c      	ite	eq
   dab64:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dab66:	6a39      	ldrne	r1, [r7, #32]
   dab68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dab6c:	203c      	movs	r0, #60	; 0x3c
   dab6e:	fb91 f6f3 	sdiv	r6, r1, r3
   dab72:	fb03 1316 	mls	r3, r3, r6, r1
   dab76:	6861      	ldr	r1, [r4, #4]
   dab78:	fb93 f2f0 	sdiv	r2, r3, r0
   dab7c:	fb00 3012 	mls	r0, r0, r2, r3
   dab80:	6823      	ldr	r3, [r4, #0]
   dab82:	1a89      	subs	r1, r1, r2
   dab84:	68a2      	ldr	r2, [r4, #8]
   dab86:	6061      	str	r1, [r4, #4]
   dab88:	1a1b      	subs	r3, r3, r0
   dab8a:	1b92      	subs	r2, r2, r6
   dab8c:	2b3b      	cmp	r3, #59	; 0x3b
   dab8e:	6023      	str	r3, [r4, #0]
   dab90:	60a2      	str	r2, [r4, #8]
   dab92:	dd03      	ble.n	dab9c <localtime_r+0xd8>
   dab94:	3101      	adds	r1, #1
   dab96:	6061      	str	r1, [r4, #4]
   dab98:	3b3c      	subs	r3, #60	; 0x3c
   dab9a:	e004      	b.n	daba6 <localtime_r+0xe2>
   dab9c:	2b00      	cmp	r3, #0
   dab9e:	da03      	bge.n	daba8 <localtime_r+0xe4>
   daba0:	3901      	subs	r1, #1
   daba2:	6061      	str	r1, [r4, #4]
   daba4:	333c      	adds	r3, #60	; 0x3c
   daba6:	6023      	str	r3, [r4, #0]
   daba8:	6863      	ldr	r3, [r4, #4]
   dabaa:	2b3b      	cmp	r3, #59	; 0x3b
   dabac:	dd03      	ble.n	dabb6 <localtime_r+0xf2>
   dabae:	3201      	adds	r2, #1
   dabb0:	60a2      	str	r2, [r4, #8]
   dabb2:	3b3c      	subs	r3, #60	; 0x3c
   dabb4:	e004      	b.n	dabc0 <localtime_r+0xfc>
   dabb6:	2b00      	cmp	r3, #0
   dabb8:	da03      	bge.n	dabc2 <localtime_r+0xfe>
   dabba:	3a01      	subs	r2, #1
   dabbc:	60a2      	str	r2, [r4, #8]
   dabbe:	333c      	adds	r3, #60	; 0x3c
   dabc0:	6063      	str	r3, [r4, #4]
   dabc2:	68a3      	ldr	r3, [r4, #8]
   dabc4:	2b17      	cmp	r3, #23
   dabc6:	dd22      	ble.n	dac0e <localtime_r+0x14a>
   dabc8:	69e2      	ldr	r2, [r4, #28]
   dabca:	3201      	adds	r2, #1
   dabcc:	61e2      	str	r2, [r4, #28]
   dabce:	69a2      	ldr	r2, [r4, #24]
   dabd0:	3201      	adds	r2, #1
   dabd2:	2a06      	cmp	r2, #6
   dabd4:	bfc8      	it	gt
   dabd6:	2200      	movgt	r2, #0
   dabd8:	61a2      	str	r2, [r4, #24]
   dabda:	68e2      	ldr	r2, [r4, #12]
   dabdc:	3b18      	subs	r3, #24
   dabde:	3201      	adds	r2, #1
   dabe0:	60a3      	str	r3, [r4, #8]
   dabe2:	6923      	ldr	r3, [r4, #16]
   dabe4:	60e2      	str	r2, [r4, #12]
   dabe6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dabea:	428a      	cmp	r2, r1
   dabec:	dd46      	ble.n	dac7c <localtime_r+0x1b8>
   dabee:	3301      	adds	r3, #1
   dabf0:	2b0c      	cmp	r3, #12
   dabf2:	bf0c      	ite	eq
   dabf4:	6963      	ldreq	r3, [r4, #20]
   dabf6:	6123      	strne	r3, [r4, #16]
   dabf8:	eba2 0201 	sub.w	r2, r2, r1
   dabfc:	60e2      	str	r2, [r4, #12]
   dabfe:	bf01      	itttt	eq
   dac00:	3301      	addeq	r3, #1
   dac02:	2200      	moveq	r2, #0
   dac04:	6122      	streq	r2, [r4, #16]
   dac06:	6163      	streq	r3, [r4, #20]
   dac08:	bf08      	it	eq
   dac0a:	61e2      	streq	r2, [r4, #28]
   dac0c:	e036      	b.n	dac7c <localtime_r+0x1b8>
   dac0e:	2b00      	cmp	r3, #0
   dac10:	da34      	bge.n	dac7c <localtime_r+0x1b8>
   dac12:	69e2      	ldr	r2, [r4, #28]
   dac14:	3a01      	subs	r2, #1
   dac16:	61e2      	str	r2, [r4, #28]
   dac18:	69a2      	ldr	r2, [r4, #24]
   dac1a:	3a01      	subs	r2, #1
   dac1c:	bf48      	it	mi
   dac1e:	2206      	movmi	r2, #6
   dac20:	61a2      	str	r2, [r4, #24]
   dac22:	68e2      	ldr	r2, [r4, #12]
   dac24:	3318      	adds	r3, #24
   dac26:	3a01      	subs	r2, #1
   dac28:	60e2      	str	r2, [r4, #12]
   dac2a:	60a3      	str	r3, [r4, #8]
   dac2c:	bb32      	cbnz	r2, dac7c <localtime_r+0x1b8>
   dac2e:	6923      	ldr	r3, [r4, #16]
   dac30:	3b01      	subs	r3, #1
   dac32:	d401      	bmi.n	dac38 <localtime_r+0x174>
   dac34:	6123      	str	r3, [r4, #16]
   dac36:	e01d      	b.n	dac74 <localtime_r+0x1b0>
   dac38:	230b      	movs	r3, #11
   dac3a:	6123      	str	r3, [r4, #16]
   dac3c:	6963      	ldr	r3, [r4, #20]
   dac3e:	1e5a      	subs	r2, r3, #1
   dac40:	f012 0f03 	tst.w	r2, #3
   dac44:	6162      	str	r2, [r4, #20]
   dac46:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dac4a:	d105      	bne.n	dac58 <localtime_r+0x194>
   dac4c:	2164      	movs	r1, #100	; 0x64
   dac4e:	fb93 f2f1 	sdiv	r2, r3, r1
   dac52:	fb01 3212 	mls	r2, r1, r2, r3
   dac56:	b94a      	cbnz	r2, dac6c <localtime_r+0x1a8>
   dac58:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dac5c:	fb93 f2f1 	sdiv	r2, r3, r1
   dac60:	fb01 3312 	mls	r3, r1, r2, r3
   dac64:	fab3 f383 	clz	r3, r3
   dac68:	095b      	lsrs	r3, r3, #5
   dac6a:	e000      	b.n	dac6e <localtime_r+0x1aa>
   dac6c:	2301      	movs	r3, #1
   dac6e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dac72:	61e3      	str	r3, [r4, #28]
   dac74:	6923      	ldr	r3, [r4, #16]
   dac76:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dac7a:	60e3      	str	r3, [r4, #12]
   dac7c:	f000 fab5 	bl	db1ea <__tz_unlock>
   dac80:	4620      	mov	r0, r4
   dac82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dac86:	bf00      	nop
   dac88:	000dc1ac 	.word	0x000dc1ac
   dac8c:	2003e7e8 	.word	0x2003e7e8

000dac90 <ldiv>:
   dac90:	2900      	cmp	r1, #0
   dac92:	b510      	push	{r4, lr}
   dac94:	fb91 f4f2 	sdiv	r4, r1, r2
   dac98:	fb02 1314 	mls	r3, r2, r4, r1
   dac9c:	db04      	blt.n	daca8 <ldiv+0x18>
   dac9e:	2b00      	cmp	r3, #0
   daca0:	da07      	bge.n	dacb2 <ldiv+0x22>
   daca2:	3401      	adds	r4, #1
   daca4:	1a9b      	subs	r3, r3, r2
   daca6:	e004      	b.n	dacb2 <ldiv+0x22>
   daca8:	2b00      	cmp	r3, #0
   dacaa:	bfc4      	itt	gt
   dacac:	f104 34ff 	addgt.w	r4, r4, #4294967295
   dacb0:	189b      	addgt	r3, r3, r2
   dacb2:	6004      	str	r4, [r0, #0]
   dacb4:	6043      	str	r3, [r0, #4]
   dacb6:	bd10      	pop	{r4, pc}

000dacb8 <memcpy>:
   dacb8:	b510      	push	{r4, lr}
   dacba:	1e43      	subs	r3, r0, #1
   dacbc:	440a      	add	r2, r1
   dacbe:	4291      	cmp	r1, r2
   dacc0:	d004      	beq.n	daccc <memcpy+0x14>
   dacc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacc6:	f803 4f01 	strb.w	r4, [r3, #1]!
   dacca:	e7f8      	b.n	dacbe <memcpy+0x6>
   daccc:	bd10      	pop	{r4, pc}

000dacce <memmove>:
   dacce:	4288      	cmp	r0, r1
   dacd0:	b510      	push	{r4, lr}
   dacd2:	eb01 0302 	add.w	r3, r1, r2
   dacd6:	d801      	bhi.n	dacdc <memmove+0xe>
   dacd8:	1e42      	subs	r2, r0, #1
   dacda:	e00b      	b.n	dacf4 <memmove+0x26>
   dacdc:	4298      	cmp	r0, r3
   dacde:	d2fb      	bcs.n	dacd8 <memmove+0xa>
   dace0:	1881      	adds	r1, r0, r2
   dace2:	1ad2      	subs	r2, r2, r3
   dace4:	42d3      	cmn	r3, r2
   dace6:	d004      	beq.n	dacf2 <memmove+0x24>
   dace8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dacec:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dacf0:	e7f8      	b.n	dace4 <memmove+0x16>
   dacf2:	bd10      	pop	{r4, pc}
   dacf4:	4299      	cmp	r1, r3
   dacf6:	d004      	beq.n	dad02 <memmove+0x34>
   dacf8:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacfc:	f802 4f01 	strb.w	r4, [r2, #1]!
   dad00:	e7f8      	b.n	dacf4 <memmove+0x26>
   dad02:	bd10      	pop	{r4, pc}

000dad04 <memset>:
   dad04:	4402      	add	r2, r0
   dad06:	4603      	mov	r3, r0
   dad08:	4293      	cmp	r3, r2
   dad0a:	d002      	beq.n	dad12 <memset+0xe>
   dad0c:	f803 1b01 	strb.w	r1, [r3], #1
   dad10:	e7fa      	b.n	dad08 <memset+0x4>
   dad12:	4770      	bx	lr

000dad14 <srand>:
   dad14:	b538      	push	{r3, r4, r5, lr}
   dad16:	4b12      	ldr	r3, [pc, #72]	; (dad60 <srand+0x4c>)
   dad18:	681c      	ldr	r4, [r3, #0]
   dad1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad1c:	4605      	mov	r5, r0
   dad1e:	b9d3      	cbnz	r3, dad56 <srand+0x42>
   dad20:	2018      	movs	r0, #24
   dad22:	f7fb fb67 	bl	d63f4 <malloc>
   dad26:	f243 330e 	movw	r3, #13070	; 0x330e
   dad2a:	63a0      	str	r0, [r4, #56]	; 0x38
   dad2c:	8003      	strh	r3, [r0, #0]
   dad2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dad32:	8043      	strh	r3, [r0, #2]
   dad34:	f241 2334 	movw	r3, #4660	; 0x1234
   dad38:	8083      	strh	r3, [r0, #4]
   dad3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dad3e:	80c3      	strh	r3, [r0, #6]
   dad40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dad44:	8103      	strh	r3, [r0, #8]
   dad46:	2305      	movs	r3, #5
   dad48:	8143      	strh	r3, [r0, #10]
   dad4a:	230b      	movs	r3, #11
   dad4c:	8183      	strh	r3, [r0, #12]
   dad4e:	2201      	movs	r2, #1
   dad50:	2300      	movs	r3, #0
   dad52:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad58:	2200      	movs	r2, #0
   dad5a:	611d      	str	r5, [r3, #16]
   dad5c:	615a      	str	r2, [r3, #20]
   dad5e:	bd38      	pop	{r3, r4, r5, pc}
   dad60:	2003e124 	.word	0x2003e124

000dad64 <strcmp>:
   dad64:	f810 2b01 	ldrb.w	r2, [r0], #1
   dad68:	f811 3b01 	ldrb.w	r3, [r1], #1
   dad6c:	2a01      	cmp	r2, #1
   dad6e:	bf28      	it	cs
   dad70:	429a      	cmpcs	r2, r3
   dad72:	d0f7      	beq.n	dad64 <strcmp>
   dad74:	1ad0      	subs	r0, r2, r3
   dad76:	4770      	bx	lr

000dad78 <strcpy>:
   dad78:	4603      	mov	r3, r0
   dad7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   dad7e:	f803 2b01 	strb.w	r2, [r3], #1
   dad82:	2a00      	cmp	r2, #0
   dad84:	d1f9      	bne.n	dad7a <strcpy+0x2>
   dad86:	4770      	bx	lr

000dad88 <strdup>:
   dad88:	4b02      	ldr	r3, [pc, #8]	; (dad94 <strdup+0xc>)
   dad8a:	4601      	mov	r1, r0
   dad8c:	6818      	ldr	r0, [r3, #0]
   dad8e:	f000 b803 	b.w	dad98 <_strdup_r>
   dad92:	bf00      	nop
   dad94:	2003e124 	.word	0x2003e124

000dad98 <_strdup_r>:
   dad98:	b570      	push	{r4, r5, r6, lr}
   dad9a:	4606      	mov	r6, r0
   dad9c:	4608      	mov	r0, r1
   dad9e:	460c      	mov	r4, r1
   dada0:	f000 f80d 	bl	dadbe <strlen>
   dada4:	1c45      	adds	r5, r0, #1
   dada6:	4629      	mov	r1, r5
   dada8:	4630      	mov	r0, r6
   dadaa:	f7fb fb63 	bl	d6474 <_malloc_r>
   dadae:	4606      	mov	r6, r0
   dadb0:	b118      	cbz	r0, dadba <_strdup_r+0x22>
   dadb2:	462a      	mov	r2, r5
   dadb4:	4621      	mov	r1, r4
   dadb6:	f7ff ff7f 	bl	dacb8 <memcpy>
   dadba:	4630      	mov	r0, r6
   dadbc:	bd70      	pop	{r4, r5, r6, pc}

000dadbe <strlen>:
   dadbe:	4603      	mov	r3, r0
   dadc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   dadc4:	2a00      	cmp	r2, #0
   dadc6:	d1fb      	bne.n	dadc0 <strlen+0x2>
   dadc8:	1a18      	subs	r0, r3, r0
   dadca:	3801      	subs	r0, #1
   dadcc:	4770      	bx	lr
	...

000dadd0 <strncasecmp>:
   dadd0:	4b10      	ldr	r3, [pc, #64]	; (dae14 <strncasecmp+0x44>)
   dadd2:	b570      	push	{r4, r5, r6, lr}
   dadd4:	681e      	ldr	r6, [r3, #0]
   dadd6:	440a      	add	r2, r1
   dadd8:	4291      	cmp	r1, r2
   dadda:	d017      	beq.n	dae0c <strncasecmp+0x3c>
   daddc:	f810 3b01 	ldrb.w	r3, [r0], #1
   dade0:	18f4      	adds	r4, r6, r3
   dade2:	7864      	ldrb	r4, [r4, #1]
   dade4:	f004 0403 	and.w	r4, r4, #3
   dade8:	2c01      	cmp	r4, #1
   dadea:	f811 4b01 	ldrb.w	r4, [r1], #1
   dadee:	eb06 0504 	add.w	r5, r6, r4
   dadf2:	bf08      	it	eq
   dadf4:	3320      	addeq	r3, #32
   dadf6:	786d      	ldrb	r5, [r5, #1]
   dadf8:	f005 0503 	and.w	r5, r5, #3
   dadfc:	2d01      	cmp	r5, #1
   dadfe:	bf08      	it	eq
   dae00:	3420      	addeq	r4, #32
   dae02:	1b1b      	subs	r3, r3, r4
   dae04:	d103      	bne.n	dae0e <strncasecmp+0x3e>
   dae06:	2c00      	cmp	r4, #0
   dae08:	d1e6      	bne.n	dadd8 <strncasecmp+0x8>
   dae0a:	e000      	b.n	dae0e <strncasecmp+0x3e>
   dae0c:	2300      	movs	r3, #0
   dae0e:	4618      	mov	r0, r3
   dae10:	bd70      	pop	{r4, r5, r6, pc}
   dae12:	bf00      	nop
   dae14:	2003e0c0 	.word	0x2003e0c0

000dae18 <strncmp>:
   dae18:	b530      	push	{r4, r5, lr}
   dae1a:	b182      	cbz	r2, dae3e <strncmp+0x26>
   dae1c:	1e45      	subs	r5, r0, #1
   dae1e:	3901      	subs	r1, #1
   dae20:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dae24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae28:	42a3      	cmp	r3, r4
   dae2a:	d106      	bne.n	dae3a <strncmp+0x22>
   dae2c:	43ec      	mvns	r4, r5
   dae2e:	4414      	add	r4, r2
   dae30:	42e0      	cmn	r0, r4
   dae32:	d001      	beq.n	dae38 <strncmp+0x20>
   dae34:	2b00      	cmp	r3, #0
   dae36:	d1f3      	bne.n	dae20 <strncmp+0x8>
   dae38:	461c      	mov	r4, r3
   dae3a:	1b18      	subs	r0, r3, r4
   dae3c:	bd30      	pop	{r4, r5, pc}
   dae3e:	4610      	mov	r0, r2
   dae40:	bd30      	pop	{r4, r5, pc}

000dae42 <strncpy>:
   dae42:	b510      	push	{r4, lr}
   dae44:	4603      	mov	r3, r0
   dae46:	b142      	cbz	r2, dae5a <strncpy+0x18>
   dae48:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae4c:	f803 4b01 	strb.w	r4, [r3], #1
   dae50:	3a01      	subs	r2, #1
   dae52:	2c00      	cmp	r4, #0
   dae54:	d1f7      	bne.n	dae46 <strncpy+0x4>
   dae56:	441a      	add	r2, r3
   dae58:	e000      	b.n	dae5c <strncpy+0x1a>
   dae5a:	bd10      	pop	{r4, pc}
   dae5c:	4293      	cmp	r3, r2
   dae5e:	d002      	beq.n	dae66 <strncpy+0x24>
   dae60:	f803 4b01 	strb.w	r4, [r3], #1
   dae64:	e7fa      	b.n	dae5c <strncpy+0x1a>
   dae66:	bd10      	pop	{r4, pc}

000dae68 <_strtol_r>:
   dae68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dae6c:	4680      	mov	r8, r0
   dae6e:	4840      	ldr	r0, [pc, #256]	; (daf70 <_strtol_r+0x108>)
   dae70:	f8d0 9000 	ldr.w	r9, [r0]
   dae74:	460f      	mov	r7, r1
   dae76:	463d      	mov	r5, r7
   dae78:	f815 4b01 	ldrb.w	r4, [r5], #1
   dae7c:	eb09 0004 	add.w	r0, r9, r4
   dae80:	7840      	ldrb	r0, [r0, #1]
   dae82:	f000 0008 	and.w	r0, r0, #8
   dae86:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dae8a:	b108      	cbz	r0, dae90 <_strtol_r+0x28>
   dae8c:	462f      	mov	r7, r5
   dae8e:	e7f2      	b.n	dae76 <_strtol_r+0xe>
   dae90:	2c2d      	cmp	r4, #45	; 0x2d
   dae92:	d103      	bne.n	dae9c <_strtol_r+0x34>
   dae94:	1cbd      	adds	r5, r7, #2
   dae96:	787c      	ldrb	r4, [r7, #1]
   dae98:	2601      	movs	r6, #1
   dae9a:	e003      	b.n	daea4 <_strtol_r+0x3c>
   dae9c:	2c2b      	cmp	r4, #43	; 0x2b
   dae9e:	bf04      	itt	eq
   daea0:	787c      	ldrbeq	r4, [r7, #1]
   daea2:	1cbd      	addeq	r5, r7, #2
   daea4:	b113      	cbz	r3, daeac <_strtol_r+0x44>
   daea6:	2b10      	cmp	r3, #16
   daea8:	d10a      	bne.n	daec0 <_strtol_r+0x58>
   daeaa:	e05b      	b.n	daf64 <_strtol_r+0xfc>
   daeac:	2c30      	cmp	r4, #48	; 0x30
   daeae:	d157      	bne.n	daf60 <_strtol_r+0xf8>
   daeb0:	7828      	ldrb	r0, [r5, #0]
   daeb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daeb6:	2858      	cmp	r0, #88	; 0x58
   daeb8:	d14d      	bne.n	daf56 <_strtol_r+0xee>
   daeba:	786c      	ldrb	r4, [r5, #1]
   daebc:	2310      	movs	r3, #16
   daebe:	3502      	adds	r5, #2
   daec0:	2e00      	cmp	r6, #0
   daec2:	bf14      	ite	ne
   daec4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   daec8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   daecc:	2700      	movs	r7, #0
   daece:	fbbc faf3 	udiv	sl, ip, r3
   daed2:	4638      	mov	r0, r7
   daed4:	fb03 cc1a 	mls	ip, r3, sl, ip
   daed8:	eb09 0e04 	add.w	lr, r9, r4
   daedc:	f89e e001 	ldrb.w	lr, [lr, #1]
   daee0:	f01e 0f04 	tst.w	lr, #4
   daee4:	d001      	beq.n	daeea <_strtol_r+0x82>
   daee6:	3c30      	subs	r4, #48	; 0x30
   daee8:	e00b      	b.n	daf02 <_strtol_r+0x9a>
   daeea:	f01e 0e03 	ands.w	lr, lr, #3
   daeee:	d01b      	beq.n	daf28 <_strtol_r+0xc0>
   daef0:	f1be 0f01 	cmp.w	lr, #1
   daef4:	bf0c      	ite	eq
   daef6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   daefa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   daefe:	ebce 0404 	rsb	r4, lr, r4
   daf02:	42a3      	cmp	r3, r4
   daf04:	dd10      	ble.n	daf28 <_strtol_r+0xc0>
   daf06:	f1b7 3fff 	cmp.w	r7, #4294967295
   daf0a:	d00a      	beq.n	daf22 <_strtol_r+0xba>
   daf0c:	4550      	cmp	r0, sl
   daf0e:	d806      	bhi.n	daf1e <_strtol_r+0xb6>
   daf10:	d101      	bne.n	daf16 <_strtol_r+0xae>
   daf12:	4564      	cmp	r4, ip
   daf14:	dc03      	bgt.n	daf1e <_strtol_r+0xb6>
   daf16:	fb03 4000 	mla	r0, r3, r0, r4
   daf1a:	2701      	movs	r7, #1
   daf1c:	e001      	b.n	daf22 <_strtol_r+0xba>
   daf1e:	f04f 37ff 	mov.w	r7, #4294967295
   daf22:	f815 4b01 	ldrb.w	r4, [r5], #1
   daf26:	e7d7      	b.n	daed8 <_strtol_r+0x70>
   daf28:	1c7b      	adds	r3, r7, #1
   daf2a:	d10c      	bne.n	daf46 <_strtol_r+0xde>
   daf2c:	2e00      	cmp	r6, #0
   daf2e:	f04f 0322 	mov.w	r3, #34	; 0x22
   daf32:	bf14      	ite	ne
   daf34:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   daf38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   daf3c:	f8c8 3000 	str.w	r3, [r8]
   daf40:	b92a      	cbnz	r2, daf4e <_strtol_r+0xe6>
   daf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf46:	b106      	cbz	r6, daf4a <_strtol_r+0xe2>
   daf48:	4240      	negs	r0, r0
   daf4a:	b172      	cbz	r2, daf6a <_strtol_r+0x102>
   daf4c:	b107      	cbz	r7, daf50 <_strtol_r+0xe8>
   daf4e:	1e69      	subs	r1, r5, #1
   daf50:	6011      	str	r1, [r2, #0]
   daf52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf56:	2430      	movs	r4, #48	; 0x30
   daf58:	2b00      	cmp	r3, #0
   daf5a:	d1b1      	bne.n	daec0 <_strtol_r+0x58>
   daf5c:	2308      	movs	r3, #8
   daf5e:	e7af      	b.n	daec0 <_strtol_r+0x58>
   daf60:	230a      	movs	r3, #10
   daf62:	e7ad      	b.n	daec0 <_strtol_r+0x58>
   daf64:	2c30      	cmp	r4, #48	; 0x30
   daf66:	d0a3      	beq.n	daeb0 <_strtol_r+0x48>
   daf68:	e7aa      	b.n	daec0 <_strtol_r+0x58>
   daf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf6e:	bf00      	nop
   daf70:	2003e0c0 	.word	0x2003e0c0

000daf74 <strtol>:
   daf74:	4613      	mov	r3, r2
   daf76:	460a      	mov	r2, r1
   daf78:	4601      	mov	r1, r0
   daf7a:	4802      	ldr	r0, [pc, #8]	; (daf84 <strtol+0x10>)
   daf7c:	6800      	ldr	r0, [r0, #0]
   daf7e:	f7ff bf73 	b.w	dae68 <_strtol_r>
   daf82:	bf00      	nop
   daf84:	2003e124 	.word	0x2003e124

000daf88 <_strtoul_r>:
   daf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daf8c:	4680      	mov	r8, r0
   daf8e:	483c      	ldr	r0, [pc, #240]	; (db080 <_strtoul_r+0xf8>)
   daf90:	f8d0 9000 	ldr.w	r9, [r0]
   daf94:	460e      	mov	r6, r1
   daf96:	4635      	mov	r5, r6
   daf98:	f815 4b01 	ldrb.w	r4, [r5], #1
   daf9c:	eb09 0004 	add.w	r0, r9, r4
   dafa0:	7840      	ldrb	r0, [r0, #1]
   dafa2:	f000 0008 	and.w	r0, r0, #8
   dafa6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dafaa:	b108      	cbz	r0, dafb0 <_strtoul_r+0x28>
   dafac:	462e      	mov	r6, r5
   dafae:	e7f2      	b.n	daf96 <_strtoul_r+0xe>
   dafb0:	2c2d      	cmp	r4, #45	; 0x2d
   dafb2:	d103      	bne.n	dafbc <_strtoul_r+0x34>
   dafb4:	1cb5      	adds	r5, r6, #2
   dafb6:	7874      	ldrb	r4, [r6, #1]
   dafb8:	2701      	movs	r7, #1
   dafba:	e003      	b.n	dafc4 <_strtoul_r+0x3c>
   dafbc:	2c2b      	cmp	r4, #43	; 0x2b
   dafbe:	bf04      	itt	eq
   dafc0:	7874      	ldrbeq	r4, [r6, #1]
   dafc2:	1cb5      	addeq	r5, r6, #2
   dafc4:	b113      	cbz	r3, dafcc <_strtoul_r+0x44>
   dafc6:	2b10      	cmp	r3, #16
   dafc8:	d10a      	bne.n	dafe0 <_strtoul_r+0x58>
   dafca:	e053      	b.n	db074 <_strtoul_r+0xec>
   dafcc:	2c30      	cmp	r4, #48	; 0x30
   dafce:	d14f      	bne.n	db070 <_strtoul_r+0xe8>
   dafd0:	7828      	ldrb	r0, [r5, #0]
   dafd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dafd6:	2858      	cmp	r0, #88	; 0x58
   dafd8:	d145      	bne.n	db066 <_strtoul_r+0xde>
   dafda:	786c      	ldrb	r4, [r5, #1]
   dafdc:	2310      	movs	r3, #16
   dafde:	3502      	adds	r5, #2
   dafe0:	f04f 3cff 	mov.w	ip, #4294967295
   dafe4:	2600      	movs	r6, #0
   dafe6:	fbbc fcf3 	udiv	ip, ip, r3
   dafea:	fb03 fa0c 	mul.w	sl, r3, ip
   dafee:	ea6f 0a0a 	mvn.w	sl, sl
   daff2:	4630      	mov	r0, r6
   daff4:	eb09 0e04 	add.w	lr, r9, r4
   daff8:	f89e e001 	ldrb.w	lr, [lr, #1]
   daffc:	f01e 0f04 	tst.w	lr, #4
   db000:	d001      	beq.n	db006 <_strtoul_r+0x7e>
   db002:	3c30      	subs	r4, #48	; 0x30
   db004:	e00b      	b.n	db01e <_strtoul_r+0x96>
   db006:	f01e 0e03 	ands.w	lr, lr, #3
   db00a:	d01a      	beq.n	db042 <_strtoul_r+0xba>
   db00c:	f1be 0f01 	cmp.w	lr, #1
   db010:	bf0c      	ite	eq
   db012:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db016:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db01a:	ebce 0404 	rsb	r4, lr, r4
   db01e:	42a3      	cmp	r3, r4
   db020:	dd0f      	ble.n	db042 <_strtoul_r+0xba>
   db022:	2e00      	cmp	r6, #0
   db024:	db08      	blt.n	db038 <_strtoul_r+0xb0>
   db026:	4560      	cmp	r0, ip
   db028:	d806      	bhi.n	db038 <_strtoul_r+0xb0>
   db02a:	d101      	bne.n	db030 <_strtoul_r+0xa8>
   db02c:	4554      	cmp	r4, sl
   db02e:	dc03      	bgt.n	db038 <_strtoul_r+0xb0>
   db030:	fb03 4000 	mla	r0, r3, r0, r4
   db034:	2601      	movs	r6, #1
   db036:	e001      	b.n	db03c <_strtoul_r+0xb4>
   db038:	f04f 36ff 	mov.w	r6, #4294967295
   db03c:	f815 4b01 	ldrb.w	r4, [r5], #1
   db040:	e7d8      	b.n	daff4 <_strtoul_r+0x6c>
   db042:	2e00      	cmp	r6, #0
   db044:	da07      	bge.n	db056 <_strtoul_r+0xce>
   db046:	2322      	movs	r3, #34	; 0x22
   db048:	f8c8 3000 	str.w	r3, [r8]
   db04c:	f04f 30ff 	mov.w	r0, #4294967295
   db050:	b92a      	cbnz	r2, db05e <_strtoul_r+0xd6>
   db052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db056:	b107      	cbz	r7, db05a <_strtoul_r+0xd2>
   db058:	4240      	negs	r0, r0
   db05a:	b172      	cbz	r2, db07a <_strtoul_r+0xf2>
   db05c:	b106      	cbz	r6, db060 <_strtoul_r+0xd8>
   db05e:	1e69      	subs	r1, r5, #1
   db060:	6011      	str	r1, [r2, #0]
   db062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db066:	2430      	movs	r4, #48	; 0x30
   db068:	2b00      	cmp	r3, #0
   db06a:	d1b9      	bne.n	dafe0 <_strtoul_r+0x58>
   db06c:	2308      	movs	r3, #8
   db06e:	e7b7      	b.n	dafe0 <_strtoul_r+0x58>
   db070:	230a      	movs	r3, #10
   db072:	e7b5      	b.n	dafe0 <_strtoul_r+0x58>
   db074:	2c30      	cmp	r4, #48	; 0x30
   db076:	d0ab      	beq.n	dafd0 <_strtoul_r+0x48>
   db078:	e7b2      	b.n	dafe0 <_strtoul_r+0x58>
   db07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db07e:	bf00      	nop
   db080:	2003e0c0 	.word	0x2003e0c0

000db084 <strtoul>:
   db084:	4613      	mov	r3, r2
   db086:	460a      	mov	r2, r1
   db088:	4601      	mov	r1, r0
   db08a:	4802      	ldr	r0, [pc, #8]	; (db094 <strtoul+0x10>)
   db08c:	6800      	ldr	r0, [r0, #0]
   db08e:	f7ff bf7b 	b.w	daf88 <_strtoul_r>
   db092:	bf00      	nop
   db094:	2003e124 	.word	0x2003e124

000db098 <__tzcalc_limits>:
   db098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db09c:	4604      	mov	r4, r0
   db09e:	f000 fa6f 	bl	db580 <__gettzinfo>
   db0a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   db0a6:	429c      	cmp	r4, r3
   db0a8:	f340 8096 	ble.w	db1d8 <__tzcalc_limits+0x140>
   db0ac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   db0b0:	18e3      	adds	r3, r4, r3
   db0b2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   db0b6:	109b      	asrs	r3, r3, #2
   db0b8:	f240 156d 	movw	r5, #365	; 0x16d
   db0bc:	fb05 3502 	mla	r5, r5, r2, r3
   db0c0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   db0c4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   db0c8:	fb92 f3f3 	sdiv	r3, r2, r3
   db0cc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   db0d0:	442b      	add	r3, r5
   db0d2:	18a5      	adds	r5, r4, r2
   db0d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db0d8:	fb95 f5f2 	sdiv	r5, r5, r2
   db0dc:	441d      	add	r5, r3
   db0de:	2364      	movs	r3, #100	; 0x64
   db0e0:	fb94 f7f2 	sdiv	r7, r4, r2
   db0e4:	fb94 f6f3 	sdiv	r6, r4, r3
   db0e8:	fb02 4717 	mls	r7, r2, r7, r4
   db0ec:	fb03 4616 	mls	r6, r3, r6, r4
   db0f0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   db0f4:	fab7 fe87 	clz	lr, r7
   db0f8:	9301      	str	r3, [sp, #4]
   db0fa:	f004 0303 	and.w	r3, r4, #3
   db0fe:	6044      	str	r4, [r0, #4]
   db100:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   db104:	4601      	mov	r1, r0
   db106:	9300      	str	r3, [sp, #0]
   db108:	f04f 0c07 	mov.w	ip, #7
   db10c:	7a0b      	ldrb	r3, [r1, #8]
   db10e:	2b4a      	cmp	r3, #74	; 0x4a
   db110:	d10e      	bne.n	db130 <__tzcalc_limits+0x98>
   db112:	694b      	ldr	r3, [r1, #20]
   db114:	9a00      	ldr	r2, [sp, #0]
   db116:	18ec      	adds	r4, r5, r3
   db118:	b902      	cbnz	r2, db11c <__tzcalc_limits+0x84>
   db11a:	b906      	cbnz	r6, db11e <__tzcalc_limits+0x86>
   db11c:	b927      	cbnz	r7, db128 <__tzcalc_limits+0x90>
   db11e:	2b3b      	cmp	r3, #59	; 0x3b
   db120:	bfd4      	ite	le
   db122:	2300      	movle	r3, #0
   db124:	2301      	movgt	r3, #1
   db126:	e000      	b.n	db12a <__tzcalc_limits+0x92>
   db128:	2300      	movs	r3, #0
   db12a:	4423      	add	r3, r4
   db12c:	3b01      	subs	r3, #1
   db12e:	e03f      	b.n	db1b0 <__tzcalc_limits+0x118>
   db130:	2b44      	cmp	r3, #68	; 0x44
   db132:	d102      	bne.n	db13a <__tzcalc_limits+0xa2>
   db134:	694b      	ldr	r3, [r1, #20]
   db136:	442b      	add	r3, r5
   db138:	e03a      	b.n	db1b0 <__tzcalc_limits+0x118>
   db13a:	9b00      	ldr	r3, [sp, #0]
   db13c:	b92b      	cbnz	r3, db14a <__tzcalc_limits+0xb2>
   db13e:	2e00      	cmp	r6, #0
   db140:	bf0c      	ite	eq
   db142:	46f0      	moveq	r8, lr
   db144:	f04f 0801 	movne.w	r8, #1
   db148:	e000      	b.n	db14c <__tzcalc_limits+0xb4>
   db14a:	46f0      	mov	r8, lr
   db14c:	4b24      	ldr	r3, [pc, #144]	; (db1e0 <__tzcalc_limits+0x148>)
   db14e:	68cc      	ldr	r4, [r1, #12]
   db150:	2230      	movs	r2, #48	; 0x30
   db152:	fb02 3808 	mla	r8, r2, r8, r3
   db156:	f1a8 0a04 	sub.w	sl, r8, #4
   db15a:	46a9      	mov	r9, r5
   db15c:	2301      	movs	r3, #1
   db15e:	42a3      	cmp	r3, r4
   db160:	da04      	bge.n	db16c <__tzcalc_limits+0xd4>
   db162:	f85a bf04 	ldr.w	fp, [sl, #4]!
   db166:	3301      	adds	r3, #1
   db168:	44d9      	add	r9, fp
   db16a:	e7f8      	b.n	db15e <__tzcalc_limits+0xc6>
   db16c:	f109 0304 	add.w	r3, r9, #4
   db170:	fb93 fbfc 	sdiv	fp, r3, ip
   db174:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   db178:	2c01      	cmp	r4, #1
   db17a:	ebca 0a03 	rsb	sl, sl, r3
   db17e:	694b      	ldr	r3, [r1, #20]
   db180:	bfb8      	it	lt
   db182:	2401      	movlt	r4, #1
   db184:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   db188:	ebb3 0a0a 	subs.w	sl, r3, sl
   db18c:	690b      	ldr	r3, [r1, #16]
   db18e:	f104 34ff 	add.w	r4, r4, #4294967295
   db192:	f103 33ff 	add.w	r3, r3, #4294967295
   db196:	bf48      	it	mi
   db198:	f10a 0a07 	addmi.w	sl, sl, #7
   db19c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db1a0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   db1a4:	4453      	add	r3, sl
   db1a6:	42a3      	cmp	r3, r4
   db1a8:	db01      	blt.n	db1ae <__tzcalc_limits+0x116>
   db1aa:	3b07      	subs	r3, #7
   db1ac:	e7fb      	b.n	db1a6 <__tzcalc_limits+0x10e>
   db1ae:	444b      	add	r3, r9
   db1b0:	698c      	ldr	r4, [r1, #24]
   db1b2:	4a0c      	ldr	r2, [pc, #48]	; (db1e4 <__tzcalc_limits+0x14c>)
   db1b4:	fb02 4303 	mla	r3, r2, r3, r4
   db1b8:	6a0c      	ldr	r4, [r1, #32]
   db1ba:	4423      	add	r3, r4
   db1bc:	f841 3f1c 	str.w	r3, [r1, #28]!
   db1c0:	9b01      	ldr	r3, [sp, #4]
   db1c2:	4299      	cmp	r1, r3
   db1c4:	d1a2      	bne.n	db10c <__tzcalc_limits+0x74>
   db1c6:	69c3      	ldr	r3, [r0, #28]
   db1c8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   db1ca:	4293      	cmp	r3, r2
   db1cc:	bfac      	ite	ge
   db1ce:	2300      	movge	r3, #0
   db1d0:	2301      	movlt	r3, #1
   db1d2:	6003      	str	r3, [r0, #0]
   db1d4:	2001      	movs	r0, #1
   db1d6:	e000      	b.n	db1da <__tzcalc_limits+0x142>
   db1d8:	2000      	movs	r0, #0
   db1da:	b003      	add	sp, #12
   db1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db1e0:	000dc1ac 	.word	0x000dc1ac
   db1e4:	00015180 	.word	0x00015180

000db1e8 <__tz_lock>:
   db1e8:	4770      	bx	lr

000db1ea <__tz_unlock>:
   db1ea:	4770      	bx	lr

000db1ec <_tzset_unlocked>:
   db1ec:	4b01      	ldr	r3, [pc, #4]	; (db1f4 <_tzset_unlocked+0x8>)
   db1ee:	6818      	ldr	r0, [r3, #0]
   db1f0:	f000 b802 	b.w	db1f8 <_tzset_unlocked_r>
   db1f4:	2003e124 	.word	0x2003e124

000db1f8 <_tzset_unlocked_r>:
   db1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1fc:	b08d      	sub	sp, #52	; 0x34
   db1fe:	4607      	mov	r7, r0
   db200:	f000 f9be 	bl	db580 <__gettzinfo>
   db204:	49b0      	ldr	r1, [pc, #704]	; (db4c8 <_tzset_unlocked_r+0x2d0>)
   db206:	4eb1      	ldr	r6, [pc, #708]	; (db4cc <_tzset_unlocked_r+0x2d4>)
   db208:	4604      	mov	r4, r0
   db20a:	4638      	mov	r0, r7
   db20c:	f000 f9b0 	bl	db570 <_getenv_r>
   db210:	4605      	mov	r5, r0
   db212:	b960      	cbnz	r0, db22e <_tzset_unlocked_r+0x36>
   db214:	4bae      	ldr	r3, [pc, #696]	; (db4d0 <_tzset_unlocked_r+0x2d8>)
   db216:	4aaf      	ldr	r2, [pc, #700]	; (db4d4 <_tzset_unlocked_r+0x2dc>)
   db218:	6018      	str	r0, [r3, #0]
   db21a:	4baf      	ldr	r3, [pc, #700]	; (db4d8 <_tzset_unlocked_r+0x2e0>)
   db21c:	6018      	str	r0, [r3, #0]
   db21e:	4baf      	ldr	r3, [pc, #700]	; (db4dc <_tzset_unlocked_r+0x2e4>)
   db220:	6830      	ldr	r0, [r6, #0]
   db222:	601a      	str	r2, [r3, #0]
   db224:	605a      	str	r2, [r3, #4]
   db226:	f7fb f8ed 	bl	d6404 <free>
   db22a:	6035      	str	r5, [r6, #0]
   db22c:	e148      	b.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db22e:	6831      	ldr	r1, [r6, #0]
   db230:	b979      	cbnz	r1, db252 <_tzset_unlocked_r+0x5a>
   db232:	6830      	ldr	r0, [r6, #0]
   db234:	f7fb f8e6 	bl	d6404 <free>
   db238:	4628      	mov	r0, r5
   db23a:	f7ff fdc0 	bl	dadbe <strlen>
   db23e:	1c41      	adds	r1, r0, #1
   db240:	4638      	mov	r0, r7
   db242:	f7fb f917 	bl	d6474 <_malloc_r>
   db246:	6030      	str	r0, [r6, #0]
   db248:	b148      	cbz	r0, db25e <_tzset_unlocked_r+0x66>
   db24a:	4629      	mov	r1, r5
   db24c:	f7ff fd94 	bl	dad78 <strcpy>
   db250:	e005      	b.n	db25e <_tzset_unlocked_r+0x66>
   db252:	f7ff fd87 	bl	dad64 <strcmp>
   db256:	2800      	cmp	r0, #0
   db258:	f000 8132 	beq.w	db4c0 <_tzset_unlocked_r+0x2c8>
   db25c:	e7e9      	b.n	db232 <_tzset_unlocked_r+0x3a>
   db25e:	782b      	ldrb	r3, [r5, #0]
   db260:	4a9f      	ldr	r2, [pc, #636]	; (db4e0 <_tzset_unlocked_r+0x2e8>)
   db262:	49a0      	ldr	r1, [pc, #640]	; (db4e4 <_tzset_unlocked_r+0x2ec>)
   db264:	2b3a      	cmp	r3, #58	; 0x3a
   db266:	bf08      	it	eq
   db268:	3501      	addeq	r5, #1
   db26a:	ae0a      	add	r6, sp, #40	; 0x28
   db26c:	4633      	mov	r3, r6
   db26e:	4628      	mov	r0, r5
   db270:	f7fb f8e8 	bl	d6444 <siscanf>
   db274:	2800      	cmp	r0, #0
   db276:	f340 8123 	ble.w	db4c0 <_tzset_unlocked_r+0x2c8>
   db27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db27c:	18ef      	adds	r7, r5, r3
   db27e:	5ceb      	ldrb	r3, [r5, r3]
   db280:	2b2d      	cmp	r3, #45	; 0x2d
   db282:	d103      	bne.n	db28c <_tzset_unlocked_r+0x94>
   db284:	3701      	adds	r7, #1
   db286:	f04f 35ff 	mov.w	r5, #4294967295
   db28a:	e003      	b.n	db294 <_tzset_unlocked_r+0x9c>
   db28c:	2b2b      	cmp	r3, #43	; 0x2b
   db28e:	bf08      	it	eq
   db290:	3701      	addeq	r7, #1
   db292:	2501      	movs	r5, #1
   db294:	f10d 0a20 	add.w	sl, sp, #32
   db298:	f10d 0b1e 	add.w	fp, sp, #30
   db29c:	f04f 0800 	mov.w	r8, #0
   db2a0:	9603      	str	r6, [sp, #12]
   db2a2:	f8cd a008 	str.w	sl, [sp, #8]
   db2a6:	9601      	str	r6, [sp, #4]
   db2a8:	f8cd b000 	str.w	fp, [sp]
   db2ac:	4633      	mov	r3, r6
   db2ae:	aa07      	add	r2, sp, #28
   db2b0:	498d      	ldr	r1, [pc, #564]	; (db4e8 <_tzset_unlocked_r+0x2f0>)
   db2b2:	f8ad 801e 	strh.w	r8, [sp, #30]
   db2b6:	4638      	mov	r0, r7
   db2b8:	f8ad 8020 	strh.w	r8, [sp, #32]
   db2bc:	f7fb f8c2 	bl	d6444 <siscanf>
   db2c0:	4540      	cmp	r0, r8
   db2c2:	f340 80fd 	ble.w	db4c0 <_tzset_unlocked_r+0x2c8>
   db2c6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db2ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db2ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; db4f4 <_tzset_unlocked_r+0x2fc>
   db2d2:	213c      	movs	r1, #60	; 0x3c
   db2d4:	fb01 3302 	mla	r3, r1, r2, r3
   db2d8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db2dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db2e0:	fb01 3302 	mla	r3, r1, r2, r3
   db2e4:	435d      	muls	r5, r3
   db2e6:	6225      	str	r5, [r4, #32]
   db2e8:	4d7c      	ldr	r5, [pc, #496]	; (db4dc <_tzset_unlocked_r+0x2e4>)
   db2ea:	4b7d      	ldr	r3, [pc, #500]	; (db4e0 <_tzset_unlocked_r+0x2e8>)
   db2ec:	602b      	str	r3, [r5, #0]
   db2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db2f0:	497c      	ldr	r1, [pc, #496]	; (db4e4 <_tzset_unlocked_r+0x2ec>)
   db2f2:	441f      	add	r7, r3
   db2f4:	464a      	mov	r2, r9
   db2f6:	4633      	mov	r3, r6
   db2f8:	4638      	mov	r0, r7
   db2fa:	f7fb f8a3 	bl	d6444 <siscanf>
   db2fe:	4540      	cmp	r0, r8
   db300:	dc08      	bgt.n	db314 <_tzset_unlocked_r+0x11c>
   db302:	682b      	ldr	r3, [r5, #0]
   db304:	606b      	str	r3, [r5, #4]
   db306:	4b72      	ldr	r3, [pc, #456]	; (db4d0 <_tzset_unlocked_r+0x2d8>)
   db308:	6a22      	ldr	r2, [r4, #32]
   db30a:	601a      	str	r2, [r3, #0]
   db30c:	4b72      	ldr	r3, [pc, #456]	; (db4d8 <_tzset_unlocked_r+0x2e0>)
   db30e:	f8c3 8000 	str.w	r8, [r3]
   db312:	e0d5      	b.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db316:	f8c5 9004 	str.w	r9, [r5, #4]
   db31a:	18fd      	adds	r5, r7, r3
   db31c:	5cfb      	ldrb	r3, [r7, r3]
   db31e:	2b2d      	cmp	r3, #45	; 0x2d
   db320:	d103      	bne.n	db32a <_tzset_unlocked_r+0x132>
   db322:	3501      	adds	r5, #1
   db324:	f04f 37ff 	mov.w	r7, #4294967295
   db328:	e003      	b.n	db332 <_tzset_unlocked_r+0x13a>
   db32a:	2b2b      	cmp	r3, #43	; 0x2b
   db32c:	bf08      	it	eq
   db32e:	3501      	addeq	r5, #1
   db330:	2701      	movs	r7, #1
   db332:	2300      	movs	r3, #0
   db334:	f8ad 301c 	strh.w	r3, [sp, #28]
   db338:	f8ad 301e 	strh.w	r3, [sp, #30]
   db33c:	f8ad 3020 	strh.w	r3, [sp, #32]
   db340:	930a      	str	r3, [sp, #40]	; 0x28
   db342:	9603      	str	r6, [sp, #12]
   db344:	f8cd a008 	str.w	sl, [sp, #8]
   db348:	9601      	str	r6, [sp, #4]
   db34a:	f8cd b000 	str.w	fp, [sp]
   db34e:	4633      	mov	r3, r6
   db350:	aa07      	add	r2, sp, #28
   db352:	4965      	ldr	r1, [pc, #404]	; (db4e8 <_tzset_unlocked_r+0x2f0>)
   db354:	4628      	mov	r0, r5
   db356:	f7fb f875 	bl	d6444 <siscanf>
   db35a:	2800      	cmp	r0, #0
   db35c:	dc04      	bgt.n	db368 <_tzset_unlocked_r+0x170>
   db35e:	6a23      	ldr	r3, [r4, #32]
   db360:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   db364:	63e3      	str	r3, [r4, #60]	; 0x3c
   db366:	e00e      	b.n	db386 <_tzset_unlocked_r+0x18e>
   db368:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db36c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db370:	213c      	movs	r1, #60	; 0x3c
   db372:	fb01 3302 	mla	r3, r1, r2, r3
   db376:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db37a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db37e:	fb01 3302 	mla	r3, r1, r2, r3
   db382:	435f      	muls	r7, r3
   db384:	63e7      	str	r7, [r4, #60]	; 0x3c
   db386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db388:	4627      	mov	r7, r4
   db38a:	441d      	add	r5, r3
   db38c:	f04f 0900 	mov.w	r9, #0
   db390:	782b      	ldrb	r3, [r5, #0]
   db392:	2b2c      	cmp	r3, #44	; 0x2c
   db394:	bf08      	it	eq
   db396:	3501      	addeq	r5, #1
   db398:	f895 8000 	ldrb.w	r8, [r5]
   db39c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   db3a0:	d126      	bne.n	db3f0 <_tzset_unlocked_r+0x1f8>
   db3a2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   db3a6:	9302      	str	r3, [sp, #8]
   db3a8:	ab09      	add	r3, sp, #36	; 0x24
   db3aa:	9300      	str	r3, [sp, #0]
   db3ac:	9603      	str	r6, [sp, #12]
   db3ae:	9601      	str	r6, [sp, #4]
   db3b0:	4633      	mov	r3, r6
   db3b2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   db3b6:	494d      	ldr	r1, [pc, #308]	; (db4ec <_tzset_unlocked_r+0x2f4>)
   db3b8:	4628      	mov	r0, r5
   db3ba:	f7fb f843 	bl	d6444 <siscanf>
   db3be:	2803      	cmp	r0, #3
   db3c0:	d17e      	bne.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db3c2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   db3c6:	1e4b      	subs	r3, r1, #1
   db3c8:	2b0b      	cmp	r3, #11
   db3ca:	d879      	bhi.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db3cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   db3d0:	1e53      	subs	r3, r2, #1
   db3d2:	2b04      	cmp	r3, #4
   db3d4:	d874      	bhi.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db3d6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   db3da:	2b06      	cmp	r3, #6
   db3dc:	d870      	bhi.n	db4c0 <_tzset_unlocked_r+0x2c8>
   db3de:	f887 8008 	strb.w	r8, [r7, #8]
   db3e2:	60f9      	str	r1, [r7, #12]
   db3e4:	613a      	str	r2, [r7, #16]
   db3e6:	617b      	str	r3, [r7, #20]
   db3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db3ea:	eb05 0803 	add.w	r8, r5, r3
   db3ee:	e02a      	b.n	db446 <_tzset_unlocked_r+0x24e>
   db3f0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   db3f4:	bf06      	itte	eq
   db3f6:	3501      	addeq	r5, #1
   db3f8:	4643      	moveq	r3, r8
   db3fa:	2344      	movne	r3, #68	; 0x44
   db3fc:	220a      	movs	r2, #10
   db3fe:	a90b      	add	r1, sp, #44	; 0x2c
   db400:	4628      	mov	r0, r5
   db402:	9305      	str	r3, [sp, #20]
   db404:	f7ff fe3e 	bl	db084 <strtoul>
   db408:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   db40c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   db410:	4545      	cmp	r5, r8
   db412:	9b05      	ldr	r3, [sp, #20]
   db414:	d114      	bne.n	db440 <_tzset_unlocked_r+0x248>
   db416:	234d      	movs	r3, #77	; 0x4d
   db418:	f1b9 0f00 	cmp.w	r9, #0
   db41c:	d107      	bne.n	db42e <_tzset_unlocked_r+0x236>
   db41e:	7223      	strb	r3, [r4, #8]
   db420:	2303      	movs	r3, #3
   db422:	60e3      	str	r3, [r4, #12]
   db424:	2302      	movs	r3, #2
   db426:	6123      	str	r3, [r4, #16]
   db428:	f8c4 9014 	str.w	r9, [r4, #20]
   db42c:	e00b      	b.n	db446 <_tzset_unlocked_r+0x24e>
   db42e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   db432:	230b      	movs	r3, #11
   db434:	62a3      	str	r3, [r4, #40]	; 0x28
   db436:	2301      	movs	r3, #1
   db438:	62e3      	str	r3, [r4, #44]	; 0x2c
   db43a:	2300      	movs	r3, #0
   db43c:	6323      	str	r3, [r4, #48]	; 0x30
   db43e:	e002      	b.n	db446 <_tzset_unlocked_r+0x24e>
   db440:	b280      	uxth	r0, r0
   db442:	723b      	strb	r3, [r7, #8]
   db444:	6178      	str	r0, [r7, #20]
   db446:	2302      	movs	r3, #2
   db448:	f8ad 301c 	strh.w	r3, [sp, #28]
   db44c:	2300      	movs	r3, #0
   db44e:	f8ad 301e 	strh.w	r3, [sp, #30]
   db452:	f8ad 3020 	strh.w	r3, [sp, #32]
   db456:	930a      	str	r3, [sp, #40]	; 0x28
   db458:	f898 3000 	ldrb.w	r3, [r8]
   db45c:	2b2f      	cmp	r3, #47	; 0x2f
   db45e:	d10b      	bne.n	db478 <_tzset_unlocked_r+0x280>
   db460:	9603      	str	r6, [sp, #12]
   db462:	f8cd a008 	str.w	sl, [sp, #8]
   db466:	9601      	str	r6, [sp, #4]
   db468:	f8cd b000 	str.w	fp, [sp]
   db46c:	4633      	mov	r3, r6
   db46e:	aa07      	add	r2, sp, #28
   db470:	491f      	ldr	r1, [pc, #124]	; (db4f0 <_tzset_unlocked_r+0x2f8>)
   db472:	4640      	mov	r0, r8
   db474:	f7fa ffe6 	bl	d6444 <siscanf>
   db478:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db47c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db480:	213c      	movs	r1, #60	; 0x3c
   db482:	fb01 3302 	mla	r3, r1, r2, r3
   db486:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db48a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db48e:	fb01 3302 	mla	r3, r1, r2, r3
   db492:	61bb      	str	r3, [r7, #24]
   db494:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   db496:	f109 0901 	add.w	r9, r9, #1
   db49a:	f1b9 0f02 	cmp.w	r9, #2
   db49e:	4445      	add	r5, r8
   db4a0:	f107 071c 	add.w	r7, r7, #28
   db4a4:	f47f af74 	bne.w	db390 <_tzset_unlocked_r+0x198>
   db4a8:	6860      	ldr	r0, [r4, #4]
   db4aa:	f7ff fdf5 	bl	db098 <__tzcalc_limits>
   db4ae:	4b08      	ldr	r3, [pc, #32]	; (db4d0 <_tzset_unlocked_r+0x2d8>)
   db4b0:	6a22      	ldr	r2, [r4, #32]
   db4b2:	601a      	str	r2, [r3, #0]
   db4b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db4b6:	1a9b      	subs	r3, r3, r2
   db4b8:	4a07      	ldr	r2, [pc, #28]	; (db4d8 <_tzset_unlocked_r+0x2e0>)
   db4ba:	bf18      	it	ne
   db4bc:	2301      	movne	r3, #1
   db4be:	6013      	str	r3, [r2, #0]
   db4c0:	b00d      	add	sp, #52	; 0x34
   db4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db4c6:	bf00      	nop
   db4c8:	000dc20c 	.word	0x000dc20c
   db4cc:	2003e7e4 	.word	0x2003e7e4
   db4d0:	2003e7ec 	.word	0x2003e7ec
   db4d4:	000dc20f 	.word	0x000dc20f
   db4d8:	2003e7e8 	.word	0x2003e7e8
   db4dc:	2003e128 	.word	0x2003e128
   db4e0:	2003e7d7 	.word	0x2003e7d7
   db4e4:	000dc213 	.word	0x000dc213
   db4e8:	000dc236 	.word	0x000dc236
   db4ec:	000dc222 	.word	0x000dc222
   db4f0:	000dc235 	.word	0x000dc235
   db4f4:	2003e7cc 	.word	0x2003e7cc

000db4f8 <_findenv_r>:
   db4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db4fc:	4607      	mov	r7, r0
   db4fe:	468b      	mov	fp, r1
   db500:	4690      	mov	r8, r2
   db502:	f000 f8d9 	bl	db6b8 <__env_lock>
   db506:	4b19      	ldr	r3, [pc, #100]	; (db56c <_findenv_r+0x74>)
   db508:	681d      	ldr	r5, [r3, #0]
   db50a:	469a      	mov	sl, r3
   db50c:	b13d      	cbz	r5, db51e <_findenv_r+0x26>
   db50e:	465c      	mov	r4, fp
   db510:	4623      	mov	r3, r4
   db512:	f813 2b01 	ldrb.w	r2, [r3], #1
   db516:	b142      	cbz	r2, db52a <_findenv_r+0x32>
   db518:	2a3d      	cmp	r2, #61	; 0x3d
   db51a:	461c      	mov	r4, r3
   db51c:	d1f8      	bne.n	db510 <_findenv_r+0x18>
   db51e:	4638      	mov	r0, r7
   db520:	f000 f8cb 	bl	db6ba <__env_unlock>
   db524:	2000      	movs	r0, #0
   db526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db52a:	ebcb 0404 	rsb	r4, fp, r4
   db52e:	46a9      	mov	r9, r5
   db530:	f859 0b04 	ldr.w	r0, [r9], #4
   db534:	2800      	cmp	r0, #0
   db536:	d0f2      	beq.n	db51e <_findenv_r+0x26>
   db538:	4622      	mov	r2, r4
   db53a:	4659      	mov	r1, fp
   db53c:	f7ff fc6c 	bl	dae18 <strncmp>
   db540:	b988      	cbnz	r0, db566 <_findenv_r+0x6e>
   db542:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db546:	191e      	adds	r6, r3, r4
   db548:	5d1b      	ldrb	r3, [r3, r4]
   db54a:	2b3d      	cmp	r3, #61	; 0x3d
   db54c:	d10b      	bne.n	db566 <_findenv_r+0x6e>
   db54e:	f8da 3000 	ldr.w	r3, [sl]
   db552:	1aed      	subs	r5, r5, r3
   db554:	10ad      	asrs	r5, r5, #2
   db556:	4638      	mov	r0, r7
   db558:	f8c8 5000 	str.w	r5, [r8]
   db55c:	f000 f8ad 	bl	db6ba <__env_unlock>
   db560:	1c70      	adds	r0, r6, #1
   db562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db566:	464d      	mov	r5, r9
   db568:	e7e1      	b.n	db52e <_findenv_r+0x36>
   db56a:	bf00      	nop
   db56c:	2003e170 	.word	0x2003e170

000db570 <_getenv_r>:
   db570:	b507      	push	{r0, r1, r2, lr}
   db572:	aa01      	add	r2, sp, #4
   db574:	f7ff ffc0 	bl	db4f8 <_findenv_r>
   db578:	b003      	add	sp, #12
   db57a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db580 <__gettzinfo>:
   db580:	4800      	ldr	r0, [pc, #0]	; (db584 <__gettzinfo+0x4>)
   db582:	4770      	bx	lr
   db584:	2003e130 	.word	0x2003e130

000db588 <gmtime_r>:
   db588:	6802      	ldr	r2, [r0, #0]
   db58a:	4b47      	ldr	r3, [pc, #284]	; (db6a8 <gmtime_r+0x120>)
   db58c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db58e:	fb92 f4f3 	sdiv	r4, r2, r3
   db592:	fb03 2214 	mls	r2, r3, r4, r2
   db596:	2a00      	cmp	r2, #0
   db598:	bfbc      	itt	lt
   db59a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db59e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db5a2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db5a6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db5aa:	fb92 f3f0 	sdiv	r3, r2, r0
   db5ae:	fb00 2213 	mls	r2, r0, r3, r2
   db5b2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db5b6:	bfac      	ite	ge
   db5b8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db5bc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db5c0:	608b      	str	r3, [r1, #8]
   db5c2:	fb92 f3f0 	sdiv	r3, r2, r0
   db5c6:	fb00 2213 	mls	r2, r0, r3, r2
   db5ca:	604b      	str	r3, [r1, #4]
   db5cc:	600a      	str	r2, [r1, #0]
   db5ce:	2307      	movs	r3, #7
   db5d0:	1ce2      	adds	r2, r4, #3
   db5d2:	fb92 f3f3 	sdiv	r3, r2, r3
   db5d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db5da:	1ad3      	subs	r3, r2, r3
   db5dc:	618b      	str	r3, [r1, #24]
   db5de:	4b33      	ldr	r3, [pc, #204]	; (db6ac <gmtime_r+0x124>)
   db5e0:	4d33      	ldr	r5, [pc, #204]	; (db6b0 <gmtime_r+0x128>)
   db5e2:	fb94 f5f5 	sdiv	r5, r4, r5
   db5e6:	fb03 4405 	mla	r4, r3, r5, r4
   db5ea:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db5ee:	fbb4 f2f2 	udiv	r2, r4, r2
   db5f2:	4422      	add	r2, r4
   db5f4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db5f8:	fbb4 f3f7 	udiv	r3, r4, r7
   db5fc:	1ad2      	subs	r2, r2, r3
   db5fe:	482d      	ldr	r0, [pc, #180]	; (db6b4 <gmtime_r+0x12c>)
   db600:	fbb4 f0f0 	udiv	r0, r4, r0
   db604:	f648 6694 	movw	r6, #36500	; 0x8e94
   db608:	1a13      	subs	r3, r2, r0
   db60a:	fbb3 f6f6 	udiv	r6, r3, r6
   db60e:	4434      	add	r4, r6
   db610:	f240 126d 	movw	r2, #365	; 0x16d
   db614:	fbb3 f0f2 	udiv	r0, r3, r2
   db618:	fbb3 f3f7 	udiv	r3, r3, r7
   db61c:	1ae3      	subs	r3, r4, r3
   db61e:	fb02 3310 	mls	r3, r2, r0, r3
   db622:	2499      	movs	r4, #153	; 0x99
   db624:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db628:	3202      	adds	r2, #2
   db62a:	fbb2 f2f4 	udiv	r2, r2, r4
   db62e:	2a0a      	cmp	r2, #10
   db630:	fb04 f402 	mul.w	r4, r4, r2
   db634:	f104 0602 	add.w	r6, r4, #2
   db638:	f04f 0405 	mov.w	r4, #5
   db63c:	fbb6 f4f4 	udiv	r4, r6, r4
   db640:	bf34      	ite	cc
   db642:	2602      	movcc	r6, #2
   db644:	f06f 0609 	mvncs.w	r6, #9
   db648:	4416      	add	r6, r2
   db64a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db64e:	fb02 0505 	mla	r5, r2, r5, r0
   db652:	1c5f      	adds	r7, r3, #1
   db654:	2e01      	cmp	r6, #1
   db656:	bf98      	it	ls
   db658:	3501      	addls	r5, #1
   db65a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db65e:	eba7 0704 	sub.w	r7, r7, r4
   db662:	d302      	bcc.n	db66a <gmtime_r+0xe2>
   db664:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db668:	e014      	b.n	db694 <gmtime_r+0x10c>
   db66a:	0782      	lsls	r2, r0, #30
   db66c:	d105      	bne.n	db67a <gmtime_r+0xf2>
   db66e:	2464      	movs	r4, #100	; 0x64
   db670:	fbb0 f2f4 	udiv	r2, r0, r4
   db674:	fb04 0212 	mls	r2, r4, r2, r0
   db678:	b94a      	cbnz	r2, db68e <gmtime_r+0x106>
   db67a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db67e:	fbb0 f4f2 	udiv	r4, r0, r2
   db682:	fb02 0014 	mls	r0, r2, r4, r0
   db686:	fab0 f280 	clz	r2, r0
   db68a:	0952      	lsrs	r2, r2, #5
   db68c:	e000      	b.n	db690 <gmtime_r+0x108>
   db68e:	2201      	movs	r2, #1
   db690:	333b      	adds	r3, #59	; 0x3b
   db692:	441a      	add	r2, r3
   db694:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db698:	2300      	movs	r3, #0
   db69a:	61ca      	str	r2, [r1, #28]
   db69c:	614d      	str	r5, [r1, #20]
   db69e:	610e      	str	r6, [r1, #16]
   db6a0:	60cf      	str	r7, [r1, #12]
   db6a2:	620b      	str	r3, [r1, #32]
   db6a4:	4608      	mov	r0, r1
   db6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db6a8:	00015180 	.word	0x00015180
   db6ac:	fffdc54f 	.word	0xfffdc54f
   db6b0:	00023ab1 	.word	0x00023ab1
   db6b4:	00023ab0 	.word	0x00023ab0

000db6b8 <__env_lock>:
   db6b8:	4770      	bx	lr

000db6ba <__env_unlock>:
   db6ba:	4770      	bx	lr

000db6bc <dynalib_user>:
   db6bc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db6cc:	0000 0000                                   ....

000db6d0 <_ZTV16JsonWriterStaticILj256EE>:
	...
   db6d8:	40d1 000d 40e5 000d 6c50 6e61 2074 6157     .@...@..Plant Wa
   db6e8:	6574 6572 0064 4d42 3245 3038 7420 7365     tered.BME280 tes
   db6f8:	0074 6f43 6c75 2064 6f6e 2074 6966 646e     t.Could not find
   db708:	6120 7620 6c61 6469 4220 454d 3832 2030      a valid BME280 
   db718:	6573 736e 726f 202c 6863 6365 206b 6977     sensor, check wi
   db728:	6972 676e 202c 6461 7264 7365 2c73 7320     ring, address, s
   db738:	6e65 6f73 2072 4449 0021 6553 736e 726f     ensor ID!.Sensor
   db748:	4449 7720 7361 203a 7830 2000 2020 2020     ID was: 0x.     
   db758:	2020 4920 2044 666f 3020 4678 2046 7270        ID of 0xFF pr
   db768:	626f 6261 796c 6d20 6165 736e 6120 6220     obably means a b
   db778:	6461 6120 6464 6572 7373 202c 2061 4d42     ad address, a BM
   db788:	2050 3831 2030 726f 4220 504d 3020 3538     P 180 or BMP 085
   db798:	000a 2020 4920 2044 666f 3020 3578 2d36     ..   ID of 0x56-
   db7a8:	7830 3835 7220 7065 6572 6573 746e 2073     0x58 represents 
   db7b8:	2061 4d42 2050 3832 2c30 000a 2020 2020     a BMP 280,..    
   db7c8:	2020 2020 4449 6f20 2066 7830 3036 7220         ID of 0x60 r
   db7d8:	7065 6572 6573 746e 2073 2061 4d42 2045     epresents a BME 
   db7e8:	3832 2e30 000a 2020 2020 2020 2020 4449     280...        ID
   db7f8:	6f20 2066 7830 3136 7220 7065 6572 6573      of 0x61 represe
   db808:	746e 2073 2061 4d42 2045 3836 2e30 000a     nts a BME 680...
   db818:	6854 2065 6925 3e20 2520 2c69 7420 7275     The %i > %i, tur
   db828:	696e 676e 6f20 206e 7570 706d 5400 6568     ning on pump.The
   db838:	2520 2069 203c 6925 6e20 206f 6177 6574      %i < %i no wate
   db848:	2072 656e 6465 6465 4100 2074 7325 7420     r needed.At %s t
   db858:	6568 6d20 696f 7473 7275 2065 6572 6461     he moisture read
   db868:	6e69 2067 7369 2520 2069 000a 6854 2065     ing is %i ..The 
   db878:	6974 656d 6920 2073 7325 0a20 5400 6d65     time is %s ..Tem
   db888:	6570 6172 7574 6572 3d20 0020 2a20 0043     perature = . *C.
   db898:	7250 7365 7573 6572 3d20 0020 6820 6150     Pressure = . hPa
   db8a8:	4100 7070 6f72 2e78 4120 746c 7469 6475     .Approx. Altitud
   db8b8:	2065 203d 2000 006d 7548 696d 6964 7974     e = . m.Humidity
   db8c8:	3d20 0020 2520 2c00 6500 766e 762d 6c61      = . %.,.env-val
   db8d8:	0073 7544 7473 5620 6c61 6575 3d20 2520     s.Dust Value = %
   db8e8:	2e30 6632 0a20 7800 6925 0020 7542 7474     0.2f ..x%i .Butt
   db8f8:	6e6f 5320 6174 6574 6920 2073 6925 0a20     on State is %i .
   db908:	7200 7361 6168 0070 6f69 612e 6164 7266     .rashap.io.adafr
   db918:	6975 2e74 6f63 006d 3935 3138 3936 6166     uit.com.598169fa
   db928:	6233 3961 3634 3633 3439 6131 3333 3930     3ba94636941a3309
   db938:	3637 3465 6532 6332 7200 7361 6168 2f70     76e42e2c.rashap/
   db948:	6566 6465 2f73 6f48 656d 545f 6d65 6570     feeds/Home_Tempe
   db958:	6172 7574 6572 7200 7361 6168 2f70 6566     rature.rashap/fe
   db968:	6465 2f73 6f48 656d 4d5f 696f 7473 7275     eds/Home_Moistur
   db978:	0065 6172 6873 7061 662f 6565 7364 482f     e.rashap/feeds/H
   db988:	6d6f 5f65 6157 6574 0072 6172 6873 7061     ome_Water.rashap
   db998:	662f 6565 7364 482f 6d6f 5f65 7250 7365     /feeds/Home_Pres
   db9a8:	7573 6572 7200 7361 6168 2f70 6566 6465     sure.rashap/feed
   db9b8:	2f73 6f48 656d 485f 6d75 6469 7469 0079     s/Home_Humidity.
   db9c8:	6172 6873 7061 662f 6565 7364 4c2f 4445     rashap/feeds/LED
   db9d8:	4f5f 006e                                   _On.

000db9dc <_ZTVN8particle13__SPISettingsE>:
	...
   db9e4:	4ae9 000d 6564 6166 6c75 2074 4d00 4253     .J..default .MSB
   db9f4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dba04:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dba14:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dba24:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dba30 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dba38:	40cd 000d 49a5 000d 5467 000d 5513 000d     .@...I..gT...U..
   dba48:	5545 000d 547b 000d 54bb 000d               EU..{T...T..

000dba54 <_ZTV13Adafruit_MQTT>:
	...
   dba64:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dba74:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   dba84:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   dba94:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   dbaa4:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   dbab4:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   dbac4:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   dbad4:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   dbae4:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   dbaf4:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   dbb04:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   dbb14:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   dbb24:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   dbb34:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   dbb44:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   dbb54:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   dbb64:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   dbb74:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   dbb84:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dbb94:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dbba4:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dbbb4:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dbbc4:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dbbd4:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dbbe4:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dbbf4:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dbc04:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dbc14:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dbc24:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dbc34:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dbc44:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dbc54:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dbc64:	7465 6961 736c 002e                         etails..

000dbc6c <_ZTV10JsonBuffer>:
	...
   dbc74:	5b6d 000d 5b89 000d                         m[...[..

000dbc7c <_ZTV10JsonWriter>:
	...
   dbc84:	5b9d 000d 5bb1 000d 6c25 0075 3025 7834     .[...[..%lu.%04x
   dbc94:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dbca4:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dbcb4:	2500 666c 0000 0000                         .%lf....

000dbcbc <_ZTVN5spark13EthernetClassE>:
	...
   dbcc4:	64f3 000d 64e9 000d 64df 000d 64d5 000d     .d...d...d...d..
   dbcd4:	64c9 000d 64bd 000d 64b1 000d 64a9 000d     .d...d...d...d..
   dbce4:	649f 000d 6495 000d 8229 000d               .d...d..)...

000dbcf0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbcf0:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dbd00:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dbd10:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dbd20:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dbd30:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dbd40:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dbd50:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dbd60:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dbd70:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dbd80:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dbd90:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dbda0:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dbdb0:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dbdc0:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dbdd0:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dbde0:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dbdf0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dbe00 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbe08:	705d 000d 7063 000d 70a7 000d 7071 000d     ]p..cp...p..qp..
   dbe18:	705f 000d                                   _p..

000dbe1c <_ZTV9IPAddress>:
	...
   dbe24:	75f5 000d 75e5 000d 75e7 000d               .u...u...u..

000dbe30 <_ZTV9USBSerial>:
	...
   dbe38:	76f9 000d 7749 000d 7757 000d 6ad1 000d     .v..Iw..Ww...j..
   dbe48:	7735 000d 76fb 000d 7711 000d 7743 000d     5w...v...w..Cw..
   dbe58:	7727 000d 76f5 000d                         'w...v..

000dbe60 <_ZTV11USARTSerial>:
	...
   dbe68:	7805 000d 7855 000d 7863 000d 6ad1 000d     .x..Ux..cx...j..
   dbe78:	7819 000d 783b 000d 7827 000d 784f 000d     .x..;x..'x..Ox..
   dbe88:	7807 000d 780b 000d                         .x...x..

000dbe90 <_ZTV7TwoWire>:
	...
   dbe98:	7931 000d 797b 000d 7953 000d 7933 000d     1y..{y..Sy..3y..
   dbea8:	795b 000d 7963 000d 796b 000d 7973 000d     [y..cy..ky..sy..

000dbeb8 <_ZTVN5spark9MeshClassE>:
	...
   dbec0:	7a97 000d 7a8d 000d 7a83 000d 7a79 000d     .z...z...z..yz..
   dbed0:	7a6d 000d 7a61 000d 7a55 000d 7a4d 000d     mz..az..Uz..Mz..
   dbee0:	7a43 000d 7a39 000d 8229 000d               Cz..9z..)...

000dbeec <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbef4:	7c3d 000d 7c43 000d 812b 000d 7c51 000d     =|..C|..+...Q|..
   dbf04:	7c3f 000d                                   ?|..

000dbf08 <_ZTV9TCPClient>:
	...
   dbf10:	45ad 000d 45c5 000d 7bb5 000d 7bcf 000d     .E...E...{...{..
   dbf20:	7fd1 000d 7d23 000d 7cf5 000d 7bf9 000d     ....#}...|...{..
   dbf30:	7ead 000d 7da9 000d 7d57 000d 7fa1 000d     .~...}..W}......
   dbf40:	7bfb 000d 7c33 000d 7be1 000d 7c55 000d     .{..3|...{..U|..
   dbf50:	7cd5 000d 6977 6972 676e 7200 6365 2076     .|..wiring.recv 
   dbf60:	7265 6f72 2072 203d 6425 0000               error = %d..

000dbf6c <_ZTVN5spark9WiFiClassE>:
	...
   dbf74:	81a1 000d 8197 000d 818d 000d 8143 000d     ............C...
   dbf84:	8181 000d 8175 000d 8169 000d 8161 000d     ....u...i...a...
   dbf94:	8157 000d 814d 000d 8229 000d               W...M...)...

000dbfa0 <_ZTVN5spark12NetworkClassE>:
	...
   dbfa8:	81c1 000d 81cb 000d 81d5 000d 81df 000d     ................
   dbfb8:	81e9 000d 81f5 000d 8201 000d 820d 000d     ................
   dbfc8:	8215 000d 821f 000d 8229 000d               ........)...

000dbfd4 <_ZSt7nothrow>:
   dbfd4:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dbfe0 <TWO52>:
   dbfe0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dbff0 <day_name.4725>:
   dbff0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc000:	6972 6153 4a74                                   riSat

000dc005 <mon_name.4726>:
   dc005:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc015:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc025:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dc035:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dc045:	6425 000a                                   %d..

000dc049 <_ctype_>:
   dc049:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc059:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc069:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc079:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc089:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc099:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc0a9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc0b9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc0c9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc14c <__sf_fake_stdin>:
	...

000dc16c <__sf_fake_stdout>:
	...

000dc18c <__sf_fake_stderr>:
	...

000dc1ac <__month_lengths>:
   dc1ac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc1bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc1cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc1dc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc1ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc1fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc20c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dc21c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dc22c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dc23c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dc248 <link_const_variable_data_end>:
   dc248:	000d49b5 	.word	0x000d49b5
   dc24c:	000d5463 	.word	0x000d5463
   dc250:	000d55a5 	.word	0x000d55a5
   dc254:	000d5b67 	.word	0x000d5b67
   dc258:	000d5e39 	.word	0x000d5e39
   dc25c:	000d64fd 	.word	0x000d64fd
   dc260:	000d6695 	.word	0x000d6695
   dc264:	000d6aa9 	.word	0x000d6aa9
   dc268:	000d6de1 	.word	0x000d6de1
   dc26c:	000d6ed9 	.word	0x000d6ed9
   dc270:	000d6f31 	.word	0x000d6f31
   dc274:	000d7b65 	.word	0x000d7b65
   dc278:	000d81ad 	.word	0x000d81ad
   dc27c:	000d82f5 	.word	0x000d82f5
   dc280:	000d84e9 	.word	0x000d84e9
   dc284:	000d856d 	.word	0x000d856d
   dc288:	000d8631 	.word	0x000d8631
   dc28c:	000d86f5 	.word	0x000d86f5
