
/home/brian/Particle/NCD0x50/target/1.1.0/argon/NCD0x50.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d6e20  000d6e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00016ebc  2**0
                  CONTENTS
  4 .data         00000068  2003e354  000d6e28  0000e354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000434  2003e3c0  2003e3c0  0001e3c0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d6e90  000d6e90  00016e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6eb8  000d6eb8  00016eb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ac927  00000000  00000000  00016ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f08c  00000000  00000000  000c37e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d60  00000000  00000000  000d286f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00031614  00000000  00000000  000d45cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00022b04  00000000  00000000  00105be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000da747  00000000  00000000  001286e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013ddd  00000000  00000000  00202e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000030d8  00000000  00000000  00216c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b498  00000000  00000000  00219ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	44 6a 0d 00                                         Dj..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fca9 	bl	d6984 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fcae 	bl	d699a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e354 	.word	0x2003e354
   d4048:	000d6e28 	.word	0x000d6e28
   d404c:	2003e3bc 	.word	0x2003e3bc
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f951 	bl	d5300 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e18 	.word	0x000d6e18
   d4080:	000d6de0 	.word	0x000d6de0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81a 	b.w	d40bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f94d 	bl	d4328 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b903 	b.w	d529c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb17 	b.w	d46c8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bb1d 	b.w	d46d8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bb1b 	b.w	d46d8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	689b      	ldr	r3, [r3, #8]
   d40b8:	4718      	bx	r3
	...

000d40bc <setup>:

int raw_adc = 0;
double ppm = 0.0;

void setup()
{
   d40bc:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d40be:	2204      	movs	r2, #4
   d40c0:	2300      	movs	r3, #0
   d40c2:	4910      	ldr	r1, [pc, #64]	; (d4104 <setup+0x48>)
   d40c4:	4810      	ldr	r0, [pc, #64]	; (d4108 <setup+0x4c>)
   d40c6:	f000 fa63 	bl	d4590 <spark_variable>
   d40ca:	2300      	movs	r3, #0
   d40cc:	2204      	movs	r2, #4
   d40ce:	490f      	ldr	r1, [pc, #60]	; (d410c <setup+0x50>)
   d40d0:	480f      	ldr	r0, [pc, #60]	; (d4110 <setup+0x54>)
   d40d2:	f000 fa5d 	bl	d4590 <spark_variable>
   d40d6:	2300      	movs	r3, #0
   d40d8:	2209      	movs	r2, #9
   d40da:	490e      	ldr	r1, [pc, #56]	; (d4114 <setup+0x58>)
   d40dc:	480e      	ldr	r0, [pc, #56]	; (d4118 <setup+0x5c>)
   d40de:	f000 fa57 	bl	d4590 <spark_variable>
  Particle.variable("i2cdevice131", "ADC121C_MQ131");
  Particle.variable("i2cdevice9", "ADC121C_MQ9");
  Particle.variable("PPM", ppm);

  // Initialise I2C communication as MASTER
  Wire.begin();
   d40e2:	f001 fc4f 	bl	d5984 <_Z19__fetch_global_Wirev>
   d40e6:	f000 fd11 	bl	d4b0c <_ZN7TwoWire5beginEv>
  // Initialise serial communication, set baud rate = 9600
  Serial.begin(9600);
   d40ea:	f000 fd7b 	bl	d4be4 <_Z16_fetch_usbserialv>
   d40ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40f2:	f000 fd6b 	bl	d4bcc <_ZN9USBSerial5beginEl>
  delay(300);
   d40f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
}
   d40fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  // Initialise I2C communication as MASTER
  Wire.begin();
  // Initialise serial communication, set baud rate = 9600
  Serial.begin(9600);
  delay(300);
   d40fe:	f001 b8ab 	b.w	d5258 <delay>
   d4102:	bf00      	nop
   d4104:	000d6a58 	.word	0x000d6a58
   d4108:	000d6a66 	.word	0x000d6a66
   d410c:	000d6a73 	.word	0x000d6a73
   d4110:	000d6a7f 	.word	0x000d6a7f
   d4114:	2003e3c8 	.word	0x2003e3c8
   d4118:	000d6a8a 	.word	0x000d6a8a

000d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d411c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d411e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4120:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4122:	b17c      	cbz	r4, d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4124:	6863      	ldr	r3, [r4, #4]
   d4126:	3b01      	subs	r3, #1
   d4128:	6063      	str	r3, [r4, #4]
   d412a:	b95b      	cbnz	r3, d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d412c:	6823      	ldr	r3, [r4, #0]
   d412e:	4620      	mov	r0, r4
   d4130:	689b      	ldr	r3, [r3, #8]
   d4132:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4134:	68a3      	ldr	r3, [r4, #8]
   d4136:	3b01      	subs	r3, #1
   d4138:	60a3      	str	r3, [r4, #8]
   d413a:	b91b      	cbnz	r3, d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	4620      	mov	r0, r4
   d4140:	68db      	ldr	r3, [r3, #12]
   d4142:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4144:	4628      	mov	r0, r5
   d4146:	bd38      	pop	{r3, r4, r5, pc}

000d4148 <_Z2ozv>:
  oz();
  co2();
  delay(10000);
}

void oz() {
   d4148:	b530      	push	{r4, r5, lr}
   d414a:	b089      	sub	sp, #36	; 0x24
    unsigned int data[2];

  // Start I2C transmission
  Wire.beginTransmission(Addr1);
   d414c:	f001 fc1a 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4150:	2150      	movs	r1, #80	; 0x50
   d4152:	f000 fcf3 	bl	d4b3c <_ZN7TwoWire17beginTransmissionEi>
  // Select data register
  Wire.write(0x00);
   d4156:	f001 fc15 	bl	d5984 <_Z19__fetch_global_Wirev>
   d415a:	2100      	movs	r1, #0
   d415c:	f7ff ffa9 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d4160:	f001 fc10 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4164:	f000 fcf1 	bl	d4b4a <_ZN7TwoWire15endTransmissionEv>

  // Request 2 bytes of data
  Wire.requestFrom(Addr1, 2);
   d4168:	f001 fc0c 	bl	d5984 <_Z19__fetch_global_Wirev>
   d416c:	2202      	movs	r2, #2
   d416e:	2150      	movs	r1, #80	; 0x50
   d4170:	f000 fcdb 	bl	d4b2a <_ZN7TwoWire11requestFromEii>

  // Read 2 bytes of data
  // raw_adc msb, raw_adc lsb
  if (Wire.available() == 2)
   d4174:	f001 fc06 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4178:	6803      	ldr	r3, [r0, #0]
   d417a:	691b      	ldr	r3, [r3, #16]
   d417c:	4798      	blx	r3
   d417e:	2802      	cmp	r0, #2
   d4180:	d10b      	bne.n	d419a <_Z2ozv+0x52>
  {
    data[0] = Wire.read();
   d4182:	f001 fbff 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4186:	6803      	ldr	r3, [r0, #0]
   d4188:	695b      	ldr	r3, [r3, #20]
   d418a:	4798      	blx	r3
   d418c:	4605      	mov	r5, r0
    data[1] = Wire.read();
   d418e:	f001 fbf9 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4192:	6803      	ldr	r3, [r0, #0]
   d4194:	695b      	ldr	r3, [r3, #20]
   d4196:	4798      	blx	r3
   d4198:	4604      	mov	r4, r0
  }

  // Convert the data to 12-bits
  raw_adc = ((data[0] & 0x0F) * 256) + data[1];
   d419a:	4b25      	ldr	r3, [pc, #148]	; (d4230 <_Z2ozv+0xe8>)
   d419c:	f005 000f 	and.w	r0, r5, #15
   d41a0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
   d41a4:	6018      	str	r0, [r3, #0]
  ppm = (1.99 * raw_adc) / 4095.0 + 0.01;
   d41a6:	f001 fed1 	bl	d5f4c <__aeabi_i2d>
   d41aa:	a31b      	add	r3, pc, #108	; (adr r3, d4218 <_Z2ozv+0xd0>)
   d41ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41b0:	f001 ff32 	bl	d6018 <__aeabi_dmul>
   d41b4:	a31a      	add	r3, pc, #104	; (adr r3, d4220 <_Z2ozv+0xd8>)
   d41b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ba:	f002 f857 	bl	d626c <__aeabi_ddiv>
   d41be:	a31a      	add	r3, pc, #104	; (adr r3, d4228 <_Z2ozv+0xe0>)
   d41c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41c4:	f001 fd76 	bl	d5cb4 <__adddf3>
   d41c8:	4c1a      	ldr	r4, [pc, #104]	; (d4234 <_Z2ozv+0xec>)
   d41ca:	ec41 0b10 	vmov	d0, r0, r1
   d41ce:	e9c4 0100 	strd	r0, r1, [r4]

  // Output data to dashboard
  //Particle.publish("Ozone Concentration : ", String(ppm) + " ppm");
  Particle.publish("Ozone", String(ppm));
   d41d2:	2106      	movs	r1, #6
   d41d4:	a804      	add	r0, sp, #16
   d41d6:	f001 fbc1 	bl	d595c <_ZN6StringC1Edi>
   d41da:	4b17      	ldr	r3, [pc, #92]	; (d4238 <_Z2ozv+0xf0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41dc:	9a04      	ldr	r2, [sp, #16]
   d41de:	781b      	ldrb	r3, [r3, #0]
   d41e0:	4916      	ldr	r1, [pc, #88]	; (d423c <_Z2ozv+0xf4>)
   d41e2:	f88d 3000 	strb.w	r3, [sp]
   d41e6:	a802      	add	r0, sp, #8
   d41e8:	233c      	movs	r3, #60	; 0x3c
   d41ea:	f000 fed1 	bl	d4f90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41ee:	a803      	add	r0, sp, #12
   d41f0:	f7ff ff94 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41f4:	a804      	add	r0, sp, #16
   d41f6:	f001 fb59 	bl	d58ac <_ZN6StringD1Ev>
  Serial.print("Ozone Concenration (ppm): ");
   d41fa:	f000 fcf3 	bl	d4be4 <_Z16_fetch_usbserialv>
   d41fe:	4910      	ldr	r1, [pc, #64]	; (d4240 <_Z2ozv+0xf8>)
   d4200:	f001 f8e4 	bl	d53cc <_ZN5Print5printEPKc>
  Serial.println(ppm);
   d4204:	f000 fcee 	bl	d4be4 <_Z16_fetch_usbserialv>
   d4208:	2102      	movs	r1, #2
   d420a:	ed94 0b00 	vldr	d0, [r4]
   d420e:	f001 f9f3 	bl	d55f8 <_ZN5Print7printlnEdi>
}
   d4212:	b009      	add	sp, #36	; 0x24
   d4214:	bd30      	pop	{r4, r5, pc}
   d4216:	bf00      	nop
   d4218:	3d70a3d7 	.word	0x3d70a3d7
   d421c:	3fffd70a 	.word	0x3fffd70a
   d4220:	00000000 	.word	0x00000000
   d4224:	40affe00 	.word	0x40affe00
   d4228:	47ae147b 	.word	0x47ae147b
   d422c:	3f847ae1 	.word	0x3f847ae1
   d4230:	2003e3d0 	.word	0x2003e3d0
   d4234:	2003e3c8 	.word	0x2003e3c8
   d4238:	2003e3c4 	.word	0x2003e3c4
   d423c:	000d6a8e 	.word	0x000d6a8e
   d4240:	000d6a94 	.word	0x000d6a94

000d4244 <_Z3co2v>:

void co2()
{
   d4244:	b530      	push	{r4, r5, lr}
   d4246:	b089      	sub	sp, #36	; 0x24
  unsigned int data[2];

  // Start I2C transmission
  Wire.beginTransmission(Addr3);
   d4248:	f001 fb9c 	bl	d5984 <_Z19__fetch_global_Wirev>
   d424c:	2152      	movs	r1, #82	; 0x52
   d424e:	f000 fc75 	bl	d4b3c <_ZN7TwoWire17beginTransmissionEi>
  // Select data register
  Wire.write(0x00);
   d4252:	f001 fb97 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4256:	2100      	movs	r1, #0
   d4258:	f7ff ff2b 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d425c:	f001 fb92 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4260:	f000 fc73 	bl	d4b4a <_ZN7TwoWire15endTransmissionEv>

  // Request 2 bytes of data
  Wire.requestFrom(Addr3, 2);
   d4264:	f001 fb8e 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4268:	2202      	movs	r2, #2
   d426a:	2152      	movs	r1, #82	; 0x52
   d426c:	f000 fc5d 	bl	d4b2a <_ZN7TwoWire11requestFromEii>

  // Read 2 bytes of data
  // raw_adc msb, raw_adc lsb
  if (Wire.available() == 2)
   d4270:	f001 fb88 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4274:	6803      	ldr	r3, [r0, #0]
   d4276:	691b      	ldr	r3, [r3, #16]
   d4278:	4798      	blx	r3
   d427a:	2802      	cmp	r0, #2
   d427c:	d10b      	bne.n	d4296 <_Z3co2v+0x52>
  {
    data[0] = Wire.read();
   d427e:	f001 fb81 	bl	d5984 <_Z19__fetch_global_Wirev>
   d4282:	6803      	ldr	r3, [r0, #0]
   d4284:	695b      	ldr	r3, [r3, #20]
   d4286:	4798      	blx	r3
   d4288:	4605      	mov	r5, r0
    data[1] = Wire.read();
   d428a:	f001 fb7b 	bl	d5984 <_Z19__fetch_global_Wirev>
   d428e:	6803      	ldr	r3, [r0, #0]
   d4290:	695b      	ldr	r3, [r3, #20]
   d4292:	4798      	blx	r3
   d4294:	4604      	mov	r4, r0
  }
  delay(300);
   d4296:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d429a:	f000 ffdd 	bl	d5258 <delay>

  // Convert the data to 12-bits
  raw_adc = ((data[0] & 0x0F) * 256) + data[1];
   d429e:	4b1b      	ldr	r3, [pc, #108]	; (d430c <_Z3co2v+0xc8>)
   d42a0:	f005 000f 	and.w	r0, r5, #15
   d42a4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
   d42a8:	6018      	str	r0, [r3, #0]
  ppm = (1000 / 4096.0) * raw_adc + 10;
   d42aa:	f001 fe4f 	bl	d5f4c <__aeabi_i2d>
   d42ae:	2200      	movs	r2, #0
   d42b0:	4b17      	ldr	r3, [pc, #92]	; (d4310 <_Z3co2v+0xcc>)
   d42b2:	4c18      	ldr	r4, [pc, #96]	; (d4314 <_Z3co2v+0xd0>)
   d42b4:	f001 feb0 	bl	d6018 <__aeabi_dmul>
   d42b8:	2200      	movs	r2, #0
   d42ba:	4b17      	ldr	r3, [pc, #92]	; (d4318 <_Z3co2v+0xd4>)
   d42bc:	f001 fcfa 	bl	d5cb4 <__adddf3>
   d42c0:	ec41 0b10 	vmov	d0, r0, r1
   d42c4:	e9c4 0100 	strd	r0, r1, [r4]

  // Output data to dashboard
  // Particle.publish("Carbon Monoxide Concentration : ", String(ppm) + " ppm");
  Particle.publish("CO2", String(ppm));
   d42c8:	2106      	movs	r1, #6
   d42ca:	a804      	add	r0, sp, #16
   d42cc:	f001 fb46 	bl	d595c <_ZN6StringC1Edi>
   d42d0:	4b12      	ldr	r3, [pc, #72]	; (d431c <_Z3co2v+0xd8>)
   d42d2:	9a04      	ldr	r2, [sp, #16]
   d42d4:	781b      	ldrb	r3, [r3, #0]
   d42d6:	4912      	ldr	r1, [pc, #72]	; (d4320 <_Z3co2v+0xdc>)
   d42d8:	f88d 3000 	strb.w	r3, [sp]
   d42dc:	a802      	add	r0, sp, #8
   d42de:	233c      	movs	r3, #60	; 0x3c
   d42e0:	f000 fe56 	bl	d4f90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d42e4:	a803      	add	r0, sp, #12
   d42e6:	f7ff ff19 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ea:	a804      	add	r0, sp, #16
   d42ec:	f001 fade 	bl	d58ac <_ZN6StringD1Ev>
  Serial.print("CO2 Concenration (ppm): ");
   d42f0:	f000 fc78 	bl	d4be4 <_Z16_fetch_usbserialv>
   d42f4:	490b      	ldr	r1, [pc, #44]	; (d4324 <_Z3co2v+0xe0>)
   d42f6:	f001 f869 	bl	d53cc <_ZN5Print5printEPKc>
  Serial.println(ppm);
   d42fa:	f000 fc73 	bl	d4be4 <_Z16_fetch_usbserialv>
   d42fe:	2102      	movs	r1, #2
   d4300:	ed94 0b00 	vldr	d0, [r4]
   d4304:	f001 f978 	bl	d55f8 <_ZN5Print7printlnEdi>
   d4308:	b009      	add	sp, #36	; 0x24
   d430a:	bd30      	pop	{r4, r5, pc}
   d430c:	2003e3d0 	.word	0x2003e3d0
   d4310:	3fcf4000 	.word	0x3fcf4000
   d4314:	2003e3c8 	.word	0x2003e3c8
   d4318:	40240000 	.word	0x40240000
   d431c:	2003e3c4 	.word	0x2003e3c4
   d4320:	000d6aaf 	.word	0x000d6aaf
   d4324:	000d6ab3 	.word	0x000d6ab3

000d4328 <loop>:
  Serial.begin(9600);
  delay(300);
}

void loop()
{
   d4328:	b508      	push	{r3, lr}
  oz();
   d432a:	f7ff ff0d 	bl	d4148 <_Z2ozv>
  co2();
   d432e:	f7ff ff89 	bl	d4244 <_Z3co2v>
  delay(10000);
   d4332:	f242 7010 	movw	r0, #10000	; 0x2710
}
   d4336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void loop()
{
  oz();
  co2();
  delay(10000);
   d433a:	f000 bf8d 	b.w	d5258 <delay>
	...

000d4340 <_GLOBAL__sub_I_raw_adc>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4340:	4b02      	ldr	r3, [pc, #8]	; (d434c <_GLOBAL__sub_I_raw_adc+0xc>)
   d4342:	2200      	movs	r2, #0
   d4344:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4346:	f000 b90b 	b.w	d4560 <HAL_Pin_Map>
   d434a:	bf00      	nop
   d434c:	2003e3c4 	.word	0x2003e3c4

000d4350 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USB_USART_Init+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	681b      	ldr	r3, [r3, #0]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003024c 	.word	0x0003024c

000d4360 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Begin+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	685b      	ldr	r3, [r3, #4]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Available_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	691b      	ldr	r3, [r3, #16]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	695b      	ldr	r3, [r3, #20]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Receive_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	699b      	ldr	r3, [r3, #24]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Send_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	69db      	ldr	r3, [r3, #28]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Flush_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6a1b      	ldr	r3, [r3, #32]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_I2C_Begin+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	68db      	ldr	r3, [r3, #12]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_I2C_Request_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	695b      	ldr	r3, [r3, #20]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_I2C_Begin_Transmission+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	699b      	ldr	r3, [r3, #24]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_I2C_End_Transmission+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	69db      	ldr	r3, [r3, #28]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030228 	.word	0x00030228

000d4400 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_I2C_Write_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6a1b      	ldr	r3, [r3, #32]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030228 	.word	0x00030228

000d4410 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_I2C_Available_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030228 	.word	0x00030228

000d4420 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_I2C_Read_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030228 	.word	0x00030228

000d4430 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_I2C_Peek_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030228 	.word	0x00030228

000d4440 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_I2C_Flush_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030228 	.word	0x00030228

000d4450 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_I2C_Init+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030228 	.word	0x00030228

000d4460 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Init+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	681b      	ldr	r3, [r3, #0]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Write_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	68db      	ldr	r3, [r3, #12]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Available_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	691b      	ldr	r3, [r3, #16]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Read_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	695b      	ldr	r3, [r3, #20]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Peek_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	699b      	ldr	r3, [r3, #24]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USART_Flush_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	69db      	ldr	r3, [r3, #28]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003023c 	.word	0x0003023c

000d44c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USART_Available_Data_For_Write+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003023c 	.word	0x0003023c

000d44d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <inet_inet_ntop+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	695b      	ldr	r3, [r3, #20]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030264 	.word	0x00030264

000d44e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <os_thread_is_current+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	689b      	ldr	r3, [r3, #8]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030248 	.word	0x00030248

000d44f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <os_thread_join+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	691b      	ldr	r3, [r3, #16]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030248 	.word	0x00030248

000d4500 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <os_thread_cleanup+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	695b      	ldr	r3, [r3, #20]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030248 	.word	0x00030248

000d4510 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <os_mutex_create+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030248 	.word	0x00030248

000d4520 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <os_mutex_recursive_create+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030248 	.word	0x00030248

000d4530 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_RNG_GetRandomNumber+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	685b      	ldr	r3, [r3, #4]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030218 	.word	0x00030218

000d4540 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	695b      	ldr	r3, [r3, #20]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030218 	.word	0x00030218

000d4550 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_SPI_Init+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	69db      	ldr	r3, [r3, #28]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030230 	.word	0x00030230

000d4560 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_Pin_Map+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	681b      	ldr	r3, [r3, #0]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003022c 	.word	0x0003022c

000d4570 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <netdb_freeaddrinfo+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	689b      	ldr	r3, [r3, #8]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030268 	.word	0x00030268

000d4580 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <netdb_getaddrinfo+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	68db      	ldr	r3, [r3, #12]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030268 	.word	0x00030268

000d4590 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <spark_variable+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	681b      	ldr	r3, [r3, #0]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030244 	.word	0x00030244

000d45a0 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <spark_send_event+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6a1b      	ldr	r3, [r3, #32]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030244 	.word	0x00030244

000d45b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030244 	.word	0x00030244

000d45c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_connect+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_connecting+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	689b      	ldr	r3, [r3, #8]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_disconnect+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	68db      	ldr	r3, [r3, #12]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_ready+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	691b      	ldr	r3, [r3, #16]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_on+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	695b      	ldr	r3, [r3, #20]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_off+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	699b      	ldr	r3, [r3, #24]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_listen+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	69db      	ldr	r3, [r3, #28]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <network_listening+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6a1b      	ldr	r3, [r3, #32]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030240 	.word	0x00030240

000d4640 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <network_set_listen_timeout+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030240 	.word	0x00030240

000d4650 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <network_get_listen_timeout+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030240 	.word	0x00030240

000d4660 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <set_system_mode+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	685b      	ldr	r3, [r3, #4]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030220 	.word	0x00030220

000d4670 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <system_delay_ms+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	695b      	ldr	r3, [r3, #20]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030220 	.word	0x00030220

000d4680 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <application_thread_current+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030220 	.word	0x00030220

000d4690 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <application_thread_invoke+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030220 	.word	0x00030220

000d46a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b03      	ldr	r3, [pc, #12]	; (d46b0 <system_ctrl_set_app_request_handler+0x10>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46aa:	9301      	str	r3, [sp, #4]
   d46ac:	bd08      	pop	{r3, pc}
   d46ae:	0000      	.short	0x0000
   d46b0:	00030220 	.word	0x00030220

000d46b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b03      	ldr	r3, [pc, #12]	; (d46c4 <system_ctrl_set_result+0x10>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46be:	9301      	str	r3, [sp, #4]
   d46c0:	bd08      	pop	{r3, pc}
   d46c2:	0000      	.short	0x0000
   d46c4:	00030220 	.word	0x00030220

000d46c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <malloc+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	681b      	ldr	r3, [r3, #0]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003021c 	.word	0x0003021c

000d46d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <free+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	685b      	ldr	r3, [r3, #4]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003021c 	.word	0x0003021c

000d46e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <realloc+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	689b      	ldr	r3, [r3, #8]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003021c 	.word	0x0003021c

000d46f8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <abort+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003021c 	.word	0x0003021c

000d4708 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <_malloc_r+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003021c 	.word	0x0003021c

000d4718 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4718:	2300      	movs	r3, #0
   d471a:	461a      	mov	r2, r3
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	f7ff bf4f 	b.w	d45c0 <network_connect>

000d4722 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4722:	2200      	movs	r2, #0
   d4724:	2102      	movs	r1, #2
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	f7ff bf5a 	b.w	d45e0 <network_disconnect>

000d472c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d472c:	2200      	movs	r2, #0
   d472e:	4611      	mov	r1, r2
   d4730:	6840      	ldr	r0, [r0, #4]
   d4732:	f7ff bf4d 	b.w	d45d0 <network_connecting>

000d4736 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4736:	2200      	movs	r2, #0
   d4738:	4611      	mov	r1, r2
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	f7ff bf58 	b.w	d45f0 <network_ready>

000d4740 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4740:	2300      	movs	r3, #0
   d4742:	461a      	mov	r2, r3
   d4744:	4619      	mov	r1, r3
   d4746:	6840      	ldr	r0, [r0, #4]
   d4748:	f7ff bf5a 	b.w	d4600 <network_on>

000d474c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d474c:	2300      	movs	r3, #0
   d474e:	461a      	mov	r2, r3
   d4750:	4619      	mov	r1, r3
   d4752:	6840      	ldr	r0, [r0, #4]
   d4754:	f7ff bf5c 	b.w	d4610 <network_off>

000d4758 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4758:	2200      	movs	r2, #0
   d475a:	f081 0101 	eor.w	r1, r1, #1
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	f7ff bf5e 	b.w	d4620 <network_listen>

000d4764 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4764:	2200      	movs	r2, #0
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf6a 	b.w	d4640 <network_set_listen_timeout>

000d476c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d476c:	2200      	movs	r2, #0
   d476e:	4611      	mov	r1, r2
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	f7ff bf6d 	b.w	d4650 <network_get_listen_timeout>

000d4776 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4776:	2200      	movs	r2, #0
   d4778:	4611      	mov	r1, r2
   d477a:	6840      	ldr	r0, [r0, #4]
   d477c:	f7ff bf58 	b.w	d4630 <network_listening>

000d4780 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4784:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4786:	b095      	sub	sp, #84	; 0x54
   d4788:	4616      	mov	r6, r2
   d478a:	460d      	mov	r5, r1
   d478c:	4607      	mov	r7, r0
    IPAddress addr;
   d478e:	f000 fa89 	bl	d4ca4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4792:	4621      	mov	r1, r4
   d4794:	2220      	movs	r2, #32
   d4796:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4798:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d479a:	f002 f8fe 	bl	d699a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d479e:	2340      	movs	r3, #64	; 0x40
   d47a0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d47a2:	4621      	mov	r1, r4
   d47a4:	466b      	mov	r3, sp
   d47a6:	aa0c      	add	r2, sp, #48	; 0x30
   d47a8:	4630      	mov	r0, r6
   d47aa:	f7ff fee9 	bl	d4580 <netdb_getaddrinfo>
    if (!r) {
   d47ae:	4604      	mov	r4, r0
   d47b0:	2800      	cmp	r0, #0
   d47b2:	d144      	bne.n	d483e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d47b4:	4602      	mov	r2, r0
   d47b6:	2101      	movs	r1, #1
   d47b8:	6868      	ldr	r0, [r5, #4]
   d47ba:	f7ff ff19 	bl	d45f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47be:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d47c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47c2:	4622      	mov	r2, r4
   d47c4:	6868      	ldr	r0, [r5, #4]
   d47c6:	f7ff ff13 	bl	d45f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47ca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47cc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d47ce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47d0:	2e00      	cmp	r6, #0
   d47d2:	d034      	beq.n	d483e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d47d4:	2900      	cmp	r1, #0
   d47d6:	d132      	bne.n	d483e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d47d8:	6873      	ldr	r3, [r6, #4]
   d47da:	2b02      	cmp	r3, #2
   d47dc:	d002      	beq.n	d47e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d47de:	2b0a      	cmp	r3, #10
   d47e0:	d009      	beq.n	d47f6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d47e2:	e02a      	b.n	d483a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d47e4:	f1b8 0f00 	cmp.w	r8, #0
   d47e8:	d027      	beq.n	d483a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d47ea:	6971      	ldr	r1, [r6, #20]
   d47ec:	4638      	mov	r0, r7
   d47ee:	3104      	adds	r1, #4
   d47f0:	f000 fa85 	bl	d4cfe <_ZN9IPAddressaSEPKh>
   d47f4:	e020      	b.n	d4838 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d47f6:	f1b9 0f00 	cmp.w	r9, #0
   d47fa:	d01e      	beq.n	d483a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d47fc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d47fe:	2211      	movs	r2, #17
   d4800:	a801      	add	r0, sp, #4
   d4802:	f002 f8ca 	bl	d699a <memset>
                    a.v = 6;
   d4806:	2306      	movs	r3, #6
   d4808:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d480c:	ad01      	add	r5, sp, #4
   d480e:	f104 0308 	add.w	r3, r4, #8
   d4812:	3418      	adds	r4, #24
   d4814:	6818      	ldr	r0, [r3, #0]
   d4816:	6859      	ldr	r1, [r3, #4]
   d4818:	462a      	mov	r2, r5
   d481a:	c203      	stmia	r2!, {r0, r1}
   d481c:	3308      	adds	r3, #8
   d481e:	42a3      	cmp	r3, r4
   d4820:	4615      	mov	r5, r2
   d4822:	d1f7      	bne.n	d4814 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4824:	a901      	add	r1, sp, #4
   d4826:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4828:	ad07      	add	r5, sp, #28
   d482a:	f000 fa49 	bl	d4cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d482e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4830:	1d3c      	adds	r4, r7, #4
   d4832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4834:	682b      	ldr	r3, [r5, #0]
   d4836:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4838:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d483a:	69f6      	ldr	r6, [r6, #28]
   d483c:	e7c8      	b.n	d47d0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d483e:	9800      	ldr	r0, [sp, #0]
   d4840:	f7ff fe96 	bl	d4570 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4844:	4638      	mov	r0, r7
   d4846:	b015      	add	sp, #84	; 0x54
   d4848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d484c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d484c:	4b02      	ldr	r3, [pc, #8]	; (d4858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d484e:	4a03      	ldr	r2, [pc, #12]	; (d485c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4850:	601a      	str	r2, [r3, #0]
   d4852:	2200      	movs	r2, #0
   d4854:	605a      	str	r2, [r3, #4]
   d4856:	4770      	bx	lr
   d4858:	2003e3d4 	.word	0x2003e3d4
   d485c:	000d6ad4 	.word	0x000d6ad4

000d4860 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4860:	2200      	movs	r2, #0
   d4862:	4611      	mov	r1, r2
   d4864:	6840      	ldr	r0, [r0, #4]
   d4866:	f7ff bec3 	b.w	d45f0 <network_ready>

000d486a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d486a:	2200      	movs	r2, #0
   d486c:	4611      	mov	r1, r2
   d486e:	6840      	ldr	r0, [r0, #4]
   d4870:	f7ff bede 	b.w	d4630 <network_listening>

000d4874 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4874:	2200      	movs	r2, #0
   d4876:	4611      	mov	r1, r2
   d4878:	6840      	ldr	r0, [r0, #4]
   d487a:	f7ff bee9 	b.w	d4650 <network_get_listen_timeout>

000d487e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d487e:	2200      	movs	r2, #0
   d4880:	6840      	ldr	r0, [r0, #4]
   d4882:	f7ff bedd 	b.w	d4640 <network_set_listen_timeout>

000d4886 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4886:	2200      	movs	r2, #0
   d4888:	f081 0101 	eor.w	r1, r1, #1
   d488c:	6840      	ldr	r0, [r0, #4]
   d488e:	f7ff bec7 	b.w	d4620 <network_listen>

000d4892 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4892:	2300      	movs	r3, #0
   d4894:	461a      	mov	r2, r3
   d4896:	4619      	mov	r1, r3
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	f7ff beb9 	b.w	d4610 <network_off>

000d489e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d489e:	2300      	movs	r3, #0
   d48a0:	461a      	mov	r2, r3
   d48a2:	4619      	mov	r1, r3
   d48a4:	6840      	ldr	r0, [r0, #4]
   d48a6:	f7ff beab 	b.w	d4600 <network_on>

000d48aa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48aa:	2200      	movs	r2, #0
   d48ac:	4611      	mov	r1, r2
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	f7ff be8e 	b.w	d45d0 <network_connecting>

000d48b4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48b4:	2200      	movs	r2, #0
   d48b6:	2102      	movs	r1, #2
   d48b8:	6840      	ldr	r0, [r0, #4]
   d48ba:	f7ff be91 	b.w	d45e0 <network_disconnect>

000d48be <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48be:	2300      	movs	r3, #0
   d48c0:	461a      	mov	r2, r3
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff be7c 	b.w	d45c0 <network_connect>

000d48c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d48c8:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d48ca:	2204      	movs	r2, #4
   d48cc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d48ce:	4a02      	ldr	r2, [pc, #8]	; (d48d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d48d0:	601a      	str	r2, [r3, #0]
   d48d2:	4770      	bx	lr
   d48d4:	2003e3dc 	.word	0x2003e3dc
   d48d8:	000d6b08 	.word	0x000d6b08

000d48dc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48dc:	2200      	movs	r2, #0
   d48de:	4611      	mov	r1, r2
   d48e0:	6840      	ldr	r0, [r0, #4]
   d48e2:	f7ff bea5 	b.w	d4630 <network_listening>

000d48e6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48e6:	2200      	movs	r2, #0
   d48e8:	4611      	mov	r1, r2
   d48ea:	6840      	ldr	r0, [r0, #4]
   d48ec:	f7ff beb0 	b.w	d4650 <network_get_listen_timeout>

000d48f0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48f0:	2200      	movs	r2, #0
   d48f2:	6840      	ldr	r0, [r0, #4]
   d48f4:	f7ff bea4 	b.w	d4640 <network_set_listen_timeout>

000d48f8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48f8:	2200      	movs	r2, #0
   d48fa:	f081 0101 	eor.w	r1, r1, #1
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff be8e 	b.w	d4620 <network_listen>

000d4904 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4904:	2300      	movs	r3, #0
   d4906:	461a      	mov	r2, r3
   d4908:	4619      	mov	r1, r3
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	f7ff be80 	b.w	d4610 <network_off>

000d4910 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4910:	2300      	movs	r3, #0
   d4912:	461a      	mov	r2, r3
   d4914:	4619      	mov	r1, r3
   d4916:	6840      	ldr	r0, [r0, #4]
   d4918:	f7ff be72 	b.w	d4600 <network_on>

000d491c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d491c:	2200      	movs	r2, #0
   d491e:	4611      	mov	r1, r2
   d4920:	6840      	ldr	r0, [r0, #4]
   d4922:	f7ff be65 	b.w	d45f0 <network_ready>

000d4926 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4926:	2200      	movs	r2, #0
   d4928:	4611      	mov	r1, r2
   d492a:	6840      	ldr	r0, [r0, #4]
   d492c:	f7ff be50 	b.w	d45d0 <network_connecting>

000d4930 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4930:	2200      	movs	r2, #0
   d4932:	2102      	movs	r1, #2
   d4934:	6840      	ldr	r0, [r0, #4]
   d4936:	f7ff be53 	b.w	d45e0 <network_disconnect>

000d493a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d493a:	2300      	movs	r3, #0
   d493c:	461a      	mov	r2, r3
   d493e:	6840      	ldr	r0, [r0, #4]
   d4940:	f7ff be3e 	b.w	d45c0 <network_connect>

000d4944 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4944:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4946:	4605      	mov	r5, r0
   d4948:	b178      	cbz	r0, d496a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d494a:	6804      	ldr	r4, [r0, #0]
   d494c:	b144      	cbz	r4, d4960 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d494e:	68a3      	ldr	r3, [r4, #8]
   d4950:	b11b      	cbz	r3, d495a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4952:	2203      	movs	r2, #3
   d4954:	4621      	mov	r1, r4
   d4956:	4620      	mov	r0, r4
   d4958:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d495a:	4620      	mov	r0, r4
   d495c:	f7ff fb9d 	bl	d409a <_ZdlPv>
   d4960:	4628      	mov	r0, r5
      }
   d4962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4966:	f7ff bb98 	b.w	d409a <_ZdlPv>
   d496a:	bd38      	pop	{r3, r4, r5, pc}

000d496c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d496c:	b110      	cbz	r0, d4974 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d496e:	6803      	ldr	r3, [r0, #0]
   d4970:	685b      	ldr	r3, [r3, #4]
   d4972:	4718      	bx	r3
   d4974:	4770      	bx	lr

000d4976 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4976:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4978:	6803      	ldr	r3, [r0, #0]
   d497a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d497c:	b1bb      	cbz	r3, d49ae <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d497e:	6858      	ldr	r0, [r3, #4]
   d4980:	f7ff fdae 	bl	d44e0 <os_thread_is_current>
   d4984:	b978      	cbnz	r0, d49a6 <_ZN6ThreadD1Ev+0x30>
   d4986:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4988:	7c5a      	ldrb	r2, [r3, #17]
   d498a:	b912      	cbnz	r2, d4992 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d498c:	6858      	ldr	r0, [r3, #4]
   d498e:	f7ff fdaf 	bl	d44f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4992:	6823      	ldr	r3, [r4, #0]
   d4994:	6858      	ldr	r0, [r3, #4]
   d4996:	f7ff fdb3 	bl	d4500 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d499a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d499c:	2300      	movs	r3, #0
   d499e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d49a0:	b128      	cbz	r0, d49ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d49a2:	f7ff ffcf 	bl	d4944 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49a6:	6820      	ldr	r0, [r4, #0]
   d49a8:	b108      	cbz	r0, d49ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d49aa:	f7ff ffcb 	bl	d4944 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49b4:	b538      	push	{r3, r4, r5, lr}
   d49b6:	4b0b      	ldr	r3, [pc, #44]	; (d49e4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d49b8:	6003      	str	r3, [r0, #0]
   d49ba:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49bc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d49c0:	b108      	cbz	r0, d49c6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d49c2:	f7ff fb6c 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49c6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d49ca:	b12d      	cbz	r5, d49d8 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49cc:	4628      	mov	r0, r5
   d49ce:	f7ff ffd2 	bl	d4976 <_ZN6ThreadD1Ev>
   d49d2:	4628      	mov	r0, r5
   d49d4:	f7ff fb61 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49d8:	68a0      	ldr	r0, [r4, #8]
   d49da:	b108      	cbz	r0, d49e0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d49dc:	f7ff ffc6 	bl	d496c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd38      	pop	{r3, r4, r5, pc}
   d49e4:	000d6b3c 	.word	0x000d6b3c

000d49e8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d49e8:	b538      	push	{r3, r4, r5, lr}
   d49ea:	4c0d      	ldr	r4, [pc, #52]	; (d4a20 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d49ec:	4b0d      	ldr	r3, [pc, #52]	; (d4a24 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d49ee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49f0:	2500      	movs	r5, #0
   d49f2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49f4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49f8:	6063      	str	r3, [r4, #4]
   d49fa:	60a5      	str	r5, [r4, #8]
   d49fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a00:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a04:	f7ff fd8c 	bl	d4520 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a08:	4b07      	ldr	r3, [pc, #28]	; (d4a28 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4a0a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4a0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a10:	4620      	mov	r0, r4
   d4a12:	4a06      	ldr	r2, [pc, #24]	; (d4a2c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4a14:	4906      	ldr	r1, [pc, #24]	; (d4a30 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a1a:	f000 bff5 	b.w	d5a08 <__aeabi_atexit>
   d4a1e:	bf00      	nop
   d4a20:	2003e3e4 	.word	0x2003e3e4
   d4a24:	000d6ad4 	.word	0x000d6ad4
   d4a28:	000d6b3c 	.word	0x000d6b3c
   d4a2c:	2003e3c0 	.word	0x2003e3c0
   d4a30:	000d49b5 	.word	0x000d49b5

000d4a34 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4a34:	4770      	bx	lr

000d4a36 <_ZN8SPIClassD0Ev>:
   d4a36:	b510      	push	{r4, lr}
   d4a38:	4604      	mov	r4, r0
   d4a3a:	f7ff fb2e 	bl	d409a <_ZdlPv>
   d4a3e:	4620      	mov	r0, r4
   d4a40:	bd10      	pop	{r4, pc}
	...

000d4a44 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4a44:	b570      	push	{r4, r5, r6, lr}
   d4a46:	4b08      	ldr	r3, [pc, #32]	; (d4a68 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4a48:	6003      	str	r3, [r0, #0]
   d4a4a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4a4c:	2500      	movs	r5, #0
   d4a4e:	460e      	mov	r6, r1
   d4a50:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4a54:	f7ff fd5c 	bl	d4510 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4a58:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4a5a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4a5c:	f7ff fd78 	bl	d4550 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4a60:	60a5      	str	r5, [r4, #8]
}
   d4a62:	4620      	mov	r0, r4
   d4a64:	bd70      	pop	{r4, r5, r6, pc}
   d4a66:	bf00      	nop
   d4a68:	000d6b70 	.word	0x000d6b70

000d4a6c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4a6c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a6e:	6883      	ldr	r3, [r0, #8]
   d4a70:	4604      	mov	r4, r0
   d4a72:	b90b      	cbnz	r3, d4a78 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4a74:	f000 ffcd 	bl	d5a12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a78:	68c3      	ldr	r3, [r0, #12]
   d4a7a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4a7c:	68a3      	ldr	r3, [r4, #8]
   d4a7e:	b11b      	cbz	r3, d4a88 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a80:	2203      	movs	r2, #3
   d4a82:	4621      	mov	r1, r4
   d4a84:	4620      	mov	r0, r4
   d4a86:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4a88:	4620      	mov	r0, r4
}
   d4a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4a8e:	f7ff bb04 	b.w	d409a <_ZdlPv>

000d4a92 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4a92:	4770      	bx	lr

000d4a94 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a96:	4606      	mov	r6, r0
   d4a98:	4615      	mov	r5, r2
   d4a9a:	460c      	mov	r4, r1
   d4a9c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a9e:	42bc      	cmp	r4, r7
   d4aa0:	d006      	beq.n	d4ab0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4aa2:	6833      	ldr	r3, [r6, #0]
   d4aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4aa8:	689b      	ldr	r3, [r3, #8]
   d4aaa:	4630      	mov	r0, r6
   d4aac:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4aae:	e7f6      	b.n	d4a9e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4ab0:	4628      	mov	r0, r5
   d4ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ab4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ab4:	2200      	movs	r2, #0
   d4ab6:	7c00      	ldrb	r0, [r0, #16]
   d4ab8:	f7ff bca2 	b.w	d4400 <HAL_I2C_Write_Data>

000d4abc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4abc:	2100      	movs	r1, #0
   d4abe:	7c00      	ldrb	r0, [r0, #16]
   d4ac0:	f7ff bca6 	b.w	d4410 <HAL_I2C_Available_Data>

000d4ac4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4ac4:	2100      	movs	r1, #0
   d4ac6:	7c00      	ldrb	r0, [r0, #16]
   d4ac8:	f7ff bcaa 	b.w	d4420 <HAL_I2C_Read_Data>

000d4acc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4acc:	2100      	movs	r1, #0
   d4ace:	7c00      	ldrb	r0, [r0, #16]
   d4ad0:	f7ff bcae 	b.w	d4430 <HAL_I2C_Peek_Data>

000d4ad4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	7c00      	ldrb	r0, [r0, #16]
   d4ad8:	f7ff bcb2 	b.w	d4440 <HAL_I2C_Flush_Data>

000d4adc <_ZN7TwoWireD0Ev>:
   d4adc:	b510      	push	{r4, lr}
   d4ade:	4604      	mov	r4, r0
   d4ae0:	f7ff fadb 	bl	d409a <_ZdlPv>
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ae8:	b510      	push	{r4, lr}
   d4aea:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4af0:	4608      	mov	r0, r1
   d4af2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4af4:	2100      	movs	r1, #0
   d4af6:	4b04      	ldr	r3, [pc, #16]	; (d4b08 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4af8:	7420      	strb	r0, [r4, #16]
   d4afa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4afc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4afe:	f7ff fca7 	bl	d4450 <HAL_I2C_Init>

}
   d4b02:	4620      	mov	r0, r4
   d4b04:	bd10      	pop	{r4, pc}
   d4b06:	bf00      	nop
   d4b08:	000d6b80 	.word	0x000d6b80

000d4b0c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4b0c:	2300      	movs	r3, #0
   d4b0e:	461a      	mov	r2, r3
   d4b10:	4619      	mov	r1, r3
   d4b12:	7c00      	ldrb	r0, [r0, #16]
   d4b14:	f7ff bc54 	b.w	d43c0 <HAL_I2C_Begin>

000d4b18 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4b18:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4b1a:	2400      	movs	r4, #0
   d4b1c:	7c00      	ldrb	r0, [r0, #16]
   d4b1e:	9400      	str	r4, [sp, #0]
   d4b20:	f7ff fc56 	bl	d43d0 <HAL_I2C_Request_Data>
  return result;
}
   d4b24:	b2c0      	uxtb	r0, r0
   d4b26:	b002      	add	sp, #8
   d4b28:	bd10      	pop	{r4, pc}

000d4b2a <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4b2a:	2301      	movs	r3, #1
   d4b2c:	b2d2      	uxtb	r2, r2
   d4b2e:	b2c9      	uxtb	r1, r1
   d4b30:	f7ff bff2 	b.w	d4b18 <_ZN7TwoWire11requestFromEhhh>

000d4b34 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4b34:	2200      	movs	r2, #0
   d4b36:	7c00      	ldrb	r0, [r0, #16]
   d4b38:	f7ff bc52 	b.w	d43e0 <HAL_I2C_Begin_Transmission>

000d4b3c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4b3c:	b2c9      	uxtb	r1, r1
   d4b3e:	f7ff bff9 	b.w	d4b34 <_ZN7TwoWire17beginTransmissionEh>

000d4b42 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4b42:	2200      	movs	r2, #0
   d4b44:	7c00      	ldrb	r0, [r0, #16]
   d4b46:	f7ff bc53 	b.w	d43f0 <HAL_I2C_End_Transmission>

000d4b4a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4b4a:	2101      	movs	r1, #1
   d4b4c:	f7ff bff9 	b.w	d4b42 <_ZN7TwoWire15endTransmissionEh>

000d4b50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b50:	7441      	strb	r1, [r0, #17]
   d4b52:	4770      	bx	lr

000d4b54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b54:	4770      	bx	lr

000d4b56 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d4b56:	2100      	movs	r1, #0
   d4b58:	7c00      	ldrb	r0, [r0, #16]
   d4b5a:	f7ff bc19 	b.w	d4390 <HAL_USB_USART_Receive_Data>

000d4b5e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d4b5e:	2101      	movs	r1, #1
   d4b60:	7c00      	ldrb	r0, [r0, #16]
   d4b62:	f7ff bc15 	b.w	d4390 <HAL_USB_USART_Receive_Data>

000d4b66 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d4b66:	7c00      	ldrb	r0, [r0, #16]
   d4b68:	f7ff bc0a 	b.w	d4380 <HAL_USB_USART_Available_Data_For_Write>

000d4b6c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d4b6c:	7c00      	ldrb	r0, [r0, #16]
   d4b6e:	f7ff bbff 	b.w	d4370 <HAL_USB_USART_Available_Data>

000d4b72 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d4b72:	b538      	push	{r3, r4, r5, lr}
   d4b74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b76:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d4b78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b7a:	f7ff fc01 	bl	d4380 <HAL_USB_USART_Available_Data_For_Write>
   d4b7e:	2800      	cmp	r0, #0
   d4b80:	dc01      	bgt.n	d4b86 <_ZN9USBSerial5writeEh+0x14>
   d4b82:	7c60      	ldrb	r0, [r4, #17]
   d4b84:	b120      	cbz	r0, d4b90 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d4b86:	4629      	mov	r1, r5
   d4b88:	7c20      	ldrb	r0, [r4, #16]
   d4b8a:	f7ff fc09 	bl	d43a0 <HAL_USB_USART_Send_Data>
    return 1;
   d4b8e:	2001      	movs	r0, #1
  }
  return 0;
}
   d4b90:	bd38      	pop	{r3, r4, r5, pc}

000d4b92 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b92:	7c00      	ldrb	r0, [r0, #16]
   d4b94:	f7ff bc0c 	b.w	d43b0 <HAL_USB_USART_Flush_Data>

000d4b98 <_ZN9USBSerialD0Ev>:
   d4b98:	b510      	push	{r4, lr}
   d4b9a:	4604      	mov	r4, r0
   d4b9c:	f7ff fa7d 	bl	d409a <_ZdlPv>
   d4ba0:	4620      	mov	r0, r4
   d4ba2:	bd10      	pop	{r4, pc}

000d4ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ba4:	b510      	push	{r4, lr}
   d4ba6:	4604      	mov	r4, r0
   d4ba8:	2300      	movs	r3, #0
   d4baa:	6063      	str	r3, [r4, #4]
   d4bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bb0:	60a3      	str	r3, [r4, #8]
   d4bb2:	4b05      	ldr	r3, [pc, #20]	; (d4bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4bb4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4bb6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bb8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4bba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4bbc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bbe:	4611      	mov	r1, r2
   d4bc0:	f7ff fbc6 	bl	d4350 <HAL_USB_USART_Init>
}
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	bd10      	pop	{r4, pc}
   d4bc8:	000d6ba8 	.word	0x000d6ba8

000d4bcc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4bcc:	2200      	movs	r2, #0
   d4bce:	7c00      	ldrb	r0, [r0, #16]
   d4bd0:	f7ff bbc6 	b.w	d4360 <HAL_USB_USART_Begin>

000d4bd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4bd6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bd8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4bda:	2100      	movs	r1, #0
   d4bdc:	f001 fedd 	bl	d699a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4be0:	4620      	mov	r0, r4
   d4be2:	bd10      	pop	{r4, pc}

000d4be4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4be4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4be6:	4d0e      	ldr	r5, [pc, #56]	; (d4c20 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4be8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bea:	a801      	add	r0, sp, #4
   d4bec:	f7ff fff2 	bl	d4bd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bf0:	6829      	ldr	r1, [r5, #0]
   d4bf2:	f011 0401 	ands.w	r4, r1, #1
   d4bf6:	d110      	bne.n	d4c1a <_Z16_fetch_usbserialv+0x36>
   d4bf8:	4628      	mov	r0, r5
   d4bfa:	f7ff fa52 	bl	d40a2 <__cxa_guard_acquire>
   d4bfe:	b160      	cbz	r0, d4c1a <_Z16_fetch_usbserialv+0x36>
   d4c00:	aa01      	add	r2, sp, #4
   d4c02:	4621      	mov	r1, r4
   d4c04:	4807      	ldr	r0, [pc, #28]	; (d4c24 <_Z16_fetch_usbserialv+0x40>)
   d4c06:	f7ff ffcd 	bl	d4ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c0a:	4628      	mov	r0, r5
   d4c0c:	f7ff fa4e 	bl	d40ac <__cxa_guard_release>
   d4c10:	4a05      	ldr	r2, [pc, #20]	; (d4c28 <_Z16_fetch_usbserialv+0x44>)
   d4c12:	4906      	ldr	r1, [pc, #24]	; (d4c2c <_Z16_fetch_usbserialv+0x48>)
   d4c14:	4803      	ldr	r0, [pc, #12]	; (d4c24 <_Z16_fetch_usbserialv+0x40>)
   d4c16:	f000 fef7 	bl	d5a08 <__aeabi_atexit>
	return _usbserial;
}
   d4c1a:	4802      	ldr	r0, [pc, #8]	; (d4c24 <_Z16_fetch_usbserialv+0x40>)
   d4c1c:	b007      	add	sp, #28
   d4c1e:	bd30      	pop	{r4, r5, pc}
   d4c20:	2003e5b4 	.word	0x2003e5b4
   d4c24:	2003e5b8 	.word	0x2003e5b8
   d4c28:	2003e3c0 	.word	0x2003e3c0
   d4c2c:	000d4b55 	.word	0x000d4b55

000d4c30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c30:	4770      	bx	lr

000d4c32 <_ZN9IPAddressD0Ev>:
   d4c32:	b510      	push	{r4, lr}
   d4c34:	4604      	mov	r4, r0
   d4c36:	f7ff fa30 	bl	d409a <_ZdlPv>
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	bd10      	pop	{r4, pc}

000d4c3e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c40:	7d03      	ldrb	r3, [r0, #20]
   d4c42:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c44:	b08d      	sub	sp, #52	; 0x34
   d4c46:	460e      	mov	r6, r1
   d4c48:	f100 0704 	add.w	r7, r0, #4
   d4c4c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c50:	d002      	beq.n	d4c58 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c52:	f100 0508 	add.w	r5, r0, #8
   d4c56:	e018      	b.n	d4c8a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c58:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c5a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c5c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c60:	232f      	movs	r3, #47	; 0x2f
   d4c62:	462a      	mov	r2, r5
   d4c64:	200a      	movs	r0, #10
   d4c66:	f7ff fc33 	bl	d44d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	f001 fee1 	bl	d6a32 <strlen>
   d4c70:	6833      	ldr	r3, [r6, #0]
   d4c72:	4602      	mov	r2, r0
   d4c74:	68db      	ldr	r3, [r3, #12]
   d4c76:	4629      	mov	r1, r5
   d4c78:	4630      	mov	r0, r6
   d4c7a:	4798      	blx	r3
   d4c7c:	e00f      	b.n	d4c9e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c7e:	b124      	cbz	r4, d4c8a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c80:	212e      	movs	r1, #46	; 0x2e
   d4c82:	4630      	mov	r0, r6
   d4c84:	f000 fba6 	bl	d53d4 <_ZN5Print5printEc>
   d4c88:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4c8a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c8e:	220a      	movs	r2, #10
   d4c90:	4630      	mov	r0, r6
   d4c92:	f000 fbdb 	bl	d544c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c96:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c98:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c9a:	d1f0      	bne.n	d4c7e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c9c:	4620      	mov	r0, r4
    }
    return n;
}
   d4c9e:	b00d      	add	sp, #52	; 0x34
   d4ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4ca4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4b05      	ldr	r3, [pc, #20]	; (d4cbc <_ZN9IPAddressC1Ev+0x18>)
   d4ca8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4caa:	2211      	movs	r2, #17
   d4cac:	f840 3b04 	str.w	r3, [r0], #4
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	f001 fe72 	bl	d699a <memset>
{
    clear();
}
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	bd10      	pop	{r4, pc}
   d4cba:	bf00      	nop
   d4cbc:	000d6bd8 	.word	0x000d6bd8

000d4cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cc0:	4603      	mov	r3, r0
   d4cc2:	4a07      	ldr	r2, [pc, #28]	; (d4ce0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4cc4:	b510      	push	{r4, lr}
   d4cc6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4cca:	f101 0210 	add.w	r2, r1, #16
   d4cce:	f851 4b04 	ldr.w	r4, [r1], #4
   d4cd2:	f843 4b04 	str.w	r4, [r3], #4
   d4cd6:	4291      	cmp	r1, r2
   d4cd8:	d1f9      	bne.n	d4cce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4cda:	780a      	ldrb	r2, [r1, #0]
   d4cdc:	701a      	strb	r2, [r3, #0]
}
   d4cde:	bd10      	pop	{r4, pc}
   d4ce0:	000d6bd8 	.word	0x000d6bd8

000d4ce4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ce4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ce6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4cee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4cf2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cf6:	2304      	movs	r3, #4
   d4cf8:	6041      	str	r1, [r0, #4]
   d4cfa:	7503      	strb	r3, [r0, #20]
   d4cfc:	bd10      	pop	{r4, pc}

000d4cfe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4cfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d00:	780d      	ldrb	r5, [r1, #0]
   d4d02:	788b      	ldrb	r3, [r1, #2]
   d4d04:	784a      	ldrb	r2, [r1, #1]
   d4d06:	78c9      	ldrb	r1, [r1, #3]
   d4d08:	9100      	str	r1, [sp, #0]
   d4d0a:	4629      	mov	r1, r5
   d4d0c:	f7ff ffea 	bl	d4ce4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d10:	b003      	add	sp, #12
   d4d12:	bd30      	pop	{r4, r5, pc}

000d4d14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d14:	4770      	bx	lr

000d4d16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4d16:	2000      	movs	r0, #0
   d4d18:	4770      	bx	lr

000d4d1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d1a:	b510      	push	{r4, lr}
   d4d1c:	4604      	mov	r4, r0
   d4d1e:	f7ff f9bc 	bl	d409a <_ZdlPv>
   d4d22:	4620      	mov	r0, r4
   d4d24:	bd10      	pop	{r4, pc}

000d4d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4d26:	b508      	push	{r3, lr}
      { delete this; }
   d4d28:	b108      	cbz	r0, d4d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4d2a:	f7ff fff6 	bl	d4d1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d2e:	bd08      	pop	{r3, pc}

000d4d30 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d30:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d32:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d34:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d36:	b113      	cbz	r3, d4d3e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d38:	2203      	movs	r2, #3
   d4d3a:	4601      	mov	r1, r0
   d4d3c:	4798      	blx	r3
    }
   d4d3e:	4620      	mov	r0, r4
   d4d40:	bd10      	pop	{r4, pc}

000d4d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4d42:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4d44:	68c4      	ldr	r4, [r0, #12]
   d4d46:	b1d4      	cbz	r4, d4d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4d48:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4d4a:	2b02      	cmp	r3, #2
   d4d4c:	d102      	bne.n	d4d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d4e:	68e0      	ldr	r0, [r4, #12]
   d4d50:	f7ff fcc2 	bl	d46d8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4d54:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4d56:	b12d      	cbz	r5, d4d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d58:	4628      	mov	r0, r5
   d4d5a:	f7ff ffe9 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
   d4d5e:	4628      	mov	r0, r5
   d4d60:	f7ff f99b 	bl	d409a <_ZdlPv>
   d4d64:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4d66:	b12d      	cbz	r5, d4d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4d68:	4628      	mov	r0, r5
   d4d6a:	f7ff ffe1 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
   d4d6e:	4628      	mov	r0, r5
   d4d70:	f7ff f993 	bl	d409a <_ZdlPv>
   d4d74:	4620      	mov	r0, r4
   d4d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d7a:	f7ff b98e 	b.w	d409a <_ZdlPv>
   d4d7e:	bd38      	pop	{r3, r4, r5, pc}

000d4d80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4d80:	b513      	push	{r0, r1, r4, lr}
   d4d82:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d84:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4d88:	2300      	movs	r3, #0
   d4d8a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d8c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d8e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d90:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d92:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d94:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d96:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d98:	f7ff f9c0 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	b002      	add	sp, #8
   d4da0:	bd10      	pop	{r4, pc}

000d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4da2:	680b      	ldr	r3, [r1, #0]
   d4da4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4da6:	b113      	cbz	r3, d4dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4da8:	685a      	ldr	r2, [r3, #4]
   d4daa:	3201      	adds	r2, #1
   d4dac:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4dae:	4770      	bx	lr

000d4db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4db2:	460c      	mov	r4, r1
   d4db4:	ad02      	add	r5, sp, #8
   d4db6:	f854 3b04 	ldr.w	r3, [r4], #4
   d4dba:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4dbe:	4606      	mov	r6, r0
   d4dc0:	460f      	mov	r7, r1
   d4dc2:	a801      	add	r0, sp, #4
   d4dc4:	4621      	mov	r1, r4
   d4dc6:	f7ff ffec 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4dca:	4629      	mov	r1, r5
   d4dcc:	4630      	mov	r0, r6
   d4dce:	f7ff ffd7 	bl	d4d80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dd2:	a801      	add	r0, sp, #4
   d4dd4:	f7ff f9a2 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dd8:	4620      	mov	r0, r4
   d4dda:	f7ff f99f 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4dde:	4638      	mov	r0, r7
   d4de0:	f7ff f95b 	bl	d409a <_ZdlPv>
        return p;
    }
   d4de4:	4630      	mov	r0, r6
   d4de6:	b003      	add	sp, #12
   d4de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dea <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4dea:	b513      	push	{r0, r1, r4, lr}
   d4dec:	460b      	mov	r3, r1
   d4dee:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4df0:	c803      	ldmia	r0, {r0, r1}
   d4df2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4df6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4dfa:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4dfe:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4e02:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e06:	b002      	add	sp, #8
   d4e08:	bd10      	pop	{r4, pc}

000d4e0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e0a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e0c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e0e:	b90a      	cbnz	r2, d4e14 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e10:	f000 fdff 	bl	d5a12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e14:	68c3      	ldr	r3, [r0, #12]
    }
   d4e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e1a:	4718      	bx	r3

000d4e1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e1c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e1e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e20:	f100 0110 	add.w	r1, r0, #16
   d4e24:	f7ff fff1 	bl	d4e0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e28:	bd08      	pop	{r3, pc}

000d4e2a <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e2a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e2c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e2e:	b90a      	cbnz	r2, d4e34 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4e30:	f000 fdef 	bl	d5a12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e34:	68c3      	ldr	r3, [r0, #12]
    }
   d4e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e3a:	4718      	bx	r3

000d4e3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e3c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e3e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e40:	f100 0110 	add.w	r1, r0, #16
   d4e44:	f7ff fff1 	bl	d4e2a <_ZNKSt8functionIFvRKbEEclES1_>
   d4e48:	bd08      	pop	{r3, pc}

000d4e4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e4a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e4c:	2300      	movs	r3, #0
   d4e4e:	6083      	str	r3, [r0, #8]
   d4e50:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e52:	4604      	mov	r4, r0
   d4e54:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4e56:	b12b      	cbz	r3, d4e64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e58:	2202      	movs	r2, #2
   d4e5a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e5c:	68eb      	ldr	r3, [r5, #12]
   d4e5e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e60:	68ab      	ldr	r3, [r5, #8]
   d4e62:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e64:	4620      	mov	r0, r4
   d4e66:	bd38      	pop	{r3, r4, r5, pc}

000d4e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4e6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4e70:	b086      	sub	sp, #24
   d4e72:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e74:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e78:	808b      	strh	r3, [r1, #4]
   d4e7a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e7c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e7e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e82:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e84:	f04f 0002 	mov.w	r0, #2
   d4e88:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4e8c:	4299      	cmp	r1, r3
   d4e8e:	d103      	bne.n	d4e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4e90:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4e94:	2d00      	cmp	r5, #0
   d4e96:	d1f7      	bne.n	d4e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4e98:	d002      	beq.n	d4ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4e9a:	f88d 1000 	strb.w	r1, [sp]
   d4e9e:	e06a      	b.n	d4f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ea0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ea4:	bf1e      	ittt	ne
   d4ea6:	60e7      	strne	r7, [r4, #12]
   d4ea8:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eaa:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4eac:	2301      	movs	r3, #1
   d4eae:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4eb2:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4eb4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4eb6:	f104 0308 	add.w	r3, r4, #8
   d4eba:	f3bf 8f5f 	dmb	sy
   d4ebe:	e853 6f00 	ldrex	r6, [r3]
   d4ec2:	e843 0200 	strex	r2, r0, [r3]
   d4ec6:	2a00      	cmp	r2, #0
   d4ec8:	d1f9      	bne.n	d4ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4eca:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4ece:	2e00      	cmp	r6, #0
   d4ed0:	d051      	beq.n	d4f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4ed2:	f7ff fbd5 	bl	d4680 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4ed6:	b120      	cbz	r0, d4ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ed8:	4629      	mov	r1, r5
   d4eda:	4630      	mov	r0, r6
   d4edc:	f7ff ff95 	bl	d4e0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ee0:	e043      	b.n	d4f6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4ee2:	4631      	mov	r1, r6
   d4ee4:	4668      	mov	r0, sp
   d4ee6:	f7ff ffb0 	bl	d4e4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4eea:	68e0      	ldr	r0, [r4, #12]
   d4eec:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ef0:	b108      	cbz	r0, d4ef6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4ef2:	f001 fd83 	bl	d69fc <strdup>
   d4ef6:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ef8:	2010      	movs	r0, #16
   d4efa:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4efe:	f7ff f8ca 	bl	d4096 <_Znwj>
   d4f02:	4605      	mov	r5, r0
   d4f04:	b330      	cbz	r0, d4f54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f06:	f04f 0800 	mov.w	r8, #0
   d4f0a:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f0e:	2018      	movs	r0, #24
   d4f10:	f7ff f8c1 	bl	d4096 <_Znwj>
   d4f14:	4604      	mov	r4, r0
   d4f16:	b1c0      	cbz	r0, d4f4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f18:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f1c:	4601      	mov	r1, r0
   d4f1e:	4668      	mov	r0, sp
   d4f20:	f7ff ff63 	bl	d4dea <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f24:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f26:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f28:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f2a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f2c:	9202      	str	r2, [sp, #8]
   d4f2e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f30:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4f36:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f38:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f40:	9b04      	ldr	r3, [sp, #16]
   d4f42:	9203      	str	r2, [sp, #12]
   d4f44:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f46:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f4a:	4b0e      	ldr	r3, [pc, #56]	; (d4f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4f4c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f4e:	4b0e      	ldr	r3, [pc, #56]	; (d4f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f50:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4f52:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4f54:	9804      	ldr	r0, [sp, #16]
   d4f56:	f7ff fbbf 	bl	d46d8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f5a:	4668      	mov	r0, sp
   d4f5c:	f7ff fee8 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f60:	2200      	movs	r2, #0
   d4f62:	4629      	mov	r1, r5
   d4f64:	4809      	ldr	r0, [pc, #36]	; (d4f8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4f66:	f7ff fb93 	bl	d4690 <application_thread_invoke>
   d4f6a:	4630      	mov	r0, r6
   d4f6c:	f7ff fee0 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4f70:	4630      	mov	r0, r6
   d4f72:	f7ff f892 	bl	d409a <_ZdlPv>
   d4f76:	4638      	mov	r0, r7
   d4f78:	f7ff fbae 	bl	d46d8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4f7c:	b006      	add	sp, #24
   d4f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f82:	bf00      	nop
   d4f84:	000d4e1d 	.word	0x000d4e1d
   d4f88:	000d5079 	.word	0x000d5079
   d4f8c:	000d4a6d 	.word	0x000d4a6d

000d4f90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f94:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f96:	ad07      	add	r5, sp, #28
   d4f98:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f9c:	4606      	mov	r6, r0
   d4f9e:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4fa0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fa2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4fa4:	460f      	mov	r7, r1
   d4fa6:	4690      	mov	r8, r2
   d4fa8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fac:	f8c5 b004 	str.w	fp, [r5, #4]
   d4fb0:	f8c5 b008 	str.w	fp, [r5, #8]
   d4fb4:	9307      	str	r3, [sp, #28]
   d4fb6:	f7ff f86e 	bl	d4096 <_Znwj>
   d4fba:	4604      	mov	r4, r0
   d4fbc:	b138      	cbz	r0, d4fce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4fbe:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fc2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4fc6:	f8c0 b004 	str.w	fp, [r0, #4]
   d4fca:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fce:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fd0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4fd2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fd4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fd6:	f7ff f85e 	bl	d4096 <_Znwj>
   d4fda:	b128      	cbz	r0, d4fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4fdc:	2301      	movs	r3, #1
   d4fde:	6043      	str	r3, [r0, #4]
   d4fe0:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4fe2:	4b23      	ldr	r3, [pc, #140]	; (d5070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4fe4:	6003      	str	r3, [r0, #0]
   d4fe6:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fe8:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4fea:	4b22      	ldr	r3, [pc, #136]	; (d5074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4fec:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4fee:	2008      	movs	r0, #8
   d4ff0:	f7ff f851 	bl	d4096 <_Znwj>
   d4ff4:	4604      	mov	r4, r0
   d4ff6:	b128      	cbz	r0, d5004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ff8:	9b03      	ldr	r3, [sp, #12]
   d4ffa:	f840 3b04 	str.w	r3, [r0], #4
   d4ffe:	a904      	add	r1, sp, #16
   d5000:	f7ff fecf 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5004:	9500      	str	r5, [sp, #0]
   d5006:	fa5f f38a 	uxtb.w	r3, sl
   d500a:	464a      	mov	r2, r9
   d500c:	4641      	mov	r1, r8
   d500e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5010:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5012:	f7ff fac5 	bl	d45a0 <spark_send_event>
   d5016:	b9b8      	cbnz	r0, d5048 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5018:	9b03      	ldr	r3, [sp, #12]
   d501a:	785b      	ldrb	r3, [r3, #1]
   d501c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5020:	b993      	cbnz	r3, d5048 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5022:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5026:	a905      	add	r1, sp, #20
   d5028:	a803      	add	r0, sp, #12
   d502a:	9205      	str	r2, [sp, #20]
   d502c:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5030:	f7ff ff1a 	bl	d4e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5034:	9805      	ldr	r0, [sp, #20]
   d5036:	f7ff fb4f 	bl	d46d8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d503a:	a805      	add	r0, sp, #20
   d503c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d503e:	f7ff feb7 	bl	d4db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5042:	a806      	add	r0, sp, #24
   d5044:	f7ff f86a 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5048:	9b03      	ldr	r3, [sp, #12]
   d504a:	9305      	str	r3, [sp, #20]
   d504c:	a904      	add	r1, sp, #16
   d504e:	a806      	add	r0, sp, #24
   d5050:	f7ff fea7 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5054:	a905      	add	r1, sp, #20
   d5056:	4630      	mov	r0, r6
   d5058:	f7ff fe92 	bl	d4d80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d505c:	a806      	add	r0, sp, #24
   d505e:	f7ff f85d 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5062:	a804      	add	r0, sp, #16
   d5064:	f7ff f85a 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5068:	4630      	mov	r0, r6
   d506a:	b00b      	add	sp, #44	; 0x2c
   d506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5070:	000d6bec 	.word	0x000d6bec
   d5074:	000d51e1 	.word	0x000d51e1

000d5078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5078:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d507a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d507c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d507e:	d006      	beq.n	d508e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5080:	2a03      	cmp	r2, #3
   d5082:	d017      	beq.n	d50b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5084:	2a01      	cmp	r2, #1
   d5086:	d120      	bne.n	d50ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5088:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d508a:	6003      	str	r3, [r0, #0]
	      break;
   d508c:	e01d      	b.n	d50ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d508e:	2018      	movs	r0, #24
   d5090:	680e      	ldr	r6, [r1, #0]
   d5092:	f7ff f800 	bl	d4096 <_Znwj>
   d5096:	4605      	mov	r5, r0
   d5098:	b150      	cbz	r0, d50b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d509a:	4631      	mov	r1, r6
   d509c:	f7ff fed5 	bl	d4e4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50a0:	6930      	ldr	r0, [r6, #16]
   d50a2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50a6:	b108      	cbz	r0, d50ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d50a8:	f001 fca8 	bl	d69fc <strdup>
   d50ac:	6128      	str	r0, [r5, #16]
   d50ae:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50b0:	6025      	str	r5, [r4, #0]
   d50b2:	e00a      	b.n	d50ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50b4:	6804      	ldr	r4, [r0, #0]
   d50b6:	b144      	cbz	r4, d50ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d50b8:	6920      	ldr	r0, [r4, #16]
   d50ba:	f7ff fb0d 	bl	d46d8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50be:	4620      	mov	r0, r4
   d50c0:	f7ff fe36 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7fe ffe8 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50ca:	2000      	movs	r0, #0
   d50cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50ce <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50ce:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50d0:	2300      	movs	r3, #0
   d50d2:	6083      	str	r3, [r0, #8]
   d50d4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50d6:	4604      	mov	r4, r0
   d50d8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d50da:	b12b      	cbz	r3, d50e8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50dc:	2202      	movs	r2, #2
   d50de:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50e0:	68eb      	ldr	r3, [r5, #12]
   d50e2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50e4:	68ab      	ldr	r3, [r5, #8]
   d50e6:	60a3      	str	r3, [r4, #8]
	}
    }
   d50e8:	4620      	mov	r0, r4
   d50ea:	bd38      	pop	{r3, r4, r5, pc}

000d50ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50ec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50ee:	b570      	push	{r4, r5, r6, lr}
   d50f0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d50f2:	d006      	beq.n	d5102 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d50f4:	2a03      	cmp	r2, #3
   d50f6:	d011      	beq.n	d511c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d50f8:	2a01      	cmp	r2, #1
   d50fa:	d117      	bne.n	d512c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50fc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50fe:	6003      	str	r3, [r0, #0]
	      break;
   d5100:	e014      	b.n	d512c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5102:	2014      	movs	r0, #20
   d5104:	680e      	ldr	r6, [r1, #0]
   d5106:	f7fe ffc6 	bl	d4096 <_Znwj>
   d510a:	4605      	mov	r5, r0
   d510c:	b120      	cbz	r0, d5118 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d510e:	4631      	mov	r1, r6
   d5110:	f7ff ffdd 	bl	d50ce <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5114:	7c33      	ldrb	r3, [r6, #16]
   d5116:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5118:	6025      	str	r5, [r4, #0]
   d511a:	e007      	b.n	d512c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d511c:	6804      	ldr	r4, [r0, #0]
   d511e:	b12c      	cbz	r4, d512c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5120:	4620      	mov	r0, r4
   d5122:	f7ff fe05 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5126:	4620      	mov	r0, r4
   d5128:	f7fe ffb7 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d512c:	2000      	movs	r0, #0
   d512e:	bd70      	pop	{r4, r5, r6, pc}

000d5130 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5130:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5132:	2300      	movs	r3, #0
   d5134:	b087      	sub	sp, #28
   d5136:	460c      	mov	r4, r1
   d5138:	f3bf 8f5f 	dmb	sy
   d513c:	e850 6f00 	ldrex	r6, [r0]
   d5140:	e840 3200 	strex	r2, r3, [r0]
   d5144:	2a00      	cmp	r2, #0
   d5146:	d1f9      	bne.n	d513c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5148:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d514c:	2e00      	cmp	r6, #0
   d514e:	d03e      	beq.n	d51ce <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5150:	4618      	mov	r0, r3
   d5152:	f7ff fa95 	bl	d4680 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5156:	4607      	mov	r7, r0
   d5158:	b120      	cbz	r0, d5164 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d515a:	4621      	mov	r1, r4
   d515c:	4630      	mov	r0, r6
   d515e:	f7ff fe64 	bl	d4e2a <_ZNKSt8functionIFvRKbEEclES1_>
   d5162:	e02e      	b.n	d51c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5164:	4631      	mov	r1, r6
   d5166:	a801      	add	r0, sp, #4
   d5168:	f7ff ffb1 	bl	d50ce <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d516c:	7823      	ldrb	r3, [r4, #0]
   d516e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5172:	2010      	movs	r0, #16
   d5174:	f7fe ff8f 	bl	d4096 <_Znwj>
   d5178:	4605      	mov	r5, r0
   d517a:	b1d0      	cbz	r0, d51b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d517c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d517e:	2014      	movs	r0, #20
   d5180:	f7fe ff89 	bl	d4096 <_Znwj>
   d5184:	4604      	mov	r4, r0
   d5186:	b178      	cbz	r0, d51a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5188:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d518a:	4601      	mov	r1, r0
   d518c:	a801      	add	r0, sp, #4
   d518e:	f7ff fe2c 	bl	d4dea <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5192:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5194:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5196:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5198:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d519a:	9203      	str	r2, [sp, #12]
   d519c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d519e:	60e3      	str	r3, [r4, #12]
   d51a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51a4:	9204      	str	r2, [sp, #16]
   d51a6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d51a8:	4b0a      	ldr	r3, [pc, #40]	; (d51d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d51aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51ac:	4b0a      	ldr	r3, [pc, #40]	; (d51d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51ae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d51b0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51b2:	a801      	add	r0, sp, #4
   d51b4:	f7ff fdbc 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51b8:	2200      	movs	r2, #0
   d51ba:	4629      	mov	r1, r5
   d51bc:	4807      	ldr	r0, [pc, #28]	; (d51dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d51be:	f7ff fa67 	bl	d4690 <application_thread_invoke>
   d51c2:	4630      	mov	r0, r6
   d51c4:	f7ff fdb4 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d51c8:	4630      	mov	r0, r6
   d51ca:	f7fe ff66 	bl	d409a <_ZdlPv>
        }
    }
   d51ce:	b007      	add	sp, #28
   d51d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51d2:	bf00      	nop
   d51d4:	000d4e3d 	.word	0x000d4e3d
   d51d8:	000d50ed 	.word	0x000d50ed
   d51dc:	000d4a6d 	.word	0x000d4a6d

000d51e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d51e0:	b530      	push	{r4, r5, lr}
   d51e2:	b085      	sub	sp, #20
   d51e4:	4604      	mov	r4, r0
   d51e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d51e8:	4668      	mov	r0, sp
   d51ea:	4611      	mov	r1, r2
   d51ec:	f7ff fde0 	bl	d4db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d51f0:	b17c      	cbz	r4, d5212 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d51f2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d51f4:	4628      	mov	r0, r5
   d51f6:	b10d      	cbz	r5, d51fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d51f8:	f001 fc00 	bl	d69fc <strdup>
   d51fc:	9002      	str	r0, [sp, #8]
   d51fe:	a902      	add	r1, sp, #8
   d5200:	4668      	mov	r0, sp
   d5202:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5206:	f7ff fe2f 	bl	d4e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d520a:	9802      	ldr	r0, [sp, #8]
   d520c:	f7ff fa64 	bl	d46d8 <free>
   d5210:	e01d      	b.n	d524e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5212:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5214:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5218:	f04f 0201 	mov.w	r2, #1
   d521c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5220:	42a3      	cmp	r3, r4
   d5222:	d103      	bne.n	d522c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5224:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5228:	2900      	cmp	r1, #0
   d522a:	d1f7      	bne.n	d521c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d522c:	d002      	beq.n	d5234 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d522e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5232:	e00c      	b.n	d524e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5234:	f110 010c 	adds.w	r1, r0, #12
   d5238:	f04f 0301 	mov.w	r3, #1
   d523c:	bf18      	it	ne
   d523e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5240:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5244:	3004      	adds	r0, #4
   d5246:	f800 3c03 	strb.w	r3, [r0, #-3]
   d524a:	f7ff ff71 	bl	d5130 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d524e:	a801      	add	r0, sp, #4
   d5250:	f7fe ff64 	bl	d411c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5254:	b005      	add	sp, #20
   d5256:	bd30      	pop	{r4, r5, pc}

000d5258 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5258:	2100      	movs	r1, #0
   d525a:	f7ff ba09 	b.w	d4670 <system_delay_ms>
	...

000d5260 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5260:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5262:	4b0c      	ldr	r3, [pc, #48]	; (d5294 <serialEventRun+0x34>)
   d5264:	b133      	cbz	r3, d5274 <serialEventRun+0x14>
   d5266:	f7ff fcbd 	bl	d4be4 <_Z16_fetch_usbserialv>
   d526a:	6803      	ldr	r3, [r0, #0]
   d526c:	691b      	ldr	r3, [r3, #16]
   d526e:	4798      	blx	r3
   d5270:	2800      	cmp	r0, #0
   d5272:	dc09      	bgt.n	d5288 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5274:	4b08      	ldr	r3, [pc, #32]	; (d5298 <serialEventRun+0x38>)
   d5276:	b163      	cbz	r3, d5292 <serialEventRun+0x32>
   d5278:	f000 fa0a 	bl	d5690 <_Z22__fetch_global_Serial1v>
   d527c:	6803      	ldr	r3, [r0, #0]
   d527e:	691b      	ldr	r3, [r3, #16]
   d5280:	4798      	blx	r3
   d5282:	2800      	cmp	r0, #0
   d5284:	dc03      	bgt.n	d528e <serialEventRun+0x2e>
   d5286:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5288:	f3af 8000 	nop.w
   d528c:	e7f2      	b.n	d5274 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d528e:	f3af 8000 	nop.w
   d5292:	bd08      	pop	{r3, pc}
	...

000d529c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d529c:	b508      	push	{r3, lr}
	serialEventRun();
   d529e:	f7ff ffdf 	bl	d5260 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52a2:	f7ff f94d 	bl	d4540 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52a6:	4b01      	ldr	r3, [pc, #4]	; (d52ac <_post_loop+0x10>)
   d52a8:	6018      	str	r0, [r3, #0]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	2003e730 	.word	0x2003e730

000d52b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52b2:	2300      	movs	r3, #0
   d52b4:	9300      	str	r3, [sp, #0]
   d52b6:	461a      	mov	r2, r3
   d52b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52bc:	f7ff f9fa 	bl	d46b4 <system_ctrl_set_result>
}
   d52c0:	b003      	add	sp, #12
   d52c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52ca:	8843      	ldrh	r3, [r0, #2]
   d52cc:	2b0a      	cmp	r3, #10
   d52ce:	d008      	beq.n	d52e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52d0:	2b50      	cmp	r3, #80	; 0x50
   d52d2:	d109      	bne.n	d52e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52d4:	4b09      	ldr	r3, [pc, #36]	; (d52fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52d6:	681b      	ldr	r3, [r3, #0]
   d52d8:	b13b      	cbz	r3, d52ea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d52da:	b003      	add	sp, #12
   d52dc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52e0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52e2:	f7ff ffe5 	bl	d52b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52e6:	e006      	b.n	d52f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52e8:	2300      	movs	r3, #0
   d52ea:	9300      	str	r3, [sp, #0]
   d52ec:	461a      	mov	r2, r3
   d52ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52f2:	f7ff f9df 	bl	d46b4 <system_ctrl_set_result>
        break;
    }
}
   d52f6:	b003      	add	sp, #12
   d52f8:	f85d fb04 	ldr.w	pc, [sp], #4
   d52fc:	2003e5cc 	.word	0x2003e5cc

000d5300 <module_user_init_hook>:

void module_user_init_hook()
{
   d5300:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5302:	f7ff f915 	bl	d4530 <HAL_RNG_GetRandomNumber>
   d5306:	4604      	mov	r4, r0
    srand(seed);
   d5308:	f001 fb50 	bl	d69ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d530c:	4b07      	ldr	r3, [pc, #28]	; (d532c <module_user_init_hook+0x2c>)
   d530e:	b113      	cbz	r3, d5316 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5310:	4620      	mov	r0, r4
   d5312:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5316:	2100      	movs	r1, #0
   d5318:	4804      	ldr	r0, [pc, #16]	; (d532c <module_user_init_hook+0x2c>)
   d531a:	f7ff f949 	bl	d45b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d531e:	2100      	movs	r1, #0
   d5320:	4803      	ldr	r0, [pc, #12]	; (d5330 <module_user_init_hook+0x30>)
}
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5326:	f7ff b9bb 	b.w	d46a0 <system_ctrl_set_app_request_handler>
   d532a:	bf00      	nop
   d532c:	00000000 	.word	0x00000000
   d5330:	000d52c9 	.word	0x000d52c9

000d5334 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5334:	b510      	push	{r4, lr}
   d5336:	4604      	mov	r4, r0
   d5338:	f7ff fcfa 	bl	d4d30 <_ZNSt14_Function_baseD1Ev>
   d533c:	4620      	mov	r0, r4
   d533e:	bd10      	pop	{r4, pc}

000d5340 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5340:	4803      	ldr	r0, [pc, #12]	; (d5350 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5342:	4a04      	ldr	r2, [pc, #16]	; (d5354 <_GLOBAL__sub_I_RGB+0x14>)
   d5344:	4904      	ldr	r1, [pc, #16]	; (d5358 <_GLOBAL__sub_I_RGB+0x18>)
   d5346:	2300      	movs	r3, #0
   d5348:	6083      	str	r3, [r0, #8]
   d534a:	f000 bb5d 	b.w	d5a08 <__aeabi_atexit>
   d534e:	bf00      	nop
   d5350:	2003e5d0 	.word	0x2003e5d0
   d5354:	2003e3c0 	.word	0x2003e3c0
   d5358:	000d5335 	.word	0x000d5335

000d535c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d535c:	4b02      	ldr	r3, [pc, #8]	; (d5368 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d535e:	681a      	ldr	r2, [r3, #0]
   d5360:	4b02      	ldr	r3, [pc, #8]	; (d536c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5362:	601a      	str	r2, [r3, #0]
   d5364:	4770      	bx	lr
   d5366:	bf00      	nop
   d5368:	2003e354 	.word	0x2003e354
   d536c:	2003e5e0 	.word	0x2003e5e0

000d5370 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5370:	4b01      	ldr	r3, [pc, #4]	; (d5378 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5372:	4a02      	ldr	r2, [pc, #8]	; (d537c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5374:	601a      	str	r2, [r3, #0]
   d5376:	4770      	bx	lr
   d5378:	2003e5e4 	.word	0x2003e5e4
   d537c:	000d6cdf 	.word	0x000d6cdf

000d5380 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5382:	4606      	mov	r6, r0
   d5384:	460d      	mov	r5, r1
   d5386:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5388:	2400      	movs	r4, #0
  while (size--) {
   d538a:	42bd      	cmp	r5, r7
   d538c:	d00c      	beq.n	d53a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d538e:	6833      	ldr	r3, [r6, #0]
   d5390:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5394:	689b      	ldr	r3, [r3, #8]
   d5396:	4630      	mov	r0, r6
   d5398:	4798      	blx	r3
     if (chunk>=0)
   d539a:	2800      	cmp	r0, #0
   d539c:	db01      	blt.n	d53a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d539e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53a0:	e7f3      	b.n	d538a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53a2:	2c00      	cmp	r4, #0
   d53a4:	bf08      	it	eq
   d53a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53a8:	4620      	mov	r0, r4
   d53aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53ac:	b570      	push	{r4, r5, r6, lr}
   d53ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53b4:	b149      	cbz	r1, d53ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53b6:	f001 fb3c 	bl	d6a32 <strlen>
   d53ba:	682b      	ldr	r3, [r5, #0]
   d53bc:	4602      	mov	r2, r0
   d53be:	4621      	mov	r1, r4
   d53c0:	4628      	mov	r0, r5
   d53c2:	68db      	ldr	r3, [r3, #12]
    }
   d53c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53c8:	4718      	bx	r3
    }
   d53ca:	bd70      	pop	{r4, r5, r6, pc}

000d53cc <_ZN5Print5printEPKc>:
   d53cc:	b508      	push	{r3, lr}
   d53ce:	f7ff ffed 	bl	d53ac <_ZN5Print5writeEPKc>
   d53d2:	bd08      	pop	{r3, pc}

000d53d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53d4:	6803      	ldr	r3, [r0, #0]
   d53d6:	689b      	ldr	r3, [r3, #8]
   d53d8:	4718      	bx	r3

000d53da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53de:	4605      	mov	r5, r0
  size_t n = print('\r');
   d53e0:	f7ff fff8 	bl	d53d4 <_ZN5Print5printEc>
  n += print('\n');
   d53e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d53e6:	4604      	mov	r4, r0
  n += print('\n');
   d53e8:	4628      	mov	r0, r5
   d53ea:	f7ff fff3 	bl	d53d4 <_ZN5Print5printEc>
  return n;
}
   d53ee:	4420      	add	r0, r4
   d53f0:	bd38      	pop	{r3, r4, r5, pc}

000d53f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53f2:	b530      	push	{r4, r5, lr}
   d53f4:	b08b      	sub	sp, #44	; 0x2c
   d53f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53f8:	2100      	movs	r1, #0
   d53fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53fe:	2a01      	cmp	r2, #1
   d5400:	bf98      	it	ls
   d5402:	220a      	movls	r2, #10
   d5404:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5408:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d540c:	fb05 3312 	mls	r3, r5, r2, r3
   d5410:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5414:	2b09      	cmp	r3, #9
   d5416:	bf94      	ite	ls
   d5418:	3330      	addls	r3, #48	; 0x30
   d541a:	3337      	addhi	r3, #55	; 0x37
   d541c:	b2db      	uxtb	r3, r3
   d541e:	4621      	mov	r1, r4
   d5420:	f804 3901 	strb.w	r3, [r4], #-1
   d5424:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5426:	2d00      	cmp	r5, #0
   d5428:	d1ee      	bne.n	d5408 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d542a:	f7ff ffbf 	bl	d53ac <_ZN5Print5writeEPKc>
}
   d542e:	b00b      	add	sp, #44	; 0x2c
   d5430:	bd30      	pop	{r4, r5, pc}

000d5432 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5432:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5434:	b92a      	cbnz	r2, d5442 <_ZN5Print5printEmi+0x10>
   d5436:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5438:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d543c:	689b      	ldr	r3, [r3, #8]
   d543e:	b2c9      	uxtb	r1, r1
   d5440:	4718      	bx	r3
  else return printNumber(n, base);
   d5442:	b2d2      	uxtb	r2, r2
}
   d5444:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5448:	f7ff bfd3 	b.w	d53f2 <_ZN5Print11printNumberEmh>

000d544c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d544c:	f7ff bff1 	b.w	d5432 <_ZN5Print5printEmi>

000d5450 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5454:	4607      	mov	r7, r0
   d5456:	460e      	mov	r6, r1
  if (base == 0) {
   d5458:	4615      	mov	r5, r2
   d545a:	b92a      	cbnz	r2, d5468 <_ZN5Print5printEli+0x18>
    return write(n);
   d545c:	6803      	ldr	r3, [r0, #0]
   d545e:	b2c9      	uxtb	r1, r1
   d5460:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5466:	4718      	bx	r3
  } else if (base == 10) {
   d5468:	2a0a      	cmp	r2, #10
   d546a:	d102      	bne.n	d5472 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d546c:	2900      	cmp	r1, #0
   d546e:	da01      	bge.n	d5474 <_ZN5Print5printEli+0x24>
   d5470:	e004      	b.n	d547c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5472:	b2d2      	uxtb	r2, r2
  }
}
   d5474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5478:	f7ff bfbb 	b.w	d53f2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d547c:	212d      	movs	r1, #45	; 0x2d
   d547e:	f7ff ffa9 	bl	d53d4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5482:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5484:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5486:	4271      	negs	r1, r6
   d5488:	4638      	mov	r0, r7
   d548a:	f7ff ffb2 	bl	d53f2 <_ZN5Print11printNumberEmh>
   d548e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5494 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5498:	ec57 6b10 	vmov	r6, r7, d0
   d549c:	4682      	mov	sl, r0
   d549e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d54a0:	ee10 2a10 	vmov	r2, s0
   d54a4:	463b      	mov	r3, r7
   d54a6:	ee10 0a10 	vmov	r0, s0
   d54aa:	4639      	mov	r1, r7
   d54ac:	f001 f84e 	bl	d654c <__aeabi_dcmpun>
   d54b0:	b108      	cbz	r0, d54b6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54b2:	4948      	ldr	r1, [pc, #288]	; (d55d4 <_ZN5Print10printFloatEdh+0x140>)
   d54b4:	e012      	b.n	d54dc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d54b6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d54ba:	f04f 32ff 	mov.w	r2, #4294967295
   d54be:	4b46      	ldr	r3, [pc, #280]	; (d55d8 <_ZN5Print10printFloatEdh+0x144>)
   d54c0:	4630      	mov	r0, r6
   d54c2:	4649      	mov	r1, r9
   d54c4:	f001 f842 	bl	d654c <__aeabi_dcmpun>
   d54c8:	b968      	cbnz	r0, d54e6 <_ZN5Print10printFloatEdh+0x52>
   d54ca:	f04f 32ff 	mov.w	r2, #4294967295
   d54ce:	4b42      	ldr	r3, [pc, #264]	; (d55d8 <_ZN5Print10printFloatEdh+0x144>)
   d54d0:	4630      	mov	r0, r6
   d54d2:	4649      	mov	r1, r9
   d54d4:	f001 f81c 	bl	d6510 <__aeabi_dcmple>
   d54d8:	b928      	cbnz	r0, d54e6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54da:	4940      	ldr	r1, [pc, #256]	; (d55dc <_ZN5Print10printFloatEdh+0x148>)
   d54dc:	4650      	mov	r0, sl
   d54de:	f7ff ff65 	bl	d53ac <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d54e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d54e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54ea:	4b3d      	ldr	r3, [pc, #244]	; (d55e0 <_ZN5Print10printFloatEdh+0x14c>)
   d54ec:	4630      	mov	r0, r6
   d54ee:	4639      	mov	r1, r7
   d54f0:	f001 f822 	bl	d6538 <__aeabi_dcmpgt>
   d54f4:	b108      	cbz	r0, d54fa <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54f6:	493b      	ldr	r1, [pc, #236]	; (d55e4 <_ZN5Print10printFloatEdh+0x150>)
   d54f8:	e7f0      	b.n	d54dc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d54fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54fe:	4b3a      	ldr	r3, [pc, #232]	; (d55e8 <_ZN5Print10printFloatEdh+0x154>)
   d5500:	4630      	mov	r0, r6
   d5502:	4639      	mov	r1, r7
   d5504:	f000 fffa 	bl	d64fc <__aeabi_dcmplt>
   d5508:	2800      	cmp	r0, #0
   d550a:	d1f4      	bne.n	d54f6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d550c:	2200      	movs	r2, #0
   d550e:	2300      	movs	r3, #0
   d5510:	4630      	mov	r0, r6
   d5512:	4639      	mov	r1, r7
   d5514:	f000 fff2 	bl	d64fc <__aeabi_dcmplt>
   d5518:	b140      	cbz	r0, d552c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d551a:	212d      	movs	r1, #45	; 0x2d
   d551c:	4650      	mov	r0, sl
   d551e:	f7ff ff59 	bl	d53d4 <_ZN5Print5printEc>
     number = -number;
   d5522:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5526:	4604      	mov	r4, r0
     number = -number;
   d5528:	461f      	mov	r7, r3
   d552a:	e000      	b.n	d552e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d552c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d552e:	492f      	ldr	r1, [pc, #188]	; (d55ec <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5530:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5534:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5536:	fa5f f388 	uxtb.w	r3, r8
   d553a:	429d      	cmp	r5, r3
   d553c:	d906      	bls.n	d554c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d553e:	2200      	movs	r2, #0
   d5540:	4b2b      	ldr	r3, [pc, #172]	; (d55f0 <_ZN5Print10printFloatEdh+0x15c>)
   d5542:	f000 fe93 	bl	d626c <__aeabi_ddiv>
   d5546:	f108 0801 	add.w	r8, r8, #1
   d554a:	e7f4      	b.n	d5536 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d554c:	4632      	mov	r2, r6
   d554e:	463b      	mov	r3, r7
   d5550:	f000 fbb0 	bl	d5cb4 <__adddf3>
   d5554:	460f      	mov	r7, r1
   d5556:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5558:	f001 f836 	bl	d65c8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d555c:	220a      	movs	r2, #10
   d555e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5560:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5562:	4650      	mov	r0, sl
   d5564:	f7ff ff45 	bl	d53f2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5568:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d556a:	b37d      	cbz	r5, d55cc <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d556c:	4640      	mov	r0, r8
   d556e:	f000 fcdd 	bl	d5f2c <__aeabi_ui2d>
   d5572:	4602      	mov	r2, r0
   d5574:	460b      	mov	r3, r1
   d5576:	4630      	mov	r0, r6
   d5578:	4639      	mov	r1, r7
   d557a:	f000 fb99 	bl	d5cb0 <__aeabi_dsub>
   d557e:	4606      	mov	r6, r0
   d5580:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5582:	4650      	mov	r0, sl
   d5584:	491b      	ldr	r1, [pc, #108]	; (d55f4 <_ZN5Print10printFloatEdh+0x160>)
   d5586:	f7ff ff11 	bl	d53ac <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d558a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d558c:	4b18      	ldr	r3, [pc, #96]	; (d55f0 <_ZN5Print10printFloatEdh+0x15c>)
   d558e:	2200      	movs	r2, #0
   d5590:	4630      	mov	r0, r6
   d5592:	4639      	mov	r1, r7
   d5594:	f000 fd40 	bl	d6018 <__aeabi_dmul>
   d5598:	460f      	mov	r7, r1
   d559a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d559c:	f000 ffec 	bl	d6578 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d55a0:	220a      	movs	r2, #10
   d55a2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d55a4:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d55a6:	4650      	mov	r0, sl
   d55a8:	f7ff ff52 	bl	d5450 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d55ac:	4404      	add	r4, r0
    remainder -= toPrint;
   d55ae:	4640      	mov	r0, r8
   d55b0:	f000 fccc 	bl	d5f4c <__aeabi_i2d>
   d55b4:	4602      	mov	r2, r0
   d55b6:	460b      	mov	r3, r1
   d55b8:	4630      	mov	r0, r6
   d55ba:	4639      	mov	r1, r7
   d55bc:	f000 fb78 	bl	d5cb0 <__aeabi_dsub>
   d55c0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d55c2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d55c6:	4606      	mov	r6, r0
   d55c8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d55ca:	d1df      	bne.n	d558c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d55cc:	4620      	mov	r0, r4
   d55ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d55d2:	bf00      	nop
   d55d4:	000d6d08 	.word	0x000d6d08
   d55d8:	7fefffff 	.word	0x7fefffff
   d55dc:	000d6d12 	.word	0x000d6d12
   d55e0:	41efffff 	.word	0x41efffff
   d55e4:	000d6d0c 	.word	0x000d6d0c
   d55e8:	c1efffff 	.word	0xc1efffff
   d55ec:	3fe00000 	.word	0x3fe00000
   d55f0:	40240000 	.word	0x40240000
   d55f4:	000d6d10 	.word	0x000d6d10

000d55f8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d55f8:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d55fa:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d55fc:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d55fe:	f7ff ff49 	bl	d5494 <_ZN5Print10printFloatEdh>
   d5602:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5604:	4628      	mov	r0, r5
   d5606:	f7ff fee8 	bl	d53da <_ZN5Print7printlnEv>
  return n;
}
   d560a:	4420      	add	r0, r4
   d560c:	bd38      	pop	{r3, r4, r5, pc}

000d560e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d560e:	4770      	bx	lr

000d5610 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5610:	7441      	strb	r1, [r0, #17]
   d5612:	4770      	bx	lr

000d5614 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5614:	7c00      	ldrb	r0, [r0, #16]
   d5616:	f7fe bf53 	b.w	d44c0 <HAL_USART_Available_Data_For_Write>

000d561a <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d561a:	7c00      	ldrb	r0, [r0, #16]
   d561c:	f7fe bf30 	b.w	d4480 <HAL_USART_Available_Data>

000d5620 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5620:	7c00      	ldrb	r0, [r0, #16]
   d5622:	f7fe bf3d 	b.w	d44a0 <HAL_USART_Peek_Data>

000d5626 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5626:	7c00      	ldrb	r0, [r0, #16]
   d5628:	f7fe bf32 	b.w	d4490 <HAL_USART_Read_Data>

000d562c <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d562c:	7c00      	ldrb	r0, [r0, #16]
   d562e:	f7fe bf3f 	b.w	d44b0 <HAL_USART_Flush_Data>

000d5632 <_ZN11USARTSerialD0Ev>:
   d5632:	b510      	push	{r4, lr}
   d5634:	4604      	mov	r4, r0
   d5636:	f7fe fd30 	bl	d409a <_ZdlPv>
   d563a:	4620      	mov	r0, r4
   d563c:	bd10      	pop	{r4, pc}

000d563e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d563e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5640:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5642:	4604      	mov	r4, r0
   d5644:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5646:	b925      	cbnz	r5, d5652 <_ZN11USARTSerial5writeEh+0x14>
   d5648:	7c00      	ldrb	r0, [r0, #16]
   d564a:	f7fe ff39 	bl	d44c0 <HAL_USART_Available_Data_For_Write>
   d564e:	2800      	cmp	r0, #0
   d5650:	dd05      	ble.n	d565e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5652:	4631      	mov	r1, r6
   d5654:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d565a:	f7fe bf09 	b.w	d4470 <HAL_USART_Write_Data>
  }
  return 0;
}
   d565e:	4628      	mov	r0, r5
   d5660:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5664:	b510      	push	{r4, lr}
   d5666:	4604      	mov	r4, r0
   d5668:	4608      	mov	r0, r1
   d566a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d566c:	2200      	movs	r2, #0
   d566e:	6062      	str	r2, [r4, #4]
   d5670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5674:	60a2      	str	r2, [r4, #8]
   d5676:	4a05      	ldr	r2, [pc, #20]	; (d568c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5678:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d567a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d567c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d567e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5680:	461a      	mov	r2, r3
   d5682:	f7fe feed 	bl	d4460 <HAL_USART_Init>
}
   d5686:	4620      	mov	r0, r4
   d5688:	bd10      	pop	{r4, pc}
   d568a:	bf00      	nop
   d568c:	000d6d20 	.word	0x000d6d20

000d5690 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5690:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5692:	4d0c      	ldr	r5, [pc, #48]	; (d56c4 <_Z22__fetch_global_Serial1v+0x34>)
   d5694:	6829      	ldr	r1, [r5, #0]
   d5696:	f011 0401 	ands.w	r4, r1, #1
   d569a:	d111      	bne.n	d56c0 <_Z22__fetch_global_Serial1v+0x30>
   d569c:	4628      	mov	r0, r5
   d569e:	f7fe fd00 	bl	d40a2 <__cxa_guard_acquire>
   d56a2:	b168      	cbz	r0, d56c0 <_Z22__fetch_global_Serial1v+0x30>
   d56a4:	4a08      	ldr	r2, [pc, #32]	; (d56c8 <_Z22__fetch_global_Serial1v+0x38>)
   d56a6:	4b09      	ldr	r3, [pc, #36]	; (d56cc <_Z22__fetch_global_Serial1v+0x3c>)
   d56a8:	4809      	ldr	r0, [pc, #36]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56aa:	4621      	mov	r1, r4
   d56ac:	f7ff ffda 	bl	d5664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d56b0:	4628      	mov	r0, r5
   d56b2:	f7fe fcfb 	bl	d40ac <__cxa_guard_release>
   d56b6:	4a07      	ldr	r2, [pc, #28]	; (d56d4 <_Z22__fetch_global_Serial1v+0x44>)
   d56b8:	4907      	ldr	r1, [pc, #28]	; (d56d8 <_Z22__fetch_global_Serial1v+0x48>)
   d56ba:	4805      	ldr	r0, [pc, #20]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56bc:	f000 f9a4 	bl	d5a08 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d56c0:	4803      	ldr	r0, [pc, #12]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56c2:	bd38      	pop	{r3, r4, r5, pc}
   d56c4:	2003e680 	.word	0x2003e680
   d56c8:	2003e684 	.word	0x2003e684
   d56cc:	2003e5fc 	.word	0x2003e5fc
   d56d0:	2003e5e8 	.word	0x2003e5e8
   d56d4:	2003e3c0 	.word	0x2003e3c0
   d56d8:	000d560f 	.word	0x000d560f

000d56dc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d56dc:	b510      	push	{r4, lr}
   d56de:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d56e0:	f001 f9a7 	bl	d6a32 <strlen>
   d56e4:	3801      	subs	r0, #1
   d56e6:	1823      	adds	r3, r4, r0
   d56e8:	4620      	mov	r0, r4
	while(i<j){
   d56ea:	4298      	cmp	r0, r3
   d56ec:	d206      	bcs.n	d56fc <_Z11str_reversePc+0x20>
		c = *i;
   d56ee:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d56f0:	7819      	ldrb	r1, [r3, #0]
   d56f2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d56f6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d56fa:	e7f6      	b.n	d56ea <_Z11str_reversePc+0xe>
   d56fc:	bd10      	pop	{r4, pc}

000d56fe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d56fe:	b570      	push	{r4, r5, r6, lr}
   d5700:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5702:	1e91      	subs	r1, r2, #2
   d5704:	2922      	cmp	r1, #34	; 0x22
   d5706:	d820      	bhi.n	d574a <ultoa+0x4c>
   d5708:	4625      	mov	r5, r4
   d570a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d570c:	b910      	cbnz	r0, d5714 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d570e:	4423      	add	r3, r4
            *ptr++ = '0';
   d5710:	2230      	movs	r2, #48	; 0x30
   d5712:	e00e      	b.n	d5732 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5714:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5718:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d571c:	b2c1      	uxtb	r1, r0
   d571e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5722:	2809      	cmp	r0, #9
                *ptr += '0';
   d5724:	bf94      	ite	ls
   d5726:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5728:	3157      	addhi	r1, #87	; 0x57
   d572a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d572e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5730:	e7eb      	b.n	d570a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5732:	4299      	cmp	r1, r3
   d5734:	d202      	bcs.n	d573c <ultoa+0x3e>
            *ptr++ = '0';
   d5736:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d573a:	e7fa      	b.n	d5732 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d573c:	2300      	movs	r3, #0
	str_reverse(buffer);
   d573e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5740:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5742:	f7ff ffcb 	bl	d56dc <_Z11str_reversePc>
	return buffer;
   d5746:	4620      	mov	r0, r4
   d5748:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d574a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d574c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5750 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5750:	4b04      	ldr	r3, [pc, #16]	; (d5764 <_GLOBAL__sub_I_System+0x14>)
   d5752:	2000      	movs	r0, #0
   d5754:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5758:	7018      	strb	r0, [r3, #0]
   d575a:	8058      	strh	r0, [r3, #2]
   d575c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d575e:	f7fe bf7f 	b.w	d4660 <set_system_mode>
   d5762:	bf00      	nop
   d5764:	2003e708 	.word	0x2003e708

000d5768 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5768:	2200      	movs	r2, #0
   d576a:	4611      	mov	r1, r2
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	f7fe bf5f 	b.w	d4630 <network_listening>

000d5772 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5772:	2200      	movs	r2, #0
   d5774:	4611      	mov	r1, r2
   d5776:	6840      	ldr	r0, [r0, #4]
   d5778:	f7fe bf6a 	b.w	d4650 <network_get_listen_timeout>

000d577c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d577c:	2200      	movs	r2, #0
   d577e:	6840      	ldr	r0, [r0, #4]
   d5780:	f7fe bf5e 	b.w	d4640 <network_set_listen_timeout>

000d5784 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5784:	2200      	movs	r2, #0
   d5786:	f081 0101 	eor.w	r1, r1, #1
   d578a:	6840      	ldr	r0, [r0, #4]
   d578c:	f7fe bf48 	b.w	d4620 <network_listen>

000d5790 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5790:	2300      	movs	r3, #0
   d5792:	461a      	mov	r2, r3
   d5794:	4619      	mov	r1, r3
   d5796:	6840      	ldr	r0, [r0, #4]
   d5798:	f7fe bf3a 	b.w	d4610 <network_off>

000d579c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d579c:	2300      	movs	r3, #0
   d579e:	461a      	mov	r2, r3
   d57a0:	4619      	mov	r1, r3
   d57a2:	6840      	ldr	r0, [r0, #4]
   d57a4:	f7fe bf2c 	b.w	d4600 <network_on>

000d57a8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d57a8:	2200      	movs	r2, #0
   d57aa:	4611      	mov	r1, r2
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	f7fe bf1f 	b.w	d45f0 <network_ready>

000d57b2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57b2:	2200      	movs	r2, #0
   d57b4:	4611      	mov	r1, r2
   d57b6:	6840      	ldr	r0, [r0, #4]
   d57b8:	f7fe bf0a 	b.w	d45d0 <network_connecting>

000d57bc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57bc:	2200      	movs	r2, #0
   d57be:	2102      	movs	r1, #2
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7fe bf0d 	b.w	d45e0 <network_disconnect>

000d57c6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57c6:	2300      	movs	r3, #0
   d57c8:	461a      	mov	r2, r3
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	f7fe bef8 	b.w	d45c0 <network_connect>

000d57d0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d57d0:	4b02      	ldr	r3, [pc, #8]	; (d57dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d57d2:	2203      	movs	r2, #3
   d57d4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d57d6:	4a02      	ldr	r2, [pc, #8]	; (d57e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d57d8:	601a      	str	r2, [r3, #0]
   d57da:	4770      	bx	lr
   d57dc:	2003e710 	.word	0x2003e710
   d57e0:	000d6d50 	.word	0x000d6d50

000d57e4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d57e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57e8:	ec59 8b10 	vmov	r8, r9, d0
   d57ec:	4607      	mov	r7, r0
   d57ee:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d57f0:	2200      	movs	r2, #0
   d57f2:	2300      	movs	r3, #0
   d57f4:	ee10 0a10 	vmov	r0, s0
   d57f8:	4649      	mov	r1, r9
   d57fa:	f000 fe7f 	bl	d64fc <__aeabi_dcmplt>
   d57fe:	b128      	cbz	r0, d580c <_Z4dtoadhPc+0x28>
        val = -val;
   d5800:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5804:	4699      	mov	r9, r3
        *sout++ = '-';
   d5806:	232d      	movs	r3, #45	; 0x2d
   d5808:	7033      	strb	r3, [r6, #0]
   d580a:	3601      	adds	r6, #1
   d580c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d580e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5810:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5812:	b2d9      	uxtb	r1, r3
   d5814:	428f      	cmp	r7, r1
   d5816:	d902      	bls.n	d581e <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5818:	4354      	muls	r4, r2
   d581a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d581c:	e7f9      	b.n	d5812 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d581e:	4620      	mov	r0, r4
   d5820:	f000 fb94 	bl	d5f4c <__aeabi_i2d>
   d5824:	4642      	mov	r2, r8
   d5826:	464b      	mov	r3, r9
   d5828:	f000 fbf6 	bl	d6018 <__aeabi_dmul>
   d582c:	4682      	mov	sl, r0
   d582e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5830:	f000 ff02 	bl	d6638 <__aeabi_d2ulz>
   d5834:	4680      	mov	r8, r0
   d5836:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5838:	f000 fbb8 	bl	d5fac <__aeabi_ul2d>
   d583c:	4602      	mov	r2, r0
   d583e:	460b      	mov	r3, r1
   d5840:	4650      	mov	r0, sl
   d5842:	4659      	mov	r1, fp
   d5844:	f000 fa34 	bl	d5cb0 <__aeabi_dsub>
   d5848:	2200      	movs	r2, #0
   d584a:	4b17      	ldr	r3, [pc, #92]	; (d58a8 <_Z4dtoadhPc+0xc4>)
   d584c:	f000 fe6a 	bl	d6524 <__aeabi_dcmpge>
   d5850:	b118      	cbz	r0, d585a <_Z4dtoadhPc+0x76>
        fixed++;
   d5852:	f118 0801 	adds.w	r8, r8, #1
   d5856:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d585a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d585c:	4622      	mov	r2, r4
   d585e:	462b      	mov	r3, r5
   d5860:	4640      	mov	r0, r8
   d5862:	4649      	mov	r1, r9
   d5864:	f000 fed0 	bl	d6608 <__aeabi_uldivmod>
   d5868:	2301      	movs	r3, #1
   d586a:	220a      	movs	r2, #10
   d586c:	4631      	mov	r1, r6
   d586e:	f7ff ff46 	bl	d56fe <ultoa>
    if (prec) {
   d5872:	b1af      	cbz	r7, d58a0 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5874:	4630      	mov	r0, r6
   d5876:	f001 f8dc 	bl	d6a32 <strlen>
        *sout++ = '.';
   d587a:	232e      	movs	r3, #46	; 0x2e
   d587c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d587e:	3001      	adds	r0, #1
   d5880:	4406      	add	r6, r0
   d5882:	4622      	mov	r2, r4
   d5884:	462b      	mov	r3, r5
   d5886:	4640      	mov	r0, r8
   d5888:	4649      	mov	r1, r9
   d588a:	f000 febd 	bl	d6608 <__aeabi_uldivmod>
   d588e:	463b      	mov	r3, r7
   d5890:	4610      	mov	r0, r2
   d5892:	4631      	mov	r1, r6
   d5894:	220a      	movs	r2, #10
    }
}
   d5896:	b001      	add	sp, #4
   d5898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d589c:	f7ff bf2f 	b.w	d56fe <ultoa>
    }
}
   d58a0:	b001      	add	sp, #4
   d58a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58a6:	bf00      	nop
   d58a8:	3fe00000 	.word	0x3fe00000

000d58ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58ac:	b510      	push	{r4, lr}
   d58ae:	4604      	mov	r4, r0
{
	free(buffer);
   d58b0:	6800      	ldr	r0, [r0, #0]
   d58b2:	f7fe ff11 	bl	d46d8 <free>
}
   d58b6:	4620      	mov	r0, r4
   d58b8:	bd10      	pop	{r4, pc}

000d58ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58ba:	b510      	push	{r4, lr}
   d58bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58be:	6800      	ldr	r0, [r0, #0]
   d58c0:	b108      	cbz	r0, d58c6 <_ZN6String10invalidateEv+0xc>
   d58c2:	f7fe ff09 	bl	d46d8 <free>
	buffer = NULL;
   d58c6:	2300      	movs	r3, #0
   d58c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d58ca:	60a3      	str	r3, [r4, #8]
   d58cc:	6063      	str	r3, [r4, #4]
   d58ce:	bd10      	pop	{r4, pc}

000d58d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d58d0:	b538      	push	{r3, r4, r5, lr}
   d58d2:	4604      	mov	r4, r0
   d58d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d58d6:	6800      	ldr	r0, [r0, #0]
   d58d8:	3101      	adds	r1, #1
   d58da:	f7fe ff05 	bl	d46e8 <realloc>
	if (newbuffer) {
   d58de:	b110      	cbz	r0, d58e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d58e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d58e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d58e6:	bd38      	pop	{r3, r4, r5, pc}

000d58e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d58ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d58ee:	b113      	cbz	r3, d58f6 <_ZN6String7reserveEj+0xe>
   d58f0:	6843      	ldr	r3, [r0, #4]
   d58f2:	428b      	cmp	r3, r1
   d58f4:	d207      	bcs.n	d5906 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d58f6:	4620      	mov	r0, r4
   d58f8:	f7ff ffea 	bl	d58d0 <_ZN6String12changeBufferEj>
   d58fc:	b120      	cbz	r0, d5908 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d58fe:	68a3      	ldr	r3, [r4, #8]
   d5900:	b90b      	cbnz	r3, d5906 <_ZN6String7reserveEj+0x1e>
   d5902:	6822      	ldr	r2, [r4, #0]
   d5904:	7013      	strb	r3, [r2, #0]
   d5906:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5908:	bd10      	pop	{r4, pc}

000d590a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d590a:	b570      	push	{r4, r5, r6, lr}
   d590c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d590e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5910:	4604      	mov	r4, r0
   d5912:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5914:	f7ff ffe8 	bl	d58e8 <_ZN6String7reserveEj>
   d5918:	b918      	cbnz	r0, d5922 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d591a:	4620      	mov	r0, r4
   d591c:	f7ff ffcd 	bl	d58ba <_ZN6String10invalidateEv>
		return *this;
   d5920:	e009      	b.n	d5936 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5922:	462a      	mov	r2, r5
   d5924:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5926:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5928:	6820      	ldr	r0, [r4, #0]
   d592a:	f001 f82b 	bl	d6984 <memcpy>
	buffer[len] = 0;
   d592e:	6822      	ldr	r2, [r4, #0]
   d5930:	68a3      	ldr	r3, [r4, #8]
   d5932:	2100      	movs	r1, #0
   d5934:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5936:	4620      	mov	r0, r4
   d5938:	bd70      	pop	{r4, r5, r6, pc}

000d593a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d593a:	b538      	push	{r3, r4, r5, lr}
   d593c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d593e:	460c      	mov	r4, r1
   d5940:	b141      	cbz	r1, d5954 <_ZN6StringaSEPKc+0x1a>
   d5942:	4608      	mov	r0, r1
   d5944:	f001 f875 	bl	d6a32 <strlen>
   d5948:	4621      	mov	r1, r4
   d594a:	4602      	mov	r2, r0
   d594c:	4628      	mov	r0, r5
   d594e:	f7ff ffdc 	bl	d590a <_ZN6String4copyEPKcj>
   d5952:	e001      	b.n	d5958 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5954:	f7ff ffb1 	bl	d58ba <_ZN6String10invalidateEv>

	return *this;
}
   d5958:	4628      	mov	r0, r5
   d595a:	bd38      	pop	{r3, r4, r5, pc}

000d595c <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d595c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d595e:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5960:	b08a      	sub	sp, #40	; 0x28
   d5962:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5964:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5966:	6043      	str	r3, [r0, #4]
	len = 0;
   d5968:	6083      	str	r3, [r0, #8]
	flags = 0;
   d596a:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d596c:	b2c8      	uxtb	r0, r1
   d596e:	a901      	add	r1, sp, #4
   d5970:	f7ff ff38 	bl	d57e4 <_Z4dtoadhPc>
        *this = buf;
   d5974:	a901      	add	r1, sp, #4
   d5976:	4620      	mov	r0, r4
   d5978:	f7ff ffdf 	bl	d593a <_ZN6StringaSEPKc>
}
   d597c:	4620      	mov	r0, r4
   d597e:	b00a      	add	sp, #40	; 0x28
   d5980:	bd10      	pop	{r4, pc}
	...

000d5984 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5984:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5986:	4d0b      	ldr	r5, [pc, #44]	; (d59b4 <_Z19__fetch_global_Wirev+0x30>)
   d5988:	6829      	ldr	r1, [r5, #0]
   d598a:	f011 0401 	ands.w	r4, r1, #1
   d598e:	d10f      	bne.n	d59b0 <_Z19__fetch_global_Wirev+0x2c>
   d5990:	4628      	mov	r0, r5
   d5992:	f7fe fb86 	bl	d40a2 <__cxa_guard_acquire>
   d5996:	b158      	cbz	r0, d59b0 <_Z19__fetch_global_Wirev+0x2c>
   d5998:	4621      	mov	r1, r4
   d599a:	4807      	ldr	r0, [pc, #28]	; (d59b8 <_Z19__fetch_global_Wirev+0x34>)
   d599c:	f7ff f8a4 	bl	d4ae8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59a0:	4628      	mov	r0, r5
   d59a2:	f7fe fb83 	bl	d40ac <__cxa_guard_release>
   d59a6:	4a05      	ldr	r2, [pc, #20]	; (d59bc <_Z19__fetch_global_Wirev+0x38>)
   d59a8:	4905      	ldr	r1, [pc, #20]	; (d59c0 <_Z19__fetch_global_Wirev+0x3c>)
   d59aa:	4803      	ldr	r0, [pc, #12]	; (d59b8 <_Z19__fetch_global_Wirev+0x34>)
   d59ac:	f000 f82c 	bl	d5a08 <__aeabi_atexit>
	return wire;
}
   d59b0:	4801      	ldr	r0, [pc, #4]	; (d59b8 <_Z19__fetch_global_Wirev+0x34>)
   d59b2:	bd38      	pop	{r3, r4, r5, pc}
   d59b4:	2003e718 	.word	0x2003e718
   d59b8:	2003e71c 	.word	0x2003e71c
   d59bc:	2003e3c0 	.word	0x2003e3c0
   d59c0:	000d4a93 	.word	0x000d4a93

000d59c4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d59c4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d59c6:	4c0c      	ldr	r4, [pc, #48]	; (d59f8 <_GLOBAL__sub_I_SPI+0x34>)
   d59c8:	4e0c      	ldr	r6, [pc, #48]	; (d59fc <_GLOBAL__sub_I_SPI+0x38>)
   d59ca:	4d0d      	ldr	r5, [pc, #52]	; (d5a00 <_GLOBAL__sub_I_SPI+0x3c>)
   d59cc:	2100      	movs	r1, #0
   d59ce:	4620      	mov	r0, r4
   d59d0:	f7ff f838 	bl	d4a44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d59d4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d59d6:	4c0b      	ldr	r4, [pc, #44]	; (d5a04 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d59d8:	4632      	mov	r2, r6
   d59da:	4629      	mov	r1, r5
   d59dc:	f000 f814 	bl	d5a08 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d59e0:	2101      	movs	r1, #1
   d59e2:	4620      	mov	r0, r4
   d59e4:	f7ff f82e 	bl	d4a44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d59e8:	4632      	mov	r2, r6
   d59ea:	4629      	mov	r1, r5
   d59ec:	4620      	mov	r0, r4
   d59ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d59f2:	f000 b809 	b.w	d5a08 <__aeabi_atexit>
   d59f6:	bf00      	nop
   d59f8:	2003e734 	.word	0x2003e734
   d59fc:	2003e3c0 	.word	0x2003e3c0
   d5a00:	000d4a35 	.word	0x000d4a35
   d5a04:	2003e744 	.word	0x2003e744

000d5a08 <__aeabi_atexit>:
   d5a08:	460b      	mov	r3, r1
   d5a0a:	4601      	mov	r1, r0
   d5a0c:	4618      	mov	r0, r3
   d5a0e:	f000 bfab 	b.w	d6968 <__cxa_atexit>

000d5a12 <_ZSt25__throw_bad_function_callv>:
   d5a12:	b508      	push	{r3, lr}
   d5a14:	f7fe fe70 	bl	d46f8 <abort>

000d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a18:	4b18      	ldr	r3, [pc, #96]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a1a:	681a      	ldr	r2, [r3, #0]
   d5a1c:	07d1      	lsls	r1, r2, #31
   d5a1e:	bf5c      	itt	pl
   d5a20:	2201      	movpl	r2, #1
   d5a22:	601a      	strpl	r2, [r3, #0]
   d5a24:	4b16      	ldr	r3, [pc, #88]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a26:	681a      	ldr	r2, [r3, #0]
   d5a28:	07d2      	lsls	r2, r2, #31
   d5a2a:	bf5c      	itt	pl
   d5a2c:	2201      	movpl	r2, #1
   d5a2e:	601a      	strpl	r2, [r3, #0]
   d5a30:	4b14      	ldr	r3, [pc, #80]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d0      	lsls	r0, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b12      	ldr	r3, [pc, #72]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d1      	lsls	r1, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b10      	ldr	r3, [pc, #64]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d2      	lsls	r2, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b0e      	ldr	r3, [pc, #56]	; (d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d0      	lsls	r0, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b0c      	ldr	r3, [pc, #48]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d1      	lsls	r1, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b0a      	ldr	r3, [pc, #40]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d2      	lsls	r2, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4770      	bx	lr
   d5a7a:	bf00      	nop
   d5a7c:	2003e770 	.word	0x2003e770
   d5a80:	2003e76c 	.word	0x2003e76c
   d5a84:	2003e768 	.word	0x2003e768
   d5a88:	2003e764 	.word	0x2003e764
   d5a8c:	2003e760 	.word	0x2003e760
   d5a90:	2003e75c 	.word	0x2003e75c
   d5a94:	2003e758 	.word	0x2003e758
   d5a98:	2003e754 	.word	0x2003e754

000d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5a9c:	4b24      	ldr	r3, [pc, #144]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d0      	lsls	r0, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b22      	ldr	r3, [pc, #136]	; (d5b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d1      	lsls	r1, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b20      	ldr	r3, [pc, #128]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d2      	lsls	r2, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b1e      	ldr	r3, [pc, #120]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d0      	lsls	r0, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b1c      	ldr	r3, [pc, #112]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d1      	lsls	r1, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b1a      	ldr	r3, [pc, #104]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d2      	lsls	r2, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b18      	ldr	r3, [pc, #96]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d0      	lsls	r0, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b16      	ldr	r3, [pc, #88]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d1      	lsls	r1, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b14      	ldr	r3, [pc, #80]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d2      	lsls	r2, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b12      	ldr	r3, [pc, #72]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d0      	lsls	r0, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b10      	ldr	r3, [pc, #64]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d1      	lsls	r1, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b0e      	ldr	r3, [pc, #56]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d2      	lsls	r2, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4770      	bx	lr
   d5b2e:	bf00      	nop
   d5b30:	2003e7a0 	.word	0x2003e7a0
   d5b34:	2003e79c 	.word	0x2003e79c
   d5b38:	2003e798 	.word	0x2003e798
   d5b3c:	2003e794 	.word	0x2003e794
   d5b40:	2003e790 	.word	0x2003e790
   d5b44:	2003e78c 	.word	0x2003e78c
   d5b48:	2003e788 	.word	0x2003e788
   d5b4c:	2003e784 	.word	0x2003e784
   d5b50:	2003e780 	.word	0x2003e780
   d5b54:	2003e77c 	.word	0x2003e77c
   d5b58:	2003e778 	.word	0x2003e778
   d5b5c:	2003e774 	.word	0x2003e774

000d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b60:	4b24      	ldr	r3, [pc, #144]	; (d5bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d0      	lsls	r0, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4b22      	ldr	r3, [pc, #136]	; (d5bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b6e:	681a      	ldr	r2, [r3, #0]
   d5b70:	07d1      	lsls	r1, r2, #31
   d5b72:	bf5c      	itt	pl
   d5b74:	2201      	movpl	r2, #1
   d5b76:	601a      	strpl	r2, [r3, #0]
   d5b78:	4b20      	ldr	r3, [pc, #128]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d2      	lsls	r2, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b1e      	ldr	r3, [pc, #120]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d0      	lsls	r0, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b1c      	ldr	r3, [pc, #112]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d1      	lsls	r1, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b1a      	ldr	r3, [pc, #104]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d2      	lsls	r2, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b18      	ldr	r3, [pc, #96]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d0      	lsls	r0, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b16      	ldr	r3, [pc, #88]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d1      	lsls	r1, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b14      	ldr	r3, [pc, #80]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d2      	lsls	r2, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b12      	ldr	r3, [pc, #72]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d0      	lsls	r0, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b10      	ldr	r3, [pc, #64]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d1      	lsls	r1, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b0e      	ldr	r3, [pc, #56]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d2      	lsls	r2, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4770      	bx	lr
   d5bf2:	bf00      	nop
   d5bf4:	2003e7d0 	.word	0x2003e7d0
   d5bf8:	2003e7cc 	.word	0x2003e7cc
   d5bfc:	2003e7c8 	.word	0x2003e7c8
   d5c00:	2003e7c4 	.word	0x2003e7c4
   d5c04:	2003e7c0 	.word	0x2003e7c0
   d5c08:	2003e7bc 	.word	0x2003e7bc
   d5c0c:	2003e7b8 	.word	0x2003e7b8
   d5c10:	2003e7b4 	.word	0x2003e7b4
   d5c14:	2003e7b0 	.word	0x2003e7b0
   d5c18:	2003e7ac 	.word	0x2003e7ac
   d5c1c:	2003e7a8 	.word	0x2003e7a8
   d5c20:	2003e7a4 	.word	0x2003e7a4

000d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c24:	4b18      	ldr	r3, [pc, #96]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c26:	681a      	ldr	r2, [r3, #0]
   d5c28:	07d1      	lsls	r1, r2, #31
   d5c2a:	bf5c      	itt	pl
   d5c2c:	2201      	movpl	r2, #1
   d5c2e:	601a      	strpl	r2, [r3, #0]
   d5c30:	4b16      	ldr	r3, [pc, #88]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c32:	681a      	ldr	r2, [r3, #0]
   d5c34:	07d2      	lsls	r2, r2, #31
   d5c36:	bf5c      	itt	pl
   d5c38:	2201      	movpl	r2, #1
   d5c3a:	601a      	strpl	r2, [r3, #0]
   d5c3c:	4b14      	ldr	r3, [pc, #80]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	07d0      	lsls	r0, r2, #31
   d5c42:	bf5c      	itt	pl
   d5c44:	2201      	movpl	r2, #1
   d5c46:	601a      	strpl	r2, [r3, #0]
   d5c48:	4b12      	ldr	r3, [pc, #72]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d1      	lsls	r1, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b10      	ldr	r3, [pc, #64]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d2      	lsls	r2, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b0e      	ldr	r3, [pc, #56]	; (d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d0      	lsls	r0, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b0c      	ldr	r3, [pc, #48]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d1      	lsls	r1, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b0a      	ldr	r3, [pc, #40]	; (d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d2      	lsls	r2, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4770      	bx	lr
   d5c86:	bf00      	nop
   d5c88:	2003e7f0 	.word	0x2003e7f0
   d5c8c:	2003e7ec 	.word	0x2003e7ec
   d5c90:	2003e7e8 	.word	0x2003e7e8
   d5c94:	2003e7e4 	.word	0x2003e7e4
   d5c98:	2003e7e0 	.word	0x2003e7e0
   d5c9c:	2003e7dc 	.word	0x2003e7dc
   d5ca0:	2003e7d8 	.word	0x2003e7d8
   d5ca4:	2003e7d4 	.word	0x2003e7d4

000d5ca8 <__aeabi_drsub>:
   d5ca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5cac:	e002      	b.n	d5cb4 <__adddf3>
   d5cae:	bf00      	nop

000d5cb0 <__aeabi_dsub>:
   d5cb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5cb4 <__adddf3>:
   d5cb4:	b530      	push	{r4, r5, lr}
   d5cb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5cba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5cbe:	ea94 0f05 	teq	r4, r5
   d5cc2:	bf08      	it	eq
   d5cc4:	ea90 0f02 	teqeq	r0, r2
   d5cc8:	bf1f      	itttt	ne
   d5cca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5cce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5cd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5cd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5cda:	f000 80e2 	beq.w	d5ea2 <__adddf3+0x1ee>
   d5cde:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5ce2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5ce6:	bfb8      	it	lt
   d5ce8:	426d      	neglt	r5, r5
   d5cea:	dd0c      	ble.n	d5d06 <__adddf3+0x52>
   d5cec:	442c      	add	r4, r5
   d5cee:	ea80 0202 	eor.w	r2, r0, r2
   d5cf2:	ea81 0303 	eor.w	r3, r1, r3
   d5cf6:	ea82 0000 	eor.w	r0, r2, r0
   d5cfa:	ea83 0101 	eor.w	r1, r3, r1
   d5cfe:	ea80 0202 	eor.w	r2, r0, r2
   d5d02:	ea81 0303 	eor.w	r3, r1, r3
   d5d06:	2d36      	cmp	r5, #54	; 0x36
   d5d08:	bf88      	it	hi
   d5d0a:	bd30      	pophi	{r4, r5, pc}
   d5d0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d1c:	d002      	beq.n	d5d24 <__adddf3+0x70>
   d5d1e:	4240      	negs	r0, r0
   d5d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5d30:	d002      	beq.n	d5d38 <__adddf3+0x84>
   d5d32:	4252      	negs	r2, r2
   d5d34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5d38:	ea94 0f05 	teq	r4, r5
   d5d3c:	f000 80a7 	beq.w	d5e8e <__adddf3+0x1da>
   d5d40:	f1a4 0401 	sub.w	r4, r4, #1
   d5d44:	f1d5 0e20 	rsbs	lr, r5, #32
   d5d48:	db0d      	blt.n	d5d66 <__adddf3+0xb2>
   d5d4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5d4e:	fa22 f205 	lsr.w	r2, r2, r5
   d5d52:	1880      	adds	r0, r0, r2
   d5d54:	f141 0100 	adc.w	r1, r1, #0
   d5d58:	fa03 f20e 	lsl.w	r2, r3, lr
   d5d5c:	1880      	adds	r0, r0, r2
   d5d5e:	fa43 f305 	asr.w	r3, r3, r5
   d5d62:	4159      	adcs	r1, r3
   d5d64:	e00e      	b.n	d5d84 <__adddf3+0xd0>
   d5d66:	f1a5 0520 	sub.w	r5, r5, #32
   d5d6a:	f10e 0e20 	add.w	lr, lr, #32
   d5d6e:	2a01      	cmp	r2, #1
   d5d70:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5d74:	bf28      	it	cs
   d5d76:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5d7a:	fa43 f305 	asr.w	r3, r3, r5
   d5d7e:	18c0      	adds	r0, r0, r3
   d5d80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5d84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d88:	d507      	bpl.n	d5d9a <__adddf3+0xe6>
   d5d8a:	f04f 0e00 	mov.w	lr, #0
   d5d8e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5d92:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5d96:	eb6e 0101 	sbc.w	r1, lr, r1
   d5d9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d9e:	d31b      	bcc.n	d5dd8 <__adddf3+0x124>
   d5da0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5da4:	d30c      	bcc.n	d5dc0 <__adddf3+0x10c>
   d5da6:	0849      	lsrs	r1, r1, #1
   d5da8:	ea5f 0030 	movs.w	r0, r0, rrx
   d5dac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5db0:	f104 0401 	add.w	r4, r4, #1
   d5db4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5db8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5dbc:	f080 809a 	bcs.w	d5ef4 <__adddf3+0x240>
   d5dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5dc4:	bf08      	it	eq
   d5dc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5dca:	f150 0000 	adcs.w	r0, r0, #0
   d5dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5dd2:	ea41 0105 	orr.w	r1, r1, r5
   d5dd6:	bd30      	pop	{r4, r5, pc}
   d5dd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5ddc:	4140      	adcs	r0, r0
   d5dde:	eb41 0101 	adc.w	r1, r1, r1
   d5de2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5de6:	f1a4 0401 	sub.w	r4, r4, #1
   d5dea:	d1e9      	bne.n	d5dc0 <__adddf3+0x10c>
   d5dec:	f091 0f00 	teq	r1, #0
   d5df0:	bf04      	itt	eq
   d5df2:	4601      	moveq	r1, r0
   d5df4:	2000      	moveq	r0, #0
   d5df6:	fab1 f381 	clz	r3, r1
   d5dfa:	bf08      	it	eq
   d5dfc:	3320      	addeq	r3, #32
   d5dfe:	f1a3 030b 	sub.w	r3, r3, #11
   d5e02:	f1b3 0220 	subs.w	r2, r3, #32
   d5e06:	da0c      	bge.n	d5e22 <__adddf3+0x16e>
   d5e08:	320c      	adds	r2, #12
   d5e0a:	dd08      	ble.n	d5e1e <__adddf3+0x16a>
   d5e0c:	f102 0c14 	add.w	ip, r2, #20
   d5e10:	f1c2 020c 	rsb	r2, r2, #12
   d5e14:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e18:	fa21 f102 	lsr.w	r1, r1, r2
   d5e1c:	e00c      	b.n	d5e38 <__adddf3+0x184>
   d5e1e:	f102 0214 	add.w	r2, r2, #20
   d5e22:	bfd8      	it	le
   d5e24:	f1c2 0c20 	rsble	ip, r2, #32
   d5e28:	fa01 f102 	lsl.w	r1, r1, r2
   d5e2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5e30:	bfdc      	itt	le
   d5e32:	ea41 010c 	orrle.w	r1, r1, ip
   d5e36:	4090      	lslle	r0, r2
   d5e38:	1ae4      	subs	r4, r4, r3
   d5e3a:	bfa2      	ittt	ge
   d5e3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5e40:	4329      	orrge	r1, r5
   d5e42:	bd30      	popge	{r4, r5, pc}
   d5e44:	ea6f 0404 	mvn.w	r4, r4
   d5e48:	3c1f      	subs	r4, #31
   d5e4a:	da1c      	bge.n	d5e86 <__adddf3+0x1d2>
   d5e4c:	340c      	adds	r4, #12
   d5e4e:	dc0e      	bgt.n	d5e6e <__adddf3+0x1ba>
   d5e50:	f104 0414 	add.w	r4, r4, #20
   d5e54:	f1c4 0220 	rsb	r2, r4, #32
   d5e58:	fa20 f004 	lsr.w	r0, r0, r4
   d5e5c:	fa01 f302 	lsl.w	r3, r1, r2
   d5e60:	ea40 0003 	orr.w	r0, r0, r3
   d5e64:	fa21 f304 	lsr.w	r3, r1, r4
   d5e68:	ea45 0103 	orr.w	r1, r5, r3
   d5e6c:	bd30      	pop	{r4, r5, pc}
   d5e6e:	f1c4 040c 	rsb	r4, r4, #12
   d5e72:	f1c4 0220 	rsb	r2, r4, #32
   d5e76:	fa20 f002 	lsr.w	r0, r0, r2
   d5e7a:	fa01 f304 	lsl.w	r3, r1, r4
   d5e7e:	ea40 0003 	orr.w	r0, r0, r3
   d5e82:	4629      	mov	r1, r5
   d5e84:	bd30      	pop	{r4, r5, pc}
   d5e86:	fa21 f004 	lsr.w	r0, r1, r4
   d5e8a:	4629      	mov	r1, r5
   d5e8c:	bd30      	pop	{r4, r5, pc}
   d5e8e:	f094 0f00 	teq	r4, #0
   d5e92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5e96:	bf06      	itte	eq
   d5e98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5e9c:	3401      	addeq	r4, #1
   d5e9e:	3d01      	subne	r5, #1
   d5ea0:	e74e      	b.n	d5d40 <__adddf3+0x8c>
   d5ea2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ea6:	bf18      	it	ne
   d5ea8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5eac:	d029      	beq.n	d5f02 <__adddf3+0x24e>
   d5eae:	ea94 0f05 	teq	r4, r5
   d5eb2:	bf08      	it	eq
   d5eb4:	ea90 0f02 	teqeq	r0, r2
   d5eb8:	d005      	beq.n	d5ec6 <__adddf3+0x212>
   d5eba:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ebe:	bf04      	itt	eq
   d5ec0:	4619      	moveq	r1, r3
   d5ec2:	4610      	moveq	r0, r2
   d5ec4:	bd30      	pop	{r4, r5, pc}
   d5ec6:	ea91 0f03 	teq	r1, r3
   d5eca:	bf1e      	ittt	ne
   d5ecc:	2100      	movne	r1, #0
   d5ece:	2000      	movne	r0, #0
   d5ed0:	bd30      	popne	{r4, r5, pc}
   d5ed2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5ed6:	d105      	bne.n	d5ee4 <__adddf3+0x230>
   d5ed8:	0040      	lsls	r0, r0, #1
   d5eda:	4149      	adcs	r1, r1
   d5edc:	bf28      	it	cs
   d5ede:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5ee2:	bd30      	pop	{r4, r5, pc}
   d5ee4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5ee8:	bf3c      	itt	cc
   d5eea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5eee:	bd30      	popcc	{r4, r5, pc}
   d5ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ef4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5ef8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5efc:	f04f 0000 	mov.w	r0, #0
   d5f00:	bd30      	pop	{r4, r5, pc}
   d5f02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f06:	bf1a      	itte	ne
   d5f08:	4619      	movne	r1, r3
   d5f0a:	4610      	movne	r0, r2
   d5f0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f10:	bf1c      	itt	ne
   d5f12:	460b      	movne	r3, r1
   d5f14:	4602      	movne	r2, r0
   d5f16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f1a:	bf06      	itte	eq
   d5f1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f20:	ea91 0f03 	teqeq	r1, r3
   d5f24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f28:	bd30      	pop	{r4, r5, pc}
   d5f2a:	bf00      	nop

000d5f2c <__aeabi_ui2d>:
   d5f2c:	f090 0f00 	teq	r0, #0
   d5f30:	bf04      	itt	eq
   d5f32:	2100      	moveq	r1, #0
   d5f34:	4770      	bxeq	lr
   d5f36:	b530      	push	{r4, r5, lr}
   d5f38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f40:	f04f 0500 	mov.w	r5, #0
   d5f44:	f04f 0100 	mov.w	r1, #0
   d5f48:	e750      	b.n	d5dec <__adddf3+0x138>
   d5f4a:	bf00      	nop

000d5f4c <__aeabi_i2d>:
   d5f4c:	f090 0f00 	teq	r0, #0
   d5f50:	bf04      	itt	eq
   d5f52:	2100      	moveq	r1, #0
   d5f54:	4770      	bxeq	lr
   d5f56:	b530      	push	{r4, r5, lr}
   d5f58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5f64:	bf48      	it	mi
   d5f66:	4240      	negmi	r0, r0
   d5f68:	f04f 0100 	mov.w	r1, #0
   d5f6c:	e73e      	b.n	d5dec <__adddf3+0x138>
   d5f6e:	bf00      	nop

000d5f70 <__aeabi_f2d>:
   d5f70:	0042      	lsls	r2, r0, #1
   d5f72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5f76:	ea4f 0131 	mov.w	r1, r1, rrx
   d5f7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5f7e:	bf1f      	itttt	ne
   d5f80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5f84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5f8c:	4770      	bxne	lr
   d5f8e:	f092 0f00 	teq	r2, #0
   d5f92:	bf14      	ite	ne
   d5f94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f98:	4770      	bxeq	lr
   d5f9a:	b530      	push	{r4, r5, lr}
   d5f9c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5fa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fa8:	e720      	b.n	d5dec <__adddf3+0x138>
   d5faa:	bf00      	nop

000d5fac <__aeabi_ul2d>:
   d5fac:	ea50 0201 	orrs.w	r2, r0, r1
   d5fb0:	bf08      	it	eq
   d5fb2:	4770      	bxeq	lr
   d5fb4:	b530      	push	{r4, r5, lr}
   d5fb6:	f04f 0500 	mov.w	r5, #0
   d5fba:	e00a      	b.n	d5fd2 <__aeabi_l2d+0x16>

000d5fbc <__aeabi_l2d>:
   d5fbc:	ea50 0201 	orrs.w	r2, r0, r1
   d5fc0:	bf08      	it	eq
   d5fc2:	4770      	bxeq	lr
   d5fc4:	b530      	push	{r4, r5, lr}
   d5fc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5fca:	d502      	bpl.n	d5fd2 <__aeabi_l2d+0x16>
   d5fcc:	4240      	negs	r0, r0
   d5fce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5fd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5fda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5fde:	f43f aedc 	beq.w	d5d9a <__adddf3+0xe6>
   d5fe2:	f04f 0203 	mov.w	r2, #3
   d5fe6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5fea:	bf18      	it	ne
   d5fec:	3203      	addne	r2, #3
   d5fee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ff2:	bf18      	it	ne
   d5ff4:	3203      	addne	r2, #3
   d5ff6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ffa:	f1c2 0320 	rsb	r3, r2, #32
   d5ffe:	fa00 fc03 	lsl.w	ip, r0, r3
   d6002:	fa20 f002 	lsr.w	r0, r0, r2
   d6006:	fa01 fe03 	lsl.w	lr, r1, r3
   d600a:	ea40 000e 	orr.w	r0, r0, lr
   d600e:	fa21 f102 	lsr.w	r1, r1, r2
   d6012:	4414      	add	r4, r2
   d6014:	e6c1      	b.n	d5d9a <__adddf3+0xe6>
   d6016:	bf00      	nop

000d6018 <__aeabi_dmul>:
   d6018:	b570      	push	{r4, r5, r6, lr}
   d601a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d601e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6022:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6026:	bf1d      	ittte	ne
   d6028:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d602c:	ea94 0f0c 	teqne	r4, ip
   d6030:	ea95 0f0c 	teqne	r5, ip
   d6034:	f000 f8de 	bleq	d61f4 <__aeabi_dmul+0x1dc>
   d6038:	442c      	add	r4, r5
   d603a:	ea81 0603 	eor.w	r6, r1, r3
   d603e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6042:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6046:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d604a:	bf18      	it	ne
   d604c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6058:	d038      	beq.n	d60cc <__aeabi_dmul+0xb4>
   d605a:	fba0 ce02 	umull	ip, lr, r0, r2
   d605e:	f04f 0500 	mov.w	r5, #0
   d6062:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6066:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d606a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d606e:	f04f 0600 	mov.w	r6, #0
   d6072:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6076:	f09c 0f00 	teq	ip, #0
   d607a:	bf18      	it	ne
   d607c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6080:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6084:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6088:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d608c:	d204      	bcs.n	d6098 <__aeabi_dmul+0x80>
   d608e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6092:	416d      	adcs	r5, r5
   d6094:	eb46 0606 	adc.w	r6, r6, r6
   d6098:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d609c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d60a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d60a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d60a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d60ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60b0:	bf88      	it	hi
   d60b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60b6:	d81e      	bhi.n	d60f6 <__aeabi_dmul+0xde>
   d60b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d60bc:	bf08      	it	eq
   d60be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d60c2:	f150 0000 	adcs.w	r0, r0, #0
   d60c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60ca:	bd70      	pop	{r4, r5, r6, pc}
   d60cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d60d0:	ea46 0101 	orr.w	r1, r6, r1
   d60d4:	ea40 0002 	orr.w	r0, r0, r2
   d60d8:	ea81 0103 	eor.w	r1, r1, r3
   d60dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d60e0:	bfc2      	ittt	gt
   d60e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d60e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d60ea:	bd70      	popgt	{r4, r5, r6, pc}
   d60ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d60f0:	f04f 0e00 	mov.w	lr, #0
   d60f4:	3c01      	subs	r4, #1
   d60f6:	f300 80ab 	bgt.w	d6250 <__aeabi_dmul+0x238>
   d60fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d60fe:	bfde      	ittt	le
   d6100:	2000      	movle	r0, #0
   d6102:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6106:	bd70      	pople	{r4, r5, r6, pc}
   d6108:	f1c4 0400 	rsb	r4, r4, #0
   d610c:	3c20      	subs	r4, #32
   d610e:	da35      	bge.n	d617c <__aeabi_dmul+0x164>
   d6110:	340c      	adds	r4, #12
   d6112:	dc1b      	bgt.n	d614c <__aeabi_dmul+0x134>
   d6114:	f104 0414 	add.w	r4, r4, #20
   d6118:	f1c4 0520 	rsb	r5, r4, #32
   d611c:	fa00 f305 	lsl.w	r3, r0, r5
   d6120:	fa20 f004 	lsr.w	r0, r0, r4
   d6124:	fa01 f205 	lsl.w	r2, r1, r5
   d6128:	ea40 0002 	orr.w	r0, r0, r2
   d612c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6130:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6134:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6138:	fa21 f604 	lsr.w	r6, r1, r4
   d613c:	eb42 0106 	adc.w	r1, r2, r6
   d6140:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6144:	bf08      	it	eq
   d6146:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d614a:	bd70      	pop	{r4, r5, r6, pc}
   d614c:	f1c4 040c 	rsb	r4, r4, #12
   d6150:	f1c4 0520 	rsb	r5, r4, #32
   d6154:	fa00 f304 	lsl.w	r3, r0, r4
   d6158:	fa20 f005 	lsr.w	r0, r0, r5
   d615c:	fa01 f204 	lsl.w	r2, r1, r4
   d6160:	ea40 0002 	orr.w	r0, r0, r2
   d6164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6168:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d616c:	f141 0100 	adc.w	r1, r1, #0
   d6170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6174:	bf08      	it	eq
   d6176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d617a:	bd70      	pop	{r4, r5, r6, pc}
   d617c:	f1c4 0520 	rsb	r5, r4, #32
   d6180:	fa00 f205 	lsl.w	r2, r0, r5
   d6184:	ea4e 0e02 	orr.w	lr, lr, r2
   d6188:	fa20 f304 	lsr.w	r3, r0, r4
   d618c:	fa01 f205 	lsl.w	r2, r1, r5
   d6190:	ea43 0302 	orr.w	r3, r3, r2
   d6194:	fa21 f004 	lsr.w	r0, r1, r4
   d6198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d619c:	fa21 f204 	lsr.w	r2, r1, r4
   d61a0:	ea20 0002 	bic.w	r0, r0, r2
   d61a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d61a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61ac:	bf08      	it	eq
   d61ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61b2:	bd70      	pop	{r4, r5, r6, pc}
   d61b4:	f094 0f00 	teq	r4, #0
   d61b8:	d10f      	bne.n	d61da <__aeabi_dmul+0x1c2>
   d61ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d61be:	0040      	lsls	r0, r0, #1
   d61c0:	eb41 0101 	adc.w	r1, r1, r1
   d61c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61c8:	bf08      	it	eq
   d61ca:	3c01      	subeq	r4, #1
   d61cc:	d0f7      	beq.n	d61be <__aeabi_dmul+0x1a6>
   d61ce:	ea41 0106 	orr.w	r1, r1, r6
   d61d2:	f095 0f00 	teq	r5, #0
   d61d6:	bf18      	it	ne
   d61d8:	4770      	bxne	lr
   d61da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d61de:	0052      	lsls	r2, r2, #1
   d61e0:	eb43 0303 	adc.w	r3, r3, r3
   d61e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d61e8:	bf08      	it	eq
   d61ea:	3d01      	subeq	r5, #1
   d61ec:	d0f7      	beq.n	d61de <__aeabi_dmul+0x1c6>
   d61ee:	ea43 0306 	orr.w	r3, r3, r6
   d61f2:	4770      	bx	lr
   d61f4:	ea94 0f0c 	teq	r4, ip
   d61f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d61fc:	bf18      	it	ne
   d61fe:	ea95 0f0c 	teqne	r5, ip
   d6202:	d00c      	beq.n	d621e <__aeabi_dmul+0x206>
   d6204:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6208:	bf18      	it	ne
   d620a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d620e:	d1d1      	bne.n	d61b4 <__aeabi_dmul+0x19c>
   d6210:	ea81 0103 	eor.w	r1, r1, r3
   d6214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6218:	f04f 0000 	mov.w	r0, #0
   d621c:	bd70      	pop	{r4, r5, r6, pc}
   d621e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6222:	bf06      	itte	eq
   d6224:	4610      	moveq	r0, r2
   d6226:	4619      	moveq	r1, r3
   d6228:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d622c:	d019      	beq.n	d6262 <__aeabi_dmul+0x24a>
   d622e:	ea94 0f0c 	teq	r4, ip
   d6232:	d102      	bne.n	d623a <__aeabi_dmul+0x222>
   d6234:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6238:	d113      	bne.n	d6262 <__aeabi_dmul+0x24a>
   d623a:	ea95 0f0c 	teq	r5, ip
   d623e:	d105      	bne.n	d624c <__aeabi_dmul+0x234>
   d6240:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6244:	bf1c      	itt	ne
   d6246:	4610      	movne	r0, r2
   d6248:	4619      	movne	r1, r3
   d624a:	d10a      	bne.n	d6262 <__aeabi_dmul+0x24a>
   d624c:	ea81 0103 	eor.w	r1, r1, r3
   d6250:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6254:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6258:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d625c:	f04f 0000 	mov.w	r0, #0
   d6260:	bd70      	pop	{r4, r5, r6, pc}
   d6262:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6266:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d626a:	bd70      	pop	{r4, r5, r6, pc}

000d626c <__aeabi_ddiv>:
   d626c:	b570      	push	{r4, r5, r6, lr}
   d626e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6272:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6276:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d627a:	bf1d      	ittte	ne
   d627c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6280:	ea94 0f0c 	teqne	r4, ip
   d6284:	ea95 0f0c 	teqne	r5, ip
   d6288:	f000 f8a7 	bleq	d63da <__aeabi_ddiv+0x16e>
   d628c:	eba4 0405 	sub.w	r4, r4, r5
   d6290:	ea81 0e03 	eor.w	lr, r1, r3
   d6294:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6298:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d629c:	f000 8088 	beq.w	d63b0 <__aeabi_ddiv+0x144>
   d62a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d62a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d62ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d62b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d62b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d62b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d62bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d62c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d62c4:	429d      	cmp	r5, r3
   d62c6:	bf08      	it	eq
   d62c8:	4296      	cmpeq	r6, r2
   d62ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d62ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d62d2:	d202      	bcs.n	d62da <__aeabi_ddiv+0x6e>
   d62d4:	085b      	lsrs	r3, r3, #1
   d62d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d62da:	1ab6      	subs	r6, r6, r2
   d62dc:	eb65 0503 	sbc.w	r5, r5, r3
   d62e0:	085b      	lsrs	r3, r3, #1
   d62e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d62e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d62ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d62ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d62f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62f6:	bf22      	ittt	cs
   d62f8:	1ab6      	subcs	r6, r6, r2
   d62fa:	4675      	movcs	r5, lr
   d62fc:	ea40 000c 	orrcs.w	r0, r0, ip
   d6300:	085b      	lsrs	r3, r3, #1
   d6302:	ea4f 0232 	mov.w	r2, r2, rrx
   d6306:	ebb6 0e02 	subs.w	lr, r6, r2
   d630a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d630e:	bf22      	ittt	cs
   d6310:	1ab6      	subcs	r6, r6, r2
   d6312:	4675      	movcs	r5, lr
   d6314:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6318:	085b      	lsrs	r3, r3, #1
   d631a:	ea4f 0232 	mov.w	r2, r2, rrx
   d631e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6322:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6326:	bf22      	ittt	cs
   d6328:	1ab6      	subcs	r6, r6, r2
   d632a:	4675      	movcs	r5, lr
   d632c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6330:	085b      	lsrs	r3, r3, #1
   d6332:	ea4f 0232 	mov.w	r2, r2, rrx
   d6336:	ebb6 0e02 	subs.w	lr, r6, r2
   d633a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d633e:	bf22      	ittt	cs
   d6340:	1ab6      	subcs	r6, r6, r2
   d6342:	4675      	movcs	r5, lr
   d6344:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6348:	ea55 0e06 	orrs.w	lr, r5, r6
   d634c:	d018      	beq.n	d6380 <__aeabi_ddiv+0x114>
   d634e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6352:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6356:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d635a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d635e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6362:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6366:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d636a:	d1c0      	bne.n	d62ee <__aeabi_ddiv+0x82>
   d636c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6370:	d10b      	bne.n	d638a <__aeabi_ddiv+0x11e>
   d6372:	ea41 0100 	orr.w	r1, r1, r0
   d6376:	f04f 0000 	mov.w	r0, #0
   d637a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d637e:	e7b6      	b.n	d62ee <__aeabi_ddiv+0x82>
   d6380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6384:	bf04      	itt	eq
   d6386:	4301      	orreq	r1, r0
   d6388:	2000      	moveq	r0, #0
   d638a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d638e:	bf88      	it	hi
   d6390:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6394:	f63f aeaf 	bhi.w	d60f6 <__aeabi_dmul+0xde>
   d6398:	ebb5 0c03 	subs.w	ip, r5, r3
   d639c:	bf04      	itt	eq
   d639e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d63a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63a6:	f150 0000 	adcs.w	r0, r0, #0
   d63aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63ae:	bd70      	pop	{r4, r5, r6, pc}
   d63b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d63b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d63b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d63bc:	bfc2      	ittt	gt
   d63be:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63c6:	bd70      	popgt	{r4, r5, r6, pc}
   d63c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63cc:	f04f 0e00 	mov.w	lr, #0
   d63d0:	3c01      	subs	r4, #1
   d63d2:	e690      	b.n	d60f6 <__aeabi_dmul+0xde>
   d63d4:	ea45 0e06 	orr.w	lr, r5, r6
   d63d8:	e68d      	b.n	d60f6 <__aeabi_dmul+0xde>
   d63da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63de:	ea94 0f0c 	teq	r4, ip
   d63e2:	bf08      	it	eq
   d63e4:	ea95 0f0c 	teqeq	r5, ip
   d63e8:	f43f af3b 	beq.w	d6262 <__aeabi_dmul+0x24a>
   d63ec:	ea94 0f0c 	teq	r4, ip
   d63f0:	d10a      	bne.n	d6408 <__aeabi_ddiv+0x19c>
   d63f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d63f6:	f47f af34 	bne.w	d6262 <__aeabi_dmul+0x24a>
   d63fa:	ea95 0f0c 	teq	r5, ip
   d63fe:	f47f af25 	bne.w	d624c <__aeabi_dmul+0x234>
   d6402:	4610      	mov	r0, r2
   d6404:	4619      	mov	r1, r3
   d6406:	e72c      	b.n	d6262 <__aeabi_dmul+0x24a>
   d6408:	ea95 0f0c 	teq	r5, ip
   d640c:	d106      	bne.n	d641c <__aeabi_ddiv+0x1b0>
   d640e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6412:	f43f aefd 	beq.w	d6210 <__aeabi_dmul+0x1f8>
   d6416:	4610      	mov	r0, r2
   d6418:	4619      	mov	r1, r3
   d641a:	e722      	b.n	d6262 <__aeabi_dmul+0x24a>
   d641c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6420:	bf18      	it	ne
   d6422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6426:	f47f aec5 	bne.w	d61b4 <__aeabi_dmul+0x19c>
   d642a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d642e:	f47f af0d 	bne.w	d624c <__aeabi_dmul+0x234>
   d6432:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6436:	f47f aeeb 	bne.w	d6210 <__aeabi_dmul+0x1f8>
   d643a:	e712      	b.n	d6262 <__aeabi_dmul+0x24a>

000d643c <__gedf2>:
   d643c:	f04f 3cff 	mov.w	ip, #4294967295
   d6440:	e006      	b.n	d6450 <__cmpdf2+0x4>
   d6442:	bf00      	nop

000d6444 <__ledf2>:
   d6444:	f04f 0c01 	mov.w	ip, #1
   d6448:	e002      	b.n	d6450 <__cmpdf2+0x4>
   d644a:	bf00      	nop

000d644c <__cmpdf2>:
   d644c:	f04f 0c01 	mov.w	ip, #1
   d6450:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d645c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6460:	bf18      	it	ne
   d6462:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6466:	d01b      	beq.n	d64a0 <__cmpdf2+0x54>
   d6468:	b001      	add	sp, #4
   d646a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d646e:	bf0c      	ite	eq
   d6470:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6474:	ea91 0f03 	teqne	r1, r3
   d6478:	bf02      	ittt	eq
   d647a:	ea90 0f02 	teqeq	r0, r2
   d647e:	2000      	moveq	r0, #0
   d6480:	4770      	bxeq	lr
   d6482:	f110 0f00 	cmn.w	r0, #0
   d6486:	ea91 0f03 	teq	r1, r3
   d648a:	bf58      	it	pl
   d648c:	4299      	cmppl	r1, r3
   d648e:	bf08      	it	eq
   d6490:	4290      	cmpeq	r0, r2
   d6492:	bf2c      	ite	cs
   d6494:	17d8      	asrcs	r0, r3, #31
   d6496:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d649a:	f040 0001 	orr.w	r0, r0, #1
   d649e:	4770      	bx	lr
   d64a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64a8:	d102      	bne.n	d64b0 <__cmpdf2+0x64>
   d64aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64ae:	d107      	bne.n	d64c0 <__cmpdf2+0x74>
   d64b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64b8:	d1d6      	bne.n	d6468 <__cmpdf2+0x1c>
   d64ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64be:	d0d3      	beq.n	d6468 <__cmpdf2+0x1c>
   d64c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d64c4:	4770      	bx	lr
   d64c6:	bf00      	nop

000d64c8 <__aeabi_cdrcmple>:
   d64c8:	4684      	mov	ip, r0
   d64ca:	4610      	mov	r0, r2
   d64cc:	4662      	mov	r2, ip
   d64ce:	468c      	mov	ip, r1
   d64d0:	4619      	mov	r1, r3
   d64d2:	4663      	mov	r3, ip
   d64d4:	e000      	b.n	d64d8 <__aeabi_cdcmpeq>
   d64d6:	bf00      	nop

000d64d8 <__aeabi_cdcmpeq>:
   d64d8:	b501      	push	{r0, lr}
   d64da:	f7ff ffb7 	bl	d644c <__cmpdf2>
   d64de:	2800      	cmp	r0, #0
   d64e0:	bf48      	it	mi
   d64e2:	f110 0f00 	cmnmi.w	r0, #0
   d64e6:	bd01      	pop	{r0, pc}

000d64e8 <__aeabi_dcmpeq>:
   d64e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d64ec:	f7ff fff4 	bl	d64d8 <__aeabi_cdcmpeq>
   d64f0:	bf0c      	ite	eq
   d64f2:	2001      	moveq	r0, #1
   d64f4:	2000      	movne	r0, #0
   d64f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d64fa:	bf00      	nop

000d64fc <__aeabi_dcmplt>:
   d64fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6500:	f7ff ffea 	bl	d64d8 <__aeabi_cdcmpeq>
   d6504:	bf34      	ite	cc
   d6506:	2001      	movcc	r0, #1
   d6508:	2000      	movcs	r0, #0
   d650a:	f85d fb08 	ldr.w	pc, [sp], #8
   d650e:	bf00      	nop

000d6510 <__aeabi_dcmple>:
   d6510:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6514:	f7ff ffe0 	bl	d64d8 <__aeabi_cdcmpeq>
   d6518:	bf94      	ite	ls
   d651a:	2001      	movls	r0, #1
   d651c:	2000      	movhi	r0, #0
   d651e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6522:	bf00      	nop

000d6524 <__aeabi_dcmpge>:
   d6524:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6528:	f7ff ffce 	bl	d64c8 <__aeabi_cdrcmple>
   d652c:	bf94      	ite	ls
   d652e:	2001      	movls	r0, #1
   d6530:	2000      	movhi	r0, #0
   d6532:	f85d fb08 	ldr.w	pc, [sp], #8
   d6536:	bf00      	nop

000d6538 <__aeabi_dcmpgt>:
   d6538:	f84d ed08 	str.w	lr, [sp, #-8]!
   d653c:	f7ff ffc4 	bl	d64c8 <__aeabi_cdrcmple>
   d6540:	bf34      	ite	cc
   d6542:	2001      	movcc	r0, #1
   d6544:	2000      	movcs	r0, #0
   d6546:	f85d fb08 	ldr.w	pc, [sp], #8
   d654a:	bf00      	nop

000d654c <__aeabi_dcmpun>:
   d654c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6554:	d102      	bne.n	d655c <__aeabi_dcmpun+0x10>
   d6556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d655a:	d10a      	bne.n	d6572 <__aeabi_dcmpun+0x26>
   d655c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6564:	d102      	bne.n	d656c <__aeabi_dcmpun+0x20>
   d6566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d656a:	d102      	bne.n	d6572 <__aeabi_dcmpun+0x26>
   d656c:	f04f 0000 	mov.w	r0, #0
   d6570:	4770      	bx	lr
   d6572:	f04f 0001 	mov.w	r0, #1
   d6576:	4770      	bx	lr

000d6578 <__aeabi_d2iz>:
   d6578:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d657c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6580:	d215      	bcs.n	d65ae <__aeabi_d2iz+0x36>
   d6582:	d511      	bpl.n	d65a8 <__aeabi_d2iz+0x30>
   d6584:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6588:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d658c:	d912      	bls.n	d65b4 <__aeabi_d2iz+0x3c>
   d658e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6596:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d659a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d659e:	fa23 f002 	lsr.w	r0, r3, r2
   d65a2:	bf18      	it	ne
   d65a4:	4240      	negne	r0, r0
   d65a6:	4770      	bx	lr
   d65a8:	f04f 0000 	mov.w	r0, #0
   d65ac:	4770      	bx	lr
   d65ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d65b2:	d105      	bne.n	d65c0 <__aeabi_d2iz+0x48>
   d65b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d65b8:	bf08      	it	eq
   d65ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d65be:	4770      	bx	lr
   d65c0:	f04f 0000 	mov.w	r0, #0
   d65c4:	4770      	bx	lr
   d65c6:	bf00      	nop

000d65c8 <__aeabi_d2uiz>:
   d65c8:	004a      	lsls	r2, r1, #1
   d65ca:	d211      	bcs.n	d65f0 <__aeabi_d2uiz+0x28>
   d65cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d65d0:	d211      	bcs.n	d65f6 <__aeabi_d2uiz+0x2e>
   d65d2:	d50d      	bpl.n	d65f0 <__aeabi_d2uiz+0x28>
   d65d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d65dc:	d40e      	bmi.n	d65fc <__aeabi_d2uiz+0x34>
   d65de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d65e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d65ea:	fa23 f002 	lsr.w	r0, r3, r2
   d65ee:	4770      	bx	lr
   d65f0:	f04f 0000 	mov.w	r0, #0
   d65f4:	4770      	bx	lr
   d65f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d65fa:	d102      	bne.n	d6602 <__aeabi_d2uiz+0x3a>
   d65fc:	f04f 30ff 	mov.w	r0, #4294967295
   d6600:	4770      	bx	lr
   d6602:	f04f 0000 	mov.w	r0, #0
   d6606:	4770      	bx	lr

000d6608 <__aeabi_uldivmod>:
   d6608:	b953      	cbnz	r3, d6620 <__aeabi_uldivmod+0x18>
   d660a:	b94a      	cbnz	r2, d6620 <__aeabi_uldivmod+0x18>
   d660c:	2900      	cmp	r1, #0
   d660e:	bf08      	it	eq
   d6610:	2800      	cmpeq	r0, #0
   d6612:	bf1c      	itt	ne
   d6614:	f04f 31ff 	movne.w	r1, #4294967295
   d6618:	f04f 30ff 	movne.w	r0, #4294967295
   d661c:	f000 b9a2 	b.w	d6964 <__aeabi_idiv0>
   d6620:	f1ad 0c08 	sub.w	ip, sp, #8
   d6624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6628:	f000 f82a 	bl	d6680 <__udivmoddi4>
   d662c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6634:	b004      	add	sp, #16
   d6636:	4770      	bx	lr

000d6638 <__aeabi_d2ulz>:
   d6638:	b5d0      	push	{r4, r6, r7, lr}
   d663a:	2200      	movs	r2, #0
   d663c:	4b0e      	ldr	r3, [pc, #56]	; (d6678 <__aeabi_d2ulz+0x40>)
   d663e:	4606      	mov	r6, r0
   d6640:	460f      	mov	r7, r1
   d6642:	f7ff fce9 	bl	d6018 <__aeabi_dmul>
   d6646:	f7ff ffbf 	bl	d65c8 <__aeabi_d2uiz>
   d664a:	4604      	mov	r4, r0
   d664c:	f7ff fc6e 	bl	d5f2c <__aeabi_ui2d>
   d6650:	2200      	movs	r2, #0
   d6652:	4b0a      	ldr	r3, [pc, #40]	; (d667c <__aeabi_d2ulz+0x44>)
   d6654:	f7ff fce0 	bl	d6018 <__aeabi_dmul>
   d6658:	4602      	mov	r2, r0
   d665a:	460b      	mov	r3, r1
   d665c:	4630      	mov	r0, r6
   d665e:	4639      	mov	r1, r7
   d6660:	f7ff fb26 	bl	d5cb0 <__aeabi_dsub>
   d6664:	f7ff ffb0 	bl	d65c8 <__aeabi_d2uiz>
   d6668:	4623      	mov	r3, r4
   d666a:	2200      	movs	r2, #0
   d666c:	ea42 0200 	orr.w	r2, r2, r0
   d6670:	4610      	mov	r0, r2
   d6672:	4619      	mov	r1, r3
   d6674:	bdd0      	pop	{r4, r6, r7, pc}
   d6676:	bf00      	nop
   d6678:	3df00000 	.word	0x3df00000
   d667c:	41f00000 	.word	0x41f00000

000d6680 <__udivmoddi4>:
   d6680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6684:	468c      	mov	ip, r1
   d6686:	460e      	mov	r6, r1
   d6688:	4604      	mov	r4, r0
   d668a:	9d08      	ldr	r5, [sp, #32]
   d668c:	2b00      	cmp	r3, #0
   d668e:	d150      	bne.n	d6732 <__udivmoddi4+0xb2>
   d6690:	428a      	cmp	r2, r1
   d6692:	4617      	mov	r7, r2
   d6694:	d96c      	bls.n	d6770 <__udivmoddi4+0xf0>
   d6696:	fab2 fe82 	clz	lr, r2
   d669a:	f1be 0f00 	cmp.w	lr, #0
   d669e:	d00b      	beq.n	d66b8 <__udivmoddi4+0x38>
   d66a0:	f1ce 0420 	rsb	r4, lr, #32
   d66a4:	fa20 f404 	lsr.w	r4, r0, r4
   d66a8:	fa01 f60e 	lsl.w	r6, r1, lr
   d66ac:	ea44 0c06 	orr.w	ip, r4, r6
   d66b0:	fa02 f70e 	lsl.w	r7, r2, lr
   d66b4:	fa00 f40e 	lsl.w	r4, r0, lr
   d66b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d66bc:	0c22      	lsrs	r2, r4, #16
   d66be:	fbbc f0f9 	udiv	r0, ip, r9
   d66c2:	fa1f f887 	uxth.w	r8, r7
   d66c6:	fb09 c610 	mls	r6, r9, r0, ip
   d66ca:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d66ce:	fb00 f308 	mul.w	r3, r0, r8
   d66d2:	42b3      	cmp	r3, r6
   d66d4:	d909      	bls.n	d66ea <__udivmoddi4+0x6a>
   d66d6:	19f6      	adds	r6, r6, r7
   d66d8:	f100 32ff 	add.w	r2, r0, #4294967295
   d66dc:	f080 8122 	bcs.w	d6924 <__udivmoddi4+0x2a4>
   d66e0:	42b3      	cmp	r3, r6
   d66e2:	f240 811f 	bls.w	d6924 <__udivmoddi4+0x2a4>
   d66e6:	3802      	subs	r0, #2
   d66e8:	443e      	add	r6, r7
   d66ea:	1af6      	subs	r6, r6, r3
   d66ec:	b2a2      	uxth	r2, r4
   d66ee:	fbb6 f3f9 	udiv	r3, r6, r9
   d66f2:	fb09 6613 	mls	r6, r9, r3, r6
   d66f6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d66fa:	fb03 f808 	mul.w	r8, r3, r8
   d66fe:	45a0      	cmp	r8, r4
   d6700:	d909      	bls.n	d6716 <__udivmoddi4+0x96>
   d6702:	19e4      	adds	r4, r4, r7
   d6704:	f103 32ff 	add.w	r2, r3, #4294967295
   d6708:	f080 810a 	bcs.w	d6920 <__udivmoddi4+0x2a0>
   d670c:	45a0      	cmp	r8, r4
   d670e:	f240 8107 	bls.w	d6920 <__udivmoddi4+0x2a0>
   d6712:	3b02      	subs	r3, #2
   d6714:	443c      	add	r4, r7
   d6716:	ebc8 0404 	rsb	r4, r8, r4
   d671a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d671e:	2100      	movs	r1, #0
   d6720:	2d00      	cmp	r5, #0
   d6722:	d062      	beq.n	d67ea <__udivmoddi4+0x16a>
   d6724:	fa24 f40e 	lsr.w	r4, r4, lr
   d6728:	2300      	movs	r3, #0
   d672a:	602c      	str	r4, [r5, #0]
   d672c:	606b      	str	r3, [r5, #4]
   d672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6732:	428b      	cmp	r3, r1
   d6734:	d907      	bls.n	d6746 <__udivmoddi4+0xc6>
   d6736:	2d00      	cmp	r5, #0
   d6738:	d055      	beq.n	d67e6 <__udivmoddi4+0x166>
   d673a:	2100      	movs	r1, #0
   d673c:	e885 0041 	stmia.w	r5, {r0, r6}
   d6740:	4608      	mov	r0, r1
   d6742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6746:	fab3 f183 	clz	r1, r3
   d674a:	2900      	cmp	r1, #0
   d674c:	f040 8090 	bne.w	d6870 <__udivmoddi4+0x1f0>
   d6750:	42b3      	cmp	r3, r6
   d6752:	d302      	bcc.n	d675a <__udivmoddi4+0xda>
   d6754:	4282      	cmp	r2, r0
   d6756:	f200 80f8 	bhi.w	d694a <__udivmoddi4+0x2ca>
   d675a:	1a84      	subs	r4, r0, r2
   d675c:	eb66 0603 	sbc.w	r6, r6, r3
   d6760:	2001      	movs	r0, #1
   d6762:	46b4      	mov	ip, r6
   d6764:	2d00      	cmp	r5, #0
   d6766:	d040      	beq.n	d67ea <__udivmoddi4+0x16a>
   d6768:	e885 1010 	stmia.w	r5, {r4, ip}
   d676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6770:	b912      	cbnz	r2, d6778 <__udivmoddi4+0xf8>
   d6772:	2701      	movs	r7, #1
   d6774:	fbb7 f7f2 	udiv	r7, r7, r2
   d6778:	fab7 fe87 	clz	lr, r7
   d677c:	f1be 0f00 	cmp.w	lr, #0
   d6780:	d135      	bne.n	d67ee <__udivmoddi4+0x16e>
   d6782:	1bf3      	subs	r3, r6, r7
   d6784:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6788:	fa1f fc87 	uxth.w	ip, r7
   d678c:	2101      	movs	r1, #1
   d678e:	fbb3 f0f8 	udiv	r0, r3, r8
   d6792:	0c22      	lsrs	r2, r4, #16
   d6794:	fb08 3610 	mls	r6, r8, r0, r3
   d6798:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d679c:	fb0c f300 	mul.w	r3, ip, r0
   d67a0:	42b3      	cmp	r3, r6
   d67a2:	d907      	bls.n	d67b4 <__udivmoddi4+0x134>
   d67a4:	19f6      	adds	r6, r6, r7
   d67a6:	f100 32ff 	add.w	r2, r0, #4294967295
   d67aa:	d202      	bcs.n	d67b2 <__udivmoddi4+0x132>
   d67ac:	42b3      	cmp	r3, r6
   d67ae:	f200 80ce 	bhi.w	d694e <__udivmoddi4+0x2ce>
   d67b2:	4610      	mov	r0, r2
   d67b4:	1af6      	subs	r6, r6, r3
   d67b6:	b2a2      	uxth	r2, r4
   d67b8:	fbb6 f3f8 	udiv	r3, r6, r8
   d67bc:	fb08 6613 	mls	r6, r8, r3, r6
   d67c0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d67c4:	fb0c fc03 	mul.w	ip, ip, r3
   d67c8:	45a4      	cmp	ip, r4
   d67ca:	d907      	bls.n	d67dc <__udivmoddi4+0x15c>
   d67cc:	19e4      	adds	r4, r4, r7
   d67ce:	f103 32ff 	add.w	r2, r3, #4294967295
   d67d2:	d202      	bcs.n	d67da <__udivmoddi4+0x15a>
   d67d4:	45a4      	cmp	ip, r4
   d67d6:	f200 80b5 	bhi.w	d6944 <__udivmoddi4+0x2c4>
   d67da:	4613      	mov	r3, r2
   d67dc:	ebcc 0404 	rsb	r4, ip, r4
   d67e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d67e4:	e79c      	b.n	d6720 <__udivmoddi4+0xa0>
   d67e6:	4629      	mov	r1, r5
   d67e8:	4628      	mov	r0, r5
   d67ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67ee:	f1ce 0120 	rsb	r1, lr, #32
   d67f2:	fa06 f30e 	lsl.w	r3, r6, lr
   d67f6:	fa07 f70e 	lsl.w	r7, r7, lr
   d67fa:	fa20 f901 	lsr.w	r9, r0, r1
   d67fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6802:	40ce      	lsrs	r6, r1
   d6804:	ea49 0903 	orr.w	r9, r9, r3
   d6808:	fbb6 faf8 	udiv	sl, r6, r8
   d680c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6810:	fb08 661a 	mls	r6, r8, sl, r6
   d6814:	fa1f fc87 	uxth.w	ip, r7
   d6818:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d681c:	fb0a f20c 	mul.w	r2, sl, ip
   d6820:	429a      	cmp	r2, r3
   d6822:	fa00 f40e 	lsl.w	r4, r0, lr
   d6826:	d90a      	bls.n	d683e <__udivmoddi4+0x1be>
   d6828:	19db      	adds	r3, r3, r7
   d682a:	f10a 31ff 	add.w	r1, sl, #4294967295
   d682e:	f080 8087 	bcs.w	d6940 <__udivmoddi4+0x2c0>
   d6832:	429a      	cmp	r2, r3
   d6834:	f240 8084 	bls.w	d6940 <__udivmoddi4+0x2c0>
   d6838:	f1aa 0a02 	sub.w	sl, sl, #2
   d683c:	443b      	add	r3, r7
   d683e:	1a9b      	subs	r3, r3, r2
   d6840:	fa1f f989 	uxth.w	r9, r9
   d6844:	fbb3 f1f8 	udiv	r1, r3, r8
   d6848:	fb08 3311 	mls	r3, r8, r1, r3
   d684c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6850:	fb01 f60c 	mul.w	r6, r1, ip
   d6854:	429e      	cmp	r6, r3
   d6856:	d907      	bls.n	d6868 <__udivmoddi4+0x1e8>
   d6858:	19db      	adds	r3, r3, r7
   d685a:	f101 32ff 	add.w	r2, r1, #4294967295
   d685e:	d26b      	bcs.n	d6938 <__udivmoddi4+0x2b8>
   d6860:	429e      	cmp	r6, r3
   d6862:	d969      	bls.n	d6938 <__udivmoddi4+0x2b8>
   d6864:	3902      	subs	r1, #2
   d6866:	443b      	add	r3, r7
   d6868:	1b9b      	subs	r3, r3, r6
   d686a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d686e:	e78e      	b.n	d678e <__udivmoddi4+0x10e>
   d6870:	f1c1 0e20 	rsb	lr, r1, #32
   d6874:	fa22 f40e 	lsr.w	r4, r2, lr
   d6878:	408b      	lsls	r3, r1
   d687a:	4323      	orrs	r3, r4
   d687c:	fa20 f70e 	lsr.w	r7, r0, lr
   d6880:	fa06 f401 	lsl.w	r4, r6, r1
   d6884:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6888:	fa26 f60e 	lsr.w	r6, r6, lr
   d688c:	433c      	orrs	r4, r7
   d688e:	fbb6 f9fc 	udiv	r9, r6, ip
   d6892:	0c27      	lsrs	r7, r4, #16
   d6894:	fb0c 6619 	mls	r6, ip, r9, r6
   d6898:	fa1f f883 	uxth.w	r8, r3
   d689c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d68a0:	fb09 f708 	mul.w	r7, r9, r8
   d68a4:	42b7      	cmp	r7, r6
   d68a6:	fa02 f201 	lsl.w	r2, r2, r1
   d68aa:	fa00 fa01 	lsl.w	sl, r0, r1
   d68ae:	d908      	bls.n	d68c2 <__udivmoddi4+0x242>
   d68b0:	18f6      	adds	r6, r6, r3
   d68b2:	f109 30ff 	add.w	r0, r9, #4294967295
   d68b6:	d241      	bcs.n	d693c <__udivmoddi4+0x2bc>
   d68b8:	42b7      	cmp	r7, r6
   d68ba:	d93f      	bls.n	d693c <__udivmoddi4+0x2bc>
   d68bc:	f1a9 0902 	sub.w	r9, r9, #2
   d68c0:	441e      	add	r6, r3
   d68c2:	1bf6      	subs	r6, r6, r7
   d68c4:	b2a0      	uxth	r0, r4
   d68c6:	fbb6 f4fc 	udiv	r4, r6, ip
   d68ca:	fb0c 6614 	mls	r6, ip, r4, r6
   d68ce:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d68d2:	fb04 f808 	mul.w	r8, r4, r8
   d68d6:	45b8      	cmp	r8, r7
   d68d8:	d907      	bls.n	d68ea <__udivmoddi4+0x26a>
   d68da:	18ff      	adds	r7, r7, r3
   d68dc:	f104 30ff 	add.w	r0, r4, #4294967295
   d68e0:	d228      	bcs.n	d6934 <__udivmoddi4+0x2b4>
   d68e2:	45b8      	cmp	r8, r7
   d68e4:	d926      	bls.n	d6934 <__udivmoddi4+0x2b4>
   d68e6:	3c02      	subs	r4, #2
   d68e8:	441f      	add	r7, r3
   d68ea:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d68ee:	ebc8 0707 	rsb	r7, r8, r7
   d68f2:	fba0 8902 	umull	r8, r9, r0, r2
   d68f6:	454f      	cmp	r7, r9
   d68f8:	4644      	mov	r4, r8
   d68fa:	464e      	mov	r6, r9
   d68fc:	d314      	bcc.n	d6928 <__udivmoddi4+0x2a8>
   d68fe:	d029      	beq.n	d6954 <__udivmoddi4+0x2d4>
   d6900:	b365      	cbz	r5, d695c <__udivmoddi4+0x2dc>
   d6902:	ebba 0304 	subs.w	r3, sl, r4
   d6906:	eb67 0706 	sbc.w	r7, r7, r6
   d690a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d690e:	40cb      	lsrs	r3, r1
   d6910:	40cf      	lsrs	r7, r1
   d6912:	ea4e 0303 	orr.w	r3, lr, r3
   d6916:	e885 0088 	stmia.w	r5, {r3, r7}
   d691a:	2100      	movs	r1, #0
   d691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6920:	4613      	mov	r3, r2
   d6922:	e6f8      	b.n	d6716 <__udivmoddi4+0x96>
   d6924:	4610      	mov	r0, r2
   d6926:	e6e0      	b.n	d66ea <__udivmoddi4+0x6a>
   d6928:	ebb8 0402 	subs.w	r4, r8, r2
   d692c:	eb69 0603 	sbc.w	r6, r9, r3
   d6930:	3801      	subs	r0, #1
   d6932:	e7e5      	b.n	d6900 <__udivmoddi4+0x280>
   d6934:	4604      	mov	r4, r0
   d6936:	e7d8      	b.n	d68ea <__udivmoddi4+0x26a>
   d6938:	4611      	mov	r1, r2
   d693a:	e795      	b.n	d6868 <__udivmoddi4+0x1e8>
   d693c:	4681      	mov	r9, r0
   d693e:	e7c0      	b.n	d68c2 <__udivmoddi4+0x242>
   d6940:	468a      	mov	sl, r1
   d6942:	e77c      	b.n	d683e <__udivmoddi4+0x1be>
   d6944:	3b02      	subs	r3, #2
   d6946:	443c      	add	r4, r7
   d6948:	e748      	b.n	d67dc <__udivmoddi4+0x15c>
   d694a:	4608      	mov	r0, r1
   d694c:	e70a      	b.n	d6764 <__udivmoddi4+0xe4>
   d694e:	3802      	subs	r0, #2
   d6950:	443e      	add	r6, r7
   d6952:	e72f      	b.n	d67b4 <__udivmoddi4+0x134>
   d6954:	45c2      	cmp	sl, r8
   d6956:	d3e7      	bcc.n	d6928 <__udivmoddi4+0x2a8>
   d6958:	463e      	mov	r6, r7
   d695a:	e7d1      	b.n	d6900 <__udivmoddi4+0x280>
   d695c:	4629      	mov	r1, r5
   d695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6962:	bf00      	nop

000d6964 <__aeabi_idiv0>:
   d6964:	4770      	bx	lr
   d6966:	bf00      	nop

000d6968 <__cxa_atexit>:
   d6968:	b510      	push	{r4, lr}
   d696a:	4c05      	ldr	r4, [pc, #20]	; (d6980 <__cxa_atexit+0x18>)
   d696c:	4613      	mov	r3, r2
   d696e:	b12c      	cbz	r4, d697c <__cxa_atexit+0x14>
   d6970:	460a      	mov	r2, r1
   d6972:	4601      	mov	r1, r0
   d6974:	2002      	movs	r0, #2
   d6976:	f3af 8000 	nop.w
   d697a:	bd10      	pop	{r4, pc}
   d697c:	4620      	mov	r0, r4
   d697e:	bd10      	pop	{r4, pc}
   d6980:	00000000 	.word	0x00000000

000d6984 <memcpy>:
   d6984:	b510      	push	{r4, lr}
   d6986:	1e43      	subs	r3, r0, #1
   d6988:	440a      	add	r2, r1
   d698a:	4291      	cmp	r1, r2
   d698c:	d004      	beq.n	d6998 <memcpy+0x14>
   d698e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6992:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6996:	e7f8      	b.n	d698a <memcpy+0x6>
   d6998:	bd10      	pop	{r4, pc}

000d699a <memset>:
   d699a:	4402      	add	r2, r0
   d699c:	4603      	mov	r3, r0
   d699e:	4293      	cmp	r3, r2
   d69a0:	d002      	beq.n	d69a8 <memset+0xe>
   d69a2:	f803 1b01 	strb.w	r1, [r3], #1
   d69a6:	e7fa      	b.n	d699e <memset+0x4>
   d69a8:	4770      	bx	lr
	...

000d69ac <srand>:
   d69ac:	b538      	push	{r3, r4, r5, lr}
   d69ae:	4b12      	ldr	r3, [pc, #72]	; (d69f8 <srand+0x4c>)
   d69b0:	681c      	ldr	r4, [r3, #0]
   d69b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69b4:	4605      	mov	r5, r0
   d69b6:	b9d3      	cbnz	r3, d69ee <srand+0x42>
   d69b8:	2018      	movs	r0, #24
   d69ba:	f7fd fe85 	bl	d46c8 <malloc>
   d69be:	f243 330e 	movw	r3, #13070	; 0x330e
   d69c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d69c4:	8003      	strh	r3, [r0, #0]
   d69c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d69ca:	8043      	strh	r3, [r0, #2]
   d69cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d69d0:	8083      	strh	r3, [r0, #4]
   d69d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d69d6:	80c3      	strh	r3, [r0, #6]
   d69d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d69dc:	8103      	strh	r3, [r0, #8]
   d69de:	2305      	movs	r3, #5
   d69e0:	8143      	strh	r3, [r0, #10]
   d69e2:	230b      	movs	r3, #11
   d69e4:	8183      	strh	r3, [r0, #12]
   d69e6:	2201      	movs	r2, #1
   d69e8:	2300      	movs	r3, #0
   d69ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69f0:	2200      	movs	r2, #0
   d69f2:	611d      	str	r5, [r3, #16]
   d69f4:	615a      	str	r2, [r3, #20]
   d69f6:	bd38      	pop	{r3, r4, r5, pc}
   d69f8:	2003e3b8 	.word	0x2003e3b8

000d69fc <strdup>:
   d69fc:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <strdup+0xc>)
   d69fe:	4601      	mov	r1, r0
   d6a00:	6818      	ldr	r0, [r3, #0]
   d6a02:	f000 b803 	b.w	d6a0c <_strdup_r>
   d6a06:	bf00      	nop
   d6a08:	2003e3b8 	.word	0x2003e3b8

000d6a0c <_strdup_r>:
   d6a0c:	b570      	push	{r4, r5, r6, lr}
   d6a0e:	4606      	mov	r6, r0
   d6a10:	4608      	mov	r0, r1
   d6a12:	460c      	mov	r4, r1
   d6a14:	f000 f80d 	bl	d6a32 <strlen>
   d6a18:	1c45      	adds	r5, r0, #1
   d6a1a:	4629      	mov	r1, r5
   d6a1c:	4630      	mov	r0, r6
   d6a1e:	f7fd fe73 	bl	d4708 <_malloc_r>
   d6a22:	4606      	mov	r6, r0
   d6a24:	b118      	cbz	r0, d6a2e <_strdup_r+0x22>
   d6a26:	462a      	mov	r2, r5
   d6a28:	4621      	mov	r1, r4
   d6a2a:	f7ff ffab 	bl	d6984 <memcpy>
   d6a2e:	4630      	mov	r0, r6
   d6a30:	bd70      	pop	{r4, r5, r6, pc}

000d6a32 <strlen>:
   d6a32:	4603      	mov	r3, r0
   d6a34:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a38:	2a00      	cmp	r2, #0
   d6a3a:	d1fb      	bne.n	d6a34 <strlen+0x2>
   d6a3c:	1a18      	subs	r0, r3, r0
   d6a3e:	3801      	subs	r0, #1
   d6a40:	4770      	bx	lr

000d6a42 <link_code_end>:
	...

000d6a44 <dynalib_user>:
   d6a44:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6a54:	0000 0000 4441 3143 3132 5f43 514d 3331     ....ADC121C_MQ13
   d6a64:	0031 3269 6463 7665 6369 3165 3133 4100     1.i2cdevice131.A
   d6a74:	4344 3231 4331 4d5f 3951 6900 6332 6564     DC121C_MQ9.i2cde
   d6a84:	6976 6563 0039 5050 004d 7a4f 6e6f 0065     vice9.PPM.Ozone.
   d6a94:	7a4f 6e6f 2065 6f43 636e 6e65 6172 6974     Ozone Concenrati
   d6aa4:	6e6f 2820 7070 296d 203a 4300 324f 4300     on (ppm): .CO2.C
   d6ab4:	324f 4320 6e6f 6563 726e 7461 6f69 206e     O2 Concenration 
   d6ac4:	7028 6d70 3a29 0020                         (ppm): .

000d6acc <_ZTVN5spark12NetworkClassE>:
	...
   d6ad4:	4719 000d 4723 000d 472d 000d 4737 000d     .G..#G..-G..7G..
   d6ae4:	4741 000d 474d 000d 4759 000d 4765 000d     AG..MG..YG..eG..
   d6af4:	476d 000d 4777 000d 4781 000d               mG..wG...G..

000d6b00 <_ZTVN5spark9WiFiClassE>:
	...
   d6b08:	48bf 000d 48b5 000d 48ab 000d 4861 000d     .H...H...H..aH..
   d6b18:	489f 000d 4893 000d 4887 000d 487f 000d     .H...H...H...H..
   d6b28:	4875 000d 486b 000d 4781 000d               uH..kH...G..

000d6b34 <_ZTVN5spark9MeshClassE>:
	...
   d6b3c:	493b 000d 4931 000d 4927 000d 491d 000d     ;I..1I..'I...I..
   d6b4c:	4911 000d 4905 000d 48f9 000d 48f1 000d     .I...I...H...H..
   d6b5c:	48e7 000d 48dd 000d 4781 000d               .H...H...G..

000d6b68 <_ZTV8SPIClass>:
	...
   d6b70:	4a35 000d 4a37 000d                         5J..7J..

000d6b78 <_ZTV7TwoWire>:
	...
   d6b80:	4a93 000d 4add 000d 4ab5 000d 4a95 000d     .J...J...J...J..
   d6b90:	4abd 000d 4ac5 000d 4acd 000d 4ad5 000d     .J...J...J...J..

000d6ba0 <_ZTV9USBSerial>:
	...
   d6ba8:	4b55 000d 4b99 000d 4b73 000d 5381 000d     UK...K..sK...S..
   d6bb8:	4b6d 000d 4b57 000d 4b5f 000d 4b93 000d     mK..WK.._K...K..
   d6bc8:	4b67 000d 4b51 000d                         gK..QK..

000d6bd0 <_ZTV9IPAddress>:
	...
   d6bd8:	4c3f 000d 4c31 000d 4c33 000d               ?L..1L..3L..

000d6be4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6bec:	4d15 000d 4d1b 000d 4d43 000d 4d27 000d     .M...M..CM..'M..
   d6bfc:	4d17 000d 005a 2b25 3330 3a64 3025 7532     .M..Z.%+03d:%02u
   d6c0c:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d6c1c:	5325 7a25 6100 6373 6974 656d 6c00 006e     %S%z.asctime.ln.
   d6c2c:	6e66 6300 646f 0065 6564 6174 6c69 0d00     fn.code.detail..
   d6c3c:	000a 3025 3031 2075 5d00 0020 6425 2c00     ..%010u .] .%d.,
   d6c4c:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d6c5c:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d6c6c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6c7c:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6c8c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6c9c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6cac:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d6cbc:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d6ccc:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d6cdc:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
   d6cec:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d6cfc:	0072 6170 696e 0063 6c61 006c 616e 006e     r.panic.all.nan.
   d6d0c:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d6d18 <_ZTV11USARTSerial>:
	...
   d6d20:	560f 000d 5633 000d 563f 000d 5381 000d     .V..3V..?V...S..
   d6d30:	561b 000d 5627 000d 5621 000d 562d 000d     .V..'V..!V..-V..
   d6d40:	5611 000d 5615 000d                         .V...V..

000d6d48 <_ZTVN5spark13EthernetClassE>:
	...
   d6d50:	57c7 000d 57bd 000d 57b3 000d 57a9 000d     .W...W...W...W..
   d6d60:	579d 000d 5791 000d 5785 000d 577d 000d     .W...W...W..}W..
   d6d70:	5773 000d 5769 000d 4781 000d               sW..iW...G..

000d6d7c <__sf_fake_stdin>:
	...

000d6d9c <__sf_fake_stdout>:
	...

000d6dbc <__sf_fake_stderr>:
	...
   d6ddc:	0043                                        C.

000d6dde <link_const_variable_data_end>:
	...

000d6de0 <link_constructors_location>:
   d6de0:	000d4341 	.word	0x000d4341
   d6de4:	000d484d 	.word	0x000d484d
   d6de8:	000d48c9 	.word	0x000d48c9
   d6dec:	000d49e9 	.word	0x000d49e9
   d6df0:	000d5341 	.word	0x000d5341
   d6df4:	000d535d 	.word	0x000d535d
   d6df8:	000d5371 	.word	0x000d5371
   d6dfc:	000d5751 	.word	0x000d5751
   d6e00:	000d57d1 	.word	0x000d57d1
   d6e04:	000d59c5 	.word	0x000d59c5
   d6e08:	000d5a19 	.word	0x000d5a19
   d6e0c:	000d5a9d 	.word	0x000d5a9d
   d6e10:	000d5b61 	.word	0x000d5b61
   d6e14:	000d5c25 	.word	0x000d5c25

000d6e18 <link_constructors_end>:
	...
