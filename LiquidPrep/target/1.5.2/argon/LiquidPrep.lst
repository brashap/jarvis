
c:/Users/IoTPa/Documents/jarvis/LiquidPrep/target/1.5.2/argon/LiquidPrep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003eb4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7ed0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000047c  2003de24  000d7ed4  0001de24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000550  2003e2a0  2003e2a0  0002e2a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8350  000d8350  00028350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8378  000d8378  00028378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eab1c  00000000  00000000  0002837c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013157  00000000  00000000  00112e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ff69  00000000  00000000  00125fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002948  00000000  00000000  00145f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004a20  00000000  00000000  001488a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039309  00000000  00000000  0014d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f7ef  00000000  00000000  001865c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106981  00000000  00000000  001b5db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d7f0  00000000  00000000  002bc73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f881 	bl	d7134 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f8a1 	bl	d7180 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de24 	.word	0x2003de24
   d4048:	000d7ed4 	.word	0x000d7ed4
   d404c:	2003e2a0 	.word	0x2003e2a0
   d4050:	2003e2a0 	.word	0x2003e2a0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ff89 	bl	d5f70 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7ed0 	.word	0x000d7ed0
   d4080:	000d7e88 	.word	0x000d7e88

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8fc 	b.w	d4280 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f927 	bl	d42dc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bf2f 	b.w	d5ef4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bca3 	b.w	d59e0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bca9 	b.w	d59f0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bca7 	b.w	d59f0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fc0c 	bl	d58c8 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5639 	.word	0x000d5639

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ca:	4770      	bx	lr

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d7d5c 	.word	0x000d7d5c

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	211c      	movs	r1, #28
   d410c:	f002 fe94 	bl	d6e38 <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_Z10printMoisti>:
  delay(1);
}



void printMoist(int moistVal) {
   d4114:	b538      	push	{r3, r4, r5, lr}

  Serial.printf("The moisture reading is %i \n",moist);
   d4116:	4d1e      	ldr	r5, [pc, #120]	; (d4190 <_Z10printMoisti+0x7c>)
  display.clearDisplay();
   d4118:	4c1e      	ldr	r4, [pc, #120]	; (d4194 <_Z10printMoisti+0x80>)



void printMoist(int moistVal) {

  Serial.printf("The moisture reading is %i \n",moist);
   d411a:	f002 f83f 	bl	d619c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d411e:	682b      	ldr	r3, [r5, #0]
   d4120:	4a1d      	ldr	r2, [pc, #116]	; (d4198 <_Z10printMoisti+0x84>)
   d4122:	2100      	movs	r1, #0
   d4124:	f001 fe5b 	bl	d5dde <_ZN5Print11printf_implEbPKcz>
  display.clearDisplay();
   d4128:	4620      	mov	r0, r4
   d412a:	f000 fb6b 	bl	d4804 <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.drawPixel(0, 0, WHITE);
   d412e:	2200      	movs	r2, #0
   d4130:	4611      	mov	r1, r2
   d4132:	4620      	mov	r0, r4
   d4134:	2301      	movs	r3, #1
   d4136:	f000 fb05 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d413a:	4620      	mov	r0, r4
   d413c:	2301      	movs	r3, #1
   d413e:	2200      	movs	r2, #0
   d4140:	217f      	movs	r1, #127	; 0x7f
   d4142:	f000 faff 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d4146:	4620      	mov	r0, r4
   d4148:	2301      	movs	r3, #1
   d414a:	223f      	movs	r2, #63	; 0x3f
   d414c:	2100      	movs	r1, #0
   d414e:	f000 faf9 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d4152:	2301      	movs	r3, #1
   d4154:	223f      	movs	r2, #63	; 0x3f
   d4156:	4620      	mov	r0, r4
   d4158:	217f      	movs	r1, #127	; 0x7f
   d415a:	f000 faf3 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>

  display.setTextSize(2);
   d415e:	4620      	mov	r0, r4
   d4160:	2102      	movs	r1, #2
   d4162:	f000 fec1 	bl	d4ee8 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4166:	4620      	mov	r0, r4
   d4168:	2101      	movs	r1, #1
   d416a:	f000 fec2 	bl	d4ef2 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,10);
   d416e:	4620      	mov	r0, r4
   d4170:	220a      	movs	r2, #10
   d4172:	2100      	movs	r1, #0
   d4174:	f000 feb5 	bl	d4ee2 <_ZN12Adafruit_GFX9setCursorEss>
   d4178:	682b      	ldr	r3, [r5, #0]
   d417a:	4a08      	ldr	r2, [pc, #32]	; (d419c <_Z10printMoisti+0x88>)
   d417c:	4620      	mov	r0, r4
   d417e:	2100      	movs	r1, #0
   d4180:	f001 fe2d 	bl	d5dde <_ZN5Print11printf_implEbPKcz>

  display.printf(" MOISTURE \n   %i \n",moist);
  display.display();
   d4184:	4620      	mov	r0, r4
}
   d4186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,10);

  display.printf(" MOISTURE \n   %i \n",moist);
  display.display();
   d418a:	f000 bc75 	b.w	d4a78 <_ZN16Adafruit_SSD13067displayEv>
   d418e:	bf00      	nop
   d4190:	2003e2c0 	.word	0x2003e2c0
   d4194:	2003e3a8 	.word	0x2003e3a8
   d4198:	000d723c 	.word	0x000d723c
   d419c:	000d7259 	.word	0x000d7259

000d41a0 <_Z10printhellov>:
}

void printhello() {
   d41a0:	b510      	push	{r4, lr}
  display.clearDisplay();
   d41a2:	4c19      	ldr	r4, [pc, #100]	; (d4208 <_Z10printhellov+0x68>)
   d41a4:	4620      	mov	r0, r4
   d41a6:	f000 fb2d 	bl	d4804 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d41aa:	2200      	movs	r2, #0
   d41ac:	4611      	mov	r1, r2
   d41ae:	4620      	mov	r0, r4
   d41b0:	2301      	movs	r3, #1
   d41b2:	f000 fac7 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d41b6:	4620      	mov	r0, r4
   d41b8:	2301      	movs	r3, #1
   d41ba:	2200      	movs	r2, #0
   d41bc:	217f      	movs	r1, #127	; 0x7f
   d41be:	f000 fac1 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d41c2:	4620      	mov	r0, r4
   d41c4:	2301      	movs	r3, #1
   d41c6:	223f      	movs	r2, #63	; 0x3f
   d41c8:	2100      	movs	r1, #0
   d41ca:	f000 fabb 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d41ce:	2301      	movs	r3, #1
   d41d0:	223f      	movs	r2, #63	; 0x3f
   d41d2:	4620      	mov	r0, r4
   d41d4:	217f      	movs	r1, #127	; 0x7f
   d41d6:	f000 fab5 	bl	d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>
  // display a line of text
  display.setTextSize(1);
   d41da:	4620      	mov	r0, r4
   d41dc:	2101      	movs	r1, #1
   d41de:	f000 fe83 	bl	d4ee8 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d41e2:	4620      	mov	r0, r4
   d41e4:	2101      	movs	r1, #1
   d41e6:	f000 fe84 	bl	d4ef2 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d41ea:	4620      	mov	r0, r4
   d41ec:	221e      	movs	r2, #30
   d41ee:	211b      	movs	r1, #27
   d41f0:	f000 fe77 	bl	d4ee2 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d41f4:	4620      	mov	r0, r4
   d41f6:	4905      	ldr	r1, [pc, #20]	; (d420c <_Z10printhellov+0x6c>)
   d41f8:	f001 fdb4 	bl	d5d64 <_ZN5Print5printEPKc>
  display.display();
   d41fc:	4620      	mov	r0, r4
}
   d41fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4202:	f000 bc39 	b.w	d4a78 <_ZN16Adafruit_SSD13067displayEv>
   d4206:	bf00      	nop
   d4208:	2003e3a8 	.word	0x2003e3a8
   d420c:	000d726c 	.word	0x000d726c

000d4210 <_Z12MQTT_connectv>:
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   d4210:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d4212:	4817      	ldr	r0, [pc, #92]	; (d4270 <_Z12MQTT_connectv+0x60>)
   d4214:	f000 fe7a 	bl	d4f0c <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d4218:	bb40      	cbnz	r0, d426c <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d421a:	f001 ffbf 	bl	d619c <_Z16_fetch_usbserialv>
   d421e:	4915      	ldr	r1, [pc, #84]	; (d4274 <_Z12MQTT_connectv+0x64>)
   d4220:	f001 fda0 	bl	d5d64 <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d4224:	4812      	ldr	r0, [pc, #72]	; (d4270 <_Z12MQTT_connectv+0x60>)
   d4226:	f001 f8f6 	bl	d5416 <_ZN13Adafruit_MQTT7connectEv>
   d422a:	4604      	mov	r4, r0
   d422c:	b1b8      	cbz	r0, d425e <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d422e:	f001 ffb5 	bl	d619c <_Z16_fetch_usbserialv>
   d4232:	4621      	mov	r1, r4
   d4234:	4605      	mov	r5, r0
   d4236:	480e      	ldr	r0, [pc, #56]	; (d4270 <_Z12MQTT_connectv+0x60>)
   d4238:	f000 ffa2 	bl	d5180 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d423c:	4601      	mov	r1, r0
   d423e:	4628      	mov	r0, r5
   d4240:	f001 fda3 	bl	d5d8a <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4244:	f001 ffaa 	bl	d619c <_Z16_fetch_usbserialv>
   d4248:	490b      	ldr	r1, [pc, #44]	; (d4278 <_Z12MQTT_connectv+0x68>)
   d424a:	f001 fd9e 	bl	d5d8a <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d424e:	4808      	ldr	r0, [pc, #32]	; (d4270 <_Z12MQTT_connectv+0x60>)
   d4250:	f000 ffa4 	bl	d519c <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d4254:	f241 3088 	movw	r0, #5000	; 0x1388
   d4258:	f001 fe0e 	bl	d5e78 <delay>
   d425c:	e7e2      	b.n	d4224 <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d425e:	f001 ff9d 	bl	d619c <_Z16_fetch_usbserialv>
   d4262:	4906      	ldr	r1, [pc, #24]	; (d427c <_Z12MQTT_connectv+0x6c>)
   d4264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d4268:	f001 bd8f 	b.w	d5d8a <_ZN5Print7printlnEPKc>
   d426c:	bd38      	pop	{r3, r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	2003e2d4 	.word	0x2003e2d4
   d4274:	000d727a 	.word	0x000d727a
   d4278:	000d7291 	.word	0x000d7291
   d427c:	000d72ba 	.word	0x000d72ba

000d4280 <setup>:

int lastTime;
int last;
const int updateTime = 600000; 

void setup() {
   d4280:	b510      	push	{r4, lr}
  Serial.begin(9600);

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4282:	4c12      	ldr	r4, [pc, #72]	; (d42cc <setup+0x4c>)
int lastTime;
int last;
const int updateTime = 600000; 

void setup() {
  Serial.begin(9600);
   d4284:	f001 ff8a 	bl	d619c <_Z16_fetch_usbserialv>
   d4288:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d428c:	f001 ff7a 	bl	d6184 <_ZN9USBSerial5beginEl>

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4290:	223c      	movs	r2, #60	; 0x3c
   d4292:	2102      	movs	r1, #2
   d4294:	4620      	mov	r0, r4
   d4296:	f000 fb1d 	bl	d48d4 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d429a:	4620      	mov	r0, r4
   d429c:	f000 fab2 	bl	d4804 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d42a0:	4620      	mov	r0, r4
   d42a2:	f000 fbe9 	bl	d4a78 <_ZN16Adafruit_SSD13067displayEv>
  printhello();  
   d42a6:	f7ff ff7b 	bl	d41a0 <_Z10printhellov>
  pinMode(soilPin,INPUT);
   d42aa:	4b09      	ldr	r3, [pc, #36]	; (d42d0 <setup+0x50>)
   d42ac:	2100      	movs	r1, #0
   d42ae:	8818      	ldrh	r0, [r3, #0]
   d42b0:	f002 fd10 	bl	d6cd4 <pinMode>
  lastTime = -updateTime;
   d42b4:	4b07      	ldr	r3, [pc, #28]	; (d42d4 <setup+0x54>)
   d42b6:	4a08      	ldr	r2, [pc, #32]	; (d42d8 <setup+0x58>)
   d42b8:	601a      	str	r2, [r3, #0]
  MQTT_connect();
   d42ba:	f7ff ffa9 	bl	d4210 <_Z12MQTT_connectv>
  delay(5000);
   d42be:	f241 3088 	movw	r0, #5000	; 0x1388
}
   d42c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
  printhello();  
  pinMode(soilPin,INPUT);
  lastTime = -updateTime;
  MQTT_connect();
  delay(5000);
   d42c6:	f001 bdd7 	b.w	d5e78 <delay>
   d42ca:	bf00      	nop
   d42cc:	2003e3a8 	.word	0x2003e3a8
   d42d0:	2003de24 	.word	0x2003de24
   d42d4:	2003e3cc 	.word	0x2003e3cc
   d42d8:	fff6d840 	.word	0xfff6d840

000d42dc <loop>:
}

void loop() {
   d42dc:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42de:	f001 f9b3 	bl	d5648 <HAL_Timer_Get_Milli_Seconds>

  if ((millis()-last)>120000) {
   d42e2:	4b24      	ldr	r3, [pc, #144]	; (d4374 <loop+0x98>)
   d42e4:	681a      	ldr	r2, [r3, #0]
   d42e6:	1a80      	subs	r0, r0, r2
   d42e8:	4a23      	ldr	r2, [pc, #140]	; (d4378 <loop+0x9c>)
   d42ea:	4290      	cmp	r0, r2
   d42ec:	461c      	mov	r4, r3
   d42ee:	d917      	bls.n	d4320 <loop+0x44>
    Serial.printf("Pinging MQTT \n");
   d42f0:	f001 ff54 	bl	d619c <_Z16_fetch_usbserialv>
   d42f4:	4a21      	ldr	r2, [pc, #132]	; (d437c <loop+0xa0>)
   d42f6:	2100      	movs	r1, #0
   d42f8:	f001 fd71 	bl	d5dde <_ZN5Print11printf_implEbPKcz>
    if(! mqtt.ping()) {
   d42fc:	2101      	movs	r1, #1
   d42fe:	4820      	ldr	r0, [pc, #128]	; (d4380 <loop+0xa4>)
   d4300:	f000 ff60 	bl	d51c4 <_ZN13Adafruit_MQTT4pingEh>
   d4304:	4605      	mov	r5, r0
   d4306:	b940      	cbnz	r0, d431a <loop+0x3e>
      Serial.printf("Disconnecting \n");
   d4308:	f001 ff48 	bl	d619c <_Z16_fetch_usbserialv>
   d430c:	4a1d      	ldr	r2, [pc, #116]	; (d4384 <loop+0xa8>)
   d430e:	4629      	mov	r1, r5
   d4310:	f001 fd65 	bl	d5dde <_ZN5Print11printf_implEbPKcz>
      mqtt.disconnect();
   d4314:	481a      	ldr	r0, [pc, #104]	; (d4380 <loop+0xa4>)
   d4316:	f000 ff41 	bl	d519c <_ZN13Adafruit_MQTT10disconnectEv>
   d431a:	f001 f995 	bl	d5648 <HAL_Timer_Get_Milli_Seconds>
    }
    last = millis();
   d431e:	6020      	str	r0, [r4, #0]
   d4320:	f001 f992 	bl	d5648 <HAL_Timer_Get_Milli_Seconds>
  }

  if((millis()-lastTime > updateTime)) {
   d4324:	4b18      	ldr	r3, [pc, #96]	; (d4388 <loop+0xac>)
   d4326:	681a      	ldr	r2, [r3, #0]
   d4328:	1a80      	subs	r0, r0, r2
   d432a:	4a18      	ldr	r2, [pc, #96]	; (d438c <loop+0xb0>)
   d432c:	4290      	cmp	r0, r2
   d432e:	461c      	mov	r4, r3
   d4330:	d91b      	bls.n	d436a <loop+0x8e>
    MQTT_connect();
   d4332:	f7ff ff6d 	bl	d4210 <_Z12MQTT_connectv>
    moist = analogRead(soilPin);
   d4336:	4b16      	ldr	r3, [pc, #88]	; (d4390 <loop+0xb4>)
   d4338:	4d16      	ldr	r5, [pc, #88]	; (d4394 <loop+0xb8>)
   d433a:	8818      	ldrh	r0, [r3, #0]
   d433c:	f002 fcf4 	bl	d6d28 <analogRead>
   d4340:	6028      	str	r0, [r5, #0]
    printMoist(moist);
   d4342:	f7ff fee7 	bl	d4114 <_Z10printMoisti>

    //Publish to Adafruit.io
    if(mqtt.Update()) {
   d4346:	480e      	ldr	r0, [pc, #56]	; (d4380 <loop+0xa4>)
   d4348:	f000 fe5e 	bl	d5008 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d434c:	b150      	cbz	r0, d4364 <loop+0x88>
      Serial.printf("Publishing Moisture Data: %i \n",moist);
   d434e:	f001 ff25 	bl	d619c <_Z16_fetch_usbserialv>
   d4352:	2100      	movs	r1, #0
   d4354:	682b      	ldr	r3, [r5, #0]
   d4356:	4a10      	ldr	r2, [pc, #64]	; (d4398 <loop+0xbc>)
   d4358:	f001 fd41 	bl	d5dde <_ZN5Print11printf_implEbPKcz>
      Moisture.publish(moist);
   d435c:	6829      	ldr	r1, [r5, #0]
   d435e:	480f      	ldr	r0, [pc, #60]	; (d439c <loop+0xc0>)
   d4360:	f001 f8c6 	bl	d54f0 <_ZN21Adafruit_MQTT_Publish7publishEi>
   d4364:	f001 f970 	bl	d5648 <HAL_Timer_Get_Milli_Seconds>
    } 

    lastTime=millis();
   d4368:	6020      	str	r0, [r4, #0]
  }
  delay(1);
   d436a:	2001      	movs	r0, #1
}
   d436c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Moisture.publish(moist);
    } 

    lastTime=millis();
  }
  delay(1);
   d4370:	f001 bd82 	b.w	d5e78 <delay>
   d4374:	2003e2d0 	.word	0x2003e2d0
   d4378:	0001d4c0 	.word	0x0001d4c0
   d437c:	000d72ca 	.word	0x000d72ca
   d4380:	2003e2d4 	.word	0x2003e2d4
   d4384:	000d72d9 	.word	0x000d72d9
   d4388:	2003e3cc 	.word	0x2003e3cc
   d438c:	000927c0 	.word	0x000927c0
   d4390:	2003de24 	.word	0x2003de24
   d4394:	2003e2c0 	.word	0x2003e2c0
   d4398:	000d72e9 	.word	0x000d72e9
   d439c:	2003e2c4 	.word	0x2003e2c4

000d43a0 <_ZN16Adafruit_SSD1306D0Ev>:
   d43a0:	b510      	push	{r4, lr}
   d43a2:	2124      	movs	r1, #36	; 0x24
   d43a4:	4604      	mov	r4, r0
   d43a6:	f002 fd47 	bl	d6e38 <_ZdlPvj>
   d43aa:	4620      	mov	r0, r4
   d43ac:	bd10      	pop	{r4, pc}

000d43ae <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d43ae:	b510      	push	{r4, lr}
   d43b0:	21d4      	movs	r1, #212	; 0xd4
   d43b2:	4604      	mov	r4, r0
   d43b4:	f002 fd40 	bl	d6e38 <_ZdlPvj>
   d43b8:	4620      	mov	r0, r4
   d43ba:	bd10      	pop	{r4, pc}

000d43bc <_GLOBAL__sub_I_display>:
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d43bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d43be:	4c19      	ldr	r4, [pc, #100]	; (d4424 <_GLOBAL__sub_I_display+0x68>)
   d43c0:	4d19      	ldr	r5, [pc, #100]	; (d4428 <_GLOBAL__sub_I_display+0x6c>)
#include "Adafruit_MQTT/Adafruit_MQTT.h" 
#include "Adafruit_MQTT/Adafruit_MQTT_SPARK.h" 
#include "Adafruit_MQTT/Adafruit_MQTT.h" 

/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d43c2:	4e1a      	ldr	r6, [pc, #104]	; (d442c <_GLOBAL__sub_I_display+0x70>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43c4:	f001 f8a8 	bl	d5518 <HAL_Pin_Map>
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d43c8:	f04f 31ff 	mov.w	r1, #4294967295
   d43cc:	4620      	mov	r0, r4
   d43ce:	f000 fa03 	bl	d47d8 <_ZN16Adafruit_SSD1306C1Ea>
   d43d2:	462a      	mov	r2, r5
   d43d4:	4916      	ldr	r1, [pc, #88]	; (d4430 <_GLOBAL__sub_I_display+0x74>)
   d43d6:	4620      	mov	r0, r4
   d43d8:	f002 fd20 	bl	d6e1c <__aeabi_atexit>
#include "Adafruit_MQTT/Adafruit_MQTT.h" 
#include "Adafruit_MQTT/Adafruit_MQTT_SPARK.h" 
#include "Adafruit_MQTT/Adafruit_MQTT.h" 

/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d43dc:	4630      	mov	r0, r6
   d43de:	f002 fb43 	bl	d6a68 <_ZN9TCPClientC1Ev>
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d43e2:	4c14      	ldr	r4, [pc, #80]	; (d4434 <_GLOBAL__sub_I_display+0x78>)
   d43e4:	4914      	ldr	r1, [pc, #80]	; (d4438 <_GLOBAL__sub_I_display+0x7c>)
   d43e6:	462a      	mov	r2, r5
   d43e8:	4630      	mov	r0, r6
   d43ea:	f002 fd17 	bl	d6e1c <__aeabi_atexit>
   d43ee:	4b13      	ldr	r3, [pc, #76]	; (d443c <_GLOBAL__sub_I_display+0x80>)
   d43f0:	9300      	str	r3, [sp, #0]
   d43f2:	f240 725b 	movw	r2, #1883	; 0x75b
   d43f6:	4b12      	ldr	r3, [pc, #72]	; (d4440 <_GLOBAL__sub_I_display+0x84>)
   d43f8:	4912      	ldr	r1, [pc, #72]	; (d4444 <_GLOBAL__sub_I_display+0x88>)
   d43fa:	4620      	mov	r0, r4
   d43fc:	f000 fe3a 	bl	d5074 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4400:	4b11      	ldr	r3, [pc, #68]	; (d4448 <_GLOBAL__sub_I_display+0x8c>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4402:	4912      	ldr	r1, [pc, #72]	; (d444c <_GLOBAL__sub_I_display+0x90>)
   d4404:	6023      	str	r3, [r4, #0]
   d4406:	462a      	mov	r2, r5
   d4408:	4620      	mov	r0, r4
   d440a:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d440e:	f002 fd05 	bl	d6e1c <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
Adafruit_MQTT_Publish Moisture = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Africa_Moisture");
   d4412:	4a0f      	ldr	r2, [pc, #60]	; (d4450 <_GLOBAL__sub_I_display+0x94>)
   d4414:	480f      	ldr	r0, [pc, #60]	; (d4454 <_GLOBAL__sub_I_display+0x98>)
   d4416:	2300      	movs	r3, #0
   d4418:	4621      	mov	r1, r4
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d441a:	b002      	add	sp, #8
   d441c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 

/****************************** Feeds ***************************************/ 
Adafruit_MQTT_Publish Moisture = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Africa_Moisture");
   d4420:	f001 b852 	b.w	d54c8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d4424:	2003e3a8 	.word	0x2003e3a8
   d4428:	2003e2a0 	.word	0x2003e2a0
   d442c:	2003e2a4 	.word	0x2003e2a4
   d4430:	000d40c9 	.word	0x000d40c9
   d4434:	2003e2d4 	.word	0x2003e2d4
   d4438:	000d40cd 	.word	0x000d40cd
   d443c:	000d731f 	.word	0x000d731f
   d4440:	000d7308 	.word	0x000d7308
   d4444:	000d730f 	.word	0x000d730f
   d4448:	000d78d4 	.word	0x000d78d4
   d444c:	000d40cb 	.word	0x000d40cb
   d4450:	000d7340 	.word	0x000d7340
   d4454:	2003e2c4 	.word	0x2003e2c4

000d4458 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4458:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d445a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d445c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4460:	2c02      	cmp	r4, #2
   d4462:	d008      	beq.n	d4476 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4464:	2c03      	cmp	r4, #3
   d4466:	d00f      	beq.n	d4488 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4468:	2c01      	cmp	r4, #1
   d446a:	d170      	bne.n	d454e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d446c:	8904      	ldrh	r4, [r0, #8]
   d446e:	3c01      	subs	r4, #1
   d4470:	1aa2      	subs	r2, r4, r2
   d4472:	b212      	sxth	r2, r2
      break;
   d4474:	e00c      	b.n	d4490 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4476:	8944      	ldrh	r4, [r0, #10]
   d4478:	3c01      	subs	r4, #1
   d447a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d447c:	8904      	ldrh	r4, [r0, #8]
   d447e:	1ae4      	subs	r4, r4, r3
   d4480:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4482:	b212      	sxth	r2, r2
      x -= (w-1);
   d4484:	b209      	sxth	r1, r1
      break;
   d4486:	e062      	b.n	d454e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4488:	8944      	ldrh	r4, [r0, #10]
   d448a:	1ae4      	subs	r4, r4, r3
   d448c:	1a61      	subs	r1, r4, r1
   d448e:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4490:	2a00      	cmp	r2, #0
   d4492:	db5b      	blt.n	d454c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4494:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4498:	4294      	cmp	r4, r2
   d449a:	f340 8090 	ble.w	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d449e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d44a0:	bfbe      	ittt	lt
   d44a2:	185b      	addlt	r3, r3, r1
   d44a4:	b21b      	sxthlt	r3, r3
    __y = 0;
   d44a6:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d44a8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d44ac:	18cc      	adds	r4, r1, r3
   d44ae:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d44b0:	bfc4      	itt	gt
   d44b2:	1a43      	subgt	r3, r0, r1
   d44b4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d44b6:	2b00      	cmp	r3, #0
   d44b8:	f340 8081 	ble.w	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d44bc:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d44be:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d44c0:	4f3f      	ldr	r7, [pc, #252]	; (d45c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d44c2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d44c6:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d44ca:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d44cc:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d44d0:	d017      	beq.n	d4502 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d44d2:	f1c1 0108 	rsb	r1, r1, #8
   d44d6:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d44d8:	493a      	ldr	r1, [pc, #232]	; (d45c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d44da:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d44dc:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d44de:	bf3f      	itttt	cc
   d44e0:	ebc3 0e00 	rsbcc	lr, r3, r0
   d44e4:	21ff      	movcc	r1, #255	; 0xff
   d44e6:	fa41 f10e 	asrcc.w	r1, r1, lr
   d44ea:	400e      	andcc	r6, r1
   d44ec:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d44ee:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d44f0:	bf0c      	ite	eq
   d44f2:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d44f4:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d44f6:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d44f8:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d44fa:	d360      	bcc.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d44fc:	1a18      	subs	r0, r3, r0
   d44fe:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4500:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4502:	2b07      	cmp	r3, #7
   d4504:	d917      	bls.n	d4536 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4506:	2d01      	cmp	r5, #1
   d4508:	bf0c      	ite	eq
   d450a:	20ff      	moveq	r0, #255	; 0xff
   d450c:	2000      	movne	r0, #0
   d450e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4512:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4514:	3a08      	subs	r2, #8
   d4516:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4518:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d451a:	f801 0c80 	strb.w	r0, [r1, #-128]
   d451e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4522:	d8f7      	bhi.n	d4514 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4524:	f1a3 0208 	sub.w	r2, r3, #8
   d4528:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d452c:	3201      	adds	r2, #1
   d452e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4532:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4536:	2b00      	cmp	r3, #0
   d4538:	d041      	beq.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d453a:	4a23      	ldr	r2, [pc, #140]	; (d45c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d453c:	5cd2      	ldrb	r2, [r2, r3]
   d453e:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4540:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4542:	bf0c      	ite	eq
   d4544:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4546:	4393      	bicne	r3, r2
   d4548:	7023      	strb	r3, [r4, #0]
   d454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d454e:	2a00      	cmp	r2, #0
   d4550:	db35      	blt.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4552:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4556:	4294      	cmp	r4, r2
   d4558:	dd31      	ble.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d455a:	2900      	cmp	r1, #0
    w += x;
   d455c:	bfbc      	itt	lt
   d455e:	18c9      	addlt	r1, r1, r3
   d4560:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4562:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4566:	bfb8      	it	lt
   d4568:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d456a:	18ce      	adds	r6, r1, r3
   d456c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d456e:	bfc4      	itt	gt
   d4570:	1a63      	subgt	r3, r4, r1
   d4572:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4574:	2b00      	cmp	r3, #0
   d4576:	dd22      	ble.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4578:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d457a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d457e:	4810      	ldr	r0, [pc, #64]	; (d45c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4580:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4584:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4586:	2001      	movs	r0, #1
   d4588:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d458c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d458e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4590:	d109      	bne.n	d45a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4592:	3b01      	subs	r3, #1
   d4594:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4596:	1c5c      	adds	r4, r3, #1
   d4598:	d011      	beq.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d459a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d459e:	4310      	orrs	r0, r2
   d45a0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d45a4:	e7f5      	b.n	d4592 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d45a6:	43d2      	mvns	r2, r2
   d45a8:	b2d2      	uxtb	r2, r2
   d45aa:	3b01      	subs	r3, #1
   d45ac:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d45ae:	1c58      	adds	r0, r3, #1
   d45b0:	d005      	beq.n	d45be <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d45b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d45b6:	4010      	ands	r0, r2
   d45b8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d45bc:	e7f5      	b.n	d45aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d45be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45c0:	2003de38 	.word	0x2003de38
   d45c4:	2003de30 	.word	0x2003de30
   d45c8:	2003de28 	.word	0x2003de28

000d45cc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d45cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d45ce:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d45d0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d45d4:	2c02      	cmp	r4, #2
   d45d6:	d008      	beq.n	d45ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d45d8:	2c03      	cmp	r4, #3
   d45da:	d00f      	beq.n	d45fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d45dc:	2c01      	cmp	r4, #1
   d45de:	d112      	bne.n	d4606 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d45e0:	8904      	ldrh	r4, [r0, #8]
   d45e2:	1ae4      	subs	r4, r4, r3
   d45e4:	1aa2      	subs	r2, r4, r2
   d45e6:	b212      	sxth	r2, r2
      break;
   d45e8:	e06d      	b.n	d46c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d45ea:	8904      	ldrh	r4, [r0, #8]
   d45ec:	3c01      	subs	r4, #1
   d45ee:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d45f0:	8944      	ldrh	r4, [r0, #10]
   d45f2:	1ae4      	subs	r4, r4, r3
   d45f4:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d45f6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d45f8:	b212      	sxth	r2, r2
      break;
   d45fa:	e004      	b.n	d4606 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d45fc:	8944      	ldrh	r4, [r0, #10]
   d45fe:	3c01      	subs	r4, #1
   d4600:	1a61      	subs	r1, r4, r1
   d4602:	b209      	sxth	r1, r1
      break;
   d4604:	e05f      	b.n	d46c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4606:	2900      	cmp	r1, #0
   d4608:	db5c      	blt.n	d46c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d460a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d460e:	428c      	cmp	r4, r1
   d4610:	f340 8091 	ble.w	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4614:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4616:	bfbc      	itt	lt
   d4618:	18d2      	addlt	r2, r2, r3
   d461a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d461c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4620:	bfb8      	it	lt
   d4622:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4624:	18d4      	adds	r4, r2, r3
   d4626:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4628:	bfc4      	itt	gt
   d462a:	1a83      	subgt	r3, r0, r2
   d462c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d462e:	2b00      	cmp	r3, #0
   d4630:	f340 8081 	ble.w	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4634:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4636:	4e40      	ldr	r6, [pc, #256]	; (d4738 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4638:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d463a:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d463c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4640:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4644:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4648:	d017      	beq.n	d467a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d464a:	f1c4 0408 	rsb	r4, r4, #8
   d464e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4650:	4c3a      	ldr	r4, [pc, #232]	; (d473c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4652:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4654:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4656:	bf3f      	itttt	cc
   d4658:	ebc2 0e00 	rsbcc	lr, r2, r0
   d465c:	24ff      	movcc	r4, #255	; 0xff
   d465e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4662:	4027      	andcc	r7, r4
   d4664:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4666:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4668:	bf0c      	ite	eq
   d466a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d466c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d466e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4670:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4672:	d360      	bcc.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4674:	1a10      	subs	r0, r2, r0
   d4676:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4678:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d467a:	2a07      	cmp	r2, #7
   d467c:	d917      	bls.n	d46ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d467e:	2d01      	cmp	r5, #1
   d4680:	bf0c      	ite	eq
   d4682:	24ff      	moveq	r4, #255	; 0xff
   d4684:	2400      	movne	r4, #0
   d4686:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d468a:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d468c:	3908      	subs	r1, #8
   d468e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4690:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4692:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4696:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d469a:	d8f7      	bhi.n	d468c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d469c:	f1a2 0108 	sub.w	r1, r2, #8
   d46a0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d46a4:	3101      	adds	r1, #1
   d46a6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d46aa:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d46ae:	2a00      	cmp	r2, #0
   d46b0:	d041      	beq.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d46b2:	4923      	ldr	r1, [pc, #140]	; (d4740 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d46b4:	5c89      	ldrb	r1, [r1, r2]
   d46b6:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d46b8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d46ba:	bf0c      	ite	eq
   d46bc:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d46be:	438a      	bicne	r2, r1
   d46c0:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d46c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d46c6:	2900      	cmp	r1, #0
   d46c8:	db35      	blt.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d46ca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d46ce:	428c      	cmp	r4, r1
   d46d0:	dd31      	ble.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d46d2:	2a00      	cmp	r2, #0
    w += x;
   d46d4:	bfbc      	itt	lt
   d46d6:	18d2      	addlt	r2, r2, r3
   d46d8:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d46da:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d46de:	bfb8      	it	lt
   d46e0:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d46e2:	18d6      	adds	r6, r2, r3
   d46e4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d46e6:	bfc4      	itt	gt
   d46e8:	1aa3      	subgt	r3, r4, r2
   d46ea:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d46ec:	2b00      	cmp	r3, #0
   d46ee:	dd22      	ble.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d46f0:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d46f2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d46f6:	4810      	ldr	r0, [pc, #64]	; (d4738 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d46f8:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46fc:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d46fe:	2201      	movs	r2, #1
   d4700:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4704:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4706:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4708:	d109      	bne.n	d471e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d470a:	1e5a      	subs	r2, r3, #1
   d470c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d470e:	1c5c      	adds	r4, r3, #1
   d4710:	d011      	beq.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4712:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4716:	430a      	orrs	r2, r1
   d4718:	f800 2c01 	strb.w	r2, [r0, #-1]
   d471c:	e7f5      	b.n	d470a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d471e:	43c9      	mvns	r1, r1
   d4720:	b2c9      	uxtb	r1, r1
   d4722:	1e5a      	subs	r2, r3, #1
   d4724:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4726:	1c5a      	adds	r2, r3, #1
   d4728:	d005      	beq.n	d4736 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d472a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d472e:	400a      	ands	r2, r1
   d4730:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4734:	e7f5      	b.n	d4722 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4738:	2003de38 	.word	0x2003de38
   d473c:	2003de30 	.word	0x2003de30
   d4740:	2003de28 	.word	0x2003de28

000d4744 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4746:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4748:	4606      	mov	r6, r0
   d474a:	4614      	mov	r4, r2
   d474c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d474e:	db3f      	blt.n	d47d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4750:	f000 fbd4 	bl	d4efc <_ZN12Adafruit_GFX5widthEv>
   d4754:	4285      	cmp	r5, r0
   d4756:	da3b      	bge.n	d47d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4758:	2c00      	cmp	r4, #0
   d475a:	db39      	blt.n	d47d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d475c:	4630      	mov	r0, r6
   d475e:	f000 fbd0 	bl	d4f02 <_ZN12Adafruit_GFX6heightEv>
   d4762:	4284      	cmp	r4, r0
   d4764:	da34      	bge.n	d47d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4766:	4630      	mov	r0, r6
   d4768:	f000 fbc6 	bl	d4ef8 <_ZN12Adafruit_GFX11getRotationEv>
   d476c:	2802      	cmp	r0, #2
   d476e:	d127      	bne.n	d47c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4770:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4772:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4774:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4776:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4778:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d477a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d477c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d477e:	b204      	sxth	r4, r0
   d4780:	e006      	b.n	d4790 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4782:	2801      	cmp	r0, #1
   d4784:	d104      	bne.n	d4790 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4786:	8933      	ldrh	r3, [r6, #8]
   d4788:	3b01      	subs	r3, #1
   d478a:	1b1b      	subs	r3, r3, r4
   d478c:	462c      	mov	r4, r5
   d478e:	b21d      	sxth	r5, r3
   d4790:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4792:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4794:	fb94 f0f0 	sdiv	r0, r4, r0
   d4798:	b200      	sxth	r0, r0
   d479a:	4b0e      	ldr	r3, [pc, #56]	; (d47d4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d479c:	f004 0207 	and.w	r2, r4, #7
   d47a0:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d47a4:	d104      	bne.n	d47b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d47a6:	4097      	lsls	r7, r2
   d47a8:	5c5a      	ldrb	r2, [r3, r1]
   d47aa:	4317      	orrs	r7, r2
   d47ac:	545f      	strb	r7, [r3, r1]
   d47ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d47b0:	5c58      	ldrb	r0, [r3, r1]
   d47b2:	2701      	movs	r7, #1
   d47b4:	fa07 f202 	lsl.w	r2, r7, r2
   d47b8:	ea20 0202 	bic.w	r2, r0, r2
   d47bc:	545a      	strb	r2, [r3, r1]
   d47be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d47c0:	2803      	cmp	r0, #3
   d47c2:	d1de      	bne.n	d4782 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d47c4:	8973      	ldrh	r3, [r6, #10]
   d47c6:	3b01      	subs	r3, #1
   d47c8:	1b5b      	subs	r3, r3, r5
   d47ca:	4625      	mov	r5, r4
   d47cc:	b21c      	sxth	r4, r3
   d47ce:	e7df      	b.n	d4790 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d47d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d47d2:	bf00      	nop
   d47d4:	2003de38 	.word	0x2003de38

000d47d8 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d47d8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d47da:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d47dc:	4604      	mov	r4, r0
   d47de:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d47e0:	2180      	movs	r1, #128	; 0x80
   d47e2:	f000 fa9f 	bl	d4d24 <_ZN12Adafruit_GFXC1Ess>
   d47e6:	4b06      	ldr	r3, [pc, #24]	; (d4800 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d47e8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d47ea:	23ff      	movs	r3, #255	; 0xff
   d47ec:	7763      	strb	r3, [r4, #29]
   d47ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d47f2:	77e3      	strb	r3, [r4, #31]
   d47f4:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d47f6:	f884 5020 	strb.w	r5, [r4, #32]
}
   d47fa:	4620      	mov	r0, r4
   d47fc:	bd38      	pop	{r3, r4, r5, pc}
   d47fe:	bf00      	nop
   d4800:	000d7368 	.word	0x000d7368

000d4804 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4804:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4808:	2100      	movs	r1, #0
   d480a:	4801      	ldr	r0, [pc, #4]	; (d4810 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d480c:	f002 bcb8 	b.w	d7180 <memset>
   d4810:	2003de38 	.word	0x2003de38

000d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4814:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4816:	4d09      	ldr	r5, [pc, #36]	; (d483c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4818:	6829      	ldr	r1, [r5, #0]
   d481a:	f011 0401 	ands.w	r4, r1, #1
   d481e:	d10a      	bne.n	d4836 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4820:	4628      	mov	r0, r5
   d4822:	f7ff fc49 	bl	d40b8 <__cxa_guard_acquire>
   d4826:	b130      	cbz	r0, d4836 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4828:	4621      	mov	r1, r4
   d482a:	4805      	ldr	r0, [pc, #20]	; (d4840 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d482c:	f001 f93c 	bl	d5aa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4830:	4628      	mov	r0, r5
   d4832:	f7ff fc46 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4836:	4802      	ldr	r0, [pc, #8]	; (d4840 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4838:	bd38      	pop	{r3, r4, r5, pc}
   d483a:	bf00      	nop
   d483c:	2003e3d0 	.word	0x2003e3d0
   d4840:	2003e3d4 	.word	0x2003e3d4

000d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4844:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4846:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d484a:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d484c:	4604      	mov	r4, r0
   d484e:	460d      	mov	r5, r1
  if (sid != -1)
   d4850:	d028      	beq.n	d48a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4852:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4856:	2101      	movs	r1, #1
   d4858:	b280      	uxth	r0, r0
   d485a:	f002 fa4c 	bl	d6cf6 <digitalWrite>
    digitalWrite(dc, LOW);
   d485e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4862:	2100      	movs	r1, #0
   d4864:	b280      	uxth	r0, r0
   d4866:	f002 fa46 	bl	d6cf6 <digitalWrite>
    digitalWrite(cs, LOW);
   d486a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d486e:	2100      	movs	r1, #0
   d4870:	b280      	uxth	r0, r0
   d4872:	f002 fa40 	bl	d6cf6 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4876:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d487a:	b12b      	cbz	r3, d4888 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d487c:	f7ff ffca 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4880:	4629      	mov	r1, r5
   d4882:	f001 f9bb 	bl	d5bfc <_ZN8SPIClass8transferEh>
   d4886:	e005      	b.n	d4894 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4888:	462b      	mov	r3, r5
   d488a:	2201      	movs	r2, #1
   d488c:	7fa1      	ldrb	r1, [r4, #30]
   d488e:	7f60      	ldrb	r0, [r4, #29]
   d4890:	f002 fa61 	bl	d6d56 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4894:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4898:	2101      	movs	r1, #1
   d489a:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d489c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d48a0:	f002 ba29 	b.w	d6cf6 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d48a4:	f002 fa94 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d48a8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d48ac:	f001 fd66 	bl	d637c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d48b0:	f002 fa8e 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d48b4:	6803      	ldr	r3, [r0, #0]
   d48b6:	2100      	movs	r1, #0
   d48b8:	689b      	ldr	r3, [r3, #8]
   d48ba:	4798      	blx	r3
    Wire.write(c);
   d48bc:	f002 fa88 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d48c0:	6803      	ldr	r3, [r0, #0]
   d48c2:	4629      	mov	r1, r5
   d48c4:	689b      	ldr	r3, [r3, #8]
   d48c6:	4798      	blx	r3
    Wire.endTransmission();
   d48c8:	f002 fa82 	bl	d6dd0 <_Z19__fetch_global_Wirev>
  }
}
   d48cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d48d0:	f001 bd5b 	b.w	d638a <_ZN7TwoWire15endTransmissionEv>

000d48d4 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d48d4:	b538      	push	{r3, r4, r5, lr}
   d48d6:	4604      	mov	r4, r0
   d48d8:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d48da:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d48dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d48e0:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d48e2:	3301      	adds	r3, #1
   d48e4:	d037      	beq.n	d4956 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d48e6:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d48ea:	2101      	movs	r1, #1
   d48ec:	b280      	uxth	r0, r0
   d48ee:	f002 f9f1 	bl	d6cd4 <pinMode>
    pinMode(cs, OUTPUT);
   d48f2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d48f6:	2101      	movs	r1, #1
   d48f8:	b280      	uxth	r0, r0
   d48fa:	f002 f9eb 	bl	d6cd4 <pinMode>
    if (!hwSPI){
   d48fe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4902:	b95b      	cbnz	r3, d491c <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4904:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4908:	2101      	movs	r1, #1
   d490a:	b280      	uxth	r0, r0
   d490c:	f002 f9e2 	bl	d6cd4 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4910:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4914:	2101      	movs	r1, #1
   d4916:	b280      	uxth	r0, r0
   d4918:	f002 f9dc 	bl	d6cd4 <pinMode>
    	}
    if (hwSPI){
   d491c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4920:	b1eb      	cbz	r3, d495e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4922:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4926:	2101      	movs	r1, #1
   d4928:	b280      	uxth	r0, r0
   d492a:	f002 f9e4 	bl	d6cf6 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d492e:	f7ff ff71 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4932:	2101      	movs	r1, #1
   d4934:	f001 f8d3 	bl	d5ade <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4938:	f7ff ff6c 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d493c:	2110      	movs	r1, #16
   d493e:	f001 f939 	bl	d5bb4 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4942:	f7ff ff67 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4946:	2100      	movs	r1, #0
   d4948:	f001 f8da 	bl	d5b00 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d494c:	f7ff ff62 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4950:	f001 f8b4 	bl	d5abc <_ZN8SPIClass5beginEv>
   d4954:	e003      	b.n	d495e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4956:	f002 fa3b 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d495a:	f001 fd05 	bl	d6368 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d495e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4962:	2101      	movs	r1, #1
   d4964:	b280      	uxth	r0, r0
   d4966:	f002 f9b5 	bl	d6cd4 <pinMode>
  digitalWrite(rst, HIGH);
   d496a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d496e:	2101      	movs	r1, #1
   d4970:	b280      	uxth	r0, r0
   d4972:	f002 f9c0 	bl	d6cf6 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4976:	2001      	movs	r0, #1
   d4978:	f001 fa7e 	bl	d5e78 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d497c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4980:	2100      	movs	r1, #0
   d4982:	b280      	uxth	r0, r0
   d4984:	f002 f9b7 	bl	d6cf6 <digitalWrite>
  // wait 10ms
  delay(10);
   d4988:	200a      	movs	r0, #10
   d498a:	f001 fa75 	bl	d5e78 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d498e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4992:	2101      	movs	r1, #1
   d4994:	b280      	uxth	r0, r0
   d4996:	f002 f9ae 	bl	d6cf6 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d499a:	4620      	mov	r0, r4
   d499c:	21ae      	movs	r1, #174	; 0xae
   d499e:	f7ff ff51 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d49a2:	4620      	mov	r0, r4
   d49a4:	21d5      	movs	r1, #213	; 0xd5
   d49a6:	f7ff ff4d 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d49aa:	4620      	mov	r0, r4
   d49ac:	2180      	movs	r1, #128	; 0x80
   d49ae:	f7ff ff49 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d49b2:	4620      	mov	r0, r4
   d49b4:	21a8      	movs	r1, #168	; 0xa8
   d49b6:	f7ff ff45 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d49ba:	4620      	mov	r0, r4
   d49bc:	213f      	movs	r1, #63	; 0x3f
   d49be:	f7ff ff41 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d49c2:	4620      	mov	r0, r4
   d49c4:	21d3      	movs	r1, #211	; 0xd3
   d49c6:	f7ff ff3d 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d49ca:	4620      	mov	r0, r4
   d49cc:	2100      	movs	r1, #0
   d49ce:	f7ff ff39 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d49d2:	4620      	mov	r0, r4
   d49d4:	2140      	movs	r1, #64	; 0x40
   d49d6:	f7ff ff35 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d49da:	218d      	movs	r1, #141	; 0x8d
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff ff31 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d49e2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d49e4:	bf0c      	ite	eq
   d49e6:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d49e8:	2114      	movne	r1, #20
   d49ea:	4620      	mov	r0, r4
   d49ec:	f7ff ff2a 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d49f0:	4620      	mov	r0, r4
   d49f2:	2120      	movs	r1, #32
   d49f4:	f7ff ff26 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d49f8:	4620      	mov	r0, r4
   d49fa:	2100      	movs	r1, #0
   d49fc:	f7ff ff22 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4a00:	4620      	mov	r0, r4
   d4a02:	21a1      	movs	r1, #161	; 0xa1
   d4a04:	f7ff ff1e 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4a08:	4620      	mov	r0, r4
   d4a0a:	21c8      	movs	r1, #200	; 0xc8
   d4a0c:	f7ff ff1a 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4a10:	4620      	mov	r0, r4
   d4a12:	21da      	movs	r1, #218	; 0xda
   d4a14:	f7ff ff16 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4a18:	4620      	mov	r0, r4
   d4a1a:	2112      	movs	r1, #18
   d4a1c:	f7ff ff12 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4a20:	2181      	movs	r1, #129	; 0x81
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff0e 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4a28:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4a2a:	bf0c      	ite	eq
   d4a2c:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4a2e:	21cf      	movne	r1, #207	; 0xcf
   d4a30:	4620      	mov	r0, r4
   d4a32:	f7ff ff07 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4a36:	21d9      	movs	r1, #217	; 0xd9
   d4a38:	4620      	mov	r0, r4
   d4a3a:	f7ff ff03 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4a3e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4a40:	bf0c      	ite	eq
   d4a42:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4a44:	21f1      	movne	r1, #241	; 0xf1
   d4a46:	4620      	mov	r0, r4
   d4a48:	f7ff fefc 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	21db      	movs	r1, #219	; 0xdb
   d4a50:	f7ff fef8 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4a54:	4620      	mov	r0, r4
   d4a56:	2140      	movs	r1, #64	; 0x40
   d4a58:	f7ff fef4 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	21a4      	movs	r1, #164	; 0xa4
   d4a60:	f7ff fef0 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4a64:	4620      	mov	r0, r4
   d4a66:	21a6      	movs	r1, #166	; 0xa6
   d4a68:	f7ff feec 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	21af      	movs	r1, #175	; 0xaf
}
   d4a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4a74:	f7ff bee6 	b.w	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4a78 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4a7c:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4a7e:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4a80:	f7ff fee0 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4a84:	2100      	movs	r1, #0
   d4a86:	4620      	mov	r0, r4
   d4a88:	f7ff fedc 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4a8c:	217f      	movs	r1, #127	; 0x7f
   d4a8e:	4620      	mov	r0, r4
   d4a90:	f7ff fed8 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4a94:	2122      	movs	r1, #34	; 0x22
   d4a96:	4620      	mov	r0, r4
   d4a98:	f7ff fed4 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4a9c:	2100      	movs	r1, #0
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	f7ff fed0 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4aa4:	2107      	movs	r1, #7
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f7ff fecc 	bl	d4844 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4aac:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4ab0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4b70 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4ab4:	3301      	adds	r3, #1
   d4ab6:	d035      	beq.n	d4b24 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4ab8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4abc:	2101      	movs	r1, #1
   d4abe:	b280      	uxth	r0, r0
   d4ac0:	f002 f919 	bl	d6cf6 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4ac4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4ac8:	2101      	movs	r1, #1
   d4aca:	b280      	uxth	r0, r0
   d4acc:	f002 f913 	bl	d6cf6 <digitalWrite>
    digitalWrite(cs, LOW);
   d4ad0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	b280      	uxth	r0, r0
   d4ad8:	f002 f90d 	bl	d6cf6 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4adc:	2001      	movs	r0, #1
   d4ade:	f000 fdab 	bl	d5638 <HAL_Delay_Microseconds>
   d4ae2:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4ae4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4ae8:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4aec:	b12b      	cbz	r3, d4afa <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4aee:	f7ff fe91 	bl	d4814 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4af2:	4631      	mov	r1, r6
   d4af4:	f001 f882 	bl	d5bfc <_ZN8SPIClass8transferEh>
   d4af8:	e005      	b.n	d4b06 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4afa:	4633      	mov	r3, r6
   d4afc:	2201      	movs	r2, #1
   d4afe:	7fa1      	ldrb	r1, [r4, #30]
   d4b00:	7f60      	ldrb	r0, [r4, #29]
   d4b02:	f002 f928 	bl	d6d56 <shiftOut>
   d4b06:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4b08:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4b0c:	d1ea      	bne.n	d4ae4 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4b0e:	2001      	movs	r0, #1
   d4b10:	f000 fd92 	bl	d5638 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4b14:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b18:	2101      	movs	r1, #1
   d4b1a:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4b20:	f002 b8e9 	b.w	d6cf6 <digitalWrite>
   d4b24:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4b26:	f002 f953 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d4b2a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4b2e:	f001 fc25 	bl	d637c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4b32:	f002 f94d 	bl	d6dd0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4b36:	6803      	ldr	r3, [r0, #0]
   d4b38:	2140      	movs	r1, #64	; 0x40
   d4b3a:	689b      	ldr	r3, [r3, #8]
   d4b3c:	4798      	blx	r3
   d4b3e:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4b40:	f002 f946 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d4b44:	19af      	adds	r7, r5, r6
   d4b46:	6803      	ldr	r3, [r0, #0]
   d4b48:	b2bf      	uxth	r7, r7
   d4b4a:	689b      	ldr	r3, [r3, #8]
   d4b4c:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4b50:	3601      	adds	r6, #1
   d4b52:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4b54:	2e10      	cmp	r6, #16
   d4b56:	d1f3      	bne.n	d4b40 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4b58:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4b5a:	f002 f939 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d4b5e:	b2ad      	uxth	r5, r5
   d4b60:	f001 fc13 	bl	d638a <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4b64:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4b68:	d1dd      	bne.n	d4b26 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b6e:	bf00      	nop
   d4b70:	2003de38 	.word	0x2003de38

000d4b74 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4b74:	f000 bcd0 	b.w	d5518 <HAL_Pin_Map>

000d4b78 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b7c:	b085      	sub	sp, #20
   d4b7e:	461e      	mov	r6, r3
   d4b80:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4b84:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4b88:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4b8a:	1a9a      	subs	r2, r3, r2
   d4b8c:	2a00      	cmp	r2, #0
   d4b8e:	bfb8      	it	lt
   d4b90:	4252      	neglt	r2, r2
   d4b92:	9200      	str	r2, [sp, #0]
   d4b94:	1a72      	subs	r2, r6, r1
   d4b96:	2a00      	cmp	r2, #0
   d4b98:	bfb8      	it	lt
   d4b9a:	4252      	neglt	r2, r2
   d4b9c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4b9e:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4ba0:	9a00      	ldr	r2, [sp, #0]
   d4ba2:	9901      	ldr	r1, [sp, #4]
   d4ba4:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4ba6:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4ba8:	dd05      	ble.n	d4bb6 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4baa:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4bac:	461e      	mov	r6, r3
   d4bae:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4bb0:	4622      	mov	r2, r4
    swap(x0, y0);
   d4bb2:	462c      	mov	r4, r5
   d4bb4:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4bb6:	42b4      	cmp	r4, r6
   d4bb8:	dd05      	ble.n	d4bc6 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4bba:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4bbc:	461d      	mov	r5, r3
   d4bbe:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4bc0:	4622      	mov	r2, r4
   d4bc2:	4634      	mov	r4, r6
   d4bc4:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4bc6:	1b5a      	subs	r2, r3, r5
   d4bc8:	2a00      	cmp	r2, #0
   d4bca:	bfb8      	it	lt
   d4bcc:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4bce:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4bd2:	429d      	cmp	r5, r3
   d4bd4:	bfb4      	ite	lt
   d4bd6:	2301      	movlt	r3, #1
   d4bd8:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4bdc:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4be0:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4be2:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4be4:	fa0f f788 	sxth.w	r7, r8
   d4be8:	2202      	movs	r2, #2
   d4bea:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4bee:	42b4      	cmp	r4, r6
   d4bf0:	dc1f      	bgt.n	d4c32 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4bf2:	9a01      	ldr	r2, [sp, #4]
   d4bf4:	9b00      	ldr	r3, [sp, #0]
   d4bf6:	4293      	cmp	r3, r2
   d4bf8:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4bfc:	bfc8      	it	gt
   d4bfe:	4622      	movgt	r2, r4
   d4c00:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c04:	bfc8      	it	gt
   d4c06:	4629      	movgt	r1, r5
   d4c08:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4c0a:	bfdc      	itt	le
   d4c0c:	462a      	movle	r2, r5
   d4c0e:	4621      	movle	r1, r4
   d4c10:	4648      	mov	r0, r9
   d4c12:	47d8      	blx	fp
    }
    err -= dy;
   d4c14:	9b03      	ldr	r3, [sp, #12]
   d4c16:	1aff      	subs	r7, r7, r3
   d4c18:	b2bb      	uxth	r3, r7
   d4c1a:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4c1c:	2f00      	cmp	r7, #0
   d4c1e:	da05      	bge.n	d4c2c <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4c20:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4c22:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4c26:	4415      	add	r5, r2
   d4c28:	b22d      	sxth	r5, r5
      err += dx;
   d4c2a:	b23f      	sxth	r7, r7
   d4c2c:	3401      	adds	r4, #1
   d4c2e:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4c30:	e7dd      	b.n	d4bee <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4c32:	b005      	add	sp, #20
   d4c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4c38 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c3c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4c40:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c42:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4c46:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c48:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4c4a:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c4c:	4691      	mov	r9, r2
   d4c4e:	460d      	mov	r5, r1
   d4c50:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4c52:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4c54:	6823      	ldr	r3, [r4, #0]
   d4c56:	9600      	str	r6, [sp, #0]
   d4c58:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4c5c:	444a      	add	r2, r9
   d4c5e:	69df      	ldr	r7, [r3, #28]
   d4c60:	4629      	mov	r1, r5
   d4c62:	4643      	mov	r3, r8
   d4c64:	4620      	mov	r0, r4
   d4c66:	b212      	sxth	r2, r2
   d4c68:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4c6a:	6823      	ldr	r3, [r4, #0]
   d4c6c:	9600      	str	r6, [sp, #0]
   d4c6e:	699f      	ldr	r7, [r3, #24]
   d4c70:	464a      	mov	r2, r9
   d4c72:	4653      	mov	r3, sl
   d4c74:	4629      	mov	r1, r5
   d4c76:	4620      	mov	r0, r4
   d4c78:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4c7a:	6823      	ldr	r3, [r4, #0]
   d4c7c:	960a      	str	r6, [sp, #40]	; 0x28
   d4c7e:	f108 31ff 	add.w	r1, r8, #4294967295
   d4c82:	4429      	add	r1, r5
   d4c84:	699d      	ldr	r5, [r3, #24]
   d4c86:	464a      	mov	r2, r9
   d4c88:	4653      	mov	r3, sl
   d4c8a:	b209      	sxth	r1, r1
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	46ac      	mov	ip, r5
}
   d4c90:	b002      	add	sp, #8
   d4c92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4c96:	4760      	bx	ip

000d4c98 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4c9a:	3b01      	subs	r3, #1
   d4c9c:	4413      	add	r3, r2
   d4c9e:	6804      	ldr	r4, [r0, #0]
   d4ca0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4ca4:	9501      	str	r5, [sp, #4]
   d4ca6:	b21b      	sxth	r3, r3
   d4ca8:	9300      	str	r3, [sp, #0]
   d4caa:	6964      	ldr	r4, [r4, #20]
   d4cac:	460b      	mov	r3, r1
   d4cae:	47a0      	blx	r4
}
   d4cb0:	b003      	add	sp, #12
   d4cb2:	bd30      	pop	{r4, r5, pc}

000d4cb4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4cb6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4cba:	6804      	ldr	r4, [r0, #0]
   d4cbc:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4cc0:	3b01      	subs	r3, #1
   d4cc2:	440b      	add	r3, r1
   d4cc4:	6964      	ldr	r4, [r4, #20]
   d4cc6:	b21b      	sxth	r3, r3
   d4cc8:	47a0      	blx	r4
}
   d4cca:	b003      	add	sp, #12
   d4ccc:	bd30      	pop	{r4, r5, pc}

000d4cce <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4cce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4cd2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4cd6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4cda:	4605      	mov	r5, r0
   d4cdc:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4cde:	460c      	mov	r4, r1
   d4ce0:	eb01 0a03 	add.w	sl, r1, r3
   d4ce4:	4554      	cmp	r4, sl
   d4ce6:	da0b      	bge.n	d4d00 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4ce8:	682b      	ldr	r3, [r5, #0]
   d4cea:	f8cd 9000 	str.w	r9, [sp]
   d4cee:	699e      	ldr	r6, [r3, #24]
   d4cf0:	4621      	mov	r1, r4
   d4cf2:	4643      	mov	r3, r8
   d4cf4:	463a      	mov	r2, r7
   d4cf6:	4628      	mov	r0, r5
   d4cf8:	3401      	adds	r4, #1
   d4cfa:	47b0      	blx	r6
   d4cfc:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4cfe:	e7f1      	b.n	d4ce4 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4d00:	b002      	add	sp, #8
   d4d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4d06 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4d06:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4d08:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4d0c:	6804      	ldr	r4, [r0, #0]
   d4d0e:	9101      	str	r1, [sp, #4]
   d4d10:	9200      	str	r2, [sp, #0]
   d4d12:	2200      	movs	r2, #0
   d4d14:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4d18:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	47a0      	blx	r4
}
   d4d1e:	b002      	add	sp, #8
   d4d20:	bd10      	pop	{r4, pc}

000d4d22 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4d22:	4770      	bx	lr

000d4d24 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4d24:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4d26:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d28:	2400      	movs	r4, #0
   d4d2a:	4d08      	ldr	r5, [pc, #32]	; (d4d4c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4d2c:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4d2e:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4d30:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4d36:	2201      	movs	r2, #1
   d4d38:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4d3a:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4d3c:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4d3e:	8204      	strh	r4, [r0, #16]
   d4d40:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4d42:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4d44:	82c1      	strh	r1, [r0, #22]
   d4d46:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4d48:	7682      	strb	r2, [r0, #26]
}
   d4d4a:	bd30      	pop	{r4, r5, pc}
   d4d4c:	000d73a0 	.word	0x000d73a0

000d4d50 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d54:	b08f      	sub	sp, #60	; 0x3c
   d4d56:	4605      	mov	r5, r0
   d4d58:	9106      	str	r1, [sp, #24]
   d4d5a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4d5e:	9107      	str	r1, [sp, #28]
   d4d60:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4d64:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4d66:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4d6a:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4d6c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4d70:	4281      	cmp	r1, r0
   d4d72:	dd7c      	ble.n	d4e6e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4d74:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4d78:	4291      	cmp	r1, r2
   d4d7a:	dd78      	ble.n	d4e6e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4d7c:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4d7e:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4d82:	2800      	cmp	r0, #0
   d4d84:	dd73      	ble.n	d4e6e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4d86:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4d8a:	2800      	cmp	r0, #0
   d4d8c:	dd6f      	ble.n	d4e6e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4d8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4d92:	b296      	uxth	r6, r2
   d4d94:	930c      	str	r3, [sp, #48]	; 0x30
   d4d96:	f106 0308 	add.w	r3, r6, #8
   d4d9a:	b29b      	uxth	r3, r3
   d4d9c:	9109      	str	r1, [sp, #36]	; 0x24
   d4d9e:	2400      	movs	r4, #0
   d4da0:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4da2:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4da4:	bf1c      	itt	ne
   d4da6:	4b33      	ldrne	r3, [pc, #204]	; (d4e74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4da8:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4daa:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4dac:	bf16      	itet	ne
   d4dae:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4db0:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4db4:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4db8:	9604      	str	r6, [sp, #16]
   d4dba:	fa1f f388 	uxth.w	r3, r8
   d4dbe:	9303      	str	r3, [sp, #12]
   d4dc0:	9a03      	ldr	r2, [sp, #12]
   d4dc2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4dc6:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4dca:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4dce:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4dd0:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4dd2:	920a      	str	r2, [sp, #40]	; 0x28
   d4dd4:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4dd6:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4dda:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4ddc:	f019 0f01 	tst.w	r9, #1
   d4de0:	d011      	beq.n	d4e06 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4de2:	f1b8 0f01 	cmp.w	r8, #1
   d4de6:	682b      	ldr	r3, [r5, #0]
   d4de8:	d103      	bne.n	d4df2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4dea:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4dee:	9b07      	ldr	r3, [sp, #28]
   d4df0:	e014      	b.n	d4e1c <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4df2:	9a07      	ldr	r2, [sp, #28]
   d4df4:	9201      	str	r2, [sp, #4]
   d4df6:	f8cd a000 	str.w	sl, [sp]
   d4dfa:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4dfe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4e02:	4653      	mov	r3, sl
   d4e04:	e018      	b.n	d4e38 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4e06:	9b07      	ldr	r3, [sp, #28]
   d4e08:	9a08      	ldr	r2, [sp, #32]
   d4e0a:	4293      	cmp	r3, r2
   d4e0c:	d017      	beq.n	d4e3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4e0e:	f1b8 0f01 	cmp.w	r8, #1
   d4e12:	682b      	ldr	r3, [r5, #0]
   d4e14:	d107      	bne.n	d4e26 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4e16:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4e1a:	4613      	mov	r3, r2
   d4e1c:	b23a      	sxth	r2, r7
   d4e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4e20:	4628      	mov	r0, r5
   d4e22:	47d8      	blx	fp
   d4e24:	e00b      	b.n	d4e3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4e26:	9a08      	ldr	r2, [sp, #32]
   d4e28:	9201      	str	r2, [sp, #4]
   d4e2a:	f8cd a000 	str.w	sl, [sp]
   d4e2e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4e32:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4e36:	4653      	mov	r3, sl
   d4e38:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4e3a:	4628      	mov	r0, r5
   d4e3c:	47d8      	blx	fp
   d4e3e:	9b04      	ldr	r3, [sp, #16]
   d4e40:	9a03      	ldr	r2, [sp, #12]
   d4e42:	4413      	add	r3, r2
   d4e44:	b29b      	uxth	r3, r3
   d4e46:	9304      	str	r3, [sp, #16]
   d4e48:	9b05      	ldr	r3, [sp, #20]
   d4e4a:	4413      	add	r3, r2
   d4e4c:	b29b      	uxth	r3, r3
   d4e4e:	3701      	adds	r7, #1
   d4e50:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4e54:	b2bf      	uxth	r7, r7
   d4e56:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4e58:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4e5c:	d1be      	bne.n	d4ddc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4e60:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4e62:	3401      	adds	r4, #1
   d4e64:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4e68:	b264      	sxtb	r4, r4
   d4e6a:	9309      	str	r3, [sp, #36]	; 0x24
   d4e6c:	d199      	bne.n	d4da2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4e6e:	b00f      	add	sp, #60	; 0x3c
   d4e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e74:	000d73d0 	.word	0x000d73d0

000d4e78 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4e78:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4e7a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4e7c:	b085      	sub	sp, #20
   d4e7e:	4604      	mov	r4, r0
   d4e80:	460b      	mov	r3, r1

  if (c == '\n') {
   d4e82:	d104      	bne.n	d4e8e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4e84:	7e02      	ldrb	r2, [r0, #24]
   d4e86:	8a43      	ldrh	r3, [r0, #18]
   d4e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4e8c:	e023      	b.n	d4ed6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4e8e:	290d      	cmp	r1, #13
   d4e90:	d024      	beq.n	d4edc <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4e92:	7e05      	ldrb	r5, [r0, #24]
   d4e94:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4e98:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4e9c:	9502      	str	r5, [sp, #8]
   d4e9e:	8ac5      	ldrh	r5, [r0, #22]
   d4ea0:	9501      	str	r5, [sp, #4]
   d4ea2:	8a85      	ldrh	r5, [r0, #20]
   d4ea4:	9500      	str	r5, [sp, #0]
   d4ea6:	f7ff ff53 	bl	d4d50 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4eaa:	7e22      	ldrb	r2, [r4, #24]
   d4eac:	8a23      	ldrh	r3, [r4, #16]
   d4eae:	b291      	uxth	r1, r2
   d4eb0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4eb4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4eb8:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4eba:	b21b      	sxth	r3, r3
   d4ebc:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4ebe:	b168      	cbz	r0, d4edc <_ZN12Adafruit_GFX5writeEh+0x64>
   d4ec0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4ec4:	f06f 0505 	mvn.w	r5, #5
   d4ec8:	fb05 0202 	mla	r2, r5, r2, r0
   d4ecc:	4293      	cmp	r3, r2
   d4ece:	dd05      	ble.n	d4edc <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4ed0:	8a63      	ldrh	r3, [r4, #18]
   d4ed2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4ed6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4ed8:	2300      	movs	r3, #0
   d4eda:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4edc:	2001      	movs	r0, #1
   d4ede:	b005      	add	sp, #20
   d4ee0:	bd30      	pop	{r4, r5, pc}

000d4ee2 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4ee2:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4ee4:	8242      	strh	r2, [r0, #18]
   d4ee6:	4770      	bx	lr

000d4ee8 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4ee8:	2900      	cmp	r1, #0
   d4eea:	bf08      	it	eq
   d4eec:	2101      	moveq	r1, #1
   d4eee:	7601      	strb	r1, [r0, #24]
   d4ef0:	4770      	bx	lr

000d4ef2 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4ef2:	82c1      	strh	r1, [r0, #22]
   d4ef4:	8281      	strh	r1, [r0, #20]
   d4ef6:	4770      	bx	lr

000d4ef8 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4ef8:	7e40      	ldrb	r0, [r0, #25]
   d4efa:	4770      	bx	lr

000d4efc <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4efc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4f00:	4770      	bx	lr

000d4f02 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4f02:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4f06:	4770      	bx	lr

000d4f08 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4f08:	f000 bb06 	b.w	d5518 <HAL_Pin_Map>

000d4f0c <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4f0c:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4f0e:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4f12:	6803      	ldr	r3, [r0, #0]
   d4f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f16:	4798      	blx	r3
}
   d4f18:	3000      	adds	r0, #0
   d4f1a:	bf18      	it	ne
   d4f1c:	2001      	movne	r0, #1
   d4f1e:	bd08      	pop	{r3, pc}

000d4f20 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f22:	4606      	mov	r6, r0
   d4f24:	460f      	mov	r7, r1
   d4f26:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4f28:	b1c4      	cbz	r4, d4f5c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4f2a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f2e:	6803      	ldr	r3, [r0, #0]
   d4f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f32:	4798      	blx	r3
   d4f34:	b908      	cbnz	r0, d4f3a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4f36:	2000      	movs	r0, #0
   d4f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4f3a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4f3e:	2cfa      	cmp	r4, #250	; 0xfa
   d4f40:	6803      	ldr	r3, [r0, #0]
   d4f42:	4625      	mov	r5, r4
   d4f44:	bfa8      	it	ge
   d4f46:	25fa      	movge	r5, #250	; 0xfa
   d4f48:	68db      	ldr	r3, [r3, #12]
   d4f4a:	462a      	mov	r2, r5
   d4f4c:	4639      	mov	r1, r7
   d4f4e:	4798      	blx	r3
   d4f50:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f52:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4f54:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f56:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4f58:	d0e6      	beq.n	d4f28 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4f5a:	e7ec      	b.n	d4f36 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4f5c:	2001      	movs	r0, #1
}
   d4f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f60 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f64:	4606      	mov	r6, r0
   d4f66:	4688      	mov	r8, r1
   d4f68:	4691      	mov	r9, r2
   d4f6a:	461f      	mov	r7, r3
   d4f6c:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4f6e:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4f70:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f74:	6803      	ldr	r3, [r0, #0]
   d4f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f78:	4798      	blx	r3
   d4f7a:	b1d0      	cbz	r0, d4fb2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4f7c:	2d00      	cmp	r5, #0
   d4f7e:	db18      	blt.n	d4fb2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4f80:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f84:	6803      	ldr	r3, [r0, #0]
   d4f86:	691b      	ldr	r3, [r3, #16]
   d4f88:	4798      	blx	r3
   d4f8a:	b160      	cbz	r0, d4fa6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d4f8c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f90:	6803      	ldr	r3, [r0, #0]
   d4f92:	695b      	ldr	r3, [r3, #20]
   d4f94:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d4f96:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d4f9a:	3401      	adds	r4, #1
   d4f9c:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d4f9e:	454c      	cmp	r4, r9
   d4fa0:	d007      	beq.n	d4fb2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d4fa2:	463d      	mov	r5, r7
   d4fa4:	e7ec      	b.n	d4f80 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4fa6:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4fa8:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4faa:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4fac:	f000 ff64 	bl	d5e78 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4fb0:	e7de      	b.n	d4f70 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fb8 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d4fb8:	b570      	push	{r4, r5, r6, lr}
   d4fba:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d4fbc:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d4fc0:	2296      	movs	r2, #150	; 0x96
   d4fc2:	2100      	movs	r1, #0
   d4fc4:	4628      	mov	r0, r5
   d4fc6:	f002 f8db 	bl	d7180 <memset>
  strcpy((char *)buffer, servername);
   d4fca:	6861      	ldr	r1, [r4, #4]
   d4fcc:	4628      	mov	r0, r5
   d4fce:	f002 f907 	bl	d71e0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4fd2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4fd6:	8922      	ldrh	r2, [r4, #8]
   d4fd8:	6803      	ldr	r3, [r0, #0]
   d4fda:	4629      	mov	r1, r5
   d4fdc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4fde:	2300      	movs	r3, #0
   d4fe0:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4fe2:	3000      	adds	r0, #0
   d4fe4:	bf18      	it	ne
   d4fe6:	2001      	movne	r0, #1
   d4fe8:	bd70      	pop	{r4, r5, r6, pc}

000d4fea <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4fea:	b510      	push	{r4, lr}
   d4fec:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4fee:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4ff2:	6803      	ldr	r3, [r0, #0]
   d4ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ff6:	4798      	blx	r3
   d4ff8:	b120      	cbz	r0, d5004 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4ffa:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4ffe:	6803      	ldr	r3, [r0, #0]
   d5000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5002:	4798      	blx	r3
  }
  return true;
}
   d5004:	2001      	movs	r0, #1
   d5006:	bd10      	pop	{r4, pc}

000d5008 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5008:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d500a:	6803      	ldr	r3, [r0, #0]
   d500c:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d500e:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d5010:	4798      	blx	r3
   d5012:	b9c8      	cbnz	r0, d5048 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5014:	4620      	mov	r0, r4
   d5016:	f000 f9fe 	bl	d5416 <_ZN13Adafruit_MQTT7connectEv>
   d501a:	2504      	movs	r5, #4
   d501c:	b170      	cbz	r0, d503c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d501e:	3d01      	subs	r5, #1
   d5020:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5024:	d00a      	beq.n	d503c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5026:	4620      	mov	r0, r4
   d5028:	f000 f8b8 	bl	d519c <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d502c:	f241 3088 	movw	r0, #5000	; 0x1388
   d5030:	f000 ff22 	bl	d5e78 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5034:	4620      	mov	r0, r4
   d5036:	f000 f9ee 	bl	d5416 <_ZN13Adafruit_MQTT7connectEv>
   d503a:	e7ef      	b.n	d501c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d503c:	6823      	ldr	r3, [r4, #0]
   d503e:	4620      	mov	r0, r4
   d5040:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5046:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5048:	bd70      	pop	{r4, r5, r6, pc}

000d504a <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d504a:	f000 ba65 	b.w	d5518 <HAL_Pin_Map>

000d504e <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d504e:	b570      	push	{r4, r5, r6, lr}
   d5050:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5052:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5054:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5056:	f002 f8cb 	bl	d71f0 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d505a:	1203      	asrs	r3, r0, #8
   d505c:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d505e:	7060      	strb	r0, [r4, #1]
   d5060:	b285      	uxth	r5, r0
   d5062:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5064:	462a      	mov	r2, r5
   d5066:	4631      	mov	r1, r6
   d5068:	4620      	mov	r0, r4
   d506a:	f002 f8c9 	bl	d7200 <strncpy>
  return p+len;
}
   d506e:	1960      	adds	r0, r4, r5
   d5070:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5074 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5074:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5076:	6103      	str	r3, [r0, #16]
  password = pass;
   d5078:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d507a:	4d0d      	ldr	r5, [pc, #52]	; (d50b0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d507c:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d507e:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5080:	4a0c      	ldr	r2, [pc, #48]	; (d50b4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5082:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5084:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5086:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5088:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d508a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d508e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5092:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5096:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d509a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d509e:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d50a0:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d50a2:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d50a6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d50aa:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d50ae:	bd30      	pop	{r4, r5, pc}
   d50b0:	000d78f8 	.word	0x000d78f8
   d50b4:	000d7949 	.word	0x000d7949

000d50b8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50bc:	fa0f fa83 	sxth.w	sl, r3
   d50c0:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50c2:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50c4:	699d      	ldr	r5, [r3, #24]
   d50c6:	2201      	movs	r2, #1
   d50c8:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d50ca:	4606      	mov	r6, r0
   d50cc:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d50ce:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d50d0:	b2c0      	uxtb	r0, r0
   d50d2:	2801      	cmp	r0, #1
   d50d4:	d001      	beq.n	d50da <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d50d6:	2000      	movs	r0, #0
   d50d8:	e034      	b.n	d5144 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d50da:	1c65      	adds	r5, r4, #1
   d50dc:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d50e0:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d50e2:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d50e6:	6833      	ldr	r3, [r6, #0]
   d50e8:	699b      	ldr	r3, [r3, #24]
   d50ea:	2201      	movs	r2, #1
   d50ec:	461f      	mov	r7, r3
   d50ee:	4629      	mov	r1, r5
   d50f0:	4653      	mov	r3, sl
   d50f2:	4630      	mov	r0, r6
   d50f4:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d50f6:	b2c0      	uxtb	r0, r0
   d50f8:	2801      	cmp	r0, #1
   d50fa:	d1ec      	bne.n	d50d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d50fc:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5104:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5106:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d510a:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d510e:	d0e2      	beq.n	d50d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5110:	061b      	lsls	r3, r3, #24
   d5112:	d4e8      	bmi.n	d50e6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5114:	9b01      	ldr	r3, [sp, #4]
   d5116:	1b2c      	subs	r4, r5, r4
   d5118:	1b1b      	subs	r3, r3, r4
   d511a:	3b01      	subs	r3, #1
   d511c:	4599      	cmp	r9, r3
   d511e:	6833      	ldr	r3, [r6, #0]
   d5120:	d906      	bls.n	d5130 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d5122:	9a01      	ldr	r2, [sp, #4]
   d5124:	699f      	ldr	r7, [r3, #24]
   d5126:	3a01      	subs	r2, #1
   d5128:	1b12      	subs	r2, r2, r4
   d512a:	4653      	mov	r3, sl
   d512c:	b292      	uxth	r2, r2
   d512e:	e003      	b.n	d5138 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5130:	699f      	ldr	r7, [r3, #24]
   d5132:	fa1f f289 	uxth.w	r2, r9
   d5136:	4653      	mov	r3, sl
   d5138:	4629      	mov	r1, r5
   d513a:	4630      	mov	r0, r6
   d513c:	47b8      	blx	r7
   d513e:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5140:	4420      	add	r0, r4
   d5142:	b280      	uxth	r0, r0
}
   d5144:	b003      	add	sp, #12
   d5146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d514c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d514e:	4605      	mov	r5, r0
   d5150:	460c      	mov	r4, r1
   d5152:	4616      	mov	r6, r2
   d5154:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5156:	463b      	mov	r3, r7
   d5158:	2296      	movs	r2, #150	; 0x96
   d515a:	4621      	mov	r1, r4
   d515c:	4628      	mov	r0, r5
   d515e:	f7ff ffab 	bl	d50b8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d5162:	b148      	cbz	r0, d5178 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5164:	7823      	ldrb	r3, [r4, #0]
   d5166:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d516a:	d005      	beq.n	d5178 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d516c:	f001 f816 	bl	d619c <_Z16_fetch_usbserialv>
   d5170:	4902      	ldr	r1, [pc, #8]	; (d517c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d5172:	f000 fe0a 	bl	d5d8a <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5176:	e7ee      	b.n	d5156 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d517a:	bf00      	nop
   d517c:	000d794a 	.word	0x000d794a

000d5180 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d5180:	3102      	adds	r1, #2
   d5182:	b2c9      	uxtb	r1, r1
   d5184:	2909      	cmp	r1, #9
   d5186:	bf9a      	itte	ls
   d5188:	4b02      	ldrls	r3, [pc, #8]	; (d5194 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d518a:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d518e:	4802      	ldrhi	r0, [pc, #8]	; (d5198 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d5190:	4770      	bx	lr
   d5192:	bf00      	nop
   d5194:	000d7914 	.word	0x000d7914
   d5198:	000d795b 	.word	0x000d795b

000d519c <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d519c:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d519e:	23e0      	movs	r3, #224	; 0xe0
   d51a0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d51a4:	2300      	movs	r3, #0
   d51a6:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d51aa:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d51ac:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d51ae:	695b      	ldr	r3, [r3, #20]
   d51b0:	2202      	movs	r2, #2
   d51b2:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d51b6:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d51b8:	6823      	ldr	r3, [r4, #0]
   d51ba:	4620      	mov	r0, r4
   d51bc:	691b      	ldr	r3, [r3, #16]

}
   d51be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d51c2:	4718      	bx	r3

000d51c4 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d51c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d51c8:	4604      	mov	r4, r0
   d51ca:	460d      	mov	r5, r1
   d51cc:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d51d0:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d51d4:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d51d8:	b1d5      	cbz	r5, d5210 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d51da:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d51dc:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d51e0:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d51e4:	695b      	ldr	r3, [r3, #20]
   d51e6:	2202      	movs	r2, #2
   d51e8:	4639      	mov	r1, r7
   d51ea:	4620      	mov	r0, r4
   d51ec:	4798      	blx	r3
   d51ee:	4606      	mov	r6, r0
   d51f0:	b910      	cbnz	r0, d51f8 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d51f2:	3d01      	subs	r5, #1
   d51f4:	b2ed      	uxtb	r5, r5
   d51f6:	e7ef      	b.n	d51d8 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d51f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d51fc:	220d      	movs	r2, #13
   d51fe:	4639      	mov	r1, r7
   d5200:	4620      	mov	r0, r4
   d5202:	f7ff ffa3 	bl	d514c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d5206:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d520a:	2bd0      	cmp	r3, #208	; 0xd0
   d520c:	d1f1      	bne.n	d51f2 <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d520e:	e000      	b.n	d5212 <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d5210:	462e      	mov	r6, r5
}
   d5212:	4630      	mov	r0, r6
   d5214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5218 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5218:	b538      	push	{r3, r4, r5, lr}
   d521a:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d521c:	4608      	mov	r0, r1
   d521e:	2310      	movs	r3, #16
   d5220:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5224:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5226:	4929      	ldr	r1, [pc, #164]	; (d52cc <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5228:	f7ff ff11 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d522c:	2304      	movs	r3, #4
   d522e:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5230:	2302      	movs	r3, #2
   d5232:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5234:	69a3      	ldr	r3, [r4, #24]
   d5236:	b1ab      	cbz	r3, d5264 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5238:	781b      	ldrb	r3, [r3, #0]
   d523a:	b19b      	cbz	r3, d5264 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d523c:	2306      	movs	r3, #6
   d523e:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5240:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5244:	2b01      	cmp	r3, #1
   d5246:	d101      	bne.n	d524c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5248:	230e      	movs	r3, #14
   d524a:	e002      	b.n	d5252 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d524c:	2b02      	cmp	r3, #2
   d524e:	d101      	bne.n	d5254 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5250:	231e      	movs	r3, #30
   d5252:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5254:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5258:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d525a:	bf02      	ittt	eq
   d525c:	7843      	ldrbeq	r3, [r0, #1]
   d525e:	f043 0320 	orreq.w	r3, r3, #32
   d5262:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5264:	6923      	ldr	r3, [r4, #16]
   d5266:	781b      	ldrb	r3, [r3, #0]
   d5268:	b11b      	cbz	r3, d5272 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d526a:	7843      	ldrb	r3, [r0, #1]
   d526c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5270:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5272:	6963      	ldr	r3, [r4, #20]
   d5274:	781b      	ldrb	r3, [r3, #0]
   d5276:	b11b      	cbz	r3, d5280 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5278:	7843      	ldrb	r3, [r0, #1]
   d527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d527e:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5280:	2301      	movs	r3, #1
   d5282:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5284:	232c      	movs	r3, #44	; 0x2c
   d5286:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5288:	68e1      	ldr	r1, [r4, #12]
   d528a:	780b      	ldrb	r3, [r1, #0]
   d528c:	b11b      	cbz	r3, d5296 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d528e:	3004      	adds	r0, #4
   d5290:	f7ff fedd 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
   d5294:	e002      	b.n	d529c <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5296:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5298:	7143      	strb	r3, [r0, #5]
      p++;
   d529a:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d529c:	69a1      	ldr	r1, [r4, #24]
   d529e:	b131      	cbz	r1, d52ae <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d52a0:	780b      	ldrb	r3, [r1, #0]
   d52a2:	b123      	cbz	r3, d52ae <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d52a4:	f7ff fed3 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d52a8:	69e1      	ldr	r1, [r4, #28]
   d52aa:	f7ff fed0 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d52ae:	6921      	ldr	r1, [r4, #16]
   d52b0:	780b      	ldrb	r3, [r1, #0]
   d52b2:	b10b      	cbz	r3, d52b8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d52b4:	f7ff fecb 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d52b8:	6961      	ldr	r1, [r4, #20]
   d52ba:	780b      	ldrb	r3, [r1, #0]
   d52bc:	b10b      	cbz	r3, d52c2 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d52be:	f7ff fec6 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d52c2:	1b40      	subs	r0, r0, r5
   d52c4:	b2c0      	uxtb	r0, r0
   d52c6:	1e83      	subs	r3, r0, #2
   d52c8:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d52ca:	bd38      	pop	{r3, r4, r5, pc}
   d52cc:	000d7969 	.word	0x000d7969

000d52d0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d52d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52d4:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d52d6:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d52d8:	460e      	mov	r6, r1
   d52da:	4691      	mov	r9, r2
   d52dc:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d52de:	f001 ff87 	bl	d71f0 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d52e2:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d52e6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d52ea:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d52ec:	f1b8 0f00 	cmp.w	r8, #0
   d52f0:	d101      	bne.n	d52f6 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d52f2:	1c83      	adds	r3, r0, #2
   d52f4:	e000      	b.n	d52f8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d52f6:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d52f8:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d52fc:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d52fe:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5300:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5304:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5306:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d530a:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d530c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5310:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5312:	bf18      	it	ne
   d5314:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5318:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d531c:	2b00      	cmp	r3, #0
   d531e:	d1f5      	bne.n	d530c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5320:	4649      	mov	r1, r9
   d5322:	f7ff fe94 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>
   d5326:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5328:	f1b8 0f00 	cmp.w	r8, #0
   d532c:	d00c      	beq.n	d5348 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d532e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5332:	0a12      	lsrs	r2, r2, #8
   d5334:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5336:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d533a:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d533c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5340:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5342:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5344:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5348:	4622      	mov	r2, r4
   d534a:	4639      	mov	r1, r7
   d534c:	4618      	mov	r0, r3
   d534e:	f001 fefc 	bl	d714a <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5352:	4420      	add	r0, r4
   d5354:	1b80      	subs	r0, r0, r6
}
   d5356:	b280      	uxth	r0, r0
   d5358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d535c <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d535c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d535e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5362:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5366:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5368:	e88d 0048 	stmia.w	sp, {r3, r6}
   d536c:	4613      	mov	r3, r2
   d536e:	460a      	mov	r2, r1
   d5370:	4629      	mov	r1, r5
   d5372:	f7ff ffad 	bl	d52d0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5376:	6823      	ldr	r3, [r4, #0]
   d5378:	4602      	mov	r2, r0
   d537a:	695b      	ldr	r3, [r3, #20]
   d537c:	4629      	mov	r1, r5
   d537e:	4620      	mov	r0, r4
   d5380:	4798      	blx	r3
   d5382:	b908      	cbnz	r0, d5388 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5384:	2000      	movs	r0, #0
   d5386:	e017      	b.n	d53b8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5388:	b1b6      	cbz	r6, d53b8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d538a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d538e:	2296      	movs	r2, #150	; 0x96
   d5390:	4629      	mov	r1, r5
   d5392:	4620      	mov	r0, r4
   d5394:	f7ff fe90 	bl	d50b8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5398:	2804      	cmp	r0, #4
   d539a:	d1f3      	bne.n	d5384 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d539c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53a0:	111b      	asrs	r3, r3, #4
   d53a2:	2b04      	cmp	r3, #4
   d53a4:	d1ee      	bne.n	d5384 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d53a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d53a8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d53ac:	ba5b      	rev16	r3, r3
   d53ae:	3301      	adds	r3, #1
   d53b0:	b29b      	uxth	r3, r3
   d53b2:	1ac3      	subs	r3, r0, r3
   d53b4:	4258      	negs	r0, r3
   d53b6:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d53b8:	b002      	add	sp, #8
   d53ba:	bd70      	pop	{r4, r5, r6, pc}

000d53bc <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d53bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d53be:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d53c0:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d53c2:	461f      	mov	r7, r3
   d53c4:	460e      	mov	r6, r1
   d53c6:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d53c8:	f001 ff12 	bl	d71f0 <strlen>
   d53cc:	9700      	str	r7, [sp, #0]
   d53ce:	b283      	uxth	r3, r0
   d53d0:	4622      	mov	r2, r4
   d53d2:	4631      	mov	r1, r6
   d53d4:	4628      	mov	r0, r5
   d53d6:	f7ff ffc1 	bl	d535c <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d53da:	b003      	add	sp, #12
   d53dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53de <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d53de:	b538      	push	{r3, r4, r5, lr}
   d53e0:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d53e2:	2382      	movs	r3, #130	; 0x82
   d53e4:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d53e6:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d53e8:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d53ec:	0a09      	lsrs	r1, r1, #8
   d53ee:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d53f0:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d53f4:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d53f6:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d53fa:	3101      	adds	r1, #1
   d53fc:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5400:	4611      	mov	r1, r2
   d5402:	1d20      	adds	r0, r4, #4
   d5404:	f7ff fe23 	bl	d504e <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5408:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d540c:	1b00      	subs	r0, r0, r4
   d540e:	b2c0      	uxtb	r0, r0
   d5410:	1e83      	subs	r3, r0, #2
   d5412:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5414:	bd38      	pop	{r3, r4, r5, pc}

000d5416 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d541a:	6803      	ldr	r3, [r0, #0]
   d541c:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d541e:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5420:	4798      	blx	r3
   d5422:	b918      	cbnz	r0, d542c <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5424:	f04f 30ff 	mov.w	r0, #4294967295
   d5428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d542c:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5430:	4629      	mov	r1, r5
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff fef0 	bl	d5218 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5438:	6823      	ldr	r3, [r4, #0]
   d543a:	b282      	uxth	r2, r0
   d543c:	695b      	ldr	r3, [r3, #20]
   d543e:	4629      	mov	r1, r5
   d5440:	4620      	mov	r0, r4
   d5442:	4798      	blx	r3
   d5444:	2800      	cmp	r0, #0
   d5446:	d0ed      	beq.n	d5424 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5448:	f241 7370 	movw	r3, #6000	; 0x1770
   d544c:	2296      	movs	r2, #150	; 0x96
   d544e:	4629      	mov	r1, r5
   d5450:	4620      	mov	r0, r4
   d5452:	f7ff fe31 	bl	d50b8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5456:	b2c0      	uxtb	r0, r0
   d5458:	2804      	cmp	r0, #4
   d545a:	d1e3      	bne.n	d5424 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d545c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d545e:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5462:	d1df      	bne.n	d5424 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5464:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5468:	b110      	cbz	r0, d5470 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d546a:	b240      	sxtb	r0, r0
   d546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5470:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5474:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5478:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d547c:	b1fb      	cbz	r3, d54be <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d547e:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5480:	683a      	ldr	r2, [r7, #0]
   d5482:	4629      	mov	r1, r5
   d5484:	7913      	ldrb	r3, [r2, #4]
   d5486:	6812      	ldr	r2, [r2, #0]
   d5488:	4620      	mov	r0, r4
   d548a:	f7ff ffa8 	bl	d53de <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d548e:	6823      	ldr	r3, [r4, #0]
   d5490:	b282      	uxth	r2, r0
   d5492:	695b      	ldr	r3, [r3, #20]
   d5494:	4629      	mov	r1, r5
   d5496:	4620      	mov	r0, r4
   d5498:	4798      	blx	r3
   d549a:	2800      	cmp	r0, #0
   d549c:	d0c2      	beq.n	d5424 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d549e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d54a2:	2209      	movs	r2, #9
   d54a4:	4629      	mov	r1, r5
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff fe50 	bl	d514c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d54ac:	b938      	cbnz	r0, d54be <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d54ae:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d54b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d54b4:	d1e4      	bne.n	d5480 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d54b6:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d54ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d54be:	4547      	cmp	r7, r8
   d54c0:	d1da      	bne.n	d5478 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d54c2:	2000      	movs	r0, #0
   d54c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54c8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d54c8:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d54ca:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d54ce:	7203      	strb	r3, [r0, #8]
}
   d54d0:	bd10      	pop	{r4, pc}

000d54d2 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d54d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d54d4:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d54d6:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d54d8:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d54da:	a901      	add	r1, sp, #4
   d54dc:	f000 fbc0 	bl	d5c60 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d54e0:	7a23      	ldrb	r3, [r4, #8]
   d54e2:	aa01      	add	r2, sp, #4
   d54e4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d54e8:	f7ff ff68 	bl	d53bc <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d54ec:	b004      	add	sp, #16
   d54ee:	bd10      	pop	{r4, pc}

000d54f0 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d54f0:	f7ff bfef 	b.w	d54d2 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d54f4 <_GLOBAL__sub_I__Z11printBufferPht>:
   d54f4:	f000 b810 	b.w	d5518 <HAL_Pin_Map>

000d54f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <netdb_freeaddrinfo+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	689b      	ldr	r3, [r3, #8]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030268 	.word	0x00030268

000d5508 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <netdb_getaddrinfo+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	68db      	ldr	r3, [r3, #12]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030268 	.word	0x00030268

000d5518 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <HAL_Pin_Map+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	681b      	ldr	r3, [r3, #0]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	0003022c 	.word	0x0003022c

000d5528 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <HAL_Validate_Pin_Function+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	685b      	ldr	r3, [r3, #4]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	0003022c 	.word	0x0003022c

000d5538 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <HAL_Pin_Mode+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	689b      	ldr	r3, [r3, #8]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003022c 	.word	0x0003022c

000d5548 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_Get_Pin_Mode+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	68db      	ldr	r3, [r3, #12]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003022c 	.word	0x0003022c

000d5558 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <HAL_GPIO_Write+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	691b      	ldr	r3, [r3, #16]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003022c 	.word	0x0003022c

000d5568 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_ADC_Read+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003022c 	.word	0x0003022c

000d5578 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_SPI_Begin+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	681b      	ldr	r3, [r3, #0]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030230 	.word	0x00030230

000d5588 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_SPI_Set_Bit_Order+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	689b      	ldr	r3, [r3, #8]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030230 	.word	0x00030230

000d5598 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_SPI_Set_Data_Mode+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	68db      	ldr	r3, [r3, #12]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030230 	.word	0x00030230

000d55a8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	691b      	ldr	r3, [r3, #16]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030230 	.word	0x00030230

000d55b8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <HAL_SPI_Send_Receive_Data+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	695b      	ldr	r3, [r3, #20]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030230 	.word	0x00030230

000d55c8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <HAL_SPI_Init+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	69db      	ldr	r3, [r3, #28]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030230 	.word	0x00030230

000d55d8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <HAL_SPI_Is_Enabled+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	6a1b      	ldr	r3, [r3, #32]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030230 	.word	0x00030230

000d55e8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <HAL_SPI_Info+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030230 	.word	0x00030230

000d55f8 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <HAL_SPI_Acquire+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030230 	.word	0x00030230

000d5608 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <HAL_SPI_Release+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030230 	.word	0x00030230

000d5618 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <if_index_to_name+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	695b      	ldr	r3, [r3, #20]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003026c 	.word	0x0003026c

000d5628 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <HAL_RNG_GetRandomNumber+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	685b      	ldr	r3, [r3, #4]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030218 	.word	0x00030218

000d5638 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <HAL_Delay_Microseconds+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	68db      	ldr	r3, [r3, #12]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030218 	.word	0x00030218

000d5648 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	695b      	ldr	r3, [r3, #20]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030218 	.word	0x00030218

000d5658 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <os_thread_is_current+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	689b      	ldr	r3, [r3, #8]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030248 	.word	0x00030248

000d5668 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <os_thread_join+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	691b      	ldr	r3, [r3, #16]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030248 	.word	0x00030248

000d5678 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <os_thread_cleanup+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	695b      	ldr	r3, [r3, #20]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030248 	.word	0x00030248

000d5688 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <os_mutex_recursive_create+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030248 	.word	0x00030248

000d5698 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <os_mutex_recursive_destroy+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030248 	.word	0x00030248

000d56a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <inet_inet_ntop+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	695b      	ldr	r3, [r3, #20]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030264 	.word	0x00030264

000d56b8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <inet_htonl+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6a1b      	ldr	r3, [r3, #32]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030264 	.word	0x00030264

000d56c8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <inet_htons+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030264 	.word	0x00030264

000d56d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_USART_Init+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	681b      	ldr	r3, [r3, #0]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	0003023c 	.word	0x0003023c

000d56e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_USART_Write_Data+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	68db      	ldr	r3, [r3, #12]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003023c 	.word	0x0003023c

000d56f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_USART_Available_Data+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	691b      	ldr	r3, [r3, #16]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003023c 	.word	0x0003023c

000d5708 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_USART_Read_Data+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	695b      	ldr	r3, [r3, #20]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	0003023c 	.word	0x0003023c

000d5718 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_USART_Peek_Data+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	699b      	ldr	r3, [r3, #24]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003023c 	.word	0x0003023c

000d5728 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_USART_Flush_Data+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	69db      	ldr	r3, [r3, #28]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003023c 	.word	0x0003023c

000d5738 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_USART_Is_Enabled+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6a1b      	ldr	r3, [r3, #32]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003023c 	.word	0x0003023c

000d5748 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_USART_Available_Data_For_Write+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003023c 	.word	0x0003023c

000d5758 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <HAL_I2C_Begin+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	68db      	ldr	r3, [r3, #12]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030228 	.word	0x00030228

000d5768 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <HAL_I2C_Begin_Transmission+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	699b      	ldr	r3, [r3, #24]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030228 	.word	0x00030228

000d5778 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <HAL_I2C_End_Transmission+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	69db      	ldr	r3, [r3, #28]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030228 	.word	0x00030228

000d5788 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <HAL_I2C_Write_Data+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6a1b      	ldr	r3, [r3, #32]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030228 	.word	0x00030228

000d5798 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <HAL_I2C_Available_Data+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030228 	.word	0x00030228

000d57a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <HAL_I2C_Read_Data+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030228 	.word	0x00030228

000d57b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <HAL_I2C_Peek_Data+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030228 	.word	0x00030228

000d57c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <HAL_I2C_Flush_Data+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030228 	.word	0x00030228

000d57d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_I2C_Is_Enabled+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030228 	.word	0x00030228

000d57e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_I2C_Init+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030228 	.word	0x00030228

000d57f8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <sock_setsockopt+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	699b      	ldr	r3, [r3, #24]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030238 	.word	0x00030238

000d5808 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <sock_close+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	69db      	ldr	r3, [r3, #28]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030238 	.word	0x00030238

000d5818 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <sock_connect+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	6a1b      	ldr	r3, [r3, #32]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030238 	.word	0x00030238

000d5828 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <sock_recv+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030238 	.word	0x00030238

000d5838 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <sock_send+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030238 	.word	0x00030238

000d5848 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <sock_socket+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030238 	.word	0x00030238

000d5858 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <HAL_USB_USART_Init+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	681b      	ldr	r3, [r3, #0]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003024c 	.word	0x0003024c

000d5868 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_USB_USART_Begin+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	685b      	ldr	r3, [r3, #4]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003024c 	.word	0x0003024c

000d5878 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_USB_USART_Available_Data+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	691b      	ldr	r3, [r3, #16]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003024c 	.word	0x0003024c

000d5888 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	695b      	ldr	r3, [r3, #20]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003024c 	.word	0x0003024c

000d5898 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <HAL_USB_USART_Receive_Data+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	699b      	ldr	r3, [r3, #24]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003024c 	.word	0x0003024c

000d58a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_USB_USART_Send_Data+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	69db      	ldr	r3, [r3, #28]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003024c 	.word	0x0003024c

000d58b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_USB_USART_Flush_Data+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6a1b      	ldr	r3, [r3, #32]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003024c 	.word	0x0003024c

000d58c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <panic_+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030260 	.word	0x00030260

000d58d8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <log_message+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030260 	.word	0x00030260

000d58e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <set_system_mode+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	685b      	ldr	r3, [r3, #4]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030220 	.word	0x00030220

000d58f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <system_delay_ms+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	695b      	ldr	r3, [r3, #20]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030220 	.word	0x00030220

000d5908 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b03      	ldr	r3, [pc, #12]	; (d5918 <system_ctrl_set_app_request_handler+0x10>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5912:	9301      	str	r3, [sp, #4]
   d5914:	bd08      	pop	{r3, pc}
   d5916:	0000      	.short	0x0000
   d5918:	00030220 	.word	0x00030220

000d591c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b03      	ldr	r3, [pc, #12]	; (d592c <system_ctrl_set_result+0x10>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5926:	9301      	str	r3, [sp, #4]
   d5928:	bd08      	pop	{r3, pc}
   d592a:	0000      	.short	0x0000
   d592c:	00030220 	.word	0x00030220

000d5930 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <network_connect+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	685b      	ldr	r3, [r3, #4]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030240 	.word	0x00030240

000d5940 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <network_connecting+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	689b      	ldr	r3, [r3, #8]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030240 	.word	0x00030240

000d5950 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <network_disconnect+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	68db      	ldr	r3, [r3, #12]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030240 	.word	0x00030240

000d5960 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <network_ready+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	691b      	ldr	r3, [r3, #16]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030240 	.word	0x00030240

000d5970 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <network_on+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	695b      	ldr	r3, [r3, #20]
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030240 	.word	0x00030240

000d5980 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <network_off+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	699b      	ldr	r3, [r3, #24]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030240 	.word	0x00030240

000d5990 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <network_listen+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	69db      	ldr	r3, [r3, #28]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030240 	.word	0x00030240

000d59a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <network_listening+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	6a1b      	ldr	r3, [r3, #32]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030240 	.word	0x00030240

000d59b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <network_set_listen_timeout+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030240 	.word	0x00030240

000d59c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <network_get_listen_timeout+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030240 	.word	0x00030240

000d59d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030244 	.word	0x00030244

000d59e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <malloc+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	681b      	ldr	r3, [r3, #0]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	0003021c 	.word	0x0003021c

000d59f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <free+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	685b      	ldr	r3, [r3, #4]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	0003021c 	.word	0x0003021c

000d5a00 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <vsnprintf+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	0003021c 	.word	0x0003021c

000d5a10 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <__errno+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	0003021c 	.word	0x0003021c

000d5a20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a20:	2200      	movs	r2, #0
   d5a22:	4611      	mov	r1, r2
   d5a24:	6840      	ldr	r0, [r0, #4]
   d5a26:	f7ff bfbb 	b.w	d59a0 <network_listening>

000d5a2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	4611      	mov	r1, r2
   d5a2e:	6840      	ldr	r0, [r0, #4]
   d5a30:	f7ff bfc6 	b.w	d59c0 <network_get_listen_timeout>

000d5a34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a34:	2200      	movs	r2, #0
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	f7ff bfba 	b.w	d59b0 <network_set_listen_timeout>

000d5a3c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a3c:	2200      	movs	r2, #0
   d5a3e:	f081 0101 	eor.w	r1, r1, #1
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	f7ff bfa4 	b.w	d5990 <network_listen>

000d5a48 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a48:	2300      	movs	r3, #0
   d5a4a:	461a      	mov	r2, r3
   d5a4c:	4619      	mov	r1, r3
   d5a4e:	6840      	ldr	r0, [r0, #4]
   d5a50:	f7ff bf96 	b.w	d5980 <network_off>

000d5a54 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a54:	2300      	movs	r3, #0
   d5a56:	461a      	mov	r2, r3
   d5a58:	4619      	mov	r1, r3
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	f7ff bf88 	b.w	d5970 <network_on>

000d5a60 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a60:	2200      	movs	r2, #0
   d5a62:	4611      	mov	r1, r2
   d5a64:	6840      	ldr	r0, [r0, #4]
   d5a66:	f7ff bf7b 	b.w	d5960 <network_ready>

000d5a6a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	4611      	mov	r1, r2
   d5a6e:	6840      	ldr	r0, [r0, #4]
   d5a70:	f7ff bf66 	b.w	d5940 <network_connecting>

000d5a74 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a74:	2200      	movs	r2, #0
   d5a76:	2102      	movs	r1, #2
   d5a78:	6840      	ldr	r0, [r0, #4]
   d5a7a:	f7ff bf69 	b.w	d5950 <network_disconnect>

000d5a7e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a7e:	2300      	movs	r3, #0
   d5a80:	461a      	mov	r2, r3
   d5a82:	6840      	ldr	r0, [r0, #4]
   d5a84:	f7ff bf54 	b.w	d5930 <network_connect>

000d5a88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a88:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a8a:	2203      	movs	r2, #3
   d5a8c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a8e:	4a02      	ldr	r2, [pc, #8]	; (d5a98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a90:	601a      	str	r2, [r3, #0]
   d5a92:	4770      	bx	lr
   d5a94:	2003e3dc 	.word	0x2003e3dc
   d5a98:	000d7b38 	.word	0x000d7b38

000d5a9c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5a9c:	2100      	movs	r1, #0
   d5a9e:	f7ff bdab 	b.w	d55f8 <HAL_SPI_Acquire>

000d5aa2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5aa2:	2100      	movs	r1, #0
   d5aa4:	f7ff bdb0 	b.w	d5608 <HAL_SPI_Release>

000d5aa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5aa8:	b510      	push	{r4, lr}
   d5aaa:	4604      	mov	r4, r0
{
    _spi = spi;
   d5aac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5aae:	4608      	mov	r0, r1
   d5ab0:	f7ff fd8a 	bl	d55c8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5ab4:	2300      	movs	r3, #0
   d5ab6:	6063      	str	r3, [r4, #4]
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}

000d5abc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5abc:	b510      	push	{r4, lr}
   d5abe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5ac0:	7800      	ldrb	r0, [r0, #0]
   d5ac2:	f7ff ffeb 	bl	d5a9c <_ZN8SPIClass4lockEv.isra.0>
   d5ac6:	b948      	cbnz	r0, d5adc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5ac8:	7820      	ldrb	r0, [r4, #0]
   d5aca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5ace:	f7ff fd53 	bl	d5578 <HAL_SPI_Begin>
        unlock();
   d5ad2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5ad8:	f7ff bfe3 	b.w	d5aa2 <_ZN8SPIClass6unlockEv.isra.1>
   d5adc:	bd10      	pop	{r4, pc}

000d5ade <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5ade:	b538      	push	{r3, r4, r5, lr}
   d5ae0:	4604      	mov	r4, r0
    if (!lock())
   d5ae2:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5ae4:	460d      	mov	r5, r1
    if (!lock())
   d5ae6:	f7ff ffd9 	bl	d5a9c <_ZN8SPIClass4lockEv.isra.0>
   d5aea:	b940      	cbnz	r0, d5afe <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5aec:	7820      	ldrb	r0, [r4, #0]
   d5aee:	4629      	mov	r1, r5
   d5af0:	f7ff fd4a 	bl	d5588 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5af4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5afa:	f7ff bfd2 	b.w	d5aa2 <_ZN8SPIClass6unlockEv.isra.1>
   d5afe:	bd38      	pop	{r3, r4, r5, pc}

000d5b00 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5b00:	b538      	push	{r3, r4, r5, lr}
   d5b02:	4604      	mov	r4, r0
    if (!lock())
   d5b04:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5b06:	460d      	mov	r5, r1
    if (!lock())
   d5b08:	f7ff ffc8 	bl	d5a9c <_ZN8SPIClass4lockEv.isra.0>
   d5b0c:	b940      	cbnz	r0, d5b20 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5b0e:	7820      	ldrb	r0, [r4, #0]
   d5b10:	4629      	mov	r1, r5
   d5b12:	f7ff fd41 	bl	d5598 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5b16:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5b1c:	f7ff bfc1 	b.w	d5aa2 <_ZN8SPIClass6unlockEv.isra.1>
   d5b20:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b24 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5b24:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5b26:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5b28:	6018      	str	r0, [r3, #0]
   d5b2a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5b2c:	6818      	ldr	r0, [r3, #0]
   d5b2e:	4288      	cmp	r0, r1
   d5b30:	b2e5      	uxtb	r5, r4
   d5b32:	d906      	bls.n	d5b42 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5b34:	3401      	adds	r4, #1
   d5b36:	2c08      	cmp	r4, #8
   d5b38:	d002      	beq.n	d5b40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5b3a:	0840      	lsrs	r0, r0, #1
   d5b3c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5b3e:	e7f5      	b.n	d5b2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5b40:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5b44:	5d5b      	ldrb	r3, [r3, r5]
   d5b46:	7013      	strb	r3, [r2, #0]
   d5b48:	bd30      	pop	{r4, r5, pc}
   d5b4a:	bf00      	nop
   d5b4c:	000d7b64 	.word	0x000d7b64

000d5b50 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b54:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5b56:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b58:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5b5a:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5b5c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b5e:	460e      	mov	r6, r1
   d5b60:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5b62:	f7ff ff9b 	bl	d5a9c <_ZN8SPIClass4lockEv.isra.0>
   d5b66:	4605      	mov	r5, r0
   d5b68:	bb00      	cbnz	r0, d5bac <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5b6a:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5b6e:	4601      	mov	r1, r0
   d5b70:	2214      	movs	r2, #20
   d5b72:	a803      	add	r0, sp, #12
   d5b74:	f001 fb04 	bl	d7180 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b78:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5b7a:	462a      	mov	r2, r5
   d5b7c:	a903      	add	r1, sp, #12
   d5b7e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b80:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5b84:	f7ff fd30 	bl	d55e8 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5b88:	ab02      	add	r3, sp, #8
   d5b8a:	f10d 0207 	add.w	r2, sp, #7
   d5b8e:	fb07 f106 	mul.w	r1, r7, r6
   d5b92:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5b94:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5b98:	f7ff ffc4 	bl	d5b24 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5b9c:	7820      	ldrb	r0, [r4, #0]
   d5b9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5ba2:	f7ff fd01 	bl	d55a8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5ba6:	7820      	ldrb	r0, [r4, #0]
   d5ba8:	f7ff ff7b 	bl	d5aa2 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5bac:	9802      	ldr	r0, [sp, #8]
   d5bae:	b008      	add	sp, #32
   d5bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bb4 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5bb4:	b538      	push	{r3, r4, r5, lr}
   d5bb6:	4604      	mov	r4, r0
    if (!lock())
   d5bb8:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5bba:	460d      	mov	r5, r1
    if (!lock())
   d5bbc:	f7ff ff6e 	bl	d5a9c <_ZN8SPIClass4lockEv.isra.0>
   d5bc0:	b9c8      	cbnz	r0, d5bf6 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5bc2:	6861      	ldr	r1, [r4, #4]
   d5bc4:	b171      	cbz	r1, d5be4 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5bc6:	4b0c      	ldr	r3, [pc, #48]	; (d5bf8 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5bc8:	5cc2      	ldrb	r2, [r0, r3]
   d5bca:	42aa      	cmp	r2, r5
   d5bcc:	d002      	beq.n	d5bd4 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5bce:	3001      	adds	r0, #1
   d5bd0:	2808      	cmp	r0, #8
   d5bd2:	d1f9      	bne.n	d5bc8 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5bd4:	3001      	adds	r0, #1
   d5bd6:	b2c0      	uxtb	r0, r0
   d5bd8:	40c1      	lsrs	r1, r0
   d5bda:	2201      	movs	r2, #1
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ffb7 	bl	d5b50 <_ZN8SPIClass13setClockSpeedEjj>
   d5be2:	e003      	b.n	d5bec <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5be4:	4629      	mov	r1, r5
   d5be6:	7820      	ldrb	r0, [r4, #0]
   d5be8:	f7ff fcde 	bl	d55a8 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5bec:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5bf2:	f7ff bf56 	b.w	d5aa2 <_ZN8SPIClass6unlockEv.isra.1>
   d5bf6:	bd38      	pop	{r3, r4, r5, pc}
   d5bf8:	000d7b64 	.word	0x000d7b64

000d5bfc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5bfc:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5bfe:	7800      	ldrb	r0, [r0, #0]
   d5c00:	f7ff fcda 	bl	d55b8 <HAL_SPI_Send_Receive_Data>
}
   d5c04:	b2c0      	uxtb	r0, r0
   d5c06:	bd08      	pop	{r3, pc}

000d5c08 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5c08:	7800      	ldrb	r0, [r0, #0]
   d5c0a:	f7ff bce5 	b.w	d55d8 <HAL_SPI_Is_Enabled>

000d5c0e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5c0e:	b510      	push	{r4, lr}
   d5c10:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5c12:	6800      	ldr	r0, [r0, #0]
   d5c14:	b118      	cbz	r0, d5c1e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5c16:	f7ff feeb 	bl	d59f0 <free>
            wakeupSource_ = nullptr;
   d5c1a:	2300      	movs	r3, #0
   d5c1c:	6023      	str	r3, [r4, #0]
   d5c1e:	bd10      	pop	{r4, pc}

000d5c20 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c20:	b510      	push	{r4, lr}
   d5c22:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5c24:	f7ff fff3 	bl	d5c0e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c28:	4620      	mov	r0, r4
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c2c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c2e:	4c09      	ldr	r4, [pc, #36]	; (d5c54 <_GLOBAL__sub_I_System+0x28>)
   d5c30:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c32:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c36:	6020      	str	r0, [r4, #0]
   d5c38:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c3a:	71a0      	strb	r0, [r4, #6]
   d5c3c:	8120      	strh	r0, [r4, #8]
   d5c3e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c40:	f7ff fe52 	bl	d58e8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c44:	4620      	mov	r0, r4
   d5c46:	4a04      	ldr	r2, [pc, #16]	; (d5c58 <_GLOBAL__sub_I_System+0x2c>)
   d5c48:	4904      	ldr	r1, [pc, #16]	; (d5c5c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c4e:	f001 b8e5 	b.w	d6e1c <__aeabi_atexit>
   d5c52:	bf00      	nop
   d5c54:	2003e3e4 	.word	0x2003e3e4
   d5c58:	2003e2a0 	.word	0x2003e2a0
   d5c5c:	000d5c21 	.word	0x000d5c21

000d5c60 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d5c64:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d5c66:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5c68:	4615      	mov	r5, r2
   d5c6a:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d5c6c:	bf34      	ite	cc
   d5c6e:	4615      	movcc	r5, r2
   d5c70:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5c72:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d5c74:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5c76:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5c78:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d5c7c:	d107      	bne.n	d5c8e <ltoa+0x2e>
   d5c7e:	4298      	cmp	r0, r3
   d5c80:	da05      	bge.n	d5c8e <ltoa+0x2e>
      {
            *head++ = '-';
   d5c82:	232d      	movs	r3, #45	; 0x2d
   d5c84:	f101 0801 	add.w	r8, r1, #1
   d5c88:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d5c8a:	4240      	negs	r0, r0
   d5c8c:	e001      	b.n	d5c92 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d5c8e:	b1b0      	cbz	r0, d5cbe <ltoa+0x5e>
   d5c90:	46a0      	mov	r8, r4
   d5c92:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5c96:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5c98:	462a      	mov	r2, r5
   d5c9a:	4601      	mov	r1, r0
   d5c9c:	a801      	add	r0, sp, #4
   d5c9e:	f001 fa35 	bl	d710c <ldiv>
   d5ca2:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5ca4:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5ca6:	2b09      	cmp	r3, #9
   d5ca8:	bfcc      	ite	gt
   d5caa:	2237      	movgt	r2, #55	; 0x37
   d5cac:	2230      	movle	r2, #48	; 0x30
   d5cae:	fa52 f383 	uxtab	r3, r2, r3
   d5cb2:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5cb6:	3701      	adds	r7, #1
   d5cb8:	2800      	cmp	r0, #0
   d5cba:	d1ed      	bne.n	d5c98 <ltoa+0x38>
   d5cbc:	e006      	b.n	d5ccc <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5cbe:	2330      	movs	r3, #48	; 0x30
   d5cc0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5cc4:	46a0      	mov	r8, r4
   d5cc6:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5cca:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5ccc:	463a      	mov	r2, r7
   d5cce:	1c71      	adds	r1, r6, #1
   d5cd0:	4640      	mov	r0, r8
   d5cd2:	f001 fa2f 	bl	d7134 <memcpy>
      return str;
}
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	b00c      	add	sp, #48	; 0x30
   d5cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cde <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ce2:	6800      	ldr	r0, [r0, #0]
   d5ce4:	b108      	cbz	r0, d5cea <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5ce6:	f7ff fcd7 	bl	d5698 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5cea:	4620      	mov	r0, r4
   d5cec:	bd10      	pop	{r4, pc}
	...

000d5cf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5cf0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cf2:	4c06      	ldr	r4, [pc, #24]	; (d5d0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5cf4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5cf6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cf8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5cfa:	f7ff fcc5 	bl	d5688 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5cfe:	4620      	mov	r0, r4
   d5d00:	4a03      	ldr	r2, [pc, #12]	; (d5d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5d02:	4904      	ldr	r1, [pc, #16]	; (d5d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5d08:	f001 b888 	b.w	d6e1c <__aeabi_atexit>
   d5d0c:	2003e3f0 	.word	0x2003e3f0
   d5d10:	2003e2a0 	.word	0x2003e2a0
   d5d14:	000d5cdf 	.word	0x000d5cdf

000d5d18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d1a:	4606      	mov	r6, r0
   d5d1c:	460d      	mov	r5, r1
   d5d1e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5d20:	2400      	movs	r4, #0
  while (size--) {
   d5d22:	42bd      	cmp	r5, r7
   d5d24:	d00c      	beq.n	d5d40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d26:	6833      	ldr	r3, [r6, #0]
   d5d28:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d2c:	689b      	ldr	r3, [r3, #8]
   d5d2e:	4630      	mov	r0, r6
   d5d30:	4798      	blx	r3
     if (chunk>=0)
   d5d32:	2800      	cmp	r0, #0
   d5d34:	db01      	blt.n	d5d3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d36:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5d38:	e7f3      	b.n	d5d22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d3a:	2c00      	cmp	r4, #0
   d5d3c:	bf08      	it	eq
   d5d3e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d40:	4620      	mov	r0, r4
   d5d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d44 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d44:	b570      	push	{r4, r5, r6, lr}
   d5d46:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5d48:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5d4a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5d4c:	b149      	cbz	r1, d5d62 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5d4e:	f001 fa4f 	bl	d71f0 <strlen>
   d5d52:	682b      	ldr	r3, [r5, #0]
   d5d54:	4602      	mov	r2, r0
   d5d56:	4621      	mov	r1, r4
   d5d58:	4628      	mov	r0, r5
   d5d5a:	68db      	ldr	r3, [r3, #12]
    }
   d5d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d60:	4718      	bx	r3
    }
   d5d62:	bd70      	pop	{r4, r5, r6, pc}

000d5d64 <_ZN5Print5printEPKc>:
   d5d64:	b508      	push	{r3, lr}
   d5d66:	f7ff ffed 	bl	d5d44 <_ZN5Print5writeEPKc>
   d5d6a:	bd08      	pop	{r3, pc}

000d5d6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d6c:	6803      	ldr	r3, [r0, #0]
   d5d6e:	689b      	ldr	r3, [r3, #8]
   d5d70:	4718      	bx	r3

000d5d72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d74:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d76:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d78:	f7ff fff8 	bl	d5d6c <_ZN5Print5printEc>
  n += print('\n');
   d5d7c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5d7e:	4604      	mov	r4, r0
  n += print('\n');
   d5d80:	4628      	mov	r0, r5
   d5d82:	f7ff fff3 	bl	d5d6c <_ZN5Print5printEc>
  return n;
}
   d5d86:	4420      	add	r0, r4
   d5d88:	bd38      	pop	{r3, r4, r5, pc}

000d5d8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d8a:	b538      	push	{r3, r4, r5, lr}
   d5d8c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d8e:	f7ff ffd9 	bl	d5d44 <_ZN5Print5writeEPKc>
   d5d92:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5d94:	4628      	mov	r0, r5
   d5d96:	f7ff ffec 	bl	d5d72 <_ZN5Print7printlnEv>
  return n;
}
   d5d9a:	4420      	add	r0, r4
   d5d9c:	bd38      	pop	{r3, r4, r5, pc}

000d5d9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d9e:	b530      	push	{r4, r5, lr}
   d5da0:	b08b      	sub	sp, #44	; 0x2c
   d5da2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5da4:	2100      	movs	r1, #0
   d5da6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5daa:	2a01      	cmp	r2, #1
   d5dac:	bf98      	it	ls
   d5dae:	220a      	movls	r2, #10
   d5db0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5db4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5db8:	fb05 3312 	mls	r3, r5, r2, r3
   d5dbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dc0:	2b09      	cmp	r3, #9
   d5dc2:	bf94      	ite	ls
   d5dc4:	3330      	addls	r3, #48	; 0x30
   d5dc6:	3337      	addhi	r3, #55	; 0x37
   d5dc8:	b2db      	uxtb	r3, r3
   d5dca:	4621      	mov	r1, r4
   d5dcc:	f804 3901 	strb.w	r3, [r4], #-1
   d5dd0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5dd2:	2d00      	cmp	r5, #0
   d5dd4:	d1ee      	bne.n	d5db4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5dd6:	f7ff ffb5 	bl	d5d44 <_ZN5Print5writeEPKc>
}
   d5dda:	b00b      	add	sp, #44	; 0x2c
   d5ddc:	bd30      	pop	{r4, r5, pc}

000d5dde <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5dde:	b40c      	push	{r2, r3}
   d5de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5de4:	b087      	sub	sp, #28
   d5de6:	af00      	add	r7, sp, #0
   d5de8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5dec:	4605      	mov	r5, r0
   d5dee:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5df2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5df4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5df6:	4623      	mov	r3, r4
   d5df8:	464a      	mov	r2, r9
   d5dfa:	2114      	movs	r1, #20
   d5dfc:	1d38      	adds	r0, r7, #4
   d5dfe:	f7ff fdff 	bl	d5a00 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5e02:	2813      	cmp	r0, #19
   d5e04:	d805      	bhi.n	d5e12 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5e06:	1d39      	adds	r1, r7, #4
   d5e08:	4628      	mov	r0, r5
   d5e0a:	f7ff ff9b 	bl	d5d44 <_ZN5Print5writeEPKc>
   d5e0e:	4604      	mov	r4, r0
   d5e10:	e013      	b.n	d5e3a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5e12:	f100 0308 	add.w	r3, r0, #8
   d5e16:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5e1a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5e1c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5e20:	1c41      	adds	r1, r0, #1
   d5e22:	4623      	mov	r3, r4
   d5e24:	464a      	mov	r2, r9
   d5e26:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5e28:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5e2a:	f7ff fde9 	bl	d5a00 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5e2e:	4669      	mov	r1, sp
   d5e30:	4628      	mov	r0, r5
   d5e32:	f7ff ff87 	bl	d5d44 <_ZN5Print5writeEPKc>
   d5e36:	4604      	mov	r4, r0
   d5e38:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5e3a:	b11e      	cbz	r6, d5e44 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f7ff ff98 	bl	d5d72 <_ZN5Print7printlnEv>
   d5e42:	4404      	add	r4, r0
    return n;
}
   d5e44:	4620      	mov	r0, r4
   d5e46:	371c      	adds	r7, #28
   d5e48:	46bd      	mov	sp, r7
   d5e4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e4e:	b002      	add	sp, #8
   d5e50:	4770      	bx	lr
	...

000d5e54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e54:	4b01      	ldr	r3, [pc, #4]	; (d5e5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e56:	4a02      	ldr	r2, [pc, #8]	; (d5e60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e58:	601a      	str	r2, [r3, #0]
   d5e5a:	4770      	bx	lr
   d5e5c:	2003e3f4 	.word	0x2003e3f4
   d5e60:	000d7bdf 	.word	0x000d7bdf

000d5e64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e64:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e66:	681a      	ldr	r2, [r3, #0]
   d5e68:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e6a:	601a      	str	r2, [r3, #0]
   d5e6c:	4770      	bx	lr
   d5e6e:	bf00      	nop
   d5e70:	2003e238 	.word	0x2003e238
   d5e74:	2003e3f8 	.word	0x2003e3f8

000d5e78 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e78:	2100      	movs	r1, #0
   d5e7a:	f7ff bd3d 	b.w	d58f8 <system_delay_ms>

000d5e7e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5e7e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5e80:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5e82:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5e84:	b113      	cbz	r3, d5e8c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e86:	2203      	movs	r2, #3
   d5e88:	4601      	mov	r1, r0
   d5e8a:	4798      	blx	r3
    }
   d5e8c:	4620      	mov	r0, r4
   d5e8e:	bd10      	pop	{r4, pc}

000d5e90 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e90:	b510      	push	{r4, lr}
   d5e92:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e94:	f7ff fff3 	bl	d5e7e <_ZNSt14_Function_baseD1Ev>
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e9c:	4803      	ldr	r0, [pc, #12]	; (d5eac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e9e:	4a04      	ldr	r2, [pc, #16]	; (d5eb0 <_GLOBAL__sub_I_RGB+0x14>)
   d5ea0:	4904      	ldr	r1, [pc, #16]	; (d5eb4 <_GLOBAL__sub_I_RGB+0x18>)
   d5ea2:	2300      	movs	r3, #0
   d5ea4:	6083      	str	r3, [r0, #8]
   d5ea6:	f000 bfb9 	b.w	d6e1c <__aeabi_atexit>
   d5eaa:	bf00      	nop
   d5eac:	2003e3fc 	.word	0x2003e3fc
   d5eb0:	2003e2a0 	.word	0x2003e2a0
   d5eb4:	000d5e91 	.word	0x000d5e91

000d5eb8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5eb8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5eba:	4b0c      	ldr	r3, [pc, #48]	; (d5eec <serialEventRun+0x34>)
   d5ebc:	b133      	cbz	r3, d5ecc <serialEventRun+0x14>
   d5ebe:	f000 f96d 	bl	d619c <_Z16_fetch_usbserialv>
   d5ec2:	6803      	ldr	r3, [r0, #0]
   d5ec4:	691b      	ldr	r3, [r3, #16]
   d5ec6:	4798      	blx	r3
   d5ec8:	2800      	cmp	r0, #0
   d5eca:	dc09      	bgt.n	d5ee0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ecc:	4b08      	ldr	r3, [pc, #32]	; (d5ef0 <serialEventRun+0x38>)
   d5ece:	b163      	cbz	r3, d5eea <serialEventRun+0x32>
   d5ed0:	f000 f9e6 	bl	d62a0 <_Z22__fetch_global_Serial1v>
   d5ed4:	6803      	ldr	r3, [r0, #0]
   d5ed6:	691b      	ldr	r3, [r3, #16]
   d5ed8:	4798      	blx	r3
   d5eda:	2800      	cmp	r0, #0
   d5edc:	dc03      	bgt.n	d5ee6 <serialEventRun+0x2e>
   d5ede:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ee0:	f3af 8000 	nop.w
   d5ee4:	e7f2      	b.n	d5ecc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5ee6:	f3af 8000 	nop.w
   d5eea:	bd08      	pop	{r3, pc}
	...

000d5ef4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5ef4:	b508      	push	{r3, lr}
	serialEventRun();
   d5ef6:	f7ff ffdf 	bl	d5eb8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5efa:	f7ff fba5 	bl	d5648 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5efe:	4b01      	ldr	r3, [pc, #4]	; (d5f04 <_post_loop+0x10>)
   d5f00:	6018      	str	r0, [r3, #0]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	2003e730 	.word	0x2003e730

000d5f08 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f08:	4802      	ldr	r0, [pc, #8]	; (d5f14 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f0a:	4a03      	ldr	r2, [pc, #12]	; (d5f18 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f0c:	4903      	ldr	r1, [pc, #12]	; (d5f1c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f0e:	1a12      	subs	r2, r2, r0
   d5f10:	f001 b910 	b.w	d7134 <memcpy>
   d5f14:	2003f400 	.word	0x2003f400
   d5f18:	2003f404 	.word	0x2003f404
   d5f1c:	000d7ed0 	.word	0x000d7ed0

000d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f20:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f22:	2300      	movs	r3, #0
   d5f24:	9300      	str	r3, [sp, #0]
   d5f26:	461a      	mov	r2, r3
   d5f28:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f2c:	f7ff fcf6 	bl	d591c <system_ctrl_set_result>
}
   d5f30:	b003      	add	sp, #12
   d5f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f38 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5f38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f3a:	8843      	ldrh	r3, [r0, #2]
   d5f3c:	2b0a      	cmp	r3, #10
   d5f3e:	d008      	beq.n	d5f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f40:	2b50      	cmp	r3, #80	; 0x50
   d5f42:	d109      	bne.n	d5f58 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5f44:	4b09      	ldr	r3, [pc, #36]	; (d5f6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f46:	681b      	ldr	r3, [r3, #0]
   d5f48:	b13b      	cbz	r3, d5f5a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f4a:	b003      	add	sp, #12
   d5f4c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f50:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f52:	f7ff ffe5 	bl	d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f56:	e006      	b.n	d5f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f58:	2300      	movs	r3, #0
   d5f5a:	9300      	str	r3, [sp, #0]
   d5f5c:	461a      	mov	r2, r3
   d5f5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f62:	f7ff fcdb 	bl	d591c <system_ctrl_set_result>
        break;
    }
}
   d5f66:	b003      	add	sp, #12
   d5f68:	f85d fb04 	ldr.w	pc, [sp], #4
   d5f6c:	2003e40c 	.word	0x2003e40c

000d5f70 <module_user_init_hook>:

void module_user_init_hook()
{
   d5f70:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f72:	4c10      	ldr	r4, [pc, #64]	; (d5fb4 <module_user_init_hook+0x44>)
   d5f74:	4d10      	ldr	r5, [pc, #64]	; (d5fb8 <module_user_init_hook+0x48>)
   d5f76:	6823      	ldr	r3, [r4, #0]
   d5f78:	42ab      	cmp	r3, r5
   d5f7a:	4b10      	ldr	r3, [pc, #64]	; (d5fbc <module_user_init_hook+0x4c>)
   d5f7c:	bf0c      	ite	eq
   d5f7e:	2201      	moveq	r2, #1
   d5f80:	2200      	movne	r2, #0
   d5f82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f84:	d002      	beq.n	d5f8c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5f86:	f7ff ffbf 	bl	d5f08 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f8a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f8c:	f7ff fb4c 	bl	d5628 <HAL_RNG_GetRandomNumber>
   d5f90:	4604      	mov	r4, r0
    srand(seed);
   d5f92:	f001 f8fd 	bl	d7190 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f96:	4b0a      	ldr	r3, [pc, #40]	; (d5fc0 <module_user_init_hook+0x50>)
   d5f98:	b113      	cbz	r3, d5fa0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fa0:	2100      	movs	r1, #0
   d5fa2:	4807      	ldr	r0, [pc, #28]	; (d5fc0 <module_user_init_hook+0x50>)
   d5fa4:	f7ff fd14 	bl	d59d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fa8:	2100      	movs	r1, #0
   d5faa:	4806      	ldr	r0, [pc, #24]	; (d5fc4 <module_user_init_hook+0x54>)
}
   d5fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fb0:	f7ff bcaa 	b.w	d5908 <system_ctrl_set_app_request_handler>
   d5fb4:	2003f400 	.word	0x2003f400
   d5fb8:	9a271c1e 	.word	0x9a271c1e
   d5fbc:	2003e410 	.word	0x2003e410
   d5fc0:	00000000 	.word	0x00000000
   d5fc4:	000d5f39 	.word	0x000d5f39

000d5fc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5fc8:	4770      	bx	lr

000d5fca <_ZN9IPAddressD0Ev>:
   d5fca:	b510      	push	{r4, lr}
   d5fcc:	2118      	movs	r1, #24
   d5fce:	4604      	mov	r4, r0
   d5fd0:	f000 ff32 	bl	d6e38 <_ZdlPvj>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	bd10      	pop	{r4, pc}

000d5fd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5fda:	7d03      	ldrb	r3, [r0, #20]
   d5fdc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5fde:	b08d      	sub	sp, #52	; 0x34
   d5fe0:	460e      	mov	r6, r1
   d5fe2:	f100 0704 	add.w	r7, r0, #4
   d5fe6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5fea:	d002      	beq.n	d5ff2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5fec:	f100 0508 	add.w	r5, r0, #8
   d5ff0:	e018      	b.n	d6024 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ff2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ff4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ff6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ffa:	232f      	movs	r3, #47	; 0x2f
   d5ffc:	462a      	mov	r2, r5
   d5ffe:	200a      	movs	r0, #10
   d6000:	f7ff fb52 	bl	d56a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6004:	4628      	mov	r0, r5
   d6006:	f001 f8f3 	bl	d71f0 <strlen>
   d600a:	6833      	ldr	r3, [r6, #0]
   d600c:	4602      	mov	r2, r0
   d600e:	68db      	ldr	r3, [r3, #12]
   d6010:	4629      	mov	r1, r5
   d6012:	4630      	mov	r0, r6
   d6014:	4798      	blx	r3
   d6016:	e00f      	b.n	d6038 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6018:	b124      	cbz	r4, d6024 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d601a:	212e      	movs	r1, #46	; 0x2e
   d601c:	4630      	mov	r0, r6
   d601e:	f7ff fea5 	bl	d5d6c <_ZN5Print5printEc>
   d6022:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6028:	220a      	movs	r2, #10
   d602a:	4630      	mov	r0, r6
   d602c:	f7ff feb7 	bl	d5d9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6030:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6032:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6034:	d1f0      	bne.n	d6018 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6036:	4620      	mov	r0, r4
    }
    return n;
}
   d6038:	b00d      	add	sp, #52	; 0x34
   d603a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d603c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d603c:	b510      	push	{r4, lr}
   d603e:	4b05      	ldr	r3, [pc, #20]	; (d6054 <_ZN9IPAddressC1Ev+0x18>)
   d6040:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6042:	2211      	movs	r2, #17
   d6044:	f840 3b04 	str.w	r3, [r0], #4
   d6048:	2100      	movs	r1, #0
   d604a:	f001 f899 	bl	d7180 <memset>
{
    clear();
}
   d604e:	4620      	mov	r0, r4
   d6050:	bd10      	pop	{r4, pc}
   d6052:	bf00      	nop
   d6054:	000d7c70 	.word	0x000d7c70

000d6058 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6058:	4603      	mov	r3, r0
   d605a:	4a07      	ldr	r2, [pc, #28]	; (d6078 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d605c:	b510      	push	{r4, lr}
   d605e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6062:	f101 0210 	add.w	r2, r1, #16
   d6066:	f851 4b04 	ldr.w	r4, [r1], #4
   d606a:	f843 4b04 	str.w	r4, [r3], #4
   d606e:	4291      	cmp	r1, r2
   d6070:	d1f9      	bne.n	d6066 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6072:	780a      	ldrb	r2, [r1, #0]
   d6074:	701a      	strb	r2, [r3, #0]
}
   d6076:	bd10      	pop	{r4, pc}
   d6078:	000d7c70 	.word	0x000d7c70

000d607c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d607c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d607e:	2b04      	cmp	r3, #4
   d6080:	d101      	bne.n	d6086 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6082:	6840      	ldr	r0, [r0, #4]
   d6084:	e008      	b.n	d6098 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6086:	2b06      	cmp	r3, #6
   d6088:	d10a      	bne.n	d60a0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d608a:	6843      	ldr	r3, [r0, #4]
   d608c:	b953      	cbnz	r3, d60a4 <_ZNK9IPAddresscvbEv+0x28>
   d608e:	6883      	ldr	r3, [r0, #8]
   d6090:	b943      	cbnz	r3, d60a4 <_ZNK9IPAddresscvbEv+0x28>
   d6092:	68c3      	ldr	r3, [r0, #12]
   d6094:	b933      	cbnz	r3, d60a4 <_ZNK9IPAddresscvbEv+0x28>
   d6096:	6900      	ldr	r0, [r0, #16]
   d6098:	3000      	adds	r0, #0
   d609a:	bf18      	it	ne
   d609c:	2001      	movne	r0, #1
   d609e:	4770      	bx	lr
    } else {
        return false;
   d60a0:	2000      	movs	r0, #0
   d60a2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d60a4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d60a6:	4770      	bx	lr

000d60a8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d60a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d60aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d60ba:	2304      	movs	r3, #4
   d60bc:	6041      	str	r1, [r0, #4]
   d60be:	7503      	strb	r3, [r0, #20]
   d60c0:	bd10      	pop	{r4, pc}

000d60c2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d60c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d60c4:	780d      	ldrb	r5, [r1, #0]
   d60c6:	788b      	ldrb	r3, [r1, #2]
   d60c8:	784a      	ldrb	r2, [r1, #1]
   d60ca:	78c9      	ldrb	r1, [r1, #3]
   d60cc:	9100      	str	r1, [sp, #0]
   d60ce:	4629      	mov	r1, r5
   d60d0:	f7ff ffea 	bl	d60a8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d60d4:	b003      	add	sp, #12
   d60d6:	bd30      	pop	{r4, r5, pc}

000d60d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60d8:	7441      	strb	r1, [r0, #17]
   d60da:	4770      	bx	lr

000d60dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60dc:	4770      	bx	lr

000d60de <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d60de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d60e0:	2100      	movs	r1, #0
   d60e2:	7c00      	ldrb	r0, [r0, #16]
   d60e4:	f7ff fbd8 	bl	d5898 <HAL_USB_USART_Receive_Data>
}
   d60e8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60ec:	bf28      	it	cs
   d60ee:	f04f 30ff 	movcs.w	r0, #4294967295
   d60f2:	bd08      	pop	{r3, pc}

000d60f4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d60f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d60f6:	2101      	movs	r1, #1
   d60f8:	7c00      	ldrb	r0, [r0, #16]
   d60fa:	f7ff fbcd 	bl	d5898 <HAL_USB_USART_Receive_Data>
}
   d60fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6102:	bf28      	it	cs
   d6104:	f04f 30ff 	movcs.w	r0, #4294967295
   d6108:	bd08      	pop	{r3, pc}

000d610a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d610a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d610c:	7c00      	ldrb	r0, [r0, #16]
   d610e:	f7ff fbbb 	bl	d5888 <HAL_USB_USART_Available_Data_For_Write>
}
   d6112:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6116:	bd08      	pop	{r3, pc}

000d6118 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6118:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d611a:	7c00      	ldrb	r0, [r0, #16]
   d611c:	f7ff fbac 	bl	d5878 <HAL_USB_USART_Available_Data>
}
   d6120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6124:	bd08      	pop	{r3, pc}

000d6126 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6126:	7c00      	ldrb	r0, [r0, #16]
   d6128:	f7ff bbc6 	b.w	d58b8 <HAL_USB_USART_Flush_Data>

000d612c <_ZN9USBSerialD0Ev>:
   d612c:	b510      	push	{r4, lr}
   d612e:	2114      	movs	r1, #20
   d6130:	4604      	mov	r4, r0
   d6132:	f000 fe81 	bl	d6e38 <_ZdlPvj>
   d6136:	4620      	mov	r0, r4
   d6138:	bd10      	pop	{r4, pc}

000d613a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d613a:	b538      	push	{r3, r4, r5, lr}
   d613c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d613e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6140:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6142:	f7ff fba1 	bl	d5888 <HAL_USB_USART_Available_Data_For_Write>
   d6146:	2800      	cmp	r0, #0
   d6148:	dc01      	bgt.n	d614e <_ZN9USBSerial5writeEh+0x14>
   d614a:	7c60      	ldrb	r0, [r4, #17]
   d614c:	b128      	cbz	r0, d615a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d614e:	4629      	mov	r1, r5
   d6150:	7c20      	ldrb	r0, [r4, #16]
   d6152:	f7ff fba9 	bl	d58a8 <HAL_USB_USART_Send_Data>
   d6156:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d615a:	bd38      	pop	{r3, r4, r5, pc}

000d615c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d615c:	b510      	push	{r4, lr}
   d615e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6160:	2300      	movs	r3, #0
   d6162:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6168:	60a3      	str	r3, [r4, #8]
   d616a:	4b05      	ldr	r3, [pc, #20]	; (d6180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d616c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d616e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6170:	4608      	mov	r0, r1
{
  _serial = serial;
   d6172:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6174:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6176:	4611      	mov	r1, r2
   d6178:	f7ff fb6e 	bl	d5858 <HAL_USB_USART_Init>
}
   d617c:	4620      	mov	r0, r4
   d617e:	bd10      	pop	{r4, pc}
   d6180:	000d7c84 	.word	0x000d7c84

000d6184 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6184:	2200      	movs	r2, #0
   d6186:	7c00      	ldrb	r0, [r0, #16]
   d6188:	f7ff bb6e 	b.w	d5868 <HAL_USB_USART_Begin>

000d618c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d618c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d618e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6190:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6192:	2100      	movs	r1, #0
   d6194:	f000 fff4 	bl	d7180 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6198:	4620      	mov	r0, r4
   d619a:	bd10      	pop	{r4, pc}

000d619c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d619c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d619e:	4d0e      	ldr	r5, [pc, #56]	; (d61d8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d61a0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d61a2:	a801      	add	r0, sp, #4
   d61a4:	f7ff fff2 	bl	d618c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61a8:	6829      	ldr	r1, [r5, #0]
   d61aa:	f011 0401 	ands.w	r4, r1, #1
   d61ae:	d110      	bne.n	d61d2 <_Z16_fetch_usbserialv+0x36>
   d61b0:	4628      	mov	r0, r5
   d61b2:	f7fd ff81 	bl	d40b8 <__cxa_guard_acquire>
   d61b6:	b160      	cbz	r0, d61d2 <_Z16_fetch_usbserialv+0x36>
   d61b8:	aa01      	add	r2, sp, #4
   d61ba:	4621      	mov	r1, r4
   d61bc:	4807      	ldr	r0, [pc, #28]	; (d61dc <_Z16_fetch_usbserialv+0x40>)
   d61be:	f7ff ffcd 	bl	d615c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d61c2:	4628      	mov	r0, r5
   d61c4:	f7fd ff7d 	bl	d40c2 <__cxa_guard_release>
   d61c8:	4a05      	ldr	r2, [pc, #20]	; (d61e0 <_Z16_fetch_usbserialv+0x44>)
   d61ca:	4906      	ldr	r1, [pc, #24]	; (d61e4 <_Z16_fetch_usbserialv+0x48>)
   d61cc:	4803      	ldr	r0, [pc, #12]	; (d61dc <_Z16_fetch_usbserialv+0x40>)
   d61ce:	f000 fe25 	bl	d6e1c <__aeabi_atexit>
	return _usbserial;
}
   d61d2:	4802      	ldr	r0, [pc, #8]	; (d61dc <_Z16_fetch_usbserialv+0x40>)
   d61d4:	b007      	add	sp, #28
   d61d6:	bd30      	pop	{r4, r5, pc}
   d61d8:	2003e414 	.word	0x2003e414
   d61dc:	2003e418 	.word	0x2003e418
   d61e0:	2003e2a0 	.word	0x2003e2a0
   d61e4:	000d60dd 	.word	0x000d60dd

000d61e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d61e8:	4770      	bx	lr

000d61ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61ea:	7441      	strb	r1, [r0, #17]
   d61ec:	4770      	bx	lr

000d61ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d61ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d61f0:	7c00      	ldrb	r0, [r0, #16]
   d61f2:	f7ff faa9 	bl	d5748 <HAL_USART_Available_Data_For_Write>
}
   d61f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61fa:	bd08      	pop	{r3, pc}

000d61fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d61fc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d61fe:	7c00      	ldrb	r0, [r0, #16]
   d6200:	f7ff fa7a 	bl	d56f8 <HAL_USART_Available_Data>
}
   d6204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6208:	bd08      	pop	{r3, pc}

000d620a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d620a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d620c:	7c00      	ldrb	r0, [r0, #16]
   d620e:	f7ff fa83 	bl	d5718 <HAL_USART_Peek_Data>
}
   d6212:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6216:	bf28      	it	cs
   d6218:	f04f 30ff 	movcs.w	r0, #4294967295
   d621c:	bd08      	pop	{r3, pc}

000d621e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d621e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6220:	7c00      	ldrb	r0, [r0, #16]
   d6222:	f7ff fa71 	bl	d5708 <HAL_USART_Read_Data>
}
   d6226:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d622a:	bf28      	it	cs
   d622c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6230:	bd08      	pop	{r3, pc}

000d6232 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6232:	7c00      	ldrb	r0, [r0, #16]
   d6234:	f7ff ba78 	b.w	d5728 <HAL_USART_Flush_Data>

000d6238 <_ZN11USARTSerialD0Ev>:
   d6238:	b510      	push	{r4, lr}
   d623a:	2114      	movs	r1, #20
   d623c:	4604      	mov	r4, r0
   d623e:	f000 fdfb 	bl	d6e38 <_ZdlPvj>
   d6242:	4620      	mov	r0, r4
   d6244:	bd10      	pop	{r4, pc}

000d6246 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6246:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6248:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d624a:	4604      	mov	r4, r0
   d624c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d624e:	b925      	cbnz	r5, d625a <_ZN11USARTSerial5writeEh+0x14>
   d6250:	7c00      	ldrb	r0, [r0, #16]
   d6252:	f7ff fa79 	bl	d5748 <HAL_USART_Available_Data_For_Write>
   d6256:	2800      	cmp	r0, #0
   d6258:	dd05      	ble.n	d6266 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d625a:	4631      	mov	r1, r6
   d625c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d625e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6262:	f7ff ba41 	b.w	d56e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6266:	4628      	mov	r0, r5
   d6268:	bd70      	pop	{r4, r5, r6, pc}
	...

000d626c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d626c:	b510      	push	{r4, lr}
   d626e:	4604      	mov	r4, r0
   d6270:	4608      	mov	r0, r1
   d6272:	4611      	mov	r1, r2
   d6274:	2200      	movs	r2, #0
   d6276:	6062      	str	r2, [r4, #4]
   d6278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d627c:	60a2      	str	r2, [r4, #8]
   d627e:	4a05      	ldr	r2, [pc, #20]	; (d6294 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6280:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6282:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6284:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6286:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6288:	461a      	mov	r2, r3
   d628a:	f7ff fa25 	bl	d56d8 <HAL_USART_Init>
}
   d628e:	4620      	mov	r0, r4
   d6290:	bd10      	pop	{r4, pc}
   d6292:	bf00      	nop
   d6294:	000d7cb4 	.word	0x000d7cb4

000d6298 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6298:	7c00      	ldrb	r0, [r0, #16]
   d629a:	f7ff ba4d 	b.w	d5738 <HAL_USART_Is_Enabled>
	...

000d62a0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d62a0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d62a2:	4d0c      	ldr	r5, [pc, #48]	; (d62d4 <_Z22__fetch_global_Serial1v+0x34>)
   d62a4:	6829      	ldr	r1, [r5, #0]
   d62a6:	f011 0401 	ands.w	r4, r1, #1
   d62aa:	d111      	bne.n	d62d0 <_Z22__fetch_global_Serial1v+0x30>
   d62ac:	4628      	mov	r0, r5
   d62ae:	f7fd ff03 	bl	d40b8 <__cxa_guard_acquire>
   d62b2:	b168      	cbz	r0, d62d0 <_Z22__fetch_global_Serial1v+0x30>
   d62b4:	4a08      	ldr	r2, [pc, #32]	; (d62d8 <_Z22__fetch_global_Serial1v+0x38>)
   d62b6:	4b09      	ldr	r3, [pc, #36]	; (d62dc <_Z22__fetch_global_Serial1v+0x3c>)
   d62b8:	4809      	ldr	r0, [pc, #36]	; (d62e0 <_Z22__fetch_global_Serial1v+0x40>)
   d62ba:	4621      	mov	r1, r4
   d62bc:	f7ff ffd6 	bl	d626c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d62c0:	4628      	mov	r0, r5
   d62c2:	f7fd fefe 	bl	d40c2 <__cxa_guard_release>
   d62c6:	4a07      	ldr	r2, [pc, #28]	; (d62e4 <_Z22__fetch_global_Serial1v+0x44>)
   d62c8:	4907      	ldr	r1, [pc, #28]	; (d62e8 <_Z22__fetch_global_Serial1v+0x48>)
   d62ca:	4805      	ldr	r0, [pc, #20]	; (d62e0 <_Z22__fetch_global_Serial1v+0x40>)
   d62cc:	f000 fda6 	bl	d6e1c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62d0:	4803      	ldr	r0, [pc, #12]	; (d62e0 <_Z22__fetch_global_Serial1v+0x40>)
   d62d2:	bd38      	pop	{r3, r4, r5, pc}
   d62d4:	2003e4c4 	.word	0x2003e4c4
   d62d8:	2003e4c8 	.word	0x2003e4c8
   d62dc:	2003e440 	.word	0x2003e440
   d62e0:	2003e42c 	.word	0x2003e42c
   d62e4:	2003e2a0 	.word	0x2003e2a0
   d62e8:	000d61e9 	.word	0x000d61e9

000d62ec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d62ec:	4770      	bx	lr

000d62ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d62ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62f0:	4606      	mov	r6, r0
   d62f2:	4615      	mov	r5, r2
   d62f4:	460c      	mov	r4, r1
   d62f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d62f8:	42bc      	cmp	r4, r7
   d62fa:	d006      	beq.n	d630a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d62fc:	6833      	ldr	r3, [r6, #0]
   d62fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6302:	689b      	ldr	r3, [r3, #8]
   d6304:	4630      	mov	r0, r6
   d6306:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6308:	e7f6      	b.n	d62f8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d630a:	4628      	mov	r0, r5
   d630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d630e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d630e:	2200      	movs	r2, #0
   d6310:	7c00      	ldrb	r0, [r0, #16]
   d6312:	f7ff ba39 	b.w	d5788 <HAL_I2C_Write_Data>

000d6316 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6316:	2100      	movs	r1, #0
   d6318:	7c00      	ldrb	r0, [r0, #16]
   d631a:	f7ff ba3d 	b.w	d5798 <HAL_I2C_Available_Data>

000d631e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d631e:	2100      	movs	r1, #0
   d6320:	7c00      	ldrb	r0, [r0, #16]
   d6322:	f7ff ba41 	b.w	d57a8 <HAL_I2C_Read_Data>

000d6326 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6326:	2100      	movs	r1, #0
   d6328:	7c00      	ldrb	r0, [r0, #16]
   d632a:	f7ff ba45 	b.w	d57b8 <HAL_I2C_Peek_Data>

000d632e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d632e:	2100      	movs	r1, #0
   d6330:	7c00      	ldrb	r0, [r0, #16]
   d6332:	f7ff ba49 	b.w	d57c8 <HAL_I2C_Flush_Data>

000d6336 <_ZN7TwoWireD0Ev>:
   d6336:	b510      	push	{r4, lr}
   d6338:	2114      	movs	r1, #20
   d633a:	4604      	mov	r4, r0
   d633c:	f000 fd7c 	bl	d6e38 <_ZdlPvj>
   d6340:	4620      	mov	r0, r4
   d6342:	bd10      	pop	{r4, pc}

000d6344 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6344:	b510      	push	{r4, lr}
   d6346:	4604      	mov	r4, r0
   d6348:	2300      	movs	r3, #0
   d634a:	6063      	str	r3, [r4, #4]
   d634c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6350:	60a3      	str	r3, [r4, #8]
   d6352:	4b04      	ldr	r3, [pc, #16]	; (d6364 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6354:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6356:	4608      	mov	r0, r1
   d6358:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d635a:	4611      	mov	r1, r2
   d635c:	f7ff fa44 	bl	d57e8 <HAL_I2C_Init>
}
   d6360:	4620      	mov	r0, r4
   d6362:	bd10      	pop	{r4, pc}
   d6364:	000d7ce4 	.word	0x000d7ce4

000d6368 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6368:	2300      	movs	r3, #0
   d636a:	461a      	mov	r2, r3
   d636c:	4619      	mov	r1, r3
   d636e:	7c00      	ldrb	r0, [r0, #16]
   d6370:	f7ff b9f2 	b.w	d5758 <HAL_I2C_Begin>

000d6374 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6374:	2200      	movs	r2, #0
   d6376:	7c00      	ldrb	r0, [r0, #16]
   d6378:	f7ff b9f6 	b.w	d5768 <HAL_I2C_Begin_Transmission>

000d637c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d637c:	b2c9      	uxtb	r1, r1
   d637e:	f7ff bff9 	b.w	d6374 <_ZN7TwoWire17beginTransmissionEh>

000d6382 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6382:	2200      	movs	r2, #0
   d6384:	7c00      	ldrb	r0, [r0, #16]
   d6386:	f7ff b9f7 	b.w	d5778 <HAL_I2C_End_Transmission>

000d638a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d638a:	2101      	movs	r1, #1
   d638c:	f7ff bff9 	b.w	d6382 <_ZN7TwoWire15endTransmissionEh>

000d6390 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6390:	2100      	movs	r1, #0
   d6392:	7c00      	ldrb	r0, [r0, #16]
   d6394:	f7ff ba20 	b.w	d57d8 <HAL_I2C_Is_Enabled>

000d6398 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6398:	2200      	movs	r2, #0
   d639a:	4611      	mov	r1, r2
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7ff baff 	b.w	d59a0 <network_listening>

000d63a2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63a2:	2200      	movs	r2, #0
   d63a4:	4611      	mov	r1, r2
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7ff bb0a 	b.w	d59c0 <network_get_listen_timeout>

000d63ac <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d63ac:	2200      	movs	r2, #0
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	f7ff bafe 	b.w	d59b0 <network_set_listen_timeout>

000d63b4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d63b4:	2200      	movs	r2, #0
   d63b6:	f081 0101 	eor.w	r1, r1, #1
   d63ba:	6840      	ldr	r0, [r0, #4]
   d63bc:	f7ff bae8 	b.w	d5990 <network_listen>

000d63c0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d63c0:	2300      	movs	r3, #0
   d63c2:	461a      	mov	r2, r3
   d63c4:	2101      	movs	r1, #1
   d63c6:	6840      	ldr	r0, [r0, #4]
   d63c8:	f7ff bada 	b.w	d5980 <network_off>

000d63cc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d63cc:	2300      	movs	r3, #0
   d63ce:	461a      	mov	r2, r3
   d63d0:	4619      	mov	r1, r3
   d63d2:	6840      	ldr	r0, [r0, #4]
   d63d4:	f7ff bacc 	b.w	d5970 <network_on>

000d63d8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d63d8:	2200      	movs	r2, #0
   d63da:	4611      	mov	r1, r2
   d63dc:	6840      	ldr	r0, [r0, #4]
   d63de:	f7ff babf 	b.w	d5960 <network_ready>

000d63e2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63e2:	2200      	movs	r2, #0
   d63e4:	4611      	mov	r1, r2
   d63e6:	6840      	ldr	r0, [r0, #4]
   d63e8:	f7ff baaa 	b.w	d5940 <network_connecting>

000d63ec <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63ec:	2200      	movs	r2, #0
   d63ee:	2102      	movs	r1, #2
   d63f0:	6840      	ldr	r0, [r0, #4]
   d63f2:	f7ff baad 	b.w	d5950 <network_disconnect>

000d63f6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63f6:	2300      	movs	r3, #0
   d63f8:	461a      	mov	r2, r3
   d63fa:	6840      	ldr	r0, [r0, #4]
   d63fc:	f7ff ba98 	b.w	d5930 <network_connect>

000d6400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6400:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6402:	4605      	mov	r5, r0
   d6404:	b188      	cbz	r0, d642a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6406:	6804      	ldr	r4, [r0, #0]
   d6408:	b14c      	cbz	r4, d641e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d640a:	68a3      	ldr	r3, [r4, #8]
   d640c:	b11b      	cbz	r3, d6416 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d640e:	2203      	movs	r2, #3
   d6410:	4621      	mov	r1, r4
   d6412:	4620      	mov	r0, r4
   d6414:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6416:	2110      	movs	r1, #16
   d6418:	4620      	mov	r0, r4
   d641a:	f000 fd0d 	bl	d6e38 <_ZdlPvj>
   d641e:	4628      	mov	r0, r5
   d6420:	2114      	movs	r1, #20
      }
   d6422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6426:	f000 bd07 	b.w	d6e38 <_ZdlPvj>
   d642a:	bd38      	pop	{r3, r4, r5, pc}

000d642c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d642c:	b110      	cbz	r0, d6434 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d642e:	6803      	ldr	r3, [r0, #0]
   d6430:	685b      	ldr	r3, [r3, #4]
   d6432:	4718      	bx	r3
   d6434:	4770      	bx	lr

000d6436 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6436:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6438:	6803      	ldr	r3, [r0, #0]
   d643a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d643c:	b1bb      	cbz	r3, d646e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d643e:	6858      	ldr	r0, [r3, #4]
   d6440:	f7ff f90a 	bl	d5658 <os_thread_is_current>
   d6444:	b978      	cbnz	r0, d6466 <_ZN6ThreadD1Ev+0x30>
   d6446:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6448:	7c5a      	ldrb	r2, [r3, #17]
   d644a:	b912      	cbnz	r2, d6452 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d644c:	6858      	ldr	r0, [r3, #4]
   d644e:	f7ff f90b 	bl	d5668 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6452:	6823      	ldr	r3, [r4, #0]
   d6454:	6858      	ldr	r0, [r3, #4]
   d6456:	f7ff f90f 	bl	d5678 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d645a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d645c:	2300      	movs	r3, #0
   d645e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6460:	b128      	cbz	r0, d646e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6462:	f7ff ffcd 	bl	d6400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6466:	6820      	ldr	r0, [r4, #0]
   d6468:	b108      	cbz	r0, d646e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d646a:	f7ff ffc9 	bl	d6400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d646e:	4620      	mov	r0, r4
   d6470:	bd10      	pop	{r4, pc}

000d6472 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6472:	b538      	push	{r3, r4, r5, lr}
   d6474:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6476:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d647a:	b108      	cbz	r0, d6480 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d647c:	f7fd fe0f 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6480:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6484:	b108      	cbz	r0, d648a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6486:	f7ff f907 	bl	d5698 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d648a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d648e:	b135      	cbz	r5, d649e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6490:	4628      	mov	r0, r5
   d6492:	f7ff ffd0 	bl	d6436 <_ZN6ThreadD1Ev>
   d6496:	2104      	movs	r1, #4
   d6498:	4628      	mov	r0, r5
   d649a:	f000 fccd 	bl	d6e38 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d649e:	6820      	ldr	r0, [r4, #0]
   d64a0:	b108      	cbz	r0, d64a6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d64a2:	f7ff ffc3 	bl	d642c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d64a6:	4620      	mov	r0, r4
   d64a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64ac <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d64ac:	b510      	push	{r4, lr}
   d64ae:	4b04      	ldr	r3, [pc, #16]	; (d64c0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d64b0:	4604      	mov	r4, r0
   d64b2:	f840 3b08 	str.w	r3, [r0], #8
   d64b6:	f7ff ffdc 	bl	d6472 <_ZN5spark11MeshPublishD1Ev>
   d64ba:	4620      	mov	r0, r4
   d64bc:	bd10      	pop	{r4, pc}
   d64be:	bf00      	nop
   d64c0:	000d7d0c 	.word	0x000d7d0c

000d64c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d64c4:	b538      	push	{r3, r4, r5, lr}
   d64c6:	4c0e      	ldr	r4, [pc, #56]	; (d6500 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d64c8:	4b0e      	ldr	r3, [pc, #56]	; (d6504 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d64ca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d64cc:	2500      	movs	r5, #0
   d64ce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d64d0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d64d4:	6063      	str	r3, [r4, #4]
   d64d6:	60a5      	str	r5, [r4, #8]
   d64d8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d64dc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d64e0:	f7ff f8d2 	bl	d5688 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d64e4:	4b08      	ldr	r3, [pc, #32]	; (d6508 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d64e6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64ea:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d64ee:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d64f0:	4620      	mov	r0, r4
   d64f2:	4a06      	ldr	r2, [pc, #24]	; (d650c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d64f4:	4906      	ldr	r1, [pc, #24]	; (d6510 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d64f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d64fa:	f000 bc8f 	b.w	d6e1c <__aeabi_atexit>
   d64fe:	bf00      	nop
   d6500:	2003e54c 	.word	0x2003e54c
   d6504:	000d7df4 	.word	0x000d7df4
   d6508:	000d7d0c 	.word	0x000d7d0c
   d650c:	2003e2a0 	.word	0x2003e2a0
   d6510:	000d64ad 	.word	0x000d64ad

000d6514 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6516:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6518:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d651a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d651e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6520:	2201      	movs	r2, #1
   d6522:	f04f 33ff 	mov.w	r3, #4294967295
   d6526:	4621      	mov	r1, r4
   d6528:	47a8      	blx	r5
}
   d652a:	b003      	add	sp, #12
   d652c:	bd30      	pop	{r4, r5, pc}

000d652e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d652e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6530:	6803      	ldr	r3, [r0, #0]
   d6532:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6534:	f04f 33ff 	mov.w	r3, #4294967295
   d6538:	46a4      	mov	ip, r4
}
   d653a:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d653e:	4760      	bx	ip

000d6540 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6540:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6542:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6544:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6546:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d654a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d654c:	4621      	mov	r1, r4
   d654e:	4613      	mov	r3, r2
   d6550:	2201      	movs	r2, #1
   d6552:	47a8      	blx	r5
}
   d6554:	b003      	add	sp, #12
   d6556:	bd30      	pop	{r4, r5, pc}

000d6558 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6558:	4770      	bx	lr

000d655a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d655a:	b538      	push	{r3, r4, r5, lr}
   d655c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6562:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6564:	da05      	bge.n	d6572 <_ZN9TCPClient9connectedEv+0x18>
   d6566:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d656a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d656e:	429a      	cmp	r2, r3
   d6570:	d001      	beq.n	d6576 <_ZN9TCPClient9connectedEv+0x1c>
   d6572:	2501      	movs	r5, #1
   d6574:	e00b      	b.n	d658e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6576:	6803      	ldr	r3, [r0, #0]
   d6578:	691b      	ldr	r3, [r3, #16]
   d657a:	4798      	blx	r3
   d657c:	2800      	cmp	r0, #0
   d657e:	bf14      	ite	ne
   d6580:	2501      	movne	r5, #1
   d6582:	2500      	moveq	r5, #0
        if (!rv) {
   d6584:	d103      	bne.n	d658e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6586:	6823      	ldr	r3, [r4, #0]
   d6588:	4620      	mov	r0, r4
   d658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d658c:	4798      	blx	r3
        }
    }
    return rv;
}
   d658e:	4628      	mov	r0, r5
   d6590:	bd38      	pop	{r3, r4, r5, pc}

000d6592 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6592:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6594:	6818      	ldr	r0, [r3, #0]
}
   d6596:	43c0      	mvns	r0, r0
   d6598:	0fc0      	lsrs	r0, r0, #31
   d659a:	4770      	bx	lr

000d659c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d659c:	4770      	bx	lr

000d659e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d659e:	2000      	movs	r0, #0
   d65a0:	4770      	bx	lr

000d65a2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d65a2:	b510      	push	{r4, lr}
   d65a4:	2114      	movs	r1, #20
   d65a6:	4604      	mov	r4, r0
   d65a8:	f000 fc46 	bl	d6e38 <_ZdlPvj>
   d65ac:	4620      	mov	r0, r4
   d65ae:	bd10      	pop	{r4, pc}

000d65b0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d65b0:	f7fd bd73 	b.w	d409a <_ZdlPv>

000d65b4 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d65b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d65b6:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d65b8:	2200      	movs	r2, #0
   d65ba:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d65bc:	9202      	str	r2, [sp, #8]
   d65be:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d65c0:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d65c2:	4604      	mov	r4, r0
   d65c4:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d65c6:	d008      	beq.n	d65da <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d65c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d65cc:	fbb3 f1f2 	udiv	r1, r3, r2
   d65d0:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d65d2:	fb02 3111 	mls	r1, r2, r1, r3
   d65d6:	434a      	muls	r2, r1
   d65d8:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d65da:	6960      	ldr	r0, [r4, #20]
   d65dc:	2308      	movs	r3, #8
   d65de:	9300      	str	r3, [sp, #0]
   d65e0:	f241 0205 	movw	r2, #4101	; 0x1005
   d65e4:	446b      	add	r3, sp
   d65e6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d65ea:	6800      	ldr	r0, [r0, #0]
   d65ec:	f7ff f904 	bl	d57f8 <sock_setsockopt>
    if (ret < 0) {
   d65f0:	2800      	cmp	r0, #0
   d65f2:	db08      	blt.n	d6606 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d65f4:	6960      	ldr	r0, [r4, #20]
   d65f6:	2300      	movs	r3, #0
   d65f8:	4632      	mov	r2, r6
   d65fa:	4629      	mov	r1, r5
   d65fc:	6800      	ldr	r0, [r0, #0]
   d65fe:	f7ff f91b 	bl	d5838 <sock_send>
    if (ret < 0) {
   d6602:	2800      	cmp	r0, #0
   d6604:	da04      	bge.n	d6610 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6606:	f7ff fa03 	bl	d5a10 <__errno>
   d660a:	6803      	ldr	r3, [r0, #0]
   d660c:	6063      	str	r3, [r4, #4]
   d660e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6610:	b004      	add	sp, #16
   d6612:	bd70      	pop	{r4, r5, r6, pc}

000d6614 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6614:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6616:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6618:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d661a:	689b      	ldr	r3, [r3, #8]
   d661c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d661e:	68a3      	ldr	r3, [r4, #8]
   d6620:	3b01      	subs	r3, #1
   d6622:	60a3      	str	r3, [r4, #8]
   d6624:	b92b      	cbnz	r3, d6632 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6626:	6823      	ldr	r3, [r4, #0]
   d6628:	4620      	mov	r0, r4
   d662a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6630:	4718      	bx	r3
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6634:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6636:	4604      	mov	r4, r0
   d6638:	694d      	ldr	r5, [r1, #20]
   d663a:	4b05      	ldr	r3, [pc, #20]	; (d6650 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d663c:	f844 3b04 	str.w	r3, [r4], #4
   d6640:	358c      	adds	r5, #140	; 0x8c
   d6642:	4606      	mov	r6, r0
   d6644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6648:	682b      	ldr	r3, [r5, #0]
   d664a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d664c:	4630      	mov	r0, r6
   d664e:	bd70      	pop	{r4, r5, r6, pc}
   d6650:	000d7c70 	.word	0x000d7c70

000d6654 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6654:	b510      	push	{r4, lr}
   d6656:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6658:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d665c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6660:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6662:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6664:	d005      	beq.n	d6672 <_ZN9TCPClient4peekEv+0x1e>
   d6666:	6962      	ldr	r2, [r4, #20]
   d6668:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d666c:	4413      	add	r3, r2
   d666e:	7918      	ldrb	r0, [r3, #4]
   d6670:	bd10      	pop	{r4, pc}
   d6672:	6803      	ldr	r3, [r0, #0]
   d6674:	691b      	ldr	r3, [r3, #16]
   d6676:	4798      	blx	r3
   d6678:	2800      	cmp	r0, #0
   d667a:	d1f4      	bne.n	d6666 <_ZN9TCPClient4peekEv+0x12>
   d667c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6680:	bd10      	pop	{r4, pc}

000d6682 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6682:	b510      	push	{r4, lr}
   d6684:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6686:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d668a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d668e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6690:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6692:	d008      	beq.n	d66a6 <_ZN9TCPClient4readEv+0x24>
   d6694:	6962      	ldr	r2, [r4, #20]
   d6696:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d669a:	1c59      	adds	r1, r3, #1
   d669c:	4413      	add	r3, r2
   d669e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d66a2:	7918      	ldrb	r0, [r3, #4]
   d66a4:	bd10      	pop	{r4, pc}
   d66a6:	6803      	ldr	r3, [r0, #0]
   d66a8:	691b      	ldr	r3, [r3, #16]
   d66aa:	4798      	blx	r3
   d66ac:	2800      	cmp	r0, #0
   d66ae:	d1f1      	bne.n	d6694 <_ZN9TCPClient4readEv+0x12>
   d66b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d66b4:	bd10      	pop	{r4, pc}

000d66b6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d66b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66b8:	6943      	ldr	r3, [r0, #20]
   d66ba:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d66bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66c4:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d66c6:	4605      	mov	r5, r0
   d66c8:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d66ca:	d106      	bne.n	d66da <_ZN9TCPClient4readEPhj+0x24>
   d66cc:	6803      	ldr	r3, [r0, #0]
   d66ce:	691b      	ldr	r3, [r3, #16]
   d66d0:	4798      	blx	r3
   d66d2:	b910      	cbnz	r0, d66da <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d66d4:	f04f 34ff 	mov.w	r4, #4294967295
   d66d8:	e014      	b.n	d6704 <_ZN9TCPClient4readEPhj+0x4e>
   d66da:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d66dc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d66e0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d66e4:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d66e6:	42bc      	cmp	r4, r7
   d66e8:	bf28      	it	cs
   d66ea:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d66ec:	4419      	add	r1, r3
   d66ee:	4622      	mov	r2, r4
   d66f0:	3104      	adds	r1, #4
   d66f2:	4630      	mov	r0, r6
   d66f4:	f000 fd1e 	bl	d7134 <memcpy>
   d66f8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d66fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d66fe:	4423      	add	r3, r4
   d6700:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6704:	4620      	mov	r0, r4
   d6706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6708 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d670c:	4698      	mov	r8, r3
    stop();
   d670e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6710:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6714:	460d      	mov	r5, r1
   d6716:	4606      	mov	r6, r0
   d6718:	4617      	mov	r7, r2
    stop();
   d671a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d671c:	ab12      	add	r3, sp, #72	; 0x48
   d671e:	2400      	movs	r4, #0
   d6720:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6724:	4622      	mov	r2, r4
   d6726:	4621      	mov	r1, r4
   d6728:	4628      	mov	r0, r5
   d672a:	f7fe feed 	bl	d5508 <netdb_getaddrinfo>
   d672e:	4681      	mov	r9, r0
   d6730:	2800      	cmp	r0, #0
   d6732:	d13d      	bne.n	d67b0 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6734:	9b00      	ldr	r3, [sp, #0]
   d6736:	2b00      	cmp	r3, #0
   d6738:	d056      	beq.n	d67e8 <_ZN9TCPClient7connectEPKctm+0xe0>
   d673a:	695b      	ldr	r3, [r3, #20]
   d673c:	2b00      	cmp	r3, #0
   d673e:	d053      	beq.n	d67e8 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6740:	a806      	add	r0, sp, #24
   d6742:	f7ff fc7b 	bl	d603c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6746:	9b00      	ldr	r3, [sp, #0]
   d6748:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d674a:	7863      	ldrb	r3, [r4, #1]
   d674c:	2b02      	cmp	r3, #2
   d674e:	d101      	bne.n	d6754 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6750:	1d21      	adds	r1, r4, #4
   d6752:	e013      	b.n	d677c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6754:	2b0a      	cmp	r3, #10
   d6756:	d114      	bne.n	d6782 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6758:	2211      	movs	r2, #17
   d675a:	4649      	mov	r1, r9
   d675c:	a801      	add	r0, sp, #4
   d675e:	f000 fd0f 	bl	d7180 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6762:	68a3      	ldr	r3, [r4, #8]
   d6764:	bb33      	cbnz	r3, d67b4 <_ZN9TCPClient7connectEPKctm+0xac>
   d6766:	68e3      	ldr	r3, [r4, #12]
   d6768:	bb23      	cbnz	r3, d67b4 <_ZN9TCPClient7connectEPKctm+0xac>
   d676a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d676e:	6925      	ldr	r5, [r4, #16]
   d6770:	f7fe ffa2 	bl	d56b8 <inet_htonl>
   d6774:	4285      	cmp	r5, r0
   d6776:	d11d      	bne.n	d67b4 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6778:	f104 0114 	add.w	r1, r4, #20
   d677c:	a806      	add	r0, sp, #24
   d677e:	f7ff fca0 	bl	d60c2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6782:	a806      	add	r0, sp, #24
   d6784:	f7ff fc7a 	bl	d607c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6788:	2800      	cmp	r0, #0
   d678a:	d02d      	beq.n	d67e8 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d678c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d678e:	ad07      	add	r5, sp, #28
   d6790:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6794:	4b18      	ldr	r3, [pc, #96]	; (d67f8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6796:	930c      	str	r3, [sp, #48]	; 0x30
   d6798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d679a:	ac0d      	add	r4, sp, #52	; 0x34
   d679c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d679e:	682b      	ldr	r3, [r5, #0]
   d67a0:	7023      	strb	r3, [r4, #0]
   d67a2:	463a      	mov	r2, r7
   d67a4:	4643      	mov	r3, r8
   d67a6:	a90c      	add	r1, sp, #48	; 0x30
   d67a8:	4630      	mov	r0, r6
   d67aa:	47c8      	blx	r9
   d67ac:	4681      	mov	r9, r0
   d67ae:	e01b      	b.n	d67e8 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d67b0:	46a1      	mov	r9, r4
   d67b2:	e019      	b.n	d67e8 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67b4:	f104 0308 	add.w	r3, r4, #8
   d67b8:	ad01      	add	r5, sp, #4
   d67ba:	3418      	adds	r4, #24
   d67bc:	6818      	ldr	r0, [r3, #0]
   d67be:	6859      	ldr	r1, [r3, #4]
   d67c0:	462a      	mov	r2, r5
   d67c2:	c203      	stmia	r2!, {r0, r1}
   d67c4:	3308      	adds	r3, #8
   d67c6:	42a3      	cmp	r3, r4
   d67c8:	4615      	mov	r5, r2
   d67ca:	d1f7      	bne.n	d67bc <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d67cc:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d67ce:	a901      	add	r1, sp, #4
   d67d0:	a80c      	add	r0, sp, #48	; 0x30
   d67d2:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d67d4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d67d8:	f7ff fc3e 	bl	d6058 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67de:	ac07      	add	r4, sp, #28
   d67e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67e2:	682b      	ldr	r3, [r5, #0]
   d67e4:	7023      	strb	r3, [r4, #0]
   d67e6:	e7cc      	b.n	d6782 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d67e8:	9800      	ldr	r0, [sp, #0]
   d67ea:	f7fe fe85 	bl	d54f8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d67ee:	4648      	mov	r0, r9
   d67f0:	b013      	add	sp, #76	; 0x4c
   d67f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d67f6:	bf00      	nop
   d67f8:	000d7c70 	.word	0x000d7c70

000d67fc <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d67fc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d67fe:	2300      	movs	r3, #0
   d6800:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6804:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6806:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d680a:	4770      	bx	lr

000d680c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6810:	461e      	mov	r6, r3
    stop();
   d6812:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6814:	460c      	mov	r4, r1
   d6816:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6818:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d681a:	4605      	mov	r5, r0
   d681c:	4617      	mov	r7, r2
    stop();
   d681e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6820:	7d23      	ldrb	r3, [r4, #20]
   d6822:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6826:	2b04      	cmp	r3, #4
   d6828:	bf0c      	ite	eq
   d682a:	2002      	moveq	r0, #2
   d682c:	200a      	movne	r0, #10
   d682e:	2206      	movs	r2, #6
   d6830:	2101      	movs	r1, #1
   d6832:	f7ff f809 	bl	d5848 <sock_socket>
   d6836:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d683a:	696b      	ldr	r3, [r5, #20]
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	2b00      	cmp	r3, #0
   d6840:	db18      	blt.n	d6874 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6842:	4628      	mov	r0, r5
   d6844:	f7ff ffda 	bl	d67fc <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6848:	b1d6      	cbz	r6, d6880 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d684a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d684c:	a903      	add	r1, sp, #12
   d684e:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6850:	9303      	str	r3, [sp, #12]
   d6852:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6856:	f7fe fedf 	bl	d5618 <if_index_to_name>
   d685a:	b958      	cbnz	r0, d6874 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d685c:	6968      	ldr	r0, [r5, #20]
   d685e:	2306      	movs	r3, #6
   d6860:	9300      	str	r3, [sp, #0]
   d6862:	f241 020b 	movw	r2, #4107	; 0x100b
   d6866:	ab03      	add	r3, sp, #12
   d6868:	f640 71ff 	movw	r1, #4095	; 0xfff
   d686c:	6800      	ldr	r0, [r0, #0]
   d686e:	f7fe ffc3 	bl	d57f8 <sock_setsockopt>
   d6872:	b128      	cbz	r0, d6880 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6874:	682b      	ldr	r3, [r5, #0]
   d6876:	4628      	mov	r0, r5
   d6878:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d687a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d687c:	4798      	blx	r3
   d687e:	e03b      	b.n	d68f8 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6880:	261c      	movs	r6, #28
   d6882:	4632      	mov	r2, r6
   d6884:	2100      	movs	r1, #0
   d6886:	a803      	add	r0, sp, #12
   d6888:	f000 fc7a 	bl	d7180 <memset>
    if (ip.version() == 4) {
   d688c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d688e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6892:	2b04      	cmp	r3, #4
   d6894:	d10c      	bne.n	d68b0 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6896:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6898:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d689a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d689e:	f7fe ff13 	bl	d56c8 <inet_htons>
   d68a2:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d68a6:	6860      	ldr	r0, [r4, #4]
   d68a8:	f7fe ff06 	bl	d56b8 <inet_htonl>
   d68ac:	9004      	str	r0, [sp, #16]
   d68ae:	e013      	b.n	d68d8 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d68b0:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d68b2:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d68b4:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d68b8:	f7fe ff06 	bl	d56c8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d68bc:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d68be:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d68c2:	1d23      	adds	r3, r4, #4
   d68c4:	f104 0714 	add.w	r7, r4, #20
   d68c8:	6818      	ldr	r0, [r3, #0]
   d68ca:	6859      	ldr	r1, [r3, #4]
   d68cc:	4632      	mov	r2, r6
   d68ce:	c203      	stmia	r2!, {r0, r1}
   d68d0:	3308      	adds	r3, #8
   d68d2:	42bb      	cmp	r3, r7
   d68d4:	4616      	mov	r6, r2
   d68d6:	d1f7      	bne.n	d68c8 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d68d8:	696b      	ldr	r3, [r5, #20]
   d68da:	221c      	movs	r2, #28
   d68dc:	a903      	add	r1, sp, #12
   d68de:	6818      	ldr	r0, [r3, #0]
   d68e0:	f7fe ff9a 	bl	d5818 <sock_connect>
   d68e4:	2800      	cmp	r0, #0
   d68e6:	d1c5      	bne.n	d6874 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d68e8:	3404      	adds	r4, #4
   d68ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68ec:	696d      	ldr	r5, [r5, #20]
   d68ee:	358c      	adds	r5, #140	; 0x8c
   d68f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68f2:	6823      	ldr	r3, [r4, #0]
   d68f4:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d68f6:	2401      	movs	r4, #1
}
   d68f8:	4620      	mov	r0, r4
   d68fa:	b00a      	add	sp, #40	; 0x28
   d68fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6900 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6900:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6902:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6904:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6906:	6818      	ldr	r0, [r3, #0]
   d6908:	2800      	cmp	r0, #0
   d690a:	db01      	blt.n	d6910 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d690c:	f7fe ff7c 	bl	d5808 <sock_close>
   d6910:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6912:	f04f 32ff 	mov.w	r2, #4294967295
   d6916:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6918:	6960      	ldr	r0, [r4, #20]
   d691a:	2211      	movs	r2, #17
   d691c:	2100      	movs	r1, #0
   d691e:	308c      	adds	r0, #140	; 0x8c
   d6920:	f000 fc2e 	bl	d7180 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6924:	4620      	mov	r0, r4
}
   d6926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d692a:	f7ff bf67 	b.w	d67fc <_ZN9TCPClient12flush_bufferEv>
	...

000d6930 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6930:	b530      	push	{r4, r5, lr}
   d6932:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6934:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6938:	b08b      	sub	sp, #44	; 0x2c
   d693a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d693c:	b11b      	cbz	r3, d6946 <_ZN9TCPClient9availableEv+0x16>
   d693e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6942:	429a      	cmp	r2, r3
   d6944:	d040      	beq.n	d69c8 <_ZN9TCPClient9availableEv+0x98>
   d6946:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6948:	6818      	ldr	r0, [r3, #0]
   d694a:	2800      	cmp	r0, #0
   d694c:	db3f      	blt.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d694e:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6952:	2d7f      	cmp	r5, #127	; 0x7f
   d6954:	d83b      	bhi.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6956:	1d19      	adds	r1, r3, #4
   d6958:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d695c:	2308      	movs	r3, #8
   d695e:	4429      	add	r1, r5
   d6960:	f7fe ff62 	bl	d5828 <sock_recv>
            if (ret > 0) {
   d6964:	2800      	cmp	r0, #0
   d6966:	dd0c      	ble.n	d6982 <_ZN9TCPClient9availableEv+0x52>
   d6968:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d696a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d696e:	b90a      	cbnz	r2, d6974 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6970:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6974:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6976:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d697a:	4418      	add	r0, r3
   d697c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6980:	e025      	b.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6982:	f7ff f845 	bl	d5a10 <__errno>
   d6986:	6803      	ldr	r3, [r0, #0]
   d6988:	2b0b      	cmp	r3, #11
   d698a:	d020      	beq.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
   d698c:	f7ff f840 	bl	d5a10 <__errno>
   d6990:	6803      	ldr	r3, [r0, #0]
   d6992:	2b0b      	cmp	r3, #11
   d6994:	d01b      	beq.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6996:	2320      	movs	r3, #32
   d6998:	2500      	movs	r5, #0
   d699a:	9302      	str	r3, [sp, #8]
   d699c:	9503      	str	r5, [sp, #12]
   d699e:	f7ff f837 	bl	d5a10 <__errno>
   d69a2:	6803      	ldr	r3, [r0, #0]
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	4b0e      	ldr	r3, [pc, #56]	; (d69e0 <_ZN9TCPClient9availableEv+0xb0>)
   d69a8:	9300      	str	r3, [sp, #0]
   d69aa:	aa02      	add	r2, sp, #8
   d69ac:	462b      	mov	r3, r5
   d69ae:	490d      	ldr	r1, [pc, #52]	; (d69e4 <_ZN9TCPClient9availableEv+0xb4>)
   d69b0:	2032      	movs	r0, #50	; 0x32
   d69b2:	f7fe ff91 	bl	d58d8 <log_message>
                    sock_close(d_->sock);
   d69b6:	6963      	ldr	r3, [r4, #20]
   d69b8:	6818      	ldr	r0, [r3, #0]
   d69ba:	f7fe ff25 	bl	d5808 <sock_close>
   d69be:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d69c0:	f04f 32ff 	mov.w	r2, #4294967295
   d69c4:	601a      	str	r2, [r3, #0]
   d69c6:	e002      	b.n	d69ce <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d69c8:	f7ff ff18 	bl	d67fc <_ZN9TCPClient12flush_bufferEv>
   d69cc:	e7bb      	b.n	d6946 <_ZN9TCPClient9availableEv+0x16>
   d69ce:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d69d0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d69d4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d69d8:	1a18      	subs	r0, r3, r0
}
   d69da:	b00b      	add	sp, #44	; 0x2c
   d69dc:	bd30      	pop	{r4, r5, pc}
   d69de:	bf00      	nop
   d69e0:	000d7da7 	.word	0x000d7da7
   d69e4:	000d7da0 	.word	0x000d7da0

000d69e8 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d69e8:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d69ea:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d69ec:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d69ee:	6001      	str	r1, [r0, #0]
   d69f0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d69f4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d69f8:	3088      	adds	r0, #136	; 0x88
   d69fa:	f7ff fb1f 	bl	d603c <_ZN9IPAddressC1Ev>
}
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd10      	pop	{r4, pc}
	...

000d6a04 <_ZN9TCPClientC1Ei>:
   d6a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6a08:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a0a:	2300      	movs	r3, #0
   d6a0c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6a0e:	4a14      	ldr	r2, [pc, #80]	; (d6a60 <_ZN9TCPClientC1Ei+0x5c>)
   d6a10:	6043      	str	r3, [r0, #4]
   d6a12:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6a14:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a16:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6a18:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a1a:	20a0      	movs	r0, #160	; 0xa0
   d6a1c:	460e      	mov	r6, r1
   d6a1e:	f7fd fb3a 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a22:	4605      	mov	r5, r0
   d6a24:	b110      	cbz	r0, d6a2c <_ZN9TCPClientC1Ei+0x28>
   d6a26:	4631      	mov	r1, r6
   d6a28:	f7ff ffde 	bl	d69e8 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a2c:	2014      	movs	r0, #20
   d6a2e:	f7fd fb32 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6a32:	4603      	mov	r3, r0
   d6a34:	b128      	cbz	r0, d6a42 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a36:	2201      	movs	r2, #1
   d6a38:	6042      	str	r2, [r0, #4]
   d6a3a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6a3c:	4a09      	ldr	r2, [pc, #36]	; (d6a64 <_ZN9TCPClientC1Ei+0x60>)
   d6a3e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6a40:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6a42:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6a44:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6a46:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6a48:	b128      	cbz	r0, d6a56 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6a4a:	6843      	ldr	r3, [r0, #4]
   d6a4c:	3b01      	subs	r3, #1
   d6a4e:	6043      	str	r3, [r0, #4]
   d6a50:	b90b      	cbnz	r3, d6a56 <_ZN9TCPClientC1Ei+0x52>
   d6a52:	f7ff fddf 	bl	d6614 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6a56:	4620      	mov	r0, r4
   d6a58:	f7ff fed0 	bl	d67fc <_ZN9TCPClient12flush_bufferEv>
}
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	bd70      	pop	{r4, r5, r6, pc}
   d6a60:	000d7d5c 	.word	0x000d7d5c
   d6a64:	000d7d40 	.word	0x000d7d40

000d6a68 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6a68:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6a6a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6a6e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6a70:	f7ff ffc8 	bl	d6a04 <_ZN9TCPClientC1Ei>
}
   d6a74:	4620      	mov	r0, r4
   d6a76:	bd10      	pop	{r4, pc}

000d6a78 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6a78:	b510      	push	{r4, lr}
   d6a7a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6a7c:	6800      	ldr	r0, [r0, #0]
   d6a7e:	2800      	cmp	r0, #0
   d6a80:	db01      	blt.n	d6a86 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6a82:	f7fe fec1 	bl	d5808 <sock_close>
    }
}
   d6a86:	4620      	mov	r0, r4
   d6a88:	bd10      	pop	{r4, pc}

000d6a8a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6a8a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6a8c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6a8e:	4620      	mov	r0, r4
   d6a90:	f7ff fff2 	bl	d6a78 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6a94:	b124      	cbz	r4, d6aa0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6a96:	4620      	mov	r0, r4
   d6a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6a9c:	f7fd bafd 	b.w	d409a <_ZdlPv>
   d6aa0:	bd10      	pop	{r4, pc}

000d6aa2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6aa2:	2200      	movs	r2, #0
   d6aa4:	4611      	mov	r1, r2
   d6aa6:	6840      	ldr	r0, [r0, #4]
   d6aa8:	f7fe bf5a 	b.w	d5960 <network_ready>

000d6aac <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6aac:	2200      	movs	r2, #0
   d6aae:	4611      	mov	r1, r2
   d6ab0:	6840      	ldr	r0, [r0, #4]
   d6ab2:	f7fe bf75 	b.w	d59a0 <network_listening>

000d6ab6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ab6:	2200      	movs	r2, #0
   d6ab8:	4611      	mov	r1, r2
   d6aba:	6840      	ldr	r0, [r0, #4]
   d6abc:	f7fe bf80 	b.w	d59c0 <network_get_listen_timeout>

000d6ac0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6ac0:	2200      	movs	r2, #0
   d6ac2:	6840      	ldr	r0, [r0, #4]
   d6ac4:	f7fe bf74 	b.w	d59b0 <network_set_listen_timeout>

000d6ac8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ac8:	2200      	movs	r2, #0
   d6aca:	f081 0101 	eor.w	r1, r1, #1
   d6ace:	6840      	ldr	r0, [r0, #4]
   d6ad0:	f7fe bf5e 	b.w	d5990 <network_listen>

000d6ad4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6ad4:	2300      	movs	r3, #0
   d6ad6:	461a      	mov	r2, r3
   d6ad8:	4619      	mov	r1, r3
   d6ada:	6840      	ldr	r0, [r0, #4]
   d6adc:	f7fe bf50 	b.w	d5980 <network_off>

000d6ae0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6ae0:	2300      	movs	r3, #0
   d6ae2:	461a      	mov	r2, r3
   d6ae4:	4619      	mov	r1, r3
   d6ae6:	6840      	ldr	r0, [r0, #4]
   d6ae8:	f7fe bf42 	b.w	d5970 <network_on>

000d6aec <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6aec:	2200      	movs	r2, #0
   d6aee:	4611      	mov	r1, r2
   d6af0:	6840      	ldr	r0, [r0, #4]
   d6af2:	f7fe bf25 	b.w	d5940 <network_connecting>

000d6af6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6af6:	2200      	movs	r2, #0
   d6af8:	2102      	movs	r1, #2
   d6afa:	6840      	ldr	r0, [r0, #4]
   d6afc:	f7fe bf28 	b.w	d5950 <network_disconnect>

000d6b00 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b00:	2300      	movs	r3, #0
   d6b02:	461a      	mov	r2, r3
   d6b04:	6840      	ldr	r0, [r0, #4]
   d6b06:	f7fe bf13 	b.w	d5930 <network_connect>
	...

000d6b0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6b0c:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6b0e:	2204      	movs	r2, #4
   d6b10:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6b12:	4a02      	ldr	r2, [pc, #8]	; (d6b1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6b14:	601a      	str	r2, [r3, #0]
   d6b16:	4770      	bx	lr
   d6b18:	2003e720 	.word	0x2003e720
   d6b1c:	000d7dc0 	.word	0x000d7dc0

000d6b20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b20:	2300      	movs	r3, #0
   d6b22:	461a      	mov	r2, r3
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7fe bf03 	b.w	d5930 <network_connect>

000d6b2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	2102      	movs	r1, #2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7fe bf0e 	b.w	d5950 <network_disconnect>

000d6b34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b34:	2200      	movs	r2, #0
   d6b36:	4611      	mov	r1, r2
   d6b38:	6840      	ldr	r0, [r0, #4]
   d6b3a:	f7fe bf01 	b.w	d5940 <network_connecting>

000d6b3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b3e:	2200      	movs	r2, #0
   d6b40:	4611      	mov	r1, r2
   d6b42:	6840      	ldr	r0, [r0, #4]
   d6b44:	f7fe bf0c 	b.w	d5960 <network_ready>

000d6b48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b48:	2300      	movs	r3, #0
   d6b4a:	461a      	mov	r2, r3
   d6b4c:	4619      	mov	r1, r3
   d6b4e:	6840      	ldr	r0, [r0, #4]
   d6b50:	f7fe bf0e 	b.w	d5970 <network_on>

000d6b54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b54:	2300      	movs	r3, #0
   d6b56:	461a      	mov	r2, r3
   d6b58:	4619      	mov	r1, r3
   d6b5a:	6840      	ldr	r0, [r0, #4]
   d6b5c:	f7fe bf10 	b.w	d5980 <network_off>

000d6b60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b60:	2200      	movs	r2, #0
   d6b62:	f081 0101 	eor.w	r1, r1, #1
   d6b66:	6840      	ldr	r0, [r0, #4]
   d6b68:	f7fe bf12 	b.w	d5990 <network_listen>

000d6b6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b6c:	2200      	movs	r2, #0
   d6b6e:	6840      	ldr	r0, [r0, #4]
   d6b70:	f7fe bf1e 	b.w	d59b0 <network_set_listen_timeout>

000d6b74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b74:	2200      	movs	r2, #0
   d6b76:	4611      	mov	r1, r2
   d6b78:	6840      	ldr	r0, [r0, #4]
   d6b7a:	f7fe bf21 	b.w	d59c0 <network_get_listen_timeout>

000d6b7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b7e:	2200      	movs	r2, #0
   d6b80:	4611      	mov	r1, r2
   d6b82:	6840      	ldr	r0, [r0, #4]
   d6b84:	f7fe bf0c 	b.w	d59a0 <network_listening>

000d6b88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b8c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b8e:	b095      	sub	sp, #84	; 0x54
   d6b90:	4616      	mov	r6, r2
   d6b92:	460d      	mov	r5, r1
   d6b94:	4607      	mov	r7, r0
    IPAddress addr;
   d6b96:	f7ff fa51 	bl	d603c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b9a:	4621      	mov	r1, r4
   d6b9c:	2220      	movs	r2, #32
   d6b9e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ba0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6ba2:	f000 faed 	bl	d7180 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6ba6:	2340      	movs	r3, #64	; 0x40
   d6ba8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6baa:	4621      	mov	r1, r4
   d6bac:	466b      	mov	r3, sp
   d6bae:	aa0c      	add	r2, sp, #48	; 0x30
   d6bb0:	4630      	mov	r0, r6
   d6bb2:	f7fe fca9 	bl	d5508 <netdb_getaddrinfo>
    if (!r) {
   d6bb6:	4604      	mov	r4, r0
   d6bb8:	2800      	cmp	r0, #0
   d6bba:	d144      	bne.n	d6c46 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bbc:	4602      	mov	r2, r0
   d6bbe:	2101      	movs	r1, #1
   d6bc0:	6868      	ldr	r0, [r5, #4]
   d6bc2:	f7fe fecd 	bl	d5960 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bc6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bc8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bca:	4622      	mov	r2, r4
   d6bcc:	6868      	ldr	r0, [r5, #4]
   d6bce:	f7fe fec7 	bl	d5960 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bd2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bd4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6bd6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bd8:	2e00      	cmp	r6, #0
   d6bda:	d034      	beq.n	d6c46 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6bdc:	2900      	cmp	r1, #0
   d6bde:	d132      	bne.n	d6c46 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6be0:	6873      	ldr	r3, [r6, #4]
   d6be2:	2b02      	cmp	r3, #2
   d6be4:	d002      	beq.n	d6bec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6be6:	2b0a      	cmp	r3, #10
   d6be8:	d009      	beq.n	d6bfe <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6bea:	e02a      	b.n	d6c42 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6bec:	f1b8 0f00 	cmp.w	r8, #0
   d6bf0:	d027      	beq.n	d6c42 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6bf2:	6971      	ldr	r1, [r6, #20]
   d6bf4:	4638      	mov	r0, r7
   d6bf6:	3104      	adds	r1, #4
   d6bf8:	f7ff fa63 	bl	d60c2 <_ZN9IPAddressaSEPKh>
   d6bfc:	e020      	b.n	d6c40 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6bfe:	f1b9 0f00 	cmp.w	r9, #0
   d6c02:	d01e      	beq.n	d6c42 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c04:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c06:	2211      	movs	r2, #17
   d6c08:	a801      	add	r0, sp, #4
   d6c0a:	f000 fab9 	bl	d7180 <memset>
                    a.v = 6;
   d6c0e:	2306      	movs	r3, #6
   d6c10:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c14:	ad01      	add	r5, sp, #4
   d6c16:	f104 0308 	add.w	r3, r4, #8
   d6c1a:	3418      	adds	r4, #24
   d6c1c:	6818      	ldr	r0, [r3, #0]
   d6c1e:	6859      	ldr	r1, [r3, #4]
   d6c20:	462a      	mov	r2, r5
   d6c22:	c203      	stmia	r2!, {r0, r1}
   d6c24:	3308      	adds	r3, #8
   d6c26:	42a3      	cmp	r3, r4
   d6c28:	4615      	mov	r5, r2
   d6c2a:	d1f7      	bne.n	d6c1c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6c2c:	a901      	add	r1, sp, #4
   d6c2e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c30:	ad07      	add	r5, sp, #28
   d6c32:	f7ff fa11 	bl	d6058 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c38:	1d3c      	adds	r4, r7, #4
   d6c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c3c:	682b      	ldr	r3, [r5, #0]
   d6c3e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6c40:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c42:	69f6      	ldr	r6, [r6, #28]
   d6c44:	e7c8      	b.n	d6bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c46:	9800      	ldr	r0, [sp, #0]
   d6c48:	f7fe fc56 	bl	d54f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c4c:	4638      	mov	r0, r7
   d6c4e:	b015      	add	sp, #84	; 0x54
   d6c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c54:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c56:	4a03      	ldr	r2, [pc, #12]	; (d6c64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c58:	601a      	str	r2, [r3, #0]
   d6c5a:	2200      	movs	r2, #0
   d6c5c:	605a      	str	r2, [r3, #4]
   d6c5e:	4770      	bx	lr
   d6c60:	2003e728 	.word	0x2003e728
   d6c64:	000d7df4 	.word	0x000d7df4

000d6c68 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6c68:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6c6a:	4e18      	ldr	r6, [pc, #96]	; (d6ccc <pinAvailable+0x64>)
   d6c6c:	6831      	ldr	r1, [r6, #0]
   d6c6e:	f011 0501 	ands.w	r5, r1, #1
   d6c72:	4604      	mov	r4, r0
   d6c74:	d10a      	bne.n	d6c8c <pinAvailable+0x24>
   d6c76:	4630      	mov	r0, r6
   d6c78:	f7fd fa1e 	bl	d40b8 <__cxa_guard_acquire>
   d6c7c:	b130      	cbz	r0, d6c8c <pinAvailable+0x24>
   d6c7e:	4629      	mov	r1, r5
   d6c80:	4813      	ldr	r0, [pc, #76]	; (d6cd0 <pinAvailable+0x68>)
   d6c82:	f7fe ff11 	bl	d5aa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c86:	4630      	mov	r0, r6
   d6c88:	f7fd fa1b 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6c8c:	4810      	ldr	r0, [pc, #64]	; (d6cd0 <pinAvailable+0x68>)
   d6c8e:	f7fe ffbb 	bl	d5c08 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6c92:	b128      	cbz	r0, d6ca0 <pinAvailable+0x38>
   d6c94:	f1a4 030b 	sub.w	r3, r4, #11
   d6c98:	2b02      	cmp	r3, #2
   d6c9a:	d801      	bhi.n	d6ca0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6c9c:	2000      	movs	r0, #0
   d6c9e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6ca0:	f000 f896 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d6ca4:	f7ff fb74 	bl	d6390 <_ZN7TwoWire9isEnabledEv>
   d6ca8:	b108      	cbz	r0, d6cae <pinAvailable+0x46>
   d6caa:	2c01      	cmp	r4, #1
   d6cac:	d9f6      	bls.n	d6c9c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6cae:	f7ff faf7 	bl	d62a0 <_Z22__fetch_global_Serial1v>
   d6cb2:	f7ff faf1 	bl	d6298 <_ZN11USARTSerial9isEnabledEv>
   d6cb6:	b118      	cbz	r0, d6cc0 <pinAvailable+0x58>
   d6cb8:	f1a4 0309 	sub.w	r3, r4, #9
   d6cbc:	2b01      	cmp	r3, #1
   d6cbe:	d9ed      	bls.n	d6c9c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6cc0:	2c23      	cmp	r4, #35	; 0x23
   d6cc2:	bf8c      	ite	hi
   d6cc4:	2000      	movhi	r0, #0
   d6cc6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6cc8:	bd70      	pop	{r4, r5, r6, pc}
   d6cca:	bf00      	nop
   d6ccc:	2003e3d0 	.word	0x2003e3d0
   d6cd0:	2003e3d4 	.word	0x2003e3d4

000d6cd4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6cd4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6cd6:	b538      	push	{r3, r4, r5, lr}
   d6cd8:	4604      	mov	r4, r0
   d6cda:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6cdc:	d80a      	bhi.n	d6cf4 <pinMode+0x20>
   d6cde:	29ff      	cmp	r1, #255	; 0xff
   d6ce0:	d008      	beq.n	d6cf4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6ce2:	f7ff ffc1 	bl	d6c68 <pinAvailable>
   d6ce6:	b128      	cbz	r0, d6cf4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6ce8:	4629      	mov	r1, r5
   d6cea:	4620      	mov	r0, r4
}
   d6cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6cf0:	f7fe bc22 	b.w	d5538 <HAL_Pin_Mode>
   d6cf4:	bd38      	pop	{r3, r4, r5, pc}

000d6cf6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6cf6:	b538      	push	{r3, r4, r5, lr}
   d6cf8:	4604      	mov	r4, r0
   d6cfa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cfc:	f7fe fc24 	bl	d5548 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d00:	28ff      	cmp	r0, #255	; 0xff
   d6d02:	d010      	beq.n	d6d26 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6d04:	2806      	cmp	r0, #6
   d6d06:	d804      	bhi.n	d6d12 <digitalWrite+0x1c>
   d6d08:	234d      	movs	r3, #77	; 0x4d
   d6d0a:	fa23 f000 	lsr.w	r0, r3, r0
   d6d0e:	07c3      	lsls	r3, r0, #31
   d6d10:	d409      	bmi.n	d6d26 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d12:	4620      	mov	r0, r4
   d6d14:	f7ff ffa8 	bl	d6c68 <pinAvailable>
   d6d18:	b128      	cbz	r0, d6d26 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d1a:	4629      	mov	r1, r5
   d6d1c:	4620      	mov	r0, r4
}
   d6d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d22:	f7fe bc19 	b.w	d5558 <HAL_GPIO_Write>
   d6d26:	bd38      	pop	{r3, r4, r5, pc}

000d6d28 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6d28:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6d2a:	b510      	push	{r4, lr}
   d6d2c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6d2e:	bf9c      	itt	ls
   d6d30:	340e      	addls	r4, #14
   d6d32:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6d34:	4620      	mov	r0, r4
   d6d36:	f7ff ff97 	bl	d6c68 <pinAvailable>
   d6d3a:	b150      	cbz	r0, d6d52 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6d3c:	2103      	movs	r1, #3
   d6d3e:	4620      	mov	r0, r4
   d6d40:	f7fe fbf2 	bl	d5528 <HAL_Validate_Pin_Function>
   d6d44:	2803      	cmp	r0, #3
   d6d46:	d104      	bne.n	d6d52 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6d48:	4620      	mov	r0, r4
}
   d6d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6d4e:	f7fe bc0b 	b.w	d5568 <HAL_ADC_Read>
}
   d6d52:	2000      	movs	r0, #0
   d6d54:	bd10      	pop	{r4, pc}

000d6d56 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d5a:	4690      	mov	r8, r2
   d6d5c:	461e      	mov	r6, r3
   d6d5e:	2407      	movs	r4, #7
   d6d60:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6d62:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d6d64:	f1b8 0f00 	cmp.w	r8, #0
   d6d68:	d104      	bne.n	d6d74 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6d6a:	f1c4 0107 	rsb	r1, r4, #7
   d6d6e:	fa46 f101 	asr.w	r1, r6, r1
   d6d72:	e001      	b.n	d6d78 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6d74:	fa46 f104 	asr.w	r1, r6, r4
   d6d78:	f001 0101 	and.w	r1, r1, #1
   d6d7c:	4638      	mov	r0, r7
   d6d7e:	f7ff ffba 	bl	d6cf6 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6d82:	2101      	movs	r1, #1
   d6d84:	4628      	mov	r0, r5
   d6d86:	f7ff ffb6 	bl	d6cf6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6d8a:	2100      	movs	r1, #0
   d6d8c:	4628      	mov	r0, r5
   d6d8e:	f7ff ffb2 	bl	d6cf6 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6d92:	f114 34ff 	adds.w	r4, r4, #4294967295
   d6d96:	d2e5      	bcs.n	d6d64 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d9c <_Z17acquireWireBufferv>:
   d6d9c:	b570      	push	{r4, r5, r6, lr}
   d6d9e:	4604      	mov	r4, r0
   d6da0:	2514      	movs	r5, #20
   d6da2:	462a      	mov	r2, r5
   d6da4:	4e09      	ldr	r6, [pc, #36]	; (d6dcc <_Z17acquireWireBufferv+0x30>)
   d6da6:	2100      	movs	r1, #0
   d6da8:	f000 f9ea 	bl	d7180 <memset>
   d6dac:	8025      	strh	r5, [r4, #0]
   d6dae:	2520      	movs	r5, #32
   d6db0:	4631      	mov	r1, r6
   d6db2:	60a5      	str	r5, [r4, #8]
   d6db4:	6125      	str	r5, [r4, #16]
   d6db6:	4628      	mov	r0, r5
   d6db8:	f000 f840 	bl	d6e3c <_ZnajRKSt9nothrow_t>
   d6dbc:	4631      	mov	r1, r6
   d6dbe:	6060      	str	r0, [r4, #4]
   d6dc0:	4628      	mov	r0, r5
   d6dc2:	f000 f83b 	bl	d6e3c <_ZnajRKSt9nothrow_t>
   d6dc6:	60e0      	str	r0, [r4, #12]
   d6dc8:	4620      	mov	r0, r4
   d6dca:	bd70      	pop	{r4, r5, r6, pc}
   d6dcc:	000d7e20 	.word	0x000d7e20

000d6dd0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6dd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6dd2:	4d0e      	ldr	r5, [pc, #56]	; (d6e0c <_Z19__fetch_global_Wirev+0x3c>)
   d6dd4:	6829      	ldr	r1, [r5, #0]
   d6dd6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6dda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ddc:	d113      	bne.n	d6e06 <_Z19__fetch_global_Wirev+0x36>
   d6dde:	4628      	mov	r0, r5
   d6de0:	f7fd f96a 	bl	d40b8 <__cxa_guard_acquire>
   d6de4:	b178      	cbz	r0, d6e06 <_Z19__fetch_global_Wirev+0x36>
   d6de6:	a801      	add	r0, sp, #4
   d6de8:	f7ff ffd8 	bl	d6d9c <_Z17acquireWireBufferv>
   d6dec:	aa01      	add	r2, sp, #4
   d6dee:	4621      	mov	r1, r4
   d6df0:	4807      	ldr	r0, [pc, #28]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6df2:	f7ff faa7 	bl	d6344 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6df6:	4628      	mov	r0, r5
   d6df8:	f7fd f963 	bl	d40c2 <__cxa_guard_release>
   d6dfc:	4a05      	ldr	r2, [pc, #20]	; (d6e14 <_Z19__fetch_global_Wirev+0x44>)
   d6dfe:	4906      	ldr	r1, [pc, #24]	; (d6e18 <_Z19__fetch_global_Wirev+0x48>)
   d6e00:	4803      	ldr	r0, [pc, #12]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6e02:	f000 f80b 	bl	d6e1c <__aeabi_atexit>
	return wire;
}
   d6e06:	4802      	ldr	r0, [pc, #8]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6e08:	b007      	add	sp, #28
   d6e0a:	bd30      	pop	{r4, r5, pc}
   d6e0c:	2003e734 	.word	0x2003e734
   d6e10:	2003e738 	.word	0x2003e738
   d6e14:	2003e2a0 	.word	0x2003e2a0
   d6e18:	000d62ed 	.word	0x000d62ed

000d6e1c <__aeabi_atexit>:
   d6e1c:	460b      	mov	r3, r1
   d6e1e:	4601      	mov	r1, r0
   d6e20:	4618      	mov	r0, r3
   d6e22:	f000 b965 	b.w	d70f0 <__cxa_atexit>
	...

000d6e28 <_ZSt15get_new_handlerv>:
   d6e28:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <_ZSt15get_new_handlerv+0xc>)
   d6e2a:	6818      	ldr	r0, [r3, #0]
   d6e2c:	f3bf 8f5f 	dmb	sy
   d6e30:	4770      	bx	lr
   d6e32:	bf00      	nop
   d6e34:	2003e74c 	.word	0x2003e74c

000d6e38 <_ZdlPvj>:
   d6e38:	f7fd b92f 	b.w	d409a <_ZdlPv>

000d6e3c <_ZnajRKSt9nothrow_t>:
   d6e3c:	f000 b800 	b.w	d6e40 <_ZnwjRKSt9nothrow_t>

000d6e40 <_ZnwjRKSt9nothrow_t>:
   d6e40:	b510      	push	{r4, lr}
   d6e42:	2800      	cmp	r0, #0
   d6e44:	bf14      	ite	ne
   d6e46:	4604      	movne	r4, r0
   d6e48:	2401      	moveq	r4, #1
   d6e4a:	4620      	mov	r0, r4
   d6e4c:	f7fe fdc8 	bl	d59e0 <malloc>
   d6e50:	b920      	cbnz	r0, d6e5c <_ZnwjRKSt9nothrow_t+0x1c>
   d6e52:	f7ff ffe9 	bl	d6e28 <_ZSt15get_new_handlerv>
   d6e56:	b108      	cbz	r0, d6e5c <_ZnwjRKSt9nothrow_t+0x1c>
   d6e58:	4780      	blx	r0
   d6e5a:	e7f6      	b.n	d6e4a <_ZnwjRKSt9nothrow_t+0xa>
   d6e5c:	bd10      	pop	{r4, pc}
	...

000d6e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e60:	4b18      	ldr	r3, [pc, #96]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e62:	681a      	ldr	r2, [r3, #0]
   d6e64:	07d1      	lsls	r1, r2, #31
   d6e66:	bf5c      	itt	pl
   d6e68:	2201      	movpl	r2, #1
   d6e6a:	601a      	strpl	r2, [r3, #0]
   d6e6c:	4b16      	ldr	r3, [pc, #88]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e6e:	681a      	ldr	r2, [r3, #0]
   d6e70:	07d2      	lsls	r2, r2, #31
   d6e72:	bf5c      	itt	pl
   d6e74:	2201      	movpl	r2, #1
   d6e76:	601a      	strpl	r2, [r3, #0]
   d6e78:	4b14      	ldr	r3, [pc, #80]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e7a:	681a      	ldr	r2, [r3, #0]
   d6e7c:	07d0      	lsls	r0, r2, #31
   d6e7e:	bf5c      	itt	pl
   d6e80:	2201      	movpl	r2, #1
   d6e82:	601a      	strpl	r2, [r3, #0]
   d6e84:	4b12      	ldr	r3, [pc, #72]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e86:	681a      	ldr	r2, [r3, #0]
   d6e88:	07d1      	lsls	r1, r2, #31
   d6e8a:	bf5c      	itt	pl
   d6e8c:	2201      	movpl	r2, #1
   d6e8e:	601a      	strpl	r2, [r3, #0]
   d6e90:	4b10      	ldr	r3, [pc, #64]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e92:	681a      	ldr	r2, [r3, #0]
   d6e94:	07d2      	lsls	r2, r2, #31
   d6e96:	bf5c      	itt	pl
   d6e98:	2201      	movpl	r2, #1
   d6e9a:	601a      	strpl	r2, [r3, #0]
   d6e9c:	4b0e      	ldr	r3, [pc, #56]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e9e:	681a      	ldr	r2, [r3, #0]
   d6ea0:	07d0      	lsls	r0, r2, #31
   d6ea2:	bf5c      	itt	pl
   d6ea4:	2201      	movpl	r2, #1
   d6ea6:	601a      	strpl	r2, [r3, #0]
   d6ea8:	4b0c      	ldr	r3, [pc, #48]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6eaa:	681a      	ldr	r2, [r3, #0]
   d6eac:	07d1      	lsls	r1, r2, #31
   d6eae:	bf5c      	itt	pl
   d6eb0:	2201      	movpl	r2, #1
   d6eb2:	601a      	strpl	r2, [r3, #0]
   d6eb4:	4b0a      	ldr	r3, [pc, #40]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6eb6:	681a      	ldr	r2, [r3, #0]
   d6eb8:	07d2      	lsls	r2, r2, #31
   d6eba:	bf5c      	itt	pl
   d6ebc:	2201      	movpl	r2, #1
   d6ebe:	601a      	strpl	r2, [r3, #0]
   d6ec0:	4770      	bx	lr
   d6ec2:	bf00      	nop
   d6ec4:	2003e76c 	.word	0x2003e76c
   d6ec8:	2003e768 	.word	0x2003e768
   d6ecc:	2003e764 	.word	0x2003e764
   d6ed0:	2003e760 	.word	0x2003e760
   d6ed4:	2003e75c 	.word	0x2003e75c
   d6ed8:	2003e758 	.word	0x2003e758
   d6edc:	2003e754 	.word	0x2003e754
   d6ee0:	2003e750 	.word	0x2003e750

000d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6ee4:	4b24      	ldr	r3, [pc, #144]	; (d6f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6ee6:	681a      	ldr	r2, [r3, #0]
   d6ee8:	07d0      	lsls	r0, r2, #31
   d6eea:	bf5c      	itt	pl
   d6eec:	2201      	movpl	r2, #1
   d6eee:	601a      	strpl	r2, [r3, #0]
   d6ef0:	4b22      	ldr	r3, [pc, #136]	; (d6f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6ef2:	681a      	ldr	r2, [r3, #0]
   d6ef4:	07d1      	lsls	r1, r2, #31
   d6ef6:	bf5c      	itt	pl
   d6ef8:	2201      	movpl	r2, #1
   d6efa:	601a      	strpl	r2, [r3, #0]
   d6efc:	4b20      	ldr	r3, [pc, #128]	; (d6f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6efe:	681a      	ldr	r2, [r3, #0]
   d6f00:	07d2      	lsls	r2, r2, #31
   d6f02:	bf5c      	itt	pl
   d6f04:	2201      	movpl	r2, #1
   d6f06:	601a      	strpl	r2, [r3, #0]
   d6f08:	4b1e      	ldr	r3, [pc, #120]	; (d6f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6f0a:	681a      	ldr	r2, [r3, #0]
   d6f0c:	07d0      	lsls	r0, r2, #31
   d6f0e:	bf5c      	itt	pl
   d6f10:	2201      	movpl	r2, #1
   d6f12:	601a      	strpl	r2, [r3, #0]
   d6f14:	4b1c      	ldr	r3, [pc, #112]	; (d6f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6f16:	681a      	ldr	r2, [r3, #0]
   d6f18:	07d1      	lsls	r1, r2, #31
   d6f1a:	bf5c      	itt	pl
   d6f1c:	2201      	movpl	r2, #1
   d6f1e:	601a      	strpl	r2, [r3, #0]
   d6f20:	4b1a      	ldr	r3, [pc, #104]	; (d6f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6f22:	681a      	ldr	r2, [r3, #0]
   d6f24:	07d2      	lsls	r2, r2, #31
   d6f26:	bf5c      	itt	pl
   d6f28:	2201      	movpl	r2, #1
   d6f2a:	601a      	strpl	r2, [r3, #0]
   d6f2c:	4b18      	ldr	r3, [pc, #96]	; (d6f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6f2e:	681a      	ldr	r2, [r3, #0]
   d6f30:	07d0      	lsls	r0, r2, #31
   d6f32:	bf5c      	itt	pl
   d6f34:	2201      	movpl	r2, #1
   d6f36:	601a      	strpl	r2, [r3, #0]
   d6f38:	4b16      	ldr	r3, [pc, #88]	; (d6f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6f3a:	681a      	ldr	r2, [r3, #0]
   d6f3c:	07d1      	lsls	r1, r2, #31
   d6f3e:	bf5c      	itt	pl
   d6f40:	2201      	movpl	r2, #1
   d6f42:	601a      	strpl	r2, [r3, #0]
   d6f44:	4b14      	ldr	r3, [pc, #80]	; (d6f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6f46:	681a      	ldr	r2, [r3, #0]
   d6f48:	07d2      	lsls	r2, r2, #31
   d6f4a:	bf5c      	itt	pl
   d6f4c:	2201      	movpl	r2, #1
   d6f4e:	601a      	strpl	r2, [r3, #0]
   d6f50:	4b12      	ldr	r3, [pc, #72]	; (d6f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6f52:	681a      	ldr	r2, [r3, #0]
   d6f54:	07d0      	lsls	r0, r2, #31
   d6f56:	bf5c      	itt	pl
   d6f58:	2201      	movpl	r2, #1
   d6f5a:	601a      	strpl	r2, [r3, #0]
   d6f5c:	4b10      	ldr	r3, [pc, #64]	; (d6fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6f5e:	681a      	ldr	r2, [r3, #0]
   d6f60:	07d1      	lsls	r1, r2, #31
   d6f62:	bf5c      	itt	pl
   d6f64:	2201      	movpl	r2, #1
   d6f66:	601a      	strpl	r2, [r3, #0]
   d6f68:	4b0e      	ldr	r3, [pc, #56]	; (d6fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6f6a:	681a      	ldr	r2, [r3, #0]
   d6f6c:	07d2      	lsls	r2, r2, #31
   d6f6e:	bf5c      	itt	pl
   d6f70:	2201      	movpl	r2, #1
   d6f72:	601a      	strpl	r2, [r3, #0]
   d6f74:	4770      	bx	lr
   d6f76:	bf00      	nop
   d6f78:	2003e79c 	.word	0x2003e79c
   d6f7c:	2003e798 	.word	0x2003e798
   d6f80:	2003e794 	.word	0x2003e794
   d6f84:	2003e790 	.word	0x2003e790
   d6f88:	2003e78c 	.word	0x2003e78c
   d6f8c:	2003e788 	.word	0x2003e788
   d6f90:	2003e784 	.word	0x2003e784
   d6f94:	2003e780 	.word	0x2003e780
   d6f98:	2003e77c 	.word	0x2003e77c
   d6f9c:	2003e778 	.word	0x2003e778
   d6fa0:	2003e774 	.word	0x2003e774
   d6fa4:	2003e770 	.word	0x2003e770

000d6fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6fa8:	4b24      	ldr	r3, [pc, #144]	; (d703c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6faa:	681a      	ldr	r2, [r3, #0]
   d6fac:	07d0      	lsls	r0, r2, #31
   d6fae:	bf5c      	itt	pl
   d6fb0:	2201      	movpl	r2, #1
   d6fb2:	601a      	strpl	r2, [r3, #0]
   d6fb4:	4b22      	ldr	r3, [pc, #136]	; (d7040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6fb6:	681a      	ldr	r2, [r3, #0]
   d6fb8:	07d1      	lsls	r1, r2, #31
   d6fba:	bf5c      	itt	pl
   d6fbc:	2201      	movpl	r2, #1
   d6fbe:	601a      	strpl	r2, [r3, #0]
   d6fc0:	4b20      	ldr	r3, [pc, #128]	; (d7044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6fc2:	681a      	ldr	r2, [r3, #0]
   d6fc4:	07d2      	lsls	r2, r2, #31
   d6fc6:	bf5c      	itt	pl
   d6fc8:	2201      	movpl	r2, #1
   d6fca:	601a      	strpl	r2, [r3, #0]
   d6fcc:	4b1e      	ldr	r3, [pc, #120]	; (d7048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6fce:	681a      	ldr	r2, [r3, #0]
   d6fd0:	07d0      	lsls	r0, r2, #31
   d6fd2:	bf5c      	itt	pl
   d6fd4:	2201      	movpl	r2, #1
   d6fd6:	601a      	strpl	r2, [r3, #0]
   d6fd8:	4b1c      	ldr	r3, [pc, #112]	; (d704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6fda:	681a      	ldr	r2, [r3, #0]
   d6fdc:	07d1      	lsls	r1, r2, #31
   d6fde:	bf5c      	itt	pl
   d6fe0:	2201      	movpl	r2, #1
   d6fe2:	601a      	strpl	r2, [r3, #0]
   d6fe4:	4b1a      	ldr	r3, [pc, #104]	; (d7050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6fe6:	681a      	ldr	r2, [r3, #0]
   d6fe8:	07d2      	lsls	r2, r2, #31
   d6fea:	bf5c      	itt	pl
   d6fec:	2201      	movpl	r2, #1
   d6fee:	601a      	strpl	r2, [r3, #0]
   d6ff0:	4b18      	ldr	r3, [pc, #96]	; (d7054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6ff2:	681a      	ldr	r2, [r3, #0]
   d6ff4:	07d0      	lsls	r0, r2, #31
   d6ff6:	bf5c      	itt	pl
   d6ff8:	2201      	movpl	r2, #1
   d6ffa:	601a      	strpl	r2, [r3, #0]
   d6ffc:	4b16      	ldr	r3, [pc, #88]	; (d7058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6ffe:	681a      	ldr	r2, [r3, #0]
   d7000:	07d1      	lsls	r1, r2, #31
   d7002:	bf5c      	itt	pl
   d7004:	2201      	movpl	r2, #1
   d7006:	601a      	strpl	r2, [r3, #0]
   d7008:	4b14      	ldr	r3, [pc, #80]	; (d705c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d700a:	681a      	ldr	r2, [r3, #0]
   d700c:	07d2      	lsls	r2, r2, #31
   d700e:	bf5c      	itt	pl
   d7010:	2201      	movpl	r2, #1
   d7012:	601a      	strpl	r2, [r3, #0]
   d7014:	4b12      	ldr	r3, [pc, #72]	; (d7060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7016:	681a      	ldr	r2, [r3, #0]
   d7018:	07d0      	lsls	r0, r2, #31
   d701a:	bf5c      	itt	pl
   d701c:	2201      	movpl	r2, #1
   d701e:	601a      	strpl	r2, [r3, #0]
   d7020:	4b10      	ldr	r3, [pc, #64]	; (d7064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7022:	681a      	ldr	r2, [r3, #0]
   d7024:	07d1      	lsls	r1, r2, #31
   d7026:	bf5c      	itt	pl
   d7028:	2201      	movpl	r2, #1
   d702a:	601a      	strpl	r2, [r3, #0]
   d702c:	4b0e      	ldr	r3, [pc, #56]	; (d7068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d702e:	681a      	ldr	r2, [r3, #0]
   d7030:	07d2      	lsls	r2, r2, #31
   d7032:	bf5c      	itt	pl
   d7034:	2201      	movpl	r2, #1
   d7036:	601a      	strpl	r2, [r3, #0]
   d7038:	4770      	bx	lr
   d703a:	bf00      	nop
   d703c:	2003e7cc 	.word	0x2003e7cc
   d7040:	2003e7c8 	.word	0x2003e7c8
   d7044:	2003e7c4 	.word	0x2003e7c4
   d7048:	2003e7c0 	.word	0x2003e7c0
   d704c:	2003e7bc 	.word	0x2003e7bc
   d7050:	2003e7b8 	.word	0x2003e7b8
   d7054:	2003e7b4 	.word	0x2003e7b4
   d7058:	2003e7b0 	.word	0x2003e7b0
   d705c:	2003e7ac 	.word	0x2003e7ac
   d7060:	2003e7a8 	.word	0x2003e7a8
   d7064:	2003e7a4 	.word	0x2003e7a4
   d7068:	2003e7a0 	.word	0x2003e7a0

000d706c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d706c:	4b18      	ldr	r3, [pc, #96]	; (d70d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d706e:	681a      	ldr	r2, [r3, #0]
   d7070:	07d1      	lsls	r1, r2, #31
   d7072:	bf5c      	itt	pl
   d7074:	2201      	movpl	r2, #1
   d7076:	601a      	strpl	r2, [r3, #0]
   d7078:	4b16      	ldr	r3, [pc, #88]	; (d70d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d707a:	681a      	ldr	r2, [r3, #0]
   d707c:	07d2      	lsls	r2, r2, #31
   d707e:	bf5c      	itt	pl
   d7080:	2201      	movpl	r2, #1
   d7082:	601a      	strpl	r2, [r3, #0]
   d7084:	4b14      	ldr	r3, [pc, #80]	; (d70d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7086:	681a      	ldr	r2, [r3, #0]
   d7088:	07d0      	lsls	r0, r2, #31
   d708a:	bf5c      	itt	pl
   d708c:	2201      	movpl	r2, #1
   d708e:	601a      	strpl	r2, [r3, #0]
   d7090:	4b12      	ldr	r3, [pc, #72]	; (d70dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7092:	681a      	ldr	r2, [r3, #0]
   d7094:	07d1      	lsls	r1, r2, #31
   d7096:	bf5c      	itt	pl
   d7098:	2201      	movpl	r2, #1
   d709a:	601a      	strpl	r2, [r3, #0]
   d709c:	4b10      	ldr	r3, [pc, #64]	; (d70e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d709e:	681a      	ldr	r2, [r3, #0]
   d70a0:	07d2      	lsls	r2, r2, #31
   d70a2:	bf5c      	itt	pl
   d70a4:	2201      	movpl	r2, #1
   d70a6:	601a      	strpl	r2, [r3, #0]
   d70a8:	4b0e      	ldr	r3, [pc, #56]	; (d70e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d70aa:	681a      	ldr	r2, [r3, #0]
   d70ac:	07d0      	lsls	r0, r2, #31
   d70ae:	bf5c      	itt	pl
   d70b0:	2201      	movpl	r2, #1
   d70b2:	601a      	strpl	r2, [r3, #0]
   d70b4:	4b0c      	ldr	r3, [pc, #48]	; (d70e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d70b6:	681a      	ldr	r2, [r3, #0]
   d70b8:	07d1      	lsls	r1, r2, #31
   d70ba:	bf5c      	itt	pl
   d70bc:	2201      	movpl	r2, #1
   d70be:	601a      	strpl	r2, [r3, #0]
   d70c0:	4b0a      	ldr	r3, [pc, #40]	; (d70ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d70c2:	681a      	ldr	r2, [r3, #0]
   d70c4:	07d2      	lsls	r2, r2, #31
   d70c6:	bf5c      	itt	pl
   d70c8:	2201      	movpl	r2, #1
   d70ca:	601a      	strpl	r2, [r3, #0]
   d70cc:	4770      	bx	lr
   d70ce:	bf00      	nop
   d70d0:	2003e7ec 	.word	0x2003e7ec
   d70d4:	2003e7e8 	.word	0x2003e7e8
   d70d8:	2003e7e4 	.word	0x2003e7e4
   d70dc:	2003e7e0 	.word	0x2003e7e0
   d70e0:	2003e7dc 	.word	0x2003e7dc
   d70e4:	2003e7d8 	.word	0x2003e7d8
   d70e8:	2003e7d4 	.word	0x2003e7d4
   d70ec:	2003e7d0 	.word	0x2003e7d0

000d70f0 <__cxa_atexit>:
   d70f0:	b510      	push	{r4, lr}
   d70f2:	4c05      	ldr	r4, [pc, #20]	; (d7108 <__cxa_atexit+0x18>)
   d70f4:	4613      	mov	r3, r2
   d70f6:	b12c      	cbz	r4, d7104 <__cxa_atexit+0x14>
   d70f8:	460a      	mov	r2, r1
   d70fa:	4601      	mov	r1, r0
   d70fc:	2002      	movs	r0, #2
   d70fe:	f3af 8000 	nop.w
   d7102:	bd10      	pop	{r4, pc}
   d7104:	4620      	mov	r0, r4
   d7106:	bd10      	pop	{r4, pc}
   d7108:	00000000 	.word	0x00000000

000d710c <ldiv>:
   d710c:	2900      	cmp	r1, #0
   d710e:	b510      	push	{r4, lr}
   d7110:	fb91 f4f2 	sdiv	r4, r1, r2
   d7114:	fb02 1314 	mls	r3, r2, r4, r1
   d7118:	db04      	blt.n	d7124 <ldiv+0x18>
   d711a:	2b00      	cmp	r3, #0
   d711c:	da07      	bge.n	d712e <ldiv+0x22>
   d711e:	3401      	adds	r4, #1
   d7120:	1a9b      	subs	r3, r3, r2
   d7122:	e004      	b.n	d712e <ldiv+0x22>
   d7124:	2b00      	cmp	r3, #0
   d7126:	bfc4      	itt	gt
   d7128:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d712c:	189b      	addgt	r3, r3, r2
   d712e:	6004      	str	r4, [r0, #0]
   d7130:	6043      	str	r3, [r0, #4]
   d7132:	bd10      	pop	{r4, pc}

000d7134 <memcpy>:
   d7134:	b510      	push	{r4, lr}
   d7136:	1e43      	subs	r3, r0, #1
   d7138:	440a      	add	r2, r1
   d713a:	4291      	cmp	r1, r2
   d713c:	d004      	beq.n	d7148 <memcpy+0x14>
   d713e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7142:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7146:	e7f8      	b.n	d713a <memcpy+0x6>
   d7148:	bd10      	pop	{r4, pc}

000d714a <memmove>:
   d714a:	4288      	cmp	r0, r1
   d714c:	b510      	push	{r4, lr}
   d714e:	eb01 0302 	add.w	r3, r1, r2
   d7152:	d801      	bhi.n	d7158 <memmove+0xe>
   d7154:	1e42      	subs	r2, r0, #1
   d7156:	e00b      	b.n	d7170 <memmove+0x26>
   d7158:	4298      	cmp	r0, r3
   d715a:	d2fb      	bcs.n	d7154 <memmove+0xa>
   d715c:	1881      	adds	r1, r0, r2
   d715e:	1ad2      	subs	r2, r2, r3
   d7160:	42d3      	cmn	r3, r2
   d7162:	d004      	beq.n	d716e <memmove+0x24>
   d7164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7168:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d716c:	e7f8      	b.n	d7160 <memmove+0x16>
   d716e:	bd10      	pop	{r4, pc}
   d7170:	4299      	cmp	r1, r3
   d7172:	d004      	beq.n	d717e <memmove+0x34>
   d7174:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7178:	f802 4f01 	strb.w	r4, [r2, #1]!
   d717c:	e7f8      	b.n	d7170 <memmove+0x26>
   d717e:	bd10      	pop	{r4, pc}

000d7180 <memset>:
   d7180:	4402      	add	r2, r0
   d7182:	4603      	mov	r3, r0
   d7184:	4293      	cmp	r3, r2
   d7186:	d002      	beq.n	d718e <memset+0xe>
   d7188:	f803 1b01 	strb.w	r1, [r3], #1
   d718c:	e7fa      	b.n	d7184 <memset+0x4>
   d718e:	4770      	bx	lr

000d7190 <srand>:
   d7190:	b538      	push	{r3, r4, r5, lr}
   d7192:	4b12      	ldr	r3, [pc, #72]	; (d71dc <srand+0x4c>)
   d7194:	681c      	ldr	r4, [r3, #0]
   d7196:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7198:	4605      	mov	r5, r0
   d719a:	b9d3      	cbnz	r3, d71d2 <srand+0x42>
   d719c:	2018      	movs	r0, #24
   d719e:	f7fe fc1f 	bl	d59e0 <malloc>
   d71a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d71a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d71a8:	8003      	strh	r3, [r0, #0]
   d71aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d71ae:	8043      	strh	r3, [r0, #2]
   d71b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d71b4:	8083      	strh	r3, [r0, #4]
   d71b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d71ba:	80c3      	strh	r3, [r0, #6]
   d71bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d71c0:	8103      	strh	r3, [r0, #8]
   d71c2:	2305      	movs	r3, #5
   d71c4:	8143      	strh	r3, [r0, #10]
   d71c6:	230b      	movs	r3, #11
   d71c8:	8183      	strh	r3, [r0, #12]
   d71ca:	2201      	movs	r2, #1
   d71cc:	2300      	movs	r3, #0
   d71ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d71d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d71d4:	2200      	movs	r2, #0
   d71d6:	611d      	str	r5, [r3, #16]
   d71d8:	615a      	str	r2, [r3, #20]
   d71da:	bd38      	pop	{r3, r4, r5, pc}
   d71dc:	2003e29c 	.word	0x2003e29c

000d71e0 <strcpy>:
   d71e0:	4603      	mov	r3, r0
   d71e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d71e6:	f803 2b01 	strb.w	r2, [r3], #1
   d71ea:	2a00      	cmp	r2, #0
   d71ec:	d1f9      	bne.n	d71e2 <strcpy+0x2>
   d71ee:	4770      	bx	lr

000d71f0 <strlen>:
   d71f0:	4603      	mov	r3, r0
   d71f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71f6:	2a00      	cmp	r2, #0
   d71f8:	d1fb      	bne.n	d71f2 <strlen+0x2>
   d71fa:	1a18      	subs	r0, r3, r0
   d71fc:	3801      	subs	r0, #1
   d71fe:	4770      	bx	lr

000d7200 <strncpy>:
   d7200:	b510      	push	{r4, lr}
   d7202:	4603      	mov	r3, r0
   d7204:	b142      	cbz	r2, d7218 <strncpy+0x18>
   d7206:	f811 4b01 	ldrb.w	r4, [r1], #1
   d720a:	f803 4b01 	strb.w	r4, [r3], #1
   d720e:	3a01      	subs	r2, #1
   d7210:	2c00      	cmp	r4, #0
   d7212:	d1f7      	bne.n	d7204 <strncpy+0x4>
   d7214:	441a      	add	r2, r3
   d7216:	e000      	b.n	d721a <strncpy+0x1a>
   d7218:	bd10      	pop	{r4, pc}
   d721a:	4293      	cmp	r3, r2
   d721c:	d002      	beq.n	d7224 <strncpy+0x24>
   d721e:	f803 4b01 	strb.w	r4, [r3], #1
   d7222:	e7fa      	b.n	d721a <strncpy+0x1a>
   d7224:	bd10      	pop	{r4, pc}

000d7226 <link_code_end>:
	...

000d7228 <dynalib_user>:
   d7228:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7238:	0000 0000 6854 2065 6f6d 7369 7574 6572     ....The moisture
   d7248:	7220 6165 6964 676e 6920 2073 6925 0a20      reading is %i .
   d7258:	2000 4f4d 5349 5554 4552 0a20 2020 2520     . MOISTURE .   %
   d7268:	2069 000a 6548 6c6c 2c6f 7720 726f 646c     i ..Hello, world
   d7278:	0021 6f43 6e6e 6365 6974 676e 7420 206f     !.Connecting to 
   d7288:	514d 5454 2e2e 202e 5200 7465 7972 6e69     MQTT... .Retryin
   d7298:	2067 514d 5454 6320 6e6f 656e 7463 6f69     g MQTT connectio
   d72a8:	206e 6e69 3520 7320 6365 6e6f 7364 2e2e     n in 5 seconds..
   d72b8:	002e 514d 5454 4320 6e6f 656e 7463 6465     ..MQTT Connected
   d72c8:	0021 6950 676e 6e69 2067 514d 5454 0a20     !.Pinging MQTT .
   d72d8:	4400 7369 6f63 6e6e 6365 6974 676e 0a20     .Disconnecting .
   d72e8:	5000 6275 696c 6873 6e69 2067 6f4d 7369     .Publishing Mois
   d72f8:	7574 6572 4420 7461 3a61 2520 2069 000a     ture Data: %i ..
   d7308:	6172 6873 7061 6900 2e6f 6461 6661 7572     rashap.io.adafru
   d7318:	7469 632e 6d6f 3500 3839 3631 6639 3361     it.com.598169fa3
   d7328:	6162 3439 3336 3936 3134 3361 3033 3739     ba94636941a33097
   d7338:	6536 3234 3265 0063 6172 6873 7061 662f     6e42e2c.rashap/f
   d7348:	6565 7364 412f 7266 6369 5f61 6f4d 7369     eeds/Africa_Mois
   d7358:	7574 6572 0000 0000                         ture....

000d7360 <_ZTV16Adafruit_SSD1306>:
	...
   d7368:	40c9 000d 43a1 000d 4e79 000d 5d19 000d     .@...C..yN...]..
   d7378:	4745 000d 4b79 000d 45cd 000d 4459 000d     EG..yK...E..YD..
   d7388:	4c39 000d 4ccf 000d 4d07 000d 4d23 000d     9L...L...M..#M..

000d7398 <_ZTV12Adafruit_GFX>:
	...
   d73a8:	4e79 000d 5d19 000d 40a5 000d 4b79 000d     yN...]...@..yK..
   d73b8:	4c99 000d 4cb5 000d 4c39 000d 4ccf 000d     .L...L..9L...L..
   d73c8:	4d07 000d 4d23 000d                         .M..#M..

000d73d0 <_ZL4font>:
   d73d0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d73e0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d73f0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7400:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7410:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7420:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7430:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7440:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7450:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7460:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7470:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7480:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7490:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d74a0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d74b0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d74c0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d74d0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d74e0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d74f0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7500:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7510:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7520:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7530:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7540:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7550:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7560:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7570:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7580:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7590:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d75a0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d75b0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d75c0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d75d0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d75e0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d75f0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7600:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7610:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7620:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7630:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7640:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7650:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7660:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d7670:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7680:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7690:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d76a0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d76b0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d76c0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d76d0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d76e0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d76f0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7700:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7710:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7720:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7730:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7740:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d7750:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d7760:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d7770:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d7780:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d7790:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d77a0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d77b0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d77c0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d77d0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d77e0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d77f0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7800:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7810:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d7820:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d7830:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d7840:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d7850:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d7860:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d7870:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d7880:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d7890:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d78a0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d78b0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d78c0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d78cc <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d78d4:	40cb 000d 43af 000d 4f0d 000d 4fb9 000d     .@...C...O...O..
   d78e4:	4feb 000d 4f21 000d 4f61 000d               .O..!O..aO..

000d78f0 <_ZTV13Adafruit_MQTT>:
	...
   d7900:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d7910:	40a5 000d                                   .@..

000d7914 <CSWTCH.52>:
   d7914:	7977 000d 798b 000d 795b 000d 799d 000d     wy...y..[y...y..
   d7924:	79e2 000d 7a27 000d 7a47 000d 7a7a 000d     .y..'z..Gz..zz..
   d7934:	7a94 000d 7acb 000d 5b20 7830 3000 5d00     .z...z.. [0x.0.]
   d7944:	202c 0a00 0009 7244 706f 6570 2064 2061     , ....Dropped a 
   d7954:	6170 6b63 7465 5500 6b6e 6f6e 6e77 6520     packet.Unknown e
   d7964:	7272 726f 4d00 5451 0054 2525 6425 252e     rror.MQTT.%%%d.%
   d7974:	6664 4600 6961 656c 2064 6f74 7320 6275     df.Failed to sub
   d7984:	6373 6972 6562 4300 6e6f 656e 7463 6f69     scribe.Connectio
   d7994:	206e 6166 6c69 6465 5400 6568 5320 7265     n failed.The Ser
   d79a4:	6576 2072 6f64 7365 6e20 746f 7320 7075     ver does not sup
   d79b4:	6f70 7472 7420 6568 6c20 7665 6c65 6f20     port the level o
   d79c4:	2066 6874 2065 514d 5454 7020 6f72 6f74     f the MQTT proto
   d79d4:	6f63 206c 6572 7571 7365 6574 0064 6854     col requested.Th
   d79e4:	2065 6c43 6569 746e 6920 6564 746e 6669     e Client identif
   d79f4:	6569 2072 7369 6320 726f 6572 7463 5520     ier is correct U
   d7a04:	4654 382d 6220 7475 6e20 746f 6120 6c6c     TF-8 but not all
   d7a14:	776f 6465 6220 2079 6874 2065 6553 7672     owed by the Serv
   d7a24:	7265 5400 6568 4d20 5451 2054 6573 7672     er.The MQTT serv
   d7a34:	6369 2065 7369 7520 616e 6176 6c69 6261     ice is unavailab
   d7a44:	656c 5400 6568 6420 7461 2061 6e69 7420     le.The data in t
   d7a54:	6568 7520 6573 2072 616e 656d 6f20 2072     he user name or 
   d7a64:	6170 7373 6f77 6472 6920 2073 616d 666c     password is malf
   d7a74:	726f 656d 0064 6f4e 2074 7561 6874 726f     ormed.Not author
   d7a84:	7a69 6465 7420 206f 6f63 6e6e 6365 0074     ized to connect.
   d7a94:	7845 6563 6465 6465 7220 6365 6e6f 656e     Exceeded reconne
   d7aa4:	7463 7220 7461 2065 696c 696d 2e74 5020     ct rate limit. P
   d7ab4:	656c 7361 2065 7274 2079 6761 6961 206e     lease try again 
   d7ac4:	616c 6574 2e72 5900 756f 6820 7661 2065     later..You have 
   d7ad4:	6562 6e65 6220 6e61 656e 2064 7266 6d6f     been banned from
   d7ae4:	6320 6e6f 656e 7463 6e69 2e67 5020 656c      connecting. Ple
   d7af4:	7361 2065 6f63 746e 6361 2074 6874 2065     ase contact the 
   d7b04:	514d 5454 7320 7265 6576 2072 6461 696d     MQTT server admi
   d7b14:	696e 7473 6172 6f74 2072 6f66 2072 6f6d     nistrator for mo
   d7b24:	6572 6420 7465 6961 736c 002e               re details..

000d7b30 <_ZTVN5spark13EthernetClassE>:
	...
   d7b38:	5a7f 000d 5a75 000d 5a6b 000d 5a61 000d     .Z..uZ..kZ..aZ..
   d7b48:	5a55 000d 5a49 000d 5a3d 000d 5a35 000d     UZ..IZ..=Z..5Z..
   d7b58:	5a2b 000d 5a21 000d 6b89 000d               +Z..!Z...k..

000d7b64 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7b64:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d7b74:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7b84:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7b94:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7ba4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7bb4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d7bc4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7bd4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7be4:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d7bf4:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d7c04:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d7c14:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d7c24:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d7c34:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d7c44:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d7c54:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d7c64:	6d69 0065                                   ime.

000d7c68 <_ZTV9IPAddress>:
	...
   d7c70:	5fd9 000d 5fc9 000d 5fcb 000d               ._..._..._..

000d7c7c <_ZTV9USBSerial>:
	...
   d7c84:	60dd 000d 612d 000d 613b 000d 5d19 000d     .`..-a..;a...]..
   d7c94:	6119 000d 60df 000d 60f5 000d 6127 000d     .a...`...`..'a..
   d7ca4:	610b 000d 60d9 000d                         .a...`..

000d7cac <_ZTV11USARTSerial>:
	...
   d7cb4:	61e9 000d 6239 000d 6247 000d 5d19 000d     .a..9b..Gb...]..
   d7cc4:	61fd 000d 621f 000d 620b 000d 6233 000d     .a...b...b..3b..
   d7cd4:	61eb 000d 61ef 000d                         .a...a..

000d7cdc <_ZTV7TwoWire>:
	...
   d7ce4:	62ed 000d 6337 000d 630f 000d 62ef 000d     .b..7c...c...b..
   d7cf4:	6317 000d 631f 000d 6327 000d 632f 000d     .c...c..'c../c..

000d7d04 <_ZTVN5spark9MeshClassE>:
	...
   d7d0c:	63f7 000d 63ed 000d 63e3 000d 63d9 000d     .c...c...c...c..
   d7d1c:	63cd 000d 63c1 000d 63b5 000d 63ad 000d     .c...c...c...c..
   d7d2c:	63a3 000d 6399 000d 6b89 000d               .c...c...k..

000d7d38 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7d40:	659d 000d 65a3 000d 6a8b 000d 65b1 000d     .e...e...j...e..
   d7d50:	659f 000d                                   .e..

000d7d54 <_ZTV9TCPClient>:
	...
   d7d5c:	40cd 000d 4101 000d 6515 000d 652f 000d     .@...A...e../e..
   d7d6c:	6931 000d 6683 000d 6655 000d 6559 000d     1i...f..Uf..Ye..
   d7d7c:	680d 000d 6709 000d 66b7 000d 6901 000d     .h...g...f...i..
   d7d8c:	655b 000d 6593 000d 6541 000d 65b5 000d     [e...e..Ae...e..
   d7d9c:	6635 000d 6977 6972 676e 7200 6365 2076     5f..wiring.recv 
   d7dac:	7265 6f72 2072 203d 6425 0000               error = %d..

000d7db8 <_ZTVN5spark9WiFiClassE>:
	...
   d7dc0:	6b01 000d 6af7 000d 6aed 000d 6aa3 000d     .k...j...j...j..
   d7dd0:	6ae1 000d 6ad5 000d 6ac9 000d 6ac1 000d     .j...j...j...j..
   d7de0:	6ab7 000d 6aad 000d 6b89 000d               .j...j...k..

000d7dec <_ZTVN5spark12NetworkClassE>:
	...
   d7df4:	6b21 000d 6b2b 000d 6b35 000d 6b3f 000d     !k..+k..5k..?k..
   d7e04:	6b49 000d 6b55 000d 6b61 000d 6b6d 000d     Ik..Uk..ak..mk..
   d7e14:	6b75 000d 6b7f 000d 6b89 000d               uk...k...k..

000d7e20 <_ZSt7nothrow>:
   d7e20:	0000 0000                                   ....

000d7e24 <__sf_fake_stdin>:
	...

000d7e44 <__sf_fake_stdout>:
	...

000d7e64 <__sf_fake_stderr>:
	...
   d7e84:	0043                                        C.

000d7e86 <link_const_variable_data_end>:
	...

000d7e88 <link_constructors_location>:
   d7e88:	000d43bd 	.word	0x000d43bd
   d7e8c:	000d4b75 	.word	0x000d4b75
   d7e90:	000d4f09 	.word	0x000d4f09
   d7e94:	000d504b 	.word	0x000d504b
   d7e98:	000d54f5 	.word	0x000d54f5
   d7e9c:	000d5a89 	.word	0x000d5a89
   d7ea0:	000d5c2d 	.word	0x000d5c2d
   d7ea4:	000d5cf1 	.word	0x000d5cf1
   d7ea8:	000d5e55 	.word	0x000d5e55
   d7eac:	000d5e65 	.word	0x000d5e65
   d7eb0:	000d5e9d 	.word	0x000d5e9d
   d7eb4:	000d64c5 	.word	0x000d64c5
   d7eb8:	000d6b0d 	.word	0x000d6b0d
   d7ebc:	000d6c55 	.word	0x000d6c55
   d7ec0:	000d6e61 	.word	0x000d6e61
   d7ec4:	000d6ee5 	.word	0x000d6ee5
   d7ec8:	000d6fa9 	.word	0x000d6fa9
   d7ecc:	000d706d 	.word	0x000d706d
