
c:/Users/IoTPa/Documents/jarvis/MQTTSub/target/1.5.2/argon/MQTTSub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004d70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8d90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  2003e220  000d8d94  0001e220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000052c  2003e2c4  2003e2c4  0002e2c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8e38  000d8e38  00028e38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8e60  000d8e60  00028e60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c1cc4  00000000  00000000  00028e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ee6a  00000000  00000000  000eab28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a89f  00000000  00000000  000f9992  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022f8  00000000  00000000  00114231  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004248  00000000  00000000  00116529  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032b0c  00000000  00000000  0011a771  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000243f6  00000000  00000000  0014d27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001037d7  00000000  00000000  00171673  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ca14  00000000  00000000  00274e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fc2b 	bl	d688c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fc4b 	bl	d68d8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e220 	.word	0x2003e220
   d404c:	000d8d94 	.word	0x000d8d94
   d4050:	2003e2c4 	.word	0x2003e2c4
   d4054:	2003e2c4 	.word	0x2003e2c4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 ffa3 	bl	d4fa8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8d84 	.word	0x000d8d84
   d4084:	000d8d44 	.word	0x000d8d44

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b846 	b.w	d4118 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f893 	bl	d41b8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bf49 	b.w	d4f2c <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bdad 	b.w	d4bf8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdb3 	b.w	d4c08 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdb1 	b.w	d4c08 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fd16 	bl	d4ae0 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4901 	.word	0x000d4901

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000d89b8 	.word	0x000d89b8

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f001 fd71 	bl	d5bf6 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <setup>:

/************Declare Variables*************/
unsigned int last;
float value;

void setup() {
   d4118:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d411a:	f001 f85b 	bl	d51d4 <_Z16_fetch_usbserialv>
   d411e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4122:	f001 f84b 	bl	d51bc <_ZN9USBSerial5beginEl>
  delay(100); //wait for Serial Monitor to startup
   d4126:	2064      	movs	r0, #100	; 0x64
   d4128:	f000 fec2 	bl	d4eb0 <delay>

  // Setup MQTT subscription for onoff feed.
  //mqtt.subscribe(&TempF);
  mqtt.subscribe(&roomTemp);
   d412c:	4903      	ldr	r1, [pc, #12]	; (d413c <setup+0x24>)
   d412e:	4804      	ldr	r0, [pc, #16]	; (d4140 <setup+0x28>)
   d4130:	f000 fa1a 	bl	d4568 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  last = 0;
   d4134:	4b03      	ldr	r3, [pc, #12]	; (d4144 <setup+0x2c>)
   d4136:	2200      	movs	r2, #0
   d4138:	601a      	str	r2, [r3, #0]
   d413a:	bd08      	pop	{r3, pc}
   d413c:	2003e2ec 	.word	0x2003e2ec
   d4140:	2003e324 	.word	0x2003e324
   d4144:	2003e2e8 	.word	0x2003e2e8

000d4148 <_Z12MQTT_connectv>:

}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   d4148:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d414a:	4817      	ldr	r0, [pc, #92]	; (d41a8 <_Z12MQTT_connectv+0x60>)
   d414c:	f000 f8d2 	bl	d42f4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d4150:	bb40      	cbnz	r0, d41a4 <_Z12MQTT_connectv+0x5c>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d4152:	f001 f83f 	bl	d51d4 <_Z16_fetch_usbserialv>
   d4156:	4915      	ldr	r1, [pc, #84]	; (d41ac <_Z12MQTT_connectv+0x64>)
   d4158:	f000 fe20 	bl	d4d9c <_ZN5Print5printEPKc>
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d415c:	4812      	ldr	r0, [pc, #72]	; (d41a8 <_Z12MQTT_connectv+0x60>)
   d415e:	f000 fb3f 	bl	d47e0 <_ZN13Adafruit_MQTT7connectEv>
   d4162:	4604      	mov	r4, r0
   d4164:	b1b8      	cbz	r0, d4196 <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d4166:	f001 f835 	bl	d51d4 <_Z16_fetch_usbserialv>
   d416a:	4621      	mov	r1, r4
   d416c:	4605      	mov	r5, r0
   d416e:	480e      	ldr	r0, [pc, #56]	; (d41a8 <_Z12MQTT_connectv+0x60>)
   d4170:	f000 f9d8 	bl	d4524 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4174:	4601      	mov	r1, r0
   d4176:	4628      	mov	r0, r5
   d4178:	f000 fe23 	bl	d4dc2 <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d417c:	f001 f82a 	bl	d51d4 <_Z16_fetch_usbserialv>
   d4180:	490b      	ldr	r1, [pc, #44]	; (d41b0 <_Z12MQTT_connectv+0x68>)
   d4182:	f000 fe1e 	bl	d4dc2 <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d4186:	4808      	ldr	r0, [pc, #32]	; (d41a8 <_Z12MQTT_connectv+0x60>)
   d4188:	f000 f9da 	bl	d4540 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d418c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4190:	f000 fe8e 	bl	d4eb0 <delay>
   d4194:	e7e2      	b.n	d415c <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d4196:	f001 f81d 	bl	d51d4 <_Z16_fetch_usbserialv>
   d419a:	4906      	ldr	r1, [pc, #24]	; (d41b4 <_Z12MQTT_connectv+0x6c>)
   d419c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d41a0:	f000 be0f 	b.w	d4dc2 <_ZN5Print7printlnEPKc>
   d41a4:	bd38      	pop	{r3, r4, r5, pc}
   d41a6:	bf00      	nop
   d41a8:	2003e324 	.word	0x2003e324
   d41ac:	000d8484 	.word	0x000d8484
   d41b0:	000d849b 	.word	0x000d849b
   d41b4:	000d84c4 	.word	0x000d84c4

000d41b8 <loop>:
  //mqtt.subscribe(&TempF);
  mqtt.subscribe(&roomTemp);
  last = 0;
}

void loop() {
   d41b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MQTT_connect();
   d41ba:	f7ff ffc5 	bl	d4148 <_Z12MQTT_connectv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41be:	f000 fba7 	bl	d4910 <HAL_Timer_Get_Milli_Seconds>

  if ((millis()-last)>120000) {
   d41c2:	4b20      	ldr	r3, [pc, #128]	; (d4244 <loop+0x8c>)
   d41c4:	681a      	ldr	r2, [r3, #0]
   d41c6:	1a80      	subs	r0, r0, r2
   d41c8:	4a1f      	ldr	r2, [pc, #124]	; (d4248 <loop+0x90>)
   d41ca:	4290      	cmp	r0, r2
   d41cc:	461c      	mov	r4, r3
   d41ce:	d917      	bls.n	d4200 <loop+0x48>
      Serial.printf("Pinging MQTT \n");
   d41d0:	f001 f800 	bl	d51d4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41d4:	4a1d      	ldr	r2, [pc, #116]	; (d424c <loop+0x94>)
   d41d6:	2100      	movs	r1, #0
   d41d8:	f000 fe1d 	bl	d4e16 <_ZN5Print11printf_implEbPKcz>
      if(! mqtt.ping()) {
   d41dc:	2101      	movs	r1, #1
   d41de:	481c      	ldr	r0, [pc, #112]	; (d4250 <loop+0x98>)
   d41e0:	f000 fa5c 	bl	d469c <_ZN13Adafruit_MQTT4pingEh>
   d41e4:	4605      	mov	r5, r0
   d41e6:	b940      	cbnz	r0, d41fa <loop+0x42>
        Serial.printf("Disconnecting \n");
   d41e8:	f000 fff4 	bl	d51d4 <_Z16_fetch_usbserialv>
   d41ec:	4a19      	ldr	r2, [pc, #100]	; (d4254 <loop+0x9c>)
   d41ee:	4629      	mov	r1, r5
   d41f0:	f000 fe11 	bl	d4e16 <_ZN5Print11printf_implEbPKcz>
        mqtt.disconnect();
   d41f4:	4816      	ldr	r0, [pc, #88]	; (d4250 <loop+0x98>)
   d41f6:	f000 f9a3 	bl	d4540 <_ZN13Adafruit_MQTT10disconnectEv>
   d41fa:	f000 fb89 	bl	d4910 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d41fe:	6020      	str	r0, [r4, #0]
    // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here
 
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(10000))) {
    if (subscription == &roomTemp) {
   d4200:	4d15      	ldr	r5, [pc, #84]	; (d4258 <loop+0xa0>)

    // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here
 
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(10000))) {
   d4202:	4813      	ldr	r0, [pc, #76]	; (d4250 <loop+0x98>)
   d4204:	f242 7110 	movw	r1, #10000	; 0x2710
   d4208:	f000 f9ca 	bl	d45a0 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d420c:	b1c0      	cbz	r0, d4240 <loop+0x88>
    if (subscription == &roomTemp) {
   d420e:	42a8      	cmp	r0, r5
   d4210:	d1f7      	bne.n	d4202 <loop+0x4a>
      value = atof((char *)roomTemp.lastread);
   d4212:	1d68      	adds	r0, r5, #5
   d4214:	f002 fb24 	bl	d6860 <atof>
   d4218:	ec51 0b10 	vmov	r0, r1, d0
   d421c:	f002 fad0 	bl	d67c0 <__aeabi_d2f>
   d4220:	4c0e      	ldr	r4, [pc, #56]	; (d425c <loop+0xa4>)
   d4222:	6020      	str	r0, [r4, #0]
      Serial.printf("Got: %0.2f \n",value);
   d4224:	f000 ffd6 	bl	d51d4 <_Z16_fetch_usbserialv>
   d4228:	4606      	mov	r6, r0
   d422a:	6820      	ldr	r0, [r4, #0]
   d422c:	f001 ff92 	bl	d6154 <__aeabi_f2d>
   d4230:	4a0b      	ldr	r2, [pc, #44]	; (d4260 <loop+0xa8>)
   d4232:	e9cd 0100 	strd	r0, r1, [sp]
   d4236:	2100      	movs	r1, #0
   d4238:	4630      	mov	r0, r6
   d423a:	f000 fdec 	bl	d4e16 <_ZN5Print11printf_implEbPKcz>
   d423e:	e7e0      	b.n	d4202 <loop+0x4a>
    }
  }

}
   d4240:	b002      	add	sp, #8
   d4242:	bd70      	pop	{r4, r5, r6, pc}
   d4244:	2003e2e8 	.word	0x2003e2e8
   d4248:	0001d4c0 	.word	0x0001d4c0
   d424c:	000d84d4 	.word	0x000d84d4
   d4250:	2003e324 	.word	0x2003e324
   d4254:	000d84e3 	.word	0x000d84e3
   d4258:	2003e2ec 	.word	0x2003e2ec
   d425c:	2003e2e4 	.word	0x2003e2e4
   d4260:	000d84f3 	.word	0x000d84f3

000d4264 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4264:	b510      	push	{r4, lr}
   d4266:	21d4      	movs	r1, #212	; 0xd4
   d4268:	4604      	mov	r4, r0
   d426a:	f001 fcc4 	bl	d5bf6 <_ZdlPvj>
   d426e:	4620      	mov	r0, r4
   d4270:	bd10      	pop	{r4, pc}
	...

000d4274 <_GLOBAL__sub_I_TheClient>:
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d4274:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4276:	4d14      	ldr	r5, [pc, #80]	; (d42c8 <_GLOBAL__sub_I_TheClient+0x54>)
   d4278:	4e14      	ldr	r6, [pc, #80]	; (d42cc <_GLOBAL__sub_I_TheClient+0x58>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d427a:	4c15      	ldr	r4, [pc, #84]	; (d42d0 <_GLOBAL__sub_I_TheClient+0x5c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d427c:	f000 fb28 	bl	d48d0 <HAL_Pin_Map>
   d4280:	4628      	mov	r0, r5
   d4282:	f001 fbb3 	bl	d59ec <_ZN9TCPClientC1Ev>
   d4286:	4632      	mov	r2, r6
   d4288:	4912      	ldr	r1, [pc, #72]	; (d42d4 <_GLOBAL__sub_I_TheClient+0x60>)
   d428a:	4628      	mov	r0, r5
   d428c:	f001 fcae 	bl	d5bec <__aeabi_atexit>
   d4290:	4b11      	ldr	r3, [pc, #68]	; (d42d8 <_GLOBAL__sub_I_TheClient+0x64>)
   d4292:	9300      	str	r3, [sp, #0]
   d4294:	f240 725b 	movw	r2, #1883	; 0x75b
   d4298:	4b10      	ldr	r3, [pc, #64]	; (d42dc <_GLOBAL__sub_I_TheClient+0x68>)
   d429a:	4911      	ldr	r1, [pc, #68]	; (d42e0 <_GLOBAL__sub_I_TheClient+0x6c>)
   d429c:	4620      	mov	r0, r4
   d429e:	f000 f8bb 	bl	d4418 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d42a2:	4b10      	ldr	r3, [pc, #64]	; (d42e4 <_GLOBAL__sub_I_TheClient+0x70>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d42a4:	4910      	ldr	r1, [pc, #64]	; (d42e8 <_GLOBAL__sub_I_TheClient+0x74>)
   d42a6:	6023      	str	r3, [r4, #0]
   d42a8:	4632      	mov	r2, r6
   d42aa:	4620      	mov	r0, r4
   d42ac:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d42b0:	f001 fc9c 	bl	d5bec <__aeabi_atexit>
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

//Adafruit_MQTT_Publish TempC = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/TempC"); 

//Adafruit_MQTT_Subscribe TempF = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/Home_Temperature"); 
Adafruit_MQTT_Subscribe roomTemp = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/Home_Temperature"); 
   d42b4:	4a0d      	ldr	r2, [pc, #52]	; (d42ec <_GLOBAL__sub_I_TheClient+0x78>)
   d42b6:	480e      	ldr	r0, [pc, #56]	; (d42f0 <_GLOBAL__sub_I_TheClient+0x7c>)
   d42b8:	2300      	movs	r3, #0
   d42ba:	4621      	mov	r1, r4
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d42bc:	b002      	add	sp, #8
   d42be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

//Adafruit_MQTT_Publish TempC = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/TempC"); 

//Adafruit_MQTT_Subscribe TempF = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/Home_Temperature"); 
Adafruit_MQTT_Subscribe roomTemp = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/Home_Temperature"); 
   d42c2:	f000 bae6 	b.w	d4892 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d42c6:	bf00      	nop
   d42c8:	2003e2c8 	.word	0x2003e2c8
   d42cc:	2003e2c4 	.word	0x2003e2c4
   d42d0:	2003e324 	.word	0x2003e324
   d42d4:	000d40d1 	.word	0x000d40d1
   d42d8:	000d8517 	.word	0x000d8517
   d42dc:	000d8500 	.word	0x000d8500
   d42e0:	000d8507 	.word	0x000d8507
   d42e4:	000d8560 	.word	0x000d8560
   d42e8:	000d40cd 	.word	0x000d40cd
   d42ec:	000d8538 	.word	0x000d8538
   d42f0:	2003e2ec 	.word	0x2003e2ec

000d42f4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d42f4:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d42f6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d42fa:	6803      	ldr	r3, [r0, #0]
   d42fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42fe:	4798      	blx	r3
}
   d4300:	3000      	adds	r0, #0
   d4302:	bf18      	it	ne
   d4304:	2001      	movne	r0, #1
   d4306:	bd08      	pop	{r3, pc}

000d4308 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d430a:	4606      	mov	r6, r0
   d430c:	460f      	mov	r7, r1
   d430e:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4310:	b1c4      	cbz	r4, d4344 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4312:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4316:	6803      	ldr	r3, [r0, #0]
   d4318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d431a:	4798      	blx	r3
   d431c:	b908      	cbnz	r0, d4322 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d431e:	2000      	movs	r0, #0
   d4320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4322:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4326:	2cfa      	cmp	r4, #250	; 0xfa
   d4328:	6803      	ldr	r3, [r0, #0]
   d432a:	4625      	mov	r5, r4
   d432c:	bfa8      	it	ge
   d432e:	25fa      	movge	r5, #250	; 0xfa
   d4330:	68db      	ldr	r3, [r3, #12]
   d4332:	462a      	mov	r2, r5
   d4334:	4639      	mov	r1, r7
   d4336:	4798      	blx	r3
   d4338:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d433a:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d433c:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d433e:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4340:	d0e6      	beq.n	d4310 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4342:	e7ec      	b.n	d431e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4344:	2001      	movs	r0, #1
}
   d4346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4348 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d434c:	4606      	mov	r6, r0
   d434e:	4688      	mov	r8, r1
   d4350:	4691      	mov	r9, r2
   d4352:	461f      	mov	r7, r3
   d4354:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4356:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4358:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d435c:	6803      	ldr	r3, [r0, #0]
   d435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4360:	4798      	blx	r3
   d4362:	b1d0      	cbz	r0, d439a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4364:	2d00      	cmp	r5, #0
   d4366:	db18      	blt.n	d439a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4368:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d436c:	6803      	ldr	r3, [r0, #0]
   d436e:	691b      	ldr	r3, [r3, #16]
   d4370:	4798      	blx	r3
   d4372:	b160      	cbz	r0, d438e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d4374:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4378:	6803      	ldr	r3, [r0, #0]
   d437a:	695b      	ldr	r3, [r3, #20]
   d437c:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d437e:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d4382:	3401      	adds	r4, #1
   d4384:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d4386:	454c      	cmp	r4, r9
   d4388:	d007      	beq.n	d439a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d438a:	463d      	mov	r5, r7
   d438c:	e7ec      	b.n	d4368 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d438e:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4390:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4392:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4394:	f000 fd8c 	bl	d4eb0 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4398:	e7de      	b.n	d4358 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d439a:	4620      	mov	r0, r4
   d439c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d43a0 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d43a0:	b570      	push	{r4, r5, r6, lr}
   d43a2:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d43a4:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d43a8:	2296      	movs	r2, #150	; 0x96
   d43aa:	2100      	movs	r1, #0
   d43ac:	4628      	mov	r0, r5
   d43ae:	f002 fa93 	bl	d68d8 <memset>
  strcpy((char *)buffer, servername);
   d43b2:	6861      	ldr	r1, [r4, #4]
   d43b4:	4628      	mov	r0, r5
   d43b6:	f002 fabf 	bl	d6938 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d43ba:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d43be:	8922      	ldrh	r2, [r4, #8]
   d43c0:	6803      	ldr	r3, [r0, #0]
   d43c2:	4629      	mov	r1, r5
   d43c4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d43c6:	2300      	movs	r3, #0
   d43c8:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d43ca:	3000      	adds	r0, #0
   d43cc:	bf18      	it	ne
   d43ce:	2001      	movne	r0, #1
   d43d0:	bd70      	pop	{r4, r5, r6, pc}

000d43d2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d43d2:	b510      	push	{r4, lr}
   d43d4:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d43d6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d43da:	6803      	ldr	r3, [r0, #0]
   d43dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43de:	4798      	blx	r3
   d43e0:	b120      	cbz	r0, d43ec <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d43e2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d43e6:	6803      	ldr	r3, [r0, #0]
   d43e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43ea:	4798      	blx	r3
  }
  return true;
}
   d43ec:	2001      	movs	r0, #1
   d43ee:	bd10      	pop	{r4, pc}

000d43f0 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d43f0:	f000 ba6e 	b.w	d48d0 <HAL_Pin_Map>

000d43f4 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43f4:	b570      	push	{r4, r5, r6, lr}
   d43f6:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43f8:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43fa:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43fc:	f002 faa4 	bl	d6948 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d4400:	1203      	asrs	r3, r0, #8
   d4402:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4404:	7060      	strb	r0, [r4, #1]
   d4406:	b285      	uxth	r5, r0
   d4408:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d440a:	462a      	mov	r2, r5
   d440c:	4631      	mov	r1, r6
   d440e:	4620      	mov	r0, r4
   d4410:	f002 fadb 	bl	d69ca <strncpy>
  return p+len;
}
   d4414:	1960      	adds	r0, r4, r5
   d4416:	bd70      	pop	{r4, r5, r6, pc}

000d4418 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d4418:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d441a:	6103      	str	r3, [r0, #16]
  password = pass;
   d441c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d441e:	4d0d      	ldr	r5, [pc, #52]	; (d4454 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d4420:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d4422:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d4424:	4a0c      	ldr	r2, [pc, #48]	; (d4458 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4426:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4428:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d442a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d442c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d442e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d4432:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d4436:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d443a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d443e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d4442:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d4444:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d4446:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d444a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d444e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d4452:	bd30      	pop	{r4, r5, pc}
   d4454:	000d8584 	.word	0x000d8584
   d4458:	000d85d5 	.word	0x000d85d5

000d445c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d445c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4460:	fa0f fa83 	sxth.w	sl, r3
   d4464:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4466:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4468:	699d      	ldr	r5, [r3, #24]
   d446a:	2201      	movs	r2, #1
   d446c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d446e:	4606      	mov	r6, r0
   d4470:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4472:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4474:	b2c0      	uxtb	r0, r0
   d4476:	2801      	cmp	r0, #1
   d4478:	d001      	beq.n	d447e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d447a:	2000      	movs	r0, #0
   d447c:	e034      	b.n	d44e8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d447e:	1c65      	adds	r5, r4, #1
   d4480:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4484:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d4486:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d448a:	6833      	ldr	r3, [r6, #0]
   d448c:	699b      	ldr	r3, [r3, #24]
   d448e:	2201      	movs	r2, #1
   d4490:	461f      	mov	r7, r3
   d4492:	4629      	mov	r1, r5
   d4494:	4653      	mov	r3, sl
   d4496:	4630      	mov	r0, r6
   d4498:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d449a:	b2c0      	uxtb	r0, r0
   d449c:	2801      	cmp	r0, #1
   d449e:	d1ec      	bne.n	d447a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d44a0:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d44a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d44a8:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d44aa:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d44ae:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d44b2:	d0e2      	beq.n	d447a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d44b4:	061b      	lsls	r3, r3, #24
   d44b6:	d4e8      	bmi.n	d448a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d44b8:	9b01      	ldr	r3, [sp, #4]
   d44ba:	1b2c      	subs	r4, r5, r4
   d44bc:	1b1b      	subs	r3, r3, r4
   d44be:	3b01      	subs	r3, #1
   d44c0:	4599      	cmp	r9, r3
   d44c2:	6833      	ldr	r3, [r6, #0]
   d44c4:	d906      	bls.n	d44d4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d44c6:	9a01      	ldr	r2, [sp, #4]
   d44c8:	699f      	ldr	r7, [r3, #24]
   d44ca:	3a01      	subs	r2, #1
   d44cc:	1b12      	subs	r2, r2, r4
   d44ce:	4653      	mov	r3, sl
   d44d0:	b292      	uxth	r2, r2
   d44d2:	e003      	b.n	d44dc <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d44d4:	699f      	ldr	r7, [r3, #24]
   d44d6:	fa1f f289 	uxth.w	r2, r9
   d44da:	4653      	mov	r3, sl
   d44dc:	4629      	mov	r1, r5
   d44de:	4630      	mov	r0, r6
   d44e0:	47b8      	blx	r7
   d44e2:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d44e4:	4420      	add	r0, r4
   d44e6:	b280      	uxth	r0, r0
}
   d44e8:	b003      	add	sp, #12
   d44ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d44f0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d44f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44f2:	4605      	mov	r5, r0
   d44f4:	460c      	mov	r4, r1
   d44f6:	4616      	mov	r6, r2
   d44f8:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44fa:	463b      	mov	r3, r7
   d44fc:	2296      	movs	r2, #150	; 0x96
   d44fe:	4621      	mov	r1, r4
   d4500:	4628      	mov	r0, r5
   d4502:	f7ff ffab 	bl	d445c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4506:	b148      	cbz	r0, d451c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d4508:	7823      	ldrb	r3, [r4, #0]
   d450a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d450e:	d005      	beq.n	d451c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d4510:	f000 fe60 	bl	d51d4 <_Z16_fetch_usbserialv>
   d4514:	4902      	ldr	r1, [pc, #8]	; (d4520 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d4516:	f000 fc54 	bl	d4dc2 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d451a:	e7ee      	b.n	d44fa <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d451e:	bf00      	nop
   d4520:	000d85d6 	.word	0x000d85d6

000d4524 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d4524:	3102      	adds	r1, #2
   d4526:	b2c9      	uxtb	r1, r1
   d4528:	2909      	cmp	r1, #9
   d452a:	bf9a      	itte	ls
   d452c:	4b02      	ldrls	r3, [pc, #8]	; (d4538 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d452e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d4532:	4802      	ldrhi	r0, [pc, #8]	; (d453c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d4534:	4770      	bx	lr
   d4536:	bf00      	nop
   d4538:	000d85a0 	.word	0x000d85a0
   d453c:	000d85e7 	.word	0x000d85e7

000d4540 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d4540:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d4542:	23e0      	movs	r3, #224	; 0xe0
   d4544:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d4548:	2300      	movs	r3, #0
   d454a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d454e:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d4550:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4552:	695b      	ldr	r3, [r3, #20]
   d4554:	2202      	movs	r2, #2
   d4556:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d455a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d455c:	6823      	ldr	r3, [r4, #0]
   d455e:	4620      	mov	r0, r4
   d4560:	691b      	ldr	r3, [r3, #16]

}
   d4562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4566:	4718      	bx	r3

000d4568 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d4568:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d456c:	b530      	push	{r4, r5, lr}
   d456e:	4613      	mov	r3, r2
   d4570:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d4574:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d4578:	428d      	cmp	r5, r1
   d457a:	d00f      	beq.n	d459c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d457c:	42a3      	cmp	r3, r4
   d457e:	d1f9      	bne.n	d4574 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d4580:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d4582:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d4586:	b924      	cbnz	r4, d4592 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d4588:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d458c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d4590:	e004      	b.n	d459c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d4592:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4594:	2b05      	cmp	r3, #5
   d4596:	d1f4      	bne.n	d4582 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d4598:	2000      	movs	r0, #0
   d459a:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d459c:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d45a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d45a4:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d45a8:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d45aa:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d45ac:	2296      	movs	r2, #150	; 0x96
   d45ae:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d45b0:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d45b2:	f7ff ff53 	bl	d445c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d45b6:	4606      	mov	r6, r0
   d45b8:	b310      	cbz	r0, d4600 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d45ba:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d45be:	b2bb      	uxth	r3, r7
   d45c0:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d45c2:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d45c6:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d45ca:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d45cc:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d45ce:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d45d2:	f1bb 0f00 	cmp.w	fp, #0
   d45d6:	d00e      	beq.n	d45f6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d45d8:	f8db 1000 	ldr.w	r1, [fp]
   d45dc:	9103      	str	r1, [sp, #12]
   d45de:	4608      	mov	r0, r1
   d45e0:	f002 f9b2 	bl	d6948 <strlen>
   d45e4:	42b8      	cmp	r0, r7
   d45e6:	4680      	mov	r8, r0
   d45e8:	9903      	ldr	r1, [sp, #12]
   d45ea:	d104      	bne.n	d45f6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d45ec:	463a      	mov	r2, r7
   d45ee:	9802      	ldr	r0, [sp, #8]
   d45f0:	f002 f9b2 	bl	d6958 <strncasecmp>
   d45f4:	b128      	cbz	r0, d4602 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d45f6:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d45f8:	2d05      	cmp	r5, #5
   d45fa:	d1e8      	bne.n	d45ce <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d45fc:	2000      	movs	r0, #0
   d45fe:	e04a      	b.n	d4696 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d4600:	e049      	b.n	d4696 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d4602:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d4606:	f00a 0a06 	and.w	sl, sl, #6
   d460a:	f1ba 0f02 	cmp.w	sl, #2
   d460e:	d13f      	bne.n	d4690 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d4610:	19e2      	adds	r2, r4, r7
   d4612:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d4616:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d461a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d461e:	2214      	movs	r2, #20
   d4620:	2100      	movs	r1, #0
   d4622:	f10b 0005 	add.w	r0, fp, #5
   d4626:	f002 f957 	bl	d68d8 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d462a:	9b01      	ldr	r3, [sp, #4]
   d462c:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d4630:	30fc      	adds	r0, #252	; 0xfc
   d4632:	4406      	add	r6, r0
   d4634:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d4638:	ebca 0606 	rsb	r6, sl, r6
   d463c:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d463e:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d4640:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d4644:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d4648:	bf28      	it	cs
   d464a:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d464c:	4451      	add	r1, sl
   d464e:	4632      	mov	r2, r6
   d4650:	4449      	add	r1, r9
   d4652:	3005      	adds	r0, #5
   d4654:	f002 f925 	bl	d68a2 <memmove>
  subscriptions[i]->datalen = datalen;
   d4658:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d465c:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d465e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4662:	f003 0306 	and.w	r3, r3, #6
   d4666:	2b02      	cmp	r3, #2
   d4668:	d10f      	bne.n	d468a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d466a:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d466e:	123b      	asrs	r3, r7, #8
   d4670:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4674:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d4676:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d467a:	2240      	movs	r2, #64	; 0x40
   d467c:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4680:	695b      	ldr	r3, [r3, #20]
   d4682:	2204      	movs	r2, #4
   d4684:	a905      	add	r1, sp, #20
   d4686:	4620      	mov	r0, r4
   d4688:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d468a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d468e:	e002      	b.n	d4696 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d4690:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d4692:	4682      	mov	sl, r0
   d4694:	e7c3      	b.n	d461e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d4696:	b007      	add	sp, #28
   d4698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d469c <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d46a0:	4604      	mov	r4, r0
   d46a2:	460d      	mov	r5, r1
   d46a4:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d46a8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d46ac:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d46b0:	b1d5      	cbz	r5, d46e8 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d46b2:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d46b4:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d46b8:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d46bc:	695b      	ldr	r3, [r3, #20]
   d46be:	2202      	movs	r2, #2
   d46c0:	4639      	mov	r1, r7
   d46c2:	4620      	mov	r0, r4
   d46c4:	4798      	blx	r3
   d46c6:	4606      	mov	r6, r0
   d46c8:	b910      	cbnz	r0, d46d0 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d46ca:	3d01      	subs	r5, #1
   d46cc:	b2ed      	uxtb	r5, r5
   d46ce:	e7ef      	b.n	d46b0 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d46d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d46d4:	220d      	movs	r2, #13
   d46d6:	4639      	mov	r1, r7
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ff09 	bl	d44f0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d46de:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d46e2:	2bd0      	cmp	r3, #208	; 0xd0
   d46e4:	d1f1      	bne.n	d46ca <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d46e6:	e000      	b.n	d46ea <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d46e8:	462e      	mov	r6, r5
}
   d46ea:	4630      	mov	r0, r6
   d46ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d46f0 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d46f0:	b538      	push	{r3, r4, r5, lr}
   d46f2:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d46f4:	4608      	mov	r0, r1
   d46f6:	2310      	movs	r3, #16
   d46f8:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d46fc:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d46fe:	4929      	ldr	r1, [pc, #164]	; (d47a4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4700:	f7ff fe78 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d4704:	2304      	movs	r3, #4
   d4706:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d4708:	2302      	movs	r3, #2
   d470a:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d470c:	69a3      	ldr	r3, [r4, #24]
   d470e:	b1ab      	cbz	r3, d473c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d4710:	781b      	ldrb	r3, [r3, #0]
   d4712:	b19b      	cbz	r3, d473c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4714:	2306      	movs	r3, #6
   d4716:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4718:	f894 3020 	ldrb.w	r3, [r4, #32]
   d471c:	2b01      	cmp	r3, #1
   d471e:	d101      	bne.n	d4724 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4720:	230e      	movs	r3, #14
   d4722:	e002      	b.n	d472a <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4724:	2b02      	cmp	r3, #2
   d4726:	d101      	bne.n	d472c <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4728:	231e      	movs	r3, #30
   d472a:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d472c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d4730:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d4732:	bf02      	ittt	eq
   d4734:	7843      	ldrbeq	r3, [r0, #1]
   d4736:	f043 0320 	orreq.w	r3, r3, #32
   d473a:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d473c:	6923      	ldr	r3, [r4, #16]
   d473e:	781b      	ldrb	r3, [r3, #0]
   d4740:	b11b      	cbz	r3, d474a <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d4742:	7843      	ldrb	r3, [r0, #1]
   d4744:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4748:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d474a:	6963      	ldr	r3, [r4, #20]
   d474c:	781b      	ldrb	r3, [r3, #0]
   d474e:	b11b      	cbz	r3, d4758 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d4750:	7843      	ldrb	r3, [r0, #1]
   d4752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4756:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d4758:	2302      	movs	r3, #2
   d475a:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d475c:	2358      	movs	r3, #88	; 0x58
   d475e:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d4760:	68e1      	ldr	r1, [r4, #12]
   d4762:	780b      	ldrb	r3, [r1, #0]
   d4764:	b11b      	cbz	r3, d476e <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d4766:	3004      	adds	r0, #4
   d4768:	f7ff fe44 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
   d476c:	e002      	b.n	d4774 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d476e:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d4770:	7143      	strb	r3, [r0, #5]
      p++;
   d4772:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4774:	69a1      	ldr	r1, [r4, #24]
   d4776:	b131      	cbz	r1, d4786 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d4778:	780b      	ldrb	r3, [r1, #0]
   d477a:	b123      	cbz	r3, d4786 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d477c:	f7ff fe3a 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d4780:	69e1      	ldr	r1, [r4, #28]
   d4782:	f7ff fe37 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d4786:	6921      	ldr	r1, [r4, #16]
   d4788:	780b      	ldrb	r3, [r1, #0]
   d478a:	b10b      	cbz	r3, d4790 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d478c:	f7ff fe32 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d4790:	6961      	ldr	r1, [r4, #20]
   d4792:	780b      	ldrb	r3, [r1, #0]
   d4794:	b10b      	cbz	r3, d479a <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d4796:	f7ff fe2d 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d479a:	1b40      	subs	r0, r0, r5
   d479c:	b2c0      	uxtb	r0, r0
   d479e:	1e83      	subs	r3, r0, #2
   d47a0:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d47a2:	bd38      	pop	{r3, r4, r5, pc}
   d47a4:	000d85f5 	.word	0x000d85f5

000d47a8 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d47a8:	b538      	push	{r3, r4, r5, lr}
   d47aa:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d47ac:	2382      	movs	r3, #130	; 0x82
   d47ae:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d47b0:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d47b2:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d47b6:	0a09      	lsrs	r1, r1, #8
   d47b8:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d47ba:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d47be:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d47c0:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d47c4:	3101      	adds	r1, #1
   d47c6:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d47ca:	4611      	mov	r1, r2
   d47cc:	1d20      	adds	r0, r4, #4
   d47ce:	f7ff fe11 	bl	d43f4 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d47d2:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d47d6:	1b00      	subs	r0, r0, r4
   d47d8:	b2c0      	uxtb	r0, r0
   d47da:	1e83      	subs	r3, r0, #2
   d47dc:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d47de:	bd38      	pop	{r3, r4, r5, pc}

000d47e0 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d47e4:	6803      	ldr	r3, [r0, #0]
   d47e6:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d47e8:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d47ea:	4798      	blx	r3
   d47ec:	b918      	cbnz	r0, d47f6 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d47ee:	f04f 30ff 	mov.w	r0, #4294967295
   d47f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d47f6:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d47fa:	4629      	mov	r1, r5
   d47fc:	4620      	mov	r0, r4
   d47fe:	f7ff ff77 	bl	d46f0 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d4802:	6823      	ldr	r3, [r4, #0]
   d4804:	b282      	uxth	r2, r0
   d4806:	695b      	ldr	r3, [r3, #20]
   d4808:	4629      	mov	r1, r5
   d480a:	4620      	mov	r0, r4
   d480c:	4798      	blx	r3
   d480e:	2800      	cmp	r0, #0
   d4810:	d0ed      	beq.n	d47ee <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d4812:	f241 7370 	movw	r3, #6000	; 0x1770
   d4816:	2296      	movs	r2, #150	; 0x96
   d4818:	4629      	mov	r1, r5
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff fe1e 	bl	d445c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d4820:	b2c0      	uxtb	r0, r0
   d4822:	2804      	cmp	r0, #4
   d4824:	d1e3      	bne.n	d47ee <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4826:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4828:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d482c:	d1df      	bne.n	d47ee <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d482e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d4832:	b110      	cbz	r0, d483a <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d4834:	b240      	sxtb	r0, r0
   d4836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d483a:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d483e:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d4842:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d4846:	b1fb      	cbz	r3, d4888 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4848:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d484a:	683a      	ldr	r2, [r7, #0]
   d484c:	4629      	mov	r1, r5
   d484e:	7913      	ldrb	r3, [r2, #4]
   d4850:	6812      	ldr	r2, [r2, #0]
   d4852:	4620      	mov	r0, r4
   d4854:	f7ff ffa8 	bl	d47a8 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4858:	6823      	ldr	r3, [r4, #0]
   d485a:	b282      	uxth	r2, r0
   d485c:	695b      	ldr	r3, [r3, #20]
   d485e:	4629      	mov	r1, r5
   d4860:	4620      	mov	r0, r4
   d4862:	4798      	blx	r3
   d4864:	2800      	cmp	r0, #0
   d4866:	d0c2      	beq.n	d47ee <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4868:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d486c:	2209      	movs	r2, #9
   d486e:	4629      	mov	r1, r5
   d4870:	4620      	mov	r0, r4
   d4872:	f7ff fe3d 	bl	d44f0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4876:	b938      	cbnz	r0, d4888 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4878:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d487a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d487e:	d1e4      	bne.n	d484a <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d4880:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d4884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4888:	4547      	cmp	r7, r8
   d488a:	d1da      	bne.n	d4842 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d488c:	2000      	movs	r0, #0
   d488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4892 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d4892:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d4894:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d4896:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d4898:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d489a:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d489c:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d489e:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d48a0:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d48a2:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d48a4:	6283      	str	r3, [r0, #40]	; 0x28
   d48a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d48a8:	6303      	str	r3, [r0, #48]	; 0x30
}
   d48aa:	bd10      	pop	{r4, pc}

000d48ac <_GLOBAL__sub_I__Z11printBufferPht>:
   d48ac:	f000 b810 	b.w	d48d0 <HAL_Pin_Map>

000d48b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <netdb_freeaddrinfo+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	689b      	ldr	r3, [r3, #8]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030268 	.word	0x00030268

000d48c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <netdb_getaddrinfo+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	68db      	ldr	r3, [r3, #12]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030268 	.word	0x00030268

000d48d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_Pin_Map+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	681b      	ldr	r3, [r3, #0]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003022c 	.word	0x0003022c

000d48e0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <if_index_to_name+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	695b      	ldr	r3, [r3, #20]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003026c 	.word	0x0003026c

000d48f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_RNG_GetRandomNumber+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_Delay_Microseconds+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	68db      	ldr	r3, [r3, #12]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	695b      	ldr	r3, [r3, #20]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <os_thread_is_current+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	689b      	ldr	r3, [r3, #8]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030248 	.word	0x00030248

000d4930 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <os_thread_join+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	691b      	ldr	r3, [r3, #16]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030248 	.word	0x00030248

000d4940 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <os_thread_cleanup+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	695b      	ldr	r3, [r3, #20]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030248 	.word	0x00030248

000d4950 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <os_mutex_recursive_create+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030248 	.word	0x00030248

000d4960 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <os_mutex_recursive_destroy+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030248 	.word	0x00030248

000d4970 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <inet_inet_ntop+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	695b      	ldr	r3, [r3, #20]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030264 	.word	0x00030264

000d4980 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <inet_htonl+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a1b      	ldr	r3, [r3, #32]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030264 	.word	0x00030264

000d4990 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <inet_htons+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030264 	.word	0x00030264

000d49a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_USART_Init+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	681b      	ldr	r3, [r3, #0]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	0003023c 	.word	0x0003023c

000d49b0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_USART_Write_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	68db      	ldr	r3, [r3, #12]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003023c 	.word	0x0003023c

000d49c0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_USART_Available_Data+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	691b      	ldr	r3, [r3, #16]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	0003023c 	.word	0x0003023c

000d49d0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_USART_Read_Data+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	695b      	ldr	r3, [r3, #20]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003023c 	.word	0x0003023c

000d49e0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_USART_Peek_Data+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	699b      	ldr	r3, [r3, #24]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	0003023c 	.word	0x0003023c

000d49f0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <HAL_USART_Flush_Data+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	69db      	ldr	r3, [r3, #28]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	0003023c 	.word	0x0003023c

000d4a00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_USART_Available_Data_For_Write+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003023c 	.word	0x0003023c

000d4a10 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <sock_setsockopt+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	699b      	ldr	r3, [r3, #24]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030238 	.word	0x00030238

000d4a20 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <sock_close+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	69db      	ldr	r3, [r3, #28]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030238 	.word	0x00030238

000d4a30 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <sock_connect+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a1b      	ldr	r3, [r3, #32]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030238 	.word	0x00030238

000d4a40 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <sock_recv+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030238 	.word	0x00030238

000d4a50 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <sock_send+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030238 	.word	0x00030238

000d4a60 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <sock_socket+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030238 	.word	0x00030238

000d4a70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USB_USART_Init+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	681b      	ldr	r3, [r3, #0]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003024c 	.word	0x0003024c

000d4a80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USB_USART_Begin+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	685b      	ldr	r3, [r3, #4]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003024c 	.word	0x0003024c

000d4a90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USB_USART_Available_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	691b      	ldr	r3, [r3, #16]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003024c 	.word	0x0003024c

000d4aa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	695b      	ldr	r3, [r3, #20]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003024c 	.word	0x0003024c

000d4ab0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USB_USART_Receive_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	699b      	ldr	r3, [r3, #24]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003024c 	.word	0x0003024c

000d4ac0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Send_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	69db      	ldr	r3, [r3, #28]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Flush_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a1b      	ldr	r3, [r3, #32]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <panic_+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030260 	.word	0x00030260

000d4af0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <log_message+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030260 	.word	0x00030260

000d4b00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <set_system_mode+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	685b      	ldr	r3, [r3, #4]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030220 	.word	0x00030220

000d4b10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <system_delay_ms+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b03      	ldr	r3, [pc, #12]	; (d4b30 <system_ctrl_set_app_request_handler+0x10>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b2a:	9301      	str	r3, [sp, #4]
   d4b2c:	bd08      	pop	{r3, pc}
   d4b2e:	0000      	.short	0x0000
   d4b30:	00030220 	.word	0x00030220

000d4b34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b03      	ldr	r3, [pc, #12]	; (d4b44 <system_ctrl_set_result+0x10>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b3e:	9301      	str	r3, [sp, #4]
   d4b40:	bd08      	pop	{r3, pc}
   d4b42:	0000      	.short	0x0000
   d4b44:	00030220 	.word	0x00030220

000d4b48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <network_connect+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	685b      	ldr	r3, [r3, #4]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	00030240 	.word	0x00030240

000d4b58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <network_connecting+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	689b      	ldr	r3, [r3, #8]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	00030240 	.word	0x00030240

000d4b68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <network_disconnect+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	68db      	ldr	r3, [r3, #12]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	00030240 	.word	0x00030240

000d4b78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <network_ready+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	691b      	ldr	r3, [r3, #16]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030240 	.word	0x00030240

000d4b88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <network_on+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	695b      	ldr	r3, [r3, #20]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030240 	.word	0x00030240

000d4b98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <network_off+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	699b      	ldr	r3, [r3, #24]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030240 	.word	0x00030240

000d4ba8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <network_listen+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	69db      	ldr	r3, [r3, #28]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030240 	.word	0x00030240

000d4bb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <network_listening+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6a1b      	ldr	r3, [r3, #32]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030240 	.word	0x00030240

000d4bc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <network_set_listen_timeout+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030240 	.word	0x00030240

000d4bd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_get_listen_timeout+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030244 	.word	0x00030244

000d4bf8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <malloc+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	681b      	ldr	r3, [r3, #0]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	0003021c 	.word	0x0003021c

000d4c08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <free+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	685b      	ldr	r3, [r3, #4]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	0003021c 	.word	0x0003021c

000d4c18 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <vsnprintf+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	0003021c 	.word	0x0003021c

000d4c28 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <_malloc_r+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	0003021c 	.word	0x0003021c

000d4c38 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <__errno+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	0003021c 	.word	0x0003021c

000d4c48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c48:	2200      	movs	r2, #0
   d4c4a:	4611      	mov	r1, r2
   d4c4c:	6840      	ldr	r0, [r0, #4]
   d4c4e:	f7ff bfb3 	b.w	d4bb8 <network_listening>

000d4c52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c52:	2200      	movs	r2, #0
   d4c54:	4611      	mov	r1, r2
   d4c56:	6840      	ldr	r0, [r0, #4]
   d4c58:	f7ff bfbe 	b.w	d4bd8 <network_get_listen_timeout>

000d4c5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c5c:	2200      	movs	r2, #0
   d4c5e:	6840      	ldr	r0, [r0, #4]
   d4c60:	f7ff bfb2 	b.w	d4bc8 <network_set_listen_timeout>

000d4c64 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c64:	2200      	movs	r2, #0
   d4c66:	f081 0101 	eor.w	r1, r1, #1
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	f7ff bf9c 	b.w	d4ba8 <network_listen>

000d4c70 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c70:	2300      	movs	r3, #0
   d4c72:	461a      	mov	r2, r3
   d4c74:	4619      	mov	r1, r3
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff bf8e 	b.w	d4b98 <network_off>

000d4c7c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c7c:	2300      	movs	r3, #0
   d4c7e:	461a      	mov	r2, r3
   d4c80:	4619      	mov	r1, r3
   d4c82:	6840      	ldr	r0, [r0, #4]
   d4c84:	f7ff bf80 	b.w	d4b88 <network_on>

000d4c88 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c88:	2200      	movs	r2, #0
   d4c8a:	4611      	mov	r1, r2
   d4c8c:	6840      	ldr	r0, [r0, #4]
   d4c8e:	f7ff bf73 	b.w	d4b78 <network_ready>

000d4c92 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c92:	2200      	movs	r2, #0
   d4c94:	4611      	mov	r1, r2
   d4c96:	6840      	ldr	r0, [r0, #4]
   d4c98:	f7ff bf5e 	b.w	d4b58 <network_connecting>

000d4c9c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c9c:	2200      	movs	r2, #0
   d4c9e:	2102      	movs	r1, #2
   d4ca0:	6840      	ldr	r0, [r0, #4]
   d4ca2:	f7ff bf61 	b.w	d4b68 <network_disconnect>

000d4ca6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ca6:	2300      	movs	r3, #0
   d4ca8:	461a      	mov	r2, r3
   d4caa:	6840      	ldr	r0, [r0, #4]
   d4cac:	f7ff bf4c 	b.w	d4b48 <network_connect>

000d4cb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cb0:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cb2:	2203      	movs	r2, #3
   d4cb4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cb6:	4a02      	ldr	r2, [pc, #8]	; (d4cc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cb8:	601a      	str	r2, [r3, #0]
   d4cba:	4770      	bx	lr
   d4cbc:	2003e3f8 	.word	0x2003e3f8
   d4cc0:	000d87c4 	.word	0x000d87c4

000d4cc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4cc4:	b510      	push	{r4, lr}
   d4cc6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4cc8:	6800      	ldr	r0, [r0, #0]
   d4cca:	b118      	cbz	r0, d4cd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4ccc:	f7ff ff9c 	bl	d4c08 <free>
            wakeupSource_ = nullptr;
   d4cd0:	2300      	movs	r3, #0
   d4cd2:	6023      	str	r3, [r4, #0]
   d4cd4:	bd10      	pop	{r4, pc}

000d4cd6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cd6:	b510      	push	{r4, lr}
   d4cd8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4cda:	f7ff fff3 	bl	d4cc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cde:	4620      	mov	r0, r4
   d4ce0:	bd10      	pop	{r4, pc}
	...

000d4ce4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ce4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ce6:	4c09      	ldr	r4, [pc, #36]	; (d4d0c <_GLOBAL__sub_I_System+0x28>)
   d4ce8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cee:	6020      	str	r0, [r4, #0]
   d4cf0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cf2:	71a0      	strb	r0, [r4, #6]
   d4cf4:	8120      	strh	r0, [r4, #8]
   d4cf6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cf8:	f7ff ff02 	bl	d4b00 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	4a04      	ldr	r2, [pc, #16]	; (d4d10 <_GLOBAL__sub_I_System+0x2c>)
   d4d00:	4904      	ldr	r1, [pc, #16]	; (d4d14 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d06:	f000 bf71 	b.w	d5bec <__aeabi_atexit>
   d4d0a:	bf00      	nop
   d4d0c:	2003e400 	.word	0x2003e400
   d4d10:	2003e2c4 	.word	0x2003e2c4
   d4d14:	000d4cd7 	.word	0x000d4cd7

000d4d18 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d18:	b510      	push	{r4, lr}
   d4d1a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d1c:	6800      	ldr	r0, [r0, #0]
   d4d1e:	b108      	cbz	r0, d4d24 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d20:	f7ff fe1e 	bl	d4960 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d24:	4620      	mov	r0, r4
   d4d26:	bd10      	pop	{r4, pc}

000d4d28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d28:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d2a:	4c06      	ldr	r4, [pc, #24]	; (d4d44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d2c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d2e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d30:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d32:	f7ff fe0d 	bl	d4950 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d36:	4620      	mov	r0, r4
   d4d38:	4a03      	ldr	r2, [pc, #12]	; (d4d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d3a:	4904      	ldr	r1, [pc, #16]	; (d4d4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d40:	f000 bf54 	b.w	d5bec <__aeabi_atexit>
   d4d44:	2003e40c 	.word	0x2003e40c
   d4d48:	2003e2c4 	.word	0x2003e2c4
   d4d4c:	000d4d19 	.word	0x000d4d19

000d4d50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d52:	4606      	mov	r6, r0
   d4d54:	460d      	mov	r5, r1
   d4d56:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d58:	2400      	movs	r4, #0
  while (size--) {
   d4d5a:	42bd      	cmp	r5, r7
   d4d5c:	d00c      	beq.n	d4d78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d5e:	6833      	ldr	r3, [r6, #0]
   d4d60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d64:	689b      	ldr	r3, [r3, #8]
   d4d66:	4630      	mov	r0, r6
   d4d68:	4798      	blx	r3
     if (chunk>=0)
   d4d6a:	2800      	cmp	r0, #0
   d4d6c:	db01      	blt.n	d4d72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d70:	e7f3      	b.n	d4d5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d72:	2c00      	cmp	r4, #0
   d4d74:	bf08      	it	eq
   d4d76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d78:	4620      	mov	r0, r4
   d4d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d7c:	b570      	push	{r4, r5, r6, lr}
   d4d7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d84:	b149      	cbz	r1, d4d9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d86:	f001 fddf 	bl	d6948 <strlen>
   d4d8a:	682b      	ldr	r3, [r5, #0]
   d4d8c:	4602      	mov	r2, r0
   d4d8e:	4621      	mov	r1, r4
   d4d90:	4628      	mov	r0, r5
   d4d92:	68db      	ldr	r3, [r3, #12]
    }
   d4d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d98:	4718      	bx	r3
    }
   d4d9a:	bd70      	pop	{r4, r5, r6, pc}

000d4d9c <_ZN5Print5printEPKc>:
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	f7ff ffed 	bl	d4d7c <_ZN5Print5writeEPKc>
   d4da2:	bd08      	pop	{r3, pc}

000d4da4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4da4:	6803      	ldr	r3, [r0, #0]
   d4da6:	689b      	ldr	r3, [r3, #8]
   d4da8:	4718      	bx	r3

000d4daa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4daa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4dac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4dae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4db0:	f7ff fff8 	bl	d4da4 <_ZN5Print5printEc>
  n += print('\n');
   d4db4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4db6:	4604      	mov	r4, r0
  n += print('\n');
   d4db8:	4628      	mov	r0, r5
   d4dba:	f7ff fff3 	bl	d4da4 <_ZN5Print5printEc>
  return n;
}
   d4dbe:	4420      	add	r0, r4
   d4dc0:	bd38      	pop	{r3, r4, r5, pc}

000d4dc2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4dc2:	b538      	push	{r3, r4, r5, lr}
   d4dc4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dc6:	f7ff ffd9 	bl	d4d7c <_ZN5Print5writeEPKc>
   d4dca:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4dcc:	4628      	mov	r0, r5
   d4dce:	f7ff ffec 	bl	d4daa <_ZN5Print7printlnEv>
  return n;
}
   d4dd2:	4420      	add	r0, r4
   d4dd4:	bd38      	pop	{r3, r4, r5, pc}

000d4dd6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dd6:	b530      	push	{r4, r5, lr}
   d4dd8:	b08b      	sub	sp, #44	; 0x2c
   d4dda:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ddc:	2100      	movs	r1, #0
   d4dde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4de2:	2a01      	cmp	r2, #1
   d4de4:	bf98      	it	ls
   d4de6:	220a      	movls	r2, #10
   d4de8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4dec:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4df0:	fb05 3312 	mls	r3, r5, r2, r3
   d4df4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4df8:	2b09      	cmp	r3, #9
   d4dfa:	bf94      	ite	ls
   d4dfc:	3330      	addls	r3, #48	; 0x30
   d4dfe:	3337      	addhi	r3, #55	; 0x37
   d4e00:	b2db      	uxtb	r3, r3
   d4e02:	4621      	mov	r1, r4
   d4e04:	f804 3901 	strb.w	r3, [r4], #-1
   d4e08:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4e0a:	2d00      	cmp	r5, #0
   d4e0c:	d1ee      	bne.n	d4dec <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4e0e:	f7ff ffb5 	bl	d4d7c <_ZN5Print5writeEPKc>
}
   d4e12:	b00b      	add	sp, #44	; 0x2c
   d4e14:	bd30      	pop	{r4, r5, pc}

000d4e16 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e16:	b40c      	push	{r2, r3}
   d4e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e1c:	b087      	sub	sp, #28
   d4e1e:	af00      	add	r7, sp, #0
   d4e20:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4e24:	4605      	mov	r5, r0
   d4e26:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4e2a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4e2e:	4623      	mov	r3, r4
   d4e30:	464a      	mov	r2, r9
   d4e32:	2114      	movs	r1, #20
   d4e34:	1d38      	adds	r0, r7, #4
   d4e36:	f7ff feef 	bl	d4c18 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4e3a:	2813      	cmp	r0, #19
   d4e3c:	d805      	bhi.n	d4e4a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e3e:	1d39      	adds	r1, r7, #4
   d4e40:	4628      	mov	r0, r5
   d4e42:	f7ff ff9b 	bl	d4d7c <_ZN5Print5writeEPKc>
   d4e46:	4604      	mov	r4, r0
   d4e48:	e013      	b.n	d4e72 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e4a:	f100 0308 	add.w	r3, r0, #8
   d4e4e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4e52:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e54:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4e58:	1c41      	adds	r1, r0, #1
   d4e5a:	4623      	mov	r3, r4
   d4e5c:	464a      	mov	r2, r9
   d4e5e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4e60:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4e62:	f7ff fed9 	bl	d4c18 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e66:	4669      	mov	r1, sp
   d4e68:	4628      	mov	r0, r5
   d4e6a:	f7ff ff87 	bl	d4d7c <_ZN5Print5writeEPKc>
   d4e6e:	4604      	mov	r4, r0
   d4e70:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4e72:	b11e      	cbz	r6, d4e7c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4e74:	4628      	mov	r0, r5
   d4e76:	f7ff ff98 	bl	d4daa <_ZN5Print7printlnEv>
   d4e7a:	4404      	add	r4, r0
    return n;
}
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	371c      	adds	r7, #28
   d4e80:	46bd      	mov	sp, r7
   d4e82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e86:	b002      	add	sp, #8
   d4e88:	4770      	bx	lr
	...

000d4e8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e8c:	4b01      	ldr	r3, [pc, #4]	; (d4e94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e8e:	4a02      	ldr	r2, [pc, #8]	; (d4e98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e90:	601a      	str	r2, [r3, #0]
   d4e92:	4770      	bx	lr
   d4e94:	2003e410 	.word	0x2003e410
   d4e98:	000d8863 	.word	0x000d8863

000d4e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e9c:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e9e:	681a      	ldr	r2, [r3, #0]
   d4ea0:	4b02      	ldr	r3, [pc, #8]	; (d4eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ea2:	601a      	str	r2, [r3, #0]
   d4ea4:	4770      	bx	lr
   d4ea6:	bf00      	nop
   d4ea8:	2003e220 	.word	0x2003e220
   d4eac:	2003e414 	.word	0x2003e414

000d4eb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4eb0:	2100      	movs	r1, #0
   d4eb2:	f7ff be2d 	b.w	d4b10 <system_delay_ms>

000d4eb6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4eb6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4eb8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4eba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ebc:	b113      	cbz	r3, d4ec4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ebe:	2203      	movs	r2, #3
   d4ec0:	4601      	mov	r1, r0
   d4ec2:	4798      	blx	r3
    }
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	bd10      	pop	{r4, pc}

000d4ec8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4ec8:	b510      	push	{r4, lr}
   d4eca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ecc:	f7ff fff3 	bl	d4eb6 <_ZNSt14_Function_baseD1Ev>
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	bd10      	pop	{r4, pc}

000d4ed4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ed4:	4803      	ldr	r0, [pc, #12]	; (d4ee4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ed6:	4a04      	ldr	r2, [pc, #16]	; (d4ee8 <_GLOBAL__sub_I_RGB+0x14>)
   d4ed8:	4904      	ldr	r1, [pc, #16]	; (d4eec <_GLOBAL__sub_I_RGB+0x18>)
   d4eda:	2300      	movs	r3, #0
   d4edc:	6083      	str	r3, [r0, #8]
   d4ede:	f000 be85 	b.w	d5bec <__aeabi_atexit>
   d4ee2:	bf00      	nop
   d4ee4:	2003e418 	.word	0x2003e418
   d4ee8:	2003e2c4 	.word	0x2003e2c4
   d4eec:	000d4ec9 	.word	0x000d4ec9

000d4ef0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4ef0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4ef2:	4b0c      	ldr	r3, [pc, #48]	; (d4f24 <serialEventRun+0x34>)
   d4ef4:	b133      	cbz	r3, d4f04 <serialEventRun+0x14>
   d4ef6:	f000 f96d 	bl	d51d4 <_Z16_fetch_usbserialv>
   d4efa:	6803      	ldr	r3, [r0, #0]
   d4efc:	691b      	ldr	r3, [r3, #16]
   d4efe:	4798      	blx	r3
   d4f00:	2800      	cmp	r0, #0
   d4f02:	dc09      	bgt.n	d4f18 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4f04:	4b08      	ldr	r3, [pc, #32]	; (d4f28 <serialEventRun+0x38>)
   d4f06:	b163      	cbz	r3, d4f22 <serialEventRun+0x32>
   d4f08:	f000 f9e2 	bl	d52d0 <_Z22__fetch_global_Serial1v>
   d4f0c:	6803      	ldr	r3, [r0, #0]
   d4f0e:	691b      	ldr	r3, [r3, #16]
   d4f10:	4798      	blx	r3
   d4f12:	2800      	cmp	r0, #0
   d4f14:	dc03      	bgt.n	d4f1e <serialEventRun+0x2e>
   d4f16:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4f18:	f3af 8000 	nop.w
   d4f1c:	e7f2      	b.n	d4f04 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4f1e:	f3af 8000 	nop.w
   d4f22:	bd08      	pop	{r3, pc}
	...

000d4f2c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4f2c:	b508      	push	{r3, lr}
	serialEventRun();
   d4f2e:	f7ff ffdf 	bl	d4ef0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f32:	f7ff fced 	bl	d4910 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f36:	4b01      	ldr	r3, [pc, #4]	; (d4f3c <_post_loop+0x10>)
   d4f38:	6018      	str	r0, [r3, #0]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	2003e74c 	.word	0x2003e74c

000d4f40 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f40:	4802      	ldr	r0, [pc, #8]	; (d4f4c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4f42:	4a03      	ldr	r2, [pc, #12]	; (d4f50 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4f44:	4903      	ldr	r1, [pc, #12]	; (d4f54 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4f46:	1a12      	subs	r2, r2, r0
   d4f48:	f001 bca0 	b.w	d688c <memcpy>
   d4f4c:	2003f400 	.word	0x2003f400
   d4f50:	2003f404 	.word	0x2003f404
   d4f54:	000d8d90 	.word	0x000d8d90

000d4f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f5a:	2300      	movs	r3, #0
   d4f5c:	9300      	str	r3, [sp, #0]
   d4f5e:	461a      	mov	r2, r3
   d4f60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f64:	f7ff fde6 	bl	d4b34 <system_ctrl_set_result>
}
   d4f68:	b003      	add	sp, #12
   d4f6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f70 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4f70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f72:	8843      	ldrh	r3, [r0, #2]
   d4f74:	2b0a      	cmp	r3, #10
   d4f76:	d008      	beq.n	d4f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f78:	2b50      	cmp	r3, #80	; 0x50
   d4f7a:	d109      	bne.n	d4f90 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4f7c:	4b09      	ldr	r3, [pc, #36]	; (d4fa4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f7e:	681b      	ldr	r3, [r3, #0]
   d4f80:	b13b      	cbz	r3, d4f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4f82:	b003      	add	sp, #12
   d4f84:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4f88:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4f8a:	f7ff ffe5 	bl	d4f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4f8e:	e006      	b.n	d4f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f90:	2300      	movs	r3, #0
   d4f92:	9300      	str	r3, [sp, #0]
   d4f94:	461a      	mov	r2, r3
   d4f96:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f9a:	f7ff fdcb 	bl	d4b34 <system_ctrl_set_result>
        break;
    }
}
   d4f9e:	b003      	add	sp, #12
   d4fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4fa4:	2003e428 	.word	0x2003e428

000d4fa8 <module_user_init_hook>:

void module_user_init_hook()
{
   d4fa8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4faa:	4c10      	ldr	r4, [pc, #64]	; (d4fec <module_user_init_hook+0x44>)
   d4fac:	4d10      	ldr	r5, [pc, #64]	; (d4ff0 <module_user_init_hook+0x48>)
   d4fae:	6823      	ldr	r3, [r4, #0]
   d4fb0:	42ab      	cmp	r3, r5
   d4fb2:	4b10      	ldr	r3, [pc, #64]	; (d4ff4 <module_user_init_hook+0x4c>)
   d4fb4:	bf0c      	ite	eq
   d4fb6:	2201      	moveq	r2, #1
   d4fb8:	2200      	movne	r2, #0
   d4fba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4fbc:	d002      	beq.n	d4fc4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4fbe:	f7ff ffbf 	bl	d4f40 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4fc2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4fc4:	f7ff fc94 	bl	d48f0 <HAL_RNG_GetRandomNumber>
   d4fc8:	4604      	mov	r4, r0
    srand(seed);
   d4fca:	f001 fc8d 	bl	d68e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4fce:	4b0a      	ldr	r3, [pc, #40]	; (d4ff8 <module_user_init_hook+0x50>)
   d4fd0:	b113      	cbz	r3, d4fd8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4fd8:	2100      	movs	r1, #0
   d4fda:	4807      	ldr	r0, [pc, #28]	; (d4ff8 <module_user_init_hook+0x50>)
   d4fdc:	f7ff fe04 	bl	d4be8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fe0:	2100      	movs	r1, #0
   d4fe2:	4806      	ldr	r0, [pc, #24]	; (d4ffc <module_user_init_hook+0x54>)
}
   d4fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fe8:	f7ff bd9a 	b.w	d4b20 <system_ctrl_set_app_request_handler>
   d4fec:	2003f400 	.word	0x2003f400
   d4ff0:	9a271c1e 	.word	0x9a271c1e
   d4ff4:	2003e42c 	.word	0x2003e42c
   d4ff8:	00000000 	.word	0x00000000
   d4ffc:	000d4f71 	.word	0x000d4f71

000d5000 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5000:	4770      	bx	lr

000d5002 <_ZN9IPAddressD0Ev>:
   d5002:	b510      	push	{r4, lr}
   d5004:	2118      	movs	r1, #24
   d5006:	4604      	mov	r4, r0
   d5008:	f000 fdf5 	bl	d5bf6 <_ZdlPvj>
   d500c:	4620      	mov	r0, r4
   d500e:	bd10      	pop	{r4, pc}

000d5010 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5010:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5012:	7d03      	ldrb	r3, [r0, #20]
   d5014:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5016:	b08d      	sub	sp, #52	; 0x34
   d5018:	460e      	mov	r6, r1
   d501a:	f100 0704 	add.w	r7, r0, #4
   d501e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5022:	d002      	beq.n	d502a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5024:	f100 0508 	add.w	r5, r0, #8
   d5028:	e018      	b.n	d505c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d502a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d502c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d502e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5032:	232f      	movs	r3, #47	; 0x2f
   d5034:	462a      	mov	r2, r5
   d5036:	200a      	movs	r0, #10
   d5038:	f7ff fc9a 	bl	d4970 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d503c:	4628      	mov	r0, r5
   d503e:	f001 fc83 	bl	d6948 <strlen>
   d5042:	6833      	ldr	r3, [r6, #0]
   d5044:	4602      	mov	r2, r0
   d5046:	68db      	ldr	r3, [r3, #12]
   d5048:	4629      	mov	r1, r5
   d504a:	4630      	mov	r0, r6
   d504c:	4798      	blx	r3
   d504e:	e00f      	b.n	d5070 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5050:	b124      	cbz	r4, d505c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5052:	212e      	movs	r1, #46	; 0x2e
   d5054:	4630      	mov	r0, r6
   d5056:	f7ff fea5 	bl	d4da4 <_ZN5Print5printEc>
   d505a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d505c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5060:	220a      	movs	r2, #10
   d5062:	4630      	mov	r0, r6
   d5064:	f7ff feb7 	bl	d4dd6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5068:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d506a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d506c:	d1f0      	bne.n	d5050 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d506e:	4620      	mov	r0, r4
    }
    return n;
}
   d5070:	b00d      	add	sp, #52	; 0x34
   d5072:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5074 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5074:	b510      	push	{r4, lr}
   d5076:	4b05      	ldr	r3, [pc, #20]	; (d508c <_ZN9IPAddressC1Ev+0x18>)
   d5078:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d507a:	2211      	movs	r2, #17
   d507c:	f840 3b04 	str.w	r3, [r0], #4
   d5080:	2100      	movs	r1, #0
   d5082:	f001 fc29 	bl	d68d8 <memset>
{
    clear();
}
   d5086:	4620      	mov	r0, r4
   d5088:	bd10      	pop	{r4, pc}
   d508a:	bf00      	nop
   d508c:	000d88f4 	.word	0x000d88f4

000d5090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5090:	4603      	mov	r3, r0
   d5092:	4a07      	ldr	r2, [pc, #28]	; (d50b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5094:	b510      	push	{r4, lr}
   d5096:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d509a:	f101 0210 	add.w	r2, r1, #16
   d509e:	f851 4b04 	ldr.w	r4, [r1], #4
   d50a2:	f843 4b04 	str.w	r4, [r3], #4
   d50a6:	4291      	cmp	r1, r2
   d50a8:	d1f9      	bne.n	d509e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50aa:	780a      	ldrb	r2, [r1, #0]
   d50ac:	701a      	strb	r2, [r3, #0]
}
   d50ae:	bd10      	pop	{r4, pc}
   d50b0:	000d88f4 	.word	0x000d88f4

000d50b4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d50b4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d50b6:	2b04      	cmp	r3, #4
   d50b8:	d101      	bne.n	d50be <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d50ba:	6840      	ldr	r0, [r0, #4]
   d50bc:	e008      	b.n	d50d0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d50be:	2b06      	cmp	r3, #6
   d50c0:	d10a      	bne.n	d50d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d50c2:	6843      	ldr	r3, [r0, #4]
   d50c4:	b953      	cbnz	r3, d50dc <_ZNK9IPAddresscvbEv+0x28>
   d50c6:	6883      	ldr	r3, [r0, #8]
   d50c8:	b943      	cbnz	r3, d50dc <_ZNK9IPAddresscvbEv+0x28>
   d50ca:	68c3      	ldr	r3, [r0, #12]
   d50cc:	b933      	cbnz	r3, d50dc <_ZNK9IPAddresscvbEv+0x28>
   d50ce:	6900      	ldr	r0, [r0, #16]
   d50d0:	3000      	adds	r0, #0
   d50d2:	bf18      	it	ne
   d50d4:	2001      	movne	r0, #1
   d50d6:	4770      	bx	lr
    } else {
        return false;
   d50d8:	2000      	movs	r0, #0
   d50da:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d50dc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d50de:	4770      	bx	lr

000d50e0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50f2:	2304      	movs	r3, #4
   d50f4:	6041      	str	r1, [r0, #4]
   d50f6:	7503      	strb	r3, [r0, #20]
   d50f8:	bd10      	pop	{r4, pc}

000d50fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50fc:	780d      	ldrb	r5, [r1, #0]
   d50fe:	788b      	ldrb	r3, [r1, #2]
   d5100:	784a      	ldrb	r2, [r1, #1]
   d5102:	78c9      	ldrb	r1, [r1, #3]
   d5104:	9100      	str	r1, [sp, #0]
   d5106:	4629      	mov	r1, r5
   d5108:	f7ff ffea 	bl	d50e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d510c:	b003      	add	sp, #12
   d510e:	bd30      	pop	{r4, r5, pc}

000d5110 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5110:	7441      	strb	r1, [r0, #17]
   d5112:	4770      	bx	lr

000d5114 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5114:	4770      	bx	lr

000d5116 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5116:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5118:	2100      	movs	r1, #0
   d511a:	7c00      	ldrb	r0, [r0, #16]
   d511c:	f7ff fcc8 	bl	d4ab0 <HAL_USB_USART_Receive_Data>
}
   d5120:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5124:	bf28      	it	cs
   d5126:	f04f 30ff 	movcs.w	r0, #4294967295
   d512a:	bd08      	pop	{r3, pc}

000d512c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d512c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d512e:	2101      	movs	r1, #1
   d5130:	7c00      	ldrb	r0, [r0, #16]
   d5132:	f7ff fcbd 	bl	d4ab0 <HAL_USB_USART_Receive_Data>
}
   d5136:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d513a:	bf28      	it	cs
   d513c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5140:	bd08      	pop	{r3, pc}

000d5142 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5142:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5144:	7c00      	ldrb	r0, [r0, #16]
   d5146:	f7ff fcab 	bl	d4aa0 <HAL_USB_USART_Available_Data_For_Write>
}
   d514a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d514e:	bd08      	pop	{r3, pc}

000d5150 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5150:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5152:	7c00      	ldrb	r0, [r0, #16]
   d5154:	f7ff fc9c 	bl	d4a90 <HAL_USB_USART_Available_Data>
}
   d5158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d515c:	bd08      	pop	{r3, pc}

000d515e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d515e:	7c00      	ldrb	r0, [r0, #16]
   d5160:	f7ff bcb6 	b.w	d4ad0 <HAL_USB_USART_Flush_Data>

000d5164 <_ZN9USBSerialD0Ev>:
   d5164:	b510      	push	{r4, lr}
   d5166:	2114      	movs	r1, #20
   d5168:	4604      	mov	r4, r0
   d516a:	f000 fd44 	bl	d5bf6 <_ZdlPvj>
   d516e:	4620      	mov	r0, r4
   d5170:	bd10      	pop	{r4, pc}

000d5172 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5172:	b538      	push	{r3, r4, r5, lr}
   d5174:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5176:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5178:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d517a:	f7ff fc91 	bl	d4aa0 <HAL_USB_USART_Available_Data_For_Write>
   d517e:	2800      	cmp	r0, #0
   d5180:	dc01      	bgt.n	d5186 <_ZN9USBSerial5writeEh+0x14>
   d5182:	7c60      	ldrb	r0, [r4, #17]
   d5184:	b128      	cbz	r0, d5192 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5186:	4629      	mov	r1, r5
   d5188:	7c20      	ldrb	r0, [r4, #16]
   d518a:	f7ff fc99 	bl	d4ac0 <HAL_USB_USART_Send_Data>
   d518e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5192:	bd38      	pop	{r3, r4, r5, pc}

000d5194 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5194:	b510      	push	{r4, lr}
   d5196:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5198:	2300      	movs	r3, #0
   d519a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d519c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51a0:	60a3      	str	r3, [r4, #8]
   d51a2:	4b05      	ldr	r3, [pc, #20]	; (d51b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d51a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d51aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d51ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d51ae:	4611      	mov	r1, r2
   d51b0:	f7ff fc5e 	bl	d4a70 <HAL_USB_USART_Init>
}
   d51b4:	4620      	mov	r0, r4
   d51b6:	bd10      	pop	{r4, pc}
   d51b8:	000d8908 	.word	0x000d8908

000d51bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d51bc:	2200      	movs	r2, #0
   d51be:	7c00      	ldrb	r0, [r0, #16]
   d51c0:	f7ff bc5e 	b.w	d4a80 <HAL_USB_USART_Begin>

000d51c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d51c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d51ca:	2100      	movs	r1, #0
   d51cc:	f001 fb84 	bl	d68d8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d51d0:	4620      	mov	r0, r4
   d51d2:	bd10      	pop	{r4, pc}

000d51d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d51d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51d6:	4d0e      	ldr	r5, [pc, #56]	; (d5210 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d51d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d51da:	a801      	add	r0, sp, #4
   d51dc:	f7ff fff2 	bl	d51c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51e0:	6829      	ldr	r1, [r5, #0]
   d51e2:	f011 0401 	ands.w	r4, r1, #1
   d51e6:	d110      	bne.n	d520a <_Z16_fetch_usbserialv+0x36>
   d51e8:	4628      	mov	r0, r5
   d51ea:	f7fe ff67 	bl	d40bc <__cxa_guard_acquire>
   d51ee:	b160      	cbz	r0, d520a <_Z16_fetch_usbserialv+0x36>
   d51f0:	aa01      	add	r2, sp, #4
   d51f2:	4621      	mov	r1, r4
   d51f4:	4807      	ldr	r0, [pc, #28]	; (d5214 <_Z16_fetch_usbserialv+0x40>)
   d51f6:	f7ff ffcd 	bl	d5194 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d51fa:	4628      	mov	r0, r5
   d51fc:	f7fe ff63 	bl	d40c6 <__cxa_guard_release>
   d5200:	4a05      	ldr	r2, [pc, #20]	; (d5218 <_Z16_fetch_usbserialv+0x44>)
   d5202:	4906      	ldr	r1, [pc, #24]	; (d521c <_Z16_fetch_usbserialv+0x48>)
   d5204:	4803      	ldr	r0, [pc, #12]	; (d5214 <_Z16_fetch_usbserialv+0x40>)
   d5206:	f000 fcf1 	bl	d5bec <__aeabi_atexit>
	return _usbserial;
}
   d520a:	4802      	ldr	r0, [pc, #8]	; (d5214 <_Z16_fetch_usbserialv+0x40>)
   d520c:	b007      	add	sp, #28
   d520e:	bd30      	pop	{r4, r5, pc}
   d5210:	2003e430 	.word	0x2003e430
   d5214:	2003e434 	.word	0x2003e434
   d5218:	2003e2c4 	.word	0x2003e2c4
   d521c:	000d5115 	.word	0x000d5115

000d5220 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5220:	4770      	bx	lr

000d5222 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5222:	7441      	strb	r1, [r0, #17]
   d5224:	4770      	bx	lr

000d5226 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5226:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5228:	7c00      	ldrb	r0, [r0, #16]
   d522a:	f7ff fbe9 	bl	d4a00 <HAL_USART_Available_Data_For_Write>
}
   d522e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5232:	bd08      	pop	{r3, pc}

000d5234 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5234:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5236:	7c00      	ldrb	r0, [r0, #16]
   d5238:	f7ff fbc2 	bl	d49c0 <HAL_USART_Available_Data>
}
   d523c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5240:	bd08      	pop	{r3, pc}

000d5242 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5242:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5244:	7c00      	ldrb	r0, [r0, #16]
   d5246:	f7ff fbcb 	bl	d49e0 <HAL_USART_Peek_Data>
}
   d524a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d524e:	bf28      	it	cs
   d5250:	f04f 30ff 	movcs.w	r0, #4294967295
   d5254:	bd08      	pop	{r3, pc}

000d5256 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5256:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5258:	7c00      	ldrb	r0, [r0, #16]
   d525a:	f7ff fbb9 	bl	d49d0 <HAL_USART_Read_Data>
}
   d525e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5262:	bf28      	it	cs
   d5264:	f04f 30ff 	movcs.w	r0, #4294967295
   d5268:	bd08      	pop	{r3, pc}

000d526a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d526a:	7c00      	ldrb	r0, [r0, #16]
   d526c:	f7ff bbc0 	b.w	d49f0 <HAL_USART_Flush_Data>

000d5270 <_ZN11USARTSerialD0Ev>:
   d5270:	b510      	push	{r4, lr}
   d5272:	2114      	movs	r1, #20
   d5274:	4604      	mov	r4, r0
   d5276:	f000 fcbe 	bl	d5bf6 <_ZdlPvj>
   d527a:	4620      	mov	r0, r4
   d527c:	bd10      	pop	{r4, pc}

000d527e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d527e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5280:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5282:	4604      	mov	r4, r0
   d5284:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5286:	b925      	cbnz	r5, d5292 <_ZN11USARTSerial5writeEh+0x14>
   d5288:	7c00      	ldrb	r0, [r0, #16]
   d528a:	f7ff fbb9 	bl	d4a00 <HAL_USART_Available_Data_For_Write>
   d528e:	2800      	cmp	r0, #0
   d5290:	dd05      	ble.n	d529e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5292:	4631      	mov	r1, r6
   d5294:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d529a:	f7ff bb89 	b.w	d49b0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d529e:	4628      	mov	r0, r5
   d52a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d52a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d52a4:	b510      	push	{r4, lr}
   d52a6:	4604      	mov	r4, r0
   d52a8:	4608      	mov	r0, r1
   d52aa:	4611      	mov	r1, r2
   d52ac:	2200      	movs	r2, #0
   d52ae:	6062      	str	r2, [r4, #4]
   d52b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52b4:	60a2      	str	r2, [r4, #8]
   d52b6:	4a05      	ldr	r2, [pc, #20]	; (d52cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d52b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d52ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d52bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d52be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d52c0:	461a      	mov	r2, r3
   d52c2:	f7ff fb6d 	bl	d49a0 <HAL_USART_Init>
}
   d52c6:	4620      	mov	r0, r4
   d52c8:	bd10      	pop	{r4, pc}
   d52ca:	bf00      	nop
   d52cc:	000d8938 	.word	0x000d8938

000d52d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d52d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d52d2:	4d0c      	ldr	r5, [pc, #48]	; (d5304 <_Z22__fetch_global_Serial1v+0x34>)
   d52d4:	6829      	ldr	r1, [r5, #0]
   d52d6:	f011 0401 	ands.w	r4, r1, #1
   d52da:	d111      	bne.n	d5300 <_Z22__fetch_global_Serial1v+0x30>
   d52dc:	4628      	mov	r0, r5
   d52de:	f7fe feed 	bl	d40bc <__cxa_guard_acquire>
   d52e2:	b168      	cbz	r0, d5300 <_Z22__fetch_global_Serial1v+0x30>
   d52e4:	4a08      	ldr	r2, [pc, #32]	; (d5308 <_Z22__fetch_global_Serial1v+0x38>)
   d52e6:	4b09      	ldr	r3, [pc, #36]	; (d530c <_Z22__fetch_global_Serial1v+0x3c>)
   d52e8:	4809      	ldr	r0, [pc, #36]	; (d5310 <_Z22__fetch_global_Serial1v+0x40>)
   d52ea:	4621      	mov	r1, r4
   d52ec:	f7ff ffda 	bl	d52a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d52f0:	4628      	mov	r0, r5
   d52f2:	f7fe fee8 	bl	d40c6 <__cxa_guard_release>
   d52f6:	4a07      	ldr	r2, [pc, #28]	; (d5314 <_Z22__fetch_global_Serial1v+0x44>)
   d52f8:	4907      	ldr	r1, [pc, #28]	; (d5318 <_Z22__fetch_global_Serial1v+0x48>)
   d52fa:	4805      	ldr	r0, [pc, #20]	; (d5310 <_Z22__fetch_global_Serial1v+0x40>)
   d52fc:	f000 fc76 	bl	d5bec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5300:	4803      	ldr	r0, [pc, #12]	; (d5310 <_Z22__fetch_global_Serial1v+0x40>)
   d5302:	bd38      	pop	{r3, r4, r5, pc}
   d5304:	2003e4e0 	.word	0x2003e4e0
   d5308:	2003e4e4 	.word	0x2003e4e4
   d530c:	2003e45c 	.word	0x2003e45c
   d5310:	2003e448 	.word	0x2003e448
   d5314:	2003e2c4 	.word	0x2003e2c4
   d5318:	000d5221 	.word	0x000d5221

000d531c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d531c:	2200      	movs	r2, #0
   d531e:	4611      	mov	r1, r2
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	f7ff bc49 	b.w	d4bb8 <network_listening>

000d5326 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5326:	2200      	movs	r2, #0
   d5328:	4611      	mov	r1, r2
   d532a:	6840      	ldr	r0, [r0, #4]
   d532c:	f7ff bc54 	b.w	d4bd8 <network_get_listen_timeout>

000d5330 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5330:	2200      	movs	r2, #0
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff bc48 	b.w	d4bc8 <network_set_listen_timeout>

000d5338 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	f081 0101 	eor.w	r1, r1, #1
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	f7ff bc32 	b.w	d4ba8 <network_listen>

000d5344 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5344:	2300      	movs	r3, #0
   d5346:	461a      	mov	r2, r3
   d5348:	2101      	movs	r1, #1
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	f7ff bc24 	b.w	d4b98 <network_off>

000d5350 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5350:	2300      	movs	r3, #0
   d5352:	461a      	mov	r2, r3
   d5354:	4619      	mov	r1, r3
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	f7ff bc16 	b.w	d4b88 <network_on>

000d535c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d535c:	2200      	movs	r2, #0
   d535e:	4611      	mov	r1, r2
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	f7ff bc09 	b.w	d4b78 <network_ready>

000d5366 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5366:	2200      	movs	r2, #0
   d5368:	4611      	mov	r1, r2
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	f7ff bbf4 	b.w	d4b58 <network_connecting>

000d5370 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5370:	2200      	movs	r2, #0
   d5372:	2102      	movs	r1, #2
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	f7ff bbf7 	b.w	d4b68 <network_disconnect>

000d537a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d537a:	2300      	movs	r3, #0
   d537c:	461a      	mov	r2, r3
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff bbe2 	b.w	d4b48 <network_connect>

000d5384 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5384:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5386:	4605      	mov	r5, r0
   d5388:	b188      	cbz	r0, d53ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d538a:	6804      	ldr	r4, [r0, #0]
   d538c:	b14c      	cbz	r4, d53a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d538e:	68a3      	ldr	r3, [r4, #8]
   d5390:	b11b      	cbz	r3, d539a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5392:	2203      	movs	r2, #3
   d5394:	4621      	mov	r1, r4
   d5396:	4620      	mov	r0, r4
   d5398:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d539a:	2110      	movs	r1, #16
   d539c:	4620      	mov	r0, r4
   d539e:	f000 fc2a 	bl	d5bf6 <_ZdlPvj>
   d53a2:	4628      	mov	r0, r5
   d53a4:	2114      	movs	r1, #20
      }
   d53a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53aa:	f000 bc24 	b.w	d5bf6 <_ZdlPvj>
   d53ae:	bd38      	pop	{r3, r4, r5, pc}

000d53b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d53b0:	b110      	cbz	r0, d53b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d53b2:	6803      	ldr	r3, [r0, #0]
   d53b4:	685b      	ldr	r3, [r3, #4]
   d53b6:	4718      	bx	r3
   d53b8:	4770      	bx	lr

000d53ba <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d53ba:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d53bc:	6803      	ldr	r3, [r0, #0]
   d53be:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d53c0:	b1bb      	cbz	r3, d53f2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d53c2:	6858      	ldr	r0, [r3, #4]
   d53c4:	f7ff faac 	bl	d4920 <os_thread_is_current>
   d53c8:	b978      	cbnz	r0, d53ea <_ZN6ThreadD1Ev+0x30>
   d53ca:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d53cc:	7c5a      	ldrb	r2, [r3, #17]
   d53ce:	b912      	cbnz	r2, d53d6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d53d0:	6858      	ldr	r0, [r3, #4]
   d53d2:	f7ff faad 	bl	d4930 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d53d6:	6823      	ldr	r3, [r4, #0]
   d53d8:	6858      	ldr	r0, [r3, #4]
   d53da:	f7ff fab1 	bl	d4940 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53de:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53e0:	2300      	movs	r3, #0
   d53e2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53e4:	b128      	cbz	r0, d53f2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53e6:	f7ff ffcd 	bl	d5384 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53ea:	6820      	ldr	r0, [r4, #0]
   d53ec:	b108      	cbz	r0, d53f2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53ee:	f7ff ffc9 	bl	d5384 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53f2:	4620      	mov	r0, r4
   d53f4:	bd10      	pop	{r4, pc}

000d53f6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d53f6:	b538      	push	{r3, r4, r5, lr}
   d53f8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53fa:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d53fe:	b108      	cbz	r0, d5404 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5400:	f7fe fe4f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5404:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5408:	b108      	cbz	r0, d540e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d540a:	f7ff faa9 	bl	d4960 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d540e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5412:	b135      	cbz	r5, d5422 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5414:	4628      	mov	r0, r5
   d5416:	f7ff ffd0 	bl	d53ba <_ZN6ThreadD1Ev>
   d541a:	2104      	movs	r1, #4
   d541c:	4628      	mov	r0, r5
   d541e:	f000 fbea 	bl	d5bf6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5422:	6820      	ldr	r0, [r4, #0]
   d5424:	b108      	cbz	r0, d542a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5426:	f7ff ffc3 	bl	d53b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d542a:	4620      	mov	r0, r4
   d542c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5430 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5430:	b510      	push	{r4, lr}
   d5432:	4b04      	ldr	r3, [pc, #16]	; (d5444 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5434:	4604      	mov	r4, r0
   d5436:	f840 3b08 	str.w	r3, [r0], #8
   d543a:	f7ff ffdc 	bl	d53f6 <_ZN5spark11MeshPublishD1Ev>
   d543e:	4620      	mov	r0, r4
   d5440:	bd10      	pop	{r4, pc}
   d5442:	bf00      	nop
   d5444:	000d8968 	.word	0x000d8968

000d5448 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5448:	b538      	push	{r3, r4, r5, lr}
   d544a:	4c0e      	ldr	r4, [pc, #56]	; (d5484 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d544c:	4b0e      	ldr	r3, [pc, #56]	; (d5488 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d544e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5450:	2500      	movs	r5, #0
   d5452:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5454:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5458:	6063      	str	r3, [r4, #4]
   d545a:	60a5      	str	r5, [r4, #8]
   d545c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5460:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5464:	f7ff fa74 	bl	d4950 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5468:	4b08      	ldr	r3, [pc, #32]	; (d548c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d546a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d546e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5472:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5474:	4620      	mov	r0, r4
   d5476:	4a06      	ldr	r2, [pc, #24]	; (d5490 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5478:	4906      	ldr	r1, [pc, #24]	; (d5494 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d547a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d547e:	f000 bbb5 	b.w	d5bec <__aeabi_atexit>
   d5482:	bf00      	nop
   d5484:	2003e568 	.word	0x2003e568
   d5488:	000d8a50 	.word	0x000d8a50
   d548c:	000d8968 	.word	0x000d8968
   d5490:	2003e2c4 	.word	0x2003e2c4
   d5494:	000d5431 	.word	0x000d5431

000d5498 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5498:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d549a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d549c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d549e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d54a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d54a4:	2201      	movs	r2, #1
   d54a6:	f04f 33ff 	mov.w	r3, #4294967295
   d54aa:	4621      	mov	r1, r4
   d54ac:	47a8      	blx	r5
}
   d54ae:	b003      	add	sp, #12
   d54b0:	bd30      	pop	{r4, r5, pc}

000d54b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d54b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d54b4:	6803      	ldr	r3, [r0, #0]
   d54b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d54b8:	f04f 33ff 	mov.w	r3, #4294967295
   d54bc:	46a4      	mov	ip, r4
}
   d54be:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d54c2:	4760      	bx	ip

000d54c4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d54c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d54c8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d54ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d54ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d54d0:	4621      	mov	r1, r4
   d54d2:	4613      	mov	r3, r2
   d54d4:	2201      	movs	r2, #1
   d54d6:	47a8      	blx	r5
}
   d54d8:	b003      	add	sp, #12
   d54da:	bd30      	pop	{r4, r5, pc}

000d54dc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d54dc:	4770      	bx	lr

000d54de <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d54de:	b538      	push	{r3, r4, r5, lr}
   d54e0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d54e2:	681a      	ldr	r2, [r3, #0]
   d54e4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d54e6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d54e8:	da05      	bge.n	d54f6 <_ZN9TCPClient9connectedEv+0x18>
   d54ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d54ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d54f2:	429a      	cmp	r2, r3
   d54f4:	d001      	beq.n	d54fa <_ZN9TCPClient9connectedEv+0x1c>
   d54f6:	2501      	movs	r5, #1
   d54f8:	e00b      	b.n	d5512 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d54fa:	6803      	ldr	r3, [r0, #0]
   d54fc:	691b      	ldr	r3, [r3, #16]
   d54fe:	4798      	blx	r3
   d5500:	2800      	cmp	r0, #0
   d5502:	bf14      	ite	ne
   d5504:	2501      	movne	r5, #1
   d5506:	2500      	moveq	r5, #0
        if (!rv) {
   d5508:	d103      	bne.n	d5512 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d550a:	6823      	ldr	r3, [r4, #0]
   d550c:	4620      	mov	r0, r4
   d550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5510:	4798      	blx	r3
        }
    }
    return rv;
}
   d5512:	4628      	mov	r0, r5
   d5514:	bd38      	pop	{r3, r4, r5, pc}

000d5516 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5516:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5518:	6818      	ldr	r0, [r3, #0]
}
   d551a:	43c0      	mvns	r0, r0
   d551c:	0fc0      	lsrs	r0, r0, #31
   d551e:	4770      	bx	lr

000d5520 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5520:	4770      	bx	lr

000d5522 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5522:	2000      	movs	r0, #0
   d5524:	4770      	bx	lr

000d5526 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5526:	b510      	push	{r4, lr}
   d5528:	2114      	movs	r1, #20
   d552a:	4604      	mov	r4, r0
   d552c:	f000 fb63 	bl	d5bf6 <_ZdlPvj>
   d5530:	4620      	mov	r0, r4
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5534:	f7fe bdb3 	b.w	d409e <_ZdlPv>

000d5538 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d553a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d553c:	2200      	movs	r2, #0
   d553e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5540:	9202      	str	r2, [sp, #8]
   d5542:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5544:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5546:	4604      	mov	r4, r0
   d5548:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d554a:	d008      	beq.n	d555e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d554c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5550:	fbb3 f1f2 	udiv	r1, r3, r2
   d5554:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5556:	fb02 3111 	mls	r1, r2, r1, r3
   d555a:	434a      	muls	r2, r1
   d555c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d555e:	6960      	ldr	r0, [r4, #20]
   d5560:	2308      	movs	r3, #8
   d5562:	9300      	str	r3, [sp, #0]
   d5564:	f241 0205 	movw	r2, #4101	; 0x1005
   d5568:	446b      	add	r3, sp
   d556a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d556e:	6800      	ldr	r0, [r0, #0]
   d5570:	f7ff fa4e 	bl	d4a10 <sock_setsockopt>
    if (ret < 0) {
   d5574:	2800      	cmp	r0, #0
   d5576:	db08      	blt.n	d558a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5578:	6960      	ldr	r0, [r4, #20]
   d557a:	2300      	movs	r3, #0
   d557c:	4632      	mov	r2, r6
   d557e:	4629      	mov	r1, r5
   d5580:	6800      	ldr	r0, [r0, #0]
   d5582:	f7ff fa65 	bl	d4a50 <sock_send>
    if (ret < 0) {
   d5586:	2800      	cmp	r0, #0
   d5588:	da04      	bge.n	d5594 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d558a:	f7ff fb55 	bl	d4c38 <__errno>
   d558e:	6803      	ldr	r3, [r0, #0]
   d5590:	6063      	str	r3, [r4, #4]
   d5592:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5594:	b004      	add	sp, #16
   d5596:	bd70      	pop	{r4, r5, r6, pc}

000d5598 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5598:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d559a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d559c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d559e:	689b      	ldr	r3, [r3, #8]
   d55a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d55a2:	68a3      	ldr	r3, [r4, #8]
   d55a4:	3b01      	subs	r3, #1
   d55a6:	60a3      	str	r3, [r4, #8]
   d55a8:	b92b      	cbnz	r3, d55b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d55aa:	6823      	ldr	r3, [r4, #0]
   d55ac:	4620      	mov	r0, r4
   d55ae:	68db      	ldr	r3, [r3, #12]
        }
    }
   d55b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d55b4:	4718      	bx	r3
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d55b8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d55ba:	4604      	mov	r4, r0
   d55bc:	694d      	ldr	r5, [r1, #20]
   d55be:	4b05      	ldr	r3, [pc, #20]	; (d55d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d55c0:	f844 3b04 	str.w	r3, [r4], #4
   d55c4:	358c      	adds	r5, #140	; 0x8c
   d55c6:	4606      	mov	r6, r0
   d55c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55cc:	682b      	ldr	r3, [r5, #0]
   d55ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d55d0:	4630      	mov	r0, r6
   d55d2:	bd70      	pop	{r4, r5, r6, pc}
   d55d4:	000d88f4 	.word	0x000d88f4

000d55d8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d55d8:	b510      	push	{r4, lr}
   d55da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d55dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d55e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d55e4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d55e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d55e8:	d005      	beq.n	d55f6 <_ZN9TCPClient4peekEv+0x1e>
   d55ea:	6962      	ldr	r2, [r4, #20]
   d55ec:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d55f0:	4413      	add	r3, r2
   d55f2:	7918      	ldrb	r0, [r3, #4]
   d55f4:	bd10      	pop	{r4, pc}
   d55f6:	6803      	ldr	r3, [r0, #0]
   d55f8:	691b      	ldr	r3, [r3, #16]
   d55fa:	4798      	blx	r3
   d55fc:	2800      	cmp	r0, #0
   d55fe:	d1f4      	bne.n	d55ea <_ZN9TCPClient4peekEv+0x12>
   d5600:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5604:	bd10      	pop	{r4, pc}

000d5606 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5606:	b510      	push	{r4, lr}
   d5608:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d560a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d560e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5612:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5614:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5616:	d008      	beq.n	d562a <_ZN9TCPClient4readEv+0x24>
   d5618:	6962      	ldr	r2, [r4, #20]
   d561a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d561e:	1c59      	adds	r1, r3, #1
   d5620:	4413      	add	r3, r2
   d5622:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5626:	7918      	ldrb	r0, [r3, #4]
   d5628:	bd10      	pop	{r4, pc}
   d562a:	6803      	ldr	r3, [r0, #0]
   d562c:	691b      	ldr	r3, [r3, #16]
   d562e:	4798      	blx	r3
   d5630:	2800      	cmp	r0, #0
   d5632:	d1f1      	bne.n	d5618 <_ZN9TCPClient4readEv+0x12>
   d5634:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5638:	bd10      	pop	{r4, pc}

000d563a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d563a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d563c:	6943      	ldr	r3, [r0, #20]
   d563e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5640:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5644:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5648:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d564a:	4605      	mov	r5, r0
   d564c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d564e:	d106      	bne.n	d565e <_ZN9TCPClient4readEPhj+0x24>
   d5650:	6803      	ldr	r3, [r0, #0]
   d5652:	691b      	ldr	r3, [r3, #16]
   d5654:	4798      	blx	r3
   d5656:	b910      	cbnz	r0, d565e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5658:	f04f 34ff 	mov.w	r4, #4294967295
   d565c:	e014      	b.n	d5688 <_ZN9TCPClient4readEPhj+0x4e>
   d565e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5660:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5664:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5668:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d566a:	42bc      	cmp	r4, r7
   d566c:	bf28      	it	cs
   d566e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5670:	4419      	add	r1, r3
   d5672:	4622      	mov	r2, r4
   d5674:	3104      	adds	r1, #4
   d5676:	4630      	mov	r0, r6
   d5678:	f001 f908 	bl	d688c <memcpy>
   d567c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d567e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5682:	4423      	add	r3, r4
   d5684:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5688:	4620      	mov	r0, r4
   d568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d568c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d568c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5690:	4698      	mov	r8, r3
    stop();
   d5692:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5694:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5698:	460d      	mov	r5, r1
   d569a:	4606      	mov	r6, r0
   d569c:	4617      	mov	r7, r2
    stop();
   d569e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d56a0:	ab12      	add	r3, sp, #72	; 0x48
   d56a2:	2400      	movs	r4, #0
   d56a4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d56a8:	4622      	mov	r2, r4
   d56aa:	4621      	mov	r1, r4
   d56ac:	4628      	mov	r0, r5
   d56ae:	f7ff f907 	bl	d48c0 <netdb_getaddrinfo>
   d56b2:	4681      	mov	r9, r0
   d56b4:	2800      	cmp	r0, #0
   d56b6:	d13d      	bne.n	d5734 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d56b8:	9b00      	ldr	r3, [sp, #0]
   d56ba:	2b00      	cmp	r3, #0
   d56bc:	d056      	beq.n	d576c <_ZN9TCPClient7connectEPKctm+0xe0>
   d56be:	695b      	ldr	r3, [r3, #20]
   d56c0:	2b00      	cmp	r3, #0
   d56c2:	d053      	beq.n	d576c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d56c4:	a806      	add	r0, sp, #24
   d56c6:	f7ff fcd5 	bl	d5074 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d56ca:	9b00      	ldr	r3, [sp, #0]
   d56cc:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d56ce:	7863      	ldrb	r3, [r4, #1]
   d56d0:	2b02      	cmp	r3, #2
   d56d2:	d101      	bne.n	d56d8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d56d4:	1d21      	adds	r1, r4, #4
   d56d6:	e013      	b.n	d5700 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d56d8:	2b0a      	cmp	r3, #10
   d56da:	d114      	bne.n	d5706 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d56dc:	2211      	movs	r2, #17
   d56de:	4649      	mov	r1, r9
   d56e0:	a801      	add	r0, sp, #4
   d56e2:	f001 f8f9 	bl	d68d8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d56e6:	68a3      	ldr	r3, [r4, #8]
   d56e8:	bb33      	cbnz	r3, d5738 <_ZN9TCPClient7connectEPKctm+0xac>
   d56ea:	68e3      	ldr	r3, [r4, #12]
   d56ec:	bb23      	cbnz	r3, d5738 <_ZN9TCPClient7connectEPKctm+0xac>
   d56ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d56f2:	6925      	ldr	r5, [r4, #16]
   d56f4:	f7ff f944 	bl	d4980 <inet_htonl>
   d56f8:	4285      	cmp	r5, r0
   d56fa:	d11d      	bne.n	d5738 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d56fc:	f104 0114 	add.w	r1, r4, #20
   d5700:	a806      	add	r0, sp, #24
   d5702:	f7ff fcfa 	bl	d50fa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5706:	a806      	add	r0, sp, #24
   d5708:	f7ff fcd4 	bl	d50b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d570c:	2800      	cmp	r0, #0
   d570e:	d02d      	beq.n	d576c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d5710:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5712:	ad07      	add	r5, sp, #28
   d5714:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5718:	4b18      	ldr	r3, [pc, #96]	; (d577c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d571a:	930c      	str	r3, [sp, #48]	; 0x30
   d571c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d571e:	ac0d      	add	r4, sp, #52	; 0x34
   d5720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5722:	682b      	ldr	r3, [r5, #0]
   d5724:	7023      	strb	r3, [r4, #0]
   d5726:	463a      	mov	r2, r7
   d5728:	4643      	mov	r3, r8
   d572a:	a90c      	add	r1, sp, #48	; 0x30
   d572c:	4630      	mov	r0, r6
   d572e:	47c8      	blx	r9
   d5730:	4681      	mov	r9, r0
   d5732:	e01b      	b.n	d576c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5734:	46a1      	mov	r9, r4
   d5736:	e019      	b.n	d576c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5738:	f104 0308 	add.w	r3, r4, #8
   d573c:	ad01      	add	r5, sp, #4
   d573e:	3418      	adds	r4, #24
   d5740:	6818      	ldr	r0, [r3, #0]
   d5742:	6859      	ldr	r1, [r3, #4]
   d5744:	462a      	mov	r2, r5
   d5746:	c203      	stmia	r2!, {r0, r1}
   d5748:	3308      	adds	r3, #8
   d574a:	42a3      	cmp	r3, r4
   d574c:	4615      	mov	r5, r2
   d574e:	d1f7      	bne.n	d5740 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d5750:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5752:	a901      	add	r1, sp, #4
   d5754:	a80c      	add	r0, sp, #48	; 0x30
   d5756:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5758:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d575c:	f7ff fc98 	bl	d5090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5762:	ac07      	add	r4, sp, #28
   d5764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5766:	682b      	ldr	r3, [r5, #0]
   d5768:	7023      	strb	r3, [r4, #0]
   d576a:	e7cc      	b.n	d5706 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d576c:	9800      	ldr	r0, [sp, #0]
   d576e:	f7ff f89f 	bl	d48b0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d5772:	4648      	mov	r0, r9
   d5774:	b013      	add	sp, #76	; 0x4c
   d5776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d577a:	bf00      	nop
   d577c:	000d88f4 	.word	0x000d88f4

000d5780 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5780:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5782:	2300      	movs	r3, #0
   d5784:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5788:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d578a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d578e:	4770      	bx	lr

000d5790 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5794:	461e      	mov	r6, r3
    stop();
   d5796:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5798:	460c      	mov	r4, r1
   d579a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d579e:	4605      	mov	r5, r0
   d57a0:	4617      	mov	r7, r2
    stop();
   d57a2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d57a4:	7d23      	ldrb	r3, [r4, #20]
   d57a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d57aa:	2b04      	cmp	r3, #4
   d57ac:	bf0c      	ite	eq
   d57ae:	2002      	moveq	r0, #2
   d57b0:	200a      	movne	r0, #10
   d57b2:	2206      	movs	r2, #6
   d57b4:	2101      	movs	r1, #1
   d57b6:	f7ff f953 	bl	d4a60 <sock_socket>
   d57ba:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d57be:	696b      	ldr	r3, [r5, #20]
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	2b00      	cmp	r3, #0
   d57c4:	db18      	blt.n	d57f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d57c6:	4628      	mov	r0, r5
   d57c8:	f7ff ffda 	bl	d5780 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d57cc:	b1d6      	cbz	r6, d5804 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d57ce:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d57d0:	a903      	add	r1, sp, #12
   d57d2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d57d4:	9303      	str	r3, [sp, #12]
   d57d6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d57da:	f7ff f881 	bl	d48e0 <if_index_to_name>
   d57de:	b958      	cbnz	r0, d57f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d57e0:	6968      	ldr	r0, [r5, #20]
   d57e2:	2306      	movs	r3, #6
   d57e4:	9300      	str	r3, [sp, #0]
   d57e6:	f241 020b 	movw	r2, #4107	; 0x100b
   d57ea:	ab03      	add	r3, sp, #12
   d57ec:	f640 71ff 	movw	r1, #4095	; 0xfff
   d57f0:	6800      	ldr	r0, [r0, #0]
   d57f2:	f7ff f90d 	bl	d4a10 <sock_setsockopt>
   d57f6:	b128      	cbz	r0, d5804 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d57f8:	682b      	ldr	r3, [r5, #0]
   d57fa:	4628      	mov	r0, r5
   d57fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d57fe:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5800:	4798      	blx	r3
   d5802:	e03b      	b.n	d587c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5804:	261c      	movs	r6, #28
   d5806:	4632      	mov	r2, r6
   d5808:	2100      	movs	r1, #0
   d580a:	a803      	add	r0, sp, #12
   d580c:	f001 f864 	bl	d68d8 <memset>
    if (ip.version() == 4) {
   d5810:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5812:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5816:	2b04      	cmp	r3, #4
   d5818:	d10c      	bne.n	d5834 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d581a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d581c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d581e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5822:	f7ff f8b5 	bl	d4990 <inet_htons>
   d5826:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d582a:	6860      	ldr	r0, [r4, #4]
   d582c:	f7ff f8a8 	bl	d4980 <inet_htonl>
   d5830:	9004      	str	r0, [sp, #16]
   d5832:	e013      	b.n	d585c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5834:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5836:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5838:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d583c:	f7ff f8a8 	bl	d4990 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5840:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5842:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5846:	1d23      	adds	r3, r4, #4
   d5848:	f104 0714 	add.w	r7, r4, #20
   d584c:	6818      	ldr	r0, [r3, #0]
   d584e:	6859      	ldr	r1, [r3, #4]
   d5850:	4632      	mov	r2, r6
   d5852:	c203      	stmia	r2!, {r0, r1}
   d5854:	3308      	adds	r3, #8
   d5856:	42bb      	cmp	r3, r7
   d5858:	4616      	mov	r6, r2
   d585a:	d1f7      	bne.n	d584c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d585c:	696b      	ldr	r3, [r5, #20]
   d585e:	221c      	movs	r2, #28
   d5860:	a903      	add	r1, sp, #12
   d5862:	6818      	ldr	r0, [r3, #0]
   d5864:	f7ff f8e4 	bl	d4a30 <sock_connect>
   d5868:	2800      	cmp	r0, #0
   d586a:	d1c5      	bne.n	d57f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d586c:	3404      	adds	r4, #4
   d586e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5870:	696d      	ldr	r5, [r5, #20]
   d5872:	358c      	adds	r5, #140	; 0x8c
   d5874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5876:	6823      	ldr	r3, [r4, #0]
   d5878:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d587a:	2401      	movs	r4, #1
}
   d587c:	4620      	mov	r0, r4
   d587e:	b00a      	add	sp, #40	; 0x28
   d5880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5884 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5884:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5886:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5888:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d588a:	6818      	ldr	r0, [r3, #0]
   d588c:	2800      	cmp	r0, #0
   d588e:	db01      	blt.n	d5894 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5890:	f7ff f8c6 	bl	d4a20 <sock_close>
   d5894:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5896:	f04f 32ff 	mov.w	r2, #4294967295
   d589a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d589c:	6960      	ldr	r0, [r4, #20]
   d589e:	2211      	movs	r2, #17
   d58a0:	2100      	movs	r1, #0
   d58a2:	308c      	adds	r0, #140	; 0x8c
   d58a4:	f001 f818 	bl	d68d8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d58a8:	4620      	mov	r0, r4
}
   d58aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d58ae:	f7ff bf67 	b.w	d5780 <_ZN9TCPClient12flush_bufferEv>
	...

000d58b4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d58b4:	b530      	push	{r4, r5, lr}
   d58b6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d58b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d58bc:	b08b      	sub	sp, #44	; 0x2c
   d58be:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d58c0:	b11b      	cbz	r3, d58ca <_ZN9TCPClient9availableEv+0x16>
   d58c2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d58c6:	429a      	cmp	r2, r3
   d58c8:	d040      	beq.n	d594c <_ZN9TCPClient9availableEv+0x98>
   d58ca:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d58cc:	6818      	ldr	r0, [r3, #0]
   d58ce:	2800      	cmp	r0, #0
   d58d0:	db3f      	blt.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d58d2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d58d6:	2d7f      	cmp	r5, #127	; 0x7f
   d58d8:	d83b      	bhi.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d58da:	1d19      	adds	r1, r3, #4
   d58dc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d58e0:	2308      	movs	r3, #8
   d58e2:	4429      	add	r1, r5
   d58e4:	f7ff f8ac 	bl	d4a40 <sock_recv>
            if (ret > 0) {
   d58e8:	2800      	cmp	r0, #0
   d58ea:	dd0c      	ble.n	d5906 <_ZN9TCPClient9availableEv+0x52>
   d58ec:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d58ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d58f2:	b90a      	cbnz	r2, d58f8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d58f4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d58f8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d58fa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d58fe:	4418      	add	r0, r3
   d5900:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5904:	e025      	b.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5906:	f7ff f997 	bl	d4c38 <__errno>
   d590a:	6803      	ldr	r3, [r0, #0]
   d590c:	2b0b      	cmp	r3, #11
   d590e:	d020      	beq.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
   d5910:	f7ff f992 	bl	d4c38 <__errno>
   d5914:	6803      	ldr	r3, [r0, #0]
   d5916:	2b0b      	cmp	r3, #11
   d5918:	d01b      	beq.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d591a:	2320      	movs	r3, #32
   d591c:	2500      	movs	r5, #0
   d591e:	9302      	str	r3, [sp, #8]
   d5920:	9503      	str	r5, [sp, #12]
   d5922:	f7ff f989 	bl	d4c38 <__errno>
   d5926:	6803      	ldr	r3, [r0, #0]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	4b0e      	ldr	r3, [pc, #56]	; (d5964 <_ZN9TCPClient9availableEv+0xb0>)
   d592c:	9300      	str	r3, [sp, #0]
   d592e:	aa02      	add	r2, sp, #8
   d5930:	462b      	mov	r3, r5
   d5932:	490d      	ldr	r1, [pc, #52]	; (d5968 <_ZN9TCPClient9availableEv+0xb4>)
   d5934:	2032      	movs	r0, #50	; 0x32
   d5936:	f7ff f8db 	bl	d4af0 <log_message>
                    sock_close(d_->sock);
   d593a:	6963      	ldr	r3, [r4, #20]
   d593c:	6818      	ldr	r0, [r3, #0]
   d593e:	f7ff f86f 	bl	d4a20 <sock_close>
   d5942:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5944:	f04f 32ff 	mov.w	r2, #4294967295
   d5948:	601a      	str	r2, [r3, #0]
   d594a:	e002      	b.n	d5952 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d594c:	f7ff ff18 	bl	d5780 <_ZN9TCPClient12flush_bufferEv>
   d5950:	e7bb      	b.n	d58ca <_ZN9TCPClient9availableEv+0x16>
   d5952:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5954:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5958:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d595c:	1a18      	subs	r0, r3, r0
}
   d595e:	b00b      	add	sp, #44	; 0x2c
   d5960:	bd30      	pop	{r4, r5, pc}
   d5962:	bf00      	nop
   d5964:	000d8a03 	.word	0x000d8a03
   d5968:	000d89fc 	.word	0x000d89fc

000d596c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d596c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d596e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5970:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5972:	6001      	str	r1, [r0, #0]
   d5974:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d5978:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d597c:	3088      	adds	r0, #136	; 0x88
   d597e:	f7ff fb79 	bl	d5074 <_ZN9IPAddressC1Ev>
}
   d5982:	4620      	mov	r0, r4
   d5984:	bd10      	pop	{r4, pc}
	...

000d5988 <_ZN9TCPClientC1Ei>:
   d5988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d598c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d598e:	2300      	movs	r3, #0
   d5990:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5992:	4a14      	ldr	r2, [pc, #80]	; (d59e4 <_ZN9TCPClientC1Ei+0x5c>)
   d5994:	6043      	str	r3, [r0, #4]
   d5996:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5998:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d599a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d599c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d599e:	20a0      	movs	r0, #160	; 0xa0
   d59a0:	460e      	mov	r6, r1
   d59a2:	f7fe fb7a 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59a6:	4605      	mov	r5, r0
   d59a8:	b110      	cbz	r0, d59b0 <_ZN9TCPClientC1Ei+0x28>
   d59aa:	4631      	mov	r1, r6
   d59ac:	f7ff ffde 	bl	d596c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59b0:	2014      	movs	r0, #20
   d59b2:	f7fe fb72 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d59b6:	4603      	mov	r3, r0
   d59b8:	b128      	cbz	r0, d59c6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d59ba:	2201      	movs	r2, #1
   d59bc:	6042      	str	r2, [r0, #4]
   d59be:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d59c0:	4a09      	ldr	r2, [pc, #36]	; (d59e8 <_ZN9TCPClientC1Ei+0x60>)
   d59c2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d59c4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d59c6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d59c8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d59ca:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d59cc:	b128      	cbz	r0, d59da <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d59ce:	6843      	ldr	r3, [r0, #4]
   d59d0:	3b01      	subs	r3, #1
   d59d2:	6043      	str	r3, [r0, #4]
   d59d4:	b90b      	cbnz	r3, d59da <_ZN9TCPClientC1Ei+0x52>
   d59d6:	f7ff fddf 	bl	d5598 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d59da:	4620      	mov	r0, r4
   d59dc:	f7ff fed0 	bl	d5780 <_ZN9TCPClient12flush_bufferEv>
}
   d59e0:	4620      	mov	r0, r4
   d59e2:	bd70      	pop	{r4, r5, r6, pc}
   d59e4:	000d89b8 	.word	0x000d89b8
   d59e8:	000d899c 	.word	0x000d899c

000d59ec <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d59ec:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d59ee:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d59f2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d59f4:	f7ff ffc8 	bl	d5988 <_ZN9TCPClientC1Ei>
}
   d59f8:	4620      	mov	r0, r4
   d59fa:	bd10      	pop	{r4, pc}

000d59fc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d59fc:	b510      	push	{r4, lr}
   d59fe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5a00:	6800      	ldr	r0, [r0, #0]
   d5a02:	2800      	cmp	r0, #0
   d5a04:	db01      	blt.n	d5a0a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5a06:	f7ff f80b 	bl	d4a20 <sock_close>
    }
}
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	bd10      	pop	{r4, pc}

000d5a0e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5a0e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a10:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d5a12:	4620      	mov	r0, r4
   d5a14:	f7ff fff2 	bl	d59fc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5a18:	b124      	cbz	r4, d5a24 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5a20:	f7fe bb3d 	b.w	d409e <_ZdlPv>
   d5a24:	bd10      	pop	{r4, pc}

000d5a26 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5a26:	2200      	movs	r2, #0
   d5a28:	4611      	mov	r1, r2
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	f7ff b8a4 	b.w	d4b78 <network_ready>

000d5a30 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a30:	2200      	movs	r2, #0
   d5a32:	4611      	mov	r1, r2
   d5a34:	6840      	ldr	r0, [r0, #4]
   d5a36:	f7ff b8bf 	b.w	d4bb8 <network_listening>

000d5a3a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a3a:	2200      	movs	r2, #0
   d5a3c:	4611      	mov	r1, r2
   d5a3e:	6840      	ldr	r0, [r0, #4]
   d5a40:	f7ff b8ca 	b.w	d4bd8 <network_get_listen_timeout>

000d5a44 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a44:	2200      	movs	r2, #0
   d5a46:	6840      	ldr	r0, [r0, #4]
   d5a48:	f7ff b8be 	b.w	d4bc8 <network_set_listen_timeout>

000d5a4c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a4c:	2200      	movs	r2, #0
   d5a4e:	f081 0101 	eor.w	r1, r1, #1
   d5a52:	6840      	ldr	r0, [r0, #4]
   d5a54:	f7ff b8a8 	b.w	d4ba8 <network_listen>

000d5a58 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5a58:	2300      	movs	r3, #0
   d5a5a:	461a      	mov	r2, r3
   d5a5c:	4619      	mov	r1, r3
   d5a5e:	6840      	ldr	r0, [r0, #4]
   d5a60:	f7ff b89a 	b.w	d4b98 <network_off>

000d5a64 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5a64:	2300      	movs	r3, #0
   d5a66:	461a      	mov	r2, r3
   d5a68:	4619      	mov	r1, r3
   d5a6a:	6840      	ldr	r0, [r0, #4]
   d5a6c:	f7ff b88c 	b.w	d4b88 <network_on>

000d5a70 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a70:	2200      	movs	r2, #0
   d5a72:	4611      	mov	r1, r2
   d5a74:	6840      	ldr	r0, [r0, #4]
   d5a76:	f7ff b86f 	b.w	d4b58 <network_connecting>

000d5a7a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	2102      	movs	r1, #2
   d5a7e:	6840      	ldr	r0, [r0, #4]
   d5a80:	f7ff b872 	b.w	d4b68 <network_disconnect>

000d5a84 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a84:	2300      	movs	r3, #0
   d5a86:	461a      	mov	r2, r3
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	f7ff b85d 	b.w	d4b48 <network_connect>
	...

000d5a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5a90:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5a92:	2204      	movs	r2, #4
   d5a94:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5a96:	4a02      	ldr	r2, [pc, #8]	; (d5aa0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5a98:	601a      	str	r2, [r3, #0]
   d5a9a:	4770      	bx	lr
   d5a9c:	2003e73c 	.word	0x2003e73c
   d5aa0:	000d8a1c 	.word	0x000d8a1c

000d5aa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5aa4:	2300      	movs	r3, #0
   d5aa6:	461a      	mov	r2, r3
   d5aa8:	6840      	ldr	r0, [r0, #4]
   d5aaa:	f7ff b84d 	b.w	d4b48 <network_connect>

000d5aae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5aae:	2200      	movs	r2, #0
   d5ab0:	2102      	movs	r1, #2
   d5ab2:	6840      	ldr	r0, [r0, #4]
   d5ab4:	f7ff b858 	b.w	d4b68 <network_disconnect>

000d5ab8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ab8:	2200      	movs	r2, #0
   d5aba:	4611      	mov	r1, r2
   d5abc:	6840      	ldr	r0, [r0, #4]
   d5abe:	f7ff b84b 	b.w	d4b58 <network_connecting>

000d5ac2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	4611      	mov	r1, r2
   d5ac6:	6840      	ldr	r0, [r0, #4]
   d5ac8:	f7ff b856 	b.w	d4b78 <network_ready>

000d5acc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5acc:	2300      	movs	r3, #0
   d5ace:	461a      	mov	r2, r3
   d5ad0:	4619      	mov	r1, r3
   d5ad2:	6840      	ldr	r0, [r0, #4]
   d5ad4:	f7ff b858 	b.w	d4b88 <network_on>

000d5ad8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ad8:	2300      	movs	r3, #0
   d5ada:	461a      	mov	r2, r3
   d5adc:	4619      	mov	r1, r3
   d5ade:	6840      	ldr	r0, [r0, #4]
   d5ae0:	f7ff b85a 	b.w	d4b98 <network_off>

000d5ae4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ae4:	2200      	movs	r2, #0
   d5ae6:	f081 0101 	eor.w	r1, r1, #1
   d5aea:	6840      	ldr	r0, [r0, #4]
   d5aec:	f7ff b85c 	b.w	d4ba8 <network_listen>

000d5af0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5af0:	2200      	movs	r2, #0
   d5af2:	6840      	ldr	r0, [r0, #4]
   d5af4:	f7ff b868 	b.w	d4bc8 <network_set_listen_timeout>

000d5af8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5af8:	2200      	movs	r2, #0
   d5afa:	4611      	mov	r1, r2
   d5afc:	6840      	ldr	r0, [r0, #4]
   d5afe:	f7ff b86b 	b.w	d4bd8 <network_get_listen_timeout>

000d5b02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b02:	2200      	movs	r2, #0
   d5b04:	4611      	mov	r1, r2
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f7ff b856 	b.w	d4bb8 <network_listening>

000d5b0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b10:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b12:	b095      	sub	sp, #84	; 0x54
   d5b14:	4616      	mov	r6, r2
   d5b16:	460d      	mov	r5, r1
   d5b18:	4607      	mov	r7, r0
    IPAddress addr;
   d5b1a:	f7ff faab 	bl	d5074 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5b1e:	4621      	mov	r1, r4
   d5b20:	2220      	movs	r2, #32
   d5b22:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b24:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5b26:	f000 fed7 	bl	d68d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5b2a:	2340      	movs	r3, #64	; 0x40
   d5b2c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5b2e:	4621      	mov	r1, r4
   d5b30:	466b      	mov	r3, sp
   d5b32:	aa0c      	add	r2, sp, #48	; 0x30
   d5b34:	4630      	mov	r0, r6
   d5b36:	f7fe fec3 	bl	d48c0 <netdb_getaddrinfo>
    if (!r) {
   d5b3a:	4604      	mov	r4, r0
   d5b3c:	2800      	cmp	r0, #0
   d5b3e:	d144      	bne.n	d5bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b40:	4602      	mov	r2, r0
   d5b42:	2101      	movs	r1, #1
   d5b44:	6868      	ldr	r0, [r5, #4]
   d5b46:	f7ff f817 	bl	d4b78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b4a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b4c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b4e:	4622      	mov	r2, r4
   d5b50:	6868      	ldr	r0, [r5, #4]
   d5b52:	f7ff f811 	bl	d4b78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b56:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b58:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b5a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b5c:	2e00      	cmp	r6, #0
   d5b5e:	d034      	beq.n	d5bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b60:	2900      	cmp	r1, #0
   d5b62:	d132      	bne.n	d5bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b64:	6873      	ldr	r3, [r6, #4]
   d5b66:	2b02      	cmp	r3, #2
   d5b68:	d002      	beq.n	d5b70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b6a:	2b0a      	cmp	r3, #10
   d5b6c:	d009      	beq.n	d5b82 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5b6e:	e02a      	b.n	d5bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5b70:	f1b8 0f00 	cmp.w	r8, #0
   d5b74:	d027      	beq.n	d5bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b76:	6971      	ldr	r1, [r6, #20]
   d5b78:	4638      	mov	r0, r7
   d5b7a:	3104      	adds	r1, #4
   d5b7c:	f7ff fabd 	bl	d50fa <_ZN9IPAddressaSEPKh>
   d5b80:	e020      	b.n	d5bc4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b82:	f1b9 0f00 	cmp.w	r9, #0
   d5b86:	d01e      	beq.n	d5bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b88:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b8a:	2211      	movs	r2, #17
   d5b8c:	a801      	add	r0, sp, #4
   d5b8e:	f000 fea3 	bl	d68d8 <memset>
                    a.v = 6;
   d5b92:	2306      	movs	r3, #6
   d5b94:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b98:	ad01      	add	r5, sp, #4
   d5b9a:	f104 0308 	add.w	r3, r4, #8
   d5b9e:	3418      	adds	r4, #24
   d5ba0:	6818      	ldr	r0, [r3, #0]
   d5ba2:	6859      	ldr	r1, [r3, #4]
   d5ba4:	462a      	mov	r2, r5
   d5ba6:	c203      	stmia	r2!, {r0, r1}
   d5ba8:	3308      	adds	r3, #8
   d5baa:	42a3      	cmp	r3, r4
   d5bac:	4615      	mov	r5, r2
   d5bae:	d1f7      	bne.n	d5ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5bb0:	a901      	add	r1, sp, #4
   d5bb2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bb4:	ad07      	add	r5, sp, #28
   d5bb6:	f7ff fa6b 	bl	d5090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bbc:	1d3c      	adds	r4, r7, #4
   d5bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5bc0:	682b      	ldr	r3, [r5, #0]
   d5bc2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5bc4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bc6:	69f6      	ldr	r6, [r6, #28]
   d5bc8:	e7c8      	b.n	d5b5c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5bca:	9800      	ldr	r0, [sp, #0]
   d5bcc:	f7fe fe70 	bl	d48b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5bd0:	4638      	mov	r0, r7
   d5bd2:	b015      	add	sp, #84	; 0x54
   d5bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5bd8:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5bda:	4a03      	ldr	r2, [pc, #12]	; (d5be8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5bdc:	601a      	str	r2, [r3, #0]
   d5bde:	2200      	movs	r2, #0
   d5be0:	605a      	str	r2, [r3, #4]
   d5be2:	4770      	bx	lr
   d5be4:	2003e744 	.word	0x2003e744
   d5be8:	000d8a50 	.word	0x000d8a50

000d5bec <__aeabi_atexit>:
   d5bec:	460b      	mov	r3, r1
   d5bee:	4601      	mov	r1, r0
   d5bf0:	4618      	mov	r0, r3
   d5bf2:	f000 be39 	b.w	d6868 <__cxa_atexit>

000d5bf6 <_ZdlPvj>:
   d5bf6:	f7fe ba52 	b.w	d409e <_ZdlPv>
	...

000d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5bfc:	4b18      	ldr	r3, [pc, #96]	; (d5c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d1      	lsls	r1, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b16      	ldr	r3, [pc, #88]	; (d5c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d2      	lsls	r2, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4b14      	ldr	r3, [pc, #80]	; (d5c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	07d0      	lsls	r0, r2, #31
   d5c1a:	bf5c      	itt	pl
   d5c1c:	2201      	movpl	r2, #1
   d5c1e:	601a      	strpl	r2, [r3, #0]
   d5c20:	4b12      	ldr	r3, [pc, #72]	; (d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d1      	lsls	r1, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4b10      	ldr	r3, [pc, #64]	; (d5c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d2      	lsls	r2, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4b0e      	ldr	r3, [pc, #56]	; (d5c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c3a:	681a      	ldr	r2, [r3, #0]
   d5c3c:	07d0      	lsls	r0, r2, #31
   d5c3e:	bf5c      	itt	pl
   d5c40:	2201      	movpl	r2, #1
   d5c42:	601a      	strpl	r2, [r3, #0]
   d5c44:	4b0c      	ldr	r3, [pc, #48]	; (d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d1      	lsls	r1, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b0a      	ldr	r3, [pc, #40]	; (d5c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d2      	lsls	r2, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4770      	bx	lr
   d5c5e:	bf00      	nop
   d5c60:	2003e76c 	.word	0x2003e76c
   d5c64:	2003e768 	.word	0x2003e768
   d5c68:	2003e764 	.word	0x2003e764
   d5c6c:	2003e760 	.word	0x2003e760
   d5c70:	2003e75c 	.word	0x2003e75c
   d5c74:	2003e758 	.word	0x2003e758
   d5c78:	2003e754 	.word	0x2003e754
   d5c7c:	2003e750 	.word	0x2003e750

000d5c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5c80:	4b24      	ldr	r3, [pc, #144]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d0      	lsls	r0, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b22      	ldr	r3, [pc, #136]	; (d5d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d1      	lsls	r1, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b20      	ldr	r3, [pc, #128]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d2      	lsls	r2, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b1e      	ldr	r3, [pc, #120]	; (d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d0      	lsls	r0, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b1c      	ldr	r3, [pc, #112]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d1      	lsls	r1, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b1a      	ldr	r3, [pc, #104]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d2      	lsls	r2, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b18      	ldr	r3, [pc, #96]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d0      	lsls	r0, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4b16      	ldr	r3, [pc, #88]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5cd6:	681a      	ldr	r2, [r3, #0]
   d5cd8:	07d1      	lsls	r1, r2, #31
   d5cda:	bf5c      	itt	pl
   d5cdc:	2201      	movpl	r2, #1
   d5cde:	601a      	strpl	r2, [r3, #0]
   d5ce0:	4b14      	ldr	r3, [pc, #80]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5ce2:	681a      	ldr	r2, [r3, #0]
   d5ce4:	07d2      	lsls	r2, r2, #31
   d5ce6:	bf5c      	itt	pl
   d5ce8:	2201      	movpl	r2, #1
   d5cea:	601a      	strpl	r2, [r3, #0]
   d5cec:	4b12      	ldr	r3, [pc, #72]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5cee:	681a      	ldr	r2, [r3, #0]
   d5cf0:	07d0      	lsls	r0, r2, #31
   d5cf2:	bf5c      	itt	pl
   d5cf4:	2201      	movpl	r2, #1
   d5cf6:	601a      	strpl	r2, [r3, #0]
   d5cf8:	4b10      	ldr	r3, [pc, #64]	; (d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5cfa:	681a      	ldr	r2, [r3, #0]
   d5cfc:	07d1      	lsls	r1, r2, #31
   d5cfe:	bf5c      	itt	pl
   d5d00:	2201      	movpl	r2, #1
   d5d02:	601a      	strpl	r2, [r3, #0]
   d5d04:	4b0e      	ldr	r3, [pc, #56]	; (d5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5d06:	681a      	ldr	r2, [r3, #0]
   d5d08:	07d2      	lsls	r2, r2, #31
   d5d0a:	bf5c      	itt	pl
   d5d0c:	2201      	movpl	r2, #1
   d5d0e:	601a      	strpl	r2, [r3, #0]
   d5d10:	4770      	bx	lr
   d5d12:	bf00      	nop
   d5d14:	2003e79c 	.word	0x2003e79c
   d5d18:	2003e798 	.word	0x2003e798
   d5d1c:	2003e794 	.word	0x2003e794
   d5d20:	2003e790 	.word	0x2003e790
   d5d24:	2003e78c 	.word	0x2003e78c
   d5d28:	2003e788 	.word	0x2003e788
   d5d2c:	2003e784 	.word	0x2003e784
   d5d30:	2003e780 	.word	0x2003e780
   d5d34:	2003e77c 	.word	0x2003e77c
   d5d38:	2003e778 	.word	0x2003e778
   d5d3c:	2003e774 	.word	0x2003e774
   d5d40:	2003e770 	.word	0x2003e770

000d5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5d44:	4b24      	ldr	r3, [pc, #144]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d0      	lsls	r0, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b22      	ldr	r3, [pc, #136]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b20      	ldr	r3, [pc, #128]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b1e      	ldr	r3, [pc, #120]	; (d5de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d0      	lsls	r0, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b1c      	ldr	r3, [pc, #112]	; (d5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d1      	lsls	r1, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b1a      	ldr	r3, [pc, #104]	; (d5dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d2      	lsls	r2, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4b18      	ldr	r3, [pc, #96]	; (d5df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5d8e:	681a      	ldr	r2, [r3, #0]
   d5d90:	07d0      	lsls	r0, r2, #31
   d5d92:	bf5c      	itt	pl
   d5d94:	2201      	movpl	r2, #1
   d5d96:	601a      	strpl	r2, [r3, #0]
   d5d98:	4b16      	ldr	r3, [pc, #88]	; (d5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5d9a:	681a      	ldr	r2, [r3, #0]
   d5d9c:	07d1      	lsls	r1, r2, #31
   d5d9e:	bf5c      	itt	pl
   d5da0:	2201      	movpl	r2, #1
   d5da2:	601a      	strpl	r2, [r3, #0]
   d5da4:	4b14      	ldr	r3, [pc, #80]	; (d5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5da6:	681a      	ldr	r2, [r3, #0]
   d5da8:	07d2      	lsls	r2, r2, #31
   d5daa:	bf5c      	itt	pl
   d5dac:	2201      	movpl	r2, #1
   d5dae:	601a      	strpl	r2, [r3, #0]
   d5db0:	4b12      	ldr	r3, [pc, #72]	; (d5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5db2:	681a      	ldr	r2, [r3, #0]
   d5db4:	07d0      	lsls	r0, r2, #31
   d5db6:	bf5c      	itt	pl
   d5db8:	2201      	movpl	r2, #1
   d5dba:	601a      	strpl	r2, [r3, #0]
   d5dbc:	4b10      	ldr	r3, [pc, #64]	; (d5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	07d1      	lsls	r1, r2, #31
   d5dc2:	bf5c      	itt	pl
   d5dc4:	2201      	movpl	r2, #1
   d5dc6:	601a      	strpl	r2, [r3, #0]
   d5dc8:	4b0e      	ldr	r3, [pc, #56]	; (d5e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5dca:	681a      	ldr	r2, [r3, #0]
   d5dcc:	07d2      	lsls	r2, r2, #31
   d5dce:	bf5c      	itt	pl
   d5dd0:	2201      	movpl	r2, #1
   d5dd2:	601a      	strpl	r2, [r3, #0]
   d5dd4:	4770      	bx	lr
   d5dd6:	bf00      	nop
   d5dd8:	2003e7cc 	.word	0x2003e7cc
   d5ddc:	2003e7c8 	.word	0x2003e7c8
   d5de0:	2003e7c4 	.word	0x2003e7c4
   d5de4:	2003e7c0 	.word	0x2003e7c0
   d5de8:	2003e7bc 	.word	0x2003e7bc
   d5dec:	2003e7b8 	.word	0x2003e7b8
   d5df0:	2003e7b4 	.word	0x2003e7b4
   d5df4:	2003e7b0 	.word	0x2003e7b0
   d5df8:	2003e7ac 	.word	0x2003e7ac
   d5dfc:	2003e7a8 	.word	0x2003e7a8
   d5e00:	2003e7a4 	.word	0x2003e7a4
   d5e04:	2003e7a0 	.word	0x2003e7a0

000d5e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e08:	4b18      	ldr	r3, [pc, #96]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e0a:	681a      	ldr	r2, [r3, #0]
   d5e0c:	07d1      	lsls	r1, r2, #31
   d5e0e:	bf5c      	itt	pl
   d5e10:	2201      	movpl	r2, #1
   d5e12:	601a      	strpl	r2, [r3, #0]
   d5e14:	4b16      	ldr	r3, [pc, #88]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e16:	681a      	ldr	r2, [r3, #0]
   d5e18:	07d2      	lsls	r2, r2, #31
   d5e1a:	bf5c      	itt	pl
   d5e1c:	2201      	movpl	r2, #1
   d5e1e:	601a      	strpl	r2, [r3, #0]
   d5e20:	4b14      	ldr	r3, [pc, #80]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e22:	681a      	ldr	r2, [r3, #0]
   d5e24:	07d0      	lsls	r0, r2, #31
   d5e26:	bf5c      	itt	pl
   d5e28:	2201      	movpl	r2, #1
   d5e2a:	601a      	strpl	r2, [r3, #0]
   d5e2c:	4b12      	ldr	r3, [pc, #72]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e2e:	681a      	ldr	r2, [r3, #0]
   d5e30:	07d1      	lsls	r1, r2, #31
   d5e32:	bf5c      	itt	pl
   d5e34:	2201      	movpl	r2, #1
   d5e36:	601a      	strpl	r2, [r3, #0]
   d5e38:	4b10      	ldr	r3, [pc, #64]	; (d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e3a:	681a      	ldr	r2, [r3, #0]
   d5e3c:	07d2      	lsls	r2, r2, #31
   d5e3e:	bf5c      	itt	pl
   d5e40:	2201      	movpl	r2, #1
   d5e42:	601a      	strpl	r2, [r3, #0]
   d5e44:	4b0e      	ldr	r3, [pc, #56]	; (d5e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e46:	681a      	ldr	r2, [r3, #0]
   d5e48:	07d0      	lsls	r0, r2, #31
   d5e4a:	bf5c      	itt	pl
   d5e4c:	2201      	movpl	r2, #1
   d5e4e:	601a      	strpl	r2, [r3, #0]
   d5e50:	4b0c      	ldr	r3, [pc, #48]	; (d5e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e52:	681a      	ldr	r2, [r3, #0]
   d5e54:	07d1      	lsls	r1, r2, #31
   d5e56:	bf5c      	itt	pl
   d5e58:	2201      	movpl	r2, #1
   d5e5a:	601a      	strpl	r2, [r3, #0]
   d5e5c:	4b0a      	ldr	r3, [pc, #40]	; (d5e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e5e:	681a      	ldr	r2, [r3, #0]
   d5e60:	07d2      	lsls	r2, r2, #31
   d5e62:	bf5c      	itt	pl
   d5e64:	2201      	movpl	r2, #1
   d5e66:	601a      	strpl	r2, [r3, #0]
   d5e68:	4770      	bx	lr
   d5e6a:	bf00      	nop
   d5e6c:	2003e7ec 	.word	0x2003e7ec
   d5e70:	2003e7e8 	.word	0x2003e7e8
   d5e74:	2003e7e4 	.word	0x2003e7e4
   d5e78:	2003e7e0 	.word	0x2003e7e0
   d5e7c:	2003e7dc 	.word	0x2003e7dc
   d5e80:	2003e7d8 	.word	0x2003e7d8
   d5e84:	2003e7d4 	.word	0x2003e7d4
   d5e88:	2003e7d0 	.word	0x2003e7d0

000d5e8c <__aeabi_drsub>:
   d5e8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5e90:	e002      	b.n	d5e98 <__adddf3>
   d5e92:	bf00      	nop

000d5e94 <__aeabi_dsub>:
   d5e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5e98 <__adddf3>:
   d5e98:	b530      	push	{r4, r5, lr}
   d5e9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5e9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ea2:	ea94 0f05 	teq	r4, r5
   d5ea6:	bf08      	it	eq
   d5ea8:	ea90 0f02 	teqeq	r0, r2
   d5eac:	bf1f      	itttt	ne
   d5eae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5eb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5eb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5eba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ebe:	f000 80e2 	beq.w	d6086 <__adddf3+0x1ee>
   d5ec2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5ec6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5eca:	bfb8      	it	lt
   d5ecc:	426d      	neglt	r5, r5
   d5ece:	dd0c      	ble.n	d5eea <__adddf3+0x52>
   d5ed0:	442c      	add	r4, r5
   d5ed2:	ea80 0202 	eor.w	r2, r0, r2
   d5ed6:	ea81 0303 	eor.w	r3, r1, r3
   d5eda:	ea82 0000 	eor.w	r0, r2, r0
   d5ede:	ea83 0101 	eor.w	r1, r3, r1
   d5ee2:	ea80 0202 	eor.w	r2, r0, r2
   d5ee6:	ea81 0303 	eor.w	r3, r1, r3
   d5eea:	2d36      	cmp	r5, #54	; 0x36
   d5eec:	bf88      	it	hi
   d5eee:	bd30      	pophi	{r4, r5, pc}
   d5ef0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5ef4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ef8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5efc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5f00:	d002      	beq.n	d5f08 <__adddf3+0x70>
   d5f02:	4240      	negs	r0, r0
   d5f04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5f0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f14:	d002      	beq.n	d5f1c <__adddf3+0x84>
   d5f16:	4252      	negs	r2, r2
   d5f18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f1c:	ea94 0f05 	teq	r4, r5
   d5f20:	f000 80a7 	beq.w	d6072 <__adddf3+0x1da>
   d5f24:	f1a4 0401 	sub.w	r4, r4, #1
   d5f28:	f1d5 0e20 	rsbs	lr, r5, #32
   d5f2c:	db0d      	blt.n	d5f4a <__adddf3+0xb2>
   d5f2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5f32:	fa22 f205 	lsr.w	r2, r2, r5
   d5f36:	1880      	adds	r0, r0, r2
   d5f38:	f141 0100 	adc.w	r1, r1, #0
   d5f3c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5f40:	1880      	adds	r0, r0, r2
   d5f42:	fa43 f305 	asr.w	r3, r3, r5
   d5f46:	4159      	adcs	r1, r3
   d5f48:	e00e      	b.n	d5f68 <__adddf3+0xd0>
   d5f4a:	f1a5 0520 	sub.w	r5, r5, #32
   d5f4e:	f10e 0e20 	add.w	lr, lr, #32
   d5f52:	2a01      	cmp	r2, #1
   d5f54:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5f58:	bf28      	it	cs
   d5f5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5f5e:	fa43 f305 	asr.w	r3, r3, r5
   d5f62:	18c0      	adds	r0, r0, r3
   d5f64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f6c:	d507      	bpl.n	d5f7e <__adddf3+0xe6>
   d5f6e:	f04f 0e00 	mov.w	lr, #0
   d5f72:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f76:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f7a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f82:	d31b      	bcc.n	d5fbc <__adddf3+0x124>
   d5f84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5f88:	d30c      	bcc.n	d5fa4 <__adddf3+0x10c>
   d5f8a:	0849      	lsrs	r1, r1, #1
   d5f8c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5f90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5f94:	f104 0401 	add.w	r4, r4, #1
   d5f98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5f9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5fa0:	f080 809a 	bcs.w	d60d8 <__adddf3+0x240>
   d5fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5fa8:	bf08      	it	eq
   d5faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5fae:	f150 0000 	adcs.w	r0, r0, #0
   d5fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fb6:	ea41 0105 	orr.w	r1, r1, r5
   d5fba:	bd30      	pop	{r4, r5, pc}
   d5fbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5fc0:	4140      	adcs	r0, r0
   d5fc2:	eb41 0101 	adc.w	r1, r1, r1
   d5fc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fca:	f1a4 0401 	sub.w	r4, r4, #1
   d5fce:	d1e9      	bne.n	d5fa4 <__adddf3+0x10c>
   d5fd0:	f091 0f00 	teq	r1, #0
   d5fd4:	bf04      	itt	eq
   d5fd6:	4601      	moveq	r1, r0
   d5fd8:	2000      	moveq	r0, #0
   d5fda:	fab1 f381 	clz	r3, r1
   d5fde:	bf08      	it	eq
   d5fe0:	3320      	addeq	r3, #32
   d5fe2:	f1a3 030b 	sub.w	r3, r3, #11
   d5fe6:	f1b3 0220 	subs.w	r2, r3, #32
   d5fea:	da0c      	bge.n	d6006 <__adddf3+0x16e>
   d5fec:	320c      	adds	r2, #12
   d5fee:	dd08      	ble.n	d6002 <__adddf3+0x16a>
   d5ff0:	f102 0c14 	add.w	ip, r2, #20
   d5ff4:	f1c2 020c 	rsb	r2, r2, #12
   d5ff8:	fa01 f00c 	lsl.w	r0, r1, ip
   d5ffc:	fa21 f102 	lsr.w	r1, r1, r2
   d6000:	e00c      	b.n	d601c <__adddf3+0x184>
   d6002:	f102 0214 	add.w	r2, r2, #20
   d6006:	bfd8      	it	le
   d6008:	f1c2 0c20 	rsble	ip, r2, #32
   d600c:	fa01 f102 	lsl.w	r1, r1, r2
   d6010:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6014:	bfdc      	itt	le
   d6016:	ea41 010c 	orrle.w	r1, r1, ip
   d601a:	4090      	lslle	r0, r2
   d601c:	1ae4      	subs	r4, r4, r3
   d601e:	bfa2      	ittt	ge
   d6020:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6024:	4329      	orrge	r1, r5
   d6026:	bd30      	popge	{r4, r5, pc}
   d6028:	ea6f 0404 	mvn.w	r4, r4
   d602c:	3c1f      	subs	r4, #31
   d602e:	da1c      	bge.n	d606a <__adddf3+0x1d2>
   d6030:	340c      	adds	r4, #12
   d6032:	dc0e      	bgt.n	d6052 <__adddf3+0x1ba>
   d6034:	f104 0414 	add.w	r4, r4, #20
   d6038:	f1c4 0220 	rsb	r2, r4, #32
   d603c:	fa20 f004 	lsr.w	r0, r0, r4
   d6040:	fa01 f302 	lsl.w	r3, r1, r2
   d6044:	ea40 0003 	orr.w	r0, r0, r3
   d6048:	fa21 f304 	lsr.w	r3, r1, r4
   d604c:	ea45 0103 	orr.w	r1, r5, r3
   d6050:	bd30      	pop	{r4, r5, pc}
   d6052:	f1c4 040c 	rsb	r4, r4, #12
   d6056:	f1c4 0220 	rsb	r2, r4, #32
   d605a:	fa20 f002 	lsr.w	r0, r0, r2
   d605e:	fa01 f304 	lsl.w	r3, r1, r4
   d6062:	ea40 0003 	orr.w	r0, r0, r3
   d6066:	4629      	mov	r1, r5
   d6068:	bd30      	pop	{r4, r5, pc}
   d606a:	fa21 f004 	lsr.w	r0, r1, r4
   d606e:	4629      	mov	r1, r5
   d6070:	bd30      	pop	{r4, r5, pc}
   d6072:	f094 0f00 	teq	r4, #0
   d6076:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d607a:	bf06      	itte	eq
   d607c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6080:	3401      	addeq	r4, #1
   d6082:	3d01      	subne	r5, #1
   d6084:	e74e      	b.n	d5f24 <__adddf3+0x8c>
   d6086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d608a:	bf18      	it	ne
   d608c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6090:	d029      	beq.n	d60e6 <__adddf3+0x24e>
   d6092:	ea94 0f05 	teq	r4, r5
   d6096:	bf08      	it	eq
   d6098:	ea90 0f02 	teqeq	r0, r2
   d609c:	d005      	beq.n	d60aa <__adddf3+0x212>
   d609e:	ea54 0c00 	orrs.w	ip, r4, r0
   d60a2:	bf04      	itt	eq
   d60a4:	4619      	moveq	r1, r3
   d60a6:	4610      	moveq	r0, r2
   d60a8:	bd30      	pop	{r4, r5, pc}
   d60aa:	ea91 0f03 	teq	r1, r3
   d60ae:	bf1e      	ittt	ne
   d60b0:	2100      	movne	r1, #0
   d60b2:	2000      	movne	r0, #0
   d60b4:	bd30      	popne	{r4, r5, pc}
   d60b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d60ba:	d105      	bne.n	d60c8 <__adddf3+0x230>
   d60bc:	0040      	lsls	r0, r0, #1
   d60be:	4149      	adcs	r1, r1
   d60c0:	bf28      	it	cs
   d60c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d60c6:	bd30      	pop	{r4, r5, pc}
   d60c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d60cc:	bf3c      	itt	cc
   d60ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d60d2:	bd30      	popcc	{r4, r5, pc}
   d60d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d60dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60e0:	f04f 0000 	mov.w	r0, #0
   d60e4:	bd30      	pop	{r4, r5, pc}
   d60e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d60ea:	bf1a      	itte	ne
   d60ec:	4619      	movne	r1, r3
   d60ee:	4610      	movne	r0, r2
   d60f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d60f4:	bf1c      	itt	ne
   d60f6:	460b      	movne	r3, r1
   d60f8:	4602      	movne	r2, r0
   d60fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d60fe:	bf06      	itte	eq
   d6100:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6104:	ea91 0f03 	teqeq	r1, r3
   d6108:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d610c:	bd30      	pop	{r4, r5, pc}
   d610e:	bf00      	nop

000d6110 <__aeabi_ui2d>:
   d6110:	f090 0f00 	teq	r0, #0
   d6114:	bf04      	itt	eq
   d6116:	2100      	moveq	r1, #0
   d6118:	4770      	bxeq	lr
   d611a:	b530      	push	{r4, r5, lr}
   d611c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6120:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6124:	f04f 0500 	mov.w	r5, #0
   d6128:	f04f 0100 	mov.w	r1, #0
   d612c:	e750      	b.n	d5fd0 <__adddf3+0x138>
   d612e:	bf00      	nop

000d6130 <__aeabi_i2d>:
   d6130:	f090 0f00 	teq	r0, #0
   d6134:	bf04      	itt	eq
   d6136:	2100      	moveq	r1, #0
   d6138:	4770      	bxeq	lr
   d613a:	b530      	push	{r4, r5, lr}
   d613c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6140:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6144:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6148:	bf48      	it	mi
   d614a:	4240      	negmi	r0, r0
   d614c:	f04f 0100 	mov.w	r1, #0
   d6150:	e73e      	b.n	d5fd0 <__adddf3+0x138>
   d6152:	bf00      	nop

000d6154 <__aeabi_f2d>:
   d6154:	0042      	lsls	r2, r0, #1
   d6156:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d615a:	ea4f 0131 	mov.w	r1, r1, rrx
   d615e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6162:	bf1f      	itttt	ne
   d6164:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d616c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6170:	4770      	bxne	lr
   d6172:	f092 0f00 	teq	r2, #0
   d6176:	bf14      	ite	ne
   d6178:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d617c:	4770      	bxeq	lr
   d617e:	b530      	push	{r4, r5, lr}
   d6180:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d618c:	e720      	b.n	d5fd0 <__adddf3+0x138>
   d618e:	bf00      	nop

000d6190 <__aeabi_ul2d>:
   d6190:	ea50 0201 	orrs.w	r2, r0, r1
   d6194:	bf08      	it	eq
   d6196:	4770      	bxeq	lr
   d6198:	b530      	push	{r4, r5, lr}
   d619a:	f04f 0500 	mov.w	r5, #0
   d619e:	e00a      	b.n	d61b6 <__aeabi_l2d+0x16>

000d61a0 <__aeabi_l2d>:
   d61a0:	ea50 0201 	orrs.w	r2, r0, r1
   d61a4:	bf08      	it	eq
   d61a6:	4770      	bxeq	lr
   d61a8:	b530      	push	{r4, r5, lr}
   d61aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d61ae:	d502      	bpl.n	d61b6 <__aeabi_l2d+0x16>
   d61b0:	4240      	negs	r0, r0
   d61b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d61c2:	f43f aedc 	beq.w	d5f7e <__adddf3+0xe6>
   d61c6:	f04f 0203 	mov.w	r2, #3
   d61ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61ce:	bf18      	it	ne
   d61d0:	3203      	addne	r2, #3
   d61d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61d6:	bf18      	it	ne
   d61d8:	3203      	addne	r2, #3
   d61da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d61de:	f1c2 0320 	rsb	r3, r2, #32
   d61e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d61e6:	fa20 f002 	lsr.w	r0, r0, r2
   d61ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d61ee:	ea40 000e 	orr.w	r0, r0, lr
   d61f2:	fa21 f102 	lsr.w	r1, r1, r2
   d61f6:	4414      	add	r4, r2
   d61f8:	e6c1      	b.n	d5f7e <__adddf3+0xe6>
   d61fa:	bf00      	nop

000d61fc <__aeabi_dmul>:
   d61fc:	b570      	push	{r4, r5, r6, lr}
   d61fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d620a:	bf1d      	ittte	ne
   d620c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6210:	ea94 0f0c 	teqne	r4, ip
   d6214:	ea95 0f0c 	teqne	r5, ip
   d6218:	f000 f8de 	bleq	d63d8 <__aeabi_dmul+0x1dc>
   d621c:	442c      	add	r4, r5
   d621e:	ea81 0603 	eor.w	r6, r1, r3
   d6222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d622a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d622e:	bf18      	it	ne
   d6230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d623c:	d038      	beq.n	d62b0 <__aeabi_dmul+0xb4>
   d623e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6242:	f04f 0500 	mov.w	r5, #0
   d6246:	fbe1 e502 	umlal	lr, r5, r1, r2
   d624a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d624e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6252:	f04f 0600 	mov.w	r6, #0
   d6256:	fbe1 5603 	umlal	r5, r6, r1, r3
   d625a:	f09c 0f00 	teq	ip, #0
   d625e:	bf18      	it	ne
   d6260:	f04e 0e01 	orrne.w	lr, lr, #1
   d6264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d626c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6270:	d204      	bcs.n	d627c <__aeabi_dmul+0x80>
   d6272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6276:	416d      	adcs	r5, r5
   d6278:	eb46 0606 	adc.w	r6, r6, r6
   d627c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d628c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6294:	bf88      	it	hi
   d6296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d629a:	d81e      	bhi.n	d62da <__aeabi_dmul+0xde>
   d629c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d62a0:	bf08      	it	eq
   d62a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d62a6:	f150 0000 	adcs.w	r0, r0, #0
   d62aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62ae:	bd70      	pop	{r4, r5, r6, pc}
   d62b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d62b4:	ea46 0101 	orr.w	r1, r6, r1
   d62b8:	ea40 0002 	orr.w	r0, r0, r2
   d62bc:	ea81 0103 	eor.w	r1, r1, r3
   d62c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d62c4:	bfc2      	ittt	gt
   d62c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62ce:	bd70      	popgt	{r4, r5, r6, pc}
   d62d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62d4:	f04f 0e00 	mov.w	lr, #0
   d62d8:	3c01      	subs	r4, #1
   d62da:	f300 80ab 	bgt.w	d6434 <__aeabi_dmul+0x238>
   d62de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d62e2:	bfde      	ittt	le
   d62e4:	2000      	movle	r0, #0
   d62e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d62ea:	bd70      	pople	{r4, r5, r6, pc}
   d62ec:	f1c4 0400 	rsb	r4, r4, #0
   d62f0:	3c20      	subs	r4, #32
   d62f2:	da35      	bge.n	d6360 <__aeabi_dmul+0x164>
   d62f4:	340c      	adds	r4, #12
   d62f6:	dc1b      	bgt.n	d6330 <__aeabi_dmul+0x134>
   d62f8:	f104 0414 	add.w	r4, r4, #20
   d62fc:	f1c4 0520 	rsb	r5, r4, #32
   d6300:	fa00 f305 	lsl.w	r3, r0, r5
   d6304:	fa20 f004 	lsr.w	r0, r0, r4
   d6308:	fa01 f205 	lsl.w	r2, r1, r5
   d630c:	ea40 0002 	orr.w	r0, r0, r2
   d6310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d631c:	fa21 f604 	lsr.w	r6, r1, r4
   d6320:	eb42 0106 	adc.w	r1, r2, r6
   d6324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6328:	bf08      	it	eq
   d632a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d632e:	bd70      	pop	{r4, r5, r6, pc}
   d6330:	f1c4 040c 	rsb	r4, r4, #12
   d6334:	f1c4 0520 	rsb	r5, r4, #32
   d6338:	fa00 f304 	lsl.w	r3, r0, r4
   d633c:	fa20 f005 	lsr.w	r0, r0, r5
   d6340:	fa01 f204 	lsl.w	r2, r1, r4
   d6344:	ea40 0002 	orr.w	r0, r0, r2
   d6348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d634c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6350:	f141 0100 	adc.w	r1, r1, #0
   d6354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6358:	bf08      	it	eq
   d635a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d635e:	bd70      	pop	{r4, r5, r6, pc}
   d6360:	f1c4 0520 	rsb	r5, r4, #32
   d6364:	fa00 f205 	lsl.w	r2, r0, r5
   d6368:	ea4e 0e02 	orr.w	lr, lr, r2
   d636c:	fa20 f304 	lsr.w	r3, r0, r4
   d6370:	fa01 f205 	lsl.w	r2, r1, r5
   d6374:	ea43 0302 	orr.w	r3, r3, r2
   d6378:	fa21 f004 	lsr.w	r0, r1, r4
   d637c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6380:	fa21 f204 	lsr.w	r2, r1, r4
   d6384:	ea20 0002 	bic.w	r0, r0, r2
   d6388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d638c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6390:	bf08      	it	eq
   d6392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6396:	bd70      	pop	{r4, r5, r6, pc}
   d6398:	f094 0f00 	teq	r4, #0
   d639c:	d10f      	bne.n	d63be <__aeabi_dmul+0x1c2>
   d639e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d63a2:	0040      	lsls	r0, r0, #1
   d63a4:	eb41 0101 	adc.w	r1, r1, r1
   d63a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63ac:	bf08      	it	eq
   d63ae:	3c01      	subeq	r4, #1
   d63b0:	d0f7      	beq.n	d63a2 <__aeabi_dmul+0x1a6>
   d63b2:	ea41 0106 	orr.w	r1, r1, r6
   d63b6:	f095 0f00 	teq	r5, #0
   d63ba:	bf18      	it	ne
   d63bc:	4770      	bxne	lr
   d63be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d63c2:	0052      	lsls	r2, r2, #1
   d63c4:	eb43 0303 	adc.w	r3, r3, r3
   d63c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d63cc:	bf08      	it	eq
   d63ce:	3d01      	subeq	r5, #1
   d63d0:	d0f7      	beq.n	d63c2 <__aeabi_dmul+0x1c6>
   d63d2:	ea43 0306 	orr.w	r3, r3, r6
   d63d6:	4770      	bx	lr
   d63d8:	ea94 0f0c 	teq	r4, ip
   d63dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63e0:	bf18      	it	ne
   d63e2:	ea95 0f0c 	teqne	r5, ip
   d63e6:	d00c      	beq.n	d6402 <__aeabi_dmul+0x206>
   d63e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63ec:	bf18      	it	ne
   d63ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63f2:	d1d1      	bne.n	d6398 <__aeabi_dmul+0x19c>
   d63f4:	ea81 0103 	eor.w	r1, r1, r3
   d63f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63fc:	f04f 0000 	mov.w	r0, #0
   d6400:	bd70      	pop	{r4, r5, r6, pc}
   d6402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6406:	bf06      	itte	eq
   d6408:	4610      	moveq	r0, r2
   d640a:	4619      	moveq	r1, r3
   d640c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6410:	d019      	beq.n	d6446 <__aeabi_dmul+0x24a>
   d6412:	ea94 0f0c 	teq	r4, ip
   d6416:	d102      	bne.n	d641e <__aeabi_dmul+0x222>
   d6418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d641c:	d113      	bne.n	d6446 <__aeabi_dmul+0x24a>
   d641e:	ea95 0f0c 	teq	r5, ip
   d6422:	d105      	bne.n	d6430 <__aeabi_dmul+0x234>
   d6424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6428:	bf1c      	itt	ne
   d642a:	4610      	movne	r0, r2
   d642c:	4619      	movne	r1, r3
   d642e:	d10a      	bne.n	d6446 <__aeabi_dmul+0x24a>
   d6430:	ea81 0103 	eor.w	r1, r1, r3
   d6434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d643c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6440:	f04f 0000 	mov.w	r0, #0
   d6444:	bd70      	pop	{r4, r5, r6, pc}
   d6446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d644a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d644e:	bd70      	pop	{r4, r5, r6, pc}

000d6450 <__aeabi_ddiv>:
   d6450:	b570      	push	{r4, r5, r6, lr}
   d6452:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d645a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d645e:	bf1d      	ittte	ne
   d6460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6464:	ea94 0f0c 	teqne	r4, ip
   d6468:	ea95 0f0c 	teqne	r5, ip
   d646c:	f000 f8a7 	bleq	d65be <__aeabi_ddiv+0x16e>
   d6470:	eba4 0405 	sub.w	r4, r4, r5
   d6474:	ea81 0e03 	eor.w	lr, r1, r3
   d6478:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d647c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6480:	f000 8088 	beq.w	d6594 <__aeabi_ddiv+0x144>
   d6484:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6488:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d648c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6490:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6494:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6498:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d649c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d64a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d64a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d64a8:	429d      	cmp	r5, r3
   d64aa:	bf08      	it	eq
   d64ac:	4296      	cmpeq	r6, r2
   d64ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d64b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d64b6:	d202      	bcs.n	d64be <__aeabi_ddiv+0x6e>
   d64b8:	085b      	lsrs	r3, r3, #1
   d64ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d64be:	1ab6      	subs	r6, r6, r2
   d64c0:	eb65 0503 	sbc.w	r5, r5, r3
   d64c4:	085b      	lsrs	r3, r3, #1
   d64c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d64ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d64d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d64d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64da:	bf22      	ittt	cs
   d64dc:	1ab6      	subcs	r6, r6, r2
   d64de:	4675      	movcs	r5, lr
   d64e0:	ea40 000c 	orrcs.w	r0, r0, ip
   d64e4:	085b      	lsrs	r3, r3, #1
   d64e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d64ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64f2:	bf22      	ittt	cs
   d64f4:	1ab6      	subcs	r6, r6, r2
   d64f6:	4675      	movcs	r5, lr
   d64f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d64fc:	085b      	lsrs	r3, r3, #1
   d64fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6502:	ebb6 0e02 	subs.w	lr, r6, r2
   d6506:	eb75 0e03 	sbcs.w	lr, r5, r3
   d650a:	bf22      	ittt	cs
   d650c:	1ab6      	subcs	r6, r6, r2
   d650e:	4675      	movcs	r5, lr
   d6510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6514:	085b      	lsrs	r3, r3, #1
   d6516:	ea4f 0232 	mov.w	r2, r2, rrx
   d651a:	ebb6 0e02 	subs.w	lr, r6, r2
   d651e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6522:	bf22      	ittt	cs
   d6524:	1ab6      	subcs	r6, r6, r2
   d6526:	4675      	movcs	r5, lr
   d6528:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d652c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6530:	d018      	beq.n	d6564 <__aeabi_ddiv+0x114>
   d6532:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6536:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d653a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d653e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6542:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6546:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d654a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d654e:	d1c0      	bne.n	d64d2 <__aeabi_ddiv+0x82>
   d6550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6554:	d10b      	bne.n	d656e <__aeabi_ddiv+0x11e>
   d6556:	ea41 0100 	orr.w	r1, r1, r0
   d655a:	f04f 0000 	mov.w	r0, #0
   d655e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6562:	e7b6      	b.n	d64d2 <__aeabi_ddiv+0x82>
   d6564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6568:	bf04      	itt	eq
   d656a:	4301      	orreq	r1, r0
   d656c:	2000      	moveq	r0, #0
   d656e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6572:	bf88      	it	hi
   d6574:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6578:	f63f aeaf 	bhi.w	d62da <__aeabi_dmul+0xde>
   d657c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6580:	bf04      	itt	eq
   d6582:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d658a:	f150 0000 	adcs.w	r0, r0, #0
   d658e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6592:	bd70      	pop	{r4, r5, r6, pc}
   d6594:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6598:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d659c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d65a0:	bfc2      	ittt	gt
   d65a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d65a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65aa:	bd70      	popgt	{r4, r5, r6, pc}
   d65ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65b0:	f04f 0e00 	mov.w	lr, #0
   d65b4:	3c01      	subs	r4, #1
   d65b6:	e690      	b.n	d62da <__aeabi_dmul+0xde>
   d65b8:	ea45 0e06 	orr.w	lr, r5, r6
   d65bc:	e68d      	b.n	d62da <__aeabi_dmul+0xde>
   d65be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d65c2:	ea94 0f0c 	teq	r4, ip
   d65c6:	bf08      	it	eq
   d65c8:	ea95 0f0c 	teqeq	r5, ip
   d65cc:	f43f af3b 	beq.w	d6446 <__aeabi_dmul+0x24a>
   d65d0:	ea94 0f0c 	teq	r4, ip
   d65d4:	d10a      	bne.n	d65ec <__aeabi_ddiv+0x19c>
   d65d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d65da:	f47f af34 	bne.w	d6446 <__aeabi_dmul+0x24a>
   d65de:	ea95 0f0c 	teq	r5, ip
   d65e2:	f47f af25 	bne.w	d6430 <__aeabi_dmul+0x234>
   d65e6:	4610      	mov	r0, r2
   d65e8:	4619      	mov	r1, r3
   d65ea:	e72c      	b.n	d6446 <__aeabi_dmul+0x24a>
   d65ec:	ea95 0f0c 	teq	r5, ip
   d65f0:	d106      	bne.n	d6600 <__aeabi_ddiv+0x1b0>
   d65f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65f6:	f43f aefd 	beq.w	d63f4 <__aeabi_dmul+0x1f8>
   d65fa:	4610      	mov	r0, r2
   d65fc:	4619      	mov	r1, r3
   d65fe:	e722      	b.n	d6446 <__aeabi_dmul+0x24a>
   d6600:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6604:	bf18      	it	ne
   d6606:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d660a:	f47f aec5 	bne.w	d6398 <__aeabi_dmul+0x19c>
   d660e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6612:	f47f af0d 	bne.w	d6430 <__aeabi_dmul+0x234>
   d6616:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d661a:	f47f aeeb 	bne.w	d63f4 <__aeabi_dmul+0x1f8>
   d661e:	e712      	b.n	d6446 <__aeabi_dmul+0x24a>

000d6620 <__gedf2>:
   d6620:	f04f 3cff 	mov.w	ip, #4294967295
   d6624:	e006      	b.n	d6634 <__cmpdf2+0x4>
   d6626:	bf00      	nop

000d6628 <__ledf2>:
   d6628:	f04f 0c01 	mov.w	ip, #1
   d662c:	e002      	b.n	d6634 <__cmpdf2+0x4>
   d662e:	bf00      	nop

000d6630 <__cmpdf2>:
   d6630:	f04f 0c01 	mov.w	ip, #1
   d6634:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d663c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6644:	bf18      	it	ne
   d6646:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d664a:	d01b      	beq.n	d6684 <__cmpdf2+0x54>
   d664c:	b001      	add	sp, #4
   d664e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6652:	bf0c      	ite	eq
   d6654:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6658:	ea91 0f03 	teqne	r1, r3
   d665c:	bf02      	ittt	eq
   d665e:	ea90 0f02 	teqeq	r0, r2
   d6662:	2000      	moveq	r0, #0
   d6664:	4770      	bxeq	lr
   d6666:	f110 0f00 	cmn.w	r0, #0
   d666a:	ea91 0f03 	teq	r1, r3
   d666e:	bf58      	it	pl
   d6670:	4299      	cmppl	r1, r3
   d6672:	bf08      	it	eq
   d6674:	4290      	cmpeq	r0, r2
   d6676:	bf2c      	ite	cs
   d6678:	17d8      	asrcs	r0, r3, #31
   d667a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d667e:	f040 0001 	orr.w	r0, r0, #1
   d6682:	4770      	bx	lr
   d6684:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d668c:	d102      	bne.n	d6694 <__cmpdf2+0x64>
   d668e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6692:	d107      	bne.n	d66a4 <__cmpdf2+0x74>
   d6694:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d669c:	d1d6      	bne.n	d664c <__cmpdf2+0x1c>
   d669e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d66a2:	d0d3      	beq.n	d664c <__cmpdf2+0x1c>
   d66a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d66a8:	4770      	bx	lr
   d66aa:	bf00      	nop

000d66ac <__aeabi_cdrcmple>:
   d66ac:	4684      	mov	ip, r0
   d66ae:	4610      	mov	r0, r2
   d66b0:	4662      	mov	r2, ip
   d66b2:	468c      	mov	ip, r1
   d66b4:	4619      	mov	r1, r3
   d66b6:	4663      	mov	r3, ip
   d66b8:	e000      	b.n	d66bc <__aeabi_cdcmpeq>
   d66ba:	bf00      	nop

000d66bc <__aeabi_cdcmpeq>:
   d66bc:	b501      	push	{r0, lr}
   d66be:	f7ff ffb7 	bl	d6630 <__cmpdf2>
   d66c2:	2800      	cmp	r0, #0
   d66c4:	bf48      	it	mi
   d66c6:	f110 0f00 	cmnmi.w	r0, #0
   d66ca:	bd01      	pop	{r0, pc}

000d66cc <__aeabi_dcmpeq>:
   d66cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66d0:	f7ff fff4 	bl	d66bc <__aeabi_cdcmpeq>
   d66d4:	bf0c      	ite	eq
   d66d6:	2001      	moveq	r0, #1
   d66d8:	2000      	movne	r0, #0
   d66da:	f85d fb08 	ldr.w	pc, [sp], #8
   d66de:	bf00      	nop

000d66e0 <__aeabi_dcmplt>:
   d66e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66e4:	f7ff ffea 	bl	d66bc <__aeabi_cdcmpeq>
   d66e8:	bf34      	ite	cc
   d66ea:	2001      	movcc	r0, #1
   d66ec:	2000      	movcs	r0, #0
   d66ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d66f2:	bf00      	nop

000d66f4 <__aeabi_dcmple>:
   d66f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66f8:	f7ff ffe0 	bl	d66bc <__aeabi_cdcmpeq>
   d66fc:	bf94      	ite	ls
   d66fe:	2001      	movls	r0, #1
   d6700:	2000      	movhi	r0, #0
   d6702:	f85d fb08 	ldr.w	pc, [sp], #8
   d6706:	bf00      	nop

000d6708 <__aeabi_dcmpge>:
   d6708:	f84d ed08 	str.w	lr, [sp, #-8]!
   d670c:	f7ff ffce 	bl	d66ac <__aeabi_cdrcmple>
   d6710:	bf94      	ite	ls
   d6712:	2001      	movls	r0, #1
   d6714:	2000      	movhi	r0, #0
   d6716:	f85d fb08 	ldr.w	pc, [sp], #8
   d671a:	bf00      	nop

000d671c <__aeabi_dcmpgt>:
   d671c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6720:	f7ff ffc4 	bl	d66ac <__aeabi_cdrcmple>
   d6724:	bf34      	ite	cc
   d6726:	2001      	movcc	r0, #1
   d6728:	2000      	movcs	r0, #0
   d672a:	f85d fb08 	ldr.w	pc, [sp], #8
   d672e:	bf00      	nop

000d6730 <__aeabi_d2iz>:
   d6730:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6734:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6738:	d215      	bcs.n	d6766 <__aeabi_d2iz+0x36>
   d673a:	d511      	bpl.n	d6760 <__aeabi_d2iz+0x30>
   d673c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6740:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6744:	d912      	bls.n	d676c <__aeabi_d2iz+0x3c>
   d6746:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d674a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d674e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6752:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6756:	fa23 f002 	lsr.w	r0, r3, r2
   d675a:	bf18      	it	ne
   d675c:	4240      	negne	r0, r0
   d675e:	4770      	bx	lr
   d6760:	f04f 0000 	mov.w	r0, #0
   d6764:	4770      	bx	lr
   d6766:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d676a:	d105      	bne.n	d6778 <__aeabi_d2iz+0x48>
   d676c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6770:	bf08      	it	eq
   d6772:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6776:	4770      	bx	lr
   d6778:	f04f 0000 	mov.w	r0, #0
   d677c:	4770      	bx	lr
   d677e:	bf00      	nop

000d6780 <__aeabi_d2uiz>:
   d6780:	004a      	lsls	r2, r1, #1
   d6782:	d211      	bcs.n	d67a8 <__aeabi_d2uiz+0x28>
   d6784:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6788:	d211      	bcs.n	d67ae <__aeabi_d2uiz+0x2e>
   d678a:	d50d      	bpl.n	d67a8 <__aeabi_d2uiz+0x28>
   d678c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6790:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6794:	d40e      	bmi.n	d67b4 <__aeabi_d2uiz+0x34>
   d6796:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d679a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d679e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d67a2:	fa23 f002 	lsr.w	r0, r3, r2
   d67a6:	4770      	bx	lr
   d67a8:	f04f 0000 	mov.w	r0, #0
   d67ac:	4770      	bx	lr
   d67ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d67b2:	d102      	bne.n	d67ba <__aeabi_d2uiz+0x3a>
   d67b4:	f04f 30ff 	mov.w	r0, #4294967295
   d67b8:	4770      	bx	lr
   d67ba:	f04f 0000 	mov.w	r0, #0
   d67be:	4770      	bx	lr

000d67c0 <__aeabi_d2f>:
   d67c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d67c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d67c8:	bf24      	itt	cs
   d67ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d67ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d67d2:	d90d      	bls.n	d67f0 <__aeabi_d2f+0x30>
   d67d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d67d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d67dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d67e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d67e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d67e8:	bf08      	it	eq
   d67ea:	f020 0001 	biceq.w	r0, r0, #1
   d67ee:	4770      	bx	lr
   d67f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d67f4:	d121      	bne.n	d683a <__aeabi_d2f+0x7a>
   d67f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d67fa:	bfbc      	itt	lt
   d67fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6800:	4770      	bxlt	lr
   d6802:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6806:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d680a:	f1c2 0218 	rsb	r2, r2, #24
   d680e:	f1c2 0c20 	rsb	ip, r2, #32
   d6812:	fa10 f30c 	lsls.w	r3, r0, ip
   d6816:	fa20 f002 	lsr.w	r0, r0, r2
   d681a:	bf18      	it	ne
   d681c:	f040 0001 	orrne.w	r0, r0, #1
   d6820:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6824:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6828:	fa03 fc0c 	lsl.w	ip, r3, ip
   d682c:	ea40 000c 	orr.w	r0, r0, ip
   d6830:	fa23 f302 	lsr.w	r3, r3, r2
   d6834:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6838:	e7cc      	b.n	d67d4 <__aeabi_d2f+0x14>
   d683a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d683e:	d107      	bne.n	d6850 <__aeabi_d2f+0x90>
   d6840:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6844:	bf1e      	ittt	ne
   d6846:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d684a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d684e:	4770      	bxne	lr
   d6850:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6854:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6858:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d685c:	4770      	bx	lr
   d685e:	bf00      	nop

000d6860 <atof>:
   d6860:	2100      	movs	r1, #0
   d6862:	f000 bee1 	b.w	d7628 <strtod>
	...

000d6868 <__cxa_atexit>:
   d6868:	b510      	push	{r4, lr}
   d686a:	4c05      	ldr	r4, [pc, #20]	; (d6880 <__cxa_atexit+0x18>)
   d686c:	4613      	mov	r3, r2
   d686e:	b12c      	cbz	r4, d687c <__cxa_atexit+0x14>
   d6870:	460a      	mov	r2, r1
   d6872:	4601      	mov	r1, r0
   d6874:	2002      	movs	r0, #2
   d6876:	f3af 8000 	nop.w
   d687a:	bd10      	pop	{r4, pc}
   d687c:	4620      	mov	r0, r4
   d687e:	bd10      	pop	{r4, pc}
   d6880:	00000000 	.word	0x00000000

000d6884 <_localeconv_r>:
   d6884:	4800      	ldr	r0, [pc, #0]	; (d6888 <_localeconv_r+0x4>)
   d6886:	4770      	bx	lr
   d6888:	2003e28c 	.word	0x2003e28c

000d688c <memcpy>:
   d688c:	b510      	push	{r4, lr}
   d688e:	1e43      	subs	r3, r0, #1
   d6890:	440a      	add	r2, r1
   d6892:	4291      	cmp	r1, r2
   d6894:	d004      	beq.n	d68a0 <memcpy+0x14>
   d6896:	f811 4b01 	ldrb.w	r4, [r1], #1
   d689a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d689e:	e7f8      	b.n	d6892 <memcpy+0x6>
   d68a0:	bd10      	pop	{r4, pc}

000d68a2 <memmove>:
   d68a2:	4288      	cmp	r0, r1
   d68a4:	b510      	push	{r4, lr}
   d68a6:	eb01 0302 	add.w	r3, r1, r2
   d68aa:	d801      	bhi.n	d68b0 <memmove+0xe>
   d68ac:	1e42      	subs	r2, r0, #1
   d68ae:	e00b      	b.n	d68c8 <memmove+0x26>
   d68b0:	4298      	cmp	r0, r3
   d68b2:	d2fb      	bcs.n	d68ac <memmove+0xa>
   d68b4:	1881      	adds	r1, r0, r2
   d68b6:	1ad2      	subs	r2, r2, r3
   d68b8:	42d3      	cmn	r3, r2
   d68ba:	d004      	beq.n	d68c6 <memmove+0x24>
   d68bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d68c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d68c4:	e7f8      	b.n	d68b8 <memmove+0x16>
   d68c6:	bd10      	pop	{r4, pc}
   d68c8:	4299      	cmp	r1, r3
   d68ca:	d004      	beq.n	d68d6 <memmove+0x34>
   d68cc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68d0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d68d4:	e7f8      	b.n	d68c8 <memmove+0x26>
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <memset>:
   d68d8:	4402      	add	r2, r0
   d68da:	4603      	mov	r3, r0
   d68dc:	4293      	cmp	r3, r2
   d68de:	d002      	beq.n	d68e6 <memset+0xe>
   d68e0:	f803 1b01 	strb.w	r1, [r3], #1
   d68e4:	e7fa      	b.n	d68dc <memset+0x4>
   d68e6:	4770      	bx	lr

000d68e8 <srand>:
   d68e8:	b538      	push	{r3, r4, r5, lr}
   d68ea:	4b12      	ldr	r3, [pc, #72]	; (d6934 <srand+0x4c>)
   d68ec:	681c      	ldr	r4, [r3, #0]
   d68ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d68f0:	4605      	mov	r5, r0
   d68f2:	b9d3      	cbnz	r3, d692a <srand+0x42>
   d68f4:	2018      	movs	r0, #24
   d68f6:	f7fe f97f 	bl	d4bf8 <malloc>
   d68fa:	f243 330e 	movw	r3, #13070	; 0x330e
   d68fe:	63a0      	str	r0, [r4, #56]	; 0x38
   d6900:	8003      	strh	r3, [r0, #0]
   d6902:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6906:	8043      	strh	r3, [r0, #2]
   d6908:	f241 2334 	movw	r3, #4660	; 0x1234
   d690c:	8083      	strh	r3, [r0, #4]
   d690e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6912:	80c3      	strh	r3, [r0, #6]
   d6914:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6918:	8103      	strh	r3, [r0, #8]
   d691a:	2305      	movs	r3, #5
   d691c:	8143      	strh	r3, [r0, #10]
   d691e:	230b      	movs	r3, #11
   d6920:	8183      	strh	r3, [r0, #12]
   d6922:	2201      	movs	r2, #1
   d6924:	2300      	movs	r3, #0
   d6926:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d692a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d692c:	2200      	movs	r2, #0
   d692e:	611d      	str	r5, [r3, #16]
   d6930:	615a      	str	r2, [r3, #20]
   d6932:	bd38      	pop	{r3, r4, r5, pc}
   d6934:	2003e288 	.word	0x2003e288

000d6938 <strcpy>:
   d6938:	4603      	mov	r3, r0
   d693a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d693e:	f803 2b01 	strb.w	r2, [r3], #1
   d6942:	2a00      	cmp	r2, #0
   d6944:	d1f9      	bne.n	d693a <strcpy+0x2>
   d6946:	4770      	bx	lr

000d6948 <strlen>:
   d6948:	4603      	mov	r3, r0
   d694a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d694e:	2a00      	cmp	r2, #0
   d6950:	d1fb      	bne.n	d694a <strlen+0x2>
   d6952:	1a18      	subs	r0, r3, r0
   d6954:	3801      	subs	r0, #1
   d6956:	4770      	bx	lr

000d6958 <strncasecmp>:
   d6958:	4b10      	ldr	r3, [pc, #64]	; (d699c <strncasecmp+0x44>)
   d695a:	b570      	push	{r4, r5, r6, lr}
   d695c:	681e      	ldr	r6, [r3, #0]
   d695e:	440a      	add	r2, r1
   d6960:	4291      	cmp	r1, r2
   d6962:	d017      	beq.n	d6994 <strncasecmp+0x3c>
   d6964:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6968:	18f4      	adds	r4, r6, r3
   d696a:	7864      	ldrb	r4, [r4, #1]
   d696c:	f004 0403 	and.w	r4, r4, #3
   d6970:	2c01      	cmp	r4, #1
   d6972:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6976:	eb06 0504 	add.w	r5, r6, r4
   d697a:	bf08      	it	eq
   d697c:	3320      	addeq	r3, #32
   d697e:	786d      	ldrb	r5, [r5, #1]
   d6980:	f005 0503 	and.w	r5, r5, #3
   d6984:	2d01      	cmp	r5, #1
   d6986:	bf08      	it	eq
   d6988:	3420      	addeq	r4, #32
   d698a:	1b1b      	subs	r3, r3, r4
   d698c:	d103      	bne.n	d6996 <strncasecmp+0x3e>
   d698e:	2c00      	cmp	r4, #0
   d6990:	d1e6      	bne.n	d6960 <strncasecmp+0x8>
   d6992:	e000      	b.n	d6996 <strncasecmp+0x3e>
   d6994:	2300      	movs	r3, #0
   d6996:	4618      	mov	r0, r3
   d6998:	bd70      	pop	{r4, r5, r6, pc}
   d699a:	bf00      	nop
   d699c:	2003e224 	.word	0x2003e224

000d69a0 <strncmp>:
   d69a0:	b530      	push	{r4, r5, lr}
   d69a2:	b182      	cbz	r2, d69c6 <strncmp+0x26>
   d69a4:	1e45      	subs	r5, r0, #1
   d69a6:	3901      	subs	r1, #1
   d69a8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d69ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d69b0:	42a3      	cmp	r3, r4
   d69b2:	d106      	bne.n	d69c2 <strncmp+0x22>
   d69b4:	43ec      	mvns	r4, r5
   d69b6:	4414      	add	r4, r2
   d69b8:	42e0      	cmn	r0, r4
   d69ba:	d001      	beq.n	d69c0 <strncmp+0x20>
   d69bc:	2b00      	cmp	r3, #0
   d69be:	d1f3      	bne.n	d69a8 <strncmp+0x8>
   d69c0:	461c      	mov	r4, r3
   d69c2:	1b18      	subs	r0, r3, r4
   d69c4:	bd30      	pop	{r4, r5, pc}
   d69c6:	4610      	mov	r0, r2
   d69c8:	bd30      	pop	{r4, r5, pc}

000d69ca <strncpy>:
   d69ca:	b510      	push	{r4, lr}
   d69cc:	4603      	mov	r3, r0
   d69ce:	b142      	cbz	r2, d69e2 <strncpy+0x18>
   d69d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69d4:	f803 4b01 	strb.w	r4, [r3], #1
   d69d8:	3a01      	subs	r2, #1
   d69da:	2c00      	cmp	r4, #0
   d69dc:	d1f7      	bne.n	d69ce <strncpy+0x4>
   d69de:	441a      	add	r2, r3
   d69e0:	e000      	b.n	d69e4 <strncpy+0x1a>
   d69e2:	bd10      	pop	{r4, pc}
   d69e4:	4293      	cmp	r3, r2
   d69e6:	d002      	beq.n	d69ee <strncpy+0x24>
   d69e8:	f803 4b01 	strb.w	r4, [r3], #1
   d69ec:	e7fa      	b.n	d69e4 <strncpy+0x1a>
   d69ee:	bd10      	pop	{r4, pc}

000d69f0 <sulp>:
   d69f0:	b570      	push	{r4, r5, r6, lr}
   d69f2:	4604      	mov	r4, r0
   d69f4:	460d      	mov	r5, r1
   d69f6:	ec45 4b10 	vmov	d0, r4, r5
   d69fa:	4616      	mov	r6, r2
   d69fc:	f001 fc00 	bl	d8200 <__ulp>
   d6a00:	ec51 0b10 	vmov	r0, r1, d0
   d6a04:	b17e      	cbz	r6, d6a26 <sulp+0x36>
   d6a06:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6a0e:	2b00      	cmp	r3, #0
   d6a10:	dd09      	ble.n	d6a26 <sulp+0x36>
   d6a12:	051b      	lsls	r3, r3, #20
   d6a14:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d6a18:	2400      	movs	r4, #0
   d6a1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d6a1e:	4622      	mov	r2, r4
   d6a20:	462b      	mov	r3, r5
   d6a22:	f7ff fbeb 	bl	d61fc <__aeabi_dmul>
   d6a26:	bd70      	pop	{r4, r5, r6, pc}

000d6a28 <_strtod_r>:
   d6a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a2c:	b09d      	sub	sp, #116	; 0x74
   d6a2e:	2300      	movs	r3, #0
   d6a30:	9002      	str	r0, [sp, #8]
   d6a32:	460c      	mov	r4, r1
   d6a34:	9213      	str	r2, [sp, #76]	; 0x4c
   d6a36:	9318      	str	r3, [sp, #96]	; 0x60
   d6a38:	f04f 0a00 	mov.w	sl, #0
   d6a3c:	f04f 0b00 	mov.w	fp, #0
   d6a40:	9117      	str	r1, [sp, #92]	; 0x5c
   d6a42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6a44:	781a      	ldrb	r2, [r3, #0]
   d6a46:	2a0d      	cmp	r2, #13
   d6a48:	d805      	bhi.n	d6a56 <_strtod_r+0x2e>
   d6a4a:	2a09      	cmp	r2, #9
   d6a4c:	d213      	bcs.n	d6a76 <_strtod_r+0x4e>
   d6a4e:	2a00      	cmp	r2, #0
   d6a50:	f000 81ac 	beq.w	d6dac <_strtod_r+0x384>
   d6a54:	e012      	b.n	d6a7c <_strtod_r+0x54>
   d6a56:	2a2b      	cmp	r2, #43	; 0x2b
   d6a58:	d004      	beq.n	d6a64 <_strtod_r+0x3c>
   d6a5a:	2a2d      	cmp	r2, #45	; 0x2d
   d6a5c:	d004      	beq.n	d6a68 <_strtod_r+0x40>
   d6a5e:	2a20      	cmp	r2, #32
   d6a60:	d10c      	bne.n	d6a7c <_strtod_r+0x54>
   d6a62:	e008      	b.n	d6a76 <_strtod_r+0x4e>
   d6a64:	2200      	movs	r2, #0
   d6a66:	e000      	b.n	d6a6a <_strtod_r+0x42>
   d6a68:	2201      	movs	r2, #1
   d6a6a:	920c      	str	r2, [sp, #48]	; 0x30
   d6a6c:	1c5a      	adds	r2, r3, #1
   d6a6e:	9217      	str	r2, [sp, #92]	; 0x5c
   d6a70:	785b      	ldrb	r3, [r3, #1]
   d6a72:	b92b      	cbnz	r3, d6a80 <_strtod_r+0x58>
   d6a74:	e19a      	b.n	d6dac <_strtod_r+0x384>
   d6a76:	3301      	adds	r3, #1
   d6a78:	9317      	str	r3, [sp, #92]	; 0x5c
   d6a7a:	e7e2      	b.n	d6a42 <_strtod_r+0x1a>
   d6a7c:	2300      	movs	r3, #0
   d6a7e:	930c      	str	r3, [sp, #48]	; 0x30
   d6a80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d6a82:	782b      	ldrb	r3, [r5, #0]
   d6a84:	2b30      	cmp	r3, #48	; 0x30
   d6a86:	d15c      	bne.n	d6b42 <_strtod_r+0x11a>
   d6a88:	786b      	ldrb	r3, [r5, #1]
   d6a8a:	2b58      	cmp	r3, #88	; 0x58
   d6a8c:	d001      	beq.n	d6a92 <_strtod_r+0x6a>
   d6a8e:	2b78      	cmp	r3, #120	; 0x78
   d6a90:	d14c      	bne.n	d6b2c <_strtod_r+0x104>
   d6a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	ab18      	add	r3, sp, #96	; 0x60
   d6a98:	9300      	str	r3, [sp, #0]
   d6a9a:	4aa9      	ldr	r2, [pc, #676]	; (d6d40 <_strtod_r+0x318>)
   d6a9c:	9802      	ldr	r0, [sp, #8]
   d6a9e:	ab19      	add	r3, sp, #100	; 0x64
   d6aa0:	a917      	add	r1, sp, #92	; 0x5c
   d6aa2:	f000 fe14 	bl	d76ce <__gethex>
   d6aa6:	f010 0607 	ands.w	r6, r0, #7
   d6aaa:	4604      	mov	r4, r0
   d6aac:	f000 8587 	beq.w	d75be <_strtod_r+0xb96>
   d6ab0:	2e06      	cmp	r6, #6
   d6ab2:	d105      	bne.n	d6ac0 <_strtod_r+0x98>
   d6ab4:	3501      	adds	r5, #1
   d6ab6:	2300      	movs	r3, #0
   d6ab8:	9517      	str	r5, [sp, #92]	; 0x5c
   d6aba:	930c      	str	r3, [sp, #48]	; 0x30
   d6abc:	f000 bd7f 	b.w	d75be <_strtod_r+0xb96>
   d6ac0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d6ac2:	b13a      	cbz	r2, d6ad4 <_strtod_r+0xac>
   d6ac4:	2135      	movs	r1, #53	; 0x35
   d6ac6:	a81a      	add	r0, sp, #104	; 0x68
   d6ac8:	f001 fc87 	bl	d83da <__copybits>
   d6acc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6ace:	9802      	ldr	r0, [sp, #8]
   d6ad0:	f001 f904 	bl	d7cdc <_Bfree>
   d6ad4:	2e06      	cmp	r6, #6
   d6ad6:	d822      	bhi.n	d6b1e <_strtod_r+0xf6>
   d6ad8:	e8df f006 	tbb	[pc, r6]
   d6adc:	18080d04 	.word	0x18080d04
   d6ae0:	0d1d      	.short	0x0d1d
   d6ae2:	04          	.byte	0x04
   d6ae3:	00          	.byte	0x00
   d6ae4:	f04f 0b00 	mov.w	fp, #0
   d6ae8:	46da      	mov	sl, fp
   d6aea:	e018      	b.n	d6b1e <_strtod_r+0xf6>
   d6aec:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6af0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d6af4:	e013      	b.n	d6b1e <_strtod_r+0xf6>
   d6af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d6af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d6afa:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6afe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d6b02:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d6b06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d6b0a:	e008      	b.n	d6b1e <_strtod_r+0xf6>
   d6b0c:	f8df b234 	ldr.w	fp, [pc, #564]	; d6d44 <_strtod_r+0x31c>
   d6b10:	f04f 0a00 	mov.w	sl, #0
   d6b14:	e003      	b.n	d6b1e <_strtod_r+0xf6>
   d6b16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d6b1a:	f04f 3aff 	mov.w	sl, #4294967295
   d6b1e:	0721      	lsls	r1, r4, #28
   d6b20:	f140 854d 	bpl.w	d75be <_strtod_r+0xb96>
   d6b24:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d6b28:	f000 bd49 	b.w	d75be <_strtod_r+0xb96>
   d6b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6b2e:	1c5a      	adds	r2, r3, #1
   d6b30:	9217      	str	r2, [sp, #92]	; 0x5c
   d6b32:	785b      	ldrb	r3, [r3, #1]
   d6b34:	2b30      	cmp	r3, #48	; 0x30
   d6b36:	d0f9      	beq.n	d6b2c <_strtod_r+0x104>
   d6b38:	2b00      	cmp	r3, #0
   d6b3a:	f000 8540 	beq.w	d75be <_strtod_r+0xb96>
   d6b3e:	2301      	movs	r3, #1
   d6b40:	e000      	b.n	d6b44 <_strtod_r+0x11c>
   d6b42:	2300      	movs	r3, #0
   d6b44:	f04f 0800 	mov.w	r8, #0
   d6b48:	9306      	str	r3, [sp, #24]
   d6b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6b4c:	9307      	str	r3, [sp, #28]
   d6b4e:	f8cd 8014 	str.w	r8, [sp, #20]
   d6b52:	f8cd 8010 	str.w	r8, [sp, #16]
   d6b56:	220a      	movs	r2, #10
   d6b58:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d6b5a:	782e      	ldrb	r6, [r5, #0]
   d6b5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d6b60:	b2d9      	uxtb	r1, r3
   d6b62:	2909      	cmp	r1, #9
   d6b64:	d80e      	bhi.n	d6b84 <_strtod_r+0x15c>
   d6b66:	9904      	ldr	r1, [sp, #16]
   d6b68:	2908      	cmp	r1, #8
   d6b6a:	bfdd      	ittte	le
   d6b6c:	9905      	ldrle	r1, [sp, #20]
   d6b6e:	fb02 3301 	mlale	r3, r2, r1, r3
   d6b72:	9305      	strle	r3, [sp, #20]
   d6b74:	fb02 3808 	mlagt	r8, r2, r8, r3
   d6b78:	9b04      	ldr	r3, [sp, #16]
   d6b7a:	3501      	adds	r5, #1
   d6b7c:	3301      	adds	r3, #1
   d6b7e:	9304      	str	r3, [sp, #16]
   d6b80:	9517      	str	r5, [sp, #92]	; 0x5c
   d6b82:	e7e9      	b.n	d6b58 <_strtod_r+0x130>
   d6b84:	9802      	ldr	r0, [sp, #8]
   d6b86:	f7ff fe7d 	bl	d6884 <_localeconv_r>
   d6b8a:	6807      	ldr	r7, [r0, #0]
   d6b8c:	9802      	ldr	r0, [sp, #8]
   d6b8e:	f7ff fe79 	bl	d6884 <_localeconv_r>
   d6b92:	6800      	ldr	r0, [r0, #0]
   d6b94:	f7ff fed8 	bl	d6948 <strlen>
   d6b98:	4639      	mov	r1, r7
   d6b9a:	4602      	mov	r2, r0
   d6b9c:	4628      	mov	r0, r5
   d6b9e:	f7ff feff 	bl	d69a0 <strncmp>
   d6ba2:	4607      	mov	r7, r0
   d6ba4:	b128      	cbz	r0, d6bb2 <_strtod_r+0x18a>
   d6ba6:	2000      	movs	r0, #0
   d6ba8:	4633      	mov	r3, r6
   d6baa:	9d04      	ldr	r5, [sp, #16]
   d6bac:	4602      	mov	r2, r0
   d6bae:	4601      	mov	r1, r0
   d6bb0:	e057      	b.n	d6c62 <_strtod_r+0x23a>
   d6bb2:	9802      	ldr	r0, [sp, #8]
   d6bb4:	f7ff fe66 	bl	d6884 <_localeconv_r>
   d6bb8:	6800      	ldr	r0, [r0, #0]
   d6bba:	f7ff fec5 	bl	d6948 <strlen>
   d6bbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6bc0:	181a      	adds	r2, r3, r0
   d6bc2:	9217      	str	r2, [sp, #92]	; 0x5c
   d6bc4:	9a04      	ldr	r2, [sp, #16]
   d6bc6:	5c1b      	ldrb	r3, [r3, r0]
   d6bc8:	2a00      	cmp	r2, #0
   d6bca:	d142      	bne.n	d6c52 <_strtod_r+0x22a>
   d6bcc:	4610      	mov	r0, r2
   d6bce:	2b30      	cmp	r3, #48	; 0x30
   d6bd0:	d105      	bne.n	d6bde <_strtod_r+0x1b6>
   d6bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6bd4:	1c5a      	adds	r2, r3, #1
   d6bd6:	9217      	str	r2, [sp, #92]	; 0x5c
   d6bd8:	3001      	adds	r0, #1
   d6bda:	785b      	ldrb	r3, [r3, #1]
   d6bdc:	e7f7      	b.n	d6bce <_strtod_r+0x1a6>
   d6bde:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d6be2:	2a08      	cmp	r2, #8
   d6be4:	d843      	bhi.n	d6c6e <_strtod_r+0x246>
   d6be6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d6be8:	9207      	str	r2, [sp, #28]
   d6bea:	4602      	mov	r2, r0
   d6bec:	2000      	movs	r0, #0
   d6bee:	4605      	mov	r5, r0
   d6bf0:	3b30      	subs	r3, #48	; 0x30
   d6bf2:	f100 0101 	add.w	r1, r0, #1
   d6bf6:	d026      	beq.n	d6c46 <_strtod_r+0x21e>
   d6bf8:	440a      	add	r2, r1
   d6bfa:	eb05 0c00 	add.w	ip, r5, r0
   d6bfe:	4629      	mov	r1, r5
   d6c00:	260a      	movs	r6, #10
   d6c02:	4561      	cmp	r1, ip
   d6c04:	d00e      	beq.n	d6c24 <_strtod_r+0x1fc>
   d6c06:	3101      	adds	r1, #1
   d6c08:	f101 3eff 	add.w	lr, r1, #4294967295
   d6c0c:	f1be 0f08 	cmp.w	lr, #8
   d6c10:	dc03      	bgt.n	d6c1a <_strtod_r+0x1f2>
   d6c12:	9f05      	ldr	r7, [sp, #20]
   d6c14:	4377      	muls	r7, r6
   d6c16:	9705      	str	r7, [sp, #20]
   d6c18:	e7f3      	b.n	d6c02 <_strtod_r+0x1da>
   d6c1a:	2910      	cmp	r1, #16
   d6c1c:	bfd8      	it	le
   d6c1e:	fb06 f808 	mulle.w	r8, r6, r8
   d6c22:	e7ee      	b.n	d6c02 <_strtod_r+0x1da>
   d6c24:	4428      	add	r0, r5
   d6c26:	2808      	cmp	r0, #8
   d6c28:	f100 0501 	add.w	r5, r0, #1
   d6c2c:	dc05      	bgt.n	d6c3a <_strtod_r+0x212>
   d6c2e:	9805      	ldr	r0, [sp, #20]
   d6c30:	210a      	movs	r1, #10
   d6c32:	fb01 3300 	mla	r3, r1, r0, r3
   d6c36:	9305      	str	r3, [sp, #20]
   d6c38:	e004      	b.n	d6c44 <_strtod_r+0x21c>
   d6c3a:	2d10      	cmp	r5, #16
   d6c3c:	bfdc      	itt	le
   d6c3e:	210a      	movle	r1, #10
   d6c40:	fb01 3808 	mlale	r8, r1, r8, r3
   d6c44:	2100      	movs	r1, #0
   d6c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6c48:	1c58      	adds	r0, r3, #1
   d6c4a:	9017      	str	r0, [sp, #92]	; 0x5c
   d6c4c:	785b      	ldrb	r3, [r3, #1]
   d6c4e:	4608      	mov	r0, r1
   d6c50:	e002      	b.n	d6c58 <_strtod_r+0x230>
   d6c52:	9d04      	ldr	r5, [sp, #16]
   d6c54:	4638      	mov	r0, r7
   d6c56:	463a      	mov	r2, r7
   d6c58:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d6c5c:	2909      	cmp	r1, #9
   d6c5e:	d9c7      	bls.n	d6bf0 <_strtod_r+0x1c8>
   d6c60:	2101      	movs	r1, #1
   d6c62:	2b65      	cmp	r3, #101	; 0x65
   d6c64:	d001      	beq.n	d6c6a <_strtod_r+0x242>
   d6c66:	2b45      	cmp	r3, #69	; 0x45
   d6c68:	d151      	bne.n	d6d0e <_strtod_r+0x2e6>
   d6c6a:	b96d      	cbnz	r5, d6c88 <_strtod_r+0x260>
   d6c6c:	e004      	b.n	d6c78 <_strtod_r+0x250>
   d6c6e:	2b65      	cmp	r3, #101	; 0x65
   d6c70:	f040 84b3 	bne.w	d75da <_strtod_r+0xbb2>
   d6c74:	2200      	movs	r2, #0
   d6c76:	2101      	movs	r1, #1
   d6c78:	b928      	cbnz	r0, d6c86 <_strtod_r+0x25e>
   d6c7a:	9b06      	ldr	r3, [sp, #24]
   d6c7c:	2b00      	cmp	r3, #0
   d6c7e:	f000 8095 	beq.w	d6dac <_strtod_r+0x384>
   d6c82:	4605      	mov	r5, r0
   d6c84:	e000      	b.n	d6c88 <_strtod_r+0x260>
   d6c86:	2500      	movs	r5, #0
   d6c88:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d6c8a:	1c63      	adds	r3, r4, #1
   d6c8c:	9317      	str	r3, [sp, #92]	; 0x5c
   d6c8e:	7863      	ldrb	r3, [r4, #1]
   d6c90:	2b2b      	cmp	r3, #43	; 0x2b
   d6c92:	d006      	beq.n	d6ca2 <_strtod_r+0x27a>
   d6c94:	2b2d      	cmp	r3, #45	; 0x2d
   d6c96:	d002      	beq.n	d6c9e <_strtod_r+0x276>
   d6c98:	2600      	movs	r6, #0
   d6c9a:	9603      	str	r6, [sp, #12]
   d6c9c:	e006      	b.n	d6cac <_strtod_r+0x284>
   d6c9e:	2301      	movs	r3, #1
   d6ca0:	e000      	b.n	d6ca4 <_strtod_r+0x27c>
   d6ca2:	2300      	movs	r3, #0
   d6ca4:	9303      	str	r3, [sp, #12]
   d6ca6:	1ca3      	adds	r3, r4, #2
   d6ca8:	9317      	str	r3, [sp, #92]	; 0x5c
   d6caa:	78a3      	ldrb	r3, [r4, #2]
   d6cac:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d6cb0:	2e09      	cmp	r6, #9
   d6cb2:	d82b      	bhi.n	d6d0c <_strtod_r+0x2e4>
   d6cb4:	2b30      	cmp	r3, #48	; 0x30
   d6cb6:	d104      	bne.n	d6cc2 <_strtod_r+0x29a>
   d6cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6cba:	1c5e      	adds	r6, r3, #1
   d6cbc:	9617      	str	r6, [sp, #92]	; 0x5c
   d6cbe:	785b      	ldrb	r3, [r3, #1]
   d6cc0:	e7f8      	b.n	d6cb4 <_strtod_r+0x28c>
   d6cc2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d6cc6:	2e08      	cmp	r6, #8
   d6cc8:	d821      	bhi.n	d6d0e <_strtod_r+0x2e6>
   d6cca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d6cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6cd0:	f04f 0c0a 	mov.w	ip, #10
   d6cd4:	461f      	mov	r7, r3
   d6cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6cd8:	1c5e      	adds	r6, r3, #1
   d6cda:	9617      	str	r6, [sp, #92]	; 0x5c
   d6cdc:	785b      	ldrb	r3, [r3, #1]
   d6cde:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d6ce2:	f1b9 0f09 	cmp.w	r9, #9
   d6ce6:	d804      	bhi.n	d6cf2 <_strtod_r+0x2ca>
   d6ce8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d6cec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d6cf0:	e7f1      	b.n	d6cd6 <_strtod_r+0x2ae>
   d6cf2:	1bf6      	subs	r6, r6, r7
   d6cf4:	2e08      	cmp	r6, #8
   d6cf6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d6cfa:	dc02      	bgt.n	d6d02 <_strtod_r+0x2da>
   d6cfc:	45f1      	cmp	r9, lr
   d6cfe:	bfa8      	it	ge
   d6d00:	46f1      	movge	r9, lr
   d6d02:	9e03      	ldr	r6, [sp, #12]
   d6d04:	b12e      	cbz	r6, d6d12 <_strtod_r+0x2ea>
   d6d06:	f1c9 0900 	rsb	r9, r9, #0
   d6d0a:	e002      	b.n	d6d12 <_strtod_r+0x2ea>
   d6d0c:	9417      	str	r4, [sp, #92]	; 0x5c
   d6d0e:	f04f 0900 	mov.w	r9, #0
   d6d12:	2d00      	cmp	r5, #0
   d6d14:	d153      	bne.n	d6dbe <_strtod_r+0x396>
   d6d16:	2800      	cmp	r0, #0
   d6d18:	f040 8451 	bne.w	d75be <_strtod_r+0xb96>
   d6d1c:	9a06      	ldr	r2, [sp, #24]
   d6d1e:	2a00      	cmp	r2, #0
   d6d20:	f040 844d 	bne.w	d75be <_strtod_r+0xb96>
   d6d24:	2900      	cmp	r1, #0
   d6d26:	d141      	bne.n	d6dac <_strtod_r+0x384>
   d6d28:	2b4e      	cmp	r3, #78	; 0x4e
   d6d2a:	d020      	beq.n	d6d6e <_strtod_r+0x346>
   d6d2c:	dc02      	bgt.n	d6d34 <_strtod_r+0x30c>
   d6d2e:	2b49      	cmp	r3, #73	; 0x49
   d6d30:	d00a      	beq.n	d6d48 <_strtod_r+0x320>
   d6d32:	e03b      	b.n	d6dac <_strtod_r+0x384>
   d6d34:	2b69      	cmp	r3, #105	; 0x69
   d6d36:	d007      	beq.n	d6d48 <_strtod_r+0x320>
   d6d38:	2b6e      	cmp	r3, #110	; 0x6e
   d6d3a:	d018      	beq.n	d6d6e <_strtod_r+0x346>
   d6d3c:	e036      	b.n	d6dac <_strtod_r+0x384>
   d6d3e:	bf00      	nop
   d6d40:	000d8be8 	.word	0x000d8be8
   d6d44:	7ff00000 	.word	0x7ff00000
   d6d48:	49a8      	ldr	r1, [pc, #672]	; (d6fec <_strtod_r+0x5c4>)
   d6d4a:	a817      	add	r0, sp, #92	; 0x5c
   d6d4c:	f000 fef0 	bl	d7b30 <__match>
   d6d50:	b360      	cbz	r0, d6dac <_strtod_r+0x384>
   d6d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6d54:	49a6      	ldr	r1, [pc, #664]	; (d6ff0 <_strtod_r+0x5c8>)
   d6d56:	3b01      	subs	r3, #1
   d6d58:	a817      	add	r0, sp, #92	; 0x5c
   d6d5a:	9317      	str	r3, [sp, #92]	; 0x5c
   d6d5c:	f000 fee8 	bl	d7b30 <__match>
   d6d60:	b910      	cbnz	r0, d6d68 <_strtod_r+0x340>
   d6d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6d64:	3301      	adds	r3, #1
   d6d66:	9317      	str	r3, [sp, #92]	; 0x5c
   d6d68:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d700c <_strtod_r+0x5e4>
   d6d6c:	e01a      	b.n	d6da4 <_strtod_r+0x37c>
   d6d6e:	49a1      	ldr	r1, [pc, #644]	; (d6ff4 <_strtod_r+0x5cc>)
   d6d70:	a817      	add	r0, sp, #92	; 0x5c
   d6d72:	f000 fedd 	bl	d7b30 <__match>
   d6d76:	b1c8      	cbz	r0, d6dac <_strtod_r+0x384>
   d6d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6d7a:	781b      	ldrb	r3, [r3, #0]
   d6d7c:	2b28      	cmp	r3, #40	; 0x28
   d6d7e:	d10f      	bne.n	d6da0 <_strtod_r+0x378>
   d6d80:	aa1a      	add	r2, sp, #104	; 0x68
   d6d82:	499d      	ldr	r1, [pc, #628]	; (d6ff8 <_strtod_r+0x5d0>)
   d6d84:	a817      	add	r0, sp, #92	; 0x5c
   d6d86:	f000 fee6 	bl	d7b56 <__hexnan>
   d6d8a:	2805      	cmp	r0, #5
   d6d8c:	d108      	bne.n	d6da0 <_strtod_r+0x378>
   d6d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d6d90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6d94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d6d98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d6d9c:	f000 bc0f 	b.w	d75be <_strtod_r+0xb96>
   d6da0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7010 <_strtod_r+0x5e8>
   d6da4:	f04f 0a00 	mov.w	sl, #0
   d6da8:	f000 bc09 	b.w	d75be <_strtod_r+0xb96>
   d6dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6dae:	9417      	str	r4, [sp, #92]	; 0x5c
   d6db0:	2b00      	cmp	r3, #0
   d6db2:	f000 840f 	beq.w	d75d4 <_strtod_r+0xbac>
   d6db6:	2300      	movs	r3, #0
   d6db8:	930c      	str	r3, [sp, #48]	; 0x30
   d6dba:	f000 bc02 	b.w	d75c2 <_strtod_r+0xb9a>
   d6dbe:	9b04      	ldr	r3, [sp, #16]
   d6dc0:	9805      	ldr	r0, [sp, #20]
   d6dc2:	2b00      	cmp	r3, #0
   d6dc4:	bf08      	it	eq
   d6dc6:	462b      	moveq	r3, r5
   d6dc8:	2d10      	cmp	r5, #16
   d6dca:	462c      	mov	r4, r5
   d6dcc:	ebc2 0909 	rsb	r9, r2, r9
   d6dd0:	bfa8      	it	ge
   d6dd2:	2410      	movge	r4, #16
   d6dd4:	9304      	str	r3, [sp, #16]
   d6dd6:	f7ff f99b 	bl	d6110 <__aeabi_ui2d>
   d6dda:	2c09      	cmp	r4, #9
   d6ddc:	4682      	mov	sl, r0
   d6dde:	468b      	mov	fp, r1
   d6de0:	dd13      	ble.n	d6e0a <_strtod_r+0x3e2>
   d6de2:	4b86      	ldr	r3, [pc, #536]	; (d6ffc <_strtod_r+0x5d4>)
   d6de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d6de8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d6dec:	f7ff fa06 	bl	d61fc <__aeabi_dmul>
   d6df0:	4606      	mov	r6, r0
   d6df2:	4640      	mov	r0, r8
   d6df4:	460f      	mov	r7, r1
   d6df6:	f7ff f98b 	bl	d6110 <__aeabi_ui2d>
   d6dfa:	4602      	mov	r2, r0
   d6dfc:	460b      	mov	r3, r1
   d6dfe:	4630      	mov	r0, r6
   d6e00:	4639      	mov	r1, r7
   d6e02:	f7ff f849 	bl	d5e98 <__adddf3>
   d6e06:	4682      	mov	sl, r0
   d6e08:	468b      	mov	fp, r1
   d6e0a:	2d0f      	cmp	r5, #15
   d6e0c:	dc36      	bgt.n	d6e7c <_strtod_r+0x454>
   d6e0e:	f1b9 0f00 	cmp.w	r9, #0
   d6e12:	f000 83d4 	beq.w	d75be <_strtod_r+0xb96>
   d6e16:	dd24      	ble.n	d6e62 <_strtod_r+0x43a>
   d6e18:	f1b9 0f16 	cmp.w	r9, #22
   d6e1c:	dc07      	bgt.n	d6e2e <_strtod_r+0x406>
   d6e1e:	4d77      	ldr	r5, [pc, #476]	; (d6ffc <_strtod_r+0x5d4>)
   d6e20:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d6e24:	4652      	mov	r2, sl
   d6e26:	465b      	mov	r3, fp
   d6e28:	e9d9 0100 	ldrd	r0, r1, [r9]
   d6e2c:	e014      	b.n	d6e58 <_strtod_r+0x430>
   d6e2e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d6e32:	4599      	cmp	r9, r3
   d6e34:	dc22      	bgt.n	d6e7c <_strtod_r+0x454>
   d6e36:	4c71      	ldr	r4, [pc, #452]	; (d6ffc <_strtod_r+0x5d4>)
   d6e38:	f1c5 050f 	rsb	r5, r5, #15
   d6e3c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d6e40:	ebc5 0509 	rsb	r5, r5, r9
   d6e44:	4652      	mov	r2, sl
   d6e46:	465b      	mov	r3, fp
   d6e48:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6e4c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d6e50:	f7ff f9d4 	bl	d61fc <__aeabi_dmul>
   d6e54:	e9d4 2300 	ldrd	r2, r3, [r4]
   d6e58:	f7ff f9d0 	bl	d61fc <__aeabi_dmul>
   d6e5c:	4682      	mov	sl, r0
   d6e5e:	468b      	mov	fp, r1
   d6e60:	e3ad      	b.n	d75be <_strtod_r+0xb96>
   d6e62:	f119 0f16 	cmn.w	r9, #22
   d6e66:	db09      	blt.n	d6e7c <_strtod_r+0x454>
   d6e68:	4d64      	ldr	r5, [pc, #400]	; (d6ffc <_strtod_r+0x5d4>)
   d6e6a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d6e6e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d6e72:	4650      	mov	r0, sl
   d6e74:	4659      	mov	r1, fp
   d6e76:	f7ff faeb 	bl	d6450 <__aeabi_ddiv>
   d6e7a:	e7ef      	b.n	d6e5c <_strtod_r+0x434>
   d6e7c:	1b2c      	subs	r4, r5, r4
   d6e7e:	444c      	add	r4, r9
   d6e80:	2c00      	cmp	r4, #0
   d6e82:	dd57      	ble.n	d6f34 <_strtod_r+0x50c>
   d6e84:	f014 010f 	ands.w	r1, r4, #15
   d6e88:	d00a      	beq.n	d6ea0 <_strtod_r+0x478>
   d6e8a:	4b5c      	ldr	r3, [pc, #368]	; (d6ffc <_strtod_r+0x5d4>)
   d6e8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d6e90:	4652      	mov	r2, sl
   d6e92:	465b      	mov	r3, fp
   d6e94:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6e98:	f7ff f9b0 	bl	d61fc <__aeabi_dmul>
   d6e9c:	4682      	mov	sl, r0
   d6e9e:	468b      	mov	fp, r1
   d6ea0:	f034 040f 	bics.w	r4, r4, #15
   d6ea4:	f000 80b8 	beq.w	d7018 <_strtod_r+0x5f0>
   d6ea8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d6eac:	dd0b      	ble.n	d6ec6 <_strtod_r+0x49e>
   d6eae:	2400      	movs	r4, #0
   d6eb0:	4625      	mov	r5, r4
   d6eb2:	9405      	str	r4, [sp, #20]
   d6eb4:	9404      	str	r4, [sp, #16]
   d6eb6:	9a02      	ldr	r2, [sp, #8]
   d6eb8:	f8df b150 	ldr.w	fp, [pc, #336]	; d700c <_strtod_r+0x5e4>
   d6ebc:	2322      	movs	r3, #34	; 0x22
   d6ebe:	6013      	str	r3, [r2, #0]
   d6ec0:	f04f 0a00 	mov.w	sl, #0
   d6ec4:	e187      	b.n	d71d6 <_strtod_r+0x7ae>
   d6ec6:	4e4e      	ldr	r6, [pc, #312]	; (d7000 <_strtod_r+0x5d8>)
   d6ec8:	2300      	movs	r3, #0
   d6eca:	1124      	asrs	r4, r4, #4
   d6ecc:	4650      	mov	r0, sl
   d6ece:	4659      	mov	r1, fp
   d6ed0:	4698      	mov	r8, r3
   d6ed2:	4637      	mov	r7, r6
   d6ed4:	2c01      	cmp	r4, #1
   d6ed6:	dd0b      	ble.n	d6ef0 <_strtod_r+0x4c8>
   d6ed8:	07e2      	lsls	r2, r4, #31
   d6eda:	d504      	bpl.n	d6ee6 <_strtod_r+0x4be>
   d6edc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d6ee0:	f7ff f98c 	bl	d61fc <__aeabi_dmul>
   d6ee4:	2301      	movs	r3, #1
   d6ee6:	f108 0801 	add.w	r8, r8, #1
   d6eea:	1064      	asrs	r4, r4, #1
   d6eec:	3608      	adds	r6, #8
   d6eee:	e7f1      	b.n	d6ed4 <_strtod_r+0x4ac>
   d6ef0:	b10b      	cbz	r3, d6ef6 <_strtod_r+0x4ce>
   d6ef2:	4682      	mov	sl, r0
   d6ef4:	468b      	mov	fp, r1
   d6ef6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d6efa:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d6efe:	4652      	mov	r2, sl
   d6f00:	465b      	mov	r3, fp
   d6f02:	e9d7 0100 	ldrd	r0, r1, [r7]
   d6f06:	f7ff f979 	bl	d61fc <__aeabi_dmul>
   d6f0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d6f0e:	468b      	mov	fp, r1
   d6f10:	460a      	mov	r2, r1
   d6f12:	0d1b      	lsrs	r3, r3, #20
   d6f14:	493b      	ldr	r1, [pc, #236]	; (d7004 <_strtod_r+0x5dc>)
   d6f16:	051b      	lsls	r3, r3, #20
   d6f18:	428b      	cmp	r3, r1
   d6f1a:	4682      	mov	sl, r0
   d6f1c:	d8c7      	bhi.n	d6eae <_strtod_r+0x486>
   d6f1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d6f22:	428b      	cmp	r3, r1
   d6f24:	bf86      	itte	hi
   d6f26:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d7014 <_strtod_r+0x5ec>
   d6f2a:	f04f 3aff 	movhi.w	sl, #4294967295
   d6f2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d6f32:	e071      	b.n	d7018 <_strtod_r+0x5f0>
   d6f34:	d070      	beq.n	d7018 <_strtod_r+0x5f0>
   d6f36:	4264      	negs	r4, r4
   d6f38:	f014 020f 	ands.w	r2, r4, #15
   d6f3c:	d00a      	beq.n	d6f54 <_strtod_r+0x52c>
   d6f3e:	4b2f      	ldr	r3, [pc, #188]	; (d6ffc <_strtod_r+0x5d4>)
   d6f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d6f44:	4650      	mov	r0, sl
   d6f46:	4659      	mov	r1, fp
   d6f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f4c:	f7ff fa80 	bl	d6450 <__aeabi_ddiv>
   d6f50:	4682      	mov	sl, r0
   d6f52:	468b      	mov	fp, r1
   d6f54:	1124      	asrs	r4, r4, #4
   d6f56:	d05f      	beq.n	d7018 <_strtod_r+0x5f0>
   d6f58:	2c1f      	cmp	r4, #31
   d6f5a:	dd04      	ble.n	d6f66 <_strtod_r+0x53e>
   d6f5c:	2400      	movs	r4, #0
   d6f5e:	4625      	mov	r5, r4
   d6f60:	9405      	str	r4, [sp, #20]
   d6f62:	9404      	str	r4, [sp, #16]
   d6f64:	e130      	b.n	d71c8 <_strtod_r+0x7a0>
   d6f66:	f014 0f10 	tst.w	r4, #16
   d6f6a:	bf0c      	ite	eq
   d6f6c:	2300      	moveq	r3, #0
   d6f6e:	236a      	movne	r3, #106	; 0x6a
   d6f70:	4e25      	ldr	r6, [pc, #148]	; (d7008 <_strtod_r+0x5e0>)
   d6f72:	9303      	str	r3, [sp, #12]
   d6f74:	4650      	mov	r0, sl
   d6f76:	4659      	mov	r1, fp
   d6f78:	2300      	movs	r3, #0
   d6f7a:	2c00      	cmp	r4, #0
   d6f7c:	dd09      	ble.n	d6f92 <_strtod_r+0x56a>
   d6f7e:	07e2      	lsls	r2, r4, #31
   d6f80:	d504      	bpl.n	d6f8c <_strtod_r+0x564>
   d6f82:	e9d6 2300 	ldrd	r2, r3, [r6]
   d6f86:	f7ff f939 	bl	d61fc <__aeabi_dmul>
   d6f8a:	2301      	movs	r3, #1
   d6f8c:	1064      	asrs	r4, r4, #1
   d6f8e:	3608      	adds	r6, #8
   d6f90:	e7f3      	b.n	d6f7a <_strtod_r+0x552>
   d6f92:	b10b      	cbz	r3, d6f98 <_strtod_r+0x570>
   d6f94:	4682      	mov	sl, r0
   d6f96:	468b      	mov	fp, r1
   d6f98:	9b03      	ldr	r3, [sp, #12]
   d6f9a:	b1eb      	cbz	r3, d6fd8 <_strtod_r+0x5b0>
   d6f9c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d6fa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6fa4:	2b00      	cmp	r3, #0
   d6fa6:	4659      	mov	r1, fp
   d6fa8:	dd16      	ble.n	d6fd8 <_strtod_r+0x5b0>
   d6faa:	2b1f      	cmp	r3, #31
   d6fac:	dd0e      	ble.n	d6fcc <_strtod_r+0x5a4>
   d6fae:	2b34      	cmp	r3, #52	; 0x34
   d6fb0:	bfde      	ittt	le
   d6fb2:	3b20      	suble	r3, #32
   d6fb4:	f04f 32ff 	movle.w	r2, #4294967295
   d6fb8:	fa02 f303 	lslle.w	r3, r2, r3
   d6fbc:	f04f 0a00 	mov.w	sl, #0
   d6fc0:	bfcc      	ite	gt
   d6fc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d6fc6:	ea03 0b01 	andle.w	fp, r3, r1
   d6fca:	e005      	b.n	d6fd8 <_strtod_r+0x5b0>
   d6fcc:	f04f 32ff 	mov.w	r2, #4294967295
   d6fd0:	fa02 f303 	lsl.w	r3, r2, r3
   d6fd4:	ea03 0a0a 	and.w	sl, r3, sl
   d6fd8:	2200      	movs	r2, #0
   d6fda:	2300      	movs	r3, #0
   d6fdc:	4650      	mov	r0, sl
   d6fde:	4659      	mov	r1, fp
   d6fe0:	f7ff fb74 	bl	d66cc <__aeabi_dcmpeq>
   d6fe4:	2800      	cmp	r0, #0
   d6fe6:	d1b9      	bne.n	d6f5c <_strtod_r+0x534>
   d6fe8:	e018      	b.n	d701c <_strtod_r+0x5f4>
   d6fea:	bf00      	nop
   d6fec:	000d8c10 	.word	0x000d8c10
   d6ff0:	000d8c13 	.word	0x000d8c13
   d6ff4:	000d8c19 	.word	0x000d8c19
   d6ff8:	000d8bfc 	.word	0x000d8bfc
   d6ffc:	000d8c48 	.word	0x000d8c48
   d7000:	000d8d10 	.word	0x000d8d10
   d7004:	7ca00000 	.word	0x7ca00000
   d7008:	000d8c20 	.word	0x000d8c20
   d700c:	7ff00000 	.word	0x7ff00000
   d7010:	fff80000 	.word	0xfff80000
   d7014:	7fefffff 	.word	0x7fefffff
   d7018:	2300      	movs	r3, #0
   d701a:	9303      	str	r3, [sp, #12]
   d701c:	9b05      	ldr	r3, [sp, #20]
   d701e:	9300      	str	r3, [sp, #0]
   d7020:	9a04      	ldr	r2, [sp, #16]
   d7022:	9907      	ldr	r1, [sp, #28]
   d7024:	9802      	ldr	r0, [sp, #8]
   d7026:	462b      	mov	r3, r5
   d7028:	f000 feaa 	bl	d7d80 <__s2b>
   d702c:	9005      	str	r0, [sp, #20]
   d702e:	2800      	cmp	r0, #0
   d7030:	f43f af3d 	beq.w	d6eae <_strtod_r+0x486>
   d7034:	f1b9 0f00 	cmp.w	r9, #0
   d7038:	f1c9 0300 	rsb	r3, r9, #0
   d703c:	bfa8      	it	ge
   d703e:	2300      	movge	r3, #0
   d7040:	930d      	str	r3, [sp, #52]	; 0x34
   d7042:	2400      	movs	r4, #0
   d7044:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7048:	9312      	str	r3, [sp, #72]	; 0x48
   d704a:	4625      	mov	r5, r4
   d704c:	9b05      	ldr	r3, [sp, #20]
   d704e:	9802      	ldr	r0, [sp, #8]
   d7050:	6859      	ldr	r1, [r3, #4]
   d7052:	f000 fe0e 	bl	d7c72 <_Balloc>
   d7056:	9004      	str	r0, [sp, #16]
   d7058:	2800      	cmp	r0, #0
   d705a:	f43f af2c 	beq.w	d6eb6 <_strtod_r+0x48e>
   d705e:	9b05      	ldr	r3, [sp, #20]
   d7060:	691a      	ldr	r2, [r3, #16]
   d7062:	3202      	adds	r2, #2
   d7064:	f103 010c 	add.w	r1, r3, #12
   d7068:	0092      	lsls	r2, r2, #2
   d706a:	300c      	adds	r0, #12
   d706c:	f7ff fc0e 	bl	d688c <memcpy>
   d7070:	aa1a      	add	r2, sp, #104	; 0x68
   d7072:	a919      	add	r1, sp, #100	; 0x64
   d7074:	ec4b ab10 	vmov	d0, sl, fp
   d7078:	9802      	ldr	r0, [sp, #8]
   d707a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d707e:	f001 f934 	bl	d82ea <__d2b>
   d7082:	9018      	str	r0, [sp, #96]	; 0x60
   d7084:	2800      	cmp	r0, #0
   d7086:	f43f af16 	beq.w	d6eb6 <_strtod_r+0x48e>
   d708a:	2101      	movs	r1, #1
   d708c:	9802      	ldr	r0, [sp, #8]
   d708e:	f000 ff02 	bl	d7e96 <__i2b>
   d7092:	4605      	mov	r5, r0
   d7094:	2800      	cmp	r0, #0
   d7096:	f43f af0e 	beq.w	d6eb6 <_strtod_r+0x48e>
   d709a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d709c:	9903      	ldr	r1, [sp, #12]
   d709e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d70a0:	2b00      	cmp	r3, #0
   d70a2:	bfad      	iteet	ge
   d70a4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d70a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d70a8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d70ac:	eb02 0803 	addge.w	r8, r2, r3
   d70b0:	bfb8      	it	lt
   d70b2:	1ad2      	sublt	r2, r2, r3
   d70b4:	eba3 0301 	sub.w	r3, r3, r1
   d70b8:	4433      	add	r3, r6
   d70ba:	49b5      	ldr	r1, [pc, #724]	; (d7390 <_strtod_r+0x968>)
   d70bc:	bfa8      	it	ge
   d70be:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d70c0:	3b01      	subs	r3, #1
   d70c2:	428b      	cmp	r3, r1
   d70c4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d70c8:	f280 808a 	bge.w	d71e0 <_strtod_r+0x7b8>
   d70cc:	1ac9      	subs	r1, r1, r3
   d70ce:	291f      	cmp	r1, #31
   d70d0:	bfc8      	it	gt
   d70d2:	4fb0      	ldrgt	r7, [pc, #704]	; (d7394 <_strtod_r+0x96c>)
   d70d4:	f04f 0901 	mov.w	r9, #1
   d70d8:	bfd4      	ite	le
   d70da:	fa09 f301 	lslle.w	r3, r9, r1
   d70de:	1aff      	subgt	r7, r7, r3
   d70e0:	eba6 0601 	sub.w	r6, r6, r1
   d70e4:	bfd9      	ittee	le
   d70e6:	9306      	strle	r3, [sp, #24]
   d70e8:	2700      	movle	r7, #0
   d70ea:	fa09 f707 	lslgt.w	r7, r9, r7
   d70ee:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d70f2:	eb08 0906 	add.w	r9, r8, r6
   d70f6:	9b03      	ldr	r3, [sp, #12]
   d70f8:	45c8      	cmp	r8, r9
   d70fa:	4416      	add	r6, r2
   d70fc:	441e      	add	r6, r3
   d70fe:	4643      	mov	r3, r8
   d7100:	bfa8      	it	ge
   d7102:	464b      	movge	r3, r9
   d7104:	42b3      	cmp	r3, r6
   d7106:	bfa8      	it	ge
   d7108:	4633      	movge	r3, r6
   d710a:	2b00      	cmp	r3, #0
   d710c:	bfc2      	ittt	gt
   d710e:	ebc3 0909 	rsbgt	r9, r3, r9
   d7112:	1af6      	subgt	r6, r6, r3
   d7114:	ebc3 0808 	rsbgt	r8, r3, r8
   d7118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d711a:	2b00      	cmp	r3, #0
   d711c:	d164      	bne.n	d71e8 <_strtod_r+0x7c0>
   d711e:	f1b9 0f00 	cmp.w	r9, #0
   d7122:	dc7a      	bgt.n	d721a <_strtod_r+0x7f2>
   d7124:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7126:	2b00      	cmp	r3, #0
   d7128:	f040 8081 	bne.w	d722e <_strtod_r+0x806>
   d712c:	2e00      	cmp	r6, #0
   d712e:	f300 8088 	bgt.w	d7242 <_strtod_r+0x81a>
   d7132:	f1b8 0f00 	cmp.w	r8, #0
   d7136:	f300 808e 	bgt.w	d7256 <_strtod_r+0x82e>
   d713a:	9a04      	ldr	r2, [sp, #16]
   d713c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d713e:	9802      	ldr	r0, [sp, #8]
   d7140:	f000 ffff 	bl	d8142 <__mdiff>
   d7144:	4604      	mov	r4, r0
   d7146:	2800      	cmp	r0, #0
   d7148:	f43f aeb5 	beq.w	d6eb6 <_strtod_r+0x48e>
   d714c:	68c3      	ldr	r3, [r0, #12]
   d714e:	9307      	str	r3, [sp, #28]
   d7150:	2300      	movs	r3, #0
   d7152:	60c3      	str	r3, [r0, #12]
   d7154:	4629      	mov	r1, r5
   d7156:	f000 ffd8 	bl	d810a <__mcmp>
   d715a:	2800      	cmp	r0, #0
   d715c:	f280 8089 	bge.w	d7272 <_strtod_r+0x84a>
   d7160:	9b07      	ldr	r3, [sp, #28]
   d7162:	2b00      	cmp	r3, #0
   d7164:	f040 8204 	bne.w	d7570 <_strtod_r+0xb48>
   d7168:	f1ba 0f00 	cmp.w	sl, #0
   d716c:	f040 8200 	bne.w	d7570 <_strtod_r+0xb48>
   d7170:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7174:	2b00      	cmp	r3, #0
   d7176:	f040 81fb 	bne.w	d7570 <_strtod_r+0xb48>
   d717a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d717e:	0d1b      	lsrs	r3, r3, #20
   d7180:	051b      	lsls	r3, r3, #20
   d7182:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7186:	f240 81f3 	bls.w	d7570 <_strtod_r+0xb48>
   d718a:	6963      	ldr	r3, [r4, #20]
   d718c:	2b00      	cmp	r3, #0
   d718e:	d06c      	beq.n	d726a <_strtod_r+0x842>
   d7190:	4621      	mov	r1, r4
   d7192:	2201      	movs	r2, #1
   d7194:	9802      	ldr	r0, [sp, #8]
   d7196:	f000 ff67 	bl	d8068 <__lshift>
   d719a:	4629      	mov	r1, r5
   d719c:	4604      	mov	r4, r0
   d719e:	f000 ffb4 	bl	d810a <__mcmp>
   d71a2:	2800      	cmp	r0, #0
   d71a4:	f340 81e4 	ble.w	d7570 <_strtod_r+0xb48>
   d71a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d71ac:	9a03      	ldr	r2, [sp, #12]
   d71ae:	0d1b      	lsrs	r3, r3, #20
   d71b0:	051b      	lsls	r3, r3, #20
   d71b2:	2a00      	cmp	r2, #0
   d71b4:	f000 808c 	beq.w	d72d0 <_strtod_r+0x8a8>
   d71b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d71bc:	f300 8088 	bgt.w	d72d0 <_strtod_r+0x8a8>
   d71c0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d71c4:	f300 81d6 	bgt.w	d7574 <_strtod_r+0xb4c>
   d71c8:	9a02      	ldr	r2, [sp, #8]
   d71ca:	2322      	movs	r3, #34	; 0x22
   d71cc:	f04f 0a00 	mov.w	sl, #0
   d71d0:	f04f 0b00 	mov.w	fp, #0
   d71d4:	6013      	str	r3, [r2, #0]
   d71d6:	9b05      	ldr	r3, [sp, #20]
   d71d8:	2b00      	cmp	r3, #0
   d71da:	f040 81dc 	bne.w	d7596 <_strtod_r+0xb6e>
   d71de:	e1ee      	b.n	d75be <_strtod_r+0xb96>
   d71e0:	2301      	movs	r3, #1
   d71e2:	2700      	movs	r7, #0
   d71e4:	9306      	str	r3, [sp, #24]
   d71e6:	e784      	b.n	d70f2 <_strtod_r+0x6ca>
   d71e8:	4629      	mov	r1, r5
   d71ea:	461a      	mov	r2, r3
   d71ec:	9802      	ldr	r0, [sp, #8]
   d71ee:	f000 feed 	bl	d7fcc <__pow5mult>
   d71f2:	4605      	mov	r5, r0
   d71f4:	2800      	cmp	r0, #0
   d71f6:	f43f ae5e 	beq.w	d6eb6 <_strtod_r+0x48e>
   d71fa:	4601      	mov	r1, r0
   d71fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d71fe:	9802      	ldr	r0, [sp, #8]
   d7200:	f000 fe52 	bl	d7ea8 <__multiply>
   d7204:	9007      	str	r0, [sp, #28]
   d7206:	2800      	cmp	r0, #0
   d7208:	f43f ae55 	beq.w	d6eb6 <_strtod_r+0x48e>
   d720c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d720e:	9802      	ldr	r0, [sp, #8]
   d7210:	f000 fd64 	bl	d7cdc <_Bfree>
   d7214:	9b07      	ldr	r3, [sp, #28]
   d7216:	9318      	str	r3, [sp, #96]	; 0x60
   d7218:	e781      	b.n	d711e <_strtod_r+0x6f6>
   d721a:	464a      	mov	r2, r9
   d721c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d721e:	9802      	ldr	r0, [sp, #8]
   d7220:	f000 ff22 	bl	d8068 <__lshift>
   d7224:	9018      	str	r0, [sp, #96]	; 0x60
   d7226:	2800      	cmp	r0, #0
   d7228:	f47f af7c 	bne.w	d7124 <_strtod_r+0x6fc>
   d722c:	e643      	b.n	d6eb6 <_strtod_r+0x48e>
   d722e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7230:	9904      	ldr	r1, [sp, #16]
   d7232:	9802      	ldr	r0, [sp, #8]
   d7234:	f000 feca 	bl	d7fcc <__pow5mult>
   d7238:	9004      	str	r0, [sp, #16]
   d723a:	2800      	cmp	r0, #0
   d723c:	f47f af76 	bne.w	d712c <_strtod_r+0x704>
   d7240:	e639      	b.n	d6eb6 <_strtod_r+0x48e>
   d7242:	4632      	mov	r2, r6
   d7244:	9904      	ldr	r1, [sp, #16]
   d7246:	9802      	ldr	r0, [sp, #8]
   d7248:	f000 ff0e 	bl	d8068 <__lshift>
   d724c:	9004      	str	r0, [sp, #16]
   d724e:	2800      	cmp	r0, #0
   d7250:	f47f af6f 	bne.w	d7132 <_strtod_r+0x70a>
   d7254:	e62f      	b.n	d6eb6 <_strtod_r+0x48e>
   d7256:	4629      	mov	r1, r5
   d7258:	4642      	mov	r2, r8
   d725a:	9802      	ldr	r0, [sp, #8]
   d725c:	f000 ff04 	bl	d8068 <__lshift>
   d7260:	4605      	mov	r5, r0
   d7262:	2800      	cmp	r0, #0
   d7264:	f47f af69 	bne.w	d713a <_strtod_r+0x712>
   d7268:	e625      	b.n	d6eb6 <_strtod_r+0x48e>
   d726a:	6923      	ldr	r3, [r4, #16]
   d726c:	2b01      	cmp	r3, #1
   d726e:	dc8f      	bgt.n	d7190 <_strtod_r+0x768>
   d7270:	e17e      	b.n	d7570 <_strtod_r+0xb48>
   d7272:	d161      	bne.n	d7338 <_strtod_r+0x910>
   d7274:	9a07      	ldr	r2, [sp, #28]
   d7276:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d727a:	b322      	cbz	r2, d72c6 <_strtod_r+0x89e>
   d727c:	4946      	ldr	r1, [pc, #280]	; (d7398 <_strtod_r+0x970>)
   d727e:	428b      	cmp	r3, r1
   d7280:	465a      	mov	r2, fp
   d7282:	d12e      	bne.n	d72e2 <_strtod_r+0x8ba>
   d7284:	9b03      	ldr	r3, [sp, #12]
   d7286:	4651      	mov	r1, sl
   d7288:	b163      	cbz	r3, d72a4 <_strtod_r+0x87c>
   d728a:	4b44      	ldr	r3, [pc, #272]	; (d739c <_strtod_r+0x974>)
   d728c:	4013      	ands	r3, r2
   d728e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7292:	d807      	bhi.n	d72a4 <_strtod_r+0x87c>
   d7294:	0d1b      	lsrs	r3, r3, #20
   d7296:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d729a:	f04f 30ff 	mov.w	r0, #4294967295
   d729e:	fa00 f303 	lsl.w	r3, r0, r3
   d72a2:	e001      	b.n	d72a8 <_strtod_r+0x880>
   d72a4:	f04f 33ff 	mov.w	r3, #4294967295
   d72a8:	428b      	cmp	r3, r1
   d72aa:	d11a      	bne.n	d72e2 <_strtod_r+0x8ba>
   d72ac:	493c      	ldr	r1, [pc, #240]	; (d73a0 <_strtod_r+0x978>)
   d72ae:	428a      	cmp	r2, r1
   d72b0:	d102      	bne.n	d72b8 <_strtod_r+0x890>
   d72b2:	3301      	adds	r3, #1
   d72b4:	f43f adff 	beq.w	d6eb6 <_strtod_r+0x48e>
   d72b8:	4b38      	ldr	r3, [pc, #224]	; (d739c <_strtod_r+0x974>)
   d72ba:	4013      	ands	r3, r2
   d72bc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d72c0:	f04f 0a00 	mov.w	sl, #0
   d72c4:	e154      	b.n	d7570 <_strtod_r+0xb48>
   d72c6:	b963      	cbnz	r3, d72e2 <_strtod_r+0x8ba>
   d72c8:	f1ba 0f00 	cmp.w	sl, #0
   d72cc:	d109      	bne.n	d72e2 <_strtod_r+0x8ba>
   d72ce:	e76b      	b.n	d71a8 <_strtod_r+0x780>
   d72d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d72d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d72d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d72dc:	f04f 3aff 	mov.w	sl, #4294967295
   d72e0:	e146      	b.n	d7570 <_strtod_r+0xb48>
   d72e2:	b117      	cbz	r7, d72ea <_strtod_r+0x8c2>
   d72e4:	ea17 0f0b 	tst.w	r7, fp
   d72e8:	e002      	b.n	d72f0 <_strtod_r+0x8c8>
   d72ea:	9b06      	ldr	r3, [sp, #24]
   d72ec:	ea13 0f0a 	tst.w	r3, sl
   d72f0:	f000 813e 	beq.w	d7570 <_strtod_r+0xb48>
   d72f4:	9b07      	ldr	r3, [sp, #28]
   d72f6:	9a03      	ldr	r2, [sp, #12]
   d72f8:	4650      	mov	r0, sl
   d72fa:	4659      	mov	r1, fp
   d72fc:	b153      	cbz	r3, d7314 <_strtod_r+0x8ec>
   d72fe:	f7ff fb77 	bl	d69f0 <sulp>
   d7302:	4602      	mov	r2, r0
   d7304:	460b      	mov	r3, r1
   d7306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d730a:	f7fe fdc5 	bl	d5e98 <__adddf3>
   d730e:	4682      	mov	sl, r0
   d7310:	468b      	mov	fp, r1
   d7312:	e12d      	b.n	d7570 <_strtod_r+0xb48>
   d7314:	f7ff fb6c 	bl	d69f0 <sulp>
   d7318:	4602      	mov	r2, r0
   d731a:	460b      	mov	r3, r1
   d731c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7320:	f7fe fdb8 	bl	d5e94 <__aeabi_dsub>
   d7324:	2200      	movs	r2, #0
   d7326:	2300      	movs	r3, #0
   d7328:	4682      	mov	sl, r0
   d732a:	468b      	mov	fp, r1
   d732c:	f7ff f9ce 	bl	d66cc <__aeabi_dcmpeq>
   d7330:	2800      	cmp	r0, #0
   d7332:	f47f af49 	bne.w	d71c8 <_strtod_r+0x7a0>
   d7336:	e11b      	b.n	d7570 <_strtod_r+0xb48>
   d7338:	4629      	mov	r1, r5
   d733a:	4620      	mov	r0, r4
   d733c:	f001 f823 	bl	d8386 <__ratio>
   d7340:	ec57 6b10 	vmov	r6, r7, d0
   d7344:	2200      	movs	r2, #0
   d7346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d734a:	ee10 0a10 	vmov	r0, s0
   d734e:	4639      	mov	r1, r7
   d7350:	f7ff f9d0 	bl	d66f4 <__aeabi_dcmple>
   d7354:	2800      	cmp	r0, #0
   d7356:	d042      	beq.n	d73de <_strtod_r+0x9b6>
   d7358:	9b07      	ldr	r3, [sp, #28]
   d735a:	b123      	cbz	r3, d7366 <_strtod_r+0x93e>
   d735c:	f04f 0800 	mov.w	r8, #0
   d7360:	f8df 9040 	ldr.w	r9, [pc, #64]	; d73a4 <_strtod_r+0x97c>
   d7364:	e011      	b.n	d738a <_strtod_r+0x962>
   d7366:	f1ba 0f00 	cmp.w	sl, #0
   d736a:	d103      	bne.n	d7374 <_strtod_r+0x94c>
   d736c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7370:	b93b      	cbnz	r3, d7382 <_strtod_r+0x95a>
   d7372:	e01b      	b.n	d73ac <_strtod_r+0x984>
   d7374:	f1ba 0f01 	cmp.w	sl, #1
   d7378:	d103      	bne.n	d7382 <_strtod_r+0x95a>
   d737a:	f1bb 0f00 	cmp.w	fp, #0
   d737e:	f43f af23 	beq.w	d71c8 <_strtod_r+0x7a0>
   d7382:	f8df 9024 	ldr.w	r9, [pc, #36]	; d73a8 <_strtod_r+0x980>
   d7386:	f04f 0800 	mov.w	r8, #0
   d738a:	2600      	movs	r6, #0
   d738c:	4f05      	ldr	r7, [pc, #20]	; (d73a4 <_strtod_r+0x97c>)
   d738e:	e039      	b.n	d7404 <_strtod_r+0x9dc>
   d7390:	fffffc02 	.word	0xfffffc02
   d7394:	fffffbe2 	.word	0xfffffbe2
   d7398:	000fffff 	.word	0x000fffff
   d739c:	7ff00000 	.word	0x7ff00000
   d73a0:	7fefffff 	.word	0x7fefffff
   d73a4:	3ff00000 	.word	0x3ff00000
   d73a8:	bff00000 	.word	0xbff00000
   d73ac:	2200      	movs	r2, #0
   d73ae:	4b98      	ldr	r3, [pc, #608]	; (d7610 <_strtod_r+0xbe8>)
   d73b0:	4630      	mov	r0, r6
   d73b2:	4639      	mov	r1, r7
   d73b4:	f7ff f994 	bl	d66e0 <__aeabi_dcmplt>
   d73b8:	b940      	cbnz	r0, d73cc <_strtod_r+0x9a4>
   d73ba:	4630      	mov	r0, r6
   d73bc:	4639      	mov	r1, r7
   d73be:	2200      	movs	r2, #0
   d73c0:	4b94      	ldr	r3, [pc, #592]	; (d7614 <_strtod_r+0xbec>)
   d73c2:	f7fe ff1b 	bl	d61fc <__aeabi_dmul>
   d73c6:	4606      	mov	r6, r0
   d73c8:	460f      	mov	r7, r1
   d73ca:	e001      	b.n	d73d0 <_strtod_r+0x9a8>
   d73cc:	4f91      	ldr	r7, [pc, #580]	; (d7614 <_strtod_r+0xbec>)
   d73ce:	2600      	movs	r6, #0
   d73d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d73d4:	9614      	str	r6, [sp, #80]	; 0x50
   d73d6:	9315      	str	r3, [sp, #84]	; 0x54
   d73d8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d73dc:	e012      	b.n	d7404 <_strtod_r+0x9dc>
   d73de:	4b8d      	ldr	r3, [pc, #564]	; (d7614 <_strtod_r+0xbec>)
   d73e0:	4630      	mov	r0, r6
   d73e2:	4639      	mov	r1, r7
   d73e4:	2200      	movs	r2, #0
   d73e6:	f7fe ff09 	bl	d61fc <__aeabi_dmul>
   d73ea:	9b07      	ldr	r3, [sp, #28]
   d73ec:	4606      	mov	r6, r0
   d73ee:	460f      	mov	r7, r1
   d73f0:	b923      	cbnz	r3, d73fc <_strtod_r+0x9d4>
   d73f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d73f6:	900e      	str	r0, [sp, #56]	; 0x38
   d73f8:	930f      	str	r3, [sp, #60]	; 0x3c
   d73fa:	e001      	b.n	d7400 <_strtod_r+0x9d8>
   d73fc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7400:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d7404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7408:	0d1b      	lsrs	r3, r3, #20
   d740a:	051b      	lsls	r3, r3, #20
   d740c:	9306      	str	r3, [sp, #24]
   d740e:	9a06      	ldr	r2, [sp, #24]
   d7410:	4b81      	ldr	r3, [pc, #516]	; (d7618 <_strtod_r+0xbf0>)
   d7412:	429a      	cmp	r2, r3
   d7414:	d12b      	bne.n	d746e <_strtod_r+0xa46>
   d7416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d741a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d741e:	ec4b ab10 	vmov	d0, sl, fp
   d7422:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7426:	f000 feeb 	bl	d8200 <__ulp>
   d742a:	4640      	mov	r0, r8
   d742c:	ec53 2b10 	vmov	r2, r3, d0
   d7430:	4649      	mov	r1, r9
   d7432:	f7fe fee3 	bl	d61fc <__aeabi_dmul>
   d7436:	4652      	mov	r2, sl
   d7438:	465b      	mov	r3, fp
   d743a:	f7fe fd2d 	bl	d5e98 <__adddf3>
   d743e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7442:	0d1b      	lsrs	r3, r3, #20
   d7444:	4a75      	ldr	r2, [pc, #468]	; (d761c <_strtod_r+0xbf4>)
   d7446:	051b      	lsls	r3, r3, #20
   d7448:	4293      	cmp	r3, r2
   d744a:	4682      	mov	sl, r0
   d744c:	d90c      	bls.n	d7468 <_strtod_r+0xa40>
   d744e:	4b74      	ldr	r3, [pc, #464]	; (d7620 <_strtod_r+0xbf8>)
   d7450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7452:	429a      	cmp	r2, r3
   d7454:	d103      	bne.n	d745e <_strtod_r+0xa36>
   d7456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7458:	3301      	adds	r3, #1
   d745a:	f43f ad2c 	beq.w	d6eb6 <_strtod_r+0x48e>
   d745e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7620 <_strtod_r+0xbf8>
   d7462:	f04f 3aff 	mov.w	sl, #4294967295
   d7466:	e072      	b.n	d754e <_strtod_r+0xb26>
   d7468:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d746c:	e038      	b.n	d74e0 <_strtod_r+0xab8>
   d746e:	9b03      	ldr	r3, [sp, #12]
   d7470:	b333      	cbz	r3, d74c0 <_strtod_r+0xa98>
   d7472:	9b06      	ldr	r3, [sp, #24]
   d7474:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7478:	d822      	bhi.n	d74c0 <_strtod_r+0xa98>
   d747a:	a35d      	add	r3, pc, #372	; (adr r3, d75f0 <_strtod_r+0xbc8>)
   d747c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7480:	4630      	mov	r0, r6
   d7482:	4639      	mov	r1, r7
   d7484:	f7ff f936 	bl	d66f4 <__aeabi_dcmple>
   d7488:	b1a8      	cbz	r0, d74b6 <_strtod_r+0xa8e>
   d748a:	4639      	mov	r1, r7
   d748c:	4630      	mov	r0, r6
   d748e:	f7ff f977 	bl	d6780 <__aeabi_d2uiz>
   d7492:	2800      	cmp	r0, #0
   d7494:	bf08      	it	eq
   d7496:	2001      	moveq	r0, #1
   d7498:	f7fe fe3a 	bl	d6110 <__aeabi_ui2d>
   d749c:	9b07      	ldr	r3, [sp, #28]
   d749e:	4606      	mov	r6, r0
   d74a0:	460f      	mov	r7, r1
   d74a2:	b923      	cbnz	r3, d74ae <_strtod_r+0xa86>
   d74a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d74a8:	9010      	str	r0, [sp, #64]	; 0x40
   d74aa:	9311      	str	r3, [sp, #68]	; 0x44
   d74ac:	e001      	b.n	d74b2 <_strtod_r+0xa8a>
   d74ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d74b2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d74b6:	9a06      	ldr	r2, [sp, #24]
   d74b8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d74bc:	ebc2 0903 	rsb	r9, r2, r3
   d74c0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d74c4:	f000 fe9c 	bl	d8200 <__ulp>
   d74c8:	4640      	mov	r0, r8
   d74ca:	ec53 2b10 	vmov	r2, r3, d0
   d74ce:	4649      	mov	r1, r9
   d74d0:	f7fe fe94 	bl	d61fc <__aeabi_dmul>
   d74d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d74d8:	f7fe fcde 	bl	d5e98 <__adddf3>
   d74dc:	4682      	mov	sl, r0
   d74de:	468b      	mov	fp, r1
   d74e0:	9b03      	ldr	r3, [sp, #12]
   d74e2:	bba3      	cbnz	r3, d754e <_strtod_r+0xb26>
   d74e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d74e8:	0d1b      	lsrs	r3, r3, #20
   d74ea:	9a06      	ldr	r2, [sp, #24]
   d74ec:	051b      	lsls	r3, r3, #20
   d74ee:	429a      	cmp	r2, r3
   d74f0:	46d8      	mov	r8, fp
   d74f2:	d12c      	bne.n	d754e <_strtod_r+0xb26>
   d74f4:	4639      	mov	r1, r7
   d74f6:	4630      	mov	r0, r6
   d74f8:	f7ff f91a 	bl	d6730 <__aeabi_d2iz>
   d74fc:	f7fe fe18 	bl	d6130 <__aeabi_i2d>
   d7500:	460b      	mov	r3, r1
   d7502:	4602      	mov	r2, r0
   d7504:	4639      	mov	r1, r7
   d7506:	4630      	mov	r0, r6
   d7508:	f7fe fcc4 	bl	d5e94 <__aeabi_dsub>
   d750c:	9b07      	ldr	r3, [sp, #28]
   d750e:	4606      	mov	r6, r0
   d7510:	460f      	mov	r7, r1
   d7512:	b92b      	cbnz	r3, d7520 <_strtod_r+0xaf8>
   d7514:	f1ba 0f00 	cmp.w	sl, #0
   d7518:	d102      	bne.n	d7520 <_strtod_r+0xaf8>
   d751a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d751e:	b183      	cbz	r3, d7542 <_strtod_r+0xb1a>
   d7520:	a335      	add	r3, pc, #212	; (adr r3, d75f8 <_strtod_r+0xbd0>)
   d7522:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7526:	4630      	mov	r0, r6
   d7528:	4639      	mov	r1, r7
   d752a:	f7ff f8d9 	bl	d66e0 <__aeabi_dcmplt>
   d752e:	2800      	cmp	r0, #0
   d7530:	d131      	bne.n	d7596 <_strtod_r+0xb6e>
   d7532:	a333      	add	r3, pc, #204	; (adr r3, d7600 <_strtod_r+0xbd8>)
   d7534:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7538:	4630      	mov	r0, r6
   d753a:	4639      	mov	r1, r7
   d753c:	f7ff f8ee 	bl	d671c <__aeabi_dcmpgt>
   d7540:	e004      	b.n	d754c <_strtod_r+0xb24>
   d7542:	a331      	add	r3, pc, #196	; (adr r3, d7608 <_strtod_r+0xbe0>)
   d7544:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7548:	f7ff f8ca 	bl	d66e0 <__aeabi_dcmplt>
   d754c:	bb18      	cbnz	r0, d7596 <_strtod_r+0xb6e>
   d754e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7550:	9802      	ldr	r0, [sp, #8]
   d7552:	f000 fbc3 	bl	d7cdc <_Bfree>
   d7556:	9904      	ldr	r1, [sp, #16]
   d7558:	9802      	ldr	r0, [sp, #8]
   d755a:	f000 fbbf 	bl	d7cdc <_Bfree>
   d755e:	4629      	mov	r1, r5
   d7560:	9802      	ldr	r0, [sp, #8]
   d7562:	f000 fbbb 	bl	d7cdc <_Bfree>
   d7566:	4621      	mov	r1, r4
   d7568:	9802      	ldr	r0, [sp, #8]
   d756a:	f000 fbb7 	bl	d7cdc <_Bfree>
   d756e:	e56d      	b.n	d704c <_strtod_r+0x624>
   d7570:	9b03      	ldr	r3, [sp, #12]
   d7572:	b183      	cbz	r3, d7596 <_strtod_r+0xb6e>
   d7574:	4b2b      	ldr	r3, [pc, #172]	; (d7624 <_strtod_r+0xbfc>)
   d7576:	930b      	str	r3, [sp, #44]	; 0x2c
   d7578:	2300      	movs	r3, #0
   d757a:	930a      	str	r3, [sp, #40]	; 0x28
   d757c:	4650      	mov	r0, sl
   d757e:	4659      	mov	r1, fp
   d7580:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7584:	f7fe fe3a 	bl	d61fc <__aeabi_dmul>
   d7588:	4682      	mov	sl, r0
   d758a:	468b      	mov	fp, r1
   d758c:	b919      	cbnz	r1, d7596 <_strtod_r+0xb6e>
   d758e:	b910      	cbnz	r0, d7596 <_strtod_r+0xb6e>
   d7590:	9a02      	ldr	r2, [sp, #8]
   d7592:	2322      	movs	r3, #34	; 0x22
   d7594:	6013      	str	r3, [r2, #0]
   d7596:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7598:	9802      	ldr	r0, [sp, #8]
   d759a:	f000 fb9f 	bl	d7cdc <_Bfree>
   d759e:	9904      	ldr	r1, [sp, #16]
   d75a0:	9802      	ldr	r0, [sp, #8]
   d75a2:	f000 fb9b 	bl	d7cdc <_Bfree>
   d75a6:	4629      	mov	r1, r5
   d75a8:	9802      	ldr	r0, [sp, #8]
   d75aa:	f000 fb97 	bl	d7cdc <_Bfree>
   d75ae:	9905      	ldr	r1, [sp, #20]
   d75b0:	9802      	ldr	r0, [sp, #8]
   d75b2:	f000 fb93 	bl	d7cdc <_Bfree>
   d75b6:	4621      	mov	r1, r4
   d75b8:	9802      	ldr	r0, [sp, #8]
   d75ba:	f000 fb8f 	bl	d7cdc <_Bfree>
   d75be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d75c0:	b113      	cbz	r3, d75c8 <_strtod_r+0xba0>
   d75c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d75c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d75c6:	6013      	str	r3, [r2, #0]
   d75c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d75ca:	b11b      	cbz	r3, d75d4 <_strtod_r+0xbac>
   d75cc:	4652      	mov	r2, sl
   d75ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d75d2:	e007      	b.n	d75e4 <_strtod_r+0xbbc>
   d75d4:	4652      	mov	r2, sl
   d75d6:	465b      	mov	r3, fp
   d75d8:	e004      	b.n	d75e4 <_strtod_r+0xbbc>
   d75da:	2500      	movs	r5, #0
   d75dc:	462a      	mov	r2, r5
   d75de:	2101      	movs	r1, #1
   d75e0:	f7ff bb41 	b.w	d6c66 <_strtod_r+0x23e>
   d75e4:	ec43 2b10 	vmov	d0, r2, r3
   d75e8:	b01d      	add	sp, #116	; 0x74
   d75ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75ee:	bf00      	nop
   d75f0:	ffc00000 	.word	0xffc00000
   d75f4:	41dfffff 	.word	0x41dfffff
   d75f8:	94a03595 	.word	0x94a03595
   d75fc:	3fdfffff 	.word	0x3fdfffff
   d7600:	35afe535 	.word	0x35afe535
   d7604:	3fe00000 	.word	0x3fe00000
   d7608:	94a03595 	.word	0x94a03595
   d760c:	3fcfffff 	.word	0x3fcfffff
   d7610:	3ff00000 	.word	0x3ff00000
   d7614:	3fe00000 	.word	0x3fe00000
   d7618:	7fe00000 	.word	0x7fe00000
   d761c:	7c9fffff 	.word	0x7c9fffff
   d7620:	7fefffff 	.word	0x7fefffff
   d7624:	39500000 	.word	0x39500000

000d7628 <strtod>:
   d7628:	4b02      	ldr	r3, [pc, #8]	; (d7634 <strtod+0xc>)
   d762a:	460a      	mov	r2, r1
   d762c:	4601      	mov	r1, r0
   d762e:	6818      	ldr	r0, [r3, #0]
   d7630:	f7ff b9fa 	b.w	d6a28 <_strtod_r>
   d7634:	2003e288 	.word	0x2003e288

000d7638 <rshift>:
   d7638:	b5f0      	push	{r4, r5, r6, r7, lr}
   d763a:	6906      	ldr	r6, [r0, #16]
   d763c:	114b      	asrs	r3, r1, #5
   d763e:	42b3      	cmp	r3, r6
   d7640:	f100 0514 	add.w	r5, r0, #20
   d7644:	da27      	bge.n	d7696 <rshift+0x5e>
   d7646:	f011 011f 	ands.w	r1, r1, #31
   d764a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d764e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d7652:	d101      	bne.n	d7658 <rshift+0x20>
   d7654:	4629      	mov	r1, r5
   d7656:	e016      	b.n	d7686 <rshift+0x4e>
   d7658:	1d14      	adds	r4, r2, #4
   d765a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d765e:	f1c1 0e20 	rsb	lr, r1, #32
   d7662:	40ca      	lsrs	r2, r1
   d7664:	462b      	mov	r3, r5
   d7666:	42b4      	cmp	r4, r6
   d7668:	d209      	bcs.n	d767e <rshift+0x46>
   d766a:	6827      	ldr	r7, [r4, #0]
   d766c:	fa07 f70e 	lsl.w	r7, r7, lr
   d7670:	433a      	orrs	r2, r7
   d7672:	f843 2b04 	str.w	r2, [r3], #4
   d7676:	f854 2b04 	ldr.w	r2, [r4], #4
   d767a:	40ca      	lsrs	r2, r1
   d767c:	e7f3      	b.n	d7666 <rshift+0x2e>
   d767e:	601a      	str	r2, [r3, #0]
   d7680:	b152      	cbz	r2, d7698 <rshift+0x60>
   d7682:	3304      	adds	r3, #4
   d7684:	e008      	b.n	d7698 <rshift+0x60>
   d7686:	42b2      	cmp	r2, r6
   d7688:	460b      	mov	r3, r1
   d768a:	d205      	bcs.n	d7698 <rshift+0x60>
   d768c:	f852 3b04 	ldr.w	r3, [r2], #4
   d7690:	f841 3b04 	str.w	r3, [r1], #4
   d7694:	e7f7      	b.n	d7686 <rshift+0x4e>
   d7696:	462b      	mov	r3, r5
   d7698:	1b5b      	subs	r3, r3, r5
   d769a:	109b      	asrs	r3, r3, #2
   d769c:	6103      	str	r3, [r0, #16]
   d769e:	b903      	cbnz	r3, d76a2 <rshift+0x6a>
   d76a0:	6143      	str	r3, [r0, #20]
   d76a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76a4 <__hexdig_fun>:
   d76a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d76a8:	2b09      	cmp	r3, #9
   d76aa:	d801      	bhi.n	d76b0 <__hexdig_fun+0xc>
   d76ac:	3820      	subs	r0, #32
   d76ae:	e00a      	b.n	d76c6 <__hexdig_fun+0x22>
   d76b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d76b4:	2b05      	cmp	r3, #5
   d76b6:	d801      	bhi.n	d76bc <__hexdig_fun+0x18>
   d76b8:	3847      	subs	r0, #71	; 0x47
   d76ba:	e004      	b.n	d76c6 <__hexdig_fun+0x22>
   d76bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d76c0:	2b05      	cmp	r3, #5
   d76c2:	d802      	bhi.n	d76ca <__hexdig_fun+0x26>
   d76c4:	3827      	subs	r0, #39	; 0x27
   d76c6:	b2c0      	uxtb	r0, r0
   d76c8:	4770      	bx	lr
   d76ca:	2000      	movs	r0, #0
   d76cc:	4770      	bx	lr

000d76ce <__gethex>:
   d76ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76d2:	b08b      	sub	sp, #44	; 0x2c
   d76d4:	468a      	mov	sl, r1
   d76d6:	4690      	mov	r8, r2
   d76d8:	9306      	str	r3, [sp, #24]
   d76da:	9002      	str	r0, [sp, #8]
   d76dc:	f7ff f8d2 	bl	d6884 <_localeconv_r>
   d76e0:	6803      	ldr	r3, [r0, #0]
   d76e2:	9303      	str	r3, [sp, #12]
   d76e4:	4618      	mov	r0, r3
   d76e6:	f7ff f92f 	bl	d6948 <strlen>
   d76ea:	9b03      	ldr	r3, [sp, #12]
   d76ec:	9001      	str	r0, [sp, #4]
   d76ee:	4403      	add	r3, r0
   d76f0:	f04f 0b00 	mov.w	fp, #0
   d76f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d76f8:	9307      	str	r3, [sp, #28]
   d76fa:	f8da 3000 	ldr.w	r3, [sl]
   d76fe:	3302      	adds	r3, #2
   d7700:	461f      	mov	r7, r3
   d7702:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7706:	2830      	cmp	r0, #48	; 0x30
   d7708:	d102      	bne.n	d7710 <__gethex+0x42>
   d770a:	f10b 0b01 	add.w	fp, fp, #1
   d770e:	e7f7      	b.n	d7700 <__gethex+0x32>
   d7710:	f7ff ffc8 	bl	d76a4 <__hexdig_fun>
   d7714:	4604      	mov	r4, r0
   d7716:	b9e0      	cbnz	r0, d7752 <__gethex+0x84>
   d7718:	9a01      	ldr	r2, [sp, #4]
   d771a:	9903      	ldr	r1, [sp, #12]
   d771c:	4638      	mov	r0, r7
   d771e:	f7ff f93f 	bl	d69a0 <strncmp>
   d7722:	2800      	cmp	r0, #0
   d7724:	d134      	bne.n	d7790 <__gethex+0xc2>
   d7726:	9b01      	ldr	r3, [sp, #4]
   d7728:	5cf8      	ldrb	r0, [r7, r3]
   d772a:	18fe      	adds	r6, r7, r3
   d772c:	f7ff ffba 	bl	d76a4 <__hexdig_fun>
   d7730:	b380      	cbz	r0, d7794 <__gethex+0xc6>
   d7732:	4633      	mov	r3, r6
   d7734:	7818      	ldrb	r0, [r3, #0]
   d7736:	2830      	cmp	r0, #48	; 0x30
   d7738:	461f      	mov	r7, r3
   d773a:	f103 0301 	add.w	r3, r3, #1
   d773e:	d0f9      	beq.n	d7734 <__gethex+0x66>
   d7740:	f7ff ffb0 	bl	d76a4 <__hexdig_fun>
   d7744:	fab0 f580 	clz	r5, r0
   d7748:	096d      	lsrs	r5, r5, #5
   d774a:	4634      	mov	r4, r6
   d774c:	f04f 0b01 	mov.w	fp, #1
   d7750:	e001      	b.n	d7756 <__gethex+0x88>
   d7752:	2500      	movs	r5, #0
   d7754:	462c      	mov	r4, r5
   d7756:	463a      	mov	r2, r7
   d7758:	4616      	mov	r6, r2
   d775a:	3201      	adds	r2, #1
   d775c:	7830      	ldrb	r0, [r6, #0]
   d775e:	f7ff ffa1 	bl	d76a4 <__hexdig_fun>
   d7762:	2800      	cmp	r0, #0
   d7764:	d1f8      	bne.n	d7758 <__gethex+0x8a>
   d7766:	9a01      	ldr	r2, [sp, #4]
   d7768:	9903      	ldr	r1, [sp, #12]
   d776a:	4630      	mov	r0, r6
   d776c:	f7ff f918 	bl	d69a0 <strncmp>
   d7770:	b950      	cbnz	r0, d7788 <__gethex+0xba>
   d7772:	b954      	cbnz	r4, d778a <__gethex+0xbc>
   d7774:	9b01      	ldr	r3, [sp, #4]
   d7776:	18f4      	adds	r4, r6, r3
   d7778:	4622      	mov	r2, r4
   d777a:	4616      	mov	r6, r2
   d777c:	3201      	adds	r2, #1
   d777e:	7830      	ldrb	r0, [r6, #0]
   d7780:	f7ff ff90 	bl	d76a4 <__hexdig_fun>
   d7784:	2800      	cmp	r0, #0
   d7786:	d1f8      	bne.n	d777a <__gethex+0xac>
   d7788:	b134      	cbz	r4, d7798 <__gethex+0xca>
   d778a:	1ba4      	subs	r4, r4, r6
   d778c:	00a4      	lsls	r4, r4, #2
   d778e:	e003      	b.n	d7798 <__gethex+0xca>
   d7790:	463e      	mov	r6, r7
   d7792:	e000      	b.n	d7796 <__gethex+0xc8>
   d7794:	4604      	mov	r4, r0
   d7796:	2501      	movs	r5, #1
   d7798:	7833      	ldrb	r3, [r6, #0]
   d779a:	2b50      	cmp	r3, #80	; 0x50
   d779c:	d001      	beq.n	d77a2 <__gethex+0xd4>
   d779e:	2b70      	cmp	r3, #112	; 0x70
   d77a0:	d12a      	bne.n	d77f8 <__gethex+0x12a>
   d77a2:	7873      	ldrb	r3, [r6, #1]
   d77a4:	2b2b      	cmp	r3, #43	; 0x2b
   d77a6:	d008      	beq.n	d77ba <__gethex+0xec>
   d77a8:	2b2d      	cmp	r3, #45	; 0x2d
   d77aa:	d003      	beq.n	d77b4 <__gethex+0xe6>
   d77ac:	1c71      	adds	r1, r6, #1
   d77ae:	f04f 0900 	mov.w	r9, #0
   d77b2:	e005      	b.n	d77c0 <__gethex+0xf2>
   d77b4:	f04f 0901 	mov.w	r9, #1
   d77b8:	e001      	b.n	d77be <__gethex+0xf0>
   d77ba:	f04f 0900 	mov.w	r9, #0
   d77be:	1cb1      	adds	r1, r6, #2
   d77c0:	7808      	ldrb	r0, [r1, #0]
   d77c2:	f7ff ff6f 	bl	d76a4 <__hexdig_fun>
   d77c6:	1e43      	subs	r3, r0, #1
   d77c8:	b2db      	uxtb	r3, r3
   d77ca:	2b18      	cmp	r3, #24
   d77cc:	d814      	bhi.n	d77f8 <__gethex+0x12a>
   d77ce:	f1a0 0210 	sub.w	r2, r0, #16
   d77d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d77d6:	f7ff ff65 	bl	d76a4 <__hexdig_fun>
   d77da:	1e43      	subs	r3, r0, #1
   d77dc:	b2db      	uxtb	r3, r3
   d77de:	2b18      	cmp	r3, #24
   d77e0:	d804      	bhi.n	d77ec <__gethex+0x11e>
   d77e2:	230a      	movs	r3, #10
   d77e4:	fb03 0202 	mla	r2, r3, r2, r0
   d77e8:	3a10      	subs	r2, #16
   d77ea:	e7f2      	b.n	d77d2 <__gethex+0x104>
   d77ec:	f1b9 0f00 	cmp.w	r9, #0
   d77f0:	d000      	beq.n	d77f4 <__gethex+0x126>
   d77f2:	4252      	negs	r2, r2
   d77f4:	4414      	add	r4, r2
   d77f6:	e000      	b.n	d77fa <__gethex+0x12c>
   d77f8:	4631      	mov	r1, r6
   d77fa:	f8ca 1000 	str.w	r1, [sl]
   d77fe:	b12d      	cbz	r5, d780c <__gethex+0x13e>
   d7800:	f1bb 0f00 	cmp.w	fp, #0
   d7804:	bf14      	ite	ne
   d7806:	2000      	movne	r0, #0
   d7808:	2006      	moveq	r0, #6
   d780a:	e17c      	b.n	d7b06 <__gethex+0x438>
   d780c:	1bf3      	subs	r3, r6, r7
   d780e:	3b01      	subs	r3, #1
   d7810:	4629      	mov	r1, r5
   d7812:	2b07      	cmp	r3, #7
   d7814:	dd02      	ble.n	d781c <__gethex+0x14e>
   d7816:	3101      	adds	r1, #1
   d7818:	105b      	asrs	r3, r3, #1
   d781a:	e7fa      	b.n	d7812 <__gethex+0x144>
   d781c:	9802      	ldr	r0, [sp, #8]
   d781e:	f000 fa28 	bl	d7c72 <_Balloc>
   d7822:	9b01      	ldr	r3, [sp, #4]
   d7824:	f100 0a14 	add.w	sl, r0, #20
   d7828:	f04f 0900 	mov.w	r9, #0
   d782c:	f1c3 0301 	rsb	r3, r3, #1
   d7830:	4605      	mov	r5, r0
   d7832:	f8cd a010 	str.w	sl, [sp, #16]
   d7836:	46cb      	mov	fp, r9
   d7838:	9308      	str	r3, [sp, #32]
   d783a:	42b7      	cmp	r7, r6
   d783c:	d22f      	bcs.n	d789e <__gethex+0x1d0>
   d783e:	1e73      	subs	r3, r6, #1
   d7840:	9305      	str	r3, [sp, #20]
   d7842:	9a07      	ldr	r2, [sp, #28]
   d7844:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d7848:	4293      	cmp	r3, r2
   d784a:	d00b      	beq.n	d7864 <__gethex+0x196>
   d784c:	f1bb 0f20 	cmp.w	fp, #32
   d7850:	d116      	bne.n	d7880 <__gethex+0x1b2>
   d7852:	9b04      	ldr	r3, [sp, #16]
   d7854:	f8c3 9000 	str.w	r9, [r3]
   d7858:	3304      	adds	r3, #4
   d785a:	f04f 0900 	mov.w	r9, #0
   d785e:	9304      	str	r3, [sp, #16]
   d7860:	46cb      	mov	fp, r9
   d7862:	e00d      	b.n	d7880 <__gethex+0x1b2>
   d7864:	9b05      	ldr	r3, [sp, #20]
   d7866:	9a08      	ldr	r2, [sp, #32]
   d7868:	4413      	add	r3, r2
   d786a:	429f      	cmp	r7, r3
   d786c:	d8ee      	bhi.n	d784c <__gethex+0x17e>
   d786e:	4618      	mov	r0, r3
   d7870:	9a01      	ldr	r2, [sp, #4]
   d7872:	9903      	ldr	r1, [sp, #12]
   d7874:	9309      	str	r3, [sp, #36]	; 0x24
   d7876:	f7ff f893 	bl	d69a0 <strncmp>
   d787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d787c:	b168      	cbz	r0, d789a <__gethex+0x1cc>
   d787e:	e7e5      	b.n	d784c <__gethex+0x17e>
   d7880:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d7884:	f7ff ff0e 	bl	d76a4 <__hexdig_fun>
   d7888:	f000 000f 	and.w	r0, r0, #15
   d788c:	fa00 f00b 	lsl.w	r0, r0, fp
   d7890:	9b05      	ldr	r3, [sp, #20]
   d7892:	ea49 0900 	orr.w	r9, r9, r0
   d7896:	f10b 0b04 	add.w	fp, fp, #4
   d789a:	461e      	mov	r6, r3
   d789c:	e7cd      	b.n	d783a <__gethex+0x16c>
   d789e:	9804      	ldr	r0, [sp, #16]
   d78a0:	f840 9b04 	str.w	r9, [r0], #4
   d78a4:	ebca 0000 	rsb	r0, sl, r0
   d78a8:	1080      	asrs	r0, r0, #2
   d78aa:	6128      	str	r0, [r5, #16]
   d78ac:	0147      	lsls	r7, r0, #5
   d78ae:	4648      	mov	r0, r9
   d78b0:	f000 faa4 	bl	d7dfc <__hi0bits>
   d78b4:	f8d8 6000 	ldr.w	r6, [r8]
   d78b8:	1a38      	subs	r0, r7, r0
   d78ba:	42b0      	cmp	r0, r6
   d78bc:	dd26      	ble.n	d790c <__gethex+0x23e>
   d78be:	1b87      	subs	r7, r0, r6
   d78c0:	4639      	mov	r1, r7
   d78c2:	4628      	mov	r0, r5
   d78c4:	f000 fda3 	bl	d840e <__any_on>
   d78c8:	b1c8      	cbz	r0, d78fe <__gethex+0x230>
   d78ca:	1e7b      	subs	r3, r7, #1
   d78cc:	1159      	asrs	r1, r3, #5
   d78ce:	f003 021f 	and.w	r2, r3, #31
   d78d2:	f04f 0901 	mov.w	r9, #1
   d78d6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d78da:	fa09 f202 	lsl.w	r2, r9, r2
   d78de:	420a      	tst	r2, r1
   d78e0:	d00e      	beq.n	d7900 <__gethex+0x232>
   d78e2:	454b      	cmp	r3, r9
   d78e4:	dc02      	bgt.n	d78ec <__gethex+0x21e>
   d78e6:	f04f 0902 	mov.w	r9, #2
   d78ea:	e009      	b.n	d7900 <__gethex+0x232>
   d78ec:	1eb9      	subs	r1, r7, #2
   d78ee:	4628      	mov	r0, r5
   d78f0:	f000 fd8d 	bl	d840e <__any_on>
   d78f4:	2800      	cmp	r0, #0
   d78f6:	d0f6      	beq.n	d78e6 <__gethex+0x218>
   d78f8:	f04f 0903 	mov.w	r9, #3
   d78fc:	e000      	b.n	d7900 <__gethex+0x232>
   d78fe:	4681      	mov	r9, r0
   d7900:	4639      	mov	r1, r7
   d7902:	4628      	mov	r0, r5
   d7904:	f7ff fe98 	bl	d7638 <rshift>
   d7908:	443c      	add	r4, r7
   d790a:	e00c      	b.n	d7926 <__gethex+0x258>
   d790c:	da09      	bge.n	d7922 <__gethex+0x254>
   d790e:	1a37      	subs	r7, r6, r0
   d7910:	4629      	mov	r1, r5
   d7912:	463a      	mov	r2, r7
   d7914:	9802      	ldr	r0, [sp, #8]
   d7916:	f000 fba7 	bl	d8068 <__lshift>
   d791a:	1be4      	subs	r4, r4, r7
   d791c:	4605      	mov	r5, r0
   d791e:	f100 0a14 	add.w	sl, r0, #20
   d7922:	f04f 0900 	mov.w	r9, #0
   d7926:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d792a:	429c      	cmp	r4, r3
   d792c:	dd08      	ble.n	d7940 <__gethex+0x272>
   d792e:	9802      	ldr	r0, [sp, #8]
   d7930:	4629      	mov	r1, r5
   d7932:	f000 f9d3 	bl	d7cdc <_Bfree>
   d7936:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7938:	2300      	movs	r3, #0
   d793a:	6013      	str	r3, [r2, #0]
   d793c:	20a3      	movs	r0, #163	; 0xa3
   d793e:	e0e2      	b.n	d7b06 <__gethex+0x438>
   d7940:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d7944:	4284      	cmp	r4, r0
   d7946:	da53      	bge.n	d79f0 <__gethex+0x322>
   d7948:	1b04      	subs	r4, r0, r4
   d794a:	42a6      	cmp	r6, r4
   d794c:	dc2e      	bgt.n	d79ac <__gethex+0x2de>
   d794e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d7952:	2b02      	cmp	r3, #2
   d7954:	d01a      	beq.n	d798c <__gethex+0x2be>
   d7956:	2b03      	cmp	r3, #3
   d7958:	d01c      	beq.n	d7994 <__gethex+0x2c6>
   d795a:	2b01      	cmp	r3, #1
   d795c:	d11d      	bne.n	d799a <__gethex+0x2cc>
   d795e:	42a6      	cmp	r6, r4
   d7960:	d11b      	bne.n	d799a <__gethex+0x2cc>
   d7962:	2e01      	cmp	r6, #1
   d7964:	dc0b      	bgt.n	d797e <__gethex+0x2b0>
   d7966:	9a06      	ldr	r2, [sp, #24]
   d7968:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d796c:	6013      	str	r3, [r2, #0]
   d796e:	2301      	movs	r3, #1
   d7970:	612b      	str	r3, [r5, #16]
   d7972:	f8ca 3000 	str.w	r3, [sl]
   d7976:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7978:	2062      	movs	r0, #98	; 0x62
   d797a:	601d      	str	r5, [r3, #0]
   d797c:	e0c3      	b.n	d7b06 <__gethex+0x438>
   d797e:	1e71      	subs	r1, r6, #1
   d7980:	4628      	mov	r0, r5
   d7982:	f000 fd44 	bl	d840e <__any_on>
   d7986:	2800      	cmp	r0, #0
   d7988:	d1ed      	bne.n	d7966 <__gethex+0x298>
   d798a:	e006      	b.n	d799a <__gethex+0x2cc>
   d798c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d798e:	2b00      	cmp	r3, #0
   d7990:	d0e9      	beq.n	d7966 <__gethex+0x298>
   d7992:	e002      	b.n	d799a <__gethex+0x2cc>
   d7994:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7996:	2b00      	cmp	r3, #0
   d7998:	d1e5      	bne.n	d7966 <__gethex+0x298>
   d799a:	9802      	ldr	r0, [sp, #8]
   d799c:	4629      	mov	r1, r5
   d799e:	f000 f99d 	bl	d7cdc <_Bfree>
   d79a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d79a4:	2300      	movs	r3, #0
   d79a6:	6013      	str	r3, [r2, #0]
   d79a8:	2050      	movs	r0, #80	; 0x50
   d79aa:	e0ac      	b.n	d7b06 <__gethex+0x438>
   d79ac:	1e67      	subs	r7, r4, #1
   d79ae:	f1b9 0f00 	cmp.w	r9, #0
   d79b2:	d106      	bne.n	d79c2 <__gethex+0x2f4>
   d79b4:	b13f      	cbz	r7, d79c6 <__gethex+0x2f8>
   d79b6:	4639      	mov	r1, r7
   d79b8:	4628      	mov	r0, r5
   d79ba:	f000 fd28 	bl	d840e <__any_on>
   d79be:	4681      	mov	r9, r0
   d79c0:	e001      	b.n	d79c6 <__gethex+0x2f8>
   d79c2:	f04f 0901 	mov.w	r9, #1
   d79c6:	117a      	asrs	r2, r7, #5
   d79c8:	2301      	movs	r3, #1
   d79ca:	f007 071f 	and.w	r7, r7, #31
   d79ce:	fa03 f707 	lsl.w	r7, r3, r7
   d79d2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d79d6:	4621      	mov	r1, r4
   d79d8:	421f      	tst	r7, r3
   d79da:	4628      	mov	r0, r5
   d79dc:	bf18      	it	ne
   d79de:	f049 0902 	orrne.w	r9, r9, #2
   d79e2:	1b36      	subs	r6, r6, r4
   d79e4:	f7ff fe28 	bl	d7638 <rshift>
   d79e8:	2702      	movs	r7, #2
   d79ea:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d79ee:	e000      	b.n	d79f2 <__gethex+0x324>
   d79f0:	2701      	movs	r7, #1
   d79f2:	f1b9 0f00 	cmp.w	r9, #0
   d79f6:	f000 8081 	beq.w	d7afc <__gethex+0x42e>
   d79fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d79fe:	2b02      	cmp	r3, #2
   d7a00:	d00e      	beq.n	d7a20 <__gethex+0x352>
   d7a02:	2b03      	cmp	r3, #3
   d7a04:	d010      	beq.n	d7a28 <__gethex+0x35a>
   d7a06:	2b01      	cmp	r3, #1
   d7a08:	d176      	bne.n	d7af8 <__gethex+0x42a>
   d7a0a:	f019 0f02 	tst.w	r9, #2
   d7a0e:	d073      	beq.n	d7af8 <__gethex+0x42a>
   d7a10:	f8da 0000 	ldr.w	r0, [sl]
   d7a14:	ea49 0900 	orr.w	r9, r9, r0
   d7a18:	f019 0f01 	tst.w	r9, #1
   d7a1c:	d107      	bne.n	d7a2e <__gethex+0x360>
   d7a1e:	e06b      	b.n	d7af8 <__gethex+0x42a>
   d7a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7a22:	f1c3 0301 	rsb	r3, r3, #1
   d7a26:	9315      	str	r3, [sp, #84]	; 0x54
   d7a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7a2a:	2b00      	cmp	r3, #0
   d7a2c:	d064      	beq.n	d7af8 <__gethex+0x42a>
   d7a2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d7a32:	f105 0314 	add.w	r3, r5, #20
   d7a36:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d7a3a:	eb03 0109 	add.w	r1, r3, r9
   d7a3e:	2000      	movs	r0, #0
   d7a40:	681a      	ldr	r2, [r3, #0]
   d7a42:	f1b2 3fff 	cmp.w	r2, #4294967295
   d7a46:	d002      	beq.n	d7a4e <__gethex+0x380>
   d7a48:	3201      	adds	r2, #1
   d7a4a:	601a      	str	r2, [r3, #0]
   d7a4c:	e020      	b.n	d7a90 <__gethex+0x3c2>
   d7a4e:	f843 0b04 	str.w	r0, [r3], #4
   d7a52:	4299      	cmp	r1, r3
   d7a54:	d8f4      	bhi.n	d7a40 <__gethex+0x372>
   d7a56:	68ab      	ldr	r3, [r5, #8]
   d7a58:	459a      	cmp	sl, r3
   d7a5a:	db12      	blt.n	d7a82 <__gethex+0x3b4>
   d7a5c:	6869      	ldr	r1, [r5, #4]
   d7a5e:	9802      	ldr	r0, [sp, #8]
   d7a60:	3101      	adds	r1, #1
   d7a62:	f000 f906 	bl	d7c72 <_Balloc>
   d7a66:	692a      	ldr	r2, [r5, #16]
   d7a68:	3202      	adds	r2, #2
   d7a6a:	f105 010c 	add.w	r1, r5, #12
   d7a6e:	4683      	mov	fp, r0
   d7a70:	0092      	lsls	r2, r2, #2
   d7a72:	300c      	adds	r0, #12
   d7a74:	f7fe ff0a 	bl	d688c <memcpy>
   d7a78:	4629      	mov	r1, r5
   d7a7a:	9802      	ldr	r0, [sp, #8]
   d7a7c:	f000 f92e 	bl	d7cdc <_Bfree>
   d7a80:	465d      	mov	r5, fp
   d7a82:	692b      	ldr	r3, [r5, #16]
   d7a84:	1c5a      	adds	r2, r3, #1
   d7a86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d7a8a:	612a      	str	r2, [r5, #16]
   d7a8c:	2201      	movs	r2, #1
   d7a8e:	615a      	str	r2, [r3, #20]
   d7a90:	2f02      	cmp	r7, #2
   d7a92:	f105 0214 	add.w	r2, r5, #20
   d7a96:	d111      	bne.n	d7abc <__gethex+0x3ee>
   d7a98:	f8d8 3000 	ldr.w	r3, [r8]
   d7a9c:	3b01      	subs	r3, #1
   d7a9e:	429e      	cmp	r6, r3
   d7aa0:	d127      	bne.n	d7af2 <__gethex+0x424>
   d7aa2:	1171      	asrs	r1, r6, #5
   d7aa4:	2301      	movs	r3, #1
   d7aa6:	f006 061f 	and.w	r6, r6, #31
   d7aaa:	fa03 f606 	lsl.w	r6, r3, r6
   d7aae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d7ab2:	421e      	tst	r6, r3
   d7ab4:	bf0c      	ite	eq
   d7ab6:	2702      	moveq	r7, #2
   d7ab8:	2701      	movne	r7, #1
   d7aba:	e01a      	b.n	d7af2 <__gethex+0x424>
   d7abc:	692b      	ldr	r3, [r5, #16]
   d7abe:	459a      	cmp	sl, r3
   d7ac0:	da0a      	bge.n	d7ad8 <__gethex+0x40a>
   d7ac2:	2101      	movs	r1, #1
   d7ac4:	4628      	mov	r0, r5
   d7ac6:	f7ff fdb7 	bl	d7638 <rshift>
   d7aca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7ace:	3401      	adds	r4, #1
   d7ad0:	429c      	cmp	r4, r3
   d7ad2:	f73f af2c 	bgt.w	d792e <__gethex+0x260>
   d7ad6:	e00b      	b.n	d7af0 <__gethex+0x422>
   d7ad8:	f016 061f 	ands.w	r6, r6, #31
   d7adc:	d008      	beq.n	d7af0 <__gethex+0x422>
   d7ade:	4491      	add	r9, r2
   d7ae0:	f1c6 0620 	rsb	r6, r6, #32
   d7ae4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d7ae8:	f000 f988 	bl	d7dfc <__hi0bits>
   d7aec:	42b0      	cmp	r0, r6
   d7aee:	dbe8      	blt.n	d7ac2 <__gethex+0x3f4>
   d7af0:	2701      	movs	r7, #1
   d7af2:	f047 0720 	orr.w	r7, r7, #32
   d7af6:	e001      	b.n	d7afc <__gethex+0x42e>
   d7af8:	f047 0710 	orr.w	r7, r7, #16
   d7afc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7afe:	601d      	str	r5, [r3, #0]
   d7b00:	9b06      	ldr	r3, [sp, #24]
   d7b02:	4638      	mov	r0, r7
   d7b04:	601c      	str	r4, [r3, #0]
   d7b06:	b00b      	add	sp, #44	; 0x2c
   d7b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7b0c <L_shift>:
   d7b0c:	f1c2 0208 	rsb	r2, r2, #8
   d7b10:	0092      	lsls	r2, r2, #2
   d7b12:	b570      	push	{r4, r5, r6, lr}
   d7b14:	f1c2 0620 	rsb	r6, r2, #32
   d7b18:	6843      	ldr	r3, [r0, #4]
   d7b1a:	6805      	ldr	r5, [r0, #0]
   d7b1c:	fa03 f406 	lsl.w	r4, r3, r6
   d7b20:	432c      	orrs	r4, r5
   d7b22:	40d3      	lsrs	r3, r2
   d7b24:	6004      	str	r4, [r0, #0]
   d7b26:	f840 3f04 	str.w	r3, [r0, #4]!
   d7b2a:	4288      	cmp	r0, r1
   d7b2c:	d3f4      	bcc.n	d7b18 <L_shift+0xc>
   d7b2e:	bd70      	pop	{r4, r5, r6, pc}

000d7b30 <__match>:
   d7b30:	b530      	push	{r4, r5, lr}
   d7b32:	6803      	ldr	r3, [r0, #0]
   d7b34:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b38:	3301      	adds	r3, #1
   d7b3a:	b14c      	cbz	r4, d7b50 <__match+0x20>
   d7b3c:	781a      	ldrb	r2, [r3, #0]
   d7b3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d7b42:	2d19      	cmp	r5, #25
   d7b44:	bf98      	it	ls
   d7b46:	3220      	addls	r2, #32
   d7b48:	42a2      	cmp	r2, r4
   d7b4a:	d0f3      	beq.n	d7b34 <__match+0x4>
   d7b4c:	2000      	movs	r0, #0
   d7b4e:	bd30      	pop	{r4, r5, pc}
   d7b50:	6003      	str	r3, [r0, #0]
   d7b52:	2001      	movs	r0, #1
   d7b54:	bd30      	pop	{r4, r5, pc}

000d7b56 <__hexnan>:
   d7b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b5a:	680b      	ldr	r3, [r1, #0]
   d7b5c:	f8d0 b000 	ldr.w	fp, [r0]
   d7b60:	115e      	asrs	r6, r3, #5
   d7b62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d7b66:	f013 031f 	ands.w	r3, r3, #31
   d7b6a:	b085      	sub	sp, #20
   d7b6c:	bf18      	it	ne
   d7b6e:	3604      	addne	r6, #4
   d7b70:	1f35      	subs	r5, r6, #4
   d7b72:	4617      	mov	r7, r2
   d7b74:	2200      	movs	r2, #0
   d7b76:	4682      	mov	sl, r0
   d7b78:	9301      	str	r3, [sp, #4]
   d7b7a:	f846 2c04 	str.w	r2, [r6, #-4]
   d7b7e:	46a8      	mov	r8, r5
   d7b80:	462c      	mov	r4, r5
   d7b82:	9200      	str	r2, [sp, #0]
   d7b84:	4691      	mov	r9, r2
   d7b86:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d7b8a:	2900      	cmp	r1, #0
   d7b8c:	d03c      	beq.n	d7c08 <__hexnan+0xb2>
   d7b8e:	4608      	mov	r0, r1
   d7b90:	9203      	str	r2, [sp, #12]
   d7b92:	9102      	str	r1, [sp, #8]
   d7b94:	f7ff fd86 	bl	d76a4 <__hexdig_fun>
   d7b98:	9a03      	ldr	r2, [sp, #12]
   d7b9a:	bb00      	cbnz	r0, d7bde <__hexnan+0x88>
   d7b9c:	9902      	ldr	r1, [sp, #8]
   d7b9e:	2920      	cmp	r1, #32
   d7ba0:	d816      	bhi.n	d7bd0 <__hexnan+0x7a>
   d7ba2:	9b00      	ldr	r3, [sp, #0]
   d7ba4:	4599      	cmp	r9, r3
   d7ba6:	ddee      	ble.n	d7b86 <__hexnan+0x30>
   d7ba8:	4544      	cmp	r4, r8
   d7baa:	d205      	bcs.n	d7bb8 <__hexnan+0x62>
   d7bac:	2a07      	cmp	r2, #7
   d7bae:	dc03      	bgt.n	d7bb8 <__hexnan+0x62>
   d7bb0:	4641      	mov	r1, r8
   d7bb2:	4620      	mov	r0, r4
   d7bb4:	f7ff ffaa 	bl	d7b0c <L_shift>
   d7bb8:	42bc      	cmp	r4, r7
   d7bba:	d923      	bls.n	d7c04 <__hexnan+0xae>
   d7bbc:	2300      	movs	r3, #0
   d7bbe:	f1a4 0804 	sub.w	r8, r4, #4
   d7bc2:	f844 3c04 	str.w	r3, [r4, #-4]
   d7bc6:	f8cd 9000 	str.w	r9, [sp]
   d7bca:	4644      	mov	r4, r8
   d7bcc:	461a      	mov	r2, r3
   d7bce:	e7da      	b.n	d7b86 <__hexnan+0x30>
   d7bd0:	2929      	cmp	r1, #41	; 0x29
   d7bd2:	d148      	bne.n	d7c66 <__hexnan+0x110>
   d7bd4:	f10b 0301 	add.w	r3, fp, #1
   d7bd8:	f8ca 3000 	str.w	r3, [sl]
   d7bdc:	e014      	b.n	d7c08 <__hexnan+0xb2>
   d7bde:	3201      	adds	r2, #1
   d7be0:	2a08      	cmp	r2, #8
   d7be2:	f109 0901 	add.w	r9, r9, #1
   d7be6:	dd06      	ble.n	d7bf6 <__hexnan+0xa0>
   d7be8:	42bc      	cmp	r4, r7
   d7bea:	d9cc      	bls.n	d7b86 <__hexnan+0x30>
   d7bec:	2300      	movs	r3, #0
   d7bee:	f844 3c04 	str.w	r3, [r4, #-4]
   d7bf2:	2201      	movs	r2, #1
   d7bf4:	3c04      	subs	r4, #4
   d7bf6:	6821      	ldr	r1, [r4, #0]
   d7bf8:	f000 000f 	and.w	r0, r0, #15
   d7bfc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d7c00:	6020      	str	r0, [r4, #0]
   d7c02:	e7c0      	b.n	d7b86 <__hexnan+0x30>
   d7c04:	2208      	movs	r2, #8
   d7c06:	e7be      	b.n	d7b86 <__hexnan+0x30>
   d7c08:	f1b9 0f00 	cmp.w	r9, #0
   d7c0c:	d02b      	beq.n	d7c66 <__hexnan+0x110>
   d7c0e:	4544      	cmp	r4, r8
   d7c10:	d205      	bcs.n	d7c1e <__hexnan+0xc8>
   d7c12:	2a07      	cmp	r2, #7
   d7c14:	dc03      	bgt.n	d7c1e <__hexnan+0xc8>
   d7c16:	4641      	mov	r1, r8
   d7c18:	4620      	mov	r0, r4
   d7c1a:	f7ff ff77 	bl	d7b0c <L_shift>
   d7c1e:	42bc      	cmp	r4, r7
   d7c20:	d90c      	bls.n	d7c3c <__hexnan+0xe6>
   d7c22:	463b      	mov	r3, r7
   d7c24:	f854 2b04 	ldr.w	r2, [r4], #4
   d7c28:	f843 2b04 	str.w	r2, [r3], #4
   d7c2c:	42a5      	cmp	r5, r4
   d7c2e:	d2f9      	bcs.n	d7c24 <__hexnan+0xce>
   d7c30:	2200      	movs	r2, #0
   d7c32:	f843 2b04 	str.w	r2, [r3], #4
   d7c36:	429d      	cmp	r5, r3
   d7c38:	d2fb      	bcs.n	d7c32 <__hexnan+0xdc>
   d7c3a:	e00b      	b.n	d7c54 <__hexnan+0xfe>
   d7c3c:	9b01      	ldr	r3, [sp, #4]
   d7c3e:	b14b      	cbz	r3, d7c54 <__hexnan+0xfe>
   d7c40:	f1c3 0220 	rsb	r2, r3, #32
   d7c44:	f04f 33ff 	mov.w	r3, #4294967295
   d7c48:	40d3      	lsrs	r3, r2
   d7c4a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d7c4e:	4013      	ands	r3, r2
   d7c50:	f846 3c04 	str.w	r3, [r6, #-4]
   d7c54:	682b      	ldr	r3, [r5, #0]
   d7c56:	b943      	cbnz	r3, d7c6a <__hexnan+0x114>
   d7c58:	42bd      	cmp	r5, r7
   d7c5a:	d102      	bne.n	d7c62 <__hexnan+0x10c>
   d7c5c:	2301      	movs	r3, #1
   d7c5e:	602b      	str	r3, [r5, #0]
   d7c60:	e003      	b.n	d7c6a <__hexnan+0x114>
   d7c62:	3d04      	subs	r5, #4
   d7c64:	e7f6      	b.n	d7c54 <__hexnan+0xfe>
   d7c66:	2004      	movs	r0, #4
   d7c68:	e000      	b.n	d7c6c <__hexnan+0x116>
   d7c6a:	2005      	movs	r0, #5
   d7c6c:	b005      	add	sp, #20
   d7c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7c72 <_Balloc>:
   d7c72:	b570      	push	{r4, r5, r6, lr}
   d7c74:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d7c76:	4604      	mov	r4, r0
   d7c78:	460e      	mov	r6, r1
   d7c7a:	b93d      	cbnz	r5, d7c8c <_Balloc+0x1a>
   d7c7c:	2010      	movs	r0, #16
   d7c7e:	f7fc ffbb 	bl	d4bf8 <malloc>
   d7c82:	6260      	str	r0, [r4, #36]	; 0x24
   d7c84:	6045      	str	r5, [r0, #4]
   d7c86:	6085      	str	r5, [r0, #8]
   d7c88:	6005      	str	r5, [r0, #0]
   d7c8a:	60c5      	str	r5, [r0, #12]
   d7c8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d7c8e:	68eb      	ldr	r3, [r5, #12]
   d7c90:	b143      	cbz	r3, d7ca4 <_Balloc+0x32>
   d7c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7c94:	68db      	ldr	r3, [r3, #12]
   d7c96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d7c9a:	b178      	cbz	r0, d7cbc <_Balloc+0x4a>
   d7c9c:	6802      	ldr	r2, [r0, #0]
   d7c9e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d7ca2:	e017      	b.n	d7cd4 <_Balloc+0x62>
   d7ca4:	2221      	movs	r2, #33	; 0x21
   d7ca6:	2104      	movs	r1, #4
   d7ca8:	4620      	mov	r0, r4
   d7caa:	f000 fbd2 	bl	d8452 <_calloc_r>
   d7cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7cb0:	60e8      	str	r0, [r5, #12]
   d7cb2:	68db      	ldr	r3, [r3, #12]
   d7cb4:	2b00      	cmp	r3, #0
   d7cb6:	d1ec      	bne.n	d7c92 <_Balloc+0x20>
   d7cb8:	2000      	movs	r0, #0
   d7cba:	bd70      	pop	{r4, r5, r6, pc}
   d7cbc:	2101      	movs	r1, #1
   d7cbe:	fa01 f506 	lsl.w	r5, r1, r6
   d7cc2:	1d6a      	adds	r2, r5, #5
   d7cc4:	0092      	lsls	r2, r2, #2
   d7cc6:	4620      	mov	r0, r4
   d7cc8:	f000 fbc3 	bl	d8452 <_calloc_r>
   d7ccc:	2800      	cmp	r0, #0
   d7cce:	d0f3      	beq.n	d7cb8 <_Balloc+0x46>
   d7cd0:	6046      	str	r6, [r0, #4]
   d7cd2:	6085      	str	r5, [r0, #8]
   d7cd4:	2300      	movs	r3, #0
   d7cd6:	6103      	str	r3, [r0, #16]
   d7cd8:	60c3      	str	r3, [r0, #12]
   d7cda:	bd70      	pop	{r4, r5, r6, pc}

000d7cdc <_Bfree>:
   d7cdc:	b570      	push	{r4, r5, r6, lr}
   d7cde:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d7ce0:	4606      	mov	r6, r0
   d7ce2:	460d      	mov	r5, r1
   d7ce4:	b93c      	cbnz	r4, d7cf6 <_Bfree+0x1a>
   d7ce6:	2010      	movs	r0, #16
   d7ce8:	f7fc ff86 	bl	d4bf8 <malloc>
   d7cec:	6270      	str	r0, [r6, #36]	; 0x24
   d7cee:	6044      	str	r4, [r0, #4]
   d7cf0:	6084      	str	r4, [r0, #8]
   d7cf2:	6004      	str	r4, [r0, #0]
   d7cf4:	60c4      	str	r4, [r0, #12]
   d7cf6:	b13d      	cbz	r5, d7d08 <_Bfree+0x2c>
   d7cf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d7cfa:	686a      	ldr	r2, [r5, #4]
   d7cfc:	68db      	ldr	r3, [r3, #12]
   d7cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d7d02:	6029      	str	r1, [r5, #0]
   d7d04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d7d08:	bd70      	pop	{r4, r5, r6, pc}

000d7d0a <__multadd>:
   d7d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d0e:	690d      	ldr	r5, [r1, #16]
   d7d10:	461f      	mov	r7, r3
   d7d12:	4606      	mov	r6, r0
   d7d14:	460c      	mov	r4, r1
   d7d16:	f101 0e14 	add.w	lr, r1, #20
   d7d1a:	2300      	movs	r3, #0
   d7d1c:	f8de 0000 	ldr.w	r0, [lr]
   d7d20:	b281      	uxth	r1, r0
   d7d22:	fb02 7101 	mla	r1, r2, r1, r7
   d7d26:	0c0f      	lsrs	r7, r1, #16
   d7d28:	0c00      	lsrs	r0, r0, #16
   d7d2a:	fb02 7000 	mla	r0, r2, r0, r7
   d7d2e:	b289      	uxth	r1, r1
   d7d30:	3301      	adds	r3, #1
   d7d32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d7d36:	429d      	cmp	r5, r3
   d7d38:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d7d3c:	f84e 1b04 	str.w	r1, [lr], #4
   d7d40:	dcec      	bgt.n	d7d1c <__multadd+0x12>
   d7d42:	b1d7      	cbz	r7, d7d7a <__multadd+0x70>
   d7d44:	68a3      	ldr	r3, [r4, #8]
   d7d46:	429d      	cmp	r5, r3
   d7d48:	db12      	blt.n	d7d70 <__multadd+0x66>
   d7d4a:	6861      	ldr	r1, [r4, #4]
   d7d4c:	4630      	mov	r0, r6
   d7d4e:	3101      	adds	r1, #1
   d7d50:	f7ff ff8f 	bl	d7c72 <_Balloc>
   d7d54:	6922      	ldr	r2, [r4, #16]
   d7d56:	3202      	adds	r2, #2
   d7d58:	f104 010c 	add.w	r1, r4, #12
   d7d5c:	4680      	mov	r8, r0
   d7d5e:	0092      	lsls	r2, r2, #2
   d7d60:	300c      	adds	r0, #12
   d7d62:	f7fe fd93 	bl	d688c <memcpy>
   d7d66:	4621      	mov	r1, r4
   d7d68:	4630      	mov	r0, r6
   d7d6a:	f7ff ffb7 	bl	d7cdc <_Bfree>
   d7d6e:	4644      	mov	r4, r8
   d7d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d7d74:	3501      	adds	r5, #1
   d7d76:	615f      	str	r7, [r3, #20]
   d7d78:	6125      	str	r5, [r4, #16]
   d7d7a:	4620      	mov	r0, r4
   d7d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d80 <__s2b>:
   d7d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7d84:	460c      	mov	r4, r1
   d7d86:	4615      	mov	r5, r2
   d7d88:	461f      	mov	r7, r3
   d7d8a:	2209      	movs	r2, #9
   d7d8c:	3308      	adds	r3, #8
   d7d8e:	4606      	mov	r6, r0
   d7d90:	fb93 f3f2 	sdiv	r3, r3, r2
   d7d94:	2100      	movs	r1, #0
   d7d96:	2201      	movs	r2, #1
   d7d98:	429a      	cmp	r2, r3
   d7d9a:	da02      	bge.n	d7da2 <__s2b+0x22>
   d7d9c:	0052      	lsls	r2, r2, #1
   d7d9e:	3101      	adds	r1, #1
   d7da0:	e7fa      	b.n	d7d98 <__s2b+0x18>
   d7da2:	4630      	mov	r0, r6
   d7da4:	f7ff ff65 	bl	d7c72 <_Balloc>
   d7da8:	9b08      	ldr	r3, [sp, #32]
   d7daa:	6143      	str	r3, [r0, #20]
   d7dac:	2d09      	cmp	r5, #9
   d7dae:	f04f 0301 	mov.w	r3, #1
   d7db2:	6103      	str	r3, [r0, #16]
   d7db4:	dd11      	ble.n	d7dda <__s2b+0x5a>
   d7db6:	f104 0809 	add.w	r8, r4, #9
   d7dba:	46c1      	mov	r9, r8
   d7dbc:	442c      	add	r4, r5
   d7dbe:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7dc2:	4601      	mov	r1, r0
   d7dc4:	3b30      	subs	r3, #48	; 0x30
   d7dc6:	220a      	movs	r2, #10
   d7dc8:	4630      	mov	r0, r6
   d7dca:	f7ff ff9e 	bl	d7d0a <__multadd>
   d7dce:	45a1      	cmp	r9, r4
   d7dd0:	d1f5      	bne.n	d7dbe <__s2b+0x3e>
   d7dd2:	eb08 0405 	add.w	r4, r8, r5
   d7dd6:	3c08      	subs	r4, #8
   d7dd8:	e001      	b.n	d7dde <__s2b+0x5e>
   d7dda:	340a      	adds	r4, #10
   d7ddc:	2509      	movs	r5, #9
   d7dde:	1b2d      	subs	r5, r5, r4
   d7de0:	1963      	adds	r3, r4, r5
   d7de2:	429f      	cmp	r7, r3
   d7de4:	dd08      	ble.n	d7df8 <__s2b+0x78>
   d7de6:	f814 3b01 	ldrb.w	r3, [r4], #1
   d7dea:	4601      	mov	r1, r0
   d7dec:	3b30      	subs	r3, #48	; 0x30
   d7dee:	220a      	movs	r2, #10
   d7df0:	4630      	mov	r0, r6
   d7df2:	f7ff ff8a 	bl	d7d0a <__multadd>
   d7df6:	e7f3      	b.n	d7de0 <__s2b+0x60>
   d7df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7dfc <__hi0bits>:
   d7dfc:	0c03      	lsrs	r3, r0, #16
   d7dfe:	041b      	lsls	r3, r3, #16
   d7e00:	b913      	cbnz	r3, d7e08 <__hi0bits+0xc>
   d7e02:	0400      	lsls	r0, r0, #16
   d7e04:	2310      	movs	r3, #16
   d7e06:	e000      	b.n	d7e0a <__hi0bits+0xe>
   d7e08:	2300      	movs	r3, #0
   d7e0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d7e0e:	bf04      	itt	eq
   d7e10:	0200      	lsleq	r0, r0, #8
   d7e12:	3308      	addeq	r3, #8
   d7e14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d7e18:	bf04      	itt	eq
   d7e1a:	0100      	lsleq	r0, r0, #4
   d7e1c:	3304      	addeq	r3, #4
   d7e1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d7e22:	bf04      	itt	eq
   d7e24:	0080      	lsleq	r0, r0, #2
   d7e26:	3302      	addeq	r3, #2
   d7e28:	2800      	cmp	r0, #0
   d7e2a:	db03      	blt.n	d7e34 <__hi0bits+0x38>
   d7e2c:	0042      	lsls	r2, r0, #1
   d7e2e:	d503      	bpl.n	d7e38 <__hi0bits+0x3c>
   d7e30:	1c58      	adds	r0, r3, #1
   d7e32:	4770      	bx	lr
   d7e34:	4618      	mov	r0, r3
   d7e36:	4770      	bx	lr
   d7e38:	2020      	movs	r0, #32
   d7e3a:	4770      	bx	lr

000d7e3c <__lo0bits>:
   d7e3c:	6803      	ldr	r3, [r0, #0]
   d7e3e:	f013 0207 	ands.w	r2, r3, #7
   d7e42:	d00b      	beq.n	d7e5c <__lo0bits+0x20>
   d7e44:	07d9      	lsls	r1, r3, #31
   d7e46:	d422      	bmi.n	d7e8e <__lo0bits+0x52>
   d7e48:	079a      	lsls	r2, r3, #30
   d7e4a:	bf4b      	itete	mi
   d7e4c:	085b      	lsrmi	r3, r3, #1
   d7e4e:	089b      	lsrpl	r3, r3, #2
   d7e50:	6003      	strmi	r3, [r0, #0]
   d7e52:	6003      	strpl	r3, [r0, #0]
   d7e54:	bf4c      	ite	mi
   d7e56:	2001      	movmi	r0, #1
   d7e58:	2002      	movpl	r0, #2
   d7e5a:	4770      	bx	lr
   d7e5c:	b299      	uxth	r1, r3
   d7e5e:	b909      	cbnz	r1, d7e64 <__lo0bits+0x28>
   d7e60:	0c1b      	lsrs	r3, r3, #16
   d7e62:	2210      	movs	r2, #16
   d7e64:	f013 0fff 	tst.w	r3, #255	; 0xff
   d7e68:	bf04      	itt	eq
   d7e6a:	0a1b      	lsreq	r3, r3, #8
   d7e6c:	3208      	addeq	r2, #8
   d7e6e:	0719      	lsls	r1, r3, #28
   d7e70:	bf04      	itt	eq
   d7e72:	091b      	lsreq	r3, r3, #4
   d7e74:	3204      	addeq	r2, #4
   d7e76:	0799      	lsls	r1, r3, #30
   d7e78:	bf04      	itt	eq
   d7e7a:	089b      	lsreq	r3, r3, #2
   d7e7c:	3202      	addeq	r2, #2
   d7e7e:	07d9      	lsls	r1, r3, #31
   d7e80:	d402      	bmi.n	d7e88 <__lo0bits+0x4c>
   d7e82:	085b      	lsrs	r3, r3, #1
   d7e84:	d005      	beq.n	d7e92 <__lo0bits+0x56>
   d7e86:	3201      	adds	r2, #1
   d7e88:	6003      	str	r3, [r0, #0]
   d7e8a:	4610      	mov	r0, r2
   d7e8c:	4770      	bx	lr
   d7e8e:	2000      	movs	r0, #0
   d7e90:	4770      	bx	lr
   d7e92:	2020      	movs	r0, #32
   d7e94:	4770      	bx	lr

000d7e96 <__i2b>:
   d7e96:	b510      	push	{r4, lr}
   d7e98:	460c      	mov	r4, r1
   d7e9a:	2101      	movs	r1, #1
   d7e9c:	f7ff fee9 	bl	d7c72 <_Balloc>
   d7ea0:	2201      	movs	r2, #1
   d7ea2:	6144      	str	r4, [r0, #20]
   d7ea4:	6102      	str	r2, [r0, #16]
   d7ea6:	bd10      	pop	{r4, pc}

000d7ea8 <__multiply>:
   d7ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7eac:	4614      	mov	r4, r2
   d7eae:	690a      	ldr	r2, [r1, #16]
   d7eb0:	6923      	ldr	r3, [r4, #16]
   d7eb2:	429a      	cmp	r2, r3
   d7eb4:	bfb8      	it	lt
   d7eb6:	460b      	movlt	r3, r1
   d7eb8:	4688      	mov	r8, r1
   d7eba:	bfbc      	itt	lt
   d7ebc:	46a0      	movlt	r8, r4
   d7ebe:	461c      	movlt	r4, r3
   d7ec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d7ec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7ec8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d7ed0:	eb07 0609 	add.w	r6, r7, r9
   d7ed4:	429e      	cmp	r6, r3
   d7ed6:	bfc8      	it	gt
   d7ed8:	3101      	addgt	r1, #1
   d7eda:	f7ff feca 	bl	d7c72 <_Balloc>
   d7ede:	f100 0514 	add.w	r5, r0, #20
   d7ee2:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d7ee6:	462b      	mov	r3, r5
   d7ee8:	2200      	movs	r2, #0
   d7eea:	4563      	cmp	r3, ip
   d7eec:	d202      	bcs.n	d7ef4 <__multiply+0x4c>
   d7eee:	f843 2b04 	str.w	r2, [r3], #4
   d7ef2:	e7fa      	b.n	d7eea <__multiply+0x42>
   d7ef4:	f104 0214 	add.w	r2, r4, #20
   d7ef8:	f108 0114 	add.w	r1, r8, #20
   d7efc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d7f00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d7f04:	9300      	str	r3, [sp, #0]
   d7f06:	9b00      	ldr	r3, [sp, #0]
   d7f08:	9201      	str	r2, [sp, #4]
   d7f0a:	4293      	cmp	r3, r2
   d7f0c:	d957      	bls.n	d7fbe <__multiply+0x116>
   d7f0e:	f8b2 b000 	ldrh.w	fp, [r2]
   d7f12:	f1bb 0f00 	cmp.w	fp, #0
   d7f16:	d023      	beq.n	d7f60 <__multiply+0xb8>
   d7f18:	4689      	mov	r9, r1
   d7f1a:	46ae      	mov	lr, r5
   d7f1c:	f04f 0800 	mov.w	r8, #0
   d7f20:	f859 4b04 	ldr.w	r4, [r9], #4
   d7f24:	f8be a000 	ldrh.w	sl, [lr]
   d7f28:	b2a3      	uxth	r3, r4
   d7f2a:	fb0b a303 	mla	r3, fp, r3, sl
   d7f2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d7f32:	f8de 4000 	ldr.w	r4, [lr]
   d7f36:	4443      	add	r3, r8
   d7f38:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d7f3c:	fb0b 840a 	mla	r4, fp, sl, r8
   d7f40:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d7f44:	46f2      	mov	sl, lr
   d7f46:	b29b      	uxth	r3, r3
   d7f48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d7f4c:	454f      	cmp	r7, r9
   d7f4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d7f52:	f84a 3b04 	str.w	r3, [sl], #4
   d7f56:	d901      	bls.n	d7f5c <__multiply+0xb4>
   d7f58:	46d6      	mov	lr, sl
   d7f5a:	e7e1      	b.n	d7f20 <__multiply+0x78>
   d7f5c:	f8ce 8004 	str.w	r8, [lr, #4]
   d7f60:	9b01      	ldr	r3, [sp, #4]
   d7f62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d7f66:	3204      	adds	r2, #4
   d7f68:	f1ba 0f00 	cmp.w	sl, #0
   d7f6c:	d021      	beq.n	d7fb2 <__multiply+0x10a>
   d7f6e:	682b      	ldr	r3, [r5, #0]
   d7f70:	462c      	mov	r4, r5
   d7f72:	4689      	mov	r9, r1
   d7f74:	f04f 0800 	mov.w	r8, #0
   d7f78:	f8b9 e000 	ldrh.w	lr, [r9]
   d7f7c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d7f80:	fb0a be0e 	mla	lr, sl, lr, fp
   d7f84:	44f0      	add	r8, lr
   d7f86:	46a3      	mov	fp, r4
   d7f88:	b29b      	uxth	r3, r3
   d7f8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d7f8e:	f84b 3b04 	str.w	r3, [fp], #4
   d7f92:	f859 3b04 	ldr.w	r3, [r9], #4
   d7f96:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d7f9a:	0c1b      	lsrs	r3, r3, #16
   d7f9c:	fb0a e303 	mla	r3, sl, r3, lr
   d7fa0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d7fa4:	454f      	cmp	r7, r9
   d7fa6:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d7faa:	d901      	bls.n	d7fb0 <__multiply+0x108>
   d7fac:	465c      	mov	r4, fp
   d7fae:	e7e3      	b.n	d7f78 <__multiply+0xd0>
   d7fb0:	6063      	str	r3, [r4, #4]
   d7fb2:	3504      	adds	r5, #4
   d7fb4:	e7a7      	b.n	d7f06 <__multiply+0x5e>
   d7fb6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d7fba:	b913      	cbnz	r3, d7fc2 <__multiply+0x11a>
   d7fbc:	3e01      	subs	r6, #1
   d7fbe:	2e00      	cmp	r6, #0
   d7fc0:	dcf9      	bgt.n	d7fb6 <__multiply+0x10e>
   d7fc2:	6106      	str	r6, [r0, #16]
   d7fc4:	b003      	add	sp, #12
   d7fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d7fcc <__pow5mult>:
   d7fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7fd0:	4615      	mov	r5, r2
   d7fd2:	f012 0203 	ands.w	r2, r2, #3
   d7fd6:	4606      	mov	r6, r0
   d7fd8:	460f      	mov	r7, r1
   d7fda:	d007      	beq.n	d7fec <__pow5mult+0x20>
   d7fdc:	3a01      	subs	r2, #1
   d7fde:	4c21      	ldr	r4, [pc, #132]	; (d8064 <__pow5mult+0x98>)
   d7fe0:	2300      	movs	r3, #0
   d7fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d7fe6:	f7ff fe90 	bl	d7d0a <__multadd>
   d7fea:	4607      	mov	r7, r0
   d7fec:	10ad      	asrs	r5, r5, #2
   d7fee:	d036      	beq.n	d805e <__pow5mult+0x92>
   d7ff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d7ff2:	b93c      	cbnz	r4, d8004 <__pow5mult+0x38>
   d7ff4:	2010      	movs	r0, #16
   d7ff6:	f7fc fdff 	bl	d4bf8 <malloc>
   d7ffa:	6270      	str	r0, [r6, #36]	; 0x24
   d7ffc:	6044      	str	r4, [r0, #4]
   d7ffe:	6084      	str	r4, [r0, #8]
   d8000:	6004      	str	r4, [r0, #0]
   d8002:	60c4      	str	r4, [r0, #12]
   d8004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8008:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d800c:	b94c      	cbnz	r4, d8022 <__pow5mult+0x56>
   d800e:	f240 2171 	movw	r1, #625	; 0x271
   d8012:	4630      	mov	r0, r6
   d8014:	f7ff ff3f 	bl	d7e96 <__i2b>
   d8018:	2300      	movs	r3, #0
   d801a:	f8c8 0008 	str.w	r0, [r8, #8]
   d801e:	4604      	mov	r4, r0
   d8020:	6003      	str	r3, [r0, #0]
   d8022:	f04f 0800 	mov.w	r8, #0
   d8026:	07eb      	lsls	r3, r5, #31
   d8028:	d50a      	bpl.n	d8040 <__pow5mult+0x74>
   d802a:	4639      	mov	r1, r7
   d802c:	4622      	mov	r2, r4
   d802e:	4630      	mov	r0, r6
   d8030:	f7ff ff3a 	bl	d7ea8 <__multiply>
   d8034:	4639      	mov	r1, r7
   d8036:	4681      	mov	r9, r0
   d8038:	4630      	mov	r0, r6
   d803a:	f7ff fe4f 	bl	d7cdc <_Bfree>
   d803e:	464f      	mov	r7, r9
   d8040:	106d      	asrs	r5, r5, #1
   d8042:	d00c      	beq.n	d805e <__pow5mult+0x92>
   d8044:	6820      	ldr	r0, [r4, #0]
   d8046:	b108      	cbz	r0, d804c <__pow5mult+0x80>
   d8048:	4604      	mov	r4, r0
   d804a:	e7ec      	b.n	d8026 <__pow5mult+0x5a>
   d804c:	4622      	mov	r2, r4
   d804e:	4621      	mov	r1, r4
   d8050:	4630      	mov	r0, r6
   d8052:	f7ff ff29 	bl	d7ea8 <__multiply>
   d8056:	6020      	str	r0, [r4, #0]
   d8058:	f8c0 8000 	str.w	r8, [r0]
   d805c:	e7f4      	b.n	d8048 <__pow5mult+0x7c>
   d805e:	4638      	mov	r0, r7
   d8060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8064:	000d8d38 	.word	0x000d8d38

000d8068 <__lshift>:
   d8068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d806c:	460c      	mov	r4, r1
   d806e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8072:	6926      	ldr	r6, [r4, #16]
   d8074:	6849      	ldr	r1, [r1, #4]
   d8076:	68a3      	ldr	r3, [r4, #8]
   d8078:	4456      	add	r6, sl
   d807a:	4607      	mov	r7, r0
   d807c:	4691      	mov	r9, r2
   d807e:	1c75      	adds	r5, r6, #1
   d8080:	42ab      	cmp	r3, r5
   d8082:	da02      	bge.n	d808a <__lshift+0x22>
   d8084:	3101      	adds	r1, #1
   d8086:	005b      	lsls	r3, r3, #1
   d8088:	e7fa      	b.n	d8080 <__lshift+0x18>
   d808a:	4638      	mov	r0, r7
   d808c:	f7ff fdf1 	bl	d7c72 <_Balloc>
   d8090:	2300      	movs	r3, #0
   d8092:	4680      	mov	r8, r0
   d8094:	f100 0114 	add.w	r1, r0, #20
   d8098:	461a      	mov	r2, r3
   d809a:	4553      	cmp	r3, sl
   d809c:	da03      	bge.n	d80a6 <__lshift+0x3e>
   d809e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d80a2:	3301      	adds	r3, #1
   d80a4:	e7f9      	b.n	d809a <__lshift+0x32>
   d80a6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d80aa:	6920      	ldr	r0, [r4, #16]
   d80ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d80b0:	f019 091f 	ands.w	r9, r9, #31
   d80b4:	f104 0114 	add.w	r1, r4, #20
   d80b8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d80bc:	d014      	beq.n	d80e8 <__lshift+0x80>
   d80be:	f1c9 0c20 	rsb	ip, r9, #32
   d80c2:	2200      	movs	r2, #0
   d80c4:	6808      	ldr	r0, [r1, #0]
   d80c6:	fa00 f009 	lsl.w	r0, r0, r9
   d80ca:	4302      	orrs	r2, r0
   d80cc:	469a      	mov	sl, r3
   d80ce:	f843 2b04 	str.w	r2, [r3], #4
   d80d2:	f851 2b04 	ldr.w	r2, [r1], #4
   d80d6:	458e      	cmp	lr, r1
   d80d8:	fa22 f20c 	lsr.w	r2, r2, ip
   d80dc:	d8f2      	bhi.n	d80c4 <__lshift+0x5c>
   d80de:	f8ca 2004 	str.w	r2, [sl, #4]
   d80e2:	b142      	cbz	r2, d80f6 <__lshift+0x8e>
   d80e4:	1cb5      	adds	r5, r6, #2
   d80e6:	e006      	b.n	d80f6 <__lshift+0x8e>
   d80e8:	3b04      	subs	r3, #4
   d80ea:	f851 2b04 	ldr.w	r2, [r1], #4
   d80ee:	f843 2f04 	str.w	r2, [r3, #4]!
   d80f2:	458e      	cmp	lr, r1
   d80f4:	d8f9      	bhi.n	d80ea <__lshift+0x82>
   d80f6:	3d01      	subs	r5, #1
   d80f8:	4638      	mov	r0, r7
   d80fa:	f8c8 5010 	str.w	r5, [r8, #16]
   d80fe:	4621      	mov	r1, r4
   d8100:	f7ff fdec 	bl	d7cdc <_Bfree>
   d8104:	4640      	mov	r0, r8
   d8106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d810a <__mcmp>:
   d810a:	6903      	ldr	r3, [r0, #16]
   d810c:	690a      	ldr	r2, [r1, #16]
   d810e:	1a9b      	subs	r3, r3, r2
   d8110:	b510      	push	{r4, lr}
   d8112:	d111      	bne.n	d8138 <__mcmp+0x2e>
   d8114:	0092      	lsls	r2, r2, #2
   d8116:	3014      	adds	r0, #20
   d8118:	3114      	adds	r1, #20
   d811a:	1883      	adds	r3, r0, r2
   d811c:	440a      	add	r2, r1
   d811e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d8122:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d8126:	428c      	cmp	r4, r1
   d8128:	d002      	beq.n	d8130 <__mcmp+0x26>
   d812a:	d307      	bcc.n	d813c <__mcmp+0x32>
   d812c:	2001      	movs	r0, #1
   d812e:	bd10      	pop	{r4, pc}
   d8130:	4298      	cmp	r0, r3
   d8132:	d3f4      	bcc.n	d811e <__mcmp+0x14>
   d8134:	2000      	movs	r0, #0
   d8136:	bd10      	pop	{r4, pc}
   d8138:	4618      	mov	r0, r3
   d813a:	bd10      	pop	{r4, pc}
   d813c:	f04f 30ff 	mov.w	r0, #4294967295
   d8140:	bd10      	pop	{r4, pc}

000d8142 <__mdiff>:
   d8142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8146:	460c      	mov	r4, r1
   d8148:	4607      	mov	r7, r0
   d814a:	4611      	mov	r1, r2
   d814c:	4620      	mov	r0, r4
   d814e:	4615      	mov	r5, r2
   d8150:	f7ff ffdb 	bl	d810a <__mcmp>
   d8154:	1e06      	subs	r6, r0, #0
   d8156:	d108      	bne.n	d816a <__mdiff+0x28>
   d8158:	4631      	mov	r1, r6
   d815a:	4638      	mov	r0, r7
   d815c:	f7ff fd89 	bl	d7c72 <_Balloc>
   d8160:	2301      	movs	r3, #1
   d8162:	6103      	str	r3, [r0, #16]
   d8164:	6146      	str	r6, [r0, #20]
   d8166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d816a:	bfbc      	itt	lt
   d816c:	4623      	movlt	r3, r4
   d816e:	462c      	movlt	r4, r5
   d8170:	4638      	mov	r0, r7
   d8172:	6861      	ldr	r1, [r4, #4]
   d8174:	bfba      	itte	lt
   d8176:	461d      	movlt	r5, r3
   d8178:	2601      	movlt	r6, #1
   d817a:	2600      	movge	r6, #0
   d817c:	f7ff fd79 	bl	d7c72 <_Balloc>
   d8180:	692b      	ldr	r3, [r5, #16]
   d8182:	60c6      	str	r6, [r0, #12]
   d8184:	6926      	ldr	r6, [r4, #16]
   d8186:	f105 0914 	add.w	r9, r5, #20
   d818a:	3414      	adds	r4, #20
   d818c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d8190:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d8194:	f100 0514 	add.w	r5, r0, #20
   d8198:	f04f 0c00 	mov.w	ip, #0
   d819c:	f854 3b04 	ldr.w	r3, [r4], #4
   d81a0:	f859 2b04 	ldr.w	r2, [r9], #4
   d81a4:	fa1c f183 	uxtah	r1, ip, r3
   d81a8:	fa1f fe82 	uxth.w	lr, r2
   d81ac:	0c12      	lsrs	r2, r2, #16
   d81ae:	ebce 0101 	rsb	r1, lr, r1
   d81b2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d81b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d81ba:	b289      	uxth	r1, r1
   d81bc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d81c0:	45c8      	cmp	r8, r9
   d81c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d81c6:	46a6      	mov	lr, r4
   d81c8:	f845 3b04 	str.w	r3, [r5], #4
   d81cc:	d8e6      	bhi.n	d819c <__mdiff+0x5a>
   d81ce:	45be      	cmp	lr, r7
   d81d0:	d20e      	bcs.n	d81f0 <__mdiff+0xae>
   d81d2:	f85e 1b04 	ldr.w	r1, [lr], #4
   d81d6:	fa1c f281 	uxtah	r2, ip, r1
   d81da:	1413      	asrs	r3, r2, #16
   d81dc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d81e0:	b292      	uxth	r2, r2
   d81e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d81e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d81ea:	f845 2b04 	str.w	r2, [r5], #4
   d81ee:	e7ee      	b.n	d81ce <__mdiff+0x8c>
   d81f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d81f4:	b90b      	cbnz	r3, d81fa <__mdiff+0xb8>
   d81f6:	3e01      	subs	r6, #1
   d81f8:	e7fa      	b.n	d81f0 <__mdiff+0xae>
   d81fa:	6106      	str	r6, [r0, #16]
   d81fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8200 <__ulp>:
   d8200:	4b12      	ldr	r3, [pc, #72]	; (d824c <__ulp+0x4c>)
   d8202:	ee10 2a90 	vmov	r2, s1
   d8206:	401a      	ands	r2, r3
   d8208:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d820c:	2b00      	cmp	r3, #0
   d820e:	dd02      	ble.n	d8216 <__ulp+0x16>
   d8210:	2000      	movs	r0, #0
   d8212:	4619      	mov	r1, r3
   d8214:	e017      	b.n	d8246 <__ulp+0x46>
   d8216:	425b      	negs	r3, r3
   d8218:	151b      	asrs	r3, r3, #20
   d821a:	2b13      	cmp	r3, #19
   d821c:	f04f 0000 	mov.w	r0, #0
   d8220:	f04f 0100 	mov.w	r1, #0
   d8224:	dc04      	bgt.n	d8230 <__ulp+0x30>
   d8226:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d822a:	fa42 f103 	asr.w	r1, r2, r3
   d822e:	e00a      	b.n	d8246 <__ulp+0x46>
   d8230:	3b14      	subs	r3, #20
   d8232:	2b1e      	cmp	r3, #30
   d8234:	f04f 0201 	mov.w	r2, #1
   d8238:	bfda      	itte	le
   d823a:	f1c3 031f 	rsble	r3, r3, #31
   d823e:	fa02 f303 	lslle.w	r3, r2, r3
   d8242:	4613      	movgt	r3, r2
   d8244:	4618      	mov	r0, r3
   d8246:	ec41 0b10 	vmov	d0, r0, r1
   d824a:	4770      	bx	lr
   d824c:	7ff00000 	.word	0x7ff00000

000d8250 <__b2d>:
   d8250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8252:	6905      	ldr	r5, [r0, #16]
   d8254:	f100 0614 	add.w	r6, r0, #20
   d8258:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d825c:	1f2f      	subs	r7, r5, #4
   d825e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8262:	4620      	mov	r0, r4
   d8264:	f7ff fdca 	bl	d7dfc <__hi0bits>
   d8268:	f1c0 0320 	rsb	r3, r0, #32
   d826c:	280a      	cmp	r0, #10
   d826e:	600b      	str	r3, [r1, #0]
   d8270:	dc14      	bgt.n	d829c <__b2d+0x4c>
   d8272:	f1c0 0e0b 	rsb	lr, r0, #11
   d8276:	fa24 f10e 	lsr.w	r1, r4, lr
   d827a:	42be      	cmp	r6, r7
   d827c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d8280:	bf34      	ite	cc
   d8282:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8286:	2100      	movcs	r1, #0
   d8288:	3015      	adds	r0, #21
   d828a:	fa04 f000 	lsl.w	r0, r4, r0
   d828e:	fa21 f10e 	lsr.w	r1, r1, lr
   d8292:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8296:	ea40 0201 	orr.w	r2, r0, r1
   d829a:	e023      	b.n	d82e4 <__b2d+0x94>
   d829c:	42be      	cmp	r6, r7
   d829e:	bf3a      	itte	cc
   d82a0:	f1a5 0708 	subcc.w	r7, r5, #8
   d82a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d82a8:	2100      	movcs	r1, #0
   d82aa:	380b      	subs	r0, #11
   d82ac:	d015      	beq.n	d82da <__b2d+0x8a>
   d82ae:	4084      	lsls	r4, r0
   d82b0:	f1c0 0520 	rsb	r5, r0, #32
   d82b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d82b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d82bc:	42b7      	cmp	r7, r6
   d82be:	fa21 fe05 	lsr.w	lr, r1, r5
   d82c2:	ea44 030e 	orr.w	r3, r4, lr
   d82c6:	bf8c      	ite	hi
   d82c8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d82cc:	2400      	movls	r4, #0
   d82ce:	fa01 f000 	lsl.w	r0, r1, r0
   d82d2:	40ec      	lsrs	r4, r5
   d82d4:	ea40 0204 	orr.w	r2, r0, r4
   d82d8:	e004      	b.n	d82e4 <__b2d+0x94>
   d82da:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d82de:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d82e2:	460a      	mov	r2, r1
   d82e4:	ec43 2b10 	vmov	d0, r2, r3
   d82e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d82ea <__d2b>:
   d82ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d82ee:	460e      	mov	r6, r1
   d82f0:	2101      	movs	r1, #1
   d82f2:	ec59 8b10 	vmov	r8, r9, d0
   d82f6:	4615      	mov	r5, r2
   d82f8:	f7ff fcbb 	bl	d7c72 <_Balloc>
   d82fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d8300:	4607      	mov	r7, r0
   d8302:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d8306:	b10c      	cbz	r4, d830c <__d2b+0x22>
   d8308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	f1b8 0f00 	cmp.w	r8, #0
   d8312:	d019      	beq.n	d8348 <__d2b+0x5e>
   d8314:	a802      	add	r0, sp, #8
   d8316:	f840 8d08 	str.w	r8, [r0, #-8]!
   d831a:	f7ff fd8f 	bl	d7e3c <__lo0bits>
   d831e:	9b00      	ldr	r3, [sp, #0]
   d8320:	b148      	cbz	r0, d8336 <__d2b+0x4c>
   d8322:	9a01      	ldr	r2, [sp, #4]
   d8324:	f1c0 0120 	rsb	r1, r0, #32
   d8328:	fa02 f101 	lsl.w	r1, r2, r1
   d832c:	430b      	orrs	r3, r1
   d832e:	40c2      	lsrs	r2, r0
   d8330:	617b      	str	r3, [r7, #20]
   d8332:	9201      	str	r2, [sp, #4]
   d8334:	e000      	b.n	d8338 <__d2b+0x4e>
   d8336:	617b      	str	r3, [r7, #20]
   d8338:	9b01      	ldr	r3, [sp, #4]
   d833a:	61bb      	str	r3, [r7, #24]
   d833c:	2b00      	cmp	r3, #0
   d833e:	bf14      	ite	ne
   d8340:	2102      	movne	r1, #2
   d8342:	2101      	moveq	r1, #1
   d8344:	6139      	str	r1, [r7, #16]
   d8346:	e007      	b.n	d8358 <__d2b+0x6e>
   d8348:	a801      	add	r0, sp, #4
   d834a:	f7ff fd77 	bl	d7e3c <__lo0bits>
   d834e:	9b01      	ldr	r3, [sp, #4]
   d8350:	617b      	str	r3, [r7, #20]
   d8352:	2101      	movs	r1, #1
   d8354:	6139      	str	r1, [r7, #16]
   d8356:	3020      	adds	r0, #32
   d8358:	b134      	cbz	r4, d8368 <__d2b+0x7e>
   d835a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d835e:	4404      	add	r4, r0
   d8360:	6034      	str	r4, [r6, #0]
   d8362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8366:	e009      	b.n	d837c <__d2b+0x92>
   d8368:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d836c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8370:	6030      	str	r0, [r6, #0]
   d8372:	6918      	ldr	r0, [r3, #16]
   d8374:	f7ff fd42 	bl	d7dfc <__hi0bits>
   d8378:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d837c:	6028      	str	r0, [r5, #0]
   d837e:	4638      	mov	r0, r7
   d8380:	b003      	add	sp, #12
   d8382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8386 <__ratio>:
   d8386:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d838a:	4688      	mov	r8, r1
   d838c:	4669      	mov	r1, sp
   d838e:	4681      	mov	r9, r0
   d8390:	f7ff ff5e 	bl	d8250 <__b2d>
   d8394:	a901      	add	r1, sp, #4
   d8396:	4640      	mov	r0, r8
   d8398:	ec55 4b10 	vmov	r4, r5, d0
   d839c:	f7ff ff58 	bl	d8250 <__b2d>
   d83a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d83a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d83a8:	1a9a      	subs	r2, r3, r2
   d83aa:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d83ae:	1ac9      	subs	r1, r1, r3
   d83b0:	ec57 6b10 	vmov	r6, r7, d0
   d83b4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d83b8:	2b00      	cmp	r3, #0
   d83ba:	bfcc      	ite	gt
   d83bc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d83c0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d83c4:	4632      	mov	r2, r6
   d83c6:	463b      	mov	r3, r7
   d83c8:	4620      	mov	r0, r4
   d83ca:	4629      	mov	r1, r5
   d83cc:	f7fe f840 	bl	d6450 <__aeabi_ddiv>
   d83d0:	ec41 0b10 	vmov	d0, r0, r1
   d83d4:	b003      	add	sp, #12
   d83d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d83da <__copybits>:
   d83da:	3901      	subs	r1, #1
   d83dc:	b510      	push	{r4, lr}
   d83de:	1149      	asrs	r1, r1, #5
   d83e0:	6914      	ldr	r4, [r2, #16]
   d83e2:	3101      	adds	r1, #1
   d83e4:	f102 0314 	add.w	r3, r2, #20
   d83e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d83ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d83f0:	42a3      	cmp	r3, r4
   d83f2:	4602      	mov	r2, r0
   d83f4:	d204      	bcs.n	d8400 <__copybits+0x26>
   d83f6:	f853 2b04 	ldr.w	r2, [r3], #4
   d83fa:	f840 2b04 	str.w	r2, [r0], #4
   d83fe:	e7f7      	b.n	d83f0 <__copybits+0x16>
   d8400:	2300      	movs	r3, #0
   d8402:	428a      	cmp	r2, r1
   d8404:	d202      	bcs.n	d840c <__copybits+0x32>
   d8406:	f842 3b04 	str.w	r3, [r2], #4
   d840a:	e7fa      	b.n	d8402 <__copybits+0x28>
   d840c:	bd10      	pop	{r4, pc}

000d840e <__any_on>:
   d840e:	f100 0214 	add.w	r2, r0, #20
   d8412:	6900      	ldr	r0, [r0, #16]
   d8414:	114b      	asrs	r3, r1, #5
   d8416:	4298      	cmp	r0, r3
   d8418:	b510      	push	{r4, lr}
   d841a:	db0c      	blt.n	d8436 <__any_on+0x28>
   d841c:	dd0c      	ble.n	d8438 <__any_on+0x2a>
   d841e:	f011 011f 	ands.w	r1, r1, #31
   d8422:	d009      	beq.n	d8438 <__any_on+0x2a>
   d8424:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d8428:	fa24 f001 	lsr.w	r0, r4, r1
   d842c:	fa00 f101 	lsl.w	r1, r0, r1
   d8430:	428c      	cmp	r4, r1
   d8432:	d10c      	bne.n	d844e <__any_on+0x40>
   d8434:	e000      	b.n	d8438 <__any_on+0x2a>
   d8436:	4603      	mov	r3, r0
   d8438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d843c:	4293      	cmp	r3, r2
   d843e:	d904      	bls.n	d844a <__any_on+0x3c>
   d8440:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d8444:	2900      	cmp	r1, #0
   d8446:	d0f9      	beq.n	d843c <__any_on+0x2e>
   d8448:	e001      	b.n	d844e <__any_on+0x40>
   d844a:	2000      	movs	r0, #0
   d844c:	bd10      	pop	{r4, pc}
   d844e:	2001      	movs	r0, #1
   d8450:	bd10      	pop	{r4, pc}

000d8452 <_calloc_r>:
   d8452:	b538      	push	{r3, r4, r5, lr}
   d8454:	fb02 f401 	mul.w	r4, r2, r1
   d8458:	4621      	mov	r1, r4
   d845a:	f7fc fbe5 	bl	d4c28 <_malloc_r>
   d845e:	4605      	mov	r5, r0
   d8460:	b118      	cbz	r0, d846a <_calloc_r+0x18>
   d8462:	4622      	mov	r2, r4
   d8464:	2100      	movs	r1, #0
   d8466:	f7fe fa37 	bl	d68d8 <memset>
   d846a:	4628      	mov	r0, r5
   d846c:	bd38      	pop	{r3, r4, r5, pc}

000d846e <link_code_end>:
	...

000d8470 <dynalib_user>:
   d8470:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8480:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   d8490:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   d84a0:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   d84b0:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   d84c0:	2e2e 002e 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   d84d0:	6465 0021 6950 676e 6e69 2067 514d 5454     ed!.Pinging MQTT
   d84e0:	0a20 4400 7369 6f63 6e6e 6365 6974 676e      ..Disconnecting
   d84f0:	0a20 4700 746f 203a 3025 322e 2066 000a      ..Got: %0.2f ..
   d8500:	6172 6873 7061 6900 2e6f 6461 6661 7572     rashap.io.adafru
   d8510:	7469 632e 6d6f 3500 3839 3631 6639 3361     it.com.598169fa3
   d8520:	6162 3439 3336 3936 3134 3361 3033 3739     ba94636941a33097
   d8530:	6536 3234 3265 0063 6172 6873 7061 662f     6e42e2c.rashap/f
   d8540:	6565 7364 482f 6d6f 5f65 6554 706d 7265     eeds/Home_Temper
   d8550:	7461 7275 0065 0000                         ature...

000d8558 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8560:	40cd 000d 4265 000d 42f5 000d 43a1 000d     .@..eB...B...C..
   d8570:	43d3 000d 4309 000d 4349 000d               .C...C..IC..

000d857c <_ZTV13Adafruit_MQTT>:
	...
   d858c:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   d859c:	40a9 000d                                   .@..

000d85a0 <CSWTCH.52>:
   d85a0:	8603 000d 8617 000d 85e7 000d 8629 000d     ............)...
   d85b0:	866e 000d 86b3 000d 86d3 000d 8706 000d     n...............
   d85c0:	8720 000d 8757 000d 5b20 7830 3000 5d00      ...W... [0x.0.]
   d85d0:	202c 0a00 0009 7244 706f 6570 2064 2061     , ....Dropped a 
   d85e0:	6170 6b63 7465 5500 6b6e 6f6e 6e77 6520     packet.Unknown e
   d85f0:	7272 726f 4d00 5451 0054 2525 6425 252e     rror.MQTT.%%%d.%
   d8600:	6664 4600 6961 656c 2064 6f74 7320 6275     df.Failed to sub
   d8610:	6373 6972 6562 4300 6e6f 656e 7463 6f69     scribe.Connectio
   d8620:	206e 6166 6c69 6465 5400 6568 5320 7265     n failed.The Ser
   d8630:	6576 2072 6f64 7365 6e20 746f 7320 7075     ver does not sup
   d8640:	6f70 7472 7420 6568 6c20 7665 6c65 6f20     port the level o
   d8650:	2066 6874 2065 514d 5454 7020 6f72 6f74     f the MQTT proto
   d8660:	6f63 206c 6572 7571 7365 6574 0064 6854     col requested.Th
   d8670:	2065 6c43 6569 746e 6920 6564 746e 6669     e Client identif
   d8680:	6569 2072 7369 6320 726f 6572 7463 5520     ier is correct U
   d8690:	4654 382d 6220 7475 6e20 746f 6120 6c6c     TF-8 but not all
   d86a0:	776f 6465 6220 2079 6874 2065 6553 7672     owed by the Serv
   d86b0:	7265 5400 6568 4d20 5451 2054 6573 7672     er.The MQTT serv
   d86c0:	6369 2065 7369 7520 616e 6176 6c69 6261     ice is unavailab
   d86d0:	656c 5400 6568 6420 7461 2061 6e69 7420     le.The data in t
   d86e0:	6568 7520 6573 2072 616e 656d 6f20 2072     he user name or 
   d86f0:	6170 7373 6f77 6472 6920 2073 616d 666c     password is malf
   d8700:	726f 656d 0064 6f4e 2074 7561 6874 726f     ormed.Not author
   d8710:	7a69 6465 7420 206f 6f63 6e6e 6365 0074     ized to connect.
   d8720:	7845 6563 6465 6465 7220 6365 6e6f 656e     Exceeded reconne
   d8730:	7463 7220 7461 2065 696c 696d 2e74 5020     ct rate limit. P
   d8740:	656c 7361 2065 7274 2079 6761 6961 206e     lease try again 
   d8750:	616c 6574 2e72 5900 756f 6820 7661 2065     later..You have 
   d8760:	6562 6e65 6220 6e61 656e 2064 7266 6d6f     been banned from
   d8770:	6320 6e6f 656e 7463 6e69 2e67 5020 656c      connecting. Ple
   d8780:	7361 2065 6f63 746e 6361 2074 6874 2065     ase contact the 
   d8790:	514d 5454 7320 7265 6576 2072 6461 696d     MQTT server admi
   d87a0:	696e 7473 6172 6f74 2072 6f66 2072 6f6d     nistrator for mo
   d87b0:	6572 6420 7465 6961 736c 002e               re details..

000d87bc <_ZTVN5spark13EthernetClassE>:
	...
   d87c4:	4ca7 000d 4c9d 000d 4c93 000d 4c89 000d     .L...L...L...L..
   d87d4:	4c7d 000d 4c71 000d 4c65 000d 4c5d 000d     }L..qL..eL..]L..
   d87e4:	4c53 000d 4c49 000d 5b0d 000d 6162 6475     SL..IL...[..baud
   d87f4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d8804:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d8814:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d8824:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d8834:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d8844:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d8854:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d8864:	7070 2500 3130 7530 0020 205d 2800 3a29     pp.%010u .] .():
   d8874:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d8884:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d8894:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d88a4:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d88b4:	6177 6e72 7000 6e61 6369 6100 6c6c 5a00     warn.panic.all.Z
   d88c4:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   d88d4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d88e4:	7361 7463 6d69 0065                         asctime.

000d88ec <_ZTV9IPAddress>:
	...
   d88f4:	5011 000d 5001 000d 5003 000d               .P...P...P..

000d8900 <_ZTV9USBSerial>:
	...
   d8908:	5115 000d 5165 000d 5173 000d 4d51 000d     .Q..eQ..sQ..QM..
   d8918:	5151 000d 5117 000d 512d 000d 515f 000d     QQ...Q..-Q.._Q..
   d8928:	5143 000d 5111 000d                         CQ...Q..

000d8930 <_ZTV11USARTSerial>:
	...
   d8938:	5221 000d 5271 000d 527f 000d 4d51 000d     !R..qR...R..QM..
   d8948:	5235 000d 5257 000d 5243 000d 526b 000d     5R..WR..CR..kR..
   d8958:	5223 000d 5227 000d                         #R..'R..

000d8960 <_ZTVN5spark9MeshClassE>:
	...
   d8968:	537b 000d 5371 000d 5367 000d 535d 000d     {S..qS..gS..]S..
   d8978:	5351 000d 5345 000d 5339 000d 5331 000d     QS..ES..9S..1S..
   d8988:	5327 000d 531d 000d 5b0d 000d               'S...S...[..

000d8994 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d899c:	5521 000d 5527 000d 5a0f 000d 5535 000d     !U..'U...Z..5U..
   d89ac:	5523 000d                                   #U..

000d89b0 <_ZTV9TCPClient>:
	...
   d89b8:	40d1 000d 4105 000d 5499 000d 54b3 000d     .@...A...T...T..
   d89c8:	58b5 000d 5607 000d 55d9 000d 54dd 000d     .X...V...U...T..
   d89d8:	5791 000d 568d 000d 563b 000d 5885 000d     .W...V..;V...X..
   d89e8:	54df 000d 5517 000d 54c5 000d 5539 000d     .T...U...T..9U..
   d89f8:	55b9 000d 6977 6972 676e 7200 6365 2076     .U..wiring.recv 
   d8a08:	7265 6f72 2072 203d 6425 0000               error = %d..

000d8a14 <_ZTVN5spark9WiFiClassE>:
	...
   d8a1c:	5a85 000d 5a7b 000d 5a71 000d 5a27 000d     .Z..{Z..qZ..'Z..
   d8a2c:	5a65 000d 5a59 000d 5a4d 000d 5a45 000d     eZ..YZ..MZ..EZ..
   d8a3c:	5a3b 000d 5a31 000d 5b0d 000d               ;Z..1Z...[..

000d8a48 <_ZTVN5spark12NetworkClassE>:
	...
   d8a50:	5aa5 000d 5aaf 000d 5ab9 000d 5ac3 000d     .Z...Z...Z...Z..
   d8a60:	5acd 000d 5ad9 000d 5ae5 000d 5af1 000d     .Z...Z...Z...Z..
   d8a70:	5af9 000d 5b03 000d 5b0d 000d               .Z...[...[..

000d8a7c <_ctype_>:
   d8a7c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8a8c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8a9c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8aac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8abc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8acc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8adc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8aec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8afc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8b80 <__sf_fake_stdin>:
	...

000d8ba0 <__sf_fake_stdout>:
	...

000d8bc0 <__sf_fake_stderr>:
	...
   d8be0:	0043 4f50 4953 0058                         C.POSIX.

000d8be8 <fpi.5344>:
   d8be8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d8bf8:	0000 0000                                   ....

000d8bfc <fpinan.5380>:
   d8bfc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d8c0c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   d8c1c:	0000 0000                                   ....

000d8c20 <tinytens>:
   d8c20:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d8c30:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d8c40:	6f43 64ac 0628 1168                         Co.d(.h.

000d8c48 <__mprec_tens>:
   d8c48:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d8c58:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d8c68:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d8c78:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d8c88:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d8c98:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d8ca8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d8cb8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d8cc8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d8cd8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d8ce8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d8cf8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d8d08:	9db4 79d9 7843 44ea                         ...yCx.D

000d8d10 <__mprec_bigtens>:
   d8d10:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d8d20:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d8d30:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d8d38 <p05.5387>:
   d8d38:	0005 0000 0019 0000 007d 0000               ........}...

000d8d44 <link_const_variable_data_end>:
   d8d44:	000d4275 	.word	0x000d4275
   d8d48:	000d43f1 	.word	0x000d43f1
   d8d4c:	000d48ad 	.word	0x000d48ad
   d8d50:	000d4cb1 	.word	0x000d4cb1
   d8d54:	000d4ce5 	.word	0x000d4ce5
   d8d58:	000d4d29 	.word	0x000d4d29
   d8d5c:	000d4e8d 	.word	0x000d4e8d
   d8d60:	000d4e9d 	.word	0x000d4e9d
   d8d64:	000d4ed5 	.word	0x000d4ed5
   d8d68:	000d5449 	.word	0x000d5449
   d8d6c:	000d5a91 	.word	0x000d5a91
   d8d70:	000d5bd9 	.word	0x000d5bd9
   d8d74:	000d5bfd 	.word	0x000d5bfd
   d8d78:	000d5c81 	.word	0x000d5c81
   d8d7c:	000d5d45 	.word	0x000d5d45
   d8d80:	000d5e09 	.word	0x000d5e09

000d8d84 <link_constructors_end>:
	...
