
c:/Users/IoTPa/Documents/jarvis/GPSTime/target/1.5.2/argon/GPSTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000052f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9310  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  2003e238  000d9314  0001e238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000514  2003e2dc  2003e2dc  0002e2dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d93b8  000d93b8  000293b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d93e0  000d93e0  000293e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c9dfc  00000000  00000000  000293e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fe2a  00000000  00000000  000f31e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c09a  00000000  00000000  0010300a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002190  00000000  00000000  0011f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004180  00000000  00000000  00121234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034452  00000000  00000000  001253b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028029  00000000  00000000  00159806  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff975  00000000  00000000  0018182f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c990  00000000  00000000  002811a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fecb 	bl	d6dcc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fed0 	bl	d6de2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e238 	.word	0x2003e238
   d404c:	000d9314 	.word	0x000d9314
   d4050:	2003e2dc 	.word	0x2003e2dc
   d4054:	2003e2dc 	.word	0x2003e2dc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fcff 	bl	d5a60 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d930c 	.word	0x000d930c
   d4084:	000d92c4 	.word	0x000d92c4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8a6 	b.w	d41d8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8df 	bl	d4250 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bca5 	b.w	d59e4 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f001 b907 	b.w	d52ac <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b905 	b.w	d52ac <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	4718      	bx	r3

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr
	...

000d40d0 <_Z12onSerialDatav>:
  _timer.start();
}

void onSerialData()
{
  _gps.onSerialData();
   d40d0:	4801      	ldr	r0, [pc, #4]	; (d40d8 <_Z12onSerialDatav+0x8>)
   d40d2:	f000 bef7 	b.w	d4ec4 <_ZN3Gps12onSerialDataEv>
   d40d6:	bf00      	nop
   d40d8:	2003e2e0 	.word	0x2003e2e0

000d40dc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d40dc:	6943      	ldr	r3, [r0, #20]
   d40de:	b113      	cbz	r3, d40e6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40e0:	6983      	ldr	r3, [r0, #24]
   d40e2:	300c      	adds	r0, #12
   d40e4:	4718      	bx	r3
   d40e6:	4770      	bx	lr

000d40e8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d40e8:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d40ea:	2100      	movs	r1, #0
   d40ec:	4604      	mov	r4, r0
   d40ee:	4608      	mov	r0, r1
   d40f0:	f000 ff98 	bl	d5024 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d40f4:	a902      	add	r1, sp, #8
   d40f6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d40f8:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d40fa:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d40fe:	f000 ffa9 	bl	d5054 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4102:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4104:	b10c      	cbz	r4, d410a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4106:	2301      	movs	r3, #1
   d4108:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d410a:	2100      	movs	r1, #0
   d410c:	2001      	movs	r0, #1
   d410e:	f000 ff89 	bl	d5024 <os_thread_scheduling>
            }
        }
        if (t) {
   d4112:	b12c      	cbz	r4, d4120 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4114:	6823      	ldr	r3, [r4, #0]
   d4116:	4620      	mov	r0, r4
   d4118:	689b      	ldr	r3, [r3, #8]
   d411a:	4798      	blx	r3
            t->running = false;
   d411c:	2300      	movs	r3, #0
   d411e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4120:	b002      	add	sp, #8
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4124:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4126:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4128:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d412a:	b113      	cbz	r3, d4132 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d412c:	2203      	movs	r2, #3
   d412e:	4601      	mov	r1, r0
   d4130:	4798      	blx	r3
    }
   d4132:	4620      	mov	r0, r4
   d4134:	bd10      	pop	{r4, pc}

000d4136 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4136:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4138:	6880      	ldr	r0, [r0, #8]
   d413a:	2300      	movs	r3, #0
   d413c:	b138      	cbz	r0, d414e <_ZN5Timer5_stopEjb+0x18>
   d413e:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4142:	2102      	movs	r1, #2
   d4144:	f000 ff8e 	bl	d5064 <os_timer_change>
   d4148:	fab0 f080 	clz	r0, r0
   d414c:	0940      	lsrs	r0, r0, #5
    }
   d414e:	b003      	add	sp, #12
   d4150:	f85d fb04 	ldr.w	pc, [sp], #4

000d4154 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4154:	b538      	push	{r3, r4, r5, lr}
   d4156:	4b10      	ldr	r3, [pc, #64]	; (d4198 <_ZN5TimerD1Ev+0x44>)
   d4158:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d415a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d415c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d415e:	b1a3      	cbz	r3, d418a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4164:	2200      	movs	r2, #0
   d4166:	f7ff ffe6 	bl	d4136 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d416a:	2100      	movs	r1, #0
   d416c:	68a0      	ldr	r0, [r4, #8]
   d416e:	f000 ff91 	bl	d5094 <os_timer_set_id>
            while (running) {
   d4172:	7923      	ldrb	r3, [r4, #4]
   d4174:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4178:	b113      	cbz	r3, d4180 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d417a:	f000 ff3b 	bl	d4ff4 <os_thread_yield>
   d417e:	e7f8      	b.n	d4172 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4180:	4629      	mov	r1, r5
   d4182:	68a0      	ldr	r0, [r4, #8]
   d4184:	f000 ff5e 	bl	d5044 <os_timer_destroy>
            handle = nullptr;
   d4188:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d418a:	f104 000c 	add.w	r0, r4, #12
   d418e:	f7ff ffc9 	bl	d4124 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4192:	4620      	mov	r0, r4
   d4194:	bd38      	pop	{r3, r4, r5, pc}
   d4196:	bf00      	nop
   d4198:	000d8a94 	.word	0x000d8a94

000d419c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d419c:	b510      	push	{r4, lr}
   d419e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41a0:	f7ff ffd8 	bl	d4154 <_ZN5TimerD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	211c      	movs	r1, #28
   d41a8:	f001 ffab 	bl	d6102 <_ZdlPvj>
   d41ac:	4620      	mov	r0, r4
   d41ae:	bd10      	pop	{r4, pc}

000d41b0 <_ZN9NmeaCacheD1Ev>:
#define NMEA_MSGID_PGT      "$PGTOP"

#define NMEA_MSGID_LENGTH   6
#define NMEA_MAX_SENTENCE   6

class NmeaCache
   d41b0:	b538      	push	{r3, r4, r5, lr}
   d41b2:	4604      	mov	r4, r0
   d41b4:	b140      	cbz	r0, d41c8 <_ZN9NmeaCacheD1Ev+0x18>
   d41b6:	f100 0570 	add.w	r5, r0, #112	; 0x70
   d41ba:	42a5      	cmp	r5, r4
   d41bc:	d004      	beq.n	d41c8 <_ZN9NmeaCacheD1Ev+0x18>
   d41be:	3d10      	subs	r5, #16
   d41c0:	4628      	mov	r0, r5
   d41c2:	f001 f8f3 	bl	d53ac <_ZN6StringD1Ev>
   d41c6:	e7f8      	b.n	d41ba <_ZN9NmeaCacheD1Ev+0xa>
   d41c8:	4620      	mov	r0, r4
   d41ca:	bd38      	pop	{r3, r4, r5, pc}

000d41cc <_ZN3GpsD1Ev>:
#include "Pmtk.h"
#include "NmeaCache.h"

#define BUFFER_SIZE 128

class Gps : public NmeaCache
   d41cc:	b510      	push	{r4, lr}
   d41ce:	4604      	mov	r4, r0
   d41d0:	f7ff ffee 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
   d41d4:	4620      	mov	r0, r4
   d41d6:	bd10      	pop	{r4, pc}

000d41d8 <setup>:
// *** incoming serial port data from the GPS.
// ***
Timer _timer = Timer(1, onSerialData);

void setup()
{
   d41d8:	b513      	push	{r0, r1, r4, lr}
  delay(2000);
   d41da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41de:	f001 fbcb 	bl	d5978 <delay>

  // ***
  // *** Initialize the USB Serial for debugging.
  // ***
  Serial.begin();
   d41e2:	f001 fd3d 	bl	d5c60 <_Z16_fetch_usbserialv>
   d41e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41ea:	f001 fd2d 	bl	d5c48 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d41ee:	f001 fd37 	bl	d5c60 <_Z16_fetch_usbserialv>
   d41f2:	490d      	ldr	r1, [pc, #52]	; (d4228 <setup+0x50>)
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41f4:	4c0d      	ldr	r4, [pc, #52]	; (d422c <setup+0x54>)
   d41f6:	f001 fa9a 	bl	d572e <_ZN5Print7printlnEPKc>

  // ***
  // *** Initialize the GPS.
  // ***
  _gps.begin(9600);
   d41fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41fe:	480c      	ldr	r0, [pc, #48]	; (d4230 <setup+0x58>)
   d4200:	f000 fe26 	bl	d4e50 <_ZN3Gps5beginEm>
   d4204:	2200      	movs	r2, #0
   d4206:	4611      	mov	r1, r2
   d4208:	4620      	mov	r0, r4
   d420a:	f7ff ff94 	bl	d4136 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d420e:	68a0      	ldr	r0, [r4, #8]
   d4210:	b140      	cbz	r0, d4224 <setup+0x4c>
   d4212:	2300      	movs	r3, #0
   d4214:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4218:	e88d 000c 	stmia.w	sp, {r2, r3}
   d421c:	4619      	mov	r1, r3
   d421e:	461a      	mov	r2, r3
   d4220:	f000 ff20 	bl	d5064 <os_timer_change>

  // ***
  // *** Start the timer.
  // ***
  _timer.start();
}
   d4224:	b002      	add	sp, #8
   d4226:	bd10      	pop	{r4, pc}
   d4228:	000d8aa0 	.word	0x000d8aa0
   d422c:	2003e3dc 	.word	0x2003e3dc
   d4230:	2003e2e0 	.word	0x2003e2e0

000d4234 <_ZN9NmeaCacheC1ERKS_>:
   d4234:	b570      	push	{r4, r5, r6, lr}
   d4236:	4605      	mov	r5, r0
   d4238:	460e      	mov	r6, r1
   d423a:	2400      	movs	r4, #0
   d423c:	1931      	adds	r1, r6, r4
   d423e:	1928      	adds	r0, r5, r4
   d4240:	3410      	adds	r4, #16
   d4242:	f001 f939 	bl	d54b8 <_ZN6StringC1ERKS_>
   d4246:	2c70      	cmp	r4, #112	; 0x70
   d4248:	d1f8      	bne.n	d423c <_ZN9NmeaCacheC1ERKS_+0x8>
   d424a:	4628      	mov	r0, r5
   d424c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4250 <loop>:
{
  _gps.onSerialData();
}

void loop()
{
   d4250:	b510      	push	{r4, lr}
   d4252:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
  // ***
  // *** Get the Antenna Status ($PGTOP).
  // ***
  Pgtop pgtop = Pgtop(_gps);
   d4256:	49d3      	ldr	r1, [pc, #844]	; (d45a4 <loop+0x354>)
   d4258:	a857      	add	r0, sp, #348	; 0x15c
   d425a:	f7ff ffeb 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d425e:	a957      	add	r1, sp, #348	; 0x15c
   d4260:	a801      	add	r0, sp, #4
   d4262:	f000 fd1d 	bl	d4ca0 <_ZN5PgtopC1E9NmeaCache>
   d4266:	a857      	add	r0, sp, #348	; 0x15c
   d4268:	f7ff ffa2 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
  if (pgtop.parse())
   d426c:	a801      	add	r0, sp, #4
   d426e:	f000 fc47 	bl	d4b00 <_ZN5Pgtop5parseEv>
   d4272:	b360      	cbz	r0, d42ce <loop+0x7e>
  {
    Serial.println("1) Antenna Status ($PGTOP)");
   d4274:	f001 fcf4 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4278:	49cb      	ldr	r1, [pc, #812]	; (d45a8 <loop+0x358>)
   d427a:	f001 fa58 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d427e:	f001 fcef 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4282:	49ca      	ldr	r1, [pc, #808]	; (d45ac <loop+0x35c>)
   d4284:	f001 fa53 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Command ID: "); Serial.println(pgtop.commandId);
   d4288:	f001 fcea 	bl	d5c60 <_Z16_fetch_usbserialv>
   d428c:	49c8      	ldr	r1, [pc, #800]	; (d45b0 <loop+0x360>)
   d428e:	f001 fa3b 	bl	d5708 <_ZN5Print5printEPKc>
   d4292:	f001 fce5 	bl	d5c60 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4296:	220a      	movs	r2, #10
   d4298:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d429a:	4604      	mov	r4, r0
   d429c:	f001 fa51 	bl	d5742 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42a0:	4620      	mov	r0, r4
   d42a2:	f001 fa38 	bl	d5716 <_ZN5Print7printlnEv>
    Serial.print("Antenna Status: "); Serial.println(pgtop.reference);
   d42a6:	f001 fcdb 	bl	d5c60 <_Z16_fetch_usbserialv>
   d42aa:	49c2      	ldr	r1, [pc, #776]	; (d45b4 <loop+0x364>)
   d42ac:	f001 fa2c 	bl	d5708 <_ZN5Print5printEPKc>
   d42b0:	f001 fcd6 	bl	d5c60 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d42b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   d42b6:	220a      	movs	r2, #10
   d42b8:	4604      	mov	r4, r0
   d42ba:	f001 fa42 	bl	d5742 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42be:	4620      	mov	r0, r4
   d42c0:	f001 fa29 	bl	d5716 <_ZN5Print7printlnEv>
    Serial.println("");
   d42c4:	f001 fccc 	bl	d5c60 <_Z16_fetch_usbserialv>
   d42c8:	49bb      	ldr	r1, [pc, #748]	; (d45b8 <loop+0x368>)
   d42ca:	f001 fa30 	bl	d572e <_ZN5Print7printlnEPKc>
  }

  // ***
  // *** Get the Global Positioning System Fixed Data ($GPGGA).
  // ***
  Gga gga = Gga(_gps);
   d42ce:	49b5      	ldr	r1, [pc, #724]	; (d45a4 <loop+0x354>)
   d42d0:	a857      	add	r0, sp, #348	; 0x15c
   d42d2:	f7ff ffaf 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d42d6:	a957      	add	r1, sp, #348	; 0x15c
   d42d8:	a829      	add	r0, sp, #164	; 0xa4
   d42da:	f000 fd03 	bl	d4ce4 <_ZN3GgaC1E9NmeaCache>
   d42de:	a857      	add	r0, sp, #348	; 0x15c
   d42e0:	f7ff ff66 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
  if (gga.parse())
   d42e4:	a829      	add	r0, sp, #164	; 0xa4
   d42e6:	f000 fc20 	bl	d4b2a <_ZN3Gga5parseEv>
   d42ea:	2800      	cmp	r0, #0
   d42ec:	f000 80a3 	beq.w	d4436 <loop+0x1e6>
  {
    Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
   d42f0:	f001 fcb6 	bl	d5c60 <_Z16_fetch_usbserialv>
   d42f4:	49b1      	ldr	r1, [pc, #708]	; (d45bc <loop+0x36c>)
   d42f6:	f001 fa1a 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d42fa:	f001 fcb1 	bl	d5c60 <_Z16_fetch_usbserialv>
   d42fe:	49ab      	ldr	r1, [pc, #684]	; (d45ac <loop+0x35c>)
   d4300:	f001 fa15 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(gga.utcTime);
   d4304:	f001 fcac 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4308:	49ad      	ldr	r1, [pc, #692]	; (d45c0 <loop+0x370>)
   d430a:	f001 f9fd 	bl	d5708 <_ZN5Print5printEPKc>
   d430e:	f001 fca7 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4312:	9933      	ldr	r1, [sp, #204]	; 0xcc
   d4314:	f001 fa0b 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(gga.latitude);
   d4318:	f001 fca2 	bl	d5c60 <_Z16_fetch_usbserialv>
   d431c:	49a9      	ldr	r1, [pc, #676]	; (d45c4 <loop+0x374>)
   d431e:	f001 f9f3 	bl	d5708 <_ZN5Print5printEPKc>
   d4322:	f001 fc9d 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4326:	9937      	ldr	r1, [sp, #220]	; 0xdc
   d4328:	f001 fa01 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(gga.northSouthIndicator);
   d432c:	f001 fc98 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4330:	49a5      	ldr	r1, [pc, #660]	; (d45c8 <loop+0x378>)
   d4332:	f001 f9e9 	bl	d5708 <_ZN5Print5printEPKc>
   d4336:	f001 fc93 	bl	d5c60 <_Z16_fetch_usbserialv>
   d433a:	993b      	ldr	r1, [sp, #236]	; 0xec
   d433c:	f001 f9f7 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(gga.longitude);
   d4340:	f001 fc8e 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4344:	49a1      	ldr	r1, [pc, #644]	; (d45cc <loop+0x37c>)
   d4346:	f001 f9df 	bl	d5708 <_ZN5Print5printEPKc>
   d434a:	f001 fc89 	bl	d5c60 <_Z16_fetch_usbserialv>
   d434e:	993f      	ldr	r1, [sp, #252]	; 0xfc
   d4350:	f001 f9ed 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(gga.eastWestIndicator);
   d4354:	f001 fc84 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4358:	499d      	ldr	r1, [pc, #628]	; (d45d0 <loop+0x380>)
   d435a:	f001 f9d5 	bl	d5708 <_ZN5Print5printEPKc>
   d435e:	f001 fc7f 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4362:	9943      	ldr	r1, [sp, #268]	; 0x10c
   d4364:	f001 f9e3 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Position Fix Indicator: "); Serial.println(gga.positionFixIndicator);
   d4368:	f001 fc7a 	bl	d5c60 <_Z16_fetch_usbserialv>
   d436c:	4999      	ldr	r1, [pc, #612]	; (d45d4 <loop+0x384>)
   d436e:	f001 f9cb 	bl	d5708 <_ZN5Print5printEPKc>
   d4372:	f001 fc75 	bl	d5c60 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4376:	220a      	movs	r2, #10
   d4378:	f89d 111c 	ldrb.w	r1, [sp, #284]	; 0x11c
   d437c:	4604      	mov	r4, r0
   d437e:	f001 f9e0 	bl	d5742 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4382:	4620      	mov	r0, r4
   d4384:	f001 f9c7 	bl	d5716 <_ZN5Print7printlnEv>
    Serial.print("Satellites Used: "); Serial.println(gga.satellitesUsed);
   d4388:	f001 fc6a 	bl	d5c60 <_Z16_fetch_usbserialv>
   d438c:	4992      	ldr	r1, [pc, #584]	; (d45d8 <loop+0x388>)
   d438e:	f001 f9bb 	bl	d5708 <_ZN5Print5printEPKc>
   d4392:	f001 fc65 	bl	d5c60 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4396:	220a      	movs	r2, #10
   d4398:	f89d 111d 	ldrb.w	r1, [sp, #285]	; 0x11d
   d439c:	4604      	mov	r4, r0
   d439e:	f001 f9d0 	bl	d5742 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d43a2:	4620      	mov	r0, r4
   d43a4:	f001 f9b7 	bl	d5716 <_ZN5Print7printlnEv>
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d43a8:	f001 fc5a 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43ac:	498b      	ldr	r1, [pc, #556]	; (d45dc <loop+0x38c>)
   d43ae:	f001 f9ab 	bl	d5708 <_ZN5Print5printEPKc>
   d43b2:	f001 fc55 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43b6:	ed9d 0a48 	vldr	s0, [sp, #288]	; 0x120
   d43ba:	2102      	movs	r1, #2
   d43bc:	f001 faba 	bl	d5934 <_ZN5Print7printlnEfi>
    Serial.print("Altitude: "); Serial.print(gga.altitude); Serial.print(" "); Serial.println(gga.altitudeUnit);
   d43c0:	f001 fc4e 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43c4:	4986      	ldr	r1, [pc, #536]	; (d45e0 <loop+0x390>)
   d43c6:	f001 f99f 	bl	d5708 <_ZN5Print5printEPKc>
   d43ca:	f001 fc49 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43ce:	ed9d 0a49 	vldr	s0, [sp, #292]	; 0x124
   d43d2:	2102      	movs	r1, #2
   d43d4:	f001 fa94 	bl	d5900 <_ZN5Print5printEfi>
   d43d8:	f001 fc42 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43dc:	4981      	ldr	r1, [pc, #516]	; (d45e4 <loop+0x394>)
   d43de:	f001 f993 	bl	d5708 <_ZN5Print5printEPKc>
   d43e2:	f001 fc3d 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43e6:	994a      	ldr	r1, [sp, #296]	; 0x128
   d43e8:	f001 f9a1 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Geoidal Separation: "); Serial.print(gga.geoidalSeparation); Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
   d43ec:	f001 fc38 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43f0:	497d      	ldr	r1, [pc, #500]	; (d45e8 <loop+0x398>)
   d43f2:	f001 f989 	bl	d5708 <_ZN5Print5printEPKc>
   d43f6:	f001 fc33 	bl	d5c60 <_Z16_fetch_usbserialv>
   d43fa:	ed9d 0a4e 	vldr	s0, [sp, #312]	; 0x138
   d43fe:	2102      	movs	r1, #2
   d4400:	f001 fa7e 	bl	d5900 <_ZN5Print5printEfi>
   d4404:	f001 fc2c 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4408:	4976      	ldr	r1, [pc, #472]	; (d45e4 <loop+0x394>)
   d440a:	f001 f97d 	bl	d5708 <_ZN5Print5printEPKc>
   d440e:	f001 fc27 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4412:	994f      	ldr	r1, [sp, #316]	; 0x13c
   d4414:	f001 f98b 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
   d4418:	f001 fc22 	bl	d5c60 <_Z16_fetch_usbserialv>
   d441c:	4973      	ldr	r1, [pc, #460]	; (d45ec <loop+0x39c>)
   d441e:	f001 f973 	bl	d5708 <_ZN5Print5printEPKc>
   d4422:	f001 fc1d 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4426:	9953      	ldr	r1, [sp, #332]	; 0x14c
   d4428:	f001 f981 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d442c:	f001 fc18 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4430:	4961      	ldr	r1, [pc, #388]	; (d45b8 <loop+0x368>)
   d4432:	f001 f97c 	bl	d572e <_ZN5Print7printlnEPKc>
  }

  // ***
  // *** Get the Recommended Minimum Navigation Information ($GPRMC).
  // ***
  Rmc rmc = Rmc(_gps);
   d4436:	495b      	ldr	r1, [pc, #364]	; (d45a4 <loop+0x354>)
   d4438:	a80d      	add	r0, sp, #52	; 0x34
   d443a:	f7ff fefb 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d443e:	a90d      	add	r1, sp, #52	; 0x34
   d4440:	a857      	add	r0, sp, #348	; 0x15c
   d4442:	f000 fc9b 	bl	d4d7c <_ZN3RmcC1E9NmeaCache>
   d4446:	a80d      	add	r0, sp, #52	; 0x34
   d4448:	f7ff feb2 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
  if (rmc.parse())
   d444c:	a857      	add	r0, sp, #348	; 0x15c
   d444e:	f000 fbcc 	bl	d4bea <_ZN3Rmc5parseEv>
   d4452:	2800      	cmp	r0, #0
   d4454:	f000 8083 	beq.w	d455e <loop+0x30e>
  {
    Serial.println("3) Recommended Minimum Navigation Information ($GPRMC)");
   d4458:	f001 fc02 	bl	d5c60 <_Z16_fetch_usbserialv>
   d445c:	4964      	ldr	r1, [pc, #400]	; (d45f0 <loop+0x3a0>)
   d445e:	f001 f966 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d4462:	f001 fbfd 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4466:	4951      	ldr	r1, [pc, #324]	; (d45ac <loop+0x35c>)
   d4468:	f001 f961 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(rmc.utcTime);
   d446c:	f001 fbf8 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4470:	4953      	ldr	r1, [pc, #332]	; (d45c0 <loop+0x370>)
   d4472:	f001 f949 	bl	d5708 <_ZN5Print5printEPKc>
   d4476:	f001 fbf3 	bl	d5c60 <_Z16_fetch_usbserialv>
   d447a:	9961      	ldr	r1, [sp, #388]	; 0x184
   d447c:	f001 f957 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(rmc.latitude);
   d4480:	f001 fbee 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4484:	494f      	ldr	r1, [pc, #316]	; (d45c4 <loop+0x374>)
   d4486:	f001 f93f 	bl	d5708 <_ZN5Print5printEPKc>
   d448a:	f001 fbe9 	bl	d5c60 <_Z16_fetch_usbserialv>
   d448e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   d4490:	f001 f94d 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(rmc.northSouthIndicator);
   d4494:	f001 fbe4 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4498:	494b      	ldr	r1, [pc, #300]	; (d45c8 <loop+0x378>)
   d449a:	f001 f935 	bl	d5708 <_ZN5Print5printEPKc>
   d449e:	f001 fbdf 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44a2:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   d44a4:	f001 f943 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(rmc.longitude);
   d44a8:	f001 fbda 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44ac:	4947      	ldr	r1, [pc, #284]	; (d45cc <loop+0x37c>)
   d44ae:	f001 f92b 	bl	d5708 <_ZN5Print5printEPKc>
   d44b2:	f001 fbd5 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44b6:	9971      	ldr	r1, [sp, #452]	; 0x1c4
   d44b8:	f001 f939 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(rmc.eastWestIndicator);
   d44bc:	f001 fbd0 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44c0:	4943      	ldr	r1, [pc, #268]	; (d45d0 <loop+0x380>)
   d44c2:	f001 f921 	bl	d5708 <_ZN5Print5printEPKc>
   d44c6:	f001 fbcb 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44ca:	9975      	ldr	r1, [sp, #468]	; 0x1d4
   d44cc:	f001 f92f 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Speed Over Ground: "); Serial.println(rmc.speedOverGround);
   d44d0:	f001 fbc6 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44d4:	4947      	ldr	r1, [pc, #284]	; (d45f4 <loop+0x3a4>)
   d44d6:	f001 f917 	bl	d5708 <_ZN5Print5printEPKc>
   d44da:	f001 fbc1 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44de:	ed9d 0a79 	vldr	s0, [sp, #484]	; 0x1e4
   d44e2:	2102      	movs	r1, #2
   d44e4:	f001 fa26 	bl	d5934 <_ZN5Print7printlnEfi>
    Serial.print("Course Over Ground: "); Serial.println(rmc.courseOverGround);
   d44e8:	f001 fbba 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44ec:	4942      	ldr	r1, [pc, #264]	; (d45f8 <loop+0x3a8>)
   d44ee:	f001 f90b 	bl	d5708 <_ZN5Print5printEPKc>
   d44f2:	f001 fbb5 	bl	d5c60 <_Z16_fetch_usbserialv>
   d44f6:	ed9d 0a7a 	vldr	s0, [sp, #488]	; 0x1e8
   d44fa:	2102      	movs	r1, #2
   d44fc:	f001 fa1a 	bl	d5934 <_ZN5Print7printlnEfi>
    Serial.print("Date: "); Serial.println(rmc.date);
   d4500:	f001 fbae 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4504:	493d      	ldr	r1, [pc, #244]	; (d45fc <loop+0x3ac>)
   d4506:	f001 f8ff 	bl	d5708 <_ZN5Print5printEPKc>
   d450a:	f001 fba9 	bl	d5c60 <_Z16_fetch_usbserialv>
   d450e:	997b      	ldr	r1, [sp, #492]	; 0x1ec
   d4510:	f001 f90d 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Magnetic Variation: "); Serial.print(rmc.magneticVariation); Serial.print(" "); Serial.println(rmc.magneticVariationDirection);
   d4514:	f001 fba4 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4518:	4939      	ldr	r1, [pc, #228]	; (d4600 <loop+0x3b0>)
   d451a:	f001 f8f5 	bl	d5708 <_ZN5Print5printEPKc>
   d451e:	f001 fb9f 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4522:	ed9d 0a7f 	vldr	s0, [sp, #508]	; 0x1fc
   d4526:	2102      	movs	r1, #2
   d4528:	f001 f9ea 	bl	d5900 <_ZN5Print5printEfi>
   d452c:	f001 fb98 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4530:	492c      	ldr	r1, [pc, #176]	; (d45e4 <loop+0x394>)
   d4532:	f001 f8e9 	bl	d5708 <_ZN5Print5printEPKc>
   d4536:	f001 fb93 	bl	d5c60 <_Z16_fetch_usbserialv>
   d453a:	9980      	ldr	r1, [sp, #512]	; 0x200
   d453c:	f001 f8f7 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.print("Mode: "); Serial.println(rmc.mode);
   d4540:	f001 fb8e 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4544:	492f      	ldr	r1, [pc, #188]	; (d4604 <loop+0x3b4>)
   d4546:	f001 f8df 	bl	d5708 <_ZN5Print5printEPKc>
   d454a:	f001 fb89 	bl	d5c60 <_Z16_fetch_usbserialv>
   d454e:	9984      	ldr	r1, [sp, #528]	; 0x210
   d4550:	f001 f8ed 	bl	d572e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d4554:	f001 fb84 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4558:	4917      	ldr	r1, [pc, #92]	; (d45b8 <loop+0x368>)
   d455a:	f001 f8e8 	bl	d572e <_ZN5Print7printlnEPKc>
  }

  delay(1000);
   d455e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4562:	f001 fa09 	bl	d5978 <delay>

$GPRMC,033718.000,A,4136.2571,N,08801.8272,W,0.01,132.25,061016,,,D*7E

*/

class Rmc : public Nmea
   d4566:	4b28      	ldr	r3, [pc, #160]	; (d4608 <loop+0x3b8>)
   d4568:	9357      	str	r3, [sp, #348]	; 0x15c
   d456a:	a884      	add	r0, sp, #528	; 0x210
   d456c:	f000 ff1e 	bl	d53ac <_ZN6StringD1Ev>
   d4570:	a880      	add	r0, sp, #512	; 0x200
   d4572:	f000 ff1b 	bl	d53ac <_ZN6StringD1Ev>
   d4576:	a87b      	add	r0, sp, #492	; 0x1ec
   d4578:	f000 ff18 	bl	d53ac <_ZN6StringD1Ev>
   d457c:	a875      	add	r0, sp, #468	; 0x1d4
   d457e:	f000 ff15 	bl	d53ac <_ZN6StringD1Ev>
   d4582:	a871      	add	r0, sp, #452	; 0x1c4
   d4584:	f000 ff12 	bl	d53ac <_ZN6StringD1Ev>
   d4588:	a86d      	add	r0, sp, #436	; 0x1b4
   d458a:	f000 ff0f 	bl	d53ac <_ZN6StringD1Ev>
   d458e:	a869      	add	r0, sp, #420	; 0x1a4
   d4590:	f000 ff0c 	bl	d53ac <_ZN6StringD1Ev>
   d4594:	a865      	add	r0, sp, #404	; 0x194
   d4596:	f000 ff09 	bl	d53ac <_ZN6StringD1Ev>
   d459a:	a861      	add	r0, sp, #388	; 0x184
   d459c:	f000 ff06 	bl	d53ac <_ZN6StringD1Ev>
   d45a0:	e034      	b.n	d460c <loop+0x3bc>
   d45a2:	bf00      	nop
   d45a4:	2003e2e0 	.word	0x2003e2e0
   d45a8:	000d8ab0 	.word	0x000d8ab0
   d45ac:	000d8acb 	.word	0x000d8acb
   d45b0:	000d8b02 	.word	0x000d8b02
   d45b4:	000d8b0f 	.word	0x000d8b0f
   d45b8:	000d8e93 	.word	0x000d8e93
   d45bc:	000d8b20 	.word	0x000d8b20
   d45c0:	000d8b51 	.word	0x000d8b51
   d45c4:	000d8b5c 	.word	0x000d8b5c
   d45c8:	000d8b67 	.word	0x000d8b67
   d45cc:	000d8b7e 	.word	0x000d8b7e
   d45d0:	000d8b8a 	.word	0x000d8b8a
   d45d4:	000d8b9f 	.word	0x000d8b9f
   d45d8:	000d8bb8 	.word	0x000d8bb8
   d45dc:	000d8bca 	.word	0x000d8bca
   d45e0:	000d8bed 	.word	0x000d8bed
   d45e4:	000d8e71 	.word	0x000d8e71
   d45e8:	000d8bf8 	.word	0x000d8bf8
   d45ec:	000d8c0d 	.word	0x000d8c0d
   d45f0:	000d8c22 	.word	0x000d8c22
   d45f4:	000d8c59 	.word	0x000d8c59
   d45f8:	000d8c6d 	.word	0x000d8c6d
   d45fc:	000d8c82 	.word	0x000d8c82
   d4600:	000d8c89 	.word	0x000d8c89
   d4604:	000d8c9e 	.word	0x000d8c9e
   d4608:	000d8cf4 	.word	0x000d8cf4
#define _NMEA_H

#include "application.h"
#include "NmeaCache.h"

class Nmea
   d460c:	a85d      	add	r0, sp, #372	; 0x174
   d460e:	f000 fecd 	bl	d53ac <_ZN6StringD1Ev>
   d4612:	a858      	add	r0, sp, #352	; 0x160
   d4614:	f000 feca 	bl	d53ac <_ZN6StringD1Ev>
Checksum
<CR> <LF>                                       End of message termination

*/

class Gga : public Nmea
   d4618:	4b15      	ldr	r3, [pc, #84]	; (d4670 <loop+0x420>)
   d461a:	9329      	str	r3, [sp, #164]	; 0xa4
   d461c:	a853      	add	r0, sp, #332	; 0x14c
   d461e:	f000 fec5 	bl	d53ac <_ZN6StringD1Ev>
   d4622:	a84f      	add	r0, sp, #316	; 0x13c
   d4624:	f000 fec2 	bl	d53ac <_ZN6StringD1Ev>
   d4628:	a84a      	add	r0, sp, #296	; 0x128
   d462a:	f000 febf 	bl	d53ac <_ZN6StringD1Ev>
   d462e:	a843      	add	r0, sp, #268	; 0x10c
   d4630:	f000 febc 	bl	d53ac <_ZN6StringD1Ev>
   d4634:	a83f      	add	r0, sp, #252	; 0xfc
   d4636:	f000 feb9 	bl	d53ac <_ZN6StringD1Ev>
   d463a:	a83b      	add	r0, sp, #236	; 0xec
   d463c:	f000 feb6 	bl	d53ac <_ZN6StringD1Ev>
   d4640:	a837      	add	r0, sp, #220	; 0xdc
   d4642:	f000 feb3 	bl	d53ac <_ZN6StringD1Ev>
   d4646:	a833      	add	r0, sp, #204	; 0xcc
   d4648:	f000 feb0 	bl	d53ac <_ZN6StringD1Ev>
   d464c:	a82f      	add	r0, sp, #188	; 0xbc
   d464e:	f000 fead 	bl	d53ac <_ZN6StringD1Ev>
   d4652:	a82a      	add	r0, sp, #168	; 0xa8
   d4654:	f000 feaa 	bl	d53ac <_ZN6StringD1Ev>
Checksum
<CR> <LF>                                       End of message termination

*/

class Pgtop : public Nmea
   d4658:	4b06      	ldr	r3, [pc, #24]	; (d4674 <loop+0x424>)
   d465a:	9301      	str	r3, [sp, #4]
   d465c:	a807      	add	r0, sp, #28
   d465e:	f000 fea5 	bl	d53ac <_ZN6StringD1Ev>
   d4662:	a802      	add	r0, sp, #8
   d4664:	f000 fea2 	bl	d53ac <_ZN6StringD1Ev>
}
   d4668:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   d466c:	bd10      	pop	{r4, pc}
   d466e:	bf00      	nop
   d4670:	000d8d00 	.word	0x000d8d00
   d4674:	000d8d0c 	.word	0x000d8d0c

000d4678 <_GLOBAL__sub_I__gps>:
   d4678:	b5f0      	push	{r4, r5, r6, r7, lr}
   d467a:	b089      	sub	sp, #36	; 0x24

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d467c:	f000 fc9a 	bl	d4fb4 <HAL_Pin_Map>

// ***
// *** Create a Gps instance. The RX an TX pins are connected to
// *** the TX and RX pins on the electron (Serial1).
// ***
Gps _gps = Gps(&Serial1);
   d4680:	f001 fb74 	bl	d5d6c <_Z22__fetch_global_Serial1v>
   d4684:	4c1e      	ldr	r4, [pc, #120]	; (d4700 <_GLOBAL__sub_I__gps+0x88>)
   d4686:	4f1f      	ldr	r7, [pc, #124]	; (d4704 <_GLOBAL__sub_I__gps+0x8c>)
   d4688:	4601      	mov	r1, r0
   d468a:	4620      	mov	r0, r4
   d468c:	f000 fbca 	bl	d4e24 <_ZN3GpsC1EP11USARTSerial>
   d4690:	463a      	mov	r2, r7
   d4692:	491d      	ldr	r1, [pc, #116]	; (d4708 <_GLOBAL__sub_I__gps+0x90>)
   d4694:	4620      	mov	r0, r4
   d4696:	f001 fd2f 	bl	d60f8 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d469a:	4b1c      	ldr	r3, [pc, #112]	; (d470c <_GLOBAL__sub_I__gps+0x94>)
   d469c:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d469e:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d46a0:	4c1b      	ldr	r4, [pc, #108]	; (d4710 <_GLOBAL__sub_I__gps+0x98>)
   d46a2:	4b1c      	ldr	r3, [pc, #112]	; (d4714 <_GLOBAL__sub_I__gps+0x9c>)
   d46a4:	6023      	str	r3, [r4, #0]
   d46a6:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d46aa:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d46ae:	ae02      	add	r6, sp, #8
   d46b0:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d46b4:	e892 0003 	ldmia.w	r2, {r0, r1}
   d46b8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d46bc:	e896 0003 	ldmia.w	r6, {r0, r1}
   d46c0:	e882 0003 	stmia.w	r2, {r0, r1}
   d46c4:	4a14      	ldr	r2, [pc, #80]	; (d4718 <_GLOBAL__sub_I__gps+0xa0>)
   d46c6:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d46c8:	69a2      	ldr	r2, [r4, #24]
   d46ca:	9207      	str	r2, [sp, #28]
   d46cc:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d46ce:	4a13      	ldr	r2, [pc, #76]	; (d471c <_GLOBAL__sub_I__gps+0xa4>)
   d46d0:	7123      	strb	r3, [r4, #4]
   d46d2:	60a3      	str	r3, [r4, #8]
   d46d4:	61a2      	str	r2, [r4, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d46d6:	9306      	str	r3, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	9300      	str	r3, [sp, #0]
   d46dc:	4a10      	ldr	r2, [pc, #64]	; (d4720 <_GLOBAL__sub_I__gps+0xa8>)
   d46de:	4623      	mov	r3, r4
   d46e0:	2101      	movs	r1, #1
   d46e2:	f104 0008 	add.w	r0, r4, #8
   d46e6:	f000 fca5 	bl	d5034 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d46ea:	4628      	mov	r0, r5
   d46ec:	f7ff fd1a 	bl	d4124 <_ZNSt14_Function_baseD1Ev>

// ***
// *** Create a timer that fires every 1 ms to capture
// *** incoming serial port data from the GPS.
// ***
Timer _timer = Timer(1, onSerialData);
   d46f0:	463a      	mov	r2, r7
   d46f2:	490c      	ldr	r1, [pc, #48]	; (d4724 <_GLOBAL__sub_I__gps+0xac>)
   d46f4:	4620      	mov	r0, r4
   d46f6:	f001 fcff 	bl	d60f8 <__aeabi_atexit>
    Serial.print("Mode: "); Serial.println(rmc.mode);
    Serial.println("");
  }

  delay(1000);
}
   d46fa:	b009      	add	sp, #36	; 0x24
   d46fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46fe:	bf00      	nop
   d4700:	2003e2e0 	.word	0x2003e2e0
   d4704:	2003e2dc 	.word	0x2003e2dc
   d4708:	000d41cd 	.word	0x000d41cd
   d470c:	000d40d1 	.word	0x000d40d1
   d4710:	2003e3dc 	.word	0x2003e3dc
   d4714:	000d8a94 	.word	0x000d8a94
   d4718:	000d40b7 	.word	0x000d40b7
   d471c:	000d40b3 	.word	0x000d40b3
   d4720:	000d40e9 	.word	0x000d40e9
   d4724:	000d4155 	.word	0x000d4155

000d4728 <_ZN4NmeaC1E6Stringh9NmeaCache>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Nmea.h"

Nmea::Nmea(String messageId, uint8_t dataIndex, NmeaCache nmeaCache)
   d4728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d472c:	4f11      	ldr	r7, [pc, #68]	; (d4774 <_ZN4NmeaC1E6Stringh9NmeaCache+0x4c>)
   d472e:	4604      	mov	r4, r0
   d4730:	b085      	sub	sp, #20
   d4732:	4689      	mov	r9, r1
   d4734:	f104 0514 	add.w	r5, r4, #20
   d4738:	4639      	mov	r1, r7
   d473a:	4616      	mov	r6, r2
   d473c:	4698      	mov	r8, r3
   d473e:	f000 fe7c 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4742:	4639      	mov	r1, r7
   d4744:	4628      	mov	r0, r5
   d4746:	f000 fe78 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
{
    // ***
    // *** Save the Message ID
    // ***
    this->_messageId = messageId;
   d474a:	4649      	mov	r1, r9
   d474c:	4620      	mov	r0, r4
   d474e:	f000 fea4 	bl	d549a <_ZN6StringaSERKS_>
    this->_dataIndex = dataIndex;
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d4752:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    // ***
    // *** Save the data index. This is the position
    // *** in the GPS ata array that this sentence 
    // *** can be found.
    // ***
    this->_dataIndex = dataIndex;
   d4756:	7426      	strb	r6, [r4, #16]
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d4758:	4668      	mov	r0, sp
   d475a:	f000 fead 	bl	d54b8 <_ZN6StringC1ERKS_>
   d475e:	4669      	mov	r1, sp
   d4760:	4628      	mov	r0, r5
   d4762:	f000 feb4 	bl	d54ce <_ZN6StringaSEOS_>
   d4766:	4668      	mov	r0, sp
   d4768:	f000 fe20 	bl	d53ac <_ZN6StringD1Ev>
}
   d476c:	4620      	mov	r0, r4
   d476e:	b005      	add	sp, #20
   d4770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4774:	000d8e93 	.word	0x000d8e93

000d4778 <_ZN4Nmea15extractChecksumEv>:

    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
   d4778:	b5f0      	push	{r4, r5, r6, r7, lr}
   d477a:	b085      	sub	sp, #20
   d477c:	4607      	mov	r7, r0
    uint16_t returnValue = 0;
    
    // ***
    // *** Get the position of the last * character.
    // ***
    uint8_t index = this->_data.lastIndexOf("*");
   d477e:	f100 0514 	add.w	r5, r0, #20
   d4782:	4918      	ldr	r1, [pc, #96]	; (d47e4 <_ZN4Nmea15extractChecksumEv+0x6c>)
   d4784:	4668      	mov	r0, sp
   d4786:	f000 fe58 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d478a:	4669      	mov	r1, sp
   d478c:	4628      	mov	r0, r5
   d478e:	f000 ff3a 	bl	d5606 <_ZNK6String11lastIndexOfERKS_>
   d4792:	4604      	mov	r4, r0
   d4794:	4668      	mov	r0, sp
   d4796:	f000 fe09 	bl	d53ac <_ZN6StringD1Ev>
    
    // ***
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
   d479a:	b2e1      	uxtb	r1, r4
   d479c:	1c8e      	adds	r6, r1, #2
   d479e:	69fb      	ldr	r3, [r7, #28]
   d47a0:	b2b2      	uxth	r2, r6
   d47a2:	429a      	cmp	r2, r3
   d47a4:	d81b      	bhi.n	d47de <_ZN4Nmea15extractChecksumEv+0x66>
    {
        char c1 = this->_data.charAt(index + 1);
   d47a6:	3101      	adds	r1, #1
   d47a8:	4628      	mov	r0, r5
   d47aa:	f000 fef4 	bl	d5596 <_ZNK6String6charAtEj>
        char c2 = this->_data.charAt(index + 2);
   d47ae:	4631      	mov	r1, r6
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
    {
        char c1 = this->_data.charAt(index + 1);
   d47b0:	4604      	mov	r4, r0
        char c2 = this->_data.charAt(index + 2);
   d47b2:	4628      	mov	r0, r5
   d47b4:	f000 feef 	bl	d5596 <_ZNK6String6charAtEj>
   d47b8:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   d47bc:	b2db      	uxtb	r3, r3
   d47be:	2b15      	cmp	r3, #21
   d47c0:	bf9a      	itte	ls
   d47c2:	4a09      	ldrls	r2, [pc, #36]	; (d47e8 <_ZN4Nmea15extractChecksumEv+0x70>)
   d47c4:	5cd3      	ldrbls	r3, [r2, r3]
   d47c6:	2300      	movhi	r3, #0

        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d47c8:	011a      	lsls	r2, r3, #4
   d47ca:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
   d47ce:	b2db      	uxtb	r3, r3
   d47d0:	2b15      	cmp	r3, #21
   d47d2:	bf9a      	itte	ls
   d47d4:	4904      	ldrls	r1, [pc, #16]	; (d47e8 <_ZN4Nmea15extractChecksumEv+0x70>)
   d47d6:	5ccb      	ldrbls	r3, [r1, r3]
   d47d8:	2300      	movhi	r3, #0
   d47da:	18d0      	adds	r0, r2, r3
   d47dc:	e000      	b.n	d47e0 <_ZN4Nmea15extractChecksumEv+0x68>
    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
    uint16_t returnValue = 0;
   d47de:	2000      	movs	r0, #0

        returnValue = (parseHex(c1) * 16) + parseHex(c2);
    }
    
    return returnValue;
}
   d47e0:	b005      	add	sp, #20
   d47e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47e4:	000d8ca5 	.word	0x000d8ca5
   d47e8:	000d8cab 	.word	0x000d8cab

000d47ec <_ZN4Nmea17calculateChecksumEv>:

uint16_t Nmea::calculateChecksum()
{
   d47ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d47ee:	b085      	sub	sp, #20
    uint16_t returnValue = 0;
    
    // ***
    // *** The string must start with the $ character.
    // ***
    if (this->_data.startsWith("$"))
   d47f0:	f100 0614 	add.w	r6, r0, #20
   d47f4:	490f      	ldr	r1, [pc, #60]	; (d4834 <_ZN4Nmea17calculateChecksumEv+0x48>)
    
    return returnValue;
}

uint16_t Nmea::calculateChecksum()
{
   d47f6:	4607      	mov	r7, r0
    uint16_t returnValue = 0;
    
    // ***
    // *** The string must start with the $ character.
    // ***
    if (this->_data.startsWith("$"))
   d47f8:	4668      	mov	r0, sp
   d47fa:	f000 fe1e 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d47fe:	4669      	mov	r1, sp
   d4800:	4630      	mov	r0, r6
   d4802:	f000 feb6 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4806:	4604      	mov	r4, r0
   d4808:	4668      	mov	r0, sp
   d480a:	f000 fdcf 	bl	d53ac <_ZN6StringD1Ev>
   d480e:	b174      	cbz	r4, d482e <_ZN4Nmea17calculateChecksumEv+0x42>
   d4810:	2501      	movs	r5, #1
   d4812:	2400      	movs	r4, #0
        // ***
        // *** The checksum does not include the first character ($)
        // *** and it does not include the check sum value (the last
        // *** 3 characters (*xx).
        // ***
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d4814:	69fb      	ldr	r3, [r7, #28]
   d4816:	3b03      	subs	r3, #3
   d4818:	429d      	cmp	r5, r3
   d481a:	d208      	bcs.n	d482e <_ZN4Nmea17calculateChecksumEv+0x42>
        {
            // ***
            // *** XOR the bytes.
            // ***
            returnValue ^= this->_data.charAt(i);
   d481c:	4629      	mov	r1, r5
   d481e:	4630      	mov	r0, r6
   d4820:	f000 feb9 	bl	d5596 <_ZNK6String6charAtEj>
        // ***
        // *** The checksum does not include the first character ($)
        // *** and it does not include the check sum value (the last
        // *** 3 characters (*xx).
        // ***
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d4824:	3501      	adds	r5, #1
        {
            // ***
            // *** XOR the bytes.
            // ***
            returnValue ^= this->_data.charAt(i);
   d4826:	4060      	eors	r0, r4
   d4828:	b284      	uxth	r4, r0
        // ***
        // *** The checksum does not include the first character ($)
        // *** and it does not include the check sum value (the last
        // *** 3 characters (*xx).
        // ***
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d482a:	b2ed      	uxtb	r5, r5
   d482c:	e7f2      	b.n	d4814 <_ZN4Nmea17calculateChecksumEv+0x28>
            returnValue ^= this->_data.charAt(i);
        }
    }
    
    return returnValue;
}
   d482e:	4620      	mov	r0, r4
   d4830:	b005      	add	sp, #20
   d4832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4834:	000d8ca7 	.word	0x000d8ca7

000d4838 <_ZN4Nmea7isValidEv>:
{
    return false;
}

bool Nmea::isValid()
{
   d4838:	b538      	push	{r3, r4, r5, lr}
    bool returnValue = false;
    
    if (this->_data.startsWith(this->_messageId))
   d483a:	4601      	mov	r1, r0
{
    return false;
}

bool Nmea::isValid()
{
   d483c:	4605      	mov	r5, r0
    bool returnValue = false;
    
    if (this->_data.startsWith(this->_messageId))
   d483e:	3014      	adds	r0, #20
   d4840:	f000 fe97 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4844:	b148      	cbz	r0, d485a <_ZN4Nmea7isValidEv+0x22>
    {
        // ***
        // *** Get the check sumn value from the string.
        // ***
        uint16_t providedChecksum = this->extractChecksum();
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff ff96 	bl	d4778 <_ZN4Nmea15extractChecksumEv>
   d484c:	4604      	mov	r4, r0
        
        // ***
        // *** Calculate the cheksum of the string.
        // ***
        uint16_t calculatedChecksum = this->calculateChecksum();
   d484e:	4628      	mov	r0, r5
   d4850:	f7ff ffcc 	bl	d47ec <_ZN4Nmea17calculateChecksumEv>
        
        // ***
        // *** Comparethe two values.
        // ***
        returnValue = (providedChecksum == calculatedChecksum);
   d4854:	1a23      	subs	r3, r4, r0
   d4856:	4258      	negs	r0, r3
   d4858:	4158      	adcs	r0, r3
    }

    return returnValue;
}
   d485a:	bd38      	pop	{r3, r4, r5, pc}

000d485c <_ZN4Nmea15getNextPositionEm>:

    return returnValue;
}

int32_t Nmea::getNextPosition(uint32_t from)
{
   d485c:	b530      	push	{r4, r5, lr}
   d485e:	b085      	sub	sp, #20
   d4860:	4604      	mov	r4, r0
   d4862:	460d      	mov	r5, r1
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        returnValue = this->_data.indexOf(",", from);
   d4864:	4668      	mov	r0, sp
   d4866:	4908      	ldr	r1, [pc, #32]	; (d4888 <_ZN4Nmea15getNextPositionEm+0x2c>)
   d4868:	f000 fde7 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d486c:	462a      	mov	r2, r5
   d486e:	4669      	mov	r1, sp
   d4870:	f104 0014 	add.w	r0, r4, #20
   d4874:	f000 fe91 	bl	d559a <_ZNK6String7indexOfERKS_j>
   d4878:	4604      	mov	r4, r0
   d487a:	4668      	mov	r0, sp
   d487c:	f000 fd96 	bl	d53ac <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d4880:	4620      	mov	r0, r4
   d4882:	b005      	add	sp, #20
   d4884:	bd30      	pop	{r4, r5, pc}
   d4886:	bf00      	nop
   d4888:	000d8ca9 	.word	0x000d8ca9

000d488c <_ZN4Nmea13getNextIsNullEm>:

bool Nmea::getNextIsNull(uint32_t from)
{
   d488c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d488e:	3101      	adds	r1, #1
   d4890:	3014      	adds	r0, #20
   d4892:	f000 fe80 	bl	d5596 <_ZNK6String6charAtEj>
   d4896:	4601      	mov	r1, r0
   d4898:	4668      	mov	r0, sp
   d489a:	f000 fe31 	bl	d5500 <_ZN6StringC1Ec>
        returnValue = nextChar.equals(",");
   d489e:	4906      	ldr	r1, [pc, #24]	; (d48b8 <_ZN4Nmea13getNextIsNullEm+0x2c>)
   d48a0:	4668      	mov	r0, sp
   d48a2:	f000 fe3e 	bl	d5522 <_ZNK6String6equalsEPKc>
   d48a6:	4604      	mov	r4, r0
{
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d48a8:	4668      	mov	r0, sp
   d48aa:	f000 fd7f 	bl	d53ac <_ZN6StringD1Ev>
        returnValue = nextChar.equals(",");
    }
    
    return returnValue;
}
   d48ae:	1c20      	adds	r0, r4, #0
   d48b0:	bf18      	it	ne
   d48b2:	2001      	movne	r0, #1
   d48b4:	b004      	add	sp, #16
   d48b6:	bd10      	pop	{r4, pc}
   d48b8:	000d8ca9 	.word	0x000d8ca9

000d48bc <_ZN4Nmea13getNextUint32EmPm>:

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d48bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d48be:	2300      	movs	r3, #0
   d48c0:	6013      	str	r3, [r2, #0]
    
    return returnValue;
}

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d48c2:	4606      	mov	r6, r0
   d48c4:	4615      	mov	r5, r2
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d48c6:	f7ff ffc9 	bl	d485c <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d48ca:	1c43      	adds	r3, r0, #1
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d48cc:	4604      	mov	r4, r0

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d48ce:	d004      	beq.n	d48da <_ZN4Nmea13getNextUint32EmPm+0x1e>
   d48d0:	4601      	mov	r1, r0
   d48d2:	4630      	mov	r0, r6
   d48d4:	f7ff ffda 	bl	d488c <_ZN4Nmea13getNextIsNullEm>
   d48d8:	b110      	cbz	r0, d48e0 <_ZN4Nmea13getNextUint32EmPm+0x24>
    return returnValue;
}

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
    int32_t returnValue = -1;
   d48da:	f04f 34ff 	mov.w	r4, #4294967295
   d48de:	e00d      	b.n	d48fc <_ZN4Nmea13getNextUint32EmPm+0x40>
        // ***
        // *** The toInt() function will work if there are characters
        // *** after the number so do no worry abut stripping out the
        // *** the text after the number.
        // ***
        returnValue = index + 1;
   d48e0:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toInt();
   d48e2:	4622      	mov	r2, r4
   d48e4:	f106 0114 	add.w	r1, r6, #20
   d48e8:	4668      	mov	r0, sp
   d48ea:	f000 feb1 	bl	d5650 <_ZNK6String9substringEj>
   d48ee:	4668      	mov	r0, sp
   d48f0:	f000 feb5 	bl	d565e <_ZNK6String5toIntEv>
   d48f4:	6028      	str	r0, [r5, #0]
   d48f6:	4668      	mov	r0, sp
   d48f8:	f000 fd58 	bl	d53ac <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d48fc:	4620      	mov	r0, r4
   d48fe:	b004      	add	sp, #16
   d4900:	bd70      	pop	{r4, r5, r6, pc}

000d4902 <_ZN4Nmea12getNextUint8EmPh>:

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d4902:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d4904:	2300      	movs	r3, #0
   d4906:	7013      	strb	r3, [r2, #0]
    
    return returnValue;
}

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d4908:	4606      	mov	r6, r0
   d490a:	4615      	mov	r5, r2
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d490c:	f7ff ffa6 	bl	d485c <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d4910:	1c43      	adds	r3, r0, #1
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d4912:	4604      	mov	r4, r0

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d4914:	d004      	beq.n	d4920 <_ZN4Nmea12getNextUint8EmPh+0x1e>
   d4916:	4601      	mov	r1, r0
   d4918:	4630      	mov	r0, r6
   d491a:	f7ff ffb7 	bl	d488c <_ZN4Nmea13getNextIsNullEm>
   d491e:	b110      	cbz	r0, d4926 <_ZN4Nmea12getNextUint8EmPh+0x24>
    return returnValue;
}

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
    int32_t returnValue = -1;
   d4920:	f04f 34ff 	mov.w	r4, #4294967295
   d4924:	e00d      	b.n	d4942 <_ZN4Nmea12getNextUint8EmPh+0x40>
        // ***
        // *** The toInt() function will work if there are characters
        // *** after the number so do no worry abut stripping out the
        // *** the text after the number.
        // ***
        returnValue = index + 1;
   d4926:	3401      	adds	r4, #1
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
   d4928:	4622      	mov	r2, r4
   d492a:	f106 0114 	add.w	r1, r6, #20
   d492e:	4668      	mov	r0, sp
   d4930:	f000 fe8e 	bl	d5650 <_ZNK6String9substringEj>
   d4934:	4668      	mov	r0, sp
   d4936:	f000 fe92 	bl	d565e <_ZNK6String5toIntEv>
   d493a:	7028      	strb	r0, [r5, #0]
   d493c:	4668      	mov	r0, sp
   d493e:	f000 fd35 	bl	d53ac <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d4942:	4620      	mov	r0, r4
   d4944:	b004      	add	sp, #16
   d4946:	bd70      	pop	{r4, r5, r6, pc}

000d4948 <_ZN4Nmea12getNextFloatEmPf>:

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d4948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d494a:	2300      	movs	r3, #0
   d494c:	6013      	str	r3, [r2, #0]
    
    return returnValue;
}

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d494e:	4606      	mov	r6, r0
   d4950:	4615      	mov	r5, r2
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d4952:	f7ff ff83 	bl	d485c <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d4956:	1c43      	adds	r3, r0, #1
    *value = 0;

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d4958:	4604      	mov	r4, r0

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d495a:	d004      	beq.n	d4966 <_ZN4Nmea12getNextFloatEmPf+0x1e>
   d495c:	4601      	mov	r1, r0
   d495e:	4630      	mov	r0, r6
   d4960:	f7ff ff94 	bl	d488c <_ZN4Nmea13getNextIsNullEm>
   d4964:	b110      	cbz	r0, d496c <_ZN4Nmea12getNextFloatEmPf+0x24>
    return returnValue;
}

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
    int32_t returnValue = -1;
   d4966:	f04f 34ff 	mov.w	r4, #4294967295
   d496a:	e00e      	b.n	d498a <_ZN4Nmea12getNextFloatEmPf+0x42>
        // ***
        // *** The toInt() function will work if there are characters
        // *** after the number so do no worry abut stripping out the
        // *** the text after the number.
        // ***
        returnValue = index + 1;
   d496c:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toFloat();
   d496e:	4622      	mov	r2, r4
   d4970:	f106 0114 	add.w	r1, r6, #20
   d4974:	4668      	mov	r0, sp
   d4976:	f000 fe6b 	bl	d5650 <_ZNK6String9substringEj>
   d497a:	4668      	mov	r0, sp
   d497c:	f000 fe74 	bl	d5668 <_ZNK6String7toFloatEv>
   d4980:	4668      	mov	r0, sp
   d4982:	ed85 0a00 	vstr	s0, [r5]
   d4986:	f000 fd11 	bl	d53ac <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d498a:	4620      	mov	r0, r4
   d498c:	b004      	add	sp, #16
   d498e:	bd70      	pop	{r4, r5, r6, pc}

000d4990 <_ZN4Nmea13getNextStringEmmP6String>:

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d4990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4994:	4698      	mov	r8, r3
   d4996:	460c      	mov	r4, r1
   d4998:	4606      	mov	r6, r0
    int32_t returnValue = -1;
    *value = String("");
   d499a:	4917      	ldr	r1, [pc, #92]	; (d49f8 <_ZN4Nmea13getNextStringEmmP6String+0x68>)
   d499c:	4668      	mov	r0, sp
    
    return returnValue;
}

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d499e:	4617      	mov	r7, r2
    int32_t returnValue = -1;
    *value = String("");
   d49a0:	f000 fd4b 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d49a4:	4669      	mov	r1, sp
   d49a6:	4640      	mov	r0, r8
   d49a8:	f000 fd91 	bl	d54ce <_ZN6StringaSEOS_>
   d49ac:	4668      	mov	r0, sp
   d49ae:	f000 fcfd 	bl	d53ac <_ZN6StringD1Ev>

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d49b2:	4621      	mov	r1, r4
   d49b4:	4630      	mov	r0, r6
   d49b6:	f7ff ff51 	bl	d485c <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d49ba:	1c43      	adds	r3, r0, #1
    *value = String("");

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d49bc:	4604      	mov	r4, r0

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d49be:	d004      	beq.n	d49ca <_ZN4Nmea13getNextStringEmmP6String+0x3a>
   d49c0:	4601      	mov	r1, r0
   d49c2:	4630      	mov	r0, r6
   d49c4:	f7ff ff62 	bl	d488c <_ZN4Nmea13getNextIsNullEm>
   d49c8:	b110      	cbz	r0, d49d0 <_ZN4Nmea13getNextStringEmmP6String+0x40>
    return returnValue;
}

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
    int32_t returnValue = -1;
   d49ca:	f04f 35ff 	mov.w	r5, #4294967295
   d49ce:	e00f      	b.n	d49f0 <_ZN4Nmea13getNextStringEmmP6String+0x60>
    if (index != -1 && !this->getNextIsNull(index))
    {
        // ***
        // *** Parse the string.
        // ***
        returnValue = index + 1;
   d49d0:	1c65      	adds	r5, r4, #1
        *value = String(this->_data.substring(index + 1, index + 1 + length));
   d49d2:	1c7b      	adds	r3, r7, #1
   d49d4:	4423      	add	r3, r4
   d49d6:	462a      	mov	r2, r5
   d49d8:	f106 0114 	add.w	r1, r6, #20
   d49dc:	4668      	mov	r0, sp
   d49de:	f000 fe17 	bl	d5610 <_ZNK6String9substringEjj>
   d49e2:	4669      	mov	r1, sp
   d49e4:	4640      	mov	r0, r8
   d49e6:	f000 fd72 	bl	d54ce <_ZN6StringaSEOS_>
   d49ea:	4668      	mov	r0, sp
   d49ec:	f000 fcde 	bl	d53ac <_ZN6StringD1Ev>
    }
    
    return returnValue;
   d49f0:	4628      	mov	r0, r5
   d49f2:	b004      	add	sp, #16
   d49f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49f8:	000d8e93 	.word	0x000d8e93

000d49fc <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
   d49fc:	f000 bada 	b.w	d4fb4 <HAL_Pin_Map>

000d4a00 <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
   d4a00:	b570      	push	{r4, r5, r6, lr}
   d4a02:	4605      	mov	r5, r0
   d4a04:	4604      	mov	r4, r0
   d4a06:	f100 0670 	add.w	r6, r0, #112	; 0x70
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	4903      	ldr	r1, [pc, #12]	; (d4a1c <_ZN9NmeaCacheC1Ev+0x1c>)
   d4a0e:	3410      	adds	r4, #16
   d4a10:	f000 fd13 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a14:	42b4      	cmp	r4, r6
   d4a16:	d1f8      	bne.n	d4a0a <_ZN9NmeaCacheC1Ev+0xa>
{
}
   d4a18:	4628      	mov	r0, r5
   d4a1a:	bd70      	pop	{r4, r5, r6, pc}
   d4a1c:	000d8e93 	.word	0x000d8e93

000d4a20 <_ZN9NmeaCache12msgIdToIndexE6String>:

uint8_t NmeaCache::msgIdToIndex(String messageId)
{
   d4a20:	b530      	push	{r4, r5, lr}
   d4a22:	b085      	sub	sp, #20
   d4a24:	460c      	mov	r4, r1
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
   d4a26:	4668      	mov	r0, sp
   d4a28:	492e      	ldr	r1, [pc, #184]	; (d4ae4 <_ZN9NmeaCache12msgIdToIndexE6String+0xc4>)
   d4a2a:	f000 fd06 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a2e:	4669      	mov	r1, sp
   d4a30:	4620      	mov	r0, r4
   d4a32:	f000 fd9e 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4a36:	4605      	mov	r5, r0
   d4a38:	4668      	mov	r0, sp
   d4a3a:	f000 fcb7 	bl	d53ac <_ZN6StringD1Ev>
   d4a3e:	2d00      	cmp	r5, #0
   d4a40:	d145      	bne.n	d4ace <_ZN9NmeaCache12msgIdToIndexE6String+0xae>
    {
        returnValue = NMEA_INDEX_GGA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
   d4a42:	4929      	ldr	r1, [pc, #164]	; (d4ae8 <_ZN9NmeaCache12msgIdToIndexE6String+0xc8>)
   d4a44:	4668      	mov	r0, sp
   d4a46:	f000 fcf8 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a4a:	4669      	mov	r1, sp
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	f000 fd90 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4a52:	4605      	mov	r5, r0
   d4a54:	4668      	mov	r0, sp
   d4a56:	f000 fca9 	bl	d53ac <_ZN6StringD1Ev>
   d4a5a:	2d00      	cmp	r5, #0
   d4a5c:	d139      	bne.n	d4ad2 <_ZN9NmeaCache12msgIdToIndexE6String+0xb2>
    {
        returnValue = NMEA_INDEX_GSA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
   d4a5e:	4923      	ldr	r1, [pc, #140]	; (d4aec <_ZN9NmeaCache12msgIdToIndexE6String+0xcc>)
   d4a60:	4668      	mov	r0, sp
   d4a62:	f000 fcea 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a66:	4669      	mov	r1, sp
   d4a68:	4620      	mov	r0, r4
   d4a6a:	f000 fd82 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4a6e:	4605      	mov	r5, r0
   d4a70:	4668      	mov	r0, sp
   d4a72:	f000 fc9b 	bl	d53ac <_ZN6StringD1Ev>
   d4a76:	bb75      	cbnz	r5, d4ad6 <_ZN9NmeaCache12msgIdToIndexE6String+0xb6>
    {
        returnValue = NMEA_INDEX_GSV;
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
   d4a78:	491d      	ldr	r1, [pc, #116]	; (d4af0 <_ZN9NmeaCache12msgIdToIndexE6String+0xd0>)
   d4a7a:	4668      	mov	r0, sp
   d4a7c:	f000 fcdd 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a80:	4669      	mov	r1, sp
   d4a82:	4620      	mov	r0, r4
   d4a84:	f000 fd75 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4a88:	4605      	mov	r5, r0
   d4a8a:	4668      	mov	r0, sp
   d4a8c:	f000 fc8e 	bl	d53ac <_ZN6StringD1Ev>
   d4a90:	bb1d      	cbnz	r5, d4ada <_ZN9NmeaCache12msgIdToIndexE6String+0xba>
    {
        returnValue = NMEA_INDEX_RMC;
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
   d4a92:	4918      	ldr	r1, [pc, #96]	; (d4af4 <_ZN9NmeaCache12msgIdToIndexE6String+0xd4>)
   d4a94:	4668      	mov	r0, sp
   d4a96:	f000 fcd0 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4a9a:	4669      	mov	r1, sp
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f000 fd68 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4aa2:	4605      	mov	r5, r0
   d4aa4:	4668      	mov	r0, sp
   d4aa6:	f000 fc81 	bl	d53ac <_ZN6StringD1Ev>
   d4aaa:	b9c5      	cbnz	r5, d4ade <_ZN9NmeaCache12msgIdToIndexE6String+0xbe>
    {
        returnValue = NMEA_INDEX_VTG;
    }
    else if (messageId.startsWith(NMEA_MSGID_PGT))
   d4aac:	4912      	ldr	r1, [pc, #72]	; (d4af8 <_ZN9NmeaCache12msgIdToIndexE6String+0xd8>)
   d4aae:	4668      	mov	r0, sp
   d4ab0:	f000 fcc3 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4ab4:	4669      	mov	r1, sp
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	f000 fd5b 	bl	d5572 <_ZNK6String10startsWithERKS_>
   d4abc:	4604      	mov	r4, r0
   d4abe:	4668      	mov	r0, sp
   d4ac0:	f000 fc74 	bl	d53ac <_ZN6StringD1Ev>
   d4ac4:	2c00      	cmp	r4, #0
    {
        returnValue = NMEA_INDEX_PGT;
   d4ac6:	bf0c      	ite	eq
   d4ac8:	2000      	moveq	r0, #0
   d4aca:	2006      	movne	r0, #6
   d4acc:	e008      	b.n	d4ae0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
{
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
    {
        returnValue = NMEA_INDEX_GGA;
   d4ace:	2001      	movs	r0, #1
   d4ad0:	e006      	b.n	d4ae0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
    {
        returnValue = NMEA_INDEX_GSA;
   d4ad2:	2002      	movs	r0, #2
   d4ad4:	e004      	b.n	d4ae0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
    {
        returnValue = NMEA_INDEX_GSV;
   d4ad6:	2003      	movs	r0, #3
   d4ad8:	e002      	b.n	d4ae0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
    {
        returnValue = NMEA_INDEX_RMC;
   d4ada:	2004      	movs	r0, #4
   d4adc:	e000      	b.n	d4ae0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
    {
        returnValue = NMEA_INDEX_VTG;
   d4ade:	2005      	movs	r0, #5
    {
        returnValue = NMEA_INDEX_PGT;
    }
    
    return returnValue;
   d4ae0:	b005      	add	sp, #20
   d4ae2:	bd30      	pop	{r4, r5, pc}
   d4ae4:	000d8cc1 	.word	0x000d8cc1
   d4ae8:	000d8cc8 	.word	0x000d8cc8
   d4aec:	000d8ccf 	.word	0x000d8ccf
   d4af0:	000d8cd6 	.word	0x000d8cd6
   d4af4:	000d8cdd 	.word	0x000d8cdd
   d4af8:	000d8ce4 	.word	0x000d8ce4

000d4afc <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
   d4afc:	f000 ba5a 	b.w	d4fb4 <HAL_Pin_Map>

000d4b00 <_ZN5Pgtop5parseEv>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d4b00:	b538      	push	{r3, r4, r5, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d4b02:	1d04      	adds	r4, r0, #4
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d4b04:	4605      	mov	r5, r0
    bool returnValue = false;
    
    if (this->isValid())
   d4b06:	4620      	mov	r0, r4
   d4b08:	f7ff fe96 	bl	d4838 <_ZN4Nmea7isValidEv>
   d4b0c:	b160      	cbz	r0, d4b28 <_ZN5Pgtop5parseEv+0x28>
    {
        // ***
        // *** Get the first field value (Command ID).
        // ***
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d4b0e:	f105 0228 	add.w	r2, r5, #40	; 0x28
   d4b12:	2100      	movs	r1, #0
   d4b14:	4620      	mov	r0, r4
   d4b16:	f7ff fed1 	bl	d48bc <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Get the next field value (Reference).
        // ***
        index = getNextUint32(index, &this->reference);
   d4b1a:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   d4b1e:	4601      	mov	r1, r0
   d4b20:	4620      	mov	r0, r4
   d4b22:	f7ff fecb 	bl	d48bc <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Parsing was successful.
        // ***
        returnValue = true;
   d4b26:	2001      	movs	r0, #1
    }
    
    return returnValue;
}
   d4b28:	bd38      	pop	{r3, r4, r5, pc}

000d4b2a <_ZN3Gga5parseEv>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d4b2a:	b538      	push	{r3, r4, r5, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d4b2c:	1d04      	adds	r4, r0, #4
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d4b2e:	4605      	mov	r5, r0
    bool returnValue = false;
    
    if (this->isValid())
   d4b30:	4620      	mov	r0, r4
   d4b32:	f7ff fe81 	bl	d4838 <_ZN4Nmea7isValidEv>
   d4b36:	2800      	cmp	r0, #0
   d4b38:	d056      	beq.n	d4be8 <_ZN3Gga5parseEv+0xbe>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d4b3a:	f105 0328 	add.w	r3, r5, #40	; 0x28
   d4b3e:	220a      	movs	r2, #10
   d4b40:	2100      	movs	r1, #0
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff ff24 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d4b48:	f105 0338 	add.w	r3, r5, #56	; 0x38
   d4b4c:	4601      	mov	r1, r0
   d4b4e:	2209      	movs	r2, #9
   d4b50:	4620      	mov	r0, r4
   d4b52:	f7ff ff1d 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d4b56:	f105 0348 	add.w	r3, r5, #72	; 0x48
   d4b5a:	4601      	mov	r1, r0
   d4b5c:	2201      	movs	r2, #1
   d4b5e:	4620      	mov	r0, r4
   d4b60:	f7ff ff16 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d4b64:	f105 0358 	add.w	r3, r5, #88	; 0x58
   d4b68:	4601      	mov	r1, r0
   d4b6a:	220a      	movs	r2, #10
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f7ff ff0f 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d4b72:	f105 0368 	add.w	r3, r5, #104	; 0x68
   d4b76:	4601      	mov	r1, r0
   d4b78:	2201      	movs	r2, #1
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	f7ff ff08 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Position Fix Indicator).
        // ***
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d4b80:	f105 0278 	add.w	r2, r5, #120	; 0x78
   d4b84:	4601      	mov	r1, r0
   d4b86:	4620      	mov	r0, r4
   d4b88:	f7ff febb 	bl	d4902 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextUint8(index, &this->satellitesUsed);
   d4b8c:	f105 0279 	add.w	r2, r5, #121	; 0x79
   d4b90:	4601      	mov	r1, r0
   d4b92:	4620      	mov	r0, r4
   d4b94:	f7ff feb5 	bl	d4902 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->hdop);
   d4b98:	f105 027c 	add.w	r2, r5, #124	; 0x7c
   d4b9c:	4601      	mov	r1, r0
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff fed2 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->altitude);
   d4ba4:	f105 0280 	add.w	r2, r5, #128	; 0x80
   d4ba8:	4601      	mov	r1, r0
   d4baa:	4620      	mov	r0, r4
   d4bac:	f7ff fecc 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d4bb0:	f105 0384 	add.w	r3, r5, #132	; 0x84
   d4bb4:	4601      	mov	r1, r0
   d4bb6:	2201      	movs	r2, #1
   d4bb8:	4620      	mov	r0, r4
   d4bba:	f7ff fee9 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d4bbe:	f105 0294 	add.w	r2, r5, #148	; 0x94
   d4bc2:	4601      	mov	r1, r0
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	f7ff febf 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d4bca:	f105 0398 	add.w	r3, r5, #152	; 0x98
   d4bce:	4601      	mov	r1, r0
   d4bd0:	2201      	movs	r2, #1
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff fedc 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d4bd8:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
   d4bdc:	4601      	mov	r1, r0
   d4bde:	2201      	movs	r2, #1
   d4be0:	4620      	mov	r0, r4
   d4be2:	f7ff fed5 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Parsing was successful.
        // ***
        returnValue = true;
   d4be6:	2001      	movs	r0, #1
    }
    
    return returnValue;
}
   d4be8:	bd38      	pop	{r3, r4, r5, pc}

000d4bea <_ZN3Rmc5parseEv>:
Rmc::Rmc(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_RMC, NMEA_INDEX_RMC, nmeaCache)
{
}

bool Rmc::parse()
{
   d4bea:	b538      	push	{r3, r4, r5, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d4bec:	1d04      	adds	r4, r0, #4
Rmc::Rmc(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_RMC, NMEA_INDEX_RMC, nmeaCache)
{
}

bool Rmc::parse()
{
   d4bee:	4605      	mov	r5, r0
    bool returnValue = false;
    
    if (this->isValid())
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f7ff fe21 	bl	d4838 <_ZN4Nmea7isValidEv>
   d4bf6:	2800      	cmp	r0, #0
   d4bf8:	d051      	beq.n	d4c9e <_ZN3Rmc5parseEv+0xb4>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d4bfa:	f105 0328 	add.w	r3, r5, #40	; 0x28
   d4bfe:	220a      	movs	r2, #10
   d4c00:	2100      	movs	r1, #0
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff fec4 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Status).
        // ***
        index = this->getNextString(index, 1,  &this->status);
   d4c08:	f105 0338 	add.w	r3, r5, #56	; 0x38
   d4c0c:	4601      	mov	r1, r0
   d4c0e:	2201      	movs	r2, #1
   d4c10:	4620      	mov	r0, r4
   d4c12:	f7ff febd 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>

        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d4c16:	f105 0348 	add.w	r3, r5, #72	; 0x48
   d4c1a:	4601      	mov	r1, r0
   d4c1c:	2209      	movs	r2, #9
   d4c1e:	4620      	mov	r0, r4
   d4c20:	f7ff feb6 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d4c24:	f105 0358 	add.w	r3, r5, #88	; 0x58
   d4c28:	4601      	mov	r1, r0
   d4c2a:	2201      	movs	r2, #1
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	f7ff feaf 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d4c32:	f105 0368 	add.w	r3, r5, #104	; 0x68
   d4c36:	4601      	mov	r1, r0
   d4c38:	220a      	movs	r2, #10
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	f7ff fea8 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d4c40:	f105 0378 	add.w	r3, r5, #120	; 0x78
   d4c44:	4601      	mov	r1, r0
   d4c46:	2201      	movs	r2, #1
   d4c48:	4620      	mov	r0, r4
   d4c4a:	f7ff fea1 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>

        // ***
        // *** Get the next field value (Speed Over Ground).
        // ***
        index = this->getNextFloat(index, &this->speedOverGround);
   d4c4e:	f105 0288 	add.w	r2, r5, #136	; 0x88
   d4c52:	4601      	mov	r1, r0
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff fe77 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>
       
        // ***
        // *** Get the next field value (Course Over Ground).
        // ***
        index = this->getNextFloat(index, &this->courseOverGround);
   d4c5a:	f105 028c 	add.w	r2, r5, #140	; 0x8c
   d4c5e:	4601      	mov	r1, r0
   d4c60:	4620      	mov	r0, r4
   d4c62:	f7ff fe71 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (Date).
        // ***
        index = this->getNextString(index, 6, &this->date);
   d4c66:	f105 0390 	add.w	r3, r5, #144	; 0x90
   d4c6a:	4601      	mov	r1, r0
   d4c6c:	2206      	movs	r2, #6
   d4c6e:	4620      	mov	r0, r4
   d4c70:	f7ff fe8e 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Magnetic Variation).
        // ***
        index = this->getNextFloat(index, &this->magneticVariation);
   d4c74:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
   d4c78:	4601      	mov	r1, r0
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f7ff fe64 	bl	d4948 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (Magnetic Variation Direction).
        // ***
        index = this->getNextString(index, 1, &this->magneticVariationDirection);
   d4c80:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
   d4c84:	4601      	mov	r1, r0
   d4c86:	2201      	movs	r2, #1
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f7ff fe81 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Mode).
        // ***
        index = this->getNextString(index, 1, &this->mode);
   d4c8e:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
   d4c92:	4601      	mov	r1, r0
   d4c94:	2201      	movs	r2, #1
   d4c96:	4620      	mov	r0, r4
   d4c98:	f7ff fe7a 	bl	d4990 <_ZN4Nmea13getNextStringEmmP6String>

        // ***
        // *** Parsing was successful.
        // ***
        returnValue = true;
   d4c9c:	2001      	movs	r0, #1
    }
    
    return returnValue;
   d4c9e:	bd38      	pop	{r3, r4, r5, pc}

000d4ca0 <_ZN5PgtopC1E9NmeaCache>:
#include "Sentence.h"

// **************************************
// *** $PGTOP
// ***
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
   d4ca0:	b530      	push	{r4, r5, lr}
   d4ca2:	b0a1      	sub	sp, #132	; 0x84
   d4ca4:	4604      	mov	r4, r0
   d4ca6:	460d      	mov	r5, r1
   d4ca8:	4668      	mov	r0, sp
   d4caa:	490c      	ldr	r1, [pc, #48]	; (d4cdc <_ZN5PgtopC1E9NmeaCache+0x3c>)
   d4cac:	f000 fbc5 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4cb0:	4629      	mov	r1, r5
   d4cb2:	a804      	add	r0, sp, #16
   d4cb4:	f7ff fabe 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d4cb8:	ab04      	add	r3, sp, #16
   d4cba:	2206      	movs	r2, #6
   d4cbc:	4669      	mov	r1, sp
   d4cbe:	1d20      	adds	r0, r4, #4
   d4cc0:	f7ff fd32 	bl	d4728 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d4cc4:	a804      	add	r0, sp, #16
   d4cc6:	f7ff fa73 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
   d4cca:	4668      	mov	r0, sp
   d4ccc:	f000 fb6e 	bl	d53ac <_ZN6StringD1Ev>
   d4cd0:	4b03      	ldr	r3, [pc, #12]	; (d4ce0 <_ZN5PgtopC1E9NmeaCache+0x40>)
   d4cd2:	6023      	str	r3, [r4, #0]
{
}
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	b021      	add	sp, #132	; 0x84
   d4cd8:	bd30      	pop	{r4, r5, pc}
   d4cda:	bf00      	nop
   d4cdc:	000d8ce4 	.word	0x000d8ce4
   d4ce0:	000d8d0c 	.word	0x000d8d0c

000d4ce4 <_ZN3GgaC1E9NmeaCache>:
}

// **************************************
// *** $GPGGA
// ***
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
   d4ce4:	b530      	push	{r4, r5, lr}
   d4ce6:	b0a1      	sub	sp, #132	; 0x84
   d4ce8:	4604      	mov	r4, r0
   d4cea:	460d      	mov	r5, r1
   d4cec:	4668      	mov	r0, sp
   d4cee:	4920      	ldr	r1, [pc, #128]	; (d4d70 <_ZN3GgaC1E9NmeaCache+0x8c>)
   d4cf0:	f000 fba3 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4cf4:	4629      	mov	r1, r5
   d4cf6:	a804      	add	r0, sp, #16
   d4cf8:	f7ff fa9c 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d4cfc:	2201      	movs	r2, #1
   d4cfe:	ab04      	add	r3, sp, #16
   d4d00:	4669      	mov	r1, sp
   d4d02:	1d20      	adds	r0, r4, #4
   d4d04:	f7ff fd10 	bl	d4728 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d4d08:	a804      	add	r0, sp, #16
   d4d0a:	f7ff fa51 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
   d4d0e:	4668      	mov	r0, sp
   d4d10:	4d18      	ldr	r5, [pc, #96]	; (d4d74 <_ZN3GgaC1E9NmeaCache+0x90>)
   d4d12:	f000 fb4b 	bl	d53ac <_ZN6StringD1Ev>
   d4d16:	4620      	mov	r0, r4
   d4d18:	4b17      	ldr	r3, [pc, #92]	; (d4d78 <_ZN3GgaC1E9NmeaCache+0x94>)
   d4d1a:	f840 3b28 	str.w	r3, [r0], #40
   d4d1e:	4629      	mov	r1, r5
   d4d20:	f000 fb8b 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d24:	4629      	mov	r1, r5
   d4d26:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4d2a:	f000 fb86 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d2e:	4629      	mov	r1, r5
   d4d30:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4d34:	f000 fb81 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d38:	4629      	mov	r1, r5
   d4d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4d3e:	f000 fb7c 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d42:	4629      	mov	r1, r5
   d4d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4d48:	f000 fb77 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d4c:	4629      	mov	r1, r5
   d4d4e:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d4d52:	f000 fb72 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d56:	4629      	mov	r1, r5
   d4d58:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4d5c:	f000 fb6d 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d60:	4629      	mov	r1, r5
   d4d62:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d4d66:	f000 fb68 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
{
}
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	b021      	add	sp, #132	; 0x84
   d4d6e:	bd30      	pop	{r4, r5, pc}
   d4d70:	000d8cc1 	.word	0x000d8cc1
   d4d74:	000d8e93 	.word	0x000d8e93
   d4d78:	000d8d00 	.word	0x000d8d00

000d4d7c <_ZN3RmcC1E9NmeaCache>:
}

// **************************************
// *** $GPRMC
// ***
Rmc::Rmc(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_RMC, NMEA_INDEX_RMC, nmeaCache)
   d4d7c:	b530      	push	{r4, r5, lr}
   d4d7e:	b0a1      	sub	sp, #132	; 0x84
   d4d80:	4604      	mov	r4, r0
   d4d82:	460d      	mov	r5, r1
   d4d84:	4668      	mov	r0, sp
   d4d86:	4923      	ldr	r1, [pc, #140]	; (d4e14 <_ZN3RmcC1E9NmeaCache+0x98>)
   d4d88:	f000 fb57 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4d8c:	4629      	mov	r1, r5
   d4d8e:	a804      	add	r0, sp, #16
   d4d90:	f7ff fa50 	bl	d4234 <_ZN9NmeaCacheC1ERKS_>
   d4d94:	2204      	movs	r2, #4
   d4d96:	18a0      	adds	r0, r4, r2
   d4d98:	ab04      	add	r3, sp, #16
   d4d9a:	4669      	mov	r1, sp
   d4d9c:	f7ff fcc4 	bl	d4728 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d4da0:	a804      	add	r0, sp, #16
   d4da2:	f7ff fa05 	bl	d41b0 <_ZN9NmeaCacheD1Ev>
   d4da6:	4668      	mov	r0, sp
   d4da8:	4d1b      	ldr	r5, [pc, #108]	; (d4e18 <_ZN3RmcC1E9NmeaCache+0x9c>)
   d4daa:	f000 faff 	bl	d53ac <_ZN6StringD1Ev>
   d4dae:	4620      	mov	r0, r4
   d4db0:	4b1a      	ldr	r3, [pc, #104]	; (d4e1c <_ZN3RmcC1E9NmeaCache+0xa0>)
   d4db2:	f840 3b28 	str.w	r3, [r0], #40
   d4db6:	4629      	mov	r1, r5
   d4db8:	f000 fb3f 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4dbc:	4629      	mov	r1, r5
   d4dbe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4dc2:	f000 fb3a 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4dc6:	4629      	mov	r1, r5
   d4dc8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4dcc:	f000 fb35 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4dd0:	4629      	mov	r1, r5
   d4dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4dd6:	f000 fb30 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4dda:	4629      	mov	r1, r5
   d4ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4de0:	f000 fb2b 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4de4:	4629      	mov	r1, r5
   d4de6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4dea:	f000 fb26 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4dee:	4629      	mov	r1, r5
   d4df0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d4df4:	f000 fb21 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4df8:	4629      	mov	r1, r5
   d4dfa:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   d4dfe:	f000 fb1c 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
   d4e02:	4629      	mov	r1, r5
   d4e04:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   d4e08:	f000 fb17 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
{
}
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	b021      	add	sp, #132	; 0x84
   d4e10:	bd30      	pop	{r4, r5, pc}
   d4e12:	bf00      	nop
   d4e14:	000d8cd6 	.word	0x000d8cd6
   d4e18:	000d8e93 	.word	0x000d8e93
   d4e1c:	000d8cf4 	.word	0x000d8cf4

000d4e20 <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
   d4e20:	f000 b8c8 	b.w	d4fb4 <HAL_Pin_Map>

000d4e24 <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d4e24:	b538      	push	{r3, r4, r5, lr}
   d4e26:	4604      	mov	r4, r0
   d4e28:	460d      	mov	r5, r1
   d4e2a:	f7ff fde9 	bl	d4a00 <_ZN9NmeaCacheC1Ev>
   d4e2e:	2300      	movs	r3, #0
   d4e30:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
   d4e34:	6725      	str	r5, [r4, #112]	; 0x70
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d4e36:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
{
    this->_serial = serial;
};
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	bd38      	pop	{r3, r4, r5, pc}

000d4e3e <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
   d4e3e:	b508      	push	{r3, lr}
    this->_serial->println(data);
   d4e40:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d4e42:	f000 fc74 	bl	d572e <_ZN5Print7printlnEPKc>
    delay(250);
   d4e46:	20fa      	movs	r0, #250	; 0xfa
}
   d4e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void Gps::sendCommand(const char* data)
{
    this->_serial->println(data);
    delay(250);
   d4e4c:	f000 bd94 	b.w	d5978 <delay>

000d4e50 <_ZN3Gps5beginEm>:
{
    this->_serial = serial;
};

void Gps::begin(uint32_t baud)
{
   d4e50:	b510      	push	{r4, lr}
   d4e52:	4604      	mov	r4, r0
    // ***
    // *** Initialize the serial port.
    // ***
    this->_serial->begin(baud);
   d4e54:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d4e56:	f000 ff85 	bl	d5d64 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
   d4e5a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d4e5c:	6803      	ldr	r3, [r0, #0]
   d4e5e:	2101      	movs	r1, #1
   d4e60:	6a1b      	ldr	r3, [r3, #32]
   d4e62:	4798      	blx	r3
    
    // ***
    // *** Initialize the GPS.
    // ***
    this->sendCommand(PMTK_SET_BAUD_9600);
   d4e64:	4620      	mov	r0, r4
   d4e66:	490c      	ldr	r1, [pc, #48]	; (d4e98 <_ZN3Gps5beginEm+0x48>)
   d4e68:	f7ff ffe9 	bl	d4e3e <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	490b      	ldr	r1, [pc, #44]	; (d4e9c <_ZN3Gps5beginEm+0x4c>)
   d4e70:	f7ff ffe5 	bl	d4e3e <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
   d4e74:	4620      	mov	r0, r4
   d4e76:	490a      	ldr	r1, [pc, #40]	; (d4ea0 <_ZN3Gps5beginEm+0x50>)
   d4e78:	f7ff ffe1 	bl	d4e3e <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	4909      	ldr	r1, [pc, #36]	; (d4ea4 <_ZN3Gps5beginEm+0x54>)
   d4e80:	f7ff ffdd 	bl	d4e3e <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
   d4e84:	4620      	mov	r0, r4
   d4e86:	4908      	ldr	r1, [pc, #32]	; (d4ea8 <_ZN3Gps5beginEm+0x58>)
   d4e88:	f7ff ffd9 	bl	d4e3e <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	4907      	ldr	r1, [pc, #28]	; (d4eac <_ZN3Gps5beginEm+0x5c>)
};
   d4e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PMTK_SET_BAUD_9600);
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
    this->sendCommand(PMTK_ENABLE_WAAS);
    this->sendCommand(PGCMD_ANTENNA);
   d4e94:	f7ff bfd3 	b.w	d4e3e <_ZN3Gps11sendCommandEPKc>
   d4e98:	000d8d10 	.word	0x000d8d10
   d4e9c:	000d8d21 	.word	0x000d8d21
   d4ea0:	000d8d32 	.word	0x000d8d32
   d4ea4:	000d8d4b 	.word	0x000d8d4b
   d4ea8:	000d8d7d 	.word	0x000d8d7d
   d4eac:	000d8d8b 	.word	0x000d8d8b

000d4eb0 <_ZN3Gps11clearBufferEv>:
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d4eb0:	2300      	movs	r3, #0
    {
        this->_buffer[i] = 0;
   d4eb2:	4619      	mov	r1, r3
   d4eb4:	18c2      	adds	r2, r0, r3
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d4eb6:	3301      	adds	r3, #1
   d4eb8:	2b80      	cmp	r3, #128	; 0x80
    {
        this->_buffer[i] = 0;
   d4eba:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d4ebe:	d1f9      	bne.n	d4eb4 <_ZN3Gps11clearBufferEv+0x4>
    {
        this->_buffer[i] = 0;
    }
}
   d4ec0:	4770      	bx	lr
	...

000d4ec4 <_ZN3Gps12onSerialDataEv>:
    delay(250);
}


void Gps::onSerialData()
{
   d4ec4:	b570      	push	{r4, r5, r6, lr}
   d4ec6:	4604      	mov	r4, r0
    if (this->_serial->available())
   d4ec8:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d4eca:	6803      	ldr	r3, [r0, #0]
    delay(250);
}


void Gps::onSerialData()
{
   d4ecc:	b088      	sub	sp, #32
    if (this->_serial->available())
   d4ece:	691b      	ldr	r3, [r3, #16]
   d4ed0:	4798      	blx	r3
   d4ed2:	2800      	cmp	r0, #0
   d4ed4:	d057      	beq.n	d4f86 <_ZN3Gps12onSerialDataEv+0xc2>
    {
        char c = this->_serial->read();
   d4ed6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d4ed8:	6803      	ldr	r3, [r0, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	4798      	blx	r3
        
        if (!this->_synced && c == '$') this->_synced = true;
   d4ede:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8

void Gps::onSerialData()
{
    if (this->_serial->available())
    {
        char c = this->_serial->read();
   d4ee2:	b2c0      	uxtb	r0, r0
        
        if (!this->_synced && c == '$') this->_synced = true;
   d4ee4:	b90b      	cbnz	r3, d4eea <_ZN3Gps12onSerialDataEv+0x26>
   d4ee6:	2824      	cmp	r0, #36	; 0x24
   d4ee8:	d049      	beq.n	d4f7e <_ZN3Gps12onSerialDataEv+0xba>
        
        if (this->_synced)
   d4eea:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   d4eee:	2b00      	cmp	r3, #0
   d4ef0:	d049      	beq.n	d4f86 <_ZN3Gps12onSerialDataEv+0xc2>
        {
            if (this->_bufferIndex > BUFFER_SIZE)
   d4ef2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d4ef6:	2b80      	cmp	r3, #128	; 0x80
   d4ef8:	dd0a      	ble.n	d4f10 <_ZN3Gps12onSerialDataEv+0x4c>
            {
                Serial.println("Buffer Overun: '");
   d4efa:	f000 feb1 	bl	d5c60 <_Z16_fetch_usbserialv>
   d4efe:	4923      	ldr	r1, [pc, #140]	; (d4f8c <_ZN3Gps12onSerialDataEv+0xc8>)
   d4f00:	f000 fc15 	bl	d572e <_ZN5Print7printlnEPKc>
                this->_bufferIndex = 0;
   d4f04:	2300      	movs	r3, #0
   d4f06:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
                this->_synced = false;
   d4f0a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   d4f0e:	e03a      	b.n	d4f86 <_ZN3Gps12onSerialDataEv+0xc2>
            else if (c == '\r')
            {
                // ***
                // *** Replace this character will a NULL.
                // ***
                this->_buffer[this->_bufferIndex] =  0;
   d4f10:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            {
                Serial.println("Buffer Overun: '");
                this->_bufferIndex = 0;
                this->_synced = false;
            }
            else if (c == '\r')
   d4f14:	280d      	cmp	r0, #13
            {
                // ***
                // *** Replace this character will a NULL.
                // ***
                this->_buffer[this->_bufferIndex] =  0;
   d4f16:	4423      	add	r3, r4
            {
                Serial.println("Buffer Overun: '");
                this->_bufferIndex = 0;
                this->_synced = false;
            }
            else if (c == '\r')
   d4f18:	d103      	bne.n	d4f22 <_ZN3Gps12onSerialDataEv+0x5e>
            {
                // ***
                // *** Replace this character will a NULL.
                // ***
                this->_buffer[this->_bufferIndex] =  0;
   d4f1a:	2200      	movs	r2, #0
   d4f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   d4f20:	e027      	b.n	d4f72 <_ZN3Gps12onSerialDataEv+0xae>
                this->_bufferIndex++;
            }
            else if (c == '\n')
   d4f22:	280a      	cmp	r0, #10
   d4f24:	d123      	bne.n	d4f6e <_ZN3Gps12onSerialDataEv+0xaa>
            {
                // ***
                // *** Replace this character will a NULL.
                // ***
                this->_buffer[this->_bufferIndex] =  0;
   d4f26:	2500      	movs	r5, #0
   d4f28:	f883 5074 	strb.w	r5, [r3, #116]	; 0x74
                
                // ***
                // *** This is the end of a sentence. Copy the data to
                // *** a secondary backup buffer.
                // ***
                String tempBuffer = String((char*)this->_buffer);
   d4f2c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d4f30:	4668      	mov	r0, sp
   d4f32:	f000 fa82 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
                // *** Check which sentence we have and copy it to the
                // *** correct buffer. Note the first buffer at index 0
                // *** is a discard buffer in case we get a sentence that
                // *** is not expected.
                // ***
                uint8_t index = this->msgIdToIndex(tempBuffer);
   d4f36:	4669      	mov	r1, sp
   d4f38:	a804      	add	r0, sp, #16
   d4f3a:	f000 fabd 	bl	d54b8 <_ZN6StringC1ERKS_>
   d4f3e:	a904      	add	r1, sp, #16
   d4f40:	4620      	mov	r0, r4
   d4f42:	f7ff fd6d 	bl	d4a20 <_ZN9NmeaCache12msgIdToIndexE6String>
   d4f46:	4606      	mov	r6, r0
   d4f48:	a804      	add	r0, sp, #16
   d4f4a:	f000 fa2f 	bl	d53ac <_ZN6StringD1Ev>
                this->data[index] = tempBuffer;
   d4f4e:	4669      	mov	r1, sp
   d4f50:	eb04 1006 	add.w	r0, r4, r6, lsl #4
   d4f54:	f000 faa1 	bl	d549a <_ZN6StringaSERKS_>

                // ***
                // *** Reset the buffer.
                // ***
                this->_bufferIndex = 0;
   d4f58:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
                this->_synced = false;
                this->clearBuffer();
   d4f5c:	4620      	mov	r0, r4

                // ***
                // *** Reset the buffer.
                // ***
                this->_bufferIndex = 0;
                this->_synced = false;
   d4f5e:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
                this->clearBuffer();
   d4f62:	f7ff ffa5 	bl	d4eb0 <_ZN3Gps11clearBufferEv>
                
                // ***
                // *** This is the end of a sentence. Copy the data to
                // *** a secondary backup buffer.
                // ***
                String tempBuffer = String((char*)this->_buffer);
   d4f66:	4668      	mov	r0, sp
   d4f68:	f000 fa20 	bl	d53ac <_ZN6StringD1Ev>
   d4f6c:	e00b      	b.n	d4f86 <_ZN3Gps12onSerialDataEv+0xc2>
                this->_synced = false;
                this->clearBuffer();
            }
            else
            {
                this->_buffer[this->_bufferIndex] = c;
   d4f6e:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
                this->_bufferIndex++;
   d4f72:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d4f76:	3301      	adds	r3, #1
   d4f78:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
            }
        }
    }
}
   d4f7c:	e003      	b.n	d4f86 <_ZN3Gps12onSerialDataEv+0xc2>
{
    if (this->_serial->available())
    {
        char c = this->_serial->read();
        
        if (!this->_synced && c == '$') this->_synced = true;
   d4f7e:	2301      	movs	r3, #1
   d4f80:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   d4f84:	e7b1      	b.n	d4eea <_ZN3Gps12onSerialDataEv+0x26>
                this->_buffer[this->_bufferIndex] = c;
                this->_bufferIndex++;
            }
        }
    }
}
   d4f86:	b008      	add	sp, #32
   d4f88:	bd70      	pop	{r4, r5, r6, pc}
   d4f8a:	bf00      	nop
   d4f8c:	000d8d9a 	.word	0x000d8d9a

000d4f90 <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
   d4f90:	f000 b810 	b.w	d4fb4 <HAL_Pin_Map>

000d4f94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <netdb_freeaddrinfo+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	689b      	ldr	r3, [r3, #8]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030268 	.word	0x00030268

000d4fa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <netdb_getaddrinfo+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	68db      	ldr	r3, [r3, #12]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030268 	.word	0x00030268

000d4fb4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_Pin_Map+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	681b      	ldr	r3, [r3, #0]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003022c 	.word	0x0003022c

000d4fc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_RNG_GetRandomNumber+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	685b      	ldr	r3, [r3, #4]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030218 	.word	0x00030218

000d4fd4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	695b      	ldr	r3, [r3, #20]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030218 	.word	0x00030218

000d4fe4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <os_thread_is_current+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	689b      	ldr	r3, [r3, #8]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030248 	.word	0x00030248

000d4ff4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <os_thread_yield+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	68db      	ldr	r3, [r3, #12]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030248 	.word	0x00030248

000d5004 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <os_thread_join+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	691b      	ldr	r3, [r3, #16]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030248 	.word	0x00030248

000d5014 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <os_thread_cleanup+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	695b      	ldr	r3, [r3, #20]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030248 	.word	0x00030248

000d5024 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <os_thread_scheduling+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	69db      	ldr	r3, [r3, #28]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030248 	.word	0x00030248

000d5034 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <os_timer_create+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a1b      	ldr	r3, [r3, #32]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030248 	.word	0x00030248

000d5044 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <os_timer_destroy+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030248 	.word	0x00030248

000d5054 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <os_timer_get_id+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030248 	.word	0x00030248

000d5064 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <os_timer_change+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030248 	.word	0x00030248

000d5074 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <os_mutex_recursive_create+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030248 	.word	0x00030248

000d5084 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <os_mutex_recursive_destroy+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030248 	.word	0x00030248

000d5094 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <os_timer_set_id+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030248 	.word	0x00030248

000d50a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <inet_inet_ntop+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	695b      	ldr	r3, [r3, #20]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030264 	.word	0x00030264

000d50b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_USART_Init+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	681b      	ldr	r3, [r3, #0]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003023c 	.word	0x0003023c

000d50c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_USART_Write_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	68db      	ldr	r3, [r3, #12]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003023c 	.word	0x0003023c

000d50d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_USART_Available_Data+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	691b      	ldr	r3, [r3, #16]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003023c 	.word	0x0003023c

000d50e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_USART_Read_Data+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	695b      	ldr	r3, [r3, #20]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003023c 	.word	0x0003023c

000d50f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_USART_Peek_Data+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	699b      	ldr	r3, [r3, #24]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003023c 	.word	0x0003023c

000d5104 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_USART_Flush_Data+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	69db      	ldr	r3, [r3, #28]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_USART_Available_Data_For_Write+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_USART_BeginConfig+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <HAL_USB_USART_Init+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	681b      	ldr	r3, [r3, #0]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003024c 	.word	0x0003024c

000d5144 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <HAL_USB_USART_Begin+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	685b      	ldr	r3, [r3, #4]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003024c 	.word	0x0003024c

000d5154 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_USB_USART_Available_Data+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	691b      	ldr	r3, [r3, #16]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003024c 	.word	0x0003024c

000d5164 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	695b      	ldr	r3, [r3, #20]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003024c 	.word	0x0003024c

000d5174 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USB_USART_Receive_Data+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	699b      	ldr	r3, [r3, #24]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003024c 	.word	0x0003024c

000d5184 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USB_USART_Send_Data+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	69db      	ldr	r3, [r3, #28]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003024c 	.word	0x0003024c

000d5194 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USB_USART_Flush_Data+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	6a1b      	ldr	r3, [r3, #32]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003024c 	.word	0x0003024c

000d51a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <set_system_mode+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	685b      	ldr	r3, [r3, #4]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030220 	.word	0x00030220

000d51b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <system_delay_ms+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030220 	.word	0x00030220

000d51c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b03      	ldr	r3, [pc, #12]	; (d51d4 <system_ctrl_set_app_request_handler+0x10>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51ce:	9301      	str	r3, [sp, #4]
   d51d0:	bd08      	pop	{r3, pc}
   d51d2:	0000      	.short	0x0000
   d51d4:	00030220 	.word	0x00030220

000d51d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b03      	ldr	r3, [pc, #12]	; (d51e8 <system_ctrl_set_result+0x10>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d51e2:	9301      	str	r3, [sp, #4]
   d51e4:	bd08      	pop	{r3, pc}
   d51e6:	0000      	.short	0x0000
   d51e8:	00030220 	.word	0x00030220

000d51ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <network_connect+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	685b      	ldr	r3, [r3, #4]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030240 	.word	0x00030240

000d51fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <network_connecting+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	689b      	ldr	r3, [r3, #8]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030240 	.word	0x00030240

000d520c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <network_disconnect+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	68db      	ldr	r3, [r3, #12]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030240 	.word	0x00030240

000d521c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <network_ready+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	691b      	ldr	r3, [r3, #16]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030240 	.word	0x00030240

000d522c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <network_on+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	695b      	ldr	r3, [r3, #20]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030240 	.word	0x00030240

000d523c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <network_off+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	699b      	ldr	r3, [r3, #24]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030240 	.word	0x00030240

000d524c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <network_listen+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	69db      	ldr	r3, [r3, #28]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030240 	.word	0x00030240

000d525c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <network_listening+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6a1b      	ldr	r3, [r3, #32]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030240 	.word	0x00030240

000d526c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <network_set_listen_timeout+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030240 	.word	0x00030240

000d527c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <network_get_listen_timeout+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030240 	.word	0x00030240

000d528c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030244 	.word	0x00030244

000d529c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <malloc+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	681b      	ldr	r3, [r3, #0]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003021c 	.word	0x0003021c

000d52ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <free+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	685b      	ldr	r3, [r3, #4]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003021c 	.word	0x0003021c

000d52bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <realloc+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	689b      	ldr	r3, [r3, #8]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003021c 	.word	0x0003021c

000d52cc <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <_malloc_r+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	0003021c 	.word	0x0003021c

000d52dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52dc:	2200      	movs	r2, #0
   d52de:	4611      	mov	r1, r2
   d52e0:	6840      	ldr	r0, [r0, #4]
   d52e2:	f7ff bfbb 	b.w	d525c <network_listening>

000d52e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52e6:	2200      	movs	r2, #0
   d52e8:	4611      	mov	r1, r2
   d52ea:	6840      	ldr	r0, [r0, #4]
   d52ec:	f7ff bfc6 	b.w	d527c <network_get_listen_timeout>

000d52f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52f0:	2200      	movs	r2, #0
   d52f2:	6840      	ldr	r0, [r0, #4]
   d52f4:	f7ff bfba 	b.w	d526c <network_set_listen_timeout>

000d52f8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52f8:	2200      	movs	r2, #0
   d52fa:	f081 0101 	eor.w	r1, r1, #1
   d52fe:	6840      	ldr	r0, [r0, #4]
   d5300:	f7ff bfa4 	b.w	d524c <network_listen>

000d5304 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5304:	2300      	movs	r3, #0
   d5306:	461a      	mov	r2, r3
   d5308:	4619      	mov	r1, r3
   d530a:	6840      	ldr	r0, [r0, #4]
   d530c:	f7ff bf96 	b.w	d523c <network_off>

000d5310 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5310:	2300      	movs	r3, #0
   d5312:	461a      	mov	r2, r3
   d5314:	4619      	mov	r1, r3
   d5316:	6840      	ldr	r0, [r0, #4]
   d5318:	f7ff bf88 	b.w	d522c <network_on>

000d531c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d531c:	2200      	movs	r2, #0
   d531e:	4611      	mov	r1, r2
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	f7ff bf7b 	b.w	d521c <network_ready>

000d5326 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5326:	2200      	movs	r2, #0
   d5328:	4611      	mov	r1, r2
   d532a:	6840      	ldr	r0, [r0, #4]
   d532c:	f7ff bf66 	b.w	d51fc <network_connecting>

000d5330 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5330:	2200      	movs	r2, #0
   d5332:	2102      	movs	r1, #2
   d5334:	6840      	ldr	r0, [r0, #4]
   d5336:	f7ff bf69 	b.w	d520c <network_disconnect>

000d533a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d533a:	2300      	movs	r3, #0
   d533c:	461a      	mov	r2, r3
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	f7ff bf54 	b.w	d51ec <network_connect>

000d5344 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5344:	4b02      	ldr	r3, [pc, #8]	; (d5350 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5346:	2203      	movs	r2, #3
   d5348:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d534a:	4a02      	ldr	r2, [pc, #8]	; (d5354 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d534c:	601a      	str	r2, [r3, #0]
   d534e:	4770      	bx	lr
   d5350:	2003e3f8 	.word	0x2003e3f8
   d5354:	000d8db4 	.word	0x000d8db4

000d5358 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5358:	b510      	push	{r4, lr}
   d535a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d535c:	6800      	ldr	r0, [r0, #0]
   d535e:	b118      	cbz	r0, d5368 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5360:	f7ff ffa4 	bl	d52ac <free>
            wakeupSource_ = nullptr;
   d5364:	2300      	movs	r3, #0
   d5366:	6023      	str	r3, [r4, #0]
   d5368:	bd10      	pop	{r4, pc}

000d536a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d536a:	b510      	push	{r4, lr}
   d536c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d536e:	f7ff fff3 	bl	d5358 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}
	...

000d5378 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5378:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d537a:	4c09      	ldr	r4, [pc, #36]	; (d53a0 <_GLOBAL__sub_I_System+0x28>)
   d537c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d537e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5382:	6020      	str	r0, [r4, #0]
   d5384:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5386:	71a0      	strb	r0, [r4, #6]
   d5388:	8120      	strh	r0, [r4, #8]
   d538a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d538c:	f7ff ff0a 	bl	d51a4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5390:	4620      	mov	r0, r4
   d5392:	4a04      	ldr	r2, [pc, #16]	; (d53a4 <_GLOBAL__sub_I_System+0x2c>)
   d5394:	4904      	ldr	r1, [pc, #16]	; (d53a8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d539a:	f000 bead 	b.w	d60f8 <__aeabi_atexit>
   d539e:	bf00      	nop
   d53a0:	2003e400 	.word	0x2003e400
   d53a4:	2003e2dc 	.word	0x2003e2dc
   d53a8:	000d536b 	.word	0x000d536b

000d53ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d53ac:	b510      	push	{r4, lr}
   d53ae:	4604      	mov	r4, r0
{
	free(buffer);
   d53b0:	6800      	ldr	r0, [r0, #0]
   d53b2:	f7ff ff7b 	bl	d52ac <free>
}
   d53b6:	4620      	mov	r0, r4
   d53b8:	bd10      	pop	{r4, pc}

000d53ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d53ba:	b510      	push	{r4, lr}
   d53bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d53be:	6800      	ldr	r0, [r0, #0]
   d53c0:	b108      	cbz	r0, d53c6 <_ZN6String10invalidateEv+0xc>
   d53c2:	f7ff ff73 	bl	d52ac <free>
	buffer = NULL;
   d53c6:	2300      	movs	r3, #0
   d53c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d53ca:	60a3      	str	r3, [r4, #8]
   d53cc:	6063      	str	r3, [r4, #4]
   d53ce:	bd10      	pop	{r4, pc}

000d53d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d53d0:	b538      	push	{r3, r4, r5, lr}
   d53d2:	4604      	mov	r4, r0
   d53d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d53d6:	6800      	ldr	r0, [r0, #0]
   d53d8:	3101      	adds	r1, #1
   d53da:	f7ff ff6f 	bl	d52bc <realloc>
	if (newbuffer) {
   d53de:	b110      	cbz	r0, d53e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d53e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d53e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d53e6:	bd38      	pop	{r3, r4, r5, pc}

000d53e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d53ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d53ee:	b113      	cbz	r3, d53f6 <_ZN6String7reserveEj+0xe>
   d53f0:	6843      	ldr	r3, [r0, #4]
   d53f2:	428b      	cmp	r3, r1
   d53f4:	d207      	bcs.n	d5406 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7ff ffea 	bl	d53d0 <_ZN6String12changeBufferEj>
   d53fc:	b120      	cbz	r0, d5408 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d53fe:	68a3      	ldr	r3, [r4, #8]
   d5400:	b90b      	cbnz	r3, d5406 <_ZN6String7reserveEj+0x1e>
   d5402:	6822      	ldr	r2, [r4, #0]
   d5404:	7013      	strb	r3, [r2, #0]
   d5406:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5408:	bd10      	pop	{r4, pc}

000d540a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d540a:	b570      	push	{r4, r5, r6, lr}
   d540c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d540e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5410:	4604      	mov	r4, r0
   d5412:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5414:	f7ff ffe8 	bl	d53e8 <_ZN6String7reserveEj>
   d5418:	b918      	cbnz	r0, d5422 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d541a:	4620      	mov	r0, r4
   d541c:	f7ff ffcd 	bl	d53ba <_ZN6String10invalidateEv>
		return *this;
   d5420:	e009      	b.n	d5436 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5422:	462a      	mov	r2, r5
   d5424:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5426:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5428:	6820      	ldr	r0, [r4, #0]
   d542a:	f001 fccf 	bl	d6dcc <memcpy>
	buffer[len] = 0;
   d542e:	6822      	ldr	r2, [r4, #0]
   d5430:	68a3      	ldr	r3, [r4, #8]
   d5432:	2100      	movs	r1, #0
   d5434:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5436:	4620      	mov	r0, r4
   d5438:	bd70      	pop	{r4, r5, r6, pc}

000d543a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d543a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d543c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d543e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5440:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5442:	6043      	str	r3, [r0, #4]
	len = 0;
   d5444:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5446:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5448:	460d      	mov	r5, r1
   d544a:	b139      	cbz	r1, d545c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d544c:	4608      	mov	r0, r1
   d544e:	f001 fd0b 	bl	d6e68 <strlen>
   d5452:	4629      	mov	r1, r5
   d5454:	4602      	mov	r2, r0
   d5456:	4620      	mov	r0, r4
   d5458:	f7ff ffd7 	bl	d540a <_ZN6String4copyEPKcj>
}
   d545c:	4620      	mov	r0, r4
   d545e:	bd38      	pop	{r3, r4, r5, pc}

000d5460 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5460:	b538      	push	{r3, r4, r5, lr}
   d5462:	4605      	mov	r5, r0
	if (buffer) {
   d5464:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5466:	460c      	mov	r4, r1
	if (buffer) {
   d5468:	b160      	cbz	r0, d5484 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d546a:	686a      	ldr	r2, [r5, #4]
   d546c:	688b      	ldr	r3, [r1, #8]
   d546e:	429a      	cmp	r2, r3
   d5470:	d306      	bcc.n	d5480 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5472:	6809      	ldr	r1, [r1, #0]
   d5474:	f001 fcf0 	bl	d6e58 <strcpy>
			len = rhs.len;
   d5478:	68a3      	ldr	r3, [r4, #8]
   d547a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d547c:	2300      	movs	r3, #0
   d547e:	e00a      	b.n	d5496 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5480:	f7ff ff14 	bl	d52ac <free>
		}
	}
	buffer = rhs.buffer;
   d5484:	6823      	ldr	r3, [r4, #0]
   d5486:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5488:	6863      	ldr	r3, [r4, #4]
   d548a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d548c:	68a3      	ldr	r3, [r4, #8]
   d548e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5490:	2300      	movs	r3, #0
   d5492:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5494:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5496:	60a3      	str	r3, [r4, #8]
   d5498:	bd38      	pop	{r3, r4, r5, pc}

000d549a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d549a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d549c:	b510      	push	{r4, lr}
   d549e:	460b      	mov	r3, r1
   d54a0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d54a2:	d007      	beq.n	d54b4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d54a4:	6809      	ldr	r1, [r1, #0]
   d54a6:	b119      	cbz	r1, d54b0 <_ZN6StringaSERKS_+0x16>
   d54a8:	689a      	ldr	r2, [r3, #8]
   d54aa:	f7ff ffae 	bl	d540a <_ZN6String4copyEPKcj>
   d54ae:	e001      	b.n	d54b4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d54b0:	f7ff ff83 	bl	d53ba <_ZN6String10invalidateEv>

	return *this;
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd10      	pop	{r4, pc}

000d54b8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d54b8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54ba:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d54bc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54be:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54c0:	6043      	str	r3, [r0, #4]
	len = 0;
   d54c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54c4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d54c6:	f7ff ffe8 	bl	d549a <_ZN6StringaSERKS_>
}
   d54ca:	4620      	mov	r0, r4
   d54cc:	bd10      	pop	{r4, pc}

000d54ce <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d54ce:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d54d4:	d001      	beq.n	d54da <_ZN6StringaSEOS_+0xc>
   d54d6:	f7ff ffc3 	bl	d5460 <_ZN6String4moveERS_>
	return *this;
}
   d54da:	4620      	mov	r0, r4
   d54dc:	bd10      	pop	{r4, pc}

000d54de <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d54de:	b538      	push	{r3, r4, r5, lr}
   d54e0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d54e2:	460c      	mov	r4, r1
   d54e4:	b141      	cbz	r1, d54f8 <_ZN6StringaSEPKc+0x1a>
   d54e6:	4608      	mov	r0, r1
   d54e8:	f001 fcbe 	bl	d6e68 <strlen>
   d54ec:	4621      	mov	r1, r4
   d54ee:	4602      	mov	r2, r0
   d54f0:	4628      	mov	r0, r5
   d54f2:	f7ff ff8a 	bl	d540a <_ZN6String4copyEPKcj>
   d54f6:	e001      	b.n	d54fc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d54f8:	f7ff ff5f 	bl	d53ba <_ZN6String10invalidateEv>

	return *this;
}
   d54fc:	4628      	mov	r0, r5
   d54fe:	bd38      	pop	{r3, r4, r5, pc}

000d5500 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d5500:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5502:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d5504:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5508:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d550a:	6043      	str	r3, [r0, #4]
	len = 0;
   d550c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d550e:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d5510:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d5512:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5514:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5518:	f7ff ffe1 	bl	d54de <_ZN6StringaSEPKc>
}
   d551c:	4620      	mov	r0, r4
   d551e:	b002      	add	sp, #8
   d5520:	bd10      	pop	{r4, pc}

000d5522 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5522:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5524:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5526:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5528:	b912      	cbnz	r2, d5530 <_ZNK6String6equalsEPKc+0xe>
   d552a:	b919      	cbnz	r1, d5534 <_ZNK6String6equalsEPKc+0x12>
   d552c:	2001      	movs	r0, #1
   d552e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5530:	b911      	cbnz	r1, d5538 <_ZNK6String6equalsEPKc+0x16>
   d5532:	6803      	ldr	r3, [r0, #0]
   d5534:	7818      	ldrb	r0, [r3, #0]
   d5536:	e002      	b.n	d553e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5538:	6800      	ldr	r0, [r0, #0]
   d553a:	f001 fc83 	bl	d6e44 <strcmp>
   d553e:	fab0 f080 	clz	r0, r0
   d5542:	0940      	lsrs	r0, r0, #5
}
   d5544:	bd08      	pop	{r3, pc}

000d5546 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d5546:	b510      	push	{r4, lr}
   d5548:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d554a:	6883      	ldr	r3, [r0, #8]
   d554c:	688a      	ldr	r2, [r1, #8]
   d554e:	1a9b      	subs	r3, r3, r2
   d5550:	42a3      	cmp	r3, r4
   d5552:	d30a      	bcc.n	d556a <_ZNK6String10startsWithERKS_j+0x24>
   d5554:	6800      	ldr	r0, [r0, #0]
   d5556:	b158      	cbz	r0, d5570 <_ZNK6String10startsWithERKS_j+0x2a>
   d5558:	6809      	ldr	r1, [r1, #0]
   d555a:	b141      	cbz	r1, d556e <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d555c:	4420      	add	r0, r4
   d555e:	f001 fc8b 	bl	d6e78 <strncmp>
   d5562:	fab0 f080 	clz	r0, r0
   d5566:	0940      	lsrs	r0, r0, #5
   d5568:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d556a:	2000      	movs	r0, #0
   d556c:	bd10      	pop	{r4, pc}
   d556e:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
   d5570:	bd10      	pop	{r4, pc}

000d5572 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   d5572:	6882      	ldr	r2, [r0, #8]
   d5574:	688b      	ldr	r3, [r1, #8]
   d5576:	429a      	cmp	r2, r3
   d5578:	d302      	bcc.n	d5580 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d557a:	2200      	movs	r2, #0
   d557c:	f7ff bfe3 	b.w	d5546 <_ZNK6String10startsWithERKS_j>
}
   d5580:	2000      	movs	r0, #0
   d5582:	4770      	bx	lr

000d5584 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d5584:	6883      	ldr	r3, [r0, #8]
   d5586:	428b      	cmp	r3, r1
   d5588:	d903      	bls.n	d5592 <_ZNK6StringixEj+0xe>
   d558a:	6800      	ldr	r0, [r0, #0]
   d558c:	b110      	cbz	r0, d5594 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d558e:	5c40      	ldrb	r0, [r0, r1]
   d5590:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d5592:	2000      	movs	r0, #0
	return buffer[index];
}
   d5594:	4770      	bx	lr

000d5596 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d5596:	f7ff bff5 	b.w	d5584 <_ZNK6StringixEj>

000d559a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d559a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d559c:	6883      	ldr	r3, [r0, #8]
   d559e:	4293      	cmp	r3, r2
   d55a0:	d907      	bls.n	d55b2 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d55a2:	6804      	ldr	r4, [r0, #0]
   d55a4:	6809      	ldr	r1, [r1, #0]
   d55a6:	18a0      	adds	r0, r4, r2
   d55a8:	f001 fc7b 	bl	d6ea2 <strstr>
	if (found == NULL) return -1;
   d55ac:	b108      	cbz	r0, d55b2 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d55ae:	1b00      	subs	r0, r0, r4
   d55b0:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d55b2:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d55b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d55bc:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d55be:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d55c0:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d55c2:	b1ca      	cbz	r2, d55f8 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d55c4:	6883      	ldr	r3, [r0, #8]
   d55c6:	b1bb      	cbz	r3, d55f8 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d55c8:	429a      	cmp	r2, r3
   d55ca:	d815      	bhi.n	d55f8 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d55cc:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
   d55ce:	42ab      	cmp	r3, r5
   d55d0:	bf98      	it	ls
   d55d2:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d55d6:	4630      	mov	r0, r6

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
   d55d8:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d55dc:	eb06 0805 	add.w	r8, r6, r5
   d55e0:	4540      	cmp	r0, r8
   d55e2:	d80d      	bhi.n	d5600 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
   d55e4:	6839      	ldr	r1, [r7, #0]
   d55e6:	f001 fc5c 	bl	d6ea2 <strstr>
		if (!p) break;
   d55ea:	b148      	cbz	r0, d5600 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d55ec:	1b83      	subs	r3, r0, r6
   d55ee:	429d      	cmp	r5, r3
   d55f0:	bf28      	it	cs
   d55f2:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d55f4:	3001      	adds	r0, #1
   d55f6:	e7f3      	b.n	d55e0 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d55f8:	f04f 30ff 	mov.w	r0, #4294967295
   d55fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5600:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
   d5602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5606 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
   d5606:	6882      	ldr	r2, [r0, #8]
   d5608:	688b      	ldr	r3, [r1, #8]
   d560a:	1ad2      	subs	r2, r2, r3
   d560c:	f7ff bfd4 	b.w	d55b8 <_ZNK6String11lastIndexOfERKS_j>

000d5610 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5612:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5614:	460f      	mov	r7, r1
   d5616:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5618:	490c      	ldr	r1, [pc, #48]	; (d564c <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d561a:	bf88      	it	hi
   d561c:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d561e:	4614      	mov	r4, r2
   d5620:	4606      	mov	r6, r0
	if (left > right) {
   d5622:	bf84      	itt	hi
   d5624:	462c      	movhi	r4, r5
   d5626:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5628:	f7ff ff07 	bl	d543a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d562c:	68ba      	ldr	r2, [r7, #8]
   d562e:	4294      	cmp	r4, r2
   d5630:	d80a      	bhi.n	d5648 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5632:	6839      	ldr	r1, [r7, #0]
   d5634:	4295      	cmp	r5, r2
   d5636:	bf94      	ite	ls
   d5638:	ebc4 0205 	rsbls	r2, r4, r5
   d563c:	ebc4 0202 	rsbhi	r2, r4, r2
   d5640:	4421      	add	r1, r4
   d5642:	4630      	mov	r0, r6
   d5644:	f7ff fee1 	bl	d540a <_ZN6String4copyEPKcj>
	return out;
}
   d5648:	4630      	mov	r0, r6
   d564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d564c:	000d8e93 	.word	0x000d8e93

000d5650 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d5650:	b510      	push	{r4, lr}
   d5652:	4604      	mov	r4, r0
	return substring(left, len);
   d5654:	688b      	ldr	r3, [r1, #8]
   d5656:	f7ff ffdb 	bl	d5610 <_ZNK6String9substringEjj>
}
   d565a:	4620      	mov	r0, r4
   d565c:	bd10      	pop	{r4, pc}

000d565e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d565e:	6800      	ldr	r0, [r0, #0]
   d5660:	b108      	cbz	r0, d5666 <_ZNK6String5toIntEv+0x8>
   d5662:	f001 bb9c 	b.w	d6d9e <atol>
	return 0;
}
   d5666:	4770      	bx	lr

000d5668 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   d5668:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d566a:	6800      	ldr	r0, [r0, #0]
   d566c:	b130      	cbz	r0, d567c <_ZNK6String7toFloatEv+0x14>
   d566e:	f001 fb93 	bl	d6d98 <atof>
   d5672:	ec51 0b10 	vmov	r0, r1, d0
   d5676:	f001 fb3f 	bl	d6cf8 <__aeabi_d2f>
   d567a:	e000      	b.n	d567e <_ZNK6String7toFloatEv+0x16>
	return 0;
   d567c:	2000      	movs	r0, #0
}
   d567e:	ee00 0a10 	vmov	s0, r0
   d5682:	bd08      	pop	{r3, pc}

000d5684 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5684:	b510      	push	{r4, lr}
   d5686:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5688:	6800      	ldr	r0, [r0, #0]
   d568a:	b108      	cbz	r0, d5690 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d568c:	f7ff fcfa 	bl	d5084 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5690:	4620      	mov	r0, r4
   d5692:	bd10      	pop	{r4, pc}

000d5694 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5694:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5696:	4c06      	ldr	r4, [pc, #24]	; (d56b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5698:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d569a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d569c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d569e:	f7ff fce9 	bl	d5074 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d56a2:	4620      	mov	r0, r4
   d56a4:	4a03      	ldr	r2, [pc, #12]	; (d56b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d56a6:	4904      	ldr	r1, [pc, #16]	; (d56b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d56a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d56ac:	f000 bd24 	b.w	d60f8 <__aeabi_atexit>
   d56b0:	2003e40c 	.word	0x2003e40c
   d56b4:	2003e2dc 	.word	0x2003e2dc
   d56b8:	000d5685 	.word	0x000d5685

000d56bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d56bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56be:	4606      	mov	r6, r0
   d56c0:	460d      	mov	r5, r1
   d56c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d56c4:	2400      	movs	r4, #0
  while (size--) {
   d56c6:	42bd      	cmp	r5, r7
   d56c8:	d00c      	beq.n	d56e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d56ca:	6833      	ldr	r3, [r6, #0]
   d56cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d56d0:	689b      	ldr	r3, [r3, #8]
   d56d2:	4630      	mov	r0, r6
   d56d4:	4798      	blx	r3
     if (chunk>=0)
   d56d6:	2800      	cmp	r0, #0
   d56d8:	db01      	blt.n	d56de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d56da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d56dc:	e7f3      	b.n	d56c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d56de:	2c00      	cmp	r4, #0
   d56e0:	bf08      	it	eq
   d56e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d56e4:	4620      	mov	r0, r4
   d56e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d56e8:	b570      	push	{r4, r5, r6, lr}
   d56ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d56ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d56ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d56f0:	b149      	cbz	r1, d5706 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d56f2:	f001 fbb9 	bl	d6e68 <strlen>
   d56f6:	682b      	ldr	r3, [r5, #0]
   d56f8:	4602      	mov	r2, r0
   d56fa:	4621      	mov	r1, r4
   d56fc:	4628      	mov	r0, r5
   d56fe:	68db      	ldr	r3, [r3, #12]
    }
   d5700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5704:	4718      	bx	r3
    }
   d5706:	bd70      	pop	{r4, r5, r6, pc}

000d5708 <_ZN5Print5printEPKc>:
   d5708:	b508      	push	{r3, lr}
   d570a:	f7ff ffed 	bl	d56e8 <_ZN5Print5writeEPKc>
   d570e:	bd08      	pop	{r3, pc}

000d5710 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5710:	6803      	ldr	r3, [r0, #0]
   d5712:	689b      	ldr	r3, [r3, #8]
   d5714:	4718      	bx	r3

000d5716 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5716:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5718:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d571a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d571c:	f7ff fff8 	bl	d5710 <_ZN5Print5printEc>
  n += print('\n');
   d5720:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5722:	4604      	mov	r4, r0
  n += print('\n');
   d5724:	4628      	mov	r0, r5
   d5726:	f7ff fff3 	bl	d5710 <_ZN5Print5printEc>
  return n;
}
   d572a:	4420      	add	r0, r4
   d572c:	bd38      	pop	{r3, r4, r5, pc}

000d572e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d572e:	b538      	push	{r3, r4, r5, lr}
   d5730:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5732:	f7ff ffd9 	bl	d56e8 <_ZN5Print5writeEPKc>
   d5736:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5738:	4628      	mov	r0, r5
   d573a:	f7ff ffec 	bl	d5716 <_ZN5Print7printlnEv>
  return n;
}
   d573e:	4420      	add	r0, r4
   d5740:	bd38      	pop	{r3, r4, r5, pc}

000d5742 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5742:	b530      	push	{r4, r5, lr}
   d5744:	b08b      	sub	sp, #44	; 0x2c
   d5746:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5748:	2100      	movs	r1, #0
   d574a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d574e:	2a01      	cmp	r2, #1
   d5750:	bf98      	it	ls
   d5752:	220a      	movls	r2, #10
   d5754:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5758:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d575c:	fb05 3312 	mls	r3, r5, r2, r3
   d5760:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5764:	2b09      	cmp	r3, #9
   d5766:	bf94      	ite	ls
   d5768:	3330      	addls	r3, #48	; 0x30
   d576a:	3337      	addhi	r3, #55	; 0x37
   d576c:	b2db      	uxtb	r3, r3
   d576e:	4621      	mov	r1, r4
   d5770:	f804 3901 	strb.w	r3, [r4], #-1
   d5774:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5776:	2d00      	cmp	r5, #0
   d5778:	d1ee      	bne.n	d5758 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d577a:	f7ff ffb5 	bl	d56e8 <_ZN5Print5writeEPKc>
}
   d577e:	b00b      	add	sp, #44	; 0x2c
   d5780:	bd30      	pop	{r4, r5, pc}
	...

000d5784 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5788:	ec57 6b10 	vmov	r6, r7, d0
   d578c:	4682      	mov	sl, r0
   d578e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5790:	ee10 2a10 	vmov	r2, s0
   d5794:	463b      	mov	r3, r7
   d5796:	ee10 0a10 	vmov	r0, s0
   d579a:	4639      	mov	r1, r7
   d579c:	f001 fa4e 	bl	d6c3c <__aeabi_dcmpun>
   d57a0:	b108      	cbz	r0, d57a6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57a2:	494e      	ldr	r1, [pc, #312]	; (d58dc <_ZN5Print10printFloatEdh+0x158>)
   d57a4:	e012      	b.n	d57cc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d57a6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d57aa:	f04f 32ff 	mov.w	r2, #4294967295
   d57ae:	4b4c      	ldr	r3, [pc, #304]	; (d58e0 <_ZN5Print10printFloatEdh+0x15c>)
   d57b0:	4630      	mov	r0, r6
   d57b2:	4649      	mov	r1, r9
   d57b4:	f001 fa42 	bl	d6c3c <__aeabi_dcmpun>
   d57b8:	b968      	cbnz	r0, d57d6 <_ZN5Print10printFloatEdh+0x52>
   d57ba:	f04f 32ff 	mov.w	r2, #4294967295
   d57be:	4b48      	ldr	r3, [pc, #288]	; (d58e0 <_ZN5Print10printFloatEdh+0x15c>)
   d57c0:	4630      	mov	r0, r6
   d57c2:	4649      	mov	r1, r9
   d57c4:	f001 fa1c 	bl	d6c00 <__aeabi_dcmple>
   d57c8:	b928      	cbnz	r0, d57d6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57ca:	4946      	ldr	r1, [pc, #280]	; (d58e4 <_ZN5Print10printFloatEdh+0x160>)
   d57cc:	4650      	mov	r0, sl
   d57ce:	f7ff ff8b 	bl	d56e8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d57d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d57d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d57da:	4b43      	ldr	r3, [pc, #268]	; (d58e8 <_ZN5Print10printFloatEdh+0x164>)
   d57dc:	4630      	mov	r0, r6
   d57de:	4639      	mov	r1, r7
   d57e0:	f001 fa22 	bl	d6c28 <__aeabi_dcmpgt>
   d57e4:	b108      	cbz	r0, d57ea <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57e6:	4941      	ldr	r1, [pc, #260]	; (d58ec <_ZN5Print10printFloatEdh+0x168>)
   d57e8:	e7f0      	b.n	d57cc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d57ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d57ee:	4b40      	ldr	r3, [pc, #256]	; (d58f0 <_ZN5Print10printFloatEdh+0x16c>)
   d57f0:	4630      	mov	r0, r6
   d57f2:	4639      	mov	r1, r7
   d57f4:	f001 f9fa 	bl	d6bec <__aeabi_dcmplt>
   d57f8:	2800      	cmp	r0, #0
   d57fa:	d1f4      	bne.n	d57e6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d57fc:	2200      	movs	r2, #0
   d57fe:	2300      	movs	r3, #0
   d5800:	4630      	mov	r0, r6
   d5802:	4639      	mov	r1, r7
   d5804:	f001 f9f2 	bl	d6bec <__aeabi_dcmplt>
   d5808:	b140      	cbz	r0, d581c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d580a:	212d      	movs	r1, #45	; 0x2d
   d580c:	4650      	mov	r0, sl
   d580e:	f7ff ff7f 	bl	d5710 <_ZN5Print5printEc>
     number = -number;
   d5812:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5816:	4604      	mov	r4, r0
     number = -number;
   d5818:	461f      	mov	r7, r3
   d581a:	e000      	b.n	d581e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d581c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d581e:	4935      	ldr	r1, [pc, #212]	; (d58f4 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5820:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5824:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5826:	fa5f f388 	uxtb.w	r3, r8
   d582a:	429d      	cmp	r5, r3
   d582c:	d906      	bls.n	d583c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d582e:	2200      	movs	r2, #0
   d5830:	4b31      	ldr	r3, [pc, #196]	; (d58f8 <_ZN5Print10printFloatEdh+0x174>)
   d5832:	f001 f893 	bl	d695c <__aeabi_ddiv>
   d5836:	f108 0801 	add.w	r8, r8, #1
   d583a:	e7f4      	b.n	d5826 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d583c:	4632      	mov	r2, r6
   d583e:	463b      	mov	r3, r7
   d5840:	f000 fdb0 	bl	d63a4 <__adddf3>
   d5844:	460f      	mov	r7, r1
   d5846:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5848:	f001 fa36 	bl	d6cb8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d584c:	220a      	movs	r2, #10
   d584e:	4601      	mov	r1, r0
   d5850:	4680      	mov	r8, r0
   d5852:	4650      	mov	r0, sl
   d5854:	f7ff ff75 	bl	d5742 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5858:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d585a:	b3e5      	cbz	r5, d58d6 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d585c:	4640      	mov	r0, r8
   d585e:	f000 fedd 	bl	d661c <__aeabi_ui2d>
   d5862:	4602      	mov	r2, r0
   d5864:	460b      	mov	r3, r1
   d5866:	4630      	mov	r0, r6
   d5868:	4639      	mov	r1, r7
   d586a:	f000 fd99 	bl	d63a0 <__aeabi_dsub>
   d586e:	4606      	mov	r6, r0
   d5870:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5872:	4650      	mov	r0, sl
   d5874:	4921      	ldr	r1, [pc, #132]	; (d58fc <_ZN5Print10printFloatEdh+0x178>)
   d5876:	f7ff ff37 	bl	d56e8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d587a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d587c:	2200      	movs	r2, #0
   d587e:	4b1e      	ldr	r3, [pc, #120]	; (d58f8 <_ZN5Print10printFloatEdh+0x174>)
   d5880:	4630      	mov	r0, r6
   d5882:	4639      	mov	r1, r7
   d5884:	f000 ff40 	bl	d6708 <__aeabi_dmul>
   d5888:	4606      	mov	r6, r0
   d588a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d588c:	f001 f9ec 	bl	d6c68 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5890:	f1b0 0900 	subs.w	r9, r0, #0
   d5894:	da07      	bge.n	d58a6 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d5896:	212d      	movs	r1, #45	; 0x2d
   d5898:	4650      	mov	r0, sl
   d589a:	f7ff ff39 	bl	d5710 <_ZN5Print5printEc>
            val = -n;
   d589e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d58a2:	4680      	mov	r8, r0
   d58a4:	e002      	b.n	d58ac <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d58a6:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d58a8:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d58ac:	220a      	movs	r2, #10
   d58ae:	4650      	mov	r0, sl
   d58b0:	f7ff ff47 	bl	d5742 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d58b4:	4440      	add	r0, r8
   d58b6:	4404      	add	r4, r0
    remainder -= toPrint;
   d58b8:	4648      	mov	r0, r9
   d58ba:	f000 febf 	bl	d663c <__aeabi_i2d>
   d58be:	4602      	mov	r2, r0
   d58c0:	460b      	mov	r3, r1
   d58c2:	4630      	mov	r0, r6
   d58c4:	4639      	mov	r1, r7
   d58c6:	f000 fd6b 	bl	d63a0 <__aeabi_dsub>
   d58ca:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d58cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d58d0:	4606      	mov	r6, r0
   d58d2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d58d4:	d1d2      	bne.n	d587c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d58d6:	4620      	mov	r0, r4
   d58d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d58dc:	000d8de0 	.word	0x000d8de0
   d58e0:	7fefffff 	.word	0x7fefffff
   d58e4:	000d8de8 	.word	0x000d8de8
   d58e8:	41efffff 	.word	0x41efffff
   d58ec:	000d8de4 	.word	0x000d8de4
   d58f0:	c1efffff 	.word	0xc1efffff
   d58f4:	3fe00000 	.word	0x3fe00000
   d58f8:	40240000 	.word	0x40240000
   d58fc:	000d8aae 	.word	0x000d8aae

000d5900 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d5900:	b538      	push	{r3, r4, r5, lr}
   d5902:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d5904:	ee10 0a10 	vmov	r0, s0
   d5908:	b2cd      	uxtb	r5, r1
   d590a:	f000 fea9 	bl	d6660 <__aeabi_f2d>
   d590e:	ec41 0b10 	vmov	d0, r0, r1
   d5912:	4629      	mov	r1, r5
   d5914:	4620      	mov	r0, r4
}
   d5916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d591a:	f7ff bf33 	b.w	d5784 <_ZN5Print10printFloatEdh>

000d591e <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d591e:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5920:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5922:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5924:	f7ff ff2e 	bl	d5784 <_ZN5Print10printFloatEdh>
   d5928:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d592a:	4628      	mov	r0, r5
   d592c:	f7ff fef3 	bl	d5716 <_ZN5Print7printlnEv>
  return n;
}
   d5930:	4420      	add	r0, r4
   d5932:	bd38      	pop	{r3, r4, r5, pc}

000d5934 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5934:	b538      	push	{r3, r4, r5, lr}
   d5936:	4604      	mov	r4, r0
    return println((double)num, digits);
   d5938:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d593c:	460d      	mov	r5, r1
    return println((double)num, digits);
   d593e:	f000 fe8f 	bl	d6660 <__aeabi_f2d>
   d5942:	ec41 0b10 	vmov	d0, r0, r1
   d5946:	4629      	mov	r1, r5
   d5948:	4620      	mov	r0, r4
}
   d594a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d594e:	f7ff bfe6 	b.w	d591e <_ZN5Print7printlnEdi>
	...

000d5954 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5954:	4b01      	ldr	r3, [pc, #4]	; (d595c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5956:	4a02      	ldr	r2, [pc, #8]	; (d5960 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5958:	601a      	str	r2, [r3, #0]
   d595a:	4770      	bx	lr
   d595c:	2003e410 	.word	0x2003e410
   d5960:	000d8e5f 	.word	0x000d8e5f

000d5964 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5964:	4b02      	ldr	r3, [pc, #8]	; (d5970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5966:	681a      	ldr	r2, [r3, #0]
   d5968:	4b02      	ldr	r3, [pc, #8]	; (d5974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d596a:	601a      	str	r2, [r3, #0]
   d596c:	4770      	bx	lr
   d596e:	bf00      	nop
   d5970:	2003e238 	.word	0x2003e238
   d5974:	2003e414 	.word	0x2003e414

000d5978 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5978:	2100      	movs	r1, #0
   d597a:	f7ff bc1b 	b.w	d51b4 <system_delay_ms>

000d597e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d597e:	b510      	push	{r4, lr}
   d5980:	4604      	mov	r4, r0
   d5982:	f7fe fbcf 	bl	d4124 <_ZNSt14_Function_baseD1Ev>
   d5986:	4620      	mov	r0, r4
   d5988:	bd10      	pop	{r4, pc}
	...

000d598c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d598c:	4803      	ldr	r0, [pc, #12]	; (d599c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d598e:	4a04      	ldr	r2, [pc, #16]	; (d59a0 <_GLOBAL__sub_I_RGB+0x14>)
   d5990:	4904      	ldr	r1, [pc, #16]	; (d59a4 <_GLOBAL__sub_I_RGB+0x18>)
   d5992:	2300      	movs	r3, #0
   d5994:	6083      	str	r3, [r0, #8]
   d5996:	f000 bbaf 	b.w	d60f8 <__aeabi_atexit>
   d599a:	bf00      	nop
   d599c:	2003e418 	.word	0x2003e418
   d59a0:	2003e2dc 	.word	0x2003e2dc
   d59a4:	000d597f 	.word	0x000d597f

000d59a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d59a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d59aa:	4b0c      	ldr	r3, [pc, #48]	; (d59dc <serialEventRun+0x34>)
   d59ac:	b133      	cbz	r3, d59bc <serialEventRun+0x14>
   d59ae:	f000 f957 	bl	d5c60 <_Z16_fetch_usbserialv>
   d59b2:	6803      	ldr	r3, [r0, #0]
   d59b4:	691b      	ldr	r3, [r3, #16]
   d59b6:	4798      	blx	r3
   d59b8:	2800      	cmp	r0, #0
   d59ba:	dc09      	bgt.n	d59d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d59bc:	4b08      	ldr	r3, [pc, #32]	; (d59e0 <serialEventRun+0x38>)
   d59be:	b163      	cbz	r3, d59da <serialEventRun+0x32>
   d59c0:	f000 f9d4 	bl	d5d6c <_Z22__fetch_global_Serial1v>
   d59c4:	6803      	ldr	r3, [r0, #0]
   d59c6:	691b      	ldr	r3, [r3, #16]
   d59c8:	4798      	blx	r3
   d59ca:	2800      	cmp	r0, #0
   d59cc:	dc03      	bgt.n	d59d6 <serialEventRun+0x2e>
   d59ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d59d0:	f3af 8000 	nop.w
   d59d4:	e7f2      	b.n	d59bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d59d6:	f3af 8000 	nop.w
   d59da:	bd08      	pop	{r3, pc}
	...

000d59e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d59e4:	b508      	push	{r3, lr}
	serialEventRun();
   d59e6:	f7ff ffdf 	bl	d59a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d59ea:	f7ff faf3 	bl	d4fd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d59ee:	4b01      	ldr	r3, [pc, #4]	; (d59f4 <_post_loop+0x10>)
   d59f0:	6018      	str	r0, [r3, #0]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	2003e74c 	.word	0x2003e74c

000d59f8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d59f8:	4802      	ldr	r0, [pc, #8]	; (d5a04 <_Z33system_initialize_user_backup_ramv+0xc>)
   d59fa:	4a03      	ldr	r2, [pc, #12]	; (d5a08 <_Z33system_initialize_user_backup_ramv+0x10>)
   d59fc:	4903      	ldr	r1, [pc, #12]	; (d5a0c <_Z33system_initialize_user_backup_ramv+0x14>)
   d59fe:	1a12      	subs	r2, r2, r0
   d5a00:	f001 b9e4 	b.w	d6dcc <memcpy>
   d5a04:	2003f400 	.word	0x2003f400
   d5a08:	2003f404 	.word	0x2003f404
   d5a0c:	000d9310 	.word	0x000d9310

000d5a10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a12:	2300      	movs	r3, #0
   d5a14:	9300      	str	r3, [sp, #0]
   d5a16:	461a      	mov	r2, r3
   d5a18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a1c:	f7ff fbdc 	bl	d51d8 <system_ctrl_set_result>
}
   d5a20:	b003      	add	sp, #12
   d5a22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a28 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5a28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a2a:	8843      	ldrh	r3, [r0, #2]
   d5a2c:	2b0a      	cmp	r3, #10
   d5a2e:	d008      	beq.n	d5a42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a30:	2b50      	cmp	r3, #80	; 0x50
   d5a32:	d109      	bne.n	d5a48 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5a34:	4b09      	ldr	r3, [pc, #36]	; (d5a5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a36:	681b      	ldr	r3, [r3, #0]
   d5a38:	b13b      	cbz	r3, d5a4a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5a3a:	b003      	add	sp, #12
   d5a3c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5a40:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5a42:	f7ff ffe5 	bl	d5a10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5a46:	e006      	b.n	d5a56 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a48:	2300      	movs	r3, #0
   d5a4a:	9300      	str	r3, [sp, #0]
   d5a4c:	461a      	mov	r2, r3
   d5a4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a52:	f7ff fbc1 	bl	d51d8 <system_ctrl_set_result>
        break;
    }
}
   d5a56:	b003      	add	sp, #12
   d5a58:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a5c:	2003e428 	.word	0x2003e428

000d5a60 <module_user_init_hook>:

void module_user_init_hook()
{
   d5a60:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5a62:	4c10      	ldr	r4, [pc, #64]	; (d5aa4 <module_user_init_hook+0x44>)
   d5a64:	4d10      	ldr	r5, [pc, #64]	; (d5aa8 <module_user_init_hook+0x48>)
   d5a66:	6823      	ldr	r3, [r4, #0]
   d5a68:	42ab      	cmp	r3, r5
   d5a6a:	4b10      	ldr	r3, [pc, #64]	; (d5aac <module_user_init_hook+0x4c>)
   d5a6c:	bf0c      	ite	eq
   d5a6e:	2201      	moveq	r2, #1
   d5a70:	2200      	movne	r2, #0
   d5a72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5a74:	d002      	beq.n	d5a7c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5a76:	f7ff ffbf 	bl	d59f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5a7a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5a7c:	f7ff faa2 	bl	d4fc4 <HAL_RNG_GetRandomNumber>
   d5a80:	4604      	mov	r4, r0
    srand(seed);
   d5a82:	f001 f9b7 	bl	d6df4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a86:	4b0a      	ldr	r3, [pc, #40]	; (d5ab0 <module_user_init_hook+0x50>)
   d5a88:	b113      	cbz	r3, d5a90 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a90:	2100      	movs	r1, #0
   d5a92:	4807      	ldr	r0, [pc, #28]	; (d5ab0 <module_user_init_hook+0x50>)
   d5a94:	f7ff fbfa 	bl	d528c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a98:	2100      	movs	r1, #0
   d5a9a:	4806      	ldr	r0, [pc, #24]	; (d5ab4 <module_user_init_hook+0x54>)
}
   d5a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5aa0:	f7ff bb90 	b.w	d51c4 <system_ctrl_set_app_request_handler>
   d5aa4:	2003f400 	.word	0x2003f400
   d5aa8:	9a271c1e 	.word	0x9a271c1e
   d5aac:	2003e42c 	.word	0x2003e42c
   d5ab0:	00000000 	.word	0x00000000
   d5ab4:	000d5a29 	.word	0x000d5a29

000d5ab8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ab8:	4770      	bx	lr

000d5aba <_ZN9IPAddressD0Ev>:
   d5aba:	b510      	push	{r4, lr}
   d5abc:	2118      	movs	r1, #24
   d5abe:	4604      	mov	r4, r0
   d5ac0:	f000 fb1f 	bl	d6102 <_ZdlPvj>
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5aca:	7d03      	ldrb	r3, [r0, #20]
   d5acc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ace:	b08d      	sub	sp, #52	; 0x34
   d5ad0:	460e      	mov	r6, r1
   d5ad2:	f100 0704 	add.w	r7, r0, #4
   d5ad6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ada:	d002      	beq.n	d5ae2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5adc:	f100 0508 	add.w	r5, r0, #8
   d5ae0:	e018      	b.n	d5b14 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ae2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ae4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ae6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5aea:	232f      	movs	r3, #47	; 0x2f
   d5aec:	462a      	mov	r2, r5
   d5aee:	200a      	movs	r0, #10
   d5af0:	f7ff fad8 	bl	d50a4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5af4:	4628      	mov	r0, r5
   d5af6:	f001 f9b7 	bl	d6e68 <strlen>
   d5afa:	6833      	ldr	r3, [r6, #0]
   d5afc:	4602      	mov	r2, r0
   d5afe:	68db      	ldr	r3, [r3, #12]
   d5b00:	4629      	mov	r1, r5
   d5b02:	4630      	mov	r0, r6
   d5b04:	4798      	blx	r3
   d5b06:	e00f      	b.n	d5b28 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b08:	b124      	cbz	r4, d5b14 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b0a:	212e      	movs	r1, #46	; 0x2e
   d5b0c:	4630      	mov	r0, r6
   d5b0e:	f7ff fdff 	bl	d5710 <_ZN5Print5printEc>
   d5b12:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b18:	220a      	movs	r2, #10
   d5b1a:	4630      	mov	r0, r6
   d5b1c:	f7ff fe11 	bl	d5742 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b20:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b22:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b24:	d1f0      	bne.n	d5b08 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b26:	4620      	mov	r0, r4
    }
    return n;
}
   d5b28:	b00d      	add	sp, #52	; 0x34
   d5b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b2c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b2c:	b510      	push	{r4, lr}
   d5b2e:	4b05      	ldr	r3, [pc, #20]	; (d5b44 <_ZN9IPAddressC1Ev+0x18>)
   d5b30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b32:	2211      	movs	r2, #17
   d5b34:	f840 3b04 	str.w	r3, [r0], #4
   d5b38:	2100      	movs	r1, #0
   d5b3a:	f001 f952 	bl	d6de2 <memset>
{
    clear();
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd10      	pop	{r4, pc}
   d5b42:	bf00      	nop
   d5b44:	000d8efc 	.word	0x000d8efc

000d5b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b48:	4603      	mov	r3, r0
   d5b4a:	4a07      	ldr	r2, [pc, #28]	; (d5b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b52:	f101 0210 	add.w	r2, r1, #16
   d5b56:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b5a:	f843 4b04 	str.w	r4, [r3], #4
   d5b5e:	4291      	cmp	r1, r2
   d5b60:	d1f9      	bne.n	d5b56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5b62:	780a      	ldrb	r2, [r1, #0]
   d5b64:	701a      	strb	r2, [r3, #0]
}
   d5b66:	bd10      	pop	{r4, pc}
   d5b68:	000d8efc 	.word	0x000d8efc

000d5b6c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5b6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5b7e:	2304      	movs	r3, #4
   d5b80:	6041      	str	r1, [r0, #4]
   d5b82:	7503      	strb	r3, [r0, #20]
   d5b84:	bd10      	pop	{r4, pc}

000d5b86 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5b88:	780d      	ldrb	r5, [r1, #0]
   d5b8a:	788b      	ldrb	r3, [r1, #2]
   d5b8c:	784a      	ldrb	r2, [r1, #1]
   d5b8e:	78c9      	ldrb	r1, [r1, #3]
   d5b90:	9100      	str	r1, [sp, #0]
   d5b92:	4629      	mov	r1, r5
   d5b94:	f7ff ffea 	bl	d5b6c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5b98:	b003      	add	sp, #12
   d5b9a:	bd30      	pop	{r4, r5, pc}

000d5b9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b9c:	7441      	strb	r1, [r0, #17]
   d5b9e:	4770      	bx	lr

000d5ba0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ba0:	4770      	bx	lr

000d5ba2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5ba2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ba4:	2100      	movs	r1, #0
   d5ba6:	7c00      	ldrb	r0, [r0, #16]
   d5ba8:	f7ff fae4 	bl	d5174 <HAL_USB_USART_Receive_Data>
}
   d5bac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bb0:	bf28      	it	cs
   d5bb2:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bb6:	bd08      	pop	{r3, pc}

000d5bb8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5bb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5bba:	2101      	movs	r1, #1
   d5bbc:	7c00      	ldrb	r0, [r0, #16]
   d5bbe:	f7ff fad9 	bl	d5174 <HAL_USB_USART_Receive_Data>
}
   d5bc2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bc6:	bf28      	it	cs
   d5bc8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bcc:	bd08      	pop	{r3, pc}

000d5bce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bd0:	7c00      	ldrb	r0, [r0, #16]
   d5bd2:	f7ff fac7 	bl	d5164 <HAL_USB_USART_Available_Data_For_Write>
}
   d5bd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bda:	bd08      	pop	{r3, pc}

000d5bdc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5bdc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5bde:	7c00      	ldrb	r0, [r0, #16]
   d5be0:	f7ff fab8 	bl	d5154 <HAL_USB_USART_Available_Data>
}
   d5be4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5be8:	bd08      	pop	{r3, pc}

000d5bea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bea:	7c00      	ldrb	r0, [r0, #16]
   d5bec:	f7ff bad2 	b.w	d5194 <HAL_USB_USART_Flush_Data>

000d5bf0 <_ZN9USBSerialD0Ev>:
   d5bf0:	b510      	push	{r4, lr}
   d5bf2:	2114      	movs	r1, #20
   d5bf4:	4604      	mov	r4, r0
   d5bf6:	f000 fa84 	bl	d6102 <_ZdlPvj>
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	bd10      	pop	{r4, pc}

000d5bfe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bfe:	b538      	push	{r3, r4, r5, lr}
   d5c00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c02:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c04:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c06:	f7ff faad 	bl	d5164 <HAL_USB_USART_Available_Data_For_Write>
   d5c0a:	2800      	cmp	r0, #0
   d5c0c:	dc01      	bgt.n	d5c12 <_ZN9USBSerial5writeEh+0x14>
   d5c0e:	7c60      	ldrb	r0, [r4, #17]
   d5c10:	b128      	cbz	r0, d5c1e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c12:	4629      	mov	r1, r5
   d5c14:	7c20      	ldrb	r0, [r4, #16]
   d5c16:	f7ff fab5 	bl	d5184 <HAL_USB_USART_Send_Data>
   d5c1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c1e:	bd38      	pop	{r3, r4, r5, pc}

000d5c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c20:	b510      	push	{r4, lr}
   d5c22:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c24:	2300      	movs	r3, #0
   d5c26:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c2c:	60a3      	str	r3, [r4, #8]
   d5c2e:	4b05      	ldr	r3, [pc, #20]	; (d5c44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c30:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c32:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c34:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c3a:	4611      	mov	r1, r2
   d5c3c:	f7ff fa7a 	bl	d5134 <HAL_USB_USART_Init>
}
   d5c40:	4620      	mov	r0, r4
   d5c42:	bd10      	pop	{r4, pc}
   d5c44:	000d8f10 	.word	0x000d8f10

000d5c48 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c48:	2200      	movs	r2, #0
   d5c4a:	7c00      	ldrb	r0, [r0, #16]
   d5c4c:	f7ff ba7a 	b.w	d5144 <HAL_USB_USART_Begin>

000d5c50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c52:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c56:	2100      	movs	r1, #0
   d5c58:	f001 f8c3 	bl	d6de2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c5c:	4620      	mov	r0, r4
   d5c5e:	bd10      	pop	{r4, pc}

000d5c60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c62:	4d0e      	ldr	r5, [pc, #56]	; (d5c9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c66:	a801      	add	r0, sp, #4
   d5c68:	f7ff fff2 	bl	d5c50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c6c:	6829      	ldr	r1, [r5, #0]
   d5c6e:	f011 0401 	ands.w	r4, r1, #1
   d5c72:	d110      	bne.n	d5c96 <_Z16_fetch_usbserialv+0x36>
   d5c74:	4628      	mov	r0, r5
   d5c76:	f7fe fa14 	bl	d40a2 <__cxa_guard_acquire>
   d5c7a:	b160      	cbz	r0, d5c96 <_Z16_fetch_usbserialv+0x36>
   d5c7c:	aa01      	add	r2, sp, #4
   d5c7e:	4621      	mov	r1, r4
   d5c80:	4807      	ldr	r0, [pc, #28]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c82:	f7ff ffcd 	bl	d5c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c86:	4628      	mov	r0, r5
   d5c88:	f7fe fa10 	bl	d40ac <__cxa_guard_release>
   d5c8c:	4a05      	ldr	r2, [pc, #20]	; (d5ca4 <_Z16_fetch_usbserialv+0x44>)
   d5c8e:	4906      	ldr	r1, [pc, #24]	; (d5ca8 <_Z16_fetch_usbserialv+0x48>)
   d5c90:	4803      	ldr	r0, [pc, #12]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c92:	f000 fa31 	bl	d60f8 <__aeabi_atexit>
	return _usbserial;
}
   d5c96:	4802      	ldr	r0, [pc, #8]	; (d5ca0 <_Z16_fetch_usbserialv+0x40>)
   d5c98:	b007      	add	sp, #28
   d5c9a:	bd30      	pop	{r4, r5, pc}
   d5c9c:	2003e430 	.word	0x2003e430
   d5ca0:	2003e434 	.word	0x2003e434
   d5ca4:	2003e2dc 	.word	0x2003e2dc
   d5ca8:	000d5ba1 	.word	0x000d5ba1

000d5cac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cac:	4770      	bx	lr

000d5cae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cae:	7441      	strb	r1, [r0, #17]
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff fa2d 	bl	d5114 <HAL_USART_Available_Data_For_Write>
}
   d5cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cbe:	bd08      	pop	{r3, pc}

000d5cc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cc2:	7c00      	ldrb	r0, [r0, #16]
   d5cc4:	f7ff fa06 	bl	d50d4 <HAL_USART_Available_Data>
}
   d5cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ccc:	bd08      	pop	{r3, pc}

000d5cce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5cce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5cd0:	7c00      	ldrb	r0, [r0, #16]
   d5cd2:	f7ff fa0f 	bl	d50f4 <HAL_USART_Peek_Data>
}
   d5cd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cda:	bf28      	it	cs
   d5cdc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ce0:	bd08      	pop	{r3, pc}

000d5ce2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ce4:	7c00      	ldrb	r0, [r0, #16]
   d5ce6:	f7ff f9fd 	bl	d50e4 <HAL_USART_Read_Data>
}
   d5cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cee:	bf28      	it	cs
   d5cf0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cf4:	bd08      	pop	{r3, pc}

000d5cf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cf6:	7c00      	ldrb	r0, [r0, #16]
   d5cf8:	f7ff ba04 	b.w	d5104 <HAL_USART_Flush_Data>

000d5cfc <_ZN11USARTSerialD0Ev>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	2114      	movs	r1, #20
   d5d00:	4604      	mov	r4, r0
   d5d02:	f000 f9fe 	bl	d6102 <_ZdlPvj>
   d5d06:	4620      	mov	r0, r4
   d5d08:	bd10      	pop	{r4, pc}

000d5d0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0e:	4604      	mov	r4, r0
   d5d10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d12:	b925      	cbnz	r5, d5d1e <_ZN11USARTSerial5writeEh+0x14>
   d5d14:	7c00      	ldrb	r0, [r0, #16]
   d5d16:	f7ff f9fd 	bl	d5114 <HAL_USART_Available_Data_For_Write>
   d5d1a:	2800      	cmp	r0, #0
   d5d1c:	dd05      	ble.n	d5d2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d1e:	4631      	mov	r1, r6
   d5d20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d26:	f7ff b9cd 	b.w	d50c4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d2a:	4628      	mov	r0, r5
   d5d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d30:	b510      	push	{r4, lr}
   d5d32:	4604      	mov	r4, r0
   d5d34:	4608      	mov	r0, r1
   d5d36:	4611      	mov	r1, r2
   d5d38:	2200      	movs	r2, #0
   d5d3a:	6062      	str	r2, [r4, #4]
   d5d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d40:	60a2      	str	r2, [r4, #8]
   d5d42:	4a05      	ldr	r2, [pc, #20]	; (d5d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	f7ff f9b1 	bl	d50b4 <HAL_USART_Init>
}
   d5d52:	4620      	mov	r0, r4
   d5d54:	bd10      	pop	{r4, pc}
   d5d56:	bf00      	nop
   d5d58:	000d8f40 	.word	0x000d8f40

000d5d5c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5d5c:	2300      	movs	r3, #0
   d5d5e:	7c00      	ldrb	r0, [r0, #16]
   d5d60:	f7ff b9e0 	b.w	d5124 <HAL_USART_BeginConfig>

000d5d64 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5d64:	2200      	movs	r2, #0
   d5d66:	f7ff bff9 	b.w	d5d5c <_ZN11USARTSerial5beginEmm>
	...

000d5d6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d6e:	4d0c      	ldr	r5, [pc, #48]	; (d5da0 <_Z22__fetch_global_Serial1v+0x34>)
   d5d70:	6829      	ldr	r1, [r5, #0]
   d5d72:	f011 0401 	ands.w	r4, r1, #1
   d5d76:	d111      	bne.n	d5d9c <_Z22__fetch_global_Serial1v+0x30>
   d5d78:	4628      	mov	r0, r5
   d5d7a:	f7fe f992 	bl	d40a2 <__cxa_guard_acquire>
   d5d7e:	b168      	cbz	r0, d5d9c <_Z22__fetch_global_Serial1v+0x30>
   d5d80:	4a08      	ldr	r2, [pc, #32]	; (d5da4 <_Z22__fetch_global_Serial1v+0x38>)
   d5d82:	4b09      	ldr	r3, [pc, #36]	; (d5da8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d84:	4809      	ldr	r0, [pc, #36]	; (d5dac <_Z22__fetch_global_Serial1v+0x40>)
   d5d86:	4621      	mov	r1, r4
   d5d88:	f7ff ffd2 	bl	d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	f7fe f98d 	bl	d40ac <__cxa_guard_release>
   d5d92:	4a07      	ldr	r2, [pc, #28]	; (d5db0 <_Z22__fetch_global_Serial1v+0x44>)
   d5d94:	4907      	ldr	r1, [pc, #28]	; (d5db4 <_Z22__fetch_global_Serial1v+0x48>)
   d5d96:	4805      	ldr	r0, [pc, #20]	; (d5dac <_Z22__fetch_global_Serial1v+0x40>)
   d5d98:	f000 f9ae 	bl	d60f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d9c:	4803      	ldr	r0, [pc, #12]	; (d5dac <_Z22__fetch_global_Serial1v+0x40>)
   d5d9e:	bd38      	pop	{r3, r4, r5, pc}
   d5da0:	2003e4e0 	.word	0x2003e4e0
   d5da4:	2003e4e4 	.word	0x2003e4e4
   d5da8:	2003e45c 	.word	0x2003e45c
   d5dac:	2003e448 	.word	0x2003e448
   d5db0:	2003e2dc 	.word	0x2003e2dc
   d5db4:	000d5cad 	.word	0x000d5cad

000d5db8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5db8:	2200      	movs	r2, #0
   d5dba:	4611      	mov	r1, r2
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	f7ff ba4d 	b.w	d525c <network_listening>

000d5dc2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dc2:	2200      	movs	r2, #0
   d5dc4:	4611      	mov	r1, r2
   d5dc6:	6840      	ldr	r0, [r0, #4]
   d5dc8:	f7ff ba58 	b.w	d527c <network_get_listen_timeout>

000d5dcc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dcc:	2200      	movs	r2, #0
   d5dce:	6840      	ldr	r0, [r0, #4]
   d5dd0:	f7ff ba4c 	b.w	d526c <network_set_listen_timeout>

000d5dd4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dd4:	2200      	movs	r2, #0
   d5dd6:	f081 0101 	eor.w	r1, r1, #1
   d5dda:	6840      	ldr	r0, [r0, #4]
   d5ddc:	f7ff ba36 	b.w	d524c <network_listen>

000d5de0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5de0:	2300      	movs	r3, #0
   d5de2:	461a      	mov	r2, r3
   d5de4:	2101      	movs	r1, #1
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7ff ba28 	b.w	d523c <network_off>

000d5dec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5dec:	2300      	movs	r3, #0
   d5dee:	461a      	mov	r2, r3
   d5df0:	4619      	mov	r1, r3
   d5df2:	6840      	ldr	r0, [r0, #4]
   d5df4:	f7ff ba1a 	b.w	d522c <network_on>

000d5df8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5df8:	2200      	movs	r2, #0
   d5dfa:	4611      	mov	r1, r2
   d5dfc:	6840      	ldr	r0, [r0, #4]
   d5dfe:	f7ff ba0d 	b.w	d521c <network_ready>

000d5e02 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e02:	2200      	movs	r2, #0
   d5e04:	4611      	mov	r1, r2
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	f7ff b9f8 	b.w	d51fc <network_connecting>

000d5e0c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e0c:	2200      	movs	r2, #0
   d5e0e:	2102      	movs	r1, #2
   d5e10:	6840      	ldr	r0, [r0, #4]
   d5e12:	f7ff b9fb 	b.w	d520c <network_disconnect>

000d5e16 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e16:	2300      	movs	r3, #0
   d5e18:	461a      	mov	r2, r3
   d5e1a:	6840      	ldr	r0, [r0, #4]
   d5e1c:	f7ff b9e6 	b.w	d51ec <network_connect>

000d5e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5e20:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e22:	4605      	mov	r5, r0
   d5e24:	b188      	cbz	r0, d5e4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e26:	6804      	ldr	r4, [r0, #0]
   d5e28:	b14c      	cbz	r4, d5e3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5e2a:	68a3      	ldr	r3, [r4, #8]
   d5e2c:	b11b      	cbz	r3, d5e36 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e2e:	2203      	movs	r2, #3
   d5e30:	4621      	mov	r1, r4
   d5e32:	4620      	mov	r0, r4
   d5e34:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e36:	2110      	movs	r1, #16
   d5e38:	4620      	mov	r0, r4
   d5e3a:	f000 f962 	bl	d6102 <_ZdlPvj>
   d5e3e:	4628      	mov	r0, r5
   d5e40:	2114      	movs	r1, #20
      }
   d5e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e46:	f000 b95c 	b.w	d6102 <_ZdlPvj>
   d5e4a:	bd38      	pop	{r3, r4, r5, pc}

000d5e4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5e4c:	b110      	cbz	r0, d5e54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5e4e:	6803      	ldr	r3, [r0, #0]
   d5e50:	685b      	ldr	r3, [r3, #4]
   d5e52:	4718      	bx	r3
   d5e54:	4770      	bx	lr

000d5e56 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5e56:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e58:	6803      	ldr	r3, [r0, #0]
   d5e5a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5e5c:	b1bb      	cbz	r3, d5e8e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5e5e:	6858      	ldr	r0, [r3, #4]
   d5e60:	f7ff f8c0 	bl	d4fe4 <os_thread_is_current>
   d5e64:	b978      	cbnz	r0, d5e86 <_ZN6ThreadD1Ev+0x30>
   d5e66:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5e68:	7c5a      	ldrb	r2, [r3, #17]
   d5e6a:	b912      	cbnz	r2, d5e72 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e6c:	6858      	ldr	r0, [r3, #4]
   d5e6e:	f7ff f8c9 	bl	d5004 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e72:	6823      	ldr	r3, [r4, #0]
   d5e74:	6858      	ldr	r0, [r3, #4]
   d5e76:	f7ff f8cd 	bl	d5014 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e7a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e7c:	2300      	movs	r3, #0
   d5e7e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e80:	b128      	cbz	r0, d5e8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e82:	f7ff ffcd 	bl	d5e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e86:	6820      	ldr	r0, [r4, #0]
   d5e88:	b108      	cbz	r0, d5e8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e8a:	f7ff ffc9 	bl	d5e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e8e:	4620      	mov	r0, r4
   d5e90:	bd10      	pop	{r4, pc}

000d5e92 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5e92:	b538      	push	{r3, r4, r5, lr}
   d5e94:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e96:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5e9a:	b108      	cbz	r0, d5ea0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5e9c:	f7fe f8ff 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ea0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5ea4:	b108      	cbz	r0, d5eaa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5ea6:	f7ff f8ed 	bl	d5084 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5eaa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5eae:	b135      	cbz	r5, d5ebe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5eb0:	4628      	mov	r0, r5
   d5eb2:	f7ff ffd0 	bl	d5e56 <_ZN6ThreadD1Ev>
   d5eb6:	2104      	movs	r1, #4
   d5eb8:	4628      	mov	r0, r5
   d5eba:	f000 f922 	bl	d6102 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ebe:	6820      	ldr	r0, [r4, #0]
   d5ec0:	b108      	cbz	r0, d5ec6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5ec2:	f7ff ffc3 	bl	d5e4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ecc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4b04      	ldr	r3, [pc, #16]	; (d5ee0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	f840 3b08 	str.w	r3, [r0], #8
   d5ed6:	f7ff ffdc 	bl	d5e92 <_ZN5spark11MeshPublishD1Ev>
   d5eda:	4620      	mov	r0, r4
   d5edc:	bd10      	pop	{r4, pc}
   d5ede:	bf00      	nop
   d5ee0:	000d8f70 	.word	0x000d8f70

000d5ee4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5ee4:	b538      	push	{r3, r4, r5, lr}
   d5ee6:	4c0e      	ldr	r4, [pc, #56]	; (d5f20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5ee8:	4b0e      	ldr	r3, [pc, #56]	; (d5f24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5eea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5eec:	2500      	movs	r5, #0
   d5eee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ef0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5ef4:	6063      	str	r3, [r4, #4]
   d5ef6:	60a5      	str	r5, [r4, #8]
   d5ef8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5efc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5f00:	f7ff f8b8 	bl	d5074 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5f04:	4b08      	ldr	r3, [pc, #32]	; (d5f28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5f06:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f0a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5f0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5f10:	4620      	mov	r0, r4
   d5f12:	4a06      	ldr	r2, [pc, #24]	; (d5f2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5f14:	4906      	ldr	r1, [pc, #24]	; (d5f30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5f1a:	f000 b8ed 	b.w	d60f8 <__aeabi_atexit>
   d5f1e:	bf00      	nop
   d5f20:	2003e568 	.word	0x2003e568
   d5f24:	000d8fd8 	.word	0x000d8fd8
   d5f28:	000d8f70 	.word	0x000d8f70
   d5f2c:	2003e2dc 	.word	0x2003e2dc
   d5f30:	000d5ecd 	.word	0x000d5ecd

000d5f34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5f34:	2200      	movs	r2, #0
   d5f36:	4611      	mov	r1, r2
   d5f38:	6840      	ldr	r0, [r0, #4]
   d5f3a:	f7ff b96f 	b.w	d521c <network_ready>

000d5f3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f3e:	2200      	movs	r2, #0
   d5f40:	4611      	mov	r1, r2
   d5f42:	6840      	ldr	r0, [r0, #4]
   d5f44:	f7ff b98a 	b.w	d525c <network_listening>

000d5f48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f48:	2200      	movs	r2, #0
   d5f4a:	4611      	mov	r1, r2
   d5f4c:	6840      	ldr	r0, [r0, #4]
   d5f4e:	f7ff b995 	b.w	d527c <network_get_listen_timeout>

000d5f52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f52:	2200      	movs	r2, #0
   d5f54:	6840      	ldr	r0, [r0, #4]
   d5f56:	f7ff b989 	b.w	d526c <network_set_listen_timeout>

000d5f5a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f5a:	2200      	movs	r2, #0
   d5f5c:	f081 0101 	eor.w	r1, r1, #1
   d5f60:	6840      	ldr	r0, [r0, #4]
   d5f62:	f7ff b973 	b.w	d524c <network_listen>

000d5f66 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5f66:	2300      	movs	r3, #0
   d5f68:	461a      	mov	r2, r3
   d5f6a:	4619      	mov	r1, r3
   d5f6c:	6840      	ldr	r0, [r0, #4]
   d5f6e:	f7ff b965 	b.w	d523c <network_off>

000d5f72 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f72:	2300      	movs	r3, #0
   d5f74:	461a      	mov	r2, r3
   d5f76:	4619      	mov	r1, r3
   d5f78:	6840      	ldr	r0, [r0, #4]
   d5f7a:	f7ff b957 	b.w	d522c <network_on>

000d5f7e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f7e:	2200      	movs	r2, #0
   d5f80:	4611      	mov	r1, r2
   d5f82:	6840      	ldr	r0, [r0, #4]
   d5f84:	f7ff b93a 	b.w	d51fc <network_connecting>

000d5f88 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f88:	2200      	movs	r2, #0
   d5f8a:	2102      	movs	r1, #2
   d5f8c:	6840      	ldr	r0, [r0, #4]
   d5f8e:	f7ff b93d 	b.w	d520c <network_disconnect>

000d5f92 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f92:	2300      	movs	r3, #0
   d5f94:	461a      	mov	r2, r3
   d5f96:	6840      	ldr	r0, [r0, #4]
   d5f98:	f7ff b928 	b.w	d51ec <network_connect>

000d5f9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5f9c:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5f9e:	2204      	movs	r2, #4
   d5fa0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5fa2:	4a02      	ldr	r2, [pc, #8]	; (d5fac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5fa4:	601a      	str	r2, [r3, #0]
   d5fa6:	4770      	bx	lr
   d5fa8:	2003e73c 	.word	0x2003e73c
   d5fac:	000d8fa4 	.word	0x000d8fa4

000d5fb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fb0:	2300      	movs	r3, #0
   d5fb2:	461a      	mov	r2, r3
   d5fb4:	6840      	ldr	r0, [r0, #4]
   d5fb6:	f7ff b919 	b.w	d51ec <network_connect>

000d5fba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5fba:	2200      	movs	r2, #0
   d5fbc:	2102      	movs	r1, #2
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7ff b924 	b.w	d520c <network_disconnect>

000d5fc4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	4611      	mov	r1, r2
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	f7ff b917 	b.w	d51fc <network_connecting>

000d5fce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	4611      	mov	r1, r2
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f7ff b922 	b.w	d521c <network_ready>

000d5fd8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5fd8:	2300      	movs	r3, #0
   d5fda:	461a      	mov	r2, r3
   d5fdc:	4619      	mov	r1, r3
   d5fde:	6840      	ldr	r0, [r0, #4]
   d5fe0:	f7ff b924 	b.w	d522c <network_on>

000d5fe4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5fe4:	2300      	movs	r3, #0
   d5fe6:	461a      	mov	r2, r3
   d5fe8:	4619      	mov	r1, r3
   d5fea:	6840      	ldr	r0, [r0, #4]
   d5fec:	f7ff b926 	b.w	d523c <network_off>

000d5ff0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ff0:	2200      	movs	r2, #0
   d5ff2:	f081 0101 	eor.w	r1, r1, #1
   d5ff6:	6840      	ldr	r0, [r0, #4]
   d5ff8:	f7ff b928 	b.w	d524c <network_listen>

000d5ffc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ffc:	2200      	movs	r2, #0
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff b934 	b.w	d526c <network_set_listen_timeout>

000d6004 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6004:	2200      	movs	r2, #0
   d6006:	4611      	mov	r1, r2
   d6008:	6840      	ldr	r0, [r0, #4]
   d600a:	f7ff b937 	b.w	d527c <network_get_listen_timeout>

000d600e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d600e:	2200      	movs	r2, #0
   d6010:	4611      	mov	r1, r2
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7ff b922 	b.w	d525c <network_listening>

000d6018 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d601c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d601e:	b095      	sub	sp, #84	; 0x54
   d6020:	4616      	mov	r6, r2
   d6022:	460d      	mov	r5, r1
   d6024:	4607      	mov	r7, r0
    IPAddress addr;
   d6026:	f7ff fd81 	bl	d5b2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d602a:	4621      	mov	r1, r4
   d602c:	2220      	movs	r2, #32
   d602e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6030:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6032:	f000 fed6 	bl	d6de2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6036:	2340      	movs	r3, #64	; 0x40
   d6038:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d603a:	4621      	mov	r1, r4
   d603c:	466b      	mov	r3, sp
   d603e:	aa0c      	add	r2, sp, #48	; 0x30
   d6040:	4630      	mov	r0, r6
   d6042:	f7fe ffaf 	bl	d4fa4 <netdb_getaddrinfo>
    if (!r) {
   d6046:	4604      	mov	r4, r0
   d6048:	2800      	cmp	r0, #0
   d604a:	d144      	bne.n	d60d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d604c:	4602      	mov	r2, r0
   d604e:	2101      	movs	r1, #1
   d6050:	6868      	ldr	r0, [r5, #4]
   d6052:	f7ff f8e3 	bl	d521c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6056:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6058:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d605a:	4622      	mov	r2, r4
   d605c:	6868      	ldr	r0, [r5, #4]
   d605e:	f7ff f8dd 	bl	d521c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6062:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6064:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6066:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6068:	2e00      	cmp	r6, #0
   d606a:	d034      	beq.n	d60d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d606c:	2900      	cmp	r1, #0
   d606e:	d132      	bne.n	d60d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6070:	6873      	ldr	r3, [r6, #4]
   d6072:	2b02      	cmp	r3, #2
   d6074:	d002      	beq.n	d607c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6076:	2b0a      	cmp	r3, #10
   d6078:	d009      	beq.n	d608e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d607a:	e02a      	b.n	d60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d607c:	f1b8 0f00 	cmp.w	r8, #0
   d6080:	d027      	beq.n	d60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6082:	6971      	ldr	r1, [r6, #20]
   d6084:	4638      	mov	r0, r7
   d6086:	3104      	adds	r1, #4
   d6088:	f7ff fd7d 	bl	d5b86 <_ZN9IPAddressaSEPKh>
   d608c:	e020      	b.n	d60d0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d608e:	f1b9 0f00 	cmp.w	r9, #0
   d6092:	d01e      	beq.n	d60d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6094:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6096:	2211      	movs	r2, #17
   d6098:	a801      	add	r0, sp, #4
   d609a:	f000 fea2 	bl	d6de2 <memset>
                    a.v = 6;
   d609e:	2306      	movs	r3, #6
   d60a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60a4:	ad01      	add	r5, sp, #4
   d60a6:	f104 0308 	add.w	r3, r4, #8
   d60aa:	3418      	adds	r4, #24
   d60ac:	6818      	ldr	r0, [r3, #0]
   d60ae:	6859      	ldr	r1, [r3, #4]
   d60b0:	462a      	mov	r2, r5
   d60b2:	c203      	stmia	r2!, {r0, r1}
   d60b4:	3308      	adds	r3, #8
   d60b6:	42a3      	cmp	r3, r4
   d60b8:	4615      	mov	r5, r2
   d60ba:	d1f7      	bne.n	d60ac <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d60bc:	a901      	add	r1, sp, #4
   d60be:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60c0:	ad07      	add	r5, sp, #28
   d60c2:	f7ff fd41 	bl	d5b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d60c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60c8:	1d3c      	adds	r4, r7, #4
   d60ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60cc:	682b      	ldr	r3, [r5, #0]
   d60ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d60d0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60d2:	69f6      	ldr	r6, [r6, #28]
   d60d4:	e7c8      	b.n	d6068 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d60d6:	9800      	ldr	r0, [sp, #0]
   d60d8:	f7fe ff5c 	bl	d4f94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d60dc:	4638      	mov	r0, r7
   d60de:	b015      	add	sp, #84	; 0x54
   d60e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d60e4:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d60e6:	4a03      	ldr	r2, [pc, #12]	; (d60f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d60e8:	601a      	str	r2, [r3, #0]
   d60ea:	2200      	movs	r2, #0
   d60ec:	605a      	str	r2, [r3, #4]
   d60ee:	4770      	bx	lr
   d60f0:	2003e744 	.word	0x2003e744
   d60f4:	000d8fd8 	.word	0x000d8fd8

000d60f8 <__aeabi_atexit>:
   d60f8:	460b      	mov	r3, r1
   d60fa:	4601      	mov	r1, r0
   d60fc:	4618      	mov	r0, r3
   d60fe:	f000 be53 	b.w	d6da8 <__cxa_atexit>

000d6102 <_ZdlPvj>:
   d6102:	f7fd bfca 	b.w	d409a <_ZdlPv>
	...

000d6108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6108:	4b18      	ldr	r3, [pc, #96]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d610a:	681a      	ldr	r2, [r3, #0]
   d610c:	07d1      	lsls	r1, r2, #31
   d610e:	bf5c      	itt	pl
   d6110:	2201      	movpl	r2, #1
   d6112:	601a      	strpl	r2, [r3, #0]
   d6114:	4b16      	ldr	r3, [pc, #88]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6116:	681a      	ldr	r2, [r3, #0]
   d6118:	07d2      	lsls	r2, r2, #31
   d611a:	bf5c      	itt	pl
   d611c:	2201      	movpl	r2, #1
   d611e:	601a      	strpl	r2, [r3, #0]
   d6120:	4b14      	ldr	r3, [pc, #80]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6122:	681a      	ldr	r2, [r3, #0]
   d6124:	07d0      	lsls	r0, r2, #31
   d6126:	bf5c      	itt	pl
   d6128:	2201      	movpl	r2, #1
   d612a:	601a      	strpl	r2, [r3, #0]
   d612c:	4b12      	ldr	r3, [pc, #72]	; (d6178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d612e:	681a      	ldr	r2, [r3, #0]
   d6130:	07d1      	lsls	r1, r2, #31
   d6132:	bf5c      	itt	pl
   d6134:	2201      	movpl	r2, #1
   d6136:	601a      	strpl	r2, [r3, #0]
   d6138:	4b10      	ldr	r3, [pc, #64]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d613a:	681a      	ldr	r2, [r3, #0]
   d613c:	07d2      	lsls	r2, r2, #31
   d613e:	bf5c      	itt	pl
   d6140:	2201      	movpl	r2, #1
   d6142:	601a      	strpl	r2, [r3, #0]
   d6144:	4b0e      	ldr	r3, [pc, #56]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6146:	681a      	ldr	r2, [r3, #0]
   d6148:	07d0      	lsls	r0, r2, #31
   d614a:	bf5c      	itt	pl
   d614c:	2201      	movpl	r2, #1
   d614e:	601a      	strpl	r2, [r3, #0]
   d6150:	4b0c      	ldr	r3, [pc, #48]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6152:	681a      	ldr	r2, [r3, #0]
   d6154:	07d1      	lsls	r1, r2, #31
   d6156:	bf5c      	itt	pl
   d6158:	2201      	movpl	r2, #1
   d615a:	601a      	strpl	r2, [r3, #0]
   d615c:	4b0a      	ldr	r3, [pc, #40]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d615e:	681a      	ldr	r2, [r3, #0]
   d6160:	07d2      	lsls	r2, r2, #31
   d6162:	bf5c      	itt	pl
   d6164:	2201      	movpl	r2, #1
   d6166:	601a      	strpl	r2, [r3, #0]
   d6168:	4770      	bx	lr
   d616a:	bf00      	nop
   d616c:	2003e76c 	.word	0x2003e76c
   d6170:	2003e768 	.word	0x2003e768
   d6174:	2003e764 	.word	0x2003e764
   d6178:	2003e760 	.word	0x2003e760
   d617c:	2003e75c 	.word	0x2003e75c
   d6180:	2003e758 	.word	0x2003e758
   d6184:	2003e754 	.word	0x2003e754
   d6188:	2003e750 	.word	0x2003e750

000d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d618c:	4b24      	ldr	r3, [pc, #144]	; (d6220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d0      	lsls	r0, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b22      	ldr	r3, [pc, #136]	; (d6224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d1      	lsls	r1, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b20      	ldr	r3, [pc, #128]	; (d6228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d2      	lsls	r2, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b1e      	ldr	r3, [pc, #120]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d0      	lsls	r0, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b1c      	ldr	r3, [pc, #112]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d1      	lsls	r1, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b1a      	ldr	r3, [pc, #104]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d2      	lsls	r2, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b18      	ldr	r3, [pc, #96]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d0      	lsls	r0, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b16      	ldr	r3, [pc, #88]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d1      	lsls	r1, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b14      	ldr	r3, [pc, #80]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d2      	lsls	r2, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b12      	ldr	r3, [pc, #72]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d0      	lsls	r0, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b10      	ldr	r3, [pc, #64]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d1      	lsls	r1, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b0e      	ldr	r3, [pc, #56]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d2      	lsls	r2, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4770      	bx	lr
   d621e:	bf00      	nop
   d6220:	2003e79c 	.word	0x2003e79c
   d6224:	2003e798 	.word	0x2003e798
   d6228:	2003e794 	.word	0x2003e794
   d622c:	2003e790 	.word	0x2003e790
   d6230:	2003e78c 	.word	0x2003e78c
   d6234:	2003e788 	.word	0x2003e788
   d6238:	2003e784 	.word	0x2003e784
   d623c:	2003e780 	.word	0x2003e780
   d6240:	2003e77c 	.word	0x2003e77c
   d6244:	2003e778 	.word	0x2003e778
   d6248:	2003e774 	.word	0x2003e774
   d624c:	2003e770 	.word	0x2003e770

000d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6250:	4b24      	ldr	r3, [pc, #144]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d0      	lsls	r0, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b22      	ldr	r3, [pc, #136]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d1      	lsls	r1, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b20      	ldr	r3, [pc, #128]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d2      	lsls	r2, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b1e      	ldr	r3, [pc, #120]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b1c      	ldr	r3, [pc, #112]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b1a      	ldr	r3, [pc, #104]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b18      	ldr	r3, [pc, #96]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b16      	ldr	r3, [pc, #88]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b14      	ldr	r3, [pc, #80]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b12      	ldr	r3, [pc, #72]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d0      	lsls	r0, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b10      	ldr	r3, [pc, #64]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b0e      	ldr	r3, [pc, #56]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4770      	bx	lr
   d62e2:	bf00      	nop
   d62e4:	2003e7cc 	.word	0x2003e7cc
   d62e8:	2003e7c8 	.word	0x2003e7c8
   d62ec:	2003e7c4 	.word	0x2003e7c4
   d62f0:	2003e7c0 	.word	0x2003e7c0
   d62f4:	2003e7bc 	.word	0x2003e7bc
   d62f8:	2003e7b8 	.word	0x2003e7b8
   d62fc:	2003e7b4 	.word	0x2003e7b4
   d6300:	2003e7b0 	.word	0x2003e7b0
   d6304:	2003e7ac 	.word	0x2003e7ac
   d6308:	2003e7a8 	.word	0x2003e7a8
   d630c:	2003e7a4 	.word	0x2003e7a4
   d6310:	2003e7a0 	.word	0x2003e7a0

000d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6314:	4b18      	ldr	r3, [pc, #96]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6316:	681a      	ldr	r2, [r3, #0]
   d6318:	07d1      	lsls	r1, r2, #31
   d631a:	bf5c      	itt	pl
   d631c:	2201      	movpl	r2, #1
   d631e:	601a      	strpl	r2, [r3, #0]
   d6320:	4b16      	ldr	r3, [pc, #88]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6322:	681a      	ldr	r2, [r3, #0]
   d6324:	07d2      	lsls	r2, r2, #31
   d6326:	bf5c      	itt	pl
   d6328:	2201      	movpl	r2, #1
   d632a:	601a      	strpl	r2, [r3, #0]
   d632c:	4b14      	ldr	r3, [pc, #80]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d632e:	681a      	ldr	r2, [r3, #0]
   d6330:	07d0      	lsls	r0, r2, #31
   d6332:	bf5c      	itt	pl
   d6334:	2201      	movpl	r2, #1
   d6336:	601a      	strpl	r2, [r3, #0]
   d6338:	4b12      	ldr	r3, [pc, #72]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b10      	ldr	r3, [pc, #64]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b0e      	ldr	r3, [pc, #56]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b0c      	ldr	r3, [pc, #48]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b0a      	ldr	r3, [pc, #40]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4770      	bx	lr
   d6376:	bf00      	nop
   d6378:	2003e7ec 	.word	0x2003e7ec
   d637c:	2003e7e8 	.word	0x2003e7e8
   d6380:	2003e7e4 	.word	0x2003e7e4
   d6384:	2003e7e0 	.word	0x2003e7e0
   d6388:	2003e7dc 	.word	0x2003e7dc
   d638c:	2003e7d8 	.word	0x2003e7d8
   d6390:	2003e7d4 	.word	0x2003e7d4
   d6394:	2003e7d0 	.word	0x2003e7d0

000d6398 <__aeabi_drsub>:
   d6398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d639c:	e002      	b.n	d63a4 <__adddf3>
   d639e:	bf00      	nop

000d63a0 <__aeabi_dsub>:
   d63a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d63a4 <__adddf3>:
   d63a4:	b530      	push	{r4, r5, lr}
   d63a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d63aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d63ae:	ea94 0f05 	teq	r4, r5
   d63b2:	bf08      	it	eq
   d63b4:	ea90 0f02 	teqeq	r0, r2
   d63b8:	bf1f      	itttt	ne
   d63ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   d63be:	ea55 0c02 	orrsne.w	ip, r5, r2
   d63c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d63c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d63ca:	f000 80e2 	beq.w	d6592 <__adddf3+0x1ee>
   d63ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d63d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d63d6:	bfb8      	it	lt
   d63d8:	426d      	neglt	r5, r5
   d63da:	dd0c      	ble.n	d63f6 <__adddf3+0x52>
   d63dc:	442c      	add	r4, r5
   d63de:	ea80 0202 	eor.w	r2, r0, r2
   d63e2:	ea81 0303 	eor.w	r3, r1, r3
   d63e6:	ea82 0000 	eor.w	r0, r2, r0
   d63ea:	ea83 0101 	eor.w	r1, r3, r1
   d63ee:	ea80 0202 	eor.w	r2, r0, r2
   d63f2:	ea81 0303 	eor.w	r3, r1, r3
   d63f6:	2d36      	cmp	r5, #54	; 0x36
   d63f8:	bf88      	it	hi
   d63fa:	bd30      	pophi	{r4, r5, pc}
   d63fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6400:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d640c:	d002      	beq.n	d6414 <__adddf3+0x70>
   d640e:	4240      	negs	r0, r0
   d6410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6418:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d641c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6420:	d002      	beq.n	d6428 <__adddf3+0x84>
   d6422:	4252      	negs	r2, r2
   d6424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6428:	ea94 0f05 	teq	r4, r5
   d642c:	f000 80a7 	beq.w	d657e <__adddf3+0x1da>
   d6430:	f1a4 0401 	sub.w	r4, r4, #1
   d6434:	f1d5 0e20 	rsbs	lr, r5, #32
   d6438:	db0d      	blt.n	d6456 <__adddf3+0xb2>
   d643a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d643e:	fa22 f205 	lsr.w	r2, r2, r5
   d6442:	1880      	adds	r0, r0, r2
   d6444:	f141 0100 	adc.w	r1, r1, #0
   d6448:	fa03 f20e 	lsl.w	r2, r3, lr
   d644c:	1880      	adds	r0, r0, r2
   d644e:	fa43 f305 	asr.w	r3, r3, r5
   d6452:	4159      	adcs	r1, r3
   d6454:	e00e      	b.n	d6474 <__adddf3+0xd0>
   d6456:	f1a5 0520 	sub.w	r5, r5, #32
   d645a:	f10e 0e20 	add.w	lr, lr, #32
   d645e:	2a01      	cmp	r2, #1
   d6460:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6464:	bf28      	it	cs
   d6466:	f04c 0c02 	orrcs.w	ip, ip, #2
   d646a:	fa43 f305 	asr.w	r3, r3, r5
   d646e:	18c0      	adds	r0, r0, r3
   d6470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6478:	d507      	bpl.n	d648a <__adddf3+0xe6>
   d647a:	f04f 0e00 	mov.w	lr, #0
   d647e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6482:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6486:	eb6e 0101 	sbc.w	r1, lr, r1
   d648a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d648e:	d31b      	bcc.n	d64c8 <__adddf3+0x124>
   d6490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6494:	d30c      	bcc.n	d64b0 <__adddf3+0x10c>
   d6496:	0849      	lsrs	r1, r1, #1
   d6498:	ea5f 0030 	movs.w	r0, r0, rrx
   d649c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d64a0:	f104 0401 	add.w	r4, r4, #1
   d64a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d64a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d64ac:	f080 809a 	bcs.w	d65e4 <__adddf3+0x240>
   d64b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d64b4:	bf08      	it	eq
   d64b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d64ba:	f150 0000 	adcs.w	r0, r0, #0
   d64be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64c2:	ea41 0105 	orr.w	r1, r1, r5
   d64c6:	bd30      	pop	{r4, r5, pc}
   d64c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d64cc:	4140      	adcs	r0, r0
   d64ce:	eb41 0101 	adc.w	r1, r1, r1
   d64d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64d6:	f1a4 0401 	sub.w	r4, r4, #1
   d64da:	d1e9      	bne.n	d64b0 <__adddf3+0x10c>
   d64dc:	f091 0f00 	teq	r1, #0
   d64e0:	bf04      	itt	eq
   d64e2:	4601      	moveq	r1, r0
   d64e4:	2000      	moveq	r0, #0
   d64e6:	fab1 f381 	clz	r3, r1
   d64ea:	bf08      	it	eq
   d64ec:	3320      	addeq	r3, #32
   d64ee:	f1a3 030b 	sub.w	r3, r3, #11
   d64f2:	f1b3 0220 	subs.w	r2, r3, #32
   d64f6:	da0c      	bge.n	d6512 <__adddf3+0x16e>
   d64f8:	320c      	adds	r2, #12
   d64fa:	dd08      	ble.n	d650e <__adddf3+0x16a>
   d64fc:	f102 0c14 	add.w	ip, r2, #20
   d6500:	f1c2 020c 	rsb	r2, r2, #12
   d6504:	fa01 f00c 	lsl.w	r0, r1, ip
   d6508:	fa21 f102 	lsr.w	r1, r1, r2
   d650c:	e00c      	b.n	d6528 <__adddf3+0x184>
   d650e:	f102 0214 	add.w	r2, r2, #20
   d6512:	bfd8      	it	le
   d6514:	f1c2 0c20 	rsble	ip, r2, #32
   d6518:	fa01 f102 	lsl.w	r1, r1, r2
   d651c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6520:	bfdc      	itt	le
   d6522:	ea41 010c 	orrle.w	r1, r1, ip
   d6526:	4090      	lslle	r0, r2
   d6528:	1ae4      	subs	r4, r4, r3
   d652a:	bfa2      	ittt	ge
   d652c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6530:	4329      	orrge	r1, r5
   d6532:	bd30      	popge	{r4, r5, pc}
   d6534:	ea6f 0404 	mvn.w	r4, r4
   d6538:	3c1f      	subs	r4, #31
   d653a:	da1c      	bge.n	d6576 <__adddf3+0x1d2>
   d653c:	340c      	adds	r4, #12
   d653e:	dc0e      	bgt.n	d655e <__adddf3+0x1ba>
   d6540:	f104 0414 	add.w	r4, r4, #20
   d6544:	f1c4 0220 	rsb	r2, r4, #32
   d6548:	fa20 f004 	lsr.w	r0, r0, r4
   d654c:	fa01 f302 	lsl.w	r3, r1, r2
   d6550:	ea40 0003 	orr.w	r0, r0, r3
   d6554:	fa21 f304 	lsr.w	r3, r1, r4
   d6558:	ea45 0103 	orr.w	r1, r5, r3
   d655c:	bd30      	pop	{r4, r5, pc}
   d655e:	f1c4 040c 	rsb	r4, r4, #12
   d6562:	f1c4 0220 	rsb	r2, r4, #32
   d6566:	fa20 f002 	lsr.w	r0, r0, r2
   d656a:	fa01 f304 	lsl.w	r3, r1, r4
   d656e:	ea40 0003 	orr.w	r0, r0, r3
   d6572:	4629      	mov	r1, r5
   d6574:	bd30      	pop	{r4, r5, pc}
   d6576:	fa21 f004 	lsr.w	r0, r1, r4
   d657a:	4629      	mov	r1, r5
   d657c:	bd30      	pop	{r4, r5, pc}
   d657e:	f094 0f00 	teq	r4, #0
   d6582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6586:	bf06      	itte	eq
   d6588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d658c:	3401      	addeq	r4, #1
   d658e:	3d01      	subne	r5, #1
   d6590:	e74e      	b.n	d6430 <__adddf3+0x8c>
   d6592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6596:	bf18      	it	ne
   d6598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d659c:	d029      	beq.n	d65f2 <__adddf3+0x24e>
   d659e:	ea94 0f05 	teq	r4, r5
   d65a2:	bf08      	it	eq
   d65a4:	ea90 0f02 	teqeq	r0, r2
   d65a8:	d005      	beq.n	d65b6 <__adddf3+0x212>
   d65aa:	ea54 0c00 	orrs.w	ip, r4, r0
   d65ae:	bf04      	itt	eq
   d65b0:	4619      	moveq	r1, r3
   d65b2:	4610      	moveq	r0, r2
   d65b4:	bd30      	pop	{r4, r5, pc}
   d65b6:	ea91 0f03 	teq	r1, r3
   d65ba:	bf1e      	ittt	ne
   d65bc:	2100      	movne	r1, #0
   d65be:	2000      	movne	r0, #0
   d65c0:	bd30      	popne	{r4, r5, pc}
   d65c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d65c6:	d105      	bne.n	d65d4 <__adddf3+0x230>
   d65c8:	0040      	lsls	r0, r0, #1
   d65ca:	4149      	adcs	r1, r1
   d65cc:	bf28      	it	cs
   d65ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d65d2:	bd30      	pop	{r4, r5, pc}
   d65d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d65d8:	bf3c      	itt	cc
   d65da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d65de:	bd30      	popcc	{r4, r5, pc}
   d65e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d65e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d65ec:	f04f 0000 	mov.w	r0, #0
   d65f0:	bd30      	pop	{r4, r5, pc}
   d65f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d65f6:	bf1a      	itte	ne
   d65f8:	4619      	movne	r1, r3
   d65fa:	4610      	movne	r0, r2
   d65fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6600:	bf1c      	itt	ne
   d6602:	460b      	movne	r3, r1
   d6604:	4602      	movne	r2, r0
   d6606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d660a:	bf06      	itte	eq
   d660c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6610:	ea91 0f03 	teqeq	r1, r3
   d6614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6618:	bd30      	pop	{r4, r5, pc}
   d661a:	bf00      	nop

000d661c <__aeabi_ui2d>:
   d661c:	f090 0f00 	teq	r0, #0
   d6620:	bf04      	itt	eq
   d6622:	2100      	moveq	r1, #0
   d6624:	4770      	bxeq	lr
   d6626:	b530      	push	{r4, r5, lr}
   d6628:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d662c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6630:	f04f 0500 	mov.w	r5, #0
   d6634:	f04f 0100 	mov.w	r1, #0
   d6638:	e750      	b.n	d64dc <__adddf3+0x138>
   d663a:	bf00      	nop

000d663c <__aeabi_i2d>:
   d663c:	f090 0f00 	teq	r0, #0
   d6640:	bf04      	itt	eq
   d6642:	2100      	moveq	r1, #0
   d6644:	4770      	bxeq	lr
   d6646:	b530      	push	{r4, r5, lr}
   d6648:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d664c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6654:	bf48      	it	mi
   d6656:	4240      	negmi	r0, r0
   d6658:	f04f 0100 	mov.w	r1, #0
   d665c:	e73e      	b.n	d64dc <__adddf3+0x138>
   d665e:	bf00      	nop

000d6660 <__aeabi_f2d>:
   d6660:	0042      	lsls	r2, r0, #1
   d6662:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6666:	ea4f 0131 	mov.w	r1, r1, rrx
   d666a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d666e:	bf1f      	itttt	ne
   d6670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d667c:	4770      	bxne	lr
   d667e:	f092 0f00 	teq	r2, #0
   d6682:	bf14      	ite	ne
   d6684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6688:	4770      	bxeq	lr
   d668a:	b530      	push	{r4, r5, lr}
   d668c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6698:	e720      	b.n	d64dc <__adddf3+0x138>
   d669a:	bf00      	nop

000d669c <__aeabi_ul2d>:
   d669c:	ea50 0201 	orrs.w	r2, r0, r1
   d66a0:	bf08      	it	eq
   d66a2:	4770      	bxeq	lr
   d66a4:	b530      	push	{r4, r5, lr}
   d66a6:	f04f 0500 	mov.w	r5, #0
   d66aa:	e00a      	b.n	d66c2 <__aeabi_l2d+0x16>

000d66ac <__aeabi_l2d>:
   d66ac:	ea50 0201 	orrs.w	r2, r0, r1
   d66b0:	bf08      	it	eq
   d66b2:	4770      	bxeq	lr
   d66b4:	b530      	push	{r4, r5, lr}
   d66b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d66ba:	d502      	bpl.n	d66c2 <__aeabi_l2d+0x16>
   d66bc:	4240      	negs	r0, r0
   d66be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d66c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d66c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d66ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d66ce:	f43f aedc 	beq.w	d648a <__adddf3+0xe6>
   d66d2:	f04f 0203 	mov.w	r2, #3
   d66d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d66da:	bf18      	it	ne
   d66dc:	3203      	addne	r2, #3
   d66de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d66e2:	bf18      	it	ne
   d66e4:	3203      	addne	r2, #3
   d66e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d66ea:	f1c2 0320 	rsb	r3, r2, #32
   d66ee:	fa00 fc03 	lsl.w	ip, r0, r3
   d66f2:	fa20 f002 	lsr.w	r0, r0, r2
   d66f6:	fa01 fe03 	lsl.w	lr, r1, r3
   d66fa:	ea40 000e 	orr.w	r0, r0, lr
   d66fe:	fa21 f102 	lsr.w	r1, r1, r2
   d6702:	4414      	add	r4, r2
   d6704:	e6c1      	b.n	d648a <__adddf3+0xe6>
   d6706:	bf00      	nop

000d6708 <__aeabi_dmul>:
   d6708:	b570      	push	{r4, r5, r6, lr}
   d670a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d670e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6716:	bf1d      	ittte	ne
   d6718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d671c:	ea94 0f0c 	teqne	r4, ip
   d6720:	ea95 0f0c 	teqne	r5, ip
   d6724:	f000 f8de 	bleq	d68e4 <__aeabi_dmul+0x1dc>
   d6728:	442c      	add	r4, r5
   d672a:	ea81 0603 	eor.w	r6, r1, r3
   d672e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d673a:	bf18      	it	ne
   d673c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6748:	d038      	beq.n	d67bc <__aeabi_dmul+0xb4>
   d674a:	fba0 ce02 	umull	ip, lr, r0, r2
   d674e:	f04f 0500 	mov.w	r5, #0
   d6752:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d675a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d675e:	f04f 0600 	mov.w	r6, #0
   d6762:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6766:	f09c 0f00 	teq	ip, #0
   d676a:	bf18      	it	ne
   d676c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d677c:	d204      	bcs.n	d6788 <__aeabi_dmul+0x80>
   d677e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6782:	416d      	adcs	r5, r5
   d6784:	eb46 0606 	adc.w	r6, r6, r6
   d6788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d678c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d679c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d67a0:	bf88      	it	hi
   d67a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d67a6:	d81e      	bhi.n	d67e6 <__aeabi_dmul+0xde>
   d67a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d67ac:	bf08      	it	eq
   d67ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d67b2:	f150 0000 	adcs.w	r0, r0, #0
   d67b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67ba:	bd70      	pop	{r4, r5, r6, pc}
   d67bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d67c0:	ea46 0101 	orr.w	r1, r6, r1
   d67c4:	ea40 0002 	orr.w	r0, r0, r2
   d67c8:	ea81 0103 	eor.w	r1, r1, r3
   d67cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d67d0:	bfc2      	ittt	gt
   d67d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d67d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d67da:	bd70      	popgt	{r4, r5, r6, pc}
   d67dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d67e0:	f04f 0e00 	mov.w	lr, #0
   d67e4:	3c01      	subs	r4, #1
   d67e6:	f300 80ab 	bgt.w	d6940 <__aeabi_dmul+0x238>
   d67ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d67ee:	bfde      	ittt	le
   d67f0:	2000      	movle	r0, #0
   d67f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d67f6:	bd70      	pople	{r4, r5, r6, pc}
   d67f8:	f1c4 0400 	rsb	r4, r4, #0
   d67fc:	3c20      	subs	r4, #32
   d67fe:	da35      	bge.n	d686c <__aeabi_dmul+0x164>
   d6800:	340c      	adds	r4, #12
   d6802:	dc1b      	bgt.n	d683c <__aeabi_dmul+0x134>
   d6804:	f104 0414 	add.w	r4, r4, #20
   d6808:	f1c4 0520 	rsb	r5, r4, #32
   d680c:	fa00 f305 	lsl.w	r3, r0, r5
   d6810:	fa20 f004 	lsr.w	r0, r0, r4
   d6814:	fa01 f205 	lsl.w	r2, r1, r5
   d6818:	ea40 0002 	orr.w	r0, r0, r2
   d681c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6828:	fa21 f604 	lsr.w	r6, r1, r4
   d682c:	eb42 0106 	adc.w	r1, r2, r6
   d6830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6834:	bf08      	it	eq
   d6836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d683a:	bd70      	pop	{r4, r5, r6, pc}
   d683c:	f1c4 040c 	rsb	r4, r4, #12
   d6840:	f1c4 0520 	rsb	r5, r4, #32
   d6844:	fa00 f304 	lsl.w	r3, r0, r4
   d6848:	fa20 f005 	lsr.w	r0, r0, r5
   d684c:	fa01 f204 	lsl.w	r2, r1, r4
   d6850:	ea40 0002 	orr.w	r0, r0, r2
   d6854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d685c:	f141 0100 	adc.w	r1, r1, #0
   d6860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6864:	bf08      	it	eq
   d6866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d686a:	bd70      	pop	{r4, r5, r6, pc}
   d686c:	f1c4 0520 	rsb	r5, r4, #32
   d6870:	fa00 f205 	lsl.w	r2, r0, r5
   d6874:	ea4e 0e02 	orr.w	lr, lr, r2
   d6878:	fa20 f304 	lsr.w	r3, r0, r4
   d687c:	fa01 f205 	lsl.w	r2, r1, r5
   d6880:	ea43 0302 	orr.w	r3, r3, r2
   d6884:	fa21 f004 	lsr.w	r0, r1, r4
   d6888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d688c:	fa21 f204 	lsr.w	r2, r1, r4
   d6890:	ea20 0002 	bic.w	r0, r0, r2
   d6894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d689c:	bf08      	it	eq
   d689e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d68a2:	bd70      	pop	{r4, r5, r6, pc}
   d68a4:	f094 0f00 	teq	r4, #0
   d68a8:	d10f      	bne.n	d68ca <__aeabi_dmul+0x1c2>
   d68aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d68ae:	0040      	lsls	r0, r0, #1
   d68b0:	eb41 0101 	adc.w	r1, r1, r1
   d68b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68b8:	bf08      	it	eq
   d68ba:	3c01      	subeq	r4, #1
   d68bc:	d0f7      	beq.n	d68ae <__aeabi_dmul+0x1a6>
   d68be:	ea41 0106 	orr.w	r1, r1, r6
   d68c2:	f095 0f00 	teq	r5, #0
   d68c6:	bf18      	it	ne
   d68c8:	4770      	bxne	lr
   d68ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d68ce:	0052      	lsls	r2, r2, #1
   d68d0:	eb43 0303 	adc.w	r3, r3, r3
   d68d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d68d8:	bf08      	it	eq
   d68da:	3d01      	subeq	r5, #1
   d68dc:	d0f7      	beq.n	d68ce <__aeabi_dmul+0x1c6>
   d68de:	ea43 0306 	orr.w	r3, r3, r6
   d68e2:	4770      	bx	lr
   d68e4:	ea94 0f0c 	teq	r4, ip
   d68e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d68ec:	bf18      	it	ne
   d68ee:	ea95 0f0c 	teqne	r5, ip
   d68f2:	d00c      	beq.n	d690e <__aeabi_dmul+0x206>
   d68f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d68f8:	bf18      	it	ne
   d68fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d68fe:	d1d1      	bne.n	d68a4 <__aeabi_dmul+0x19c>
   d6900:	ea81 0103 	eor.w	r1, r1, r3
   d6904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6908:	f04f 0000 	mov.w	r0, #0
   d690c:	bd70      	pop	{r4, r5, r6, pc}
   d690e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6912:	bf06      	itte	eq
   d6914:	4610      	moveq	r0, r2
   d6916:	4619      	moveq	r1, r3
   d6918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d691c:	d019      	beq.n	d6952 <__aeabi_dmul+0x24a>
   d691e:	ea94 0f0c 	teq	r4, ip
   d6922:	d102      	bne.n	d692a <__aeabi_dmul+0x222>
   d6924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6928:	d113      	bne.n	d6952 <__aeabi_dmul+0x24a>
   d692a:	ea95 0f0c 	teq	r5, ip
   d692e:	d105      	bne.n	d693c <__aeabi_dmul+0x234>
   d6930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6934:	bf1c      	itt	ne
   d6936:	4610      	movne	r0, r2
   d6938:	4619      	movne	r1, r3
   d693a:	d10a      	bne.n	d6952 <__aeabi_dmul+0x24a>
   d693c:	ea81 0103 	eor.w	r1, r1, r3
   d6940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d694c:	f04f 0000 	mov.w	r0, #0
   d6950:	bd70      	pop	{r4, r5, r6, pc}
   d6952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d695a:	bd70      	pop	{r4, r5, r6, pc}

000d695c <__aeabi_ddiv>:
   d695c:	b570      	push	{r4, r5, r6, lr}
   d695e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d696a:	bf1d      	ittte	ne
   d696c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6970:	ea94 0f0c 	teqne	r4, ip
   d6974:	ea95 0f0c 	teqne	r5, ip
   d6978:	f000 f8a7 	bleq	d6aca <__aeabi_ddiv+0x16e>
   d697c:	eba4 0405 	sub.w	r4, r4, r5
   d6980:	ea81 0e03 	eor.w	lr, r1, r3
   d6984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6988:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d698c:	f000 8088 	beq.w	d6aa0 <__aeabi_ddiv+0x144>
   d6990:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d699c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d69a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d69a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d69a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d69ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d69b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d69b4:	429d      	cmp	r5, r3
   d69b6:	bf08      	it	eq
   d69b8:	4296      	cmpeq	r6, r2
   d69ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d69be:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d69c2:	d202      	bcs.n	d69ca <__aeabi_ddiv+0x6e>
   d69c4:	085b      	lsrs	r3, r3, #1
   d69c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d69ca:	1ab6      	subs	r6, r6, r2
   d69cc:	eb65 0503 	sbc.w	r5, r5, r3
   d69d0:	085b      	lsrs	r3, r3, #1
   d69d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d69d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d69da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d69de:	ebb6 0e02 	subs.w	lr, r6, r2
   d69e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69e6:	bf22      	ittt	cs
   d69e8:	1ab6      	subcs	r6, r6, r2
   d69ea:	4675      	movcs	r5, lr
   d69ec:	ea40 000c 	orrcs.w	r0, r0, ip
   d69f0:	085b      	lsrs	r3, r3, #1
   d69f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d69f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d69fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69fe:	bf22      	ittt	cs
   d6a00:	1ab6      	subcs	r6, r6, r2
   d6a02:	4675      	movcs	r5, lr
   d6a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6a08:	085b      	lsrs	r3, r3, #1
   d6a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a16:	bf22      	ittt	cs
   d6a18:	1ab6      	subcs	r6, r6, r2
   d6a1a:	4675      	movcs	r5, lr
   d6a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6a20:	085b      	lsrs	r3, r3, #1
   d6a22:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a26:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a2e:	bf22      	ittt	cs
   d6a30:	1ab6      	subcs	r6, r6, r2
   d6a32:	4675      	movcs	r5, lr
   d6a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6a38:	ea55 0e06 	orrs.w	lr, r5, r6
   d6a3c:	d018      	beq.n	d6a70 <__aeabi_ddiv+0x114>
   d6a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6a5a:	d1c0      	bne.n	d69de <__aeabi_ddiv+0x82>
   d6a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a60:	d10b      	bne.n	d6a7a <__aeabi_ddiv+0x11e>
   d6a62:	ea41 0100 	orr.w	r1, r1, r0
   d6a66:	f04f 0000 	mov.w	r0, #0
   d6a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6a6e:	e7b6      	b.n	d69de <__aeabi_ddiv+0x82>
   d6a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a74:	bf04      	itt	eq
   d6a76:	4301      	orreq	r1, r0
   d6a78:	2000      	moveq	r0, #0
   d6a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a7e:	bf88      	it	hi
   d6a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a84:	f63f aeaf 	bhi.w	d67e6 <__aeabi_dmul+0xde>
   d6a88:	ebb5 0c03 	subs.w	ip, r5, r3
   d6a8c:	bf04      	itt	eq
   d6a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a96:	f150 0000 	adcs.w	r0, r0, #0
   d6a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a9e:	bd70      	pop	{r4, r5, r6, pc}
   d6aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6aac:	bfc2      	ittt	gt
   d6aae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ab6:	bd70      	popgt	{r4, r5, r6, pc}
   d6ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6abc:	f04f 0e00 	mov.w	lr, #0
   d6ac0:	3c01      	subs	r4, #1
   d6ac2:	e690      	b.n	d67e6 <__aeabi_dmul+0xde>
   d6ac4:	ea45 0e06 	orr.w	lr, r5, r6
   d6ac8:	e68d      	b.n	d67e6 <__aeabi_dmul+0xde>
   d6aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ace:	ea94 0f0c 	teq	r4, ip
   d6ad2:	bf08      	it	eq
   d6ad4:	ea95 0f0c 	teqeq	r5, ip
   d6ad8:	f43f af3b 	beq.w	d6952 <__aeabi_dmul+0x24a>
   d6adc:	ea94 0f0c 	teq	r4, ip
   d6ae0:	d10a      	bne.n	d6af8 <__aeabi_ddiv+0x19c>
   d6ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6ae6:	f47f af34 	bne.w	d6952 <__aeabi_dmul+0x24a>
   d6aea:	ea95 0f0c 	teq	r5, ip
   d6aee:	f47f af25 	bne.w	d693c <__aeabi_dmul+0x234>
   d6af2:	4610      	mov	r0, r2
   d6af4:	4619      	mov	r1, r3
   d6af6:	e72c      	b.n	d6952 <__aeabi_dmul+0x24a>
   d6af8:	ea95 0f0c 	teq	r5, ip
   d6afc:	d106      	bne.n	d6b0c <__aeabi_ddiv+0x1b0>
   d6afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b02:	f43f aefd 	beq.w	d6900 <__aeabi_dmul+0x1f8>
   d6b06:	4610      	mov	r0, r2
   d6b08:	4619      	mov	r1, r3
   d6b0a:	e722      	b.n	d6952 <__aeabi_dmul+0x24a>
   d6b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b10:	bf18      	it	ne
   d6b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b16:	f47f aec5 	bne.w	d68a4 <__aeabi_dmul+0x19c>
   d6b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6b1e:	f47f af0d 	bne.w	d693c <__aeabi_dmul+0x234>
   d6b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6b26:	f47f aeeb 	bne.w	d6900 <__aeabi_dmul+0x1f8>
   d6b2a:	e712      	b.n	d6952 <__aeabi_dmul+0x24a>

000d6b2c <__gedf2>:
   d6b2c:	f04f 3cff 	mov.w	ip, #4294967295
   d6b30:	e006      	b.n	d6b40 <__cmpdf2+0x4>
   d6b32:	bf00      	nop

000d6b34 <__ledf2>:
   d6b34:	f04f 0c01 	mov.w	ip, #1
   d6b38:	e002      	b.n	d6b40 <__cmpdf2+0x4>
   d6b3a:	bf00      	nop

000d6b3c <__cmpdf2>:
   d6b3c:	f04f 0c01 	mov.w	ip, #1
   d6b40:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b50:	bf18      	it	ne
   d6b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6b56:	d01b      	beq.n	d6b90 <__cmpdf2+0x54>
   d6b58:	b001      	add	sp, #4
   d6b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6b5e:	bf0c      	ite	eq
   d6b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6b64:	ea91 0f03 	teqne	r1, r3
   d6b68:	bf02      	ittt	eq
   d6b6a:	ea90 0f02 	teqeq	r0, r2
   d6b6e:	2000      	moveq	r0, #0
   d6b70:	4770      	bxeq	lr
   d6b72:	f110 0f00 	cmn.w	r0, #0
   d6b76:	ea91 0f03 	teq	r1, r3
   d6b7a:	bf58      	it	pl
   d6b7c:	4299      	cmppl	r1, r3
   d6b7e:	bf08      	it	eq
   d6b80:	4290      	cmpeq	r0, r2
   d6b82:	bf2c      	ite	cs
   d6b84:	17d8      	asrcs	r0, r3, #31
   d6b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6b8a:	f040 0001 	orr.w	r0, r0, #1
   d6b8e:	4770      	bx	lr
   d6b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b98:	d102      	bne.n	d6ba0 <__cmpdf2+0x64>
   d6b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6b9e:	d107      	bne.n	d6bb0 <__cmpdf2+0x74>
   d6ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ba8:	d1d6      	bne.n	d6b58 <__cmpdf2+0x1c>
   d6baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6bae:	d0d3      	beq.n	d6b58 <__cmpdf2+0x1c>
   d6bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6bb4:	4770      	bx	lr
   d6bb6:	bf00      	nop

000d6bb8 <__aeabi_cdrcmple>:
   d6bb8:	4684      	mov	ip, r0
   d6bba:	4610      	mov	r0, r2
   d6bbc:	4662      	mov	r2, ip
   d6bbe:	468c      	mov	ip, r1
   d6bc0:	4619      	mov	r1, r3
   d6bc2:	4663      	mov	r3, ip
   d6bc4:	e000      	b.n	d6bc8 <__aeabi_cdcmpeq>
   d6bc6:	bf00      	nop

000d6bc8 <__aeabi_cdcmpeq>:
   d6bc8:	b501      	push	{r0, lr}
   d6bca:	f7ff ffb7 	bl	d6b3c <__cmpdf2>
   d6bce:	2800      	cmp	r0, #0
   d6bd0:	bf48      	it	mi
   d6bd2:	f110 0f00 	cmnmi.w	r0, #0
   d6bd6:	bd01      	pop	{r0, pc}

000d6bd8 <__aeabi_dcmpeq>:
   d6bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6bdc:	f7ff fff4 	bl	d6bc8 <__aeabi_cdcmpeq>
   d6be0:	bf0c      	ite	eq
   d6be2:	2001      	moveq	r0, #1
   d6be4:	2000      	movne	r0, #0
   d6be6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bea:	bf00      	nop

000d6bec <__aeabi_dcmplt>:
   d6bec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6bf0:	f7ff ffea 	bl	d6bc8 <__aeabi_cdcmpeq>
   d6bf4:	bf34      	ite	cc
   d6bf6:	2001      	movcc	r0, #1
   d6bf8:	2000      	movcs	r0, #0
   d6bfa:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bfe:	bf00      	nop

000d6c00 <__aeabi_dcmple>:
   d6c00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c04:	f7ff ffe0 	bl	d6bc8 <__aeabi_cdcmpeq>
   d6c08:	bf94      	ite	ls
   d6c0a:	2001      	movls	r0, #1
   d6c0c:	2000      	movhi	r0, #0
   d6c0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c12:	bf00      	nop

000d6c14 <__aeabi_dcmpge>:
   d6c14:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c18:	f7ff ffce 	bl	d6bb8 <__aeabi_cdrcmple>
   d6c1c:	bf94      	ite	ls
   d6c1e:	2001      	movls	r0, #1
   d6c20:	2000      	movhi	r0, #0
   d6c22:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c26:	bf00      	nop

000d6c28 <__aeabi_dcmpgt>:
   d6c28:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c2c:	f7ff ffc4 	bl	d6bb8 <__aeabi_cdrcmple>
   d6c30:	bf34      	ite	cc
   d6c32:	2001      	movcc	r0, #1
   d6c34:	2000      	movcs	r0, #0
   d6c36:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c3a:	bf00      	nop

000d6c3c <__aeabi_dcmpun>:
   d6c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c44:	d102      	bne.n	d6c4c <__aeabi_dcmpun+0x10>
   d6c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6c4a:	d10a      	bne.n	d6c62 <__aeabi_dcmpun+0x26>
   d6c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c54:	d102      	bne.n	d6c5c <__aeabi_dcmpun+0x20>
   d6c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6c5a:	d102      	bne.n	d6c62 <__aeabi_dcmpun+0x26>
   d6c5c:	f04f 0000 	mov.w	r0, #0
   d6c60:	4770      	bx	lr
   d6c62:	f04f 0001 	mov.w	r0, #1
   d6c66:	4770      	bx	lr

000d6c68 <__aeabi_d2iz>:
   d6c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6c70:	d215      	bcs.n	d6c9e <__aeabi_d2iz+0x36>
   d6c72:	d511      	bpl.n	d6c98 <__aeabi_d2iz+0x30>
   d6c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6c7c:	d912      	bls.n	d6ca4 <__aeabi_d2iz+0x3c>
   d6c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c8e:	fa23 f002 	lsr.w	r0, r3, r2
   d6c92:	bf18      	it	ne
   d6c94:	4240      	negne	r0, r0
   d6c96:	4770      	bx	lr
   d6c98:	f04f 0000 	mov.w	r0, #0
   d6c9c:	4770      	bx	lr
   d6c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6ca2:	d105      	bne.n	d6cb0 <__aeabi_d2iz+0x48>
   d6ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6ca8:	bf08      	it	eq
   d6caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6cae:	4770      	bx	lr
   d6cb0:	f04f 0000 	mov.w	r0, #0
   d6cb4:	4770      	bx	lr
   d6cb6:	bf00      	nop

000d6cb8 <__aeabi_d2uiz>:
   d6cb8:	004a      	lsls	r2, r1, #1
   d6cba:	d211      	bcs.n	d6ce0 <__aeabi_d2uiz+0x28>
   d6cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6cc0:	d211      	bcs.n	d6ce6 <__aeabi_d2uiz+0x2e>
   d6cc2:	d50d      	bpl.n	d6ce0 <__aeabi_d2uiz+0x28>
   d6cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6ccc:	d40e      	bmi.n	d6cec <__aeabi_d2uiz+0x34>
   d6cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6cda:	fa23 f002 	lsr.w	r0, r3, r2
   d6cde:	4770      	bx	lr
   d6ce0:	f04f 0000 	mov.w	r0, #0
   d6ce4:	4770      	bx	lr
   d6ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6cea:	d102      	bne.n	d6cf2 <__aeabi_d2uiz+0x3a>
   d6cec:	f04f 30ff 	mov.w	r0, #4294967295
   d6cf0:	4770      	bx	lr
   d6cf2:	f04f 0000 	mov.w	r0, #0
   d6cf6:	4770      	bx	lr

000d6cf8 <__aeabi_d2f>:
   d6cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6d00:	bf24      	itt	cs
   d6d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6d0a:	d90d      	bls.n	d6d28 <__aeabi_d2f+0x30>
   d6d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6d20:	bf08      	it	eq
   d6d22:	f020 0001 	biceq.w	r0, r0, #1
   d6d26:	4770      	bx	lr
   d6d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6d2c:	d121      	bne.n	d6d72 <__aeabi_d2f+0x7a>
   d6d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6d32:	bfbc      	itt	lt
   d6d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6d38:	4770      	bxlt	lr
   d6d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6d42:	f1c2 0218 	rsb	r2, r2, #24
   d6d46:	f1c2 0c20 	rsb	ip, r2, #32
   d6d4a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6d4e:	fa20 f002 	lsr.w	r0, r0, r2
   d6d52:	bf18      	it	ne
   d6d54:	f040 0001 	orrne.w	r0, r0, #1
   d6d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6d60:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6d64:	ea40 000c 	orr.w	r0, r0, ip
   d6d68:	fa23 f302 	lsr.w	r3, r3, r2
   d6d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6d70:	e7cc      	b.n	d6d0c <__aeabi_d2f+0x14>
   d6d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6d76:	d107      	bne.n	d6d88 <__aeabi_d2f+0x90>
   d6d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6d7c:	bf1e      	ittt	ne
   d6d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6d86:	4770      	bxne	lr
   d6d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6d94:	4770      	bx	lr
   d6d96:	bf00      	nop

000d6d98 <atof>:
   d6d98:	2100      	movs	r1, #0
   d6d9a:	f000 beb9 	b.w	d7b10 <strtod>

000d6d9e <atol>:
   d6d9e:	220a      	movs	r2, #10
   d6da0:	2100      	movs	r1, #0
   d6da2:	f000 bf43 	b.w	d7c2c <strtol>
	...

000d6da8 <__cxa_atexit>:
   d6da8:	b510      	push	{r4, lr}
   d6daa:	4c05      	ldr	r4, [pc, #20]	; (d6dc0 <__cxa_atexit+0x18>)
   d6dac:	4613      	mov	r3, r2
   d6dae:	b12c      	cbz	r4, d6dbc <__cxa_atexit+0x14>
   d6db0:	460a      	mov	r2, r1
   d6db2:	4601      	mov	r1, r0
   d6db4:	2002      	movs	r0, #2
   d6db6:	f3af 8000 	nop.w
   d6dba:	bd10      	pop	{r4, pc}
   d6dbc:	4620      	mov	r0, r4
   d6dbe:	bd10      	pop	{r4, pc}
   d6dc0:	00000000 	.word	0x00000000

000d6dc4 <_localeconv_r>:
   d6dc4:	4800      	ldr	r0, [pc, #0]	; (d6dc8 <_localeconv_r+0x4>)
   d6dc6:	4770      	bx	lr
   d6dc8:	2003e2a4 	.word	0x2003e2a4

000d6dcc <memcpy>:
   d6dcc:	b510      	push	{r4, lr}
   d6dce:	1e43      	subs	r3, r0, #1
   d6dd0:	440a      	add	r2, r1
   d6dd2:	4291      	cmp	r1, r2
   d6dd4:	d004      	beq.n	d6de0 <memcpy+0x14>
   d6dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6dda:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6dde:	e7f8      	b.n	d6dd2 <memcpy+0x6>
   d6de0:	bd10      	pop	{r4, pc}

000d6de2 <memset>:
   d6de2:	4402      	add	r2, r0
   d6de4:	4603      	mov	r3, r0
   d6de6:	4293      	cmp	r3, r2
   d6de8:	d002      	beq.n	d6df0 <memset+0xe>
   d6dea:	f803 1b01 	strb.w	r1, [r3], #1
   d6dee:	e7fa      	b.n	d6de6 <memset+0x4>
   d6df0:	4770      	bx	lr
	...

000d6df4 <srand>:
   d6df4:	b538      	push	{r3, r4, r5, lr}
   d6df6:	4b12      	ldr	r3, [pc, #72]	; (d6e40 <srand+0x4c>)
   d6df8:	681c      	ldr	r4, [r3, #0]
   d6dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6dfc:	4605      	mov	r5, r0
   d6dfe:	b9d3      	cbnz	r3, d6e36 <srand+0x42>
   d6e00:	2018      	movs	r0, #24
   d6e02:	f7fe fa4b 	bl	d529c <malloc>
   d6e06:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e0a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e0c:	8003      	strh	r3, [r0, #0]
   d6e0e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e12:	8043      	strh	r3, [r0, #2]
   d6e14:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e18:	8083      	strh	r3, [r0, #4]
   d6e1a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e1e:	80c3      	strh	r3, [r0, #6]
   d6e20:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e24:	8103      	strh	r3, [r0, #8]
   d6e26:	2305      	movs	r3, #5
   d6e28:	8143      	strh	r3, [r0, #10]
   d6e2a:	230b      	movs	r3, #11
   d6e2c:	8183      	strh	r3, [r0, #12]
   d6e2e:	2201      	movs	r2, #1
   d6e30:	2300      	movs	r3, #0
   d6e32:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e38:	2200      	movs	r2, #0
   d6e3a:	611d      	str	r5, [r3, #16]
   d6e3c:	615a      	str	r2, [r3, #20]
   d6e3e:	bd38      	pop	{r3, r4, r5, pc}
   d6e40:	2003e2a0 	.word	0x2003e2a0

000d6e44 <strcmp>:
   d6e44:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6e48:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6e4c:	2a01      	cmp	r2, #1
   d6e4e:	bf28      	it	cs
   d6e50:	429a      	cmpcs	r2, r3
   d6e52:	d0f7      	beq.n	d6e44 <strcmp>
   d6e54:	1ad0      	subs	r0, r2, r3
   d6e56:	4770      	bx	lr

000d6e58 <strcpy>:
   d6e58:	4603      	mov	r3, r0
   d6e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6e5e:	f803 2b01 	strb.w	r2, [r3], #1
   d6e62:	2a00      	cmp	r2, #0
   d6e64:	d1f9      	bne.n	d6e5a <strcpy+0x2>
   d6e66:	4770      	bx	lr

000d6e68 <strlen>:
   d6e68:	4603      	mov	r3, r0
   d6e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e6e:	2a00      	cmp	r2, #0
   d6e70:	d1fb      	bne.n	d6e6a <strlen+0x2>
   d6e72:	1a18      	subs	r0, r3, r0
   d6e74:	3801      	subs	r0, #1
   d6e76:	4770      	bx	lr

000d6e78 <strncmp>:
   d6e78:	b530      	push	{r4, r5, lr}
   d6e7a:	b182      	cbz	r2, d6e9e <strncmp+0x26>
   d6e7c:	1e45      	subs	r5, r0, #1
   d6e7e:	3901      	subs	r1, #1
   d6e80:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6e84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6e88:	42a3      	cmp	r3, r4
   d6e8a:	d106      	bne.n	d6e9a <strncmp+0x22>
   d6e8c:	43ec      	mvns	r4, r5
   d6e8e:	4414      	add	r4, r2
   d6e90:	42e0      	cmn	r0, r4
   d6e92:	d001      	beq.n	d6e98 <strncmp+0x20>
   d6e94:	2b00      	cmp	r3, #0
   d6e96:	d1f3      	bne.n	d6e80 <strncmp+0x8>
   d6e98:	461c      	mov	r4, r3
   d6e9a:	1b18      	subs	r0, r3, r4
   d6e9c:	bd30      	pop	{r4, r5, pc}
   d6e9e:	4610      	mov	r0, r2
   d6ea0:	bd30      	pop	{r4, r5, pc}

000d6ea2 <strstr>:
   d6ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ea4:	7803      	ldrb	r3, [r0, #0]
   d6ea6:	b963      	cbnz	r3, d6ec2 <strstr+0x20>
   d6ea8:	780b      	ldrb	r3, [r1, #0]
   d6eaa:	2b00      	cmp	r3, #0
   d6eac:	bf18      	it	ne
   d6eae:	2000      	movne	r0, #0
   d6eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6eb2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6eb6:	b162      	cbz	r2, d6ed2 <strstr+0x30>
   d6eb8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6ebc:	4297      	cmp	r7, r2
   d6ebe:	4630      	mov	r0, r6
   d6ec0:	d0f7      	beq.n	d6eb2 <strstr+0x10>
   d6ec2:	4603      	mov	r3, r0
   d6ec4:	1c46      	adds	r6, r0, #1
   d6ec6:	7800      	ldrb	r0, [r0, #0]
   d6ec8:	b110      	cbz	r0, d6ed0 <strstr+0x2e>
   d6eca:	1e4d      	subs	r5, r1, #1
   d6ecc:	1e5c      	subs	r4, r3, #1
   d6ece:	e7f0      	b.n	d6eb2 <strstr+0x10>
   d6ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ed2:	4618      	mov	r0, r3
   d6ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ed6 <sulp>:
   d6ed6:	b570      	push	{r4, r5, r6, lr}
   d6ed8:	4604      	mov	r4, r0
   d6eda:	460d      	mov	r5, r1
   d6edc:	ec45 4b10 	vmov	d0, r4, r5
   d6ee0:	4616      	mov	r6, r2
   d6ee2:	f001 fc91 	bl	d8808 <__ulp>
   d6ee6:	ec51 0b10 	vmov	r0, r1, d0
   d6eea:	b17e      	cbz	r6, d6f0c <sulp+0x36>
   d6eec:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6ef0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6ef4:	2b00      	cmp	r3, #0
   d6ef6:	dd09      	ble.n	d6f0c <sulp+0x36>
   d6ef8:	051b      	lsls	r3, r3, #20
   d6efa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d6efe:	2400      	movs	r4, #0
   d6f00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d6f04:	4622      	mov	r2, r4
   d6f06:	462b      	mov	r3, r5
   d6f08:	f7ff fbfe 	bl	d6708 <__aeabi_dmul>
   d6f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6f10 <_strtod_r>:
   d6f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f14:	b09d      	sub	sp, #116	; 0x74
   d6f16:	2300      	movs	r3, #0
   d6f18:	9002      	str	r0, [sp, #8]
   d6f1a:	460c      	mov	r4, r1
   d6f1c:	9213      	str	r2, [sp, #76]	; 0x4c
   d6f1e:	9318      	str	r3, [sp, #96]	; 0x60
   d6f20:	f04f 0a00 	mov.w	sl, #0
   d6f24:	f04f 0b00 	mov.w	fp, #0
   d6f28:	9117      	str	r1, [sp, #92]	; 0x5c
   d6f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6f2c:	781a      	ldrb	r2, [r3, #0]
   d6f2e:	2a0d      	cmp	r2, #13
   d6f30:	d805      	bhi.n	d6f3e <_strtod_r+0x2e>
   d6f32:	2a09      	cmp	r2, #9
   d6f34:	d213      	bcs.n	d6f5e <_strtod_r+0x4e>
   d6f36:	2a00      	cmp	r2, #0
   d6f38:	f000 81ac 	beq.w	d7294 <_strtod_r+0x384>
   d6f3c:	e012      	b.n	d6f64 <_strtod_r+0x54>
   d6f3e:	2a2b      	cmp	r2, #43	; 0x2b
   d6f40:	d004      	beq.n	d6f4c <_strtod_r+0x3c>
   d6f42:	2a2d      	cmp	r2, #45	; 0x2d
   d6f44:	d004      	beq.n	d6f50 <_strtod_r+0x40>
   d6f46:	2a20      	cmp	r2, #32
   d6f48:	d10c      	bne.n	d6f64 <_strtod_r+0x54>
   d6f4a:	e008      	b.n	d6f5e <_strtod_r+0x4e>
   d6f4c:	2200      	movs	r2, #0
   d6f4e:	e000      	b.n	d6f52 <_strtod_r+0x42>
   d6f50:	2201      	movs	r2, #1
   d6f52:	920c      	str	r2, [sp, #48]	; 0x30
   d6f54:	1c5a      	adds	r2, r3, #1
   d6f56:	9217      	str	r2, [sp, #92]	; 0x5c
   d6f58:	785b      	ldrb	r3, [r3, #1]
   d6f5a:	b92b      	cbnz	r3, d6f68 <_strtod_r+0x58>
   d6f5c:	e19a      	b.n	d7294 <_strtod_r+0x384>
   d6f5e:	3301      	adds	r3, #1
   d6f60:	9317      	str	r3, [sp, #92]	; 0x5c
   d6f62:	e7e2      	b.n	d6f2a <_strtod_r+0x1a>
   d6f64:	2300      	movs	r3, #0
   d6f66:	930c      	str	r3, [sp, #48]	; 0x30
   d6f68:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d6f6a:	782b      	ldrb	r3, [r5, #0]
   d6f6c:	2b30      	cmp	r3, #48	; 0x30
   d6f6e:	d15c      	bne.n	d702a <_strtod_r+0x11a>
   d6f70:	786b      	ldrb	r3, [r5, #1]
   d6f72:	2b58      	cmp	r3, #88	; 0x58
   d6f74:	d001      	beq.n	d6f7a <_strtod_r+0x6a>
   d6f76:	2b78      	cmp	r3, #120	; 0x78
   d6f78:	d14c      	bne.n	d7014 <_strtod_r+0x104>
   d6f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	ab18      	add	r3, sp, #96	; 0x60
   d6f80:	9300      	str	r3, [sp, #0]
   d6f82:	4aa9      	ldr	r2, [pc, #676]	; (d7228 <_strtod_r+0x318>)
   d6f84:	9802      	ldr	r0, [sp, #8]
   d6f86:	ab19      	add	r3, sp, #100	; 0x64
   d6f88:	a917      	add	r1, sp, #92	; 0x5c
   d6f8a:	f000 fea4 	bl	d7cd6 <__gethex>
   d6f8e:	f010 0607 	ands.w	r6, r0, #7
   d6f92:	4604      	mov	r4, r0
   d6f94:	f000 8587 	beq.w	d7aa6 <_strtod_r+0xb96>
   d6f98:	2e06      	cmp	r6, #6
   d6f9a:	d105      	bne.n	d6fa8 <_strtod_r+0x98>
   d6f9c:	3501      	adds	r5, #1
   d6f9e:	2300      	movs	r3, #0
   d6fa0:	9517      	str	r5, [sp, #92]	; 0x5c
   d6fa2:	930c      	str	r3, [sp, #48]	; 0x30
   d6fa4:	f000 bd7f 	b.w	d7aa6 <_strtod_r+0xb96>
   d6fa8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d6faa:	b13a      	cbz	r2, d6fbc <_strtod_r+0xac>
   d6fac:	2135      	movs	r1, #53	; 0x35
   d6fae:	a81a      	add	r0, sp, #104	; 0x68
   d6fb0:	f001 fd17 	bl	d89e2 <__copybits>
   d6fb4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6fb6:	9802      	ldr	r0, [sp, #8]
   d6fb8:	f001 f994 	bl	d82e4 <_Bfree>
   d6fbc:	2e06      	cmp	r6, #6
   d6fbe:	d822      	bhi.n	d7006 <_strtod_r+0xf6>
   d6fc0:	e8df f006 	tbb	[pc, r6]
   d6fc4:	18080d04 	.word	0x18080d04
   d6fc8:	0d1d      	.short	0x0d1d
   d6fca:	04          	.byte	0x04
   d6fcb:	00          	.byte	0x00
   d6fcc:	f04f 0b00 	mov.w	fp, #0
   d6fd0:	46da      	mov	sl, fp
   d6fd2:	e018      	b.n	d7006 <_strtod_r+0xf6>
   d6fd4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6fd8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d6fdc:	e013      	b.n	d7006 <_strtod_r+0xf6>
   d6fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d6fe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d6fe2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6fe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d6fea:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d6fee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d6ff2:	e008      	b.n	d7006 <_strtod_r+0xf6>
   d6ff4:	f8df b234 	ldr.w	fp, [pc, #564]	; d722c <_strtod_r+0x31c>
   d6ff8:	f04f 0a00 	mov.w	sl, #0
   d6ffc:	e003      	b.n	d7006 <_strtod_r+0xf6>
   d6ffe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7002:	f04f 3aff 	mov.w	sl, #4294967295
   d7006:	0721      	lsls	r1, r4, #28
   d7008:	f140 854d 	bpl.w	d7aa6 <_strtod_r+0xb96>
   d700c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7010:	f000 bd49 	b.w	d7aa6 <_strtod_r+0xb96>
   d7014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7016:	1c5a      	adds	r2, r3, #1
   d7018:	9217      	str	r2, [sp, #92]	; 0x5c
   d701a:	785b      	ldrb	r3, [r3, #1]
   d701c:	2b30      	cmp	r3, #48	; 0x30
   d701e:	d0f9      	beq.n	d7014 <_strtod_r+0x104>
   d7020:	2b00      	cmp	r3, #0
   d7022:	f000 8540 	beq.w	d7aa6 <_strtod_r+0xb96>
   d7026:	2301      	movs	r3, #1
   d7028:	e000      	b.n	d702c <_strtod_r+0x11c>
   d702a:	2300      	movs	r3, #0
   d702c:	f04f 0800 	mov.w	r8, #0
   d7030:	9306      	str	r3, [sp, #24]
   d7032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7034:	9307      	str	r3, [sp, #28]
   d7036:	f8cd 8014 	str.w	r8, [sp, #20]
   d703a:	f8cd 8010 	str.w	r8, [sp, #16]
   d703e:	220a      	movs	r2, #10
   d7040:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7042:	782e      	ldrb	r6, [r5, #0]
   d7044:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7048:	b2d9      	uxtb	r1, r3
   d704a:	2909      	cmp	r1, #9
   d704c:	d80e      	bhi.n	d706c <_strtod_r+0x15c>
   d704e:	9904      	ldr	r1, [sp, #16]
   d7050:	2908      	cmp	r1, #8
   d7052:	bfdd      	ittte	le
   d7054:	9905      	ldrle	r1, [sp, #20]
   d7056:	fb02 3301 	mlale	r3, r2, r1, r3
   d705a:	9305      	strle	r3, [sp, #20]
   d705c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7060:	9b04      	ldr	r3, [sp, #16]
   d7062:	3501      	adds	r5, #1
   d7064:	3301      	adds	r3, #1
   d7066:	9304      	str	r3, [sp, #16]
   d7068:	9517      	str	r5, [sp, #92]	; 0x5c
   d706a:	e7e9      	b.n	d7040 <_strtod_r+0x130>
   d706c:	9802      	ldr	r0, [sp, #8]
   d706e:	f7ff fea9 	bl	d6dc4 <_localeconv_r>
   d7072:	6807      	ldr	r7, [r0, #0]
   d7074:	9802      	ldr	r0, [sp, #8]
   d7076:	f7ff fea5 	bl	d6dc4 <_localeconv_r>
   d707a:	6800      	ldr	r0, [r0, #0]
   d707c:	f7ff fef4 	bl	d6e68 <strlen>
   d7080:	4639      	mov	r1, r7
   d7082:	4602      	mov	r2, r0
   d7084:	4628      	mov	r0, r5
   d7086:	f7ff fef7 	bl	d6e78 <strncmp>
   d708a:	4607      	mov	r7, r0
   d708c:	b128      	cbz	r0, d709a <_strtod_r+0x18a>
   d708e:	2000      	movs	r0, #0
   d7090:	4633      	mov	r3, r6
   d7092:	9d04      	ldr	r5, [sp, #16]
   d7094:	4602      	mov	r2, r0
   d7096:	4601      	mov	r1, r0
   d7098:	e057      	b.n	d714a <_strtod_r+0x23a>
   d709a:	9802      	ldr	r0, [sp, #8]
   d709c:	f7ff fe92 	bl	d6dc4 <_localeconv_r>
   d70a0:	6800      	ldr	r0, [r0, #0]
   d70a2:	f7ff fee1 	bl	d6e68 <strlen>
   d70a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d70a8:	181a      	adds	r2, r3, r0
   d70aa:	9217      	str	r2, [sp, #92]	; 0x5c
   d70ac:	9a04      	ldr	r2, [sp, #16]
   d70ae:	5c1b      	ldrb	r3, [r3, r0]
   d70b0:	2a00      	cmp	r2, #0
   d70b2:	d142      	bne.n	d713a <_strtod_r+0x22a>
   d70b4:	4610      	mov	r0, r2
   d70b6:	2b30      	cmp	r3, #48	; 0x30
   d70b8:	d105      	bne.n	d70c6 <_strtod_r+0x1b6>
   d70ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d70bc:	1c5a      	adds	r2, r3, #1
   d70be:	9217      	str	r2, [sp, #92]	; 0x5c
   d70c0:	3001      	adds	r0, #1
   d70c2:	785b      	ldrb	r3, [r3, #1]
   d70c4:	e7f7      	b.n	d70b6 <_strtod_r+0x1a6>
   d70c6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d70ca:	2a08      	cmp	r2, #8
   d70cc:	d843      	bhi.n	d7156 <_strtod_r+0x246>
   d70ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d70d0:	9207      	str	r2, [sp, #28]
   d70d2:	4602      	mov	r2, r0
   d70d4:	2000      	movs	r0, #0
   d70d6:	4605      	mov	r5, r0
   d70d8:	3b30      	subs	r3, #48	; 0x30
   d70da:	f100 0101 	add.w	r1, r0, #1
   d70de:	d026      	beq.n	d712e <_strtod_r+0x21e>
   d70e0:	440a      	add	r2, r1
   d70e2:	eb05 0c00 	add.w	ip, r5, r0
   d70e6:	4629      	mov	r1, r5
   d70e8:	260a      	movs	r6, #10
   d70ea:	4561      	cmp	r1, ip
   d70ec:	d00e      	beq.n	d710c <_strtod_r+0x1fc>
   d70ee:	3101      	adds	r1, #1
   d70f0:	f101 3eff 	add.w	lr, r1, #4294967295
   d70f4:	f1be 0f08 	cmp.w	lr, #8
   d70f8:	dc03      	bgt.n	d7102 <_strtod_r+0x1f2>
   d70fa:	9f05      	ldr	r7, [sp, #20]
   d70fc:	4377      	muls	r7, r6
   d70fe:	9705      	str	r7, [sp, #20]
   d7100:	e7f3      	b.n	d70ea <_strtod_r+0x1da>
   d7102:	2910      	cmp	r1, #16
   d7104:	bfd8      	it	le
   d7106:	fb06 f808 	mulle.w	r8, r6, r8
   d710a:	e7ee      	b.n	d70ea <_strtod_r+0x1da>
   d710c:	4428      	add	r0, r5
   d710e:	2808      	cmp	r0, #8
   d7110:	f100 0501 	add.w	r5, r0, #1
   d7114:	dc05      	bgt.n	d7122 <_strtod_r+0x212>
   d7116:	9805      	ldr	r0, [sp, #20]
   d7118:	210a      	movs	r1, #10
   d711a:	fb01 3300 	mla	r3, r1, r0, r3
   d711e:	9305      	str	r3, [sp, #20]
   d7120:	e004      	b.n	d712c <_strtod_r+0x21c>
   d7122:	2d10      	cmp	r5, #16
   d7124:	bfdc      	itt	le
   d7126:	210a      	movle	r1, #10
   d7128:	fb01 3808 	mlale	r8, r1, r8, r3
   d712c:	2100      	movs	r1, #0
   d712e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7130:	1c58      	adds	r0, r3, #1
   d7132:	9017      	str	r0, [sp, #92]	; 0x5c
   d7134:	785b      	ldrb	r3, [r3, #1]
   d7136:	4608      	mov	r0, r1
   d7138:	e002      	b.n	d7140 <_strtod_r+0x230>
   d713a:	9d04      	ldr	r5, [sp, #16]
   d713c:	4638      	mov	r0, r7
   d713e:	463a      	mov	r2, r7
   d7140:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7144:	2909      	cmp	r1, #9
   d7146:	d9c7      	bls.n	d70d8 <_strtod_r+0x1c8>
   d7148:	2101      	movs	r1, #1
   d714a:	2b65      	cmp	r3, #101	; 0x65
   d714c:	d001      	beq.n	d7152 <_strtod_r+0x242>
   d714e:	2b45      	cmp	r3, #69	; 0x45
   d7150:	d151      	bne.n	d71f6 <_strtod_r+0x2e6>
   d7152:	b96d      	cbnz	r5, d7170 <_strtod_r+0x260>
   d7154:	e004      	b.n	d7160 <_strtod_r+0x250>
   d7156:	2b65      	cmp	r3, #101	; 0x65
   d7158:	f040 84b3 	bne.w	d7ac2 <_strtod_r+0xbb2>
   d715c:	2200      	movs	r2, #0
   d715e:	2101      	movs	r1, #1
   d7160:	b928      	cbnz	r0, d716e <_strtod_r+0x25e>
   d7162:	9b06      	ldr	r3, [sp, #24]
   d7164:	2b00      	cmp	r3, #0
   d7166:	f000 8095 	beq.w	d7294 <_strtod_r+0x384>
   d716a:	4605      	mov	r5, r0
   d716c:	e000      	b.n	d7170 <_strtod_r+0x260>
   d716e:	2500      	movs	r5, #0
   d7170:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7172:	1c63      	adds	r3, r4, #1
   d7174:	9317      	str	r3, [sp, #92]	; 0x5c
   d7176:	7863      	ldrb	r3, [r4, #1]
   d7178:	2b2b      	cmp	r3, #43	; 0x2b
   d717a:	d006      	beq.n	d718a <_strtod_r+0x27a>
   d717c:	2b2d      	cmp	r3, #45	; 0x2d
   d717e:	d002      	beq.n	d7186 <_strtod_r+0x276>
   d7180:	2600      	movs	r6, #0
   d7182:	9603      	str	r6, [sp, #12]
   d7184:	e006      	b.n	d7194 <_strtod_r+0x284>
   d7186:	2301      	movs	r3, #1
   d7188:	e000      	b.n	d718c <_strtod_r+0x27c>
   d718a:	2300      	movs	r3, #0
   d718c:	9303      	str	r3, [sp, #12]
   d718e:	1ca3      	adds	r3, r4, #2
   d7190:	9317      	str	r3, [sp, #92]	; 0x5c
   d7192:	78a3      	ldrb	r3, [r4, #2]
   d7194:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7198:	2e09      	cmp	r6, #9
   d719a:	d82b      	bhi.n	d71f4 <_strtod_r+0x2e4>
   d719c:	2b30      	cmp	r3, #48	; 0x30
   d719e:	d104      	bne.n	d71aa <_strtod_r+0x29a>
   d71a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71a2:	1c5e      	adds	r6, r3, #1
   d71a4:	9617      	str	r6, [sp, #92]	; 0x5c
   d71a6:	785b      	ldrb	r3, [r3, #1]
   d71a8:	e7f8      	b.n	d719c <_strtod_r+0x28c>
   d71aa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d71ae:	2e08      	cmp	r6, #8
   d71b0:	d821      	bhi.n	d71f6 <_strtod_r+0x2e6>
   d71b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d71b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71b8:	f04f 0c0a 	mov.w	ip, #10
   d71bc:	461f      	mov	r7, r3
   d71be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71c0:	1c5e      	adds	r6, r3, #1
   d71c2:	9617      	str	r6, [sp, #92]	; 0x5c
   d71c4:	785b      	ldrb	r3, [r3, #1]
   d71c6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d71ca:	f1b9 0f09 	cmp.w	r9, #9
   d71ce:	d804      	bhi.n	d71da <_strtod_r+0x2ca>
   d71d0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d71d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d71d8:	e7f1      	b.n	d71be <_strtod_r+0x2ae>
   d71da:	1bf6      	subs	r6, r6, r7
   d71dc:	2e08      	cmp	r6, #8
   d71de:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d71e2:	dc02      	bgt.n	d71ea <_strtod_r+0x2da>
   d71e4:	45f1      	cmp	r9, lr
   d71e6:	bfa8      	it	ge
   d71e8:	46f1      	movge	r9, lr
   d71ea:	9e03      	ldr	r6, [sp, #12]
   d71ec:	b12e      	cbz	r6, d71fa <_strtod_r+0x2ea>
   d71ee:	f1c9 0900 	rsb	r9, r9, #0
   d71f2:	e002      	b.n	d71fa <_strtod_r+0x2ea>
   d71f4:	9417      	str	r4, [sp, #92]	; 0x5c
   d71f6:	f04f 0900 	mov.w	r9, #0
   d71fa:	2d00      	cmp	r5, #0
   d71fc:	d153      	bne.n	d72a6 <_strtod_r+0x396>
   d71fe:	2800      	cmp	r0, #0
   d7200:	f040 8451 	bne.w	d7aa6 <_strtod_r+0xb96>
   d7204:	9a06      	ldr	r2, [sp, #24]
   d7206:	2a00      	cmp	r2, #0
   d7208:	f040 844d 	bne.w	d7aa6 <_strtod_r+0xb96>
   d720c:	2900      	cmp	r1, #0
   d720e:	d141      	bne.n	d7294 <_strtod_r+0x384>
   d7210:	2b4e      	cmp	r3, #78	; 0x4e
   d7212:	d020      	beq.n	d7256 <_strtod_r+0x346>
   d7214:	dc02      	bgt.n	d721c <_strtod_r+0x30c>
   d7216:	2b49      	cmp	r3, #73	; 0x49
   d7218:	d00a      	beq.n	d7230 <_strtod_r+0x320>
   d721a:	e03b      	b.n	d7294 <_strtod_r+0x384>
   d721c:	2b69      	cmp	r3, #105	; 0x69
   d721e:	d007      	beq.n	d7230 <_strtod_r+0x320>
   d7220:	2b6e      	cmp	r3, #110	; 0x6e
   d7222:	d018      	beq.n	d7256 <_strtod_r+0x346>
   d7224:	e036      	b.n	d7294 <_strtod_r+0x384>
   d7226:	bf00      	nop
   d7228:	000d9170 	.word	0x000d9170
   d722c:	7ff00000 	.word	0x7ff00000
   d7230:	49a8      	ldr	r1, [pc, #672]	; (d74d4 <_strtod_r+0x5c4>)
   d7232:	a817      	add	r0, sp, #92	; 0x5c
   d7234:	f000 ff80 	bl	d8138 <__match>
   d7238:	b360      	cbz	r0, d7294 <_strtod_r+0x384>
   d723a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d723c:	49a6      	ldr	r1, [pc, #664]	; (d74d8 <_strtod_r+0x5c8>)
   d723e:	3b01      	subs	r3, #1
   d7240:	a817      	add	r0, sp, #92	; 0x5c
   d7242:	9317      	str	r3, [sp, #92]	; 0x5c
   d7244:	f000 ff78 	bl	d8138 <__match>
   d7248:	b910      	cbnz	r0, d7250 <_strtod_r+0x340>
   d724a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d724c:	3301      	adds	r3, #1
   d724e:	9317      	str	r3, [sp, #92]	; 0x5c
   d7250:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d74f4 <_strtod_r+0x5e4>
   d7254:	e01a      	b.n	d728c <_strtod_r+0x37c>
   d7256:	49a1      	ldr	r1, [pc, #644]	; (d74dc <_strtod_r+0x5cc>)
   d7258:	a817      	add	r0, sp, #92	; 0x5c
   d725a:	f000 ff6d 	bl	d8138 <__match>
   d725e:	b1c8      	cbz	r0, d7294 <_strtod_r+0x384>
   d7260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7262:	781b      	ldrb	r3, [r3, #0]
   d7264:	2b28      	cmp	r3, #40	; 0x28
   d7266:	d10f      	bne.n	d7288 <_strtod_r+0x378>
   d7268:	aa1a      	add	r2, sp, #104	; 0x68
   d726a:	499d      	ldr	r1, [pc, #628]	; (d74e0 <_strtod_r+0x5d0>)
   d726c:	a817      	add	r0, sp, #92	; 0x5c
   d726e:	f000 ff76 	bl	d815e <__hexnan>
   d7272:	2805      	cmp	r0, #5
   d7274:	d108      	bne.n	d7288 <_strtod_r+0x378>
   d7276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7278:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d727c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7280:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7284:	f000 bc0f 	b.w	d7aa6 <_strtod_r+0xb96>
   d7288:	f8df b26c 	ldr.w	fp, [pc, #620]	; d74f8 <_strtod_r+0x5e8>
   d728c:	f04f 0a00 	mov.w	sl, #0
   d7290:	f000 bc09 	b.w	d7aa6 <_strtod_r+0xb96>
   d7294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7296:	9417      	str	r4, [sp, #92]	; 0x5c
   d7298:	2b00      	cmp	r3, #0
   d729a:	f000 840f 	beq.w	d7abc <_strtod_r+0xbac>
   d729e:	2300      	movs	r3, #0
   d72a0:	930c      	str	r3, [sp, #48]	; 0x30
   d72a2:	f000 bc02 	b.w	d7aaa <_strtod_r+0xb9a>
   d72a6:	9b04      	ldr	r3, [sp, #16]
   d72a8:	9805      	ldr	r0, [sp, #20]
   d72aa:	2b00      	cmp	r3, #0
   d72ac:	bf08      	it	eq
   d72ae:	462b      	moveq	r3, r5
   d72b0:	2d10      	cmp	r5, #16
   d72b2:	462c      	mov	r4, r5
   d72b4:	ebc2 0909 	rsb	r9, r2, r9
   d72b8:	bfa8      	it	ge
   d72ba:	2410      	movge	r4, #16
   d72bc:	9304      	str	r3, [sp, #16]
   d72be:	f7ff f9ad 	bl	d661c <__aeabi_ui2d>
   d72c2:	2c09      	cmp	r4, #9
   d72c4:	4682      	mov	sl, r0
   d72c6:	468b      	mov	fp, r1
   d72c8:	dd13      	ble.n	d72f2 <_strtod_r+0x3e2>
   d72ca:	4b86      	ldr	r3, [pc, #536]	; (d74e4 <_strtod_r+0x5d4>)
   d72cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d72d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d72d4:	f7ff fa18 	bl	d6708 <__aeabi_dmul>
   d72d8:	4606      	mov	r6, r0
   d72da:	4640      	mov	r0, r8
   d72dc:	460f      	mov	r7, r1
   d72de:	f7ff f99d 	bl	d661c <__aeabi_ui2d>
   d72e2:	4602      	mov	r2, r0
   d72e4:	460b      	mov	r3, r1
   d72e6:	4630      	mov	r0, r6
   d72e8:	4639      	mov	r1, r7
   d72ea:	f7ff f85b 	bl	d63a4 <__adddf3>
   d72ee:	4682      	mov	sl, r0
   d72f0:	468b      	mov	fp, r1
   d72f2:	2d0f      	cmp	r5, #15
   d72f4:	dc36      	bgt.n	d7364 <_strtod_r+0x454>
   d72f6:	f1b9 0f00 	cmp.w	r9, #0
   d72fa:	f000 83d4 	beq.w	d7aa6 <_strtod_r+0xb96>
   d72fe:	dd24      	ble.n	d734a <_strtod_r+0x43a>
   d7300:	f1b9 0f16 	cmp.w	r9, #22
   d7304:	dc07      	bgt.n	d7316 <_strtod_r+0x406>
   d7306:	4d77      	ldr	r5, [pc, #476]	; (d74e4 <_strtod_r+0x5d4>)
   d7308:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d730c:	4652      	mov	r2, sl
   d730e:	465b      	mov	r3, fp
   d7310:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7314:	e014      	b.n	d7340 <_strtod_r+0x430>
   d7316:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d731a:	4599      	cmp	r9, r3
   d731c:	dc22      	bgt.n	d7364 <_strtod_r+0x454>
   d731e:	4c71      	ldr	r4, [pc, #452]	; (d74e4 <_strtod_r+0x5d4>)
   d7320:	f1c5 050f 	rsb	r5, r5, #15
   d7324:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7328:	ebc5 0509 	rsb	r5, r5, r9
   d732c:	4652      	mov	r2, sl
   d732e:	465b      	mov	r3, fp
   d7330:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7334:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7338:	f7ff f9e6 	bl	d6708 <__aeabi_dmul>
   d733c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7340:	f7ff f9e2 	bl	d6708 <__aeabi_dmul>
   d7344:	4682      	mov	sl, r0
   d7346:	468b      	mov	fp, r1
   d7348:	e3ad      	b.n	d7aa6 <_strtod_r+0xb96>
   d734a:	f119 0f16 	cmn.w	r9, #22
   d734e:	db09      	blt.n	d7364 <_strtod_r+0x454>
   d7350:	4d64      	ldr	r5, [pc, #400]	; (d74e4 <_strtod_r+0x5d4>)
   d7352:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d7356:	e9d9 2300 	ldrd	r2, r3, [r9]
   d735a:	4650      	mov	r0, sl
   d735c:	4659      	mov	r1, fp
   d735e:	f7ff fafd 	bl	d695c <__aeabi_ddiv>
   d7362:	e7ef      	b.n	d7344 <_strtod_r+0x434>
   d7364:	1b2c      	subs	r4, r5, r4
   d7366:	444c      	add	r4, r9
   d7368:	2c00      	cmp	r4, #0
   d736a:	dd57      	ble.n	d741c <_strtod_r+0x50c>
   d736c:	f014 010f 	ands.w	r1, r4, #15
   d7370:	d00a      	beq.n	d7388 <_strtod_r+0x478>
   d7372:	4b5c      	ldr	r3, [pc, #368]	; (d74e4 <_strtod_r+0x5d4>)
   d7374:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7378:	4652      	mov	r2, sl
   d737a:	465b      	mov	r3, fp
   d737c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7380:	f7ff f9c2 	bl	d6708 <__aeabi_dmul>
   d7384:	4682      	mov	sl, r0
   d7386:	468b      	mov	fp, r1
   d7388:	f034 040f 	bics.w	r4, r4, #15
   d738c:	f000 80b8 	beq.w	d7500 <_strtod_r+0x5f0>
   d7390:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d7394:	dd0b      	ble.n	d73ae <_strtod_r+0x49e>
   d7396:	2400      	movs	r4, #0
   d7398:	4625      	mov	r5, r4
   d739a:	9405      	str	r4, [sp, #20]
   d739c:	9404      	str	r4, [sp, #16]
   d739e:	9a02      	ldr	r2, [sp, #8]
   d73a0:	f8df b150 	ldr.w	fp, [pc, #336]	; d74f4 <_strtod_r+0x5e4>
   d73a4:	2322      	movs	r3, #34	; 0x22
   d73a6:	6013      	str	r3, [r2, #0]
   d73a8:	f04f 0a00 	mov.w	sl, #0
   d73ac:	e187      	b.n	d76be <_strtod_r+0x7ae>
   d73ae:	4e4e      	ldr	r6, [pc, #312]	; (d74e8 <_strtod_r+0x5d8>)
   d73b0:	2300      	movs	r3, #0
   d73b2:	1124      	asrs	r4, r4, #4
   d73b4:	4650      	mov	r0, sl
   d73b6:	4659      	mov	r1, fp
   d73b8:	4698      	mov	r8, r3
   d73ba:	4637      	mov	r7, r6
   d73bc:	2c01      	cmp	r4, #1
   d73be:	dd0b      	ble.n	d73d8 <_strtod_r+0x4c8>
   d73c0:	07e2      	lsls	r2, r4, #31
   d73c2:	d504      	bpl.n	d73ce <_strtod_r+0x4be>
   d73c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d73c8:	f7ff f99e 	bl	d6708 <__aeabi_dmul>
   d73cc:	2301      	movs	r3, #1
   d73ce:	f108 0801 	add.w	r8, r8, #1
   d73d2:	1064      	asrs	r4, r4, #1
   d73d4:	3608      	adds	r6, #8
   d73d6:	e7f1      	b.n	d73bc <_strtod_r+0x4ac>
   d73d8:	b10b      	cbz	r3, d73de <_strtod_r+0x4ce>
   d73da:	4682      	mov	sl, r0
   d73dc:	468b      	mov	fp, r1
   d73de:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d73e2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d73e6:	4652      	mov	r2, sl
   d73e8:	465b      	mov	r3, fp
   d73ea:	e9d7 0100 	ldrd	r0, r1, [r7]
   d73ee:	f7ff f98b 	bl	d6708 <__aeabi_dmul>
   d73f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d73f6:	468b      	mov	fp, r1
   d73f8:	460a      	mov	r2, r1
   d73fa:	0d1b      	lsrs	r3, r3, #20
   d73fc:	493b      	ldr	r1, [pc, #236]	; (d74ec <_strtod_r+0x5dc>)
   d73fe:	051b      	lsls	r3, r3, #20
   d7400:	428b      	cmp	r3, r1
   d7402:	4682      	mov	sl, r0
   d7404:	d8c7      	bhi.n	d7396 <_strtod_r+0x486>
   d7406:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d740a:	428b      	cmp	r3, r1
   d740c:	bf86      	itte	hi
   d740e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d74fc <_strtod_r+0x5ec>
   d7412:	f04f 3aff 	movhi.w	sl, #4294967295
   d7416:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d741a:	e071      	b.n	d7500 <_strtod_r+0x5f0>
   d741c:	d070      	beq.n	d7500 <_strtod_r+0x5f0>
   d741e:	4264      	negs	r4, r4
   d7420:	f014 020f 	ands.w	r2, r4, #15
   d7424:	d00a      	beq.n	d743c <_strtod_r+0x52c>
   d7426:	4b2f      	ldr	r3, [pc, #188]	; (d74e4 <_strtod_r+0x5d4>)
   d7428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d742c:	4650      	mov	r0, sl
   d742e:	4659      	mov	r1, fp
   d7430:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7434:	f7ff fa92 	bl	d695c <__aeabi_ddiv>
   d7438:	4682      	mov	sl, r0
   d743a:	468b      	mov	fp, r1
   d743c:	1124      	asrs	r4, r4, #4
   d743e:	d05f      	beq.n	d7500 <_strtod_r+0x5f0>
   d7440:	2c1f      	cmp	r4, #31
   d7442:	dd04      	ble.n	d744e <_strtod_r+0x53e>
   d7444:	2400      	movs	r4, #0
   d7446:	4625      	mov	r5, r4
   d7448:	9405      	str	r4, [sp, #20]
   d744a:	9404      	str	r4, [sp, #16]
   d744c:	e130      	b.n	d76b0 <_strtod_r+0x7a0>
   d744e:	f014 0f10 	tst.w	r4, #16
   d7452:	bf0c      	ite	eq
   d7454:	2300      	moveq	r3, #0
   d7456:	236a      	movne	r3, #106	; 0x6a
   d7458:	4e25      	ldr	r6, [pc, #148]	; (d74f0 <_strtod_r+0x5e0>)
   d745a:	9303      	str	r3, [sp, #12]
   d745c:	4650      	mov	r0, sl
   d745e:	4659      	mov	r1, fp
   d7460:	2300      	movs	r3, #0
   d7462:	2c00      	cmp	r4, #0
   d7464:	dd09      	ble.n	d747a <_strtod_r+0x56a>
   d7466:	07e2      	lsls	r2, r4, #31
   d7468:	d504      	bpl.n	d7474 <_strtod_r+0x564>
   d746a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d746e:	f7ff f94b 	bl	d6708 <__aeabi_dmul>
   d7472:	2301      	movs	r3, #1
   d7474:	1064      	asrs	r4, r4, #1
   d7476:	3608      	adds	r6, #8
   d7478:	e7f3      	b.n	d7462 <_strtod_r+0x552>
   d747a:	b10b      	cbz	r3, d7480 <_strtod_r+0x570>
   d747c:	4682      	mov	sl, r0
   d747e:	468b      	mov	fp, r1
   d7480:	9b03      	ldr	r3, [sp, #12]
   d7482:	b1eb      	cbz	r3, d74c0 <_strtod_r+0x5b0>
   d7484:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d748c:	2b00      	cmp	r3, #0
   d748e:	4659      	mov	r1, fp
   d7490:	dd16      	ble.n	d74c0 <_strtod_r+0x5b0>
   d7492:	2b1f      	cmp	r3, #31
   d7494:	dd0e      	ble.n	d74b4 <_strtod_r+0x5a4>
   d7496:	2b34      	cmp	r3, #52	; 0x34
   d7498:	bfde      	ittt	le
   d749a:	3b20      	suble	r3, #32
   d749c:	f04f 32ff 	movle.w	r2, #4294967295
   d74a0:	fa02 f303 	lslle.w	r3, r2, r3
   d74a4:	f04f 0a00 	mov.w	sl, #0
   d74a8:	bfcc      	ite	gt
   d74aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d74ae:	ea03 0b01 	andle.w	fp, r3, r1
   d74b2:	e005      	b.n	d74c0 <_strtod_r+0x5b0>
   d74b4:	f04f 32ff 	mov.w	r2, #4294967295
   d74b8:	fa02 f303 	lsl.w	r3, r2, r3
   d74bc:	ea03 0a0a 	and.w	sl, r3, sl
   d74c0:	2200      	movs	r2, #0
   d74c2:	2300      	movs	r3, #0
   d74c4:	4650      	mov	r0, sl
   d74c6:	4659      	mov	r1, fp
   d74c8:	f7ff fb86 	bl	d6bd8 <__aeabi_dcmpeq>
   d74cc:	2800      	cmp	r0, #0
   d74ce:	d1b9      	bne.n	d7444 <_strtod_r+0x534>
   d74d0:	e018      	b.n	d7504 <_strtod_r+0x5f4>
   d74d2:	bf00      	nop
   d74d4:	000d8de9 	.word	0x000d8de9
   d74d8:	000d9198 	.word	0x000d9198
   d74dc:	000d8de1 	.word	0x000d8de1
   d74e0:	000d9184 	.word	0x000d9184
   d74e4:	000d91c8 	.word	0x000d91c8
   d74e8:	000d9290 	.word	0x000d9290
   d74ec:	7ca00000 	.word	0x7ca00000
   d74f0:	000d91a0 	.word	0x000d91a0
   d74f4:	7ff00000 	.word	0x7ff00000
   d74f8:	fff80000 	.word	0xfff80000
   d74fc:	7fefffff 	.word	0x7fefffff
   d7500:	2300      	movs	r3, #0
   d7502:	9303      	str	r3, [sp, #12]
   d7504:	9b05      	ldr	r3, [sp, #20]
   d7506:	9300      	str	r3, [sp, #0]
   d7508:	9a04      	ldr	r2, [sp, #16]
   d750a:	9907      	ldr	r1, [sp, #28]
   d750c:	9802      	ldr	r0, [sp, #8]
   d750e:	462b      	mov	r3, r5
   d7510:	f000 ff3a 	bl	d8388 <__s2b>
   d7514:	9005      	str	r0, [sp, #20]
   d7516:	2800      	cmp	r0, #0
   d7518:	f43f af3d 	beq.w	d7396 <_strtod_r+0x486>
   d751c:	f1b9 0f00 	cmp.w	r9, #0
   d7520:	f1c9 0300 	rsb	r3, r9, #0
   d7524:	bfa8      	it	ge
   d7526:	2300      	movge	r3, #0
   d7528:	930d      	str	r3, [sp, #52]	; 0x34
   d752a:	2400      	movs	r4, #0
   d752c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7530:	9312      	str	r3, [sp, #72]	; 0x48
   d7532:	4625      	mov	r5, r4
   d7534:	9b05      	ldr	r3, [sp, #20]
   d7536:	9802      	ldr	r0, [sp, #8]
   d7538:	6859      	ldr	r1, [r3, #4]
   d753a:	f000 fe9e 	bl	d827a <_Balloc>
   d753e:	9004      	str	r0, [sp, #16]
   d7540:	2800      	cmp	r0, #0
   d7542:	f43f af2c 	beq.w	d739e <_strtod_r+0x48e>
   d7546:	9b05      	ldr	r3, [sp, #20]
   d7548:	691a      	ldr	r2, [r3, #16]
   d754a:	3202      	adds	r2, #2
   d754c:	f103 010c 	add.w	r1, r3, #12
   d7550:	0092      	lsls	r2, r2, #2
   d7552:	300c      	adds	r0, #12
   d7554:	f7ff fc3a 	bl	d6dcc <memcpy>
   d7558:	aa1a      	add	r2, sp, #104	; 0x68
   d755a:	a919      	add	r1, sp, #100	; 0x64
   d755c:	ec4b ab10 	vmov	d0, sl, fp
   d7560:	9802      	ldr	r0, [sp, #8]
   d7562:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7566:	f001 f9c4 	bl	d88f2 <__d2b>
   d756a:	9018      	str	r0, [sp, #96]	; 0x60
   d756c:	2800      	cmp	r0, #0
   d756e:	f43f af16 	beq.w	d739e <_strtod_r+0x48e>
   d7572:	2101      	movs	r1, #1
   d7574:	9802      	ldr	r0, [sp, #8]
   d7576:	f000 ff92 	bl	d849e <__i2b>
   d757a:	4605      	mov	r5, r0
   d757c:	2800      	cmp	r0, #0
   d757e:	f43f af0e 	beq.w	d739e <_strtod_r+0x48e>
   d7582:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7584:	9903      	ldr	r1, [sp, #12]
   d7586:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d7588:	2b00      	cmp	r3, #0
   d758a:	bfad      	iteet	ge
   d758c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d758e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d7590:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d7594:	eb02 0803 	addge.w	r8, r2, r3
   d7598:	bfb8      	it	lt
   d759a:	1ad2      	sublt	r2, r2, r3
   d759c:	eba3 0301 	sub.w	r3, r3, r1
   d75a0:	4433      	add	r3, r6
   d75a2:	49b5      	ldr	r1, [pc, #724]	; (d7878 <_strtod_r+0x968>)
   d75a4:	bfa8      	it	ge
   d75a6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d75a8:	3b01      	subs	r3, #1
   d75aa:	428b      	cmp	r3, r1
   d75ac:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d75b0:	f280 808a 	bge.w	d76c8 <_strtod_r+0x7b8>
   d75b4:	1ac9      	subs	r1, r1, r3
   d75b6:	291f      	cmp	r1, #31
   d75b8:	bfc8      	it	gt
   d75ba:	4fb0      	ldrgt	r7, [pc, #704]	; (d787c <_strtod_r+0x96c>)
   d75bc:	f04f 0901 	mov.w	r9, #1
   d75c0:	bfd4      	ite	le
   d75c2:	fa09 f301 	lslle.w	r3, r9, r1
   d75c6:	1aff      	subgt	r7, r7, r3
   d75c8:	eba6 0601 	sub.w	r6, r6, r1
   d75cc:	bfd9      	ittee	le
   d75ce:	9306      	strle	r3, [sp, #24]
   d75d0:	2700      	movle	r7, #0
   d75d2:	fa09 f707 	lslgt.w	r7, r9, r7
   d75d6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d75da:	eb08 0906 	add.w	r9, r8, r6
   d75de:	9b03      	ldr	r3, [sp, #12]
   d75e0:	45c8      	cmp	r8, r9
   d75e2:	4416      	add	r6, r2
   d75e4:	441e      	add	r6, r3
   d75e6:	4643      	mov	r3, r8
   d75e8:	bfa8      	it	ge
   d75ea:	464b      	movge	r3, r9
   d75ec:	42b3      	cmp	r3, r6
   d75ee:	bfa8      	it	ge
   d75f0:	4633      	movge	r3, r6
   d75f2:	2b00      	cmp	r3, #0
   d75f4:	bfc2      	ittt	gt
   d75f6:	ebc3 0909 	rsbgt	r9, r3, r9
   d75fa:	1af6      	subgt	r6, r6, r3
   d75fc:	ebc3 0808 	rsbgt	r8, r3, r8
   d7600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7602:	2b00      	cmp	r3, #0
   d7604:	d164      	bne.n	d76d0 <_strtod_r+0x7c0>
   d7606:	f1b9 0f00 	cmp.w	r9, #0
   d760a:	dc7a      	bgt.n	d7702 <_strtod_r+0x7f2>
   d760c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d760e:	2b00      	cmp	r3, #0
   d7610:	f040 8081 	bne.w	d7716 <_strtod_r+0x806>
   d7614:	2e00      	cmp	r6, #0
   d7616:	f300 8088 	bgt.w	d772a <_strtod_r+0x81a>
   d761a:	f1b8 0f00 	cmp.w	r8, #0
   d761e:	f300 808e 	bgt.w	d773e <_strtod_r+0x82e>
   d7622:	9a04      	ldr	r2, [sp, #16]
   d7624:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7626:	9802      	ldr	r0, [sp, #8]
   d7628:	f001 f88f 	bl	d874a <__mdiff>
   d762c:	4604      	mov	r4, r0
   d762e:	2800      	cmp	r0, #0
   d7630:	f43f aeb5 	beq.w	d739e <_strtod_r+0x48e>
   d7634:	68c3      	ldr	r3, [r0, #12]
   d7636:	9307      	str	r3, [sp, #28]
   d7638:	2300      	movs	r3, #0
   d763a:	60c3      	str	r3, [r0, #12]
   d763c:	4629      	mov	r1, r5
   d763e:	f001 f868 	bl	d8712 <__mcmp>
   d7642:	2800      	cmp	r0, #0
   d7644:	f280 8089 	bge.w	d775a <_strtod_r+0x84a>
   d7648:	9b07      	ldr	r3, [sp, #28]
   d764a:	2b00      	cmp	r3, #0
   d764c:	f040 8204 	bne.w	d7a58 <_strtod_r+0xb48>
   d7650:	f1ba 0f00 	cmp.w	sl, #0
   d7654:	f040 8200 	bne.w	d7a58 <_strtod_r+0xb48>
   d7658:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d765c:	2b00      	cmp	r3, #0
   d765e:	f040 81fb 	bne.w	d7a58 <_strtod_r+0xb48>
   d7662:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7666:	0d1b      	lsrs	r3, r3, #20
   d7668:	051b      	lsls	r3, r3, #20
   d766a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d766e:	f240 81f3 	bls.w	d7a58 <_strtod_r+0xb48>
   d7672:	6963      	ldr	r3, [r4, #20]
   d7674:	2b00      	cmp	r3, #0
   d7676:	d06c      	beq.n	d7752 <_strtod_r+0x842>
   d7678:	4621      	mov	r1, r4
   d767a:	2201      	movs	r2, #1
   d767c:	9802      	ldr	r0, [sp, #8]
   d767e:	f000 fff7 	bl	d8670 <__lshift>
   d7682:	4629      	mov	r1, r5
   d7684:	4604      	mov	r4, r0
   d7686:	f001 f844 	bl	d8712 <__mcmp>
   d768a:	2800      	cmp	r0, #0
   d768c:	f340 81e4 	ble.w	d7a58 <_strtod_r+0xb48>
   d7690:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7694:	9a03      	ldr	r2, [sp, #12]
   d7696:	0d1b      	lsrs	r3, r3, #20
   d7698:	051b      	lsls	r3, r3, #20
   d769a:	2a00      	cmp	r2, #0
   d769c:	f000 808c 	beq.w	d77b8 <_strtod_r+0x8a8>
   d76a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d76a4:	f300 8088 	bgt.w	d77b8 <_strtod_r+0x8a8>
   d76a8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d76ac:	f300 81d6 	bgt.w	d7a5c <_strtod_r+0xb4c>
   d76b0:	9a02      	ldr	r2, [sp, #8]
   d76b2:	2322      	movs	r3, #34	; 0x22
   d76b4:	f04f 0a00 	mov.w	sl, #0
   d76b8:	f04f 0b00 	mov.w	fp, #0
   d76bc:	6013      	str	r3, [r2, #0]
   d76be:	9b05      	ldr	r3, [sp, #20]
   d76c0:	2b00      	cmp	r3, #0
   d76c2:	f040 81dc 	bne.w	d7a7e <_strtod_r+0xb6e>
   d76c6:	e1ee      	b.n	d7aa6 <_strtod_r+0xb96>
   d76c8:	2301      	movs	r3, #1
   d76ca:	2700      	movs	r7, #0
   d76cc:	9306      	str	r3, [sp, #24]
   d76ce:	e784      	b.n	d75da <_strtod_r+0x6ca>
   d76d0:	4629      	mov	r1, r5
   d76d2:	461a      	mov	r2, r3
   d76d4:	9802      	ldr	r0, [sp, #8]
   d76d6:	f000 ff7d 	bl	d85d4 <__pow5mult>
   d76da:	4605      	mov	r5, r0
   d76dc:	2800      	cmp	r0, #0
   d76de:	f43f ae5e 	beq.w	d739e <_strtod_r+0x48e>
   d76e2:	4601      	mov	r1, r0
   d76e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d76e6:	9802      	ldr	r0, [sp, #8]
   d76e8:	f000 fee2 	bl	d84b0 <__multiply>
   d76ec:	9007      	str	r0, [sp, #28]
   d76ee:	2800      	cmp	r0, #0
   d76f0:	f43f ae55 	beq.w	d739e <_strtod_r+0x48e>
   d76f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d76f6:	9802      	ldr	r0, [sp, #8]
   d76f8:	f000 fdf4 	bl	d82e4 <_Bfree>
   d76fc:	9b07      	ldr	r3, [sp, #28]
   d76fe:	9318      	str	r3, [sp, #96]	; 0x60
   d7700:	e781      	b.n	d7606 <_strtod_r+0x6f6>
   d7702:	464a      	mov	r2, r9
   d7704:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7706:	9802      	ldr	r0, [sp, #8]
   d7708:	f000 ffb2 	bl	d8670 <__lshift>
   d770c:	9018      	str	r0, [sp, #96]	; 0x60
   d770e:	2800      	cmp	r0, #0
   d7710:	f47f af7c 	bne.w	d760c <_strtod_r+0x6fc>
   d7714:	e643      	b.n	d739e <_strtod_r+0x48e>
   d7716:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7718:	9904      	ldr	r1, [sp, #16]
   d771a:	9802      	ldr	r0, [sp, #8]
   d771c:	f000 ff5a 	bl	d85d4 <__pow5mult>
   d7720:	9004      	str	r0, [sp, #16]
   d7722:	2800      	cmp	r0, #0
   d7724:	f47f af76 	bne.w	d7614 <_strtod_r+0x704>
   d7728:	e639      	b.n	d739e <_strtod_r+0x48e>
   d772a:	4632      	mov	r2, r6
   d772c:	9904      	ldr	r1, [sp, #16]
   d772e:	9802      	ldr	r0, [sp, #8]
   d7730:	f000 ff9e 	bl	d8670 <__lshift>
   d7734:	9004      	str	r0, [sp, #16]
   d7736:	2800      	cmp	r0, #0
   d7738:	f47f af6f 	bne.w	d761a <_strtod_r+0x70a>
   d773c:	e62f      	b.n	d739e <_strtod_r+0x48e>
   d773e:	4629      	mov	r1, r5
   d7740:	4642      	mov	r2, r8
   d7742:	9802      	ldr	r0, [sp, #8]
   d7744:	f000 ff94 	bl	d8670 <__lshift>
   d7748:	4605      	mov	r5, r0
   d774a:	2800      	cmp	r0, #0
   d774c:	f47f af69 	bne.w	d7622 <_strtod_r+0x712>
   d7750:	e625      	b.n	d739e <_strtod_r+0x48e>
   d7752:	6923      	ldr	r3, [r4, #16]
   d7754:	2b01      	cmp	r3, #1
   d7756:	dc8f      	bgt.n	d7678 <_strtod_r+0x768>
   d7758:	e17e      	b.n	d7a58 <_strtod_r+0xb48>
   d775a:	d161      	bne.n	d7820 <_strtod_r+0x910>
   d775c:	9a07      	ldr	r2, [sp, #28]
   d775e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7762:	b322      	cbz	r2, d77ae <_strtod_r+0x89e>
   d7764:	4946      	ldr	r1, [pc, #280]	; (d7880 <_strtod_r+0x970>)
   d7766:	428b      	cmp	r3, r1
   d7768:	465a      	mov	r2, fp
   d776a:	d12e      	bne.n	d77ca <_strtod_r+0x8ba>
   d776c:	9b03      	ldr	r3, [sp, #12]
   d776e:	4651      	mov	r1, sl
   d7770:	b163      	cbz	r3, d778c <_strtod_r+0x87c>
   d7772:	4b44      	ldr	r3, [pc, #272]	; (d7884 <_strtod_r+0x974>)
   d7774:	4013      	ands	r3, r2
   d7776:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d777a:	d807      	bhi.n	d778c <_strtod_r+0x87c>
   d777c:	0d1b      	lsrs	r3, r3, #20
   d777e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7782:	f04f 30ff 	mov.w	r0, #4294967295
   d7786:	fa00 f303 	lsl.w	r3, r0, r3
   d778a:	e001      	b.n	d7790 <_strtod_r+0x880>
   d778c:	f04f 33ff 	mov.w	r3, #4294967295
   d7790:	428b      	cmp	r3, r1
   d7792:	d11a      	bne.n	d77ca <_strtod_r+0x8ba>
   d7794:	493c      	ldr	r1, [pc, #240]	; (d7888 <_strtod_r+0x978>)
   d7796:	428a      	cmp	r2, r1
   d7798:	d102      	bne.n	d77a0 <_strtod_r+0x890>
   d779a:	3301      	adds	r3, #1
   d779c:	f43f adff 	beq.w	d739e <_strtod_r+0x48e>
   d77a0:	4b38      	ldr	r3, [pc, #224]	; (d7884 <_strtod_r+0x974>)
   d77a2:	4013      	ands	r3, r2
   d77a4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d77a8:	f04f 0a00 	mov.w	sl, #0
   d77ac:	e154      	b.n	d7a58 <_strtod_r+0xb48>
   d77ae:	b963      	cbnz	r3, d77ca <_strtod_r+0x8ba>
   d77b0:	f1ba 0f00 	cmp.w	sl, #0
   d77b4:	d109      	bne.n	d77ca <_strtod_r+0x8ba>
   d77b6:	e76b      	b.n	d7690 <_strtod_r+0x780>
   d77b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d77bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d77c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d77c4:	f04f 3aff 	mov.w	sl, #4294967295
   d77c8:	e146      	b.n	d7a58 <_strtod_r+0xb48>
   d77ca:	b117      	cbz	r7, d77d2 <_strtod_r+0x8c2>
   d77cc:	ea17 0f0b 	tst.w	r7, fp
   d77d0:	e002      	b.n	d77d8 <_strtod_r+0x8c8>
   d77d2:	9b06      	ldr	r3, [sp, #24]
   d77d4:	ea13 0f0a 	tst.w	r3, sl
   d77d8:	f000 813e 	beq.w	d7a58 <_strtod_r+0xb48>
   d77dc:	9b07      	ldr	r3, [sp, #28]
   d77de:	9a03      	ldr	r2, [sp, #12]
   d77e0:	4650      	mov	r0, sl
   d77e2:	4659      	mov	r1, fp
   d77e4:	b153      	cbz	r3, d77fc <_strtod_r+0x8ec>
   d77e6:	f7ff fb76 	bl	d6ed6 <sulp>
   d77ea:	4602      	mov	r2, r0
   d77ec:	460b      	mov	r3, r1
   d77ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d77f2:	f7fe fdd7 	bl	d63a4 <__adddf3>
   d77f6:	4682      	mov	sl, r0
   d77f8:	468b      	mov	fp, r1
   d77fa:	e12d      	b.n	d7a58 <_strtod_r+0xb48>
   d77fc:	f7ff fb6b 	bl	d6ed6 <sulp>
   d7800:	4602      	mov	r2, r0
   d7802:	460b      	mov	r3, r1
   d7804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7808:	f7fe fdca 	bl	d63a0 <__aeabi_dsub>
   d780c:	2200      	movs	r2, #0
   d780e:	2300      	movs	r3, #0
   d7810:	4682      	mov	sl, r0
   d7812:	468b      	mov	fp, r1
   d7814:	f7ff f9e0 	bl	d6bd8 <__aeabi_dcmpeq>
   d7818:	2800      	cmp	r0, #0
   d781a:	f47f af49 	bne.w	d76b0 <_strtod_r+0x7a0>
   d781e:	e11b      	b.n	d7a58 <_strtod_r+0xb48>
   d7820:	4629      	mov	r1, r5
   d7822:	4620      	mov	r0, r4
   d7824:	f001 f8b3 	bl	d898e <__ratio>
   d7828:	ec57 6b10 	vmov	r6, r7, d0
   d782c:	2200      	movs	r2, #0
   d782e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7832:	ee10 0a10 	vmov	r0, s0
   d7836:	4639      	mov	r1, r7
   d7838:	f7ff f9e2 	bl	d6c00 <__aeabi_dcmple>
   d783c:	2800      	cmp	r0, #0
   d783e:	d042      	beq.n	d78c6 <_strtod_r+0x9b6>
   d7840:	9b07      	ldr	r3, [sp, #28]
   d7842:	b123      	cbz	r3, d784e <_strtod_r+0x93e>
   d7844:	f04f 0800 	mov.w	r8, #0
   d7848:	f8df 9040 	ldr.w	r9, [pc, #64]	; d788c <_strtod_r+0x97c>
   d784c:	e011      	b.n	d7872 <_strtod_r+0x962>
   d784e:	f1ba 0f00 	cmp.w	sl, #0
   d7852:	d103      	bne.n	d785c <_strtod_r+0x94c>
   d7854:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7858:	b93b      	cbnz	r3, d786a <_strtod_r+0x95a>
   d785a:	e01b      	b.n	d7894 <_strtod_r+0x984>
   d785c:	f1ba 0f01 	cmp.w	sl, #1
   d7860:	d103      	bne.n	d786a <_strtod_r+0x95a>
   d7862:	f1bb 0f00 	cmp.w	fp, #0
   d7866:	f43f af23 	beq.w	d76b0 <_strtod_r+0x7a0>
   d786a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d7890 <_strtod_r+0x980>
   d786e:	f04f 0800 	mov.w	r8, #0
   d7872:	2600      	movs	r6, #0
   d7874:	4f05      	ldr	r7, [pc, #20]	; (d788c <_strtod_r+0x97c>)
   d7876:	e039      	b.n	d78ec <_strtod_r+0x9dc>
   d7878:	fffffc02 	.word	0xfffffc02
   d787c:	fffffbe2 	.word	0xfffffbe2
   d7880:	000fffff 	.word	0x000fffff
   d7884:	7ff00000 	.word	0x7ff00000
   d7888:	7fefffff 	.word	0x7fefffff
   d788c:	3ff00000 	.word	0x3ff00000
   d7890:	bff00000 	.word	0xbff00000
   d7894:	2200      	movs	r2, #0
   d7896:	4b98      	ldr	r3, [pc, #608]	; (d7af8 <_strtod_r+0xbe8>)
   d7898:	4630      	mov	r0, r6
   d789a:	4639      	mov	r1, r7
   d789c:	f7ff f9a6 	bl	d6bec <__aeabi_dcmplt>
   d78a0:	b940      	cbnz	r0, d78b4 <_strtod_r+0x9a4>
   d78a2:	4630      	mov	r0, r6
   d78a4:	4639      	mov	r1, r7
   d78a6:	2200      	movs	r2, #0
   d78a8:	4b94      	ldr	r3, [pc, #592]	; (d7afc <_strtod_r+0xbec>)
   d78aa:	f7fe ff2d 	bl	d6708 <__aeabi_dmul>
   d78ae:	4606      	mov	r6, r0
   d78b0:	460f      	mov	r7, r1
   d78b2:	e001      	b.n	d78b8 <_strtod_r+0x9a8>
   d78b4:	4f91      	ldr	r7, [pc, #580]	; (d7afc <_strtod_r+0xbec>)
   d78b6:	2600      	movs	r6, #0
   d78b8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d78bc:	9614      	str	r6, [sp, #80]	; 0x50
   d78be:	9315      	str	r3, [sp, #84]	; 0x54
   d78c0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d78c4:	e012      	b.n	d78ec <_strtod_r+0x9dc>
   d78c6:	4b8d      	ldr	r3, [pc, #564]	; (d7afc <_strtod_r+0xbec>)
   d78c8:	4630      	mov	r0, r6
   d78ca:	4639      	mov	r1, r7
   d78cc:	2200      	movs	r2, #0
   d78ce:	f7fe ff1b 	bl	d6708 <__aeabi_dmul>
   d78d2:	9b07      	ldr	r3, [sp, #28]
   d78d4:	4606      	mov	r6, r0
   d78d6:	460f      	mov	r7, r1
   d78d8:	b923      	cbnz	r3, d78e4 <_strtod_r+0x9d4>
   d78da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d78de:	900e      	str	r0, [sp, #56]	; 0x38
   d78e0:	930f      	str	r3, [sp, #60]	; 0x3c
   d78e2:	e001      	b.n	d78e8 <_strtod_r+0x9d8>
   d78e4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d78e8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d78ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d78f0:	0d1b      	lsrs	r3, r3, #20
   d78f2:	051b      	lsls	r3, r3, #20
   d78f4:	9306      	str	r3, [sp, #24]
   d78f6:	9a06      	ldr	r2, [sp, #24]
   d78f8:	4b81      	ldr	r3, [pc, #516]	; (d7b00 <_strtod_r+0xbf0>)
   d78fa:	429a      	cmp	r2, r3
   d78fc:	d12b      	bne.n	d7956 <_strtod_r+0xa46>
   d78fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7902:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7906:	ec4b ab10 	vmov	d0, sl, fp
   d790a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d790e:	f000 ff7b 	bl	d8808 <__ulp>
   d7912:	4640      	mov	r0, r8
   d7914:	ec53 2b10 	vmov	r2, r3, d0
   d7918:	4649      	mov	r1, r9
   d791a:	f7fe fef5 	bl	d6708 <__aeabi_dmul>
   d791e:	4652      	mov	r2, sl
   d7920:	465b      	mov	r3, fp
   d7922:	f7fe fd3f 	bl	d63a4 <__adddf3>
   d7926:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d792a:	0d1b      	lsrs	r3, r3, #20
   d792c:	4a75      	ldr	r2, [pc, #468]	; (d7b04 <_strtod_r+0xbf4>)
   d792e:	051b      	lsls	r3, r3, #20
   d7930:	4293      	cmp	r3, r2
   d7932:	4682      	mov	sl, r0
   d7934:	d90c      	bls.n	d7950 <_strtod_r+0xa40>
   d7936:	4b74      	ldr	r3, [pc, #464]	; (d7b08 <_strtod_r+0xbf8>)
   d7938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d793a:	429a      	cmp	r2, r3
   d793c:	d103      	bne.n	d7946 <_strtod_r+0xa36>
   d793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7940:	3301      	adds	r3, #1
   d7942:	f43f ad2c 	beq.w	d739e <_strtod_r+0x48e>
   d7946:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7b08 <_strtod_r+0xbf8>
   d794a:	f04f 3aff 	mov.w	sl, #4294967295
   d794e:	e072      	b.n	d7a36 <_strtod_r+0xb26>
   d7950:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d7954:	e038      	b.n	d79c8 <_strtod_r+0xab8>
   d7956:	9b03      	ldr	r3, [sp, #12]
   d7958:	b333      	cbz	r3, d79a8 <_strtod_r+0xa98>
   d795a:	9b06      	ldr	r3, [sp, #24]
   d795c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7960:	d822      	bhi.n	d79a8 <_strtod_r+0xa98>
   d7962:	a35d      	add	r3, pc, #372	; (adr r3, d7ad8 <_strtod_r+0xbc8>)
   d7964:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7968:	4630      	mov	r0, r6
   d796a:	4639      	mov	r1, r7
   d796c:	f7ff f948 	bl	d6c00 <__aeabi_dcmple>
   d7970:	b1a8      	cbz	r0, d799e <_strtod_r+0xa8e>
   d7972:	4639      	mov	r1, r7
   d7974:	4630      	mov	r0, r6
   d7976:	f7ff f99f 	bl	d6cb8 <__aeabi_d2uiz>
   d797a:	2800      	cmp	r0, #0
   d797c:	bf08      	it	eq
   d797e:	2001      	moveq	r0, #1
   d7980:	f7fe fe4c 	bl	d661c <__aeabi_ui2d>
   d7984:	9b07      	ldr	r3, [sp, #28]
   d7986:	4606      	mov	r6, r0
   d7988:	460f      	mov	r7, r1
   d798a:	b923      	cbnz	r3, d7996 <_strtod_r+0xa86>
   d798c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7990:	9010      	str	r0, [sp, #64]	; 0x40
   d7992:	9311      	str	r3, [sp, #68]	; 0x44
   d7994:	e001      	b.n	d799a <_strtod_r+0xa8a>
   d7996:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d799a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d799e:	9a06      	ldr	r2, [sp, #24]
   d79a0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d79a4:	ebc2 0903 	rsb	r9, r2, r3
   d79a8:	ed9d 0b08 	vldr	d0, [sp, #32]
   d79ac:	f000 ff2c 	bl	d8808 <__ulp>
   d79b0:	4640      	mov	r0, r8
   d79b2:	ec53 2b10 	vmov	r2, r3, d0
   d79b6:	4649      	mov	r1, r9
   d79b8:	f7fe fea6 	bl	d6708 <__aeabi_dmul>
   d79bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d79c0:	f7fe fcf0 	bl	d63a4 <__adddf3>
   d79c4:	4682      	mov	sl, r0
   d79c6:	468b      	mov	fp, r1
   d79c8:	9b03      	ldr	r3, [sp, #12]
   d79ca:	bba3      	cbnz	r3, d7a36 <_strtod_r+0xb26>
   d79cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d79d0:	0d1b      	lsrs	r3, r3, #20
   d79d2:	9a06      	ldr	r2, [sp, #24]
   d79d4:	051b      	lsls	r3, r3, #20
   d79d6:	429a      	cmp	r2, r3
   d79d8:	46d8      	mov	r8, fp
   d79da:	d12c      	bne.n	d7a36 <_strtod_r+0xb26>
   d79dc:	4639      	mov	r1, r7
   d79de:	4630      	mov	r0, r6
   d79e0:	f7ff f942 	bl	d6c68 <__aeabi_d2iz>
   d79e4:	f7fe fe2a 	bl	d663c <__aeabi_i2d>
   d79e8:	460b      	mov	r3, r1
   d79ea:	4602      	mov	r2, r0
   d79ec:	4639      	mov	r1, r7
   d79ee:	4630      	mov	r0, r6
   d79f0:	f7fe fcd6 	bl	d63a0 <__aeabi_dsub>
   d79f4:	9b07      	ldr	r3, [sp, #28]
   d79f6:	4606      	mov	r6, r0
   d79f8:	460f      	mov	r7, r1
   d79fa:	b92b      	cbnz	r3, d7a08 <_strtod_r+0xaf8>
   d79fc:	f1ba 0f00 	cmp.w	sl, #0
   d7a00:	d102      	bne.n	d7a08 <_strtod_r+0xaf8>
   d7a02:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7a06:	b183      	cbz	r3, d7a2a <_strtod_r+0xb1a>
   d7a08:	a335      	add	r3, pc, #212	; (adr r3, d7ae0 <_strtod_r+0xbd0>)
   d7a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a0e:	4630      	mov	r0, r6
   d7a10:	4639      	mov	r1, r7
   d7a12:	f7ff f8eb 	bl	d6bec <__aeabi_dcmplt>
   d7a16:	2800      	cmp	r0, #0
   d7a18:	d131      	bne.n	d7a7e <_strtod_r+0xb6e>
   d7a1a:	a333      	add	r3, pc, #204	; (adr r3, d7ae8 <_strtod_r+0xbd8>)
   d7a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a20:	4630      	mov	r0, r6
   d7a22:	4639      	mov	r1, r7
   d7a24:	f7ff f900 	bl	d6c28 <__aeabi_dcmpgt>
   d7a28:	e004      	b.n	d7a34 <_strtod_r+0xb24>
   d7a2a:	a331      	add	r3, pc, #196	; (adr r3, d7af0 <_strtod_r+0xbe0>)
   d7a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a30:	f7ff f8dc 	bl	d6bec <__aeabi_dcmplt>
   d7a34:	bb18      	cbnz	r0, d7a7e <_strtod_r+0xb6e>
   d7a36:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7a38:	9802      	ldr	r0, [sp, #8]
   d7a3a:	f000 fc53 	bl	d82e4 <_Bfree>
   d7a3e:	9904      	ldr	r1, [sp, #16]
   d7a40:	9802      	ldr	r0, [sp, #8]
   d7a42:	f000 fc4f 	bl	d82e4 <_Bfree>
   d7a46:	4629      	mov	r1, r5
   d7a48:	9802      	ldr	r0, [sp, #8]
   d7a4a:	f000 fc4b 	bl	d82e4 <_Bfree>
   d7a4e:	4621      	mov	r1, r4
   d7a50:	9802      	ldr	r0, [sp, #8]
   d7a52:	f000 fc47 	bl	d82e4 <_Bfree>
   d7a56:	e56d      	b.n	d7534 <_strtod_r+0x624>
   d7a58:	9b03      	ldr	r3, [sp, #12]
   d7a5a:	b183      	cbz	r3, d7a7e <_strtod_r+0xb6e>
   d7a5c:	4b2b      	ldr	r3, [pc, #172]	; (d7b0c <_strtod_r+0xbfc>)
   d7a5e:	930b      	str	r3, [sp, #44]	; 0x2c
   d7a60:	2300      	movs	r3, #0
   d7a62:	930a      	str	r3, [sp, #40]	; 0x28
   d7a64:	4650      	mov	r0, sl
   d7a66:	4659      	mov	r1, fp
   d7a68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7a6c:	f7fe fe4c 	bl	d6708 <__aeabi_dmul>
   d7a70:	4682      	mov	sl, r0
   d7a72:	468b      	mov	fp, r1
   d7a74:	b919      	cbnz	r1, d7a7e <_strtod_r+0xb6e>
   d7a76:	b910      	cbnz	r0, d7a7e <_strtod_r+0xb6e>
   d7a78:	9a02      	ldr	r2, [sp, #8]
   d7a7a:	2322      	movs	r3, #34	; 0x22
   d7a7c:	6013      	str	r3, [r2, #0]
   d7a7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7a80:	9802      	ldr	r0, [sp, #8]
   d7a82:	f000 fc2f 	bl	d82e4 <_Bfree>
   d7a86:	9904      	ldr	r1, [sp, #16]
   d7a88:	9802      	ldr	r0, [sp, #8]
   d7a8a:	f000 fc2b 	bl	d82e4 <_Bfree>
   d7a8e:	4629      	mov	r1, r5
   d7a90:	9802      	ldr	r0, [sp, #8]
   d7a92:	f000 fc27 	bl	d82e4 <_Bfree>
   d7a96:	9905      	ldr	r1, [sp, #20]
   d7a98:	9802      	ldr	r0, [sp, #8]
   d7a9a:	f000 fc23 	bl	d82e4 <_Bfree>
   d7a9e:	4621      	mov	r1, r4
   d7aa0:	9802      	ldr	r0, [sp, #8]
   d7aa2:	f000 fc1f 	bl	d82e4 <_Bfree>
   d7aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7aa8:	b113      	cbz	r3, d7ab0 <_strtod_r+0xba0>
   d7aaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7aae:	6013      	str	r3, [r2, #0]
   d7ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7ab2:	b11b      	cbz	r3, d7abc <_strtod_r+0xbac>
   d7ab4:	4652      	mov	r2, sl
   d7ab6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7aba:	e007      	b.n	d7acc <_strtod_r+0xbbc>
   d7abc:	4652      	mov	r2, sl
   d7abe:	465b      	mov	r3, fp
   d7ac0:	e004      	b.n	d7acc <_strtod_r+0xbbc>
   d7ac2:	2500      	movs	r5, #0
   d7ac4:	462a      	mov	r2, r5
   d7ac6:	2101      	movs	r1, #1
   d7ac8:	f7ff bb41 	b.w	d714e <_strtod_r+0x23e>
   d7acc:	ec43 2b10 	vmov	d0, r2, r3
   d7ad0:	b01d      	add	sp, #116	; 0x74
   d7ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ad6:	bf00      	nop
   d7ad8:	ffc00000 	.word	0xffc00000
   d7adc:	41dfffff 	.word	0x41dfffff
   d7ae0:	94a03595 	.word	0x94a03595
   d7ae4:	3fdfffff 	.word	0x3fdfffff
   d7ae8:	35afe535 	.word	0x35afe535
   d7aec:	3fe00000 	.word	0x3fe00000
   d7af0:	94a03595 	.word	0x94a03595
   d7af4:	3fcfffff 	.word	0x3fcfffff
   d7af8:	3ff00000 	.word	0x3ff00000
   d7afc:	3fe00000 	.word	0x3fe00000
   d7b00:	7fe00000 	.word	0x7fe00000
   d7b04:	7c9fffff 	.word	0x7c9fffff
   d7b08:	7fefffff 	.word	0x7fefffff
   d7b0c:	39500000 	.word	0x39500000

000d7b10 <strtod>:
   d7b10:	4b02      	ldr	r3, [pc, #8]	; (d7b1c <strtod+0xc>)
   d7b12:	460a      	mov	r2, r1
   d7b14:	4601      	mov	r1, r0
   d7b16:	6818      	ldr	r0, [r3, #0]
   d7b18:	f7ff b9fa 	b.w	d6f10 <_strtod_r>
   d7b1c:	2003e2a0 	.word	0x2003e2a0

000d7b20 <_strtol_r>:
   d7b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7b24:	4680      	mov	r8, r0
   d7b26:	4840      	ldr	r0, [pc, #256]	; (d7c28 <_strtol_r+0x108>)
   d7b28:	f8d0 9000 	ldr.w	r9, [r0]
   d7b2c:	460f      	mov	r7, r1
   d7b2e:	463d      	mov	r5, r7
   d7b30:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7b34:	eb09 0004 	add.w	r0, r9, r4
   d7b38:	7840      	ldrb	r0, [r0, #1]
   d7b3a:	f000 0008 	and.w	r0, r0, #8
   d7b3e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7b42:	b108      	cbz	r0, d7b48 <_strtol_r+0x28>
   d7b44:	462f      	mov	r7, r5
   d7b46:	e7f2      	b.n	d7b2e <_strtol_r+0xe>
   d7b48:	2c2d      	cmp	r4, #45	; 0x2d
   d7b4a:	d103      	bne.n	d7b54 <_strtol_r+0x34>
   d7b4c:	1cbd      	adds	r5, r7, #2
   d7b4e:	787c      	ldrb	r4, [r7, #1]
   d7b50:	2601      	movs	r6, #1
   d7b52:	e003      	b.n	d7b5c <_strtol_r+0x3c>
   d7b54:	2c2b      	cmp	r4, #43	; 0x2b
   d7b56:	bf04      	itt	eq
   d7b58:	787c      	ldrbeq	r4, [r7, #1]
   d7b5a:	1cbd      	addeq	r5, r7, #2
   d7b5c:	b113      	cbz	r3, d7b64 <_strtol_r+0x44>
   d7b5e:	2b10      	cmp	r3, #16
   d7b60:	d10a      	bne.n	d7b78 <_strtol_r+0x58>
   d7b62:	e05b      	b.n	d7c1c <_strtol_r+0xfc>
   d7b64:	2c30      	cmp	r4, #48	; 0x30
   d7b66:	d157      	bne.n	d7c18 <_strtol_r+0xf8>
   d7b68:	7828      	ldrb	r0, [r5, #0]
   d7b6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7b6e:	2858      	cmp	r0, #88	; 0x58
   d7b70:	d14d      	bne.n	d7c0e <_strtol_r+0xee>
   d7b72:	786c      	ldrb	r4, [r5, #1]
   d7b74:	2310      	movs	r3, #16
   d7b76:	3502      	adds	r5, #2
   d7b78:	2e00      	cmp	r6, #0
   d7b7a:	bf14      	ite	ne
   d7b7c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7b80:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7b84:	2700      	movs	r7, #0
   d7b86:	fbbc faf3 	udiv	sl, ip, r3
   d7b8a:	4638      	mov	r0, r7
   d7b8c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7b90:	eb09 0e04 	add.w	lr, r9, r4
   d7b94:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7b98:	f01e 0f04 	tst.w	lr, #4
   d7b9c:	d001      	beq.n	d7ba2 <_strtol_r+0x82>
   d7b9e:	3c30      	subs	r4, #48	; 0x30
   d7ba0:	e00b      	b.n	d7bba <_strtol_r+0x9a>
   d7ba2:	f01e 0e03 	ands.w	lr, lr, #3
   d7ba6:	d01b      	beq.n	d7be0 <_strtol_r+0xc0>
   d7ba8:	f1be 0f01 	cmp.w	lr, #1
   d7bac:	bf0c      	ite	eq
   d7bae:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7bb2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7bb6:	ebce 0404 	rsb	r4, lr, r4
   d7bba:	42a3      	cmp	r3, r4
   d7bbc:	dd10      	ble.n	d7be0 <_strtol_r+0xc0>
   d7bbe:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7bc2:	d00a      	beq.n	d7bda <_strtol_r+0xba>
   d7bc4:	4550      	cmp	r0, sl
   d7bc6:	d806      	bhi.n	d7bd6 <_strtol_r+0xb6>
   d7bc8:	d101      	bne.n	d7bce <_strtol_r+0xae>
   d7bca:	4564      	cmp	r4, ip
   d7bcc:	dc03      	bgt.n	d7bd6 <_strtol_r+0xb6>
   d7bce:	fb03 4000 	mla	r0, r3, r0, r4
   d7bd2:	2701      	movs	r7, #1
   d7bd4:	e001      	b.n	d7bda <_strtol_r+0xba>
   d7bd6:	f04f 37ff 	mov.w	r7, #4294967295
   d7bda:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7bde:	e7d7      	b.n	d7b90 <_strtol_r+0x70>
   d7be0:	1c7b      	adds	r3, r7, #1
   d7be2:	d10c      	bne.n	d7bfe <_strtol_r+0xde>
   d7be4:	2e00      	cmp	r6, #0
   d7be6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7bea:	bf14      	ite	ne
   d7bec:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7bf0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7bf4:	f8c8 3000 	str.w	r3, [r8]
   d7bf8:	b92a      	cbnz	r2, d7c06 <_strtol_r+0xe6>
   d7bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bfe:	b106      	cbz	r6, d7c02 <_strtol_r+0xe2>
   d7c00:	4240      	negs	r0, r0
   d7c02:	b172      	cbz	r2, d7c22 <_strtol_r+0x102>
   d7c04:	b107      	cbz	r7, d7c08 <_strtol_r+0xe8>
   d7c06:	1e69      	subs	r1, r5, #1
   d7c08:	6011      	str	r1, [r2, #0]
   d7c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c0e:	2430      	movs	r4, #48	; 0x30
   d7c10:	2b00      	cmp	r3, #0
   d7c12:	d1b1      	bne.n	d7b78 <_strtol_r+0x58>
   d7c14:	2308      	movs	r3, #8
   d7c16:	e7af      	b.n	d7b78 <_strtol_r+0x58>
   d7c18:	230a      	movs	r3, #10
   d7c1a:	e7ad      	b.n	d7b78 <_strtol_r+0x58>
   d7c1c:	2c30      	cmp	r4, #48	; 0x30
   d7c1e:	d0a3      	beq.n	d7b68 <_strtol_r+0x48>
   d7c20:	e7aa      	b.n	d7b78 <_strtol_r+0x58>
   d7c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c26:	bf00      	nop
   d7c28:	2003e23c 	.word	0x2003e23c

000d7c2c <strtol>:
   d7c2c:	4613      	mov	r3, r2
   d7c2e:	460a      	mov	r2, r1
   d7c30:	4601      	mov	r1, r0
   d7c32:	4802      	ldr	r0, [pc, #8]	; (d7c3c <strtol+0x10>)
   d7c34:	6800      	ldr	r0, [r0, #0]
   d7c36:	f7ff bf73 	b.w	d7b20 <_strtol_r>
   d7c3a:	bf00      	nop
   d7c3c:	2003e2a0 	.word	0x2003e2a0

000d7c40 <rshift>:
   d7c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c42:	6906      	ldr	r6, [r0, #16]
   d7c44:	114b      	asrs	r3, r1, #5
   d7c46:	42b3      	cmp	r3, r6
   d7c48:	f100 0514 	add.w	r5, r0, #20
   d7c4c:	da27      	bge.n	d7c9e <rshift+0x5e>
   d7c4e:	f011 011f 	ands.w	r1, r1, #31
   d7c52:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d7c56:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d7c5a:	d101      	bne.n	d7c60 <rshift+0x20>
   d7c5c:	4629      	mov	r1, r5
   d7c5e:	e016      	b.n	d7c8e <rshift+0x4e>
   d7c60:	1d14      	adds	r4, r2, #4
   d7c62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d7c66:	f1c1 0e20 	rsb	lr, r1, #32
   d7c6a:	40ca      	lsrs	r2, r1
   d7c6c:	462b      	mov	r3, r5
   d7c6e:	42b4      	cmp	r4, r6
   d7c70:	d209      	bcs.n	d7c86 <rshift+0x46>
   d7c72:	6827      	ldr	r7, [r4, #0]
   d7c74:	fa07 f70e 	lsl.w	r7, r7, lr
   d7c78:	433a      	orrs	r2, r7
   d7c7a:	f843 2b04 	str.w	r2, [r3], #4
   d7c7e:	f854 2b04 	ldr.w	r2, [r4], #4
   d7c82:	40ca      	lsrs	r2, r1
   d7c84:	e7f3      	b.n	d7c6e <rshift+0x2e>
   d7c86:	601a      	str	r2, [r3, #0]
   d7c88:	b152      	cbz	r2, d7ca0 <rshift+0x60>
   d7c8a:	3304      	adds	r3, #4
   d7c8c:	e008      	b.n	d7ca0 <rshift+0x60>
   d7c8e:	42b2      	cmp	r2, r6
   d7c90:	460b      	mov	r3, r1
   d7c92:	d205      	bcs.n	d7ca0 <rshift+0x60>
   d7c94:	f852 3b04 	ldr.w	r3, [r2], #4
   d7c98:	f841 3b04 	str.w	r3, [r1], #4
   d7c9c:	e7f7      	b.n	d7c8e <rshift+0x4e>
   d7c9e:	462b      	mov	r3, r5
   d7ca0:	1b5b      	subs	r3, r3, r5
   d7ca2:	109b      	asrs	r3, r3, #2
   d7ca4:	6103      	str	r3, [r0, #16]
   d7ca6:	b903      	cbnz	r3, d7caa <rshift+0x6a>
   d7ca8:	6143      	str	r3, [r0, #20]
   d7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cac <__hexdig_fun>:
   d7cac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7cb0:	2b09      	cmp	r3, #9
   d7cb2:	d801      	bhi.n	d7cb8 <__hexdig_fun+0xc>
   d7cb4:	3820      	subs	r0, #32
   d7cb6:	e00a      	b.n	d7cce <__hexdig_fun+0x22>
   d7cb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d7cbc:	2b05      	cmp	r3, #5
   d7cbe:	d801      	bhi.n	d7cc4 <__hexdig_fun+0x18>
   d7cc0:	3847      	subs	r0, #71	; 0x47
   d7cc2:	e004      	b.n	d7cce <__hexdig_fun+0x22>
   d7cc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d7cc8:	2b05      	cmp	r3, #5
   d7cca:	d802      	bhi.n	d7cd2 <__hexdig_fun+0x26>
   d7ccc:	3827      	subs	r0, #39	; 0x27
   d7cce:	b2c0      	uxtb	r0, r0
   d7cd0:	4770      	bx	lr
   d7cd2:	2000      	movs	r0, #0
   d7cd4:	4770      	bx	lr

000d7cd6 <__gethex>:
   d7cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cda:	b08b      	sub	sp, #44	; 0x2c
   d7cdc:	468a      	mov	sl, r1
   d7cde:	4690      	mov	r8, r2
   d7ce0:	9306      	str	r3, [sp, #24]
   d7ce2:	9002      	str	r0, [sp, #8]
   d7ce4:	f7ff f86e 	bl	d6dc4 <_localeconv_r>
   d7ce8:	6803      	ldr	r3, [r0, #0]
   d7cea:	9303      	str	r3, [sp, #12]
   d7cec:	4618      	mov	r0, r3
   d7cee:	f7ff f8bb 	bl	d6e68 <strlen>
   d7cf2:	9b03      	ldr	r3, [sp, #12]
   d7cf4:	9001      	str	r0, [sp, #4]
   d7cf6:	4403      	add	r3, r0
   d7cf8:	f04f 0b00 	mov.w	fp, #0
   d7cfc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d7d00:	9307      	str	r3, [sp, #28]
   d7d02:	f8da 3000 	ldr.w	r3, [sl]
   d7d06:	3302      	adds	r3, #2
   d7d08:	461f      	mov	r7, r3
   d7d0a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7d0e:	2830      	cmp	r0, #48	; 0x30
   d7d10:	d102      	bne.n	d7d18 <__gethex+0x42>
   d7d12:	f10b 0b01 	add.w	fp, fp, #1
   d7d16:	e7f7      	b.n	d7d08 <__gethex+0x32>
   d7d18:	f7ff ffc8 	bl	d7cac <__hexdig_fun>
   d7d1c:	4604      	mov	r4, r0
   d7d1e:	b9e0      	cbnz	r0, d7d5a <__gethex+0x84>
   d7d20:	9a01      	ldr	r2, [sp, #4]
   d7d22:	9903      	ldr	r1, [sp, #12]
   d7d24:	4638      	mov	r0, r7
   d7d26:	f7ff f8a7 	bl	d6e78 <strncmp>
   d7d2a:	2800      	cmp	r0, #0
   d7d2c:	d134      	bne.n	d7d98 <__gethex+0xc2>
   d7d2e:	9b01      	ldr	r3, [sp, #4]
   d7d30:	5cf8      	ldrb	r0, [r7, r3]
   d7d32:	18fe      	adds	r6, r7, r3
   d7d34:	f7ff ffba 	bl	d7cac <__hexdig_fun>
   d7d38:	b380      	cbz	r0, d7d9c <__gethex+0xc6>
   d7d3a:	4633      	mov	r3, r6
   d7d3c:	7818      	ldrb	r0, [r3, #0]
   d7d3e:	2830      	cmp	r0, #48	; 0x30
   d7d40:	461f      	mov	r7, r3
   d7d42:	f103 0301 	add.w	r3, r3, #1
   d7d46:	d0f9      	beq.n	d7d3c <__gethex+0x66>
   d7d48:	f7ff ffb0 	bl	d7cac <__hexdig_fun>
   d7d4c:	fab0 f580 	clz	r5, r0
   d7d50:	096d      	lsrs	r5, r5, #5
   d7d52:	4634      	mov	r4, r6
   d7d54:	f04f 0b01 	mov.w	fp, #1
   d7d58:	e001      	b.n	d7d5e <__gethex+0x88>
   d7d5a:	2500      	movs	r5, #0
   d7d5c:	462c      	mov	r4, r5
   d7d5e:	463a      	mov	r2, r7
   d7d60:	4616      	mov	r6, r2
   d7d62:	3201      	adds	r2, #1
   d7d64:	7830      	ldrb	r0, [r6, #0]
   d7d66:	f7ff ffa1 	bl	d7cac <__hexdig_fun>
   d7d6a:	2800      	cmp	r0, #0
   d7d6c:	d1f8      	bne.n	d7d60 <__gethex+0x8a>
   d7d6e:	9a01      	ldr	r2, [sp, #4]
   d7d70:	9903      	ldr	r1, [sp, #12]
   d7d72:	4630      	mov	r0, r6
   d7d74:	f7ff f880 	bl	d6e78 <strncmp>
   d7d78:	b950      	cbnz	r0, d7d90 <__gethex+0xba>
   d7d7a:	b954      	cbnz	r4, d7d92 <__gethex+0xbc>
   d7d7c:	9b01      	ldr	r3, [sp, #4]
   d7d7e:	18f4      	adds	r4, r6, r3
   d7d80:	4622      	mov	r2, r4
   d7d82:	4616      	mov	r6, r2
   d7d84:	3201      	adds	r2, #1
   d7d86:	7830      	ldrb	r0, [r6, #0]
   d7d88:	f7ff ff90 	bl	d7cac <__hexdig_fun>
   d7d8c:	2800      	cmp	r0, #0
   d7d8e:	d1f8      	bne.n	d7d82 <__gethex+0xac>
   d7d90:	b134      	cbz	r4, d7da0 <__gethex+0xca>
   d7d92:	1ba4      	subs	r4, r4, r6
   d7d94:	00a4      	lsls	r4, r4, #2
   d7d96:	e003      	b.n	d7da0 <__gethex+0xca>
   d7d98:	463e      	mov	r6, r7
   d7d9a:	e000      	b.n	d7d9e <__gethex+0xc8>
   d7d9c:	4604      	mov	r4, r0
   d7d9e:	2501      	movs	r5, #1
   d7da0:	7833      	ldrb	r3, [r6, #0]
   d7da2:	2b50      	cmp	r3, #80	; 0x50
   d7da4:	d001      	beq.n	d7daa <__gethex+0xd4>
   d7da6:	2b70      	cmp	r3, #112	; 0x70
   d7da8:	d12a      	bne.n	d7e00 <__gethex+0x12a>
   d7daa:	7873      	ldrb	r3, [r6, #1]
   d7dac:	2b2b      	cmp	r3, #43	; 0x2b
   d7dae:	d008      	beq.n	d7dc2 <__gethex+0xec>
   d7db0:	2b2d      	cmp	r3, #45	; 0x2d
   d7db2:	d003      	beq.n	d7dbc <__gethex+0xe6>
   d7db4:	1c71      	adds	r1, r6, #1
   d7db6:	f04f 0900 	mov.w	r9, #0
   d7dba:	e005      	b.n	d7dc8 <__gethex+0xf2>
   d7dbc:	f04f 0901 	mov.w	r9, #1
   d7dc0:	e001      	b.n	d7dc6 <__gethex+0xf0>
   d7dc2:	f04f 0900 	mov.w	r9, #0
   d7dc6:	1cb1      	adds	r1, r6, #2
   d7dc8:	7808      	ldrb	r0, [r1, #0]
   d7dca:	f7ff ff6f 	bl	d7cac <__hexdig_fun>
   d7dce:	1e43      	subs	r3, r0, #1
   d7dd0:	b2db      	uxtb	r3, r3
   d7dd2:	2b18      	cmp	r3, #24
   d7dd4:	d814      	bhi.n	d7e00 <__gethex+0x12a>
   d7dd6:	f1a0 0210 	sub.w	r2, r0, #16
   d7dda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d7dde:	f7ff ff65 	bl	d7cac <__hexdig_fun>
   d7de2:	1e43      	subs	r3, r0, #1
   d7de4:	b2db      	uxtb	r3, r3
   d7de6:	2b18      	cmp	r3, #24
   d7de8:	d804      	bhi.n	d7df4 <__gethex+0x11e>
   d7dea:	230a      	movs	r3, #10
   d7dec:	fb03 0202 	mla	r2, r3, r2, r0
   d7df0:	3a10      	subs	r2, #16
   d7df2:	e7f2      	b.n	d7dda <__gethex+0x104>
   d7df4:	f1b9 0f00 	cmp.w	r9, #0
   d7df8:	d000      	beq.n	d7dfc <__gethex+0x126>
   d7dfa:	4252      	negs	r2, r2
   d7dfc:	4414      	add	r4, r2
   d7dfe:	e000      	b.n	d7e02 <__gethex+0x12c>
   d7e00:	4631      	mov	r1, r6
   d7e02:	f8ca 1000 	str.w	r1, [sl]
   d7e06:	b12d      	cbz	r5, d7e14 <__gethex+0x13e>
   d7e08:	f1bb 0f00 	cmp.w	fp, #0
   d7e0c:	bf14      	ite	ne
   d7e0e:	2000      	movne	r0, #0
   d7e10:	2006      	moveq	r0, #6
   d7e12:	e17c      	b.n	d810e <__gethex+0x438>
   d7e14:	1bf3      	subs	r3, r6, r7
   d7e16:	3b01      	subs	r3, #1
   d7e18:	4629      	mov	r1, r5
   d7e1a:	2b07      	cmp	r3, #7
   d7e1c:	dd02      	ble.n	d7e24 <__gethex+0x14e>
   d7e1e:	3101      	adds	r1, #1
   d7e20:	105b      	asrs	r3, r3, #1
   d7e22:	e7fa      	b.n	d7e1a <__gethex+0x144>
   d7e24:	9802      	ldr	r0, [sp, #8]
   d7e26:	f000 fa28 	bl	d827a <_Balloc>
   d7e2a:	9b01      	ldr	r3, [sp, #4]
   d7e2c:	f100 0a14 	add.w	sl, r0, #20
   d7e30:	f04f 0900 	mov.w	r9, #0
   d7e34:	f1c3 0301 	rsb	r3, r3, #1
   d7e38:	4605      	mov	r5, r0
   d7e3a:	f8cd a010 	str.w	sl, [sp, #16]
   d7e3e:	46cb      	mov	fp, r9
   d7e40:	9308      	str	r3, [sp, #32]
   d7e42:	42b7      	cmp	r7, r6
   d7e44:	d22f      	bcs.n	d7ea6 <__gethex+0x1d0>
   d7e46:	1e73      	subs	r3, r6, #1
   d7e48:	9305      	str	r3, [sp, #20]
   d7e4a:	9a07      	ldr	r2, [sp, #28]
   d7e4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d7e50:	4293      	cmp	r3, r2
   d7e52:	d00b      	beq.n	d7e6c <__gethex+0x196>
   d7e54:	f1bb 0f20 	cmp.w	fp, #32
   d7e58:	d116      	bne.n	d7e88 <__gethex+0x1b2>
   d7e5a:	9b04      	ldr	r3, [sp, #16]
   d7e5c:	f8c3 9000 	str.w	r9, [r3]
   d7e60:	3304      	adds	r3, #4
   d7e62:	f04f 0900 	mov.w	r9, #0
   d7e66:	9304      	str	r3, [sp, #16]
   d7e68:	46cb      	mov	fp, r9
   d7e6a:	e00d      	b.n	d7e88 <__gethex+0x1b2>
   d7e6c:	9b05      	ldr	r3, [sp, #20]
   d7e6e:	9a08      	ldr	r2, [sp, #32]
   d7e70:	4413      	add	r3, r2
   d7e72:	429f      	cmp	r7, r3
   d7e74:	d8ee      	bhi.n	d7e54 <__gethex+0x17e>
   d7e76:	4618      	mov	r0, r3
   d7e78:	9a01      	ldr	r2, [sp, #4]
   d7e7a:	9903      	ldr	r1, [sp, #12]
   d7e7c:	9309      	str	r3, [sp, #36]	; 0x24
   d7e7e:	f7fe fffb 	bl	d6e78 <strncmp>
   d7e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7e84:	b168      	cbz	r0, d7ea2 <__gethex+0x1cc>
   d7e86:	e7e5      	b.n	d7e54 <__gethex+0x17e>
   d7e88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d7e8c:	f7ff ff0e 	bl	d7cac <__hexdig_fun>
   d7e90:	f000 000f 	and.w	r0, r0, #15
   d7e94:	fa00 f00b 	lsl.w	r0, r0, fp
   d7e98:	9b05      	ldr	r3, [sp, #20]
   d7e9a:	ea49 0900 	orr.w	r9, r9, r0
   d7e9e:	f10b 0b04 	add.w	fp, fp, #4
   d7ea2:	461e      	mov	r6, r3
   d7ea4:	e7cd      	b.n	d7e42 <__gethex+0x16c>
   d7ea6:	9804      	ldr	r0, [sp, #16]
   d7ea8:	f840 9b04 	str.w	r9, [r0], #4
   d7eac:	ebca 0000 	rsb	r0, sl, r0
   d7eb0:	1080      	asrs	r0, r0, #2
   d7eb2:	6128      	str	r0, [r5, #16]
   d7eb4:	0147      	lsls	r7, r0, #5
   d7eb6:	4648      	mov	r0, r9
   d7eb8:	f000 faa4 	bl	d8404 <__hi0bits>
   d7ebc:	f8d8 6000 	ldr.w	r6, [r8]
   d7ec0:	1a38      	subs	r0, r7, r0
   d7ec2:	42b0      	cmp	r0, r6
   d7ec4:	dd26      	ble.n	d7f14 <__gethex+0x23e>
   d7ec6:	1b87      	subs	r7, r0, r6
   d7ec8:	4639      	mov	r1, r7
   d7eca:	4628      	mov	r0, r5
   d7ecc:	f000 fda3 	bl	d8a16 <__any_on>
   d7ed0:	b1c8      	cbz	r0, d7f06 <__gethex+0x230>
   d7ed2:	1e7b      	subs	r3, r7, #1
   d7ed4:	1159      	asrs	r1, r3, #5
   d7ed6:	f003 021f 	and.w	r2, r3, #31
   d7eda:	f04f 0901 	mov.w	r9, #1
   d7ede:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d7ee2:	fa09 f202 	lsl.w	r2, r9, r2
   d7ee6:	420a      	tst	r2, r1
   d7ee8:	d00e      	beq.n	d7f08 <__gethex+0x232>
   d7eea:	454b      	cmp	r3, r9
   d7eec:	dc02      	bgt.n	d7ef4 <__gethex+0x21e>
   d7eee:	f04f 0902 	mov.w	r9, #2
   d7ef2:	e009      	b.n	d7f08 <__gethex+0x232>
   d7ef4:	1eb9      	subs	r1, r7, #2
   d7ef6:	4628      	mov	r0, r5
   d7ef8:	f000 fd8d 	bl	d8a16 <__any_on>
   d7efc:	2800      	cmp	r0, #0
   d7efe:	d0f6      	beq.n	d7eee <__gethex+0x218>
   d7f00:	f04f 0903 	mov.w	r9, #3
   d7f04:	e000      	b.n	d7f08 <__gethex+0x232>
   d7f06:	4681      	mov	r9, r0
   d7f08:	4639      	mov	r1, r7
   d7f0a:	4628      	mov	r0, r5
   d7f0c:	f7ff fe98 	bl	d7c40 <rshift>
   d7f10:	443c      	add	r4, r7
   d7f12:	e00c      	b.n	d7f2e <__gethex+0x258>
   d7f14:	da09      	bge.n	d7f2a <__gethex+0x254>
   d7f16:	1a37      	subs	r7, r6, r0
   d7f18:	4629      	mov	r1, r5
   d7f1a:	463a      	mov	r2, r7
   d7f1c:	9802      	ldr	r0, [sp, #8]
   d7f1e:	f000 fba7 	bl	d8670 <__lshift>
   d7f22:	1be4      	subs	r4, r4, r7
   d7f24:	4605      	mov	r5, r0
   d7f26:	f100 0a14 	add.w	sl, r0, #20
   d7f2a:	f04f 0900 	mov.w	r9, #0
   d7f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7f32:	429c      	cmp	r4, r3
   d7f34:	dd08      	ble.n	d7f48 <__gethex+0x272>
   d7f36:	9802      	ldr	r0, [sp, #8]
   d7f38:	4629      	mov	r1, r5
   d7f3a:	f000 f9d3 	bl	d82e4 <_Bfree>
   d7f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7f40:	2300      	movs	r3, #0
   d7f42:	6013      	str	r3, [r2, #0]
   d7f44:	20a3      	movs	r0, #163	; 0xa3
   d7f46:	e0e2      	b.n	d810e <__gethex+0x438>
   d7f48:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d7f4c:	4284      	cmp	r4, r0
   d7f4e:	da53      	bge.n	d7ff8 <__gethex+0x322>
   d7f50:	1b04      	subs	r4, r0, r4
   d7f52:	42a6      	cmp	r6, r4
   d7f54:	dc2e      	bgt.n	d7fb4 <__gethex+0x2de>
   d7f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d7f5a:	2b02      	cmp	r3, #2
   d7f5c:	d01a      	beq.n	d7f94 <__gethex+0x2be>
   d7f5e:	2b03      	cmp	r3, #3
   d7f60:	d01c      	beq.n	d7f9c <__gethex+0x2c6>
   d7f62:	2b01      	cmp	r3, #1
   d7f64:	d11d      	bne.n	d7fa2 <__gethex+0x2cc>
   d7f66:	42a6      	cmp	r6, r4
   d7f68:	d11b      	bne.n	d7fa2 <__gethex+0x2cc>
   d7f6a:	2e01      	cmp	r6, #1
   d7f6c:	dc0b      	bgt.n	d7f86 <__gethex+0x2b0>
   d7f6e:	9a06      	ldr	r2, [sp, #24]
   d7f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d7f74:	6013      	str	r3, [r2, #0]
   d7f76:	2301      	movs	r3, #1
   d7f78:	612b      	str	r3, [r5, #16]
   d7f7a:	f8ca 3000 	str.w	r3, [sl]
   d7f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7f80:	2062      	movs	r0, #98	; 0x62
   d7f82:	601d      	str	r5, [r3, #0]
   d7f84:	e0c3      	b.n	d810e <__gethex+0x438>
   d7f86:	1e71      	subs	r1, r6, #1
   d7f88:	4628      	mov	r0, r5
   d7f8a:	f000 fd44 	bl	d8a16 <__any_on>
   d7f8e:	2800      	cmp	r0, #0
   d7f90:	d1ed      	bne.n	d7f6e <__gethex+0x298>
   d7f92:	e006      	b.n	d7fa2 <__gethex+0x2cc>
   d7f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7f96:	2b00      	cmp	r3, #0
   d7f98:	d0e9      	beq.n	d7f6e <__gethex+0x298>
   d7f9a:	e002      	b.n	d7fa2 <__gethex+0x2cc>
   d7f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7f9e:	2b00      	cmp	r3, #0
   d7fa0:	d1e5      	bne.n	d7f6e <__gethex+0x298>
   d7fa2:	9802      	ldr	r0, [sp, #8]
   d7fa4:	4629      	mov	r1, r5
   d7fa6:	f000 f99d 	bl	d82e4 <_Bfree>
   d7faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7fac:	2300      	movs	r3, #0
   d7fae:	6013      	str	r3, [r2, #0]
   d7fb0:	2050      	movs	r0, #80	; 0x50
   d7fb2:	e0ac      	b.n	d810e <__gethex+0x438>
   d7fb4:	1e67      	subs	r7, r4, #1
   d7fb6:	f1b9 0f00 	cmp.w	r9, #0
   d7fba:	d106      	bne.n	d7fca <__gethex+0x2f4>
   d7fbc:	b13f      	cbz	r7, d7fce <__gethex+0x2f8>
   d7fbe:	4639      	mov	r1, r7
   d7fc0:	4628      	mov	r0, r5
   d7fc2:	f000 fd28 	bl	d8a16 <__any_on>
   d7fc6:	4681      	mov	r9, r0
   d7fc8:	e001      	b.n	d7fce <__gethex+0x2f8>
   d7fca:	f04f 0901 	mov.w	r9, #1
   d7fce:	117a      	asrs	r2, r7, #5
   d7fd0:	2301      	movs	r3, #1
   d7fd2:	f007 071f 	and.w	r7, r7, #31
   d7fd6:	fa03 f707 	lsl.w	r7, r3, r7
   d7fda:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d7fde:	4621      	mov	r1, r4
   d7fe0:	421f      	tst	r7, r3
   d7fe2:	4628      	mov	r0, r5
   d7fe4:	bf18      	it	ne
   d7fe6:	f049 0902 	orrne.w	r9, r9, #2
   d7fea:	1b36      	subs	r6, r6, r4
   d7fec:	f7ff fe28 	bl	d7c40 <rshift>
   d7ff0:	2702      	movs	r7, #2
   d7ff2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d7ff6:	e000      	b.n	d7ffa <__gethex+0x324>
   d7ff8:	2701      	movs	r7, #1
   d7ffa:	f1b9 0f00 	cmp.w	r9, #0
   d7ffe:	f000 8081 	beq.w	d8104 <__gethex+0x42e>
   d8002:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8006:	2b02      	cmp	r3, #2
   d8008:	d00e      	beq.n	d8028 <__gethex+0x352>
   d800a:	2b03      	cmp	r3, #3
   d800c:	d010      	beq.n	d8030 <__gethex+0x35a>
   d800e:	2b01      	cmp	r3, #1
   d8010:	d176      	bne.n	d8100 <__gethex+0x42a>
   d8012:	f019 0f02 	tst.w	r9, #2
   d8016:	d073      	beq.n	d8100 <__gethex+0x42a>
   d8018:	f8da 0000 	ldr.w	r0, [sl]
   d801c:	ea49 0900 	orr.w	r9, r9, r0
   d8020:	f019 0f01 	tst.w	r9, #1
   d8024:	d107      	bne.n	d8036 <__gethex+0x360>
   d8026:	e06b      	b.n	d8100 <__gethex+0x42a>
   d8028:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d802a:	f1c3 0301 	rsb	r3, r3, #1
   d802e:	9315      	str	r3, [sp, #84]	; 0x54
   d8030:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8032:	2b00      	cmp	r3, #0
   d8034:	d064      	beq.n	d8100 <__gethex+0x42a>
   d8036:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d803a:	f105 0314 	add.w	r3, r5, #20
   d803e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8042:	eb03 0109 	add.w	r1, r3, r9
   d8046:	2000      	movs	r0, #0
   d8048:	681a      	ldr	r2, [r3, #0]
   d804a:	f1b2 3fff 	cmp.w	r2, #4294967295
   d804e:	d002      	beq.n	d8056 <__gethex+0x380>
   d8050:	3201      	adds	r2, #1
   d8052:	601a      	str	r2, [r3, #0]
   d8054:	e020      	b.n	d8098 <__gethex+0x3c2>
   d8056:	f843 0b04 	str.w	r0, [r3], #4
   d805a:	4299      	cmp	r1, r3
   d805c:	d8f4      	bhi.n	d8048 <__gethex+0x372>
   d805e:	68ab      	ldr	r3, [r5, #8]
   d8060:	459a      	cmp	sl, r3
   d8062:	db12      	blt.n	d808a <__gethex+0x3b4>
   d8064:	6869      	ldr	r1, [r5, #4]
   d8066:	9802      	ldr	r0, [sp, #8]
   d8068:	3101      	adds	r1, #1
   d806a:	f000 f906 	bl	d827a <_Balloc>
   d806e:	692a      	ldr	r2, [r5, #16]
   d8070:	3202      	adds	r2, #2
   d8072:	f105 010c 	add.w	r1, r5, #12
   d8076:	4683      	mov	fp, r0
   d8078:	0092      	lsls	r2, r2, #2
   d807a:	300c      	adds	r0, #12
   d807c:	f7fe fea6 	bl	d6dcc <memcpy>
   d8080:	4629      	mov	r1, r5
   d8082:	9802      	ldr	r0, [sp, #8]
   d8084:	f000 f92e 	bl	d82e4 <_Bfree>
   d8088:	465d      	mov	r5, fp
   d808a:	692b      	ldr	r3, [r5, #16]
   d808c:	1c5a      	adds	r2, r3, #1
   d808e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8092:	612a      	str	r2, [r5, #16]
   d8094:	2201      	movs	r2, #1
   d8096:	615a      	str	r2, [r3, #20]
   d8098:	2f02      	cmp	r7, #2
   d809a:	f105 0214 	add.w	r2, r5, #20
   d809e:	d111      	bne.n	d80c4 <__gethex+0x3ee>
   d80a0:	f8d8 3000 	ldr.w	r3, [r8]
   d80a4:	3b01      	subs	r3, #1
   d80a6:	429e      	cmp	r6, r3
   d80a8:	d127      	bne.n	d80fa <__gethex+0x424>
   d80aa:	1171      	asrs	r1, r6, #5
   d80ac:	2301      	movs	r3, #1
   d80ae:	f006 061f 	and.w	r6, r6, #31
   d80b2:	fa03 f606 	lsl.w	r6, r3, r6
   d80b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d80ba:	421e      	tst	r6, r3
   d80bc:	bf0c      	ite	eq
   d80be:	2702      	moveq	r7, #2
   d80c0:	2701      	movne	r7, #1
   d80c2:	e01a      	b.n	d80fa <__gethex+0x424>
   d80c4:	692b      	ldr	r3, [r5, #16]
   d80c6:	459a      	cmp	sl, r3
   d80c8:	da0a      	bge.n	d80e0 <__gethex+0x40a>
   d80ca:	2101      	movs	r1, #1
   d80cc:	4628      	mov	r0, r5
   d80ce:	f7ff fdb7 	bl	d7c40 <rshift>
   d80d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d80d6:	3401      	adds	r4, #1
   d80d8:	429c      	cmp	r4, r3
   d80da:	f73f af2c 	bgt.w	d7f36 <__gethex+0x260>
   d80de:	e00b      	b.n	d80f8 <__gethex+0x422>
   d80e0:	f016 061f 	ands.w	r6, r6, #31
   d80e4:	d008      	beq.n	d80f8 <__gethex+0x422>
   d80e6:	4491      	add	r9, r2
   d80e8:	f1c6 0620 	rsb	r6, r6, #32
   d80ec:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d80f0:	f000 f988 	bl	d8404 <__hi0bits>
   d80f4:	42b0      	cmp	r0, r6
   d80f6:	dbe8      	blt.n	d80ca <__gethex+0x3f4>
   d80f8:	2701      	movs	r7, #1
   d80fa:	f047 0720 	orr.w	r7, r7, #32
   d80fe:	e001      	b.n	d8104 <__gethex+0x42e>
   d8100:	f047 0710 	orr.w	r7, r7, #16
   d8104:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8106:	601d      	str	r5, [r3, #0]
   d8108:	9b06      	ldr	r3, [sp, #24]
   d810a:	4638      	mov	r0, r7
   d810c:	601c      	str	r4, [r3, #0]
   d810e:	b00b      	add	sp, #44	; 0x2c
   d8110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8114 <L_shift>:
   d8114:	f1c2 0208 	rsb	r2, r2, #8
   d8118:	0092      	lsls	r2, r2, #2
   d811a:	b570      	push	{r4, r5, r6, lr}
   d811c:	f1c2 0620 	rsb	r6, r2, #32
   d8120:	6843      	ldr	r3, [r0, #4]
   d8122:	6805      	ldr	r5, [r0, #0]
   d8124:	fa03 f406 	lsl.w	r4, r3, r6
   d8128:	432c      	orrs	r4, r5
   d812a:	40d3      	lsrs	r3, r2
   d812c:	6004      	str	r4, [r0, #0]
   d812e:	f840 3f04 	str.w	r3, [r0, #4]!
   d8132:	4288      	cmp	r0, r1
   d8134:	d3f4      	bcc.n	d8120 <L_shift+0xc>
   d8136:	bd70      	pop	{r4, r5, r6, pc}

000d8138 <__match>:
   d8138:	b530      	push	{r4, r5, lr}
   d813a:	6803      	ldr	r3, [r0, #0]
   d813c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8140:	3301      	adds	r3, #1
   d8142:	b14c      	cbz	r4, d8158 <__match+0x20>
   d8144:	781a      	ldrb	r2, [r3, #0]
   d8146:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d814a:	2d19      	cmp	r5, #25
   d814c:	bf98      	it	ls
   d814e:	3220      	addls	r2, #32
   d8150:	42a2      	cmp	r2, r4
   d8152:	d0f3      	beq.n	d813c <__match+0x4>
   d8154:	2000      	movs	r0, #0
   d8156:	bd30      	pop	{r4, r5, pc}
   d8158:	6003      	str	r3, [r0, #0]
   d815a:	2001      	movs	r0, #1
   d815c:	bd30      	pop	{r4, r5, pc}

000d815e <__hexnan>:
   d815e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8162:	680b      	ldr	r3, [r1, #0]
   d8164:	f8d0 b000 	ldr.w	fp, [r0]
   d8168:	115e      	asrs	r6, r3, #5
   d816a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d816e:	f013 031f 	ands.w	r3, r3, #31
   d8172:	b085      	sub	sp, #20
   d8174:	bf18      	it	ne
   d8176:	3604      	addne	r6, #4
   d8178:	1f35      	subs	r5, r6, #4
   d817a:	4617      	mov	r7, r2
   d817c:	2200      	movs	r2, #0
   d817e:	4682      	mov	sl, r0
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	f846 2c04 	str.w	r2, [r6, #-4]
   d8186:	46a8      	mov	r8, r5
   d8188:	462c      	mov	r4, r5
   d818a:	9200      	str	r2, [sp, #0]
   d818c:	4691      	mov	r9, r2
   d818e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8192:	2900      	cmp	r1, #0
   d8194:	d03c      	beq.n	d8210 <__hexnan+0xb2>
   d8196:	4608      	mov	r0, r1
   d8198:	9203      	str	r2, [sp, #12]
   d819a:	9102      	str	r1, [sp, #8]
   d819c:	f7ff fd86 	bl	d7cac <__hexdig_fun>
   d81a0:	9a03      	ldr	r2, [sp, #12]
   d81a2:	bb00      	cbnz	r0, d81e6 <__hexnan+0x88>
   d81a4:	9902      	ldr	r1, [sp, #8]
   d81a6:	2920      	cmp	r1, #32
   d81a8:	d816      	bhi.n	d81d8 <__hexnan+0x7a>
   d81aa:	9b00      	ldr	r3, [sp, #0]
   d81ac:	4599      	cmp	r9, r3
   d81ae:	ddee      	ble.n	d818e <__hexnan+0x30>
   d81b0:	4544      	cmp	r4, r8
   d81b2:	d205      	bcs.n	d81c0 <__hexnan+0x62>
   d81b4:	2a07      	cmp	r2, #7
   d81b6:	dc03      	bgt.n	d81c0 <__hexnan+0x62>
   d81b8:	4641      	mov	r1, r8
   d81ba:	4620      	mov	r0, r4
   d81bc:	f7ff ffaa 	bl	d8114 <L_shift>
   d81c0:	42bc      	cmp	r4, r7
   d81c2:	d923      	bls.n	d820c <__hexnan+0xae>
   d81c4:	2300      	movs	r3, #0
   d81c6:	f1a4 0804 	sub.w	r8, r4, #4
   d81ca:	f844 3c04 	str.w	r3, [r4, #-4]
   d81ce:	f8cd 9000 	str.w	r9, [sp]
   d81d2:	4644      	mov	r4, r8
   d81d4:	461a      	mov	r2, r3
   d81d6:	e7da      	b.n	d818e <__hexnan+0x30>
   d81d8:	2929      	cmp	r1, #41	; 0x29
   d81da:	d148      	bne.n	d826e <__hexnan+0x110>
   d81dc:	f10b 0301 	add.w	r3, fp, #1
   d81e0:	f8ca 3000 	str.w	r3, [sl]
   d81e4:	e014      	b.n	d8210 <__hexnan+0xb2>
   d81e6:	3201      	adds	r2, #1
   d81e8:	2a08      	cmp	r2, #8
   d81ea:	f109 0901 	add.w	r9, r9, #1
   d81ee:	dd06      	ble.n	d81fe <__hexnan+0xa0>
   d81f0:	42bc      	cmp	r4, r7
   d81f2:	d9cc      	bls.n	d818e <__hexnan+0x30>
   d81f4:	2300      	movs	r3, #0
   d81f6:	f844 3c04 	str.w	r3, [r4, #-4]
   d81fa:	2201      	movs	r2, #1
   d81fc:	3c04      	subs	r4, #4
   d81fe:	6821      	ldr	r1, [r4, #0]
   d8200:	f000 000f 	and.w	r0, r0, #15
   d8204:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d8208:	6020      	str	r0, [r4, #0]
   d820a:	e7c0      	b.n	d818e <__hexnan+0x30>
   d820c:	2208      	movs	r2, #8
   d820e:	e7be      	b.n	d818e <__hexnan+0x30>
   d8210:	f1b9 0f00 	cmp.w	r9, #0
   d8214:	d02b      	beq.n	d826e <__hexnan+0x110>
   d8216:	4544      	cmp	r4, r8
   d8218:	d205      	bcs.n	d8226 <__hexnan+0xc8>
   d821a:	2a07      	cmp	r2, #7
   d821c:	dc03      	bgt.n	d8226 <__hexnan+0xc8>
   d821e:	4641      	mov	r1, r8
   d8220:	4620      	mov	r0, r4
   d8222:	f7ff ff77 	bl	d8114 <L_shift>
   d8226:	42bc      	cmp	r4, r7
   d8228:	d90c      	bls.n	d8244 <__hexnan+0xe6>
   d822a:	463b      	mov	r3, r7
   d822c:	f854 2b04 	ldr.w	r2, [r4], #4
   d8230:	f843 2b04 	str.w	r2, [r3], #4
   d8234:	42a5      	cmp	r5, r4
   d8236:	d2f9      	bcs.n	d822c <__hexnan+0xce>
   d8238:	2200      	movs	r2, #0
   d823a:	f843 2b04 	str.w	r2, [r3], #4
   d823e:	429d      	cmp	r5, r3
   d8240:	d2fb      	bcs.n	d823a <__hexnan+0xdc>
   d8242:	e00b      	b.n	d825c <__hexnan+0xfe>
   d8244:	9b01      	ldr	r3, [sp, #4]
   d8246:	b14b      	cbz	r3, d825c <__hexnan+0xfe>
   d8248:	f1c3 0220 	rsb	r2, r3, #32
   d824c:	f04f 33ff 	mov.w	r3, #4294967295
   d8250:	40d3      	lsrs	r3, r2
   d8252:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8256:	4013      	ands	r3, r2
   d8258:	f846 3c04 	str.w	r3, [r6, #-4]
   d825c:	682b      	ldr	r3, [r5, #0]
   d825e:	b943      	cbnz	r3, d8272 <__hexnan+0x114>
   d8260:	42bd      	cmp	r5, r7
   d8262:	d102      	bne.n	d826a <__hexnan+0x10c>
   d8264:	2301      	movs	r3, #1
   d8266:	602b      	str	r3, [r5, #0]
   d8268:	e003      	b.n	d8272 <__hexnan+0x114>
   d826a:	3d04      	subs	r5, #4
   d826c:	e7f6      	b.n	d825c <__hexnan+0xfe>
   d826e:	2004      	movs	r0, #4
   d8270:	e000      	b.n	d8274 <__hexnan+0x116>
   d8272:	2005      	movs	r0, #5
   d8274:	b005      	add	sp, #20
   d8276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d827a <_Balloc>:
   d827a:	b570      	push	{r4, r5, r6, lr}
   d827c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d827e:	4604      	mov	r4, r0
   d8280:	460e      	mov	r6, r1
   d8282:	b93d      	cbnz	r5, d8294 <_Balloc+0x1a>
   d8284:	2010      	movs	r0, #16
   d8286:	f7fd f809 	bl	d529c <malloc>
   d828a:	6260      	str	r0, [r4, #36]	; 0x24
   d828c:	6045      	str	r5, [r0, #4]
   d828e:	6085      	str	r5, [r0, #8]
   d8290:	6005      	str	r5, [r0, #0]
   d8292:	60c5      	str	r5, [r0, #12]
   d8294:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8296:	68eb      	ldr	r3, [r5, #12]
   d8298:	b143      	cbz	r3, d82ac <_Balloc+0x32>
   d829a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d829c:	68db      	ldr	r3, [r3, #12]
   d829e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d82a2:	b178      	cbz	r0, d82c4 <_Balloc+0x4a>
   d82a4:	6802      	ldr	r2, [r0, #0]
   d82a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d82aa:	e017      	b.n	d82dc <_Balloc+0x62>
   d82ac:	2221      	movs	r2, #33	; 0x21
   d82ae:	2104      	movs	r1, #4
   d82b0:	4620      	mov	r0, r4
   d82b2:	f000 fbd2 	bl	d8a5a <_calloc_r>
   d82b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d82b8:	60e8      	str	r0, [r5, #12]
   d82ba:	68db      	ldr	r3, [r3, #12]
   d82bc:	2b00      	cmp	r3, #0
   d82be:	d1ec      	bne.n	d829a <_Balloc+0x20>
   d82c0:	2000      	movs	r0, #0
   d82c2:	bd70      	pop	{r4, r5, r6, pc}
   d82c4:	2101      	movs	r1, #1
   d82c6:	fa01 f506 	lsl.w	r5, r1, r6
   d82ca:	1d6a      	adds	r2, r5, #5
   d82cc:	0092      	lsls	r2, r2, #2
   d82ce:	4620      	mov	r0, r4
   d82d0:	f000 fbc3 	bl	d8a5a <_calloc_r>
   d82d4:	2800      	cmp	r0, #0
   d82d6:	d0f3      	beq.n	d82c0 <_Balloc+0x46>
   d82d8:	6046      	str	r6, [r0, #4]
   d82da:	6085      	str	r5, [r0, #8]
   d82dc:	2300      	movs	r3, #0
   d82de:	6103      	str	r3, [r0, #16]
   d82e0:	60c3      	str	r3, [r0, #12]
   d82e2:	bd70      	pop	{r4, r5, r6, pc}

000d82e4 <_Bfree>:
   d82e4:	b570      	push	{r4, r5, r6, lr}
   d82e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d82e8:	4606      	mov	r6, r0
   d82ea:	460d      	mov	r5, r1
   d82ec:	b93c      	cbnz	r4, d82fe <_Bfree+0x1a>
   d82ee:	2010      	movs	r0, #16
   d82f0:	f7fc ffd4 	bl	d529c <malloc>
   d82f4:	6270      	str	r0, [r6, #36]	; 0x24
   d82f6:	6044      	str	r4, [r0, #4]
   d82f8:	6084      	str	r4, [r0, #8]
   d82fa:	6004      	str	r4, [r0, #0]
   d82fc:	60c4      	str	r4, [r0, #12]
   d82fe:	b13d      	cbz	r5, d8310 <_Bfree+0x2c>
   d8300:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d8302:	686a      	ldr	r2, [r5, #4]
   d8304:	68db      	ldr	r3, [r3, #12]
   d8306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d830a:	6029      	str	r1, [r5, #0]
   d830c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d8310:	bd70      	pop	{r4, r5, r6, pc}

000d8312 <__multadd>:
   d8312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8316:	690d      	ldr	r5, [r1, #16]
   d8318:	461f      	mov	r7, r3
   d831a:	4606      	mov	r6, r0
   d831c:	460c      	mov	r4, r1
   d831e:	f101 0e14 	add.w	lr, r1, #20
   d8322:	2300      	movs	r3, #0
   d8324:	f8de 0000 	ldr.w	r0, [lr]
   d8328:	b281      	uxth	r1, r0
   d832a:	fb02 7101 	mla	r1, r2, r1, r7
   d832e:	0c0f      	lsrs	r7, r1, #16
   d8330:	0c00      	lsrs	r0, r0, #16
   d8332:	fb02 7000 	mla	r0, r2, r0, r7
   d8336:	b289      	uxth	r1, r1
   d8338:	3301      	adds	r3, #1
   d833a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d833e:	429d      	cmp	r5, r3
   d8340:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8344:	f84e 1b04 	str.w	r1, [lr], #4
   d8348:	dcec      	bgt.n	d8324 <__multadd+0x12>
   d834a:	b1d7      	cbz	r7, d8382 <__multadd+0x70>
   d834c:	68a3      	ldr	r3, [r4, #8]
   d834e:	429d      	cmp	r5, r3
   d8350:	db12      	blt.n	d8378 <__multadd+0x66>
   d8352:	6861      	ldr	r1, [r4, #4]
   d8354:	4630      	mov	r0, r6
   d8356:	3101      	adds	r1, #1
   d8358:	f7ff ff8f 	bl	d827a <_Balloc>
   d835c:	6922      	ldr	r2, [r4, #16]
   d835e:	3202      	adds	r2, #2
   d8360:	f104 010c 	add.w	r1, r4, #12
   d8364:	4680      	mov	r8, r0
   d8366:	0092      	lsls	r2, r2, #2
   d8368:	300c      	adds	r0, #12
   d836a:	f7fe fd2f 	bl	d6dcc <memcpy>
   d836e:	4621      	mov	r1, r4
   d8370:	4630      	mov	r0, r6
   d8372:	f7ff ffb7 	bl	d82e4 <_Bfree>
   d8376:	4644      	mov	r4, r8
   d8378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d837c:	3501      	adds	r5, #1
   d837e:	615f      	str	r7, [r3, #20]
   d8380:	6125      	str	r5, [r4, #16]
   d8382:	4620      	mov	r0, r4
   d8384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8388 <__s2b>:
   d8388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d838c:	460c      	mov	r4, r1
   d838e:	4615      	mov	r5, r2
   d8390:	461f      	mov	r7, r3
   d8392:	2209      	movs	r2, #9
   d8394:	3308      	adds	r3, #8
   d8396:	4606      	mov	r6, r0
   d8398:	fb93 f3f2 	sdiv	r3, r3, r2
   d839c:	2100      	movs	r1, #0
   d839e:	2201      	movs	r2, #1
   d83a0:	429a      	cmp	r2, r3
   d83a2:	da02      	bge.n	d83aa <__s2b+0x22>
   d83a4:	0052      	lsls	r2, r2, #1
   d83a6:	3101      	adds	r1, #1
   d83a8:	e7fa      	b.n	d83a0 <__s2b+0x18>
   d83aa:	4630      	mov	r0, r6
   d83ac:	f7ff ff65 	bl	d827a <_Balloc>
   d83b0:	9b08      	ldr	r3, [sp, #32]
   d83b2:	6143      	str	r3, [r0, #20]
   d83b4:	2d09      	cmp	r5, #9
   d83b6:	f04f 0301 	mov.w	r3, #1
   d83ba:	6103      	str	r3, [r0, #16]
   d83bc:	dd11      	ble.n	d83e2 <__s2b+0x5a>
   d83be:	f104 0809 	add.w	r8, r4, #9
   d83c2:	46c1      	mov	r9, r8
   d83c4:	442c      	add	r4, r5
   d83c6:	f819 3b01 	ldrb.w	r3, [r9], #1
   d83ca:	4601      	mov	r1, r0
   d83cc:	3b30      	subs	r3, #48	; 0x30
   d83ce:	220a      	movs	r2, #10
   d83d0:	4630      	mov	r0, r6
   d83d2:	f7ff ff9e 	bl	d8312 <__multadd>
   d83d6:	45a1      	cmp	r9, r4
   d83d8:	d1f5      	bne.n	d83c6 <__s2b+0x3e>
   d83da:	eb08 0405 	add.w	r4, r8, r5
   d83de:	3c08      	subs	r4, #8
   d83e0:	e001      	b.n	d83e6 <__s2b+0x5e>
   d83e2:	340a      	adds	r4, #10
   d83e4:	2509      	movs	r5, #9
   d83e6:	1b2d      	subs	r5, r5, r4
   d83e8:	1963      	adds	r3, r4, r5
   d83ea:	429f      	cmp	r7, r3
   d83ec:	dd08      	ble.n	d8400 <__s2b+0x78>
   d83ee:	f814 3b01 	ldrb.w	r3, [r4], #1
   d83f2:	4601      	mov	r1, r0
   d83f4:	3b30      	subs	r3, #48	; 0x30
   d83f6:	220a      	movs	r2, #10
   d83f8:	4630      	mov	r0, r6
   d83fa:	f7ff ff8a 	bl	d8312 <__multadd>
   d83fe:	e7f3      	b.n	d83e8 <__s2b+0x60>
   d8400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8404 <__hi0bits>:
   d8404:	0c03      	lsrs	r3, r0, #16
   d8406:	041b      	lsls	r3, r3, #16
   d8408:	b913      	cbnz	r3, d8410 <__hi0bits+0xc>
   d840a:	0400      	lsls	r0, r0, #16
   d840c:	2310      	movs	r3, #16
   d840e:	e000      	b.n	d8412 <__hi0bits+0xe>
   d8410:	2300      	movs	r3, #0
   d8412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8416:	bf04      	itt	eq
   d8418:	0200      	lsleq	r0, r0, #8
   d841a:	3308      	addeq	r3, #8
   d841c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8420:	bf04      	itt	eq
   d8422:	0100      	lsleq	r0, r0, #4
   d8424:	3304      	addeq	r3, #4
   d8426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d842a:	bf04      	itt	eq
   d842c:	0080      	lsleq	r0, r0, #2
   d842e:	3302      	addeq	r3, #2
   d8430:	2800      	cmp	r0, #0
   d8432:	db03      	blt.n	d843c <__hi0bits+0x38>
   d8434:	0042      	lsls	r2, r0, #1
   d8436:	d503      	bpl.n	d8440 <__hi0bits+0x3c>
   d8438:	1c58      	adds	r0, r3, #1
   d843a:	4770      	bx	lr
   d843c:	4618      	mov	r0, r3
   d843e:	4770      	bx	lr
   d8440:	2020      	movs	r0, #32
   d8442:	4770      	bx	lr

000d8444 <__lo0bits>:
   d8444:	6803      	ldr	r3, [r0, #0]
   d8446:	f013 0207 	ands.w	r2, r3, #7
   d844a:	d00b      	beq.n	d8464 <__lo0bits+0x20>
   d844c:	07d9      	lsls	r1, r3, #31
   d844e:	d422      	bmi.n	d8496 <__lo0bits+0x52>
   d8450:	079a      	lsls	r2, r3, #30
   d8452:	bf4b      	itete	mi
   d8454:	085b      	lsrmi	r3, r3, #1
   d8456:	089b      	lsrpl	r3, r3, #2
   d8458:	6003      	strmi	r3, [r0, #0]
   d845a:	6003      	strpl	r3, [r0, #0]
   d845c:	bf4c      	ite	mi
   d845e:	2001      	movmi	r0, #1
   d8460:	2002      	movpl	r0, #2
   d8462:	4770      	bx	lr
   d8464:	b299      	uxth	r1, r3
   d8466:	b909      	cbnz	r1, d846c <__lo0bits+0x28>
   d8468:	0c1b      	lsrs	r3, r3, #16
   d846a:	2210      	movs	r2, #16
   d846c:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8470:	bf04      	itt	eq
   d8472:	0a1b      	lsreq	r3, r3, #8
   d8474:	3208      	addeq	r2, #8
   d8476:	0719      	lsls	r1, r3, #28
   d8478:	bf04      	itt	eq
   d847a:	091b      	lsreq	r3, r3, #4
   d847c:	3204      	addeq	r2, #4
   d847e:	0799      	lsls	r1, r3, #30
   d8480:	bf04      	itt	eq
   d8482:	089b      	lsreq	r3, r3, #2
   d8484:	3202      	addeq	r2, #2
   d8486:	07d9      	lsls	r1, r3, #31
   d8488:	d402      	bmi.n	d8490 <__lo0bits+0x4c>
   d848a:	085b      	lsrs	r3, r3, #1
   d848c:	d005      	beq.n	d849a <__lo0bits+0x56>
   d848e:	3201      	adds	r2, #1
   d8490:	6003      	str	r3, [r0, #0]
   d8492:	4610      	mov	r0, r2
   d8494:	4770      	bx	lr
   d8496:	2000      	movs	r0, #0
   d8498:	4770      	bx	lr
   d849a:	2020      	movs	r0, #32
   d849c:	4770      	bx	lr

000d849e <__i2b>:
   d849e:	b510      	push	{r4, lr}
   d84a0:	460c      	mov	r4, r1
   d84a2:	2101      	movs	r1, #1
   d84a4:	f7ff fee9 	bl	d827a <_Balloc>
   d84a8:	2201      	movs	r2, #1
   d84aa:	6144      	str	r4, [r0, #20]
   d84ac:	6102      	str	r2, [r0, #16]
   d84ae:	bd10      	pop	{r4, pc}

000d84b0 <__multiply>:
   d84b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d84b4:	4614      	mov	r4, r2
   d84b6:	690a      	ldr	r2, [r1, #16]
   d84b8:	6923      	ldr	r3, [r4, #16]
   d84ba:	429a      	cmp	r2, r3
   d84bc:	bfb8      	it	lt
   d84be:	460b      	movlt	r3, r1
   d84c0:	4688      	mov	r8, r1
   d84c2:	bfbc      	itt	lt
   d84c4:	46a0      	movlt	r8, r4
   d84c6:	461c      	movlt	r4, r3
   d84c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d84cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d84d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d84d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d84d8:	eb07 0609 	add.w	r6, r7, r9
   d84dc:	429e      	cmp	r6, r3
   d84de:	bfc8      	it	gt
   d84e0:	3101      	addgt	r1, #1
   d84e2:	f7ff feca 	bl	d827a <_Balloc>
   d84e6:	f100 0514 	add.w	r5, r0, #20
   d84ea:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d84ee:	462b      	mov	r3, r5
   d84f0:	2200      	movs	r2, #0
   d84f2:	4563      	cmp	r3, ip
   d84f4:	d202      	bcs.n	d84fc <__multiply+0x4c>
   d84f6:	f843 2b04 	str.w	r2, [r3], #4
   d84fa:	e7fa      	b.n	d84f2 <__multiply+0x42>
   d84fc:	f104 0214 	add.w	r2, r4, #20
   d8500:	f108 0114 	add.w	r1, r8, #20
   d8504:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8508:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d850c:	9300      	str	r3, [sp, #0]
   d850e:	9b00      	ldr	r3, [sp, #0]
   d8510:	9201      	str	r2, [sp, #4]
   d8512:	4293      	cmp	r3, r2
   d8514:	d957      	bls.n	d85c6 <__multiply+0x116>
   d8516:	f8b2 b000 	ldrh.w	fp, [r2]
   d851a:	f1bb 0f00 	cmp.w	fp, #0
   d851e:	d023      	beq.n	d8568 <__multiply+0xb8>
   d8520:	4689      	mov	r9, r1
   d8522:	46ae      	mov	lr, r5
   d8524:	f04f 0800 	mov.w	r8, #0
   d8528:	f859 4b04 	ldr.w	r4, [r9], #4
   d852c:	f8be a000 	ldrh.w	sl, [lr]
   d8530:	b2a3      	uxth	r3, r4
   d8532:	fb0b a303 	mla	r3, fp, r3, sl
   d8536:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d853a:	f8de 4000 	ldr.w	r4, [lr]
   d853e:	4443      	add	r3, r8
   d8540:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8544:	fb0b 840a 	mla	r4, fp, sl, r8
   d8548:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d854c:	46f2      	mov	sl, lr
   d854e:	b29b      	uxth	r3, r3
   d8550:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8554:	454f      	cmp	r7, r9
   d8556:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d855a:	f84a 3b04 	str.w	r3, [sl], #4
   d855e:	d901      	bls.n	d8564 <__multiply+0xb4>
   d8560:	46d6      	mov	lr, sl
   d8562:	e7e1      	b.n	d8528 <__multiply+0x78>
   d8564:	f8ce 8004 	str.w	r8, [lr, #4]
   d8568:	9b01      	ldr	r3, [sp, #4]
   d856a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d856e:	3204      	adds	r2, #4
   d8570:	f1ba 0f00 	cmp.w	sl, #0
   d8574:	d021      	beq.n	d85ba <__multiply+0x10a>
   d8576:	682b      	ldr	r3, [r5, #0]
   d8578:	462c      	mov	r4, r5
   d857a:	4689      	mov	r9, r1
   d857c:	f04f 0800 	mov.w	r8, #0
   d8580:	f8b9 e000 	ldrh.w	lr, [r9]
   d8584:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d8588:	fb0a be0e 	mla	lr, sl, lr, fp
   d858c:	44f0      	add	r8, lr
   d858e:	46a3      	mov	fp, r4
   d8590:	b29b      	uxth	r3, r3
   d8592:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d8596:	f84b 3b04 	str.w	r3, [fp], #4
   d859a:	f859 3b04 	ldr.w	r3, [r9], #4
   d859e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d85a2:	0c1b      	lsrs	r3, r3, #16
   d85a4:	fb0a e303 	mla	r3, sl, r3, lr
   d85a8:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d85ac:	454f      	cmp	r7, r9
   d85ae:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d85b2:	d901      	bls.n	d85b8 <__multiply+0x108>
   d85b4:	465c      	mov	r4, fp
   d85b6:	e7e3      	b.n	d8580 <__multiply+0xd0>
   d85b8:	6063      	str	r3, [r4, #4]
   d85ba:	3504      	adds	r5, #4
   d85bc:	e7a7      	b.n	d850e <__multiply+0x5e>
   d85be:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d85c2:	b913      	cbnz	r3, d85ca <__multiply+0x11a>
   d85c4:	3e01      	subs	r6, #1
   d85c6:	2e00      	cmp	r6, #0
   d85c8:	dcf9      	bgt.n	d85be <__multiply+0x10e>
   d85ca:	6106      	str	r6, [r0, #16]
   d85cc:	b003      	add	sp, #12
   d85ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d85d4 <__pow5mult>:
   d85d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d85d8:	4615      	mov	r5, r2
   d85da:	f012 0203 	ands.w	r2, r2, #3
   d85de:	4606      	mov	r6, r0
   d85e0:	460f      	mov	r7, r1
   d85e2:	d007      	beq.n	d85f4 <__pow5mult+0x20>
   d85e4:	3a01      	subs	r2, #1
   d85e6:	4c21      	ldr	r4, [pc, #132]	; (d866c <__pow5mult+0x98>)
   d85e8:	2300      	movs	r3, #0
   d85ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d85ee:	f7ff fe90 	bl	d8312 <__multadd>
   d85f2:	4607      	mov	r7, r0
   d85f4:	10ad      	asrs	r5, r5, #2
   d85f6:	d036      	beq.n	d8666 <__pow5mult+0x92>
   d85f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d85fa:	b93c      	cbnz	r4, d860c <__pow5mult+0x38>
   d85fc:	2010      	movs	r0, #16
   d85fe:	f7fc fe4d 	bl	d529c <malloc>
   d8602:	6270      	str	r0, [r6, #36]	; 0x24
   d8604:	6044      	str	r4, [r0, #4]
   d8606:	6084      	str	r4, [r0, #8]
   d8608:	6004      	str	r4, [r0, #0]
   d860a:	60c4      	str	r4, [r0, #12]
   d860c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8610:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8614:	b94c      	cbnz	r4, d862a <__pow5mult+0x56>
   d8616:	f240 2171 	movw	r1, #625	; 0x271
   d861a:	4630      	mov	r0, r6
   d861c:	f7ff ff3f 	bl	d849e <__i2b>
   d8620:	2300      	movs	r3, #0
   d8622:	f8c8 0008 	str.w	r0, [r8, #8]
   d8626:	4604      	mov	r4, r0
   d8628:	6003      	str	r3, [r0, #0]
   d862a:	f04f 0800 	mov.w	r8, #0
   d862e:	07eb      	lsls	r3, r5, #31
   d8630:	d50a      	bpl.n	d8648 <__pow5mult+0x74>
   d8632:	4639      	mov	r1, r7
   d8634:	4622      	mov	r2, r4
   d8636:	4630      	mov	r0, r6
   d8638:	f7ff ff3a 	bl	d84b0 <__multiply>
   d863c:	4639      	mov	r1, r7
   d863e:	4681      	mov	r9, r0
   d8640:	4630      	mov	r0, r6
   d8642:	f7ff fe4f 	bl	d82e4 <_Bfree>
   d8646:	464f      	mov	r7, r9
   d8648:	106d      	asrs	r5, r5, #1
   d864a:	d00c      	beq.n	d8666 <__pow5mult+0x92>
   d864c:	6820      	ldr	r0, [r4, #0]
   d864e:	b108      	cbz	r0, d8654 <__pow5mult+0x80>
   d8650:	4604      	mov	r4, r0
   d8652:	e7ec      	b.n	d862e <__pow5mult+0x5a>
   d8654:	4622      	mov	r2, r4
   d8656:	4621      	mov	r1, r4
   d8658:	4630      	mov	r0, r6
   d865a:	f7ff ff29 	bl	d84b0 <__multiply>
   d865e:	6020      	str	r0, [r4, #0]
   d8660:	f8c0 8000 	str.w	r8, [r0]
   d8664:	e7f4      	b.n	d8650 <__pow5mult+0x7c>
   d8666:	4638      	mov	r0, r7
   d8668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d866c:	000d92b8 	.word	0x000d92b8

000d8670 <__lshift>:
   d8670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8674:	460c      	mov	r4, r1
   d8676:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d867a:	6926      	ldr	r6, [r4, #16]
   d867c:	6849      	ldr	r1, [r1, #4]
   d867e:	68a3      	ldr	r3, [r4, #8]
   d8680:	4456      	add	r6, sl
   d8682:	4607      	mov	r7, r0
   d8684:	4691      	mov	r9, r2
   d8686:	1c75      	adds	r5, r6, #1
   d8688:	42ab      	cmp	r3, r5
   d868a:	da02      	bge.n	d8692 <__lshift+0x22>
   d868c:	3101      	adds	r1, #1
   d868e:	005b      	lsls	r3, r3, #1
   d8690:	e7fa      	b.n	d8688 <__lshift+0x18>
   d8692:	4638      	mov	r0, r7
   d8694:	f7ff fdf1 	bl	d827a <_Balloc>
   d8698:	2300      	movs	r3, #0
   d869a:	4680      	mov	r8, r0
   d869c:	f100 0114 	add.w	r1, r0, #20
   d86a0:	461a      	mov	r2, r3
   d86a2:	4553      	cmp	r3, sl
   d86a4:	da03      	bge.n	d86ae <__lshift+0x3e>
   d86a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d86aa:	3301      	adds	r3, #1
   d86ac:	e7f9      	b.n	d86a2 <__lshift+0x32>
   d86ae:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d86b2:	6920      	ldr	r0, [r4, #16]
   d86b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d86b8:	f019 091f 	ands.w	r9, r9, #31
   d86bc:	f104 0114 	add.w	r1, r4, #20
   d86c0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d86c4:	d014      	beq.n	d86f0 <__lshift+0x80>
   d86c6:	f1c9 0c20 	rsb	ip, r9, #32
   d86ca:	2200      	movs	r2, #0
   d86cc:	6808      	ldr	r0, [r1, #0]
   d86ce:	fa00 f009 	lsl.w	r0, r0, r9
   d86d2:	4302      	orrs	r2, r0
   d86d4:	469a      	mov	sl, r3
   d86d6:	f843 2b04 	str.w	r2, [r3], #4
   d86da:	f851 2b04 	ldr.w	r2, [r1], #4
   d86de:	458e      	cmp	lr, r1
   d86e0:	fa22 f20c 	lsr.w	r2, r2, ip
   d86e4:	d8f2      	bhi.n	d86cc <__lshift+0x5c>
   d86e6:	f8ca 2004 	str.w	r2, [sl, #4]
   d86ea:	b142      	cbz	r2, d86fe <__lshift+0x8e>
   d86ec:	1cb5      	adds	r5, r6, #2
   d86ee:	e006      	b.n	d86fe <__lshift+0x8e>
   d86f0:	3b04      	subs	r3, #4
   d86f2:	f851 2b04 	ldr.w	r2, [r1], #4
   d86f6:	f843 2f04 	str.w	r2, [r3, #4]!
   d86fa:	458e      	cmp	lr, r1
   d86fc:	d8f9      	bhi.n	d86f2 <__lshift+0x82>
   d86fe:	3d01      	subs	r5, #1
   d8700:	4638      	mov	r0, r7
   d8702:	f8c8 5010 	str.w	r5, [r8, #16]
   d8706:	4621      	mov	r1, r4
   d8708:	f7ff fdec 	bl	d82e4 <_Bfree>
   d870c:	4640      	mov	r0, r8
   d870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8712 <__mcmp>:
   d8712:	6903      	ldr	r3, [r0, #16]
   d8714:	690a      	ldr	r2, [r1, #16]
   d8716:	1a9b      	subs	r3, r3, r2
   d8718:	b510      	push	{r4, lr}
   d871a:	d111      	bne.n	d8740 <__mcmp+0x2e>
   d871c:	0092      	lsls	r2, r2, #2
   d871e:	3014      	adds	r0, #20
   d8720:	3114      	adds	r1, #20
   d8722:	1883      	adds	r3, r0, r2
   d8724:	440a      	add	r2, r1
   d8726:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d872a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d872e:	428c      	cmp	r4, r1
   d8730:	d002      	beq.n	d8738 <__mcmp+0x26>
   d8732:	d307      	bcc.n	d8744 <__mcmp+0x32>
   d8734:	2001      	movs	r0, #1
   d8736:	bd10      	pop	{r4, pc}
   d8738:	4298      	cmp	r0, r3
   d873a:	d3f4      	bcc.n	d8726 <__mcmp+0x14>
   d873c:	2000      	movs	r0, #0
   d873e:	bd10      	pop	{r4, pc}
   d8740:	4618      	mov	r0, r3
   d8742:	bd10      	pop	{r4, pc}
   d8744:	f04f 30ff 	mov.w	r0, #4294967295
   d8748:	bd10      	pop	{r4, pc}

000d874a <__mdiff>:
   d874a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d874e:	460c      	mov	r4, r1
   d8750:	4607      	mov	r7, r0
   d8752:	4611      	mov	r1, r2
   d8754:	4620      	mov	r0, r4
   d8756:	4615      	mov	r5, r2
   d8758:	f7ff ffdb 	bl	d8712 <__mcmp>
   d875c:	1e06      	subs	r6, r0, #0
   d875e:	d108      	bne.n	d8772 <__mdiff+0x28>
   d8760:	4631      	mov	r1, r6
   d8762:	4638      	mov	r0, r7
   d8764:	f7ff fd89 	bl	d827a <_Balloc>
   d8768:	2301      	movs	r3, #1
   d876a:	6103      	str	r3, [r0, #16]
   d876c:	6146      	str	r6, [r0, #20]
   d876e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8772:	bfbc      	itt	lt
   d8774:	4623      	movlt	r3, r4
   d8776:	462c      	movlt	r4, r5
   d8778:	4638      	mov	r0, r7
   d877a:	6861      	ldr	r1, [r4, #4]
   d877c:	bfba      	itte	lt
   d877e:	461d      	movlt	r5, r3
   d8780:	2601      	movlt	r6, #1
   d8782:	2600      	movge	r6, #0
   d8784:	f7ff fd79 	bl	d827a <_Balloc>
   d8788:	692b      	ldr	r3, [r5, #16]
   d878a:	60c6      	str	r6, [r0, #12]
   d878c:	6926      	ldr	r6, [r4, #16]
   d878e:	f105 0914 	add.w	r9, r5, #20
   d8792:	3414      	adds	r4, #20
   d8794:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d8798:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d879c:	f100 0514 	add.w	r5, r0, #20
   d87a0:	f04f 0c00 	mov.w	ip, #0
   d87a4:	f854 3b04 	ldr.w	r3, [r4], #4
   d87a8:	f859 2b04 	ldr.w	r2, [r9], #4
   d87ac:	fa1c f183 	uxtah	r1, ip, r3
   d87b0:	fa1f fe82 	uxth.w	lr, r2
   d87b4:	0c12      	lsrs	r2, r2, #16
   d87b6:	ebce 0101 	rsb	r1, lr, r1
   d87ba:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d87be:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d87c2:	b289      	uxth	r1, r1
   d87c4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d87c8:	45c8      	cmp	r8, r9
   d87ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d87ce:	46a6      	mov	lr, r4
   d87d0:	f845 3b04 	str.w	r3, [r5], #4
   d87d4:	d8e6      	bhi.n	d87a4 <__mdiff+0x5a>
   d87d6:	45be      	cmp	lr, r7
   d87d8:	d20e      	bcs.n	d87f8 <__mdiff+0xae>
   d87da:	f85e 1b04 	ldr.w	r1, [lr], #4
   d87de:	fa1c f281 	uxtah	r2, ip, r1
   d87e2:	1413      	asrs	r3, r2, #16
   d87e4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d87e8:	b292      	uxth	r2, r2
   d87ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d87ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d87f2:	f845 2b04 	str.w	r2, [r5], #4
   d87f6:	e7ee      	b.n	d87d6 <__mdiff+0x8c>
   d87f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d87fc:	b90b      	cbnz	r3, d8802 <__mdiff+0xb8>
   d87fe:	3e01      	subs	r6, #1
   d8800:	e7fa      	b.n	d87f8 <__mdiff+0xae>
   d8802:	6106      	str	r6, [r0, #16]
   d8804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8808 <__ulp>:
   d8808:	4b12      	ldr	r3, [pc, #72]	; (d8854 <__ulp+0x4c>)
   d880a:	ee10 2a90 	vmov	r2, s1
   d880e:	401a      	ands	r2, r3
   d8810:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d8814:	2b00      	cmp	r3, #0
   d8816:	dd02      	ble.n	d881e <__ulp+0x16>
   d8818:	2000      	movs	r0, #0
   d881a:	4619      	mov	r1, r3
   d881c:	e017      	b.n	d884e <__ulp+0x46>
   d881e:	425b      	negs	r3, r3
   d8820:	151b      	asrs	r3, r3, #20
   d8822:	2b13      	cmp	r3, #19
   d8824:	f04f 0000 	mov.w	r0, #0
   d8828:	f04f 0100 	mov.w	r1, #0
   d882c:	dc04      	bgt.n	d8838 <__ulp+0x30>
   d882e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d8832:	fa42 f103 	asr.w	r1, r2, r3
   d8836:	e00a      	b.n	d884e <__ulp+0x46>
   d8838:	3b14      	subs	r3, #20
   d883a:	2b1e      	cmp	r3, #30
   d883c:	f04f 0201 	mov.w	r2, #1
   d8840:	bfda      	itte	le
   d8842:	f1c3 031f 	rsble	r3, r3, #31
   d8846:	fa02 f303 	lslle.w	r3, r2, r3
   d884a:	4613      	movgt	r3, r2
   d884c:	4618      	mov	r0, r3
   d884e:	ec41 0b10 	vmov	d0, r0, r1
   d8852:	4770      	bx	lr
   d8854:	7ff00000 	.word	0x7ff00000

000d8858 <__b2d>:
   d8858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d885a:	6905      	ldr	r5, [r0, #16]
   d885c:	f100 0614 	add.w	r6, r0, #20
   d8860:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d8864:	1f2f      	subs	r7, r5, #4
   d8866:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d886a:	4620      	mov	r0, r4
   d886c:	f7ff fdca 	bl	d8404 <__hi0bits>
   d8870:	f1c0 0320 	rsb	r3, r0, #32
   d8874:	280a      	cmp	r0, #10
   d8876:	600b      	str	r3, [r1, #0]
   d8878:	dc14      	bgt.n	d88a4 <__b2d+0x4c>
   d887a:	f1c0 0e0b 	rsb	lr, r0, #11
   d887e:	fa24 f10e 	lsr.w	r1, r4, lr
   d8882:	42be      	cmp	r6, r7
   d8884:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d8888:	bf34      	ite	cc
   d888a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d888e:	2100      	movcs	r1, #0
   d8890:	3015      	adds	r0, #21
   d8892:	fa04 f000 	lsl.w	r0, r4, r0
   d8896:	fa21 f10e 	lsr.w	r1, r1, lr
   d889a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d889e:	ea40 0201 	orr.w	r2, r0, r1
   d88a2:	e023      	b.n	d88ec <__b2d+0x94>
   d88a4:	42be      	cmp	r6, r7
   d88a6:	bf3a      	itte	cc
   d88a8:	f1a5 0708 	subcc.w	r7, r5, #8
   d88ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d88b0:	2100      	movcs	r1, #0
   d88b2:	380b      	subs	r0, #11
   d88b4:	d015      	beq.n	d88e2 <__b2d+0x8a>
   d88b6:	4084      	lsls	r4, r0
   d88b8:	f1c0 0520 	rsb	r5, r0, #32
   d88bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d88c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d88c4:	42b7      	cmp	r7, r6
   d88c6:	fa21 fe05 	lsr.w	lr, r1, r5
   d88ca:	ea44 030e 	orr.w	r3, r4, lr
   d88ce:	bf8c      	ite	hi
   d88d0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d88d4:	2400      	movls	r4, #0
   d88d6:	fa01 f000 	lsl.w	r0, r1, r0
   d88da:	40ec      	lsrs	r4, r5
   d88dc:	ea40 0204 	orr.w	r2, r0, r4
   d88e0:	e004      	b.n	d88ec <__b2d+0x94>
   d88e2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d88e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d88ea:	460a      	mov	r2, r1
   d88ec:	ec43 2b10 	vmov	d0, r2, r3
   d88f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88f2 <__d2b>:
   d88f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d88f6:	460e      	mov	r6, r1
   d88f8:	2101      	movs	r1, #1
   d88fa:	ec59 8b10 	vmov	r8, r9, d0
   d88fe:	4615      	mov	r5, r2
   d8900:	f7ff fcbb 	bl	d827a <_Balloc>
   d8904:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d8908:	4607      	mov	r7, r0
   d890a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d890e:	b10c      	cbz	r4, d8914 <__d2b+0x22>
   d8910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8914:	9301      	str	r3, [sp, #4]
   d8916:	f1b8 0f00 	cmp.w	r8, #0
   d891a:	d019      	beq.n	d8950 <__d2b+0x5e>
   d891c:	a802      	add	r0, sp, #8
   d891e:	f840 8d08 	str.w	r8, [r0, #-8]!
   d8922:	f7ff fd8f 	bl	d8444 <__lo0bits>
   d8926:	9b00      	ldr	r3, [sp, #0]
   d8928:	b148      	cbz	r0, d893e <__d2b+0x4c>
   d892a:	9a01      	ldr	r2, [sp, #4]
   d892c:	f1c0 0120 	rsb	r1, r0, #32
   d8930:	fa02 f101 	lsl.w	r1, r2, r1
   d8934:	430b      	orrs	r3, r1
   d8936:	40c2      	lsrs	r2, r0
   d8938:	617b      	str	r3, [r7, #20]
   d893a:	9201      	str	r2, [sp, #4]
   d893c:	e000      	b.n	d8940 <__d2b+0x4e>
   d893e:	617b      	str	r3, [r7, #20]
   d8940:	9b01      	ldr	r3, [sp, #4]
   d8942:	61bb      	str	r3, [r7, #24]
   d8944:	2b00      	cmp	r3, #0
   d8946:	bf14      	ite	ne
   d8948:	2102      	movne	r1, #2
   d894a:	2101      	moveq	r1, #1
   d894c:	6139      	str	r1, [r7, #16]
   d894e:	e007      	b.n	d8960 <__d2b+0x6e>
   d8950:	a801      	add	r0, sp, #4
   d8952:	f7ff fd77 	bl	d8444 <__lo0bits>
   d8956:	9b01      	ldr	r3, [sp, #4]
   d8958:	617b      	str	r3, [r7, #20]
   d895a:	2101      	movs	r1, #1
   d895c:	6139      	str	r1, [r7, #16]
   d895e:	3020      	adds	r0, #32
   d8960:	b134      	cbz	r4, d8970 <__d2b+0x7e>
   d8962:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d8966:	4404      	add	r4, r0
   d8968:	6034      	str	r4, [r6, #0]
   d896a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d896e:	e009      	b.n	d8984 <__d2b+0x92>
   d8970:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d8974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8978:	6030      	str	r0, [r6, #0]
   d897a:	6918      	ldr	r0, [r3, #16]
   d897c:	f7ff fd42 	bl	d8404 <__hi0bits>
   d8980:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d8984:	6028      	str	r0, [r5, #0]
   d8986:	4638      	mov	r0, r7
   d8988:	b003      	add	sp, #12
   d898a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d898e <__ratio>:
   d898e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8992:	4688      	mov	r8, r1
   d8994:	4669      	mov	r1, sp
   d8996:	4681      	mov	r9, r0
   d8998:	f7ff ff5e 	bl	d8858 <__b2d>
   d899c:	a901      	add	r1, sp, #4
   d899e:	4640      	mov	r0, r8
   d89a0:	ec55 4b10 	vmov	r4, r5, d0
   d89a4:	f7ff ff58 	bl	d8858 <__b2d>
   d89a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d89ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d89b0:	1a9a      	subs	r2, r3, r2
   d89b2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d89b6:	1ac9      	subs	r1, r1, r3
   d89b8:	ec57 6b10 	vmov	r6, r7, d0
   d89bc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d89c0:	2b00      	cmp	r3, #0
   d89c2:	bfcc      	ite	gt
   d89c4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d89c8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d89cc:	4632      	mov	r2, r6
   d89ce:	463b      	mov	r3, r7
   d89d0:	4620      	mov	r0, r4
   d89d2:	4629      	mov	r1, r5
   d89d4:	f7fd ffc2 	bl	d695c <__aeabi_ddiv>
   d89d8:	ec41 0b10 	vmov	d0, r0, r1
   d89dc:	b003      	add	sp, #12
   d89de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d89e2 <__copybits>:
   d89e2:	3901      	subs	r1, #1
   d89e4:	b510      	push	{r4, lr}
   d89e6:	1149      	asrs	r1, r1, #5
   d89e8:	6914      	ldr	r4, [r2, #16]
   d89ea:	3101      	adds	r1, #1
   d89ec:	f102 0314 	add.w	r3, r2, #20
   d89f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d89f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d89f8:	42a3      	cmp	r3, r4
   d89fa:	4602      	mov	r2, r0
   d89fc:	d204      	bcs.n	d8a08 <__copybits+0x26>
   d89fe:	f853 2b04 	ldr.w	r2, [r3], #4
   d8a02:	f840 2b04 	str.w	r2, [r0], #4
   d8a06:	e7f7      	b.n	d89f8 <__copybits+0x16>
   d8a08:	2300      	movs	r3, #0
   d8a0a:	428a      	cmp	r2, r1
   d8a0c:	d202      	bcs.n	d8a14 <__copybits+0x32>
   d8a0e:	f842 3b04 	str.w	r3, [r2], #4
   d8a12:	e7fa      	b.n	d8a0a <__copybits+0x28>
   d8a14:	bd10      	pop	{r4, pc}

000d8a16 <__any_on>:
   d8a16:	f100 0214 	add.w	r2, r0, #20
   d8a1a:	6900      	ldr	r0, [r0, #16]
   d8a1c:	114b      	asrs	r3, r1, #5
   d8a1e:	4298      	cmp	r0, r3
   d8a20:	b510      	push	{r4, lr}
   d8a22:	db0c      	blt.n	d8a3e <__any_on+0x28>
   d8a24:	dd0c      	ble.n	d8a40 <__any_on+0x2a>
   d8a26:	f011 011f 	ands.w	r1, r1, #31
   d8a2a:	d009      	beq.n	d8a40 <__any_on+0x2a>
   d8a2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d8a30:	fa24 f001 	lsr.w	r0, r4, r1
   d8a34:	fa00 f101 	lsl.w	r1, r0, r1
   d8a38:	428c      	cmp	r4, r1
   d8a3a:	d10c      	bne.n	d8a56 <__any_on+0x40>
   d8a3c:	e000      	b.n	d8a40 <__any_on+0x2a>
   d8a3e:	4603      	mov	r3, r0
   d8a40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8a44:	4293      	cmp	r3, r2
   d8a46:	d904      	bls.n	d8a52 <__any_on+0x3c>
   d8a48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d8a4c:	2900      	cmp	r1, #0
   d8a4e:	d0f9      	beq.n	d8a44 <__any_on+0x2e>
   d8a50:	e001      	b.n	d8a56 <__any_on+0x40>
   d8a52:	2000      	movs	r0, #0
   d8a54:	bd10      	pop	{r4, pc}
   d8a56:	2001      	movs	r0, #1
   d8a58:	bd10      	pop	{r4, pc}

000d8a5a <_calloc_r>:
   d8a5a:	b538      	push	{r3, r4, r5, lr}
   d8a5c:	fb02 f401 	mul.w	r4, r2, r1
   d8a60:	4621      	mov	r1, r4
   d8a62:	f7fc fc33 	bl	d52cc <_malloc_r>
   d8a66:	4605      	mov	r5, r0
   d8a68:	b118      	cbz	r0, d8a72 <_calloc_r+0x18>
   d8a6a:	4622      	mov	r2, r4
   d8a6c:	2100      	movs	r1, #0
   d8a6e:	f7fe f9b8 	bl	d6de2 <memset>
   d8a72:	4628      	mov	r0, r5
   d8a74:	bd38      	pop	{r3, r4, r5, pc}

000d8a76 <link_code_end>:
	...

000d8a78 <dynalib_user>:
   d8a78:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8a88:	0000 0000                                   ....

000d8a8c <_ZTV5Timer>:
	...
   d8a94:	4155 000d 419d 000d 40dd 000d 6e49 7469     UA...A...@..Init
   d8aa4:	6169 696c 697a 676e 2e2e 002e 2931 4120     ializing....1) A
   d8ab4:	746e 6e65 616e 5320 6174 7574 2073 2428     ntenna Status ($
   d8ac4:	4750 4f54 2950 3d00 3d3d 3d3d 3d3d 3d3d     PGTOP).=========
   d8ad4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   d8ae4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   d8af4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 003d 6f43     =============.Co
   d8b04:	6d6d 6e61 2064 4449 203a 4100 746e 6e65     mmand ID: .Anten
   d8b14:	616e 5320 6174 7574 3a73 0020 2932 4720     na Status: .2) G
   d8b24:	6f6c 6162 206c 6f50 6973 6974 6e6f 6e69     lobal Positionin
   d8b34:	2067 7953 7473 6d65 4620 7869 6465 4420     g System Fixed D
   d8b44:	7461 2061 2428 5047 4747 2941 5500 4354     ata ($GPGGA).UTC
   d8b54:	5420 6d69 3a65 0020 614c 6974 7574 6564      Time: .Latitude
   d8b64:	203a 4e00 726f 6874 532f 756f 6874 6e49     : .North/SouthIn
   d8b74:	6964 6163 6f74 3a72 0020 6f4c 676e 7469     dicator: .Longit
   d8b84:	6475 3a65 0020 6145 7473 572f 7365 4974     ude: .East/WestI
   d8b94:	646e 6369 7461 726f 203a 5000 736f 7469     ndicator: .Posit
   d8ba4:	6f69 206e 6946 2078 6e49 6964 6163 6f74     ion Fix Indicato
   d8bb4:	3a72 0020 6153 6574 6c6c 7469 7365 5520     r: .Satellites U
   d8bc4:	6573 3a64 0020 6f48 6972 6f7a 746e 6c61     sed: .Horizontal
   d8bd4:	4420 6c69 7475 6f69 206e 666f 5020 6572      Dilution of Pre
   d8be4:	6963 6973 6e6f 203a 4100 746c 7469 6475     cision: .Altitud
   d8bf4:	3a65 0020 6547 696f 6164 206c 6553 6170     e: .Geoidal Sepa
   d8c04:	6172 6974 6e6f 203a 4100 6567 6f20 2066     ration: .Age of 
   d8c14:	6944 6666 202e 6f43 7272 3a2e 0020 2933     Diff. Corr.: .3)
   d8c24:	5220 6365 6d6f 656d 646e 6465 4d20 6e69      Recommended Min
   d8c34:	6d69 6d75 4e20 7661 6769 7461 6f69 206e     imum Navigation 
   d8c44:	6e49 6f66 6d72 7461 6f69 206e 2428 5047     Information ($GP
   d8c54:	4d52 2943 5300 6570 6465 4f20 6576 2072     RMC).Speed Over 
   d8c64:	7247 756f 646e 203a 4300 756f 7372 2065     Ground: .Course 
   d8c74:	764f 7265 4720 6f72 6e75 3a64 0020 6144     Over Ground: .Da
   d8c84:	6574 203a 4d00 6761 656e 6974 2063 6156     te: .Magnetic Va
   d8c94:	6972 7461 6f69 3a6e 0020 6f4d 6564 203a     riation: .Mode: 
   d8ca4:	2a00 2400 2c00 0100                              .*.$.,.

000d8cab <CSWTCH.25>:
   d8cab:	0201 0403 0605 0807 0009 0000 0000 0000     ................
   d8cbb:	0b0a 0d0c 0f0e 4724 4750 4147 2400 5047     ......$GPGGA.$GP
   d8ccb:	5347 0041 4724 4750 5653 2400 5047 4d52     GSA.$GPGSV.$GPRM
   d8cdb:	0043 4724 5650 4754 2400 4750 4f54 0050     C.$GPVTG.$PGTOP.
	...

000d8cec <_ZTV3Rmc>:
	...
   d8cf4:	4beb 000d                                   .K..

000d8cf8 <_ZTV3Gga>:
	...
   d8d00:	4b2b 000d                                   +K..

000d8d04 <_ZTV5Pgtop>:
	...
   d8d0c:	4b01 000d 5024 544d 324b 3135 392c 3036     .K..$PMTK251,960
   d8d1c:	2a30 3731 2400 4d50 4b54 3232 2c30 3035     0*17.$PMTK220,50
   d8d2c:	3030 312a 0042 5024 544d 334b 3030 312c     00*1B.$PMTK300,1
   d8d3c:	3030 2c30 2c30 2c30 2c30 2a30 4331 2400     000,0,0,0,0*1C.$
   d8d4c:	4d50 4b54 3133 2c34 2c30 2c31 2c30 2c31     PMTK314,0,1,0,1,
   d8d5c:	2c30 2c30 2c30 2c30 2c30 2c30 2c30 2c30     0,0,0,0,0,0,0,0,
   d8d6c:	2c30 2c30 2c30 2c30 2c30 2c30 2a30 3832     0,0,0,0,0,0,0*28
   d8d7c:	2400 4d50 4b54 3033 2c31 2a32 4532 2400     .$PMTK301,2*2E.$
   d8d8c:	4750 4d43 2c44 3333 312c 362a 0043 7542     PGCMD,33,1*6C.Bu
   d8d9c:	6666 7265 4f20 6576 7572 3a6e 2720 0000     ffer Overun: '..

000d8dac <_ZTVN5spark13EthernetClassE>:
	...
   d8db4:	533b 000d 5331 000d 5327 000d 531d 000d     ;S..1S..'S...S..
   d8dc4:	5311 000d 5305 000d 52f9 000d 52f1 000d     .S...S...R...R..
   d8dd4:	52e7 000d 52dd 000d 6019 000d 616e 006e     .R...R...`..nan.
   d8de4:	766f 0066 6e69 0066 6162 6475 5300 7265     ovf.inf.baud.Ser
   d8df4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8e04:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8e14:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8e24:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8e34:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8e44:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8e54:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8e64:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d8e74:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d8e84:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d8e94:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d8ea4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d8eb4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d8ec4:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d8ed4:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d8ee4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8ef4 <_ZTV9IPAddress>:
	...
   d8efc:	5ac9 000d 5ab9 000d 5abb 000d               .Z...Z...Z..

000d8f08 <_ZTV9USBSerial>:
	...
   d8f10:	5ba1 000d 5bf1 000d 5bff 000d 56bd 000d     .[...[...[...V..
   d8f20:	5bdd 000d 5ba3 000d 5bb9 000d 5beb 000d     .[...[...[...[..
   d8f30:	5bcf 000d 5b9d 000d                         .[...[..

000d8f38 <_ZTV11USARTSerial>:
	...
   d8f40:	5cad 000d 5cfd 000d 5d0b 000d 56bd 000d     .\...\...]...V..
   d8f50:	5cc1 000d 5ce3 000d 5ccf 000d 5cf7 000d     .\...\...\...\..
   d8f60:	5caf 000d 5cb3 000d                         .\...\..

000d8f68 <_ZTVN5spark9MeshClassE>:
	...
   d8f70:	5e17 000d 5e0d 000d 5e03 000d 5df9 000d     .^...^...^...]..
   d8f80:	5ded 000d 5de1 000d 5dd5 000d 5dcd 000d     .]...]...]...]..
   d8f90:	5dc3 000d 5db9 000d 6019 000d               .]...]...`..

000d8f9c <_ZTVN5spark9WiFiClassE>:
	...
   d8fa4:	5f93 000d 5f89 000d 5f7f 000d 5f35 000d     ._..._..._..5_..
   d8fb4:	5f73 000d 5f67 000d 5f5b 000d 5f53 000d     s_..g_..[_..S_..
   d8fc4:	5f49 000d 5f3f 000d 6019 000d               I_..?_...`..

000d8fd0 <_ZTVN5spark12NetworkClassE>:
	...
   d8fd8:	5fb1 000d 5fbb 000d 5fc5 000d 5fcf 000d     ._..._..._..._..
   d8fe8:	5fd9 000d 5fe5 000d 5ff1 000d 5ffd 000d     ._..._..._..._..
   d8ff8:	6005 000d 600f 000d 6019 000d               .`...`...`..

000d9004 <_ctype_>:
   d9004:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9014:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9024:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9034:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9044:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9054:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9064:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9074:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9084:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9108 <__sf_fake_stdin>:
	...

000d9128 <__sf_fake_stdout>:
	...

000d9148 <__sf_fake_stderr>:
	...
   d9168:	4f50 4953 0058 0000                         POSIX...

000d9170 <fpi.5344>:
   d9170:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9180:	0000 0000                                   ....

000d9184 <fpinan.5380>:
   d9184:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9194:	0000 0000 6e69 7469 0079 0000               ....inity...

000d91a0 <tinytens>:
   d91a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d91b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d91c0:	6f43 64ac 0628 1168                         Co.d(.h.

000d91c8 <__mprec_tens>:
   d91c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d91d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d91e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d91f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9208:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9218:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9228:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9238:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9248:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9258:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9268:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9278:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9288:	9db4 79d9 7843 44ea                         ...yCx.D

000d9290 <__mprec_bigtens>:
   d9290:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d92a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d92b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d92b8 <p05.5387>:
   d92b8:	0005 0000 0019 0000 007d 0000               ........}...

000d92c4 <link_const_variable_data_end>:
   d92c4:	000d4679 	.word	0x000d4679
   d92c8:	000d49fd 	.word	0x000d49fd
   d92cc:	000d4afd 	.word	0x000d4afd
   d92d0:	000d4e21 	.word	0x000d4e21
   d92d4:	000d4f91 	.word	0x000d4f91
   d92d8:	000d5345 	.word	0x000d5345
   d92dc:	000d5379 	.word	0x000d5379
   d92e0:	000d5695 	.word	0x000d5695
   d92e4:	000d5955 	.word	0x000d5955
   d92e8:	000d5965 	.word	0x000d5965
   d92ec:	000d598d 	.word	0x000d598d
   d92f0:	000d5ee5 	.word	0x000d5ee5
   d92f4:	000d5f9d 	.word	0x000d5f9d
   d92f8:	000d60e5 	.word	0x000d60e5
   d92fc:	000d6109 	.word	0x000d6109
   d9300:	000d618d 	.word	0x000d618d
   d9304:	000d6251 	.word	0x000d6251
   d9308:	000d6315 	.word	0x000d6315

000d930c <link_constructors_end>:
   d930c:	00000000 	.word	0x00000000
