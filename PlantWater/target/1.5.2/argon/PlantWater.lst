
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.2/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000096b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd6d0  000dd6d0  0000d6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd6d8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004dc  2003dc68  000dd6dc  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006ac  2003e148  2003e148  0002e148  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ddbb8  000ddbb8  0002dbb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ddbe0  000ddbe0  0002dbe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001224ce  00000000  00000000  0002dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001716c  00000000  00000000  001500b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a843  00000000  00000000  0016721e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000031a0  00000000  00000000  00191a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005c78  00000000  00000000  00194c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003ee6f  00000000  00000000  0019a879  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039a99  00000000  00000000  001d96e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00111f7a  00000000  00000000  00213181  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fbcc  00000000  00000000  003250fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fd55 	bl	dbae0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fd75 	bl	dbb2c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc68 	.word	0x2003dc68
   d404c:	000dd6dc 	.word	0x000dd6dc
   d4050:	2003e144 	.word	0x2003e144
   d4054:	2003e148 	.word	0x2003e148
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 febf 	bl	d7de0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dd6d0 	.word	0x000dd6d0
   d4084:	000dd680 	.word	0x000dd680

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba1a 	b.w	d44c0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fc07 	bl	d48a0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 be65 	b.w	d7d64 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 b821 	b.w	d70e0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 b827 	b.w	d70f0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 b825 	b.w	d70f0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 ff3a 	bl	d6f28 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6c69 	.word	0x000d6c69

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f001 fe7c 	bl	d5dd4 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000dc500 	.word	0x000dc500

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f005 f8f7 	bl	d92e4 <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
	...

000d40fc <_Z10waterPlanti>:
          }
        }
    }    
}

int waterPlant(int moistVal) {
   d40fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d40fe:	4c16      	ldr	r4, [pc, #88]	; (d4158 <_Z10waterPlanti+0x5c>)
   d4100:	4d16      	ldr	r5, [pc, #88]	; (d415c <_Z10waterPlanti+0x60>)
   d4102:	6823      	ldr	r3, [r4, #0]
   d4104:	4283      	cmp	r3, r0
   d4106:	da1b      	bge.n	d4140 <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d4108:	f004 fa44 	bl	d8594 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4a14      	ldr	r2, [pc, #80]	; (d4160 <_Z10waterPlanti+0x64>)
   d4110:	9300      	str	r3, [sp, #0]
   d4112:	2101      	movs	r1, #1
   d4114:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d4116:	4c13      	ldr	r4, [pc, #76]	; (d4164 <_Z10waterPlanti+0x68>)
   d4118:	f003 fd15 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
}

int waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d411c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4120:	f003 fdd2 	bl	d7cc8 <delay>
    digitalWrite(pumpPin,HIGH);
   d4124:	2101      	movs	r1, #1
   d4126:	8820      	ldrh	r0, [r4, #0]
   d4128:	f005 f825 	bl	d9176 <digitalWrite>
    delay(waterTime);
   d412c:	4b0e      	ldr	r3, [pc, #56]	; (d4168 <_Z10waterPlanti+0x6c>)
   d412e:	6818      	ldr	r0, [r3, #0]
   d4130:	f003 fdca 	bl	d7cc8 <delay>
    digitalWrite(pumpPin,LOW);
   d4134:	8820      	ldrh	r0, [r4, #0]
   d4136:	2100      	movs	r1, #0
   d4138:	f005 f81d 	bl	d9176 <digitalWrite>
   d413c:	2001      	movs	r0, #1
   d413e:	e009      	b.n	d4154 <_Z10waterPlanti+0x58>
    return 1;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d4140:	f004 fa28 	bl	d8594 <_Z16_fetch_usbserialv>
   d4144:	6823      	ldr	r3, [r4, #0]
   d4146:	9300      	str	r3, [sp, #0]
   d4148:	4a08      	ldr	r2, [pc, #32]	; (d416c <_Z10waterPlanti+0x70>)
   d414a:	682b      	ldr	r3, [r5, #0]
   d414c:	2101      	movs	r1, #1
   d414e:	f003 fcfa 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
    return 0;
   d4152:	2000      	movs	r0, #0
  }
    
}
   d4154:	b003      	add	sp, #12
   d4156:	bd30      	pop	{r4, r5, pc}
   d4158:	2003dc68 	.word	0x2003dc68
   d415c:	2003e370 	.word	0x2003e370
   d4160:	000dc508 	.word	0x000dc508
   d4164:	2003dc70 	.word	0x2003dc70
   d4168:	2003dc74 	.word	0x2003dc74
   d416c:	000dc525 	.word	0x000dc525

000d4170 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d4170:	b570      	push	{r4, r5, r6, lr}
   d4172:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4174:	f003 fd97 	bl	d7ca6 <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d4178:	4c1f      	ldr	r4, [pc, #124]	; (d41f8 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d417a:	4e20      	ldr	r6, [pc, #128]	; (d41fc <_Z10printMoisti+0x8c>)
   d417c:	4d20      	ldr	r5, [pc, #128]	; (d4200 <_Z10printMoisti+0x90>)
   d417e:	4601      	mov	r1, r0
   d4180:	a802      	add	r0, sp, #8
   d4182:	f003 fd4d 	bl	d7c20 <_ZN9TimeClass7timeStrEl>
   d4186:	a902      	add	r1, sp, #8
   d4188:	4620      	mov	r0, r4
   d418a:	f003 faf4 	bl	d7776 <_ZN6StringaSEOS_>
   d418e:	a802      	add	r0, sp, #8
   d4190:	f003 fa7a 	bl	d7688 <_ZN6StringD1Ev>
   d4194:	4631      	mov	r1, r6
   d4196:	4620      	mov	r0, r4
   d4198:	2300      	movs	r3, #0
   d419a:	2219      	movs	r2, #25
   d419c:	f003 fb2a 	bl	d77f4 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d41a0:	4621      	mov	r1, r4
   d41a2:	4c18      	ldr	r4, [pc, #96]	; (d4204 <_Z10printMoisti+0x94>)
   d41a4:	2313      	movs	r3, #19
   d41a6:	220b      	movs	r2, #11
   d41a8:	a802      	add	r0, sp, #8
   d41aa:	f003 fb3b 	bl	d7824 <_ZNK6String9substringEjj>
   d41ae:	a902      	add	r1, sp, #8
   d41b0:	4620      	mov	r0, r4
   d41b2:	f003 fae0 	bl	d7776 <_ZN6StringaSEOS_>
   d41b6:	a802      	add	r0, sp, #8
   d41b8:	f003 fa66 	bl	d7688 <_ZN6StringD1Ev>
   d41bc:	2300      	movs	r3, #0
   d41be:	2209      	movs	r2, #9
   d41c0:	4629      	mov	r1, r5
   d41c2:	4620      	mov	r0, r4
   d41c4:	f003 fb16 	bl	d77f4 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d41c8:	f004 f9e4 	bl	d8594 <_Z16_fetch_usbserialv>
   d41cc:	6821      	ldr	r1, [r4, #0]
   d41ce:	f003 fba6 	bl	d791e <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d41d2:	f004 f9df 	bl	d8594 <_Z16_fetch_usbserialv>
   d41d6:	4b0c      	ldr	r3, [pc, #48]	; (d4208 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41d8:	4a0c      	ldr	r2, [pc, #48]	; (d420c <_Z10printMoisti+0x9c>)
   d41da:	681b      	ldr	r3, [r3, #0]
   d41dc:	9300      	str	r3, [sp, #0]
   d41de:	2100      	movs	r1, #0
   d41e0:	4633      	mov	r3, r6
   d41e2:	f003 fcb0 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d41e6:	f004 f9d5 	bl	d8594 <_Z16_fetch_usbserialv>
   d41ea:	462b      	mov	r3, r5
   d41ec:	4a08      	ldr	r2, [pc, #32]	; (d4210 <_Z10printMoisti+0xa0>)
   d41ee:	2100      	movs	r1, #0
   d41f0:	f003 fca9 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
}
   d41f4:	b006      	add	sp, #24
   d41f6:	bd70      	pop	{r4, r5, r6, pc}
   d41f8:	2003e318 	.word	0x2003e318
   d41fc:	2003e388 	.word	0x2003e388
   d4200:	2003e14c 	.word	0x2003e14c
   d4204:	2003e198 	.word	0x2003e198
   d4208:	2003e370 	.word	0x2003e370
   d420c:	000dc541 	.word	0x000dc541
   d4210:	000dc564 	.word	0x000dc564

000d4214 <_Z11printValuesv>:
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
   d4214:	b538      	push	{r3, r4, r5, lr}
    Serial.print("Temperature = ");
   d4216:	f004 f9bd 	bl	d8594 <_Z16_fetch_usbserialv>
   d421a:	492d      	ldr	r1, [pc, #180]	; (d42d0 <_Z11printValuesv+0xbc>)
    Serial.print(bme.readTemperature());
   d421c:	4c2d      	ldr	r4, [pc, #180]	; (d42d4 <_Z11printValuesv+0xc0>)
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}

void printValues()
{
    Serial.print("Temperature = ");
   d421e:	f003 fb6b 	bl	d78f8 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
   d4222:	f004 f9b7 	bl	d8594 <_Z16_fetch_usbserialv>
   d4226:	4605      	mov	r5, r0
   d4228:	4620      	mov	r0, r4
   d422a:	f000 fe79 	bl	d4f20 <_ZN15Adafruit_BME28015readTemperatureEv>
   d422e:	2102      	movs	r1, #2
   d4230:	4628      	mov	r0, r5
   d4232:	f003 fc5f 	bl	d7af4 <_ZN5Print5printEfi>
    Serial.println(" *C");
   d4236:	f004 f9ad 	bl	d8594 <_Z16_fetch_usbserialv>
   d423a:	4927      	ldr	r1, [pc, #156]	; (d42d8 <_Z11printValuesv+0xc4>)
   d423c:	f003 fb6f 	bl	d791e <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
   d4240:	f004 f9a8 	bl	d8594 <_Z16_fetch_usbserialv>
   d4244:	4925      	ldr	r1, [pc, #148]	; (d42dc <_Z11printValuesv+0xc8>)
   d4246:	f003 fb57 	bl	d78f8 <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
   d424a:	f004 f9a3 	bl	d8594 <_Z16_fetch_usbserialv>
   d424e:	4605      	mov	r5, r0
   d4250:	4620      	mov	r0, r4
   d4252:	f000 fe93 	bl	d4f7c <_ZN15Adafruit_BME28012readPressureEv>
   d4256:	eddf 7a22 	vldr	s15, [pc, #136]	; d42e0 <_Z11printValuesv+0xcc>
   d425a:	2102      	movs	r1, #2
   d425c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4260:	4628      	mov	r0, r5
   d4262:	f003 fc47 	bl	d7af4 <_ZN5Print5printEfi>
    Serial.println(" hPa");
   d4266:	f004 f995 	bl	d8594 <_Z16_fetch_usbserialv>
   d426a:	491e      	ldr	r1, [pc, #120]	; (d42e4 <_Z11printValuesv+0xd0>)
   d426c:	f003 fb57 	bl	d791e <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
   d4270:	f004 f990 	bl	d8594 <_Z16_fetch_usbserialv>
   d4274:	491c      	ldr	r1, [pc, #112]	; (d42e8 <_Z11printValuesv+0xd4>)
   d4276:	f003 fb3f 	bl	d78f8 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
   d427a:	f004 f98b 	bl	d8594 <_Z16_fetch_usbserialv>
   d427e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d42ec <_Z11printValuesv+0xd8>
   d4282:	4605      	mov	r5, r0
   d4284:	4620      	mov	r0, r4
   d4286:	f000 ff57 	bl	d5138 <_ZN15Adafruit_BME28012readAltitudeEf>
   d428a:	2102      	movs	r1, #2
   d428c:	4628      	mov	r0, r5
   d428e:	f003 fc31 	bl	d7af4 <_ZN5Print5printEfi>
    Serial.println(" m");
   d4292:	f004 f97f 	bl	d8594 <_Z16_fetch_usbserialv>
   d4296:	4916      	ldr	r1, [pc, #88]	; (d42f0 <_Z11printValuesv+0xdc>)
   d4298:	f003 fb41 	bl	d791e <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
   d429c:	f004 f97a 	bl	d8594 <_Z16_fetch_usbserialv>
   d42a0:	4914      	ldr	r1, [pc, #80]	; (d42f4 <_Z11printValuesv+0xe0>)
   d42a2:	f003 fb29 	bl	d78f8 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
   d42a6:	f004 f975 	bl	d8594 <_Z16_fetch_usbserialv>
   d42aa:	4605      	mov	r5, r0
   d42ac:	4620      	mov	r0, r4
   d42ae:	f000 ffe5 	bl	d527c <_ZN15Adafruit_BME28012readHumidityEv>
   d42b2:	2102      	movs	r1, #2
   d42b4:	4628      	mov	r0, r5
   d42b6:	f003 fc1d 	bl	d7af4 <_ZN5Print5printEfi>
    Serial.println(" %");
   d42ba:	f004 f96b 	bl	d8594 <_Z16_fetch_usbserialv>
   d42be:	490e      	ldr	r1, [pc, #56]	; (d42f8 <_Z11printValuesv+0xe4>)
   d42c0:	f003 fb2d 	bl	d791e <_ZN5Print7printlnEPKc>

    Serial.println();
   d42c4:	f004 f966 	bl	d8594 <_Z16_fetch_usbserialv>
}
   d42c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.println();
   d42cc:	f003 bb1b 	b.w	d7906 <_ZN5Print7printlnEv>
   d42d0:	000dc575 	.word	0x000dc575
   d42d4:	2003e32c 	.word	0x2003e32c
   d42d8:	000dc584 	.word	0x000dc584
   d42dc:	000dc588 	.word	0x000dc588
   d42e0:	42c80000 	.word	0x42c80000
   d42e4:	000dc594 	.word	0x000dc594
   d42e8:	000dc599 	.word	0x000dc599
   d42ec:	447d5000 	.word	0x447d5000
   d42f0:	000dc5ad 	.word	0x000dc5ad
   d42f4:	000dc5b0 	.word	0x000dc5b0
   d42f8:	000dc5bc 	.word	0x000dc5bc
   d42fc:	00000000 	.word	0x00000000

000d4300 <_Z7getDustv>:
}

float getDust() {
   d4300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d4304:	2100      	movs	r1, #0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4306:	ed2d 8b02 	vpush	{d8}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d430a:	2008      	movs	r0, #8
   d430c:	f004 ff22 	bl	d9154 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4310:	f002 fcb2 	bl	d6c78 <HAL_Timer_Get_Milli_Seconds>
   d4314:	4605      	mov	r5, r0
    Serial.println(" %");

    Serial.println();
}

float getDust() {
   d4316:	2400      	movs	r4, #0

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4318:	f247 5630 	movw	r6, #30000	; 0x7530

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
   d431c:	2100      	movs	r1, #0
   d431e:	2008      	movs	r0, #8
   d4320:	f004 ff8f 	bl	d9242 <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d4324:	4404      	add	r4, r0
   d4326:	f002 fca7 	bl	d6c78 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d432a:	1b40      	subs	r0, r0, r5
   d432c:	42b0      	cmp	r0, r6
   d432e:	d9f5      	bls.n	d431c <_Z7getDustv+0x1c>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4330:	4620      	mov	r0, r4
   d4332:	f006 fbaf 	bl	daa94 <__aeabi_ui2d>
   d4336:	a340      	add	r3, pc, #256	; (adr r3, d4438 <_Z7getDustv+0x138>)
   d4338:	e9d3 2300 	ldrd	r2, r3, [r3]
   d433c:	f006 fd4a 	bl	dadd4 <__aeabi_ddiv>
   d4340:	f006 ff16 	bl	db170 <__aeabi_d2f>
   d4344:	ee08 0a90 	vmov	s17, r0
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d4348:	f006 fbc6 	bl	daad8 <__aeabi_f2d>
   d434c:	4606      	mov	r6, r0
   d434e:	460f      	mov	r7, r1
   d4350:	ed9f 1b33 	vldr	d1, [pc, #204]	; d4420 <_Z7getDustv+0x120>
   d4354:	ec47 6b10 	vmov	d0, r6, r7
   d4358:	f005 f922 	bl	d95a0 <pow>
   d435c:	a338      	add	r3, pc, #224	; (adr r3, d4440 <_Z7getDustv+0x140>)
   d435e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4362:	ec51 0b10 	vmov	r0, r1, d0
   d4366:	f006 fc0b 	bl	dab80 <__aeabi_dmul>
   d436a:	4632      	mov	r2, r6
   d436c:	463b      	mov	r3, r7
   d436e:	4680      	mov	r8, r0
   d4370:	4689      	mov	r9, r1
   d4372:	4630      	mov	r0, r6
   d4374:	4639      	mov	r1, r7
   d4376:	f006 fc03 	bl	dab80 <__aeabi_dmul>
   d437a:	a333      	add	r3, pc, #204	; (adr r3, d4448 <_Z7getDustv+0x148>)
   d437c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4380:	f006 fbfe 	bl	dab80 <__aeabi_dmul>
   d4384:	4602      	mov	r2, r0
   d4386:	460b      	mov	r3, r1
   d4388:	4640      	mov	r0, r8
   d438a:	4649      	mov	r1, r9
   d438c:	f006 fa44 	bl	da818 <__aeabi_dsub>
   d4390:	eddf 7a27 	vldr	s15, [pc, #156]	; d4430 <_Z7getDustv+0x130>
   d4394:	ee68 7aa7 	vmul.f32	s15, s17, s15
   d4398:	4606      	mov	r6, r0
   d439a:	ee17 0a90 	vmov	r0, s15
   d439e:	460f      	mov	r7, r1
   d43a0:	f006 fb9a 	bl	daad8 <__aeabi_f2d>
   d43a4:	4602      	mov	r2, r0
   d43a6:	460b      	mov	r3, r1
   d43a8:	4630      	mov	r0, r6
   d43aa:	4639      	mov	r1, r7
   d43ac:	f006 fa36 	bl	da81c <__adddf3>
   d43b0:	a31d      	add	r3, pc, #116	; (adr r3, d4428 <_Z7getDustv+0x128>)
   d43b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43b6:	f006 fa31 	bl	da81c <__adddf3>
   d43ba:	f006 fed9 	bl	db170 <__aeabi_d2f>
   d43be:	ee08 0a10 	vmov	s16, r0
        Serial.print(lowpulseoccupancy);
   d43c2:	f004 f8e7 	bl	d8594 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d43c6:	220a      	movs	r2, #10
   d43c8:	4621      	mov	r1, r4
   d43ca:	f003 fab4 	bl	d7936 <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d43ce:	f004 f8e1 	bl	d8594 <_Z16_fetch_usbserialv>
   d43d2:	4918      	ldr	r1, [pc, #96]	; (d4434 <_Z7getDustv+0x134>)
   d43d4:	f003 fa90 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d43d8:	f004 f8dc 	bl	d8594 <_Z16_fetch_usbserialv>
   d43dc:	eeb0 0a68 	vmov.f32	s0, s17
   d43e0:	2102      	movs	r1, #2
   d43e2:	f003 fb87 	bl	d7af4 <_ZN5Print5printEfi>
        Serial.print(",");
   d43e6:	f004 f8d5 	bl	d8594 <_Z16_fetch_usbserialv>
   d43ea:	4912      	ldr	r1, [pc, #72]	; (d4434 <_Z7getDustv+0x134>)
   d43ec:	f003 fa84 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d43f0:	f004 f8d0 	bl	d8594 <_Z16_fetch_usbserialv>
   d43f4:	2102      	movs	r1, #2
   d43f6:	eeb0 0a48 	vmov.f32	s0, s16
   d43fa:	f003 fb95 	bl	d7b28 <_ZN5Print7printlnEfi>
   d43fe:	f002 fc3b 	bl	d6c78 <HAL_Timer_Get_Milli_Seconds>
  float concentration = -1;

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
   d4402:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4406:	eeb4 8a67 	vcmp.f32	s16, s15
   d440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d440e:	4605      	mov	r5, r0
   d4410:	d081      	beq.n	d4316 <_Z7getDustv+0x16>
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
}
   d4412:	eeb0 0a48 	vmov.f32	s0, s16
   d4416:	ecbd 8b02 	vpop	{d8}
   d441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d441e:	bf00      	nop
   d4420:	00000000 	.word	0x00000000
   d4424:	40080000 	.word	0x40080000
   d4428:	3d70a3d7 	.word	0x3d70a3d7
   d442c:	3fe3d70a 	.word	0x3fe3d70a
   d4430:	44020000 	.word	0x44020000
   d4434:	000dc5bf 	.word	0x000dc5bf
   d4438:	00000000 	.word	0x00000000
   d443c:	41124f80 	.word	0x41124f80
   d4440:	9999999a 	.word	0x9999999a
   d4444:	3ff19999 	.word	0x3ff19999
   d4448:	66666666 	.word	0x66666666
   d444c:	400e6666 	.word	0x400e6666

000d4450 <_Z10printhellov>:
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
}

void printhello() {
   d4450:	b510      	push	{r4, lr}
  display.clearDisplay();
   d4452:	4c19      	ldr	r4, [pc, #100]	; (d44b8 <_Z10printhellov+0x68>)
   d4454:	4620      	mov	r0, r4
   d4456:	f001 ffe3 	bl	d6420 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d445a:	2200      	movs	r2, #0
   d445c:	4611      	mov	r1, r2
   d445e:	4620      	mov	r0, r4
   d4460:	2301      	movs	r3, #1
   d4462:	f001 ff7d 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d4466:	4620      	mov	r0, r4
   d4468:	2301      	movs	r3, #1
   d446a:	2200      	movs	r2, #0
   d446c:	217f      	movs	r1, #127	; 0x7f
   d446e:	f001 ff77 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d4472:	4620      	mov	r0, r4
   d4474:	2301      	movs	r3, #1
   d4476:	223f      	movs	r2, #63	; 0x3f
   d4478:	2100      	movs	r1, #0
   d447a:	f001 ff71 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d447e:	2301      	movs	r3, #1
   d4480:	223f      	movs	r2, #63	; 0x3f
   d4482:	4620      	mov	r0, r4
   d4484:	217f      	movs	r1, #127	; 0x7f
   d4486:	f001 ff6b 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  // display a line of text
  display.setTextSize(1);
   d448a:	4620      	mov	r0, r4
   d448c:	2101      	movs	r1, #1
   d448e:	f002 fb21 	bl	d6ad4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4492:	4620      	mov	r0, r4
   d4494:	2101      	movs	r1, #1
   d4496:	f002 fb22 	bl	d6ade <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d449a:	4620      	mov	r0, r4
   d449c:	221e      	movs	r2, #30
   d449e:	211b      	movs	r1, #27
   d44a0:	f002 fb15 	bl	d6ace <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d44a4:	4620      	mov	r0, r4
   d44a6:	4905      	ldr	r1, [pc, #20]	; (d44bc <_Z10printhellov+0x6c>)
   d44a8:	f003 fa26 	bl	d78f8 <_ZN5Print5printEPKc>
  display.display();
   d44ac:	4620      	mov	r0, r4
   d44ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d44b2:	f002 b8d7 	b.w	d6664 <_ZN16Adafruit_SSD13067displayEv>
   d44b6:	bf00      	nop
   d44b8:	2003e2c8 	.word	0x2003e2c8
   d44bc:	000dc5c1 	.word	0x000dc5c1

000d44c0 <setup>:
int button;
int i;

int delayStart;

void setup() {
   d44c0:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d44c2:	f004 f867 	bl	d8594 <_Z16_fetch_usbserialv>
   d44c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44ca:	f004 f857 	bl	d857c <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d44ce:	4b3d      	ldr	r3, [pc, #244]	; (d45c4 <setup+0x104>)
  pinMode(pumpPin,OUTPUT);
   d44d0:	4c3d      	ldr	r4, [pc, #244]	; (d45c8 <setup+0x108>)

int delayStart;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d44d2:	8818      	ldrh	r0, [r3, #0]
   d44d4:	2100      	movs	r1, #0
   d44d6:	f004 fe3d 	bl	d9154 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d44da:	2101      	movs	r1, #1
   d44dc:	8820      	ldrh	r0, [r4, #0]
   d44de:	f004 fe39 	bl	d9154 <pinMode>
  pinMode(D7,OUTPUT);
   d44e2:	2101      	movs	r1, #1
   d44e4:	2007      	movs	r0, #7
   d44e6:	f004 fe35 	bl	d9154 <pinMode>
  digitalWrite(pumpPin,LOW);
   d44ea:	2100      	movs	r1, #0
   d44ec:	8820      	ldrh	r0, [r4, #0]
   d44ee:	f004 fe42 	bl	d9176 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d44f2:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d44f6:	f003 fb77 	bl	d7be8 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44fa:	f002 fdc9 	bl	d7090 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d44fe:	b110      	cbz	r0, d4506 <setup+0x46>
            return false;
        }
        return spark_sync_time(NULL);
   d4500:	2000      	movs	r0, #0
   d4502:	f002 fdd5 	bl	d70b0 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4506:	2300      	movs	r3, #0
   d4508:	2202      	movs	r2, #2
   d450a:	4930      	ldr	r1, [pc, #192]	; (d45cc <setup+0x10c>)
   d450c:	4830      	ldr	r0, [pc, #192]	; (d45d0 <setup+0x110>)
   d450e:	f002 fdaf 	bl	d7070 <spark_variable>
   d4512:	2300      	movs	r3, #0
   d4514:	2209      	movs	r2, #9
   d4516:	492f      	ldr	r1, [pc, #188]	; (d45d4 <setup+0x114>)
   d4518:	482f      	ldr	r0, [pc, #188]	; (d45d8 <setup+0x118>)
   d451a:	f002 fda9 	bl	d7070 <spark_variable>
   d451e:	2300      	movs	r3, #0
   d4520:	2202      	movs	r2, #2
   d4522:	492e      	ldr	r1, [pc, #184]	; (d45dc <setup+0x11c>)
   d4524:	482e      	ldr	r0, [pc, #184]	; (d45e0 <setup+0x120>)
   d4526:	f002 fda3 	bl	d7070 <spark_variable>
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d452a:	492e      	ldr	r1, [pc, #184]	; (d45e4 <setup+0x124>)
   d452c:	482e      	ldr	r0, [pc, #184]	; (d45e8 <setup+0x128>)
   d452e:	f001 fa03 	bl	d5938 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

// Initialize BME280
    Serial.println(F("BME280 test"));
   d4532:	f004 f82f 	bl	d8594 <_Z16_fetch_usbserialv>
   d4536:	492d      	ldr	r1, [pc, #180]	; (d45ec <setup+0x12c>)
   d4538:	f003 f9fb 	bl	d7932 <_ZN5Print7printlnEPK19__FlashStringHelper>
    
    status = bme.begin(0x76);
   d453c:	2176      	movs	r1, #118	; 0x76
   d453e:	482c      	ldr	r0, [pc, #176]	; (d45f0 <setup+0x130>)
   d4540:	f001 f8a0 	bl	d5684 <_ZN15Adafruit_BME2805beginEh>
   d4544:	4b2b      	ldr	r3, [pc, #172]	; (d45f4 <setup+0x134>)
   d4546:	6018      	str	r0, [r3, #0]
    if (!status)
   d4548:	bb60      	cbnz	r0, d45a4 <setup+0xe4>
    {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d454a:	f004 f823 	bl	d8594 <_Z16_fetch_usbserialv>
   d454e:	492a      	ldr	r1, [pc, #168]	; (d45f8 <setup+0x138>)
   d4550:	f003 f9e5 	bl	d791e <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d4554:	f004 f81e 	bl	d8594 <_Z16_fetch_usbserialv>
   d4558:	4928      	ldr	r1, [pc, #160]	; (d45fc <setup+0x13c>)
   d455a:	f003 f9cd 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d455e:	f004 f819 	bl	d8594 <_Z16_fetch_usbserialv>
   d4562:	4604      	mov	r4, r0
   d4564:	4822      	ldr	r0, [pc, #136]	; (d45f0 <setup+0x130>)
   d4566:	f000 fc0d 	bl	d4d84 <_ZN15Adafruit_BME2808sensorIDEv>
   d456a:	2210      	movs	r2, #16
   d456c:	4601      	mov	r1, r0
   d456e:	4620      	mov	r0, r4
   d4570:	f003 f9e1 	bl	d7936 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4574:	4620      	mov	r0, r4
   d4576:	f003 f9c6 	bl	d7906 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d457a:	f004 f80b 	bl	d8594 <_Z16_fetch_usbserialv>
   d457e:	4920      	ldr	r1, [pc, #128]	; (d4600 <setup+0x140>)
   d4580:	f003 f9ba 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d4584:	f004 f806 	bl	d8594 <_Z16_fetch_usbserialv>
   d4588:	491e      	ldr	r1, [pc, #120]	; (d4604 <setup+0x144>)
   d458a:	f003 f9b5 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d458e:	f004 f801 	bl	d8594 <_Z16_fetch_usbserialv>
   d4592:	491d      	ldr	r1, [pc, #116]	; (d4608 <setup+0x148>)
   d4594:	f003 f9b0 	bl	d78f8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d4598:	f003 fffc 	bl	d8594 <_Z16_fetch_usbserialv>
   d459c:	491b      	ldr	r1, [pc, #108]	; (d460c <setup+0x14c>)
   d459e:	f003 f9ab 	bl	d78f8 <_ZN5Print5printEPKc>
   d45a2:	e7fe      	b.n	d45a2 <setup+0xe2>
        while (1)
            ;
    }

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d45a4:	223c      	movs	r2, #60	; 0x3c
   d45a6:	2102      	movs	r1, #2
   d45a8:	4819      	ldr	r0, [pc, #100]	; (d4610 <setup+0x150>)
   d45aa:	f001 ff89 	bl	d64c0 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d45ae:	4818      	ldr	r0, [pc, #96]	; (d4610 <setup+0x150>)
   d45b0:	f001 ff36 	bl	d6420 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d45b4:	4816      	ldr	r0, [pc, #88]	; (d4610 <setup+0x150>)
   d45b6:	f002 f855 	bl	d6664 <_ZN16Adafruit_SSD13067displayEv>

  printhello();

}
   d45ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.display();

  printhello();
   d45be:	f7ff bf47 	b.w	d4450 <_Z10printhellov>
   d45c2:	bf00      	nop
   d45c4:	2003dc6c 	.word	0x2003dc6c
   d45c8:	2003dc70 	.word	0x2003dc70
   d45cc:	2003e370 	.word	0x2003e370
   d45d0:	000dc823 	.word	0x000dc823
   d45d4:	2003e190 	.word	0x2003e190
   d45d8:	000dc805 	.word	0x000dc805
   d45dc:	2003e328 	.word	0x2003e328
   d45e0:	000dc5cf 	.word	0x000dc5cf
   d45e4:	2003e290 	.word	0x2003e290
   d45e8:	2003e1a8 	.word	0x2003e1a8
   d45ec:	000dc5dd 	.word	0x000dc5dd
   d45f0:	2003e32c 	.word	0x2003e32c
   d45f4:	2003e2f0 	.word	0x2003e2f0
   d45f8:	000dc5e9 	.word	0x000dc5e9
   d45fc:	000dc631 	.word	0x000dc631
   d4600:	000dc642 	.word	0x000dc642
   d4604:	000dc689 	.word	0x000dc689
   d4608:	000dc6b3 	.word	0x000dc6b3
   d460c:	000dc6dd 	.word	0x000dc6dd
   d4610:	2003e2c8 	.word	0x2003e2c8

000d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4614:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4616:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4618:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d461a:	b17c      	cbz	r4, d463c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d461c:	6863      	ldr	r3, [r4, #4]
   d461e:	3b01      	subs	r3, #1
   d4620:	6063      	str	r3, [r4, #4]
   d4622:	b95b      	cbnz	r3, d463c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4624:	6823      	ldr	r3, [r4, #0]
   d4626:	4620      	mov	r0, r4
   d4628:	689b      	ldr	r3, [r3, #8]
   d462a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d462c:	68a3      	ldr	r3, [r4, #8]
   d462e:	3b01      	subs	r3, #1
   d4630:	60a3      	str	r3, [r4, #8]
   d4632:	b91b      	cbnz	r3, d463c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4634:	6823      	ldr	r3, [r4, #0]
   d4636:	4620      	mov	r0, r4
   d4638:	68db      	ldr	r3, [r3, #12]
   d463a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d463c:	4628      	mov	r0, r5
   d463e:	bd38      	pop	{r3, r4, r5, pc}

000d4640 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4640:	b510      	push	{r4, lr}
   d4642:	4b04      	ldr	r3, [pc, #16]	; (d4654 <_ZN9TCPClientD1Ev+0x14>)
   d4644:	4604      	mov	r4, r0
   d4646:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d464a:	f7ff ffe3 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d464e:	4620      	mov	r0, r4
   d4650:	bd10      	pop	{r4, pc}
   d4652:	bf00      	nop
   d4654:	000dd348 	.word	0x000dd348

000d4658 <_ZN9TCPClientD0Ev>:
   d4658:	b510      	push	{r4, lr}
   d465a:	4604      	mov	r4, r0
   d465c:	f7ff fff0 	bl	d4640 <_ZN9TCPClientD1Ev>
   d4660:	4620      	mov	r0, r4
   d4662:	211c      	movs	r1, #28
   d4664:	f004 fe3e 	bl	d92e4 <_ZdlPvj>
   d4668:	4620      	mov	r0, r4
   d466a:	bd10      	pop	{r4, pc}

000d466c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d466c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d466e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d4670:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4674:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d4676:	f006 fa2f 	bl	daad8 <__aeabi_f2d>
   d467a:	462a      	mov	r2, r5
   d467c:	e9cd 0100 	strd	r0, r1, [sp]
   d4680:	2100      	movs	r1, #0
   d4682:	4620      	mov	r0, r4
   d4684:	f003 fa5f 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
    }
   d4688:	b003      	add	sp, #12
   d468a:	bd30      	pop	{r4, r5, pc}

000d468c <_Z9oledprintffffi>:
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d468c:	b538      	push	{r3, r4, r5, lr}

   // initialize and clear display
  display.clearDisplay();
   d468e:	4c33      	ldr	r4, [pc, #204]	; (d475c <_Z9oledprintffffi+0xd0>)
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4690:	ed2d 8b04 	vpush	{d8-d9}
   d4694:	4605      	mov	r5, r0

   // initialize and clear display
  display.clearDisplay();
   d4696:	4620      	mov	r0, r4
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4698:	eeb0 9a60 	vmov.f32	s18, s1
   d469c:	eef0 8a41 	vmov.f32	s17, s2
   d46a0:	eeb0 8a61 	vmov.f32	s16, s3
   d46a4:	eef0 9a40 	vmov.f32	s19, s0

   // initialize and clear display
  display.clearDisplay();
   d46a8:	f001 feba 	bl	d6420 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d46ac:	4620      	mov	r0, r4
   d46ae:	f001 ffd9 	bl	d6664 <_ZN16Adafruit_SSD13067displayEv>

  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d46b2:	2200      	movs	r2, #0
   d46b4:	4611      	mov	r1, r2
   d46b6:	4620      	mov	r0, r4
   d46b8:	2301      	movs	r3, #1
   d46ba:	f001 fe51 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d46be:	4620      	mov	r0, r4
   d46c0:	2301      	movs	r3, #1
   d46c2:	2200      	movs	r2, #0
   d46c4:	217f      	movs	r1, #127	; 0x7f
   d46c6:	f001 fe4b 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d46ca:	4620      	mov	r0, r4
   d46cc:	2301      	movs	r3, #1
   d46ce:	223f      	movs	r2, #63	; 0x3f
   d46d0:	2100      	movs	r1, #0
   d46d2:	f001 fe45 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d46d6:	2301      	movs	r3, #1
   d46d8:	223f      	movs	r2, #63	; 0x3f
   d46da:	4620      	mov	r0, r4
   d46dc:	217f      	movs	r1, #127	; 0x7f
   d46de:	f001 fe3f 	bl	d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>

  // display a line of text
  display.setTextSize(1);
   d46e2:	4620      	mov	r0, r4
   d46e4:	2101      	movs	r1, #1
   d46e6:	f002 f9f5 	bl	d6ad4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d46ea:	4620      	mov	r0, r4
   d46ec:	2101      	movs	r1, #1
   d46ee:	f002 f9f6 	bl	d6ade <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,5);
   d46f2:	4620      	mov	r0, r4
   d46f4:	2205      	movs	r2, #5
   d46f6:	2100      	movs	r1, #0
   d46f8:	f002 f9e9 	bl	d6ace <_ZN12Adafruit_GFX9setCursorEss>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d46fc:	4a18      	ldr	r2, [pc, #96]	; (d4760 <_Z9oledprintffffi+0xd4>)
   d46fe:	2100      	movs	r1, #0
   d4700:	4620      	mov	r0, r4
   d4702:	f003 fa20 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
  display.printf("Environmental Reading");
  display.setCursor(0,18);
   d4706:	2212      	movs	r2, #18
   d4708:	4620      	mov	r0, r4
   d470a:	2100      	movs	r1, #0
   d470c:	f002 f9df 	bl	d6ace <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Temperature(F) %0.2f\n",Otemp);
   d4710:	eeb0 0a69 	vmov.f32	s0, s19
   d4714:	4913      	ldr	r1, [pc, #76]	; (d4764 <_Z9oledprintffffi+0xd8>)
   d4716:	4620      	mov	r0, r4
   d4718:	f7ff ffa8 	bl	d466c <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Pressure (hPa) %0.2f\n",Opres);
   d471c:	eeb0 0a49 	vmov.f32	s0, s18
   d4720:	4911      	ldr	r1, [pc, #68]	; (d4768 <_Z9oledprintffffi+0xdc>)
   d4722:	4620      	mov	r0, r4
   d4724:	f7ff ffa2 	bl	d466c <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
   d4728:	eeb0 0a68 	vmov.f32	s0, s17
   d472c:	490f      	ldr	r1, [pc, #60]	; (d476c <_Z9oledprintffffi+0xe0>)
   d472e:	4620      	mov	r0, r4
   d4730:	f7ff ff9c 	bl	d466c <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Dust Level: %0.2f \n",Odust);
   d4734:	eeb0 0a48 	vmov.f32	s0, s16
   d4738:	490d      	ldr	r1, [pc, #52]	; (d4770 <_Z9oledprintffffi+0xe4>)
   d473a:	4620      	mov	r0, r4
   d473c:	f7ff ff96 	bl	d466c <_ZN5Print6printfIIfEEEjPKcDpT_>
   d4740:	462b      	mov	r3, r5
   d4742:	4620      	mov	r0, r4
   d4744:	4a0b      	ldr	r2, [pc, #44]	; (d4774 <_Z9oledprintffffi+0xe8>)
   d4746:	2100      	movs	r1, #0
   d4748:	f003 f9fd 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
  display.printf("Moisture: %d \n",Omoist);
  display.display();
}
   d474c:	ecbd 8b04 	vpop	{d8-d9}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d4750:	4620      	mov	r0, r4
}
   d4752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d4756:	f001 bf85 	b.w	d6664 <_ZN16Adafruit_SSD13067displayEv>
   d475a:	bf00      	nop
   d475c:	2003e2c8 	.word	0x2003e2c8
   d4760:	000dc707 	.word	0x000dc707
   d4764:	000dc71d 	.word	0x000dc71d
   d4768:	000dc733 	.word	0x000dc733
   d476c:	000dc749 	.word	0x000dc749
   d4770:	000dc760 	.word	0x000dc760
   d4774:	000dc774 	.word	0x000dc774

000d4778 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4778:	b570      	push	{r4, r5, r6, lr}
   d477a:	4604      	mov	r4, r0
   d477c:	460e      	mov	r6, r1
   d477e:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4780:	f001 fc30 	bl	d5fe4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4784:	2201      	movs	r2, #1
   d4786:	4631      	mov	r1, r6
   d4788:	4620      	mov	r0, r4
   d478a:	f001 fb9f 	bl	d5ecc <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d478e:	4620      	mov	r0, r4
   d4790:	213a      	movs	r1, #58	; 0x3a
   d4792:	f001 fb4f 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4796:	462a      	mov	r2, r5
   d4798:	4620      	mov	r0, r4
   d479a:	4902      	ldr	r1, [pc, #8]	; (d47a4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d479c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d47a0:	f001 bb87 	b.w	d5eb2 <_ZN10JsonWriter13insertsprintfEPKcz>
   d47a4:	000dd3a0 	.word	0x000dd3a0

000d47a8 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d47a8:	b538      	push	{r3, r4, r5, lr}
   d47aa:	4604      	mov	r4, r0
   d47ac:	ed2d 8b02 	vpush	{d8}
   d47b0:	460d      	mov	r5, r1
   d47b2:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d47b6:	f001 fc15 	bl	d5fe4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d47ba:	4629      	mov	r1, r5
   d47bc:	4620      	mov	r0, r4
   d47be:	2201      	movs	r2, #1
   d47c0:	f001 fb84 	bl	d5ecc <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d47c4:	4620      	mov	r0, r4
   d47c6:	213a      	movs	r1, #58	; 0x3a
   d47c8:	f001 fb34 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d47cc:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d47d0:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d47d4:	4620      	mov	r0, r4
	}
   d47d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d47da:	f001 bc27 	b.w	d602c <_ZN10JsonWriter11insertValueEf>
	...

000d47e0 <_Z18createEventPayLoadifffi>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
   d47e0:	b530      	push	{r4, r5, lr}
   d47e2:	ed2d 8b04 	vpush	{d8-d9}
   d47e6:	b0d3      	sub	sp, #332	; 0x14c
   d47e8:	4605      	mov	r5, r0
   d47ea:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d47ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   d47f0:	a912      	add	r1, sp, #72	; 0x48
   d47f2:	a806      	add	r0, sp, #24
   d47f4:	eef0 8a60 	vmov.f32	s17, s1
   d47f8:	eeb0 8a41 	vmov.f32	s16, s2
   d47fc:	eeb0 9a40 	vmov.f32	s18, s0
   d4800:	f001 fb06 	bl	d5e10 <_ZN10JsonWriterC1EPcj>
   d4804:	4b1d      	ldr	r3, [pc, #116]	; (d487c <_Z18createEventPayLoadifffi+0x9c>)
   d4806:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4808:	227d      	movs	r2, #125	; 0x7d
   d480a:	217b      	movs	r1, #123	; 0x7b
   d480c:	a806      	add	r0, sp, #24
   d480e:	f001 fbf4 	bl	d5ffa <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d4812:	462a      	mov	r2, r5
   d4814:	a806      	add	r0, sp, #24
   d4816:	491a      	ldr	r1, [pc, #104]	; (d4880 <_Z18createEventPayLoadifffi+0xa0>)
   d4818:	f7ff ffae 	bl	d4778 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d481c:	eeb0 0a49 	vmov.f32	s0, s18
   d4820:	a806      	add	r0, sp, #24
   d4822:	4918      	ldr	r1, [pc, #96]	; (d4884 <_Z18createEventPayLoadifffi+0xa4>)
   d4824:	f7ff ffc0 	bl	d47a8 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d4828:	eeb0 0a68 	vmov.f32	s0, s17
   d482c:	a806      	add	r0, sp, #24
   d482e:	4916      	ldr	r1, [pc, #88]	; (d4888 <_Z18createEventPayLoadifffi+0xa8>)
   d4830:	f7ff ffba 	bl	d47a8 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d4834:	eeb0 0a48 	vmov.f32	s0, s16
   d4838:	a806      	add	r0, sp, #24
   d483a:	4914      	ldr	r1, [pc, #80]	; (d488c <_Z18createEventPayLoadifffi+0xac>)
   d483c:	f7ff ffb4 	bl	d47a8 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Plant Watered", waterED);
   d4840:	4622      	mov	r2, r4
   d4842:	4913      	ldr	r1, [pc, #76]	; (d4890 <_Z18createEventPayLoadifffi+0xb0>)
   d4844:	a806      	add	r0, sp, #24
   d4846:	f7ff ff97 	bl	d4778 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d484a:	a806      	add	r0, sp, #24
   d484c:	f001 fb00 	bl	d5e50 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4850:	9b07      	ldr	r3, [sp, #28]
   d4852:	9303      	str	r3, [sp, #12]
   d4854:	4b0f      	ldr	r3, [pc, #60]	; (d4894 <_Z18createEventPayLoadifffi+0xb4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4856:	9a03      	ldr	r2, [sp, #12]
   d4858:	781b      	ldrb	r3, [r3, #0]
   d485a:	490f      	ldr	r1, [pc, #60]	; (d4898 <_Z18createEventPayLoadifffi+0xb8>)
   d485c:	f88d 3000 	strb.w	r3, [sp]
   d4860:	a804      	add	r0, sp, #16
   d4862:	233c      	movs	r3, #60	; 0x3c
   d4864:	f003 fc2a 	bl	d80bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4868:	a805      	add	r0, sp, #20
   d486a:	f7ff fed3 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
  JsonWriterStatic<256> jw;
   d486e:	a806      	add	r0, sp, #24
   d4870:	f7ff fc2e 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d4874:	b053      	add	sp, #332	; 0x14c
   d4876:	ecbd 8b04 	vpop	{d8-d9}
   d487a:	bd30      	pop	{r4, r5, pc}
   d487c:	000dc500 	.word	0x000dc500
   d4880:	000dc823 	.word	0x000dc823
   d4884:	000dc805 	.word	0x000dc805
   d4888:	000dc856 	.word	0x000dc856
   d488c:	000dc871 	.word	0x000dc871
   d4890:	000dc5cf 	.word	0x000dc5cf
   d4894:	2003e2ec 	.word	0x2003e2ec
   d4898:	000dc783 	.word	0x000dc783
   d489c:	00000000 	.word	0x00000000

000d48a0 <loop>:

  printhello();

}

void loop() {
   d48a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  moist = analogRead(soilPin);
   d48a4:	4ba2      	ldr	r3, [pc, #648]	; (d4b30 <loop+0x290>)
   d48a6:	4ca3      	ldr	r4, [pc, #652]	; (d4b34 <loop+0x294>)
   d48a8:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d48aa:	4da3      	ldr	r5, [pc, #652]	; (d4b38 <loop+0x298>)
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d48ac:	f8df 92e0 	ldr.w	r9, [pc, #736]	; d4b90 <loop+0x2f0>
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d48b0:	4ea2      	ldr	r6, [pc, #648]	; (d4b3c <loop+0x29c>)
  hum = bme.readHumidity();
   d48b2:	4fa3      	ldr	r7, [pc, #652]	; (d4b40 <loop+0x2a0>)
  dust = getDust();
   d48b4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; d4b94 <loop+0x2f4>

  printhello();

}

void loop() {
   d48b8:	b08b      	sub	sp, #44	; 0x2c
  moist = analogRead(soilPin);
   d48ba:	f004 fc88 	bl	d91ce <analogRead>
   d48be:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d48c0:	f7ff fc1c 	bl	d40fc <_Z10waterPlanti>
   d48c4:	6028      	str	r0, [r5, #0]
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d48c6:	489f      	ldr	r0, [pc, #636]	; (d4b44 <loop+0x2a4>)
   d48c8:	f000 fb2a 	bl	d4f20 <_ZN15Adafruit_BME28015readTemperatureEv>
   d48cc:	ee10 0a10 	vmov	r0, s0
   d48d0:	f006 f902 	bl	daad8 <__aeabi_f2d>
   d48d4:	a392      	add	r3, pc, #584	; (adr r3, d4b20 <loop+0x280>)
   d48d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48da:	f006 f951 	bl	dab80 <__aeabi_dmul>
   d48de:	2200      	movs	r2, #0
   d48e0:	4b99      	ldr	r3, [pc, #612]	; (d4b48 <loop+0x2a8>)
   d48e2:	f005 ff9b 	bl	da81c <__adddf3>
   d48e6:	e9c9 0100 	strd	r0, r1, [r9]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d48ea:	4896      	ldr	r0, [pc, #600]	; (d4b44 <loop+0x2a4>)
   d48ec:	f000 fb46 	bl	d4f7c <_ZN15Adafruit_BME28012readPressureEv>
   d48f0:	eddf 7a96 	vldr	s15, [pc, #600]	; d4b4c <loop+0x2ac>
   d48f4:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d48f8:	ee17 0a10 	vmov	r0, s14
   d48fc:	f006 f8ec 	bl	daad8 <__aeabi_f2d>
   d4900:	a389      	add	r3, pc, #548	; (adr r3, d4b28 <loop+0x288>)
   d4902:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4906:	f006 f93b 	bl	dab80 <__aeabi_dmul>
   d490a:	2200      	movs	r2, #0
   d490c:	4b90      	ldr	r3, [pc, #576]	; (d4b50 <loop+0x2b0>)
   d490e:	f005 ff85 	bl	da81c <__adddf3>
   d4912:	e9c6 0100 	strd	r0, r1, [r6]
  hum = bme.readHumidity();
   d4916:	488b      	ldr	r0, [pc, #556]	; (d4b44 <loop+0x2a4>)
   d4918:	f000 fcb0 	bl	d527c <_ZN15Adafruit_BME28012readHumidityEv>
   d491c:	ee10 0a10 	vmov	r0, s0
   d4920:	f006 f8da 	bl	daad8 <__aeabi_f2d>
   d4924:	e9c7 0100 	strd	r0, r1, [r7]
  dust = getDust();
   d4928:	f7ff fcea 	bl	d4300 <_Z7getDustv>
   d492c:	ed88 0a00 	vstr	s0, [r8]
  Serial.printf("Dust Value = %0.2f \n",dust);
   d4930:	f003 fe30 	bl	d8594 <_Z16_fetch_usbserialv>
   d4934:	ed98 0a00 	vldr	s0, [r8]
   d4938:	4986      	ldr	r1, [pc, #536]	; (d4b54 <loop+0x2b4>)
   d493a:	f7ff fe97 	bl	d466c <_ZN5Print6printfIIfEEEjPKcDpT_>
  printMoist(moist);
   d493e:	6820      	ldr	r0, [r4, #0]
   d4940:	f7ff fc16 	bl	d4170 <_Z10printMoisti>
  printValues();
   d4944:	f7ff fc66 	bl	d4214 <_Z11printValuesv>

    if(mqtt.Update()) {
   d4948:	4883      	ldr	r0, [pc, #524]	; (d4b58 <loop+0x2b8>)
   d494a:	f000 ff26 	bl	d579a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d494e:	b318      	cbz	r0, d4998 <loop+0xf8>
       Htemp.publish(temp); 
   d4950:	2102      	movs	r1, #2
   d4952:	ed99 0b00 	vldr	d0, [r9]
   d4956:	4881      	ldr	r0, [pc, #516]	; (d4b5c <loop+0x2bc>)
   d4958:	f001 f9f6 	bl	d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hpres.publish(pres);
   d495c:	2102      	movs	r1, #2
   d495e:	ed96 0b00 	vldr	d0, [r6]
   d4962:	487f      	ldr	r0, [pc, #508]	; (d4b60 <loop+0x2c0>)
   d4964:	f001 f9f0 	bl	d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hhum.publish(hum);
   d4968:	ed97 0b00 	vldr	d0, [r7]
   d496c:	2102      	movs	r1, #2
   d496e:	487d      	ldr	r0, [pc, #500]	; (d4b64 <loop+0x2c4>)
   d4970:	f001 f9ea 	bl	d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>
       Hmoist.publish(moist);
   d4974:	6821      	ldr	r1, [r4, #0]
   d4976:	487c      	ldr	r0, [pc, #496]	; (d4b68 <loop+0x2c8>)
   d4978:	f001 f9e4 	bl	d5d44 <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hwater.publish(watered);
   d497c:	6829      	ldr	r1, [r5, #0]
   d497e:	487b      	ldr	r0, [pc, #492]	; (d4b6c <loop+0x2cc>)
   d4980:	f001 f9e0 	bl	d5d44 <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hdust.publish(dust);
   d4984:	f8d8 0000 	ldr.w	r0, [r8]
   d4988:	f006 f8a6 	bl	daad8 <__aeabi_f2d>
   d498c:	ec41 0b10 	vmov	d0, r0, r1
   d4990:	2102      	movs	r1, #2
   d4992:	4877      	ldr	r0, [pc, #476]	; (d4b70 <loop+0x2d0>)
   d4994:	f001 f9d8 	bl	d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    } 

    oledprint(temp, pres, hum, dust, moist);
   d4998:	e9d7 0100 	ldrd	r0, r1, [r7]
   d499c:	f006 fbe8 	bl	db170 <__aeabi_d2f>
   d49a0:	9003      	str	r0, [sp, #12]
   d49a2:	e9d6 0100 	ldrd	r0, r1, [r6]
   d49a6:	f006 fbe3 	bl	db170 <__aeabi_d2f>
   d49aa:	f8df 91e4 	ldr.w	r9, [pc, #484]	; d4b90 <loop+0x2f0>
   d49ae:	9002      	str	r0, [sp, #8]
   d49b0:	e9d9 0100 	ldrd	r0, r1, [r9]
   d49b4:	f006 fbdc 	bl	db170 <__aeabi_d2f>
   d49b8:	edd8 1a00 	vldr	s3, [r8]
   d49bc:	ed9d 1a03 	vldr	s2, [sp, #12]
   d49c0:	eddd 0a02 	vldr	s1, [sp, #8]
   d49c4:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d4b98 <loop+0x2f8>
   d49c8:	ee00 0a10 	vmov	s0, r0
   d49cc:	6820      	ldr	r0, [r4, #0]
   d49ce:	f7ff fe5d 	bl	d468c <_Z9oledprintffffi>

  Particle.publish("Moisture", String(moist),PRIVATE);
   d49d2:	220a      	movs	r2, #10
   d49d4:	6821      	ldr	r1, [r4, #0]
   d49d6:	a806      	add	r0, sp, #24
   d49d8:	f002 fee6 	bl	d77a8 <_ZN6StringC1Eih>
   d49dc:	f898 3000 	ldrb.w	r3, [r8]
   d49e0:	9a06      	ldr	r2, [sp, #24]
   d49e2:	4964      	ldr	r1, [pc, #400]	; (d4b74 <loop+0x2d4>)
   d49e4:	f88d 3000 	strb.w	r3, [sp]
   d49e8:	a804      	add	r0, sp, #16
   d49ea:	233c      	movs	r3, #60	; 0x3c
   d49ec:	f003 fb66 	bl	d80bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d49f0:	a805      	add	r0, sp, #20
   d49f2:	f7ff fe0f 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49f6:	a806      	add	r0, sp, #24
   d49f8:	f002 fe46 	bl	d7688 <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d49fc:	ed99 0b00 	vldr	d0, [r9]
   d4a00:	2106      	movs	r1, #6
   d4a02:	a806      	add	r0, sp, #24
   d4a04:	f002 fee3 	bl	d77ce <_ZN6StringC1Edi>
   d4a08:	f898 3000 	ldrb.w	r3, [r8]
   d4a0c:	9a06      	ldr	r2, [sp, #24]
   d4a0e:	495a      	ldr	r1, [pc, #360]	; (d4b78 <loop+0x2d8>)
   d4a10:	f88d 3000 	strb.w	r3, [sp]
   d4a14:	a804      	add	r0, sp, #16
   d4a16:	233c      	movs	r3, #60	; 0x3c
   d4a18:	f003 fb50 	bl	d80bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a1c:	a805      	add	r0, sp, #20
   d4a1e:	f7ff fdf9 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a22:	a806      	add	r0, sp, #24
   d4a24:	f002 fe30 	bl	d7688 <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d4a28:	220a      	movs	r2, #10
   d4a2a:	6829      	ldr	r1, [r5, #0]
   d4a2c:	a806      	add	r0, sp, #24
   d4a2e:	f002 febb 	bl	d77a8 <_ZN6StringC1Eih>
   d4a32:	f898 3000 	ldrb.w	r3, [r8]
   d4a36:	9a06      	ldr	r2, [sp, #24]
   d4a38:	4950      	ldr	r1, [pc, #320]	; (d4b7c <loop+0x2dc>)
   d4a3a:	f88d 3000 	strb.w	r3, [sp]
   d4a3e:	a804      	add	r0, sp, #16
   d4a40:	233c      	movs	r3, #60	; 0x3c
   d4a42:	f003 fb3b 	bl	d80bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a46:	a805      	add	r0, sp, #20
   d4a48:	f7ff fde4 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a4c:	a806      	add	r0, sp, #24
   d4a4e:	f002 fe1b 	bl	d7688 <_ZN6StringD1Ev>
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4a52:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4a56:	f006 fb8b 	bl	db170 <__aeabi_d2f>
   d4a5a:	9003      	str	r0, [sp, #12]
   d4a5c:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4a60:	f006 fb86 	bl	db170 <__aeabi_d2f>
   d4a64:	9002      	str	r0, [sp, #8]
   d4a66:	e9d9 0100 	ldrd	r0, r1, [r9]
   d4a6a:	f006 fb81 	bl	db170 <__aeabi_d2f>

    for(i=0;i<60;i++) {
   d4a6e:	4e44      	ldr	r6, [pc, #272]	; (d4b80 <loop+0x2e0>)

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4a70:	6829      	ldr	r1, [r5, #0]
   d4a72:	ed9d 1a03 	vldr	s2, [sp, #12]
   d4a76:	eddd 0a02 	vldr	s1, [sp, #8]

    for(i=0;i<60;i++) {
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
          if (subscription == &onoffbutton) {
   d4a7a:	f8df 8120 	ldr.w	r8, [pc, #288]	; d4b9c <loop+0x2fc>

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4a7e:	ee00 0a10 	vmov	s0, r0
   d4a82:	6820      	ldr	r0, [r4, #0]
   d4a84:	f7ff feac 	bl	d47e0 <_Z18createEventPayLoadifffi>

    for(i=0;i<60;i++) {
   d4a88:	2300      	movs	r3, #0
   d4a8a:	6033      	str	r3, [r6, #0]
   d4a8c:	6833      	ldr	r3, [r6, #0]
   d4a8e:	2b3b      	cmp	r3, #59	; 0x3b
   d4a90:	dc43      	bgt.n	d4b1a <loop+0x27a>
      Adafruit_MQTT_Subscribe *subscription;
      Serial.printf("x%i ",i);
   d4a92:	f003 fd7f 	bl	d8594 <_Z16_fetch_usbserialv>
   d4a96:	4b3a      	ldr	r3, [pc, #232]	; (d4b80 <loop+0x2e0>)
   d4a98:	4a3a      	ldr	r2, [pc, #232]	; (d4b84 <loop+0x2e4>)
   d4a9a:	681b      	ldr	r3, [r3, #0]
   d4a9c:	2100      	movs	r1, #0
   d4a9e:	f003 f852 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d4aa2:	f242 7110 	movw	r1, #10000	; 0x2710
   d4aa6:	482c      	ldr	r0, [pc, #176]	; (d4b58 <loop+0x2b8>)
   d4aa8:	f000 ff62 	bl	d5970 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d4aac:	b388      	cbz	r0, d4b12 <loop+0x272>
          if (subscription == &onoffbutton) {
   d4aae:	4540      	cmp	r0, r8
   d4ab0:	d1f7      	bne.n	d4aa2 <loop+0x202>
            button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d4ab2:	f108 0005 	add.w	r0, r8, #5
   d4ab6:	f006 fef5 	bl	db8a4 <atoi>
   d4aba:	4f33      	ldr	r7, [pc, #204]	; (d4b88 <loop+0x2e8>)
   d4abc:	6038      	str	r0, [r7, #0]
            Serial.printf("Button State is %i \n",button);
   d4abe:	f003 fd69 	bl	d8594 <_Z16_fetch_usbserialv>
   d4ac2:	2100      	movs	r1, #0
   d4ac4:	683b      	ldr	r3, [r7, #0]
   d4ac6:	4a31      	ldr	r2, [pc, #196]	; (d4b8c <loop+0x2ec>)
   d4ac8:	f003 f83d 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
            if(button==1) {
   d4acc:	6839      	ldr	r1, [r7, #0]
   d4ace:	2901      	cmp	r1, #1
   d4ad0:	d1e7      	bne.n	d4aa2 <loop+0x202>
              digitalWrite(D7,1);
   d4ad2:	2007      	movs	r0, #7
   d4ad4:	f004 fb4f 	bl	d9176 <digitalWrite>
              watered = waterPlant(3000);
   d4ad8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4adc:	f7ff fb0e 	bl	d40fc <_Z10waterPlanti>
   d4ae0:	6028      	str	r0, [r5, #0]
                  if(mqtt.Update()) {
   d4ae2:	481d      	ldr	r0, [pc, #116]	; (d4b58 <loop+0x2b8>)
   d4ae4:	f000 fe59 	bl	d579a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d4ae8:	b170      	cbz	r0, d4b08 <loop+0x268>
                    Htemp.publish(temp); 
   d4aea:	2102      	movs	r1, #2
   d4aec:	ed99 0b00 	vldr	d0, [r9]
   d4af0:	481a      	ldr	r0, [pc, #104]	; (d4b5c <loop+0x2bc>)
   d4af2:	f001 f929 	bl	d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>
                    Hmoist.publish(moist);
   d4af6:	6821      	ldr	r1, [r4, #0]
   d4af8:	481b      	ldr	r0, [pc, #108]	; (d4b68 <loop+0x2c8>)
   d4afa:	f001 f923 	bl	d5d44 <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hwater.publish(watered);
   d4afe:	4b0e      	ldr	r3, [pc, #56]	; (d4b38 <loop+0x298>)
   d4b00:	481a      	ldr	r0, [pc, #104]	; (d4b6c <loop+0x2cc>)
   d4b02:	6819      	ldr	r1, [r3, #0]
   d4b04:	f001 f91e 	bl	d5d44 <_ZN21Adafruit_MQTT_Publish7publishEi>
                  } 
              digitalWrite(D7,0);
   d4b08:	2100      	movs	r1, #0
   d4b0a:	2007      	movs	r0, #7
   d4b0c:	f004 fb33 	bl	d9176 <digitalWrite>
   d4b10:	e7c7      	b.n	d4aa2 <loop+0x202>
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,pres,hum,watered);

    for(i=0;i<60;i++) {
   d4b12:	6833      	ldr	r3, [r6, #0]
   d4b14:	3301      	adds	r3, #1
   d4b16:	6033      	str	r3, [r6, #0]
   d4b18:	e7b8      	b.n	d4a8c <loop+0x1ec>
              digitalWrite(D7,0);
            }
          }
        }
    }    
}
   d4b1a:	b00b      	add	sp, #44	; 0x2c
   d4b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b20:	cccccccd 	.word	0xcccccccd
   d4b24:	3ffccccc 	.word	0x3ffccccc
   d4b28:	c100e6b0 	.word	0xc100e6b0
   d4b2c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4b30:	2003dc6c 	.word	0x2003dc6c
   d4b34:	2003e370 	.word	0x2003e370
   d4b38:	2003e328 	.word	0x2003e328
   d4b3c:	2003e380 	.word	0x2003e380
   d4b40:	2003e288 	.word	0x2003e288
   d4b44:	2003e32c 	.word	0x2003e32c
   d4b48:	40400000 	.word	0x40400000
   d4b4c:	42c80000 	.word	0x42c80000
   d4b50:	40140000 	.word	0x40140000
   d4b54:	000dc78c 	.word	0x000dc78c
   d4b58:	2003e1a8 	.word	0x2003e1a8
   d4b5c:	2003e308 	.word	0x2003e308
   d4b60:	2003e27c 	.word	0x2003e27c
   d4b64:	2003e2f8 	.word	0x2003e2f8
   d4b68:	2003e180 	.word	0x2003e180
   d4b6c:	2003e158 	.word	0x2003e158
   d4b70:	2003e374 	.word	0x2003e374
   d4b74:	000dc823 	.word	0x000dc823
   d4b78:	000dc805 	.word	0x000dc805
   d4b7c:	000dc5cf 	.word	0x000dc5cf
   d4b80:	2003e2f4 	.word	0x2003e2f4
   d4b84:	000dc7a1 	.word	0x000dc7a1
   d4b88:	2003e314 	.word	0x2003e314
   d4b8c:	000dc7a6 	.word	0x000dc7a6
   d4b90:	2003e190 	.word	0x2003e190
   d4b94:	2003e304 	.word	0x2003e304
   d4b98:	2003e2ec 	.word	0x2003e2ec
   d4b9c:	2003e290 	.word	0x2003e290

000d4ba0 <_ZN16Adafruit_SSD1306D0Ev>:
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	2124      	movs	r1, #36	; 0x24
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	f004 fb9d 	bl	d92e4 <_ZdlPvj>
   d4baa:	4620      	mov	r0, r4
   d4bac:	bd10      	pop	{r4, pc}

000d4bae <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4bae:	b510      	push	{r4, lr}
   d4bb0:	21d4      	movs	r1, #212	; 0xd4
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	f004 fb96 	bl	d92e4 <_ZdlPvj>
   d4bb8:	4620      	mov	r0, r4
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_GLOBAL__sub_I_display>:
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bbe:	4b39      	ldr	r3, [pc, #228]	; (d4ca4 <_GLOBAL__sub_I_display+0xe8>)
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

// Setup OLED Display
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d4bc0:	4c39      	ldr	r4, [pc, #228]	; (d4ca8 <_GLOBAL__sub_I_display+0xec>)
   d4bc2:	4d3a      	ldr	r5, [pc, #232]	; (d4cac <_GLOBAL__sub_I_display+0xf0>)
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4bc4:	4e3a      	ldr	r6, [pc, #232]	; (d4cb0 <_GLOBAL__sub_I_display+0xf4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4bc6:	4f3b      	ldr	r7, [pc, #236]	; (d4cb4 <_GLOBAL__sub_I_display+0xf8>)
   d4bc8:	2201      	movs	r2, #1
   d4bca:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4bcc:	f001 ffa4 	bl	d6b18 <HAL_Pin_Map>
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

// Setup OLED Display
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d4bd0:	f04f 31ff 	mov.w	r1, #4294967295
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f001 fc0d 	bl	d63f4 <_ZN16Adafruit_SSD1306C1Ea>
   d4bda:	462a      	mov	r2, r5
   d4bdc:	4936      	ldr	r1, [pc, #216]	; (d4cb8 <_GLOBAL__sub_I_display+0xfc>)
   d4bde:	4620      	mov	r0, r4
   d4be0:	f004 fb72 	bl	d92c8 <__aeabi_atexit>
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4be4:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4be6:	4c35      	ldr	r4, [pc, #212]	; (d4cbc <_GLOBAL__sub_I_display+0x100>)
   d4be8:	f004 f97e 	bl	d8ee8 <_ZN9TCPClientC1Ev>
   d4bec:	462a      	mov	r2, r5
   d4bee:	4934      	ldr	r1, [pc, #208]	; (d4cc0 <_GLOBAL__sub_I_display+0x104>)
   d4bf0:	4630      	mov	r0, r6
   d4bf2:	f004 fb69 	bl	d92c8 <__aeabi_atexit>
   d4bf6:	4b33      	ldr	r3, [pc, #204]	; (d4cc4 <_GLOBAL__sub_I_display+0x108>)
   d4bf8:	9300      	str	r3, [sp, #0]
   d4bfa:	f240 725b 	movw	r2, #1883	; 0x75b
   d4bfe:	4b32      	ldr	r3, [pc, #200]	; (d4cc8 <_GLOBAL__sub_I_display+0x10c>)
   d4c00:	4932      	ldr	r1, [pc, #200]	; (d4ccc <_GLOBAL__sub_I_display+0x110>)
   d4c02:	4620      	mov	r0, r4
   d4c04:	f000 fdfe 	bl	d5804 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4c08:	4b31      	ldr	r3, [pc, #196]	; (d4cd0 <_GLOBAL__sub_I_display+0x114>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4c0a:	4932      	ldr	r1, [pc, #200]	; (d4cd4 <_GLOBAL__sub_I_display+0x118>)
   d4c0c:	6023      	str	r3, [r4, #0]
   d4c0e:	462a      	mov	r2, r5
   d4c10:	4620      	mov	r0, r4
   d4c12:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4c16:	f004 fb57 	bl	d92c8 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4c1a:	4621      	mov	r1, r4
   d4c1c:	2300      	movs	r3, #0
   d4c1e:	4a2e      	ldr	r2, [pc, #184]	; (d4cd8 <_GLOBAL__sub_I_display+0x11c>)
   d4c20:	482e      	ldr	r0, [pc, #184]	; (d4cdc <_GLOBAL__sub_I_display+0x120>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4c22:	4e2f      	ldr	r6, [pc, #188]	; (d4ce0 <_GLOBAL__sub_I_display+0x124>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4c24:	f001 f87a 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d4c28:	4621      	mov	r1, r4
   d4c2a:	2300      	movs	r3, #0
   d4c2c:	4a2d      	ldr	r2, [pc, #180]	; (d4ce4 <_GLOBAL__sub_I_display+0x128>)
   d4c2e:	482e      	ldr	r0, [pc, #184]	; (d4ce8 <_GLOBAL__sub_I_display+0x12c>)
   d4c30:	f001 f874 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4c34:	4621      	mov	r1, r4
   d4c36:	2300      	movs	r3, #0
   d4c38:	4a2c      	ldr	r2, [pc, #176]	; (d4cec <_GLOBAL__sub_I_display+0x130>)
   d4c3a:	482d      	ldr	r0, [pc, #180]	; (d4cf0 <_GLOBAL__sub_I_display+0x134>)
   d4c3c:	f001 f86e 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4c40:	4621      	mov	r1, r4
   d4c42:	2300      	movs	r3, #0
   d4c44:	4a2b      	ldr	r2, [pc, #172]	; (d4cf4 <_GLOBAL__sub_I_display+0x138>)
   d4c46:	482c      	ldr	r0, [pc, #176]	; (d4cf8 <_GLOBAL__sub_I_display+0x13c>)
   d4c48:	f001 f868 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d4c4c:	4621      	mov	r1, r4
   d4c4e:	2300      	movs	r3, #0
   d4c50:	4a2a      	ldr	r2, [pc, #168]	; (d4cfc <_GLOBAL__sub_I_display+0x140>)
   d4c52:	482b      	ldr	r0, [pc, #172]	; (d4d00 <_GLOBAL__sub_I_display+0x144>)
   d4c54:	f001 f862 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 
   d4c58:	4621      	mov	r1, r4
   d4c5a:	2300      	movs	r3, #0
   d4c5c:	4a29      	ldr	r2, [pc, #164]	; (d4d04 <_GLOBAL__sub_I_display+0x148>)
   d4c5e:	482a      	ldr	r0, [pc, #168]	; (d4d08 <_GLOBAL__sub_I_display+0x14c>)
   d4c60:	f001 f85c 	bl	d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4c64:	2300      	movs	r3, #0
   d4c66:	4a29      	ldr	r2, [pc, #164]	; (d4d0c <_GLOBAL__sub_I_display+0x150>)
   d4c68:	4829      	ldr	r0, [pc, #164]	; (d4d10 <_GLOBAL__sub_I_display+0x154>)
   d4c6a:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4c6c:	4c29      	ldr	r4, [pc, #164]	; (d4d14 <_GLOBAL__sub_I_display+0x158>)
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4c6e:	f001 f889 	bl	d5d84 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4c72:	4829      	ldr	r0, [pc, #164]	; (d4d18 <_GLOBAL__sub_I_display+0x15c>)
   d4c74:	f000 f880 	bl	d4d78 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4c78:	4639      	mov	r1, r7
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f002 fd4b 	bl	d7716 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c80:	4620      	mov	r0, r4
String t2;
   d4c82:	4c26      	ldr	r4, [pc, #152]	; (d4d1c <_GLOBAL__sub_I_display+0x160>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4c84:	462a      	mov	r2, r5
   d4c86:	4631      	mov	r1, r6
   d4c88:	f004 fb1e 	bl	d92c8 <__aeabi_atexit>
String t2;
   d4c8c:	4639      	mov	r1, r7
   d4c8e:	4620      	mov	r0, r4
   d4c90:	f002 fd41 	bl	d7716 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c94:	462a      	mov	r2, r5
   d4c96:	4631      	mov	r1, r6
   d4c98:	4620      	mov	r0, r4
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4c9a:	b003      	add	sp, #12
   d4c9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d4ca0:	f004 bb12 	b.w	d92c8 <__aeabi_atexit>
   d4ca4:	2003e2ec 	.word	0x2003e2ec
   d4ca8:	2003e2c8 	.word	0x2003e2c8
   d4cac:	2003e148 	.word	0x2003e148
   d4cb0:	2003e164 	.word	0x2003e164
   d4cb4:	000dc951 	.word	0x000dc951
   d4cb8:	000d40cd 	.word	0x000d40cd
   d4cbc:	2003e1a8 	.word	0x2003e1a8
   d4cc0:	000d4641 	.word	0x000d4641
   d4cc4:	000dc7d2 	.word	0x000dc7d2
   d4cc8:	000dc7bb 	.word	0x000dc7bb
   d4ccc:	000dc7c2 	.word	0x000dc7c2
   d4cd0:	000dc904 	.word	0x000dc904
   d4cd4:	000d40cf 	.word	0x000d40cf
   d4cd8:	000dc7f3 	.word	0x000dc7f3
   d4cdc:	2003e308 	.word	0x2003e308
   d4ce0:	000d7689 	.word	0x000d7689
   d4ce4:	000dc811 	.word	0x000dc811
   d4ce8:	2003e180 	.word	0x2003e180
   d4cec:	000dc82c 	.word	0x000dc82c
   d4cf0:	2003e158 	.word	0x2003e158
   d4cf4:	000dc844 	.word	0x000dc844
   d4cf8:	2003e27c 	.word	0x2003e27c
   d4cfc:	000dc85f 	.word	0x000dc85f
   d4d00:	2003e2f8 	.word	0x2003e2f8
   d4d04:	000dc87a 	.word	0x000dc87a
   d4d08:	2003e374 	.word	0x2003e374
   d4d0c:	000dc891 	.word	0x000dc891
   d4d10:	2003e290 	.word	0x2003e290
   d4d14:	2003e318 	.word	0x2003e318
   d4d18:	2003e32c 	.word	0x2003e32c
   d4d1c:	2003e198 	.word	0x2003e198

000d4d20 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4d22:	4602      	mov	r2, r0
   d4d24:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4d26:	7913      	ldrb	r3, [r2, #4]
   d4d28:	6895      	ldr	r5, [r2, #8]
   d4d2a:	b133      	cbz	r3, d4d3a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4d2c:	b93d      	cbnz	r5, d4d3e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4d2e:	490c      	ldr	r1, [pc, #48]	; (d4d60 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4d30:	b004      	add	sp, #16
   d4d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4d36:	f002 bddf 	b.w	d78f8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4d3a:	4b0a      	ldr	r3, [pc, #40]	; (d4d64 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4d3c:	e000      	b.n	d4d40 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4d3e:	4b0a      	ldr	r3, [pc, #40]	; (d4d68 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4d40:	7b16      	ldrb	r6, [r2, #12]
   d4d42:	4c0a      	ldr	r4, [pc, #40]	; (d4d6c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4d44:	490a      	ldr	r1, [pc, #40]	; (d4d70 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4d46:	7b52      	ldrb	r2, [r2, #13]
   d4d48:	9202      	str	r2, [sp, #8]
   d4d4a:	2e01      	cmp	r6, #1
   d4d4c:	bf08      	it	eq
   d4d4e:	4621      	moveq	r1, r4
   d4d50:	9101      	str	r1, [sp, #4]
   d4d52:	9500      	str	r5, [sp, #0]
   d4d54:	4a07      	ldr	r2, [pc, #28]	; (d4d74 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4d56:	2100      	movs	r1, #0
   d4d58:	f002 fef5 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
  }
   d4d5c:	b004      	add	sp, #16
   d4d5e:	bd70      	pop	{r4, r5, r6, pc}
   d4d60:	000dc8c5 	.word	0x000dc8c5
   d4d64:	000dc951 	.word	0x000dc951
   d4d68:	000dc8b4 	.word	0x000dc8b4
   d4d6c:	000dc8bd 	.word	0x000dc8bd
   d4d70:	000dc8c1 	.word	0x000dc8c1
   d4d74:	000dc8db 	.word	0x000dc8db

000d4d78 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4d78:	22ff      	movs	r2, #255	; 0xff
   d4d7a:	7402      	strb	r2, [r0, #16]
   d4d7c:	7442      	strb	r2, [r0, #17]
   d4d7e:	7482      	strb	r2, [r0, #18]
   d4d80:	74c2      	strb	r2, [r0, #19]
{ }
   d4d82:	4770      	bx	lr

000d4d84 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4d84:	6880      	ldr	r0, [r0, #8]
   d4d86:	4770      	bx	lr

000d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4d88:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4d8a:	4d09      	ldr	r5, [pc, #36]	; (d4db0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4d8c:	6829      	ldr	r1, [r5, #0]
   d4d8e:	f011 0401 	ands.w	r4, r1, #1
   d4d92:	d10a      	bne.n	d4daa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4d94:	4628      	mov	r0, r5
   d4d96:	f7ff f991 	bl	d40bc <__cxa_guard_acquire>
   d4d9a:	b130      	cbz	r0, d4daa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4d9c:	4621      	mov	r1, r4
   d4d9e:	4805      	ldr	r0, [pc, #20]	; (d4db4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4da0:	f002 fa32 	bl	d7208 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4da4:	4628      	mov	r0, r5
   d4da6:	f7ff f98e 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4daa:	4802      	ldr	r0, [pc, #8]	; (d4db4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4dac:	bd38      	pop	{r3, r4, r5, pc}
   d4dae:	bf00      	nop
   d4db0:	2003e3a4 	.word	0x2003e3a4
   d4db4:	2003e3a8 	.word	0x2003e3a8

000d4db8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4dbc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4dc0:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4dc2:	4605      	mov	r5, r0
   d4dc4:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4dc6:	d106      	bne.n	d4dd6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4dc8:	f7ff ffde 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4dcc:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4dd2:	f002 bb35 	b.w	d7440 <_ZN8SPIClass8transferEh>
   d4dd6:	2607      	movs	r6, #7
   d4dd8:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4dda:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4dde:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4de2:	2100      	movs	r1, #0
   d4de4:	b280      	uxth	r0, r0
   d4de6:	f004 f9c6 	bl	d9176 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4dea:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4dee:	fa08 f106 	lsl.w	r1, r8, r6
   d4df2:	4039      	ands	r1, r7
   d4df4:	b280      	uxth	r0, r0
   d4df6:	f004 f9be 	bl	d9176 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4dfa:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4dfe:	2101      	movs	r1, #1
   d4e00:	b280      	uxth	r0, r0
   d4e02:	f004 f9b8 	bl	d9176 <digitalWrite>
        if (digitalRead(_miso))
   d4e06:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4e0a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4e0c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4e0e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4e10:	f004 f9ca 	bl	d91a8 <digitalRead>
   d4e14:	b108      	cbz	r0, d4e1a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4e16:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4e1a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4e1e:	d2de      	bcs.n	d4dde <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4e20:	4620      	mov	r0, r4
   d4e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e26 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4e26:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4e28:	f7ff ffae 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4e30:	f002 ba27 	b.w	d7282 <_ZN8SPIClass14endTransactionEv>

000d4e34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4e34:	b510      	push	{r4, lr}
   d4e36:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4e38:	f7ff ffa6 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4e3c:	4621      	mov	r1, r4
    }
   d4e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4e42:	f002 ba37 	b.w	d72b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4e48 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4e48:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4e4a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4e4e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4e50:	b085      	sub	sp, #20
   d4e52:	4604      	mov	r4, r0
   d4e54:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4e56:	d121      	bne.n	d4e9c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4e58:	7901      	ldrb	r1, [r0, #4]
   d4e5a:	6800      	ldr	r0, [r0, #0]
   d4e5c:	f003 fccb 	bl	d87f6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4e60:	6820      	ldr	r0, [r4, #0]
   d4e62:	6803      	ldr	r3, [r0, #0]
   d4e64:	4629      	mov	r1, r5
   d4e66:	689b      	ldr	r3, [r3, #8]
   d4e68:	4798      	blx	r3
        _wire -> endTransmission();
   d4e6a:	6820      	ldr	r0, [r4, #0]
   d4e6c:	f003 fcce 	bl	d880c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4e70:	2203      	movs	r2, #3
   d4e72:	7921      	ldrb	r1, [r4, #4]
   d4e74:	6820      	ldr	r0, [r4, #0]
   d4e76:	f003 fcbb 	bl	d87f0 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4e7a:	6820      	ldr	r0, [r4, #0]
   d4e7c:	6803      	ldr	r3, [r0, #0]
   d4e7e:	695b      	ldr	r3, [r3, #20]
   d4e80:	4798      	blx	r3
        value <<= 8;
   d4e82:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4e84:	6820      	ldr	r0, [r4, #0]
   d4e86:	6803      	ldr	r3, [r0, #0]
   d4e88:	695b      	ldr	r3, [r3, #20]
   d4e8a:	4798      	blx	r3
   d4e8c:	4328      	orrs	r0, r5
        value <<= 8;
   d4e8e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4e90:	6820      	ldr	r0, [r4, #0]
   d4e92:	6803      	ldr	r3, [r0, #0]
   d4e94:	695b      	ldr	r3, [r3, #20]
   d4e96:	4798      	blx	r3
   d4e98:	4305      	orrs	r5, r0
   d4e9a:	e039      	b.n	d4f10 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4e9c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ea0:	3301      	adds	r3, #1
   d4ea2:	d10e      	bne.n	d4ec2 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4ea4:	4b1c      	ldr	r3, [pc, #112]	; (d4f18 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4ea6:	4a1d      	ldr	r2, [pc, #116]	; (d4f1c <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4ea8:	9300      	str	r3, [sp, #0]
   d4eaa:	9202      	str	r2, [sp, #8]
   d4eac:	2300      	movs	r3, #0
   d4eae:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4eb0:	4668      	mov	r0, sp
   d4eb2:	f88d 3004 	strb.w	r3, [sp, #4]
   d4eb6:	f88d 200c 	strb.w	r2, [sp, #12]
   d4eba:	f88d 300d 	strb.w	r3, [sp, #13]
   d4ebe:	f7ff ffb9 	bl	d4e34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4ec2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ec6:	2100      	movs	r1, #0
   d4ec8:	b280      	uxth	r0, r0
   d4eca:	f004 f954 	bl	d9176 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4ece:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	f7ff ff70 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4ed8:	2100      	movs	r1, #0
   d4eda:	4620      	mov	r0, r4
   d4edc:	f7ff ff6c 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4ee0:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4ee2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	f7ff ff67 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
   d4eea:	4328      	orrs	r0, r5
        value <<= 8;
   d4eec:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4eee:	2100      	movs	r1, #0
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	f7ff ff61 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
   d4ef6:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4ef8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4efc:	2101      	movs	r1, #1
   d4efe:	b280      	uxth	r0, r0
   d4f00:	f004 f939 	bl	d9176 <digitalWrite>
        if (_sck == -1)
   d4f04:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4f08:	3301      	adds	r3, #1
   d4f0a:	d101      	bne.n	d4f10 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4f0c:	f7ff ff8b 	bl	d4e26 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4f10:	4628      	mov	r0, r5
   d4f12:	b005      	add	sp, #20
   d4f14:	bd30      	pop	{r4, r5, pc}
   d4f16:	bf00      	nop
   d4f18:	000dc8b0 	.word	0x000dc8b0
   d4f1c:	0007a120 	.word	0x0007a120

000d4f20 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4f20:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4f22:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4f24:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4f26:	f7ff ff8f 	bl	d4e48 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4f2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4f2e:	d01e      	beq.n	d4f6e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4f30:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4f32:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4f74 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4f36:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4f3a:	0052      	lsls	r2, r2, #1
   d4f3c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4f40:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4f44:	435b      	muls	r3, r3
   d4f46:	4350      	muls	r0, r2
   d4f48:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4f4c:	131b      	asrs	r3, r3, #12
   d4f4e:	4353      	muls	r3, r2
   d4f50:	139b      	asrs	r3, r3, #14
   d4f52:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4f56:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4f58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4f5c:	3080      	adds	r0, #128	; 0x80
   d4f5e:	1200      	asrs	r0, r0, #8
   d4f60:	ee07 0a90 	vmov	s15, r0
   d4f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4f68:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4f6c:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4f6e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4f78 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4f72:	bd10      	pop	{r4, pc}
   d4f74:	42c80000 	.word	0x42c80000
   d4f78:	7fc00000 	.word	0x7fc00000

000d4f7c <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f80:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4f82:	f7ff ffcd 	bl	d4f20 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4f86:	21f7      	movs	r1, #247	; 0xf7
   d4f88:	4630      	mov	r0, r6
   d4f8a:	f7ff ff5d 	bl	d4e48 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4f8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4f92:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4f94:	f000 80c1 	beq.w	d511a <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4f98:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4f9a:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4f9e:	17e5      	asrs	r5, r4, #31
   d4fa0:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4fa4:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4fa8:	fba4 8904 	umull	r8, r9, r4, r4
   d4fac:	fb04 f305 	mul.w	r3, r4, r5
   d4fb0:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4fb4:	fb02 f105 	mul.w	r1, r2, r5
   d4fb8:	17d3      	asrs	r3, r2, #31
   d4fba:	fb04 1103 	mla	r1, r4, r3, r1
   d4fbe:	fba2 2304 	umull	r2, r3, r2, r4
   d4fc2:	440b      	add	r3, r1
   d4fc4:	0319      	lsls	r1, r3, #12
   d4fc6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4fca:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4fcc:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4fd0:	17d3      	asrs	r3, r2, #31
   d4fd2:	fb02 fe09 	mul.w	lr, r2, r9
   d4fd6:	fb08 ee03 	mla	lr, r8, r3, lr
   d4fda:	fba2 2308 	umull	r2, r3, r2, r8
   d4fde:	4473      	add	r3, lr
   d4fe0:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4fe4:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4fe8:	eb1a 0a00 	adds.w	sl, sl, r0
   d4fec:	8b72      	ldrh	r2, [r6, #26]
   d4fee:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4ff2:	eb4b 0b01 	adc.w	fp, fp, r1
   d4ff6:	f11a 0000 	adds.w	r0, sl, #0
   d4ffa:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4ffe:	fba0 ab02 	umull	sl, fp, r0, r2
   d5002:	fb02 bb01 	mla	fp, r2, r1, fp
   d5006:	ea4f 026b 	mov.w	r2, fp, asr #1
   d500a:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d500e:	ea52 0103 	orrs.w	r1, r2, r3
   d5012:	f000 8086 	beq.w	d5122 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5016:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d501a:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d501e:	fb0a f109 	mul.w	r1, sl, r9
   d5022:	fb08 110b 	mla	r1, r8, fp, r1
   d5026:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d502a:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d502e:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5030:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d5034:	fb0a f105 	mul.w	r1, sl, r5
   d5038:	fb04 110b 	mla	r1, r4, fp, r1
   d503c:	fbaa 4504 	umull	r4, r5, sl, r4
   d5040:	440d      	add	r5, r1
   d5042:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d5046:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d504a:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d504c:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d5050:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5054:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d5058:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d505c:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d5060:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d5064:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d5068:	07c4      	lsls	r4, r0, #31
   d506a:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d506e:	f04f 0800 	mov.w	r8, #0
   d5072:	eb18 080a 	adds.w	r8, r8, sl
   d5076:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d507a:	eb49 090b 	adc.w	r9, r9, fp
   d507e:	f640 4735 	movw	r7, #3125	; 0xc35
   d5082:	ebb4 0408 	subs.w	r4, r4, r8
   d5086:	eb65 0509 	sbc.w	r5, r5, r9
   d508a:	fba4 0107 	umull	r0, r1, r4, r7
   d508e:	fb07 1105 	mla	r1, r7, r5, r1
   d5092:	f006 f9cb 	bl	db42c <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5096:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d509a:	134c      	asrs	r4, r1, #13
   d509c:	0b45      	lsrs	r5, r0, #13
   d509e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d50a2:	fb02 f704 	mul.w	r7, r2, r4
   d50a6:	17d3      	asrs	r3, r2, #31
   d50a8:	fb05 7703 	mla	r7, r5, r3, r7
   d50ac:	fba2 2305 	umull	r2, r3, r2, r5
   d50b0:	443b      	add	r3, r7
   d50b2:	4354      	muls	r4, r2
   d50b4:	fb05 4403 	mla	r4, r5, r3, r4
   d50b8:	fba2 2305 	umull	r2, r3, r2, r5
   d50bc:	4423      	add	r3, r4
   d50be:	0e54      	lsrs	r4, r2, #25
   d50c0:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d50c4:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d50c8:	1824      	adds	r4, r4, r0
   d50ca:	ea4f 6563 	mov.w	r5, r3, asr #25
   d50ce:	414d      	adcs	r5, r1
   d50d0:	17d3      	asrs	r3, r2, #31
   d50d2:	4351      	muls	r1, r2
   d50d4:	fb00 1303 	mla	r3, r0, r3, r1
   d50d8:	fba2 0100 	umull	r0, r1, r2, r0
   d50dc:	4419      	add	r1, r3
   d50de:	0cc2      	lsrs	r2, r0, #19
   d50e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d50e4:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d50e6:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d50ea:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d50ee:	416b      	adcs	r3, r5
   d50f0:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d50f2:	17e5      	asrs	r5, r4, #31
   d50f4:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d50f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d50fa:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d50fc:	012b      	lsls	r3, r5, #4
   d50fe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d5102:	1880      	adds	r0, r0, r2
   d5104:	4159      	adcs	r1, r3
   d5106:	f006 f953 	bl	db3b0 <__aeabi_l2f>
   d510a:	ed9f 0a08 	vldr	s0, [pc, #32]	; d512c <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d510e:	ee07 0a90 	vmov	s15, r0
   d5112:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d511a:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5130 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d511e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d5122:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5134 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d5126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d512a:	bf00      	nop
   d512c:	3b800000 	.word	0x3b800000
   d5130:	7fc00000 	.word	0x7fc00000
   d5134:	00000000 	.word	0x00000000

000d5138 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d5138:	b508      	push	{r3, lr}
   d513a:	ed2d 8b02 	vpush	{d8}
   d513e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d5142:	f7ff ff1b 	bl	d4f7c <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d5146:	eddf 7a16 	vldr	s15, [pc, #88]	; d51a0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d514a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d514e:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d5152:	ee17 0a90 	vmov	r0, s15
   d5156:	f005 fcbf 	bl	daad8 <__aeabi_f2d>
   d515a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5190 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d515e:	ec41 0b10 	vmov	d0, r0, r1
   d5162:	f004 fa1d 	bl	d95a0 <pow>
   d5166:	2000      	movs	r0, #0
   d5168:	ec53 2b10 	vmov	r2, r3, d0
   d516c:	490d      	ldr	r1, [pc, #52]	; (d51a4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d516e:	f005 fb53 	bl	da818 <__aeabi_dsub>
   d5172:	a309      	add	r3, pc, #36	; (adr r3, d5198 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d5174:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5178:	f005 fd02 	bl	dab80 <__aeabi_dmul>
   d517c:	f005 fff8 	bl	db170 <__aeabi_d2f>
}
   d5180:	ecbd 8b02 	vpop	{d8}
   d5184:	ee00 0a10 	vmov	s0, r0
   d5188:	bd08      	pop	{r3, pc}
   d518a:	bf00      	nop
   d518c:	f3af 8000 	nop.w
   d5190:	1a36e2eb 	.word	0x1a36e2eb
   d5194:	3fc85bc0 	.word	0x3fc85bc0
   d5198:	00000000 	.word	0x00000000
   d519c:	40e5a540 	.word	0x40e5a540
   d51a0:	42c80000 	.word	0x42c80000
   d51a4:	3ff00000 	.word	0x3ff00000

000d51a8 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d51a8:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d51aa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d51ae:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d51b0:	b085      	sub	sp, #20
   d51b2:	4604      	mov	r4, r0
   d51b4:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d51b6:	d11d      	bne.n	d51f4 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d51b8:	7901      	ldrb	r1, [r0, #4]
   d51ba:	6800      	ldr	r0, [r0, #0]
   d51bc:	f003 fb1b 	bl	d87f6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d51c0:	6820      	ldr	r0, [r4, #0]
   d51c2:	6803      	ldr	r3, [r0, #0]
   d51c4:	4629      	mov	r1, r5
   d51c6:	689b      	ldr	r3, [r3, #8]
   d51c8:	4798      	blx	r3
        _wire -> endTransmission();
   d51ca:	6820      	ldr	r0, [r4, #0]
   d51cc:	f003 fb1e 	bl	d880c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d51d0:	2202      	movs	r2, #2
   d51d2:	7921      	ldrb	r1, [r4, #4]
   d51d4:	6820      	ldr	r0, [r4, #0]
   d51d6:	f003 fb0b 	bl	d87f0 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d51da:	6820      	ldr	r0, [r4, #0]
   d51dc:	6803      	ldr	r3, [r0, #0]
   d51de:	695b      	ldr	r3, [r3, #20]
   d51e0:	4798      	blx	r3
   d51e2:	4605      	mov	r5, r0
   d51e4:	6820      	ldr	r0, [r4, #0]
   d51e6:	6803      	ldr	r3, [r0, #0]
   d51e8:	695b      	ldr	r3, [r3, #20]
   d51ea:	4798      	blx	r3
   d51ec:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d51f0:	b285      	uxth	r5, r0
   d51f2:	e035      	b.n	d5260 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d51f4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d51f8:	3301      	adds	r3, #1
   d51fa:	d10e      	bne.n	d521a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d51fc:	4b1a      	ldr	r3, [pc, #104]	; (d5268 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d51fe:	4a1b      	ldr	r2, [pc, #108]	; (d526c <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d5200:	9300      	str	r3, [sp, #0]
   d5202:	9202      	str	r2, [sp, #8]
   d5204:	2300      	movs	r3, #0
   d5206:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5208:	4668      	mov	r0, sp
   d520a:	f88d 3004 	strb.w	r3, [sp, #4]
   d520e:	f88d 200c 	strb.w	r2, [sp, #12]
   d5212:	f88d 300d 	strb.w	r3, [sp, #13]
   d5216:	f7ff fe0d 	bl	d4e34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d521a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d521e:	2100      	movs	r1, #0
   d5220:	b280      	uxth	r0, r0
   d5222:	f003 ffa8 	bl	d9176 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5226:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d522a:	4620      	mov	r0, r4
   d522c:	f7ff fdc4 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5230:	2100      	movs	r1, #0
   d5232:	4620      	mov	r0, r4
   d5234:	f7ff fdc0 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
   d5238:	2100      	movs	r1, #0
   d523a:	4605      	mov	r5, r0
   d523c:	4620      	mov	r0, r4
   d523e:	f7ff fdbb 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
   d5242:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5246:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5248:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d524c:	2101      	movs	r1, #1
   d524e:	b280      	uxth	r0, r0
   d5250:	f003 ff91 	bl	d9176 <digitalWrite>
        if (_sck == -1)
   d5254:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5258:	3301      	adds	r3, #1
   d525a:	d101      	bne.n	d5260 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d525c:	f7ff fde3 	bl	d4e26 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d5260:	4628      	mov	r0, r5
   d5262:	b005      	add	sp, #20
   d5264:	bd30      	pop	{r4, r5, pc}
   d5266:	bf00      	nop
   d5268:	000dc8b0 	.word	0x000dc8b0
   d526c:	0007a120 	.word	0x0007a120

000d5270 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5270:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5272:	f7ff ff99 	bl	d51a8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5276:	ba40      	rev16	r0, r0
}
   d5278:	b280      	uxth	r0, r0
   d527a:	bd08      	pop	{r3, pc}

000d527c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d527c:	b510      	push	{r4, lr}
   d527e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5280:	f7ff fe4e 	bl	d4f20 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5284:	21fd      	movs	r1, #253	; 0xfd
   d5286:	4620      	mov	r0, r4
   d5288:	f7ff ff8e 	bl	d51a8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d528c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5290:	d038      	beq.n	d5304 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5292:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5296:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5298:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d529c:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d529e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d52a2:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d52a6:	fb02 3311 	mls	r3, r2, r1, r3
   d52aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d52ae:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d52b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d52b4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d52b8:	4353      	muls	r3, r2
   d52ba:	12db      	asrs	r3, r3, #11
   d52bc:	4342      	muls	r2, r0
   d52be:	1292      	asrs	r2, r2, #10
   d52c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d52c4:	4353      	muls	r3, r2
   d52c6:	129b      	asrs	r3, r3, #10
   d52c8:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d52cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d52d0:	4353      	muls	r3, r2
   d52d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d52d6:	139b      	asrs	r3, r3, #14
   d52d8:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d52da:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d52dc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d52e0:	4352      	muls	r2, r2
   d52e2:	11d2      	asrs	r2, r2, #7
   d52e4:	434a      	muls	r2, r1
   d52e6:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d52ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d52ee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d52f2:	bfa8      	it	ge
   d52f4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d52f8:	131b      	asrs	r3, r3, #12
   d52fa:	ee00 3a10 	vmov	s0, r3
   d52fe:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d5302:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d5304:	ed9f 0a01 	vldr	s0, [pc, #4]	; d530c <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d5308:	bd10      	pop	{r4, pc}
   d530a:	bf00      	nop
   d530c:	7fc00000 	.word	0x7fc00000

000d5310 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5310:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d5312:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5316:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5318:	b085      	sub	sp, #20
   d531a:	4604      	mov	r4, r0
   d531c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d531e:	d116      	bne.n	d534e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5320:	7901      	ldrb	r1, [r0, #4]
   d5322:	6800      	ldr	r0, [r0, #0]
   d5324:	f003 fa67 	bl	d87f6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5328:	6820      	ldr	r0, [r4, #0]
   d532a:	6803      	ldr	r3, [r0, #0]
   d532c:	4629      	mov	r1, r5
   d532e:	689b      	ldr	r3, [r3, #8]
   d5330:	4798      	blx	r3
        _wire -> endTransmission();
   d5332:	6820      	ldr	r0, [r4, #0]
   d5334:	f003 fa6a 	bl	d880c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5338:	2201      	movs	r2, #1
   d533a:	7921      	ldrb	r1, [r4, #4]
   d533c:	6820      	ldr	r0, [r4, #0]
   d533e:	f003 fa57 	bl	d87f0 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5342:	6820      	ldr	r0, [r4, #0]
   d5344:	6803      	ldr	r3, [r0, #0]
   d5346:	695b      	ldr	r3, [r3, #20]
   d5348:	4798      	blx	r3
   d534a:	b2c5      	uxtb	r5, r0
   d534c:	e02e      	b.n	d53ac <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d534e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5352:	3301      	adds	r3, #1
   d5354:	d10e      	bne.n	d5374 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5356:	4b17      	ldr	r3, [pc, #92]	; (d53b4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5358:	4a17      	ldr	r2, [pc, #92]	; (d53b8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d535a:	9300      	str	r3, [sp, #0]
   d535c:	9202      	str	r2, [sp, #8]
   d535e:	2300      	movs	r3, #0
   d5360:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5362:	4668      	mov	r0, sp
   d5364:	f88d 3004 	strb.w	r3, [sp, #4]
   d5368:	f88d 200c 	strb.w	r2, [sp, #12]
   d536c:	f88d 300d 	strb.w	r3, [sp, #13]
   d5370:	f7ff fd60 	bl	d4e34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d5374:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5378:	2100      	movs	r1, #0
   d537a:	b280      	uxth	r0, r0
   d537c:	f003 fefb 	bl	d9176 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5380:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5384:	4620      	mov	r0, r4
   d5386:	f7ff fd17 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d538a:	2100      	movs	r1, #0
   d538c:	4620      	mov	r0, r4
   d538e:	f7ff fd13 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
   d5392:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5394:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5398:	2101      	movs	r1, #1
   d539a:	b280      	uxth	r0, r0
   d539c:	f003 feeb 	bl	d9176 <digitalWrite>
        if (_sck == -1)
   d53a0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d53a4:	3301      	adds	r3, #1
   d53a6:	d101      	bne.n	d53ac <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d53a8:	f7ff fd3d 	bl	d4e26 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d53ac:	4628      	mov	r0, r5
   d53ae:	b005      	add	sp, #20
   d53b0:	bd30      	pop	{r4, r5, pc}
   d53b2:	bf00      	nop
   d53b4:	000dc8b0 	.word	0x000dc8b0
   d53b8:	0007a120 	.word	0x0007a120

000d53bc <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d53bc:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d53be:	21f3      	movs	r1, #243	; 0xf3
   d53c0:	f7ff ffa6 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d53c4:	f000 0001 	and.w	r0, r0, #1
   d53c8:	bd08      	pop	{r3, pc}

000d53ca <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d53ca:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d53cc:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d53ce:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d53d0:	f7ff ff4e 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d53d4:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d53d6:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d53d8:	4620      	mov	r0, r4
   d53da:	f7ff ff49 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d53de:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d53e0:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d53e2:	4620      	mov	r0, r4
   d53e4:	f7ff ff44 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d53e8:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d53ea:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d53ec:	4620      	mov	r0, r4
   d53ee:	f7ff ff3f 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d53f2:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d53f4:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7ff ff3a 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d53fc:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d53fe:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5400:	4620      	mov	r0, r4
   d5402:	f7ff ff35 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d5406:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5408:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d540a:	4620      	mov	r0, r4
   d540c:	f7ff ff30 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d5410:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5412:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5414:	4620      	mov	r0, r4
   d5416:	f7ff ff2b 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d541a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d541c:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d541e:	4620      	mov	r0, r4
   d5420:	f7ff ff26 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d5424:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5426:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5428:	4620      	mov	r0, r4
   d542a:	f7ff ff21 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d542e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5430:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff ff1c 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
   d5438:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d543a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d543c:	4620      	mov	r0, r4
   d543e:	f7ff ff17 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5442:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5444:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5446:	4620      	mov	r0, r4
   d5448:	f7ff ff62 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d544c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d544e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5452:	4620      	mov	r0, r4
   d5454:	f7ff ff0c 	bl	d5270 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5458:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d545a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d545c:	4620      	mov	r0, r4
   d545e:	f7ff ff57 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5462:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5464:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5468:	4620      	mov	r0, r4
   d546a:	f7ff ff51 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
   d546e:	21e5      	movs	r1, #229	; 0xe5
   d5470:	4605      	mov	r5, r0
   d5472:	4620      	mov	r0, r4
   d5474:	f7ff ff4c 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
   d5478:	f000 000f 	and.w	r0, r0, #15
   d547c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5480:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5482:	21e6      	movs	r1, #230	; 0xe6
   d5484:	4620      	mov	r0, r4
   d5486:	f7ff ff43 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
   d548a:	21e5      	movs	r1, #229	; 0xe5
   d548c:	4605      	mov	r5, r0
   d548e:	4620      	mov	r0, r4
   d5490:	f7ff ff3e 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
   d5494:	1100      	asrs	r0, r0, #4
   d5496:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d549a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d549c:	21e7      	movs	r1, #231	; 0xe7
   d549e:	4620      	mov	r0, r4
   d54a0:	f7ff ff36 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
   d54a4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d54a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54ac <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d54ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d54ae:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d54b2:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d54b4:	4604      	mov	r4, r0
   d54b6:	460e      	mov	r6, r1
   d54b8:	4615      	mov	r5, r2
    if (_cs == -1) {
   d54ba:	d111      	bne.n	d54e0 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d54bc:	7901      	ldrb	r1, [r0, #4]
   d54be:	6800      	ldr	r0, [r0, #0]
   d54c0:	f003 f999 	bl	d87f6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d54c4:	6820      	ldr	r0, [r4, #0]
   d54c6:	6803      	ldr	r3, [r0, #0]
   d54c8:	4631      	mov	r1, r6
   d54ca:	689b      	ldr	r3, [r3, #8]
   d54cc:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d54ce:	6820      	ldr	r0, [r4, #0]
   d54d0:	6803      	ldr	r3, [r0, #0]
   d54d2:	4629      	mov	r1, r5
   d54d4:	689b      	ldr	r3, [r3, #8]
   d54d6:	4798      	blx	r3
        _wire -> endTransmission();
   d54d8:	6820      	ldr	r0, [r4, #0]
   d54da:	f003 f997 	bl	d880c <_ZN7TwoWire15endTransmissionEv>
   d54de:	e02d      	b.n	d553c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d54e0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d54e4:	3301      	adds	r3, #1
   d54e6:	d10e      	bne.n	d5506 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d54e8:	4b15      	ldr	r3, [pc, #84]	; (d5540 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d54ea:	4a16      	ldr	r2, [pc, #88]	; (d5544 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d54ec:	9300      	str	r3, [sp, #0]
   d54ee:	9202      	str	r2, [sp, #8]
   d54f0:	2300      	movs	r3, #0
   d54f2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d54f4:	4668      	mov	r0, sp
   d54f6:	f88d 3004 	strb.w	r3, [sp, #4]
   d54fa:	f88d 200c 	strb.w	r2, [sp, #12]
   d54fe:	f88d 300d 	strb.w	r3, [sp, #13]
   d5502:	f7ff fc97 	bl	d4e34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d5506:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d550a:	2100      	movs	r1, #0
   d550c:	b280      	uxth	r0, r0
   d550e:	f003 fe32 	bl	d9176 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5512:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5516:	4620      	mov	r0, r4
   d5518:	f7ff fc4e 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d551c:	4629      	mov	r1, r5
   d551e:	4620      	mov	r0, r4
   d5520:	f7ff fc4a 	bl	d4db8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5524:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5528:	2101      	movs	r1, #1
   d552a:	b280      	uxth	r0, r0
   d552c:	f003 fe23 	bl	d9176 <digitalWrite>
    if (_sck == -1)
   d5530:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5534:	3301      	adds	r3, #1
   d5536:	d101      	bne.n	d553c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d5538:	f7ff fc75 	bl	d4e26 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d553c:	b004      	add	sp, #16
   d553e:	bd70      	pop	{r4, r5, r6, pc}
   d5540:	000dc8b0 	.word	0x000dc8b0
   d5544:	0007a120 	.word	0x0007a120

000d5548 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d5548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d554a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d554e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d5552:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d5556:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d555a:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d555e:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d5562:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d5566:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d556a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d556e:	f366 1347 	bfi	r3, r6, #5, #3
   d5572:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d5576:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d557a:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d557e:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d5580:	f367 0302 	bfi	r3, r7, #0, #3
   d5584:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5588:	f006 0207 	and.w	r2, r6, #7
   d558c:	21f2      	movs	r1, #242	; 0xf2
   d558e:	f7ff ff8d 	bl	d54ac <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5592:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5596:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d559a:	f002 0107 	and.w	r1, r2, #7
   d559e:	009b      	lsls	r3, r3, #2
   d55a0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d55a4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d55a8:	4620      	mov	r0, r4
   d55aa:	21f5      	movs	r1, #245	; 0xf5
   d55ac:	f7ff ff7e 	bl	d54ac <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d55b0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d55b4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d55b8:	f002 0107 	and.w	r1, r2, #7
   d55bc:	009b      	lsls	r3, r3, #2
   d55be:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d55c2:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d55c6:	4620      	mov	r0, r4
   d55c8:	21f4      	movs	r1, #244	; 0xf4
}
   d55ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d55ce:	f7ff bf6d 	b.w	d54ac <_ZN15Adafruit_BME2806write8Ehh>

000d55d2 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d55d2:	b530      	push	{r4, r5, lr}
   d55d4:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d55d6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d55da:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d55dc:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d55de:	d103      	bne.n	d55e8 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d55e0:	6820      	ldr	r0, [r4, #0]
   d55e2:	f003 f8d1 	bl	d8788 <_ZN7TwoWire5beginEv>
   d55e6:	e022      	b.n	d562e <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d55e8:	2101      	movs	r1, #1
   d55ea:	b280      	uxth	r0, r0
   d55ec:	f003 fdc3 	bl	d9176 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d55f0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55f4:	2101      	movs	r1, #1
   d55f6:	b280      	uxth	r0, r0
   d55f8:	f003 fdac 	bl	d9154 <pinMode>
        if (_sck == -1) {
   d55fc:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5600:	1c43      	adds	r3, r0, #1
   d5602:	d104      	bne.n	d560e <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5604:	f7ff fbc0 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5608:	f001 fe08 	bl	d721c <_ZN8SPIClass5beginEv>
   d560c:	e00f      	b.n	d562e <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d560e:	2101      	movs	r1, #1
   d5610:	b280      	uxth	r0, r0
   d5612:	f003 fd9f 	bl	d9154 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5616:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d561a:	2101      	movs	r1, #1
   d561c:	b280      	uxth	r0, r0
   d561e:	f003 fd99 	bl	d9154 <pinMode>
            pinMode(_miso, INPUT);
   d5622:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5626:	2100      	movs	r1, #0
   d5628:	b280      	uxth	r0, r0
   d562a:	f003 fd93 	bl	d9154 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d562e:	21d0      	movs	r1, #208	; 0xd0
   d5630:	4620      	mov	r0, r4
   d5632:	f7ff fe6d 	bl	d5310 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5636:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5638:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d563a:	d120      	bne.n	d567e <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d563c:	4620      	mov	r0, r4
   d563e:	22b6      	movs	r2, #182	; 0xb6
   d5640:	21e0      	movs	r1, #224	; 0xe0
   d5642:	f7ff ff33 	bl	d54ac <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d5646:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d564a:	f002 fb3d 	bl	d7cc8 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d564e:	4620      	mov	r0, r4
   d5650:	f7ff feb4 	bl	d53bc <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5654:	4605      	mov	r5, r0
   d5656:	b108      	cbz	r0, d565c <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5658:	2064      	movs	r0, #100	; 0x64
   d565a:	e7f6      	b.n	d564a <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d565c:	4620      	mov	r0, r4
   d565e:	f7ff feb4 	bl	d53ca <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d5662:	2305      	movs	r3, #5
   d5664:	9300      	str	r3, [sp, #0]
   d5666:	461a      	mov	r2, r3
   d5668:	2103      	movs	r1, #3
   d566a:	4620      	mov	r0, r4
   d566c:	9502      	str	r5, [sp, #8]
   d566e:	9501      	str	r5, [sp, #4]
   d5670:	f7ff ff6a 	bl	d5548 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d5674:	2064      	movs	r0, #100	; 0x64
   d5676:	f002 fb27 	bl	d7cc8 <delay>
   d567a:	2001      	movs	r0, #1
   d567c:	e000      	b.n	d5680 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d567e:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d5680:	b005      	add	sp, #20
   d5682:	bd30      	pop	{r4, r5, pc}

000d5684 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d5684:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d5686:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d5688:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d568a:	f003 fdf7 	bl	d927c <_Z19__fetch_global_Wirev>
   d568e:	6020      	str	r0, [r4, #0]
	return init();
   d5690:	4620      	mov	r0, r4
}
   d5692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d5696:	f7ff bf9c 	b.w	d55d2 <_ZN15Adafruit_BME2804initEv>

000d569a <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d569a:	f001 ba3d 	b.w	d6b18 <HAL_Pin_Map>

000d569e <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d569e:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d56a0:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d56a4:	6803      	ldr	r3, [r0, #0]
   d56a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56a8:	4798      	blx	r3
}
   d56aa:	3000      	adds	r0, #0
   d56ac:	bf18      	it	ne
   d56ae:	2001      	movne	r0, #1
   d56b0:	bd08      	pop	{r3, pc}

000d56b2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d56b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56b4:	4606      	mov	r6, r0
   d56b6:	460f      	mov	r7, r1
   d56b8:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d56ba:	b1c4      	cbz	r4, d56ee <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d56bc:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d56c0:	6803      	ldr	r3, [r0, #0]
   d56c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56c4:	4798      	blx	r3
   d56c6:	b908      	cbnz	r0, d56cc <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d56c8:	2000      	movs	r0, #0
   d56ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d56cc:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d56d0:	2cfa      	cmp	r4, #250	; 0xfa
   d56d2:	6803      	ldr	r3, [r0, #0]
   d56d4:	4625      	mov	r5, r4
   d56d6:	bfa8      	it	ge
   d56d8:	25fa      	movge	r5, #250	; 0xfa
   d56da:	68db      	ldr	r3, [r3, #12]
   d56dc:	462a      	mov	r2, r5
   d56de:	4639      	mov	r1, r7
   d56e0:	4798      	blx	r3
   d56e2:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d56e4:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d56e6:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d56e8:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d56ea:	d0e6      	beq.n	d56ba <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d56ec:	e7ec      	b.n	d56c8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d56ee:	2001      	movs	r0, #1
}
   d56f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56f2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d56f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56f6:	4606      	mov	r6, r0
   d56f8:	4688      	mov	r8, r1
   d56fa:	4691      	mov	r9, r2
   d56fc:	461f      	mov	r7, r3
   d56fe:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5700:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5702:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5706:	6803      	ldr	r3, [r0, #0]
   d5708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d570a:	4798      	blx	r3
   d570c:	b1d0      	cbz	r0, d5744 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d570e:	2d00      	cmp	r5, #0
   d5710:	db18      	blt.n	d5744 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5712:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5716:	6803      	ldr	r3, [r0, #0]
   d5718:	691b      	ldr	r3, [r3, #16]
   d571a:	4798      	blx	r3
   d571c:	b160      	cbz	r0, d5738 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d571e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5722:	6803      	ldr	r3, [r0, #0]
   d5724:	695b      	ldr	r3, [r3, #20]
   d5726:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5728:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d572c:	3401      	adds	r4, #1
   d572e:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5730:	454c      	cmp	r4, r9
   d5732:	d007      	beq.n	d5744 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5734:	463d      	mov	r5, r7
   d5736:	e7ec      	b.n	d5712 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5738:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d573a:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d573c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d573e:	f002 fac3 	bl	d7cc8 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5742:	e7de      	b.n	d5702 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5744:	4620      	mov	r0, r4
   d5746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d574a <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d574a:	b570      	push	{r4, r5, r6, lr}
   d574c:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d574e:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5752:	2296      	movs	r2, #150	; 0x96
   d5754:	2100      	movs	r1, #0
   d5756:	4628      	mov	r0, r5
   d5758:	f006 f9e8 	bl	dbb2c <memset>
  strcpy((char *)buffer, servername);
   d575c:	6861      	ldr	r1, [r4, #4]
   d575e:	4628      	mov	r0, r5
   d5760:	f006 fa1e 	bl	dbba0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d5764:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5768:	8922      	ldrh	r2, [r4, #8]
   d576a:	6803      	ldr	r3, [r0, #0]
   d576c:	4629      	mov	r1, r5
   d576e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5770:	2300      	movs	r3, #0
   d5772:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d5774:	3000      	adds	r0, #0
   d5776:	bf18      	it	ne
   d5778:	2001      	movne	r0, #1
   d577a:	bd70      	pop	{r4, r5, r6, pc}

000d577c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d577c:	b510      	push	{r4, lr}
   d577e:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5780:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5784:	6803      	ldr	r3, [r0, #0]
   d5786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5788:	4798      	blx	r3
   d578a:	b120      	cbz	r0, d5796 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d578c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5790:	6803      	ldr	r3, [r0, #0]
   d5792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5794:	4798      	blx	r3
  }
  return true;
}
   d5796:	2001      	movs	r0, #1
   d5798:	bd10      	pop	{r4, pc}

000d579a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d579a:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d579c:	6803      	ldr	r3, [r0, #0]
   d579e:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d57a0:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d57a2:	4798      	blx	r3
   d57a4:	b9c8      	cbnz	r0, d57da <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d57a6:	4620      	mov	r0, r4
   d57a8:	f000 fa5f 	bl	d5c6a <_ZN13Adafruit_MQTT7connectEv>
   d57ac:	2504      	movs	r5, #4
   d57ae:	b170      	cbz	r0, d57ce <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d57b0:	3d01      	subs	r5, #1
   d57b2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57b6:	d00a      	beq.n	d57ce <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d57b8:	4620      	mov	r0, r4
   d57ba:	f000 f8a9 	bl	d5910 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d57be:	f241 3088 	movw	r0, #5000	; 0x1388
   d57c2:	f002 fa81 	bl	d7cc8 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d57c6:	4620      	mov	r0, r4
   d57c8:	f000 fa4f 	bl	d5c6a <_ZN13Adafruit_MQTT7connectEv>
   d57cc:	e7ef      	b.n	d57ae <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d57ce:	6823      	ldr	r3, [r4, #0]
   d57d0:	4620      	mov	r0, r4
   d57d2:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d57d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d57d8:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d57da:	bd70      	pop	{r4, r5, r6, pc}

000d57dc <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d57dc:	f001 b99c 	b.w	d6b18 <HAL_Pin_Map>

000d57e0 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d57e0:	b570      	push	{r4, r5, r6, lr}
   d57e2:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d57e4:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d57e6:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d57e8:	f006 f9fd 	bl	dbbe6 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d57ec:	1203      	asrs	r3, r0, #8
   d57ee:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d57f0:	7060      	strb	r0, [r4, #1]
   d57f2:	b285      	uxth	r5, r0
   d57f4:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d57f6:	462a      	mov	r2, r5
   d57f8:	4631      	mov	r1, r6
   d57fa:	4620      	mov	r0, r4
   d57fc:	f006 fa35 	bl	dbc6a <strncpy>
  return p+len;
}
   d5800:	1960      	adds	r0, r4, r5
   d5802:	bd70      	pop	{r4, r5, r6, pc}

000d5804 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5804:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5806:	6103      	str	r3, [r0, #16]
  password = pass;
   d5808:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d580a:	4d0d      	ldr	r5, [pc, #52]	; (d5840 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d580c:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d580e:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5810:	4a0c      	ldr	r2, [pc, #48]	; (d5844 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5812:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5814:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5816:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5818:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d581a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d581e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5822:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5826:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d582a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d582e:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5830:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5832:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5836:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d583a:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d583e:	bd30      	pop	{r4, r5, pc}
   d5840:	000dc928 	.word	0x000dc928
   d5844:	000dc951 	.word	0x000dc951

000d5848 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d584c:	fa0f fa83 	sxth.w	sl, r3
   d5850:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5852:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5854:	699d      	ldr	r5, [r3, #24]
   d5856:	2201      	movs	r2, #1
   d5858:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d585a:	4606      	mov	r6, r0
   d585c:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d585e:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5860:	b2c0      	uxtb	r0, r0
   d5862:	2801      	cmp	r0, #1
   d5864:	d001      	beq.n	d586a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d5866:	2000      	movs	r0, #0
   d5868:	e034      	b.n	d58d4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d586a:	1c65      	adds	r5, r4, #1
   d586c:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5870:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d5872:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d5876:	6833      	ldr	r3, [r6, #0]
   d5878:	699b      	ldr	r3, [r3, #24]
   d587a:	2201      	movs	r2, #1
   d587c:	461f      	mov	r7, r3
   d587e:	4629      	mov	r1, r5
   d5880:	4653      	mov	r3, sl
   d5882:	4630      	mov	r0, r6
   d5884:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d5886:	b2c0      	uxtb	r0, r0
   d5888:	2801      	cmp	r0, #1
   d588a:	d1ec      	bne.n	d5866 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d588c:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5894:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5896:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d589a:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d589e:	d0e2      	beq.n	d5866 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d58a0:	061b      	lsls	r3, r3, #24
   d58a2:	d4e8      	bmi.n	d5876 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d58a4:	9b01      	ldr	r3, [sp, #4]
   d58a6:	1b2c      	subs	r4, r5, r4
   d58a8:	1b1b      	subs	r3, r3, r4
   d58aa:	3b01      	subs	r3, #1
   d58ac:	4599      	cmp	r9, r3
   d58ae:	6833      	ldr	r3, [r6, #0]
   d58b0:	d906      	bls.n	d58c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d58b2:	9a01      	ldr	r2, [sp, #4]
   d58b4:	699f      	ldr	r7, [r3, #24]
   d58b6:	3a01      	subs	r2, #1
   d58b8:	1b12      	subs	r2, r2, r4
   d58ba:	4653      	mov	r3, sl
   d58bc:	b292      	uxth	r2, r2
   d58be:	e003      	b.n	d58c8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d58c0:	699f      	ldr	r7, [r3, #24]
   d58c2:	fa1f f289 	uxth.w	r2, r9
   d58c6:	4653      	mov	r3, sl
   d58c8:	4629      	mov	r1, r5
   d58ca:	4630      	mov	r0, r6
   d58cc:	47b8      	blx	r7
   d58ce:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d58d0:	4420      	add	r0, r4
   d58d2:	b280      	uxth	r0, r0
}
   d58d4:	b003      	add	sp, #12
   d58d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d58dc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d58dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58de:	4605      	mov	r5, r0
   d58e0:	460c      	mov	r4, r1
   d58e2:	4616      	mov	r6, r2
   d58e4:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d58e6:	463b      	mov	r3, r7
   d58e8:	2296      	movs	r2, #150	; 0x96
   d58ea:	4621      	mov	r1, r4
   d58ec:	4628      	mov	r0, r5
   d58ee:	f7ff ffab 	bl	d5848 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d58f2:	b148      	cbz	r0, d5908 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d58f4:	7823      	ldrb	r3, [r4, #0]
   d58f6:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d58fa:	d005      	beq.n	d5908 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d58fc:	f002 fe4a 	bl	d8594 <_Z16_fetch_usbserialv>
   d5900:	4902      	ldr	r1, [pc, #8]	; (d590c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d5902:	f002 f80c 	bl	d791e <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5906:	e7ee      	b.n	d58e6 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d590a:	bf00      	nop
   d590c:	000dc952 	.word	0x000dc952

000d5910 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5910:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d5912:	23e0      	movs	r3, #224	; 0xe0
   d5914:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5918:	2300      	movs	r3, #0
   d591a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d591e:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5920:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5922:	695b      	ldr	r3, [r3, #20]
   d5924:	2202      	movs	r2, #2
   d5926:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d592a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d592c:	6823      	ldr	r3, [r4, #0]
   d592e:	4620      	mov	r0, r4
   d5930:	691b      	ldr	r3, [r3, #16]

}
   d5932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5936:	4718      	bx	r3

000d5938 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5938:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d593c:	b530      	push	{r4, r5, lr}
   d593e:	4613      	mov	r3, r2
   d5940:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d5944:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d5948:	428d      	cmp	r5, r1
   d594a:	d00f      	beq.n	d596c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d594c:	42a3      	cmp	r3, r4
   d594e:	d1f9      	bne.n	d5944 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d5950:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d5952:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d5956:	b924      	cbnz	r4, d5962 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d5958:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d595c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d5960:	e004      	b.n	d596c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d5962:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5964:	2b05      	cmp	r3, #5
   d5966:	d1f4      	bne.n	d5952 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d5968:	2000      	movs	r0, #0
   d596a:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d596c:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d596e:	bd30      	pop	{r4, r5, pc}

000d5970 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5974:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5978:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d597a:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d597c:	2296      	movs	r2, #150	; 0x96
   d597e:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5980:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5982:	f7ff ff61 	bl	d5848 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d5986:	4606      	mov	r6, r0
   d5988:	b310      	cbz	r0, d59d0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d598a:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d598e:	b2bb      	uxth	r3, r7
   d5990:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5992:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d5996:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d599a:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d599c:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d599e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d59a2:	f1bb 0f00 	cmp.w	fp, #0
   d59a6:	d00e      	beq.n	d59c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d59a8:	f8db 1000 	ldr.w	r1, [fp]
   d59ac:	9103      	str	r1, [sp, #12]
   d59ae:	4608      	mov	r0, r1
   d59b0:	f006 f919 	bl	dbbe6 <strlen>
   d59b4:	42b8      	cmp	r0, r7
   d59b6:	4680      	mov	r8, r0
   d59b8:	9903      	ldr	r1, [sp, #12]
   d59ba:	d104      	bne.n	d59c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d59bc:	463a      	mov	r2, r7
   d59be:	9802      	ldr	r0, [sp, #8]
   d59c0:	f006 f91a 	bl	dbbf8 <strncasecmp>
   d59c4:	b128      	cbz	r0, d59d2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d59c6:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d59c8:	2d05      	cmp	r5, #5
   d59ca:	d1e8      	bne.n	d599e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d59cc:	2000      	movs	r0, #0
   d59ce:	e04a      	b.n	d5a66 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d59d0:	e049      	b.n	d5a66 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d59d2:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d59d6:	f00a 0a06 	and.w	sl, sl, #6
   d59da:	f1ba 0f02 	cmp.w	sl, #2
   d59de:	d13f      	bne.n	d5a60 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d59e0:	19e2      	adds	r2, r4, r7
   d59e2:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d59e6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d59ea:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d59ee:	2214      	movs	r2, #20
   d59f0:	2100      	movs	r1, #0
   d59f2:	f10b 0005 	add.w	r0, fp, #5
   d59f6:	f006 f899 	bl	dbb2c <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d59fa:	9b01      	ldr	r3, [sp, #4]
   d59fc:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5a00:	30fc      	adds	r0, #252	; 0xfc
   d5a02:	4406      	add	r6, r0
   d5a04:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5a08:	ebca 0606 	rsb	r6, sl, r6
   d5a0c:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5a0e:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5a10:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5a14:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5a18:	bf28      	it	cs
   d5a1a:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5a1c:	4451      	add	r1, sl
   d5a1e:	4632      	mov	r2, r6
   d5a20:	4449      	add	r1, r9
   d5a22:	3005      	adds	r0, #5
   d5a24:	f006 f867 	bl	dbaf6 <memmove>
  subscriptions[i]->datalen = datalen;
   d5a28:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5a2c:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5a2e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5a32:	f003 0306 	and.w	r3, r3, #6
   d5a36:	2b02      	cmp	r3, #2
   d5a38:	d10f      	bne.n	d5a5a <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5a3a:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5a3e:	123b      	asrs	r3, r7, #8
   d5a40:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5a44:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d5a46:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5a4a:	2240      	movs	r2, #64	; 0x40
   d5a4c:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5a50:	695b      	ldr	r3, [r3, #20]
   d5a52:	2204      	movs	r2, #4
   d5a54:	a905      	add	r1, sp, #20
   d5a56:	4620      	mov	r0, r4
   d5a58:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5a5a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5a5e:	e002      	b.n	d5a66 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5a60:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5a62:	4682      	mov	sl, r0
   d5a64:	e7c3      	b.n	d59ee <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d5a66:	b007      	add	sp, #28
   d5a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a6c <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5a6c:	b538      	push	{r3, r4, r5, lr}
   d5a6e:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5a70:	4608      	mov	r0, r1
   d5a72:	2310      	movs	r3, #16
   d5a74:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5a78:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5a7a:	4929      	ldr	r1, [pc, #164]	; (d5b20 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5a7c:	f7ff feb0 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5a80:	2304      	movs	r3, #4
   d5a82:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5a84:	2302      	movs	r3, #2
   d5a86:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5a88:	69a3      	ldr	r3, [r4, #24]
   d5a8a:	b1ab      	cbz	r3, d5ab8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5a8c:	781b      	ldrb	r3, [r3, #0]
   d5a8e:	b19b      	cbz	r3, d5ab8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5a90:	2306      	movs	r3, #6
   d5a92:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5a94:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5a98:	2b01      	cmp	r3, #1
   d5a9a:	d101      	bne.n	d5aa0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5a9c:	230e      	movs	r3, #14
   d5a9e:	e002      	b.n	d5aa6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5aa0:	2b02      	cmp	r3, #2
   d5aa2:	d101      	bne.n	d5aa8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5aa4:	231e      	movs	r3, #30
   d5aa6:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5aa8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5aac:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5aae:	bf02      	ittt	eq
   d5ab0:	7843      	ldrbeq	r3, [r0, #1]
   d5ab2:	f043 0320 	orreq.w	r3, r3, #32
   d5ab6:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5ab8:	6923      	ldr	r3, [r4, #16]
   d5aba:	781b      	ldrb	r3, [r3, #0]
   d5abc:	b11b      	cbz	r3, d5ac6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5abe:	7843      	ldrb	r3, [r0, #1]
   d5ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5ac4:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5ac6:	6963      	ldr	r3, [r4, #20]
   d5ac8:	781b      	ldrb	r3, [r3, #0]
   d5aca:	b11b      	cbz	r3, d5ad4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5acc:	7843      	ldrb	r3, [r0, #1]
   d5ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5ad2:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5ad4:	2301      	movs	r3, #1
   d5ad6:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5ad8:	232c      	movs	r3, #44	; 0x2c
   d5ada:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5adc:	68e1      	ldr	r1, [r4, #12]
   d5ade:	780b      	ldrb	r3, [r1, #0]
   d5ae0:	b11b      	cbz	r3, d5aea <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5ae2:	3004      	adds	r0, #4
   d5ae4:	f7ff fe7c 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
   d5ae8:	e002      	b.n	d5af0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5aea:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5aec:	7143      	strb	r3, [r0, #5]
      p++;
   d5aee:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5af0:	69a1      	ldr	r1, [r4, #24]
   d5af2:	b131      	cbz	r1, d5b02 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5af4:	780b      	ldrb	r3, [r1, #0]
   d5af6:	b123      	cbz	r3, d5b02 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5af8:	f7ff fe72 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5afc:	69e1      	ldr	r1, [r4, #28]
   d5afe:	f7ff fe6f 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5b02:	6921      	ldr	r1, [r4, #16]
   d5b04:	780b      	ldrb	r3, [r1, #0]
   d5b06:	b10b      	cbz	r3, d5b0c <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5b08:	f7ff fe6a 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5b0c:	6961      	ldr	r1, [r4, #20]
   d5b0e:	780b      	ldrb	r3, [r1, #0]
   d5b10:	b10b      	cbz	r3, d5b16 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5b12:	f7ff fe65 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5b16:	1b40      	subs	r0, r0, r5
   d5b18:	b2c0      	uxtb	r0, r0
   d5b1a:	1e83      	subs	r3, r0, #2
   d5b1c:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}
   d5b20:	000dc971 	.word	0x000dc971

000d5b24 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b28:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b2a:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5b2c:	460e      	mov	r6, r1
   d5b2e:	4691      	mov	r9, r2
   d5b30:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b32:	f006 f858 	bl	dbbe6 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5b36:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5b3a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b3e:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5b40:	f1b8 0f00 	cmp.w	r8, #0
   d5b44:	d101      	bne.n	d5b4a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5b46:	1c83      	adds	r3, r0, #2
   d5b48:	e000      	b.n	d5b4c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5b4a:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5b4c:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5b50:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5b52:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5b54:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5b58:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5b5a:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5b5e:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5b64:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5b66:	bf18      	it	ne
   d5b68:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5b6c:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5b70:	2b00      	cmp	r3, #0
   d5b72:	d1f5      	bne.n	d5b60 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5b74:	4649      	mov	r1, r9
   d5b76:	f7ff fe33 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>
   d5b7a:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5b7c:	f1b8 0f00 	cmp.w	r8, #0
   d5b80:	d00c      	beq.n	d5b9c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5b82:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5b86:	0a12      	lsrs	r2, r2, #8
   d5b88:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5b8a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5b8e:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5b90:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5b94:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5b96:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5b98:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5b9c:	4622      	mov	r2, r4
   d5b9e:	4639      	mov	r1, r7
   d5ba0:	4618      	mov	r0, r3
   d5ba2:	f005 ffa8 	bl	dbaf6 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5ba6:	4420      	add	r0, r4
   d5ba8:	1b80      	subs	r0, r0, r6
}
   d5baa:	b280      	uxth	r0, r0
   d5bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5bb0 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5bb2:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5bb6:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5bba:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5bbc:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5bc0:	4613      	mov	r3, r2
   d5bc2:	460a      	mov	r2, r1
   d5bc4:	4629      	mov	r1, r5
   d5bc6:	f7ff ffad 	bl	d5b24 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5bca:	6823      	ldr	r3, [r4, #0]
   d5bcc:	4602      	mov	r2, r0
   d5bce:	695b      	ldr	r3, [r3, #20]
   d5bd0:	4629      	mov	r1, r5
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	4798      	blx	r3
   d5bd6:	b908      	cbnz	r0, d5bdc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5bd8:	2000      	movs	r0, #0
   d5bda:	e017      	b.n	d5c0c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5bdc:	b1b6      	cbz	r6, d5c0c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5bde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5be2:	2296      	movs	r2, #150	; 0x96
   d5be4:	4629      	mov	r1, r5
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff fe2e 	bl	d5848 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5bec:	2804      	cmp	r0, #4
   d5bee:	d1f3      	bne.n	d5bd8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5bf0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5bf4:	111b      	asrs	r3, r3, #4
   d5bf6:	2b04      	cmp	r3, #4
   d5bf8:	d1ee      	bne.n	d5bd8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5bfa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5bfc:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5c00:	ba5b      	rev16	r3, r3
   d5c02:	3301      	adds	r3, #1
   d5c04:	b29b      	uxth	r3, r3
   d5c06:	1ac3      	subs	r3, r0, r3
   d5c08:	4258      	negs	r0, r3
   d5c0a:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5c0c:	b002      	add	sp, #8
   d5c0e:	bd70      	pop	{r4, r5, r6, pc}

000d5c10 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5c12:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5c14:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5c16:	461f      	mov	r7, r3
   d5c18:	460e      	mov	r6, r1
   d5c1a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5c1c:	f005 ffe3 	bl	dbbe6 <strlen>
   d5c20:	9700      	str	r7, [sp, #0]
   d5c22:	b283      	uxth	r3, r0
   d5c24:	4622      	mov	r2, r4
   d5c26:	4631      	mov	r1, r6
   d5c28:	4628      	mov	r0, r5
   d5c2a:	f7ff ffc1 	bl	d5bb0 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5c2e:	b003      	add	sp, #12
   d5c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c32 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5c32:	b538      	push	{r3, r4, r5, lr}
   d5c34:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5c36:	2382      	movs	r3, #130	; 0x82
   d5c38:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5c3a:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5c3c:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5c40:	0a09      	lsrs	r1, r1, #8
   d5c42:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5c44:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5c48:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5c4a:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5c4e:	3101      	adds	r1, #1
   d5c50:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5c54:	4611      	mov	r1, r2
   d5c56:	1d20      	adds	r0, r4, #4
   d5c58:	f7ff fdc2 	bl	d57e0 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5c5c:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5c60:	1b00      	subs	r0, r0, r4
   d5c62:	b2c0      	uxtb	r0, r0
   d5c64:	1e83      	subs	r3, r0, #2
   d5c66:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5c68:	bd38      	pop	{r3, r4, r5, pc}

000d5c6a <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5c6e:	6803      	ldr	r3, [r0, #0]
   d5c70:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5c72:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5c74:	4798      	blx	r3
   d5c76:	b918      	cbnz	r0, d5c80 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5c78:	f04f 30ff 	mov.w	r0, #4294967295
   d5c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5c80:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5c84:	4629      	mov	r1, r5
   d5c86:	4620      	mov	r0, r4
   d5c88:	f7ff fef0 	bl	d5a6c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5c8c:	6823      	ldr	r3, [r4, #0]
   d5c8e:	b282      	uxth	r2, r0
   d5c90:	695b      	ldr	r3, [r3, #20]
   d5c92:	4629      	mov	r1, r5
   d5c94:	4620      	mov	r0, r4
   d5c96:	4798      	blx	r3
   d5c98:	2800      	cmp	r0, #0
   d5c9a:	d0ed      	beq.n	d5c78 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5c9c:	f241 7370 	movw	r3, #6000	; 0x1770
   d5ca0:	2296      	movs	r2, #150	; 0x96
   d5ca2:	4629      	mov	r1, r5
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	f7ff fdcf 	bl	d5848 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5caa:	b2c0      	uxtb	r0, r0
   d5cac:	2804      	cmp	r0, #4
   d5cae:	d1e3      	bne.n	d5c78 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5cb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5cb2:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5cb6:	d1df      	bne.n	d5c78 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5cb8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5cbc:	b110      	cbz	r0, d5cc4 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5cbe:	b240      	sxtb	r0, r0
   d5cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cc4:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5cc8:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5ccc:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5cd0:	b1fb      	cbz	r3, d5d12 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5cd2:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5cd4:	683a      	ldr	r2, [r7, #0]
   d5cd6:	4629      	mov	r1, r5
   d5cd8:	7913      	ldrb	r3, [r2, #4]
   d5cda:	6812      	ldr	r2, [r2, #0]
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f7ff ffa8 	bl	d5c32 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5ce2:	6823      	ldr	r3, [r4, #0]
   d5ce4:	b282      	uxth	r2, r0
   d5ce6:	695b      	ldr	r3, [r3, #20]
   d5ce8:	4629      	mov	r1, r5
   d5cea:	4620      	mov	r0, r4
   d5cec:	4798      	blx	r3
   d5cee:	2800      	cmp	r0, #0
   d5cf0:	d0c2      	beq.n	d5c78 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5cf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5cf6:	2209      	movs	r2, #9
   d5cf8:	4629      	mov	r1, r5
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	f7ff fdee 	bl	d58dc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5d00:	b938      	cbnz	r0, d5d12 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5d02:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5d04:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5d08:	d1e4      	bne.n	d5cd4 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5d0a:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5d12:	4547      	cmp	r7, r8
   d5d14:	d1da      	bne.n	d5ccc <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5d16:	2000      	movs	r0, #0
   d5d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5d1c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5d1e:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5d22:	7203      	strb	r3, [r0, #8]
}
   d5d24:	bd10      	pop	{r4, pc}

000d5d26 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5d26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5d28:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5d2a:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5d2c:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5d2e:	a901      	add	r1, sp, #4
   d5d30:	f001 fbc9 	bl	d74c6 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5d34:	7a23      	ldrb	r3, [r4, #8]
   d5d36:	aa01      	add	r2, sp, #4
   d5d38:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5d3c:	f7ff ff68 	bl	d5c10 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5d40:	b004      	add	sp, #16
   d5d42:	bd10      	pop	{r4, pc}

000d5d44 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5d44:	f7ff bfef 	b.w	d5d26 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5d48 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5d48:	b510      	push	{r4, lr}
   d5d4a:	b092      	sub	sp, #72	; 0x48
   d5d4c:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5d4e:	460b      	mov	r3, r1
   d5d50:	2200      	movs	r2, #0
   d5d52:	490b      	ldr	r1, [pc, #44]	; (d5d80 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5d54:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5d56:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5d5a:	f001 f9d9 	bl	d7110 <sprintf>
  sprintf(sout, fmt, val);
   d5d5e:	ed9d 0b00 	vldr	d0, [sp]
   d5d62:	a902      	add	r1, sp, #8
   d5d64:	ec53 2b10 	vmov	r2, r3, d0
   d5d68:	a807      	add	r0, sp, #28
   d5d6a:	f001 f9d1 	bl	d7110 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5d6e:	7a23      	ldrb	r3, [r4, #8]
   d5d70:	aa07      	add	r2, sp, #28
   d5d72:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5d76:	f7ff ff4b 	bl	d5c10 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5d7a:	b012      	add	sp, #72	; 0x48
   d5d7c:	bd10      	pop	{r4, pc}
   d5d7e:	bf00      	nop
   d5d80:	000dc976 	.word	0x000dc976

000d5d84 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5d84:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5d86:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5d88:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5d8a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5d8c:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5d8e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5d90:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5d92:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5d94:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5d96:	6283      	str	r3, [r0, #40]	; 0x28
   d5d98:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5d9a:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5d9c:	bd10      	pop	{r4, pc}

000d5d9e <_GLOBAL__sub_I__Z11printBufferPht>:
   d5d9e:	f000 bebb 	b.w	d6b18 <HAL_Pin_Map>
	...

000d5da4 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5da4:	b510      	push	{r4, lr}
   d5da6:	4b05      	ldr	r3, [pc, #20]	; (d5dbc <_ZN10JsonBufferD1Ev+0x18>)
   d5da8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5daa:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5dac:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5dae:	b91b      	cbnz	r3, d5db8 <_ZN10JsonBufferD1Ev+0x14>
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	b108      	cbz	r0, d5db8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5db4:	f001 f99c 	bl	d70f0 <free>
	}
}
   d5db8:	4620      	mov	r0, r4
   d5dba:	bd10      	pop	{r4, pc}
   d5dbc:	000dcb40 	.word	0x000dcb40

000d5dc0 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5dc0:	b510      	push	{r4, lr}
   d5dc2:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5dc4:	f7ff ffee 	bl	d5da4 <_ZN10JsonBufferD1Ev>
   d5dc8:	4620      	mov	r0, r4
   d5dca:	2114      	movs	r1, #20
   d5dcc:	f003 fa8a 	bl	d92e4 <_ZdlPvj>
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd10      	pop	{r4, pc}

000d5dd4 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5dd4:	b510      	push	{r4, lr}
   d5dd6:	4b03      	ldr	r3, [pc, #12]	; (d5de4 <_ZN10JsonWriterD1Ev+0x10>)
   d5dd8:	6003      	str	r3, [r0, #0]
   d5dda:	4604      	mov	r4, r0
   d5ddc:	f7ff ffe2 	bl	d5da4 <_ZN10JsonBufferD1Ev>

}
   d5de0:	4620      	mov	r0, r4
   d5de2:	bd10      	pop	{r4, pc}
   d5de4:	000dcb50 	.word	0x000dcb50

000d5de8 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5de8:	b510      	push	{r4, lr}
   d5dea:	4604      	mov	r4, r0

}
   d5dec:	f7ff fff2 	bl	d5dd4 <_ZN10JsonWriterD1Ev>
   d5df0:	4620      	mov	r0, r4
   d5df2:	2130      	movs	r1, #48	; 0x30
   d5df4:	f003 fa76 	bl	d92e4 <_ZdlPvj>
   d5df8:	4620      	mov	r0, r4
   d5dfa:	bd10      	pop	{r4, pc}

000d5dfc <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5dfc:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5dfe:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5e00:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5e02:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5e04:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5e06:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5e08:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5e0c:	4770      	bx	lr
	...

000d5e10 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5e10:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5e12:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5e14:	60c3      	str	r3, [r0, #12]
   d5e16:	2301      	movs	r3, #1
   d5e18:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5e1a:	4b05      	ldr	r3, [pc, #20]	; (d5e30 <_ZN10JsonWriterC1EPcj+0x20>)
   d5e1c:	6003      	str	r3, [r0, #0]
   d5e1e:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5e22:	6041      	str	r1, [r0, #4]
   d5e24:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5e26:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5e28:	f7ff ffe8 	bl	d5dfc <_ZN10JsonWriter4initEv>
}
   d5e2c:	bd10      	pop	{r4, pc}
   d5e2e:	bf00      	nop
   d5e30:	000dcb50 	.word	0x000dcb50

000d5e34 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5e34:	68c3      	ldr	r3, [r0, #12]
   d5e36:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5e38:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d5e3a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5e3c:	bf3f      	itttt	cc
   d5e3e:	6842      	ldrcc	r2, [r0, #4]
   d5e40:	1c5c      	addcc	r4, r3, #1
   d5e42:	60c4      	strcc	r4, [r0, #12]
   d5e44:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5e46:	bf24      	itt	cs
   d5e48:	2301      	movcs	r3, #1
   d5e4a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5e4e:	bd10      	pop	{r4, pc}

000d5e50 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5e50:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5e52:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5e54:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5e56:	b143      	cbz	r3, d5e6a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5e58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5e5c:	7e59      	ldrb	r1, [r3, #25]
   d5e5e:	b109      	cbz	r1, d5e64 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5e60:	f7ff ffe8 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5e64:	6963      	ldr	r3, [r4, #20]
   d5e66:	3b01      	subs	r3, #1
   d5e68:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d5e6a:	68a3      	ldr	r3, [r4, #8]
   d5e6c:	68e0      	ldr	r0, [r4, #12]
   d5e6e:	6861      	ldr	r1, [r4, #4]
   d5e70:	4298      	cmp	r0, r3
   d5e72:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5e76:	bf2a      	itet	cs
   d5e78:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d5e7a:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5e7c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5e80:	bd10      	pop	{r4, pc}

000d5e82 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5e82:	b570      	push	{r4, r5, r6, lr}
   d5e84:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5e86:	68c0      	ldr	r0, [r0, #12]
   d5e88:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5e8a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5e8c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5e8e:	4613      	mov	r3, r2
   d5e90:	4430      	add	r0, r6
   d5e92:	460a      	mov	r2, r1
   d5e94:	4629      	mov	r1, r5
   d5e96:	f001 f953 	bl	d7140 <vsnprintf>
	if (count <= spaceAvailable) {
   d5e9a:	4285      	cmp	r5, r0
		offset += count;
   d5e9c:	bf2d      	iteet	cs
   d5e9e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5ea0:	68a3      	ldrcc	r3, [r4, #8]
   d5ea2:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5ea4:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5ea6:	bf36      	itet	cc
   d5ea8:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5eaa:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5eac:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5eb0:	bd70      	pop	{r4, r5, r6, pc}

000d5eb2 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5eb2:	b40e      	push	{r1, r2, r3}
   d5eb4:	b503      	push	{r0, r1, lr}
   d5eb6:	aa03      	add	r2, sp, #12
   d5eb8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5ebc:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5ebe:	f7ff ffe0 	bl	d5e82 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5ec2:	b002      	add	sp, #8
   d5ec4:	f85d eb04 	ldr.w	lr, [sp], #4
   d5ec8:	b003      	add	sp, #12
   d5eca:	4770      	bx	lr

000d5ecc <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5ed4:	4617      	mov	r7, r2
   d5ed6:	b112      	cbz	r2, d5ede <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5ed8:	2122      	movs	r1, #34	; 0x22
   d5eda:	f7ff ffab 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5ede:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5ee0:	5d71      	ldrb	r1, [r6, r5]
   d5ee2:	eb06 0805 	add.w	r8, r6, r5
   d5ee6:	2900      	cmp	r1, #0
   d5ee8:	d071      	beq.n	d5fce <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5eea:	68e2      	ldr	r2, [r4, #12]
   d5eec:	68a3      	ldr	r3, [r4, #8]
   d5eee:	429a      	cmp	r2, r3
   d5ef0:	d26d      	bcs.n	d5fce <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5ef2:	060b      	lsls	r3, r1, #24
   d5ef4:	d533      	bpl.n	d5f5e <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5ef6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5efa:	2be0      	cmp	r3, #224	; 0xe0
   d5efc:	d117      	bne.n	d5f2e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5efe:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5f02:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5f06:	2a80      	cmp	r2, #128	; 0x80
   d5f08:	d111      	bne.n	d5f2e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5f0a:	f105 0802 	add.w	r8, r5, #2
   d5f0e:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5f12:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5f16:	2880      	cmp	r0, #128	; 0x80
   d5f18:	d109      	bne.n	d5f2e <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5f1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5f1e:	019b      	lsls	r3, r3, #6
   d5f20:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5f24:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5f28:	431a      	orrs	r2, r3
   d5f2a:	b292      	uxth	r2, r2
   d5f2c:	e011      	b.n	d5f52 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5f2e:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5f32:	2bc0      	cmp	r3, #192	; 0xc0
   d5f34:	d146      	bne.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d5f36:	f105 0801 	add.w	r8, r5, #1
   d5f3a:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5f3e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5f42:	2a80      	cmp	r2, #128	; 0x80
   d5f44:	d13e      	bne.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5f46:	0189      	lsls	r1, r1, #6
   d5f48:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5f50:	431a      	orrs	r2, r3
   d5f52:	4923      	ldr	r1, [pc, #140]	; (d5fe0 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5f54:	4620      	mov	r0, r4
   d5f56:	f7ff ffac 	bl	d5eb2 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5f5a:	4645      	mov	r5, r8
   d5f5c:	e035      	b.n	d5fca <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5f5e:	290c      	cmp	r1, #12
   d5f60:	d018      	beq.n	d5f94 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5f62:	d80b      	bhi.n	d5f7c <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5f64:	2909      	cmp	r1, #9
   d5f66:	d021      	beq.n	d5fac <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5f68:	290a      	cmp	r1, #10
   d5f6a:	d019      	beq.n	d5fa0 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5f6c:	2908      	cmp	r1, #8
   d5f6e:	d129      	bne.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5f70:	215c      	movs	r1, #92	; 0x5c
   d5f72:	4620      	mov	r0, r4
   d5f74:	f7ff ff5e 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5f78:	2162      	movs	r1, #98	; 0x62
   d5f7a:	e023      	b.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5f7c:	2922      	cmp	r1, #34	; 0x22
   d5f7e:	d01b      	beq.n	d5fb8 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5f80:	295c      	cmp	r1, #92	; 0x5c
   d5f82:	d019      	beq.n	d5fb8 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5f84:	290d      	cmp	r1, #13
   d5f86:	d11d      	bne.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5f88:	215c      	movs	r1, #92	; 0x5c
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f7ff ff52 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5f90:	2172      	movs	r1, #114	; 0x72
   d5f92:	e017      	b.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5f94:	215c      	movs	r1, #92	; 0x5c
   d5f96:	4620      	mov	r0, r4
   d5f98:	f7ff ff4c 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5f9c:	2166      	movs	r1, #102	; 0x66
   d5f9e:	e011      	b.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5fa0:	215c      	movs	r1, #92	; 0x5c
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7ff ff46 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5fa8:	216e      	movs	r1, #110	; 0x6e
   d5faa:	e00b      	b.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5fac:	215c      	movs	r1, #92	; 0x5c
   d5fae:	4620      	mov	r0, r4
   d5fb0:	f7ff ff40 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5fb4:	2174      	movs	r1, #116	; 0x74
   d5fb6:	e005      	b.n	d5fc4 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5fb8:	215c      	movs	r1, #92	; 0x5c
   d5fba:	4620      	mov	r0, r4
   d5fbc:	f7ff ff3a 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5fc0:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5fc4:	4620      	mov	r0, r4
   d5fc6:	f7ff ff35 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5fca:	3501      	adds	r5, #1
   d5fcc:	e788      	b.n	d5ee0 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5fce:	b12f      	cbz	r7, d5fdc <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	2122      	movs	r1, #34	; 0x22
	}

}
   d5fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5fd8:	f7ff bf2c 	b.w	d5e34 <_ZN10JsonWriter10insertCharEc>
   d5fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fe0:	000dcb61 	.word	0x000dcb61

000d5fe4 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5fe4:	6942      	ldr	r2, [r0, #20]
   d5fe6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5fea:	7e1a      	ldrb	r2, [r3, #24]
   d5fec:	b112      	cbz	r2, d5ff4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5fee:	2200      	movs	r2, #0
   d5ff0:	761a      	strb	r2, [r3, #24]
   d5ff2:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5ff4:	212c      	movs	r1, #44	; 0x2c
   d5ff6:	f7ff bf1d 	b.w	d5e34 <_ZN10JsonWriter10insertCharEc>

000d5ffa <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5ffc:	6943      	ldr	r3, [r0, #20]
   d5ffe:	3301      	adds	r3, #1
   d6000:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d6002:	460e      	mov	r6, r1
   d6004:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d6006:	d80e      	bhi.n	d6026 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d6008:	f7ff ffec 	bl	d5fe4 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d600c:	6943      	ldr	r3, [r0, #20]
   d600e:	1c5a      	adds	r2, r3, #1
   d6010:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d6014:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d6016:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d6018:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d601a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d601c:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d601e:	f7ff ff09 	bl	d5e34 <_ZN10JsonWriter10insertCharEc>
   d6022:	4620      	mov	r0, r4
   d6024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d6026:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d6028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d602c <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d602c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d602e:	4604      	mov	r4, r0
   d6030:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d6034:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d6036:	2d00      	cmp	r5, #0
   d6038:	db0a      	blt.n	d6050 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d603a:	f004 fd4d 	bl	daad8 <__aeabi_f2d>
   d603e:	462a      	mov	r2, r5
   d6040:	e9cd 0100 	strd	r0, r1, [sp]
   d6044:	4908      	ldr	r1, [pc, #32]	; (d6068 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d6046:	4620      	mov	r0, r4
   d6048:	f7ff ff33 	bl	d5eb2 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d604c:	b003      	add	sp, #12
   d604e:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d6050:	f004 fd42 	bl	daad8 <__aeabi_f2d>
   d6054:	460b      	mov	r3, r1
   d6056:	4905      	ldr	r1, [pc, #20]	; (d606c <_ZN10JsonWriter11insertValueEf+0x40>)
   d6058:	4602      	mov	r2, r0
   d605a:	4620      	mov	r0, r4
	}
}
   d605c:	b003      	add	sp, #12
   d605e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d6062:	f7ff bf26 	b.w	d5eb2 <_ZN10JsonWriter13insertsprintfEPKcz>
   d6066:	bf00      	nop
   d6068:	000dcb73 	.word	0x000dcb73
   d606c:	000dcb78 	.word	0x000dcb78

000d6070 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d6070:	f000 bd52 	b.w	d6b18 <HAL_Pin_Map>

000d6074 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6074:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d6076:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6078:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d607c:	2c02      	cmp	r4, #2
   d607e:	d008      	beq.n	d6092 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d6080:	2c03      	cmp	r4, #3
   d6082:	d00f      	beq.n	d60a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d6084:	2c01      	cmp	r4, #1
   d6086:	d170      	bne.n	d616a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d6088:	8904      	ldrh	r4, [r0, #8]
   d608a:	3c01      	subs	r4, #1
   d608c:	1aa2      	subs	r2, r4, r2
   d608e:	b212      	sxth	r2, r2
      break;
   d6090:	e00c      	b.n	d60ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d6092:	8944      	ldrh	r4, [r0, #10]
   d6094:	3c01      	subs	r4, #1
   d6096:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d6098:	8904      	ldrh	r4, [r0, #8]
   d609a:	1ae4      	subs	r4, r4, r3
   d609c:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d609e:	b212      	sxth	r2, r2
      x -= (w-1);
   d60a0:	b209      	sxth	r1, r1
      break;
   d60a2:	e062      	b.n	d616a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d60a4:	8944      	ldrh	r4, [r0, #10]
   d60a6:	1ae4      	subs	r4, r4, r3
   d60a8:	1a61      	subs	r1, r4, r1
   d60aa:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d60ac:	2a00      	cmp	r2, #0
   d60ae:	db5b      	blt.n	d6168 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d60b0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d60b4:	4294      	cmp	r4, r2
   d60b6:	f340 8090 	ble.w	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d60ba:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d60bc:	bfbe      	ittt	lt
   d60be:	185b      	addlt	r3, r3, r1
   d60c0:	b21b      	sxthlt	r3, r3
    __y = 0;
   d60c2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d60c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d60c8:	18cc      	adds	r4, r1, r3
   d60ca:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d60cc:	bfc4      	itt	gt
   d60ce:	1a43      	subgt	r3, r0, r1
   d60d0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d60d2:	2b00      	cmp	r3, #0
   d60d4:	f340 8081 	ble.w	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d60d8:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d60da:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d60dc:	4f3f      	ldr	r7, [pc, #252]	; (d61dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d60de:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60e2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d60e6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d60e8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60ec:	d017      	beq.n	d611e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d60ee:	f1c1 0108 	rsb	r1, r1, #8
   d60f2:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60f4:	493a      	ldr	r1, [pc, #232]	; (d61e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d60f6:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60f8:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d60fa:	bf3f      	itttt	cc
   d60fc:	ebc3 0e00 	rsbcc	lr, r3, r0
   d6100:	21ff      	movcc	r1, #255	; 0xff
   d6102:	fa41 f10e 	asrcc.w	r1, r1, lr
   d6106:	400e      	andcc	r6, r1
   d6108:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d610a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d610c:	bf0c      	ite	eq
   d610e:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d6110:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d6112:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d6114:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d6116:	d360      	bcc.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d6118:	1a18      	subs	r0, r3, r0
   d611a:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d611c:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d611e:	2b07      	cmp	r3, #7
   d6120:	d917      	bls.n	d6152 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d6122:	2d01      	cmp	r5, #1
   d6124:	bf0c      	ite	eq
   d6126:	20ff      	moveq	r0, #255	; 0xff
   d6128:	2000      	movne	r0, #0
   d612a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d612e:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d6130:	3a08      	subs	r2, #8
   d6132:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d6134:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d6136:	f801 0c80 	strb.w	r0, [r1, #-128]
   d613a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d613e:	d8f7      	bhi.n	d6130 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d6140:	f1a3 0208 	sub.w	r2, r3, #8
   d6144:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d6148:	3201      	adds	r2, #1
   d614a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d614e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d6152:	2b00      	cmp	r3, #0
   d6154:	d041      	beq.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d6156:	4a23      	ldr	r2, [pc, #140]	; (d61e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d6158:	5cd2      	ldrb	r2, [r2, r3]
   d615a:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d615c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d615e:	bf0c      	ite	eq
   d6160:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d6162:	4393      	bicne	r3, r2
   d6164:	7023      	strb	r3, [r4, #0]
   d6166:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6168:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d616a:	2a00      	cmp	r2, #0
   d616c:	db35      	blt.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d616e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d6172:	4294      	cmp	r4, r2
   d6174:	dd31      	ble.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d6176:	2900      	cmp	r1, #0
    w += x;
   d6178:	bfbc      	itt	lt
   d617a:	18c9      	addlt	r1, r1, r3
   d617c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d617e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d6182:	bfb8      	it	lt
   d6184:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d6186:	18ce      	adds	r6, r1, r3
   d6188:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d618a:	bfc4      	itt	gt
   d618c:	1a63      	subgt	r3, r4, r1
   d618e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d6190:	2b00      	cmp	r3, #0
   d6192:	dd22      	ble.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d6194:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d6196:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d619a:	4810      	ldr	r0, [pc, #64]	; (d61dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d619c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d61a0:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d61a2:	2001      	movs	r0, #1
   d61a4:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d61a8:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d61aa:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d61ac:	d109      	bne.n	d61c2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d61ae:	3b01      	subs	r3, #1
   d61b0:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d61b2:	1c5c      	adds	r4, r3, #1
   d61b4:	d011      	beq.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d61b6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d61ba:	4310      	orrs	r0, r2
   d61bc:	f801 0c01 	strb.w	r0, [r1, #-1]
   d61c0:	e7f5      	b.n	d61ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d61c2:	43d2      	mvns	r2, r2
   d61c4:	b2d2      	uxtb	r2, r2
   d61c6:	3b01      	subs	r3, #1
   d61c8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d61ca:	1c58      	adds	r0, r3, #1
   d61cc:	d005      	beq.n	d61da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d61ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   d61d2:	4010      	ands	r0, r2
   d61d4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d61d8:	e7f5      	b.n	d61c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d61da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61dc:	2003dc88 	.word	0x2003dc88
   d61e0:	2003dc80 	.word	0x2003dc80
   d61e4:	2003dc78 	.word	0x2003dc78

000d61e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d61e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d61ea:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d61ec:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d61f0:	2c02      	cmp	r4, #2
   d61f2:	d008      	beq.n	d6206 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d61f4:	2c03      	cmp	r4, #3
   d61f6:	d00f      	beq.n	d6218 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d61f8:	2c01      	cmp	r4, #1
   d61fa:	d112      	bne.n	d6222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d61fc:	8904      	ldrh	r4, [r0, #8]
   d61fe:	1ae4      	subs	r4, r4, r3
   d6200:	1aa2      	subs	r2, r4, r2
   d6202:	b212      	sxth	r2, r2
      break;
   d6204:	e06d      	b.n	d62e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d6206:	8904      	ldrh	r4, [r0, #8]
   d6208:	3c01      	subs	r4, #1
   d620a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d620c:	8944      	ldrh	r4, [r0, #10]
   d620e:	1ae4      	subs	r4, r4, r3
   d6210:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d6212:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d6214:	b212      	sxth	r2, r2
      break;
   d6216:	e004      	b.n	d6222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d6218:	8944      	ldrh	r4, [r0, #10]
   d621a:	3c01      	subs	r4, #1
   d621c:	1a61      	subs	r1, r4, r1
   d621e:	b209      	sxth	r1, r1
      break;
   d6220:	e05f      	b.n	d62e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d6222:	2900      	cmp	r1, #0
   d6224:	db5c      	blt.n	d62e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d6226:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d622a:	428c      	cmp	r4, r1
   d622c:	f340 8091 	ble.w	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d6230:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d6232:	bfbc      	itt	lt
   d6234:	18d2      	addlt	r2, r2, r3
   d6236:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d6238:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d623c:	bfb8      	it	lt
   d623e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d6240:	18d4      	adds	r4, r2, r3
   d6242:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d6244:	bfc4      	itt	gt
   d6246:	1a83      	subgt	r3, r0, r2
   d6248:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d624a:	2b00      	cmp	r3, #0
   d624c:	f340 8081 	ble.w	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d6250:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6252:	4e40      	ldr	r6, [pc, #256]	; (d6354 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d6254:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d6256:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d6258:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d625c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6260:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d6264:	d017      	beq.n	d6296 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d6266:	f1c4 0408 	rsb	r4, r4, #8
   d626a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d626c:	4c3a      	ldr	r4, [pc, #232]	; (d6358 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d626e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d6270:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d6272:	bf3f      	itttt	cc
   d6274:	ebc2 0e00 	rsbcc	lr, r2, r0
   d6278:	24ff      	movcc	r4, #255	; 0xff
   d627a:	fa44 f40e 	asrcc.w	r4, r4, lr
   d627e:	4027      	andcc	r7, r4
   d6280:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d6282:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d6284:	bf0c      	ite	eq
   d6286:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d6288:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d628a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d628c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d628e:	d360      	bcc.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d6290:	1a10      	subs	r0, r2, r0
   d6292:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d6294:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d6296:	2a07      	cmp	r2, #7
   d6298:	d917      	bls.n	d62ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d629a:	2d01      	cmp	r5, #1
   d629c:	bf0c      	ite	eq
   d629e:	24ff      	moveq	r4, #255	; 0xff
   d62a0:	2400      	movne	r4, #0
   d62a2:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d62a6:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d62a8:	3908      	subs	r1, #8
   d62aa:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d62ac:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d62ae:	f800 4c80 	strb.w	r4, [r0, #-128]
   d62b2:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d62b6:	d8f7      	bhi.n	d62a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d62b8:	f1a2 0108 	sub.w	r1, r2, #8
   d62bc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d62c0:	3101      	adds	r1, #1
   d62c2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d62c6:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d62ca:	2a00      	cmp	r2, #0
   d62cc:	d041      	beq.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d62ce:	4923      	ldr	r1, [pc, #140]	; (d635c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d62d0:	5c89      	ldrb	r1, [r1, r2]
   d62d2:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d62d4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d62d6:	bf0c      	ite	eq
   d62d8:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d62da:	438a      	bicne	r2, r1
   d62dc:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d62de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d62e2:	2900      	cmp	r1, #0
   d62e4:	db35      	blt.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d62e6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d62ea:	428c      	cmp	r4, r1
   d62ec:	dd31      	ble.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d62ee:	2a00      	cmp	r2, #0
    w += x;
   d62f0:	bfbc      	itt	lt
   d62f2:	18d2      	addlt	r2, r2, r3
   d62f4:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d62f6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d62fa:	bfb8      	it	lt
   d62fc:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d62fe:	18d6      	adds	r6, r2, r3
   d6300:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d6302:	bfc4      	itt	gt
   d6304:	1aa3      	subgt	r3, r4, r2
   d6306:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d6308:	2b00      	cmp	r3, #0
   d630a:	dd22      	ble.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d630c:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d630e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d6312:	4810      	ldr	r0, [pc, #64]	; (d6354 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d6314:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6318:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d631a:	2201      	movs	r2, #1
   d631c:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d6320:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d6322:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d6324:	d109      	bne.n	d633a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d6326:	1e5a      	subs	r2, r3, #1
   d6328:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d632a:	1c5c      	adds	r4, r3, #1
   d632c:	d011      	beq.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d632e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6332:	430a      	orrs	r2, r1
   d6334:	f800 2c01 	strb.w	r2, [r0, #-1]
   d6338:	e7f5      	b.n	d6326 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d633a:	43c9      	mvns	r1, r1
   d633c:	b2c9      	uxtb	r1, r1
   d633e:	1e5a      	subs	r2, r3, #1
   d6340:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d6342:	1c5a      	adds	r2, r3, #1
   d6344:	d005      	beq.n	d6352 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d6346:	f810 2b01 	ldrb.w	r2, [r0], #1
   d634a:	400a      	ands	r2, r1
   d634c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d6350:	e7f5      	b.n	d633e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d6352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6354:	2003dc88 	.word	0x2003dc88
   d6358:	2003dc80 	.word	0x2003dc80
   d635c:	2003dc78 	.word	0x2003dc78

000d6360 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d6362:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6364:	4606      	mov	r6, r0
   d6366:	4614      	mov	r4, r2
   d6368:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d636a:	db3f      	blt.n	d63ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d636c:	f000 fbbc 	bl	d6ae8 <_ZN12Adafruit_GFX5widthEv>
   d6370:	4285      	cmp	r5, r0
   d6372:	da3b      	bge.n	d63ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d6374:	2c00      	cmp	r4, #0
   d6376:	db39      	blt.n	d63ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d6378:	4630      	mov	r0, r6
   d637a:	f000 fbb8 	bl	d6aee <_ZN12Adafruit_GFX6heightEv>
   d637e:	4284      	cmp	r4, r0
   d6380:	da34      	bge.n	d63ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d6382:	4630      	mov	r0, r6
   d6384:	f000 fbae 	bl	d6ae4 <_ZN12Adafruit_GFX11getRotationEv>
   d6388:	2802      	cmp	r0, #2
   d638a:	d127      	bne.n	d63dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d638c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d638e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d6390:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d6392:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d6394:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d6396:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d6398:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d639a:	b204      	sxth	r4, r0
   d639c:	e006      	b.n	d63ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d639e:	2801      	cmp	r0, #1
   d63a0:	d104      	bne.n	d63ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d63a2:	8933      	ldrh	r3, [r6, #8]
   d63a4:	3b01      	subs	r3, #1
   d63a6:	1b1b      	subs	r3, r3, r4
   d63a8:	462c      	mov	r4, r5
   d63aa:	b21d      	sxth	r5, r3
   d63ac:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d63ae:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d63b0:	fb94 f0f0 	sdiv	r0, r4, r0
   d63b4:	b200      	sxth	r0, r0
   d63b6:	4b0e      	ldr	r3, [pc, #56]	; (d63f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d63b8:	f004 0207 	and.w	r2, r4, #7
   d63bc:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d63c0:	d104      	bne.n	d63cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d63c2:	4097      	lsls	r7, r2
   d63c4:	5c5a      	ldrb	r2, [r3, r1]
   d63c6:	4317      	orrs	r7, r2
   d63c8:	545f      	strb	r7, [r3, r1]
   d63ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d63cc:	5c58      	ldrb	r0, [r3, r1]
   d63ce:	2701      	movs	r7, #1
   d63d0:	fa07 f202 	lsl.w	r2, r7, r2
   d63d4:	ea20 0202 	bic.w	r2, r0, r2
   d63d8:	545a      	strb	r2, [r3, r1]
   d63da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d63dc:	2803      	cmp	r0, #3
   d63de:	d1de      	bne.n	d639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d63e0:	8973      	ldrh	r3, [r6, #10]
   d63e2:	3b01      	subs	r3, #1
   d63e4:	1b5b      	subs	r3, r3, r5
   d63e6:	4625      	mov	r5, r4
   d63e8:	b21c      	sxth	r4, r3
   d63ea:	e7df      	b.n	d63ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d63ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d63ee:	bf00      	nop
   d63f0:	2003dc88 	.word	0x2003dc88

000d63f4 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d63f4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d63f6:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d63f8:	4604      	mov	r4, r0
   d63fa:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d63fc:	2180      	movs	r1, #128	; 0x80
   d63fe:	f000 fa87 	bl	d6910 <_ZN12Adafruit_GFXC1Ess>
   d6402:	4b06      	ldr	r3, [pc, #24]	; (d641c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d6404:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d6406:	23ff      	movs	r3, #255	; 0xff
   d6408:	7763      	strb	r3, [r4, #29]
   d640a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d640e:	77e3      	strb	r3, [r4, #31]
   d6410:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d6412:	f884 5020 	strb.w	r5, [r4, #32]
}
   d6416:	4620      	mov	r0, r4
   d6418:	bd38      	pop	{r3, r4, r5, pc}
   d641a:	bf00      	nop
   d641c:	000dcb90 	.word	0x000dcb90

000d6420 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d6420:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d6424:	2100      	movs	r1, #0
   d6426:	4801      	ldr	r0, [pc, #4]	; (d642c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d6428:	f005 bb80 	b.w	dbb2c <memset>
   d642c:	2003dc88 	.word	0x2003dc88

000d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6430:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d6432:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d6436:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6438:	4604      	mov	r4, r0
   d643a:	460d      	mov	r5, r1
  if (sid != -1)
   d643c:	d028      	beq.n	d6490 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d643e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d6442:	2101      	movs	r1, #1
   d6444:	b280      	uxth	r0, r0
   d6446:	f002 fe96 	bl	d9176 <digitalWrite>
    digitalWrite(dc, LOW);
   d644a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d644e:	2100      	movs	r1, #0
   d6450:	b280      	uxth	r0, r0
   d6452:	f002 fe90 	bl	d9176 <digitalWrite>
    digitalWrite(cs, LOW);
   d6456:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d645a:	2100      	movs	r1, #0
   d645c:	b280      	uxth	r0, r0
   d645e:	f002 fe8a 	bl	d9176 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6462:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6466:	b12b      	cbz	r3, d6474 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d6468:	f7fe fc8e 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d646c:	4629      	mov	r1, r5
   d646e:	f000 ffe7 	bl	d7440 <_ZN8SPIClass8transferEh>
   d6472:	e005      	b.n	d6480 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d6474:	462b      	mov	r3, r5
   d6476:	2201      	movs	r2, #1
   d6478:	7fa1      	ldrb	r1, [r4, #30]
   d647a:	7f60      	ldrb	r0, [r4, #29]
   d647c:	f002 febe 	bl	d91fc <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d6480:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6484:	2101      	movs	r1, #1
   d6486:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d6488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d648c:	f002 be73 	b.w	d9176 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d6490:	f002 fef4 	bl	d927c <_Z19__fetch_global_Wirev>
   d6494:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d6498:	f002 f9b1 	bl	d87fe <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d649c:	f002 feee 	bl	d927c <_Z19__fetch_global_Wirev>
   d64a0:	6803      	ldr	r3, [r0, #0]
   d64a2:	2100      	movs	r1, #0
   d64a4:	689b      	ldr	r3, [r3, #8]
   d64a6:	4798      	blx	r3
    Wire.write(c);
   d64a8:	f002 fee8 	bl	d927c <_Z19__fetch_global_Wirev>
   d64ac:	6803      	ldr	r3, [r0, #0]
   d64ae:	4629      	mov	r1, r5
   d64b0:	689b      	ldr	r3, [r3, #8]
   d64b2:	4798      	blx	r3
    Wire.endTransmission();
   d64b4:	f002 fee2 	bl	d927c <_Z19__fetch_global_Wirev>
  }
}
   d64b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d64bc:	f002 b9a6 	b.w	d880c <_ZN7TwoWire15endTransmissionEv>

000d64c0 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d64c0:	b538      	push	{r3, r4, r5, lr}
   d64c2:	4604      	mov	r4, r0
   d64c4:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d64c6:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d64c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d64cc:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d64ce:	3301      	adds	r3, #1
   d64d0:	d037      	beq.n	d6542 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d64d2:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d64d6:	2101      	movs	r1, #1
   d64d8:	b280      	uxth	r0, r0
   d64da:	f002 fe3b 	bl	d9154 <pinMode>
    pinMode(cs, OUTPUT);
   d64de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d64e2:	2101      	movs	r1, #1
   d64e4:	b280      	uxth	r0, r0
   d64e6:	f002 fe35 	bl	d9154 <pinMode>
    if (!hwSPI){
   d64ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d64ee:	b95b      	cbnz	r3, d6508 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d64f0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d64f4:	2101      	movs	r1, #1
   d64f6:	b280      	uxth	r0, r0
   d64f8:	f002 fe2c 	bl	d9154 <pinMode>
    	pinMode(sclk, OUTPUT);
   d64fc:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d6500:	2101      	movs	r1, #1
   d6502:	b280      	uxth	r0, r0
   d6504:	f002 fe26 	bl	d9154 <pinMode>
    	}
    if (hwSPI){
   d6508:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d650c:	b1eb      	cbz	r3, d654a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d650e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6512:	2101      	movs	r1, #1
   d6514:	b280      	uxth	r0, r0
   d6516:	f002 fe2e 	bl	d9176 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d651a:	f7fe fc35 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d651e:	2101      	movs	r1, #1
   d6520:	f000 fe8d 	bl	d723e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d6524:	f7fe fc30 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6528:	2110      	movs	r1, #16
   d652a:	f000 ff65 	bl	d73f8 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d652e:	f7fe fc2b 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6532:	2100      	movs	r1, #0
   d6534:	f000 fe94 	bl	d7260 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d6538:	f7fe fc26 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d653c:	f000 fe6e 	bl	d721c <_ZN8SPIClass5beginEv>
   d6540:	e003      	b.n	d654a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d6542:	f002 fe9b 	bl	d927c <_Z19__fetch_global_Wirev>
   d6546:	f002 f91f 	bl	d8788 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d654a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d654e:	2101      	movs	r1, #1
   d6550:	b280      	uxth	r0, r0
   d6552:	f002 fdff 	bl	d9154 <pinMode>
  digitalWrite(rst, HIGH);
   d6556:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d655a:	2101      	movs	r1, #1
   d655c:	b280      	uxth	r0, r0
   d655e:	f002 fe0a 	bl	d9176 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d6562:	2001      	movs	r0, #1
   d6564:	f001 fbb0 	bl	d7cc8 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d6568:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d656c:	2100      	movs	r1, #0
   d656e:	b280      	uxth	r0, r0
   d6570:	f002 fe01 	bl	d9176 <digitalWrite>
  // wait 10ms
  delay(10);
   d6574:	200a      	movs	r0, #10
   d6576:	f001 fba7 	bl	d7cc8 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d657a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d657e:	2101      	movs	r1, #1
   d6580:	b280      	uxth	r0, r0
   d6582:	f002 fdf8 	bl	d9176 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d6586:	4620      	mov	r0, r4
   d6588:	21ae      	movs	r1, #174	; 0xae
   d658a:	f7ff ff51 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d658e:	4620      	mov	r0, r4
   d6590:	21d5      	movs	r1, #213	; 0xd5
   d6592:	f7ff ff4d 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d6596:	4620      	mov	r0, r4
   d6598:	2180      	movs	r1, #128	; 0x80
   d659a:	f7ff ff49 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d659e:	4620      	mov	r0, r4
   d65a0:	21a8      	movs	r1, #168	; 0xa8
   d65a2:	f7ff ff45 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d65a6:	4620      	mov	r0, r4
   d65a8:	213f      	movs	r1, #63	; 0x3f
   d65aa:	f7ff ff41 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d65ae:	4620      	mov	r0, r4
   d65b0:	21d3      	movs	r1, #211	; 0xd3
   d65b2:	f7ff ff3d 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d65b6:	4620      	mov	r0, r4
   d65b8:	2100      	movs	r1, #0
   d65ba:	f7ff ff39 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d65be:	4620      	mov	r0, r4
   d65c0:	2140      	movs	r1, #64	; 0x40
   d65c2:	f7ff ff35 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d65c6:	218d      	movs	r1, #141	; 0x8d
   d65c8:	4620      	mov	r0, r4
   d65ca:	f7ff ff31 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d65ce:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d65d0:	bf0c      	ite	eq
   d65d2:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d65d4:	2114      	movne	r1, #20
   d65d6:	4620      	mov	r0, r4
   d65d8:	f7ff ff2a 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d65dc:	4620      	mov	r0, r4
   d65de:	2120      	movs	r1, #32
   d65e0:	f7ff ff26 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d65e4:	4620      	mov	r0, r4
   d65e6:	2100      	movs	r1, #0
   d65e8:	f7ff ff22 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d65ec:	4620      	mov	r0, r4
   d65ee:	21a1      	movs	r1, #161	; 0xa1
   d65f0:	f7ff ff1e 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d65f4:	4620      	mov	r0, r4
   d65f6:	21c8      	movs	r1, #200	; 0xc8
   d65f8:	f7ff ff1a 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d65fc:	4620      	mov	r0, r4
   d65fe:	21da      	movs	r1, #218	; 0xda
   d6600:	f7ff ff16 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d6604:	4620      	mov	r0, r4
   d6606:	2112      	movs	r1, #18
   d6608:	f7ff ff12 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d660c:	2181      	movs	r1, #129	; 0x81
   d660e:	4620      	mov	r0, r4
   d6610:	f7ff ff0e 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d6614:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d6616:	bf0c      	ite	eq
   d6618:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d661a:	21cf      	movne	r1, #207	; 0xcf
   d661c:	4620      	mov	r0, r4
   d661e:	f7ff ff07 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d6622:	21d9      	movs	r1, #217	; 0xd9
   d6624:	4620      	mov	r0, r4
   d6626:	f7ff ff03 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d662a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d662c:	bf0c      	ite	eq
   d662e:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d6630:	21f1      	movne	r1, #241	; 0xf1
   d6632:	4620      	mov	r0, r4
   d6634:	f7ff fefc 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d6638:	4620      	mov	r0, r4
   d663a:	21db      	movs	r1, #219	; 0xdb
   d663c:	f7ff fef8 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d6640:	4620      	mov	r0, r4
   d6642:	2140      	movs	r1, #64	; 0x40
   d6644:	f7ff fef4 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d6648:	4620      	mov	r0, r4
   d664a:	21a4      	movs	r1, #164	; 0xa4
   d664c:	f7ff fef0 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d6650:	4620      	mov	r0, r4
   d6652:	21a6      	movs	r1, #166	; 0xa6
   d6654:	f7ff feec 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d6658:	4620      	mov	r0, r4
   d665a:	21af      	movs	r1, #175	; 0xaf
}
   d665c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d6660:	f7ff bee6 	b.w	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d6664 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d6664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d6668:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d666a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d666c:	f7ff fee0 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d6670:	2100      	movs	r1, #0
   d6672:	4620      	mov	r0, r4
   d6674:	f7ff fedc 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d6678:	217f      	movs	r1, #127	; 0x7f
   d667a:	4620      	mov	r0, r4
   d667c:	f7ff fed8 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d6680:	2122      	movs	r1, #34	; 0x22
   d6682:	4620      	mov	r0, r4
   d6684:	f7ff fed4 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d6688:	2100      	movs	r1, #0
   d668a:	4620      	mov	r0, r4
   d668c:	f7ff fed0 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d6690:	2107      	movs	r1, #7
   d6692:	4620      	mov	r0, r4
   d6694:	f7ff fecc 	bl	d6430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d6698:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d669c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d675c <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d66a0:	3301      	adds	r3, #1
   d66a2:	d035      	beq.n	d6710 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d66a4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d66a8:	2101      	movs	r1, #1
   d66aa:	b280      	uxth	r0, r0
   d66ac:	f002 fd63 	bl	d9176 <digitalWrite>
    digitalWrite(dc, HIGH);
   d66b0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d66b4:	2101      	movs	r1, #1
   d66b6:	b280      	uxth	r0, r0
   d66b8:	f002 fd5d 	bl	d9176 <digitalWrite>
    digitalWrite(cs, LOW);
   d66bc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d66c0:	2100      	movs	r1, #0
   d66c2:	b280      	uxth	r0, r0
   d66c4:	f002 fd57 	bl	d9176 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d66c8:	2001      	movs	r0, #1
   d66ca:	f000 facd 	bl	d6c68 <HAL_Delay_Microseconds>
   d66ce:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d66d0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d66d4:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d66d8:	b12b      	cbz	r3, d66e6 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d66da:	f7fe fb55 	bl	d4d88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d66de:	4631      	mov	r1, r6
   d66e0:	f000 feae 	bl	d7440 <_ZN8SPIClass8transferEh>
   d66e4:	e005      	b.n	d66f2 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d66e6:	4633      	mov	r3, r6
   d66e8:	2201      	movs	r2, #1
   d66ea:	7fa1      	ldrb	r1, [r4, #30]
   d66ec:	7f60      	ldrb	r0, [r4, #29]
   d66ee:	f002 fd85 	bl	d91fc <shiftOut>
   d66f2:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d66f4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d66f8:	d1ea      	bne.n	d66d0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d66fa:	2001      	movs	r0, #1
   d66fc:	f000 fab4 	bl	d6c68 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6700:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6704:	2101      	movs	r1, #1
   d6706:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d6708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d670c:	f002 bd33 	b.w	d9176 <digitalWrite>
   d6710:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d6712:	f002 fdb3 	bl	d927c <_Z19__fetch_global_Wirev>
   d6716:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d671a:	f002 f870 	bl	d87fe <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d671e:	f002 fdad 	bl	d927c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d6722:	6803      	ldr	r3, [r0, #0]
   d6724:	2140      	movs	r1, #64	; 0x40
   d6726:	689b      	ldr	r3, [r3, #8]
   d6728:	4798      	blx	r3
   d672a:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d672c:	f002 fda6 	bl	d927c <_Z19__fetch_global_Wirev>
   d6730:	19af      	adds	r7, r5, r6
   d6732:	6803      	ldr	r3, [r0, #0]
   d6734:	b2bf      	uxth	r7, r7
   d6736:	689b      	ldr	r3, [r3, #8]
   d6738:	f818 1007 	ldrb.w	r1, [r8, r7]
   d673c:	3601      	adds	r6, #1
   d673e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d6740:	2e10      	cmp	r6, #16
   d6742:	d1f3      	bne.n	d672c <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d6744:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d6746:	f002 fd99 	bl	d927c <_Z19__fetch_global_Wirev>
   d674a:	b2ad      	uxth	r5, r5
   d674c:	f002 f85e 	bl	d880c <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d6750:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d6754:	d1dd      	bne.n	d6712 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d6756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d675a:	bf00      	nop
   d675c:	2003dc88 	.word	0x2003dc88

000d6760 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d6760:	f000 b9da 	b.w	d6b18 <HAL_Pin_Map>

000d6764 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d6764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6768:	b085      	sub	sp, #20
   d676a:	461e      	mov	r6, r3
   d676c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d6770:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d6774:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d6776:	1a9a      	subs	r2, r3, r2
   d6778:	2a00      	cmp	r2, #0
   d677a:	bfb8      	it	lt
   d677c:	4252      	neglt	r2, r2
   d677e:	9200      	str	r2, [sp, #0]
   d6780:	1a72      	subs	r2, r6, r1
   d6782:	2a00      	cmp	r2, #0
   d6784:	bfb8      	it	lt
   d6786:	4252      	neglt	r2, r2
   d6788:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d678a:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d678c:	9a00      	ldr	r2, [sp, #0]
   d678e:	9901      	ldr	r1, [sp, #4]
   d6790:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d6792:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d6794:	dd05      	ble.n	d67a2 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d6796:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d6798:	461e      	mov	r6, r3
   d679a:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d679c:	4622      	mov	r2, r4
    swap(x0, y0);
   d679e:	462c      	mov	r4, r5
   d67a0:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d67a2:	42b4      	cmp	r4, r6
   d67a4:	dd05      	ble.n	d67b2 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d67a6:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d67a8:	461d      	mov	r5, r3
   d67aa:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d67ac:	4622      	mov	r2, r4
   d67ae:	4634      	mov	r4, r6
   d67b0:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d67b2:	1b5a      	subs	r2, r3, r5
   d67b4:	2a00      	cmp	r2, #0
   d67b6:	bfb8      	it	lt
   d67b8:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d67ba:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d67be:	429d      	cmp	r5, r3
   d67c0:	bfb4      	ite	lt
   d67c2:	2301      	movlt	r3, #1
   d67c4:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d67c8:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d67cc:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d67ce:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d67d0:	fa0f f788 	sxth.w	r7, r8
   d67d4:	2202      	movs	r2, #2
   d67d6:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d67da:	42b4      	cmp	r4, r6
   d67dc:	dc1f      	bgt.n	d681e <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d67de:	9a01      	ldr	r2, [sp, #4]
   d67e0:	9b00      	ldr	r3, [sp, #0]
   d67e2:	4293      	cmp	r3, r2
   d67e4:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d67e8:	bfc8      	it	gt
   d67ea:	4622      	movgt	r2, r4
   d67ec:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d67f0:	bfc8      	it	gt
   d67f2:	4629      	movgt	r1, r5
   d67f4:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d67f6:	bfdc      	itt	le
   d67f8:	462a      	movle	r2, r5
   d67fa:	4621      	movle	r1, r4
   d67fc:	4648      	mov	r0, r9
   d67fe:	47d8      	blx	fp
    }
    err -= dy;
   d6800:	9b03      	ldr	r3, [sp, #12]
   d6802:	1aff      	subs	r7, r7, r3
   d6804:	b2bb      	uxth	r3, r7
   d6806:	b21f      	sxth	r7, r3
    if (err < 0) {
   d6808:	2f00      	cmp	r7, #0
   d680a:	da05      	bge.n	d6818 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d680c:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d680e:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d6812:	4415      	add	r5, r2
   d6814:	b22d      	sxth	r5, r5
      err += dx;
   d6816:	b23f      	sxth	r7, r7
   d6818:	3401      	adds	r4, #1
   d681a:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d681c:	e7dd      	b.n	d67da <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d681e:	b005      	add	sp, #20
   d6820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6824 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6824:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6828:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d682c:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d682e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d6832:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6834:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d6836:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6838:	4691      	mov	r9, r2
   d683a:	460d      	mov	r5, r1
   d683c:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d683e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d6840:	6823      	ldr	r3, [r4, #0]
   d6842:	9600      	str	r6, [sp, #0]
   d6844:	f10a 32ff 	add.w	r2, sl, #4294967295
   d6848:	444a      	add	r2, r9
   d684a:	69df      	ldr	r7, [r3, #28]
   d684c:	4629      	mov	r1, r5
   d684e:	4643      	mov	r3, r8
   d6850:	4620      	mov	r0, r4
   d6852:	b212      	sxth	r2, r2
   d6854:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d6856:	6823      	ldr	r3, [r4, #0]
   d6858:	9600      	str	r6, [sp, #0]
   d685a:	699f      	ldr	r7, [r3, #24]
   d685c:	464a      	mov	r2, r9
   d685e:	4653      	mov	r3, sl
   d6860:	4629      	mov	r1, r5
   d6862:	4620      	mov	r0, r4
   d6864:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d6866:	6823      	ldr	r3, [r4, #0]
   d6868:	960a      	str	r6, [sp, #40]	; 0x28
   d686a:	f108 31ff 	add.w	r1, r8, #4294967295
   d686e:	4429      	add	r1, r5
   d6870:	699d      	ldr	r5, [r3, #24]
   d6872:	464a      	mov	r2, r9
   d6874:	4653      	mov	r3, sl
   d6876:	b209      	sxth	r1, r1
   d6878:	4620      	mov	r0, r4
   d687a:	46ac      	mov	ip, r5
}
   d687c:	b002      	add	sp, #8
   d687e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d6882:	4760      	bx	ip

000d6884 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d6884:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d6886:	3b01      	subs	r3, #1
   d6888:	4413      	add	r3, r2
   d688a:	6804      	ldr	r4, [r0, #0]
   d688c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d6890:	9501      	str	r5, [sp, #4]
   d6892:	b21b      	sxth	r3, r3
   d6894:	9300      	str	r3, [sp, #0]
   d6896:	6964      	ldr	r4, [r4, #20]
   d6898:	460b      	mov	r3, r1
   d689a:	47a0      	blx	r4
}
   d689c:	b003      	add	sp, #12
   d689e:	bd30      	pop	{r4, r5, pc}

000d68a0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d68a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d68a2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d68a6:	6804      	ldr	r4, [r0, #0]
   d68a8:	e88d 0024 	stmia.w	sp, {r2, r5}
   d68ac:	3b01      	subs	r3, #1
   d68ae:	440b      	add	r3, r1
   d68b0:	6964      	ldr	r4, [r4, #20]
   d68b2:	b21b      	sxth	r3, r3
   d68b4:	47a0      	blx	r4
}
   d68b6:	b003      	add	sp, #12
   d68b8:	bd30      	pop	{r4, r5, pc}

000d68ba <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d68ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d68be:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d68c2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d68c6:	4605      	mov	r5, r0
   d68c8:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d68ca:	460c      	mov	r4, r1
   d68cc:	eb01 0a03 	add.w	sl, r1, r3
   d68d0:	4554      	cmp	r4, sl
   d68d2:	da0b      	bge.n	d68ec <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d68d4:	682b      	ldr	r3, [r5, #0]
   d68d6:	f8cd 9000 	str.w	r9, [sp]
   d68da:	699e      	ldr	r6, [r3, #24]
   d68dc:	4621      	mov	r1, r4
   d68de:	4643      	mov	r3, r8
   d68e0:	463a      	mov	r2, r7
   d68e2:	4628      	mov	r0, r5
   d68e4:	3401      	adds	r4, #1
   d68e6:	47b0      	blx	r6
   d68e8:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d68ea:	e7f1      	b.n	d68d0 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d68ec:	b002      	add	sp, #8
   d68ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d68f2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d68f2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d68f4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d68f8:	6804      	ldr	r4, [r0, #0]
   d68fa:	9101      	str	r1, [sp, #4]
   d68fc:	9200      	str	r2, [sp, #0]
   d68fe:	2200      	movs	r2, #0
   d6900:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d6904:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d6906:	4611      	mov	r1, r2
   d6908:	47a0      	blx	r4
}
   d690a:	b002      	add	sp, #8
   d690c:	bd10      	pop	{r4, pc}

000d690e <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d690e:	4770      	bx	lr

000d6910 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d6910:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d6912:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6914:	2400      	movs	r4, #0
   d6916:	4d08      	ldr	r5, [pc, #32]	; (d6938 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6918:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d691a:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d691c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d691e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d6922:	2201      	movs	r2, #1
   d6924:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d6926:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d6928:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d692a:	8204      	strh	r4, [r0, #16]
   d692c:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d692e:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d6930:	82c1      	strh	r1, [r0, #22]
   d6932:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d6934:	7682      	strb	r2, [r0, #26]
}
   d6936:	bd30      	pop	{r4, r5, pc}
   d6938:	000dcbc8 	.word	0x000dcbc8

000d693c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6940:	b08f      	sub	sp, #60	; 0x3c
   d6942:	4605      	mov	r5, r0
   d6944:	9106      	str	r1, [sp, #24]
   d6946:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d694a:	9107      	str	r1, [sp, #28]
   d694c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d6950:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d6952:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d6956:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d6958:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d695c:	4281      	cmp	r1, r0
   d695e:	dd7c      	ble.n	d6a5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d6960:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d6964:	4291      	cmp	r1, r2
   d6966:	dd78      	ble.n	d6a5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d6968:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d696a:	fb11 0008 	smlabb	r0, r1, r8, r0
   d696e:	2800      	cmp	r0, #0
   d6970:	dd73      	ble.n	d6a5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d6972:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d6976:	2800      	cmp	r0, #0
   d6978:	dd6f      	ble.n	d6a5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d697a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d697e:	b296      	uxth	r6, r2
   d6980:	930c      	str	r3, [sp, #48]	; 0x30
   d6982:	f106 0308 	add.w	r3, r6, #8
   d6986:	b29b      	uxth	r3, r3
   d6988:	9109      	str	r1, [sp, #36]	; 0x24
   d698a:	2400      	movs	r4, #0
   d698c:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d698e:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d6990:	bf1c      	itt	ne
   d6992:	4b33      	ldrne	r3, [pc, #204]	; (d6a60 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d6994:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6996:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d6998:	bf16      	itet	ne
   d699a:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d699c:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d69a0:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d69a4:	9604      	str	r6, [sp, #16]
   d69a6:	fa1f f388 	uxth.w	r3, r8
   d69aa:	9303      	str	r3, [sp, #12]
   d69ac:	9a03      	ldr	r2, [sp, #12]
   d69ae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d69b2:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d69b6:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d69ba:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d69bc:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d69be:	920a      	str	r2, [sp, #40]	; 0x28
   d69c0:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d69c2:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d69c6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d69c8:	f019 0f01 	tst.w	r9, #1
   d69cc:	d011      	beq.n	d69f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d69ce:	f1b8 0f01 	cmp.w	r8, #1
   d69d2:	682b      	ldr	r3, [r5, #0]
   d69d4:	d103      	bne.n	d69de <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d69d6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d69da:	9b07      	ldr	r3, [sp, #28]
   d69dc:	e014      	b.n	d6a08 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d69de:	9a07      	ldr	r2, [sp, #28]
   d69e0:	9201      	str	r2, [sp, #4]
   d69e2:	f8cd a000 	str.w	sl, [sp]
   d69e6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d69ea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d69ee:	4653      	mov	r3, sl
   d69f0:	e018      	b.n	d6a24 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d69f2:	9b07      	ldr	r3, [sp, #28]
   d69f4:	9a08      	ldr	r2, [sp, #32]
   d69f6:	4293      	cmp	r3, r2
   d69f8:	d017      	beq.n	d6a2a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d69fa:	f1b8 0f01 	cmp.w	r8, #1
   d69fe:	682b      	ldr	r3, [r5, #0]
   d6a00:	d107      	bne.n	d6a12 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d6a02:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6a06:	4613      	mov	r3, r2
   d6a08:	b23a      	sxth	r2, r7
   d6a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d6a0c:	4628      	mov	r0, r5
   d6a0e:	47d8      	blx	fp
   d6a10:	e00b      	b.n	d6a2a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d6a12:	9a08      	ldr	r2, [sp, #32]
   d6a14:	9201      	str	r2, [sp, #4]
   d6a16:	f8cd a000 	str.w	sl, [sp]
   d6a1a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d6a1e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d6a22:	4653      	mov	r3, sl
   d6a24:	990a      	ldr	r1, [sp, #40]	; 0x28
   d6a26:	4628      	mov	r0, r5
   d6a28:	47d8      	blx	fp
   d6a2a:	9b04      	ldr	r3, [sp, #16]
   d6a2c:	9a03      	ldr	r2, [sp, #12]
   d6a2e:	4413      	add	r3, r2
   d6a30:	b29b      	uxth	r3, r3
   d6a32:	9304      	str	r3, [sp, #16]
   d6a34:	9b05      	ldr	r3, [sp, #20]
   d6a36:	4413      	add	r3, r2
   d6a38:	b29b      	uxth	r3, r3
   d6a3a:	3701      	adds	r7, #1
   d6a3c:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d6a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6a40:	b2bf      	uxth	r7, r7
   d6a42:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d6a44:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d6a48:	d1be      	bne.n	d69c8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d6a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6a4c:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d6a4e:	3401      	adds	r4, #1
   d6a50:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d6a54:	b264      	sxtb	r4, r4
   d6a56:	9309      	str	r3, [sp, #36]	; 0x24
   d6a58:	d199      	bne.n	d698e <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d6a5a:	b00f      	add	sp, #60	; 0x3c
   d6a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a60:	000dcbf8 	.word	0x000dcbf8

000d6a64 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d6a64:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d6a66:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d6a68:	b085      	sub	sp, #20
   d6a6a:	4604      	mov	r4, r0
   d6a6c:	460b      	mov	r3, r1

  if (c == '\n') {
   d6a6e:	d104      	bne.n	d6a7a <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d6a70:	7e02      	ldrb	r2, [r0, #24]
   d6a72:	8a43      	ldrh	r3, [r0, #18]
   d6a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d6a78:	e023      	b.n	d6ac2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d6a7a:	290d      	cmp	r1, #13
   d6a7c:	d024      	beq.n	d6ac8 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d6a7e:	7e05      	ldrb	r5, [r0, #24]
   d6a80:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d6a84:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d6a88:	9502      	str	r5, [sp, #8]
   d6a8a:	8ac5      	ldrh	r5, [r0, #22]
   d6a8c:	9501      	str	r5, [sp, #4]
   d6a8e:	8a85      	ldrh	r5, [r0, #20]
   d6a90:	9500      	str	r5, [sp, #0]
   d6a92:	f7ff ff53 	bl	d693c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d6a96:	7e22      	ldrb	r2, [r4, #24]
   d6a98:	8a23      	ldrh	r3, [r4, #16]
   d6a9a:	b291      	uxth	r1, r2
   d6a9c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d6aa0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6aa4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d6aa6:	b21b      	sxth	r3, r3
   d6aa8:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6aaa:	b168      	cbz	r0, d6ac8 <_ZN12Adafruit_GFX5writeEh+0x64>
   d6aac:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d6ab0:	f06f 0505 	mvn.w	r5, #5
   d6ab4:	fb05 0202 	mla	r2, r5, r2, r0
   d6ab8:	4293      	cmp	r3, r2
   d6aba:	dd05      	ble.n	d6ac8 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d6abc:	8a63      	ldrh	r3, [r4, #18]
   d6abe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d6ac2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d6ac4:	2300      	movs	r3, #0
   d6ac6:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d6ac8:	2001      	movs	r0, #1
   d6aca:	b005      	add	sp, #20
   d6acc:	bd30      	pop	{r4, r5, pc}

000d6ace <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d6ace:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d6ad0:	8242      	strh	r2, [r0, #18]
   d6ad2:	4770      	bx	lr

000d6ad4 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d6ad4:	2900      	cmp	r1, #0
   d6ad6:	bf08      	it	eq
   d6ad8:	2101      	moveq	r1, #1
   d6ada:	7601      	strb	r1, [r0, #24]
   d6adc:	4770      	bx	lr

000d6ade <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d6ade:	82c1      	strh	r1, [r0, #22]
   d6ae0:	8281      	strh	r1, [r0, #20]
   d6ae2:	4770      	bx	lr

000d6ae4 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d6ae4:	7e40      	ldrb	r0, [r0, #25]
   d6ae6:	4770      	bx	lr

000d6ae8 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d6ae8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d6aec:	4770      	bx	lr

000d6aee <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d6aee:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d6af2:	4770      	bx	lr

000d6af4 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d6af4:	f000 b810 	b.w	d6b18 <HAL_Pin_Map>

000d6af8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <netdb_freeaddrinfo+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	689b      	ldr	r3, [r3, #8]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	00030268 	.word	0x00030268

000d6b08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <netdb_getaddrinfo+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	68db      	ldr	r3, [r3, #12]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030268 	.word	0x00030268

000d6b18 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <HAL_Pin_Map+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	681b      	ldr	r3, [r3, #0]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	0003022c 	.word	0x0003022c

000d6b28 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <HAL_Validate_Pin_Function+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	685b      	ldr	r3, [r3, #4]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	0003022c 	.word	0x0003022c

000d6b38 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <HAL_Pin_Mode+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	689b      	ldr	r3, [r3, #8]
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	0003022c 	.word	0x0003022c

000d6b48 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <HAL_Get_Pin_Mode+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	68db      	ldr	r3, [r3, #12]
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	0003022c 	.word	0x0003022c

000d6b58 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <HAL_GPIO_Write+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	691b      	ldr	r3, [r3, #16]
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	0003022c 	.word	0x0003022c

000d6b68 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <HAL_GPIO_Read+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	695b      	ldr	r3, [r3, #20]
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	0003022c 	.word	0x0003022c

000d6b78 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <HAL_ADC_Read+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	0003022c 	.word	0x0003022c

000d6b88 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <HAL_Pulse_In+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	0003022c 	.word	0x0003022c

000d6b98 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <HAL_SPI_Begin+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	681b      	ldr	r3, [r3, #0]
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	00030230 	.word	0x00030230

000d6ba8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <HAL_SPI_Set_Bit_Order+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	689b      	ldr	r3, [r3, #8]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030230 	.word	0x00030230

000d6bb8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <HAL_SPI_Set_Data_Mode+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	68db      	ldr	r3, [r3, #12]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030230 	.word	0x00030230

000d6bc8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	691b      	ldr	r3, [r3, #16]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030230 	.word	0x00030230

000d6bd8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <HAL_SPI_Send_Receive_Data+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	695b      	ldr	r3, [r3, #20]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030230 	.word	0x00030230

000d6be8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <HAL_SPI_Init+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	69db      	ldr	r3, [r3, #28]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030230 	.word	0x00030230

000d6bf8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <HAL_SPI_Is_Enabled+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6a1b      	ldr	r3, [r3, #32]
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030230 	.word	0x00030230

000d6c08 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <HAL_SPI_Info+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030230 	.word	0x00030230

000d6c18 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <HAL_SPI_Set_Settings+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030230 	.word	0x00030230

000d6c28 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <HAL_SPI_Acquire+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030230 	.word	0x00030230

000d6c38 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <HAL_SPI_Release+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030230 	.word	0x00030230

000d6c48 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <if_index_to_name+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	695b      	ldr	r3, [r3, #20]
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	0003026c 	.word	0x0003026c

000d6c58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <HAL_RNG_GetRandomNumber+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	685b      	ldr	r3, [r3, #4]
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030218 	.word	0x00030218

000d6c68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <HAL_Delay_Microseconds+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	68db      	ldr	r3, [r3, #12]
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030218 	.word	0x00030218

000d6c78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	695b      	ldr	r3, [r3, #20]
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030218 	.word	0x00030218

000d6c88 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <HAL_RTC_Get_UnixTime+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	69db      	ldr	r3, [r3, #28]
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030218 	.word	0x00030218

000d6c98 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_RTC_Time_Is_Valid+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030218 	.word	0x00030218

000d6ca8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <os_thread_is_current+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	689b      	ldr	r3, [r3, #8]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030248 	.word	0x00030248

000d6cb8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <os_thread_join+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	691b      	ldr	r3, [r3, #16]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030248 	.word	0x00030248

000d6cc8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <os_thread_cleanup+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	695b      	ldr	r3, [r3, #20]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030248 	.word	0x00030248

000d6cd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <os_mutex_recursive_create+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	00030248 	.word	0x00030248

000d6ce8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <os_mutex_recursive_destroy+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	00030248 	.word	0x00030248

000d6cf8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <inet_inet_ntop+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	695b      	ldr	r3, [r3, #20]
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	00030264 	.word	0x00030264

000d6d08 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <inet_htonl+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	6a1b      	ldr	r3, [r3, #32]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030264 	.word	0x00030264

000d6d18 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <inet_htons+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	00030264 	.word	0x00030264

000d6d28 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_USART_Init+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	681b      	ldr	r3, [r3, #0]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003023c 	.word	0x0003023c

000d6d38 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_USART_Write_Data+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	68db      	ldr	r3, [r3, #12]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003023c 	.word	0x0003023c

000d6d48 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_USART_Available_Data+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	691b      	ldr	r3, [r3, #16]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003023c 	.word	0x0003023c

000d6d58 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_USART_Read_Data+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	695b      	ldr	r3, [r3, #20]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	0003023c 	.word	0x0003023c

000d6d68 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_USART_Peek_Data+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	699b      	ldr	r3, [r3, #24]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	0003023c 	.word	0x0003023c

000d6d78 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <HAL_USART_Flush_Data+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	69db      	ldr	r3, [r3, #28]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	0003023c 	.word	0x0003023c

000d6d88 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <HAL_USART_Is_Enabled+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	6a1b      	ldr	r3, [r3, #32]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	0003023c 	.word	0x0003023c

000d6d98 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <HAL_USART_Available_Data_For_Write+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	0003023c 	.word	0x0003023c

000d6da8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <HAL_I2C_Begin+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	68db      	ldr	r3, [r3, #12]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030228 	.word	0x00030228

000d6db8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <HAL_I2C_Begin_Transmission+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	699b      	ldr	r3, [r3, #24]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030228 	.word	0x00030228

000d6dc8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <HAL_I2C_End_Transmission+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	69db      	ldr	r3, [r3, #28]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030228 	.word	0x00030228

000d6dd8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <HAL_I2C_Write_Data+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6a1b      	ldr	r3, [r3, #32]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030228 	.word	0x00030228

000d6de8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <HAL_I2C_Available_Data+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030228 	.word	0x00030228

000d6df8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <HAL_I2C_Read_Data+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030228 	.word	0x00030228

000d6e08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <HAL_I2C_Peek_Data+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030228 	.word	0x00030228

000d6e18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <HAL_I2C_Flush_Data+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030228 	.word	0x00030228

000d6e28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <HAL_I2C_Is_Enabled+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030228 	.word	0x00030228

000d6e38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <HAL_I2C_Init+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030228 	.word	0x00030228

000d6e48 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <HAL_I2C_Request_Data_Ex+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030228 	.word	0x00030228

000d6e58 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <sock_setsockopt+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	699b      	ldr	r3, [r3, #24]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030238 	.word	0x00030238

000d6e68 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <sock_close+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	69db      	ldr	r3, [r3, #28]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030238 	.word	0x00030238

000d6e78 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <sock_connect+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6a1b      	ldr	r3, [r3, #32]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030238 	.word	0x00030238

000d6e88 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <sock_recv+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030238 	.word	0x00030238

000d6e98 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <sock_send+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030238 	.word	0x00030238

000d6ea8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <sock_socket+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030238 	.word	0x00030238

000d6eb8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <HAL_USB_USART_Init+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	681b      	ldr	r3, [r3, #0]
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	0003024c 	.word	0x0003024c

000d6ec8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <HAL_USB_USART_Begin+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	685b      	ldr	r3, [r3, #4]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	0003024c 	.word	0x0003024c

000d6ed8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <HAL_USB_USART_Available_Data+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	691b      	ldr	r3, [r3, #16]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	0003024c 	.word	0x0003024c

000d6ee8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	695b      	ldr	r3, [r3, #20]
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	0003024c 	.word	0x0003024c

000d6ef8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <HAL_USB_USART_Receive_Data+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	699b      	ldr	r3, [r3, #24]
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	0003024c 	.word	0x0003024c

000d6f08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <HAL_USB_USART_Send_Data+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	69db      	ldr	r3, [r3, #28]
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	0003024c 	.word	0x0003024c

000d6f18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <HAL_USB_USART_Flush_Data+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6a1b      	ldr	r3, [r3, #32]
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	0003024c 	.word	0x0003024c

000d6f28 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <panic_+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	00030260 	.word	0x00030260

000d6f38 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	4b02      	ldr	r3, [pc, #8]	; (d6f44 <log_message+0xc>)
   d6f3c:	681b      	ldr	r3, [r3, #0]
   d6f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6f40:	9301      	str	r3, [sp, #4]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	00030260 	.word	0x00030260

000d6f48 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6f48:	b508      	push	{r3, lr}
   d6f4a:	4b02      	ldr	r3, [pc, #8]	; (d6f54 <system_mode+0xc>)
   d6f4c:	681b      	ldr	r3, [r3, #0]
   d6f4e:	681b      	ldr	r3, [r3, #0]
   d6f50:	9301      	str	r3, [sp, #4]
   d6f52:	bd08      	pop	{r3, pc}
   d6f54:	00030220 	.word	0x00030220

000d6f58 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <set_system_mode+0xc>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	685b      	ldr	r3, [r3, #4]
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	bd08      	pop	{r3, pc}
   d6f64:	00030220 	.word	0x00030220

000d6f68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6f68:	b508      	push	{r3, lr}
   d6f6a:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <system_delay_ms+0xc>)
   d6f6c:	681b      	ldr	r3, [r3, #0]
   d6f6e:	695b      	ldr	r3, [r3, #20]
   d6f70:	9301      	str	r3, [sp, #4]
   d6f72:	bd08      	pop	{r3, pc}
   d6f74:	00030220 	.word	0x00030220

000d6f78 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6f78:	b508      	push	{r3, lr}
   d6f7a:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <application_thread_current+0xc>)
   d6f7c:	681b      	ldr	r3, [r3, #0]
   d6f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6f80:	9301      	str	r3, [sp, #4]
   d6f82:	bd08      	pop	{r3, pc}
   d6f84:	00030220 	.word	0x00030220

000d6f88 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6f88:	b508      	push	{r3, lr}
   d6f8a:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <application_thread_invoke+0xc>)
   d6f8c:	681b      	ldr	r3, [r3, #0]
   d6f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6f90:	9301      	str	r3, [sp, #4]
   d6f92:	bd08      	pop	{r3, pc}
   d6f94:	00030220 	.word	0x00030220

000d6f98 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6f98:	b508      	push	{r3, lr}
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <system_thread_get_state+0xc>)
   d6f9c:	681b      	ldr	r3, [r3, #0]
   d6f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	bd08      	pop	{r3, pc}
   d6fa4:	00030220 	.word	0x00030220

000d6fa8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6fa8:	b508      	push	{r3, lr}
   d6faa:	4b03      	ldr	r3, [pc, #12]	; (d6fb8 <system_ctrl_set_app_request_handler+0x10>)
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6fb2:	9301      	str	r3, [sp, #4]
   d6fb4:	bd08      	pop	{r3, pc}
   d6fb6:	0000      	.short	0x0000
   d6fb8:	00030220 	.word	0x00030220

000d6fbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b03      	ldr	r3, [pc, #12]	; (d6fcc <system_ctrl_set_result+0x10>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6fc6:	9301      	str	r3, [sp, #4]
   d6fc8:	bd08      	pop	{r3, pc}
   d6fca:	0000      	.short	0x0000
   d6fcc:	00030220 	.word	0x00030220

000d6fd0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <network_connect+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	685b      	ldr	r3, [r3, #4]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	00030240 	.word	0x00030240

000d6fe0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <network_connecting+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	689b      	ldr	r3, [r3, #8]
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	00030240 	.word	0x00030240

000d6ff0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <network_disconnect+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	68db      	ldr	r3, [r3, #12]
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	00030240 	.word	0x00030240

000d7000 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <network_ready+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	691b      	ldr	r3, [r3, #16]
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	00030240 	.word	0x00030240

000d7010 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <network_on+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	695b      	ldr	r3, [r3, #20]
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	00030240 	.word	0x00030240

000d7020 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <network_off+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	699b      	ldr	r3, [r3, #24]
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	00030240 	.word	0x00030240

000d7030 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b02      	ldr	r3, [pc, #8]	; (d703c <network_listen+0xc>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	69db      	ldr	r3, [r3, #28]
   d7038:	9301      	str	r3, [sp, #4]
   d703a:	bd08      	pop	{r3, pc}
   d703c:	00030240 	.word	0x00030240

000d7040 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7040:	b508      	push	{r3, lr}
   d7042:	4b02      	ldr	r3, [pc, #8]	; (d704c <network_listening+0xc>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	6a1b      	ldr	r3, [r3, #32]
   d7048:	9301      	str	r3, [sp, #4]
   d704a:	bd08      	pop	{r3, pc}
   d704c:	00030240 	.word	0x00030240

000d7050 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b02      	ldr	r3, [pc, #8]	; (d705c <network_set_listen_timeout+0xc>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7058:	9301      	str	r3, [sp, #4]
   d705a:	bd08      	pop	{r3, pc}
   d705c:	00030240 	.word	0x00030240

000d7060 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7060:	b508      	push	{r3, lr}
   d7062:	4b02      	ldr	r3, [pc, #8]	; (d706c <network_get_listen_timeout+0xc>)
   d7064:	681b      	ldr	r3, [r3, #0]
   d7066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7068:	9301      	str	r3, [sp, #4]
   d706a:	bd08      	pop	{r3, pc}
   d706c:	00030240 	.word	0x00030240

000d7070 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7070:	b508      	push	{r3, lr}
   d7072:	4b02      	ldr	r3, [pc, #8]	; (d707c <spark_variable+0xc>)
   d7074:	681b      	ldr	r3, [r3, #0]
   d7076:	681b      	ldr	r3, [r3, #0]
   d7078:	9301      	str	r3, [sp, #4]
   d707a:	bd08      	pop	{r3, pc}
   d707c:	00030244 	.word	0x00030244

000d7080 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7080:	b508      	push	{r3, lr}
   d7082:	4b02      	ldr	r3, [pc, #8]	; (d708c <spark_process+0xc>)
   d7084:	681b      	ldr	r3, [r3, #0]
   d7086:	689b      	ldr	r3, [r3, #8]
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	bd08      	pop	{r3, pc}
   d708c:	00030244 	.word	0x00030244

000d7090 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7090:	b508      	push	{r3, lr}
   d7092:	4b02      	ldr	r3, [pc, #8]	; (d709c <spark_cloud_flag_connected+0xc>)
   d7094:	681b      	ldr	r3, [r3, #0]
   d7096:	695b      	ldr	r3, [r3, #20]
   d7098:	9301      	str	r3, [sp, #4]
   d709a:	bd08      	pop	{r3, pc}
   d709c:	00030244 	.word	0x00030244

000d70a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d70a0:	b508      	push	{r3, lr}
   d70a2:	4b02      	ldr	r3, [pc, #8]	; (d70ac <spark_send_event+0xc>)
   d70a4:	681b      	ldr	r3, [r3, #0]
   d70a6:	6a1b      	ldr	r3, [r3, #32]
   d70a8:	9301      	str	r3, [sp, #4]
   d70aa:	bd08      	pop	{r3, pc}
   d70ac:	00030244 	.word	0x00030244

000d70b0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d70b0:	b508      	push	{r3, lr}
   d70b2:	4b02      	ldr	r3, [pc, #8]	; (d70bc <spark_sync_time+0xc>)
   d70b4:	681b      	ldr	r3, [r3, #0]
   d70b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70b8:	9301      	str	r3, [sp, #4]
   d70ba:	bd08      	pop	{r3, pc}
   d70bc:	00030244 	.word	0x00030244

000d70c0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d70c0:	b508      	push	{r3, lr}
   d70c2:	4b02      	ldr	r3, [pc, #8]	; (d70cc <spark_sync_time_pending+0xc>)
   d70c4:	681b      	ldr	r3, [r3, #0]
   d70c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d70c8:	9301      	str	r3, [sp, #4]
   d70ca:	bd08      	pop	{r3, pc}
   d70cc:	00030244 	.word	0x00030244

000d70d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d70d0:	b508      	push	{r3, lr}
   d70d2:	4b02      	ldr	r3, [pc, #8]	; (d70dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d70d4:	681b      	ldr	r3, [r3, #0]
   d70d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d70d8:	9301      	str	r3, [sp, #4]
   d70da:	bd08      	pop	{r3, pc}
   d70dc:	00030244 	.word	0x00030244

000d70e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d70e0:	b508      	push	{r3, lr}
   d70e2:	4b02      	ldr	r3, [pc, #8]	; (d70ec <malloc+0xc>)
   d70e4:	681b      	ldr	r3, [r3, #0]
   d70e6:	681b      	ldr	r3, [r3, #0]
   d70e8:	9301      	str	r3, [sp, #4]
   d70ea:	bd08      	pop	{r3, pc}
   d70ec:	0003021c 	.word	0x0003021c

000d70f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <free+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	685b      	ldr	r3, [r3, #4]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	0003021c 	.word	0x0003021c

000d7100 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <realloc+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	689b      	ldr	r3, [r3, #8]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	0003021c 	.word	0x0003021c

000d7110 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <sprintf+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	68db      	ldr	r3, [r3, #12]
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	0003021c 	.word	0x0003021c

000d7120 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <siprintf+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	691b      	ldr	r3, [r3, #16]
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	0003021c 	.word	0x0003021c

000d7130 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b02      	ldr	r3, [pc, #8]	; (d713c <siscanf+0xc>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	699b      	ldr	r3, [r3, #24]
   d7138:	9301      	str	r3, [sp, #4]
   d713a:	bd08      	pop	{r3, pc}
   d713c:	0003021c 	.word	0x0003021c

000d7140 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7140:	b508      	push	{r3, lr}
   d7142:	4b02      	ldr	r3, [pc, #8]	; (d714c <vsnprintf+0xc>)
   d7144:	681b      	ldr	r3, [r3, #0]
   d7146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7148:	9301      	str	r3, [sp, #4]
   d714a:	bd08      	pop	{r3, pc}
   d714c:	0003021c 	.word	0x0003021c

000d7150 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7150:	b508      	push	{r3, lr}
   d7152:	4b02      	ldr	r3, [pc, #8]	; (d715c <abort+0xc>)
   d7154:	681b      	ldr	r3, [r3, #0]
   d7156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7158:	9301      	str	r3, [sp, #4]
   d715a:	bd08      	pop	{r3, pc}
   d715c:	0003021c 	.word	0x0003021c

000d7160 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7160:	b508      	push	{r3, lr}
   d7162:	4b02      	ldr	r3, [pc, #8]	; (d716c <_malloc_r+0xc>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7168:	9301      	str	r3, [sp, #4]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	0003021c 	.word	0x0003021c

000d7170 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7170:	b508      	push	{r3, lr}
   d7172:	4b02      	ldr	r3, [pc, #8]	; (d717c <__errno+0xc>)
   d7174:	681b      	ldr	r3, [r3, #0]
   d7176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	bd08      	pop	{r3, pc}
   d717c:	0003021c 	.word	0x0003021c

000d7180 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7180:	2200      	movs	r2, #0
   d7182:	4611      	mov	r1, r2
   d7184:	6840      	ldr	r0, [r0, #4]
   d7186:	f7ff bf5b 	b.w	d7040 <network_listening>

000d718a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d718a:	2200      	movs	r2, #0
   d718c:	4611      	mov	r1, r2
   d718e:	6840      	ldr	r0, [r0, #4]
   d7190:	f7ff bf66 	b.w	d7060 <network_get_listen_timeout>

000d7194 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7194:	2200      	movs	r2, #0
   d7196:	6840      	ldr	r0, [r0, #4]
   d7198:	f7ff bf5a 	b.w	d7050 <network_set_listen_timeout>

000d719c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d719c:	2200      	movs	r2, #0
   d719e:	f081 0101 	eor.w	r1, r1, #1
   d71a2:	6840      	ldr	r0, [r0, #4]
   d71a4:	f7ff bf44 	b.w	d7030 <network_listen>

000d71a8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d71a8:	2300      	movs	r3, #0
   d71aa:	461a      	mov	r2, r3
   d71ac:	4619      	mov	r1, r3
   d71ae:	6840      	ldr	r0, [r0, #4]
   d71b0:	f7ff bf36 	b.w	d7020 <network_off>

000d71b4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d71b4:	2300      	movs	r3, #0
   d71b6:	461a      	mov	r2, r3
   d71b8:	4619      	mov	r1, r3
   d71ba:	6840      	ldr	r0, [r0, #4]
   d71bc:	f7ff bf28 	b.w	d7010 <network_on>

000d71c0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d71c0:	2200      	movs	r2, #0
   d71c2:	4611      	mov	r1, r2
   d71c4:	6840      	ldr	r0, [r0, #4]
   d71c6:	f7ff bf1b 	b.w	d7000 <network_ready>

000d71ca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d71ca:	2200      	movs	r2, #0
   d71cc:	4611      	mov	r1, r2
   d71ce:	6840      	ldr	r0, [r0, #4]
   d71d0:	f7ff bf06 	b.w	d6fe0 <network_connecting>

000d71d4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71d4:	2200      	movs	r2, #0
   d71d6:	2102      	movs	r1, #2
   d71d8:	6840      	ldr	r0, [r0, #4]
   d71da:	f7ff bf09 	b.w	d6ff0 <network_disconnect>

000d71de <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d71de:	2300      	movs	r3, #0
   d71e0:	461a      	mov	r2, r3
   d71e2:	6840      	ldr	r0, [r0, #4]
   d71e4:	f7ff bef4 	b.w	d6fd0 <network_connect>

000d71e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d71e8:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d71ea:	2203      	movs	r2, #3
   d71ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d71ee:	4a02      	ldr	r2, [pc, #8]	; (d71f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d71f0:	601a      	str	r2, [r3, #0]
   d71f2:	4770      	bx	lr
   d71f4:	2003e3b0 	.word	0x2003e3b0
   d71f8:	000dd0fc 	.word	0x000dd0fc

000d71fc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d71fc:	2100      	movs	r1, #0
   d71fe:	f7ff bd13 	b.w	d6c28 <HAL_SPI_Acquire>

000d7202 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7202:	2100      	movs	r1, #0
   d7204:	f7ff bd18 	b.w	d6c38 <HAL_SPI_Release>

000d7208 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7208:	b510      	push	{r4, lr}
   d720a:	4604      	mov	r4, r0
{
    _spi = spi;
   d720c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d720e:	4608      	mov	r0, r1
   d7210:	f7ff fcea 	bl	d6be8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7214:	2300      	movs	r3, #0
   d7216:	6063      	str	r3, [r4, #4]
}
   d7218:	4620      	mov	r0, r4
   d721a:	bd10      	pop	{r4, pc}

000d721c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d721c:	b510      	push	{r4, lr}
   d721e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7220:	7800      	ldrb	r0, [r0, #0]
   d7222:	f7ff ffeb 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d7226:	b948      	cbnz	r0, d723c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7228:	7820      	ldrb	r0, [r4, #0]
   d722a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d722e:	f7ff fcb3 	bl	d6b98 <HAL_SPI_Begin>
        unlock();
   d7232:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7238:	f7ff bfe3 	b.w	d7202 <_ZN8SPIClass6unlockEv.isra.1>
   d723c:	bd10      	pop	{r4, pc}

000d723e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d723e:	b538      	push	{r3, r4, r5, lr}
   d7240:	4604      	mov	r4, r0
    if (!lock())
   d7242:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7244:	460d      	mov	r5, r1
    if (!lock())
   d7246:	f7ff ffd9 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d724a:	b940      	cbnz	r0, d725e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d724c:	7820      	ldrb	r0, [r4, #0]
   d724e:	4629      	mov	r1, r5
   d7250:	f7ff fcaa 	bl	d6ba8 <HAL_SPI_Set_Bit_Order>
        unlock();
   d7254:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d725a:	f7ff bfd2 	b.w	d7202 <_ZN8SPIClass6unlockEv.isra.1>
   d725e:	bd38      	pop	{r3, r4, r5, pc}

000d7260 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7260:	b538      	push	{r3, r4, r5, lr}
   d7262:	4604      	mov	r4, r0
    if (!lock())
   d7264:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7266:	460d      	mov	r5, r1
    if (!lock())
   d7268:	f7ff ffc8 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d726c:	b940      	cbnz	r0, d7280 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d726e:	7820      	ldrb	r0, [r4, #0]
   d7270:	4629      	mov	r1, r5
   d7272:	f7ff fca1 	bl	d6bb8 <HAL_SPI_Set_Data_Mode>
        unlock();
   d7276:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d727c:	f7ff bfc1 	b.w	d7202 <_ZN8SPIClass6unlockEv.isra.1>
   d7280:	bd38      	pop	{r3, r4, r5, pc}

000d7282 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7282:	7800      	ldrb	r0, [r0, #0]
   d7284:	f7ff bfbd 	b.w	d7202 <_ZN8SPIClass6unlockEv.isra.1>

000d7288 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7288:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d728a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d728c:	6018      	str	r0, [r3, #0]
   d728e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7290:	6818      	ldr	r0, [r3, #0]
   d7292:	4288      	cmp	r0, r1
   d7294:	b2e5      	uxtb	r5, r4
   d7296:	d906      	bls.n	d72a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7298:	3401      	adds	r4, #1
   d729a:	2c08      	cmp	r4, #8
   d729c:	d002      	beq.n	d72a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d729e:	0840      	lsrs	r0, r0, #1
   d72a0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d72a2:	e7f5      	b.n	d7290 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d72a4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d72a8:	5d5b      	ldrb	r3, [r3, r5]
   d72aa:	7013      	strb	r3, [r2, #0]
   d72ac:	bd30      	pop	{r4, r5, pc}
   d72ae:	bf00      	nop
   d72b0:	000dd128 	.word	0x000dd128

000d72b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d72b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72b8:	4607      	mov	r7, r0
   d72ba:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d72bc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d72be:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d72c0:	f7ff ff9c 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d72c4:	2800      	cmp	r0, #0
   d72c6:	db62      	blt.n	d738e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d72c8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d72ca:	2214      	movs	r2, #20
   d72cc:	2100      	movs	r1, #0
   d72ce:	a809      	add	r0, sp, #36	; 0x24
   d72d0:	f004 fc2c 	bl	dbb2c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d72d4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d72d6:	4620      	mov	r0, r4
   d72d8:	2200      	movs	r2, #0
   d72da:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d72dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d72e0:	f7ff fc92 	bl	d6c08 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d72e4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d72e8:	b154      	cbz	r4, d7300 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d72ea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d72ee:	b935      	cbnz	r5, d72fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d72f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d72f4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d72f8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d72fc:	e003      	b.n	d7306 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d72fe:	2400      	movs	r4, #0
   d7300:	46a1      	mov	r9, r4
   d7302:	46a0      	mov	r8, r4
   d7304:	2501      	movs	r5, #1
   d7306:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7308:	b105      	cbz	r5, d730c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d730a:	b9bb      	cbnz	r3, d733c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d730c:	429d      	cmp	r5, r3
   d730e:	d10b      	bne.n	d7328 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7310:	68b2      	ldr	r2, [r6, #8]
   d7312:	4542      	cmp	r2, r8
   d7314:	d108      	bne.n	d7328 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7316:	f88d 9020 	strb.w	r9, [sp, #32]
   d731a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d731e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7322:	89b2      	ldrh	r2, [r6, #12]
   d7324:	4291      	cmp	r1, r2
   d7326:	d009      	beq.n	d733c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7328:	b153      	cbz	r3, d7340 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d732a:	2400      	movs	r4, #0
   d732c:	7838      	ldrb	r0, [r7, #0]
   d732e:	9401      	str	r4, [sp, #4]
   d7330:	9400      	str	r4, [sp, #0]
   d7332:	4623      	mov	r3, r4
   d7334:	4622      	mov	r2, r4
   d7336:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7338:	f7ff fc6e 	bl	d6c18 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d733c:	2000      	movs	r0, #0
   d733e:	e026      	b.n	d738e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7340:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7344:	68b1      	ldr	r1, [r6, #8]
   d7346:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7348:	ab04      	add	r3, sp, #16
   d734a:	f10d 020f 	add.w	r2, sp, #15
   d734e:	f7ff ff9b 	bl	d7288 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7352:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7354:	b105      	cbz	r5, d7358 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d7356:	b9b1      	cbnz	r1, d7386 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7358:	42a9      	cmp	r1, r5
   d735a:	d008      	beq.n	d736e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d735c:	2400      	movs	r4, #0
   d735e:	7838      	ldrb	r0, [r7, #0]
   d7360:	9401      	str	r4, [sp, #4]
   d7362:	7b74      	ldrb	r4, [r6, #13]
   d7364:	7b33      	ldrb	r3, [r6, #12]
   d7366:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d736a:	9400      	str	r4, [sp, #0]
   d736c:	e7e4      	b.n	d7338 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d736e:	68b3      	ldr	r3, [r6, #8]
   d7370:	4543      	cmp	r3, r8
   d7372:	d3f3      	bcc.n	d735c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7374:	f88d 9020 	strb.w	r9, [sp, #32]
   d7378:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d737c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7380:	89b3      	ldrh	r3, [r6, #12]
   d7382:	429a      	cmp	r2, r3
   d7384:	d1ea      	bne.n	d735c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7386:	9b04      	ldr	r3, [sp, #16]
   d7388:	4543      	cmp	r3, r8
   d738a:	d1e7      	bne.n	d735c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d738c:	e7d6      	b.n	d733c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d738e:	b00f      	add	sp, #60	; 0x3c
   d7390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7394 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7398:	b088      	sub	sp, #32
    unsigned clock = 0;
   d739a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d739c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d739e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d73a0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d73a2:	460e      	mov	r6, r1
   d73a4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d73a6:	f7ff ff29 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d73aa:	4605      	mov	r5, r0
   d73ac:	bb00      	cbnz	r0, d73f0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d73ae:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d73b2:	4601      	mov	r1, r0
   d73b4:	2214      	movs	r2, #20
   d73b6:	a803      	add	r0, sp, #12
   d73b8:	f004 fbb8 	bl	dbb2c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d73bc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d73be:	462a      	mov	r2, r5
   d73c0:	a903      	add	r1, sp, #12
   d73c2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d73c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d73c8:	f7ff fc1e 	bl	d6c08 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d73cc:	ab02      	add	r3, sp, #8
   d73ce:	f10d 0207 	add.w	r2, sp, #7
   d73d2:	fb07 f106 	mul.w	r1, r7, r6
   d73d6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d73d8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d73dc:	f7ff ff54 	bl	d7288 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d73e0:	7820      	ldrb	r0, [r4, #0]
   d73e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d73e6:	f7ff fbef 	bl	d6bc8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d73ea:	7820      	ldrb	r0, [r4, #0]
   d73ec:	f7ff ff09 	bl	d7202 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d73f0:	9802      	ldr	r0, [sp, #8]
   d73f2:	b008      	add	sp, #32
   d73f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d73f8 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d73f8:	b538      	push	{r3, r4, r5, lr}
   d73fa:	4604      	mov	r4, r0
    if (!lock())
   d73fc:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d73fe:	460d      	mov	r5, r1
    if (!lock())
   d7400:	f7ff fefc 	bl	d71fc <_ZN8SPIClass4lockEv.isra.0>
   d7404:	b9c8      	cbnz	r0, d743a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7406:	6861      	ldr	r1, [r4, #4]
   d7408:	b171      	cbz	r1, d7428 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d740a:	4b0c      	ldr	r3, [pc, #48]	; (d743c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d740c:	5cc2      	ldrb	r2, [r0, r3]
   d740e:	42aa      	cmp	r2, r5
   d7410:	d002      	beq.n	d7418 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7412:	3001      	adds	r0, #1
   d7414:	2808      	cmp	r0, #8
   d7416:	d1f9      	bne.n	d740c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7418:	3001      	adds	r0, #1
   d741a:	b2c0      	uxtb	r0, r0
   d741c:	40c1      	lsrs	r1, r0
   d741e:	2201      	movs	r2, #1
   d7420:	4620      	mov	r0, r4
   d7422:	f7ff ffb7 	bl	d7394 <_ZN8SPIClass13setClockSpeedEjj>
   d7426:	e003      	b.n	d7430 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7428:	4629      	mov	r1, r5
   d742a:	7820      	ldrb	r0, [r4, #0]
   d742c:	f7ff fbcc 	bl	d6bc8 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7430:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7436:	f7ff bee4 	b.w	d7202 <_ZN8SPIClass6unlockEv.isra.1>
   d743a:	bd38      	pop	{r3, r4, r5, pc}
   d743c:	000dd128 	.word	0x000dd128

000d7440 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7440:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7442:	7800      	ldrb	r0, [r0, #0]
   d7444:	f7ff fbc8 	bl	d6bd8 <HAL_SPI_Send_Receive_Data>
}
   d7448:	b2c0      	uxtb	r0, r0
   d744a:	bd08      	pop	{r3, pc}

000d744c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d744c:	7800      	ldrb	r0, [r0, #0]
   d744e:	f7ff bbd3 	b.w	d6bf8 <HAL_SPI_Is_Enabled>

000d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7452:	b510      	push	{r4, lr}
   d7454:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7456:	6800      	ldr	r0, [r0, #0]
   d7458:	b118      	cbz	r0, d7462 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d745a:	f7ff fe49 	bl	d70f0 <free>
            wakeupSource_ = nullptr;
   d745e:	2300      	movs	r3, #0
   d7460:	6023      	str	r3, [r4, #0]
   d7462:	bd10      	pop	{r4, pc}

000d7464 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7464:	b510      	push	{r4, lr}
   d7466:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7468:	f7ff fff3 	bl	d7452 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d746c:	4620      	mov	r0, r4
   d746e:	bd10      	pop	{r4, pc}

000d7470 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7470:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7472:	4c09      	ldr	r4, [pc, #36]	; (d7498 <_GLOBAL__sub_I_System+0x28>)
   d7474:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7476:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d747a:	6020      	str	r0, [r4, #0]
   d747c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d747e:	71a0      	strb	r0, [r4, #6]
   d7480:	8120      	strh	r0, [r4, #8]
   d7482:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7484:	f7ff fd68 	bl	d6f58 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7488:	4620      	mov	r0, r4
   d748a:	4a04      	ldr	r2, [pc, #16]	; (d749c <_GLOBAL__sub_I_System+0x2c>)
   d748c:	4904      	ldr	r1, [pc, #16]	; (d74a0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7492:	f001 bf19 	b.w	d92c8 <__aeabi_atexit>
   d7496:	bf00      	nop
   d7498:	2003e3b8 	.word	0x2003e3b8
   d749c:	2003e148 	.word	0x2003e148
   d74a0:	000d7465 	.word	0x000d7465

000d74a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d74a4:	b510      	push	{r4, lr}
   d74a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d74a8:	f004 fb9d 	bl	dbbe6 <strlen>
   d74ac:	3801      	subs	r0, #1
   d74ae:	1823      	adds	r3, r4, r0
   d74b0:	4620      	mov	r0, r4
	while(i<j){
   d74b2:	4298      	cmp	r0, r3
   d74b4:	d206      	bcs.n	d74c4 <_Z11str_reversePc+0x20>
		c = *i;
   d74b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d74b8:	7819      	ldrb	r1, [r3, #0]
   d74ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d74be:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d74c2:	e7f6      	b.n	d74b2 <_Z11str_reversePc+0xe>
   d74c4:	bd10      	pop	{r4, pc}

000d74c6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d74c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d74ca:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d74cc:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d74ce:	4615      	mov	r5, r2
   d74d0:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d74d2:	bf34      	ite	cc
   d74d4:	4615      	movcc	r5, r2
   d74d6:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d74d8:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d74da:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d74dc:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d74de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d74e2:	d107      	bne.n	d74f4 <ltoa+0x2e>
   d74e4:	4298      	cmp	r0, r3
   d74e6:	da05      	bge.n	d74f4 <ltoa+0x2e>
      {
            *head++ = '-';
   d74e8:	232d      	movs	r3, #45	; 0x2d
   d74ea:	f101 0801 	add.w	r8, r1, #1
   d74ee:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d74f0:	4240      	negs	r0, r0
   d74f2:	e001      	b.n	d74f8 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d74f4:	b1b0      	cbz	r0, d7524 <ltoa+0x5e>
   d74f6:	46a0      	mov	r8, r4
   d74f8:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d74fc:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d74fe:	462a      	mov	r2, r5
   d7500:	4601      	mov	r1, r0
   d7502:	a801      	add	r0, sp, #4
   d7504:	f004 fad8 	bl	dbab8 <ldiv>
   d7508:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d750a:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d750c:	2b09      	cmp	r3, #9
   d750e:	bfcc      	ite	gt
   d7510:	2237      	movgt	r2, #55	; 0x37
   d7512:	2230      	movle	r2, #48	; 0x30
   d7514:	fa52 f383 	uxtab	r3, r2, r3
   d7518:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d751c:	3701      	adds	r7, #1
   d751e:	2800      	cmp	r0, #0
   d7520:	d1ed      	bne.n	d74fe <ltoa+0x38>
   d7522:	e006      	b.n	d7532 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d7524:	2330      	movs	r3, #48	; 0x30
   d7526:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d752a:	46a0      	mov	r8, r4
   d752c:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d7530:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d7532:	463a      	mov	r2, r7
   d7534:	1c71      	adds	r1, r6, #1
   d7536:	4640      	mov	r0, r8
   d7538:	f004 fad2 	bl	dbae0 <memcpy>
      return str;
}
   d753c:	4620      	mov	r0, r4
   d753e:	b00c      	add	sp, #48	; 0x30
   d7540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7544 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7544:	b570      	push	{r4, r5, r6, lr}
   d7546:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7548:	1e91      	subs	r1, r2, #2
   d754a:	2922      	cmp	r1, #34	; 0x22
   d754c:	d820      	bhi.n	d7590 <ultoa+0x4c>
   d754e:	4625      	mov	r5, r4
   d7550:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7552:	b910      	cbnz	r0, d755a <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7554:	4423      	add	r3, r4
            *ptr++ = '0';
   d7556:	2230      	movs	r2, #48	; 0x30
   d7558:	e00e      	b.n	d7578 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d755a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d755e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7562:	b2c1      	uxtb	r1, r0
   d7564:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d7568:	2809      	cmp	r0, #9
                *ptr += '0';
   d756a:	bf94      	ite	ls
   d756c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d756e:	3157      	addhi	r1, #87	; 0x57
   d7570:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d7574:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7576:	e7eb      	b.n	d7550 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7578:	4299      	cmp	r1, r3
   d757a:	d202      	bcs.n	d7582 <ultoa+0x3e>
            *ptr++ = '0';
   d757c:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7580:	e7fa      	b.n	d7578 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d7582:	2300      	movs	r3, #0
	str_reverse(buffer);
   d7584:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d7586:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d7588:	f7ff ff8c 	bl	d74a4 <_Z11str_reversePc>
	return buffer;
   d758c:	4620      	mov	r0, r4
   d758e:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d7590:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d7592:	bd70      	pop	{r4, r5, r6, pc}

000d7594 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7594:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d7596:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7598:	460c      	mov	r4, r1
   d759a:	4615      	mov	r5, r2
	if(a<0){
   d759c:	da0b      	bge.n	d75b6 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d759e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d75a2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d75a6:	bf14      	ite	ne
   d75a8:	4258      	negne	r0, r3
   d75aa:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d75ac:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d75ae:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d75b0:	462a      	mov	r2, r5
   d75b2:	4419      	add	r1, r3
   d75b4:	e000      	b.n	d75b8 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d75b6:	2301      	movs	r3, #1
   d75b8:	f7ff ffc4 	bl	d7544 <ultoa>
	}
	return buffer;
}
   d75bc:	4620      	mov	r0, r4
   d75be:	bd38      	pop	{r3, r4, r5, pc}

000d75c0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d75c0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75c4:	ec59 8b10 	vmov	r8, r9, d0
   d75c8:	4607      	mov	r7, r0
   d75ca:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d75cc:	2200      	movs	r2, #0
   d75ce:	2300      	movs	r3, #0
   d75d0:	ee10 0a10 	vmov	r0, s0
   d75d4:	4649      	mov	r1, r9
   d75d6:	f003 fd45 	bl	db064 <__aeabi_dcmplt>
   d75da:	b128      	cbz	r0, d75e8 <_Z4dtoadhPc+0x28>
        val = -val;
   d75dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d75e0:	4699      	mov	r9, r3
        *sout++ = '-';
   d75e2:	232d      	movs	r3, #45	; 0x2d
   d75e4:	7033      	strb	r3, [r6, #0]
   d75e6:	3601      	adds	r6, #1
   d75e8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d75ea:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d75ec:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d75ee:	b2d9      	uxtb	r1, r3
   d75f0:	428f      	cmp	r7, r1
   d75f2:	d902      	bls.n	d75fa <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d75f4:	4354      	muls	r4, r2
   d75f6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d75f8:	e7f9      	b.n	d75ee <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d75fa:	4620      	mov	r0, r4
   d75fc:	f003 fa5a 	bl	daab4 <__aeabi_i2d>
   d7600:	4642      	mov	r2, r8
   d7602:	464b      	mov	r3, r9
   d7604:	f003 fabc 	bl	dab80 <__aeabi_dmul>
   d7608:	4682      	mov	sl, r0
   d760a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d760c:	f003 ff76 	bl	db4fc <__aeabi_d2ulz>
   d7610:	4680      	mov	r8, r0
   d7612:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7614:	f003 fa7e 	bl	dab14 <__aeabi_ul2d>
   d7618:	4602      	mov	r2, r0
   d761a:	460b      	mov	r3, r1
   d761c:	4650      	mov	r0, sl
   d761e:	4659      	mov	r1, fp
   d7620:	f003 f8fa 	bl	da818 <__aeabi_dsub>
   d7624:	2200      	movs	r2, #0
   d7626:	4b17      	ldr	r3, [pc, #92]	; (d7684 <_Z4dtoadhPc+0xc4>)
   d7628:	f003 fd30 	bl	db08c <__aeabi_dcmpge>
   d762c:	b118      	cbz	r0, d7636 <_Z4dtoadhPc+0x76>
        fixed++;
   d762e:	f118 0801 	adds.w	r8, r8, #1
   d7632:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d7636:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d7638:	4622      	mov	r2, r4
   d763a:	462b      	mov	r3, r5
   d763c:	4640      	mov	r0, r8
   d763e:	4649      	mov	r1, r9
   d7640:	f003 ff44 	bl	db4cc <__aeabi_uldivmod>
   d7644:	2301      	movs	r3, #1
   d7646:	220a      	movs	r2, #10
   d7648:	4631      	mov	r1, r6
   d764a:	f7ff ff7b 	bl	d7544 <ultoa>
    if (prec) {
   d764e:	b1af      	cbz	r7, d767c <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d7650:	4630      	mov	r0, r6
   d7652:	f004 fac8 	bl	dbbe6 <strlen>
        *sout++ = '.';
   d7656:	232e      	movs	r3, #46	; 0x2e
   d7658:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d765a:	3001      	adds	r0, #1
   d765c:	4406      	add	r6, r0
   d765e:	4622      	mov	r2, r4
   d7660:	462b      	mov	r3, r5
   d7662:	4640      	mov	r0, r8
   d7664:	4649      	mov	r1, r9
   d7666:	f003 ff31 	bl	db4cc <__aeabi_uldivmod>
   d766a:	463b      	mov	r3, r7
   d766c:	4610      	mov	r0, r2
   d766e:	4631      	mov	r1, r6
   d7670:	220a      	movs	r2, #10
    }
}
   d7672:	b001      	add	sp, #4
   d7674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d7678:	f7ff bf64 	b.w	d7544 <ultoa>
    }
}
   d767c:	b001      	add	sp, #4
   d767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7682:	bf00      	nop
   d7684:	3fe00000 	.word	0x3fe00000

000d7688 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7688:	b510      	push	{r4, lr}
   d768a:	4604      	mov	r4, r0
{
	free(buffer);
   d768c:	6800      	ldr	r0, [r0, #0]
   d768e:	f7ff fd2f 	bl	d70f0 <free>
}
   d7692:	4620      	mov	r0, r4
   d7694:	bd10      	pop	{r4, pc}

000d7696 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7696:	b510      	push	{r4, lr}
   d7698:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d769a:	6800      	ldr	r0, [r0, #0]
   d769c:	b108      	cbz	r0, d76a2 <_ZN6String10invalidateEv+0xc>
   d769e:	f7ff fd27 	bl	d70f0 <free>
	buffer = NULL;
   d76a2:	2300      	movs	r3, #0
   d76a4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d76a6:	60a3      	str	r3, [r4, #8]
   d76a8:	6063      	str	r3, [r4, #4]
   d76aa:	bd10      	pop	{r4, pc}

000d76ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d76ac:	b538      	push	{r3, r4, r5, lr}
   d76ae:	4604      	mov	r4, r0
   d76b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d76b2:	6800      	ldr	r0, [r0, #0]
   d76b4:	3101      	adds	r1, #1
   d76b6:	f7ff fd23 	bl	d7100 <realloc>
	if (newbuffer) {
   d76ba:	b110      	cbz	r0, d76c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d76bc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d76c0:	2001      	movs	r0, #1
	}
	return 0;
}
   d76c2:	bd38      	pop	{r3, r4, r5, pc}

000d76c4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d76c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d76c6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d76c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d76ca:	b113      	cbz	r3, d76d2 <_ZN6String7reserveEj+0xe>
   d76cc:	6843      	ldr	r3, [r0, #4]
   d76ce:	428b      	cmp	r3, r1
   d76d0:	d207      	bcs.n	d76e2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d76d2:	4620      	mov	r0, r4
   d76d4:	f7ff ffea 	bl	d76ac <_ZN6String12changeBufferEj>
   d76d8:	b120      	cbz	r0, d76e4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d76da:	68a3      	ldr	r3, [r4, #8]
   d76dc:	b90b      	cbnz	r3, d76e2 <_ZN6String7reserveEj+0x1e>
   d76de:	6822      	ldr	r2, [r4, #0]
   d76e0:	7013      	strb	r3, [r2, #0]
   d76e2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d76e4:	bd10      	pop	{r4, pc}

000d76e6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d76e6:	b570      	push	{r4, r5, r6, lr}
   d76e8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d76ea:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d76ec:	4604      	mov	r4, r0
   d76ee:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d76f0:	f7ff ffe8 	bl	d76c4 <_ZN6String7reserveEj>
   d76f4:	b918      	cbnz	r0, d76fe <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d76f6:	4620      	mov	r0, r4
   d76f8:	f7ff ffcd 	bl	d7696 <_ZN6String10invalidateEv>
		return *this;
   d76fc:	e009      	b.n	d7712 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d76fe:	462a      	mov	r2, r5
   d7700:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7702:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7704:	6820      	ldr	r0, [r4, #0]
   d7706:	f004 f9eb 	bl	dbae0 <memcpy>
	buffer[len] = 0;
   d770a:	6822      	ldr	r2, [r4, #0]
   d770c:	68a3      	ldr	r3, [r4, #8]
   d770e:	2100      	movs	r1, #0
   d7710:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7712:	4620      	mov	r0, r4
   d7714:	bd70      	pop	{r4, r5, r6, pc}

000d7716 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7716:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7718:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d771a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d771c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d771e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7720:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7722:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7724:	460d      	mov	r5, r1
   d7726:	b139      	cbz	r1, d7738 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7728:	4608      	mov	r0, r1
   d772a:	f004 fa5c 	bl	dbbe6 <strlen>
   d772e:	4629      	mov	r1, r5
   d7730:	4602      	mov	r2, r0
   d7732:	4620      	mov	r0, r4
   d7734:	f7ff ffd7 	bl	d76e6 <_ZN6String4copyEPKcj>
}
   d7738:	4620      	mov	r0, r4
   d773a:	bd38      	pop	{r3, r4, r5, pc}

000d773c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d773c:	b538      	push	{r3, r4, r5, lr}
   d773e:	4605      	mov	r5, r0
	if (buffer) {
   d7740:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7742:	460c      	mov	r4, r1
	if (buffer) {
   d7744:	b160      	cbz	r0, d7760 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7746:	686a      	ldr	r2, [r5, #4]
   d7748:	688b      	ldr	r3, [r1, #8]
   d774a:	429a      	cmp	r2, r3
   d774c:	d306      	bcc.n	d775c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d774e:	6809      	ldr	r1, [r1, #0]
   d7750:	f004 fa26 	bl	dbba0 <strcpy>
			len = rhs.len;
   d7754:	68a3      	ldr	r3, [r4, #8]
   d7756:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d7758:	2300      	movs	r3, #0
   d775a:	e00a      	b.n	d7772 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d775c:	f7ff fcc8 	bl	d70f0 <free>
		}
	}
	buffer = rhs.buffer;
   d7760:	6823      	ldr	r3, [r4, #0]
   d7762:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7764:	6863      	ldr	r3, [r4, #4]
   d7766:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7768:	68a3      	ldr	r3, [r4, #8]
   d776a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d776c:	2300      	movs	r3, #0
   d776e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d7770:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d7772:	60a3      	str	r3, [r4, #8]
   d7774:	bd38      	pop	{r3, r4, r5, pc}

000d7776 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7776:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d7778:	b510      	push	{r4, lr}
   d777a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d777c:	d001      	beq.n	d7782 <_ZN6StringaSEOS_+0xc>
   d777e:	f7ff ffdd 	bl	d773c <_ZN6String4moveERS_>
	return *this;
}
   d7782:	4620      	mov	r0, r4
   d7784:	bd10      	pop	{r4, pc}

000d7786 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7786:	b538      	push	{r3, r4, r5, lr}
   d7788:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d778a:	460c      	mov	r4, r1
   d778c:	b141      	cbz	r1, d77a0 <_ZN6StringaSEPKc+0x1a>
   d778e:	4608      	mov	r0, r1
   d7790:	f004 fa29 	bl	dbbe6 <strlen>
   d7794:	4621      	mov	r1, r4
   d7796:	4602      	mov	r2, r0
   d7798:	4628      	mov	r0, r5
   d779a:	f7ff ffa4 	bl	d76e6 <_ZN6String4copyEPKcj>
   d779e:	e001      	b.n	d77a4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d77a0:	f7ff ff79 	bl	d7696 <_ZN6String10invalidateEv>

	return *this;
}
   d77a4:	4628      	mov	r0, r5
   d77a6:	bd38      	pop	{r3, r4, r5, pc}

000d77a8 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d77a8:	b510      	push	{r4, lr}
   d77aa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77ac:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d77ae:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77b0:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d77b2:	6063      	str	r3, [r4, #4]
	len = 0;
   d77b4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d77b6:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d77b8:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d77ba:	a901      	add	r1, sp, #4
   d77bc:	f7ff feea 	bl	d7594 <itoa>
	*this = buf;
   d77c0:	a901      	add	r1, sp, #4
   d77c2:	4620      	mov	r0, r4
   d77c4:	f7ff ffdf 	bl	d7786 <_ZN6StringaSEPKc>
}
   d77c8:	4620      	mov	r0, r4
   d77ca:	b00a      	add	sp, #40	; 0x28
   d77cc:	bd10      	pop	{r4, pc}

000d77ce <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d77ce:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77d0:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d77d2:	b08a      	sub	sp, #40	; 0x28
   d77d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d77d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d77da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77dc:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d77de:	b2c8      	uxtb	r0, r1
   d77e0:	a901      	add	r1, sp, #4
   d77e2:	f7ff feed 	bl	d75c0 <_Z4dtoadhPc>
        *this = buf;
   d77e6:	a901      	add	r1, sp, #4
   d77e8:	4620      	mov	r0, r4
   d77ea:	f7ff ffcc 	bl	d7786 <_ZN6StringaSEPKc>
}
   d77ee:	4620      	mov	r0, r4
   d77f0:	b00a      	add	sp, #40	; 0x28
   d77f2:	bd10      	pop	{r4, pc}

000d77f4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d77f4:	b570      	push	{r4, r5, r6, lr}
   d77f6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d77f8:	b19a      	cbz	r2, d7822 <_ZNK6String8getBytesEPhjj+0x2e>
   d77fa:	b191      	cbz	r1, d7822 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d77fc:	6885      	ldr	r5, [r0, #8]
   d77fe:	429d      	cmp	r5, r3
   d7800:	d802      	bhi.n	d7808 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7802:	2300      	movs	r3, #0
   d7804:	700b      	strb	r3, [r1, #0]
		return;
   d7806:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7808:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d780a:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d780c:	6801      	ldr	r1, [r0, #0]
   d780e:	42ac      	cmp	r4, r5
   d7810:	bf28      	it	cs
   d7812:	462c      	movcs	r4, r5
   d7814:	4419      	add	r1, r3
   d7816:	4622      	mov	r2, r4
   d7818:	4630      	mov	r0, r6
   d781a:	f004 fa26 	bl	dbc6a <strncpy>
	buf[n] = 0;
   d781e:	2300      	movs	r3, #0
   d7820:	5533      	strb	r3, [r6, r4]
   d7822:	bd70      	pop	{r4, r5, r6, pc}

000d7824 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d7826:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7828:	460f      	mov	r7, r1
   d782a:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d782c:	490c      	ldr	r1, [pc, #48]	; (d7860 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d782e:	bf88      	it	hi
   d7830:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7832:	4614      	mov	r4, r2
   d7834:	4606      	mov	r6, r0
	if (left > right) {
   d7836:	bf84      	itt	hi
   d7838:	462c      	movhi	r4, r5
   d783a:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d783c:	f7ff ff6b 	bl	d7716 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d7840:	68ba      	ldr	r2, [r7, #8]
   d7842:	4294      	cmp	r4, r2
   d7844:	d80a      	bhi.n	d785c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d7846:	6839      	ldr	r1, [r7, #0]
   d7848:	4295      	cmp	r5, r2
   d784a:	bf94      	ite	ls
   d784c:	ebc4 0205 	rsbls	r2, r4, r5
   d7850:	ebc4 0202 	rsbhi	r2, r4, r2
   d7854:	4421      	add	r1, r4
   d7856:	4630      	mov	r0, r6
   d7858:	f7ff ff45 	bl	d76e6 <_ZN6String4copyEPKcj>
	return out;
}
   d785c:	4630      	mov	r0, r6
   d785e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7860:	000dc951 	.word	0x000dc951

000d7864 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7864:	b510      	push	{r4, lr}
   d7866:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7868:	6800      	ldr	r0, [r0, #0]
   d786a:	b108      	cbz	r0, d7870 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d786c:	f7ff fa3c 	bl	d6ce8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7870:	4620      	mov	r0, r4
   d7872:	bd10      	pop	{r4, pc}

000d7874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7874:	680b      	ldr	r3, [r1, #0]
   d7876:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7878:	b113      	cbz	r3, d7880 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d787a:	685a      	ldr	r2, [r3, #4]
   d787c:	3201      	adds	r2, #1
   d787e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7880:	4770      	bx	lr
	...

000d7884 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7884:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7886:	4c06      	ldr	r4, [pc, #24]	; (d78a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7888:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d788a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d788c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d788e:	f7ff fa23 	bl	d6cd8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7892:	4620      	mov	r0, r4
   d7894:	4a03      	ldr	r2, [pc, #12]	; (d78a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7896:	4904      	ldr	r1, [pc, #16]	; (d78a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d789c:	f001 bd14 	b.w	d92c8 <__aeabi_atexit>
   d78a0:	2003e3c4 	.word	0x2003e3c4
   d78a4:	2003e148 	.word	0x2003e148
   d78a8:	000d7865 	.word	0x000d7865

000d78ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d78ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78ae:	4606      	mov	r6, r0
   d78b0:	460d      	mov	r5, r1
   d78b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d78b4:	2400      	movs	r4, #0
  while (size--) {
   d78b6:	42bd      	cmp	r5, r7
   d78b8:	d00c      	beq.n	d78d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d78ba:	6833      	ldr	r3, [r6, #0]
   d78bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d78c0:	689b      	ldr	r3, [r3, #8]
   d78c2:	4630      	mov	r0, r6
   d78c4:	4798      	blx	r3
     if (chunk>=0)
   d78c6:	2800      	cmp	r0, #0
   d78c8:	db01      	blt.n	d78ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d78ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d78cc:	e7f3      	b.n	d78b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d78ce:	2c00      	cmp	r4, #0
   d78d0:	bf08      	it	eq
   d78d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d78d4:	4620      	mov	r0, r4
   d78d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d78d8:	b570      	push	{r4, r5, r6, lr}
   d78da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d78dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d78de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d78e0:	b149      	cbz	r1, d78f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d78e2:	f004 f980 	bl	dbbe6 <strlen>
   d78e6:	682b      	ldr	r3, [r5, #0]
   d78e8:	4602      	mov	r2, r0
   d78ea:	4621      	mov	r1, r4
   d78ec:	4628      	mov	r0, r5
   d78ee:	68db      	ldr	r3, [r3, #12]
    }
   d78f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d78f4:	4718      	bx	r3
    }
   d78f6:	bd70      	pop	{r4, r5, r6, pc}

000d78f8 <_ZN5Print5printEPKc>:
   d78f8:	b508      	push	{r3, lr}
   d78fa:	f7ff ffed 	bl	d78d8 <_ZN5Print5writeEPKc>
   d78fe:	bd08      	pop	{r3, pc}

000d7900 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7900:	6803      	ldr	r3, [r0, #0]
   d7902:	689b      	ldr	r3, [r3, #8]
   d7904:	4718      	bx	r3

000d7906 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7906:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7908:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d790a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d790c:	f7ff fff8 	bl	d7900 <_ZN5Print5printEc>
  n += print('\n');
   d7910:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7912:	4604      	mov	r4, r0
  n += print('\n');
   d7914:	4628      	mov	r0, r5
   d7916:	f7ff fff3 	bl	d7900 <_ZN5Print5printEc>
  return n;
}
   d791a:	4420      	add	r0, r4
   d791c:	bd38      	pop	{r3, r4, r5, pc}

000d791e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d791e:	b538      	push	{r3, r4, r5, lr}
   d7920:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7922:	f7ff ffd9 	bl	d78d8 <_ZN5Print5writeEPKc>
   d7926:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7928:	4628      	mov	r0, r5
   d792a:	f7ff ffec 	bl	d7906 <_ZN5Print7printlnEv>
  return n;
}
   d792e:	4420      	add	r0, r4
   d7930:	bd38      	pop	{r3, r4, r5, pc}

000d7932 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7932:	f7ff bff4 	b.w	d791e <_ZN5Print7printlnEPKc>

000d7936 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7936:	b530      	push	{r4, r5, lr}
   d7938:	b08b      	sub	sp, #44	; 0x2c
   d793a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d793c:	2100      	movs	r1, #0
   d793e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7942:	2a01      	cmp	r2, #1
   d7944:	bf98      	it	ls
   d7946:	220a      	movls	r2, #10
   d7948:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d794c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7950:	fb05 3312 	mls	r3, r5, r2, r3
   d7954:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7958:	2b09      	cmp	r3, #9
   d795a:	bf94      	ite	ls
   d795c:	3330      	addls	r3, #48	; 0x30
   d795e:	3337      	addhi	r3, #55	; 0x37
   d7960:	b2db      	uxtb	r3, r3
   d7962:	4621      	mov	r1, r4
   d7964:	f804 3901 	strb.w	r3, [r4], #-1
   d7968:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d796a:	2d00      	cmp	r5, #0
   d796c:	d1ee      	bne.n	d794c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d796e:	f7ff ffb3 	bl	d78d8 <_ZN5Print5writeEPKc>
}
   d7972:	b00b      	add	sp, #44	; 0x2c
   d7974:	bd30      	pop	{r4, r5, pc}
	...

000d7978 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d797c:	ec57 6b10 	vmov	r6, r7, d0
   d7980:	4682      	mov	sl, r0
   d7982:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7984:	ee10 2a10 	vmov	r2, s0
   d7988:	463b      	mov	r3, r7
   d798a:	ee10 0a10 	vmov	r0, s0
   d798e:	4639      	mov	r1, r7
   d7990:	f003 fb90 	bl	db0b4 <__aeabi_dcmpun>
   d7994:	b108      	cbz	r0, d799a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7996:	494e      	ldr	r1, [pc, #312]	; (d7ad0 <_ZN5Print10printFloatEdh+0x158>)
   d7998:	e012      	b.n	d79c0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d799a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d799e:	f04f 32ff 	mov.w	r2, #4294967295
   d79a2:	4b4c      	ldr	r3, [pc, #304]	; (d7ad4 <_ZN5Print10printFloatEdh+0x15c>)
   d79a4:	4630      	mov	r0, r6
   d79a6:	4649      	mov	r1, r9
   d79a8:	f003 fb84 	bl	db0b4 <__aeabi_dcmpun>
   d79ac:	b968      	cbnz	r0, d79ca <_ZN5Print10printFloatEdh+0x52>
   d79ae:	f04f 32ff 	mov.w	r2, #4294967295
   d79b2:	4b48      	ldr	r3, [pc, #288]	; (d7ad4 <_ZN5Print10printFloatEdh+0x15c>)
   d79b4:	4630      	mov	r0, r6
   d79b6:	4649      	mov	r1, r9
   d79b8:	f003 fb5e 	bl	db078 <__aeabi_dcmple>
   d79bc:	b928      	cbnz	r0, d79ca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d79be:	4946      	ldr	r1, [pc, #280]	; (d7ad8 <_ZN5Print10printFloatEdh+0x160>)
   d79c0:	4650      	mov	r0, sl
   d79c2:	f7ff ff89 	bl	d78d8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d79c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d79ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d79ce:	4b43      	ldr	r3, [pc, #268]	; (d7adc <_ZN5Print10printFloatEdh+0x164>)
   d79d0:	4630      	mov	r0, r6
   d79d2:	4639      	mov	r1, r7
   d79d4:	f003 fb64 	bl	db0a0 <__aeabi_dcmpgt>
   d79d8:	b108      	cbz	r0, d79de <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d79da:	4941      	ldr	r1, [pc, #260]	; (d7ae0 <_ZN5Print10printFloatEdh+0x168>)
   d79dc:	e7f0      	b.n	d79c0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d79de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d79e2:	4b40      	ldr	r3, [pc, #256]	; (d7ae4 <_ZN5Print10printFloatEdh+0x16c>)
   d79e4:	4630      	mov	r0, r6
   d79e6:	4639      	mov	r1, r7
   d79e8:	f003 fb3c 	bl	db064 <__aeabi_dcmplt>
   d79ec:	2800      	cmp	r0, #0
   d79ee:	d1f4      	bne.n	d79da <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d79f0:	2200      	movs	r2, #0
   d79f2:	2300      	movs	r3, #0
   d79f4:	4630      	mov	r0, r6
   d79f6:	4639      	mov	r1, r7
   d79f8:	f003 fb34 	bl	db064 <__aeabi_dcmplt>
   d79fc:	b140      	cbz	r0, d7a10 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d79fe:	212d      	movs	r1, #45	; 0x2d
   d7a00:	4650      	mov	r0, sl
   d7a02:	f7ff ff7d 	bl	d7900 <_ZN5Print5printEc>
     number = -number;
   d7a06:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d7a0a:	4604      	mov	r4, r0
     number = -number;
   d7a0c:	461f      	mov	r7, r3
   d7a0e:	e000      	b.n	d7a12 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7a10:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d7a12:	4935      	ldr	r1, [pc, #212]	; (d7ae8 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7a14:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d7a18:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d7a1a:	fa5f f388 	uxtb.w	r3, r8
   d7a1e:	429d      	cmp	r5, r3
   d7a20:	d906      	bls.n	d7a30 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d7a22:	2200      	movs	r2, #0
   d7a24:	4b31      	ldr	r3, [pc, #196]	; (d7aec <_ZN5Print10printFloatEdh+0x174>)
   d7a26:	f003 f9d5 	bl	dadd4 <__aeabi_ddiv>
   d7a2a:	f108 0801 	add.w	r8, r8, #1
   d7a2e:	e7f4      	b.n	d7a1a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d7a30:	4632      	mov	r2, r6
   d7a32:	463b      	mov	r3, r7
   d7a34:	f002 fef2 	bl	da81c <__adddf3>
   d7a38:	460f      	mov	r7, r1
   d7a3a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7a3c:	f003 fb78 	bl	db130 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7a40:	220a      	movs	r2, #10
   d7a42:	4601      	mov	r1, r0
   d7a44:	4680      	mov	r8, r0
   d7a46:	4650      	mov	r0, sl
   d7a48:	f7ff ff75 	bl	d7936 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7a4c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d7a4e:	b3e5      	cbz	r5, d7aca <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d7a50:	4640      	mov	r0, r8
   d7a52:	f003 f81f 	bl	daa94 <__aeabi_ui2d>
   d7a56:	4602      	mov	r2, r0
   d7a58:	460b      	mov	r3, r1
   d7a5a:	4630      	mov	r0, r6
   d7a5c:	4639      	mov	r1, r7
   d7a5e:	f002 fedb 	bl	da818 <__aeabi_dsub>
   d7a62:	4606      	mov	r6, r0
   d7a64:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7a66:	4650      	mov	r0, sl
   d7a68:	4921      	ldr	r1, [pc, #132]	; (d7af0 <_ZN5Print10printFloatEdh+0x178>)
   d7a6a:	f7ff ff35 	bl	d78d8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d7a6e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d7a70:	2200      	movs	r2, #0
   d7a72:	4b1e      	ldr	r3, [pc, #120]	; (d7aec <_ZN5Print10printFloatEdh+0x174>)
   d7a74:	4630      	mov	r0, r6
   d7a76:	4639      	mov	r1, r7
   d7a78:	f003 f882 	bl	dab80 <__aeabi_dmul>
   d7a7c:	4606      	mov	r6, r0
   d7a7e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d7a80:	f003 fb2e 	bl	db0e0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7a84:	f1b0 0900 	subs.w	r9, r0, #0
   d7a88:	da07      	bge.n	d7a9a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d7a8a:	212d      	movs	r1, #45	; 0x2d
   d7a8c:	4650      	mov	r0, sl
   d7a8e:	f7ff ff37 	bl	d7900 <_ZN5Print5printEc>
            val = -n;
   d7a92:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7a96:	4680      	mov	r8, r0
   d7a98:	e002      	b.n	d7aa0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d7a9a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7a9c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7aa0:	220a      	movs	r2, #10
   d7aa2:	4650      	mov	r0, sl
   d7aa4:	f7ff ff47 	bl	d7936 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d7aa8:	4440      	add	r0, r8
   d7aaa:	4404      	add	r4, r0
    remainder -= toPrint;
   d7aac:	4648      	mov	r0, r9
   d7aae:	f003 f801 	bl	daab4 <__aeabi_i2d>
   d7ab2:	4602      	mov	r2, r0
   d7ab4:	460b      	mov	r3, r1
   d7ab6:	4630      	mov	r0, r6
   d7ab8:	4639      	mov	r1, r7
   d7aba:	f002 fead 	bl	da818 <__aeabi_dsub>
   d7abe:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7ac0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7ac4:	4606      	mov	r6, r0
   d7ac6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7ac8:	d1d2      	bne.n	d7a70 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7aca:	4620      	mov	r0, r4
   d7acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ad0:	000dd130 	.word	0x000dd130
   d7ad4:	7fefffff 	.word	0x7fefffff
   d7ad8:	000dd138 	.word	0x000dd138
   d7adc:	41efffff 	.word	0x41efffff
   d7ae0:	000dd134 	.word	0x000dd134
   d7ae4:	c1efffff 	.word	0xc1efffff
   d7ae8:	3fe00000 	.word	0x3fe00000
   d7aec:	40240000 	.word	0x40240000
   d7af0:	000dcad1 	.word	0x000dcad1

000d7af4 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d7af4:	b538      	push	{r3, r4, r5, lr}
   d7af6:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d7af8:	ee10 0a10 	vmov	r0, s0
   d7afc:	b2cd      	uxtb	r5, r1
   d7afe:	f002 ffeb 	bl	daad8 <__aeabi_f2d>
   d7b02:	ec41 0b10 	vmov	d0, r0, r1
   d7b06:	4629      	mov	r1, r5
   d7b08:	4620      	mov	r0, r4
}
   d7b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d7b0e:	f7ff bf33 	b.w	d7978 <_ZN5Print10printFloatEdh>

000d7b12 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d7b12:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d7b14:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d7b16:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d7b18:	f7ff ff2e 	bl	d7978 <_ZN5Print10printFloatEdh>
   d7b1c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d7b1e:	4628      	mov	r0, r5
   d7b20:	f7ff fef1 	bl	d7906 <_ZN5Print7printlnEv>
  return n;
}
   d7b24:	4420      	add	r0, r4
   d7b26:	bd38      	pop	{r3, r4, r5, pc}

000d7b28 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d7b28:	b538      	push	{r3, r4, r5, lr}
   d7b2a:	4604      	mov	r4, r0
    return println((double)num, digits);
   d7b2c:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d7b30:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7b32:	f002 ffd1 	bl	daad8 <__aeabi_f2d>
   d7b36:	ec41 0b10 	vmov	d0, r0, r1
   d7b3a:	4629      	mov	r1, r5
   d7b3c:	4620      	mov	r0, r4
}
   d7b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d7b42:	f7ff bfe6 	b.w	d7b12 <_ZN5Print7printlnEdi>

000d7b46 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b46:	b40c      	push	{r2, r3}
   d7b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b4c:	b087      	sub	sp, #28
   d7b4e:	af00      	add	r7, sp, #0
   d7b50:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7b54:	4605      	mov	r5, r0
   d7b56:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7b5a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7b5e:	4623      	mov	r3, r4
   d7b60:	464a      	mov	r2, r9
   d7b62:	2114      	movs	r1, #20
   d7b64:	1d38      	adds	r0, r7, #4
   d7b66:	f7ff faeb 	bl	d7140 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7b6a:	2813      	cmp	r0, #19
   d7b6c:	d805      	bhi.n	d7b7a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b6e:	1d39      	adds	r1, r7, #4
   d7b70:	4628      	mov	r0, r5
   d7b72:	f7ff feb1 	bl	d78d8 <_ZN5Print5writeEPKc>
   d7b76:	4604      	mov	r4, r0
   d7b78:	e013      	b.n	d7ba2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b7a:	f100 0308 	add.w	r3, r0, #8
   d7b7e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7b82:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b84:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7b88:	1c41      	adds	r1, r0, #1
   d7b8a:	4623      	mov	r3, r4
   d7b8c:	464a      	mov	r2, r9
   d7b8e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7b90:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7b92:	f7ff fad5 	bl	d7140 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b96:	4669      	mov	r1, sp
   d7b98:	4628      	mov	r0, r5
   d7b9a:	f7ff fe9d 	bl	d78d8 <_ZN5Print5writeEPKc>
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7ba2:	b11e      	cbz	r6, d7bac <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7ba4:	4628      	mov	r0, r5
   d7ba6:	f7ff feae 	bl	d7906 <_ZN5Print7printlnEv>
   d7baa:	4404      	add	r4, r0
    return n;
}
   d7bac:	4620      	mov	r0, r4
   d7bae:	371c      	adds	r7, #28
   d7bb0:	46bd      	mov	sp, r7
   d7bb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bb6:	b002      	add	sp, #8
   d7bb8:	4770      	bx	lr
	...

000d7bbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7bbc:	4b01      	ldr	r3, [pc, #4]	; (d7bc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7bbe:	4a02      	ldr	r2, [pc, #8]	; (d7bc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7bc0:	601a      	str	r2, [r3, #0]
   d7bc2:	4770      	bx	lr
   d7bc4:	2003e3c8 	.word	0x2003e3c8
   d7bc8:	000dd1af 	.word	0x000dd1af

000d7bcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7bcc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7bce:	2000      	movs	r0, #0
   d7bd0:	f7ff fa76 	bl	d70c0 <spark_sync_time_pending>
   d7bd4:	b128      	cbz	r0, d7be2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7bd6:	f7ff fa5b 	bl	d7090 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7bda:	f080 0001 	eor.w	r0, r0, #1
   d7bde:	b2c0      	uxtb	r0, r0
   d7be0:	bd08      	pop	{r3, pc}
   d7be2:	2001      	movs	r0, #1
    }
   d7be4:	bd08      	pop	{r3, pc}
	...

000d7be8 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7be8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7bec:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7bf4:	d40f      	bmi.n	d7c16 <_ZN9TimeClass4zoneEf+0x2e>
   d7bf6:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7bfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7c02:	dc08      	bgt.n	d7c16 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7c04:	eddf 7a04 	vldr	s15, [pc, #16]	; d7c18 <_ZN9TimeClass4zoneEf+0x30>
   d7c08:	4b04      	ldr	r3, [pc, #16]	; (d7c1c <_ZN9TimeClass4zoneEf+0x34>)
   d7c0a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7c0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7c12:	ed83 0a00 	vstr	s0, [r3]
   d7c16:	4770      	bx	lr
   d7c18:	45610000 	.word	0x45610000
   d7c1c:	2003e3d4 	.word	0x2003e3d4

000d7c20 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7c22:	4b0e      	ldr	r3, [pc, #56]	; (d7c5c <_ZN9TimeClass7timeStrEl+0x3c>)
   d7c24:	681b      	ldr	r3, [r3, #0]
   d7c26:	4419      	add	r1, r3
   d7c28:	4b0d      	ldr	r3, [pc, #52]	; (d7c60 <_ZN9TimeClass7timeStrEl+0x40>)
   d7c2a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7c2c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7c2e:	a802      	add	r0, sp, #8
   d7c30:	4419      	add	r1, r3
   d7c32:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7c36:	f003 fe47 	bl	db8c8 <localtime>
        char* ascstr = asctime(calendar_time);
   d7c3a:	f003 fdf7 	bl	db82c <asctime>
   d7c3e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7c40:	f003 ffd1 	bl	dbbe6 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7c44:	4428      	add	r0, r5
   d7c46:	2300      	movs	r3, #0
   d7c48:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7c4c:	4629      	mov	r1, r5
   d7c4e:	4620      	mov	r0, r4
   d7c50:	f7ff fd61 	bl	d7716 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7c54:	4620      	mov	r0, r4
   d7c56:	b003      	add	sp, #12
   d7c58:	bd30      	pop	{r4, r5, pc}
   d7c5a:	bf00      	nop
   d7c5c:	2003e3d4 	.word	0x2003e3d4
   d7c60:	2003e3d0 	.word	0x2003e3d0

000d7c64 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7c64:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7c66:	2000      	movs	r0, #0
   d7c68:	f7ff f816 	bl	d6c98 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7c6c:	4604      	mov	r4, r0
   d7c6e:	b968      	cbnz	r0, d7c8c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7c70:	f7ff f96a 	bl	d6f48 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7c74:	2801      	cmp	r0, #1
   d7c76:	d10b      	bne.n	d7c90 <_ZN9TimeClass7isValidEv+0x2c>
   d7c78:	4620      	mov	r0, r4
   d7c7a:	f7ff f98d 	bl	d6f98 <system_thread_get_state>
   d7c7e:	b938      	cbnz	r0, d7c90 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7c80:	f7ff ffa4 	bl	d7bcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7c84:	b930      	cbnz	r0, d7c94 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7c86:	f7ff f9fb 	bl	d7080 <spark_process>
   d7c8a:	e7f9      	b.n	d7c80 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7c8c:	2001      	movs	r0, #1
   d7c8e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7c90:	2000      	movs	r0, #0
   d7c92:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7c94:	f7ff ff9a 	bl	d7bcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7c98:	2000      	movs	r0, #0
   d7c9a:	f7fe fffd 	bl	d6c98 <HAL_RTC_Time_Is_Valid>
   d7c9e:	3000      	adds	r0, #0
   d7ca0:	bf18      	it	ne
   d7ca2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7ca4:	bd10      	pop	{r4, pc}

000d7ca6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7ca6:	b508      	push	{r3, lr}
    (void)isValid();
   d7ca8:	f7ff ffdc 	bl	d7c64 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7cb0:	f7fe bfea 	b.w	d6c88 <HAL_RTC_Get_UnixTime>

000d7cb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7cb4:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7cb6:	681a      	ldr	r2, [r3, #0]
   d7cb8:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7cba:	601a      	str	r2, [r3, #0]
   d7cbc:	4770      	bx	lr
   d7cbe:	bf00      	nop
   d7cc0:	2003e088 	.word	0x2003e088
   d7cc4:	2003e3cc 	.word	0x2003e3cc

000d7cc8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7cc8:	2100      	movs	r1, #0
   d7cca:	f7ff b94d 	b.w	d6f68 <system_delay_ms>

000d7cce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7cce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7cd0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7cd2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7cd4:	b113      	cbz	r3, d7cdc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7cd6:	2203      	movs	r2, #3
   d7cd8:	4601      	mov	r1, r0
   d7cda:	4798      	blx	r3
    }
   d7cdc:	4620      	mov	r0, r4
   d7cde:	bd10      	pop	{r4, pc}

000d7ce0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ce4:	f7ff fff3 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
   d7ce8:	4620      	mov	r0, r4
   d7cea:	bd10      	pop	{r4, pc}

000d7cec <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7cec:	b513      	push	{r0, r1, r4, lr}
   d7cee:	460b      	mov	r3, r1
   d7cf0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7cf2:	c803      	ldmia	r0, {r0, r1}
   d7cf4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7cfc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7d00:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7d04:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7d08:	b002      	add	sp, #8
   d7d0a:	bd10      	pop	{r4, pc}

000d7d0c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d0c:	4803      	ldr	r0, [pc, #12]	; (d7d1c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7d0e:	4a04      	ldr	r2, [pc, #16]	; (d7d20 <_GLOBAL__sub_I_RGB+0x14>)
   d7d10:	4904      	ldr	r1, [pc, #16]	; (d7d24 <_GLOBAL__sub_I_RGB+0x18>)
   d7d12:	2300      	movs	r3, #0
   d7d14:	6083      	str	r3, [r0, #8]
   d7d16:	f001 bad7 	b.w	d92c8 <__aeabi_atexit>
   d7d1a:	bf00      	nop
   d7d1c:	2003e3d8 	.word	0x2003e3d8
   d7d20:	2003e148 	.word	0x2003e148
   d7d24:	000d7ce1 	.word	0x000d7ce1

000d7d28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7d2a:	4b0c      	ldr	r3, [pc, #48]	; (d7d5c <serialEventRun+0x34>)
   d7d2c:	b133      	cbz	r3, d7d3c <serialEventRun+0x14>
   d7d2e:	f000 fc31 	bl	d8594 <_Z16_fetch_usbserialv>
   d7d32:	6803      	ldr	r3, [r0, #0]
   d7d34:	691b      	ldr	r3, [r3, #16]
   d7d36:	4798      	blx	r3
   d7d38:	2800      	cmp	r0, #0
   d7d3a:	dc09      	bgt.n	d7d50 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7d3c:	4b08      	ldr	r3, [pc, #32]	; (d7d60 <serialEventRun+0x38>)
   d7d3e:	b163      	cbz	r3, d7d5a <serialEventRun+0x32>
   d7d40:	f000 fcaa 	bl	d8698 <_Z22__fetch_global_Serial1v>
   d7d44:	6803      	ldr	r3, [r0, #0]
   d7d46:	691b      	ldr	r3, [r3, #16]
   d7d48:	4798      	blx	r3
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	dc03      	bgt.n	d7d56 <serialEventRun+0x2e>
   d7d4e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7d50:	f3af 8000 	nop.w
   d7d54:	e7f2      	b.n	d7d3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7d56:	f3af 8000 	nop.w
   d7d5a:	bd08      	pop	{r3, pc}
	...

000d7d64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7d64:	b508      	push	{r3, lr}
	serialEventRun();
   d7d66:	f7ff ffdf 	bl	d7d28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d6a:	f7fe ff85 	bl	d6c78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d6e:	4b01      	ldr	r3, [pc, #4]	; (d7d74 <_post_loop+0x10>)
   d7d70:	6018      	str	r0, [r3, #0]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	2003e70c 	.word	0x2003e70c

000d7d78 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7d78:	4802      	ldr	r0, [pc, #8]	; (d7d84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7d7a:	4a03      	ldr	r2, [pc, #12]	; (d7d88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7d7c:	4903      	ldr	r1, [pc, #12]	; (d7d8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7d7e:	1a12      	subs	r2, r2, r0
   d7d80:	f003 beae 	b.w	dbae0 <memcpy>
   d7d84:	2003f400 	.word	0x2003f400
   d7d88:	2003f404 	.word	0x2003f404
   d7d8c:	000dd6d8 	.word	0x000dd6d8

000d7d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7d90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d92:	2300      	movs	r3, #0
   d7d94:	9300      	str	r3, [sp, #0]
   d7d96:	461a      	mov	r2, r3
   d7d98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d9c:	f7ff f90e 	bl	d6fbc <system_ctrl_set_result>
}
   d7da0:	b003      	add	sp, #12
   d7da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7da8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7da8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7daa:	8843      	ldrh	r3, [r0, #2]
   d7dac:	2b0a      	cmp	r3, #10
   d7dae:	d008      	beq.n	d7dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7db0:	2b50      	cmp	r3, #80	; 0x50
   d7db2:	d109      	bne.n	d7dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7db4:	4b09      	ldr	r3, [pc, #36]	; (d7ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7db6:	681b      	ldr	r3, [r3, #0]
   d7db8:	b13b      	cbz	r3, d7dca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7dba:	b003      	add	sp, #12
   d7dbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7dc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7dc2:	f7ff ffe5 	bl	d7d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7dc6:	e006      	b.n	d7dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7dc8:	2300      	movs	r3, #0
   d7dca:	9300      	str	r3, [sp, #0]
   d7dcc:	461a      	mov	r2, r3
   d7dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7dd2:	f7ff f8f3 	bl	d6fbc <system_ctrl_set_result>
        break;
    }
}
   d7dd6:	b003      	add	sp, #12
   d7dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ddc:	2003e3e8 	.word	0x2003e3e8

000d7de0 <module_user_init_hook>:

void module_user_init_hook()
{
   d7de0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7de2:	4c10      	ldr	r4, [pc, #64]	; (d7e24 <module_user_init_hook+0x44>)
   d7de4:	4d10      	ldr	r5, [pc, #64]	; (d7e28 <module_user_init_hook+0x48>)
   d7de6:	6823      	ldr	r3, [r4, #0]
   d7de8:	42ab      	cmp	r3, r5
   d7dea:	4b10      	ldr	r3, [pc, #64]	; (d7e2c <module_user_init_hook+0x4c>)
   d7dec:	bf0c      	ite	eq
   d7dee:	2201      	moveq	r2, #1
   d7df0:	2200      	movne	r2, #0
   d7df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7df4:	d002      	beq.n	d7dfc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7df6:	f7ff ffbf 	bl	d7d78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7dfc:	f7fe ff2c 	bl	d6c58 <HAL_RNG_GetRandomNumber>
   d7e00:	4604      	mov	r4, r0
    srand(seed);
   d7e02:	f003 fe9b 	bl	dbb3c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e06:	4b0a      	ldr	r3, [pc, #40]	; (d7e30 <module_user_init_hook+0x50>)
   d7e08:	b113      	cbz	r3, d7e10 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e10:	2100      	movs	r1, #0
   d7e12:	4807      	ldr	r0, [pc, #28]	; (d7e30 <module_user_init_hook+0x50>)
   d7e14:	f7ff f95c 	bl	d70d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e18:	2100      	movs	r1, #0
   d7e1a:	4806      	ldr	r0, [pc, #24]	; (d7e34 <module_user_init_hook+0x54>)
}
   d7e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e20:	f7ff b8c2 	b.w	d6fa8 <system_ctrl_set_app_request_handler>
   d7e24:	2003f400 	.word	0x2003f400
   d7e28:	9a271c1e 	.word	0x9a271c1e
   d7e2c:	2003e3ec 	.word	0x2003e3ec
   d7e30:	00000000 	.word	0x00000000
   d7e34:	000d7da9 	.word	0x000d7da9

000d7e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7e38:	4770      	bx	lr

000d7e3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7e3a:	2000      	movs	r0, #0
   d7e3c:	4770      	bx	lr

000d7e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7e3e:	b510      	push	{r4, lr}
   d7e40:	2110      	movs	r1, #16
   d7e42:	4604      	mov	r4, r0
   d7e44:	f001 fa4e 	bl	d92e4 <_ZdlPvj>
   d7e48:	4620      	mov	r0, r4
   d7e4a:	bd10      	pop	{r4, pc}

000d7e4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7e4c:	b508      	push	{r3, lr}
      { delete this; }
   d7e4e:	b108      	cbz	r0, d7e54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7e50:	f7ff fff5 	bl	d7e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7e54:	bd08      	pop	{r3, pc}

000d7e56 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7e56:	2200      	movs	r2, #0
   d7e58:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7e5a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7e5c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7e60:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7e62:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7e66:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e68:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e6a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7e6c:	680c      	ldr	r4, [r1, #0]
   d7e6e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e70:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7e72:	bd10      	pop	{r4, pc}

000d7e74 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7e74:	b510      	push	{r4, lr}
   d7e76:	4604      	mov	r4, r0
    free((void*)msg_);
   d7e78:	6800      	ldr	r0, [r0, #0]
   d7e7a:	f7ff f939 	bl	d70f0 <free>
}
   d7e7e:	4620      	mov	r0, r4
   d7e80:	bd10      	pop	{r4, pc}

000d7e82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7e82:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7e84:	68c4      	ldr	r4, [r0, #12]
   d7e86:	b1f4      	cbz	r4, d7ec6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7e88:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7e8a:	2b02      	cmp	r3, #2
   d7e8c:	d103      	bne.n	d7e96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7e8e:	f104 000c 	add.w	r0, r4, #12
   d7e92:	f7ff ffef 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7e96:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7e98:	b135      	cbz	r5, d7ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7e9a:	4628      	mov	r0, r5
   d7e9c:	f7ff ff17 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
   d7ea0:	2110      	movs	r1, #16
   d7ea2:	4628      	mov	r0, r5
   d7ea4:	f001 fa1e 	bl	d92e4 <_ZdlPvj>
   d7ea8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7eaa:	b135      	cbz	r5, d7eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7eac:	4628      	mov	r0, r5
   d7eae:	f7ff ff0e 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
   d7eb2:	2110      	movs	r1, #16
   d7eb4:	4628      	mov	r0, r5
   d7eb6:	f001 fa15 	bl	d92e4 <_ZdlPvj>
   d7eba:	4620      	mov	r0, r4
   d7ebc:	2114      	movs	r1, #20
   d7ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7ec2:	f001 ba0f 	b.w	d92e4 <_ZdlPvj>
   d7ec6:	bd38      	pop	{r3, r4, r5, pc}

000d7ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7ec8:	b513      	push	{r0, r1, r4, lr}
   d7eca:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7ecc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7ed0:	2300      	movs	r3, #0
   d7ed2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7ed4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7ed6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7ed8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7eda:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7edc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7ede:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7ee0:	f7fc fb98 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7ee4:	4620      	mov	r0, r4
   d7ee6:	b002      	add	sp, #8
   d7ee8:	bd10      	pop	{r4, pc}

000d7eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7eec:	460c      	mov	r4, r1
   d7eee:	ad02      	add	r5, sp, #8
   d7ef0:	f854 3b04 	ldr.w	r3, [r4], #4
   d7ef4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7ef8:	4606      	mov	r6, r0
   d7efa:	460f      	mov	r7, r1
   d7efc:	a801      	add	r0, sp, #4
   d7efe:	4621      	mov	r1, r4
   d7f00:	f7ff fcb8 	bl	d7874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7f04:	4629      	mov	r1, r5
   d7f06:	4630      	mov	r0, r6
   d7f08:	f7ff ffde 	bl	d7ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f0c:	a801      	add	r0, sp, #4
   d7f0e:	f7fc fb81 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f12:	4620      	mov	r0, r4
   d7f14:	f7fc fb7e 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7f18:	4638      	mov	r0, r7
   d7f1a:	2108      	movs	r1, #8
   d7f1c:	f001 f9e2 	bl	d92e4 <_ZdlPvj>
        return p;
    }
   d7f20:	4630      	mov	r0, r6
   d7f22:	b003      	add	sp, #12
   d7f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7f28:	b538      	push	{r3, r4, r5, lr}
   d7f2a:	2300      	movs	r3, #0
   d7f2c:	4604      	mov	r4, r0
   d7f2e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7f30:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7f32:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7f34:	f7fc f8b1 	bl	d409a <_Znwj>
   d7f38:	b128      	cbz	r0, d7f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7f3a:	2301      	movs	r3, #1
   d7f3c:	6043      	str	r3, [r0, #4]
   d7f3e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7f40:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7f42:	6003      	str	r3, [r0, #0]
   d7f44:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7f46:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7f48:	4620      	mov	r0, r4
   d7f4a:	bd38      	pop	{r3, r4, r5, pc}
   d7f4c:	000dd240 	.word	0x000dd240

000d7f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7f52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f54:	b90a      	cbnz	r2, d7f5a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7f56:	f001 f9d8 	bl	d930a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f5a:	68c3      	ldr	r3, [r0, #12]
    }
   d7f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f60:	4718      	bx	r3

000d7f62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7f66:	f100 0110 	add.w	r1, r0, #16
   d7f6a:	f7ff fff1 	bl	d7f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7f6e:	bd08      	pop	{r3, pc}

000d7f70 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7f72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f74:	b90a      	cbnz	r2, d7f7a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7f76:	f001 f9c8 	bl	d930a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f7a:	68c3      	ldr	r3, [r0, #12]
    }
   d7f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f80:	4718      	bx	r3

000d7f82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7f86:	f100 0110 	add.w	r1, r0, #16
   d7f8a:	f7ff fff1 	bl	d7f70 <_ZNKSt8functionIFvRKbEEclES1_>
   d7f8e:	bd08      	pop	{r3, pc}

000d7f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7f90:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7f92:	2300      	movs	r3, #0
   d7f94:	6083      	str	r3, [r0, #8]
   d7f96:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7f98:	4604      	mov	r4, r0
   d7f9a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7f9c:	b12b      	cbz	r3, d7faa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7f9e:	2202      	movs	r2, #2
   d7fa0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7fa2:	68eb      	ldr	r3, [r5, #12]
   d7fa4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7fa6:	68ab      	ldr	r3, [r5, #8]
   d7fa8:	60a3      	str	r3, [r4, #8]
	}
    }
   d7faa:	4620      	mov	r0, r4
   d7fac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7fb2:	b089      	sub	sp, #36	; 0x24
   d7fb4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7fb6:	4668      	mov	r0, sp
   d7fb8:	f7ff ff4d 	bl	d7e56 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7fbc:	2300      	movs	r3, #0
   d7fbe:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7fc2:	f04f 0202 	mov.w	r2, #2
   d7fc6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7fca:	2b00      	cmp	r3, #0
   d7fcc:	d103      	bne.n	d7fd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7fce:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7fd2:	2900      	cmp	r1, #0
   d7fd4:	d1f7      	bne.n	d7fc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7fd6:	d002      	beq.n	d7fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7fd8:	f88d 3008 	strb.w	r3, [sp, #8]
   d7fdc:	e063      	b.n	d80a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7fde:	f114 050c 	adds.w	r5, r4, #12
   d7fe2:	d003      	beq.n	d7fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7fe4:	4669      	mov	r1, sp
   d7fe6:	4628      	mov	r0, r5
   d7fe8:	f7ff ff35 	bl	d7e56 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7fec:	f3bf 8f5f 	dmb	sy
   d7ff0:	2301      	movs	r3, #1
   d7ff2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7ff4:	2000      	movs	r0, #0
   d7ff6:	f104 0308 	add.w	r3, r4, #8
   d7ffa:	f3bf 8f5f 	dmb	sy
   d7ffe:	e853 6f00 	ldrex	r6, [r3]
   d8002:	e843 0200 	strex	r2, r0, [r3]
   d8006:	2a00      	cmp	r2, #0
   d8008:	d1f9      	bne.n	d7ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d800a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d800e:	2e00      	cmp	r6, #0
   d8010:	d049      	beq.n	d80a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8012:	f7fe ffb1 	bl	d6f78 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8016:	b120      	cbz	r0, d8022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8018:	4629      	mov	r1, r5
   d801a:	4630      	mov	r0, r6
   d801c:	f7ff ff98 	bl	d7f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8020:	e03a      	b.n	d8098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8022:	4631      	mov	r1, r6
   d8024:	a802      	add	r0, sp, #8
   d8026:	f7ff ffb3 	bl	d7f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d802a:	68e0      	ldr	r0, [r4, #12]
   d802c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8030:	b108      	cbz	r0, d8036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d8032:	f003 fdbd 	bl	dbbb0 <strdup>
   d8036:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8038:	2010      	movs	r0, #16
   d803a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d803e:	f7fc f82c 	bl	d409a <_Znwj>
   d8042:	4605      	mov	r5, r0
   d8044:	b1e8      	cbz	r0, d8082 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8046:	2700      	movs	r7, #0
   d8048:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d804a:	2018      	movs	r0, #24
   d804c:	f7fc f825 	bl	d409a <_Znwj>
   d8050:	4604      	mov	r4, r0
   d8052:	b188      	cbz	r0, d8078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8054:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8056:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8058:	a802      	add	r0, sp, #8
   d805a:	f7ff fe47 	bl	d7cec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d805e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8060:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8062:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8064:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8066:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8068:	a906      	add	r1, sp, #24
   d806a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d806c:	60e3      	str	r3, [r4, #12]
   d806e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8072:	9205      	str	r2, [sp, #20]
   d8074:	f7ff feef 	bl	d7e56 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8078:	4b0d      	ldr	r3, [pc, #52]	; (d80b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d807a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d807c:	4b0d      	ldr	r3, [pc, #52]	; (d80b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d807e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8080:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d8082:	a806      	add	r0, sp, #24
   d8084:	f7ff fef6 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8088:	a802      	add	r0, sp, #8
   d808a:	f7ff fe20 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d808e:	2200      	movs	r2, #0
   d8090:	4629      	mov	r1, r5
   d8092:	4809      	ldr	r0, [pc, #36]	; (d80b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8094:	f7fe ff78 	bl	d6f88 <application_thread_invoke>
   d8098:	4630      	mov	r0, r6
   d809a:	f7ff fe18 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d809e:	2110      	movs	r1, #16
   d80a0:	4630      	mov	r0, r6
   d80a2:	f001 f91f 	bl	d92e4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d80a6:	4668      	mov	r0, sp
   d80a8:	f7ff fee4 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
    }
   d80ac:	b009      	add	sp, #36	; 0x24
   d80ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d80b0:	000d7f63 	.word	0x000d7f63
   d80b4:	000d81d9 	.word	0x000d81d9
   d80b8:	000d86e5 	.word	0x000d86e5

000d80bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d80bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80c0:	b08b      	sub	sp, #44	; 0x2c
   d80c2:	4606      	mov	r6, r0
   d80c4:	460f      	mov	r7, r1
   d80c6:	4690      	mov	r8, r2
   d80c8:	4699      	mov	r9, r3
   d80ca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d80ce:	f7fe ffdf 	bl	d7090 <spark_cloud_flag_connected>
   d80d2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d80d4:	4683      	mov	fp, r0
   d80d6:	bb30      	cbnz	r0, d8126 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d80d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d80dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d80de:	a905      	add	r1, sp, #20
   d80e0:	4628      	mov	r0, r5
   d80e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d80e6:	f7ff feb6 	bl	d7e56 <_ZN8particle5ErrorC1EOS0_>
   d80ea:	2014      	movs	r0, #20
   d80ec:	f7fb ffd5 	bl	d409a <_Znwj>
   d80f0:	4604      	mov	r4, r0
   d80f2:	b158      	cbz	r0, d810c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d80f4:	2302      	movs	r3, #2
   d80f6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d80f8:	2301      	movs	r3, #1
   d80fa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d80fc:	f8c0 b004 	str.w	fp, [r0, #4]
   d8100:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8104:	4629      	mov	r1, r5
   d8106:	300c      	adds	r0, #12
   d8108:	f7ff fea5 	bl	d7e56 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d810c:	4630      	mov	r0, r6
   d810e:	4621      	mov	r1, r4
   d8110:	f840 4b04 	str.w	r4, [r0], #4
   d8114:	f7ff ff08 	bl	d7f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8118:	4628      	mov	r0, r5
   d811a:	f7ff feab 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d811e:	a805      	add	r0, sp, #20
   d8120:	f7ff fea8 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
   d8124:	e052      	b.n	d81cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8126:	2400      	movs	r4, #0
   d8128:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d812a:	2014      	movs	r0, #20
   d812c:	606c      	str	r4, [r5, #4]
   d812e:	60ac      	str	r4, [r5, #8]
   d8130:	9307      	str	r3, [sp, #28]
   d8132:	f7fb ffb2 	bl	d409a <_Znwj>
   d8136:	4601      	mov	r1, r0
   d8138:	b118      	cbz	r0, d8142 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d813a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d813c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d813e:	6044      	str	r4, [r0, #4]
   d8140:	6084      	str	r4, [r0, #8]
   d8142:	a804      	add	r0, sp, #16
   d8144:	9103      	str	r1, [sp, #12]
   d8146:	f7ff feef 	bl	d7f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d814a:	4b22      	ldr	r3, [pc, #136]	; (d81d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d814c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d814e:	2008      	movs	r0, #8
   d8150:	f7fb ffa3 	bl	d409a <_Znwj>
   d8154:	4604      	mov	r4, r0
   d8156:	b128      	cbz	r0, d8164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8158:	9b03      	ldr	r3, [sp, #12]
   d815a:	f840 3b04 	str.w	r3, [r0], #4
   d815e:	a904      	add	r1, sp, #16
   d8160:	f7ff fb88 	bl	d7874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8164:	9500      	str	r5, [sp, #0]
   d8166:	fa5f f38a 	uxtb.w	r3, sl
   d816a:	464a      	mov	r2, r9
   d816c:	4641      	mov	r1, r8
   d816e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d8170:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8172:	f7fe ff95 	bl	d70a0 <spark_send_event>
   d8176:	b920      	cbnz	r0, d8182 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8178:	9b03      	ldr	r3, [sp, #12]
   d817a:	785b      	ldrb	r3, [r3, #1]
   d817c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8180:	b183      	cbz	r3, d81a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d8182:	9b03      	ldr	r3, [sp, #12]
   d8184:	9305      	str	r3, [sp, #20]
   d8186:	a904      	add	r1, sp, #16
   d8188:	a806      	add	r0, sp, #24
   d818a:	f7ff fb73 	bl	d7874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d818e:	a905      	add	r1, sp, #20
   d8190:	4630      	mov	r0, r6
   d8192:	f7ff fe99 	bl	d7ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8196:	a806      	add	r0, sp, #24
   d8198:	f7fc fa3c 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d819c:	a804      	add	r0, sp, #16
   d819e:	f7fc fa39 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81a2:	e013      	b.n	d81cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d81a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d81a8:	a905      	add	r1, sp, #20
   d81aa:	a803      	add	r0, sp, #12
   d81ac:	9205      	str	r2, [sp, #20]
   d81ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d81b2:	f7ff fefd 	bl	d7fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d81b6:	a805      	add	r0, sp, #20
   d81b8:	f7ff fe5c 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d81bc:	a805      	add	r0, sp, #20
   d81be:	9909      	ldr	r1, [sp, #36]	; 0x24
   d81c0:	f7ff fe93 	bl	d7eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d81c4:	a806      	add	r0, sp, #24
   d81c6:	f7fc fa25 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81ca:	e7da      	b.n	d8182 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d81cc:	4630      	mov	r0, r6
   d81ce:	b00b      	add	sp, #44	; 0x2c
   d81d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81d4:	000d8349 	.word	0x000d8349

000d81d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d81d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d81da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d81de:	d006      	beq.n	d81ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d81e0:	2a03      	cmp	r2, #3
   d81e2:	d017      	beq.n	d8214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d81e4:	2a01      	cmp	r2, #1
   d81e6:	d122      	bne.n	d822e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d81e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d81ea:	6003      	str	r3, [r0, #0]
	      break;
   d81ec:	e01f      	b.n	d822e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d81ee:	2018      	movs	r0, #24
   d81f0:	680e      	ldr	r6, [r1, #0]
   d81f2:	f7fb ff52 	bl	d409a <_Znwj>
   d81f6:	4605      	mov	r5, r0
   d81f8:	b150      	cbz	r0, d8210 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d81fa:	4631      	mov	r1, r6
   d81fc:	f7ff fec8 	bl	d7f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8200:	6930      	ldr	r0, [r6, #16]
   d8202:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8206:	b108      	cbz	r0, d820c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8208:	f003 fcd2 	bl	dbbb0 <strdup>
   d820c:	6128      	str	r0, [r5, #16]
   d820e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8210:	6025      	str	r5, [r4, #0]
   d8212:	e00c      	b.n	d822e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8214:	6804      	ldr	r4, [r0, #0]
   d8216:	b154      	cbz	r4, d822e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8218:	f104 0010 	add.w	r0, r4, #16
   d821c:	f7ff fe2a 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8220:	4620      	mov	r0, r4
   d8222:	f7ff fd54 	bl	d7cce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8226:	2118      	movs	r1, #24
   d8228:	4620      	mov	r0, r4
   d822a:	f001 f85b 	bl	d92e4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d822e:	2000      	movs	r0, #0
   d8230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8232 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8232:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8234:	2300      	movs	r3, #0
   d8236:	6083      	str	r3, [r0, #8]
   d8238:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d823a:	4604      	mov	r4, r0
   d823c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d823e:	b12b      	cbz	r3, d824c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8240:	2202      	movs	r2, #2
   d8242:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8244:	68eb      	ldr	r3, [r5, #12]
   d8246:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8248:	68ab      	ldr	r3, [r5, #8]
   d824a:	60a3      	str	r3, [r4, #8]
	}
    }
   d824c:	4620      	mov	r0, r4
   d824e:	bd38      	pop	{r3, r4, r5, pc}

000d8250 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8250:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8252:	b570      	push	{r4, r5, r6, lr}
   d8254:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8256:	d006      	beq.n	d8266 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8258:	2a03      	cmp	r2, #3
   d825a:	d011      	beq.n	d8280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d825c:	2a01      	cmp	r2, #1
   d825e:	d118      	bne.n	d8292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8260:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8262:	6003      	str	r3, [r0, #0]
	      break;
   d8264:	e015      	b.n	d8292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8266:	2014      	movs	r0, #20
   d8268:	680e      	ldr	r6, [r1, #0]
   d826a:	f7fb ff16 	bl	d409a <_Znwj>
   d826e:	4605      	mov	r5, r0
   d8270:	b120      	cbz	r0, d827c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8272:	4631      	mov	r1, r6
   d8274:	f7ff ffdd 	bl	d8232 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8278:	7c33      	ldrb	r3, [r6, #16]
   d827a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d827c:	6025      	str	r5, [r4, #0]
   d827e:	e008      	b.n	d8292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8280:	6804      	ldr	r4, [r0, #0]
   d8282:	b134      	cbz	r4, d8292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8284:	4620      	mov	r0, r4
   d8286:	f7ff fd22 	bl	d7cce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d828a:	2114      	movs	r1, #20
   d828c:	4620      	mov	r0, r4
   d828e:	f001 f829 	bl	d92e4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8292:	2000      	movs	r0, #0
   d8294:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8298:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d829a:	2300      	movs	r3, #0
   d829c:	b087      	sub	sp, #28
   d829e:	460c      	mov	r4, r1
   d82a0:	f3bf 8f5f 	dmb	sy
   d82a4:	e850 6f00 	ldrex	r6, [r0]
   d82a8:	e840 3200 	strex	r2, r3, [r0]
   d82ac:	2a00      	cmp	r2, #0
   d82ae:	d1f9      	bne.n	d82a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d82b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d82b4:	2e00      	cmp	r6, #0
   d82b6:	d03f      	beq.n	d8338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d82b8:	4618      	mov	r0, r3
   d82ba:	f7fe fe5d 	bl	d6f78 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d82be:	4607      	mov	r7, r0
   d82c0:	b120      	cbz	r0, d82cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d82c2:	4621      	mov	r1, r4
   d82c4:	4630      	mov	r0, r6
   d82c6:	f7ff fe53 	bl	d7f70 <_ZNKSt8functionIFvRKbEEclES1_>
   d82ca:	e02e      	b.n	d832a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d82cc:	4631      	mov	r1, r6
   d82ce:	a801      	add	r0, sp, #4
   d82d0:	f7ff ffaf 	bl	d8232 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d82d4:	7823      	ldrb	r3, [r4, #0]
   d82d6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d82da:	2010      	movs	r0, #16
   d82dc:	f7fb fedd 	bl	d409a <_Znwj>
   d82e0:	4605      	mov	r5, r0
   d82e2:	b1d0      	cbz	r0, d831a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d82e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82e6:	2014      	movs	r0, #20
   d82e8:	f7fb fed7 	bl	d409a <_Znwj>
   d82ec:	4604      	mov	r4, r0
   d82ee:	b178      	cbz	r0, d8310 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d82f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d82f2:	4601      	mov	r1, r0
   d82f4:	a801      	add	r0, sp, #4
   d82f6:	f7ff fcf9 	bl	d7cec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d82fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d82fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8300:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8302:	9203      	str	r2, [sp, #12]
   d8304:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8306:	60e3      	str	r3, [r4, #12]
   d8308:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d830c:	9204      	str	r2, [sp, #16]
   d830e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8310:	4b0a      	ldr	r3, [pc, #40]	; (d833c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8312:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8314:	4b0a      	ldr	r3, [pc, #40]	; (d8340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8316:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8318:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d831a:	a801      	add	r0, sp, #4
   d831c:	f7ff fcd7 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8320:	2200      	movs	r2, #0
   d8322:	4629      	mov	r1, r5
   d8324:	4807      	ldr	r0, [pc, #28]	; (d8344 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8326:	f7fe fe2f 	bl	d6f88 <application_thread_invoke>
   d832a:	4630      	mov	r0, r6
   d832c:	f7ff fccf 	bl	d7cce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8330:	2110      	movs	r1, #16
   d8332:	4630      	mov	r0, r6
   d8334:	f000 ffd6 	bl	d92e4 <_ZdlPvj>
        }
    }
   d8338:	b007      	add	sp, #28
   d833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d833c:	000d7f83 	.word	0x000d7f83
   d8340:	000d8251 	.word	0x000d8251
   d8344:	000d86e5 	.word	0x000d86e5

000d8348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8348:	b530      	push	{r4, r5, lr}
   d834a:	b085      	sub	sp, #20
   d834c:	4604      	mov	r4, r0
   d834e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8350:	4668      	mov	r0, sp
   d8352:	4611      	mov	r1, r2
   d8354:	f7ff fdc9 	bl	d7eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8358:	b17c      	cbz	r4, d837a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d835a:	b224      	sxth	r4, r4
   d835c:	4628      	mov	r0, r5
   d835e:	b10d      	cbz	r5, d8364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8360:	f003 fc26 	bl	dbbb0 <strdup>
   d8364:	9002      	str	r0, [sp, #8]
   d8366:	a902      	add	r1, sp, #8
   d8368:	4668      	mov	r0, sp
   d836a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d836e:	f7ff fe1f 	bl	d7fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8372:	a802      	add	r0, sp, #8
   d8374:	f7ff fd7e 	bl	d7e74 <_ZN8particle5ErrorD1Ev>
   d8378:	e01d      	b.n	d83b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d837a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d837c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8380:	f04f 0201 	mov.w	r2, #1
   d8384:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8388:	42a3      	cmp	r3, r4
   d838a:	d103      	bne.n	d8394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d838c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8390:	2900      	cmp	r1, #0
   d8392:	d1f7      	bne.n	d8384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8394:	d002      	beq.n	d839c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8396:	f88d 3008 	strb.w	r3, [sp, #8]
   d839a:	e00c      	b.n	d83b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d839c:	f110 010c 	adds.w	r1, r0, #12
   d83a0:	f04f 0301 	mov.w	r3, #1
   d83a4:	bf18      	it	ne
   d83a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d83a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d83ac:	3004      	adds	r0, #4
   d83ae:	f800 3c03 	strb.w	r3, [r0, #-3]
   d83b2:	f7ff ff71 	bl	d8298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d83b6:	a801      	add	r0, sp, #4
   d83b8:	f7fc f92c 	bl	d4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d83bc:	b005      	add	sp, #20
   d83be:	bd30      	pop	{r4, r5, pc}

000d83c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d83c0:	4770      	bx	lr

000d83c2 <_ZN9IPAddressD0Ev>:
   d83c2:	b510      	push	{r4, lr}
   d83c4:	2118      	movs	r1, #24
   d83c6:	4604      	mov	r4, r0
   d83c8:	f000 ff8c 	bl	d92e4 <_ZdlPvj>
   d83cc:	4620      	mov	r0, r4
   d83ce:	bd10      	pop	{r4, pc}

000d83d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d83d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d83d2:	7d03      	ldrb	r3, [r0, #20]
   d83d4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d83d6:	b08d      	sub	sp, #52	; 0x34
   d83d8:	460e      	mov	r6, r1
   d83da:	f100 0704 	add.w	r7, r0, #4
   d83de:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d83e2:	d002      	beq.n	d83ea <_ZNK9IPAddress7printToER5Print+0x1a>
   d83e4:	f100 0508 	add.w	r5, r0, #8
   d83e8:	e018      	b.n	d841c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d83ea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83ec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d83ee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d83f2:	232f      	movs	r3, #47	; 0x2f
   d83f4:	462a      	mov	r2, r5
   d83f6:	200a      	movs	r0, #10
   d83f8:	f7fe fc7e 	bl	d6cf8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d83fc:	4628      	mov	r0, r5
   d83fe:	f003 fbf2 	bl	dbbe6 <strlen>
   d8402:	6833      	ldr	r3, [r6, #0]
   d8404:	4602      	mov	r2, r0
   d8406:	68db      	ldr	r3, [r3, #12]
   d8408:	4629      	mov	r1, r5
   d840a:	4630      	mov	r0, r6
   d840c:	4798      	blx	r3
   d840e:	e00f      	b.n	d8430 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8410:	b124      	cbz	r4, d841c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8412:	212e      	movs	r1, #46	; 0x2e
   d8414:	4630      	mov	r0, r6
   d8416:	f7ff fa73 	bl	d7900 <_ZN5Print5printEc>
   d841a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d841c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8420:	220a      	movs	r2, #10
   d8422:	4630      	mov	r0, r6
   d8424:	f7ff fa87 	bl	d7936 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8428:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d842a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d842c:	d1f0      	bne.n	d8410 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d842e:	4620      	mov	r0, r4
    }
    return n;
}
   d8430:	b00d      	add	sp, #52	; 0x34
   d8432:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8434 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8434:	b510      	push	{r4, lr}
   d8436:	4b05      	ldr	r3, [pc, #20]	; (d844c <_ZN9IPAddressC1Ev+0x18>)
   d8438:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d843a:	2211      	movs	r2, #17
   d843c:	f840 3b04 	str.w	r3, [r0], #4
   d8440:	2100      	movs	r1, #0
   d8442:	f003 fb73 	bl	dbb2c <memset>
{
    clear();
}
   d8446:	4620      	mov	r0, r4
   d8448:	bd10      	pop	{r4, pc}
   d844a:	bf00      	nop
   d844c:	000dd25c 	.word	0x000dd25c

000d8450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8450:	4603      	mov	r3, r0
   d8452:	4a07      	ldr	r2, [pc, #28]	; (d8470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8454:	b510      	push	{r4, lr}
   d8456:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d845a:	f101 0210 	add.w	r2, r1, #16
   d845e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8462:	f843 4b04 	str.w	r4, [r3], #4
   d8466:	4291      	cmp	r1, r2
   d8468:	d1f9      	bne.n	d845e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d846a:	780a      	ldrb	r2, [r1, #0]
   d846c:	701a      	strb	r2, [r3, #0]
}
   d846e:	bd10      	pop	{r4, pc}
   d8470:	000dd25c 	.word	0x000dd25c

000d8474 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d8474:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d8476:	2b04      	cmp	r3, #4
   d8478:	d101      	bne.n	d847e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d847a:	6840      	ldr	r0, [r0, #4]
   d847c:	e008      	b.n	d8490 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d847e:	2b06      	cmp	r3, #6
   d8480:	d10a      	bne.n	d8498 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8482:	6843      	ldr	r3, [r0, #4]
   d8484:	b953      	cbnz	r3, d849c <_ZNK9IPAddresscvbEv+0x28>
   d8486:	6883      	ldr	r3, [r0, #8]
   d8488:	b943      	cbnz	r3, d849c <_ZNK9IPAddresscvbEv+0x28>
   d848a:	68c3      	ldr	r3, [r0, #12]
   d848c:	b933      	cbnz	r3, d849c <_ZNK9IPAddresscvbEv+0x28>
   d848e:	6900      	ldr	r0, [r0, #16]
   d8490:	3000      	adds	r0, #0
   d8492:	bf18      	it	ne
   d8494:	2001      	movne	r0, #1
   d8496:	4770      	bx	lr
    } else {
        return false;
   d8498:	2000      	movs	r0, #0
   d849a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d849c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d849e:	4770      	bx	lr

000d84a0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d84a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d84a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d84a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d84aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d84ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d84b2:	2304      	movs	r3, #4
   d84b4:	6041      	str	r1, [r0, #4]
   d84b6:	7503      	strb	r3, [r0, #20]
   d84b8:	bd10      	pop	{r4, pc}

000d84ba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d84ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d84bc:	780d      	ldrb	r5, [r1, #0]
   d84be:	788b      	ldrb	r3, [r1, #2]
   d84c0:	784a      	ldrb	r2, [r1, #1]
   d84c2:	78c9      	ldrb	r1, [r1, #3]
   d84c4:	9100      	str	r1, [sp, #0]
   d84c6:	4629      	mov	r1, r5
   d84c8:	f7ff ffea 	bl	d84a0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d84cc:	b003      	add	sp, #12
   d84ce:	bd30      	pop	{r4, r5, pc}

000d84d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84d0:	7441      	strb	r1, [r0, #17]
   d84d2:	4770      	bx	lr

000d84d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d84d4:	4770      	bx	lr

000d84d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d84d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d84d8:	2100      	movs	r1, #0
   d84da:	7c00      	ldrb	r0, [r0, #16]
   d84dc:	f7fe fd0c 	bl	d6ef8 <HAL_USB_USART_Receive_Data>
}
   d84e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d84e4:	bf28      	it	cs
   d84e6:	f04f 30ff 	movcs.w	r0, #4294967295
   d84ea:	bd08      	pop	{r3, pc}

000d84ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d84ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d84ee:	2101      	movs	r1, #1
   d84f0:	7c00      	ldrb	r0, [r0, #16]
   d84f2:	f7fe fd01 	bl	d6ef8 <HAL_USB_USART_Receive_Data>
}
   d84f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d84fa:	bf28      	it	cs
   d84fc:	f04f 30ff 	movcs.w	r0, #4294967295
   d8500:	bd08      	pop	{r3, pc}

000d8502 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8502:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8504:	7c00      	ldrb	r0, [r0, #16]
   d8506:	f7fe fcef 	bl	d6ee8 <HAL_USB_USART_Available_Data_For_Write>
}
   d850a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d850e:	bd08      	pop	{r3, pc}

000d8510 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8510:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8512:	7c00      	ldrb	r0, [r0, #16]
   d8514:	f7fe fce0 	bl	d6ed8 <HAL_USB_USART_Available_Data>
}
   d8518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d851c:	bd08      	pop	{r3, pc}

000d851e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d851e:	7c00      	ldrb	r0, [r0, #16]
   d8520:	f7fe bcfa 	b.w	d6f18 <HAL_USB_USART_Flush_Data>

000d8524 <_ZN9USBSerialD0Ev>:
   d8524:	b510      	push	{r4, lr}
   d8526:	2114      	movs	r1, #20
   d8528:	4604      	mov	r4, r0
   d852a:	f000 fedb 	bl	d92e4 <_ZdlPvj>
   d852e:	4620      	mov	r0, r4
   d8530:	bd10      	pop	{r4, pc}

000d8532 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8532:	b538      	push	{r3, r4, r5, lr}
   d8534:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8536:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8538:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d853a:	f7fe fcd5 	bl	d6ee8 <HAL_USB_USART_Available_Data_For_Write>
   d853e:	2800      	cmp	r0, #0
   d8540:	dc01      	bgt.n	d8546 <_ZN9USBSerial5writeEh+0x14>
   d8542:	7c60      	ldrb	r0, [r4, #17]
   d8544:	b128      	cbz	r0, d8552 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8546:	4629      	mov	r1, r5
   d8548:	7c20      	ldrb	r0, [r4, #16]
   d854a:	f7fe fcdd 	bl	d6f08 <HAL_USB_USART_Send_Data>
   d854e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8552:	bd38      	pop	{r3, r4, r5, pc}

000d8554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8554:	b510      	push	{r4, lr}
   d8556:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8558:	2300      	movs	r3, #0
   d855a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d855c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8560:	60a3      	str	r3, [r4, #8]
   d8562:	4b05      	ldr	r3, [pc, #20]	; (d8578 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8564:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8566:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8568:	4608      	mov	r0, r1
{
  _serial = serial;
   d856a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d856c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d856e:	4611      	mov	r1, r2
   d8570:	f7fe fca2 	bl	d6eb8 <HAL_USB_USART_Init>
}
   d8574:	4620      	mov	r0, r4
   d8576:	bd10      	pop	{r4, pc}
   d8578:	000dd270 	.word	0x000dd270

000d857c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d857c:	2200      	movs	r2, #0
   d857e:	7c00      	ldrb	r0, [r0, #16]
   d8580:	f7fe bca2 	b.w	d6ec8 <HAL_USB_USART_Begin>

000d8584 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8584:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8586:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8588:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d858a:	2100      	movs	r1, #0
   d858c:	f003 face 	bl	dbb2c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8590:	4620      	mov	r0, r4
   d8592:	bd10      	pop	{r4, pc}

000d8594 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8594:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8596:	4d0e      	ldr	r5, [pc, #56]	; (d85d0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8598:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d859a:	a801      	add	r0, sp, #4
   d859c:	f7ff fff2 	bl	d8584 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d85a0:	6829      	ldr	r1, [r5, #0]
   d85a2:	f011 0401 	ands.w	r4, r1, #1
   d85a6:	d110      	bne.n	d85ca <_Z16_fetch_usbserialv+0x36>
   d85a8:	4628      	mov	r0, r5
   d85aa:	f7fb fd87 	bl	d40bc <__cxa_guard_acquire>
   d85ae:	b160      	cbz	r0, d85ca <_Z16_fetch_usbserialv+0x36>
   d85b0:	aa01      	add	r2, sp, #4
   d85b2:	4621      	mov	r1, r4
   d85b4:	4807      	ldr	r0, [pc, #28]	; (d85d4 <_Z16_fetch_usbserialv+0x40>)
   d85b6:	f7ff ffcd 	bl	d8554 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d85ba:	4628      	mov	r0, r5
   d85bc:	f7fb fd83 	bl	d40c6 <__cxa_guard_release>
   d85c0:	4a05      	ldr	r2, [pc, #20]	; (d85d8 <_Z16_fetch_usbserialv+0x44>)
   d85c2:	4906      	ldr	r1, [pc, #24]	; (d85dc <_Z16_fetch_usbserialv+0x48>)
   d85c4:	4803      	ldr	r0, [pc, #12]	; (d85d4 <_Z16_fetch_usbserialv+0x40>)
   d85c6:	f000 fe7f 	bl	d92c8 <__aeabi_atexit>
	return _usbserial;
}
   d85ca:	4802      	ldr	r0, [pc, #8]	; (d85d4 <_Z16_fetch_usbserialv+0x40>)
   d85cc:	b007      	add	sp, #28
   d85ce:	bd30      	pop	{r4, r5, pc}
   d85d0:	2003e3f0 	.word	0x2003e3f0
   d85d4:	2003e3f4 	.word	0x2003e3f4
   d85d8:	2003e148 	.word	0x2003e148
   d85dc:	000d84d5 	.word	0x000d84d5

000d85e0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d85e0:	4770      	bx	lr

000d85e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d85e2:	7441      	strb	r1, [r0, #17]
   d85e4:	4770      	bx	lr

000d85e6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d85e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d85e8:	7c00      	ldrb	r0, [r0, #16]
   d85ea:	f7fe fbd5 	bl	d6d98 <HAL_USART_Available_Data_For_Write>
}
   d85ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d85f2:	bd08      	pop	{r3, pc}

000d85f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d85f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d85f6:	7c00      	ldrb	r0, [r0, #16]
   d85f8:	f7fe fba6 	bl	d6d48 <HAL_USART_Available_Data>
}
   d85fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8600:	bd08      	pop	{r3, pc}

000d8602 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8602:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8604:	7c00      	ldrb	r0, [r0, #16]
   d8606:	f7fe fbaf 	bl	d6d68 <HAL_USART_Peek_Data>
}
   d860a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d860e:	bf28      	it	cs
   d8610:	f04f 30ff 	movcs.w	r0, #4294967295
   d8614:	bd08      	pop	{r3, pc}

000d8616 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8616:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8618:	7c00      	ldrb	r0, [r0, #16]
   d861a:	f7fe fb9d 	bl	d6d58 <HAL_USART_Read_Data>
}
   d861e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8622:	bf28      	it	cs
   d8624:	f04f 30ff 	movcs.w	r0, #4294967295
   d8628:	bd08      	pop	{r3, pc}

000d862a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d862a:	7c00      	ldrb	r0, [r0, #16]
   d862c:	f7fe bba4 	b.w	d6d78 <HAL_USART_Flush_Data>

000d8630 <_ZN11USARTSerialD0Ev>:
   d8630:	b510      	push	{r4, lr}
   d8632:	2114      	movs	r1, #20
   d8634:	4604      	mov	r4, r0
   d8636:	f000 fe55 	bl	d92e4 <_ZdlPvj>
   d863a:	4620      	mov	r0, r4
   d863c:	bd10      	pop	{r4, pc}

000d863e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d863e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8640:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8642:	4604      	mov	r4, r0
   d8644:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8646:	b925      	cbnz	r5, d8652 <_ZN11USARTSerial5writeEh+0x14>
   d8648:	7c00      	ldrb	r0, [r0, #16]
   d864a:	f7fe fba5 	bl	d6d98 <HAL_USART_Available_Data_For_Write>
   d864e:	2800      	cmp	r0, #0
   d8650:	dd05      	ble.n	d865e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8652:	4631      	mov	r1, r6
   d8654:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d865a:	f7fe bb6d 	b.w	d6d38 <HAL_USART_Write_Data>
  }
  return 0;
}
   d865e:	4628      	mov	r0, r5
   d8660:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8664:	b510      	push	{r4, lr}
   d8666:	4604      	mov	r4, r0
   d8668:	4608      	mov	r0, r1
   d866a:	4611      	mov	r1, r2
   d866c:	2200      	movs	r2, #0
   d866e:	6062      	str	r2, [r4, #4]
   d8670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8674:	60a2      	str	r2, [r4, #8]
   d8676:	4a05      	ldr	r2, [pc, #20]	; (d868c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8678:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d867a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d867c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d867e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8680:	461a      	mov	r2, r3
   d8682:	f7fe fb51 	bl	d6d28 <HAL_USART_Init>
}
   d8686:	4620      	mov	r0, r4
   d8688:	bd10      	pop	{r4, pc}
   d868a:	bf00      	nop
   d868c:	000dd2a0 	.word	0x000dd2a0

000d8690 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8690:	7c00      	ldrb	r0, [r0, #16]
   d8692:	f7fe bb79 	b.w	d6d88 <HAL_USART_Is_Enabled>
	...

000d8698 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8698:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d869a:	4d0c      	ldr	r5, [pc, #48]	; (d86cc <_Z22__fetch_global_Serial1v+0x34>)
   d869c:	6829      	ldr	r1, [r5, #0]
   d869e:	f011 0401 	ands.w	r4, r1, #1
   d86a2:	d111      	bne.n	d86c8 <_Z22__fetch_global_Serial1v+0x30>
   d86a4:	4628      	mov	r0, r5
   d86a6:	f7fb fd09 	bl	d40bc <__cxa_guard_acquire>
   d86aa:	b168      	cbz	r0, d86c8 <_Z22__fetch_global_Serial1v+0x30>
   d86ac:	4a08      	ldr	r2, [pc, #32]	; (d86d0 <_Z22__fetch_global_Serial1v+0x38>)
   d86ae:	4b09      	ldr	r3, [pc, #36]	; (d86d4 <_Z22__fetch_global_Serial1v+0x3c>)
   d86b0:	4809      	ldr	r0, [pc, #36]	; (d86d8 <_Z22__fetch_global_Serial1v+0x40>)
   d86b2:	4621      	mov	r1, r4
   d86b4:	f7ff ffd6 	bl	d8664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d86b8:	4628      	mov	r0, r5
   d86ba:	f7fb fd04 	bl	d40c6 <__cxa_guard_release>
   d86be:	4a07      	ldr	r2, [pc, #28]	; (d86dc <_Z22__fetch_global_Serial1v+0x44>)
   d86c0:	4907      	ldr	r1, [pc, #28]	; (d86e0 <_Z22__fetch_global_Serial1v+0x48>)
   d86c2:	4805      	ldr	r0, [pc, #20]	; (d86d8 <_Z22__fetch_global_Serial1v+0x40>)
   d86c4:	f000 fe00 	bl	d92c8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d86c8:	4803      	ldr	r0, [pc, #12]	; (d86d8 <_Z22__fetch_global_Serial1v+0x40>)
   d86ca:	bd38      	pop	{r3, r4, r5, pc}
   d86cc:	2003e4a0 	.word	0x2003e4a0
   d86d0:	2003e4a4 	.word	0x2003e4a4
   d86d4:	2003e41c 	.word	0x2003e41c
   d86d8:	2003e408 	.word	0x2003e408
   d86dc:	2003e148 	.word	0x2003e148
   d86e0:	000d85e1 	.word	0x000d85e1

000d86e4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d86e4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d86e6:	6883      	ldr	r3, [r0, #8]
   d86e8:	4604      	mov	r4, r0
   d86ea:	b90b      	cbnz	r3, d86f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d86ec:	f000 fe0d 	bl	d930a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86f0:	68c3      	ldr	r3, [r0, #12]
   d86f2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d86f4:	68a3      	ldr	r3, [r4, #8]
   d86f6:	b11b      	cbz	r3, d8700 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d86f8:	2203      	movs	r2, #3
   d86fa:	4621      	mov	r1, r4
   d86fc:	4620      	mov	r0, r4
   d86fe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8700:	4620      	mov	r0, r4
   d8702:	2110      	movs	r1, #16
}
   d8704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8708:	f000 bdec 	b.w	d92e4 <_ZdlPvj>

000d870c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d870c:	4770      	bx	lr

000d870e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d870e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8710:	4606      	mov	r6, r0
   d8712:	4615      	mov	r5, r2
   d8714:	460c      	mov	r4, r1
   d8716:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8718:	42bc      	cmp	r4, r7
   d871a:	d006      	beq.n	d872a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d871c:	6833      	ldr	r3, [r6, #0]
   d871e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8722:	689b      	ldr	r3, [r3, #8]
   d8724:	4630      	mov	r0, r6
   d8726:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8728:	e7f6      	b.n	d8718 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d872a:	4628      	mov	r0, r5
   d872c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d872e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d872e:	2200      	movs	r2, #0
   d8730:	7c00      	ldrb	r0, [r0, #16]
   d8732:	f7fe bb51 	b.w	d6dd8 <HAL_I2C_Write_Data>

000d8736 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8736:	2100      	movs	r1, #0
   d8738:	7c00      	ldrb	r0, [r0, #16]
   d873a:	f7fe bb55 	b.w	d6de8 <HAL_I2C_Available_Data>

000d873e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d873e:	2100      	movs	r1, #0
   d8740:	7c00      	ldrb	r0, [r0, #16]
   d8742:	f7fe bb59 	b.w	d6df8 <HAL_I2C_Read_Data>

000d8746 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8746:	2100      	movs	r1, #0
   d8748:	7c00      	ldrb	r0, [r0, #16]
   d874a:	f7fe bb5d 	b.w	d6e08 <HAL_I2C_Peek_Data>

000d874e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d874e:	2100      	movs	r1, #0
   d8750:	7c00      	ldrb	r0, [r0, #16]
   d8752:	f7fe bb61 	b.w	d6e18 <HAL_I2C_Flush_Data>

000d8756 <_ZN7TwoWireD0Ev>:
   d8756:	b510      	push	{r4, lr}
   d8758:	2114      	movs	r1, #20
   d875a:	4604      	mov	r4, r0
   d875c:	f000 fdc2 	bl	d92e4 <_ZdlPvj>
   d8760:	4620      	mov	r0, r4
   d8762:	bd10      	pop	{r4, pc}

000d8764 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8764:	b510      	push	{r4, lr}
   d8766:	4604      	mov	r4, r0
   d8768:	2300      	movs	r3, #0
   d876a:	6063      	str	r3, [r4, #4]
   d876c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8770:	60a3      	str	r3, [r4, #8]
   d8772:	4b04      	ldr	r3, [pc, #16]	; (d8784 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8774:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8776:	4608      	mov	r0, r1
   d8778:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d877a:	4611      	mov	r1, r2
   d877c:	f7fe fb5c 	bl	d6e38 <HAL_I2C_Init>
}
   d8780:	4620      	mov	r0, r4
   d8782:	bd10      	pop	{r4, pc}
   d8784:	000dd2d0 	.word	0x000dd2d0

000d8788 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8788:	2300      	movs	r3, #0
   d878a:	461a      	mov	r2, r3
   d878c:	4619      	mov	r1, r3
   d878e:	7c00      	ldrb	r0, [r0, #16]
   d8790:	f7fe bb0a 	b.w	d6da8 <HAL_I2C_Begin>

000d8794 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8794:	b570      	push	{r4, r5, r6, lr}
   d8796:	460c      	mov	r4, r1
   d8798:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d879a:	2514      	movs	r5, #20
   d879c:	4606      	mov	r6, r0
   d879e:	462a      	mov	r2, r5
   d87a0:	2100      	movs	r1, #0
   d87a2:	a801      	add	r0, sp, #4
   d87a4:	f003 f9c2 	bl	dbb2c <memset>
   d87a8:	7823      	ldrb	r3, [r4, #0]
   d87aa:	f88d 3008 	strb.w	r3, [sp, #8]
   d87ae:	6863      	ldr	r3, [r4, #4]
   d87b0:	9303      	str	r3, [sp, #12]
   d87b2:	68e3      	ldr	r3, [r4, #12]
   d87b4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d87b6:	2200      	movs	r2, #0
   d87b8:	7a23      	ldrb	r3, [r4, #8]
   d87ba:	7c30      	ldrb	r0, [r6, #16]
   d87bc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d87c0:	a901      	add	r1, sp, #4
   d87c2:	9305      	str	r3, [sp, #20]
   d87c4:	f7fe fb40 	bl	d6e48 <HAL_I2C_Request_Data_Ex>
}
   d87c8:	b006      	add	sp, #24
   d87ca:	bd70      	pop	{r4, r5, r6, pc}

000d87cc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d87cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d87ce:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d87d0:	f88d 1000 	strb.w	r1, [sp]
   d87d4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d87d8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d87da:	bf18      	it	ne
   d87dc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d87de:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d87e0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d87e2:	f88d 3008 	strb.w	r3, [sp, #8]
   d87e6:	f7ff ffd5 	bl	d8794 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d87ea:	b005      	add	sp, #20
   d87ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d87f0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d87f0:	2301      	movs	r3, #1
   d87f2:	f7ff bfeb 	b.w	d87cc <_ZN7TwoWire11requestFromEhjh>

000d87f6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d87f6:	2200      	movs	r2, #0
   d87f8:	7c00      	ldrb	r0, [r0, #16]
   d87fa:	f7fe badd 	b.w	d6db8 <HAL_I2C_Begin_Transmission>

000d87fe <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d87fe:	b2c9      	uxtb	r1, r1
   d8800:	f7ff bff9 	b.w	d87f6 <_ZN7TwoWire17beginTransmissionEh>

000d8804 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8804:	2200      	movs	r2, #0
   d8806:	7c00      	ldrb	r0, [r0, #16]
   d8808:	f7fe bade 	b.w	d6dc8 <HAL_I2C_End_Transmission>

000d880c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d880c:	2101      	movs	r1, #1
   d880e:	f7ff bff9 	b.w	d8804 <_ZN7TwoWire15endTransmissionEh>

000d8812 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8812:	2100      	movs	r1, #0
   d8814:	7c00      	ldrb	r0, [r0, #16]
   d8816:	f7fe bb07 	b.w	d6e28 <HAL_I2C_Is_Enabled>

000d881a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d881a:	2200      	movs	r2, #0
   d881c:	4611      	mov	r1, r2
   d881e:	6840      	ldr	r0, [r0, #4]
   d8820:	f7fe bc0e 	b.w	d7040 <network_listening>

000d8824 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8824:	2200      	movs	r2, #0
   d8826:	4611      	mov	r1, r2
   d8828:	6840      	ldr	r0, [r0, #4]
   d882a:	f7fe bc19 	b.w	d7060 <network_get_listen_timeout>

000d882e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d882e:	2200      	movs	r2, #0
   d8830:	6840      	ldr	r0, [r0, #4]
   d8832:	f7fe bc0d 	b.w	d7050 <network_set_listen_timeout>

000d8836 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8836:	2200      	movs	r2, #0
   d8838:	f081 0101 	eor.w	r1, r1, #1
   d883c:	6840      	ldr	r0, [r0, #4]
   d883e:	f7fe bbf7 	b.w	d7030 <network_listen>

000d8842 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8842:	2300      	movs	r3, #0
   d8844:	461a      	mov	r2, r3
   d8846:	2101      	movs	r1, #1
   d8848:	6840      	ldr	r0, [r0, #4]
   d884a:	f7fe bbe9 	b.w	d7020 <network_off>

000d884e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d884e:	2300      	movs	r3, #0
   d8850:	461a      	mov	r2, r3
   d8852:	4619      	mov	r1, r3
   d8854:	6840      	ldr	r0, [r0, #4]
   d8856:	f7fe bbdb 	b.w	d7010 <network_on>

000d885a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d885a:	2200      	movs	r2, #0
   d885c:	4611      	mov	r1, r2
   d885e:	6840      	ldr	r0, [r0, #4]
   d8860:	f7fe bbce 	b.w	d7000 <network_ready>

000d8864 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8864:	2200      	movs	r2, #0
   d8866:	4611      	mov	r1, r2
   d8868:	6840      	ldr	r0, [r0, #4]
   d886a:	f7fe bbb9 	b.w	d6fe0 <network_connecting>

000d886e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d886e:	2200      	movs	r2, #0
   d8870:	2102      	movs	r1, #2
   d8872:	6840      	ldr	r0, [r0, #4]
   d8874:	f7fe bbbc 	b.w	d6ff0 <network_disconnect>

000d8878 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8878:	2300      	movs	r3, #0
   d887a:	461a      	mov	r2, r3
   d887c:	6840      	ldr	r0, [r0, #4]
   d887e:	f7fe bba7 	b.w	d6fd0 <network_connect>

000d8882 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8882:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8884:	4605      	mov	r5, r0
   d8886:	b188      	cbz	r0, d88ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8888:	6804      	ldr	r4, [r0, #0]
   d888a:	b14c      	cbz	r4, d88a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d888c:	68a3      	ldr	r3, [r4, #8]
   d888e:	b11b      	cbz	r3, d8898 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8890:	2203      	movs	r2, #3
   d8892:	4621      	mov	r1, r4
   d8894:	4620      	mov	r0, r4
   d8896:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8898:	2110      	movs	r1, #16
   d889a:	4620      	mov	r0, r4
   d889c:	f000 fd22 	bl	d92e4 <_ZdlPvj>
   d88a0:	4628      	mov	r0, r5
   d88a2:	2114      	movs	r1, #20
      }
   d88a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d88a8:	f000 bd1c 	b.w	d92e4 <_ZdlPvj>
   d88ac:	bd38      	pop	{r3, r4, r5, pc}

000d88ae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d88ae:	b110      	cbz	r0, d88b6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d88b0:	6803      	ldr	r3, [r0, #0]
   d88b2:	685b      	ldr	r3, [r3, #4]
   d88b4:	4718      	bx	r3
   d88b6:	4770      	bx	lr

000d88b8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d88b8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d88ba:	6803      	ldr	r3, [r0, #0]
   d88bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d88be:	b1bb      	cbz	r3, d88f0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d88c0:	6858      	ldr	r0, [r3, #4]
   d88c2:	f7fe f9f1 	bl	d6ca8 <os_thread_is_current>
   d88c6:	b978      	cbnz	r0, d88e8 <_ZN6ThreadD1Ev+0x30>
   d88c8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d88ca:	7c5a      	ldrb	r2, [r3, #17]
   d88cc:	b912      	cbnz	r2, d88d4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d88ce:	6858      	ldr	r0, [r3, #4]
   d88d0:	f7fe f9f2 	bl	d6cb8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d88d4:	6823      	ldr	r3, [r4, #0]
   d88d6:	6858      	ldr	r0, [r3, #4]
   d88d8:	f7fe f9f6 	bl	d6cc8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88dc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d88de:	2300      	movs	r3, #0
   d88e0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d88e2:	b128      	cbz	r0, d88f0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d88e4:	f7ff ffcd 	bl	d8882 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d88e8:	6820      	ldr	r0, [r4, #0]
   d88ea:	b108      	cbz	r0, d88f0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d88ec:	f7ff ffc9 	bl	d8882 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d88f0:	4620      	mov	r0, r4
   d88f2:	bd10      	pop	{r4, pc}

000d88f4 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d88f4:	b538      	push	{r3, r4, r5, lr}
   d88f6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d88f8:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d88fc:	b108      	cbz	r0, d8902 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d88fe:	f7fb fbd0 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8902:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8906:	b108      	cbz	r0, d890c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8908:	f7fe f9ee 	bl	d6ce8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d890c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8910:	b135      	cbz	r5, d8920 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8912:	4628      	mov	r0, r5
   d8914:	f7ff ffd0 	bl	d88b8 <_ZN6ThreadD1Ev>
   d8918:	2104      	movs	r1, #4
   d891a:	4628      	mov	r0, r5
   d891c:	f000 fce2 	bl	d92e4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8920:	6820      	ldr	r0, [r4, #0]
   d8922:	b108      	cbz	r0, d8928 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8924:	f7ff ffc3 	bl	d88ae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8928:	4620      	mov	r0, r4
   d892a:	bd38      	pop	{r3, r4, r5, pc}

000d892c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d892c:	b510      	push	{r4, lr}
   d892e:	4b04      	ldr	r3, [pc, #16]	; (d8940 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8930:	4604      	mov	r4, r0
   d8932:	f840 3b08 	str.w	r3, [r0], #8
   d8936:	f7ff ffdd 	bl	d88f4 <_ZN5spark11MeshPublishD1Ev>
   d893a:	4620      	mov	r0, r4
   d893c:	bd10      	pop	{r4, pc}
   d893e:	bf00      	nop
   d8940:	000dd2f8 	.word	0x000dd2f8

000d8944 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8944:	b538      	push	{r3, r4, r5, lr}
   d8946:	4c0e      	ldr	r4, [pc, #56]	; (d8980 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8948:	4b0e      	ldr	r3, [pc, #56]	; (d8984 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d894a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d894c:	2500      	movs	r5, #0
   d894e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8950:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8954:	6063      	str	r3, [r4, #4]
   d8956:	60a5      	str	r5, [r4, #8]
   d8958:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d895c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8960:	f7fe f9ba 	bl	d6cd8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8964:	4b08      	ldr	r3, [pc, #32]	; (d8988 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8966:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d896a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d896e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8970:	4620      	mov	r0, r4
   d8972:	4a06      	ldr	r2, [pc, #24]	; (d898c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8974:	4906      	ldr	r1, [pc, #24]	; (d8990 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d897a:	f000 bca5 	b.w	d92c8 <__aeabi_atexit>
   d897e:	bf00      	nop
   d8980:	2003e528 	.word	0x2003e528
   d8984:	000dd3e0 	.word	0x000dd3e0
   d8988:	000dd2f8 	.word	0x000dd2f8
   d898c:	2003e148 	.word	0x2003e148
   d8990:	000d892d 	.word	0x000d892d

000d8994 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8996:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8998:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d899a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d899e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d89a0:	2201      	movs	r2, #1
   d89a2:	f04f 33ff 	mov.w	r3, #4294967295
   d89a6:	4621      	mov	r1, r4
   d89a8:	47a8      	blx	r5
}
   d89aa:	b003      	add	sp, #12
   d89ac:	bd30      	pop	{r4, r5, pc}

000d89ae <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d89ae:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d89b0:	6803      	ldr	r3, [r0, #0]
   d89b2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d89b4:	f04f 33ff 	mov.w	r3, #4294967295
   d89b8:	46a4      	mov	ip, r4
}
   d89ba:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d89be:	4760      	bx	ip

000d89c0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d89c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d89c2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d89c4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d89c6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d89ca:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d89cc:	4621      	mov	r1, r4
   d89ce:	4613      	mov	r3, r2
   d89d0:	2201      	movs	r2, #1
   d89d2:	47a8      	blx	r5
}
   d89d4:	b003      	add	sp, #12
   d89d6:	bd30      	pop	{r4, r5, pc}

000d89d8 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d89d8:	4770      	bx	lr

000d89da <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d89da:	b538      	push	{r3, r4, r5, lr}
   d89dc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d89de:	681a      	ldr	r2, [r3, #0]
   d89e0:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d89e2:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d89e4:	da05      	bge.n	d89f2 <_ZN9TCPClient9connectedEv+0x18>
   d89e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d89ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d89ee:	429a      	cmp	r2, r3
   d89f0:	d001      	beq.n	d89f6 <_ZN9TCPClient9connectedEv+0x1c>
   d89f2:	2501      	movs	r5, #1
   d89f4:	e00b      	b.n	d8a0e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d89f6:	6803      	ldr	r3, [r0, #0]
   d89f8:	691b      	ldr	r3, [r3, #16]
   d89fa:	4798      	blx	r3
   d89fc:	2800      	cmp	r0, #0
   d89fe:	bf14      	ite	ne
   d8a00:	2501      	movne	r5, #1
   d8a02:	2500      	moveq	r5, #0
        if (!rv) {
   d8a04:	d103      	bne.n	d8a0e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d8a06:	6823      	ldr	r3, [r4, #0]
   d8a08:	4620      	mov	r0, r4
   d8a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a0c:	4798      	blx	r3
        }
    }
    return rv;
}
   d8a0e:	4628      	mov	r0, r5
   d8a10:	bd38      	pop	{r3, r4, r5, pc}

000d8a12 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8a12:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d8a14:	6818      	ldr	r0, [r3, #0]
}
   d8a16:	43c0      	mvns	r0, r0
   d8a18:	0fc0      	lsrs	r0, r0, #31
   d8a1a:	4770      	bx	lr

000d8a1c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8a1c:	4770      	bx	lr

000d8a1e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8a1e:	2000      	movs	r0, #0
   d8a20:	4770      	bx	lr

000d8a22 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8a22:	b510      	push	{r4, lr}
   d8a24:	2114      	movs	r1, #20
   d8a26:	4604      	mov	r4, r0
   d8a28:	f000 fc5c 	bl	d92e4 <_ZdlPvj>
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	bd10      	pop	{r4, pc}

000d8a30 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8a30:	f7fb bb35 	b.w	d409e <_ZdlPv>

000d8a34 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8a36:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d8a38:	2200      	movs	r2, #0
   d8a3a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8a3c:	9202      	str	r2, [sp, #8]
   d8a3e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8a40:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8a42:	4604      	mov	r4, r0
   d8a44:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8a46:	d008      	beq.n	d8a5a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d8a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8a4c:	fbb3 f1f2 	udiv	r1, r3, r2
   d8a50:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8a52:	fb02 3111 	mls	r1, r2, r1, r3
   d8a56:	434a      	muls	r2, r1
   d8a58:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8a5a:	6960      	ldr	r0, [r4, #20]
   d8a5c:	2308      	movs	r3, #8
   d8a5e:	9300      	str	r3, [sp, #0]
   d8a60:	f241 0205 	movw	r2, #4101	; 0x1005
   d8a64:	446b      	add	r3, sp
   d8a66:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8a6a:	6800      	ldr	r0, [r0, #0]
   d8a6c:	f7fe f9f4 	bl	d6e58 <sock_setsockopt>
    if (ret < 0) {
   d8a70:	2800      	cmp	r0, #0
   d8a72:	db08      	blt.n	d8a86 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8a74:	6960      	ldr	r0, [r4, #20]
   d8a76:	2300      	movs	r3, #0
   d8a78:	4632      	mov	r2, r6
   d8a7a:	4629      	mov	r1, r5
   d8a7c:	6800      	ldr	r0, [r0, #0]
   d8a7e:	f7fe fa0b 	bl	d6e98 <sock_send>
    if (ret < 0) {
   d8a82:	2800      	cmp	r0, #0
   d8a84:	da04      	bge.n	d8a90 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d8a86:	f7fe fb73 	bl	d7170 <__errno>
   d8a8a:	6803      	ldr	r3, [r0, #0]
   d8a8c:	6063      	str	r3, [r4, #4]
   d8a8e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8a90:	b004      	add	sp, #16
   d8a92:	bd70      	pop	{r4, r5, r6, pc}

000d8a94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8a94:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8a96:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8a98:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8a9a:	689b      	ldr	r3, [r3, #8]
   d8a9c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8a9e:	68a3      	ldr	r3, [r4, #8]
   d8aa0:	3b01      	subs	r3, #1
   d8aa2:	60a3      	str	r3, [r4, #8]
   d8aa4:	b92b      	cbnz	r3, d8ab2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d8aa6:	6823      	ldr	r3, [r4, #0]
   d8aa8:	4620      	mov	r0, r4
   d8aaa:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8ab0:	4718      	bx	r3
   d8ab2:	bd10      	pop	{r4, pc}

000d8ab4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8ab4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8ab6:	4604      	mov	r4, r0
   d8ab8:	694d      	ldr	r5, [r1, #20]
   d8aba:	4b05      	ldr	r3, [pc, #20]	; (d8ad0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8abc:	f844 3b04 	str.w	r3, [r4], #4
   d8ac0:	358c      	adds	r5, #140	; 0x8c
   d8ac2:	4606      	mov	r6, r0
   d8ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ac8:	682b      	ldr	r3, [r5, #0]
   d8aca:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8acc:	4630      	mov	r0, r6
   d8ace:	bd70      	pop	{r4, r5, r6, pc}
   d8ad0:	000dd25c 	.word	0x000dd25c

000d8ad4 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8ad4:	b510      	push	{r4, lr}
   d8ad6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8ad8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8adc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8ae0:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8ae2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8ae4:	d005      	beq.n	d8af2 <_ZN9TCPClient4peekEv+0x1e>
   d8ae6:	6962      	ldr	r2, [r4, #20]
   d8ae8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8aec:	4413      	add	r3, r2
   d8aee:	7918      	ldrb	r0, [r3, #4]
   d8af0:	bd10      	pop	{r4, pc}
   d8af2:	6803      	ldr	r3, [r0, #0]
   d8af4:	691b      	ldr	r3, [r3, #16]
   d8af6:	4798      	blx	r3
   d8af8:	2800      	cmp	r0, #0
   d8afa:	d1f4      	bne.n	d8ae6 <_ZN9TCPClient4peekEv+0x12>
   d8afc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8b00:	bd10      	pop	{r4, pc}

000d8b02 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8b02:	b510      	push	{r4, lr}
   d8b04:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8b06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b0a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b0e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8b10:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8b12:	d008      	beq.n	d8b26 <_ZN9TCPClient4readEv+0x24>
   d8b14:	6962      	ldr	r2, [r4, #20]
   d8b16:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8b1a:	1c59      	adds	r1, r3, #1
   d8b1c:	4413      	add	r3, r2
   d8b1e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8b22:	7918      	ldrb	r0, [r3, #4]
   d8b24:	bd10      	pop	{r4, pc}
   d8b26:	6803      	ldr	r3, [r0, #0]
   d8b28:	691b      	ldr	r3, [r3, #16]
   d8b2a:	4798      	blx	r3
   d8b2c:	2800      	cmp	r0, #0
   d8b2e:	d1f1      	bne.n	d8b14 <_ZN9TCPClient4readEv+0x12>
   d8b30:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8b34:	bd10      	pop	{r4, pc}

000d8b36 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b38:	6943      	ldr	r3, [r0, #20]
   d8b3a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8b3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b44:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8b46:	4605      	mov	r5, r0
   d8b48:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d8b4a:	d106      	bne.n	d8b5a <_ZN9TCPClient4readEPhj+0x24>
   d8b4c:	6803      	ldr	r3, [r0, #0]
   d8b4e:	691b      	ldr	r3, [r3, #16]
   d8b50:	4798      	blx	r3
   d8b52:	b910      	cbnz	r0, d8b5a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8b54:	f04f 34ff 	mov.w	r4, #4294967295
   d8b58:	e014      	b.n	d8b84 <_ZN9TCPClient4readEPhj+0x4e>
   d8b5a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8b5c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8b60:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8b64:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8b66:	42bc      	cmp	r4, r7
   d8b68:	bf28      	it	cs
   d8b6a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8b6c:	4419      	add	r1, r3
   d8b6e:	4622      	mov	r2, r4
   d8b70:	3104      	adds	r1, #4
   d8b72:	4630      	mov	r0, r6
   d8b74:	f002 ffb4 	bl	dbae0 <memcpy>
   d8b78:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8b7a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8b7e:	4423      	add	r3, r4
   d8b80:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8b84:	4620      	mov	r0, r4
   d8b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8b88 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b8c:	4698      	mov	r8, r3
    stop();
   d8b8e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8b90:	b093      	sub	sp, #76	; 0x4c
    stop();
   d8b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8b94:	460d      	mov	r5, r1
   d8b96:	4606      	mov	r6, r0
   d8b98:	4617      	mov	r7, r2
    stop();
   d8b9a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8b9c:	ab12      	add	r3, sp, #72	; 0x48
   d8b9e:	2400      	movs	r4, #0
   d8ba0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8ba4:	4622      	mov	r2, r4
   d8ba6:	4621      	mov	r1, r4
   d8ba8:	4628      	mov	r0, r5
   d8baa:	f7fd ffad 	bl	d6b08 <netdb_getaddrinfo>
   d8bae:	4681      	mov	r9, r0
   d8bb0:	2800      	cmp	r0, #0
   d8bb2:	d13d      	bne.n	d8c30 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8bb4:	9b00      	ldr	r3, [sp, #0]
   d8bb6:	2b00      	cmp	r3, #0
   d8bb8:	d056      	beq.n	d8c68 <_ZN9TCPClient7connectEPKctm+0xe0>
   d8bba:	695b      	ldr	r3, [r3, #20]
   d8bbc:	2b00      	cmp	r3, #0
   d8bbe:	d053      	beq.n	d8c68 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d8bc0:	a806      	add	r0, sp, #24
   d8bc2:	f7ff fc37 	bl	d8434 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8bc6:	9b00      	ldr	r3, [sp, #0]
   d8bc8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8bca:	7863      	ldrb	r3, [r4, #1]
   d8bcc:	2b02      	cmp	r3, #2
   d8bce:	d101      	bne.n	d8bd4 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8bd0:	1d21      	adds	r1, r4, #4
   d8bd2:	e013      	b.n	d8bfc <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8bd4:	2b0a      	cmp	r3, #10
   d8bd6:	d114      	bne.n	d8c02 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8bd8:	2211      	movs	r2, #17
   d8bda:	4649      	mov	r1, r9
   d8bdc:	a801      	add	r0, sp, #4
   d8bde:	f002 ffa5 	bl	dbb2c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8be2:	68a3      	ldr	r3, [r4, #8]
   d8be4:	bb33      	cbnz	r3, d8c34 <_ZN9TCPClient7connectEPKctm+0xac>
   d8be6:	68e3      	ldr	r3, [r4, #12]
   d8be8:	bb23      	cbnz	r3, d8c34 <_ZN9TCPClient7connectEPKctm+0xac>
   d8bea:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8bee:	6925      	ldr	r5, [r4, #16]
   d8bf0:	f7fe f88a 	bl	d6d08 <inet_htonl>
   d8bf4:	4285      	cmp	r5, r0
   d8bf6:	d11d      	bne.n	d8c34 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8bf8:	f104 0114 	add.w	r1, r4, #20
   d8bfc:	a806      	add	r0, sp, #24
   d8bfe:	f7ff fc5c 	bl	d84ba <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8c02:	a806      	add	r0, sp, #24
   d8c04:	f7ff fc36 	bl	d8474 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8c08:	2800      	cmp	r0, #0
   d8c0a:	d02d      	beq.n	d8c68 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8c0c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8c0e:	ad07      	add	r5, sp, #28
   d8c10:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8c14:	4b18      	ldr	r3, [pc, #96]	; (d8c78 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d8c16:	930c      	str	r3, [sp, #48]	; 0x30
   d8c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c1a:	ac0d      	add	r4, sp, #52	; 0x34
   d8c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c1e:	682b      	ldr	r3, [r5, #0]
   d8c20:	7023      	strb	r3, [r4, #0]
   d8c22:	463a      	mov	r2, r7
   d8c24:	4643      	mov	r3, r8
   d8c26:	a90c      	add	r1, sp, #48	; 0x30
   d8c28:	4630      	mov	r0, r6
   d8c2a:	47c8      	blx	r9
   d8c2c:	4681      	mov	r9, r0
   d8c2e:	e01b      	b.n	d8c68 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8c30:	46a1      	mov	r9, r4
   d8c32:	e019      	b.n	d8c68 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8c34:	f104 0308 	add.w	r3, r4, #8
   d8c38:	ad01      	add	r5, sp, #4
   d8c3a:	3418      	adds	r4, #24
   d8c3c:	6818      	ldr	r0, [r3, #0]
   d8c3e:	6859      	ldr	r1, [r3, #4]
   d8c40:	462a      	mov	r2, r5
   d8c42:	c203      	stmia	r2!, {r0, r1}
   d8c44:	3308      	adds	r3, #8
   d8c46:	42a3      	cmp	r3, r4
   d8c48:	4615      	mov	r5, r2
   d8c4a:	d1f7      	bne.n	d8c3c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d8c4c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8c4e:	a901      	add	r1, sp, #4
   d8c50:	a80c      	add	r0, sp, #48	; 0x30
   d8c52:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8c54:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8c58:	f7ff fbfa 	bl	d8450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c5e:	ac07      	add	r4, sp, #28
   d8c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c62:	682b      	ldr	r3, [r5, #0]
   d8c64:	7023      	strb	r3, [r4, #0]
   d8c66:	e7cc      	b.n	d8c02 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8c68:	9800      	ldr	r0, [sp, #0]
   d8c6a:	f7fd ff45 	bl	d6af8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d8c6e:	4648      	mov	r0, r9
   d8c70:	b013      	add	sp, #76	; 0x4c
   d8c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8c76:	bf00      	nop
   d8c78:	000dd25c 	.word	0x000dd25c

000d8c7c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d8c7c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8c7e:	2300      	movs	r3, #0
   d8c80:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8c84:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8c86:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d8c8a:	4770      	bx	lr

000d8c8c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c90:	461e      	mov	r6, r3
    stop();
   d8c92:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c94:	460c      	mov	r4, r1
   d8c96:	b08a      	sub	sp, #40	; 0x28
    stop();
   d8c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c9a:	4605      	mov	r5, r0
   d8c9c:	4617      	mov	r7, r2
    stop();
   d8c9e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8ca0:	7d23      	ldrb	r3, [r4, #20]
   d8ca2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8ca6:	2b04      	cmp	r3, #4
   d8ca8:	bf0c      	ite	eq
   d8caa:	2002      	moveq	r0, #2
   d8cac:	200a      	movne	r0, #10
   d8cae:	2206      	movs	r2, #6
   d8cb0:	2101      	movs	r1, #1
   d8cb2:	f7fe f8f9 	bl	d6ea8 <sock_socket>
   d8cb6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8cba:	696b      	ldr	r3, [r5, #20]
   d8cbc:	681b      	ldr	r3, [r3, #0]
   d8cbe:	2b00      	cmp	r3, #0
   d8cc0:	db18      	blt.n	d8cf4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d8cc2:	4628      	mov	r0, r5
   d8cc4:	f7ff ffda 	bl	d8c7c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d8cc8:	b1d6      	cbz	r6, d8d00 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d8cca:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8ccc:	a903      	add	r1, sp, #12
   d8cce:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8cd0:	9303      	str	r3, [sp, #12]
   d8cd2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8cd6:	f7fd ffb7 	bl	d6c48 <if_index_to_name>
   d8cda:	b958      	cbnz	r0, d8cf4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8cdc:	6968      	ldr	r0, [r5, #20]
   d8cde:	2306      	movs	r3, #6
   d8ce0:	9300      	str	r3, [sp, #0]
   d8ce2:	f241 020b 	movw	r2, #4107	; 0x100b
   d8ce6:	ab03      	add	r3, sp, #12
   d8ce8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8cec:	6800      	ldr	r0, [r0, #0]
   d8cee:	f7fe f8b3 	bl	d6e58 <sock_setsockopt>
   d8cf2:	b128      	cbz	r0, d8d00 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8cf4:	682b      	ldr	r3, [r5, #0]
   d8cf6:	4628      	mov	r0, r5
   d8cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8cfa:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8cfc:	4798      	blx	r3
   d8cfe:	e03b      	b.n	d8d78 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8d00:	261c      	movs	r6, #28
   d8d02:	4632      	mov	r2, r6
   d8d04:	2100      	movs	r1, #0
   d8d06:	a803      	add	r0, sp, #12
   d8d08:	f002 ff10 	bl	dbb2c <memset>
    if (ip.version() == 4) {
   d8d0c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8d0e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8d12:	2b04      	cmp	r3, #4
   d8d14:	d10c      	bne.n	d8d30 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8d16:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8d18:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8d1a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8d1e:	f7fd fffb 	bl	d6d18 <inet_htons>
   d8d22:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8d26:	6860      	ldr	r0, [r4, #4]
   d8d28:	f7fd ffee 	bl	d6d08 <inet_htonl>
   d8d2c:	9004      	str	r0, [sp, #16]
   d8d2e:	e013      	b.n	d8d58 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8d30:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d8d32:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8d34:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d8d38:	f7fd ffee 	bl	d6d18 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8d3c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8d3e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8d42:	1d23      	adds	r3, r4, #4
   d8d44:	f104 0714 	add.w	r7, r4, #20
   d8d48:	6818      	ldr	r0, [r3, #0]
   d8d4a:	6859      	ldr	r1, [r3, #4]
   d8d4c:	4632      	mov	r2, r6
   d8d4e:	c203      	stmia	r2!, {r0, r1}
   d8d50:	3308      	adds	r3, #8
   d8d52:	42bb      	cmp	r3, r7
   d8d54:	4616      	mov	r6, r2
   d8d56:	d1f7      	bne.n	d8d48 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8d58:	696b      	ldr	r3, [r5, #20]
   d8d5a:	221c      	movs	r2, #28
   d8d5c:	a903      	add	r1, sp, #12
   d8d5e:	6818      	ldr	r0, [r3, #0]
   d8d60:	f7fe f88a 	bl	d6e78 <sock_connect>
   d8d64:	2800      	cmp	r0, #0
   d8d66:	d1c5      	bne.n	d8cf4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d8d68:	3404      	adds	r4, #4
   d8d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8d6c:	696d      	ldr	r5, [r5, #20]
   d8d6e:	358c      	adds	r5, #140	; 0x8c
   d8d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8d72:	6823      	ldr	r3, [r4, #0]
   d8d74:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d8d76:	2401      	movs	r4, #1
}
   d8d78:	4620      	mov	r0, r4
   d8d7a:	b00a      	add	sp, #40	; 0x28
   d8d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8d80 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8d80:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8d82:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8d84:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8d86:	6818      	ldr	r0, [r3, #0]
   d8d88:	2800      	cmp	r0, #0
   d8d8a:	db01      	blt.n	d8d90 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8d8c:	f7fe f86c 	bl	d6e68 <sock_close>
   d8d90:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8d92:	f04f 32ff 	mov.w	r2, #4294967295
   d8d96:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8d98:	6960      	ldr	r0, [r4, #20]
   d8d9a:	2211      	movs	r2, #17
   d8d9c:	2100      	movs	r1, #0
   d8d9e:	308c      	adds	r0, #140	; 0x8c
   d8da0:	f002 fec4 	bl	dbb2c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8da4:	4620      	mov	r0, r4
}
   d8da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8daa:	f7ff bf67 	b.w	d8c7c <_ZN9TCPClient12flush_bufferEv>
	...

000d8db0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8db0:	b530      	push	{r4, r5, lr}
   d8db2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8db4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8db8:	b08b      	sub	sp, #44	; 0x2c
   d8dba:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8dbc:	b11b      	cbz	r3, d8dc6 <_ZN9TCPClient9availableEv+0x16>
   d8dbe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8dc2:	429a      	cmp	r2, r3
   d8dc4:	d040      	beq.n	d8e48 <_ZN9TCPClient9availableEv+0x98>
   d8dc6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8dc8:	6818      	ldr	r0, [r3, #0]
   d8dca:	2800      	cmp	r0, #0
   d8dcc:	db3f      	blt.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8dce:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d8dd2:	2d7f      	cmp	r5, #127	; 0x7f
   d8dd4:	d83b      	bhi.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8dd6:	1d19      	adds	r1, r3, #4
   d8dd8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8ddc:	2308      	movs	r3, #8
   d8dde:	4429      	add	r1, r5
   d8de0:	f7fe f852 	bl	d6e88 <sock_recv>
            if (ret > 0) {
   d8de4:	2800      	cmp	r0, #0
   d8de6:	dd0c      	ble.n	d8e02 <_ZN9TCPClient9availableEv+0x52>
   d8de8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8dea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8dee:	b90a      	cbnz	r2, d8df4 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8df0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8df4:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8df6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8dfa:	4418      	add	r0, r3
   d8dfc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8e00:	e025      	b.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8e02:	f7fe f9b5 	bl	d7170 <__errno>
   d8e06:	6803      	ldr	r3, [r0, #0]
   d8e08:	2b0b      	cmp	r3, #11
   d8e0a:	d020      	beq.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
   d8e0c:	f7fe f9b0 	bl	d7170 <__errno>
   d8e10:	6803      	ldr	r3, [r0, #0]
   d8e12:	2b0b      	cmp	r3, #11
   d8e14:	d01b      	beq.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8e16:	2320      	movs	r3, #32
   d8e18:	2500      	movs	r5, #0
   d8e1a:	9302      	str	r3, [sp, #8]
   d8e1c:	9503      	str	r5, [sp, #12]
   d8e1e:	f7fe f9a7 	bl	d7170 <__errno>
   d8e22:	6803      	ldr	r3, [r0, #0]
   d8e24:	9301      	str	r3, [sp, #4]
   d8e26:	4b0e      	ldr	r3, [pc, #56]	; (d8e60 <_ZN9TCPClient9availableEv+0xb0>)
   d8e28:	9300      	str	r3, [sp, #0]
   d8e2a:	aa02      	add	r2, sp, #8
   d8e2c:	462b      	mov	r3, r5
   d8e2e:	490d      	ldr	r1, [pc, #52]	; (d8e64 <_ZN9TCPClient9availableEv+0xb4>)
   d8e30:	2032      	movs	r0, #50	; 0x32
   d8e32:	f7fe f881 	bl	d6f38 <log_message>
                    sock_close(d_->sock);
   d8e36:	6963      	ldr	r3, [r4, #20]
   d8e38:	6818      	ldr	r0, [r3, #0]
   d8e3a:	f7fe f815 	bl	d6e68 <sock_close>
   d8e3e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8e40:	f04f 32ff 	mov.w	r2, #4294967295
   d8e44:	601a      	str	r2, [r3, #0]
   d8e46:	e002      	b.n	d8e4e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8e48:	f7ff ff18 	bl	d8c7c <_ZN9TCPClient12flush_bufferEv>
   d8e4c:	e7bb      	b.n	d8dc6 <_ZN9TCPClient9availableEv+0x16>
   d8e4e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8e50:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8e54:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8e58:	1a18      	subs	r0, r3, r0
}
   d8e5a:	b00b      	add	sp, #44	; 0x2c
   d8e5c:	bd30      	pop	{r4, r5, pc}
   d8e5e:	bf00      	nop
   d8e60:	000dd393 	.word	0x000dd393
   d8e64:	000dd38c 	.word	0x000dd38c

000d8e68 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8e68:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8e6a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8e6c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8e6e:	6001      	str	r1, [r0, #0]
   d8e70:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8e74:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8e78:	3088      	adds	r0, #136	; 0x88
   d8e7a:	f7ff fadb 	bl	d8434 <_ZN9IPAddressC1Ev>
}
   d8e7e:	4620      	mov	r0, r4
   d8e80:	bd10      	pop	{r4, pc}
	...

000d8e84 <_ZN9TCPClientC1Ei>:
   d8e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8e88:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8e8a:	2300      	movs	r3, #0
   d8e8c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8e8e:	4a14      	ldr	r2, [pc, #80]	; (d8ee0 <_ZN9TCPClientC1Ei+0x5c>)
   d8e90:	6043      	str	r3, [r0, #4]
   d8e92:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8e94:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8e96:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8e98:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e9a:	20a0      	movs	r0, #160	; 0xa0
   d8e9c:	460e      	mov	r6, r1
   d8e9e:	f7fb f8fc 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8ea2:	4605      	mov	r5, r0
   d8ea4:	b110      	cbz	r0, d8eac <_ZN9TCPClientC1Ei+0x28>
   d8ea6:	4631      	mov	r1, r6
   d8ea8:	f7ff ffde 	bl	d8e68 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8eac:	2014      	movs	r0, #20
   d8eae:	f7fb f8f4 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8eb2:	4603      	mov	r3, r0
   d8eb4:	b128      	cbz	r0, d8ec2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8eb6:	2201      	movs	r2, #1
   d8eb8:	6042      	str	r2, [r0, #4]
   d8eba:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8ebc:	4a09      	ldr	r2, [pc, #36]	; (d8ee4 <_ZN9TCPClientC1Ei+0x60>)
   d8ebe:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8ec0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8ec2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8ec4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8ec6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8ec8:	b128      	cbz	r0, d8ed6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8eca:	6843      	ldr	r3, [r0, #4]
   d8ecc:	3b01      	subs	r3, #1
   d8ece:	6043      	str	r3, [r0, #4]
   d8ed0:	b90b      	cbnz	r3, d8ed6 <_ZN9TCPClientC1Ei+0x52>
   d8ed2:	f7ff fddf 	bl	d8a94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8ed6:	4620      	mov	r0, r4
   d8ed8:	f7ff fed0 	bl	d8c7c <_ZN9TCPClient12flush_bufferEv>
}
   d8edc:	4620      	mov	r0, r4
   d8ede:	bd70      	pop	{r4, r5, r6, pc}
   d8ee0:	000dd348 	.word	0x000dd348
   d8ee4:	000dd32c 	.word	0x000dd32c

000d8ee8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8ee8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8eea:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8eee:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8ef0:	f7ff ffc8 	bl	d8e84 <_ZN9TCPClientC1Ei>
}
   d8ef4:	4620      	mov	r0, r4
   d8ef6:	bd10      	pop	{r4, pc}

000d8ef8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8ef8:	b510      	push	{r4, lr}
   d8efa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8efc:	6800      	ldr	r0, [r0, #0]
   d8efe:	2800      	cmp	r0, #0
   d8f00:	db01      	blt.n	d8f06 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8f02:	f7fd ffb1 	bl	d6e68 <sock_close>
    }
}
   d8f06:	4620      	mov	r0, r4
   d8f08:	bd10      	pop	{r4, pc}

000d8f0a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8f0a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8f0c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8f0e:	4620      	mov	r0, r4
   d8f10:	f7ff fff2 	bl	d8ef8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8f14:	b124      	cbz	r4, d8f20 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8f16:	4620      	mov	r0, r4
   d8f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8f1c:	f7fb b8bf 	b.w	d409e <_ZdlPv>
   d8f20:	bd10      	pop	{r4, pc}

000d8f22 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8f22:	2200      	movs	r2, #0
   d8f24:	4611      	mov	r1, r2
   d8f26:	6840      	ldr	r0, [r0, #4]
   d8f28:	f7fe b86a 	b.w	d7000 <network_ready>

000d8f2c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8f2c:	2200      	movs	r2, #0
   d8f2e:	4611      	mov	r1, r2
   d8f30:	6840      	ldr	r0, [r0, #4]
   d8f32:	f7fe b885 	b.w	d7040 <network_listening>

000d8f36 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8f36:	2200      	movs	r2, #0
   d8f38:	4611      	mov	r1, r2
   d8f3a:	6840      	ldr	r0, [r0, #4]
   d8f3c:	f7fe b890 	b.w	d7060 <network_get_listen_timeout>

000d8f40 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8f40:	2200      	movs	r2, #0
   d8f42:	6840      	ldr	r0, [r0, #4]
   d8f44:	f7fe b884 	b.w	d7050 <network_set_listen_timeout>

000d8f48 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8f48:	2200      	movs	r2, #0
   d8f4a:	f081 0101 	eor.w	r1, r1, #1
   d8f4e:	6840      	ldr	r0, [r0, #4]
   d8f50:	f7fe b86e 	b.w	d7030 <network_listen>

000d8f54 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8f54:	2300      	movs	r3, #0
   d8f56:	461a      	mov	r2, r3
   d8f58:	4619      	mov	r1, r3
   d8f5a:	6840      	ldr	r0, [r0, #4]
   d8f5c:	f7fe b860 	b.w	d7020 <network_off>

000d8f60 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8f60:	2300      	movs	r3, #0
   d8f62:	461a      	mov	r2, r3
   d8f64:	4619      	mov	r1, r3
   d8f66:	6840      	ldr	r0, [r0, #4]
   d8f68:	f7fe b852 	b.w	d7010 <network_on>

000d8f6c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8f6c:	2200      	movs	r2, #0
   d8f6e:	4611      	mov	r1, r2
   d8f70:	6840      	ldr	r0, [r0, #4]
   d8f72:	f7fe b835 	b.w	d6fe0 <network_connecting>

000d8f76 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8f76:	2200      	movs	r2, #0
   d8f78:	2102      	movs	r1, #2
   d8f7a:	6840      	ldr	r0, [r0, #4]
   d8f7c:	f7fe b838 	b.w	d6ff0 <network_disconnect>

000d8f80 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8f80:	2300      	movs	r3, #0
   d8f82:	461a      	mov	r2, r3
   d8f84:	6840      	ldr	r0, [r0, #4]
   d8f86:	f7fe b823 	b.w	d6fd0 <network_connect>
	...

000d8f8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8f8c:	4b02      	ldr	r3, [pc, #8]	; (d8f98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8f8e:	2204      	movs	r2, #4
   d8f90:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8f92:	4a02      	ldr	r2, [pc, #8]	; (d8f9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8f94:	601a      	str	r2, [r3, #0]
   d8f96:	4770      	bx	lr
   d8f98:	2003e6fc 	.word	0x2003e6fc
   d8f9c:	000dd3ac 	.word	0x000dd3ac

000d8fa0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8fa0:	2300      	movs	r3, #0
   d8fa2:	461a      	mov	r2, r3
   d8fa4:	6840      	ldr	r0, [r0, #4]
   d8fa6:	f7fe b813 	b.w	d6fd0 <network_connect>

000d8faa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8faa:	2200      	movs	r2, #0
   d8fac:	2102      	movs	r1, #2
   d8fae:	6840      	ldr	r0, [r0, #4]
   d8fb0:	f7fe b81e 	b.w	d6ff0 <network_disconnect>

000d8fb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8fb4:	2200      	movs	r2, #0
   d8fb6:	4611      	mov	r1, r2
   d8fb8:	6840      	ldr	r0, [r0, #4]
   d8fba:	f7fe b811 	b.w	d6fe0 <network_connecting>

000d8fbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8fbe:	2200      	movs	r2, #0
   d8fc0:	4611      	mov	r1, r2
   d8fc2:	6840      	ldr	r0, [r0, #4]
   d8fc4:	f7fe b81c 	b.w	d7000 <network_ready>

000d8fc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8fc8:	2300      	movs	r3, #0
   d8fca:	461a      	mov	r2, r3
   d8fcc:	4619      	mov	r1, r3
   d8fce:	6840      	ldr	r0, [r0, #4]
   d8fd0:	f7fe b81e 	b.w	d7010 <network_on>

000d8fd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8fd4:	2300      	movs	r3, #0
   d8fd6:	461a      	mov	r2, r3
   d8fd8:	4619      	mov	r1, r3
   d8fda:	6840      	ldr	r0, [r0, #4]
   d8fdc:	f7fe b820 	b.w	d7020 <network_off>

000d8fe0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8fe0:	2200      	movs	r2, #0
   d8fe2:	f081 0101 	eor.w	r1, r1, #1
   d8fe6:	6840      	ldr	r0, [r0, #4]
   d8fe8:	f7fe b822 	b.w	d7030 <network_listen>

000d8fec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8fec:	2200      	movs	r2, #0
   d8fee:	6840      	ldr	r0, [r0, #4]
   d8ff0:	f7fe b82e 	b.w	d7050 <network_set_listen_timeout>

000d8ff4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8ff4:	2200      	movs	r2, #0
   d8ff6:	4611      	mov	r1, r2
   d8ff8:	6840      	ldr	r0, [r0, #4]
   d8ffa:	f7fe b831 	b.w	d7060 <network_get_listen_timeout>

000d8ffe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8ffe:	2200      	movs	r2, #0
   d9000:	4611      	mov	r1, r2
   d9002:	6840      	ldr	r0, [r0, #4]
   d9004:	f7fe b81c 	b.w	d7040 <network_listening>

000d9008 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d900c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d900e:	b095      	sub	sp, #84	; 0x54
   d9010:	4616      	mov	r6, r2
   d9012:	460d      	mov	r5, r1
   d9014:	4607      	mov	r7, r0
    IPAddress addr;
   d9016:	f7ff fa0d 	bl	d8434 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d901a:	4621      	mov	r1, r4
   d901c:	2220      	movs	r2, #32
   d901e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9020:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9022:	f002 fd83 	bl	dbb2c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9026:	2340      	movs	r3, #64	; 0x40
   d9028:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d902a:	4621      	mov	r1, r4
   d902c:	466b      	mov	r3, sp
   d902e:	aa0c      	add	r2, sp, #48	; 0x30
   d9030:	4630      	mov	r0, r6
   d9032:	f7fd fd69 	bl	d6b08 <netdb_getaddrinfo>
    if (!r) {
   d9036:	4604      	mov	r4, r0
   d9038:	2800      	cmp	r0, #0
   d903a:	d144      	bne.n	d90c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d903c:	4602      	mov	r2, r0
   d903e:	2101      	movs	r1, #1
   d9040:	6868      	ldr	r0, [r5, #4]
   d9042:	f7fd ffdd 	bl	d7000 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9046:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9048:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d904a:	4622      	mov	r2, r4
   d904c:	6868      	ldr	r0, [r5, #4]
   d904e:	f7fd ffd7 	bl	d7000 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9052:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9054:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d9056:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9058:	2e00      	cmp	r6, #0
   d905a:	d034      	beq.n	d90c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d905c:	2900      	cmp	r1, #0
   d905e:	d132      	bne.n	d90c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9060:	6873      	ldr	r3, [r6, #4]
   d9062:	2b02      	cmp	r3, #2
   d9064:	d002      	beq.n	d906c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d9066:	2b0a      	cmp	r3, #10
   d9068:	d009      	beq.n	d907e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d906a:	e02a      	b.n	d90c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d906c:	f1b8 0f00 	cmp.w	r8, #0
   d9070:	d027      	beq.n	d90c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9072:	6971      	ldr	r1, [r6, #20]
   d9074:	4638      	mov	r0, r7
   d9076:	3104      	adds	r1, #4
   d9078:	f7ff fa1f 	bl	d84ba <_ZN9IPAddressaSEPKh>
   d907c:	e020      	b.n	d90c0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d907e:	f1b9 0f00 	cmp.w	r9, #0
   d9082:	d01e      	beq.n	d90c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9084:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9086:	2211      	movs	r2, #17
   d9088:	a801      	add	r0, sp, #4
   d908a:	f002 fd4f 	bl	dbb2c <memset>
                    a.v = 6;
   d908e:	2306      	movs	r3, #6
   d9090:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9094:	ad01      	add	r5, sp, #4
   d9096:	f104 0308 	add.w	r3, r4, #8
   d909a:	3418      	adds	r4, #24
   d909c:	6818      	ldr	r0, [r3, #0]
   d909e:	6859      	ldr	r1, [r3, #4]
   d90a0:	462a      	mov	r2, r5
   d90a2:	c203      	stmia	r2!, {r0, r1}
   d90a4:	3308      	adds	r3, #8
   d90a6:	42a3      	cmp	r3, r4
   d90a8:	4615      	mov	r5, r2
   d90aa:	d1f7      	bne.n	d909c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d90ac:	a901      	add	r1, sp, #4
   d90ae:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d90b0:	ad07      	add	r5, sp, #28
   d90b2:	f7ff f9cd 	bl	d8450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d90b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d90b8:	1d3c      	adds	r4, r7, #4
   d90ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d90bc:	682b      	ldr	r3, [r5, #0]
   d90be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d90c0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d90c2:	69f6      	ldr	r6, [r6, #28]
   d90c4:	e7c8      	b.n	d9058 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d90c6:	9800      	ldr	r0, [sp, #0]
   d90c8:	f7fd fd16 	bl	d6af8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d90cc:	4638      	mov	r0, r7
   d90ce:	b015      	add	sp, #84	; 0x54
   d90d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d90d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d90d4:	4b02      	ldr	r3, [pc, #8]	; (d90e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d90d6:	4a03      	ldr	r2, [pc, #12]	; (d90e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d90d8:	601a      	str	r2, [r3, #0]
   d90da:	2200      	movs	r2, #0
   d90dc:	605a      	str	r2, [r3, #4]
   d90de:	4770      	bx	lr
   d90e0:	2003e704 	.word	0x2003e704
   d90e4:	000dd3e0 	.word	0x000dd3e0

000d90e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d90e8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d90ea:	4e18      	ldr	r6, [pc, #96]	; (d914c <pinAvailable+0x64>)
   d90ec:	6831      	ldr	r1, [r6, #0]
   d90ee:	f011 0501 	ands.w	r5, r1, #1
   d90f2:	4604      	mov	r4, r0
   d90f4:	d10a      	bne.n	d910c <pinAvailable+0x24>
   d90f6:	4630      	mov	r0, r6
   d90f8:	f7fa ffe0 	bl	d40bc <__cxa_guard_acquire>
   d90fc:	b130      	cbz	r0, d910c <pinAvailable+0x24>
   d90fe:	4629      	mov	r1, r5
   d9100:	4813      	ldr	r0, [pc, #76]	; (d9150 <pinAvailable+0x68>)
   d9102:	f7fe f881 	bl	d7208 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9106:	4630      	mov	r0, r6
   d9108:	f7fa ffdd 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d910c:	4810      	ldr	r0, [pc, #64]	; (d9150 <pinAvailable+0x68>)
   d910e:	f7fe f99d 	bl	d744c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9112:	b128      	cbz	r0, d9120 <pinAvailable+0x38>
   d9114:	f1a4 030b 	sub.w	r3, r4, #11
   d9118:	2b02      	cmp	r3, #2
   d911a:	d801      	bhi.n	d9120 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d911c:	2000      	movs	r0, #0
   d911e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9120:	f000 f8ac 	bl	d927c <_Z19__fetch_global_Wirev>
   d9124:	f7ff fb75 	bl	d8812 <_ZN7TwoWire9isEnabledEv>
   d9128:	b108      	cbz	r0, d912e <pinAvailable+0x46>
   d912a:	2c01      	cmp	r4, #1
   d912c:	d9f6      	bls.n	d911c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d912e:	f7ff fab3 	bl	d8698 <_Z22__fetch_global_Serial1v>
   d9132:	f7ff faad 	bl	d8690 <_ZN11USARTSerial9isEnabledEv>
   d9136:	b118      	cbz	r0, d9140 <pinAvailable+0x58>
   d9138:	f1a4 0309 	sub.w	r3, r4, #9
   d913c:	2b01      	cmp	r3, #1
   d913e:	d9ed      	bls.n	d911c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9140:	2c23      	cmp	r4, #35	; 0x23
   d9142:	bf8c      	ite	hi
   d9144:	2000      	movhi	r0, #0
   d9146:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9148:	bd70      	pop	{r4, r5, r6, pc}
   d914a:	bf00      	nop
   d914c:	2003e3a4 	.word	0x2003e3a4
   d9150:	2003e3a8 	.word	0x2003e3a8

000d9154 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9154:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9156:	b538      	push	{r3, r4, r5, lr}
   d9158:	4604      	mov	r4, r0
   d915a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d915c:	d80a      	bhi.n	d9174 <pinMode+0x20>
   d915e:	29ff      	cmp	r1, #255	; 0xff
   d9160:	d008      	beq.n	d9174 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9162:	f7ff ffc1 	bl	d90e8 <pinAvailable>
   d9166:	b128      	cbz	r0, d9174 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9168:	4629      	mov	r1, r5
   d916a:	4620      	mov	r0, r4
}
   d916c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9170:	f7fd bce2 	b.w	d6b38 <HAL_Pin_Mode>
   d9174:	bd38      	pop	{r3, r4, r5, pc}

000d9176 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9176:	b538      	push	{r3, r4, r5, lr}
   d9178:	4604      	mov	r4, r0
   d917a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d917c:	f7fd fce4 	bl	d6b48 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9180:	28ff      	cmp	r0, #255	; 0xff
   d9182:	d010      	beq.n	d91a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9184:	2806      	cmp	r0, #6
   d9186:	d804      	bhi.n	d9192 <digitalWrite+0x1c>
   d9188:	234d      	movs	r3, #77	; 0x4d
   d918a:	fa23 f000 	lsr.w	r0, r3, r0
   d918e:	07c3      	lsls	r3, r0, #31
   d9190:	d409      	bmi.n	d91a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9192:	4620      	mov	r0, r4
   d9194:	f7ff ffa8 	bl	d90e8 <pinAvailable>
   d9198:	b128      	cbz	r0, d91a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d919a:	4629      	mov	r1, r5
   d919c:	4620      	mov	r0, r4
}
   d919e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d91a2:	f7fd bcd9 	b.w	d6b58 <HAL_GPIO_Write>
   d91a6:	bd38      	pop	{r3, r4, r5, pc}

000d91a8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d91a8:	b510      	push	{r4, lr}
   d91aa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d91ac:	f7fd fccc 	bl	d6b48 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d91b0:	3804      	subs	r0, #4
   d91b2:	b2c0      	uxtb	r0, r0
   d91b4:	2801      	cmp	r0, #1
   d91b6:	d908      	bls.n	d91ca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d91b8:	4620      	mov	r0, r4
   d91ba:	f7ff ff95 	bl	d90e8 <pinAvailable>
   d91be:	b120      	cbz	r0, d91ca <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d91c0:	4620      	mov	r0, r4
}
   d91c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d91c6:	f7fd bccf 	b.w	d6b68 <HAL_GPIO_Read>
}
   d91ca:	2000      	movs	r0, #0
   d91cc:	bd10      	pop	{r4, pc}

000d91ce <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d91ce:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d91d0:	b510      	push	{r4, lr}
   d91d2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d91d4:	bf9c      	itt	ls
   d91d6:	340e      	addls	r4, #14
   d91d8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d91da:	4620      	mov	r0, r4
   d91dc:	f7ff ff84 	bl	d90e8 <pinAvailable>
   d91e0:	b150      	cbz	r0, d91f8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d91e2:	2103      	movs	r1, #3
   d91e4:	4620      	mov	r0, r4
   d91e6:	f7fd fc9f 	bl	d6b28 <HAL_Validate_Pin_Function>
   d91ea:	2803      	cmp	r0, #3
   d91ec:	d104      	bne.n	d91f8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d91ee:	4620      	mov	r0, r4
}
   d91f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d91f4:	f7fd bcc0 	b.w	d6b78 <HAL_ADC_Read>
}
   d91f8:	2000      	movs	r0, #0
   d91fa:	bd10      	pop	{r4, pc}

000d91fc <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d91fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9200:	4690      	mov	r8, r2
   d9202:	461e      	mov	r6, r3
   d9204:	2407      	movs	r4, #7
   d9206:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d9208:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d920a:	f1b8 0f00 	cmp.w	r8, #0
   d920e:	d104      	bne.n	d921a <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d9210:	f1c4 0107 	rsb	r1, r4, #7
   d9214:	fa46 f101 	asr.w	r1, r6, r1
   d9218:	e001      	b.n	d921e <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d921a:	fa46 f104 	asr.w	r1, r6, r4
   d921e:	f001 0101 	and.w	r1, r1, #1
   d9222:	4638      	mov	r0, r7
   d9224:	f7ff ffa7 	bl	d9176 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d9228:	2101      	movs	r1, #1
   d922a:	4628      	mov	r0, r5
   d922c:	f7ff ffa3 	bl	d9176 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d9230:	2100      	movs	r1, #0
   d9232:	4628      	mov	r0, r5
   d9234:	f7ff ff9f 	bl	d9176 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d9238:	f114 34ff 	adds.w	r4, r4, #4294967295
   d923c:	d2e5      	bcs.n	d920a <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9242 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d9242:	f7fd bca1 	b.w	d6b88 <HAL_Pulse_In>
	...

000d9248 <_Z17acquireWireBufferv>:
   d9248:	b570      	push	{r4, r5, r6, lr}
   d924a:	4604      	mov	r4, r0
   d924c:	2514      	movs	r5, #20
   d924e:	462a      	mov	r2, r5
   d9250:	4e09      	ldr	r6, [pc, #36]	; (d9278 <_Z17acquireWireBufferv+0x30>)
   d9252:	2100      	movs	r1, #0
   d9254:	f002 fc6a 	bl	dbb2c <memset>
   d9258:	8025      	strh	r5, [r4, #0]
   d925a:	2520      	movs	r5, #32
   d925c:	4631      	mov	r1, r6
   d925e:	60a5      	str	r5, [r4, #8]
   d9260:	6125      	str	r5, [r4, #16]
   d9262:	4628      	mov	r0, r5
   d9264:	f000 f840 	bl	d92e8 <_ZnajRKSt9nothrow_t>
   d9268:	4631      	mov	r1, r6
   d926a:	6060      	str	r0, [r4, #4]
   d926c:	4628      	mov	r0, r5
   d926e:	f000 f83b 	bl	d92e8 <_ZnajRKSt9nothrow_t>
   d9272:	60e0      	str	r0, [r4, #12]
   d9274:	4620      	mov	r0, r4
   d9276:	bd70      	pop	{r4, r5, r6, pc}
   d9278:	000dd40c 	.word	0x000dd40c

000d927c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d927c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d927e:	4d0e      	ldr	r5, [pc, #56]	; (d92b8 <_Z19__fetch_global_Wirev+0x3c>)
   d9280:	6829      	ldr	r1, [r5, #0]
   d9282:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9286:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9288:	d113      	bne.n	d92b2 <_Z19__fetch_global_Wirev+0x36>
   d928a:	4628      	mov	r0, r5
   d928c:	f7fa ff16 	bl	d40bc <__cxa_guard_acquire>
   d9290:	b178      	cbz	r0, d92b2 <_Z19__fetch_global_Wirev+0x36>
   d9292:	a801      	add	r0, sp, #4
   d9294:	f7ff ffd8 	bl	d9248 <_Z17acquireWireBufferv>
   d9298:	aa01      	add	r2, sp, #4
   d929a:	4621      	mov	r1, r4
   d929c:	4807      	ldr	r0, [pc, #28]	; (d92bc <_Z19__fetch_global_Wirev+0x40>)
   d929e:	f7ff fa61 	bl	d8764 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d92a2:	4628      	mov	r0, r5
   d92a4:	f7fa ff0f 	bl	d40c6 <__cxa_guard_release>
   d92a8:	4a05      	ldr	r2, [pc, #20]	; (d92c0 <_Z19__fetch_global_Wirev+0x44>)
   d92aa:	4906      	ldr	r1, [pc, #24]	; (d92c4 <_Z19__fetch_global_Wirev+0x48>)
   d92ac:	4803      	ldr	r0, [pc, #12]	; (d92bc <_Z19__fetch_global_Wirev+0x40>)
   d92ae:	f000 f80b 	bl	d92c8 <__aeabi_atexit>
	return wire;
}
   d92b2:	4802      	ldr	r0, [pc, #8]	; (d92bc <_Z19__fetch_global_Wirev+0x40>)
   d92b4:	b007      	add	sp, #28
   d92b6:	bd30      	pop	{r4, r5, pc}
   d92b8:	2003e710 	.word	0x2003e710
   d92bc:	2003e714 	.word	0x2003e714
   d92c0:	2003e148 	.word	0x2003e148
   d92c4:	000d870d 	.word	0x000d870d

000d92c8 <__aeabi_atexit>:
   d92c8:	460b      	mov	r3, r1
   d92ca:	4601      	mov	r1, r0
   d92cc:	4618      	mov	r0, r3
   d92ce:	f002 baed 	b.w	db8ac <__cxa_atexit>
	...

000d92d4 <_ZSt15get_new_handlerv>:
   d92d4:	4b02      	ldr	r3, [pc, #8]	; (d92e0 <_ZSt15get_new_handlerv+0xc>)
   d92d6:	6818      	ldr	r0, [r3, #0]
   d92d8:	f3bf 8f5f 	dmb	sy
   d92dc:	4770      	bx	lr
   d92de:	bf00      	nop
   d92e0:	2003e728 	.word	0x2003e728

000d92e4 <_ZdlPvj>:
   d92e4:	f7fa bedb 	b.w	d409e <_ZdlPv>

000d92e8 <_ZnajRKSt9nothrow_t>:
   d92e8:	f000 b800 	b.w	d92ec <_ZnwjRKSt9nothrow_t>

000d92ec <_ZnwjRKSt9nothrow_t>:
   d92ec:	b510      	push	{r4, lr}
   d92ee:	2800      	cmp	r0, #0
   d92f0:	bf14      	ite	ne
   d92f2:	4604      	movne	r4, r0
   d92f4:	2401      	moveq	r4, #1
   d92f6:	4620      	mov	r0, r4
   d92f8:	f7fd fef2 	bl	d70e0 <malloc>
   d92fc:	b920      	cbnz	r0, d9308 <_ZnwjRKSt9nothrow_t+0x1c>
   d92fe:	f7ff ffe9 	bl	d92d4 <_ZSt15get_new_handlerv>
   d9302:	b108      	cbz	r0, d9308 <_ZnwjRKSt9nothrow_t+0x1c>
   d9304:	4780      	blx	r0
   d9306:	e7f6      	b.n	d92f6 <_ZnwjRKSt9nothrow_t+0xa>
   d9308:	bd10      	pop	{r4, pc}

000d930a <_ZSt25__throw_bad_function_callv>:
   d930a:	b508      	push	{r3, lr}
   d930c:	f7fd ff20 	bl	d7150 <abort>

000d9310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9310:	4b18      	ldr	r3, [pc, #96]	; (d9374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9312:	681a      	ldr	r2, [r3, #0]
   d9314:	07d1      	lsls	r1, r2, #31
   d9316:	bf5c      	itt	pl
   d9318:	2201      	movpl	r2, #1
   d931a:	601a      	strpl	r2, [r3, #0]
   d931c:	4b16      	ldr	r3, [pc, #88]	; (d9378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d931e:	681a      	ldr	r2, [r3, #0]
   d9320:	07d2      	lsls	r2, r2, #31
   d9322:	bf5c      	itt	pl
   d9324:	2201      	movpl	r2, #1
   d9326:	601a      	strpl	r2, [r3, #0]
   d9328:	4b14      	ldr	r3, [pc, #80]	; (d937c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d932a:	681a      	ldr	r2, [r3, #0]
   d932c:	07d0      	lsls	r0, r2, #31
   d932e:	bf5c      	itt	pl
   d9330:	2201      	movpl	r2, #1
   d9332:	601a      	strpl	r2, [r3, #0]
   d9334:	4b12      	ldr	r3, [pc, #72]	; (d9380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9336:	681a      	ldr	r2, [r3, #0]
   d9338:	07d1      	lsls	r1, r2, #31
   d933a:	bf5c      	itt	pl
   d933c:	2201      	movpl	r2, #1
   d933e:	601a      	strpl	r2, [r3, #0]
   d9340:	4b10      	ldr	r3, [pc, #64]	; (d9384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9342:	681a      	ldr	r2, [r3, #0]
   d9344:	07d2      	lsls	r2, r2, #31
   d9346:	bf5c      	itt	pl
   d9348:	2201      	movpl	r2, #1
   d934a:	601a      	strpl	r2, [r3, #0]
   d934c:	4b0e      	ldr	r3, [pc, #56]	; (d9388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d934e:	681a      	ldr	r2, [r3, #0]
   d9350:	07d0      	lsls	r0, r2, #31
   d9352:	bf5c      	itt	pl
   d9354:	2201      	movpl	r2, #1
   d9356:	601a      	strpl	r2, [r3, #0]
   d9358:	4b0c      	ldr	r3, [pc, #48]	; (d938c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d935a:	681a      	ldr	r2, [r3, #0]
   d935c:	07d1      	lsls	r1, r2, #31
   d935e:	bf5c      	itt	pl
   d9360:	2201      	movpl	r2, #1
   d9362:	601a      	strpl	r2, [r3, #0]
   d9364:	4b0a      	ldr	r3, [pc, #40]	; (d9390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9366:	681a      	ldr	r2, [r3, #0]
   d9368:	07d2      	lsls	r2, r2, #31
   d936a:	bf5c      	itt	pl
   d936c:	2201      	movpl	r2, #1
   d936e:	601a      	strpl	r2, [r3, #0]
   d9370:	4770      	bx	lr
   d9372:	bf00      	nop
   d9374:	2003e748 	.word	0x2003e748
   d9378:	2003e744 	.word	0x2003e744
   d937c:	2003e740 	.word	0x2003e740
   d9380:	2003e73c 	.word	0x2003e73c
   d9384:	2003e738 	.word	0x2003e738
   d9388:	2003e734 	.word	0x2003e734
   d938c:	2003e730 	.word	0x2003e730
   d9390:	2003e72c 	.word	0x2003e72c

000d9394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9394:	4b24      	ldr	r3, [pc, #144]	; (d9428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d9396:	681a      	ldr	r2, [r3, #0]
   d9398:	07d0      	lsls	r0, r2, #31
   d939a:	bf5c      	itt	pl
   d939c:	2201      	movpl	r2, #1
   d939e:	601a      	strpl	r2, [r3, #0]
   d93a0:	4b22      	ldr	r3, [pc, #136]	; (d942c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d93a2:	681a      	ldr	r2, [r3, #0]
   d93a4:	07d1      	lsls	r1, r2, #31
   d93a6:	bf5c      	itt	pl
   d93a8:	2201      	movpl	r2, #1
   d93aa:	601a      	strpl	r2, [r3, #0]
   d93ac:	4b20      	ldr	r3, [pc, #128]	; (d9430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d93ae:	681a      	ldr	r2, [r3, #0]
   d93b0:	07d2      	lsls	r2, r2, #31
   d93b2:	bf5c      	itt	pl
   d93b4:	2201      	movpl	r2, #1
   d93b6:	601a      	strpl	r2, [r3, #0]
   d93b8:	4b1e      	ldr	r3, [pc, #120]	; (d9434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d93ba:	681a      	ldr	r2, [r3, #0]
   d93bc:	07d0      	lsls	r0, r2, #31
   d93be:	bf5c      	itt	pl
   d93c0:	2201      	movpl	r2, #1
   d93c2:	601a      	strpl	r2, [r3, #0]
   d93c4:	4b1c      	ldr	r3, [pc, #112]	; (d9438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d93c6:	681a      	ldr	r2, [r3, #0]
   d93c8:	07d1      	lsls	r1, r2, #31
   d93ca:	bf5c      	itt	pl
   d93cc:	2201      	movpl	r2, #1
   d93ce:	601a      	strpl	r2, [r3, #0]
   d93d0:	4b1a      	ldr	r3, [pc, #104]	; (d943c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d93d2:	681a      	ldr	r2, [r3, #0]
   d93d4:	07d2      	lsls	r2, r2, #31
   d93d6:	bf5c      	itt	pl
   d93d8:	2201      	movpl	r2, #1
   d93da:	601a      	strpl	r2, [r3, #0]
   d93dc:	4b18      	ldr	r3, [pc, #96]	; (d9440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d93de:	681a      	ldr	r2, [r3, #0]
   d93e0:	07d0      	lsls	r0, r2, #31
   d93e2:	bf5c      	itt	pl
   d93e4:	2201      	movpl	r2, #1
   d93e6:	601a      	strpl	r2, [r3, #0]
   d93e8:	4b16      	ldr	r3, [pc, #88]	; (d9444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d93ea:	681a      	ldr	r2, [r3, #0]
   d93ec:	07d1      	lsls	r1, r2, #31
   d93ee:	bf5c      	itt	pl
   d93f0:	2201      	movpl	r2, #1
   d93f2:	601a      	strpl	r2, [r3, #0]
   d93f4:	4b14      	ldr	r3, [pc, #80]	; (d9448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d93f6:	681a      	ldr	r2, [r3, #0]
   d93f8:	07d2      	lsls	r2, r2, #31
   d93fa:	bf5c      	itt	pl
   d93fc:	2201      	movpl	r2, #1
   d93fe:	601a      	strpl	r2, [r3, #0]
   d9400:	4b12      	ldr	r3, [pc, #72]	; (d944c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d9402:	681a      	ldr	r2, [r3, #0]
   d9404:	07d0      	lsls	r0, r2, #31
   d9406:	bf5c      	itt	pl
   d9408:	2201      	movpl	r2, #1
   d940a:	601a      	strpl	r2, [r3, #0]
   d940c:	4b10      	ldr	r3, [pc, #64]	; (d9450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d940e:	681a      	ldr	r2, [r3, #0]
   d9410:	07d1      	lsls	r1, r2, #31
   d9412:	bf5c      	itt	pl
   d9414:	2201      	movpl	r2, #1
   d9416:	601a      	strpl	r2, [r3, #0]
   d9418:	4b0e      	ldr	r3, [pc, #56]	; (d9454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d941a:	681a      	ldr	r2, [r3, #0]
   d941c:	07d2      	lsls	r2, r2, #31
   d941e:	bf5c      	itt	pl
   d9420:	2201      	movpl	r2, #1
   d9422:	601a      	strpl	r2, [r3, #0]
   d9424:	4770      	bx	lr
   d9426:	bf00      	nop
   d9428:	2003e778 	.word	0x2003e778
   d942c:	2003e774 	.word	0x2003e774
   d9430:	2003e770 	.word	0x2003e770
   d9434:	2003e76c 	.word	0x2003e76c
   d9438:	2003e768 	.word	0x2003e768
   d943c:	2003e764 	.word	0x2003e764
   d9440:	2003e760 	.word	0x2003e760
   d9444:	2003e75c 	.word	0x2003e75c
   d9448:	2003e758 	.word	0x2003e758
   d944c:	2003e754 	.word	0x2003e754
   d9450:	2003e750 	.word	0x2003e750
   d9454:	2003e74c 	.word	0x2003e74c

000d9458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9458:	4b24      	ldr	r3, [pc, #144]	; (d94ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d945a:	681a      	ldr	r2, [r3, #0]
   d945c:	07d0      	lsls	r0, r2, #31
   d945e:	bf5c      	itt	pl
   d9460:	2201      	movpl	r2, #1
   d9462:	601a      	strpl	r2, [r3, #0]
   d9464:	4b22      	ldr	r3, [pc, #136]	; (d94f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9466:	681a      	ldr	r2, [r3, #0]
   d9468:	07d1      	lsls	r1, r2, #31
   d946a:	bf5c      	itt	pl
   d946c:	2201      	movpl	r2, #1
   d946e:	601a      	strpl	r2, [r3, #0]
   d9470:	4b20      	ldr	r3, [pc, #128]	; (d94f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9472:	681a      	ldr	r2, [r3, #0]
   d9474:	07d2      	lsls	r2, r2, #31
   d9476:	bf5c      	itt	pl
   d9478:	2201      	movpl	r2, #1
   d947a:	601a      	strpl	r2, [r3, #0]
   d947c:	4b1e      	ldr	r3, [pc, #120]	; (d94f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d947e:	681a      	ldr	r2, [r3, #0]
   d9480:	07d0      	lsls	r0, r2, #31
   d9482:	bf5c      	itt	pl
   d9484:	2201      	movpl	r2, #1
   d9486:	601a      	strpl	r2, [r3, #0]
   d9488:	4b1c      	ldr	r3, [pc, #112]	; (d94fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d948a:	681a      	ldr	r2, [r3, #0]
   d948c:	07d1      	lsls	r1, r2, #31
   d948e:	bf5c      	itt	pl
   d9490:	2201      	movpl	r2, #1
   d9492:	601a      	strpl	r2, [r3, #0]
   d9494:	4b1a      	ldr	r3, [pc, #104]	; (d9500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9496:	681a      	ldr	r2, [r3, #0]
   d9498:	07d2      	lsls	r2, r2, #31
   d949a:	bf5c      	itt	pl
   d949c:	2201      	movpl	r2, #1
   d949e:	601a      	strpl	r2, [r3, #0]
   d94a0:	4b18      	ldr	r3, [pc, #96]	; (d9504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d94a2:	681a      	ldr	r2, [r3, #0]
   d94a4:	07d0      	lsls	r0, r2, #31
   d94a6:	bf5c      	itt	pl
   d94a8:	2201      	movpl	r2, #1
   d94aa:	601a      	strpl	r2, [r3, #0]
   d94ac:	4b16      	ldr	r3, [pc, #88]	; (d9508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d94ae:	681a      	ldr	r2, [r3, #0]
   d94b0:	07d1      	lsls	r1, r2, #31
   d94b2:	bf5c      	itt	pl
   d94b4:	2201      	movpl	r2, #1
   d94b6:	601a      	strpl	r2, [r3, #0]
   d94b8:	4b14      	ldr	r3, [pc, #80]	; (d950c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d94ba:	681a      	ldr	r2, [r3, #0]
   d94bc:	07d2      	lsls	r2, r2, #31
   d94be:	bf5c      	itt	pl
   d94c0:	2201      	movpl	r2, #1
   d94c2:	601a      	strpl	r2, [r3, #0]
   d94c4:	4b12      	ldr	r3, [pc, #72]	; (d9510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d94c6:	681a      	ldr	r2, [r3, #0]
   d94c8:	07d0      	lsls	r0, r2, #31
   d94ca:	bf5c      	itt	pl
   d94cc:	2201      	movpl	r2, #1
   d94ce:	601a      	strpl	r2, [r3, #0]
   d94d0:	4b10      	ldr	r3, [pc, #64]	; (d9514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d94d2:	681a      	ldr	r2, [r3, #0]
   d94d4:	07d1      	lsls	r1, r2, #31
   d94d6:	bf5c      	itt	pl
   d94d8:	2201      	movpl	r2, #1
   d94da:	601a      	strpl	r2, [r3, #0]
   d94dc:	4b0e      	ldr	r3, [pc, #56]	; (d9518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d94de:	681a      	ldr	r2, [r3, #0]
   d94e0:	07d2      	lsls	r2, r2, #31
   d94e2:	bf5c      	itt	pl
   d94e4:	2201      	movpl	r2, #1
   d94e6:	601a      	strpl	r2, [r3, #0]
   d94e8:	4770      	bx	lr
   d94ea:	bf00      	nop
   d94ec:	2003e7a8 	.word	0x2003e7a8
   d94f0:	2003e7a4 	.word	0x2003e7a4
   d94f4:	2003e7a0 	.word	0x2003e7a0
   d94f8:	2003e79c 	.word	0x2003e79c
   d94fc:	2003e798 	.word	0x2003e798
   d9500:	2003e794 	.word	0x2003e794
   d9504:	2003e790 	.word	0x2003e790
   d9508:	2003e78c 	.word	0x2003e78c
   d950c:	2003e788 	.word	0x2003e788
   d9510:	2003e784 	.word	0x2003e784
   d9514:	2003e780 	.word	0x2003e780
   d9518:	2003e77c 	.word	0x2003e77c

000d951c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d951c:	4b18      	ldr	r3, [pc, #96]	; (d9580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d951e:	681a      	ldr	r2, [r3, #0]
   d9520:	07d1      	lsls	r1, r2, #31
   d9522:	bf5c      	itt	pl
   d9524:	2201      	movpl	r2, #1
   d9526:	601a      	strpl	r2, [r3, #0]
   d9528:	4b16      	ldr	r3, [pc, #88]	; (d9584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d952a:	681a      	ldr	r2, [r3, #0]
   d952c:	07d2      	lsls	r2, r2, #31
   d952e:	bf5c      	itt	pl
   d9530:	2201      	movpl	r2, #1
   d9532:	601a      	strpl	r2, [r3, #0]
   d9534:	4b14      	ldr	r3, [pc, #80]	; (d9588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9536:	681a      	ldr	r2, [r3, #0]
   d9538:	07d0      	lsls	r0, r2, #31
   d953a:	bf5c      	itt	pl
   d953c:	2201      	movpl	r2, #1
   d953e:	601a      	strpl	r2, [r3, #0]
   d9540:	4b12      	ldr	r3, [pc, #72]	; (d958c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9542:	681a      	ldr	r2, [r3, #0]
   d9544:	07d1      	lsls	r1, r2, #31
   d9546:	bf5c      	itt	pl
   d9548:	2201      	movpl	r2, #1
   d954a:	601a      	strpl	r2, [r3, #0]
   d954c:	4b10      	ldr	r3, [pc, #64]	; (d9590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d954e:	681a      	ldr	r2, [r3, #0]
   d9550:	07d2      	lsls	r2, r2, #31
   d9552:	bf5c      	itt	pl
   d9554:	2201      	movpl	r2, #1
   d9556:	601a      	strpl	r2, [r3, #0]
   d9558:	4b0e      	ldr	r3, [pc, #56]	; (d9594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d955a:	681a      	ldr	r2, [r3, #0]
   d955c:	07d0      	lsls	r0, r2, #31
   d955e:	bf5c      	itt	pl
   d9560:	2201      	movpl	r2, #1
   d9562:	601a      	strpl	r2, [r3, #0]
   d9564:	4b0c      	ldr	r3, [pc, #48]	; (d9598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9566:	681a      	ldr	r2, [r3, #0]
   d9568:	07d1      	lsls	r1, r2, #31
   d956a:	bf5c      	itt	pl
   d956c:	2201      	movpl	r2, #1
   d956e:	601a      	strpl	r2, [r3, #0]
   d9570:	4b0a      	ldr	r3, [pc, #40]	; (d959c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9572:	681a      	ldr	r2, [r3, #0]
   d9574:	07d2      	lsls	r2, r2, #31
   d9576:	bf5c      	itt	pl
   d9578:	2201      	movpl	r2, #1
   d957a:	601a      	strpl	r2, [r3, #0]
   d957c:	4770      	bx	lr
   d957e:	bf00      	nop
   d9580:	2003e7c8 	.word	0x2003e7c8
   d9584:	2003e7c4 	.word	0x2003e7c4
   d9588:	2003e7c0 	.word	0x2003e7c0
   d958c:	2003e7bc 	.word	0x2003e7bc
   d9590:	2003e7b8 	.word	0x2003e7b8
   d9594:	2003e7b4 	.word	0x2003e7b4
   d9598:	2003e7b0 	.word	0x2003e7b0
   d959c:	2003e7ac 	.word	0x2003e7ac

000d95a0 <pow>:
   d95a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d95a4:	ed2d 8b02 	vpush	{d8}
   d95a8:	f8df a324 	ldr.w	sl, [pc, #804]	; d98d0 <pow+0x330>
   d95ac:	b08b      	sub	sp, #44	; 0x2c
   d95ae:	ec57 6b10 	vmov	r6, r7, d0
   d95b2:	ec55 4b11 	vmov	r4, r5, d1
   d95b6:	f000 f98f 	bl	d98d8 <__ieee754_pow>
   d95ba:	f99a 8000 	ldrsb.w	r8, [sl]
   d95be:	eeb0 8a40 	vmov.f32	s16, s0
   d95c2:	eef0 8a60 	vmov.f32	s17, s1
   d95c6:	f1b8 3fff 	cmp.w	r8, #4294967295
   d95ca:	d048      	beq.n	d965e <pow+0xbe>
   d95cc:	4622      	mov	r2, r4
   d95ce:	462b      	mov	r3, r5
   d95d0:	4620      	mov	r0, r4
   d95d2:	4629      	mov	r1, r5
   d95d4:	f001 fd6e 	bl	db0b4 <__aeabi_dcmpun>
   d95d8:	4683      	mov	fp, r0
   d95da:	2800      	cmp	r0, #0
   d95dc:	d13f      	bne.n	d965e <pow+0xbe>
   d95de:	4632      	mov	r2, r6
   d95e0:	463b      	mov	r3, r7
   d95e2:	4630      	mov	r0, r6
   d95e4:	4639      	mov	r1, r7
   d95e6:	f001 fd65 	bl	db0b4 <__aeabi_dcmpun>
   d95ea:	4681      	mov	r9, r0
   d95ec:	2800      	cmp	r0, #0
   d95ee:	f040 8090 	bne.w	d9712 <pow+0x172>
   d95f2:	4630      	mov	r0, r6
   d95f4:	4639      	mov	r1, r7
   d95f6:	2200      	movs	r2, #0
   d95f8:	2300      	movs	r3, #0
   d95fa:	f001 fd29 	bl	db050 <__aeabi_dcmpeq>
   d95fe:	2800      	cmp	r0, #0
   d9600:	d036      	beq.n	d9670 <pow+0xd0>
   d9602:	2200      	movs	r2, #0
   d9604:	2300      	movs	r3, #0
   d9606:	4620      	mov	r0, r4
   d9608:	4629      	mov	r1, r5
   d960a:	f001 fd21 	bl	db050 <__aeabi_dcmpeq>
   d960e:	4683      	mov	fp, r0
   d9610:	b1b8      	cbz	r0, d9642 <pow+0xa2>
   d9612:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d98a8 <pow+0x308>
   d9616:	2201      	movs	r2, #1
   d9618:	4ba9      	ldr	r3, [pc, #676]	; (d98c0 <pow+0x320>)
   d961a:	f8cd 9020 	str.w	r9, [sp, #32]
   d961e:	9200      	str	r2, [sp, #0]
   d9620:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9624:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9628:	ed8d 7b06 	vstr	d7, [sp, #24]
   d962c:	9301      	str	r3, [sp, #4]
   d962e:	f1b8 0f00 	cmp.w	r8, #0
   d9632:	d05b      	beq.n	d96ec <pow+0x14c>
   d9634:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d98b0 <pow+0x310>
   d9638:	b00b      	add	sp, #44	; 0x2c
   d963a:	ecbd 8b02 	vpop	{d8}
   d963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9642:	ec45 4b10 	vmov	d0, r4, r5
   d9646:	f000 ffa7 	bl	da598 <finite>
   d964a:	b140      	cbz	r0, d965e <pow+0xbe>
   d964c:	2200      	movs	r2, #0
   d964e:	2300      	movs	r3, #0
   d9650:	4620      	mov	r0, r4
   d9652:	4629      	mov	r1, r5
   d9654:	f001 fd06 	bl	db064 <__aeabi_dcmplt>
   d9658:	2800      	cmp	r0, #0
   d965a:	f040 80c5 	bne.w	d97e8 <pow+0x248>
   d965e:	eeb0 0a48 	vmov.f32	s0, s16
   d9662:	eef0 0a68 	vmov.f32	s1, s17
   d9666:	b00b      	add	sp, #44	; 0x2c
   d9668:	ecbd 8b02 	vpop	{d8}
   d966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9670:	eeb0 0a48 	vmov.f32	s0, s16
   d9674:	eef0 0a68 	vmov.f32	s1, s17
   d9678:	f000 ff8e 	bl	da598 <finite>
   d967c:	4680      	mov	r8, r0
   d967e:	2800      	cmp	r0, #0
   d9680:	d061      	beq.n	d9746 <pow+0x1a6>
   d9682:	f04f 0800 	mov.w	r8, #0
   d9686:	f04f 0900 	mov.w	r9, #0
   d968a:	ec51 0b18 	vmov	r0, r1, d8
   d968e:	4642      	mov	r2, r8
   d9690:	464b      	mov	r3, r9
   d9692:	f001 fcdd 	bl	db050 <__aeabi_dcmpeq>
   d9696:	2800      	cmp	r0, #0
   d9698:	d0e1      	beq.n	d965e <pow+0xbe>
   d969a:	ec47 6b10 	vmov	d0, r6, r7
   d969e:	f000 ff7b 	bl	da598 <finite>
   d96a2:	2800      	cmp	r0, #0
   d96a4:	d0db      	beq.n	d965e <pow+0xbe>
   d96a6:	ec45 4b10 	vmov	d0, r4, r5
   d96aa:	f000 ff75 	bl	da598 <finite>
   d96ae:	2800      	cmp	r0, #0
   d96b0:	d0d5      	beq.n	d965e <pow+0xbe>
   d96b2:	f99a 3000 	ldrsb.w	r3, [sl]
   d96b6:	4a82      	ldr	r2, [pc, #520]	; (d98c0 <pow+0x320>)
   d96b8:	9201      	str	r2, [sp, #4]
   d96ba:	2104      	movs	r1, #4
   d96bc:	2200      	movs	r2, #0
   d96be:	2b02      	cmp	r3, #2
   d96c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d96c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d96c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d96cc:	9100      	str	r1, [sp, #0]
   d96ce:	9208      	str	r2, [sp, #32]
   d96d0:	d003      	beq.n	d96da <pow+0x13a>
   d96d2:	4668      	mov	r0, sp
   d96d4:	f000 ff68 	bl	da5a8 <matherr>
   d96d8:	b970      	cbnz	r0, d96f8 <pow+0x158>
   d96da:	f7fd fd49 	bl	d7170 <__errno>
   d96de:	2322      	movs	r3, #34	; 0x22
   d96e0:	6003      	str	r3, [r0, #0]
   d96e2:	e009      	b.n	d96f8 <pow+0x158>
   d96e4:	ed9f 7b70 	vldr	d7, [pc, #448]	; d98a8 <pow+0x308>
   d96e8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d96ec:	4668      	mov	r0, sp
   d96ee:	f000 ff5b 	bl	da5a8 <matherr>
   d96f2:	2800      	cmp	r0, #0
   d96f4:	f000 808e 	beq.w	d9814 <pow+0x274>
   d96f8:	9b08      	ldr	r3, [sp, #32]
   d96fa:	b11b      	cbz	r3, d9704 <pow+0x164>
   d96fc:	f7fd fd38 	bl	d7170 <__errno>
   d9700:	9b08      	ldr	r3, [sp, #32]
   d9702:	6003      	str	r3, [r0, #0]
   d9704:	ed9d 0b06 	vldr	d0, [sp, #24]
   d9708:	b00b      	add	sp, #44	; 0x2c
   d970a:	ecbd 8b02 	vpop	{d8}
   d970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9712:	2200      	movs	r2, #0
   d9714:	2300      	movs	r3, #0
   d9716:	4620      	mov	r0, r4
   d9718:	4629      	mov	r1, r5
   d971a:	f001 fc99 	bl	db050 <__aeabi_dcmpeq>
   d971e:	2800      	cmp	r0, #0
   d9720:	d09d      	beq.n	d965e <pow+0xbe>
   d9722:	ed9f 0b63 	vldr	d0, [pc, #396]	; d98b0 <pow+0x310>
   d9726:	4b66      	ldr	r3, [pc, #408]	; (d98c0 <pow+0x320>)
   d9728:	f8cd b020 	str.w	fp, [sp, #32]
   d972c:	2201      	movs	r2, #1
   d972e:	f1b8 0f02 	cmp.w	r8, #2
   d9732:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9736:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d973a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d973e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d9742:	d1d3      	bne.n	d96ec <pow+0x14c>
   d9744:	e78f      	b.n	d9666 <pow+0xc6>
   d9746:	ec47 6b10 	vmov	d0, r6, r7
   d974a:	f000 ff25 	bl	da598 <finite>
   d974e:	2800      	cmp	r0, #0
   d9750:	d097      	beq.n	d9682 <pow+0xe2>
   d9752:	ec45 4b10 	vmov	d0, r4, r5
   d9756:	f000 ff1f 	bl	da598 <finite>
   d975a:	2800      	cmp	r0, #0
   d975c:	d091      	beq.n	d9682 <pow+0xe2>
   d975e:	ec53 2b18 	vmov	r2, r3, d8
   d9762:	ee18 0a10 	vmov	r0, s16
   d9766:	4619      	mov	r1, r3
   d9768:	f001 fca4 	bl	db0b4 <__aeabi_dcmpun>
   d976c:	2800      	cmp	r0, #0
   d976e:	d17c      	bne.n	d986a <pow+0x2ca>
   d9770:	2303      	movs	r3, #3
   d9772:	f99a 8000 	ldrsb.w	r8, [sl]
   d9776:	9300      	str	r3, [sp, #0]
   d9778:	4b51      	ldr	r3, [pc, #324]	; (d98c0 <pow+0x320>)
   d977a:	9008      	str	r0, [sp, #32]
   d977c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9780:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9784:	9301      	str	r3, [sp, #4]
   d9786:	f1b8 0f00 	cmp.w	r8, #0
   d978a:	d148      	bne.n	d981e <pow+0x27e>
   d978c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d98d4 <pow+0x334>
   d9790:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d9794:	2200      	movs	r2, #0
   d9796:	2300      	movs	r3, #0
   d9798:	4630      	mov	r0, r6
   d979a:	4639      	mov	r1, r7
   d979c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d97a0:	f001 fc60 	bl	db064 <__aeabi_dcmplt>
   d97a4:	2800      	cmp	r0, #0
   d97a6:	d094      	beq.n	d96d2 <pow+0x132>
   d97a8:	2200      	movs	r2, #0
   d97aa:	4b46      	ldr	r3, [pc, #280]	; (d98c4 <pow+0x324>)
   d97ac:	4620      	mov	r0, r4
   d97ae:	4629      	mov	r1, r5
   d97b0:	f001 f9e6 	bl	dab80 <__aeabi_dmul>
   d97b4:	4604      	mov	r4, r0
   d97b6:	460d      	mov	r5, r1
   d97b8:	ec45 4b10 	vmov	d0, r4, r5
   d97bc:	f000 ff00 	bl	da5c0 <rint>
   d97c0:	4620      	mov	r0, r4
   d97c2:	ec53 2b10 	vmov	r2, r3, d0
   d97c6:	4629      	mov	r1, r5
   d97c8:	f001 fc42 	bl	db050 <__aeabi_dcmpeq>
   d97cc:	2800      	cmp	r0, #0
   d97ce:	d149      	bne.n	d9864 <pow+0x2c4>
   d97d0:	4b3d      	ldr	r3, [pc, #244]	; (d98c8 <pow+0x328>)
   d97d2:	f99a 8000 	ldrsb.w	r8, [sl]
   d97d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d97da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d97de:	f1b8 0f02 	cmp.w	r8, #2
   d97e2:	f47f af76 	bne.w	d96d2 <pow+0x132>
   d97e6:	e778      	b.n	d96da <pow+0x13a>
   d97e8:	4a35      	ldr	r2, [pc, #212]	; (d98c0 <pow+0x320>)
   d97ea:	f99a 3000 	ldrsb.w	r3, [sl]
   d97ee:	f8cd b020 	str.w	fp, [sp, #32]
   d97f2:	2101      	movs	r1, #1
   d97f4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d97f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d97fc:	e88d 0006 	stmia.w	sp, {r1, r2}
   d9800:	2b00      	cmp	r3, #0
   d9802:	f43f af6f 	beq.w	d96e4 <pow+0x144>
   d9806:	4931      	ldr	r1, [pc, #196]	; (d98cc <pow+0x32c>)
   d9808:	2000      	movs	r0, #0
   d980a:	2b02      	cmp	r3, #2
   d980c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d9810:	f47f af6c 	bne.w	d96ec <pow+0x14c>
   d9814:	f7fd fcac 	bl	d7170 <__errno>
   d9818:	2321      	movs	r3, #33	; 0x21
   d981a:	6003      	str	r3, [r0, #0]
   d981c:	e76c      	b.n	d96f8 <pow+0x158>
   d981e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d98b8 <pow+0x318>
   d9822:	2200      	movs	r2, #0
   d9824:	2300      	movs	r3, #0
   d9826:	4630      	mov	r0, r6
   d9828:	4639      	mov	r1, r7
   d982a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d982e:	f001 fc19 	bl	db064 <__aeabi_dcmplt>
   d9832:	2800      	cmp	r0, #0
   d9834:	d0d3      	beq.n	d97de <pow+0x23e>
   d9836:	2200      	movs	r2, #0
   d9838:	4b22      	ldr	r3, [pc, #136]	; (d98c4 <pow+0x324>)
   d983a:	4620      	mov	r0, r4
   d983c:	4629      	mov	r1, r5
   d983e:	f001 f99f 	bl	dab80 <__aeabi_dmul>
   d9842:	4604      	mov	r4, r0
   d9844:	460d      	mov	r5, r1
   d9846:	ec45 4b10 	vmov	d0, r4, r5
   d984a:	f000 feb9 	bl	da5c0 <rint>
   d984e:	4620      	mov	r0, r4
   d9850:	ec53 2b10 	vmov	r2, r3, d0
   d9854:	4629      	mov	r1, r5
   d9856:	f001 fbfb 	bl	db050 <__aeabi_dcmpeq>
   d985a:	b918      	cbnz	r0, d9864 <pow+0x2c4>
   d985c:	4b1b      	ldr	r3, [pc, #108]	; (d98cc <pow+0x32c>)
   d985e:	2200      	movs	r2, #0
   d9860:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d9864:	f99a 8000 	ldrsb.w	r8, [sl]
   d9868:	e7b9      	b.n	d97de <pow+0x23e>
   d986a:	4b15      	ldr	r3, [pc, #84]	; (d98c0 <pow+0x320>)
   d986c:	f99a 9000 	ldrsb.w	r9, [sl]
   d9870:	f8cd 8020 	str.w	r8, [sp, #32]
   d9874:	2201      	movs	r2, #1
   d9876:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d987a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d987e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d9882:	f1b9 0f00 	cmp.w	r9, #0
   d9886:	f43f af2d 	beq.w	d96e4 <pow+0x144>
   d988a:	2200      	movs	r2, #0
   d988c:	2300      	movs	r3, #0
   d988e:	4610      	mov	r0, r2
   d9890:	4619      	mov	r1, r3
   d9892:	f001 fa9f 	bl	dadd4 <__aeabi_ddiv>
   d9896:	f1b9 0f02 	cmp.w	r9, #2
   d989a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d989e:	d0b9      	beq.n	d9814 <pow+0x274>
   d98a0:	e724      	b.n	d96ec <pow+0x14c>
   d98a2:	bf00      	nop
   d98a4:	f3af 8000 	nop.w
	...
   d98b4:	3ff00000 	.word	0x3ff00000
   d98b8:	00000000 	.word	0x00000000
   d98bc:	7ff00000 	.word	0x7ff00000
   d98c0:	000dd410 	.word	0x000dd410
   d98c4:	3fe00000 	.word	0x3fe00000
   d98c8:	c7efffff 	.word	0xc7efffff
   d98cc:	fff00000 	.word	0xfff00000
   d98d0:	2003e08c 	.word	0x2003e08c
   d98d4:	47efffff 	.word	0x47efffff

000d98d8 <__ieee754_pow>:
   d98d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98dc:	ec51 0b11 	vmov	r0, r1, d1
   d98e0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d98e4:	ea58 0400 	orrs.w	r4, r8, r0
   d98e8:	b093      	sub	sp, #76	; 0x4c
   d98ea:	d03c      	beq.n	d9966 <__ieee754_pow+0x8e>
   d98ec:	ec53 2b10 	vmov	r2, r3, d0
   d98f0:	4e6d      	ldr	r6, [pc, #436]	; (d9aa8 <__ieee754_pow+0x1d0>)
   d98f2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d98f6:	42b4      	cmp	r4, r6
   d98f8:	ee10 aa10 	vmov	sl, s0
   d98fc:	461d      	mov	r5, r3
   d98fe:	dc2b      	bgt.n	d9958 <__ieee754_pow+0x80>
   d9900:	4689      	mov	r9, r1
   d9902:	ee11 ea10 	vmov	lr, s2
   d9906:	d026      	beq.n	d9956 <__ieee754_pow+0x7e>
   d9908:	45b0      	cmp	r8, r6
   d990a:	dc25      	bgt.n	d9958 <__ieee754_pow+0x80>
   d990c:	4e66      	ldr	r6, [pc, #408]	; (d9aa8 <__ieee754_pow+0x1d0>)
   d990e:	45b0      	cmp	r8, r6
   d9910:	d077      	beq.n	d9a02 <__ieee754_pow+0x12a>
   d9912:	2d00      	cmp	r5, #0
   d9914:	4616      	mov	r6, r2
   d9916:	461f      	mov	r7, r3
   d9918:	e9cd 0100 	strd	r0, r1, [sp]
   d991c:	db75      	blt.n	d9a0a <__ieee754_pow+0x132>
   d991e:	f04f 0b00 	mov.w	fp, #0
   d9922:	f1be 0f00 	cmp.w	lr, #0
   d9926:	d12d      	bne.n	d9984 <__ieee754_pow+0xac>
   d9928:	4b5f      	ldr	r3, [pc, #380]	; (d9aa8 <__ieee754_pow+0x1d0>)
   d992a:	4598      	cmp	r8, r3
   d992c:	f000 8089 	beq.w	d9a42 <__ieee754_pow+0x16a>
   d9930:	4b5e      	ldr	r3, [pc, #376]	; (d9aac <__ieee754_pow+0x1d4>)
   d9932:	4598      	cmp	r8, r3
   d9934:	d05e      	beq.n	d99f4 <__ieee754_pow+0x11c>
   d9936:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d993a:	f000 83de 	beq.w	da0fa <__ieee754_pow+0x822>
   d993e:	4b5c      	ldr	r3, [pc, #368]	; (d9ab0 <__ieee754_pow+0x1d8>)
   d9940:	4599      	cmp	r9, r3
   d9942:	d11f      	bne.n	d9984 <__ieee754_pow+0xac>
   d9944:	2d00      	cmp	r5, #0
   d9946:	db1d      	blt.n	d9984 <__ieee754_pow+0xac>
   d9948:	ec47 6b10 	vmov	d0, r6, r7
   d994c:	b013      	add	sp, #76	; 0x4c
   d994e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9952:	f000 bd49 	b.w	da3e8 <__ieee754_sqrt>
   d9956:	b15a      	cbz	r2, d9970 <__ieee754_pow+0x98>
   d9958:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d995c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d9960:	ea54 030a 	orrs.w	r3, r4, sl
   d9964:	d106      	bne.n	d9974 <__ieee754_pow+0x9c>
   d9966:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d9a90 <__ieee754_pow+0x1b8>
   d996a:	b013      	add	sp, #76	; 0x4c
   d996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9970:	45a0      	cmp	r8, r4
   d9972:	ddcb      	ble.n	d990c <__ieee754_pow+0x34>
   d9974:	484f      	ldr	r0, [pc, #316]	; (d9ab4 <__ieee754_pow+0x1dc>)
   d9976:	b013      	add	sp, #76	; 0x4c
   d9978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d997c:	f000 be18 	b.w	da5b0 <nan>
   d9980:	f04f 0b00 	mov.w	fp, #0
   d9984:	ec47 6b10 	vmov	d0, r6, r7
   d9988:	f000 fdfe 	bl	da588 <fabs>
   d998c:	ec51 0b10 	vmov	r0, r1, d0
   d9990:	f1ba 0f00 	cmp.w	sl, #0
   d9994:	d01e      	beq.n	d99d4 <__ieee754_pow+0xfc>
   d9996:	0fed      	lsrs	r5, r5, #31
   d9998:	f105 3aff 	add.w	sl, r5, #4294967295
   d999c:	ea5b 030a 	orrs.w	r3, fp, sl
   d99a0:	d063      	beq.n	d9a6a <__ieee754_pow+0x192>
   d99a2:	4b45      	ldr	r3, [pc, #276]	; (d9ab8 <__ieee754_pow+0x1e0>)
   d99a4:	4598      	cmp	r8, r3
   d99a6:	f340 808d 	ble.w	d9ac4 <__ieee754_pow+0x1ec>
   d99aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d99ae:	4598      	cmp	r8, r3
   d99b0:	f340 8438 	ble.w	da224 <__ieee754_pow+0x94c>
   d99b4:	4b41      	ldr	r3, [pc, #260]	; (d9abc <__ieee754_pow+0x1e4>)
   d99b6:	429c      	cmp	r4, r3
   d99b8:	dd62      	ble.n	d9a80 <__ieee754_pow+0x1a8>
   d99ba:	f1b9 0f00 	cmp.w	r9, #0
   d99be:	dd62      	ble.n	d9a86 <__ieee754_pow+0x1ae>
   d99c0:	a335      	add	r3, pc, #212	; (adr r3, d9a98 <__ieee754_pow+0x1c0>)
   d99c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99c6:	4610      	mov	r0, r2
   d99c8:	4619      	mov	r1, r3
   d99ca:	f001 f8d9 	bl	dab80 <__aeabi_dmul>
   d99ce:	ec41 0b10 	vmov	d0, r0, r1
   d99d2:	e7ca      	b.n	d996a <__ieee754_pow+0x92>
   d99d4:	b124      	cbz	r4, d99e0 <__ieee754_pow+0x108>
   d99d6:	4b35      	ldr	r3, [pc, #212]	; (d9aac <__ieee754_pow+0x1d4>)
   d99d8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d99dc:	429a      	cmp	r2, r3
   d99de:	d1da      	bne.n	d9996 <__ieee754_pow+0xbe>
   d99e0:	f1b9 0f00 	cmp.w	r9, #0
   d99e4:	f2c0 83cb 	blt.w	da17e <__ieee754_pow+0x8a6>
   d99e8:	2d00      	cmp	r5, #0
   d99ea:	f2c0 8374 	blt.w	da0d6 <__ieee754_pow+0x7fe>
   d99ee:	ec41 0b10 	vmov	d0, r0, r1
   d99f2:	e7ba      	b.n	d996a <__ieee754_pow+0x92>
   d99f4:	f1b9 0f00 	cmp.w	r9, #0
   d99f8:	f2c0 847a 	blt.w	da2f0 <__ieee754_pow+0xa18>
   d99fc:	ec47 6b10 	vmov	d0, r6, r7
   d9a00:	e7b3      	b.n	d996a <__ieee754_pow+0x92>
   d9a02:	f1be 0f00 	cmp.w	lr, #0
   d9a06:	d084      	beq.n	d9912 <__ieee754_pow+0x3a>
   d9a08:	e7a6      	b.n	d9958 <__ieee754_pow+0x80>
   d9a0a:	4b2d      	ldr	r3, [pc, #180]	; (d9ac0 <__ieee754_pow+0x1e8>)
   d9a0c:	4598      	cmp	r8, r3
   d9a0e:	dc29      	bgt.n	d9a64 <__ieee754_pow+0x18c>
   d9a10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d9a14:	4598      	cmp	r8, r3
   d9a16:	dd82      	ble.n	d991e <__ieee754_pow+0x46>
   d9a18:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9a1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d9a20:	2b14      	cmp	r3, #20
   d9a22:	f340 847f 	ble.w	da324 <__ieee754_pow+0xa4c>
   d9a26:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d9a2a:	fa2e f203 	lsr.w	r2, lr, r3
   d9a2e:	fa02 f303 	lsl.w	r3, r2, r3
   d9a32:	459e      	cmp	lr, r3
   d9a34:	f47f af73 	bne.w	d991e <__ieee754_pow+0x46>
   d9a38:	f002 0201 	and.w	r2, r2, #1
   d9a3c:	f1c2 0b02 	rsb	fp, r2, #2
   d9a40:	e76f      	b.n	d9922 <__ieee754_pow+0x4a>
   d9a42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d9a46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d9a4a:	ea53 030a 	orrs.w	r3, r3, sl
   d9a4e:	d08a      	beq.n	d9966 <__ieee754_pow+0x8e>
   d9a50:	4b1a      	ldr	r3, [pc, #104]	; (d9abc <__ieee754_pow+0x1e4>)
   d9a52:	429c      	cmp	r4, r3
   d9a54:	f340 8385 	ble.w	da162 <__ieee754_pow+0x88a>
   d9a58:	f1b9 0f00 	cmp.w	r9, #0
   d9a5c:	db13      	blt.n	d9a86 <__ieee754_pow+0x1ae>
   d9a5e:	ed9d 0b00 	vldr	d0, [sp]
   d9a62:	e782      	b.n	d996a <__ieee754_pow+0x92>
   d9a64:	f04f 0b02 	mov.w	fp, #2
   d9a68:	e75b      	b.n	d9922 <__ieee754_pow+0x4a>
   d9a6a:	4632      	mov	r2, r6
   d9a6c:	463b      	mov	r3, r7
   d9a6e:	4610      	mov	r0, r2
   d9a70:	4619      	mov	r1, r3
   d9a72:	f000 fed1 	bl	da818 <__aeabi_dsub>
   d9a76:	4602      	mov	r2, r0
   d9a78:	460b      	mov	r3, r1
   d9a7a:	f001 f9ab 	bl	dadd4 <__aeabi_ddiv>
   d9a7e:	e7b6      	b.n	d99ee <__ieee754_pow+0x116>
   d9a80:	f1b9 0f00 	cmp.w	r9, #0
   d9a84:	db9c      	blt.n	d99c0 <__ieee754_pow+0xe8>
   d9a86:	ed9f 0b06 	vldr	d0, [pc, #24]	; d9aa0 <__ieee754_pow+0x1c8>
   d9a8a:	e76e      	b.n	d996a <__ieee754_pow+0x92>
   d9a8c:	f3af 8000 	nop.w
   d9a90:	00000000 	.word	0x00000000
   d9a94:	3ff00000 	.word	0x3ff00000
   d9a98:	8800759c 	.word	0x8800759c
   d9a9c:	7e37e43c 	.word	0x7e37e43c
	...
   d9aa8:	7ff00000 	.word	0x7ff00000
   d9aac:	3ff00000 	.word	0x3ff00000
   d9ab0:	3fe00000 	.word	0x3fe00000
   d9ab4:	000dd414 	.word	0x000dd414
   d9ab8:	41e00000 	.word	0x41e00000
   d9abc:	3fefffff 	.word	0x3fefffff
   d9ac0:	433fffff 	.word	0x433fffff
   d9ac4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d9ac8:	f04f 0200 	mov.w	r2, #0
   d9acc:	da05      	bge.n	d9ada <__ieee754_pow+0x202>
   d9ace:	4bd6      	ldr	r3, [pc, #856]	; (d9e28 <__ieee754_pow+0x550>)
   d9ad0:	f001 f856 	bl	dab80 <__aeabi_dmul>
   d9ad4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d9ad8:	460c      	mov	r4, r1
   d9ada:	1523      	asrs	r3, r4, #20
   d9adc:	4ed3      	ldr	r6, [pc, #844]	; (d9e2c <__ieee754_pow+0x554>)
   d9ade:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d9ae2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d9ae6:	4413      	add	r3, r2
   d9ae8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d9aec:	42b4      	cmp	r4, r6
   d9aee:	461a      	mov	r2, r3
   d9af0:	930d      	str	r3, [sp, #52]	; 0x34
   d9af2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d9af6:	f340 8349 	ble.w	da18c <__ieee754_pow+0x8b4>
   d9afa:	4bcd      	ldr	r3, [pc, #820]	; (d9e30 <__ieee754_pow+0x558>)
   d9afc:	429c      	cmp	r4, r3
   d9afe:	f340 842d 	ble.w	da35c <__ieee754_pow+0xa84>
   d9b02:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d9dd0 <__ieee754_pow+0x4f8>
   d9b06:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9b0a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9b0e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d9dd8 <__ieee754_pow+0x500>
   d9b12:	4613      	mov	r3, r2
   d9b14:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9b18:	3301      	adds	r3, #1
   d9b1a:	930d      	str	r3, [sp, #52]	; 0x34
   d9b1c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d9b20:	f04f 0800 	mov.w	r8, #0
   d9b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9b28:	4629      	mov	r1, r5
   d9b2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d9b2e:	f000 fe73 	bl	da818 <__aeabi_dsub>
   d9b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9b36:	4606      	mov	r6, r0
   d9b38:	460f      	mov	r7, r1
   d9b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9b3e:	f000 fe6d 	bl	da81c <__adddf3>
   d9b42:	4602      	mov	r2, r0
   d9b44:	460b      	mov	r3, r1
   d9b46:	2000      	movs	r0, #0
   d9b48:	49ba      	ldr	r1, [pc, #744]	; (d9e34 <__ieee754_pow+0x55c>)
   d9b4a:	f001 f943 	bl	dadd4 <__aeabi_ddiv>
   d9b4e:	4603      	mov	r3, r0
   d9b50:	460c      	mov	r4, r1
   d9b52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d9b56:	4602      	mov	r2, r0
   d9b58:	460b      	mov	r3, r1
   d9b5a:	4630      	mov	r0, r6
   d9b5c:	4639      	mov	r1, r7
   d9b5e:	f001 f80f 	bl	dab80 <__aeabi_dmul>
   d9b62:	106b      	asrs	r3, r5, #1
   d9b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d9b68:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d9b6c:	eb03 0508 	add.w	r5, r3, r8
   d9b70:	460a      	mov	r2, r1
   d9b72:	2300      	movs	r3, #0
   d9b74:	4601      	mov	r1, r0
   d9b76:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d9b7a:	9302      	str	r3, [sp, #8]
   d9b7c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d9b80:	2400      	movs	r4, #0
   d9b82:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d9b86:	462b      	mov	r3, r5
   d9b88:	4622      	mov	r2, r4
   d9b8a:	4640      	mov	r0, r8
   d9b8c:	4649      	mov	r1, r9
   d9b8e:	f000 fff7 	bl	dab80 <__aeabi_dmul>
   d9b92:	4602      	mov	r2, r0
   d9b94:	460b      	mov	r3, r1
   d9b96:	4630      	mov	r0, r6
   d9b98:	4639      	mov	r1, r7
   d9b9a:	f000 fe3d 	bl	da818 <__aeabi_dsub>
   d9b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9ba2:	4606      	mov	r6, r0
   d9ba4:	460f      	mov	r7, r1
   d9ba6:	4620      	mov	r0, r4
   d9ba8:	4629      	mov	r1, r5
   d9baa:	f000 fe35 	bl	da818 <__aeabi_dsub>
   d9bae:	4602      	mov	r2, r0
   d9bb0:	460b      	mov	r3, r1
   d9bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9bb6:	f000 fe2f 	bl	da818 <__aeabi_dsub>
   d9bba:	4642      	mov	r2, r8
   d9bbc:	464b      	mov	r3, r9
   d9bbe:	f000 ffdf 	bl	dab80 <__aeabi_dmul>
   d9bc2:	4602      	mov	r2, r0
   d9bc4:	460b      	mov	r3, r1
   d9bc6:	4630      	mov	r0, r6
   d9bc8:	4639      	mov	r1, r7
   d9bca:	f000 fe25 	bl	da818 <__aeabi_dsub>
   d9bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d9bd2:	f000 ffd5 	bl	dab80 <__aeabi_dmul>
   d9bd6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d9bda:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d9bde:	4622      	mov	r2, r4
   d9be0:	462b      	mov	r3, r5
   d9be2:	4620      	mov	r0, r4
   d9be4:	4629      	mov	r1, r5
   d9be6:	f000 ffcb 	bl	dab80 <__aeabi_dmul>
   d9bea:	a37d      	add	r3, pc, #500	; (adr r3, d9de0 <__ieee754_pow+0x508>)
   d9bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bf0:	4604      	mov	r4, r0
   d9bf2:	460d      	mov	r5, r1
   d9bf4:	f000 ffc4 	bl	dab80 <__aeabi_dmul>
   d9bf8:	a37b      	add	r3, pc, #492	; (adr r3, d9de8 <__ieee754_pow+0x510>)
   d9bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bfe:	f000 fe0d 	bl	da81c <__adddf3>
   d9c02:	4622      	mov	r2, r4
   d9c04:	462b      	mov	r3, r5
   d9c06:	f000 ffbb 	bl	dab80 <__aeabi_dmul>
   d9c0a:	a379      	add	r3, pc, #484	; (adr r3, d9df0 <__ieee754_pow+0x518>)
   d9c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c10:	f000 fe04 	bl	da81c <__adddf3>
   d9c14:	4622      	mov	r2, r4
   d9c16:	462b      	mov	r3, r5
   d9c18:	f000 ffb2 	bl	dab80 <__aeabi_dmul>
   d9c1c:	a376      	add	r3, pc, #472	; (adr r3, d9df8 <__ieee754_pow+0x520>)
   d9c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c22:	f000 fdfb 	bl	da81c <__adddf3>
   d9c26:	4622      	mov	r2, r4
   d9c28:	462b      	mov	r3, r5
   d9c2a:	f000 ffa9 	bl	dab80 <__aeabi_dmul>
   d9c2e:	a374      	add	r3, pc, #464	; (adr r3, d9e00 <__ieee754_pow+0x528>)
   d9c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c34:	f000 fdf2 	bl	da81c <__adddf3>
   d9c38:	4622      	mov	r2, r4
   d9c3a:	462b      	mov	r3, r5
   d9c3c:	f000 ffa0 	bl	dab80 <__aeabi_dmul>
   d9c40:	a371      	add	r3, pc, #452	; (adr r3, d9e08 <__ieee754_pow+0x530>)
   d9c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c46:	f000 fde9 	bl	da81c <__adddf3>
   d9c4a:	4622      	mov	r2, r4
   d9c4c:	4606      	mov	r6, r0
   d9c4e:	460f      	mov	r7, r1
   d9c50:	462b      	mov	r3, r5
   d9c52:	4620      	mov	r0, r4
   d9c54:	4629      	mov	r1, r5
   d9c56:	f000 ff93 	bl	dab80 <__aeabi_dmul>
   d9c5a:	4602      	mov	r2, r0
   d9c5c:	460b      	mov	r3, r1
   d9c5e:	4630      	mov	r0, r6
   d9c60:	4639      	mov	r1, r7
   d9c62:	f000 ff8d 	bl	dab80 <__aeabi_dmul>
   d9c66:	4642      	mov	r2, r8
   d9c68:	4604      	mov	r4, r0
   d9c6a:	460d      	mov	r5, r1
   d9c6c:	464b      	mov	r3, r9
   d9c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9c72:	f000 fdd3 	bl	da81c <__adddf3>
   d9c76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9c7a:	f000 ff81 	bl	dab80 <__aeabi_dmul>
   d9c7e:	4622      	mov	r2, r4
   d9c80:	462b      	mov	r3, r5
   d9c82:	f000 fdcb 	bl	da81c <__adddf3>
   d9c86:	4642      	mov	r2, r8
   d9c88:	4606      	mov	r6, r0
   d9c8a:	460f      	mov	r7, r1
   d9c8c:	464b      	mov	r3, r9
   d9c8e:	4640      	mov	r0, r8
   d9c90:	4649      	mov	r1, r9
   d9c92:	f000 ff75 	bl	dab80 <__aeabi_dmul>
   d9c96:	2200      	movs	r2, #0
   d9c98:	4b67      	ldr	r3, [pc, #412]	; (d9e38 <__ieee754_pow+0x560>)
   d9c9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d9c9e:	f000 fdbd 	bl	da81c <__adddf3>
   d9ca2:	4632      	mov	r2, r6
   d9ca4:	463b      	mov	r3, r7
   d9ca6:	f000 fdb9 	bl	da81c <__adddf3>
   d9caa:	9802      	ldr	r0, [sp, #8]
   d9cac:	460d      	mov	r5, r1
   d9cae:	4604      	mov	r4, r0
   d9cb0:	4622      	mov	r2, r4
   d9cb2:	462b      	mov	r3, r5
   d9cb4:	4640      	mov	r0, r8
   d9cb6:	4649      	mov	r1, r9
   d9cb8:	f000 ff62 	bl	dab80 <__aeabi_dmul>
   d9cbc:	2200      	movs	r2, #0
   d9cbe:	4680      	mov	r8, r0
   d9cc0:	4689      	mov	r9, r1
   d9cc2:	4b5d      	ldr	r3, [pc, #372]	; (d9e38 <__ieee754_pow+0x560>)
   d9cc4:	4620      	mov	r0, r4
   d9cc6:	4629      	mov	r1, r5
   d9cc8:	f000 fda6 	bl	da818 <__aeabi_dsub>
   d9ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9cd0:	f000 fda2 	bl	da818 <__aeabi_dsub>
   d9cd4:	4602      	mov	r2, r0
   d9cd6:	460b      	mov	r3, r1
   d9cd8:	4630      	mov	r0, r6
   d9cda:	4639      	mov	r1, r7
   d9cdc:	f000 fd9c 	bl	da818 <__aeabi_dsub>
   d9ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9ce4:	f000 ff4c 	bl	dab80 <__aeabi_dmul>
   d9ce8:	4622      	mov	r2, r4
   d9cea:	4606      	mov	r6, r0
   d9cec:	460f      	mov	r7, r1
   d9cee:	462b      	mov	r3, r5
   d9cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9cf4:	f000 ff44 	bl	dab80 <__aeabi_dmul>
   d9cf8:	4602      	mov	r2, r0
   d9cfa:	460b      	mov	r3, r1
   d9cfc:	4630      	mov	r0, r6
   d9cfe:	4639      	mov	r1, r7
   d9d00:	f000 fd8c 	bl	da81c <__adddf3>
   d9d04:	4606      	mov	r6, r0
   d9d06:	460f      	mov	r7, r1
   d9d08:	4602      	mov	r2, r0
   d9d0a:	460b      	mov	r3, r1
   d9d0c:	4640      	mov	r0, r8
   d9d0e:	4649      	mov	r1, r9
   d9d10:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d9d14:	f000 fd82 	bl	da81c <__adddf3>
   d9d18:	9802      	ldr	r0, [sp, #8]
   d9d1a:	a33d      	add	r3, pc, #244	; (adr r3, d9e10 <__ieee754_pow+0x538>)
   d9d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d20:	4604      	mov	r4, r0
   d9d22:	460d      	mov	r5, r1
   d9d24:	f000 ff2c 	bl	dab80 <__aeabi_dmul>
   d9d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9d2c:	4680      	mov	r8, r0
   d9d2e:	4689      	mov	r9, r1
   d9d30:	4620      	mov	r0, r4
   d9d32:	4629      	mov	r1, r5
   d9d34:	f000 fd70 	bl	da818 <__aeabi_dsub>
   d9d38:	4602      	mov	r2, r0
   d9d3a:	460b      	mov	r3, r1
   d9d3c:	4630      	mov	r0, r6
   d9d3e:	4639      	mov	r1, r7
   d9d40:	f000 fd6a 	bl	da818 <__aeabi_dsub>
   d9d44:	a334      	add	r3, pc, #208	; (adr r3, d9e18 <__ieee754_pow+0x540>)
   d9d46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d4a:	f000 ff19 	bl	dab80 <__aeabi_dmul>
   d9d4e:	a334      	add	r3, pc, #208	; (adr r3, d9e20 <__ieee754_pow+0x548>)
   d9d50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d54:	4606      	mov	r6, r0
   d9d56:	460f      	mov	r7, r1
   d9d58:	4620      	mov	r0, r4
   d9d5a:	4629      	mov	r1, r5
   d9d5c:	f000 ff10 	bl	dab80 <__aeabi_dmul>
   d9d60:	4602      	mov	r2, r0
   d9d62:	460b      	mov	r3, r1
   d9d64:	4630      	mov	r0, r6
   d9d66:	4639      	mov	r1, r7
   d9d68:	f000 fd58 	bl	da81c <__adddf3>
   d9d6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d9d70:	f000 fd54 	bl	da81c <__adddf3>
   d9d74:	4606      	mov	r6, r0
   d9d76:	980d      	ldr	r0, [sp, #52]	; 0x34
   d9d78:	460f      	mov	r7, r1
   d9d7a:	f000 fe9b 	bl	daab4 <__aeabi_i2d>
   d9d7e:	4632      	mov	r2, r6
   d9d80:	4604      	mov	r4, r0
   d9d82:	460d      	mov	r5, r1
   d9d84:	463b      	mov	r3, r7
   d9d86:	4640      	mov	r0, r8
   d9d88:	4649      	mov	r1, r9
   d9d8a:	f000 fd47 	bl	da81c <__adddf3>
   d9d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9d92:	f000 fd43 	bl	da81c <__adddf3>
   d9d96:	4622      	mov	r2, r4
   d9d98:	462b      	mov	r3, r5
   d9d9a:	f000 fd3f 	bl	da81c <__adddf3>
   d9d9e:	9802      	ldr	r0, [sp, #8]
   d9da0:	4622      	mov	r2, r4
   d9da2:	462b      	mov	r3, r5
   d9da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9da8:	f000 fd36 	bl	da818 <__aeabi_dsub>
   d9dac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9db0:	f000 fd32 	bl	da818 <__aeabi_dsub>
   d9db4:	4642      	mov	r2, r8
   d9db6:	464b      	mov	r3, r9
   d9db8:	f000 fd2e 	bl	da818 <__aeabi_dsub>
   d9dbc:	4602      	mov	r2, r0
   d9dbe:	460b      	mov	r3, r1
   d9dc0:	4630      	mov	r0, r6
   d9dc2:	4639      	mov	r1, r7
   d9dc4:	f000 fd28 	bl	da818 <__aeabi_dsub>
   d9dc8:	4680      	mov	r8, r0
   d9dca:	4689      	mov	r9, r1
   d9dcc:	e036      	b.n	d9e3c <__ieee754_pow+0x564>
   d9dce:	bf00      	nop
	...
   d9ddc:	3ff00000 	.word	0x3ff00000
   d9de0:	4a454eef 	.word	0x4a454eef
   d9de4:	3fca7e28 	.word	0x3fca7e28
   d9de8:	93c9db65 	.word	0x93c9db65
   d9dec:	3fcd864a 	.word	0x3fcd864a
   d9df0:	a91d4101 	.word	0xa91d4101
   d9df4:	3fd17460 	.word	0x3fd17460
   d9df8:	518f264d 	.word	0x518f264d
   d9dfc:	3fd55555 	.word	0x3fd55555
   d9e00:	db6fabff 	.word	0xdb6fabff
   d9e04:	3fdb6db6 	.word	0x3fdb6db6
   d9e08:	33333303 	.word	0x33333303
   d9e0c:	3fe33333 	.word	0x3fe33333
   d9e10:	e0000000 	.word	0xe0000000
   d9e14:	3feec709 	.word	0x3feec709
   d9e18:	dc3a03fd 	.word	0xdc3a03fd
   d9e1c:	3feec709 	.word	0x3feec709
   d9e20:	145b01f5 	.word	0x145b01f5
   d9e24:	be3e2fe0 	.word	0xbe3e2fe0
   d9e28:	43400000 	.word	0x43400000
   d9e2c:	0003988e 	.word	0x0003988e
   d9e30:	000bb679 	.word	0x000bb679
   d9e34:	3ff00000 	.word	0x3ff00000
   d9e38:	40080000 	.word	0x40080000
   d9e3c:	f10b 33ff 	add.w	r3, fp, #4294967295
   d9e40:	ea53 030a 	orrs.w	r3, r3, sl
   d9e44:	f000 8188 	beq.w	da158 <__ieee754_pow+0x880>
   d9e48:	ed9f 7bd7 	vldr	d7, [pc, #860]	; da1a8 <__ieee754_pow+0x8d0>
   d9e4c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9e50:	e9dd ab00 	ldrd	sl, fp, [sp]
   d9e54:	4653      	mov	r3, sl
   d9e56:	465c      	mov	r4, fp
   d9e58:	e9cd 3400 	strd	r3, r4, [sp]
   d9e5c:	2300      	movs	r3, #0
   d9e5e:	9300      	str	r3, [sp, #0]
   d9e60:	e9dd 4500 	ldrd	r4, r5, [sp]
   d9e64:	4650      	mov	r0, sl
   d9e66:	4622      	mov	r2, r4
   d9e68:	462b      	mov	r3, r5
   d9e6a:	4659      	mov	r1, fp
   d9e6c:	f000 fcd4 	bl	da818 <__aeabi_dsub>
   d9e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e74:	f000 fe84 	bl	dab80 <__aeabi_dmul>
   d9e78:	4652      	mov	r2, sl
   d9e7a:	4606      	mov	r6, r0
   d9e7c:	460f      	mov	r7, r1
   d9e7e:	465b      	mov	r3, fp
   d9e80:	4640      	mov	r0, r8
   d9e82:	4649      	mov	r1, r9
   d9e84:	f000 fe7c 	bl	dab80 <__aeabi_dmul>
   d9e88:	4602      	mov	r2, r0
   d9e8a:	460b      	mov	r3, r1
   d9e8c:	4630      	mov	r0, r6
   d9e8e:	4639      	mov	r1, r7
   d9e90:	f000 fcc4 	bl	da81c <__adddf3>
   d9e94:	4622      	mov	r2, r4
   d9e96:	4680      	mov	r8, r0
   d9e98:	4689      	mov	r9, r1
   d9e9a:	462b      	mov	r3, r5
   d9e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9ea0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d9ea4:	f000 fe6c 	bl	dab80 <__aeabi_dmul>
   d9ea8:	460b      	mov	r3, r1
   d9eaa:	4602      	mov	r2, r0
   d9eac:	4606      	mov	r6, r0
   d9eae:	460f      	mov	r7, r1
   d9eb0:	4640      	mov	r0, r8
   d9eb2:	4649      	mov	r1, r9
   d9eb4:	f000 fcb2 	bl	da81c <__adddf3>
   d9eb8:	4bd5      	ldr	r3, [pc, #852]	; (da210 <__ieee754_pow+0x938>)
   d9eba:	4299      	cmp	r1, r3
   d9ebc:	4604      	mov	r4, r0
   d9ebe:	460d      	mov	r5, r1
   d9ec0:	468a      	mov	sl, r1
   d9ec2:	f340 8123 	ble.w	da10c <__ieee754_pow+0x834>
   d9ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d9eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d9ece:	4303      	orrs	r3, r0
   d9ed0:	f040 8218 	bne.w	da304 <__ieee754_pow+0xa2c>
   d9ed4:	a3b6      	add	r3, pc, #728	; (adr r3, da1b0 <__ieee754_pow+0x8d8>)
   d9ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9ede:	f000 fc9d 	bl	da81c <__adddf3>
   d9ee2:	4632      	mov	r2, r6
   d9ee4:	4680      	mov	r8, r0
   d9ee6:	4689      	mov	r9, r1
   d9ee8:	463b      	mov	r3, r7
   d9eea:	4620      	mov	r0, r4
   d9eec:	4629      	mov	r1, r5
   d9eee:	f000 fc93 	bl	da818 <__aeabi_dsub>
   d9ef2:	4602      	mov	r2, r0
   d9ef4:	460b      	mov	r3, r1
   d9ef6:	4640      	mov	r0, r8
   d9ef8:	4649      	mov	r1, r9
   d9efa:	f001 f8d1 	bl	db0a0 <__aeabi_dcmpgt>
   d9efe:	2800      	cmp	r0, #0
   d9f00:	f040 8200 	bne.w	da304 <__ieee754_pow+0xa2c>
   d9f04:	46a8      	mov	r8, r5
   d9f06:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9f0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d9f0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d9f12:	fa42 f303 	asr.w	r3, r2, r3
   d9f16:	4453      	add	r3, sl
   d9f18:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9f1c:	4dbd      	ldr	r5, [pc, #756]	; (da214 <__ieee754_pow+0x93c>)
   d9f1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d9f22:	4115      	asrs	r5, r2
   d9f24:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d9f28:	2000      	movs	r0, #0
   d9f2a:	f1c2 0414 	rsb	r4, r2, #20
   d9f2e:	ea23 0105 	bic.w	r1, r3, r5
   d9f32:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d9f36:	f1ba 0f00 	cmp.w	sl, #0
   d9f3a:	4602      	mov	r2, r0
   d9f3c:	460b      	mov	r3, r1
   d9f3e:	fa4b fb04 	asr.w	fp, fp, r4
   d9f42:	4630      	mov	r0, r6
   d9f44:	4639      	mov	r1, r7
   d9f46:	bfb8      	it	lt
   d9f48:	f1cb 0b00 	rsblt	fp, fp, #0
   d9f4c:	f000 fc64 	bl	da818 <__aeabi_dsub>
   d9f50:	4602      	mov	r2, r0
   d9f52:	460b      	mov	r3, r1
   d9f54:	4606      	mov	r6, r0
   d9f56:	460f      	mov	r7, r1
   d9f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9f5c:	f000 fc5e 	bl	da81c <__adddf3>
   d9f60:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d9f64:	2400      	movs	r4, #0
   d9f66:	a394      	add	r3, pc, #592	; (adr r3, da1b8 <__ieee754_pow+0x8e0>)
   d9f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f6c:	4620      	mov	r0, r4
   d9f6e:	460d      	mov	r5, r1
   d9f70:	f000 fe06 	bl	dab80 <__aeabi_dmul>
   d9f74:	4632      	mov	r2, r6
   d9f76:	4680      	mov	r8, r0
   d9f78:	4689      	mov	r9, r1
   d9f7a:	463b      	mov	r3, r7
   d9f7c:	4620      	mov	r0, r4
   d9f7e:	4629      	mov	r1, r5
   d9f80:	f000 fc4a 	bl	da818 <__aeabi_dsub>
   d9f84:	4602      	mov	r2, r0
   d9f86:	460b      	mov	r3, r1
   d9f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9f8c:	f000 fc44 	bl	da818 <__aeabi_dsub>
   d9f90:	a38b      	add	r3, pc, #556	; (adr r3, da1c0 <__ieee754_pow+0x8e8>)
   d9f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f96:	f000 fdf3 	bl	dab80 <__aeabi_dmul>
   d9f9a:	a38b      	add	r3, pc, #556	; (adr r3, da1c8 <__ieee754_pow+0x8f0>)
   d9f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fa0:	4606      	mov	r6, r0
   d9fa2:	460f      	mov	r7, r1
   d9fa4:	4620      	mov	r0, r4
   d9fa6:	4629      	mov	r1, r5
   d9fa8:	f000 fdea 	bl	dab80 <__aeabi_dmul>
   d9fac:	4602      	mov	r2, r0
   d9fae:	460b      	mov	r3, r1
   d9fb0:	4630      	mov	r0, r6
   d9fb2:	4639      	mov	r1, r7
   d9fb4:	f000 fc32 	bl	da81c <__adddf3>
   d9fb8:	4606      	mov	r6, r0
   d9fba:	460f      	mov	r7, r1
   d9fbc:	4602      	mov	r2, r0
   d9fbe:	460b      	mov	r3, r1
   d9fc0:	4640      	mov	r0, r8
   d9fc2:	4649      	mov	r1, r9
   d9fc4:	f000 fc2a 	bl	da81c <__adddf3>
   d9fc8:	4642      	mov	r2, r8
   d9fca:	464b      	mov	r3, r9
   d9fcc:	4604      	mov	r4, r0
   d9fce:	460d      	mov	r5, r1
   d9fd0:	f000 fc22 	bl	da818 <__aeabi_dsub>
   d9fd4:	4602      	mov	r2, r0
   d9fd6:	460b      	mov	r3, r1
   d9fd8:	4630      	mov	r0, r6
   d9fda:	4639      	mov	r1, r7
   d9fdc:	f000 fc1c 	bl	da818 <__aeabi_dsub>
   d9fe0:	4622      	mov	r2, r4
   d9fe2:	4680      	mov	r8, r0
   d9fe4:	4689      	mov	r9, r1
   d9fe6:	462b      	mov	r3, r5
   d9fe8:	4620      	mov	r0, r4
   d9fea:	4629      	mov	r1, r5
   d9fec:	f000 fdc8 	bl	dab80 <__aeabi_dmul>
   d9ff0:	a377      	add	r3, pc, #476	; (adr r3, da1d0 <__ieee754_pow+0x8f8>)
   d9ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ff6:	4606      	mov	r6, r0
   d9ff8:	460f      	mov	r7, r1
   d9ffa:	f000 fdc1 	bl	dab80 <__aeabi_dmul>
   d9ffe:	a376      	add	r3, pc, #472	; (adr r3, da1d8 <__ieee754_pow+0x900>)
   da000:	e9d3 2300 	ldrd	r2, r3, [r3]
   da004:	f000 fc08 	bl	da818 <__aeabi_dsub>
   da008:	4632      	mov	r2, r6
   da00a:	463b      	mov	r3, r7
   da00c:	f000 fdb8 	bl	dab80 <__aeabi_dmul>
   da010:	a373      	add	r3, pc, #460	; (adr r3, da1e0 <__ieee754_pow+0x908>)
   da012:	e9d3 2300 	ldrd	r2, r3, [r3]
   da016:	f000 fc01 	bl	da81c <__adddf3>
   da01a:	4632      	mov	r2, r6
   da01c:	463b      	mov	r3, r7
   da01e:	f000 fdaf 	bl	dab80 <__aeabi_dmul>
   da022:	a371      	add	r3, pc, #452	; (adr r3, da1e8 <__ieee754_pow+0x910>)
   da024:	e9d3 2300 	ldrd	r2, r3, [r3]
   da028:	f000 fbf6 	bl	da818 <__aeabi_dsub>
   da02c:	4632      	mov	r2, r6
   da02e:	463b      	mov	r3, r7
   da030:	f000 fda6 	bl	dab80 <__aeabi_dmul>
   da034:	a36e      	add	r3, pc, #440	; (adr r3, da1f0 <__ieee754_pow+0x918>)
   da036:	e9d3 2300 	ldrd	r2, r3, [r3]
   da03a:	f000 fbef 	bl	da81c <__adddf3>
   da03e:	4632      	mov	r2, r6
   da040:	463b      	mov	r3, r7
   da042:	f000 fd9d 	bl	dab80 <__aeabi_dmul>
   da046:	4602      	mov	r2, r0
   da048:	460b      	mov	r3, r1
   da04a:	4620      	mov	r0, r4
   da04c:	4629      	mov	r1, r5
   da04e:	f000 fbe3 	bl	da818 <__aeabi_dsub>
   da052:	4606      	mov	r6, r0
   da054:	460f      	mov	r7, r1
   da056:	4602      	mov	r2, r0
   da058:	460b      	mov	r3, r1
   da05a:	4620      	mov	r0, r4
   da05c:	4629      	mov	r1, r5
   da05e:	f000 fd8f 	bl	dab80 <__aeabi_dmul>
   da062:	2200      	movs	r2, #0
   da064:	e9cd 0100 	strd	r0, r1, [sp]
   da068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da06c:	4630      	mov	r0, r6
   da06e:	4639      	mov	r1, r7
   da070:	f000 fbd2 	bl	da818 <__aeabi_dsub>
   da074:	4602      	mov	r2, r0
   da076:	460b      	mov	r3, r1
   da078:	e9dd 0100 	ldrd	r0, r1, [sp]
   da07c:	f000 feaa 	bl	dadd4 <__aeabi_ddiv>
   da080:	4642      	mov	r2, r8
   da082:	4606      	mov	r6, r0
   da084:	460f      	mov	r7, r1
   da086:	464b      	mov	r3, r9
   da088:	4620      	mov	r0, r4
   da08a:	4629      	mov	r1, r5
   da08c:	f000 fd78 	bl	dab80 <__aeabi_dmul>
   da090:	4642      	mov	r2, r8
   da092:	464b      	mov	r3, r9
   da094:	f000 fbc2 	bl	da81c <__adddf3>
   da098:	4602      	mov	r2, r0
   da09a:	460b      	mov	r3, r1
   da09c:	4630      	mov	r0, r6
   da09e:	4639      	mov	r1, r7
   da0a0:	f000 fbba 	bl	da818 <__aeabi_dsub>
   da0a4:	4622      	mov	r2, r4
   da0a6:	462b      	mov	r3, r5
   da0a8:	f000 fbb6 	bl	da818 <__aeabi_dsub>
   da0ac:	4602      	mov	r2, r0
   da0ae:	460b      	mov	r3, r1
   da0b0:	2000      	movs	r0, #0
   da0b2:	4959      	ldr	r1, [pc, #356]	; (da218 <__ieee754_pow+0x940>)
   da0b4:	f000 fbb0 	bl	da818 <__aeabi_dsub>
   da0b8:	448a      	add	sl, r1
   da0ba:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   da0be:	4602      	mov	r2, r0
   da0c0:	460b      	mov	r3, r1
   da0c2:	f2c0 815b 	blt.w	da37c <__ieee754_pow+0xaa4>
   da0c6:	4651      	mov	r1, sl
   da0c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   da0cc:	f000 fd58 	bl	dab80 <__aeabi_dmul>
   da0d0:	ec41 0b10 	vmov	d0, r0, r1
   da0d4:	e449      	b.n	d996a <__ieee754_pow+0x92>
   da0d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   da0da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   da0de:	ea54 030b 	orrs.w	r3, r4, fp
   da0e2:	f000 8137 	beq.w	da354 <__ieee754_pow+0xa7c>
   da0e6:	f1bb 0f01 	cmp.w	fp, #1
   da0ea:	f47f ac80 	bne.w	d99ee <__ieee754_pow+0x116>
   da0ee:	4602      	mov	r2, r0
   da0f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da0f4:	ec43 2b10 	vmov	d0, r2, r3
   da0f8:	e437      	b.n	d996a <__ieee754_pow+0x92>
   da0fa:	4632      	mov	r2, r6
   da0fc:	463b      	mov	r3, r7
   da0fe:	4630      	mov	r0, r6
   da100:	4639      	mov	r1, r7
   da102:	f000 fd3d 	bl	dab80 <__aeabi_dmul>
   da106:	ec41 0b10 	vmov	d0, r0, r1
   da10a:	e42e      	b.n	d996a <__ieee754_pow+0x92>
   da10c:	4b43      	ldr	r3, [pc, #268]	; (da21c <__ieee754_pow+0x944>)
   da10e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   da112:	4598      	cmp	r8, r3
   da114:	f340 8115 	ble.w	da342 <__ieee754_pow+0xa6a>
   da118:	4b41      	ldr	r3, [pc, #260]	; (da220 <__ieee754_pow+0x948>)
   da11a:	440b      	add	r3, r1
   da11c:	4303      	orrs	r3, r0
   da11e:	d10c      	bne.n	da13a <__ieee754_pow+0x862>
   da120:	4632      	mov	r2, r6
   da122:	463b      	mov	r3, r7
   da124:	f000 fb78 	bl	da818 <__aeabi_dsub>
   da128:	4602      	mov	r2, r0
   da12a:	460b      	mov	r3, r1
   da12c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   da130:	f000 ffa2 	bl	db078 <__aeabi_dcmple>
   da134:	2800      	cmp	r0, #0
   da136:	f43f aee6 	beq.w	d9f06 <__ieee754_pow+0x62e>
   da13a:	a32f      	add	r3, pc, #188	; (adr r3, da1f8 <__ieee754_pow+0x920>)
   da13c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   da144:	f000 fd1c 	bl	dab80 <__aeabi_dmul>
   da148:	a32b      	add	r3, pc, #172	; (adr r3, da1f8 <__ieee754_pow+0x920>)
   da14a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da14e:	f000 fd17 	bl	dab80 <__aeabi_dmul>
   da152:	ec41 0b10 	vmov	d0, r0, r1
   da156:	e408      	b.n	d996a <__ieee754_pow+0x92>
   da158:	ed9f 7b29 	vldr	d7, [pc, #164]	; da200 <__ieee754_pow+0x928>
   da15c:	ed8d 7b06 	vstr	d7, [sp, #24]
   da160:	e676      	b.n	d9e50 <__ieee754_pow+0x578>
   da162:	f1b9 0f00 	cmp.w	r9, #0
   da166:	f6bf ac8e 	bge.w	d9a86 <__ieee754_pow+0x1ae>
   da16a:	e9dd 3400 	ldrd	r3, r4, [sp]
   da16e:	ee00 3a10 	vmov	s0, r3
   da172:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   da176:	ee00 3a90 	vmov	s1, r3
   da17a:	f7ff bbf6 	b.w	d996a <__ieee754_pow+0x92>
   da17e:	4602      	mov	r2, r0
   da180:	460b      	mov	r3, r1
   da182:	2000      	movs	r0, #0
   da184:	4924      	ldr	r1, [pc, #144]	; (da218 <__ieee754_pow+0x940>)
   da186:	f000 fe25 	bl	dadd4 <__aeabi_ddiv>
   da18a:	e42d      	b.n	d99e8 <__ieee754_pow+0x110>
   da18c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; da208 <__ieee754_pow+0x930>
   da190:	ed8d 7b08 	vstr	d7, [sp, #32]
   da194:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   da198:	ed9f 7b03 	vldr	d7, [pc, #12]	; da1a8 <__ieee754_pow+0x8d0>
   da19c:	f04f 0800 	mov.w	r8, #0
   da1a0:	ed8d 7b06 	vstr	d7, [sp, #24]
   da1a4:	e4be      	b.n	d9b24 <__ieee754_pow+0x24c>
   da1a6:	bf00      	nop
   da1a8:	00000000 	.word	0x00000000
   da1ac:	3ff00000 	.word	0x3ff00000
   da1b0:	652b82fe 	.word	0x652b82fe
   da1b4:	3c971547 	.word	0x3c971547
   da1b8:	00000000 	.word	0x00000000
   da1bc:	3fe62e43 	.word	0x3fe62e43
   da1c0:	fefa39ef 	.word	0xfefa39ef
   da1c4:	3fe62e42 	.word	0x3fe62e42
   da1c8:	0ca86c39 	.word	0x0ca86c39
   da1cc:	be205c61 	.word	0xbe205c61
   da1d0:	72bea4d0 	.word	0x72bea4d0
   da1d4:	3e663769 	.word	0x3e663769
   da1d8:	c5d26bf1 	.word	0xc5d26bf1
   da1dc:	3ebbbd41 	.word	0x3ebbbd41
   da1e0:	af25de2c 	.word	0xaf25de2c
   da1e4:	3f11566a 	.word	0x3f11566a
   da1e8:	16bebd93 	.word	0x16bebd93
   da1ec:	3f66c16c 	.word	0x3f66c16c
   da1f0:	5555553e 	.word	0x5555553e
   da1f4:	3fc55555 	.word	0x3fc55555
   da1f8:	c2f8f359 	.word	0xc2f8f359
   da1fc:	01a56e1f 	.word	0x01a56e1f
   da200:	00000000 	.word	0x00000000
   da204:	bff00000 	.word	0xbff00000
	...
   da210:	408fffff 	.word	0x408fffff
   da214:	000fffff 	.word	0x000fffff
   da218:	3ff00000 	.word	0x3ff00000
   da21c:	4090cbff 	.word	0x4090cbff
   da220:	3f6f3400 	.word	0x3f6f3400
   da224:	4b6c      	ldr	r3, [pc, #432]	; (da3d8 <__ieee754_pow+0xb00>)
   da226:	429c      	cmp	r4, r3
   da228:	f77f ac2a 	ble.w	d9a80 <__ieee754_pow+0x1a8>
   da22c:	4b6b      	ldr	r3, [pc, #428]	; (da3dc <__ieee754_pow+0xb04>)
   da22e:	429c      	cmp	r4, r3
   da230:	f73f abc3 	bgt.w	d99ba <__ieee754_pow+0xe2>
   da234:	2200      	movs	r2, #0
   da236:	4b69      	ldr	r3, [pc, #420]	; (da3dc <__ieee754_pow+0xb04>)
   da238:	f000 faee 	bl	da818 <__aeabi_dsub>
   da23c:	a356      	add	r3, pc, #344	; (adr r3, da398 <__ieee754_pow+0xac0>)
   da23e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da242:	4604      	mov	r4, r0
   da244:	460d      	mov	r5, r1
   da246:	f000 fc9b 	bl	dab80 <__aeabi_dmul>
   da24a:	a355      	add	r3, pc, #340	; (adr r3, da3a0 <__ieee754_pow+0xac8>)
   da24c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da250:	4680      	mov	r8, r0
   da252:	4689      	mov	r9, r1
   da254:	4620      	mov	r0, r4
   da256:	4629      	mov	r1, r5
   da258:	f000 fc92 	bl	dab80 <__aeabi_dmul>
   da25c:	2200      	movs	r2, #0
   da25e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   da262:	4b5f      	ldr	r3, [pc, #380]	; (da3e0 <__ieee754_pow+0xb08>)
   da264:	4620      	mov	r0, r4
   da266:	4629      	mov	r1, r5
   da268:	f000 fc8a 	bl	dab80 <__aeabi_dmul>
   da26c:	4602      	mov	r2, r0
   da26e:	460b      	mov	r3, r1
   da270:	a14d      	add	r1, pc, #308	; (adr r1, da3a8 <__ieee754_pow+0xad0>)
   da272:	e9d1 0100 	ldrd	r0, r1, [r1]
   da276:	f000 facf 	bl	da818 <__aeabi_dsub>
   da27a:	4622      	mov	r2, r4
   da27c:	462b      	mov	r3, r5
   da27e:	f000 fc7f 	bl	dab80 <__aeabi_dmul>
   da282:	4602      	mov	r2, r0
   da284:	460b      	mov	r3, r1
   da286:	2000      	movs	r0, #0
   da288:	4956      	ldr	r1, [pc, #344]	; (da3e4 <__ieee754_pow+0xb0c>)
   da28a:	f000 fac5 	bl	da818 <__aeabi_dsub>
   da28e:	4622      	mov	r2, r4
   da290:	462b      	mov	r3, r5
   da292:	4606      	mov	r6, r0
   da294:	460f      	mov	r7, r1
   da296:	4620      	mov	r0, r4
   da298:	4629      	mov	r1, r5
   da29a:	f000 fc71 	bl	dab80 <__aeabi_dmul>
   da29e:	4602      	mov	r2, r0
   da2a0:	460b      	mov	r3, r1
   da2a2:	4630      	mov	r0, r6
   da2a4:	4639      	mov	r1, r7
   da2a6:	f000 fc6b 	bl	dab80 <__aeabi_dmul>
   da2aa:	a341      	add	r3, pc, #260	; (adr r3, da3b0 <__ieee754_pow+0xad8>)
   da2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2b0:	f000 fc66 	bl	dab80 <__aeabi_dmul>
   da2b4:	4602      	mov	r2, r0
   da2b6:	460b      	mov	r3, r1
   da2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   da2bc:	f000 faac 	bl	da818 <__aeabi_dsub>
   da2c0:	4602      	mov	r2, r0
   da2c2:	460b      	mov	r3, r1
   da2c4:	4604      	mov	r4, r0
   da2c6:	460d      	mov	r5, r1
   da2c8:	4640      	mov	r0, r8
   da2ca:	4649      	mov	r1, r9
   da2cc:	f000 faa6 	bl	da81c <__adddf3>
   da2d0:	4642      	mov	r2, r8
   da2d2:	464b      	mov	r3, r9
   da2d4:	2000      	movs	r0, #0
   da2d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   da2da:	f000 fa9d 	bl	da818 <__aeabi_dsub>
   da2de:	4602      	mov	r2, r0
   da2e0:	460b      	mov	r3, r1
   da2e2:	4620      	mov	r0, r4
   da2e4:	4629      	mov	r1, r5
   da2e6:	f000 fa97 	bl	da818 <__aeabi_dsub>
   da2ea:	4680      	mov	r8, r0
   da2ec:	4689      	mov	r9, r1
   da2ee:	e5a5      	b.n	d9e3c <__ieee754_pow+0x564>
   da2f0:	4632      	mov	r2, r6
   da2f2:	463b      	mov	r3, r7
   da2f4:	2000      	movs	r0, #0
   da2f6:	4939      	ldr	r1, [pc, #228]	; (da3dc <__ieee754_pow+0xb04>)
   da2f8:	f000 fd6c 	bl	dadd4 <__aeabi_ddiv>
   da2fc:	ec41 0b10 	vmov	d0, r0, r1
   da300:	f7ff bb33 	b.w	d996a <__ieee754_pow+0x92>
   da304:	a32c      	add	r3, pc, #176	; (adr r3, da3b8 <__ieee754_pow+0xae0>)
   da306:	e9d3 2300 	ldrd	r2, r3, [r3]
   da30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   da30e:	f000 fc37 	bl	dab80 <__aeabi_dmul>
   da312:	a329      	add	r3, pc, #164	; (adr r3, da3b8 <__ieee754_pow+0xae0>)
   da314:	e9d3 2300 	ldrd	r2, r3, [r3]
   da318:	f000 fc32 	bl	dab80 <__aeabi_dmul>
   da31c:	ec41 0b10 	vmov	d0, r0, r1
   da320:	f7ff bb23 	b.w	d996a <__ieee754_pow+0x92>
   da324:	f1be 0f00 	cmp.w	lr, #0
   da328:	f47f ab2a 	bne.w	d9980 <__ieee754_pow+0xa8>
   da32c:	f1c3 0314 	rsb	r3, r3, #20
   da330:	fa48 f203 	asr.w	r2, r8, r3
   da334:	fa02 f303 	lsl.w	r3, r2, r3
   da338:	4598      	cmp	r8, r3
   da33a:	d027      	beq.n	da38c <__ieee754_pow+0xab4>
   da33c:	46f3      	mov	fp, lr
   da33e:	f7ff baf7 	b.w	d9930 <__ieee754_pow+0x58>
   da342:	4b28      	ldr	r3, [pc, #160]	; (da3e4 <__ieee754_pow+0xb0c>)
   da344:	4598      	cmp	r8, r3
   da346:	f73f adde 	bgt.w	d9f06 <__ieee754_pow+0x62e>
   da34a:	e9dd 3400 	ldrd	r3, r4, [sp]
   da34e:	469a      	mov	sl, r3
   da350:	469b      	mov	fp, r3
   da352:	e607      	b.n	d9f64 <__ieee754_pow+0x68c>
   da354:	4602      	mov	r2, r0
   da356:	460b      	mov	r3, r1
   da358:	f7ff bb89 	b.w	d9a6e <__ieee754_pow+0x196>
   da35c:	ed9f 7b18 	vldr	d7, [pc, #96]	; da3c0 <__ieee754_pow+0xae8>
   da360:	ed8d 7b08 	vstr	d7, [sp, #32]
   da364:	ed9f 7b18 	vldr	d7, [pc, #96]	; da3c8 <__ieee754_pow+0xaf0>
   da368:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   da36c:	ed9f 7b18 	vldr	d7, [pc, #96]	; da3d0 <__ieee754_pow+0xaf8>
   da370:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   da374:	ed8d 7b06 	vstr	d7, [sp, #24]
   da378:	f7ff bbd4 	b.w	d9b24 <__ieee754_pow+0x24c>
   da37c:	4658      	mov	r0, fp
   da37e:	ec43 2b10 	vmov	d0, r2, r3
   da382:	f000 f9b1 	bl	da6e8 <scalbn>
   da386:	ec51 0b10 	vmov	r0, r1, d0
   da38a:	e69d      	b.n	da0c8 <__ieee754_pow+0x7f0>
   da38c:	f002 0201 	and.w	r2, r2, #1
   da390:	f1c2 0b02 	rsb	fp, r2, #2
   da394:	f7ff bacc 	b.w	d9930 <__ieee754_pow+0x58>
   da398:	60000000 	.word	0x60000000
   da39c:	3ff71547 	.word	0x3ff71547
   da3a0:	f85ddf44 	.word	0xf85ddf44
   da3a4:	3e54ae0b 	.word	0x3e54ae0b
   da3a8:	55555555 	.word	0x55555555
   da3ac:	3fd55555 	.word	0x3fd55555
   da3b0:	652b82fe 	.word	0x652b82fe
   da3b4:	3ff71547 	.word	0x3ff71547
   da3b8:	8800759c 	.word	0x8800759c
   da3bc:	7e37e43c 	.word	0x7e37e43c
   da3c0:	40000000 	.word	0x40000000
   da3c4:	3fe2b803 	.word	0x3fe2b803
   da3c8:	43cfd006 	.word	0x43cfd006
   da3cc:	3e4cfdeb 	.word	0x3e4cfdeb
   da3d0:	00000000 	.word	0x00000000
   da3d4:	3ff80000 	.word	0x3ff80000
   da3d8:	3feffffe 	.word	0x3feffffe
   da3dc:	3ff00000 	.word	0x3ff00000
   da3e0:	3fd00000 	.word	0x3fd00000
   da3e4:	3fe00000 	.word	0x3fe00000

000da3e8 <__ieee754_sqrt>:
   da3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3ec:	4965      	ldr	r1, [pc, #404]	; (da584 <__ieee754_sqrt+0x19c>)
   da3ee:	ec55 4b10 	vmov	r4, r5, d0
   da3f2:	460e      	mov	r6, r1
   da3f4:	4029      	ands	r1, r5
   da3f6:	42b1      	cmp	r1, r6
   da3f8:	f000 8097 	beq.w	da52a <__ieee754_sqrt+0x142>
   da3fc:	2d00      	cmp	r5, #0
   da3fe:	462b      	mov	r3, r5
   da400:	ee10 2a10 	vmov	r2, s0
   da404:	dd74      	ble.n	da4f0 <__ieee754_sqrt+0x108>
   da406:	152f      	asrs	r7, r5, #20
   da408:	d07f      	beq.n	da50a <__ieee754_sqrt+0x122>
   da40a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   da40e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da412:	07f9      	lsls	r1, r7, #31
   da414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da418:	d465      	bmi.n	da4e6 <__ieee754_sqrt+0xfe>
   da41a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   da41e:	2600      	movs	r6, #0
   da420:	440b      	add	r3, r1
   da422:	107f      	asrs	r7, r7, #1
   da424:	0052      	lsls	r2, r2, #1
   da426:	46b6      	mov	lr, r6
   da428:	2016      	movs	r0, #22
   da42a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   da42e:	eb0e 0401 	add.w	r4, lr, r1
   da432:	429c      	cmp	r4, r3
   da434:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   da438:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da43c:	dc03      	bgt.n	da446 <__ieee754_sqrt+0x5e>
   da43e:	1b1b      	subs	r3, r3, r4
   da440:	eb04 0e01 	add.w	lr, r4, r1
   da444:	440e      	add	r6, r1
   da446:	3801      	subs	r0, #1
   da448:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   da44c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da450:	d1ed      	bne.n	da42e <__ieee754_sqrt+0x46>
   da452:	4684      	mov	ip, r0
   da454:	2420      	movs	r4, #32
   da456:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   da45a:	e009      	b.n	da470 <__ieee754_sqrt+0x88>
   da45c:	d020      	beq.n	da4a0 <__ieee754_sqrt+0xb8>
   da45e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   da462:	3c01      	subs	r4, #1
   da464:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da468:	442b      	add	r3, r5
   da46a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da46e:	d020      	beq.n	da4b2 <__ieee754_sqrt+0xca>
   da470:	459e      	cmp	lr, r3
   da472:	eb01 050c 	add.w	r5, r1, ip
   da476:	daf1      	bge.n	da45c <__ieee754_sqrt+0x74>
   da478:	2d00      	cmp	r5, #0
   da47a:	eb05 0c01 	add.w	ip, r5, r1
   da47e:	db09      	blt.n	da494 <__ieee754_sqrt+0xac>
   da480:	46f0      	mov	r8, lr
   da482:	4295      	cmp	r5, r2
   da484:	ebce 0303 	rsb	r3, lr, r3
   da488:	d900      	bls.n	da48c <__ieee754_sqrt+0xa4>
   da48a:	3b01      	subs	r3, #1
   da48c:	1b52      	subs	r2, r2, r5
   da48e:	4408      	add	r0, r1
   da490:	46c6      	mov	lr, r8
   da492:	e7e4      	b.n	da45e <__ieee754_sqrt+0x76>
   da494:	f1bc 0f00 	cmp.w	ip, #0
   da498:	dbf2      	blt.n	da480 <__ieee754_sqrt+0x98>
   da49a:	f10e 0801 	add.w	r8, lr, #1
   da49e:	e7f0      	b.n	da482 <__ieee754_sqrt+0x9a>
   da4a0:	4295      	cmp	r5, r2
   da4a2:	d81e      	bhi.n	da4e2 <__ieee754_sqrt+0xfa>
   da4a4:	2d00      	cmp	r5, #0
   da4a6:	eb05 0c01 	add.w	ip, r5, r1
   da4aa:	db50      	blt.n	da54e <__ieee754_sqrt+0x166>
   da4ac:	4698      	mov	r8, r3
   da4ae:	2300      	movs	r3, #0
   da4b0:	e7ec      	b.n	da48c <__ieee754_sqrt+0xa4>
   da4b2:	4313      	orrs	r3, r2
   da4b4:	d004      	beq.n	da4c0 <__ieee754_sqrt+0xd8>
   da4b6:	1c42      	adds	r2, r0, #1
   da4b8:	d04d      	beq.n	da556 <__ieee754_sqrt+0x16e>
   da4ba:	f000 0301 	and.w	r3, r0, #1
   da4be:	4418      	add	r0, r3
   da4c0:	0840      	lsrs	r0, r0, #1
   da4c2:	1071      	asrs	r1, r6, #1
   da4c4:	07f3      	lsls	r3, r6, #31
   da4c6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da4ca:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da4ce:	bf48      	it	mi
   da4d0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   da4d4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   da4d8:	4602      	mov	r2, r0
   da4da:	ec43 2b10 	vmov	d0, r2, r3
   da4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da4e2:	4673      	mov	r3, lr
   da4e4:	e7bb      	b.n	da45e <__ieee754_sqrt+0x76>
   da4e6:	005b      	lsls	r3, r3, #1
   da4e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   da4ec:	0052      	lsls	r2, r2, #1
   da4ee:	e794      	b.n	da41a <__ieee754_sqrt+0x32>
   da4f0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   da4f4:	4321      	orrs	r1, r4
   da4f6:	d028      	beq.n	da54a <__ieee754_sqrt+0x162>
   da4f8:	bbad      	cbnz	r5, da566 <__ieee754_sqrt+0x17e>
   da4fa:	462f      	mov	r7, r5
   da4fc:	0ad3      	lsrs	r3, r2, #11
   da4fe:	3f15      	subs	r7, #21
   da500:	0552      	lsls	r2, r2, #21
   da502:	2b00      	cmp	r3, #0
   da504:	d0fa      	beq.n	da4fc <__ieee754_sqrt+0x114>
   da506:	02dd      	lsls	r5, r3, #11
   da508:	d428      	bmi.n	da55c <__ieee754_sqrt+0x174>
   da50a:	2100      	movs	r1, #0
   da50c:	e000      	b.n	da510 <__ieee754_sqrt+0x128>
   da50e:	4601      	mov	r1, r0
   da510:	005b      	lsls	r3, r3, #1
   da512:	02dc      	lsls	r4, r3, #11
   da514:	f101 0001 	add.w	r0, r1, #1
   da518:	d5f9      	bpl.n	da50e <__ieee754_sqrt+0x126>
   da51a:	f1c0 0420 	rsb	r4, r0, #32
   da51e:	fa22 f404 	lsr.w	r4, r2, r4
   da522:	4323      	orrs	r3, r4
   da524:	1a7f      	subs	r7, r7, r1
   da526:	4082      	lsls	r2, r0
   da528:	e76f      	b.n	da40a <__ieee754_sqrt+0x22>
   da52a:	ee10 2a10 	vmov	r2, s0
   da52e:	462b      	mov	r3, r5
   da530:	ee10 0a10 	vmov	r0, s0
   da534:	4629      	mov	r1, r5
   da536:	f000 fb23 	bl	dab80 <__aeabi_dmul>
   da53a:	4622      	mov	r2, r4
   da53c:	462b      	mov	r3, r5
   da53e:	f000 f96d 	bl	da81c <__adddf3>
   da542:	ec41 0b10 	vmov	d0, r0, r1
   da546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da54e:	f1bc 0f00 	cmp.w	ip, #0
   da552:	daa2      	bge.n	da49a <__ieee754_sqrt+0xb2>
   da554:	e7aa      	b.n	da4ac <__ieee754_sqrt+0xc4>
   da556:	3601      	adds	r6, #1
   da558:	4620      	mov	r0, r4
   da55a:	e7b2      	b.n	da4c2 <__ieee754_sqrt+0xda>
   da55c:	2420      	movs	r4, #32
   da55e:	f04f 31ff 	mov.w	r1, #4294967295
   da562:	2000      	movs	r0, #0
   da564:	e7db      	b.n	da51e <__ieee754_sqrt+0x136>
   da566:	ee10 2a10 	vmov	r2, s0
   da56a:	462b      	mov	r3, r5
   da56c:	4620      	mov	r0, r4
   da56e:	4629      	mov	r1, r5
   da570:	f000 f952 	bl	da818 <__aeabi_dsub>
   da574:	4602      	mov	r2, r0
   da576:	460b      	mov	r3, r1
   da578:	f000 fc2c 	bl	dadd4 <__aeabi_ddiv>
   da57c:	ec41 0b10 	vmov	d0, r0, r1
   da580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da584:	7ff00000 	.word	0x7ff00000

000da588 <fabs>:
   da588:	ec53 2b10 	vmov	r2, r3, d0
   da58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   da590:	ec43 2b10 	vmov	d0, r2, r3
   da594:	4770      	bx	lr
   da596:	bf00      	nop

000da598 <finite>:
   da598:	ee10 3a90 	vmov	r3, s1
   da59c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   da5a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   da5a4:	0fc0      	lsrs	r0, r0, #31
   da5a6:	4770      	bx	lr

000da5a8 <matherr>:
   da5a8:	2000      	movs	r0, #0
   da5aa:	4770      	bx	lr
   da5ac:	0000      	movs	r0, r0
	...

000da5b0 <nan>:
   da5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; da5b8 <nan+0x8>
   da5b4:	4770      	bx	lr
   da5b6:	bf00      	nop
   da5b8:	00000000 	.word	0x00000000
   da5bc:	7ff80000 	.word	0x7ff80000

000da5c0 <rint>:
   da5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   da5c2:	ec53 2b10 	vmov	r2, r3, d0
   da5c6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   da5ca:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   da5ce:	2813      	cmp	r0, #19
   da5d0:	b083      	sub	sp, #12
   da5d2:	4619      	mov	r1, r3
   da5d4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   da5d8:	ee10 5a10 	vmov	r5, s0
   da5dc:	dc2f      	bgt.n	da63e <rint+0x7e>
   da5de:	2800      	cmp	r0, #0
   da5e0:	db49      	blt.n	da676 <rint+0xb6>
   da5e2:	4e3f      	ldr	r6, [pc, #252]	; (da6e0 <rint+0x120>)
   da5e4:	4106      	asrs	r6, r0
   da5e6:	ea03 0706 	and.w	r7, r3, r6
   da5ea:	4317      	orrs	r7, r2
   da5ec:	d02c      	beq.n	da648 <rint+0x88>
   da5ee:	0876      	lsrs	r6, r6, #1
   da5f0:	4033      	ands	r3, r6
   da5f2:	431d      	orrs	r5, r3
   da5f4:	d00c      	beq.n	da610 <rint+0x50>
   da5f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   da5fa:	2813      	cmp	r0, #19
   da5fc:	ea21 0606 	bic.w	r6, r1, r6
   da600:	fa43 f100 	asr.w	r1, r3, r0
   da604:	ea41 0106 	orr.w	r1, r1, r6
   da608:	bf0c      	ite	eq
   da60a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   da60e:	2500      	movne	r5, #0
   da610:	4834      	ldr	r0, [pc, #208]	; (da6e4 <rint+0x124>)
   da612:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   da616:	462a      	mov	r2, r5
   da618:	e9d4 4500 	ldrd	r4, r5, [r4]
   da61c:	4610      	mov	r0, r2
   da61e:	462b      	mov	r3, r5
   da620:	4622      	mov	r2, r4
   da622:	f000 f8fb 	bl	da81c <__adddf3>
   da626:	e9cd 0100 	strd	r0, r1, [sp]
   da62a:	4622      	mov	r2, r4
   da62c:	462b      	mov	r3, r5
   da62e:	e9dd 0100 	ldrd	r0, r1, [sp]
   da632:	f000 f8f1 	bl	da818 <__aeabi_dsub>
   da636:	ec41 0b10 	vmov	d0, r0, r1
   da63a:	b003      	add	sp, #12
   da63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da63e:	2833      	cmp	r0, #51	; 0x33
   da640:	dd06      	ble.n	da650 <rint+0x90>
   da642:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   da646:	d042      	beq.n	da6ce <rint+0x10e>
   da648:	ec43 2b10 	vmov	d0, r2, r3
   da64c:	b003      	add	sp, #12
   da64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da650:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   da654:	f04f 30ff 	mov.w	r0, #4294967295
   da658:	40f0      	lsrs	r0, r6
   da65a:	4202      	tst	r2, r0
   da65c:	d0f4      	beq.n	da648 <rint+0x88>
   da65e:	0840      	lsrs	r0, r0, #1
   da660:	4202      	tst	r2, r0
   da662:	d0d5      	beq.n	da610 <rint+0x50>
   da664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da668:	ea25 0000 	bic.w	r0, r5, r0
   da66c:	fa43 f606 	asr.w	r6, r3, r6
   da670:	ea46 0500 	orr.w	r5, r6, r0
   da674:	e7cc      	b.n	da610 <rint+0x50>
   da676:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   da67a:	4310      	orrs	r0, r2
   da67c:	ee10 7a10 	vmov	r7, s0
   da680:	d0e2      	beq.n	da648 <rint+0x88>
   da682:	f3c3 0013 	ubfx	r0, r3, #0, #20
   da686:	4307      	orrs	r7, r0
   da688:	4278      	negs	r0, r7
   da68a:	4307      	orrs	r7, r0
   da68c:	4815      	ldr	r0, [pc, #84]	; (da6e4 <rint+0x124>)
   da68e:	0c59      	lsrs	r1, r3, #17
   da690:	0b3f      	lsrs	r7, r7, #12
   da692:	0449      	lsls	r1, r1, #17
   da694:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   da698:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   da69c:	ea47 0301 	orr.w	r3, r7, r1
   da6a0:	e9d0 6700 	ldrd	r6, r7, [r0]
   da6a4:	4619      	mov	r1, r3
   da6a6:	4610      	mov	r0, r2
   da6a8:	463b      	mov	r3, r7
   da6aa:	4632      	mov	r2, r6
   da6ac:	f000 f8b6 	bl	da81c <__adddf3>
   da6b0:	e9cd 0100 	strd	r0, r1, [sp]
   da6b4:	463b      	mov	r3, r7
   da6b6:	4632      	mov	r2, r6
   da6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   da6bc:	f000 f8ac 	bl	da818 <__aeabi_dsub>
   da6c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da6c4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   da6c8:	ec41 0b10 	vmov	d0, r0, r1
   da6cc:	e7be      	b.n	da64c <rint+0x8c>
   da6ce:	ee10 0a10 	vmov	r0, s0
   da6d2:	4619      	mov	r1, r3
   da6d4:	f000 f8a2 	bl	da81c <__adddf3>
   da6d8:	ec41 0b10 	vmov	d0, r0, r1
   da6dc:	e7b6      	b.n	da64c <rint+0x8c>
   da6de:	bf00      	nop
   da6e0:	000fffff 	.word	0x000fffff
   da6e4:	000dd418 	.word	0x000dd418

000da6e8 <scalbn>:
   da6e8:	ec53 2b10 	vmov	r2, r3, d0
   da6ec:	b570      	push	{r4, r5, r6, lr}
   da6ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
   da6f2:	4619      	mov	r1, r3
   da6f4:	4605      	mov	r5, r0
   da6f6:	bb14      	cbnz	r4, da73e <scalbn+0x56>
   da6f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da6fc:	4311      	orrs	r1, r2
   da6fe:	d02a      	beq.n	da756 <scalbn+0x6e>
   da700:	4619      	mov	r1, r3
   da702:	2200      	movs	r2, #0
   da704:	4b38      	ldr	r3, [pc, #224]	; (da7e8 <scalbn+0x100>)
   da706:	4e39      	ldr	r6, [pc, #228]	; (da7ec <scalbn+0x104>)
   da708:	ee10 0a10 	vmov	r0, s0
   da70c:	f000 fa38 	bl	dab80 <__aeabi_dmul>
   da710:	42b5      	cmp	r5, r6
   da712:	4602      	mov	r2, r0
   da714:	460b      	mov	r3, r1
   da716:	db1f      	blt.n	da758 <scalbn+0x70>
   da718:	f3c1 540a 	ubfx	r4, r1, #20, #11
   da71c:	3c36      	subs	r4, #54	; 0x36
   da71e:	442c      	add	r4, r5
   da720:	f240 70fe 	movw	r0, #2046	; 0x7fe
   da724:	4284      	cmp	r4, r0
   da726:	dc1f      	bgt.n	da768 <scalbn+0x80>
   da728:	2c00      	cmp	r4, #0
   da72a:	dd2d      	ble.n	da788 <scalbn+0xa0>
   da72c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da730:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da734:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da738:	ec43 2b10 	vmov	d0, r2, r3
   da73c:	bd70      	pop	{r4, r5, r6, pc}
   da73e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   da742:	4284      	cmp	r4, r0
   da744:	d1eb      	bne.n	da71e <scalbn+0x36>
   da746:	ee10 0a10 	vmov	r0, s0
   da74a:	4619      	mov	r1, r3
   da74c:	f000 f866 	bl	da81c <__adddf3>
   da750:	ec41 0b10 	vmov	d0, r0, r1
   da754:	bd70      	pop	{r4, r5, r6, pc}
   da756:	bd70      	pop	{r4, r5, r6, pc}
   da758:	a31f      	add	r3, pc, #124	; (adr r3, da7d8 <scalbn+0xf0>)
   da75a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da75e:	f000 fa0f 	bl	dab80 <__aeabi_dmul>
   da762:	ec41 0b10 	vmov	d0, r0, r1
   da766:	bd70      	pop	{r4, r5, r6, pc}
   da768:	ec43 2b11 	vmov	d1, r2, r3
   da76c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; da7e0 <scalbn+0xf8>
   da770:	f000 f840 	bl	da7f4 <copysign>
   da774:	a31a      	add	r3, pc, #104	; (adr r3, da7e0 <scalbn+0xf8>)
   da776:	e9d3 2300 	ldrd	r2, r3, [r3]
   da77a:	ec51 0b10 	vmov	r0, r1, d0
   da77e:	f000 f9ff 	bl	dab80 <__aeabi_dmul>
   da782:	ec41 0b10 	vmov	d0, r0, r1
   da786:	bd70      	pop	{r4, r5, r6, pc}
   da788:	f114 0f35 	cmn.w	r4, #53	; 0x35
   da78c:	da13      	bge.n	da7b6 <scalbn+0xce>
   da78e:	f24c 3150 	movw	r1, #50000	; 0xc350
   da792:	428d      	cmp	r5, r1
   da794:	ec43 2b11 	vmov	d1, r2, r3
   da798:	dce8      	bgt.n	da76c <scalbn+0x84>
   da79a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; da7d8 <scalbn+0xf0>
   da79e:	f000 f829 	bl	da7f4 <copysign>
   da7a2:	a30d      	add	r3, pc, #52	; (adr r3, da7d8 <scalbn+0xf0>)
   da7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7a8:	ec51 0b10 	vmov	r0, r1, d0
   da7ac:	f000 f9e8 	bl	dab80 <__aeabi_dmul>
   da7b0:	ec41 0b10 	vmov	d0, r0, r1
   da7b4:	bd70      	pop	{r4, r5, r6, pc}
   da7b6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da7ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da7be:	3436      	adds	r4, #54	; 0x36
   da7c0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da7c4:	4610      	mov	r0, r2
   da7c6:	4619      	mov	r1, r3
   da7c8:	2200      	movs	r2, #0
   da7ca:	4b09      	ldr	r3, [pc, #36]	; (da7f0 <scalbn+0x108>)
   da7cc:	f000 f9d8 	bl	dab80 <__aeabi_dmul>
   da7d0:	ec41 0b10 	vmov	d0, r0, r1
   da7d4:	bd70      	pop	{r4, r5, r6, pc}
   da7d6:	bf00      	nop
   da7d8:	c2f8f359 	.word	0xc2f8f359
   da7dc:	01a56e1f 	.word	0x01a56e1f
   da7e0:	8800759c 	.word	0x8800759c
   da7e4:	7e37e43c 	.word	0x7e37e43c
   da7e8:	43500000 	.word	0x43500000
   da7ec:	ffff3cb0 	.word	0xffff3cb0
   da7f0:	3c900000 	.word	0x3c900000

000da7f4 <copysign>:
   da7f4:	ec53 2b10 	vmov	r2, r3, d0
   da7f8:	ee11 0a90 	vmov	r0, s3
   da7fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da800:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   da804:	ea41 0300 	orr.w	r3, r1, r0
   da808:	ec43 2b10 	vmov	d0, r2, r3
   da80c:	4770      	bx	lr
   da80e:	bf00      	nop

000da810 <__aeabi_drsub>:
   da810:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da814:	e002      	b.n	da81c <__adddf3>
   da816:	bf00      	nop

000da818 <__aeabi_dsub>:
   da818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da81c <__adddf3>:
   da81c:	b530      	push	{r4, r5, lr}
   da81e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da822:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da826:	ea94 0f05 	teq	r4, r5
   da82a:	bf08      	it	eq
   da82c:	ea90 0f02 	teqeq	r0, r2
   da830:	bf1f      	itttt	ne
   da832:	ea54 0c00 	orrsne.w	ip, r4, r0
   da836:	ea55 0c02 	orrsne.w	ip, r5, r2
   da83a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da83e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da842:	f000 80e2 	beq.w	daa0a <__adddf3+0x1ee>
   da846:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da84a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da84e:	bfb8      	it	lt
   da850:	426d      	neglt	r5, r5
   da852:	dd0c      	ble.n	da86e <__adddf3+0x52>
   da854:	442c      	add	r4, r5
   da856:	ea80 0202 	eor.w	r2, r0, r2
   da85a:	ea81 0303 	eor.w	r3, r1, r3
   da85e:	ea82 0000 	eor.w	r0, r2, r0
   da862:	ea83 0101 	eor.w	r1, r3, r1
   da866:	ea80 0202 	eor.w	r2, r0, r2
   da86a:	ea81 0303 	eor.w	r3, r1, r3
   da86e:	2d36      	cmp	r5, #54	; 0x36
   da870:	bf88      	it	hi
   da872:	bd30      	pophi	{r4, r5, pc}
   da874:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da878:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da87c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da880:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da884:	d002      	beq.n	da88c <__adddf3+0x70>
   da886:	4240      	negs	r0, r0
   da888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da88c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da890:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da894:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da898:	d002      	beq.n	da8a0 <__adddf3+0x84>
   da89a:	4252      	negs	r2, r2
   da89c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da8a0:	ea94 0f05 	teq	r4, r5
   da8a4:	f000 80a7 	beq.w	da9f6 <__adddf3+0x1da>
   da8a8:	f1a4 0401 	sub.w	r4, r4, #1
   da8ac:	f1d5 0e20 	rsbs	lr, r5, #32
   da8b0:	db0d      	blt.n	da8ce <__adddf3+0xb2>
   da8b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   da8b6:	fa22 f205 	lsr.w	r2, r2, r5
   da8ba:	1880      	adds	r0, r0, r2
   da8bc:	f141 0100 	adc.w	r1, r1, #0
   da8c0:	fa03 f20e 	lsl.w	r2, r3, lr
   da8c4:	1880      	adds	r0, r0, r2
   da8c6:	fa43 f305 	asr.w	r3, r3, r5
   da8ca:	4159      	adcs	r1, r3
   da8cc:	e00e      	b.n	da8ec <__adddf3+0xd0>
   da8ce:	f1a5 0520 	sub.w	r5, r5, #32
   da8d2:	f10e 0e20 	add.w	lr, lr, #32
   da8d6:	2a01      	cmp	r2, #1
   da8d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   da8dc:	bf28      	it	cs
   da8de:	f04c 0c02 	orrcs.w	ip, ip, #2
   da8e2:	fa43 f305 	asr.w	r3, r3, r5
   da8e6:	18c0      	adds	r0, r0, r3
   da8e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da8ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da8f0:	d507      	bpl.n	da902 <__adddf3+0xe6>
   da8f2:	f04f 0e00 	mov.w	lr, #0
   da8f6:	f1dc 0c00 	rsbs	ip, ip, #0
   da8fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   da8fe:	eb6e 0101 	sbc.w	r1, lr, r1
   da902:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da906:	d31b      	bcc.n	da940 <__adddf3+0x124>
   da908:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da90c:	d30c      	bcc.n	da928 <__adddf3+0x10c>
   da90e:	0849      	lsrs	r1, r1, #1
   da910:	ea5f 0030 	movs.w	r0, r0, rrx
   da914:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da918:	f104 0401 	add.w	r4, r4, #1
   da91c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da920:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da924:	f080 809a 	bcs.w	daa5c <__adddf3+0x240>
   da928:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da92c:	bf08      	it	eq
   da92e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da932:	f150 0000 	adcs.w	r0, r0, #0
   da936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da93a:	ea41 0105 	orr.w	r1, r1, r5
   da93e:	bd30      	pop	{r4, r5, pc}
   da940:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da944:	4140      	adcs	r0, r0
   da946:	eb41 0101 	adc.w	r1, r1, r1
   da94a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da94e:	f1a4 0401 	sub.w	r4, r4, #1
   da952:	d1e9      	bne.n	da928 <__adddf3+0x10c>
   da954:	f091 0f00 	teq	r1, #0
   da958:	bf04      	itt	eq
   da95a:	4601      	moveq	r1, r0
   da95c:	2000      	moveq	r0, #0
   da95e:	fab1 f381 	clz	r3, r1
   da962:	bf08      	it	eq
   da964:	3320      	addeq	r3, #32
   da966:	f1a3 030b 	sub.w	r3, r3, #11
   da96a:	f1b3 0220 	subs.w	r2, r3, #32
   da96e:	da0c      	bge.n	da98a <__adddf3+0x16e>
   da970:	320c      	adds	r2, #12
   da972:	dd08      	ble.n	da986 <__adddf3+0x16a>
   da974:	f102 0c14 	add.w	ip, r2, #20
   da978:	f1c2 020c 	rsb	r2, r2, #12
   da97c:	fa01 f00c 	lsl.w	r0, r1, ip
   da980:	fa21 f102 	lsr.w	r1, r1, r2
   da984:	e00c      	b.n	da9a0 <__adddf3+0x184>
   da986:	f102 0214 	add.w	r2, r2, #20
   da98a:	bfd8      	it	le
   da98c:	f1c2 0c20 	rsble	ip, r2, #32
   da990:	fa01 f102 	lsl.w	r1, r1, r2
   da994:	fa20 fc0c 	lsr.w	ip, r0, ip
   da998:	bfdc      	itt	le
   da99a:	ea41 010c 	orrle.w	r1, r1, ip
   da99e:	4090      	lslle	r0, r2
   da9a0:	1ae4      	subs	r4, r4, r3
   da9a2:	bfa2      	ittt	ge
   da9a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da9a8:	4329      	orrge	r1, r5
   da9aa:	bd30      	popge	{r4, r5, pc}
   da9ac:	ea6f 0404 	mvn.w	r4, r4
   da9b0:	3c1f      	subs	r4, #31
   da9b2:	da1c      	bge.n	da9ee <__adddf3+0x1d2>
   da9b4:	340c      	adds	r4, #12
   da9b6:	dc0e      	bgt.n	da9d6 <__adddf3+0x1ba>
   da9b8:	f104 0414 	add.w	r4, r4, #20
   da9bc:	f1c4 0220 	rsb	r2, r4, #32
   da9c0:	fa20 f004 	lsr.w	r0, r0, r4
   da9c4:	fa01 f302 	lsl.w	r3, r1, r2
   da9c8:	ea40 0003 	orr.w	r0, r0, r3
   da9cc:	fa21 f304 	lsr.w	r3, r1, r4
   da9d0:	ea45 0103 	orr.w	r1, r5, r3
   da9d4:	bd30      	pop	{r4, r5, pc}
   da9d6:	f1c4 040c 	rsb	r4, r4, #12
   da9da:	f1c4 0220 	rsb	r2, r4, #32
   da9de:	fa20 f002 	lsr.w	r0, r0, r2
   da9e2:	fa01 f304 	lsl.w	r3, r1, r4
   da9e6:	ea40 0003 	orr.w	r0, r0, r3
   da9ea:	4629      	mov	r1, r5
   da9ec:	bd30      	pop	{r4, r5, pc}
   da9ee:	fa21 f004 	lsr.w	r0, r1, r4
   da9f2:	4629      	mov	r1, r5
   da9f4:	bd30      	pop	{r4, r5, pc}
   da9f6:	f094 0f00 	teq	r4, #0
   da9fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da9fe:	bf06      	itte	eq
   daa00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   daa04:	3401      	addeq	r4, #1
   daa06:	3d01      	subne	r5, #1
   daa08:	e74e      	b.n	da8a8 <__adddf3+0x8c>
   daa0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   daa0e:	bf18      	it	ne
   daa10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   daa14:	d029      	beq.n	daa6a <__adddf3+0x24e>
   daa16:	ea94 0f05 	teq	r4, r5
   daa1a:	bf08      	it	eq
   daa1c:	ea90 0f02 	teqeq	r0, r2
   daa20:	d005      	beq.n	daa2e <__adddf3+0x212>
   daa22:	ea54 0c00 	orrs.w	ip, r4, r0
   daa26:	bf04      	itt	eq
   daa28:	4619      	moveq	r1, r3
   daa2a:	4610      	moveq	r0, r2
   daa2c:	bd30      	pop	{r4, r5, pc}
   daa2e:	ea91 0f03 	teq	r1, r3
   daa32:	bf1e      	ittt	ne
   daa34:	2100      	movne	r1, #0
   daa36:	2000      	movne	r0, #0
   daa38:	bd30      	popne	{r4, r5, pc}
   daa3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   daa3e:	d105      	bne.n	daa4c <__adddf3+0x230>
   daa40:	0040      	lsls	r0, r0, #1
   daa42:	4149      	adcs	r1, r1
   daa44:	bf28      	it	cs
   daa46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   daa4a:	bd30      	pop	{r4, r5, pc}
   daa4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   daa50:	bf3c      	itt	cc
   daa52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   daa56:	bd30      	popcc	{r4, r5, pc}
   daa58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   daa5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   daa60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa64:	f04f 0000 	mov.w	r0, #0
   daa68:	bd30      	pop	{r4, r5, pc}
   daa6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   daa6e:	bf1a      	itte	ne
   daa70:	4619      	movne	r1, r3
   daa72:	4610      	movne	r0, r2
   daa74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   daa78:	bf1c      	itt	ne
   daa7a:	460b      	movne	r3, r1
   daa7c:	4602      	movne	r2, r0
   daa7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daa82:	bf06      	itte	eq
   daa84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   daa88:	ea91 0f03 	teqeq	r1, r3
   daa8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   daa90:	bd30      	pop	{r4, r5, pc}
   daa92:	bf00      	nop

000daa94 <__aeabi_ui2d>:
   daa94:	f090 0f00 	teq	r0, #0
   daa98:	bf04      	itt	eq
   daa9a:	2100      	moveq	r1, #0
   daa9c:	4770      	bxeq	lr
   daa9e:	b530      	push	{r4, r5, lr}
   daaa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daaa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daaa8:	f04f 0500 	mov.w	r5, #0
   daaac:	f04f 0100 	mov.w	r1, #0
   daab0:	e750      	b.n	da954 <__adddf3+0x138>
   daab2:	bf00      	nop

000daab4 <__aeabi_i2d>:
   daab4:	f090 0f00 	teq	r0, #0
   daab8:	bf04      	itt	eq
   daaba:	2100      	moveq	r1, #0
   daabc:	4770      	bxeq	lr
   daabe:	b530      	push	{r4, r5, lr}
   daac0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daac4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daac8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   daacc:	bf48      	it	mi
   daace:	4240      	negmi	r0, r0
   daad0:	f04f 0100 	mov.w	r1, #0
   daad4:	e73e      	b.n	da954 <__adddf3+0x138>
   daad6:	bf00      	nop

000daad8 <__aeabi_f2d>:
   daad8:	0042      	lsls	r2, r0, #1
   daada:	ea4f 01e2 	mov.w	r1, r2, asr #3
   daade:	ea4f 0131 	mov.w	r1, r1, rrx
   daae2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   daae6:	bf1f      	itttt	ne
   daae8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   daaec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   daaf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   daaf4:	4770      	bxne	lr
   daaf6:	f092 0f00 	teq	r2, #0
   daafa:	bf14      	ite	ne
   daafc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dab00:	4770      	bxeq	lr
   dab02:	b530      	push	{r4, r5, lr}
   dab04:	f44f 7460 	mov.w	r4, #896	; 0x380
   dab08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dab0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dab10:	e720      	b.n	da954 <__adddf3+0x138>
   dab12:	bf00      	nop

000dab14 <__aeabi_ul2d>:
   dab14:	ea50 0201 	orrs.w	r2, r0, r1
   dab18:	bf08      	it	eq
   dab1a:	4770      	bxeq	lr
   dab1c:	b530      	push	{r4, r5, lr}
   dab1e:	f04f 0500 	mov.w	r5, #0
   dab22:	e00a      	b.n	dab3a <__aeabi_l2d+0x16>

000dab24 <__aeabi_l2d>:
   dab24:	ea50 0201 	orrs.w	r2, r0, r1
   dab28:	bf08      	it	eq
   dab2a:	4770      	bxeq	lr
   dab2c:	b530      	push	{r4, r5, lr}
   dab2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dab32:	d502      	bpl.n	dab3a <__aeabi_l2d+0x16>
   dab34:	4240      	negs	r0, r0
   dab36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dab3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dab3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dab42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dab46:	f43f aedc 	beq.w	da902 <__adddf3+0xe6>
   dab4a:	f04f 0203 	mov.w	r2, #3
   dab4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dab52:	bf18      	it	ne
   dab54:	3203      	addne	r2, #3
   dab56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dab5a:	bf18      	it	ne
   dab5c:	3203      	addne	r2, #3
   dab5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dab62:	f1c2 0320 	rsb	r3, r2, #32
   dab66:	fa00 fc03 	lsl.w	ip, r0, r3
   dab6a:	fa20 f002 	lsr.w	r0, r0, r2
   dab6e:	fa01 fe03 	lsl.w	lr, r1, r3
   dab72:	ea40 000e 	orr.w	r0, r0, lr
   dab76:	fa21 f102 	lsr.w	r1, r1, r2
   dab7a:	4414      	add	r4, r2
   dab7c:	e6c1      	b.n	da902 <__adddf3+0xe6>
   dab7e:	bf00      	nop

000dab80 <__aeabi_dmul>:
   dab80:	b570      	push	{r4, r5, r6, lr}
   dab82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dab86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dab8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dab8e:	bf1d      	ittte	ne
   dab90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dab94:	ea94 0f0c 	teqne	r4, ip
   dab98:	ea95 0f0c 	teqne	r5, ip
   dab9c:	f000 f8de 	bleq	dad5c <__aeabi_dmul+0x1dc>
   daba0:	442c      	add	r4, r5
   daba2:	ea81 0603 	eor.w	r6, r1, r3
   daba6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dabaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dabae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dabb2:	bf18      	it	ne
   dabb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dabb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dabc0:	d038      	beq.n	dac34 <__aeabi_dmul+0xb4>
   dabc2:	fba0 ce02 	umull	ip, lr, r0, r2
   dabc6:	f04f 0500 	mov.w	r5, #0
   dabca:	fbe1 e502 	umlal	lr, r5, r1, r2
   dabce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dabd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   dabd6:	f04f 0600 	mov.w	r6, #0
   dabda:	fbe1 5603 	umlal	r5, r6, r1, r3
   dabde:	f09c 0f00 	teq	ip, #0
   dabe2:	bf18      	it	ne
   dabe4:	f04e 0e01 	orrne.w	lr, lr, #1
   dabe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dabec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dabf0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dabf4:	d204      	bcs.n	dac00 <__aeabi_dmul+0x80>
   dabf6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dabfa:	416d      	adcs	r5, r5
   dabfc:	eb46 0606 	adc.w	r6, r6, r6
   dac00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dac04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dac08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dac0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dac10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dac14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dac18:	bf88      	it	hi
   dac1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dac1e:	d81e      	bhi.n	dac5e <__aeabi_dmul+0xde>
   dac20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dac24:	bf08      	it	eq
   dac26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dac2a:	f150 0000 	adcs.w	r0, r0, #0
   dac2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dac32:	bd70      	pop	{r4, r5, r6, pc}
   dac34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dac38:	ea46 0101 	orr.w	r1, r6, r1
   dac3c:	ea40 0002 	orr.w	r0, r0, r2
   dac40:	ea81 0103 	eor.w	r1, r1, r3
   dac44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dac48:	bfc2      	ittt	gt
   dac4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dac4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dac52:	bd70      	popgt	{r4, r5, r6, pc}
   dac54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac58:	f04f 0e00 	mov.w	lr, #0
   dac5c:	3c01      	subs	r4, #1
   dac5e:	f300 80ab 	bgt.w	dadb8 <__aeabi_dmul+0x238>
   dac62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dac66:	bfde      	ittt	le
   dac68:	2000      	movle	r0, #0
   dac6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dac6e:	bd70      	pople	{r4, r5, r6, pc}
   dac70:	f1c4 0400 	rsb	r4, r4, #0
   dac74:	3c20      	subs	r4, #32
   dac76:	da35      	bge.n	dace4 <__aeabi_dmul+0x164>
   dac78:	340c      	adds	r4, #12
   dac7a:	dc1b      	bgt.n	dacb4 <__aeabi_dmul+0x134>
   dac7c:	f104 0414 	add.w	r4, r4, #20
   dac80:	f1c4 0520 	rsb	r5, r4, #32
   dac84:	fa00 f305 	lsl.w	r3, r0, r5
   dac88:	fa20 f004 	lsr.w	r0, r0, r4
   dac8c:	fa01 f205 	lsl.w	r2, r1, r5
   dac90:	ea40 0002 	orr.w	r0, r0, r2
   dac94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dac98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dac9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daca0:	fa21 f604 	lsr.w	r6, r1, r4
   daca4:	eb42 0106 	adc.w	r1, r2, r6
   daca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dacac:	bf08      	it	eq
   dacae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dacb2:	bd70      	pop	{r4, r5, r6, pc}
   dacb4:	f1c4 040c 	rsb	r4, r4, #12
   dacb8:	f1c4 0520 	rsb	r5, r4, #32
   dacbc:	fa00 f304 	lsl.w	r3, r0, r4
   dacc0:	fa20 f005 	lsr.w	r0, r0, r5
   dacc4:	fa01 f204 	lsl.w	r2, r1, r4
   dacc8:	ea40 0002 	orr.w	r0, r0, r2
   daccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dacd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dacd4:	f141 0100 	adc.w	r1, r1, #0
   dacd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dacdc:	bf08      	it	eq
   dacde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dace2:	bd70      	pop	{r4, r5, r6, pc}
   dace4:	f1c4 0520 	rsb	r5, r4, #32
   dace8:	fa00 f205 	lsl.w	r2, r0, r5
   dacec:	ea4e 0e02 	orr.w	lr, lr, r2
   dacf0:	fa20 f304 	lsr.w	r3, r0, r4
   dacf4:	fa01 f205 	lsl.w	r2, r1, r5
   dacf8:	ea43 0302 	orr.w	r3, r3, r2
   dacfc:	fa21 f004 	lsr.w	r0, r1, r4
   dad00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dad04:	fa21 f204 	lsr.w	r2, r1, r4
   dad08:	ea20 0002 	bic.w	r0, r0, r2
   dad0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dad10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dad14:	bf08      	it	eq
   dad16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dad1a:	bd70      	pop	{r4, r5, r6, pc}
   dad1c:	f094 0f00 	teq	r4, #0
   dad20:	d10f      	bne.n	dad42 <__aeabi_dmul+0x1c2>
   dad22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dad26:	0040      	lsls	r0, r0, #1
   dad28:	eb41 0101 	adc.w	r1, r1, r1
   dad2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dad30:	bf08      	it	eq
   dad32:	3c01      	subeq	r4, #1
   dad34:	d0f7      	beq.n	dad26 <__aeabi_dmul+0x1a6>
   dad36:	ea41 0106 	orr.w	r1, r1, r6
   dad3a:	f095 0f00 	teq	r5, #0
   dad3e:	bf18      	it	ne
   dad40:	4770      	bxne	lr
   dad42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dad46:	0052      	lsls	r2, r2, #1
   dad48:	eb43 0303 	adc.w	r3, r3, r3
   dad4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dad50:	bf08      	it	eq
   dad52:	3d01      	subeq	r5, #1
   dad54:	d0f7      	beq.n	dad46 <__aeabi_dmul+0x1c6>
   dad56:	ea43 0306 	orr.w	r3, r3, r6
   dad5a:	4770      	bx	lr
   dad5c:	ea94 0f0c 	teq	r4, ip
   dad60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dad64:	bf18      	it	ne
   dad66:	ea95 0f0c 	teqne	r5, ip
   dad6a:	d00c      	beq.n	dad86 <__aeabi_dmul+0x206>
   dad6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dad70:	bf18      	it	ne
   dad72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dad76:	d1d1      	bne.n	dad1c <__aeabi_dmul+0x19c>
   dad78:	ea81 0103 	eor.w	r1, r1, r3
   dad7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dad80:	f04f 0000 	mov.w	r0, #0
   dad84:	bd70      	pop	{r4, r5, r6, pc}
   dad86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dad8a:	bf06      	itte	eq
   dad8c:	4610      	moveq	r0, r2
   dad8e:	4619      	moveq	r1, r3
   dad90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dad94:	d019      	beq.n	dadca <__aeabi_dmul+0x24a>
   dad96:	ea94 0f0c 	teq	r4, ip
   dad9a:	d102      	bne.n	dada2 <__aeabi_dmul+0x222>
   dad9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dada0:	d113      	bne.n	dadca <__aeabi_dmul+0x24a>
   dada2:	ea95 0f0c 	teq	r5, ip
   dada6:	d105      	bne.n	dadb4 <__aeabi_dmul+0x234>
   dada8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dadac:	bf1c      	itt	ne
   dadae:	4610      	movne	r0, r2
   dadb0:	4619      	movne	r1, r3
   dadb2:	d10a      	bne.n	dadca <__aeabi_dmul+0x24a>
   dadb4:	ea81 0103 	eor.w	r1, r1, r3
   dadb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dadbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dadc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dadc4:	f04f 0000 	mov.w	r0, #0
   dadc8:	bd70      	pop	{r4, r5, r6, pc}
   dadca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dadce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dadd2:	bd70      	pop	{r4, r5, r6, pc}

000dadd4 <__aeabi_ddiv>:
   dadd4:	b570      	push	{r4, r5, r6, lr}
   dadd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dadda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dadde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dade2:	bf1d      	ittte	ne
   dade4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dade8:	ea94 0f0c 	teqne	r4, ip
   dadec:	ea95 0f0c 	teqne	r5, ip
   dadf0:	f000 f8a7 	bleq	daf42 <__aeabi_ddiv+0x16e>
   dadf4:	eba4 0405 	sub.w	r4, r4, r5
   dadf8:	ea81 0e03 	eor.w	lr, r1, r3
   dadfc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dae00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dae04:	f000 8088 	beq.w	daf18 <__aeabi_ddiv+0x144>
   dae08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dae0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dae10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dae14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dae18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dae1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dae20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dae24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dae28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dae2c:	429d      	cmp	r5, r3
   dae2e:	bf08      	it	eq
   dae30:	4296      	cmpeq	r6, r2
   dae32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dae36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dae3a:	d202      	bcs.n	dae42 <__aeabi_ddiv+0x6e>
   dae3c:	085b      	lsrs	r3, r3, #1
   dae3e:	ea4f 0232 	mov.w	r2, r2, rrx
   dae42:	1ab6      	subs	r6, r6, r2
   dae44:	eb65 0503 	sbc.w	r5, r5, r3
   dae48:	085b      	lsrs	r3, r3, #1
   dae4a:	ea4f 0232 	mov.w	r2, r2, rrx
   dae4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dae52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dae56:	ebb6 0e02 	subs.w	lr, r6, r2
   dae5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dae5e:	bf22      	ittt	cs
   dae60:	1ab6      	subcs	r6, r6, r2
   dae62:	4675      	movcs	r5, lr
   dae64:	ea40 000c 	orrcs.w	r0, r0, ip
   dae68:	085b      	lsrs	r3, r3, #1
   dae6a:	ea4f 0232 	mov.w	r2, r2, rrx
   dae6e:	ebb6 0e02 	subs.w	lr, r6, r2
   dae72:	eb75 0e03 	sbcs.w	lr, r5, r3
   dae76:	bf22      	ittt	cs
   dae78:	1ab6      	subcs	r6, r6, r2
   dae7a:	4675      	movcs	r5, lr
   dae7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dae80:	085b      	lsrs	r3, r3, #1
   dae82:	ea4f 0232 	mov.w	r2, r2, rrx
   dae86:	ebb6 0e02 	subs.w	lr, r6, r2
   dae8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dae8e:	bf22      	ittt	cs
   dae90:	1ab6      	subcs	r6, r6, r2
   dae92:	4675      	movcs	r5, lr
   dae94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dae98:	085b      	lsrs	r3, r3, #1
   dae9a:	ea4f 0232 	mov.w	r2, r2, rrx
   dae9e:	ebb6 0e02 	subs.w	lr, r6, r2
   daea2:	eb75 0e03 	sbcs.w	lr, r5, r3
   daea6:	bf22      	ittt	cs
   daea8:	1ab6      	subcs	r6, r6, r2
   daeaa:	4675      	movcs	r5, lr
   daeac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   daeb0:	ea55 0e06 	orrs.w	lr, r5, r6
   daeb4:	d018      	beq.n	daee8 <__aeabi_ddiv+0x114>
   daeb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   daeba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   daebe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   daec2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   daec6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   daeca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   daece:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   daed2:	d1c0      	bne.n	dae56 <__aeabi_ddiv+0x82>
   daed4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daed8:	d10b      	bne.n	daef2 <__aeabi_ddiv+0x11e>
   daeda:	ea41 0100 	orr.w	r1, r1, r0
   daede:	f04f 0000 	mov.w	r0, #0
   daee2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   daee6:	e7b6      	b.n	dae56 <__aeabi_ddiv+0x82>
   daee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daeec:	bf04      	itt	eq
   daeee:	4301      	orreq	r1, r0
   daef0:	2000      	moveq	r0, #0
   daef2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daef6:	bf88      	it	hi
   daef8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daefc:	f63f aeaf 	bhi.w	dac5e <__aeabi_dmul+0xde>
   daf00:	ebb5 0c03 	subs.w	ip, r5, r3
   daf04:	bf04      	itt	eq
   daf06:	ebb6 0c02 	subseq.w	ip, r6, r2
   daf0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   daf0e:	f150 0000 	adcs.w	r0, r0, #0
   daf12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daf16:	bd70      	pop	{r4, r5, r6, pc}
   daf18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   daf1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   daf20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   daf24:	bfc2      	ittt	gt
   daf26:	ebd4 050c 	rsbsgt	r5, r4, ip
   daf2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daf2e:	bd70      	popgt	{r4, r5, r6, pc}
   daf30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daf34:	f04f 0e00 	mov.w	lr, #0
   daf38:	3c01      	subs	r4, #1
   daf3a:	e690      	b.n	dac5e <__aeabi_dmul+0xde>
   daf3c:	ea45 0e06 	orr.w	lr, r5, r6
   daf40:	e68d      	b.n	dac5e <__aeabi_dmul+0xde>
   daf42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daf46:	ea94 0f0c 	teq	r4, ip
   daf4a:	bf08      	it	eq
   daf4c:	ea95 0f0c 	teqeq	r5, ip
   daf50:	f43f af3b 	beq.w	dadca <__aeabi_dmul+0x24a>
   daf54:	ea94 0f0c 	teq	r4, ip
   daf58:	d10a      	bne.n	daf70 <__aeabi_ddiv+0x19c>
   daf5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daf5e:	f47f af34 	bne.w	dadca <__aeabi_dmul+0x24a>
   daf62:	ea95 0f0c 	teq	r5, ip
   daf66:	f47f af25 	bne.w	dadb4 <__aeabi_dmul+0x234>
   daf6a:	4610      	mov	r0, r2
   daf6c:	4619      	mov	r1, r3
   daf6e:	e72c      	b.n	dadca <__aeabi_dmul+0x24a>
   daf70:	ea95 0f0c 	teq	r5, ip
   daf74:	d106      	bne.n	daf84 <__aeabi_ddiv+0x1b0>
   daf76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daf7a:	f43f aefd 	beq.w	dad78 <__aeabi_dmul+0x1f8>
   daf7e:	4610      	mov	r0, r2
   daf80:	4619      	mov	r1, r3
   daf82:	e722      	b.n	dadca <__aeabi_dmul+0x24a>
   daf84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daf88:	bf18      	it	ne
   daf8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daf8e:	f47f aec5 	bne.w	dad1c <__aeabi_dmul+0x19c>
   daf92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   daf96:	f47f af0d 	bne.w	dadb4 <__aeabi_dmul+0x234>
   daf9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   daf9e:	f47f aeeb 	bne.w	dad78 <__aeabi_dmul+0x1f8>
   dafa2:	e712      	b.n	dadca <__aeabi_dmul+0x24a>

000dafa4 <__gedf2>:
   dafa4:	f04f 3cff 	mov.w	ip, #4294967295
   dafa8:	e006      	b.n	dafb8 <__cmpdf2+0x4>
   dafaa:	bf00      	nop

000dafac <__ledf2>:
   dafac:	f04f 0c01 	mov.w	ip, #1
   dafb0:	e002      	b.n	dafb8 <__cmpdf2+0x4>
   dafb2:	bf00      	nop

000dafb4 <__cmpdf2>:
   dafb4:	f04f 0c01 	mov.w	ip, #1
   dafb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   dafbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dafc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dafc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dafc8:	bf18      	it	ne
   dafca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dafce:	d01b      	beq.n	db008 <__cmpdf2+0x54>
   dafd0:	b001      	add	sp, #4
   dafd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dafd6:	bf0c      	ite	eq
   dafd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dafdc:	ea91 0f03 	teqne	r1, r3
   dafe0:	bf02      	ittt	eq
   dafe2:	ea90 0f02 	teqeq	r0, r2
   dafe6:	2000      	moveq	r0, #0
   dafe8:	4770      	bxeq	lr
   dafea:	f110 0f00 	cmn.w	r0, #0
   dafee:	ea91 0f03 	teq	r1, r3
   daff2:	bf58      	it	pl
   daff4:	4299      	cmppl	r1, r3
   daff6:	bf08      	it	eq
   daff8:	4290      	cmpeq	r0, r2
   daffa:	bf2c      	ite	cs
   daffc:	17d8      	asrcs	r0, r3, #31
   daffe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db002:	f040 0001 	orr.w	r0, r0, #1
   db006:	4770      	bx	lr
   db008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db010:	d102      	bne.n	db018 <__cmpdf2+0x64>
   db012:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db016:	d107      	bne.n	db028 <__cmpdf2+0x74>
   db018:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db020:	d1d6      	bne.n	dafd0 <__cmpdf2+0x1c>
   db022:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db026:	d0d3      	beq.n	dafd0 <__cmpdf2+0x1c>
   db028:	f85d 0b04 	ldr.w	r0, [sp], #4
   db02c:	4770      	bx	lr
   db02e:	bf00      	nop

000db030 <__aeabi_cdrcmple>:
   db030:	4684      	mov	ip, r0
   db032:	4610      	mov	r0, r2
   db034:	4662      	mov	r2, ip
   db036:	468c      	mov	ip, r1
   db038:	4619      	mov	r1, r3
   db03a:	4663      	mov	r3, ip
   db03c:	e000      	b.n	db040 <__aeabi_cdcmpeq>
   db03e:	bf00      	nop

000db040 <__aeabi_cdcmpeq>:
   db040:	b501      	push	{r0, lr}
   db042:	f7ff ffb7 	bl	dafb4 <__cmpdf2>
   db046:	2800      	cmp	r0, #0
   db048:	bf48      	it	mi
   db04a:	f110 0f00 	cmnmi.w	r0, #0
   db04e:	bd01      	pop	{r0, pc}

000db050 <__aeabi_dcmpeq>:
   db050:	f84d ed08 	str.w	lr, [sp, #-8]!
   db054:	f7ff fff4 	bl	db040 <__aeabi_cdcmpeq>
   db058:	bf0c      	ite	eq
   db05a:	2001      	moveq	r0, #1
   db05c:	2000      	movne	r0, #0
   db05e:	f85d fb08 	ldr.w	pc, [sp], #8
   db062:	bf00      	nop

000db064 <__aeabi_dcmplt>:
   db064:	f84d ed08 	str.w	lr, [sp, #-8]!
   db068:	f7ff ffea 	bl	db040 <__aeabi_cdcmpeq>
   db06c:	bf34      	ite	cc
   db06e:	2001      	movcc	r0, #1
   db070:	2000      	movcs	r0, #0
   db072:	f85d fb08 	ldr.w	pc, [sp], #8
   db076:	bf00      	nop

000db078 <__aeabi_dcmple>:
   db078:	f84d ed08 	str.w	lr, [sp, #-8]!
   db07c:	f7ff ffe0 	bl	db040 <__aeabi_cdcmpeq>
   db080:	bf94      	ite	ls
   db082:	2001      	movls	r0, #1
   db084:	2000      	movhi	r0, #0
   db086:	f85d fb08 	ldr.w	pc, [sp], #8
   db08a:	bf00      	nop

000db08c <__aeabi_dcmpge>:
   db08c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db090:	f7ff ffce 	bl	db030 <__aeabi_cdrcmple>
   db094:	bf94      	ite	ls
   db096:	2001      	movls	r0, #1
   db098:	2000      	movhi	r0, #0
   db09a:	f85d fb08 	ldr.w	pc, [sp], #8
   db09e:	bf00      	nop

000db0a0 <__aeabi_dcmpgt>:
   db0a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db0a4:	f7ff ffc4 	bl	db030 <__aeabi_cdrcmple>
   db0a8:	bf34      	ite	cc
   db0aa:	2001      	movcc	r0, #1
   db0ac:	2000      	movcs	r0, #0
   db0ae:	f85d fb08 	ldr.w	pc, [sp], #8
   db0b2:	bf00      	nop

000db0b4 <__aeabi_dcmpun>:
   db0b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db0b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db0bc:	d102      	bne.n	db0c4 <__aeabi_dcmpun+0x10>
   db0be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db0c2:	d10a      	bne.n	db0da <__aeabi_dcmpun+0x26>
   db0c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db0cc:	d102      	bne.n	db0d4 <__aeabi_dcmpun+0x20>
   db0ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db0d2:	d102      	bne.n	db0da <__aeabi_dcmpun+0x26>
   db0d4:	f04f 0000 	mov.w	r0, #0
   db0d8:	4770      	bx	lr
   db0da:	f04f 0001 	mov.w	r0, #1
   db0de:	4770      	bx	lr

000db0e0 <__aeabi_d2iz>:
   db0e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db0e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db0e8:	d215      	bcs.n	db116 <__aeabi_d2iz+0x36>
   db0ea:	d511      	bpl.n	db110 <__aeabi_d2iz+0x30>
   db0ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db0f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db0f4:	d912      	bls.n	db11c <__aeabi_d2iz+0x3c>
   db0f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db0fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db0fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db102:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db106:	fa23 f002 	lsr.w	r0, r3, r2
   db10a:	bf18      	it	ne
   db10c:	4240      	negne	r0, r0
   db10e:	4770      	bx	lr
   db110:	f04f 0000 	mov.w	r0, #0
   db114:	4770      	bx	lr
   db116:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db11a:	d105      	bne.n	db128 <__aeabi_d2iz+0x48>
   db11c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db120:	bf08      	it	eq
   db122:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db126:	4770      	bx	lr
   db128:	f04f 0000 	mov.w	r0, #0
   db12c:	4770      	bx	lr
   db12e:	bf00      	nop

000db130 <__aeabi_d2uiz>:
   db130:	004a      	lsls	r2, r1, #1
   db132:	d211      	bcs.n	db158 <__aeabi_d2uiz+0x28>
   db134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db138:	d211      	bcs.n	db15e <__aeabi_d2uiz+0x2e>
   db13a:	d50d      	bpl.n	db158 <__aeabi_d2uiz+0x28>
   db13c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db144:	d40e      	bmi.n	db164 <__aeabi_d2uiz+0x34>
   db146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db14a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db14e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db152:	fa23 f002 	lsr.w	r0, r3, r2
   db156:	4770      	bx	lr
   db158:	f04f 0000 	mov.w	r0, #0
   db15c:	4770      	bx	lr
   db15e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db162:	d102      	bne.n	db16a <__aeabi_d2uiz+0x3a>
   db164:	f04f 30ff 	mov.w	r0, #4294967295
   db168:	4770      	bx	lr
   db16a:	f04f 0000 	mov.w	r0, #0
   db16e:	4770      	bx	lr

000db170 <__aeabi_d2f>:
   db170:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db174:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db178:	bf24      	itt	cs
   db17a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db17e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db182:	d90d      	bls.n	db1a0 <__aeabi_d2f+0x30>
   db184:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db188:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db18c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db190:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db194:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db198:	bf08      	it	eq
   db19a:	f020 0001 	biceq.w	r0, r0, #1
   db19e:	4770      	bx	lr
   db1a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db1a4:	d121      	bne.n	db1ea <__aeabi_d2f+0x7a>
   db1a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db1aa:	bfbc      	itt	lt
   db1ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db1b0:	4770      	bxlt	lr
   db1b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db1b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db1ba:	f1c2 0218 	rsb	r2, r2, #24
   db1be:	f1c2 0c20 	rsb	ip, r2, #32
   db1c2:	fa10 f30c 	lsls.w	r3, r0, ip
   db1c6:	fa20 f002 	lsr.w	r0, r0, r2
   db1ca:	bf18      	it	ne
   db1cc:	f040 0001 	orrne.w	r0, r0, #1
   db1d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db1d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db1d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   db1dc:	ea40 000c 	orr.w	r0, r0, ip
   db1e0:	fa23 f302 	lsr.w	r3, r3, r2
   db1e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db1e8:	e7cc      	b.n	db184 <__aeabi_d2f+0x14>
   db1ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db1ee:	d107      	bne.n	db200 <__aeabi_d2f+0x90>
   db1f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db1f4:	bf1e      	ittt	ne
   db1f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db1fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db1fe:	4770      	bxne	lr
   db200:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db204:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db20c:	4770      	bx	lr
   db20e:	bf00      	nop

000db210 <__aeabi_frsub>:
   db210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   db214:	e002      	b.n	db21c <__addsf3>
   db216:	bf00      	nop

000db218 <__aeabi_fsub>:
   db218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000db21c <__addsf3>:
   db21c:	0042      	lsls	r2, r0, #1
   db21e:	bf1f      	itttt	ne
   db220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   db224:	ea92 0f03 	teqne	r2, r3
   db228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   db22c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   db230:	d06a      	beq.n	db308 <__addsf3+0xec>
   db232:	ea4f 6212 	mov.w	r2, r2, lsr #24
   db236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   db23a:	bfc1      	itttt	gt
   db23c:	18d2      	addgt	r2, r2, r3
   db23e:	4041      	eorgt	r1, r0
   db240:	4048      	eorgt	r0, r1
   db242:	4041      	eorgt	r1, r0
   db244:	bfb8      	it	lt
   db246:	425b      	neglt	r3, r3
   db248:	2b19      	cmp	r3, #25
   db24a:	bf88      	it	hi
   db24c:	4770      	bxhi	lr
   db24e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   db252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   db25a:	bf18      	it	ne
   db25c:	4240      	negne	r0, r0
   db25e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   db266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   db26a:	bf18      	it	ne
   db26c:	4249      	negne	r1, r1
   db26e:	ea92 0f03 	teq	r2, r3
   db272:	d03f      	beq.n	db2f4 <__addsf3+0xd8>
   db274:	f1a2 0201 	sub.w	r2, r2, #1
   db278:	fa41 fc03 	asr.w	ip, r1, r3
   db27c:	eb10 000c 	adds.w	r0, r0, ip
   db280:	f1c3 0320 	rsb	r3, r3, #32
   db284:	fa01 f103 	lsl.w	r1, r1, r3
   db288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   db28c:	d502      	bpl.n	db294 <__addsf3+0x78>
   db28e:	4249      	negs	r1, r1
   db290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   db294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   db298:	d313      	bcc.n	db2c2 <__addsf3+0xa6>
   db29a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   db29e:	d306      	bcc.n	db2ae <__addsf3+0x92>
   db2a0:	0840      	lsrs	r0, r0, #1
   db2a2:	ea4f 0131 	mov.w	r1, r1, rrx
   db2a6:	f102 0201 	add.w	r2, r2, #1
   db2aa:	2afe      	cmp	r2, #254	; 0xfe
   db2ac:	d251      	bcs.n	db352 <__addsf3+0x136>
   db2ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   db2b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   db2b6:	bf08      	it	eq
   db2b8:	f020 0001 	biceq.w	r0, r0, #1
   db2bc:	ea40 0003 	orr.w	r0, r0, r3
   db2c0:	4770      	bx	lr
   db2c2:	0049      	lsls	r1, r1, #1
   db2c4:	eb40 0000 	adc.w	r0, r0, r0
   db2c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   db2cc:	f1a2 0201 	sub.w	r2, r2, #1
   db2d0:	d1ed      	bne.n	db2ae <__addsf3+0x92>
   db2d2:	fab0 fc80 	clz	ip, r0
   db2d6:	f1ac 0c08 	sub.w	ip, ip, #8
   db2da:	ebb2 020c 	subs.w	r2, r2, ip
   db2de:	fa00 f00c 	lsl.w	r0, r0, ip
   db2e2:	bfaa      	itet	ge
   db2e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   db2e8:	4252      	neglt	r2, r2
   db2ea:	4318      	orrge	r0, r3
   db2ec:	bfbc      	itt	lt
   db2ee:	40d0      	lsrlt	r0, r2
   db2f0:	4318      	orrlt	r0, r3
   db2f2:	4770      	bx	lr
   db2f4:	f092 0f00 	teq	r2, #0
   db2f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   db2fc:	bf06      	itte	eq
   db2fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   db302:	3201      	addeq	r2, #1
   db304:	3b01      	subne	r3, #1
   db306:	e7b5      	b.n	db274 <__addsf3+0x58>
   db308:	ea4f 0341 	mov.w	r3, r1, lsl #1
   db30c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   db310:	bf18      	it	ne
   db312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   db316:	d021      	beq.n	db35c <__addsf3+0x140>
   db318:	ea92 0f03 	teq	r2, r3
   db31c:	d004      	beq.n	db328 <__addsf3+0x10c>
   db31e:	f092 0f00 	teq	r2, #0
   db322:	bf08      	it	eq
   db324:	4608      	moveq	r0, r1
   db326:	4770      	bx	lr
   db328:	ea90 0f01 	teq	r0, r1
   db32c:	bf1c      	itt	ne
   db32e:	2000      	movne	r0, #0
   db330:	4770      	bxne	lr
   db332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   db336:	d104      	bne.n	db342 <__addsf3+0x126>
   db338:	0040      	lsls	r0, r0, #1
   db33a:	bf28      	it	cs
   db33c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   db340:	4770      	bx	lr
   db342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   db346:	bf3c      	itt	cc
   db348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   db34c:	4770      	bxcc	lr
   db34e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   db352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   db356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db35a:	4770      	bx	lr
   db35c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   db360:	bf16      	itet	ne
   db362:	4608      	movne	r0, r1
   db364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   db368:	4601      	movne	r1, r0
   db36a:	0242      	lsls	r2, r0, #9
   db36c:	bf06      	itte	eq
   db36e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   db372:	ea90 0f01 	teqeq	r0, r1
   db376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   db37a:	4770      	bx	lr

000db37c <__aeabi_ui2f>:
   db37c:	f04f 0300 	mov.w	r3, #0
   db380:	e004      	b.n	db38c <__aeabi_i2f+0x8>
   db382:	bf00      	nop

000db384 <__aeabi_i2f>:
   db384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   db388:	bf48      	it	mi
   db38a:	4240      	negmi	r0, r0
   db38c:	ea5f 0c00 	movs.w	ip, r0
   db390:	bf08      	it	eq
   db392:	4770      	bxeq	lr
   db394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   db398:	4601      	mov	r1, r0
   db39a:	f04f 0000 	mov.w	r0, #0
   db39e:	e01c      	b.n	db3da <__aeabi_l2f+0x2a>

000db3a0 <__aeabi_ul2f>:
   db3a0:	ea50 0201 	orrs.w	r2, r0, r1
   db3a4:	bf08      	it	eq
   db3a6:	4770      	bxeq	lr
   db3a8:	f04f 0300 	mov.w	r3, #0
   db3ac:	e00a      	b.n	db3c4 <__aeabi_l2f+0x14>
   db3ae:	bf00      	nop

000db3b0 <__aeabi_l2f>:
   db3b0:	ea50 0201 	orrs.w	r2, r0, r1
   db3b4:	bf08      	it	eq
   db3b6:	4770      	bxeq	lr
   db3b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   db3bc:	d502      	bpl.n	db3c4 <__aeabi_l2f+0x14>
   db3be:	4240      	negs	r0, r0
   db3c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db3c4:	ea5f 0c01 	movs.w	ip, r1
   db3c8:	bf02      	ittt	eq
   db3ca:	4684      	moveq	ip, r0
   db3cc:	4601      	moveq	r1, r0
   db3ce:	2000      	moveq	r0, #0
   db3d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   db3d4:	bf08      	it	eq
   db3d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   db3da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   db3de:	fabc f28c 	clz	r2, ip
   db3e2:	3a08      	subs	r2, #8
   db3e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   db3e8:	db10      	blt.n	db40c <__aeabi_l2f+0x5c>
   db3ea:	fa01 fc02 	lsl.w	ip, r1, r2
   db3ee:	4463      	add	r3, ip
   db3f0:	fa00 fc02 	lsl.w	ip, r0, r2
   db3f4:	f1c2 0220 	rsb	r2, r2, #32
   db3f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db3fc:	fa20 f202 	lsr.w	r2, r0, r2
   db400:	eb43 0002 	adc.w	r0, r3, r2
   db404:	bf08      	it	eq
   db406:	f020 0001 	biceq.w	r0, r0, #1
   db40a:	4770      	bx	lr
   db40c:	f102 0220 	add.w	r2, r2, #32
   db410:	fa01 fc02 	lsl.w	ip, r1, r2
   db414:	f1c2 0220 	rsb	r2, r2, #32
   db418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   db41c:	fa21 f202 	lsr.w	r2, r1, r2
   db420:	eb43 0002 	adc.w	r0, r3, r2
   db424:	bf08      	it	eq
   db426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   db42a:	4770      	bx	lr

000db42c <__aeabi_ldivmod>:
   db42c:	b97b      	cbnz	r3, db44e <__aeabi_ldivmod+0x22>
   db42e:	b972      	cbnz	r2, db44e <__aeabi_ldivmod+0x22>
   db430:	2900      	cmp	r1, #0
   db432:	bfbe      	ittt	lt
   db434:	2000      	movlt	r0, #0
   db436:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   db43a:	e006      	blt.n	db44a <__aeabi_ldivmod+0x1e>
   db43c:	bf08      	it	eq
   db43e:	2800      	cmpeq	r0, #0
   db440:	bf1c      	itt	ne
   db442:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   db446:	f04f 30ff 	movne.w	r0, #4294967295
   db44a:	f000 b9ed 	b.w	db828 <__aeabi_idiv0>
   db44e:	f1ad 0c08 	sub.w	ip, sp, #8
   db452:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   db456:	2900      	cmp	r1, #0
   db458:	db09      	blt.n	db46e <__aeabi_ldivmod+0x42>
   db45a:	2b00      	cmp	r3, #0
   db45c:	db1a      	blt.n	db494 <__aeabi_ldivmod+0x68>
   db45e:	f000 f871 	bl	db544 <__udivmoddi4>
   db462:	f8dd e004 	ldr.w	lr, [sp, #4]
   db466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db46a:	b004      	add	sp, #16
   db46c:	4770      	bx	lr
   db46e:	4240      	negs	r0, r0
   db470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db474:	2b00      	cmp	r3, #0
   db476:	db1b      	blt.n	db4b0 <__aeabi_ldivmod+0x84>
   db478:	f000 f864 	bl	db544 <__udivmoddi4>
   db47c:	f8dd e004 	ldr.w	lr, [sp, #4]
   db480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db484:	b004      	add	sp, #16
   db486:	4240      	negs	r0, r0
   db488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db48c:	4252      	negs	r2, r2
   db48e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db492:	4770      	bx	lr
   db494:	4252      	negs	r2, r2
   db496:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db49a:	f000 f853 	bl	db544 <__udivmoddi4>
   db49e:	f8dd e004 	ldr.w	lr, [sp, #4]
   db4a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db4a6:	b004      	add	sp, #16
   db4a8:	4240      	negs	r0, r0
   db4aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db4ae:	4770      	bx	lr
   db4b0:	4252      	negs	r2, r2
   db4b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db4b6:	f000 f845 	bl	db544 <__udivmoddi4>
   db4ba:	f8dd e004 	ldr.w	lr, [sp, #4]
   db4be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db4c2:	b004      	add	sp, #16
   db4c4:	4252      	negs	r2, r2
   db4c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db4ca:	4770      	bx	lr

000db4cc <__aeabi_uldivmod>:
   db4cc:	b953      	cbnz	r3, db4e4 <__aeabi_uldivmod+0x18>
   db4ce:	b94a      	cbnz	r2, db4e4 <__aeabi_uldivmod+0x18>
   db4d0:	2900      	cmp	r1, #0
   db4d2:	bf08      	it	eq
   db4d4:	2800      	cmpeq	r0, #0
   db4d6:	bf1c      	itt	ne
   db4d8:	f04f 31ff 	movne.w	r1, #4294967295
   db4dc:	f04f 30ff 	movne.w	r0, #4294967295
   db4e0:	f000 b9a2 	b.w	db828 <__aeabi_idiv0>
   db4e4:	f1ad 0c08 	sub.w	ip, sp, #8
   db4e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   db4ec:	f000 f82a 	bl	db544 <__udivmoddi4>
   db4f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   db4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db4f8:	b004      	add	sp, #16
   db4fa:	4770      	bx	lr

000db4fc <__aeabi_d2ulz>:
   db4fc:	b5d0      	push	{r4, r6, r7, lr}
   db4fe:	2200      	movs	r2, #0
   db500:	4b0e      	ldr	r3, [pc, #56]	; (db53c <__aeabi_d2ulz+0x40>)
   db502:	4606      	mov	r6, r0
   db504:	460f      	mov	r7, r1
   db506:	f7ff fb3b 	bl	dab80 <__aeabi_dmul>
   db50a:	f7ff fe11 	bl	db130 <__aeabi_d2uiz>
   db50e:	4604      	mov	r4, r0
   db510:	f7ff fac0 	bl	daa94 <__aeabi_ui2d>
   db514:	2200      	movs	r2, #0
   db516:	4b0a      	ldr	r3, [pc, #40]	; (db540 <__aeabi_d2ulz+0x44>)
   db518:	f7ff fb32 	bl	dab80 <__aeabi_dmul>
   db51c:	4602      	mov	r2, r0
   db51e:	460b      	mov	r3, r1
   db520:	4630      	mov	r0, r6
   db522:	4639      	mov	r1, r7
   db524:	f7ff f978 	bl	da818 <__aeabi_dsub>
   db528:	f7ff fe02 	bl	db130 <__aeabi_d2uiz>
   db52c:	4623      	mov	r3, r4
   db52e:	2200      	movs	r2, #0
   db530:	ea42 0200 	orr.w	r2, r2, r0
   db534:	4610      	mov	r0, r2
   db536:	4619      	mov	r1, r3
   db538:	bdd0      	pop	{r4, r6, r7, pc}
   db53a:	bf00      	nop
   db53c:	3df00000 	.word	0x3df00000
   db540:	41f00000 	.word	0x41f00000

000db544 <__udivmoddi4>:
   db544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db548:	468c      	mov	ip, r1
   db54a:	460e      	mov	r6, r1
   db54c:	4604      	mov	r4, r0
   db54e:	9d08      	ldr	r5, [sp, #32]
   db550:	2b00      	cmp	r3, #0
   db552:	d150      	bne.n	db5f6 <__udivmoddi4+0xb2>
   db554:	428a      	cmp	r2, r1
   db556:	4617      	mov	r7, r2
   db558:	d96c      	bls.n	db634 <__udivmoddi4+0xf0>
   db55a:	fab2 fe82 	clz	lr, r2
   db55e:	f1be 0f00 	cmp.w	lr, #0
   db562:	d00b      	beq.n	db57c <__udivmoddi4+0x38>
   db564:	f1ce 0420 	rsb	r4, lr, #32
   db568:	fa20 f404 	lsr.w	r4, r0, r4
   db56c:	fa01 f60e 	lsl.w	r6, r1, lr
   db570:	ea44 0c06 	orr.w	ip, r4, r6
   db574:	fa02 f70e 	lsl.w	r7, r2, lr
   db578:	fa00 f40e 	lsl.w	r4, r0, lr
   db57c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   db580:	0c22      	lsrs	r2, r4, #16
   db582:	fbbc f0f9 	udiv	r0, ip, r9
   db586:	fa1f f887 	uxth.w	r8, r7
   db58a:	fb09 c610 	mls	r6, r9, r0, ip
   db58e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db592:	fb00 f308 	mul.w	r3, r0, r8
   db596:	42b3      	cmp	r3, r6
   db598:	d909      	bls.n	db5ae <__udivmoddi4+0x6a>
   db59a:	19f6      	adds	r6, r6, r7
   db59c:	f100 32ff 	add.w	r2, r0, #4294967295
   db5a0:	f080 8122 	bcs.w	db7e8 <__udivmoddi4+0x2a4>
   db5a4:	42b3      	cmp	r3, r6
   db5a6:	f240 811f 	bls.w	db7e8 <__udivmoddi4+0x2a4>
   db5aa:	3802      	subs	r0, #2
   db5ac:	443e      	add	r6, r7
   db5ae:	1af6      	subs	r6, r6, r3
   db5b0:	b2a2      	uxth	r2, r4
   db5b2:	fbb6 f3f9 	udiv	r3, r6, r9
   db5b6:	fb09 6613 	mls	r6, r9, r3, r6
   db5ba:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db5be:	fb03 f808 	mul.w	r8, r3, r8
   db5c2:	45a0      	cmp	r8, r4
   db5c4:	d909      	bls.n	db5da <__udivmoddi4+0x96>
   db5c6:	19e4      	adds	r4, r4, r7
   db5c8:	f103 32ff 	add.w	r2, r3, #4294967295
   db5cc:	f080 810a 	bcs.w	db7e4 <__udivmoddi4+0x2a0>
   db5d0:	45a0      	cmp	r8, r4
   db5d2:	f240 8107 	bls.w	db7e4 <__udivmoddi4+0x2a0>
   db5d6:	3b02      	subs	r3, #2
   db5d8:	443c      	add	r4, r7
   db5da:	ebc8 0404 	rsb	r4, r8, r4
   db5de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db5e2:	2100      	movs	r1, #0
   db5e4:	2d00      	cmp	r5, #0
   db5e6:	d062      	beq.n	db6ae <__udivmoddi4+0x16a>
   db5e8:	fa24 f40e 	lsr.w	r4, r4, lr
   db5ec:	2300      	movs	r3, #0
   db5ee:	602c      	str	r4, [r5, #0]
   db5f0:	606b      	str	r3, [r5, #4]
   db5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db5f6:	428b      	cmp	r3, r1
   db5f8:	d907      	bls.n	db60a <__udivmoddi4+0xc6>
   db5fa:	2d00      	cmp	r5, #0
   db5fc:	d055      	beq.n	db6aa <__udivmoddi4+0x166>
   db5fe:	2100      	movs	r1, #0
   db600:	e885 0041 	stmia.w	r5, {r0, r6}
   db604:	4608      	mov	r0, r1
   db606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db60a:	fab3 f183 	clz	r1, r3
   db60e:	2900      	cmp	r1, #0
   db610:	f040 8090 	bne.w	db734 <__udivmoddi4+0x1f0>
   db614:	42b3      	cmp	r3, r6
   db616:	d302      	bcc.n	db61e <__udivmoddi4+0xda>
   db618:	4282      	cmp	r2, r0
   db61a:	f200 80f8 	bhi.w	db80e <__udivmoddi4+0x2ca>
   db61e:	1a84      	subs	r4, r0, r2
   db620:	eb66 0603 	sbc.w	r6, r6, r3
   db624:	2001      	movs	r0, #1
   db626:	46b4      	mov	ip, r6
   db628:	2d00      	cmp	r5, #0
   db62a:	d040      	beq.n	db6ae <__udivmoddi4+0x16a>
   db62c:	e885 1010 	stmia.w	r5, {r4, ip}
   db630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db634:	b912      	cbnz	r2, db63c <__udivmoddi4+0xf8>
   db636:	2701      	movs	r7, #1
   db638:	fbb7 f7f2 	udiv	r7, r7, r2
   db63c:	fab7 fe87 	clz	lr, r7
   db640:	f1be 0f00 	cmp.w	lr, #0
   db644:	d135      	bne.n	db6b2 <__udivmoddi4+0x16e>
   db646:	1bf3      	subs	r3, r6, r7
   db648:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db64c:	fa1f fc87 	uxth.w	ip, r7
   db650:	2101      	movs	r1, #1
   db652:	fbb3 f0f8 	udiv	r0, r3, r8
   db656:	0c22      	lsrs	r2, r4, #16
   db658:	fb08 3610 	mls	r6, r8, r0, r3
   db65c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db660:	fb0c f300 	mul.w	r3, ip, r0
   db664:	42b3      	cmp	r3, r6
   db666:	d907      	bls.n	db678 <__udivmoddi4+0x134>
   db668:	19f6      	adds	r6, r6, r7
   db66a:	f100 32ff 	add.w	r2, r0, #4294967295
   db66e:	d202      	bcs.n	db676 <__udivmoddi4+0x132>
   db670:	42b3      	cmp	r3, r6
   db672:	f200 80ce 	bhi.w	db812 <__udivmoddi4+0x2ce>
   db676:	4610      	mov	r0, r2
   db678:	1af6      	subs	r6, r6, r3
   db67a:	b2a2      	uxth	r2, r4
   db67c:	fbb6 f3f8 	udiv	r3, r6, r8
   db680:	fb08 6613 	mls	r6, r8, r3, r6
   db684:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db688:	fb0c fc03 	mul.w	ip, ip, r3
   db68c:	45a4      	cmp	ip, r4
   db68e:	d907      	bls.n	db6a0 <__udivmoddi4+0x15c>
   db690:	19e4      	adds	r4, r4, r7
   db692:	f103 32ff 	add.w	r2, r3, #4294967295
   db696:	d202      	bcs.n	db69e <__udivmoddi4+0x15a>
   db698:	45a4      	cmp	ip, r4
   db69a:	f200 80b5 	bhi.w	db808 <__udivmoddi4+0x2c4>
   db69e:	4613      	mov	r3, r2
   db6a0:	ebcc 0404 	rsb	r4, ip, r4
   db6a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db6a8:	e79c      	b.n	db5e4 <__udivmoddi4+0xa0>
   db6aa:	4629      	mov	r1, r5
   db6ac:	4628      	mov	r0, r5
   db6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db6b2:	f1ce 0120 	rsb	r1, lr, #32
   db6b6:	fa06 f30e 	lsl.w	r3, r6, lr
   db6ba:	fa07 f70e 	lsl.w	r7, r7, lr
   db6be:	fa20 f901 	lsr.w	r9, r0, r1
   db6c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db6c6:	40ce      	lsrs	r6, r1
   db6c8:	ea49 0903 	orr.w	r9, r9, r3
   db6cc:	fbb6 faf8 	udiv	sl, r6, r8
   db6d0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   db6d4:	fb08 661a 	mls	r6, r8, sl, r6
   db6d8:	fa1f fc87 	uxth.w	ip, r7
   db6dc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   db6e0:	fb0a f20c 	mul.w	r2, sl, ip
   db6e4:	429a      	cmp	r2, r3
   db6e6:	fa00 f40e 	lsl.w	r4, r0, lr
   db6ea:	d90a      	bls.n	db702 <__udivmoddi4+0x1be>
   db6ec:	19db      	adds	r3, r3, r7
   db6ee:	f10a 31ff 	add.w	r1, sl, #4294967295
   db6f2:	f080 8087 	bcs.w	db804 <__udivmoddi4+0x2c0>
   db6f6:	429a      	cmp	r2, r3
   db6f8:	f240 8084 	bls.w	db804 <__udivmoddi4+0x2c0>
   db6fc:	f1aa 0a02 	sub.w	sl, sl, #2
   db700:	443b      	add	r3, r7
   db702:	1a9b      	subs	r3, r3, r2
   db704:	fa1f f989 	uxth.w	r9, r9
   db708:	fbb3 f1f8 	udiv	r1, r3, r8
   db70c:	fb08 3311 	mls	r3, r8, r1, r3
   db710:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   db714:	fb01 f60c 	mul.w	r6, r1, ip
   db718:	429e      	cmp	r6, r3
   db71a:	d907      	bls.n	db72c <__udivmoddi4+0x1e8>
   db71c:	19db      	adds	r3, r3, r7
   db71e:	f101 32ff 	add.w	r2, r1, #4294967295
   db722:	d26b      	bcs.n	db7fc <__udivmoddi4+0x2b8>
   db724:	429e      	cmp	r6, r3
   db726:	d969      	bls.n	db7fc <__udivmoddi4+0x2b8>
   db728:	3902      	subs	r1, #2
   db72a:	443b      	add	r3, r7
   db72c:	1b9b      	subs	r3, r3, r6
   db72e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   db732:	e78e      	b.n	db652 <__udivmoddi4+0x10e>
   db734:	f1c1 0e20 	rsb	lr, r1, #32
   db738:	fa22 f40e 	lsr.w	r4, r2, lr
   db73c:	408b      	lsls	r3, r1
   db73e:	4323      	orrs	r3, r4
   db740:	fa20 f70e 	lsr.w	r7, r0, lr
   db744:	fa06 f401 	lsl.w	r4, r6, r1
   db748:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   db74c:	fa26 f60e 	lsr.w	r6, r6, lr
   db750:	433c      	orrs	r4, r7
   db752:	fbb6 f9fc 	udiv	r9, r6, ip
   db756:	0c27      	lsrs	r7, r4, #16
   db758:	fb0c 6619 	mls	r6, ip, r9, r6
   db75c:	fa1f f883 	uxth.w	r8, r3
   db760:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   db764:	fb09 f708 	mul.w	r7, r9, r8
   db768:	42b7      	cmp	r7, r6
   db76a:	fa02 f201 	lsl.w	r2, r2, r1
   db76e:	fa00 fa01 	lsl.w	sl, r0, r1
   db772:	d908      	bls.n	db786 <__udivmoddi4+0x242>
   db774:	18f6      	adds	r6, r6, r3
   db776:	f109 30ff 	add.w	r0, r9, #4294967295
   db77a:	d241      	bcs.n	db800 <__udivmoddi4+0x2bc>
   db77c:	42b7      	cmp	r7, r6
   db77e:	d93f      	bls.n	db800 <__udivmoddi4+0x2bc>
   db780:	f1a9 0902 	sub.w	r9, r9, #2
   db784:	441e      	add	r6, r3
   db786:	1bf6      	subs	r6, r6, r7
   db788:	b2a0      	uxth	r0, r4
   db78a:	fbb6 f4fc 	udiv	r4, r6, ip
   db78e:	fb0c 6614 	mls	r6, ip, r4, r6
   db792:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   db796:	fb04 f808 	mul.w	r8, r4, r8
   db79a:	45b8      	cmp	r8, r7
   db79c:	d907      	bls.n	db7ae <__udivmoddi4+0x26a>
   db79e:	18ff      	adds	r7, r7, r3
   db7a0:	f104 30ff 	add.w	r0, r4, #4294967295
   db7a4:	d228      	bcs.n	db7f8 <__udivmoddi4+0x2b4>
   db7a6:	45b8      	cmp	r8, r7
   db7a8:	d926      	bls.n	db7f8 <__udivmoddi4+0x2b4>
   db7aa:	3c02      	subs	r4, #2
   db7ac:	441f      	add	r7, r3
   db7ae:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   db7b2:	ebc8 0707 	rsb	r7, r8, r7
   db7b6:	fba0 8902 	umull	r8, r9, r0, r2
   db7ba:	454f      	cmp	r7, r9
   db7bc:	4644      	mov	r4, r8
   db7be:	464e      	mov	r6, r9
   db7c0:	d314      	bcc.n	db7ec <__udivmoddi4+0x2a8>
   db7c2:	d029      	beq.n	db818 <__udivmoddi4+0x2d4>
   db7c4:	b365      	cbz	r5, db820 <__udivmoddi4+0x2dc>
   db7c6:	ebba 0304 	subs.w	r3, sl, r4
   db7ca:	eb67 0706 	sbc.w	r7, r7, r6
   db7ce:	fa07 fe0e 	lsl.w	lr, r7, lr
   db7d2:	40cb      	lsrs	r3, r1
   db7d4:	40cf      	lsrs	r7, r1
   db7d6:	ea4e 0303 	orr.w	r3, lr, r3
   db7da:	e885 0088 	stmia.w	r5, {r3, r7}
   db7de:	2100      	movs	r1, #0
   db7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7e4:	4613      	mov	r3, r2
   db7e6:	e6f8      	b.n	db5da <__udivmoddi4+0x96>
   db7e8:	4610      	mov	r0, r2
   db7ea:	e6e0      	b.n	db5ae <__udivmoddi4+0x6a>
   db7ec:	ebb8 0402 	subs.w	r4, r8, r2
   db7f0:	eb69 0603 	sbc.w	r6, r9, r3
   db7f4:	3801      	subs	r0, #1
   db7f6:	e7e5      	b.n	db7c4 <__udivmoddi4+0x280>
   db7f8:	4604      	mov	r4, r0
   db7fa:	e7d8      	b.n	db7ae <__udivmoddi4+0x26a>
   db7fc:	4611      	mov	r1, r2
   db7fe:	e795      	b.n	db72c <__udivmoddi4+0x1e8>
   db800:	4681      	mov	r9, r0
   db802:	e7c0      	b.n	db786 <__udivmoddi4+0x242>
   db804:	468a      	mov	sl, r1
   db806:	e77c      	b.n	db702 <__udivmoddi4+0x1be>
   db808:	3b02      	subs	r3, #2
   db80a:	443c      	add	r4, r7
   db80c:	e748      	b.n	db6a0 <__udivmoddi4+0x15c>
   db80e:	4608      	mov	r0, r1
   db810:	e70a      	b.n	db628 <__udivmoddi4+0xe4>
   db812:	3802      	subs	r0, #2
   db814:	443e      	add	r6, r7
   db816:	e72f      	b.n	db678 <__udivmoddi4+0x134>
   db818:	45c2      	cmp	sl, r8
   db81a:	d3e7      	bcc.n	db7ec <__udivmoddi4+0x2a8>
   db81c:	463e      	mov	r6, r7
   db81e:	e7d1      	b.n	db7c4 <__udivmoddi4+0x280>
   db820:	4629      	mov	r1, r5
   db822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db826:	bf00      	nop

000db828 <__aeabi_idiv0>:
   db828:	4770      	bx	lr
   db82a:	bf00      	nop

000db82c <asctime>:
   db82c:	4b09      	ldr	r3, [pc, #36]	; (db854 <asctime+0x28>)
   db82e:	b570      	push	{r4, r5, r6, lr}
   db830:	681c      	ldr	r4, [r3, #0]
   db832:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db834:	4606      	mov	r6, r0
   db836:	b93d      	cbnz	r5, db848 <asctime+0x1c>
   db838:	201a      	movs	r0, #26
   db83a:	f7fb fc51 	bl	d70e0 <malloc>
   db83e:	221a      	movs	r2, #26
   db840:	6420      	str	r0, [r4, #64]	; 0x40
   db842:	4629      	mov	r1, r5
   db844:	f000 f972 	bl	dbb2c <memset>
   db848:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db84a:	4630      	mov	r0, r6
   db84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db850:	f000 b802 	b.w	db858 <asctime_r>
   db854:	2003e0f4 	.word	0x2003e0f4

000db858 <asctime_r>:
   db858:	b510      	push	{r4, lr}
   db85a:	460c      	mov	r4, r1
   db85c:	6941      	ldr	r1, [r0, #20]
   db85e:	6903      	ldr	r3, [r0, #16]
   db860:	6982      	ldr	r2, [r0, #24]
   db862:	b086      	sub	sp, #24
   db864:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db868:	9104      	str	r1, [sp, #16]
   db86a:	6801      	ldr	r1, [r0, #0]
   db86c:	9103      	str	r1, [sp, #12]
   db86e:	6841      	ldr	r1, [r0, #4]
   db870:	9102      	str	r1, [sp, #8]
   db872:	6881      	ldr	r1, [r0, #8]
   db874:	9101      	str	r1, [sp, #4]
   db876:	68c1      	ldr	r1, [r0, #12]
   db878:	9100      	str	r1, [sp, #0]
   db87a:	4907      	ldr	r1, [pc, #28]	; (db898 <asctime_r+0x40>)
   db87c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db880:	440b      	add	r3, r1
   db882:	4906      	ldr	r1, [pc, #24]	; (db89c <asctime_r+0x44>)
   db884:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db888:	440a      	add	r2, r1
   db88a:	4620      	mov	r0, r4
   db88c:	4904      	ldr	r1, [pc, #16]	; (db8a0 <asctime_r+0x48>)
   db88e:	f7fb fc47 	bl	d7120 <siprintf>
   db892:	4620      	mov	r0, r4
   db894:	b006      	add	sp, #24
   db896:	bd10      	pop	{r4, pc}
   db898:	000dd43d 	.word	0x000dd43d
   db89c:	000dd428 	.word	0x000dd428
   db8a0:	000dd461 	.word	0x000dd461

000db8a4 <atoi>:
   db8a4:	220a      	movs	r2, #10
   db8a6:	2100      	movs	r1, #0
   db8a8:	f000 ba78 	b.w	dbd9c <strtol>

000db8ac <__cxa_atexit>:
   db8ac:	b510      	push	{r4, lr}
   db8ae:	4c05      	ldr	r4, [pc, #20]	; (db8c4 <__cxa_atexit+0x18>)
   db8b0:	4613      	mov	r3, r2
   db8b2:	b12c      	cbz	r4, db8c0 <__cxa_atexit+0x14>
   db8b4:	460a      	mov	r2, r1
   db8b6:	4601      	mov	r1, r0
   db8b8:	2002      	movs	r0, #2
   db8ba:	f3af 8000 	nop.w
   db8be:	bd10      	pop	{r4, pc}
   db8c0:	4620      	mov	r0, r4
   db8c2:	bd10      	pop	{r4, pc}
   db8c4:	00000000 	.word	0x00000000

000db8c8 <localtime>:
   db8c8:	b538      	push	{r3, r4, r5, lr}
   db8ca:	4b07      	ldr	r3, [pc, #28]	; (db8e8 <localtime+0x20>)
   db8cc:	681c      	ldr	r4, [r3, #0]
   db8ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db8d0:	4605      	mov	r5, r0
   db8d2:	b91b      	cbnz	r3, db8dc <localtime+0x14>
   db8d4:	2024      	movs	r0, #36	; 0x24
   db8d6:	f7fb fc03 	bl	d70e0 <malloc>
   db8da:	63e0      	str	r0, [r4, #60]	; 0x3c
   db8dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db8de:	4628      	mov	r0, r5
   db8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db8e4:	f000 b802 	b.w	db8ec <localtime_r>
   db8e8:	2003e0f4 	.word	0x2003e0f4

000db8ec <localtime_r>:
   db8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db8f0:	460c      	mov	r4, r1
   db8f2:	4680      	mov	r8, r0
   db8f4:	f000 fd58 	bl	dc3a8 <__gettzinfo>
   db8f8:	4621      	mov	r1, r4
   db8fa:	4607      	mov	r7, r0
   db8fc:	4640      	mov	r0, r8
   db8fe:	f000 fd57 	bl	dc3b0 <gmtime_r>
   db902:	6946      	ldr	r6, [r0, #20]
   db904:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db908:	07b3      	lsls	r3, r6, #30
   db90a:	4604      	mov	r4, r0
   db90c:	d105      	bne.n	db91a <localtime_r+0x2e>
   db90e:	2264      	movs	r2, #100	; 0x64
   db910:	fb96 f3f2 	sdiv	r3, r6, r2
   db914:	fb02 6313 	mls	r3, r2, r3, r6
   db918:	b94b      	cbnz	r3, db92e <localtime_r+0x42>
   db91a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db91e:	fb96 f3f5 	sdiv	r3, r6, r5
   db922:	fb05 6513 	mls	r5, r5, r3, r6
   db926:	fab5 f385 	clz	r3, r5
   db92a:	095b      	lsrs	r3, r3, #5
   db92c:	e000      	b.n	db930 <localtime_r+0x44>
   db92e:	2301      	movs	r3, #1
   db930:	4a5f      	ldr	r2, [pc, #380]	; (dbab0 <localtime_r+0x1c4>)
   db932:	2530      	movs	r5, #48	; 0x30
   db934:	fb05 2503 	mla	r5, r5, r3, r2
   db938:	f000 fb6a 	bl	dc010 <__tz_lock>
   db93c:	f000 fb6a 	bl	dc014 <_tzset_unlocked>
   db940:	4b5c      	ldr	r3, [pc, #368]	; (dbab4 <localtime_r+0x1c8>)
   db942:	681b      	ldr	r3, [r3, #0]
   db944:	b1f3      	cbz	r3, db984 <localtime_r+0x98>
   db946:	687b      	ldr	r3, [r7, #4]
   db948:	429e      	cmp	r6, r3
   db94a:	d105      	bne.n	db958 <localtime_r+0x6c>
   db94c:	6839      	ldr	r1, [r7, #0]
   db94e:	f8d8 3000 	ldr.w	r3, [r8]
   db952:	69fa      	ldr	r2, [r7, #28]
   db954:	b941      	cbnz	r1, db968 <localtime_r+0x7c>
   db956:	e00a      	b.n	db96e <localtime_r+0x82>
   db958:	4630      	mov	r0, r6
   db95a:	f000 fab1 	bl	dbec0 <__tzcalc_limits>
   db95e:	2800      	cmp	r0, #0
   db960:	d1f4      	bne.n	db94c <localtime_r+0x60>
   db962:	f04f 33ff 	mov.w	r3, #4294967295
   db966:	e00d      	b.n	db984 <localtime_r+0x98>
   db968:	4293      	cmp	r3, r2
   db96a:	db08      	blt.n	db97e <localtime_r+0x92>
   db96c:	e001      	b.n	db972 <localtime_r+0x86>
   db96e:	4293      	cmp	r3, r2
   db970:	da07      	bge.n	db982 <localtime_r+0x96>
   db972:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db974:	4293      	cmp	r3, r2
   db976:	bfac      	ite	ge
   db978:	2300      	movge	r3, #0
   db97a:	2301      	movlt	r3, #1
   db97c:	e002      	b.n	db984 <localtime_r+0x98>
   db97e:	2300      	movs	r3, #0
   db980:	e000      	b.n	db984 <localtime_r+0x98>
   db982:	2301      	movs	r3, #1
   db984:	6223      	str	r3, [r4, #32]
   db986:	6a23      	ldr	r3, [r4, #32]
   db988:	2b01      	cmp	r3, #1
   db98a:	bf0c      	ite	eq
   db98c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db98e:	6a39      	ldrne	r1, [r7, #32]
   db990:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db994:	203c      	movs	r0, #60	; 0x3c
   db996:	fb91 f6f3 	sdiv	r6, r1, r3
   db99a:	fb03 1316 	mls	r3, r3, r6, r1
   db99e:	6861      	ldr	r1, [r4, #4]
   db9a0:	fb93 f2f0 	sdiv	r2, r3, r0
   db9a4:	fb00 3012 	mls	r0, r0, r2, r3
   db9a8:	6823      	ldr	r3, [r4, #0]
   db9aa:	1a89      	subs	r1, r1, r2
   db9ac:	68a2      	ldr	r2, [r4, #8]
   db9ae:	6061      	str	r1, [r4, #4]
   db9b0:	1a1b      	subs	r3, r3, r0
   db9b2:	1b92      	subs	r2, r2, r6
   db9b4:	2b3b      	cmp	r3, #59	; 0x3b
   db9b6:	6023      	str	r3, [r4, #0]
   db9b8:	60a2      	str	r2, [r4, #8]
   db9ba:	dd03      	ble.n	db9c4 <localtime_r+0xd8>
   db9bc:	3101      	adds	r1, #1
   db9be:	6061      	str	r1, [r4, #4]
   db9c0:	3b3c      	subs	r3, #60	; 0x3c
   db9c2:	e004      	b.n	db9ce <localtime_r+0xe2>
   db9c4:	2b00      	cmp	r3, #0
   db9c6:	da03      	bge.n	db9d0 <localtime_r+0xe4>
   db9c8:	3901      	subs	r1, #1
   db9ca:	6061      	str	r1, [r4, #4]
   db9cc:	333c      	adds	r3, #60	; 0x3c
   db9ce:	6023      	str	r3, [r4, #0]
   db9d0:	6863      	ldr	r3, [r4, #4]
   db9d2:	2b3b      	cmp	r3, #59	; 0x3b
   db9d4:	dd03      	ble.n	db9de <localtime_r+0xf2>
   db9d6:	3201      	adds	r2, #1
   db9d8:	60a2      	str	r2, [r4, #8]
   db9da:	3b3c      	subs	r3, #60	; 0x3c
   db9dc:	e004      	b.n	db9e8 <localtime_r+0xfc>
   db9de:	2b00      	cmp	r3, #0
   db9e0:	da03      	bge.n	db9ea <localtime_r+0xfe>
   db9e2:	3a01      	subs	r2, #1
   db9e4:	60a2      	str	r2, [r4, #8]
   db9e6:	333c      	adds	r3, #60	; 0x3c
   db9e8:	6063      	str	r3, [r4, #4]
   db9ea:	68a3      	ldr	r3, [r4, #8]
   db9ec:	2b17      	cmp	r3, #23
   db9ee:	dd22      	ble.n	dba36 <localtime_r+0x14a>
   db9f0:	69e2      	ldr	r2, [r4, #28]
   db9f2:	3201      	adds	r2, #1
   db9f4:	61e2      	str	r2, [r4, #28]
   db9f6:	69a2      	ldr	r2, [r4, #24]
   db9f8:	3201      	adds	r2, #1
   db9fa:	2a06      	cmp	r2, #6
   db9fc:	bfc8      	it	gt
   db9fe:	2200      	movgt	r2, #0
   dba00:	61a2      	str	r2, [r4, #24]
   dba02:	68e2      	ldr	r2, [r4, #12]
   dba04:	3b18      	subs	r3, #24
   dba06:	3201      	adds	r2, #1
   dba08:	60a3      	str	r3, [r4, #8]
   dba0a:	6923      	ldr	r3, [r4, #16]
   dba0c:	60e2      	str	r2, [r4, #12]
   dba0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dba12:	428a      	cmp	r2, r1
   dba14:	dd46      	ble.n	dbaa4 <localtime_r+0x1b8>
   dba16:	3301      	adds	r3, #1
   dba18:	2b0c      	cmp	r3, #12
   dba1a:	bf0c      	ite	eq
   dba1c:	6963      	ldreq	r3, [r4, #20]
   dba1e:	6123      	strne	r3, [r4, #16]
   dba20:	eba2 0201 	sub.w	r2, r2, r1
   dba24:	60e2      	str	r2, [r4, #12]
   dba26:	bf01      	itttt	eq
   dba28:	3301      	addeq	r3, #1
   dba2a:	2200      	moveq	r2, #0
   dba2c:	6122      	streq	r2, [r4, #16]
   dba2e:	6163      	streq	r3, [r4, #20]
   dba30:	bf08      	it	eq
   dba32:	61e2      	streq	r2, [r4, #28]
   dba34:	e036      	b.n	dbaa4 <localtime_r+0x1b8>
   dba36:	2b00      	cmp	r3, #0
   dba38:	da34      	bge.n	dbaa4 <localtime_r+0x1b8>
   dba3a:	69e2      	ldr	r2, [r4, #28]
   dba3c:	3a01      	subs	r2, #1
   dba3e:	61e2      	str	r2, [r4, #28]
   dba40:	69a2      	ldr	r2, [r4, #24]
   dba42:	3a01      	subs	r2, #1
   dba44:	bf48      	it	mi
   dba46:	2206      	movmi	r2, #6
   dba48:	61a2      	str	r2, [r4, #24]
   dba4a:	68e2      	ldr	r2, [r4, #12]
   dba4c:	3318      	adds	r3, #24
   dba4e:	3a01      	subs	r2, #1
   dba50:	60e2      	str	r2, [r4, #12]
   dba52:	60a3      	str	r3, [r4, #8]
   dba54:	bb32      	cbnz	r2, dbaa4 <localtime_r+0x1b8>
   dba56:	6923      	ldr	r3, [r4, #16]
   dba58:	3b01      	subs	r3, #1
   dba5a:	d401      	bmi.n	dba60 <localtime_r+0x174>
   dba5c:	6123      	str	r3, [r4, #16]
   dba5e:	e01d      	b.n	dba9c <localtime_r+0x1b0>
   dba60:	230b      	movs	r3, #11
   dba62:	6123      	str	r3, [r4, #16]
   dba64:	6963      	ldr	r3, [r4, #20]
   dba66:	1e5a      	subs	r2, r3, #1
   dba68:	f012 0f03 	tst.w	r2, #3
   dba6c:	6162      	str	r2, [r4, #20]
   dba6e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dba72:	d105      	bne.n	dba80 <localtime_r+0x194>
   dba74:	2164      	movs	r1, #100	; 0x64
   dba76:	fb93 f2f1 	sdiv	r2, r3, r1
   dba7a:	fb01 3212 	mls	r2, r1, r2, r3
   dba7e:	b94a      	cbnz	r2, dba94 <localtime_r+0x1a8>
   dba80:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dba84:	fb93 f2f1 	sdiv	r2, r3, r1
   dba88:	fb01 3312 	mls	r3, r1, r2, r3
   dba8c:	fab3 f383 	clz	r3, r3
   dba90:	095b      	lsrs	r3, r3, #5
   dba92:	e000      	b.n	dba96 <localtime_r+0x1aa>
   dba94:	2301      	movs	r3, #1
   dba96:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dba9a:	61e3      	str	r3, [r4, #28]
   dba9c:	6923      	ldr	r3, [r4, #16]
   dba9e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dbaa2:	60e3      	str	r3, [r4, #12]
   dbaa4:	f000 fab5 	bl	dc012 <__tz_unlock>
   dbaa8:	4620      	mov	r0, r4
   dbaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbaae:	bf00      	nop
   dbab0:	000dd5e4 	.word	0x000dd5e4
   dbab4:	2003e7e8 	.word	0x2003e7e8

000dbab8 <ldiv>:
   dbab8:	2900      	cmp	r1, #0
   dbaba:	b510      	push	{r4, lr}
   dbabc:	fb91 f4f2 	sdiv	r4, r1, r2
   dbac0:	fb02 1314 	mls	r3, r2, r4, r1
   dbac4:	db04      	blt.n	dbad0 <ldiv+0x18>
   dbac6:	2b00      	cmp	r3, #0
   dbac8:	da07      	bge.n	dbada <ldiv+0x22>
   dbaca:	3401      	adds	r4, #1
   dbacc:	1a9b      	subs	r3, r3, r2
   dbace:	e004      	b.n	dbada <ldiv+0x22>
   dbad0:	2b00      	cmp	r3, #0
   dbad2:	bfc4      	itt	gt
   dbad4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   dbad8:	189b      	addgt	r3, r3, r2
   dbada:	6004      	str	r4, [r0, #0]
   dbadc:	6043      	str	r3, [r0, #4]
   dbade:	bd10      	pop	{r4, pc}

000dbae0 <memcpy>:
   dbae0:	b510      	push	{r4, lr}
   dbae2:	1e43      	subs	r3, r0, #1
   dbae4:	440a      	add	r2, r1
   dbae6:	4291      	cmp	r1, r2
   dbae8:	d004      	beq.n	dbaf4 <memcpy+0x14>
   dbaea:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbaee:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbaf2:	e7f8      	b.n	dbae6 <memcpy+0x6>
   dbaf4:	bd10      	pop	{r4, pc}

000dbaf6 <memmove>:
   dbaf6:	4288      	cmp	r0, r1
   dbaf8:	b510      	push	{r4, lr}
   dbafa:	eb01 0302 	add.w	r3, r1, r2
   dbafe:	d801      	bhi.n	dbb04 <memmove+0xe>
   dbb00:	1e42      	subs	r2, r0, #1
   dbb02:	e00b      	b.n	dbb1c <memmove+0x26>
   dbb04:	4298      	cmp	r0, r3
   dbb06:	d2fb      	bcs.n	dbb00 <memmove+0xa>
   dbb08:	1881      	adds	r1, r0, r2
   dbb0a:	1ad2      	subs	r2, r2, r3
   dbb0c:	42d3      	cmn	r3, r2
   dbb0e:	d004      	beq.n	dbb1a <memmove+0x24>
   dbb10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbb14:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dbb18:	e7f8      	b.n	dbb0c <memmove+0x16>
   dbb1a:	bd10      	pop	{r4, pc}
   dbb1c:	4299      	cmp	r1, r3
   dbb1e:	d004      	beq.n	dbb2a <memmove+0x34>
   dbb20:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb24:	f802 4f01 	strb.w	r4, [r2, #1]!
   dbb28:	e7f8      	b.n	dbb1c <memmove+0x26>
   dbb2a:	bd10      	pop	{r4, pc}

000dbb2c <memset>:
   dbb2c:	4402      	add	r2, r0
   dbb2e:	4603      	mov	r3, r0
   dbb30:	4293      	cmp	r3, r2
   dbb32:	d002      	beq.n	dbb3a <memset+0xe>
   dbb34:	f803 1b01 	strb.w	r1, [r3], #1
   dbb38:	e7fa      	b.n	dbb30 <memset+0x4>
   dbb3a:	4770      	bx	lr

000dbb3c <srand>:
   dbb3c:	b538      	push	{r3, r4, r5, lr}
   dbb3e:	4b12      	ldr	r3, [pc, #72]	; (dbb88 <srand+0x4c>)
   dbb40:	681c      	ldr	r4, [r3, #0]
   dbb42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbb44:	4605      	mov	r5, r0
   dbb46:	b9d3      	cbnz	r3, dbb7e <srand+0x42>
   dbb48:	2018      	movs	r0, #24
   dbb4a:	f7fb fac9 	bl	d70e0 <malloc>
   dbb4e:	f243 330e 	movw	r3, #13070	; 0x330e
   dbb52:	63a0      	str	r0, [r4, #56]	; 0x38
   dbb54:	8003      	strh	r3, [r0, #0]
   dbb56:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dbb5a:	8043      	strh	r3, [r0, #2]
   dbb5c:	f241 2334 	movw	r3, #4660	; 0x1234
   dbb60:	8083      	strh	r3, [r0, #4]
   dbb62:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dbb66:	80c3      	strh	r3, [r0, #6]
   dbb68:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dbb6c:	8103      	strh	r3, [r0, #8]
   dbb6e:	2305      	movs	r3, #5
   dbb70:	8143      	strh	r3, [r0, #10]
   dbb72:	230b      	movs	r3, #11
   dbb74:	8183      	strh	r3, [r0, #12]
   dbb76:	2201      	movs	r2, #1
   dbb78:	2300      	movs	r3, #0
   dbb7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbb7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbb80:	2200      	movs	r2, #0
   dbb82:	611d      	str	r5, [r3, #16]
   dbb84:	615a      	str	r2, [r3, #20]
   dbb86:	bd38      	pop	{r3, r4, r5, pc}
   dbb88:	2003e0f4 	.word	0x2003e0f4

000dbb8c <strcmp>:
   dbb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbb90:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbb94:	2a01      	cmp	r2, #1
   dbb96:	bf28      	it	cs
   dbb98:	429a      	cmpcs	r2, r3
   dbb9a:	d0f7      	beq.n	dbb8c <strcmp>
   dbb9c:	1ad0      	subs	r0, r2, r3
   dbb9e:	4770      	bx	lr

000dbba0 <strcpy>:
   dbba0:	4603      	mov	r3, r0
   dbba2:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbba6:	f803 2b01 	strb.w	r2, [r3], #1
   dbbaa:	2a00      	cmp	r2, #0
   dbbac:	d1f9      	bne.n	dbba2 <strcpy+0x2>
   dbbae:	4770      	bx	lr

000dbbb0 <strdup>:
   dbbb0:	4b02      	ldr	r3, [pc, #8]	; (dbbbc <strdup+0xc>)
   dbbb2:	4601      	mov	r1, r0
   dbbb4:	6818      	ldr	r0, [r3, #0]
   dbbb6:	f000 b803 	b.w	dbbc0 <_strdup_r>
   dbbba:	bf00      	nop
   dbbbc:	2003e0f4 	.word	0x2003e0f4

000dbbc0 <_strdup_r>:
   dbbc0:	b570      	push	{r4, r5, r6, lr}
   dbbc2:	4606      	mov	r6, r0
   dbbc4:	4608      	mov	r0, r1
   dbbc6:	460c      	mov	r4, r1
   dbbc8:	f000 f80d 	bl	dbbe6 <strlen>
   dbbcc:	1c45      	adds	r5, r0, #1
   dbbce:	4629      	mov	r1, r5
   dbbd0:	4630      	mov	r0, r6
   dbbd2:	f7fb fac5 	bl	d7160 <_malloc_r>
   dbbd6:	4606      	mov	r6, r0
   dbbd8:	b118      	cbz	r0, dbbe2 <_strdup_r+0x22>
   dbbda:	462a      	mov	r2, r5
   dbbdc:	4621      	mov	r1, r4
   dbbde:	f7ff ff7f 	bl	dbae0 <memcpy>
   dbbe2:	4630      	mov	r0, r6
   dbbe4:	bd70      	pop	{r4, r5, r6, pc}

000dbbe6 <strlen>:
   dbbe6:	4603      	mov	r3, r0
   dbbe8:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbbec:	2a00      	cmp	r2, #0
   dbbee:	d1fb      	bne.n	dbbe8 <strlen+0x2>
   dbbf0:	1a18      	subs	r0, r3, r0
   dbbf2:	3801      	subs	r0, #1
   dbbf4:	4770      	bx	lr
	...

000dbbf8 <strncasecmp>:
   dbbf8:	4b10      	ldr	r3, [pc, #64]	; (dbc3c <strncasecmp+0x44>)
   dbbfa:	b570      	push	{r4, r5, r6, lr}
   dbbfc:	681e      	ldr	r6, [r3, #0]
   dbbfe:	440a      	add	r2, r1
   dbc00:	4291      	cmp	r1, r2
   dbc02:	d017      	beq.n	dbc34 <strncasecmp+0x3c>
   dbc04:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbc08:	18f4      	adds	r4, r6, r3
   dbc0a:	7864      	ldrb	r4, [r4, #1]
   dbc0c:	f004 0403 	and.w	r4, r4, #3
   dbc10:	2c01      	cmp	r4, #1
   dbc12:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbc16:	eb06 0504 	add.w	r5, r6, r4
   dbc1a:	bf08      	it	eq
   dbc1c:	3320      	addeq	r3, #32
   dbc1e:	786d      	ldrb	r5, [r5, #1]
   dbc20:	f005 0503 	and.w	r5, r5, #3
   dbc24:	2d01      	cmp	r5, #1
   dbc26:	bf08      	it	eq
   dbc28:	3420      	addeq	r4, #32
   dbc2a:	1b1b      	subs	r3, r3, r4
   dbc2c:	d103      	bne.n	dbc36 <strncasecmp+0x3e>
   dbc2e:	2c00      	cmp	r4, #0
   dbc30:	d1e6      	bne.n	dbc00 <strncasecmp+0x8>
   dbc32:	e000      	b.n	dbc36 <strncasecmp+0x3e>
   dbc34:	2300      	movs	r3, #0
   dbc36:	4618      	mov	r0, r3
   dbc38:	bd70      	pop	{r4, r5, r6, pc}
   dbc3a:	bf00      	nop
   dbc3c:	2003e090 	.word	0x2003e090

000dbc40 <strncmp>:
   dbc40:	b530      	push	{r4, r5, lr}
   dbc42:	b182      	cbz	r2, dbc66 <strncmp+0x26>
   dbc44:	1e45      	subs	r5, r0, #1
   dbc46:	3901      	subs	r1, #1
   dbc48:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dbc4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbc50:	42a3      	cmp	r3, r4
   dbc52:	d106      	bne.n	dbc62 <strncmp+0x22>
   dbc54:	43ec      	mvns	r4, r5
   dbc56:	4414      	add	r4, r2
   dbc58:	42e0      	cmn	r0, r4
   dbc5a:	d001      	beq.n	dbc60 <strncmp+0x20>
   dbc5c:	2b00      	cmp	r3, #0
   dbc5e:	d1f3      	bne.n	dbc48 <strncmp+0x8>
   dbc60:	461c      	mov	r4, r3
   dbc62:	1b18      	subs	r0, r3, r4
   dbc64:	bd30      	pop	{r4, r5, pc}
   dbc66:	4610      	mov	r0, r2
   dbc68:	bd30      	pop	{r4, r5, pc}

000dbc6a <strncpy>:
   dbc6a:	b510      	push	{r4, lr}
   dbc6c:	4603      	mov	r3, r0
   dbc6e:	b142      	cbz	r2, dbc82 <strncpy+0x18>
   dbc70:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbc74:	f803 4b01 	strb.w	r4, [r3], #1
   dbc78:	3a01      	subs	r2, #1
   dbc7a:	2c00      	cmp	r4, #0
   dbc7c:	d1f7      	bne.n	dbc6e <strncpy+0x4>
   dbc7e:	441a      	add	r2, r3
   dbc80:	e000      	b.n	dbc84 <strncpy+0x1a>
   dbc82:	bd10      	pop	{r4, pc}
   dbc84:	4293      	cmp	r3, r2
   dbc86:	d002      	beq.n	dbc8e <strncpy+0x24>
   dbc88:	f803 4b01 	strb.w	r4, [r3], #1
   dbc8c:	e7fa      	b.n	dbc84 <strncpy+0x1a>
   dbc8e:	bd10      	pop	{r4, pc}

000dbc90 <_strtol_r>:
   dbc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbc94:	4680      	mov	r8, r0
   dbc96:	4840      	ldr	r0, [pc, #256]	; (dbd98 <_strtol_r+0x108>)
   dbc98:	f8d0 9000 	ldr.w	r9, [r0]
   dbc9c:	460f      	mov	r7, r1
   dbc9e:	463d      	mov	r5, r7
   dbca0:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbca4:	eb09 0004 	add.w	r0, r9, r4
   dbca8:	7840      	ldrb	r0, [r0, #1]
   dbcaa:	f000 0008 	and.w	r0, r0, #8
   dbcae:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dbcb2:	b108      	cbz	r0, dbcb8 <_strtol_r+0x28>
   dbcb4:	462f      	mov	r7, r5
   dbcb6:	e7f2      	b.n	dbc9e <_strtol_r+0xe>
   dbcb8:	2c2d      	cmp	r4, #45	; 0x2d
   dbcba:	d103      	bne.n	dbcc4 <_strtol_r+0x34>
   dbcbc:	1cbd      	adds	r5, r7, #2
   dbcbe:	787c      	ldrb	r4, [r7, #1]
   dbcc0:	2601      	movs	r6, #1
   dbcc2:	e003      	b.n	dbccc <_strtol_r+0x3c>
   dbcc4:	2c2b      	cmp	r4, #43	; 0x2b
   dbcc6:	bf04      	itt	eq
   dbcc8:	787c      	ldrbeq	r4, [r7, #1]
   dbcca:	1cbd      	addeq	r5, r7, #2
   dbccc:	b113      	cbz	r3, dbcd4 <_strtol_r+0x44>
   dbcce:	2b10      	cmp	r3, #16
   dbcd0:	d10a      	bne.n	dbce8 <_strtol_r+0x58>
   dbcd2:	e05b      	b.n	dbd8c <_strtol_r+0xfc>
   dbcd4:	2c30      	cmp	r4, #48	; 0x30
   dbcd6:	d157      	bne.n	dbd88 <_strtol_r+0xf8>
   dbcd8:	7828      	ldrb	r0, [r5, #0]
   dbcda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbcde:	2858      	cmp	r0, #88	; 0x58
   dbce0:	d14d      	bne.n	dbd7e <_strtol_r+0xee>
   dbce2:	786c      	ldrb	r4, [r5, #1]
   dbce4:	2310      	movs	r3, #16
   dbce6:	3502      	adds	r5, #2
   dbce8:	2e00      	cmp	r6, #0
   dbcea:	bf14      	ite	ne
   dbcec:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbcf0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbcf4:	2700      	movs	r7, #0
   dbcf6:	fbbc faf3 	udiv	sl, ip, r3
   dbcfa:	4638      	mov	r0, r7
   dbcfc:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbd00:	eb09 0e04 	add.w	lr, r9, r4
   dbd04:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbd08:	f01e 0f04 	tst.w	lr, #4
   dbd0c:	d001      	beq.n	dbd12 <_strtol_r+0x82>
   dbd0e:	3c30      	subs	r4, #48	; 0x30
   dbd10:	e00b      	b.n	dbd2a <_strtol_r+0x9a>
   dbd12:	f01e 0e03 	ands.w	lr, lr, #3
   dbd16:	d01b      	beq.n	dbd50 <_strtol_r+0xc0>
   dbd18:	f1be 0f01 	cmp.w	lr, #1
   dbd1c:	bf0c      	ite	eq
   dbd1e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbd22:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbd26:	ebce 0404 	rsb	r4, lr, r4
   dbd2a:	42a3      	cmp	r3, r4
   dbd2c:	dd10      	ble.n	dbd50 <_strtol_r+0xc0>
   dbd2e:	f1b7 3fff 	cmp.w	r7, #4294967295
   dbd32:	d00a      	beq.n	dbd4a <_strtol_r+0xba>
   dbd34:	4550      	cmp	r0, sl
   dbd36:	d806      	bhi.n	dbd46 <_strtol_r+0xb6>
   dbd38:	d101      	bne.n	dbd3e <_strtol_r+0xae>
   dbd3a:	4564      	cmp	r4, ip
   dbd3c:	dc03      	bgt.n	dbd46 <_strtol_r+0xb6>
   dbd3e:	fb03 4000 	mla	r0, r3, r0, r4
   dbd42:	2701      	movs	r7, #1
   dbd44:	e001      	b.n	dbd4a <_strtol_r+0xba>
   dbd46:	f04f 37ff 	mov.w	r7, #4294967295
   dbd4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbd4e:	e7d7      	b.n	dbd00 <_strtol_r+0x70>
   dbd50:	1c7b      	adds	r3, r7, #1
   dbd52:	d10c      	bne.n	dbd6e <_strtol_r+0xde>
   dbd54:	2e00      	cmp	r6, #0
   dbd56:	f04f 0322 	mov.w	r3, #34	; 0x22
   dbd5a:	bf14      	ite	ne
   dbd5c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dbd60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbd64:	f8c8 3000 	str.w	r3, [r8]
   dbd68:	b92a      	cbnz	r2, dbd76 <_strtol_r+0xe6>
   dbd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd6e:	b106      	cbz	r6, dbd72 <_strtol_r+0xe2>
   dbd70:	4240      	negs	r0, r0
   dbd72:	b172      	cbz	r2, dbd92 <_strtol_r+0x102>
   dbd74:	b107      	cbz	r7, dbd78 <_strtol_r+0xe8>
   dbd76:	1e69      	subs	r1, r5, #1
   dbd78:	6011      	str	r1, [r2, #0]
   dbd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd7e:	2430      	movs	r4, #48	; 0x30
   dbd80:	2b00      	cmp	r3, #0
   dbd82:	d1b1      	bne.n	dbce8 <_strtol_r+0x58>
   dbd84:	2308      	movs	r3, #8
   dbd86:	e7af      	b.n	dbce8 <_strtol_r+0x58>
   dbd88:	230a      	movs	r3, #10
   dbd8a:	e7ad      	b.n	dbce8 <_strtol_r+0x58>
   dbd8c:	2c30      	cmp	r4, #48	; 0x30
   dbd8e:	d0a3      	beq.n	dbcd8 <_strtol_r+0x48>
   dbd90:	e7aa      	b.n	dbce8 <_strtol_r+0x58>
   dbd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd96:	bf00      	nop
   dbd98:	2003e090 	.word	0x2003e090

000dbd9c <strtol>:
   dbd9c:	4613      	mov	r3, r2
   dbd9e:	460a      	mov	r2, r1
   dbda0:	4601      	mov	r1, r0
   dbda2:	4802      	ldr	r0, [pc, #8]	; (dbdac <strtol+0x10>)
   dbda4:	6800      	ldr	r0, [r0, #0]
   dbda6:	f7ff bf73 	b.w	dbc90 <_strtol_r>
   dbdaa:	bf00      	nop
   dbdac:	2003e0f4 	.word	0x2003e0f4

000dbdb0 <_strtoul_r>:
   dbdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbdb4:	4680      	mov	r8, r0
   dbdb6:	483c      	ldr	r0, [pc, #240]	; (dbea8 <_strtoul_r+0xf8>)
   dbdb8:	f8d0 9000 	ldr.w	r9, [r0]
   dbdbc:	460e      	mov	r6, r1
   dbdbe:	4635      	mov	r5, r6
   dbdc0:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbdc4:	eb09 0004 	add.w	r0, r9, r4
   dbdc8:	7840      	ldrb	r0, [r0, #1]
   dbdca:	f000 0008 	and.w	r0, r0, #8
   dbdce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dbdd2:	b108      	cbz	r0, dbdd8 <_strtoul_r+0x28>
   dbdd4:	462e      	mov	r6, r5
   dbdd6:	e7f2      	b.n	dbdbe <_strtoul_r+0xe>
   dbdd8:	2c2d      	cmp	r4, #45	; 0x2d
   dbdda:	d103      	bne.n	dbde4 <_strtoul_r+0x34>
   dbddc:	1cb5      	adds	r5, r6, #2
   dbdde:	7874      	ldrb	r4, [r6, #1]
   dbde0:	2701      	movs	r7, #1
   dbde2:	e003      	b.n	dbdec <_strtoul_r+0x3c>
   dbde4:	2c2b      	cmp	r4, #43	; 0x2b
   dbde6:	bf04      	itt	eq
   dbde8:	7874      	ldrbeq	r4, [r6, #1]
   dbdea:	1cb5      	addeq	r5, r6, #2
   dbdec:	b113      	cbz	r3, dbdf4 <_strtoul_r+0x44>
   dbdee:	2b10      	cmp	r3, #16
   dbdf0:	d10a      	bne.n	dbe08 <_strtoul_r+0x58>
   dbdf2:	e053      	b.n	dbe9c <_strtoul_r+0xec>
   dbdf4:	2c30      	cmp	r4, #48	; 0x30
   dbdf6:	d14f      	bne.n	dbe98 <_strtoul_r+0xe8>
   dbdf8:	7828      	ldrb	r0, [r5, #0]
   dbdfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbdfe:	2858      	cmp	r0, #88	; 0x58
   dbe00:	d145      	bne.n	dbe8e <_strtoul_r+0xde>
   dbe02:	786c      	ldrb	r4, [r5, #1]
   dbe04:	2310      	movs	r3, #16
   dbe06:	3502      	adds	r5, #2
   dbe08:	f04f 3cff 	mov.w	ip, #4294967295
   dbe0c:	2600      	movs	r6, #0
   dbe0e:	fbbc fcf3 	udiv	ip, ip, r3
   dbe12:	fb03 fa0c 	mul.w	sl, r3, ip
   dbe16:	ea6f 0a0a 	mvn.w	sl, sl
   dbe1a:	4630      	mov	r0, r6
   dbe1c:	eb09 0e04 	add.w	lr, r9, r4
   dbe20:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbe24:	f01e 0f04 	tst.w	lr, #4
   dbe28:	d001      	beq.n	dbe2e <_strtoul_r+0x7e>
   dbe2a:	3c30      	subs	r4, #48	; 0x30
   dbe2c:	e00b      	b.n	dbe46 <_strtoul_r+0x96>
   dbe2e:	f01e 0e03 	ands.w	lr, lr, #3
   dbe32:	d01a      	beq.n	dbe6a <_strtoul_r+0xba>
   dbe34:	f1be 0f01 	cmp.w	lr, #1
   dbe38:	bf0c      	ite	eq
   dbe3a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbe3e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbe42:	ebce 0404 	rsb	r4, lr, r4
   dbe46:	42a3      	cmp	r3, r4
   dbe48:	dd0f      	ble.n	dbe6a <_strtoul_r+0xba>
   dbe4a:	2e00      	cmp	r6, #0
   dbe4c:	db08      	blt.n	dbe60 <_strtoul_r+0xb0>
   dbe4e:	4560      	cmp	r0, ip
   dbe50:	d806      	bhi.n	dbe60 <_strtoul_r+0xb0>
   dbe52:	d101      	bne.n	dbe58 <_strtoul_r+0xa8>
   dbe54:	4554      	cmp	r4, sl
   dbe56:	dc03      	bgt.n	dbe60 <_strtoul_r+0xb0>
   dbe58:	fb03 4000 	mla	r0, r3, r0, r4
   dbe5c:	2601      	movs	r6, #1
   dbe5e:	e001      	b.n	dbe64 <_strtoul_r+0xb4>
   dbe60:	f04f 36ff 	mov.w	r6, #4294967295
   dbe64:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbe68:	e7d8      	b.n	dbe1c <_strtoul_r+0x6c>
   dbe6a:	2e00      	cmp	r6, #0
   dbe6c:	da07      	bge.n	dbe7e <_strtoul_r+0xce>
   dbe6e:	2322      	movs	r3, #34	; 0x22
   dbe70:	f8c8 3000 	str.w	r3, [r8]
   dbe74:	f04f 30ff 	mov.w	r0, #4294967295
   dbe78:	b92a      	cbnz	r2, dbe86 <_strtoul_r+0xd6>
   dbe7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbe7e:	b107      	cbz	r7, dbe82 <_strtoul_r+0xd2>
   dbe80:	4240      	negs	r0, r0
   dbe82:	b172      	cbz	r2, dbea2 <_strtoul_r+0xf2>
   dbe84:	b106      	cbz	r6, dbe88 <_strtoul_r+0xd8>
   dbe86:	1e69      	subs	r1, r5, #1
   dbe88:	6011      	str	r1, [r2, #0]
   dbe8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbe8e:	2430      	movs	r4, #48	; 0x30
   dbe90:	2b00      	cmp	r3, #0
   dbe92:	d1b9      	bne.n	dbe08 <_strtoul_r+0x58>
   dbe94:	2308      	movs	r3, #8
   dbe96:	e7b7      	b.n	dbe08 <_strtoul_r+0x58>
   dbe98:	230a      	movs	r3, #10
   dbe9a:	e7b5      	b.n	dbe08 <_strtoul_r+0x58>
   dbe9c:	2c30      	cmp	r4, #48	; 0x30
   dbe9e:	d0ab      	beq.n	dbdf8 <_strtoul_r+0x48>
   dbea0:	e7b2      	b.n	dbe08 <_strtoul_r+0x58>
   dbea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbea6:	bf00      	nop
   dbea8:	2003e090 	.word	0x2003e090

000dbeac <strtoul>:
   dbeac:	4613      	mov	r3, r2
   dbeae:	460a      	mov	r2, r1
   dbeb0:	4601      	mov	r1, r0
   dbeb2:	4802      	ldr	r0, [pc, #8]	; (dbebc <strtoul+0x10>)
   dbeb4:	6800      	ldr	r0, [r0, #0]
   dbeb6:	f7ff bf7b 	b.w	dbdb0 <_strtoul_r>
   dbeba:	bf00      	nop
   dbebc:	2003e0f4 	.word	0x2003e0f4

000dbec0 <__tzcalc_limits>:
   dbec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbec4:	4604      	mov	r4, r0
   dbec6:	f000 fa6f 	bl	dc3a8 <__gettzinfo>
   dbeca:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbece:	429c      	cmp	r4, r3
   dbed0:	f340 8096 	ble.w	dc000 <__tzcalc_limits+0x140>
   dbed4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbed8:	18e3      	adds	r3, r4, r3
   dbeda:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbede:	109b      	asrs	r3, r3, #2
   dbee0:	f240 156d 	movw	r5, #365	; 0x16d
   dbee4:	fb05 3502 	mla	r5, r5, r2, r3
   dbee8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbeec:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbef0:	fb92 f3f3 	sdiv	r3, r2, r3
   dbef4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbef8:	442b      	add	r3, r5
   dbefa:	18a5      	adds	r5, r4, r2
   dbefc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbf00:	fb95 f5f2 	sdiv	r5, r5, r2
   dbf04:	441d      	add	r5, r3
   dbf06:	2364      	movs	r3, #100	; 0x64
   dbf08:	fb94 f7f2 	sdiv	r7, r4, r2
   dbf0c:	fb94 f6f3 	sdiv	r6, r4, r3
   dbf10:	fb02 4717 	mls	r7, r2, r7, r4
   dbf14:	fb03 4616 	mls	r6, r3, r6, r4
   dbf18:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbf1c:	fab7 fe87 	clz	lr, r7
   dbf20:	9301      	str	r3, [sp, #4]
   dbf22:	f004 0303 	and.w	r3, r4, #3
   dbf26:	6044      	str	r4, [r0, #4]
   dbf28:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbf2c:	4601      	mov	r1, r0
   dbf2e:	9300      	str	r3, [sp, #0]
   dbf30:	f04f 0c07 	mov.w	ip, #7
   dbf34:	7a0b      	ldrb	r3, [r1, #8]
   dbf36:	2b4a      	cmp	r3, #74	; 0x4a
   dbf38:	d10e      	bne.n	dbf58 <__tzcalc_limits+0x98>
   dbf3a:	694b      	ldr	r3, [r1, #20]
   dbf3c:	9a00      	ldr	r2, [sp, #0]
   dbf3e:	18ec      	adds	r4, r5, r3
   dbf40:	b902      	cbnz	r2, dbf44 <__tzcalc_limits+0x84>
   dbf42:	b906      	cbnz	r6, dbf46 <__tzcalc_limits+0x86>
   dbf44:	b927      	cbnz	r7, dbf50 <__tzcalc_limits+0x90>
   dbf46:	2b3b      	cmp	r3, #59	; 0x3b
   dbf48:	bfd4      	ite	le
   dbf4a:	2300      	movle	r3, #0
   dbf4c:	2301      	movgt	r3, #1
   dbf4e:	e000      	b.n	dbf52 <__tzcalc_limits+0x92>
   dbf50:	2300      	movs	r3, #0
   dbf52:	4423      	add	r3, r4
   dbf54:	3b01      	subs	r3, #1
   dbf56:	e03f      	b.n	dbfd8 <__tzcalc_limits+0x118>
   dbf58:	2b44      	cmp	r3, #68	; 0x44
   dbf5a:	d102      	bne.n	dbf62 <__tzcalc_limits+0xa2>
   dbf5c:	694b      	ldr	r3, [r1, #20]
   dbf5e:	442b      	add	r3, r5
   dbf60:	e03a      	b.n	dbfd8 <__tzcalc_limits+0x118>
   dbf62:	9b00      	ldr	r3, [sp, #0]
   dbf64:	b92b      	cbnz	r3, dbf72 <__tzcalc_limits+0xb2>
   dbf66:	2e00      	cmp	r6, #0
   dbf68:	bf0c      	ite	eq
   dbf6a:	46f0      	moveq	r8, lr
   dbf6c:	f04f 0801 	movne.w	r8, #1
   dbf70:	e000      	b.n	dbf74 <__tzcalc_limits+0xb4>
   dbf72:	46f0      	mov	r8, lr
   dbf74:	4b24      	ldr	r3, [pc, #144]	; (dc008 <__tzcalc_limits+0x148>)
   dbf76:	68cc      	ldr	r4, [r1, #12]
   dbf78:	2230      	movs	r2, #48	; 0x30
   dbf7a:	fb02 3808 	mla	r8, r2, r8, r3
   dbf7e:	f1a8 0a04 	sub.w	sl, r8, #4
   dbf82:	46a9      	mov	r9, r5
   dbf84:	2301      	movs	r3, #1
   dbf86:	42a3      	cmp	r3, r4
   dbf88:	da04      	bge.n	dbf94 <__tzcalc_limits+0xd4>
   dbf8a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbf8e:	3301      	adds	r3, #1
   dbf90:	44d9      	add	r9, fp
   dbf92:	e7f8      	b.n	dbf86 <__tzcalc_limits+0xc6>
   dbf94:	f109 0304 	add.w	r3, r9, #4
   dbf98:	fb93 fbfc 	sdiv	fp, r3, ip
   dbf9c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbfa0:	2c01      	cmp	r4, #1
   dbfa2:	ebca 0a03 	rsb	sl, sl, r3
   dbfa6:	694b      	ldr	r3, [r1, #20]
   dbfa8:	bfb8      	it	lt
   dbfaa:	2401      	movlt	r4, #1
   dbfac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbfb0:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbfb4:	690b      	ldr	r3, [r1, #16]
   dbfb6:	f104 34ff 	add.w	r4, r4, #4294967295
   dbfba:	f103 33ff 	add.w	r3, r3, #4294967295
   dbfbe:	bf48      	it	mi
   dbfc0:	f10a 0a07 	addmi.w	sl, sl, #7
   dbfc4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbfc8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbfcc:	4453      	add	r3, sl
   dbfce:	42a3      	cmp	r3, r4
   dbfd0:	db01      	blt.n	dbfd6 <__tzcalc_limits+0x116>
   dbfd2:	3b07      	subs	r3, #7
   dbfd4:	e7fb      	b.n	dbfce <__tzcalc_limits+0x10e>
   dbfd6:	444b      	add	r3, r9
   dbfd8:	698c      	ldr	r4, [r1, #24]
   dbfda:	4a0c      	ldr	r2, [pc, #48]	; (dc00c <__tzcalc_limits+0x14c>)
   dbfdc:	fb02 4303 	mla	r3, r2, r3, r4
   dbfe0:	6a0c      	ldr	r4, [r1, #32]
   dbfe2:	4423      	add	r3, r4
   dbfe4:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbfe8:	9b01      	ldr	r3, [sp, #4]
   dbfea:	4299      	cmp	r1, r3
   dbfec:	d1a2      	bne.n	dbf34 <__tzcalc_limits+0x74>
   dbfee:	69c3      	ldr	r3, [r0, #28]
   dbff0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbff2:	4293      	cmp	r3, r2
   dbff4:	bfac      	ite	ge
   dbff6:	2300      	movge	r3, #0
   dbff8:	2301      	movlt	r3, #1
   dbffa:	6003      	str	r3, [r0, #0]
   dbffc:	2001      	movs	r0, #1
   dbffe:	e000      	b.n	dc002 <__tzcalc_limits+0x142>
   dc000:	2000      	movs	r0, #0
   dc002:	b003      	add	sp, #12
   dc004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc008:	000dd5e4 	.word	0x000dd5e4
   dc00c:	00015180 	.word	0x00015180

000dc010 <__tz_lock>:
   dc010:	4770      	bx	lr

000dc012 <__tz_unlock>:
   dc012:	4770      	bx	lr

000dc014 <_tzset_unlocked>:
   dc014:	4b01      	ldr	r3, [pc, #4]	; (dc01c <_tzset_unlocked+0x8>)
   dc016:	6818      	ldr	r0, [r3, #0]
   dc018:	f000 b802 	b.w	dc020 <_tzset_unlocked_r>
   dc01c:	2003e0f4 	.word	0x2003e0f4

000dc020 <_tzset_unlocked_r>:
   dc020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc024:	b08d      	sub	sp, #52	; 0x34
   dc026:	4607      	mov	r7, r0
   dc028:	f000 f9be 	bl	dc3a8 <__gettzinfo>
   dc02c:	49b0      	ldr	r1, [pc, #704]	; (dc2f0 <_tzset_unlocked_r+0x2d0>)
   dc02e:	4eb1      	ldr	r6, [pc, #708]	; (dc2f4 <_tzset_unlocked_r+0x2d4>)
   dc030:	4604      	mov	r4, r0
   dc032:	4638      	mov	r0, r7
   dc034:	f000 f9b0 	bl	dc398 <_getenv_r>
   dc038:	4605      	mov	r5, r0
   dc03a:	b960      	cbnz	r0, dc056 <_tzset_unlocked_r+0x36>
   dc03c:	4bae      	ldr	r3, [pc, #696]	; (dc2f8 <_tzset_unlocked_r+0x2d8>)
   dc03e:	4aaf      	ldr	r2, [pc, #700]	; (dc2fc <_tzset_unlocked_r+0x2dc>)
   dc040:	6018      	str	r0, [r3, #0]
   dc042:	4baf      	ldr	r3, [pc, #700]	; (dc300 <_tzset_unlocked_r+0x2e0>)
   dc044:	6018      	str	r0, [r3, #0]
   dc046:	4baf      	ldr	r3, [pc, #700]	; (dc304 <_tzset_unlocked_r+0x2e4>)
   dc048:	6830      	ldr	r0, [r6, #0]
   dc04a:	601a      	str	r2, [r3, #0]
   dc04c:	605a      	str	r2, [r3, #4]
   dc04e:	f7fb f84f 	bl	d70f0 <free>
   dc052:	6035      	str	r5, [r6, #0]
   dc054:	e148      	b.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc056:	6831      	ldr	r1, [r6, #0]
   dc058:	b979      	cbnz	r1, dc07a <_tzset_unlocked_r+0x5a>
   dc05a:	6830      	ldr	r0, [r6, #0]
   dc05c:	f7fb f848 	bl	d70f0 <free>
   dc060:	4628      	mov	r0, r5
   dc062:	f7ff fdc0 	bl	dbbe6 <strlen>
   dc066:	1c41      	adds	r1, r0, #1
   dc068:	4638      	mov	r0, r7
   dc06a:	f7fb f879 	bl	d7160 <_malloc_r>
   dc06e:	6030      	str	r0, [r6, #0]
   dc070:	b148      	cbz	r0, dc086 <_tzset_unlocked_r+0x66>
   dc072:	4629      	mov	r1, r5
   dc074:	f7ff fd94 	bl	dbba0 <strcpy>
   dc078:	e005      	b.n	dc086 <_tzset_unlocked_r+0x66>
   dc07a:	f7ff fd87 	bl	dbb8c <strcmp>
   dc07e:	2800      	cmp	r0, #0
   dc080:	f000 8132 	beq.w	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc084:	e7e9      	b.n	dc05a <_tzset_unlocked_r+0x3a>
   dc086:	782b      	ldrb	r3, [r5, #0]
   dc088:	4a9f      	ldr	r2, [pc, #636]	; (dc308 <_tzset_unlocked_r+0x2e8>)
   dc08a:	49a0      	ldr	r1, [pc, #640]	; (dc30c <_tzset_unlocked_r+0x2ec>)
   dc08c:	2b3a      	cmp	r3, #58	; 0x3a
   dc08e:	bf08      	it	eq
   dc090:	3501      	addeq	r5, #1
   dc092:	ae0a      	add	r6, sp, #40	; 0x28
   dc094:	4633      	mov	r3, r6
   dc096:	4628      	mov	r0, r5
   dc098:	f7fb f84a 	bl	d7130 <siscanf>
   dc09c:	2800      	cmp	r0, #0
   dc09e:	f340 8123 	ble.w	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc0a4:	18ef      	adds	r7, r5, r3
   dc0a6:	5ceb      	ldrb	r3, [r5, r3]
   dc0a8:	2b2d      	cmp	r3, #45	; 0x2d
   dc0aa:	d103      	bne.n	dc0b4 <_tzset_unlocked_r+0x94>
   dc0ac:	3701      	adds	r7, #1
   dc0ae:	f04f 35ff 	mov.w	r5, #4294967295
   dc0b2:	e003      	b.n	dc0bc <_tzset_unlocked_r+0x9c>
   dc0b4:	2b2b      	cmp	r3, #43	; 0x2b
   dc0b6:	bf08      	it	eq
   dc0b8:	3701      	addeq	r7, #1
   dc0ba:	2501      	movs	r5, #1
   dc0bc:	f10d 0a20 	add.w	sl, sp, #32
   dc0c0:	f10d 0b1e 	add.w	fp, sp, #30
   dc0c4:	f04f 0800 	mov.w	r8, #0
   dc0c8:	9603      	str	r6, [sp, #12]
   dc0ca:	f8cd a008 	str.w	sl, [sp, #8]
   dc0ce:	9601      	str	r6, [sp, #4]
   dc0d0:	f8cd b000 	str.w	fp, [sp]
   dc0d4:	4633      	mov	r3, r6
   dc0d6:	aa07      	add	r2, sp, #28
   dc0d8:	498d      	ldr	r1, [pc, #564]	; (dc310 <_tzset_unlocked_r+0x2f0>)
   dc0da:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc0de:	4638      	mov	r0, r7
   dc0e0:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc0e4:	f7fb f824 	bl	d7130 <siscanf>
   dc0e8:	4540      	cmp	r0, r8
   dc0ea:	f340 80fd 	ble.w	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc0ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc0f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc0f6:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc31c <_tzset_unlocked_r+0x2fc>
   dc0fa:	213c      	movs	r1, #60	; 0x3c
   dc0fc:	fb01 3302 	mla	r3, r1, r2, r3
   dc100:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc104:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc108:	fb01 3302 	mla	r3, r1, r2, r3
   dc10c:	435d      	muls	r5, r3
   dc10e:	6225      	str	r5, [r4, #32]
   dc110:	4d7c      	ldr	r5, [pc, #496]	; (dc304 <_tzset_unlocked_r+0x2e4>)
   dc112:	4b7d      	ldr	r3, [pc, #500]	; (dc308 <_tzset_unlocked_r+0x2e8>)
   dc114:	602b      	str	r3, [r5, #0]
   dc116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc118:	497c      	ldr	r1, [pc, #496]	; (dc30c <_tzset_unlocked_r+0x2ec>)
   dc11a:	441f      	add	r7, r3
   dc11c:	464a      	mov	r2, r9
   dc11e:	4633      	mov	r3, r6
   dc120:	4638      	mov	r0, r7
   dc122:	f7fb f805 	bl	d7130 <siscanf>
   dc126:	4540      	cmp	r0, r8
   dc128:	dc08      	bgt.n	dc13c <_tzset_unlocked_r+0x11c>
   dc12a:	682b      	ldr	r3, [r5, #0]
   dc12c:	606b      	str	r3, [r5, #4]
   dc12e:	4b72      	ldr	r3, [pc, #456]	; (dc2f8 <_tzset_unlocked_r+0x2d8>)
   dc130:	6a22      	ldr	r2, [r4, #32]
   dc132:	601a      	str	r2, [r3, #0]
   dc134:	4b72      	ldr	r3, [pc, #456]	; (dc300 <_tzset_unlocked_r+0x2e0>)
   dc136:	f8c3 8000 	str.w	r8, [r3]
   dc13a:	e0d5      	b.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc13e:	f8c5 9004 	str.w	r9, [r5, #4]
   dc142:	18fd      	adds	r5, r7, r3
   dc144:	5cfb      	ldrb	r3, [r7, r3]
   dc146:	2b2d      	cmp	r3, #45	; 0x2d
   dc148:	d103      	bne.n	dc152 <_tzset_unlocked_r+0x132>
   dc14a:	3501      	adds	r5, #1
   dc14c:	f04f 37ff 	mov.w	r7, #4294967295
   dc150:	e003      	b.n	dc15a <_tzset_unlocked_r+0x13a>
   dc152:	2b2b      	cmp	r3, #43	; 0x2b
   dc154:	bf08      	it	eq
   dc156:	3501      	addeq	r5, #1
   dc158:	2701      	movs	r7, #1
   dc15a:	2300      	movs	r3, #0
   dc15c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc160:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc164:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc168:	930a      	str	r3, [sp, #40]	; 0x28
   dc16a:	9603      	str	r6, [sp, #12]
   dc16c:	f8cd a008 	str.w	sl, [sp, #8]
   dc170:	9601      	str	r6, [sp, #4]
   dc172:	f8cd b000 	str.w	fp, [sp]
   dc176:	4633      	mov	r3, r6
   dc178:	aa07      	add	r2, sp, #28
   dc17a:	4965      	ldr	r1, [pc, #404]	; (dc310 <_tzset_unlocked_r+0x2f0>)
   dc17c:	4628      	mov	r0, r5
   dc17e:	f7fa ffd7 	bl	d7130 <siscanf>
   dc182:	2800      	cmp	r0, #0
   dc184:	dc04      	bgt.n	dc190 <_tzset_unlocked_r+0x170>
   dc186:	6a23      	ldr	r3, [r4, #32]
   dc188:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc18c:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc18e:	e00e      	b.n	dc1ae <_tzset_unlocked_r+0x18e>
   dc190:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc194:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc198:	213c      	movs	r1, #60	; 0x3c
   dc19a:	fb01 3302 	mla	r3, r1, r2, r3
   dc19e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc1a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc1a6:	fb01 3302 	mla	r3, r1, r2, r3
   dc1aa:	435f      	muls	r7, r3
   dc1ac:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc1b0:	4627      	mov	r7, r4
   dc1b2:	441d      	add	r5, r3
   dc1b4:	f04f 0900 	mov.w	r9, #0
   dc1b8:	782b      	ldrb	r3, [r5, #0]
   dc1ba:	2b2c      	cmp	r3, #44	; 0x2c
   dc1bc:	bf08      	it	eq
   dc1be:	3501      	addeq	r5, #1
   dc1c0:	f895 8000 	ldrb.w	r8, [r5]
   dc1c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc1c8:	d126      	bne.n	dc218 <_tzset_unlocked_r+0x1f8>
   dc1ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc1ce:	9302      	str	r3, [sp, #8]
   dc1d0:	ab09      	add	r3, sp, #36	; 0x24
   dc1d2:	9300      	str	r3, [sp, #0]
   dc1d4:	9603      	str	r6, [sp, #12]
   dc1d6:	9601      	str	r6, [sp, #4]
   dc1d8:	4633      	mov	r3, r6
   dc1da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc1de:	494d      	ldr	r1, [pc, #308]	; (dc314 <_tzset_unlocked_r+0x2f4>)
   dc1e0:	4628      	mov	r0, r5
   dc1e2:	f7fa ffa5 	bl	d7130 <siscanf>
   dc1e6:	2803      	cmp	r0, #3
   dc1e8:	d17e      	bne.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc1ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc1ee:	1e4b      	subs	r3, r1, #1
   dc1f0:	2b0b      	cmp	r3, #11
   dc1f2:	d879      	bhi.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc1f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc1f8:	1e53      	subs	r3, r2, #1
   dc1fa:	2b04      	cmp	r3, #4
   dc1fc:	d874      	bhi.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc1fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc202:	2b06      	cmp	r3, #6
   dc204:	d870      	bhi.n	dc2e8 <_tzset_unlocked_r+0x2c8>
   dc206:	f887 8008 	strb.w	r8, [r7, #8]
   dc20a:	60f9      	str	r1, [r7, #12]
   dc20c:	613a      	str	r2, [r7, #16]
   dc20e:	617b      	str	r3, [r7, #20]
   dc210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc212:	eb05 0803 	add.w	r8, r5, r3
   dc216:	e02a      	b.n	dc26e <_tzset_unlocked_r+0x24e>
   dc218:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc21c:	bf06      	itte	eq
   dc21e:	3501      	addeq	r5, #1
   dc220:	4643      	moveq	r3, r8
   dc222:	2344      	movne	r3, #68	; 0x44
   dc224:	220a      	movs	r2, #10
   dc226:	a90b      	add	r1, sp, #44	; 0x2c
   dc228:	4628      	mov	r0, r5
   dc22a:	9305      	str	r3, [sp, #20]
   dc22c:	f7ff fe3e 	bl	dbeac <strtoul>
   dc230:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc234:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc238:	4545      	cmp	r5, r8
   dc23a:	9b05      	ldr	r3, [sp, #20]
   dc23c:	d114      	bne.n	dc268 <_tzset_unlocked_r+0x248>
   dc23e:	234d      	movs	r3, #77	; 0x4d
   dc240:	f1b9 0f00 	cmp.w	r9, #0
   dc244:	d107      	bne.n	dc256 <_tzset_unlocked_r+0x236>
   dc246:	7223      	strb	r3, [r4, #8]
   dc248:	2303      	movs	r3, #3
   dc24a:	60e3      	str	r3, [r4, #12]
   dc24c:	2302      	movs	r3, #2
   dc24e:	6123      	str	r3, [r4, #16]
   dc250:	f8c4 9014 	str.w	r9, [r4, #20]
   dc254:	e00b      	b.n	dc26e <_tzset_unlocked_r+0x24e>
   dc256:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc25a:	230b      	movs	r3, #11
   dc25c:	62a3      	str	r3, [r4, #40]	; 0x28
   dc25e:	2301      	movs	r3, #1
   dc260:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc262:	2300      	movs	r3, #0
   dc264:	6323      	str	r3, [r4, #48]	; 0x30
   dc266:	e002      	b.n	dc26e <_tzset_unlocked_r+0x24e>
   dc268:	b280      	uxth	r0, r0
   dc26a:	723b      	strb	r3, [r7, #8]
   dc26c:	6178      	str	r0, [r7, #20]
   dc26e:	2302      	movs	r3, #2
   dc270:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc274:	2300      	movs	r3, #0
   dc276:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc27a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc27e:	930a      	str	r3, [sp, #40]	; 0x28
   dc280:	f898 3000 	ldrb.w	r3, [r8]
   dc284:	2b2f      	cmp	r3, #47	; 0x2f
   dc286:	d10b      	bne.n	dc2a0 <_tzset_unlocked_r+0x280>
   dc288:	9603      	str	r6, [sp, #12]
   dc28a:	f8cd a008 	str.w	sl, [sp, #8]
   dc28e:	9601      	str	r6, [sp, #4]
   dc290:	f8cd b000 	str.w	fp, [sp]
   dc294:	4633      	mov	r3, r6
   dc296:	aa07      	add	r2, sp, #28
   dc298:	491f      	ldr	r1, [pc, #124]	; (dc318 <_tzset_unlocked_r+0x2f8>)
   dc29a:	4640      	mov	r0, r8
   dc29c:	f7fa ff48 	bl	d7130 <siscanf>
   dc2a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc2a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc2a8:	213c      	movs	r1, #60	; 0x3c
   dc2aa:	fb01 3302 	mla	r3, r1, r2, r3
   dc2ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc2b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc2b6:	fb01 3302 	mla	r3, r1, r2, r3
   dc2ba:	61bb      	str	r3, [r7, #24]
   dc2bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc2be:	f109 0901 	add.w	r9, r9, #1
   dc2c2:	f1b9 0f02 	cmp.w	r9, #2
   dc2c6:	4445      	add	r5, r8
   dc2c8:	f107 071c 	add.w	r7, r7, #28
   dc2cc:	f47f af74 	bne.w	dc1b8 <_tzset_unlocked_r+0x198>
   dc2d0:	6860      	ldr	r0, [r4, #4]
   dc2d2:	f7ff fdf5 	bl	dbec0 <__tzcalc_limits>
   dc2d6:	4b08      	ldr	r3, [pc, #32]	; (dc2f8 <_tzset_unlocked_r+0x2d8>)
   dc2d8:	6a22      	ldr	r2, [r4, #32]
   dc2da:	601a      	str	r2, [r3, #0]
   dc2dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc2de:	1a9b      	subs	r3, r3, r2
   dc2e0:	4a07      	ldr	r2, [pc, #28]	; (dc300 <_tzset_unlocked_r+0x2e0>)
   dc2e2:	bf18      	it	ne
   dc2e4:	2301      	movne	r3, #1
   dc2e6:	6013      	str	r3, [r2, #0]
   dc2e8:	b00d      	add	sp, #52	; 0x34
   dc2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2ee:	bf00      	nop
   dc2f0:	000dd644 	.word	0x000dd644
   dc2f4:	2003e7e4 	.word	0x2003e7e4
   dc2f8:	2003e7ec 	.word	0x2003e7ec
   dc2fc:	000dd647 	.word	0x000dd647
   dc300:	2003e7e8 	.word	0x2003e7e8
   dc304:	2003e0f8 	.word	0x2003e0f8
   dc308:	2003e7d7 	.word	0x2003e7d7
   dc30c:	000dd64b 	.word	0x000dd64b
   dc310:	000dd66e 	.word	0x000dd66e
   dc314:	000dd65a 	.word	0x000dd65a
   dc318:	000dd66d 	.word	0x000dd66d
   dc31c:	2003e7cc 	.word	0x2003e7cc

000dc320 <_findenv_r>:
   dc320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc324:	4607      	mov	r7, r0
   dc326:	468b      	mov	fp, r1
   dc328:	4690      	mov	r8, r2
   dc32a:	f000 f8d9 	bl	dc4e0 <__env_lock>
   dc32e:	4b19      	ldr	r3, [pc, #100]	; (dc394 <_findenv_r+0x74>)
   dc330:	681d      	ldr	r5, [r3, #0]
   dc332:	469a      	mov	sl, r3
   dc334:	b13d      	cbz	r5, dc346 <_findenv_r+0x26>
   dc336:	465c      	mov	r4, fp
   dc338:	4623      	mov	r3, r4
   dc33a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc33e:	b142      	cbz	r2, dc352 <_findenv_r+0x32>
   dc340:	2a3d      	cmp	r2, #61	; 0x3d
   dc342:	461c      	mov	r4, r3
   dc344:	d1f8      	bne.n	dc338 <_findenv_r+0x18>
   dc346:	4638      	mov	r0, r7
   dc348:	f000 f8cb 	bl	dc4e2 <__env_unlock>
   dc34c:	2000      	movs	r0, #0
   dc34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc352:	ebcb 0404 	rsb	r4, fp, r4
   dc356:	46a9      	mov	r9, r5
   dc358:	f859 0b04 	ldr.w	r0, [r9], #4
   dc35c:	2800      	cmp	r0, #0
   dc35e:	d0f2      	beq.n	dc346 <_findenv_r+0x26>
   dc360:	4622      	mov	r2, r4
   dc362:	4659      	mov	r1, fp
   dc364:	f7ff fc6c 	bl	dbc40 <strncmp>
   dc368:	b988      	cbnz	r0, dc38e <_findenv_r+0x6e>
   dc36a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc36e:	191e      	adds	r6, r3, r4
   dc370:	5d1b      	ldrb	r3, [r3, r4]
   dc372:	2b3d      	cmp	r3, #61	; 0x3d
   dc374:	d10b      	bne.n	dc38e <_findenv_r+0x6e>
   dc376:	f8da 3000 	ldr.w	r3, [sl]
   dc37a:	1aed      	subs	r5, r5, r3
   dc37c:	10ad      	asrs	r5, r5, #2
   dc37e:	4638      	mov	r0, r7
   dc380:	f8c8 5000 	str.w	r5, [r8]
   dc384:	f000 f8ad 	bl	dc4e2 <__env_unlock>
   dc388:	1c70      	adds	r0, r6, #1
   dc38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc38e:	464d      	mov	r5, r9
   dc390:	e7e1      	b.n	dc356 <_findenv_r+0x36>
   dc392:	bf00      	nop
   dc394:	2003e140 	.word	0x2003e140

000dc398 <_getenv_r>:
   dc398:	b507      	push	{r0, r1, r2, lr}
   dc39a:	aa01      	add	r2, sp, #4
   dc39c:	f7ff ffc0 	bl	dc320 <_findenv_r>
   dc3a0:	b003      	add	sp, #12
   dc3a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc3a8 <__gettzinfo>:
   dc3a8:	4800      	ldr	r0, [pc, #0]	; (dc3ac <__gettzinfo+0x4>)
   dc3aa:	4770      	bx	lr
   dc3ac:	2003e100 	.word	0x2003e100

000dc3b0 <gmtime_r>:
   dc3b0:	6802      	ldr	r2, [r0, #0]
   dc3b2:	4b47      	ldr	r3, [pc, #284]	; (dc4d0 <gmtime_r+0x120>)
   dc3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc3b6:	fb92 f4f3 	sdiv	r4, r2, r3
   dc3ba:	fb03 2214 	mls	r2, r3, r4, r2
   dc3be:	2a00      	cmp	r2, #0
   dc3c0:	bfbc      	itt	lt
   dc3c2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dc3c6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc3ca:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc3ce:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc3d2:	fb92 f3f0 	sdiv	r3, r2, r0
   dc3d6:	fb00 2213 	mls	r2, r0, r3, r2
   dc3da:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc3de:	bfac      	ite	ge
   dc3e0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc3e4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc3e8:	608b      	str	r3, [r1, #8]
   dc3ea:	fb92 f3f0 	sdiv	r3, r2, r0
   dc3ee:	fb00 2213 	mls	r2, r0, r3, r2
   dc3f2:	604b      	str	r3, [r1, #4]
   dc3f4:	600a      	str	r2, [r1, #0]
   dc3f6:	2307      	movs	r3, #7
   dc3f8:	1ce2      	adds	r2, r4, #3
   dc3fa:	fb92 f3f3 	sdiv	r3, r2, r3
   dc3fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc402:	1ad3      	subs	r3, r2, r3
   dc404:	618b      	str	r3, [r1, #24]
   dc406:	4b33      	ldr	r3, [pc, #204]	; (dc4d4 <gmtime_r+0x124>)
   dc408:	4d33      	ldr	r5, [pc, #204]	; (dc4d8 <gmtime_r+0x128>)
   dc40a:	fb94 f5f5 	sdiv	r5, r4, r5
   dc40e:	fb03 4405 	mla	r4, r3, r5, r4
   dc412:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc416:	fbb4 f2f2 	udiv	r2, r4, r2
   dc41a:	4422      	add	r2, r4
   dc41c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc420:	fbb4 f3f7 	udiv	r3, r4, r7
   dc424:	1ad2      	subs	r2, r2, r3
   dc426:	482d      	ldr	r0, [pc, #180]	; (dc4dc <gmtime_r+0x12c>)
   dc428:	fbb4 f0f0 	udiv	r0, r4, r0
   dc42c:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc430:	1a13      	subs	r3, r2, r0
   dc432:	fbb3 f6f6 	udiv	r6, r3, r6
   dc436:	4434      	add	r4, r6
   dc438:	f240 126d 	movw	r2, #365	; 0x16d
   dc43c:	fbb3 f0f2 	udiv	r0, r3, r2
   dc440:	fbb3 f3f7 	udiv	r3, r3, r7
   dc444:	1ae3      	subs	r3, r4, r3
   dc446:	fb02 3310 	mls	r3, r2, r0, r3
   dc44a:	2499      	movs	r4, #153	; 0x99
   dc44c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc450:	3202      	adds	r2, #2
   dc452:	fbb2 f2f4 	udiv	r2, r2, r4
   dc456:	2a0a      	cmp	r2, #10
   dc458:	fb04 f402 	mul.w	r4, r4, r2
   dc45c:	f104 0602 	add.w	r6, r4, #2
   dc460:	f04f 0405 	mov.w	r4, #5
   dc464:	fbb6 f4f4 	udiv	r4, r6, r4
   dc468:	bf34      	ite	cc
   dc46a:	2602      	movcc	r6, #2
   dc46c:	f06f 0609 	mvncs.w	r6, #9
   dc470:	4416      	add	r6, r2
   dc472:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc476:	fb02 0505 	mla	r5, r2, r5, r0
   dc47a:	1c5f      	adds	r7, r3, #1
   dc47c:	2e01      	cmp	r6, #1
   dc47e:	bf98      	it	ls
   dc480:	3501      	addls	r5, #1
   dc482:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc486:	eba7 0704 	sub.w	r7, r7, r4
   dc48a:	d302      	bcc.n	dc492 <gmtime_r+0xe2>
   dc48c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc490:	e014      	b.n	dc4bc <gmtime_r+0x10c>
   dc492:	0782      	lsls	r2, r0, #30
   dc494:	d105      	bne.n	dc4a2 <gmtime_r+0xf2>
   dc496:	2464      	movs	r4, #100	; 0x64
   dc498:	fbb0 f2f4 	udiv	r2, r0, r4
   dc49c:	fb04 0212 	mls	r2, r4, r2, r0
   dc4a0:	b94a      	cbnz	r2, dc4b6 <gmtime_r+0x106>
   dc4a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc4a6:	fbb0 f4f2 	udiv	r4, r0, r2
   dc4aa:	fb02 0014 	mls	r0, r2, r4, r0
   dc4ae:	fab0 f280 	clz	r2, r0
   dc4b2:	0952      	lsrs	r2, r2, #5
   dc4b4:	e000      	b.n	dc4b8 <gmtime_r+0x108>
   dc4b6:	2201      	movs	r2, #1
   dc4b8:	333b      	adds	r3, #59	; 0x3b
   dc4ba:	441a      	add	r2, r3
   dc4bc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc4c0:	2300      	movs	r3, #0
   dc4c2:	61ca      	str	r2, [r1, #28]
   dc4c4:	614d      	str	r5, [r1, #20]
   dc4c6:	610e      	str	r6, [r1, #16]
   dc4c8:	60cf      	str	r7, [r1, #12]
   dc4ca:	620b      	str	r3, [r1, #32]
   dc4cc:	4608      	mov	r0, r1
   dc4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc4d0:	00015180 	.word	0x00015180
   dc4d4:	fffdc54f 	.word	0xfffdc54f
   dc4d8:	00023ab1 	.word	0x00023ab1
   dc4dc:	00023ab0 	.word	0x00023ab0

000dc4e0 <__env_lock>:
   dc4e0:	4770      	bx	lr

000dc4e2 <__env_unlock>:
   dc4e2:	4770      	bx	lr

000dc4e4 <dynalib_user>:
   dc4e4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dc4f4:	0000 0000                                   ....

000dc4f8 <_ZTV16JsonWriterStaticILj256EE>:
	...
   dc500:	40d1 000d 40e5 000d 6854 2065 6925 3e20     .@...@..The %i >
   dc510:	2520 2c69 7420 7275 696e 676e 6f20 206e      %i, turning on 
   dc520:	7570 706d 5400 6568 2520 2069 203c 6925     pump.The %i < %i
   dc530:	6e20 206f 6177 6574 2072 656e 6465 6465      no water needed
   dc540:	4100 2074 7325 7420 6568 6d20 696f 7473     .At %s the moist
   dc550:	7275 2065 6572 6461 6e69 2067 7369 2520     ure reading is %
   dc560:	2069 000a 6854 2065 6974 656d 6920 2073     i ..The time is 
   dc570:	7325 0a20 5400 6d65 6570 6172 7574 6572     %s ..Temperature
   dc580:	3d20 0020 2a20 0043 7250 7365 7573 6572      = . *C.Pressure
   dc590:	3d20 0020 6820 6150 4100 7070 6f72 2e78      = . hPa.Approx.
   dc5a0:	4120 746c 7469 6475 2065 203d 2000 006d      Altitude = . m.
   dc5b0:	7548 696d 6964 7974 3d20 0020 2520 2c00     Humidity = . %.,
   dc5c0:	4800 6c65 6f6c 202c 6f77 6c72 2164 5000     .Hello, world!.P
   dc5d0:	616c 746e 5720 7461 7265 6465 4200 454d     lant Watered.BME
   dc5e0:	3832 2030 6574 7473 4300 756f 646c 6e20     280 test.Could n
   dc5f0:	746f 6620 6e69 2064 2061 6176 696c 2064     ot find a valid 
   dc600:	4d42 3245 3038 7320 6e65 6f73 2c72 6320     BME280 sensor, c
   dc610:	6568 6b63 7720 7269 6e69 2c67 6120 6464     heck wiring, add
   dc620:	6572 7373 202c 6573 736e 726f 4920 2144     ress, sensor ID!
   dc630:	5300 6e65 6f73 4972 2044 6177 3a73 3020     .SensorID was: 0
   dc640:	0078 2020 2020 2020 2020 4449 6f20 2066     x.        ID of 
   dc650:	7830 4646 7020 6f72 6162 6c62 2079 656d     0xFF probably me
   dc660:	6e61 2073 2061 6162 2064 6461 7264 7365     ans a bad addres
   dc670:	2c73 6120 4220 504d 3120 3038 6f20 2072     s, a BMP 180 or 
   dc680:	4d42 2050 3830 0a35 2000 2020 4449 6f20     BMP 085..   ID o
   dc690:	2066 7830 3635 302d 3578 2038 6572 7270     f 0x56-0x58 repr
   dc6a0:	7365 6e65 7374 6120 4220 504d 3220 3038     esents a BMP 280
   dc6b0:	0a2c 2000 2020 2020 2020 4920 2044 666f     ,..        ID of
   dc6c0:	3020 3678 2030 6572 7270 7365 6e65 7374      0x60 represents
   dc6d0:	6120 4220 454d 3220 3038 0a2e 2000 2020      a BME 280...   
   dc6e0:	2020 2020 4920 2044 666f 3020 3678 2031          ID of 0x61 
   dc6f0:	6572 7270 7365 6e65 7374 6120 4220 454d     represents a BME
   dc700:	3620 3038 0a2e 4500 766e 7269 6e6f 656d      680...Environme
   dc710:	746e 6c61 5220 6165 6964 676e 5400 6d65     ntal Reading.Tem
   dc720:	6570 6172 7574 6572 4628 2029 3025 322e     perature(F) %0.2
   dc730:	0a66 5000 6572 7373 7275 2065 6828 6150     f..Pressure (hPa
   dc740:	2029 3025 322e 0a66 4800 6d75 6469 7469     ) %0.2f..Humidit
   dc750:	2079 2528 4872 2029 2520 2e30 6632 000a     y (%rH)  %0.2f..
   dc760:	7544 7473 4c20 7665 6c65 203a 3025 322e     Dust Level: %0.2
   dc770:	2066 000a 6f4d 7369 7574 6572 203a 6425     f ..Moisture: %d
   dc780:	0a20 6500 766e 762d 6c61 0073 7544 7473      ..env-vals.Dust
   dc790:	5620 6c61 6575 3d20 2520 2e30 6632 0a20      Value = %0.2f .
   dc7a0:	7800 6925 0020 7542 7474 6e6f 5320 6174     .x%i .Button Sta
   dc7b0:	6574 6920 2073 6925 0a20 7200 7361 6168     te is %i ..rasha
   dc7c0:	0070 6f69 612e 6164 7266 6975 2e74 6f63     p.io.adafruit.co
   dc7d0:	006d 3935 3138 3936 6166 6233 3961 3634     m.598169fa3ba946
   dc7e0:	3633 3439 6131 3333 3930 3637 3465 6532     36941a330976e42e
   dc7f0:	6332 7200 7361 6168 2f70 6566 6465 2f73     2c.rashap/feeds/
   dc800:	6f48 656d 545f 6d65 6570 6172 7574 6572     Home_Temperature
   dc810:	7200 7361 6168 2f70 6566 6465 2f73 6f48     .rashap/feeds/Ho
   dc820:	656d 4d5f 696f 7473 7275 0065 6172 6873     me_Moisture.rash
   dc830:	7061 662f 6565 7364 482f 6d6f 5f65 6157     ap/feeds/Home_Wa
   dc840:	6574 0072 6172 6873 7061 662f 6565 7364     ter.rashap/feeds
   dc850:	482f 6d6f 5f65 7250 7365 7573 6572 7200     /Home_Pressure.r
   dc860:	7361 6168 2f70 6566 6465 2f73 6f48 656d     ashap/feeds/Home
   dc870:	485f 6d75 6469 7469 0079 6172 6873 7061     _Humidity.rashap
   dc880:	662f 6565 7364 482f 6d6f 5f65 7544 7473     /feeds/Home_Dust
   dc890:	7200 7361 6168 2f70 6566 6465 2f73 454c     .rashap/feeds/LE
   dc8a0:	5f44 6e4f 0000 0000                         D_On....

000dc8a8 <_ZTVN8particle13__SPISettingsE>:
	...
   dc8b0:	4d21 000d 6564 6166 6c75 2074 4d00 4253     !M..default .MSB
   dc8c0:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dc8d0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dc8e0:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dc8f0:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dc8fc <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dc904:	40cf 000d 4baf 000d 569f 000d 574b 000d     .@...K...V..KW..
   dc914:	577d 000d 56b3 000d 56f3 000d               }W...V...V..

000dc920 <_ZTV13Adafruit_MQTT>:
	...
   dc930:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dc940:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   dc950:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   dc960:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   dc970:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   dc980:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   dc990:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   dc9a0:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   dc9b0:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   dc9c0:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   dc9d0:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   dc9e0:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   dc9f0:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   dca00:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   dca10:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   dca20:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   dca30:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   dca40:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   dca50:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dca60:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dca70:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dca80:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dca90:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dcaa0:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dcab0:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dcac0:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dcad0:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dcae0:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dcaf0:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dcb00:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dcb10:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dcb20:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dcb30:	7465 6961 736c 002e                         etails..

000dcb38 <_ZTV10JsonBuffer>:
	...
   dcb40:	5da5 000d 5dc1 000d                         .]...]..

000dcb48 <_ZTV10JsonWriter>:
	...
   dcb50:	5dd5 000d 5de9 000d 6c25 0075 3025 7834     .]...]..%lu.%04x
   dcb60:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dcb70:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dcb80:	2500 666c 0000 0000                         .%lf....

000dcb88 <_ZTV16Adafruit_SSD1306>:
	...
   dcb90:	40cd 000d 4ba1 000d 6a65 000d 78ad 000d     .@...K..ej...x..
   dcba0:	6361 000d 6765 000d 61e9 000d 6075 000d     ac..eg...a..u`..
   dcbb0:	6825 000d 68bb 000d 68f3 000d 690f 000d     %h...h...h...i..

000dcbc0 <_ZTV12Adafruit_GFX>:
	...
   dcbd0:	6a65 000d 78ad 000d 40a9 000d 6765 000d     ej...x...@..eg..
   dcbe0:	6885 000d 68a1 000d 6825 000d 68bb 000d     .h...h..%h...h..
   dcbf0:	68f3 000d 690f 000d                         .h...i..

000dcbf8 <_ZL4font>:
   dcbf8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dcc08:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dcc18:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dcc28:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dcc38:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dcc48:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dcc58:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dcc68:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dcc78:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dcc88:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dcc98:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dcca8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dccb8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dccc8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dccd8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dcce8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dccf8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dcd08:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dcd18:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dcd28:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dcd38:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dcd48:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dcd58:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dcd68:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dcd78:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dcd88:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dcd98:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dcda8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dcdb8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dcdc8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dcdd8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dcde8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dcdf8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dce08:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dce18:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dce28:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dce38:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dce48:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dce58:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dce68:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dce78:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dce88:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dce98:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dcea8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dceb8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dcec8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dced8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dcee8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dcef8:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dcf08:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dcf18:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dcf28:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dcf38:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dcf48:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dcf58:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dcf68:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dcf78:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dcf88:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dcf98:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dcfa8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dcfb8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dcfc8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dcfd8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dcfe8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dcff8:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dd008:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dd018:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dd028:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dd038:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dd048:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dd058:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dd068:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dd078:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dd088:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dd098:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   dd0a8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dd0b8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dd0c8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dd0d8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dd0e8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dd0f4 <_ZTVN5spark13EthernetClassE>:
	...
   dd0fc:	71df 000d 71d5 000d 71cb 000d 71c1 000d     .q...q...q...q..
   dd10c:	71b5 000d 71a9 000d 719d 000d 7195 000d     .q...q...q...q..
   dd11c:	718b 000d 7181 000d 9009 000d               .q...q......

000dd128 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd128:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dd138:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dd148:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dd158:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dd168:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dd178:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dd188:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dd198:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dd1a8:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dd1b8:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dd1c8:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dd1d8:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dd1e8:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dd1f8:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dd208:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dd218:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dd228:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dd238 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd240:	7e39 000d 7e3f 000d 7e83 000d 7e4d 000d     9~..?~...~..M~..
   dd250:	7e3b 000d                                   ;~..

000dd254 <_ZTV9IPAddress>:
	...
   dd25c:	83d1 000d 83c1 000d 83c3 000d               ............

000dd268 <_ZTV9USBSerial>:
	...
   dd270:	84d5 000d 8525 000d 8533 000d 78ad 000d     ....%...3....x..
   dd280:	8511 000d 84d7 000d 84ed 000d 851f 000d     ................
   dd290:	8503 000d 84d1 000d                         ........

000dd298 <_ZTV11USARTSerial>:
	...
   dd2a0:	85e1 000d 8631 000d 863f 000d 78ad 000d     ....1...?....x..
   dd2b0:	85f5 000d 8617 000d 8603 000d 862b 000d     ............+...
   dd2c0:	85e3 000d 85e7 000d                         ........

000dd2c8 <_ZTV7TwoWire>:
	...
   dd2d0:	870d 000d 8757 000d 872f 000d 870f 000d     ....W.../.......
   dd2e0:	8737 000d 873f 000d 8747 000d 874f 000d     7...?...G...O...

000dd2f0 <_ZTVN5spark9MeshClassE>:
	...
   dd2f8:	8879 000d 886f 000d 8865 000d 885b 000d     y...o...e...[...
   dd308:	884f 000d 8843 000d 8837 000d 882f 000d     O...C...7.../...
   dd318:	8825 000d 881b 000d 9009 000d               %...........

000dd324 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd32c:	8a1d 000d 8a23 000d 8f0b 000d 8a31 000d     ....#.......1...
   dd33c:	8a1f 000d                                   ....

000dd340 <_ZTV9TCPClient>:
	...
   dd348:	4641 000d 4659 000d 8995 000d 89af 000d     AF..YF..........
   dd358:	8db1 000d 8b03 000d 8ad5 000d 89d9 000d     ................
   dd368:	8c8d 000d 8b89 000d 8b37 000d 8d81 000d     ........7.......
   dd378:	89db 000d 8a13 000d 89c1 000d 8a35 000d     ............5...
   dd388:	8ab5 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   dd398:	7265 6f72 2072 203d 6425 0000               error = %d..

000dd3a4 <_ZTVN5spark9WiFiClassE>:
	...
   dd3ac:	8f81 000d 8f77 000d 8f6d 000d 8f23 000d     ....w...m...#...
   dd3bc:	8f61 000d 8f55 000d 8f49 000d 8f41 000d     a...U...I...A...
   dd3cc:	8f37 000d 8f2d 000d 9009 000d               7...-.......

000dd3d8 <_ZTVN5spark12NetworkClassE>:
	...
   dd3e0:	8fa1 000d 8fab 000d 8fb5 000d 8fbf 000d     ................
   dd3f0:	8fc9 000d 8fd5 000d 8fe1 000d 8fed 000d     ................
   dd400:	8ff5 000d 8fff 000d 9009 000d               ............

000dd40c <_ZSt7nothrow>:
   dd40c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dd418 <TWO52>:
   dd418:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dd428 <day_name.4725>:
   dd428:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd438:	6972 6153 4a74                                   riSat

000dd43d <mon_name.4726>:
   dd43d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd44d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd45d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd46d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd47d:	6425 000a                                   %d..

000dd481 <_ctype_>:
   dd481:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd491:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd4a1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd4b1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd4c1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd4d1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd4e1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd4f1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd501:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd584 <__sf_fake_stdin>:
	...

000dd5a4 <__sf_fake_stdout>:
	...

000dd5c4 <__sf_fake_stderr>:
	...

000dd5e4 <__month_lengths>:
   dd5e4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd5f4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd604:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd614:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd624:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd634:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd644:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dd654:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dd664:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dd674:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dd680 <link_const_variable_data_end>:
   dd680:	000d4bbd 	.word	0x000d4bbd
   dd684:	000d569b 	.word	0x000d569b
   dd688:	000d57dd 	.word	0x000d57dd
   dd68c:	000d5d9f 	.word	0x000d5d9f
   dd690:	000d6071 	.word	0x000d6071
   dd694:	000d6761 	.word	0x000d6761
   dd698:	000d6af5 	.word	0x000d6af5
   dd69c:	000d71e9 	.word	0x000d71e9
   dd6a0:	000d7471 	.word	0x000d7471
   dd6a4:	000d7885 	.word	0x000d7885
   dd6a8:	000d7bbd 	.word	0x000d7bbd
   dd6ac:	000d7cb5 	.word	0x000d7cb5
   dd6b0:	000d7d0d 	.word	0x000d7d0d
   dd6b4:	000d8945 	.word	0x000d8945
   dd6b8:	000d8f8d 	.word	0x000d8f8d
   dd6bc:	000d90d5 	.word	0x000d90d5
   dd6c0:	000d9311 	.word	0x000d9311
   dd6c4:	000d9395 	.word	0x000d9395
   dd6c8:	000d9459 	.word	0x000d9459
   dd6cc:	000d951d 	.word	0x000d951d
