
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.2/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009320  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd340  000dd340  0000d340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd348  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004dc  2003dc68  000dd34c  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006ac  2003e148  2003e148  0002e148  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dd828  000dd828  0002d828  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dd850  000dd850  0002d850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00121af2  00000000  00000000  0002d854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00017153  00000000  00000000  0014f346  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a7f1  00000000  00000000  00166499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000031a8  00000000  00000000  00190c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005c80  00000000  00000000  00193e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003ee7d  00000000  00000000  00199ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039a92  00000000  00000000  001d892f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00111db0  00000000  00000000  002123c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fb74  00000000  00000000  00324174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fb75 	bl	db720 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fb95 	bl	db76c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc68 	.word	0x2003dc68
   d404c:	000dd34c 	.word	0x000dd34c
   d4050:	2003e144 	.word	0x2003e144
   d4054:	2003e148 	.word	0x2003e148
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd19 	bl	d7a94 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dd334 	.word	0x000dd334
   d4084:	000dd2e4 	.word	0x000dd2e4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9ce 	b.w	d4428 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbc3 	bl	d4818 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bcbf 	b.w	d7a18 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bf49 	b.w	d6f30 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bf4f 	b.w	d6f40 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bf4d 	b.w	d6f40 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fe6a 	bl	d6d88 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6ac9 	.word	0x000d6ac9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f001 fdac 	bl	d5c34 <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000dc140 	.word	0x000dc140

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 ff51 	bl	d8f98 <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}

000d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40fa:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40fc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40fe:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4100:	689b      	ldr	r3, [r3, #8]
   d4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4104:	68a3      	ldr	r3, [r4, #8]
   d4106:	3b01      	subs	r3, #1
   d4108:	60a3      	str	r3, [r4, #8]
   d410a:	b92b      	cbnz	r3, d4118 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13+0x1e>
            _M_destroy();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4116:	4718      	bx	r3
   d4118:	bd10      	pop	{r4, pc}
	...

000d411c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d411c:	b510      	push	{r4, lr}
   d411e:	4b06      	ldr	r3, [pc, #24]	; (d4138 <_ZN9TCPClientD1Ev+0x1c>)
   d4120:	6003      	str	r3, [r0, #0]
   d4122:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4124:	6980      	ldr	r0, [r0, #24]
   d4126:	b128      	cbz	r0, d4134 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4128:	6843      	ldr	r3, [r0, #4]
   d412a:	3b01      	subs	r3, #1
   d412c:	6043      	str	r3, [r0, #4]
   d412e:	b90b      	cbnz	r3, d4134 <_ZN9TCPClientD1Ev+0x18>
   d4130:	f7ff ffe3 	bl	d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>
   d4134:	4620      	mov	r0, r4
   d4136:	bd10      	pop	{r4, pc}
   d4138:	000dcfa8 	.word	0x000dcfa8

000d413c <_ZN9TCPClientD0Ev>:
   d413c:	b510      	push	{r4, lr}
   d413e:	4604      	mov	r4, r0
   d4140:	f7ff ffec 	bl	d411c <_ZN9TCPClientD1Ev>
   d4144:	4620      	mov	r0, r4
   d4146:	211c      	movs	r1, #28
   d4148:	f004 ff26 	bl	d8f98 <_ZdlPvj>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_Z10waterPlantii>:
    }
  }    
}

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
   d4150:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(moistVal > threshold) {
   d4152:	4c16      	ldr	r4, [pc, #88]	; (d41ac <_Z10waterPlantii+0x5c>)
   d4154:	4d16      	ldr	r5, [pc, #88]	; (d41b0 <_Z10waterPlantii+0x60>)
   d4156:	6823      	ldr	r3, [r4, #0]
   d4158:	4283      	cmp	r3, r0
    }
  }    
}

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
   d415a:	460e      	mov	r6, r1
  if(moistVal > threshold) {
   d415c:	da1a      	bge.n	d4194 <_Z10waterPlantii+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d415e:	f004 f873 	bl	d8248 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4162:	6823      	ldr	r3, [r4, #0]
   d4164:	4a13      	ldr	r2, [pc, #76]	; (d41b4 <_Z10waterPlantii+0x64>)
   d4166:	9300      	str	r3, [sp, #0]
   d4168:	2101      	movs	r1, #1
   d416a:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d416c:	4c12      	ldr	r4, [pc, #72]	; (d41b8 <_Z10waterPlantii+0x68>)
   d416e:	f003 fb44 	bl	d77fa <_ZN5Print11printf_implEbPKcz>

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4176:	f003 fc01 	bl	d797c <delay>
    digitalWrite(pumpPin,HIGH);
   d417a:	2101      	movs	r1, #1
   d417c:	8820      	ldrh	r0, [r4, #0]
   d417e:	f004 fe54 	bl	d8e2a <digitalWrite>
    delay(timeWater);
   d4182:	4630      	mov	r0, r6
   d4184:	f003 fbfa 	bl	d797c <delay>
    digitalWrite(pumpPin,LOW);
   d4188:	8820      	ldrh	r0, [r4, #0]
   d418a:	2100      	movs	r1, #0
   d418c:	f004 fe4d 	bl	d8e2a <digitalWrite>
   d4190:	2001      	movs	r0, #1
   d4192:	e009      	b.n	d41a8 <_Z10waterPlantii+0x58>
    return 1;
  }
  else
  {
    Serial.printlnf("\n \n The %i < %i no water needed", moist, threshold);
   d4194:	f004 f858 	bl	d8248 <_Z16_fetch_usbserialv>
   d4198:	6823      	ldr	r3, [r4, #0]
   d419a:	9300      	str	r3, [sp, #0]
   d419c:	4a07      	ldr	r2, [pc, #28]	; (d41bc <_Z10waterPlantii+0x6c>)
   d419e:	682b      	ldr	r3, [r5, #0]
   d41a0:	2101      	movs	r1, #1
   d41a2:	f003 fb2a 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
    return 0;
   d41a6:	2000      	movs	r0, #0
  }
    
}
   d41a8:	b002      	add	sp, #8
   d41aa:	bd70      	pop	{r4, r5, r6, pc}
   d41ac:	2003dc68 	.word	0x2003dc68
   d41b0:	2003e370 	.word	0x2003e370
   d41b4:	000dc148 	.word	0x000dc148
   d41b8:	2003dc74 	.word	0x2003dc74
   d41bc:	000dc165 	.word	0x000dc165

000d41c0 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d41c0:	b570      	push	{r4, r5, r6, lr}
   d41c2:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d41c4:	f003 fbc9 	bl	d795a <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d41c8:	4c1f      	ldr	r4, [pc, #124]	; (d4248 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41ca:	4e20      	ldr	r6, [pc, #128]	; (d424c <_Z10printMoisti+0x8c>)
   d41cc:	4d20      	ldr	r5, [pc, #128]	; (d4250 <_Z10printMoisti+0x90>)
   d41ce:	4601      	mov	r1, r0
   d41d0:	a802      	add	r0, sp, #8
   d41d2:	f003 fb7f 	bl	d78d4 <_ZN9TimeClass7timeStrEl>
   d41d6:	a902      	add	r1, sp, #8
   d41d8:	4620      	mov	r0, r4
   d41da:	f003 f941 	bl	d7460 <_ZN6StringaSEOS_>
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f003 f8c7 	bl	d7372 <_ZN6StringD1Ev>
   d41e4:	4631      	mov	r1, r6
   d41e6:	4620      	mov	r0, r4
   d41e8:	2300      	movs	r3, #0
   d41ea:	2219      	movs	r2, #25
   d41ec:	f003 f940 	bl	d7470 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d41f0:	4621      	mov	r1, r4
   d41f2:	4c18      	ldr	r4, [pc, #96]	; (d4254 <_Z10printMoisti+0x94>)
   d41f4:	2313      	movs	r3, #19
   d41f6:	220b      	movs	r2, #11
   d41f8:	a802      	add	r0, sp, #8
   d41fa:	f003 f951 	bl	d74a0 <_ZNK6String9substringEjj>
   d41fe:	a902      	add	r1, sp, #8
   d4200:	4620      	mov	r0, r4
   d4202:	f003 f92d 	bl	d7460 <_ZN6StringaSEOS_>
   d4206:	a802      	add	r0, sp, #8
   d4208:	f003 f8b3 	bl	d7372 <_ZN6StringD1Ev>
   d420c:	2300      	movs	r3, #0
   d420e:	2209      	movs	r2, #9
   d4210:	4629      	mov	r1, r5
   d4212:	4620      	mov	r0, r4
   d4214:	f003 f92c 	bl	d7470 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d4218:	f004 f816 	bl	d8248 <_Z16_fetch_usbserialv>
   d421c:	6821      	ldr	r1, [r4, #0]
   d421e:	f003 f9d8 	bl	d75d2 <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d4222:	f004 f811 	bl	d8248 <_Z16_fetch_usbserialv>
   d4226:	4b0c      	ldr	r3, [pc, #48]	; (d4258 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4228:	4a0c      	ldr	r2, [pc, #48]	; (d425c <_Z10printMoisti+0x9c>)
   d422a:	681b      	ldr	r3, [r3, #0]
   d422c:	9300      	str	r3, [sp, #0]
   d422e:	2100      	movs	r1, #0
   d4230:	4633      	mov	r3, r6
   d4232:	f003 fae2 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d4236:	f004 f807 	bl	d8248 <_Z16_fetch_usbserialv>
   d423a:	462b      	mov	r3, r5
   d423c:	4a08      	ldr	r2, [pc, #32]	; (d4260 <_Z10printMoisti+0xa0>)
   d423e:	2100      	movs	r1, #0
   d4240:	f003 fadb 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
}
   d4244:	b006      	add	sp, #24
   d4246:	bd70      	pop	{r4, r5, r6, pc}
   d4248:	2003e318 	.word	0x2003e318
   d424c:	2003e388 	.word	0x2003e388
   d4250:	2003e14c 	.word	0x2003e14c
   d4254:	2003e198 	.word	0x2003e198
   d4258:	2003e370 	.word	0x2003e370
   d425c:	000dc185 	.word	0x000dc185
   d4260:	000dc1a8 	.word	0x000dc1a8
   d4264:	00000000 	.word	0x00000000

000d4268 <_Z7getDustv>:
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d4268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d426c:	2100      	movs	r1, #0
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d426e:	ed2d 8b02 	vpush	{d8}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d4272:	2008      	movs	r0, #8
   d4274:	f004 fdc8 	bl	d8e08 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4278:	f002 fc2e 	bl	d6ad8 <HAL_Timer_Get_Milli_Seconds>
   d427c:	4605      	mov	r5, r0
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d427e:	2400      	movs	r4, #0

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4280:	f247 5630 	movw	r6, #30000	; 0x7530

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
   d4284:	2100      	movs	r1, #0
   d4286:	2008      	movs	r0, #8
   d4288:	f004 fe35 	bl	d8ef6 <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d428c:	4404      	add	r4, r0
   d428e:	f002 fc23 	bl	d6ad8 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4292:	1b40      	subs	r0, r0, r5
   d4294:	42b0      	cmp	r0, r6
   d4296:	d9f5      	bls.n	d4284 <_Z7getDustv+0x1c>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4298:	4620      	mov	r0, r4
   d429a:	f006 fa57 	bl	da74c <__aeabi_ui2d>
   d429e:	a340      	add	r3, pc, #256	; (adr r3, d43a0 <_Z7getDustv+0x138>)
   d42a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a4:	f006 fbf2 	bl	daa8c <__aeabi_ddiv>
   d42a8:	f006 fdbe 	bl	dae28 <__aeabi_d2f>
   d42ac:	ee08 0a90 	vmov	s17, r0
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d42b0:	f006 fa6e 	bl	da790 <__aeabi_f2d>
   d42b4:	4606      	mov	r6, r0
   d42b6:	460f      	mov	r7, r1
   d42b8:	ed9f 1b33 	vldr	d1, [pc, #204]	; d4388 <_Z7getDustv+0x120>
   d42bc:	ec47 6b10 	vmov	d0, r6, r7
   d42c0:	f004 ffca 	bl	d9258 <pow>
   d42c4:	a338      	add	r3, pc, #224	; (adr r3, d43a8 <_Z7getDustv+0x140>)
   d42c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ca:	ec51 0b10 	vmov	r0, r1, d0
   d42ce:	f006 fab3 	bl	da838 <__aeabi_dmul>
   d42d2:	4632      	mov	r2, r6
   d42d4:	463b      	mov	r3, r7
   d42d6:	4680      	mov	r8, r0
   d42d8:	4689      	mov	r9, r1
   d42da:	4630      	mov	r0, r6
   d42dc:	4639      	mov	r1, r7
   d42de:	f006 faab 	bl	da838 <__aeabi_dmul>
   d42e2:	a333      	add	r3, pc, #204	; (adr r3, d43b0 <_Z7getDustv+0x148>)
   d42e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e8:	f006 faa6 	bl	da838 <__aeabi_dmul>
   d42ec:	4602      	mov	r2, r0
   d42ee:	460b      	mov	r3, r1
   d42f0:	4640      	mov	r0, r8
   d42f2:	4649      	mov	r1, r9
   d42f4:	f006 f8ec 	bl	da4d0 <__aeabi_dsub>
   d42f8:	eddf 7a27 	vldr	s15, [pc, #156]	; d4398 <_Z7getDustv+0x130>
   d42fc:	ee68 7aa7 	vmul.f32	s15, s17, s15
   d4300:	4606      	mov	r6, r0
   d4302:	ee17 0a90 	vmov	r0, s15
   d4306:	460f      	mov	r7, r1
   d4308:	f006 fa42 	bl	da790 <__aeabi_f2d>
   d430c:	4602      	mov	r2, r0
   d430e:	460b      	mov	r3, r1
   d4310:	4630      	mov	r0, r6
   d4312:	4639      	mov	r1, r7
   d4314:	f006 f8de 	bl	da4d4 <__adddf3>
   d4318:	a31d      	add	r3, pc, #116	; (adr r3, d4390 <_Z7getDustv+0x128>)
   d431a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d431e:	f006 f8d9 	bl	da4d4 <__adddf3>
   d4322:	f006 fd81 	bl	dae28 <__aeabi_d2f>
   d4326:	ee08 0a10 	vmov	s16, r0
        Serial.print(lowpulseoccupancy);
   d432a:	f003 ff8d 	bl	d8248 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d432e:	220a      	movs	r2, #10
   d4330:	4621      	mov	r1, r4
   d4332:	f003 f95a 	bl	d75ea <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d4336:	f003 ff87 	bl	d8248 <_Z16_fetch_usbserialv>
   d433a:	4918      	ldr	r1, [pc, #96]	; (d439c <_Z7getDustv+0x134>)
   d433c:	f003 f936 	bl	d75ac <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d4340:	f003 ff82 	bl	d8248 <_Z16_fetch_usbserialv>
   d4344:	eeb0 0a68 	vmov.f32	s0, s17
   d4348:	2102      	movs	r1, #2
   d434a:	f003 fa2d 	bl	d77a8 <_ZN5Print5printEfi>
        Serial.print(",");
   d434e:	f003 ff7b 	bl	d8248 <_Z16_fetch_usbserialv>
   d4352:	4912      	ldr	r1, [pc, #72]	; (d439c <_Z7getDustv+0x134>)
   d4354:	f003 f92a 	bl	d75ac <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d4358:	f003 ff76 	bl	d8248 <_Z16_fetch_usbserialv>
   d435c:	2102      	movs	r1, #2
   d435e:	eeb0 0a48 	vmov.f32	s0, s16
   d4362:	f003 fa3b 	bl	d77dc <_ZN5Print7printlnEfi>
   d4366:	f002 fbb7 	bl	d6ad8 <HAL_Timer_Get_Milli_Seconds>
  float concentration = -1;

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
   d436a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d436e:	eeb4 8a67 	vcmp.f32	s16, s15
   d4372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4376:	4605      	mov	r5, r0
   d4378:	d081      	beq.n	d427e <_Z7getDustv+0x16>
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
}
   d437a:	eeb0 0a48 	vmov.f32	s0, s16
   d437e:	ecbd 8b02 	vpop	{d8}
   d4382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4386:	bf00      	nop
   d4388:	00000000 	.word	0x00000000
   d438c:	40080000 	.word	0x40080000
   d4390:	3d70a3d7 	.word	0x3d70a3d7
   d4394:	3fe3d70a 	.word	0x3fe3d70a
   d4398:	44020000 	.word	0x44020000
   d439c:	000dc1b9 	.word	0x000dc1b9
   d43a0:	00000000 	.word	0x00000000
   d43a4:	41124f80 	.word	0x41124f80
   d43a8:	9999999a 	.word	0x9999999a
   d43ac:	3ff19999 	.word	0x3ff19999
   d43b0:	66666666 	.word	0x66666666
   d43b4:	400e6666 	.word	0x400e6666

000d43b8 <_Z10printhellov>:
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
}

void printhello() {
   d43b8:	b510      	push	{r4, lr}
  display.clearDisplay();
   d43ba:	4c19      	ldr	r4, [pc, #100]	; (d4420 <_Z10printhellov+0x68>)
   d43bc:	4620      	mov	r0, r4
   d43be:	f001 ff5f 	bl	d6280 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d43c2:	2200      	movs	r2, #0
   d43c4:	4611      	mov	r1, r2
   d43c6:	4620      	mov	r0, r4
   d43c8:	2301      	movs	r3, #1
   d43ca:	f001 fef9 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d43ce:	4620      	mov	r0, r4
   d43d0:	2301      	movs	r3, #1
   d43d2:	2200      	movs	r2, #0
   d43d4:	217f      	movs	r1, #127	; 0x7f
   d43d6:	f001 fef3 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d43da:	4620      	mov	r0, r4
   d43dc:	2301      	movs	r3, #1
   d43de:	223f      	movs	r2, #63	; 0x3f
   d43e0:	2100      	movs	r1, #0
   d43e2:	f001 feed 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d43e6:	2301      	movs	r3, #1
   d43e8:	223f      	movs	r2, #63	; 0x3f
   d43ea:	4620      	mov	r0, r4
   d43ec:	217f      	movs	r1, #127	; 0x7f
   d43ee:	f001 fee7 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  // display a line of text
  display.setTextSize(1);
   d43f2:	4620      	mov	r0, r4
   d43f4:	2101      	movs	r1, #1
   d43f6:	f002 fa9d 	bl	d6934 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d43fa:	4620      	mov	r0, r4
   d43fc:	2101      	movs	r1, #1
   d43fe:	f002 fa9e 	bl	d693e <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d4402:	4620      	mov	r0, r4
   d4404:	221e      	movs	r2, #30
   d4406:	211b      	movs	r1, #27
   d4408:	f002 fa91 	bl	d692e <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d440c:	4620      	mov	r0, r4
   d440e:	4905      	ldr	r1, [pc, #20]	; (d4424 <_Z10printhellov+0x6c>)
   d4410:	f003 f8cc 	bl	d75ac <_ZN5Print5printEPKc>
  display.display();
   d4414:	4620      	mov	r0, r4
   d4416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d441a:	f002 b853 	b.w	d64c4 <_ZN16Adafruit_SSD13067displayEv>
   d441e:	bf00      	nop
   d4420:	2003e2c8 	.word	0x2003e2c8
   d4424:	000dc1bb 	.word	0x000dc1bb

000d4428 <setup>:
int button;
int i;

int delayStart;

void setup() {
   d4428:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d442a:	f003 ff0d 	bl	d8248 <_Z16_fetch_usbserialv>
   d442e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4432:	f003 fefd 	bl	d8230 <_ZN9USBSerial5beginEl>

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4436:	223c      	movs	r2, #60	; 0x3c
   d4438:	2102      	movs	r1, #2
   d443a:	4834      	ldr	r0, [pc, #208]	; (d450c <setup+0xe4>)
  display.clearDisplay();
  display.display();
  printhello();
  
  pinMode(soilPin,INPUT);
  pinMode(pumpPin,OUTPUT);
   d443c:	4c34      	ldr	r4, [pc, #208]	; (d4510 <setup+0xe8>)

void setup() {
  Serial.begin(9600);

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d443e:	f001 ff6f 	bl	d6320 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d4442:	4832      	ldr	r0, [pc, #200]	; (d450c <setup+0xe4>)
   d4444:	f001 ff1c 	bl	d6280 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4448:	4830      	ldr	r0, [pc, #192]	; (d450c <setup+0xe4>)
   d444a:	f002 f83b 	bl	d64c4 <_ZN16Adafruit_SSD13067displayEv>
  printhello();
   d444e:	f7ff ffb3 	bl	d43b8 <_Z10printhellov>
  
  pinMode(soilPin,INPUT);
   d4452:	4b30      	ldr	r3, [pc, #192]	; (d4514 <setup+0xec>)
   d4454:	2100      	movs	r1, #0
   d4456:	8818      	ldrh	r0, [r3, #0]
   d4458:	f004 fcd6 	bl	d8e08 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d445c:	2101      	movs	r1, #1
   d445e:	8820      	ldrh	r0, [r4, #0]
   d4460:	f004 fcd2 	bl	d8e08 <pinMode>
  pinMode(D7,OUTPUT);
   d4464:	2101      	movs	r1, #1
   d4466:	2007      	movs	r0, #7
   d4468:	f004 fcce 	bl	d8e08 <pinMode>
  digitalWrite(pumpPin,LOW);
   d446c:	2100      	movs	r1, #0
   d446e:	8820      	ldrh	r0, [r4, #0]
   d4470:	f004 fcdb 	bl	d8e2a <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d4474:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4478:	f003 fa10 	bl	d789c <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d447c:	f002 fd30 	bl	d6ee0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4480:	b110      	cbz	r0, d4488 <setup+0x60>
            return false;
        }
        return spark_sync_time(NULL);
   d4482:	2000      	movs	r0, #0
   d4484:	f002 fd3c 	bl	d6f00 <spark_sync_time>
  Particle.syncTime(); 

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4488:	4923      	ldr	r1, [pc, #140]	; (d4518 <setup+0xf0>)
   d448a:	4824      	ldr	r0, [pc, #144]	; (d451c <setup+0xf4>)
   d448c:	f001 f984 	bl	d5798 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

  // Initialize BME280
  Serial.println(F("BME280 test"));
   d4490:	f003 feda 	bl	d8248 <_Z16_fetch_usbserialv>
   d4494:	4922      	ldr	r1, [pc, #136]	; (d4520 <setup+0xf8>)
   d4496:	f003 f8a6 	bl	d75e6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  status = bme.begin(0x76);
   d449a:	2176      	movs	r1, #118	; 0x76
   d449c:	4821      	ldr	r0, [pc, #132]	; (d4524 <setup+0xfc>)
   d449e:	f001 f821 	bl	d54e4 <_ZN15Adafruit_BME2805beginEh>
   d44a2:	4b21      	ldr	r3, [pc, #132]	; (d4528 <setup+0x100>)
   d44a4:	6018      	str	r0, [r3, #0]
  if (!status)
   d44a6:	bb78      	cbnz	r0, d4508 <setup+0xe0>
  {
    Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d44a8:	f003 fece 	bl	d8248 <_Z16_fetch_usbserialv>
   d44ac:	491f      	ldr	r1, [pc, #124]	; (d452c <setup+0x104>)
   d44ae:	f003 f890 	bl	d75d2 <_ZN5Print7printlnEPKc>
    Serial.print("SensorID was: 0x");
   d44b2:	f003 fec9 	bl	d8248 <_Z16_fetch_usbserialv>
   d44b6:	491e      	ldr	r1, [pc, #120]	; (d4530 <setup+0x108>)
   d44b8:	f003 f878 	bl	d75ac <_ZN5Print5printEPKc>
    Serial.println(bme.sensorID(), 16);
   d44bc:	f003 fec4 	bl	d8248 <_Z16_fetch_usbserialv>
   d44c0:	4604      	mov	r4, r0
   d44c2:	4818      	ldr	r0, [pc, #96]	; (d4524 <setup+0xfc>)
   d44c4:	f000 fbc6 	bl	d4c54 <_ZN15Adafruit_BME2808sensorIDEv>
   d44c8:	2210      	movs	r2, #16
   d44ca:	4601      	mov	r1, r0
   d44cc:	4620      	mov	r0, r4
   d44ce:	f003 f88c 	bl	d75ea <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d44d2:	4620      	mov	r0, r4
   d44d4:	f003 f871 	bl	d75ba <_ZN5Print7printlnEv>
    Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d44d8:	f003 feb6 	bl	d8248 <_Z16_fetch_usbserialv>
   d44dc:	4915      	ldr	r1, [pc, #84]	; (d4534 <setup+0x10c>)
   d44de:	f003 f865 	bl	d75ac <_ZN5Print5printEPKc>
    Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d44e2:	f003 feb1 	bl	d8248 <_Z16_fetch_usbserialv>
   d44e6:	4914      	ldr	r1, [pc, #80]	; (d4538 <setup+0x110>)
   d44e8:	f003 f860 	bl	d75ac <_ZN5Print5printEPKc>
    Serial.print("        ID of 0x60 represents a BME 280.\n");
   d44ec:	f003 feac 	bl	d8248 <_Z16_fetch_usbserialv>
   d44f0:	4912      	ldr	r1, [pc, #72]	; (d453c <setup+0x114>)
   d44f2:	f003 f85b 	bl	d75ac <_ZN5Print5printEPKc>
    Serial.print("        ID of 0x61 represents a BME 680.\n");
   d44f6:	f003 fea7 	bl	d8248 <_Z16_fetch_usbserialv>
   d44fa:	4911      	ldr	r1, [pc, #68]	; (d4540 <setup+0x118>)
   d44fc:	f003 f856 	bl	d75ac <_ZN5Print5printEPKc>
    while (1) delay(10);
   d4500:	200a      	movs	r0, #10
   d4502:	f003 fa3b 	bl	d797c <delay>
   d4506:	e7fb      	b.n	d4500 <setup+0xd8>
   d4508:	bd10      	pop	{r4, pc}
   d450a:	bf00      	nop
   d450c:	2003e2c8 	.word	0x2003e2c8
   d4510:	2003dc74 	.word	0x2003dc74
   d4514:	2003dc6c 	.word	0x2003dc6c
   d4518:	2003e290 	.word	0x2003e290
   d451c:	2003e1a8 	.word	0x2003e1a8
   d4520:	000dc1c9 	.word	0x000dc1c9
   d4524:	2003e32c 	.word	0x2003e32c
   d4528:	2003e2f0 	.word	0x2003e2f0
   d452c:	000dc1d5 	.word	0x000dc1d5
   d4530:	000dc21d 	.word	0x000dc21d
   d4534:	000dc22e 	.word	0x000dc22e
   d4538:	000dc275 	.word	0x000dc275
   d453c:	000dc29f 	.word	0x000dc29f
   d4540:	000dc2c9 	.word	0x000dc2c9

000d4544 <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4544:	4613      	mov	r3, r2
   d4546:	460a      	mov	r2, r1
   d4548:	2100      	movs	r1, #0
   d454a:	f003 b956 	b.w	d77fa <_ZN5Print11printf_implEbPKcz>
	...

000d4550 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4550:	b570      	push	{r4, r5, r6, lr}
   d4552:	4604      	mov	r4, r0
   d4554:	460e      	mov	r6, r1
   d4556:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4558:	f001 fc74 	bl	d5e44 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d455c:	2201      	movs	r2, #1
   d455e:	4631      	mov	r1, r6
   d4560:	4620      	mov	r0, r4
   d4562:	f001 fbe3 	bl	d5d2c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4566:	4620      	mov	r0, r4
   d4568:	213a      	movs	r1, #58	; 0x3a
   d456a:	f001 fb93 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d456e:	462a      	mov	r2, r5
   d4570:	4620      	mov	r0, r4
   d4572:	4902      	ldr	r1, [pc, #8]	; (d457c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d4574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4578:	f001 bbcb 	b.w	d5d12 <_ZN10JsonWriter13insertsprintfEPKcz>
   d457c:	000dd000 	.word	0x000dd000

000d4580 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4580:	b538      	push	{r3, r4, r5, lr}
   d4582:	4604      	mov	r4, r0
   d4584:	ed2d 8b02 	vpush	{d8}
   d4588:	460d      	mov	r5, r1
   d458a:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d458e:	f001 fc59 	bl	d5e44 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4592:	4629      	mov	r1, r5
   d4594:	4620      	mov	r0, r4
   d4596:	2201      	movs	r2, #1
   d4598:	f001 fbc8 	bl	d5d2c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d459c:	4620      	mov	r0, r4
   d459e:	213a      	movs	r1, #58	; 0x3a
   d45a0:	f001 fb78 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d45a4:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d45a8:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d45ac:	4620      	mov	r0, r4
	}
   d45ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d45b2:	f001 bc6b 	b.w	d5e8c <_ZN10JsonWriter11insertValueEf>
	...

000d45b8 <_Z18createEventPayLoadifffi>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
   d45b8:	b530      	push	{r4, r5, lr}
   d45ba:	ed2d 8b04 	vpush	{d8-d9}
   d45be:	b0d3      	sub	sp, #332	; 0x14c
   d45c0:	4605      	mov	r5, r0
   d45c2:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d45c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   d45c8:	a912      	add	r1, sp, #72	; 0x48
   d45ca:	a806      	add	r0, sp, #24
   d45cc:	eef0 8a60 	vmov.f32	s17, s1
   d45d0:	eeb0 8a41 	vmov.f32	s16, s2
   d45d4:	eeb0 9a40 	vmov.f32	s18, s0
   d45d8:	f001 fb4a 	bl	d5c70 <_ZN10JsonWriterC1EPcj>
   d45dc:	4b20      	ldr	r3, [pc, #128]	; (d4660 <_Z18createEventPayLoadifffi+0xa8>)
   d45de:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d45e0:	227d      	movs	r2, #125	; 0x7d
   d45e2:	217b      	movs	r1, #123	; 0x7b
   d45e4:	a806      	add	r0, sp, #24
   d45e6:	f001 fc38 	bl	d5e5a <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d45ea:	462a      	mov	r2, r5
   d45ec:	491d      	ldr	r1, [pc, #116]	; (d4664 <_Z18createEventPayLoadifffi+0xac>)
   d45ee:	a806      	add	r0, sp, #24
   d45f0:	f7ff ffae 	bl	d4550 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d45f4:	eeb0 0a49 	vmov.f32	s0, s18
   d45f8:	491b      	ldr	r1, [pc, #108]	; (d4668 <_Z18createEventPayLoadifffi+0xb0>)
   d45fa:	a806      	add	r0, sp, #24
   d45fc:	f7ff ffc0 	bl	d4580 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d4600:	eeb0 0a68 	vmov.f32	s0, s17
   d4604:	4919      	ldr	r1, [pc, #100]	; (d466c <_Z18createEventPayLoadifffi+0xb4>)
   d4606:	a806      	add	r0, sp, #24
   d4608:	f7ff ffba 	bl	d4580 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d460c:	eeb0 0a48 	vmov.f32	s0, s16
   d4610:	4917      	ldr	r1, [pc, #92]	; (d4670 <_Z18createEventPayLoadifffi+0xb8>)
   d4612:	a806      	add	r0, sp, #24
   d4614:	f7ff ffb4 	bl	d4580 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Plant Watered", waterED);
   d4618:	4622      	mov	r2, r4
   d461a:	4916      	ldr	r1, [pc, #88]	; (d4674 <_Z18createEventPayLoadifffi+0xbc>)
   d461c:	a806      	add	r0, sp, #24
   d461e:	f7ff ff97 	bl	d4550 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4622:	a806      	add	r0, sp, #24
   d4624:	f001 fb44 	bl	d5cb0 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4628:	9b07      	ldr	r3, [sp, #28]
   d462a:	9303      	str	r3, [sp, #12]
   d462c:	4b12      	ldr	r3, [pc, #72]	; (d4678 <_Z18createEventPayLoadifffi+0xc0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d462e:	9a03      	ldr	r2, [sp, #12]
   d4630:	781b      	ldrb	r3, [r3, #0]
   d4632:	f88d 3000 	strb.w	r3, [sp]
   d4636:	a804      	add	r0, sp, #16
   d4638:	233c      	movs	r3, #60	; 0x3c
   d463a:	4910      	ldr	r1, [pc, #64]	; (d467c <_Z18createEventPayLoadifffi+0xc4>)
   d463c:	f003 fb98 	bl	d7d70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4640:	9805      	ldr	r0, [sp, #20]
   d4642:	b128      	cbz	r0, d4650 <_Z18createEventPayLoadifffi+0x98>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4644:	6843      	ldr	r3, [r0, #4]
   d4646:	3b01      	subs	r3, #1
   d4648:	6043      	str	r3, [r0, #4]
   d464a:	b90b      	cbnz	r3, d4650 <_Z18createEventPayLoadifffi+0x98>
   d464c:	f7ff fd55 	bl	d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
  JsonWriterStatic<256> jw;
   d4650:	a806      	add	r0, sp, #24
   d4652:	f7ff fd3d 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d4656:	b053      	add	sp, #332	; 0x14c
   d4658:	ecbd 8b04 	vpop	{d8-d9}
   d465c:	bd30      	pop	{r4, r5, pc}
   d465e:	bf00      	nop
   d4660:	000dc140 	.word	0x000dc140
   d4664:	000dc486 	.word	0x000dc486
   d4668:	000dc468 	.word	0x000dc468
   d466c:	000dc4b9 	.word	0x000dc4b9
   d4670:	000dc4d4 	.word	0x000dc4d4
   d4674:	000dc2f3 	.word	0x000dc2f3
   d4678:	2003e2ec 	.word	0x2003e2ec
   d467c:	000dc301 	.word	0x000dc301

000d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4682:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d4684:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4688:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d468a:	f006 f881 	bl	da790 <__aeabi_f2d>
   d468e:	462a      	mov	r2, r5
   d4690:	e9cd 0100 	strd	r0, r1, [sp]
   d4694:	2100      	movs	r1, #0
   d4696:	4620      	mov	r0, r4
   d4698:	f003 f8af 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
    }
   d469c:	b003      	add	sp, #12
   d469e:	bd30      	pop	{r4, r5, pc}

000d46a0 <_Z11printValuesv>:

void printValues()
{
   d46a0:	b507      	push	{r0, r1, r2, lr}
  Serial.printf("Temperature Value = %0.2f \n",temp);
   d46a2:	f003 fdd1 	bl	d8248 <_Z16_fetch_usbserialv>
   d46a6:	4b18      	ldr	r3, [pc, #96]	; (d4708 <_Z11printValuesv+0x68>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d46a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ac:	2100      	movs	r1, #0
   d46ae:	e9cd 2300 	strd	r2, r3, [sp]
   d46b2:	4a16      	ldr	r2, [pc, #88]	; (d470c <_Z11printValuesv+0x6c>)
   d46b4:	f003 f8a1 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Pressure Value = %0.2f \n",pres);
   d46b8:	f003 fdc6 	bl	d8248 <_Z16_fetch_usbserialv>
   d46bc:	4b14      	ldr	r3, [pc, #80]	; (d4710 <_Z11printValuesv+0x70>)
   d46be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c2:	2100      	movs	r1, #0
   d46c4:	e9cd 2300 	strd	r2, r3, [sp]
   d46c8:	4a12      	ldr	r2, [pc, #72]	; (d4714 <_Z11printValuesv+0x74>)
   d46ca:	f003 f896 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Humidity Value = %0.2f \n",hum);
   d46ce:	f003 fdbb 	bl	d8248 <_Z16_fetch_usbserialv>
   d46d2:	4b11      	ldr	r3, [pc, #68]	; (d4718 <_Z11printValuesv+0x78>)
   d46d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d8:	2100      	movs	r1, #0
   d46da:	e9cd 2300 	strd	r2, r3, [sp]
   d46de:	4a0f      	ldr	r2, [pc, #60]	; (d471c <_Z11printValuesv+0x7c>)
   d46e0:	f003 f88b 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Soil Moisture Value = %d \n",moist);
   d46e4:	f003 fdb0 	bl	d8248 <_Z16_fetch_usbserialv>
   d46e8:	4b0d      	ldr	r3, [pc, #52]	; (d4720 <_Z11printValuesv+0x80>)
   d46ea:	490e      	ldr	r1, [pc, #56]	; (d4724 <_Z11printValuesv+0x84>)
   d46ec:	681a      	ldr	r2, [r3, #0]
   d46ee:	f7ff ff29 	bl	d4544 <_ZN5Print6printfIIiEEEjPKcDpT_>
  Serial.printf("Dust Value = %0.2f \n",dust);
   d46f2:	f003 fda9 	bl	d8248 <_Z16_fetch_usbserialv>
   d46f6:	4b0c      	ldr	r3, [pc, #48]	; (d4728 <_Z11printValuesv+0x88>)
   d46f8:	490c      	ldr	r1, [pc, #48]	; (d472c <_Z11printValuesv+0x8c>)
   d46fa:	ed93 0a00 	vldr	s0, [r3]
   d46fe:	f7ff ffbf 	bl	d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>
}
   d4702:	b003      	add	sp, #12
   d4704:	f85d fb04 	ldr.w	pc, [sp], #4
   d4708:	2003e190 	.word	0x2003e190
   d470c:	000dc30a 	.word	0x000dc30a
   d4710:	2003e380 	.word	0x2003e380
   d4714:	000dc326 	.word	0x000dc326
   d4718:	2003e288 	.word	0x2003e288
   d471c:	000dc33f 	.word	0x000dc33f
   d4720:	2003e370 	.word	0x2003e370
   d4724:	000dc358 	.word	0x000dc358
   d4728:	2003e304 	.word	0x2003e304
   d472c:	000dc373 	.word	0x000dc373

000d4730 <_Z9oledprintffffi>:
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4730:	b538      	push	{r3, r4, r5, lr}

   // initialize and clear display
  display.clearDisplay();
   d4732:	4c32      	ldr	r4, [pc, #200]	; (d47fc <_Z9oledprintffffi+0xcc>)
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4734:	ed2d 8b04 	vpush	{d8-d9}
   d4738:	4605      	mov	r5, r0

   // initialize and clear display
  display.clearDisplay();
   d473a:	4620      	mov	r0, r4
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d473c:	eeb0 9a60 	vmov.f32	s18, s1
   d4740:	eef0 8a41 	vmov.f32	s17, s2
   d4744:	eeb0 8a61 	vmov.f32	s16, s3
   d4748:	eef0 9a40 	vmov.f32	s19, s0

   // initialize and clear display
  display.clearDisplay();
   d474c:	f001 fd98 	bl	d6280 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4750:	4620      	mov	r0, r4
   d4752:	f001 feb7 	bl	d64c4 <_ZN16Adafruit_SSD13067displayEv>

  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d4756:	2200      	movs	r2, #0
   d4758:	4611      	mov	r1, r2
   d475a:	4620      	mov	r0, r4
   d475c:	2301      	movs	r3, #1
   d475e:	f001 fd2f 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d4762:	4620      	mov	r0, r4
   d4764:	2301      	movs	r3, #1
   d4766:	2200      	movs	r2, #0
   d4768:	217f      	movs	r1, #127	; 0x7f
   d476a:	f001 fd29 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d476e:	4620      	mov	r0, r4
   d4770:	2301      	movs	r3, #1
   d4772:	223f      	movs	r2, #63	; 0x3f
   d4774:	2100      	movs	r1, #0
   d4776:	f001 fd23 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d477a:	2301      	movs	r3, #1
   d477c:	223f      	movs	r2, #63	; 0x3f
   d477e:	4620      	mov	r0, r4
   d4780:	217f      	movs	r1, #127	; 0x7f
   d4782:	f001 fd1d 	bl	d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>

  // display a line of text
  display.setTextSize(1);
   d4786:	4620      	mov	r0, r4
   d4788:	2101      	movs	r1, #1
   d478a:	f002 f8d3 	bl	d6934 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d478e:	4620      	mov	r0, r4
   d4790:	2101      	movs	r1, #1
   d4792:	f002 f8d4 	bl	d693e <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,5);
   d4796:	4620      	mov	r0, r4
   d4798:	2205      	movs	r2, #5
   d479a:	2100      	movs	r1, #0
   d479c:	f002 f8c7 	bl	d692e <_ZN12Adafruit_GFX9setCursorEss>
   d47a0:	4a17      	ldr	r2, [pc, #92]	; (d4800 <_Z9oledprintffffi+0xd0>)
   d47a2:	2100      	movs	r1, #0
   d47a4:	4620      	mov	r0, r4
   d47a6:	f003 f828 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  display.printf("Environmental Reading");
  display.setCursor(0,18);
   d47aa:	2212      	movs	r2, #18
   d47ac:	4620      	mov	r0, r4
   d47ae:	2100      	movs	r1, #0
   d47b0:	f002 f8bd 	bl	d692e <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Temperature(F) %0.2f\n",Otemp);
   d47b4:	eeb0 0a69 	vmov.f32	s0, s19
   d47b8:	4912      	ldr	r1, [pc, #72]	; (d4804 <_Z9oledprintffffi+0xd4>)
   d47ba:	4620      	mov	r0, r4
   d47bc:	f7ff ff60 	bl	d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Pressure (hPa) %0.2f\n",Opres);
   d47c0:	eeb0 0a49 	vmov.f32	s0, s18
   d47c4:	4910      	ldr	r1, [pc, #64]	; (d4808 <_Z9oledprintffffi+0xd8>)
   d47c6:	4620      	mov	r0, r4
   d47c8:	f7ff ff5a 	bl	d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
   d47cc:	eeb0 0a68 	vmov.f32	s0, s17
   d47d0:	490e      	ldr	r1, [pc, #56]	; (d480c <_Z9oledprintffffi+0xdc>)
   d47d2:	4620      	mov	r0, r4
   d47d4:	f7ff ff54 	bl	d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Dust Level: %0.2f \n",Odust);
   d47d8:	eeb0 0a48 	vmov.f32	s0, s16
   d47dc:	490c      	ldr	r1, [pc, #48]	; (d4810 <_Z9oledprintffffi+0xe0>)
   d47de:	4620      	mov	r0, r4
   d47e0:	f7ff ff4e 	bl	d4680 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Moisture: %d \n",Omoist);
   d47e4:	462a      	mov	r2, r5
   d47e6:	4620      	mov	r0, r4
   d47e8:	490a      	ldr	r1, [pc, #40]	; (d4814 <_Z9oledprintffffi+0xe4>)
   d47ea:	f7ff feab 	bl	d4544 <_ZN5Print6printfIIiEEEjPKcDpT_>
  display.display();
}
   d47ee:	ecbd 8b04 	vpop	{d8-d9}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d47f2:	4620      	mov	r0, r4
}
   d47f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d47f8:	f001 be64 	b.w	d64c4 <_ZN16Adafruit_SSD13067displayEv>
   d47fc:	2003e2c8 	.word	0x2003e2c8
   d4800:	000dc388 	.word	0x000dc388
   d4804:	000dc39e 	.word	0x000dc39e
   d4808:	000dc3b4 	.word	0x000dc3b4
   d480c:	000dc3ca 	.word	0x000dc3ca
   d4810:	000dc3e1 	.word	0x000dc3e1
   d4814:	000dc3f5 	.word	0x000dc3f5

000d4818 <loop>:
    while (1) delay(10);
  }

}

void loop() {
   d4818:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  moist = analogRead(soilPin);
   d481c:	4b7c      	ldr	r3, [pc, #496]	; (d4a10 <loop+0x1f8>)
  watered = waterPlant(moist,waterTime);
   d481e:	f8df 9240 	ldr.w	r9, [pc, #576]	; d4a60 <loop+0x248>
  }

}

void loop() {
  moist = analogRead(soilPin);
   d4822:	8818      	ldrh	r0, [r3, #0]
   d4824:	4c7b      	ldr	r4, [pc, #492]	; (d4a14 <loop+0x1fc>)
  watered = waterPlant(moist,waterTime);
   d4826:	4e7c      	ldr	r6, [pc, #496]	; (d4a18 <loop+0x200>)
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4828:	4d7c      	ldr	r5, [pc, #496]	; (d4a1c <loop+0x204>)
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d482a:	4f7d      	ldr	r7, [pc, #500]	; (d4a20 <loop+0x208>)
  hum = bme.readHumidity();
   d482c:	f8df a234 	ldr.w	sl, [pc, #564]	; d4a64 <loop+0x24c>
  dust = getDust();
   d4830:	f8df 8234 	ldr.w	r8, [pc, #564]	; d4a68 <loop+0x250>
  }

}

void loop() {
  moist = analogRead(soilPin);
   d4834:	f004 fb25 	bl	d8e82 <analogRead>
  watered = waterPlant(moist,waterTime);
   d4838:	f8d9 1000 	ldr.w	r1, [r9]
  }

}

void loop() {
  moist = analogRead(soilPin);
   d483c:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist,waterTime);
   d483e:	f7ff fc87 	bl	d4150 <_Z10waterPlantii>
   d4842:	6030      	str	r0, [r6, #0]
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4844:	4877      	ldr	r0, [pc, #476]	; (d4a24 <loop+0x20c>)
   d4846:	f000 fad3 	bl	d4df0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d484a:	ee10 0a10 	vmov	r0, s0
   d484e:	f005 ff9f 	bl	da790 <__aeabi_f2d>
   d4852:	a36b      	add	r3, pc, #428	; (adr r3, d4a00 <loop+0x1e8>)
   d4854:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4858:	f005 ffee 	bl	da838 <__aeabi_dmul>
   d485c:	2200      	movs	r2, #0
   d485e:	4b72      	ldr	r3, [pc, #456]	; (d4a28 <loop+0x210>)
   d4860:	f005 fe38 	bl	da4d4 <__adddf3>
   d4864:	e9c5 0100 	strd	r0, r1, [r5]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4868:	486e      	ldr	r0, [pc, #440]	; (d4a24 <loop+0x20c>)
   d486a:	f000 faef 	bl	d4e4c <_ZN15Adafruit_BME28012readPressureEv>
   d486e:	eddf 7a6f 	vldr	s15, [pc, #444]	; d4a2c <loop+0x214>
   d4872:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d4876:	ee17 0a10 	vmov	r0, s14
   d487a:	f005 ff89 	bl	da790 <__aeabi_f2d>
   d487e:	a362      	add	r3, pc, #392	; (adr r3, d4a08 <loop+0x1f0>)
   d4880:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4884:	f005 ffd8 	bl	da838 <__aeabi_dmul>
   d4888:	2200      	movs	r2, #0
   d488a:	4b69      	ldr	r3, [pc, #420]	; (d4a30 <loop+0x218>)
   d488c:	f005 fe22 	bl	da4d4 <__adddf3>
   d4890:	e9c7 0100 	strd	r0, r1, [r7]
  hum = bme.readHumidity();
   d4894:	4863      	ldr	r0, [pc, #396]	; (d4a24 <loop+0x20c>)
   d4896:	f000 fc21 	bl	d50dc <_ZN15Adafruit_BME28012readHumidityEv>
   d489a:	ee10 0a10 	vmov	r0, s0
   d489e:	f005 ff77 	bl	da790 <__aeabi_f2d>
   d48a2:	e9ca 0100 	strd	r0, r1, [sl]
  dust = getDust();
   d48a6:	f7ff fcdf 	bl	d4268 <_Z7getDustv>
  printMoist(moist);
   d48aa:	6820      	ldr	r0, [r4, #0]
  moist = analogRead(soilPin);
  watered = waterPlant(moist,waterTime);
  temp = (bme.readTemperature()*(9.0/5.0))+32;
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
  hum = bme.readHumidity();
  dust = getDust();
   d48ac:	ed88 0a00 	vstr	s0, [r8]
  printMoist(moist);
   d48b0:	f7ff fc86 	bl	d41c0 <_Z10printMoisti>
  printValues();
   d48b4:	f7ff fef4 	bl	d46a0 <_Z11printValuesv>

  //Publish to Adafruit.io
  if(mqtt.Update()) {
   d48b8:	485e      	ldr	r0, [pc, #376]	; (d4a34 <loop+0x21c>)
   d48ba:	f000 fe9e 	bl	d55fa <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d48be:	b318      	cbz	r0, d4908 <loop+0xf0>
    Htemp.publish(temp); 
   d48c0:	2102      	movs	r1, #2
   d48c2:	ed95 0b00 	vldr	d0, [r5]
   d48c6:	485c      	ldr	r0, [pc, #368]	; (d4a38 <loop+0x220>)
   d48c8:	f001 f96e 	bl	d5ba8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hpres.publish(pres);
   d48cc:	2102      	movs	r1, #2
   d48ce:	ed97 0b00 	vldr	d0, [r7]
   d48d2:	485a      	ldr	r0, [pc, #360]	; (d4a3c <loop+0x224>)
   d48d4:	f001 f968 	bl	d5ba8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hhum.publish(hum);
   d48d8:	ed9a 0b00 	vldr	d0, [sl]
   d48dc:	2102      	movs	r1, #2
   d48de:	4858      	ldr	r0, [pc, #352]	; (d4a40 <loop+0x228>)
   d48e0:	f001 f962 	bl	d5ba8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hmoist.publish(moist);
   d48e4:	6821      	ldr	r1, [r4, #0]
   d48e6:	4857      	ldr	r0, [pc, #348]	; (d4a44 <loop+0x22c>)
   d48e8:	f001 f95c 	bl	d5ba4 <_ZN21Adafruit_MQTT_Publish7publishEi>
    Hwater.publish(watered);
   d48ec:	6831      	ldr	r1, [r6, #0]
   d48ee:	4856      	ldr	r0, [pc, #344]	; (d4a48 <loop+0x230>)
   d48f0:	f001 f958 	bl	d5ba4 <_ZN21Adafruit_MQTT_Publish7publishEi>
    Hdust.publish(dust);
   d48f4:	f8d8 0000 	ldr.w	r0, [r8]
   d48f8:	f005 ff4a 	bl	da790 <__aeabi_f2d>
   d48fc:	ec41 0b10 	vmov	d0, r0, r1
   d4900:	2102      	movs	r1, #2
   d4902:	4852      	ldr	r0, [pc, #328]	; (d4a4c <loop+0x234>)
   d4904:	f001 f950 	bl	d5ba8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
  } 

  oledprint(temp, pres, hum, dust, moist);
   d4908:	e9da 0100 	ldrd	r0, r1, [sl]
   d490c:	f006 fa8c 	bl	dae28 <__aeabi_d2f>
   d4910:	9001      	str	r0, [sp, #4]
   d4912:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4916:	f006 fa87 	bl	dae28 <__aeabi_d2f>
   d491a:	9000      	str	r0, [sp, #0]
   d491c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4920:	f006 fa82 	bl	dae28 <__aeabi_d2f>
   d4924:	edd8 1a00 	vldr	s3, [r8]
   d4928:	ed9d 1a01 	vldr	s2, [sp, #4]
   d492c:	eddd 0a00 	vldr	s1, [sp]
  // Look for manual water, 
  for(i=0;i<60;i++) {
    Adafruit_MQTT_Subscribe *subscription;
    Serial.printf("x%i ",i);
    while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
      if (subscription == &onoffbutton) {
   d4930:	f8df 8138 	ldr.w	r8, [pc, #312]	; d4a6c <loop+0x254>
    Hmoist.publish(moist);
    Hwater.publish(watered);
    Hdust.publish(dust);
  } 

  oledprint(temp, pres, hum, dust, moist);
   d4934:	ee00 0a10 	vmov	s0, r0
   d4938:	6820      	ldr	r0, [r4, #0]
   d493a:	f7ff fef9 	bl	d4730 <_Z9oledprintffffi>
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);
   d493e:	e9da 0100 	ldrd	r0, r1, [sl]
   d4942:	f006 fa71 	bl	dae28 <__aeabi_d2f>
   d4946:	9001      	str	r0, [sp, #4]
   d4948:	e9d7 0100 	ldrd	r0, r1, [r7]
   d494c:	f006 fa6c 	bl	dae28 <__aeabi_d2f>
   d4950:	9000      	str	r0, [sp, #0]
   d4952:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4956:	f006 fa67 	bl	dae28 <__aeabi_d2f>

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d495a:	4d3d      	ldr	r5, [pc, #244]	; (d4a50 <loop+0x238>)
  } 

  oledprint(temp, pres, hum, dust, moist);
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);
   d495c:	6831      	ldr	r1, [r6, #0]
   d495e:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4962:	eddd 0a00 	vldr	s1, [sp]
   d4966:	ee00 0a10 	vmov	s0, r0
   d496a:	6820      	ldr	r0, [r4, #0]
   d496c:	f7ff fe24 	bl	d45b8 <_Z18createEventPayLoadifffi>

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d4970:	2300      	movs	r3, #0
   d4972:	602b      	str	r3, [r5, #0]
   d4974:	682b      	ldr	r3, [r5, #0]
   d4976:	2b3b      	cmp	r3, #59	; 0x3b
   d4978:	dc3d      	bgt.n	d49f6 <loop+0x1de>
    Adafruit_MQTT_Subscribe *subscription;
    Serial.printf("x%i ",i);
   d497a:	f003 fc65 	bl	d8248 <_Z16_fetch_usbserialv>
   d497e:	4b34      	ldr	r3, [pc, #208]	; (d4a50 <loop+0x238>)
   d4980:	4934      	ldr	r1, [pc, #208]	; (d4a54 <loop+0x23c>)
   d4982:	681a      	ldr	r2, [r3, #0]
   d4984:	f7ff fdde 	bl	d4544 <_ZN5Print6printfIIiEEEjPKcDpT_>
    while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d4988:	f242 7110 	movw	r1, #10000	; 0x2710
   d498c:	4829      	ldr	r0, [pc, #164]	; (d4a34 <loop+0x21c>)
   d498e:	f000 ff1f 	bl	d57d0 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d4992:	b360      	cbz	r0, d49ee <loop+0x1d6>
      if (subscription == &onoffbutton) {
   d4994:	4540      	cmp	r0, r8
   d4996:	d1f7      	bne.n	d4988 <loop+0x170>
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d4998:	f108 0005 	add.w	r0, r8, #5
   d499c:	f006 fda2 	bl	db4e4 <atoi>
   d49a0:	4f2d      	ldr	r7, [pc, #180]	; (d4a58 <loop+0x240>)
   d49a2:	6038      	str	r0, [r7, #0]
        Serial.printf("Button State is %i \n",button);
   d49a4:	f003 fc50 	bl	d8248 <_Z16_fetch_usbserialv>
   d49a8:	492c      	ldr	r1, [pc, #176]	; (d4a5c <loop+0x244>)
   d49aa:	683a      	ldr	r2, [r7, #0]
   d49ac:	f7ff fdca 	bl	d4544 <_ZN5Print6printfIIiEEEjPKcDpT_>
        if(button==1) {
   d49b0:	6839      	ldr	r1, [r7, #0]
   d49b2:	2901      	cmp	r1, #1
   d49b4:	d1e8      	bne.n	d4988 <loop+0x170>
          digitalWrite(D7,1);
   d49b6:	2007      	movs	r0, #7
   d49b8:	f004 fa37 	bl	d8e2a <digitalWrite>
          watered = waterPlant(3000,waterTime);
   d49bc:	f8d9 1000 	ldr.w	r1, [r9]
   d49c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d49c4:	f7ff fbc4 	bl	d4150 <_Z10waterPlantii>
   d49c8:	6030      	str	r0, [r6, #0]
          if(mqtt.Update()) {
   d49ca:	481a      	ldr	r0, [pc, #104]	; (d4a34 <loop+0x21c>)
   d49cc:	f000 fe15 	bl	d55fa <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d49d0:	b140      	cbz	r0, d49e4 <loop+0x1cc>
            Hmoist.publish(moist);
   d49d2:	6821      	ldr	r1, [r4, #0]
   d49d4:	481b      	ldr	r0, [pc, #108]	; (d4a44 <loop+0x22c>)
   d49d6:	f001 f8e5 	bl	d5ba4 <_ZN21Adafruit_MQTT_Publish7publishEi>
            Hwater.publish(watered);  
   d49da:	4b0f      	ldr	r3, [pc, #60]	; (d4a18 <loop+0x200>)
   d49dc:	481a      	ldr	r0, [pc, #104]	; (d4a48 <loop+0x230>)
   d49de:	6819      	ldr	r1, [r3, #0]
   d49e0:	f001 f8e0 	bl	d5ba4 <_ZN21Adafruit_MQTT_Publish7publishEi>
          } 
          digitalWrite(D7,0);
   d49e4:	2100      	movs	r1, #0
   d49e6:	2007      	movs	r0, #7
   d49e8:	f004 fa1f 	bl	d8e2a <digitalWrite>
   d49ec:	e7cc      	b.n	d4988 <loop+0x170>
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d49ee:	682b      	ldr	r3, [r5, #0]
   d49f0:	3301      	adds	r3, #1
   d49f2:	602b      	str	r3, [r5, #0]
   d49f4:	e7be      	b.n	d4974 <loop+0x15c>
          digitalWrite(D7,0);
        }
      }
    }
  }    
}
   d49f6:	b002      	add	sp, #8
   d49f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d49fc:	f3af 8000 	nop.w
   d4a00:	cccccccd 	.word	0xcccccccd
   d4a04:	3ffccccc 	.word	0x3ffccccc
   d4a08:	c100e6b0 	.word	0xc100e6b0
   d4a0c:	3f9e3d1c 	.word	0x3f9e3d1c
   d4a10:	2003dc6c 	.word	0x2003dc6c
   d4a14:	2003e370 	.word	0x2003e370
   d4a18:	2003e328 	.word	0x2003e328
   d4a1c:	2003e190 	.word	0x2003e190
   d4a20:	2003e380 	.word	0x2003e380
   d4a24:	2003e32c 	.word	0x2003e32c
   d4a28:	40400000 	.word	0x40400000
   d4a2c:	42c80000 	.word	0x42c80000
   d4a30:	40140000 	.word	0x40140000
   d4a34:	2003e1a8 	.word	0x2003e1a8
   d4a38:	2003e308 	.word	0x2003e308
   d4a3c:	2003e27c 	.word	0x2003e27c
   d4a40:	2003e2f8 	.word	0x2003e2f8
   d4a44:	2003e180 	.word	0x2003e180
   d4a48:	2003e158 	.word	0x2003e158
   d4a4c:	2003e374 	.word	0x2003e374
   d4a50:	2003e2f4 	.word	0x2003e2f4
   d4a54:	000dc404 	.word	0x000dc404
   d4a58:	2003e314 	.word	0x2003e314
   d4a5c:	000dc409 	.word	0x000dc409
   d4a60:	2003dc70 	.word	0x2003dc70
   d4a64:	2003e288 	.word	0x2003e288
   d4a68:	2003e304 	.word	0x2003e304
   d4a6c:	2003e290 	.word	0x2003e290

000d4a70 <_ZN16Adafruit_SSD1306D0Ev>:
   d4a70:	b510      	push	{r4, lr}
   d4a72:	2124      	movs	r1, #36	; 0x24
   d4a74:	4604      	mov	r4, r0
   d4a76:	f004 fa8f 	bl	d8f98 <_ZdlPvj>
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd10      	pop	{r4, pc}

000d4a7e <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4a7e:	b510      	push	{r4, lr}
   d4a80:	21d4      	movs	r1, #212	; 0xd4
   d4a82:	4604      	mov	r4, r0
   d4a84:	f004 fa88 	bl	d8f98 <_ZdlPvj>
   d4a88:	4620      	mov	r0, r4
   d4a8a:	bd10      	pop	{r4, pc}

000d4a8c <_GLOBAL__sub_I_display>:
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a8e:	4b39      	ldr	r3, [pc, #228]	; (d4b74 <_GLOBAL__sub_I_display+0xe8>)
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d4a90:	4c39      	ldr	r4, [pc, #228]	; (d4b78 <_GLOBAL__sub_I_display+0xec>)
   d4a92:	4d3a      	ldr	r5, [pc, #232]	; (d4b7c <_GLOBAL__sub_I_display+0xf0>)




/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4a94:	4e3a      	ldr	r6, [pc, #232]	; (d4b80 <_GLOBAL__sub_I_display+0xf4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a96:	4f3b      	ldr	r7, [pc, #236]	; (d4b84 <_GLOBAL__sub_I_display+0xf8>)
   d4a98:	2201      	movs	r2, #1
   d4a9a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4a9c:	f001 ff6c 	bl	d6978 <HAL_Pin_Map>
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d4aa0:	f04f 31ff 	mov.w	r1, #4294967295
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	f001 fbd5 	bl	d6254 <_ZN16Adafruit_SSD1306C1Ea>
   d4aaa:	462a      	mov	r2, r5
   d4aac:	4936      	ldr	r1, [pc, #216]	; (d4b88 <_GLOBAL__sub_I_display+0xfc>)
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f004 fa64 	bl	d8f7c <__aeabi_atexit>




/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4ab4:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4ab6:	4c35      	ldr	r4, [pc, #212]	; (d4b8c <_GLOBAL__sub_I_display+0x100>)
   d4ab8:	f004 f870 	bl	d8b9c <_ZN9TCPClientC1Ev>
   d4abc:	462a      	mov	r2, r5
   d4abe:	4934      	ldr	r1, [pc, #208]	; (d4b90 <_GLOBAL__sub_I_display+0x104>)
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	f004 fa5b 	bl	d8f7c <__aeabi_atexit>
   d4ac6:	4b33      	ldr	r3, [pc, #204]	; (d4b94 <_GLOBAL__sub_I_display+0x108>)
   d4ac8:	9300      	str	r3, [sp, #0]
   d4aca:	f240 725b 	movw	r2, #1883	; 0x75b
   d4ace:	4b32      	ldr	r3, [pc, #200]	; (d4b98 <_GLOBAL__sub_I_display+0x10c>)
   d4ad0:	4932      	ldr	r1, [pc, #200]	; (d4b9c <_GLOBAL__sub_I_display+0x110>)
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	f000 fdc6 	bl	d5664 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4ad8:	4b31      	ldr	r3, [pc, #196]	; (d4ba0 <_GLOBAL__sub_I_display+0x114>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4ada:	4932      	ldr	r1, [pc, #200]	; (d4ba4 <_GLOBAL__sub_I_display+0x118>)
   d4adc:	6023      	str	r3, [r4, #0]
   d4ade:	462a      	mov	r2, r5
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4ae6:	f004 fa49 	bl	d8f7c <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4aea:	4621      	mov	r1, r4
   d4aec:	2300      	movs	r3, #0
   d4aee:	4a2e      	ldr	r2, [pc, #184]	; (d4ba8 <_GLOBAL__sub_I_display+0x11c>)
   d4af0:	482e      	ldr	r0, [pc, #184]	; (d4bac <_GLOBAL__sub_I_display+0x120>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4af2:	4e2f      	ldr	r6, [pc, #188]	; (d4bb0 <_GLOBAL__sub_I_display+0x124>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4af4:	f001 f842 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d4af8:	4621      	mov	r1, r4
   d4afa:	2300      	movs	r3, #0
   d4afc:	4a2d      	ldr	r2, [pc, #180]	; (d4bb4 <_GLOBAL__sub_I_display+0x128>)
   d4afe:	482e      	ldr	r0, [pc, #184]	; (d4bb8 <_GLOBAL__sub_I_display+0x12c>)
   d4b00:	f001 f83c 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4b04:	4621      	mov	r1, r4
   d4b06:	2300      	movs	r3, #0
   d4b08:	4a2c      	ldr	r2, [pc, #176]	; (d4bbc <_GLOBAL__sub_I_display+0x130>)
   d4b0a:	482d      	ldr	r0, [pc, #180]	; (d4bc0 <_GLOBAL__sub_I_display+0x134>)
   d4b0c:	f001 f836 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4b10:	4621      	mov	r1, r4
   d4b12:	2300      	movs	r3, #0
   d4b14:	4a2b      	ldr	r2, [pc, #172]	; (d4bc4 <_GLOBAL__sub_I_display+0x138>)
   d4b16:	482c      	ldr	r0, [pc, #176]	; (d4bc8 <_GLOBAL__sub_I_display+0x13c>)
   d4b18:	f001 f830 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d4b1c:	4621      	mov	r1, r4
   d4b1e:	2300      	movs	r3, #0
   d4b20:	4a2a      	ldr	r2, [pc, #168]	; (d4bcc <_GLOBAL__sub_I_display+0x140>)
   d4b22:	482b      	ldr	r0, [pc, #172]	; (d4bd0 <_GLOBAL__sub_I_display+0x144>)
   d4b24:	f001 f82a 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 
   d4b28:	4621      	mov	r1, r4
   d4b2a:	2300      	movs	r3, #0
   d4b2c:	4a29      	ldr	r2, [pc, #164]	; (d4bd4 <_GLOBAL__sub_I_display+0x148>)
   d4b2e:	482a      	ldr	r0, [pc, #168]	; (d4bd8 <_GLOBAL__sub_I_display+0x14c>)
   d4b30:	f001 f824 	bl	d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4b34:	2300      	movs	r3, #0
   d4b36:	4a29      	ldr	r2, [pc, #164]	; (d4bdc <_GLOBAL__sub_I_display+0x150>)
   d4b38:	4829      	ldr	r0, [pc, #164]	; (d4be0 <_GLOBAL__sub_I_display+0x154>)
   d4b3a:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b3c:	4c29      	ldr	r4, [pc, #164]	; (d4be4 <_GLOBAL__sub_I_display+0x158>)
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4b3e:	f001 f851 	bl	d5be4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4b42:	4829      	ldr	r0, [pc, #164]	; (d4be8 <_GLOBAL__sub_I_display+0x15c>)
   d4b44:	f000 f880 	bl	d4c48 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b48:	4639      	mov	r1, r7
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	f002 fc58 	bl	d7400 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b50:	4620      	mov	r0, r4
String t2;
   d4b52:	4c26      	ldr	r4, [pc, #152]	; (d4bec <_GLOBAL__sub_I_display+0x160>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b54:	462a      	mov	r2, r5
   d4b56:	4631      	mov	r1, r6
   d4b58:	f004 fa10 	bl	d8f7c <__aeabi_atexit>
String t2;
   d4b5c:	4639      	mov	r1, r7
   d4b5e:	4620      	mov	r0, r4
   d4b60:	f002 fc4e 	bl	d7400 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b64:	462a      	mov	r2, r5
   d4b66:	4631      	mov	r1, r6
   d4b68:	4620      	mov	r0, r4
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4b6a:	b003      	add	sp, #12
   d4b6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d4b70:	f004 ba04 	b.w	d8f7c <__aeabi_atexit>
   d4b74:	2003e2ec 	.word	0x2003e2ec
   d4b78:	2003e2c8 	.word	0x2003e2c8
   d4b7c:	2003e148 	.word	0x2003e148
   d4b80:	2003e164 	.word	0x2003e164
   d4b84:	000dc5b1 	.word	0x000dc5b1
   d4b88:	000d40cd 	.word	0x000d40cd
   d4b8c:	2003e1a8 	.word	0x2003e1a8
   d4b90:	000d411d 	.word	0x000d411d
   d4b94:	000dc435 	.word	0x000dc435
   d4b98:	000dc41e 	.word	0x000dc41e
   d4b9c:	000dc425 	.word	0x000dc425
   d4ba0:	000dc564 	.word	0x000dc564
   d4ba4:	000d40cf 	.word	0x000d40cf
   d4ba8:	000dc456 	.word	0x000dc456
   d4bac:	2003e308 	.word	0x2003e308
   d4bb0:	000d7373 	.word	0x000d7373
   d4bb4:	000dc474 	.word	0x000dc474
   d4bb8:	2003e180 	.word	0x2003e180
   d4bbc:	000dc48f 	.word	0x000dc48f
   d4bc0:	2003e158 	.word	0x2003e158
   d4bc4:	000dc4a7 	.word	0x000dc4a7
   d4bc8:	2003e27c 	.word	0x2003e27c
   d4bcc:	000dc4c2 	.word	0x000dc4c2
   d4bd0:	2003e2f8 	.word	0x2003e2f8
   d4bd4:	000dc4dd 	.word	0x000dc4dd
   d4bd8:	2003e374 	.word	0x2003e374
   d4bdc:	000dc4f4 	.word	0x000dc4f4
   d4be0:	2003e290 	.word	0x2003e290
   d4be4:	2003e318 	.word	0x2003e318
   d4be8:	2003e32c 	.word	0x2003e32c
   d4bec:	2003e198 	.word	0x2003e198

000d4bf0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4bf2:	4602      	mov	r2, r0
   d4bf4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4bf6:	7913      	ldrb	r3, [r2, #4]
   d4bf8:	6895      	ldr	r5, [r2, #8]
   d4bfa:	b133      	cbz	r3, d4c0a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4bfc:	b93d      	cbnz	r5, d4c0e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4bfe:	490c      	ldr	r1, [pc, #48]	; (d4c30 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4c00:	b004      	add	sp, #16
   d4c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4c06:	f002 bcd1 	b.w	d75ac <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4c0a:	4b0a      	ldr	r3, [pc, #40]	; (d4c34 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4c0c:	e000      	b.n	d4c10 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4c0e:	4b0a      	ldr	r3, [pc, #40]	; (d4c38 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4c10:	7b16      	ldrb	r6, [r2, #12]
   d4c12:	4c0a      	ldr	r4, [pc, #40]	; (d4c3c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4c14:	490a      	ldr	r1, [pc, #40]	; (d4c40 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4c16:	7b52      	ldrb	r2, [r2, #13]
   d4c18:	9202      	str	r2, [sp, #8]
   d4c1a:	2e01      	cmp	r6, #1
   d4c1c:	bf08      	it	eq
   d4c1e:	4621      	moveq	r1, r4
   d4c20:	9101      	str	r1, [sp, #4]
   d4c22:	9500      	str	r5, [sp, #0]
   d4c24:	4a07      	ldr	r2, [pc, #28]	; (d4c44 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4c26:	2100      	movs	r1, #0
   d4c28:	f002 fde7 	bl	d77fa <_ZN5Print11printf_implEbPKcz>
  }
   d4c2c:	b004      	add	sp, #16
   d4c2e:	bd70      	pop	{r4, r5, r6, pc}
   d4c30:	000dc525 	.word	0x000dc525
   d4c34:	000dc5b1 	.word	0x000dc5b1
   d4c38:	000dc514 	.word	0x000dc514
   d4c3c:	000dc51d 	.word	0x000dc51d
   d4c40:	000dc521 	.word	0x000dc521
   d4c44:	000dc53b 	.word	0x000dc53b

000d4c48 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4c48:	22ff      	movs	r2, #255	; 0xff
   d4c4a:	7402      	strb	r2, [r0, #16]
   d4c4c:	7442      	strb	r2, [r0, #17]
   d4c4e:	7482      	strb	r2, [r0, #18]
   d4c50:	74c2      	strb	r2, [r0, #19]
{ }
   d4c52:	4770      	bx	lr

000d4c54 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4c54:	6880      	ldr	r0, [r0, #8]
   d4c56:	4770      	bx	lr

000d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4c58:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4c5a:	4d09      	ldr	r5, [pc, #36]	; (d4c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4c5c:	6829      	ldr	r1, [r5, #0]
   d4c5e:	f011 0401 	ands.w	r4, r1, #1
   d4c62:	d10a      	bne.n	d4c7a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4c64:	4628      	mov	r0, r5
   d4c66:	f7ff fa29 	bl	d40bc <__cxa_guard_acquire>
   d4c6a:	b130      	cbz	r0, d4c7a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4c6c:	4621      	mov	r1, r4
   d4c6e:	4805      	ldr	r0, [pc, #20]	; (d4c84 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4c70:	f002 f9f2 	bl	d7058 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4c74:	4628      	mov	r0, r5
   d4c76:	f7ff fa26 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4c7a:	4802      	ldr	r0, [pc, #8]	; (d4c84 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4c7c:	bd38      	pop	{r3, r4, r5, pc}
   d4c7e:	bf00      	nop
   d4c80:	2003e3a4 	.word	0x2003e3a4
   d4c84:	2003e3a8 	.word	0x2003e3a8

000d4c88 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4c8c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c90:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c92:	4605      	mov	r5, r0
   d4c94:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4c96:	d106      	bne.n	d4ca6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4c98:	f7ff ffde 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c9c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ca2:	f002 baf5 	b.w	d7290 <_ZN8SPIClass8transferEh>
   d4ca6:	2607      	movs	r6, #7
   d4ca8:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4caa:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4cae:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	b280      	uxth	r0, r0
   d4cb6:	f004 f8b8 	bl	d8e2a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4cba:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4cbe:	fa08 f106 	lsl.w	r1, r8, r6
   d4cc2:	4039      	ands	r1, r7
   d4cc4:	b280      	uxth	r0, r0
   d4cc6:	f004 f8b0 	bl	d8e2a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4cca:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4cce:	2101      	movs	r1, #1
   d4cd0:	b280      	uxth	r0, r0
   d4cd2:	f004 f8aa 	bl	d8e2a <digitalWrite>
        if (digitalRead(_miso))
   d4cd6:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cda:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4cdc:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cde:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4ce0:	f004 f8bc 	bl	d8e5c <digitalRead>
   d4ce4:	b108      	cbz	r0, d4cea <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4ce6:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4cea:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4cee:	d2de      	bcs.n	d4cae <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cf6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4cf6:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4cf8:	f7ff ffae 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4d00:	f002 b9e7 	b.w	d70d2 <_ZN8SPIClass14endTransactionEv>

000d4d04 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4d04:	b510      	push	{r4, lr}
   d4d06:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4d08:	f7ff ffa6 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4d0c:	4621      	mov	r1, r4
    }
   d4d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4d12:	f002 b9f7 	b.w	d7104 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4d18 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4d18:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4d1a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d1e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4d20:	b085      	sub	sp, #20
   d4d22:	4604      	mov	r4, r0
   d4d24:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4d26:	d121      	bne.n	d4d6c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d28:	7901      	ldrb	r1, [r0, #4]
   d4d2a:	6800      	ldr	r0, [r0, #0]
   d4d2c:	f003 fbbd 	bl	d84aa <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d30:	6820      	ldr	r0, [r4, #0]
   d4d32:	6803      	ldr	r3, [r0, #0]
   d4d34:	4629      	mov	r1, r5
   d4d36:	689b      	ldr	r3, [r3, #8]
   d4d38:	4798      	blx	r3
        _wire -> endTransmission();
   d4d3a:	6820      	ldr	r0, [r4, #0]
   d4d3c:	f003 fbc0 	bl	d84c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4d40:	2203      	movs	r2, #3
   d4d42:	7921      	ldrb	r1, [r4, #4]
   d4d44:	6820      	ldr	r0, [r4, #0]
   d4d46:	f003 fbad 	bl	d84a4 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4d4a:	6820      	ldr	r0, [r4, #0]
   d4d4c:	6803      	ldr	r3, [r0, #0]
   d4d4e:	695b      	ldr	r3, [r3, #20]
   d4d50:	4798      	blx	r3
        value <<= 8;
   d4d52:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d54:	6820      	ldr	r0, [r4, #0]
   d4d56:	6803      	ldr	r3, [r0, #0]
   d4d58:	695b      	ldr	r3, [r3, #20]
   d4d5a:	4798      	blx	r3
   d4d5c:	4328      	orrs	r0, r5
        value <<= 8;
   d4d5e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d60:	6820      	ldr	r0, [r4, #0]
   d4d62:	6803      	ldr	r3, [r0, #0]
   d4d64:	695b      	ldr	r3, [r3, #20]
   d4d66:	4798      	blx	r3
   d4d68:	4305      	orrs	r5, r0
   d4d6a:	e039      	b.n	d4de0 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4d6c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d70:	3301      	adds	r3, #1
   d4d72:	d10e      	bne.n	d4d92 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4d74:	4b1c      	ldr	r3, [pc, #112]	; (d4de8 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4d76:	4a1d      	ldr	r2, [pc, #116]	; (d4dec <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4d78:	9300      	str	r3, [sp, #0]
   d4d7a:	9202      	str	r2, [sp, #8]
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d80:	4668      	mov	r0, sp
   d4d82:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d86:	f88d 200c 	strb.w	r2, [sp, #12]
   d4d8a:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d8e:	f7ff ffb9 	bl	d4d04 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4d92:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d96:	2100      	movs	r1, #0
   d4d98:	b280      	uxth	r0, r0
   d4d9a:	f004 f846 	bl	d8e2a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4d9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4da2:	4620      	mov	r0, r4
   d4da4:	f7ff ff70 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4da8:	2100      	movs	r1, #0
   d4daa:	4620      	mov	r0, r4
   d4dac:	f7ff ff6c 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4db0:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4db2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4db4:	4620      	mov	r0, r4
   d4db6:	f7ff ff67 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
   d4dba:	4328      	orrs	r0, r5
        value <<= 8;
   d4dbc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4dbe:	2100      	movs	r1, #0
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	f7ff ff61 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
   d4dc6:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4dc8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dcc:	2101      	movs	r1, #1
   d4dce:	b280      	uxth	r0, r0
   d4dd0:	f004 f82b 	bl	d8e2a <digitalWrite>
        if (_sck == -1)
   d4dd4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4dd8:	3301      	adds	r3, #1
   d4dda:	d101      	bne.n	d4de0 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4ddc:	f7ff ff8b 	bl	d4cf6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4de0:	4628      	mov	r0, r5
   d4de2:	b005      	add	sp, #20
   d4de4:	bd30      	pop	{r4, r5, pc}
   d4de6:	bf00      	nop
   d4de8:	000dc510 	.word	0x000dc510
   d4dec:	0007a120 	.word	0x0007a120

000d4df0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4df0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4df2:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4df4:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4df6:	f7ff ff8f 	bl	d4d18 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4dfa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4dfe:	d01e      	beq.n	d4e3e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4e00:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4e02:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4e44 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4e06:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4e0a:	0052      	lsls	r2, r2, #1
   d4e0c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4e10:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4e14:	435b      	muls	r3, r3
   d4e16:	4350      	muls	r0, r2
   d4e18:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4e1c:	131b      	asrs	r3, r3, #12
   d4e1e:	4353      	muls	r3, r2
   d4e20:	139b      	asrs	r3, r3, #14
   d4e22:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4e26:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4e28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4e2c:	3080      	adds	r0, #128	; 0x80
   d4e2e:	1200      	asrs	r0, r0, #8
   d4e30:	ee07 0a90 	vmov	s15, r0
   d4e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e38:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4e3c:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4e3e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e48 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4e42:	bd10      	pop	{r4, pc}
   d4e44:	42c80000 	.word	0x42c80000
   d4e48:	7fc00000 	.word	0x7fc00000

000d4e4c <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e50:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4e52:	f7ff ffcd 	bl	d4df0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e56:	21f7      	movs	r1, #247	; 0xf7
   d4e58:	4630      	mov	r0, r6
   d4e5a:	f7ff ff5d 	bl	d4d18 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e62:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e64:	f000 80c1 	beq.w	d4fea <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4e68:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e6a:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4e6e:	17e5      	asrs	r5, r4, #31
   d4e70:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4e74:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4e78:	fba4 8904 	umull	r8, r9, r4, r4
   d4e7c:	fb04 f305 	mul.w	r3, r4, r5
   d4e80:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e84:	fb02 f105 	mul.w	r1, r2, r5
   d4e88:	17d3      	asrs	r3, r2, #31
   d4e8a:	fb04 1103 	mla	r1, r4, r3, r1
   d4e8e:	fba2 2304 	umull	r2, r3, r2, r4
   d4e92:	440b      	add	r3, r1
   d4e94:	0319      	lsls	r1, r3, #12
   d4e96:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4e9a:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4e9c:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4ea0:	17d3      	asrs	r3, r2, #31
   d4ea2:	fb02 fe09 	mul.w	lr, r2, r9
   d4ea6:	fb08 ee03 	mla	lr, r8, r3, lr
   d4eaa:	fba2 2308 	umull	r2, r3, r2, r8
   d4eae:	4473      	add	r3, lr
   d4eb0:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4eb4:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4eb8:	eb1a 0a00 	adds.w	sl, sl, r0
   d4ebc:	8b72      	ldrh	r2, [r6, #26]
   d4ebe:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4ec2:	eb4b 0b01 	adc.w	fp, fp, r1
   d4ec6:	f11a 0000 	adds.w	r0, sl, #0
   d4eca:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4ece:	fba0 ab02 	umull	sl, fp, r0, r2
   d4ed2:	fb02 bb01 	mla	fp, r2, r1, fp
   d4ed6:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4eda:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4ede:	ea52 0103 	orrs.w	r1, r2, r3
   d4ee2:	f000 8086 	beq.w	d4ff2 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4ee6:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4eea:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4eee:	fb0a f109 	mul.w	r1, sl, r9
   d4ef2:	fb08 110b 	mla	r1, r8, fp, r1
   d4ef6:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4efa:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4efe:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4f00:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4f04:	fb0a f105 	mul.w	r1, sl, r5
   d4f08:	fb04 110b 	mla	r1, r4, fp, r1
   d4f0c:	fbaa 4504 	umull	r4, r5, sl, r4
   d4f10:	440d      	add	r5, r1
   d4f12:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4f16:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f1a:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4f1c:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f20:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4f24:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4f28:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f2c:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4f30:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4f34:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4f38:	07c4      	lsls	r4, r0, #31
   d4f3a:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4f3e:	f04f 0800 	mov.w	r8, #0
   d4f42:	eb18 080a 	adds.w	r8, r8, sl
   d4f46:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4f4a:	eb49 090b 	adc.w	r9, r9, fp
   d4f4e:	f640 4735 	movw	r7, #3125	; 0xc35
   d4f52:	ebb4 0408 	subs.w	r4, r4, r8
   d4f56:	eb65 0509 	sbc.w	r5, r5, r9
   d4f5a:	fba4 0107 	umull	r0, r1, r4, r7
   d4f5e:	fb07 1105 	mla	r1, r7, r5, r1
   d4f62:	f006 f8bf 	bl	db0e4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f66:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4f6a:	134c      	asrs	r4, r1, #13
   d4f6c:	0b45      	lsrs	r5, r0, #13
   d4f6e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f72:	fb02 f704 	mul.w	r7, r2, r4
   d4f76:	17d3      	asrs	r3, r2, #31
   d4f78:	fb05 7703 	mla	r7, r5, r3, r7
   d4f7c:	fba2 2305 	umull	r2, r3, r2, r5
   d4f80:	443b      	add	r3, r7
   d4f82:	4354      	muls	r4, r2
   d4f84:	fb05 4403 	mla	r4, r5, r3, r4
   d4f88:	fba2 2305 	umull	r2, r3, r2, r5
   d4f8c:	4423      	add	r3, r4
   d4f8e:	0e54      	lsrs	r4, r2, #25
   d4f90:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4f94:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4f98:	1824      	adds	r4, r4, r0
   d4f9a:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4f9e:	414d      	adcs	r5, r1
   d4fa0:	17d3      	asrs	r3, r2, #31
   d4fa2:	4351      	muls	r1, r2
   d4fa4:	fb00 1303 	mla	r3, r0, r3, r1
   d4fa8:	fba2 0100 	umull	r0, r1, r2, r0
   d4fac:	4419      	add	r1, r3
   d4fae:	0cc2      	lsrs	r2, r0, #19
   d4fb0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4fb4:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4fb6:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4fba:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4fbe:	416b      	adcs	r3, r5
   d4fc0:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4fc2:	17e5      	asrs	r5, r4, #31
   d4fc4:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4fc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4fca:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4fcc:	012b      	lsls	r3, r5, #4
   d4fce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4fd2:	1880      	adds	r0, r0, r2
   d4fd4:	4159      	adcs	r1, r3
   d4fd6:	f006 f847 	bl	db068 <__aeabi_l2f>
   d4fda:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4ffc <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4fde:	ee07 0a90 	vmov	s15, r0
   d4fe2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4fea:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5000 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4ff2:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5004 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ffa:	bf00      	nop
   d4ffc:	3b800000 	.word	0x3b800000
   d5000:	7fc00000 	.word	0x7fc00000
   d5004:	00000000 	.word	0x00000000

000d5008 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5008:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d500a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d500e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5010:	b085      	sub	sp, #20
   d5012:	4604      	mov	r4, r0
   d5014:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d5016:	d11d      	bne.n	d5054 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5018:	7901      	ldrb	r1, [r0, #4]
   d501a:	6800      	ldr	r0, [r0, #0]
   d501c:	f003 fa45 	bl	d84aa <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5020:	6820      	ldr	r0, [r4, #0]
   d5022:	6803      	ldr	r3, [r0, #0]
   d5024:	4629      	mov	r1, r5
   d5026:	689b      	ldr	r3, [r3, #8]
   d5028:	4798      	blx	r3
        _wire -> endTransmission();
   d502a:	6820      	ldr	r0, [r4, #0]
   d502c:	f003 fa48 	bl	d84c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5030:	2202      	movs	r2, #2
   d5032:	7921      	ldrb	r1, [r4, #4]
   d5034:	6820      	ldr	r0, [r4, #0]
   d5036:	f003 fa35 	bl	d84a4 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d503a:	6820      	ldr	r0, [r4, #0]
   d503c:	6803      	ldr	r3, [r0, #0]
   d503e:	695b      	ldr	r3, [r3, #20]
   d5040:	4798      	blx	r3
   d5042:	4605      	mov	r5, r0
   d5044:	6820      	ldr	r0, [r4, #0]
   d5046:	6803      	ldr	r3, [r0, #0]
   d5048:	695b      	ldr	r3, [r3, #20]
   d504a:	4798      	blx	r3
   d504c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5050:	b285      	uxth	r5, r0
   d5052:	e035      	b.n	d50c0 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d5054:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5058:	3301      	adds	r3, #1
   d505a:	d10e      	bne.n	d507a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d505c:	4b1a      	ldr	r3, [pc, #104]	; (d50c8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d505e:	4a1b      	ldr	r2, [pc, #108]	; (d50cc <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d5060:	9300      	str	r3, [sp, #0]
   d5062:	9202      	str	r2, [sp, #8]
   d5064:	2300      	movs	r3, #0
   d5066:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5068:	4668      	mov	r0, sp
   d506a:	f88d 3004 	strb.w	r3, [sp, #4]
   d506e:	f88d 200c 	strb.w	r2, [sp, #12]
   d5072:	f88d 300d 	strb.w	r3, [sp, #13]
   d5076:	f7ff fe45 	bl	d4d04 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d507a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d507e:	2100      	movs	r1, #0
   d5080:	b280      	uxth	r0, r0
   d5082:	f003 fed2 	bl	d8e2a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5086:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d508a:	4620      	mov	r0, r4
   d508c:	f7ff fdfc 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5090:	2100      	movs	r1, #0
   d5092:	4620      	mov	r0, r4
   d5094:	f7ff fdf8 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
   d5098:	2100      	movs	r1, #0
   d509a:	4605      	mov	r5, r0
   d509c:	4620      	mov	r0, r4
   d509e:	f7ff fdf3 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
   d50a2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d50a6:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d50a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d50ac:	2101      	movs	r1, #1
   d50ae:	b280      	uxth	r0, r0
   d50b0:	f003 febb 	bl	d8e2a <digitalWrite>
        if (_sck == -1)
   d50b4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d50b8:	3301      	adds	r3, #1
   d50ba:	d101      	bne.n	d50c0 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d50bc:	f7ff fe1b 	bl	d4cf6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d50c0:	4628      	mov	r0, r5
   d50c2:	b005      	add	sp, #20
   d50c4:	bd30      	pop	{r4, r5, pc}
   d50c6:	bf00      	nop
   d50c8:	000dc510 	.word	0x000dc510
   d50cc:	0007a120 	.word	0x0007a120

000d50d0 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d50d0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d50d2:	f7ff ff99 	bl	d5008 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d50d6:	ba40      	rev16	r0, r0
}
   d50d8:	b280      	uxth	r0, r0
   d50da:	bd08      	pop	{r3, pc}

000d50dc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d50dc:	b510      	push	{r4, lr}
   d50de:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d50e0:	f7ff fe86 	bl	d4df0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d50e4:	21fd      	movs	r1, #253	; 0xfd
   d50e6:	4620      	mov	r0, r4
   d50e8:	f7ff ff8e 	bl	d5008 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d50ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d50f0:	d038      	beq.n	d5164 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50f2:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50f6:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50f8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d50fc:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50fe:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5102:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d5106:	fb02 3311 	mls	r3, r2, r1, r3
   d510a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d510e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5110:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5114:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5118:	4353      	muls	r3, r2
   d511a:	12db      	asrs	r3, r3, #11
   d511c:	4342      	muls	r2, r0
   d511e:	1292      	asrs	r2, r2, #10
   d5120:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d5124:	4353      	muls	r3, r2
   d5126:	129b      	asrs	r3, r3, #10
   d5128:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d512c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d5130:	4353      	muls	r3, r2
   d5132:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5136:	139b      	asrs	r3, r3, #14
   d5138:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d513a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d513c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d5140:	4352      	muls	r2, r2
   d5142:	11d2      	asrs	r2, r2, #7
   d5144:	434a      	muls	r2, r1
   d5146:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d514a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d514e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5152:	bfa8      	it	ge
   d5154:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d5158:	131b      	asrs	r3, r3, #12
   d515a:	ee00 3a10 	vmov	s0, r3
   d515e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d5162:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d5164:	ed9f 0a01 	vldr	s0, [pc, #4]	; d516c <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d5168:	bd10      	pop	{r4, pc}
   d516a:	bf00      	nop
   d516c:	7fc00000 	.word	0x7fc00000

000d5170 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5170:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d5172:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5176:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5178:	b085      	sub	sp, #20
   d517a:	4604      	mov	r4, r0
   d517c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d517e:	d116      	bne.n	d51ae <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5180:	7901      	ldrb	r1, [r0, #4]
   d5182:	6800      	ldr	r0, [r0, #0]
   d5184:	f003 f991 	bl	d84aa <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5188:	6820      	ldr	r0, [r4, #0]
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	4629      	mov	r1, r5
   d518e:	689b      	ldr	r3, [r3, #8]
   d5190:	4798      	blx	r3
        _wire -> endTransmission();
   d5192:	6820      	ldr	r0, [r4, #0]
   d5194:	f003 f994 	bl	d84c0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5198:	2201      	movs	r2, #1
   d519a:	7921      	ldrb	r1, [r4, #4]
   d519c:	6820      	ldr	r0, [r4, #0]
   d519e:	f003 f981 	bl	d84a4 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d51a2:	6820      	ldr	r0, [r4, #0]
   d51a4:	6803      	ldr	r3, [r0, #0]
   d51a6:	695b      	ldr	r3, [r3, #20]
   d51a8:	4798      	blx	r3
   d51aa:	b2c5      	uxtb	r5, r0
   d51ac:	e02e      	b.n	d520c <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d51ae:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d51b2:	3301      	adds	r3, #1
   d51b4:	d10e      	bne.n	d51d4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d51b6:	4b17      	ldr	r3, [pc, #92]	; (d5214 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d51b8:	4a17      	ldr	r2, [pc, #92]	; (d5218 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d51ba:	9300      	str	r3, [sp, #0]
   d51bc:	9202      	str	r2, [sp, #8]
   d51be:	2300      	movs	r3, #0
   d51c0:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d51c2:	4668      	mov	r0, sp
   d51c4:	f88d 3004 	strb.w	r3, [sp, #4]
   d51c8:	f88d 200c 	strb.w	r2, [sp, #12]
   d51cc:	f88d 300d 	strb.w	r3, [sp, #13]
   d51d0:	f7ff fd98 	bl	d4d04 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d51d4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51d8:	2100      	movs	r1, #0
   d51da:	b280      	uxth	r0, r0
   d51dc:	f003 fe25 	bl	d8e2a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d51e0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff fd4f 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d51ea:	2100      	movs	r1, #0
   d51ec:	4620      	mov	r0, r4
   d51ee:	f7ff fd4b 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
   d51f2:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d51f4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51f8:	2101      	movs	r1, #1
   d51fa:	b280      	uxth	r0, r0
   d51fc:	f003 fe15 	bl	d8e2a <digitalWrite>
        if (_sck == -1)
   d5200:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5204:	3301      	adds	r3, #1
   d5206:	d101      	bne.n	d520c <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d5208:	f7ff fd75 	bl	d4cf6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d520c:	4628      	mov	r0, r5
   d520e:	b005      	add	sp, #20
   d5210:	bd30      	pop	{r4, r5, pc}
   d5212:	bf00      	nop
   d5214:	000dc510 	.word	0x000dc510
   d5218:	0007a120 	.word	0x0007a120

000d521c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d521c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d521e:	21f3      	movs	r1, #243	; 0xf3
   d5220:	f7ff ffa6 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d5224:	f000 0001 	and.w	r0, r0, #1
   d5228:	bd08      	pop	{r3, pc}

000d522a <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d522a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d522c:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d522e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5230:	f7ff ff4e 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5234:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5236:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5238:	4620      	mov	r0, r4
   d523a:	f7ff ff49 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d523e:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5240:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5242:	4620      	mov	r0, r4
   d5244:	f7ff ff44 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5248:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d524a:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d524c:	4620      	mov	r0, r4
   d524e:	f7ff ff3f 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5252:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5254:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff ff3a 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d525c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d525e:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5260:	4620      	mov	r0, r4
   d5262:	f7ff ff35 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5266:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5268:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d526a:	4620      	mov	r0, r4
   d526c:	f7ff ff30 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5270:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5272:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5274:	4620      	mov	r0, r4
   d5276:	f7ff ff2b 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d527a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d527c:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d527e:	4620      	mov	r0, r4
   d5280:	f7ff ff26 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5284:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5286:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5288:	4620      	mov	r0, r4
   d528a:	f7ff ff21 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d528e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5290:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5292:	4620      	mov	r0, r4
   d5294:	f7ff ff1c 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5298:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d529a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d529c:	4620      	mov	r0, r4
   d529e:	f7ff ff17 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52a2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d52a4:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52a6:	4620      	mov	r0, r4
   d52a8:	f7ff ff62 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52ac:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52ae:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52b2:	4620      	mov	r0, r4
   d52b4:	f7ff ff0c 	bl	d50d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52b8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d52ba:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52bc:	4620      	mov	r0, r4
   d52be:	f7ff ff57 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52c2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52c4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52c8:	4620      	mov	r0, r4
   d52ca:	f7ff ff51 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
   d52ce:	21e5      	movs	r1, #229	; 0xe5
   d52d0:	4605      	mov	r5, r0
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ff4c 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
   d52d8:	f000 000f 	and.w	r0, r0, #15
   d52dc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52e0:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d52e2:	21e6      	movs	r1, #230	; 0xe6
   d52e4:	4620      	mov	r0, r4
   d52e6:	f7ff ff43 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
   d52ea:	21e5      	movs	r1, #229	; 0xe5
   d52ec:	4605      	mov	r5, r0
   d52ee:	4620      	mov	r0, r4
   d52f0:	f7ff ff3e 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
   d52f4:	1100      	asrs	r0, r0, #4
   d52f6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52fa:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d52fc:	21e7      	movs	r1, #231	; 0xe7
   d52fe:	4620      	mov	r0, r4
   d5300:	f7ff ff36 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
   d5304:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d5308:	bd38      	pop	{r3, r4, r5, pc}
	...

000d530c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d530c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d530e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5312:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d5314:	4604      	mov	r4, r0
   d5316:	460e      	mov	r6, r1
   d5318:	4615      	mov	r5, r2
    if (_cs == -1) {
   d531a:	d111      	bne.n	d5340 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d531c:	7901      	ldrb	r1, [r0, #4]
   d531e:	6800      	ldr	r0, [r0, #0]
   d5320:	f003 f8c3 	bl	d84aa <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5324:	6820      	ldr	r0, [r4, #0]
   d5326:	6803      	ldr	r3, [r0, #0]
   d5328:	4631      	mov	r1, r6
   d532a:	689b      	ldr	r3, [r3, #8]
   d532c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d532e:	6820      	ldr	r0, [r4, #0]
   d5330:	6803      	ldr	r3, [r0, #0]
   d5332:	4629      	mov	r1, r5
   d5334:	689b      	ldr	r3, [r3, #8]
   d5336:	4798      	blx	r3
        _wire -> endTransmission();
   d5338:	6820      	ldr	r0, [r4, #0]
   d533a:	f003 f8c1 	bl	d84c0 <_ZN7TwoWire15endTransmissionEv>
   d533e:	e02d      	b.n	d539c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d5340:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5344:	3301      	adds	r3, #1
   d5346:	d10e      	bne.n	d5366 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d5348:	4b15      	ldr	r3, [pc, #84]	; (d53a0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d534a:	4a16      	ldr	r2, [pc, #88]	; (d53a4 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d534c:	9300      	str	r3, [sp, #0]
   d534e:	9202      	str	r2, [sp, #8]
   d5350:	2300      	movs	r3, #0
   d5352:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5354:	4668      	mov	r0, sp
   d5356:	f88d 3004 	strb.w	r3, [sp, #4]
   d535a:	f88d 200c 	strb.w	r2, [sp, #12]
   d535e:	f88d 300d 	strb.w	r3, [sp, #13]
   d5362:	f7ff fccf 	bl	d4d04 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d5366:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d536a:	2100      	movs	r1, #0
   d536c:	b280      	uxth	r0, r0
   d536e:	f003 fd5c 	bl	d8e2a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5372:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5376:	4620      	mov	r0, r4
   d5378:	f7ff fc86 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d537c:	4629      	mov	r1, r5
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff fc82 	bl	d4c88 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5384:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5388:	2101      	movs	r1, #1
   d538a:	b280      	uxth	r0, r0
   d538c:	f003 fd4d 	bl	d8e2a <digitalWrite>
    if (_sck == -1)
   d5390:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5394:	3301      	adds	r3, #1
   d5396:	d101      	bne.n	d539c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d5398:	f7ff fcad 	bl	d4cf6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d539c:	b004      	add	sp, #16
   d539e:	bd70      	pop	{r4, r5, r6, pc}
   d53a0:	000dc510 	.word	0x000dc510
   d53a4:	0007a120 	.word	0x0007a120

000d53a8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d53aa:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53ae:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d53b2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d53b6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d53ba:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d53be:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d53c2:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d53c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d53ca:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d53ce:	f366 1347 	bfi	r3, r6, #5, #3
   d53d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d53d6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d53da:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53de:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d53e0:	f367 0302 	bfi	r3, r7, #0, #3
   d53e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d53e8:	f006 0207 	and.w	r2, r6, #7
   d53ec:	21f2      	movs	r1, #242	; 0xf2
   d53ee:	f7ff ff8d 	bl	d530c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d53f2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d53f6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d53fa:	f002 0107 	and.w	r1, r2, #7
   d53fe:	009b      	lsls	r3, r3, #2
   d5400:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d5404:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5408:	4620      	mov	r0, r4
   d540a:	21f5      	movs	r1, #245	; 0xf5
   d540c:	f7ff ff7e 	bl	d530c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5410:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5414:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5418:	f002 0107 	and.w	r1, r2, #7
   d541c:	009b      	lsls	r3, r3, #2
   d541e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d5422:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5426:	4620      	mov	r0, r4
   d5428:	21f4      	movs	r1, #244	; 0xf4
}
   d542a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d542e:	f7ff bf6d 	b.w	d530c <_ZN15Adafruit_BME2806write8Ehh>

000d5432 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d5432:	b530      	push	{r4, r5, lr}
   d5434:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5436:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d543a:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d543c:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d543e:	d103      	bne.n	d5448 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d5440:	6820      	ldr	r0, [r4, #0]
   d5442:	f002 fffb 	bl	d843c <_ZN7TwoWire5beginEv>
   d5446:	e022      	b.n	d548e <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d5448:	2101      	movs	r1, #1
   d544a:	b280      	uxth	r0, r0
   d544c:	f003 fced 	bl	d8e2a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5450:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5454:	2101      	movs	r1, #1
   d5456:	b280      	uxth	r0, r0
   d5458:	f003 fcd6 	bl	d8e08 <pinMode>
        if (_sck == -1) {
   d545c:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5460:	1c43      	adds	r3, r0, #1
   d5462:	d104      	bne.n	d546e <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5464:	f7ff fbf8 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5468:	f001 fe00 	bl	d706c <_ZN8SPIClass5beginEv>
   d546c:	e00f      	b.n	d548e <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d546e:	2101      	movs	r1, #1
   d5470:	b280      	uxth	r0, r0
   d5472:	f003 fcc9 	bl	d8e08 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5476:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d547a:	2101      	movs	r1, #1
   d547c:	b280      	uxth	r0, r0
   d547e:	f003 fcc3 	bl	d8e08 <pinMode>
            pinMode(_miso, INPUT);
   d5482:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5486:	2100      	movs	r1, #0
   d5488:	b280      	uxth	r0, r0
   d548a:	f003 fcbd 	bl	d8e08 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d548e:	21d0      	movs	r1, #208	; 0xd0
   d5490:	4620      	mov	r0, r4
   d5492:	f7ff fe6d 	bl	d5170 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5496:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5498:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d549a:	d120      	bne.n	d54de <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d549c:	4620      	mov	r0, r4
   d549e:	22b6      	movs	r2, #182	; 0xb6
   d54a0:	21e0      	movs	r1, #224	; 0xe0
   d54a2:	f7ff ff33 	bl	d530c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d54a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d54aa:	f002 fa67 	bl	d797c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d54ae:	4620      	mov	r0, r4
   d54b0:	f7ff feb4 	bl	d521c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d54b4:	4605      	mov	r5, r0
   d54b6:	b108      	cbz	r0, d54bc <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d54b8:	2064      	movs	r0, #100	; 0x64
   d54ba:	e7f6      	b.n	d54aa <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d54bc:	4620      	mov	r0, r4
   d54be:	f7ff feb4 	bl	d522a <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d54c2:	2305      	movs	r3, #5
   d54c4:	9300      	str	r3, [sp, #0]
   d54c6:	461a      	mov	r2, r3
   d54c8:	2103      	movs	r1, #3
   d54ca:	4620      	mov	r0, r4
   d54cc:	9502      	str	r5, [sp, #8]
   d54ce:	9501      	str	r5, [sp, #4]
   d54d0:	f7ff ff6a 	bl	d53a8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d54d4:	2064      	movs	r0, #100	; 0x64
   d54d6:	f002 fa51 	bl	d797c <delay>
   d54da:	2001      	movs	r0, #1
   d54dc:	e000      	b.n	d54e0 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d54de:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d54e0:	b005      	add	sp, #20
   d54e2:	bd30      	pop	{r4, r5, pc}

000d54e4 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d54e4:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d54e6:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d54e8:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d54ea:	f003 fd21 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d54ee:	6020      	str	r0, [r4, #0]
	return init();
   d54f0:	4620      	mov	r0, r4
}
   d54f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d54f6:	f7ff bf9c 	b.w	d5432 <_ZN15Adafruit_BME2804initEv>

000d54fa <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d54fa:	f001 ba3d 	b.w	d6978 <HAL_Pin_Map>

000d54fe <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d54fe:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5500:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5504:	6803      	ldr	r3, [r0, #0]
   d5506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5508:	4798      	blx	r3
}
   d550a:	3000      	adds	r0, #0
   d550c:	bf18      	it	ne
   d550e:	2001      	movne	r0, #1
   d5510:	bd08      	pop	{r3, pc}

000d5512 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5514:	4606      	mov	r6, r0
   d5516:	460f      	mov	r7, r1
   d5518:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d551a:	b1c4      	cbz	r4, d554e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d551c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5520:	6803      	ldr	r3, [r0, #0]
   d5522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5524:	4798      	blx	r3
   d5526:	b908      	cbnz	r0, d552c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5528:	2000      	movs	r0, #0
   d552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d552c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5530:	2cfa      	cmp	r4, #250	; 0xfa
   d5532:	6803      	ldr	r3, [r0, #0]
   d5534:	4625      	mov	r5, r4
   d5536:	bfa8      	it	ge
   d5538:	25fa      	movge	r5, #250	; 0xfa
   d553a:	68db      	ldr	r3, [r3, #12]
   d553c:	462a      	mov	r2, r5
   d553e:	4639      	mov	r1, r7
   d5540:	4798      	blx	r3
   d5542:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5544:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5546:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5548:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d554a:	d0e6      	beq.n	d551a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d554c:	e7ec      	b.n	d5528 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d554e:	2001      	movs	r0, #1
}
   d5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5552 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d5552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5556:	4606      	mov	r6, r0
   d5558:	4688      	mov	r8, r1
   d555a:	4691      	mov	r9, r2
   d555c:	461f      	mov	r7, r3
   d555e:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5560:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5562:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5566:	6803      	ldr	r3, [r0, #0]
   d5568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d556a:	4798      	blx	r3
   d556c:	b1d0      	cbz	r0, d55a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d556e:	2d00      	cmp	r5, #0
   d5570:	db18      	blt.n	d55a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5572:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5576:	6803      	ldr	r3, [r0, #0]
   d5578:	691b      	ldr	r3, [r3, #16]
   d557a:	4798      	blx	r3
   d557c:	b160      	cbz	r0, d5598 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d557e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5582:	6803      	ldr	r3, [r0, #0]
   d5584:	695b      	ldr	r3, [r3, #20]
   d5586:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5588:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d558c:	3401      	adds	r4, #1
   d558e:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5590:	454c      	cmp	r4, r9
   d5592:	d007      	beq.n	d55a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5594:	463d      	mov	r5, r7
   d5596:	e7ec      	b.n	d5572 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5598:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d559a:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d559c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d559e:	f002 f9ed 	bl	d797c <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d55a2:	e7de      	b.n	d5562 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d55aa <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d55aa:	b570      	push	{r4, r5, r6, lr}
   d55ac:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d55ae:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d55b2:	2296      	movs	r2, #150	; 0x96
   d55b4:	2100      	movs	r1, #0
   d55b6:	4628      	mov	r0, r5
   d55b8:	f006 f8d8 	bl	db76c <memset>
  strcpy((char *)buffer, servername);
   d55bc:	6861      	ldr	r1, [r4, #4]
   d55be:	4628      	mov	r0, r5
   d55c0:	f006 f90e 	bl	db7e0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d55c4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55c8:	8922      	ldrh	r2, [r4, #8]
   d55ca:	6803      	ldr	r3, [r0, #0]
   d55cc:	4629      	mov	r1, r5
   d55ce:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d55d0:	2300      	movs	r3, #0
   d55d2:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d55d4:	3000      	adds	r0, #0
   d55d6:	bf18      	it	ne
   d55d8:	2001      	movne	r0, #1
   d55da:	bd70      	pop	{r4, r5, r6, pc}

000d55dc <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d55dc:	b510      	push	{r4, lr}
   d55de:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d55e0:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d55e4:	6803      	ldr	r3, [r0, #0]
   d55e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55e8:	4798      	blx	r3
   d55ea:	b120      	cbz	r0, d55f6 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d55ec:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55f0:	6803      	ldr	r3, [r0, #0]
   d55f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55f4:	4798      	blx	r3
  }
  return true;
}
   d55f6:	2001      	movs	r0, #1
   d55f8:	bd10      	pop	{r4, pc}

000d55fa <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d55fa:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d55fc:	6803      	ldr	r3, [r0, #0]
   d55fe:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5600:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d5602:	4798      	blx	r3
   d5604:	b9c8      	cbnz	r0, d563a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5606:	4620      	mov	r0, r4
   d5608:	f000 fa5f 	bl	d5aca <_ZN13Adafruit_MQTT7connectEv>
   d560c:	2504      	movs	r5, #4
   d560e:	b170      	cbz	r0, d562e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5610:	3d01      	subs	r5, #1
   d5612:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5616:	d00a      	beq.n	d562e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5618:	4620      	mov	r0, r4
   d561a:	f000 f8a9 	bl	d5770 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d561e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5622:	f002 f9ab 	bl	d797c <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5626:	4620      	mov	r0, r4
   d5628:	f000 fa4f 	bl	d5aca <_ZN13Adafruit_MQTT7connectEv>
   d562c:	e7ef      	b.n	d560e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d562e:	6823      	ldr	r3, [r4, #0]
   d5630:	4620      	mov	r0, r4
   d5632:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5638:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d563a:	bd70      	pop	{r4, r5, r6, pc}

000d563c <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d563c:	f001 b99c 	b.w	d6978 <HAL_Pin_Map>

000d5640 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5640:	b570      	push	{r4, r5, r6, lr}
   d5642:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5644:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5646:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5648:	f006 f8ed 	bl	db826 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d564c:	1203      	asrs	r3, r0, #8
   d564e:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5650:	7060      	strb	r0, [r4, #1]
   d5652:	b285      	uxth	r5, r0
   d5654:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5656:	462a      	mov	r2, r5
   d5658:	4631      	mov	r1, r6
   d565a:	4620      	mov	r0, r4
   d565c:	f006 f925 	bl	db8aa <strncpy>
  return p+len;
}
   d5660:	1960      	adds	r0, r4, r5
   d5662:	bd70      	pop	{r4, r5, r6, pc}

000d5664 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5664:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5666:	6103      	str	r3, [r0, #16]
  password = pass;
   d5668:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d566a:	4d0d      	ldr	r5, [pc, #52]	; (d56a0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d566c:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d566e:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5670:	4a0c      	ldr	r2, [pc, #48]	; (d56a4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5672:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5674:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5676:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5678:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d567a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d567e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5682:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5686:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d568a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d568e:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5690:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5692:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5696:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d569a:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d569e:	bd30      	pop	{r4, r5, pc}
   d56a0:	000dc588 	.word	0x000dc588
   d56a4:	000dc5b1 	.word	0x000dc5b1

000d56a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56ac:	fa0f fa83 	sxth.w	sl, r3
   d56b0:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56b2:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56b4:	699d      	ldr	r5, [r3, #24]
   d56b6:	2201      	movs	r2, #1
   d56b8:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56ba:	4606      	mov	r6, r0
   d56bc:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56be:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d56c0:	b2c0      	uxtb	r0, r0
   d56c2:	2801      	cmp	r0, #1
   d56c4:	d001      	beq.n	d56ca <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d56c6:	2000      	movs	r0, #0
   d56c8:	e034      	b.n	d5734 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d56ca:	1c65      	adds	r5, r4, #1
   d56cc:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d56d0:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d56d2:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d56d6:	6833      	ldr	r3, [r6, #0]
   d56d8:	699b      	ldr	r3, [r3, #24]
   d56da:	2201      	movs	r2, #1
   d56dc:	461f      	mov	r7, r3
   d56de:	4629      	mov	r1, r5
   d56e0:	4653      	mov	r3, sl
   d56e2:	4630      	mov	r0, r6
   d56e4:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d56e6:	b2c0      	uxtb	r0, r0
   d56e8:	2801      	cmp	r0, #1
   d56ea:	d1ec      	bne.n	d56c6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d56ec:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d56f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d56f4:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d56f6:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d56fa:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d56fe:	d0e2      	beq.n	d56c6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5700:	061b      	lsls	r3, r3, #24
   d5702:	d4e8      	bmi.n	d56d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5704:	9b01      	ldr	r3, [sp, #4]
   d5706:	1b2c      	subs	r4, r5, r4
   d5708:	1b1b      	subs	r3, r3, r4
   d570a:	3b01      	subs	r3, #1
   d570c:	4599      	cmp	r9, r3
   d570e:	6833      	ldr	r3, [r6, #0]
   d5710:	d906      	bls.n	d5720 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d5712:	9a01      	ldr	r2, [sp, #4]
   d5714:	699f      	ldr	r7, [r3, #24]
   d5716:	3a01      	subs	r2, #1
   d5718:	1b12      	subs	r2, r2, r4
   d571a:	4653      	mov	r3, sl
   d571c:	b292      	uxth	r2, r2
   d571e:	e003      	b.n	d5728 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5720:	699f      	ldr	r7, [r3, #24]
   d5722:	fa1f f289 	uxth.w	r2, r9
   d5726:	4653      	mov	r3, sl
   d5728:	4629      	mov	r1, r5
   d572a:	4630      	mov	r0, r6
   d572c:	47b8      	blx	r7
   d572e:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5730:	4420      	add	r0, r4
   d5732:	b280      	uxth	r0, r0
}
   d5734:	b003      	add	sp, #12
   d5736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d573c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d573e:	4605      	mov	r5, r0
   d5740:	460c      	mov	r4, r1
   d5742:	4616      	mov	r6, r2
   d5744:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5746:	463b      	mov	r3, r7
   d5748:	2296      	movs	r2, #150	; 0x96
   d574a:	4621      	mov	r1, r4
   d574c:	4628      	mov	r0, r5
   d574e:	f7ff ffab 	bl	d56a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d5752:	b148      	cbz	r0, d5768 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5754:	7823      	ldrb	r3, [r4, #0]
   d5756:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d575a:	d005      	beq.n	d5768 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d575c:	f002 fd74 	bl	d8248 <_Z16_fetch_usbserialv>
   d5760:	4902      	ldr	r1, [pc, #8]	; (d576c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d5762:	f001 ff36 	bl	d75d2 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5766:	e7ee      	b.n	d5746 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d576a:	bf00      	nop
   d576c:	000dc5b2 	.word	0x000dc5b2

000d5770 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5770:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d5772:	23e0      	movs	r3, #224	; 0xe0
   d5774:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5778:	2300      	movs	r3, #0
   d577a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d577e:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5780:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5782:	695b      	ldr	r3, [r3, #20]
   d5784:	2202      	movs	r2, #2
   d5786:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d578a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d578c:	6823      	ldr	r3, [r4, #0]
   d578e:	4620      	mov	r0, r4
   d5790:	691b      	ldr	r3, [r3, #16]

}
   d5792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5796:	4718      	bx	r3

000d5798 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5798:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d579c:	b530      	push	{r4, r5, lr}
   d579e:	4613      	mov	r3, r2
   d57a0:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d57a4:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d57a8:	428d      	cmp	r5, r1
   d57aa:	d00f      	beq.n	d57cc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57ac:	42a3      	cmp	r3, r4
   d57ae:	d1f9      	bne.n	d57a4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d57b0:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d57b2:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d57b6:	b924      	cbnz	r4, d57c2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d57b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d57bc:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d57c0:	e004      	b.n	d57cc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d57c2:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57c4:	2b05      	cmp	r3, #5
   d57c6:	d1f4      	bne.n	d57b2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d57c8:	2000      	movs	r0, #0
   d57ca:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d57cc:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d57ce:	bd30      	pop	{r4, r5, pc}

000d57d0 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57d4:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d57d8:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57da:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57dc:	2296      	movs	r2, #150	; 0x96
   d57de:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57e0:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57e2:	f7ff ff61 	bl	d56a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d57e6:	4606      	mov	r6, r0
   d57e8:	b310      	cbz	r0, d5830 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d57ea:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d57ee:	b2bb      	uxth	r3, r7
   d57f0:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d57f2:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d57f6:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d57fa:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d57fc:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d57fe:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5802:	f1bb 0f00 	cmp.w	fp, #0
   d5806:	d00e      	beq.n	d5826 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5808:	f8db 1000 	ldr.w	r1, [fp]
   d580c:	9103      	str	r1, [sp, #12]
   d580e:	4608      	mov	r0, r1
   d5810:	f006 f809 	bl	db826 <strlen>
   d5814:	42b8      	cmp	r0, r7
   d5816:	4680      	mov	r8, r0
   d5818:	9903      	ldr	r1, [sp, #12]
   d581a:	d104      	bne.n	d5826 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d581c:	463a      	mov	r2, r7
   d581e:	9802      	ldr	r0, [sp, #8]
   d5820:	f006 f80a 	bl	db838 <strncasecmp>
   d5824:	b128      	cbz	r0, d5832 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d5826:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5828:	2d05      	cmp	r5, #5
   d582a:	d1e8      	bne.n	d57fe <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d582c:	2000      	movs	r0, #0
   d582e:	e04a      	b.n	d58c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5830:	e049      	b.n	d58c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d5832:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d5836:	f00a 0a06 	and.w	sl, sl, #6
   d583a:	f1ba 0f02 	cmp.w	sl, #2
   d583e:	d13f      	bne.n	d58c0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5840:	19e2      	adds	r2, r4, r7
   d5842:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d5846:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d584a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d584e:	2214      	movs	r2, #20
   d5850:	2100      	movs	r1, #0
   d5852:	f10b 0005 	add.w	r0, fp, #5
   d5856:	f005 ff89 	bl	db76c <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d585a:	9b01      	ldr	r3, [sp, #4]
   d585c:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5860:	30fc      	adds	r0, #252	; 0xfc
   d5862:	4406      	add	r6, r0
   d5864:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5868:	ebca 0606 	rsb	r6, sl, r6
   d586c:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d586e:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5870:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5874:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5878:	bf28      	it	cs
   d587a:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d587c:	4451      	add	r1, sl
   d587e:	4632      	mov	r2, r6
   d5880:	4449      	add	r1, r9
   d5882:	3005      	adds	r0, #5
   d5884:	f005 ff57 	bl	db736 <memmove>
  subscriptions[i]->datalen = datalen;
   d5888:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d588c:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d588e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5892:	f003 0306 	and.w	r3, r3, #6
   d5896:	2b02      	cmp	r3, #2
   d5898:	d10f      	bne.n	d58ba <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d589a:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d589e:	123b      	asrs	r3, r7, #8
   d58a0:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d58a4:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d58a6:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d58aa:	2240      	movs	r2, #64	; 0x40
   d58ac:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d58b0:	695b      	ldr	r3, [r3, #20]
   d58b2:	2204      	movs	r2, #4
   d58b4:	a905      	add	r1, sp, #20
   d58b6:	4620      	mov	r0, r4
   d58b8:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d58ba:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d58be:	e002      	b.n	d58c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d58c0:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d58c2:	4682      	mov	sl, r0
   d58c4:	e7c3      	b.n	d584e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d58c6:	b007      	add	sp, #28
   d58c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d58cc <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d58cc:	b538      	push	{r3, r4, r5, lr}
   d58ce:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d58d0:	4608      	mov	r0, r1
   d58d2:	2310      	movs	r3, #16
   d58d4:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d58d8:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d58da:	4929      	ldr	r1, [pc, #164]	; (d5980 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d58dc:	f7ff feb0 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d58e0:	2304      	movs	r3, #4
   d58e2:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d58e4:	2302      	movs	r3, #2
   d58e6:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d58e8:	69a3      	ldr	r3, [r4, #24]
   d58ea:	b1ab      	cbz	r3, d5918 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d58ec:	781b      	ldrb	r3, [r3, #0]
   d58ee:	b19b      	cbz	r3, d5918 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d58f0:	2306      	movs	r3, #6
   d58f2:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d58f4:	f894 3020 	ldrb.w	r3, [r4, #32]
   d58f8:	2b01      	cmp	r3, #1
   d58fa:	d101      	bne.n	d5900 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d58fc:	230e      	movs	r3, #14
   d58fe:	e002      	b.n	d5906 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5900:	2b02      	cmp	r3, #2
   d5902:	d101      	bne.n	d5908 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5904:	231e      	movs	r3, #30
   d5906:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5908:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d590c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d590e:	bf02      	ittt	eq
   d5910:	7843      	ldrbeq	r3, [r0, #1]
   d5912:	f043 0320 	orreq.w	r3, r3, #32
   d5916:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5918:	6923      	ldr	r3, [r4, #16]
   d591a:	781b      	ldrb	r3, [r3, #0]
   d591c:	b11b      	cbz	r3, d5926 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d591e:	7843      	ldrb	r3, [r0, #1]
   d5920:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5924:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5926:	6963      	ldr	r3, [r4, #20]
   d5928:	781b      	ldrb	r3, [r3, #0]
   d592a:	b11b      	cbz	r3, d5934 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d592c:	7843      	ldrb	r3, [r0, #1]
   d592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5932:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5934:	2301      	movs	r3, #1
   d5936:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5938:	232c      	movs	r3, #44	; 0x2c
   d593a:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d593c:	68e1      	ldr	r1, [r4, #12]
   d593e:	780b      	ldrb	r3, [r1, #0]
   d5940:	b11b      	cbz	r3, d594a <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5942:	3004      	adds	r0, #4
   d5944:	f7ff fe7c 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
   d5948:	e002      	b.n	d5950 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d594a:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d594c:	7143      	strb	r3, [r0, #5]
      p++;
   d594e:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5950:	69a1      	ldr	r1, [r4, #24]
   d5952:	b131      	cbz	r1, d5962 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5954:	780b      	ldrb	r3, [r1, #0]
   d5956:	b123      	cbz	r3, d5962 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5958:	f7ff fe72 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d595c:	69e1      	ldr	r1, [r4, #28]
   d595e:	f7ff fe6f 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5962:	6921      	ldr	r1, [r4, #16]
   d5964:	780b      	ldrb	r3, [r1, #0]
   d5966:	b10b      	cbz	r3, d596c <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5968:	f7ff fe6a 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d596c:	6961      	ldr	r1, [r4, #20]
   d596e:	780b      	ldrb	r3, [r1, #0]
   d5970:	b10b      	cbz	r3, d5976 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5972:	f7ff fe65 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5976:	1b40      	subs	r0, r0, r5
   d5978:	b2c0      	uxtb	r0, r0
   d597a:	1e83      	subs	r3, r0, #2
   d597c:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d597e:	bd38      	pop	{r3, r4, r5, pc}
   d5980:	000dc5d1 	.word	0x000dc5d1

000d5984 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5988:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d598a:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d598c:	460e      	mov	r6, r1
   d598e:	4691      	mov	r9, r2
   d5990:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5992:	f005 ff48 	bl	db826 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5996:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d599a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d599e:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d59a0:	f1b8 0f00 	cmp.w	r8, #0
   d59a4:	d101      	bne.n	d59aa <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d59a6:	1c83      	adds	r3, r0, #2
   d59a8:	e000      	b.n	d59ac <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d59aa:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59ac:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d59b0:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d59b2:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59b4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d59b8:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59ba:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d59be:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d59c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d59c4:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d59c6:	bf18      	it	ne
   d59c8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d59cc:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d59d0:	2b00      	cmp	r3, #0
   d59d2:	d1f5      	bne.n	d59c0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d59d4:	4649      	mov	r1, r9
   d59d6:	f7ff fe33 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>
   d59da:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d59dc:	f1b8 0f00 	cmp.w	r8, #0
   d59e0:	d00c      	beq.n	d59fc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d59e2:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59e6:	0a12      	lsrs	r2, r2, #8
   d59e8:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d59ea:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59ee:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d59f0:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59f4:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d59f6:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d59f8:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d59fc:	4622      	mov	r2, r4
   d59fe:	4639      	mov	r1, r7
   d5a00:	4618      	mov	r0, r3
   d5a02:	f005 fe98 	bl	db736 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5a06:	4420      	add	r0, r4
   d5a08:	1b80      	subs	r0, r0, r6
}
   d5a0a:	b280      	uxth	r0, r0
   d5a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a10 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a12:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a16:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a1a:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a1c:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5a20:	4613      	mov	r3, r2
   d5a22:	460a      	mov	r2, r1
   d5a24:	4629      	mov	r1, r5
   d5a26:	f7ff ffad 	bl	d5984 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5a2a:	6823      	ldr	r3, [r4, #0]
   d5a2c:	4602      	mov	r2, r0
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	4629      	mov	r1, r5
   d5a32:	4620      	mov	r0, r4
   d5a34:	4798      	blx	r3
   d5a36:	b908      	cbnz	r0, d5a3c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5a38:	2000      	movs	r0, #0
   d5a3a:	e017      	b.n	d5a6c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5a3c:	b1b6      	cbz	r6, d5a6c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5a42:	2296      	movs	r2, #150	; 0x96
   d5a44:	4629      	mov	r1, r5
   d5a46:	4620      	mov	r0, r4
   d5a48:	f7ff fe2e 	bl	d56a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5a4c:	2804      	cmp	r0, #4
   d5a4e:	d1f3      	bne.n	d5a38 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5a50:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5a54:	111b      	asrs	r3, r3, #4
   d5a56:	2b04      	cmp	r3, #4
   d5a58:	d1ee      	bne.n	d5a38 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5a5a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5a5c:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5a60:	ba5b      	rev16	r3, r3
   d5a62:	3301      	adds	r3, #1
   d5a64:	b29b      	uxth	r3, r3
   d5a66:	1ac3      	subs	r3, r0, r3
   d5a68:	4258      	negs	r0, r3
   d5a6a:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5a6c:	b002      	add	sp, #8
   d5a6e:	bd70      	pop	{r4, r5, r6, pc}

000d5a70 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a72:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5a74:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5a76:	461f      	mov	r7, r3
   d5a78:	460e      	mov	r6, r1
   d5a7a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5a7c:	f005 fed3 	bl	db826 <strlen>
   d5a80:	9700      	str	r7, [sp, #0]
   d5a82:	b283      	uxth	r3, r0
   d5a84:	4622      	mov	r2, r4
   d5a86:	4631      	mov	r1, r6
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f7ff ffc1 	bl	d5a10 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5a8e:	b003      	add	sp, #12
   d5a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a92 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5a92:	b538      	push	{r3, r4, r5, lr}
   d5a94:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5a96:	2382      	movs	r3, #130	; 0x82
   d5a98:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5a9a:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5a9c:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5aa0:	0a09      	lsrs	r1, r1, #8
   d5aa2:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5aa4:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5aa8:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5aaa:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5aae:	3101      	adds	r1, #1
   d5ab0:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5ab4:	4611      	mov	r1, r2
   d5ab6:	1d20      	adds	r0, r4, #4
   d5ab8:	f7ff fdc2 	bl	d5640 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5abc:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5ac0:	1b00      	subs	r0, r0, r4
   d5ac2:	b2c0      	uxtb	r0, r0
   d5ac4:	1e83      	subs	r3, r0, #2
   d5ac6:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5ac8:	bd38      	pop	{r3, r4, r5, pc}

000d5aca <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5ace:	6803      	ldr	r3, [r0, #0]
   d5ad0:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5ad2:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5ad4:	4798      	blx	r3
   d5ad6:	b918      	cbnz	r0, d5ae0 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5ad8:	f04f 30ff 	mov.w	r0, #4294967295
   d5adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5ae0:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5ae4:	4629      	mov	r1, r5
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	f7ff fef0 	bl	d58cc <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5aec:	6823      	ldr	r3, [r4, #0]
   d5aee:	b282      	uxth	r2, r0
   d5af0:	695b      	ldr	r3, [r3, #20]
   d5af2:	4629      	mov	r1, r5
   d5af4:	4620      	mov	r0, r4
   d5af6:	4798      	blx	r3
   d5af8:	2800      	cmp	r0, #0
   d5afa:	d0ed      	beq.n	d5ad8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5afc:	f241 7370 	movw	r3, #6000	; 0x1770
   d5b00:	2296      	movs	r2, #150	; 0x96
   d5b02:	4629      	mov	r1, r5
   d5b04:	4620      	mov	r0, r4
   d5b06:	f7ff fdcf 	bl	d56a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5b0a:	b2c0      	uxtb	r0, r0
   d5b0c:	2804      	cmp	r0, #4
   d5b0e:	d1e3      	bne.n	d5ad8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5b10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5b12:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5b16:	d1df      	bne.n	d5ad8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5b18:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5b1c:	b110      	cbz	r0, d5b24 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5b1e:	b240      	sxtb	r0, r0
   d5b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b24:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5b28:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5b2c:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5b30:	b1fb      	cbz	r3, d5b72 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5b32:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5b34:	683a      	ldr	r2, [r7, #0]
   d5b36:	4629      	mov	r1, r5
   d5b38:	7913      	ldrb	r3, [r2, #4]
   d5b3a:	6812      	ldr	r2, [r2, #0]
   d5b3c:	4620      	mov	r0, r4
   d5b3e:	f7ff ffa8 	bl	d5a92 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5b42:	6823      	ldr	r3, [r4, #0]
   d5b44:	b282      	uxth	r2, r0
   d5b46:	695b      	ldr	r3, [r3, #20]
   d5b48:	4629      	mov	r1, r5
   d5b4a:	4620      	mov	r0, r4
   d5b4c:	4798      	blx	r3
   d5b4e:	2800      	cmp	r0, #0
   d5b50:	d0c2      	beq.n	d5ad8 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5b52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5b56:	2209      	movs	r2, #9
   d5b58:	4629      	mov	r1, r5
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	f7ff fdee 	bl	d573c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5b60:	b938      	cbnz	r0, d5b72 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5b62:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5b64:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5b68:	d1e4      	bne.n	d5b34 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5b6a:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5b72:	4547      	cmp	r7, r8
   d5b74:	d1da      	bne.n	d5b2c <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5b76:	2000      	movs	r0, #0
   d5b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b7c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5b7c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5b7e:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5b82:	7203      	strb	r3, [r0, #8]
}
   d5b84:	bd10      	pop	{r4, pc}

000d5b86 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5b86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b88:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5b8a:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5b8c:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5b8e:	a901      	add	r1, sp, #4
   d5b90:	f001 fbb0 	bl	d72f4 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5b94:	7a23      	ldrb	r3, [r4, #8]
   d5b96:	aa01      	add	r2, sp, #4
   d5b98:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b9c:	f7ff ff68 	bl	d5a70 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5ba0:	b004      	add	sp, #16
   d5ba2:	bd10      	pop	{r4, pc}

000d5ba4 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5ba4:	f7ff bfef 	b.w	d5b86 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5ba8 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	b092      	sub	sp, #72	; 0x48
   d5bac:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5bae:	460b      	mov	r3, r1
   d5bb0:	2200      	movs	r2, #0
   d5bb2:	490b      	ldr	r1, [pc, #44]	; (d5be0 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5bb4:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5bb6:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5bba:	f001 f9d1 	bl	d6f60 <sprintf>
  sprintf(sout, fmt, val);
   d5bbe:	ed9d 0b00 	vldr	d0, [sp]
   d5bc2:	a902      	add	r1, sp, #8
   d5bc4:	ec53 2b10 	vmov	r2, r3, d0
   d5bc8:	a807      	add	r0, sp, #28
   d5bca:	f001 f9c9 	bl	d6f60 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5bce:	7a23      	ldrb	r3, [r4, #8]
   d5bd0:	aa07      	add	r2, sp, #28
   d5bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5bd6:	f7ff ff4b 	bl	d5a70 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5bda:	b012      	add	sp, #72	; 0x48
   d5bdc:	bd10      	pop	{r4, pc}
   d5bde:	bf00      	nop
   d5be0:	000dc5d6 	.word	0x000dc5d6

000d5be4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5be4:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5be6:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5be8:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5bea:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5bec:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5bee:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5bf0:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5bf2:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5bf4:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5bf6:	6283      	str	r3, [r0, #40]	; 0x28
   d5bf8:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5bfa:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5bfc:	bd10      	pop	{r4, pc}

000d5bfe <_GLOBAL__sub_I__Z11printBufferPht>:
   d5bfe:	f000 bebb 	b.w	d6978 <HAL_Pin_Map>
	...

000d5c04 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5c04:	b510      	push	{r4, lr}
   d5c06:	4b05      	ldr	r3, [pc, #20]	; (d5c1c <_ZN10JsonBufferD1Ev+0x18>)
   d5c08:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5c0a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5c0c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5c0e:	b91b      	cbnz	r3, d5c18 <_ZN10JsonBufferD1Ev+0x14>
   d5c10:	6840      	ldr	r0, [r0, #4]
   d5c12:	b108      	cbz	r0, d5c18 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5c14:	f001 f994 	bl	d6f40 <free>
	}
}
   d5c18:	4620      	mov	r0, r4
   d5c1a:	bd10      	pop	{r4, pc}
   d5c1c:	000dc7a0 	.word	0x000dc7a0

000d5c20 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5c20:	b510      	push	{r4, lr}
   d5c22:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5c24:	f7ff ffee 	bl	d5c04 <_ZN10JsonBufferD1Ev>
   d5c28:	4620      	mov	r0, r4
   d5c2a:	2114      	movs	r1, #20
   d5c2c:	f003 f9b4 	bl	d8f98 <_ZdlPvj>
   d5c30:	4620      	mov	r0, r4
   d5c32:	bd10      	pop	{r4, pc}

000d5c34 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5c34:	b510      	push	{r4, lr}
   d5c36:	4b03      	ldr	r3, [pc, #12]	; (d5c44 <_ZN10JsonWriterD1Ev+0x10>)
   d5c38:	6003      	str	r3, [r0, #0]
   d5c3a:	4604      	mov	r4, r0
   d5c3c:	f7ff ffe2 	bl	d5c04 <_ZN10JsonBufferD1Ev>

}
   d5c40:	4620      	mov	r0, r4
   d5c42:	bd10      	pop	{r4, pc}
   d5c44:	000dc7b0 	.word	0x000dc7b0

000d5c48 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5c48:	b510      	push	{r4, lr}
   d5c4a:	4604      	mov	r4, r0

}
   d5c4c:	f7ff fff2 	bl	d5c34 <_ZN10JsonWriterD1Ev>
   d5c50:	4620      	mov	r0, r4
   d5c52:	2130      	movs	r1, #48	; 0x30
   d5c54:	f003 f9a0 	bl	d8f98 <_ZdlPvj>
   d5c58:	4620      	mov	r0, r4
   d5c5a:	bd10      	pop	{r4, pc}

000d5c5c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5c5c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5c5e:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5c60:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5c62:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5c64:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5c66:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5c68:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5c6c:	4770      	bx	lr
	...

000d5c70 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c70:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c72:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c74:	60c3      	str	r3, [r0, #12]
   d5c76:	2301      	movs	r3, #1
   d5c78:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c7a:	4b05      	ldr	r3, [pc, #20]	; (d5c90 <_ZN10JsonWriterC1EPcj+0x20>)
   d5c7c:	6003      	str	r3, [r0, #0]
   d5c7e:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c82:	6041      	str	r1, [r0, #4]
   d5c84:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c86:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5c88:	f7ff ffe8 	bl	d5c5c <_ZN10JsonWriter4initEv>
}
   d5c8c:	bd10      	pop	{r4, pc}
   d5c8e:	bf00      	nop
   d5c90:	000dc7b0 	.word	0x000dc7b0

000d5c94 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5c94:	68c3      	ldr	r3, [r0, #12]
   d5c96:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5c98:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d5c9a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5c9c:	bf3f      	itttt	cc
   d5c9e:	6842      	ldrcc	r2, [r0, #4]
   d5ca0:	1c5c      	addcc	r4, r3, #1
   d5ca2:	60c4      	strcc	r4, [r0, #12]
   d5ca4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5ca6:	bf24      	itt	cs
   d5ca8:	2301      	movcs	r3, #1
   d5caa:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5cae:	bd10      	pop	{r4, pc}

000d5cb0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5cb0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5cb2:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5cb4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5cb6:	b143      	cbz	r3, d5cca <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5cb8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5cbc:	7e59      	ldrb	r1, [r3, #25]
   d5cbe:	b109      	cbz	r1, d5cc4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5cc0:	f7ff ffe8 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5cc4:	6963      	ldr	r3, [r4, #20]
   d5cc6:	3b01      	subs	r3, #1
   d5cc8:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d5cca:	68a3      	ldr	r3, [r4, #8]
   d5ccc:	68e0      	ldr	r0, [r4, #12]
   d5cce:	6861      	ldr	r1, [r4, #4]
   d5cd0:	4298      	cmp	r0, r3
   d5cd2:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5cd6:	bf2a      	itet	cs
   d5cd8:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d5cda:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5cdc:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5ce0:	bd10      	pop	{r4, pc}

000d5ce2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5ce2:	b570      	push	{r4, r5, r6, lr}
   d5ce4:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5ce6:	68c0      	ldr	r0, [r0, #12]
   d5ce8:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5cea:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5cec:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5cee:	4613      	mov	r3, r2
   d5cf0:	4430      	add	r0, r6
   d5cf2:	460a      	mov	r2, r1
   d5cf4:	4629      	mov	r1, r5
   d5cf6:	f001 f94b 	bl	d6f90 <vsnprintf>
	if (count <= spaceAvailable) {
   d5cfa:	4285      	cmp	r5, r0
		offset += count;
   d5cfc:	bf2d      	iteet	cs
   d5cfe:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5d00:	68a3      	ldrcc	r3, [r4, #8]
   d5d02:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5d04:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5d06:	bf36      	itet	cc
   d5d08:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5d0a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5d0c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5d10:	bd70      	pop	{r4, r5, r6, pc}

000d5d12 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5d12:	b40e      	push	{r1, r2, r3}
   d5d14:	b503      	push	{r0, r1, lr}
   d5d16:	aa03      	add	r2, sp, #12
   d5d18:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5d1c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5d1e:	f7ff ffe0 	bl	d5ce2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5d22:	b002      	add	sp, #8
   d5d24:	f85d eb04 	ldr.w	lr, [sp], #4
   d5d28:	b003      	add	sp, #12
   d5d2a:	4770      	bx	lr

000d5d2c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d30:	4604      	mov	r4, r0
   d5d32:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5d34:	4617      	mov	r7, r2
   d5d36:	b112      	cbz	r2, d5d3e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5d38:	2122      	movs	r1, #34	; 0x22
   d5d3a:	f7ff ffab 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5d3e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5d40:	5d71      	ldrb	r1, [r6, r5]
   d5d42:	eb06 0805 	add.w	r8, r6, r5
   d5d46:	2900      	cmp	r1, #0
   d5d48:	d071      	beq.n	d5e2e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5d4a:	68e2      	ldr	r2, [r4, #12]
   d5d4c:	68a3      	ldr	r3, [r4, #8]
   d5d4e:	429a      	cmp	r2, r3
   d5d50:	d26d      	bcs.n	d5e2e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5d52:	060b      	lsls	r3, r1, #24
   d5d54:	d533      	bpl.n	d5dbe <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5d56:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5d5a:	2be0      	cmp	r3, #224	; 0xe0
   d5d5c:	d117      	bne.n	d5d8e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5d5e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5d62:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5d66:	2a80      	cmp	r2, #128	; 0x80
   d5d68:	d111      	bne.n	d5d8e <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5d6a:	f105 0802 	add.w	r8, r5, #2
   d5d6e:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5d72:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5d76:	2880      	cmp	r0, #128	; 0x80
   d5d78:	d109      	bne.n	d5d8e <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5d7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5d7e:	019b      	lsls	r3, r3, #6
   d5d80:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5d84:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5d88:	431a      	orrs	r2, r3
   d5d8a:	b292      	uxth	r2, r2
   d5d8c:	e011      	b.n	d5db2 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5d8e:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5d92:	2bc0      	cmp	r3, #192	; 0xc0
   d5d94:	d146      	bne.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d5d96:	f105 0801 	add.w	r8, r5, #1
   d5d9a:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5d9e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5da2:	2a80      	cmp	r2, #128	; 0x80
   d5da4:	d13e      	bne.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5da6:	0189      	lsls	r1, r1, #6
   d5da8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5db0:	431a      	orrs	r2, r3
   d5db2:	4923      	ldr	r1, [pc, #140]	; (d5e40 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5db4:	4620      	mov	r0, r4
   d5db6:	f7ff ffac 	bl	d5d12 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5dba:	4645      	mov	r5, r8
   d5dbc:	e035      	b.n	d5e2a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5dbe:	290c      	cmp	r1, #12
   d5dc0:	d018      	beq.n	d5df4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5dc2:	d80b      	bhi.n	d5ddc <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5dc4:	2909      	cmp	r1, #9
   d5dc6:	d021      	beq.n	d5e0c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5dc8:	290a      	cmp	r1, #10
   d5dca:	d019      	beq.n	d5e00 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5dcc:	2908      	cmp	r1, #8
   d5dce:	d129      	bne.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5dd0:	215c      	movs	r1, #92	; 0x5c
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	f7ff ff5e 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5dd8:	2162      	movs	r1, #98	; 0x62
   d5dda:	e023      	b.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5ddc:	2922      	cmp	r1, #34	; 0x22
   d5dde:	d01b      	beq.n	d5e18 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5de0:	295c      	cmp	r1, #92	; 0x5c
   d5de2:	d019      	beq.n	d5e18 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5de4:	290d      	cmp	r1, #13
   d5de6:	d11d      	bne.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5de8:	215c      	movs	r1, #92	; 0x5c
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff ff52 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5df0:	2172      	movs	r1, #114	; 0x72
   d5df2:	e017      	b.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5df4:	215c      	movs	r1, #92	; 0x5c
   d5df6:	4620      	mov	r0, r4
   d5df8:	f7ff ff4c 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5dfc:	2166      	movs	r1, #102	; 0x66
   d5dfe:	e011      	b.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5e00:	215c      	movs	r1, #92	; 0x5c
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ff46 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5e08:	216e      	movs	r1, #110	; 0x6e
   d5e0a:	e00b      	b.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5e0c:	215c      	movs	r1, #92	; 0x5c
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f7ff ff40 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5e14:	2174      	movs	r1, #116	; 0x74
   d5e16:	e005      	b.n	d5e24 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5e18:	215c      	movs	r1, #92	; 0x5c
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f7ff ff3a 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5e20:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5e24:	4620      	mov	r0, r4
   d5e26:	f7ff ff35 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5e2a:	3501      	adds	r5, #1
   d5e2c:	e788      	b.n	d5d40 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5e2e:	b12f      	cbz	r7, d5e3c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5e30:	4620      	mov	r0, r4
   d5e32:	2122      	movs	r1, #34	; 0x22
	}

}
   d5e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5e38:	f7ff bf2c 	b.w	d5c94 <_ZN10JsonWriter10insertCharEc>
   d5e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e40:	000dc7c1 	.word	0x000dc7c1

000d5e44 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5e44:	6942      	ldr	r2, [r0, #20]
   d5e46:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5e4a:	7e1a      	ldrb	r2, [r3, #24]
   d5e4c:	b112      	cbz	r2, d5e54 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5e4e:	2200      	movs	r2, #0
   d5e50:	761a      	strb	r2, [r3, #24]
   d5e52:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5e54:	212c      	movs	r1, #44	; 0x2c
   d5e56:	f7ff bf1d 	b.w	d5c94 <_ZN10JsonWriter10insertCharEc>

000d5e5a <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5e5c:	6943      	ldr	r3, [r0, #20]
   d5e5e:	3301      	adds	r3, #1
   d5e60:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5e62:	460e      	mov	r6, r1
   d5e64:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5e66:	d80e      	bhi.n	d5e86 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5e68:	f7ff ffec 	bl	d5e44 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5e6c:	6943      	ldr	r3, [r0, #20]
   d5e6e:	1c5a      	adds	r2, r3, #1
   d5e70:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d5e74:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d5e76:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5e78:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5e7a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5e7c:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d5e7e:	f7ff ff09 	bl	d5c94 <_ZN10JsonWriter10insertCharEc>
   d5e82:	4620      	mov	r0, r4
   d5e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d5e86:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5e8c <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d5e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e8e:	4604      	mov	r4, r0
   d5e90:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d5e94:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d5e96:	2d00      	cmp	r5, #0
   d5e98:	db0a      	blt.n	d5eb0 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d5e9a:	f004 fc79 	bl	da790 <__aeabi_f2d>
   d5e9e:	462a      	mov	r2, r5
   d5ea0:	e9cd 0100 	strd	r0, r1, [sp]
   d5ea4:	4908      	ldr	r1, [pc, #32]	; (d5ec8 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	f7ff ff33 	bl	d5d12 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d5eac:	b003      	add	sp, #12
   d5eae:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5eb0:	f004 fc6e 	bl	da790 <__aeabi_f2d>
   d5eb4:	460b      	mov	r3, r1
   d5eb6:	4905      	ldr	r1, [pc, #20]	; (d5ecc <_ZN10JsonWriter11insertValueEf+0x40>)
   d5eb8:	4602      	mov	r2, r0
   d5eba:	4620      	mov	r0, r4
	}
}
   d5ebc:	b003      	add	sp, #12
   d5ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5ec2:	f7ff bf26 	b.w	d5d12 <_ZN10JsonWriter13insertsprintfEPKcz>
   d5ec6:	bf00      	nop
   d5ec8:	000dc7d3 	.word	0x000dc7d3
   d5ecc:	000dc7d8 	.word	0x000dc7d8

000d5ed0 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5ed0:	f000 bd52 	b.w	d6978 <HAL_Pin_Map>

000d5ed4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d5ed6:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5ed8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d5edc:	2c02      	cmp	r4, #2
   d5ede:	d008      	beq.n	d5ef2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d5ee0:	2c03      	cmp	r4, #3
   d5ee2:	d00f      	beq.n	d5f04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d5ee4:	2c01      	cmp	r4, #1
   d5ee6:	d170      	bne.n	d5fca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d5ee8:	8904      	ldrh	r4, [r0, #8]
   d5eea:	3c01      	subs	r4, #1
   d5eec:	1aa2      	subs	r2, r4, r2
   d5eee:	b212      	sxth	r2, r2
      break;
   d5ef0:	e00c      	b.n	d5f0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5ef2:	8944      	ldrh	r4, [r0, #10]
   d5ef4:	3c01      	subs	r4, #1
   d5ef6:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d5ef8:	8904      	ldrh	r4, [r0, #8]
   d5efa:	1ae4      	subs	r4, r4, r3
   d5efc:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5efe:	b212      	sxth	r2, r2
      x -= (w-1);
   d5f00:	b209      	sxth	r1, r1
      break;
   d5f02:	e062      	b.n	d5fca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d5f04:	8944      	ldrh	r4, [r0, #10]
   d5f06:	1ae4      	subs	r4, r4, r3
   d5f08:	1a61      	subs	r1, r4, r1
   d5f0a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5f0c:	2a00      	cmp	r2, #0
   d5f0e:	db5b      	blt.n	d5fc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d5f10:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5f14:	4294      	cmp	r4, r2
   d5f16:	f340 8090 	ble.w	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5f1a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5f1c:	bfbe      	ittt	lt
   d5f1e:	185b      	addlt	r3, r3, r1
   d5f20:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5f22:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5f24:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d5f28:	18cc      	adds	r4, r1, r3
   d5f2a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5f2c:	bfc4      	itt	gt
   d5f2e:	1a43      	subgt	r3, r0, r1
   d5f30:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5f32:	2b00      	cmp	r3, #0
   d5f34:	f340 8081 	ble.w	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5f38:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5f3a:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d5f3c:	4f3f      	ldr	r7, [pc, #252]	; (d603c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d5f3e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5f42:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5f46:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5f48:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5f4c:	d017      	beq.n	d5f7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5f4e:	f1c1 0108 	rsb	r1, r1, #8
   d5f52:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5f54:	493a      	ldr	r1, [pc, #232]	; (d6040 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5f56:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5f58:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5f5a:	bf3f      	itttt	cc
   d5f5c:	ebc3 0e00 	rsbcc	lr, r3, r0
   d5f60:	21ff      	movcc	r1, #255	; 0xff
   d5f62:	fa41 f10e 	asrcc.w	r1, r1, lr
   d5f66:	400e      	andcc	r6, r1
   d5f68:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d5f6a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5f6c:	bf0c      	ite	eq
   d5f6e:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d5f70:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5f72:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5f74:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5f76:	d360      	bcc.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d5f78:	1a18      	subs	r0, r3, r0
   d5f7a:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d5f7c:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5f7e:	2b07      	cmp	r3, #7
   d5f80:	d917      	bls.n	d5fb2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5f82:	2d01      	cmp	r5, #1
   d5f84:	bf0c      	ite	eq
   d5f86:	20ff      	moveq	r0, #255	; 0xff
   d5f88:	2000      	movne	r0, #0
   d5f8a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5f8e:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5f90:	3a08      	subs	r2, #8
   d5f92:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5f94:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5f96:	f801 0c80 	strb.w	r0, [r1, #-128]
   d5f9a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5f9e:	d8f7      	bhi.n	d5f90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5fa0:	f1a3 0208 	sub.w	r2, r3, #8
   d5fa4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d5fa8:	3201      	adds	r2, #1
   d5faa:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5fae:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5fb2:	2b00      	cmp	r3, #0
   d5fb4:	d041      	beq.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5fb6:	4a23      	ldr	r2, [pc, #140]	; (d6044 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5fb8:	5cd2      	ldrb	r2, [r2, r3]
   d5fba:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5fbc:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5fbe:	bf0c      	ite	eq
   d5fc0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5fc2:	4393      	bicne	r3, r2
   d5fc4:	7023      	strb	r3, [r4, #0]
   d5fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5fca:	2a00      	cmp	r2, #0
   d5fcc:	db35      	blt.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5fce:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5fd2:	4294      	cmp	r4, r2
   d5fd4:	dd31      	ble.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5fd6:	2900      	cmp	r1, #0
    w += x;
   d5fd8:	bfbc      	itt	lt
   d5fda:	18c9      	addlt	r1, r1, r3
   d5fdc:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5fde:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5fe2:	bfb8      	it	lt
   d5fe4:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5fe6:	18ce      	adds	r6, r1, r3
   d5fe8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5fea:	bfc4      	itt	gt
   d5fec:	1a63      	subgt	r3, r4, r1
   d5fee:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5ff0:	2b00      	cmp	r3, #0
   d5ff2:	dd22      	ble.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5ff4:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d5ff6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d5ffa:	4810      	ldr	r0, [pc, #64]	; (d603c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5ffc:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6000:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d6002:	2001      	movs	r0, #1
   d6004:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d6008:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d600a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d600c:	d109      	bne.n	d6022 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d600e:	3b01      	subs	r3, #1
   d6010:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d6012:	1c5c      	adds	r4, r3, #1
   d6014:	d011      	beq.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d6016:	f811 0b01 	ldrb.w	r0, [r1], #1
   d601a:	4310      	orrs	r0, r2
   d601c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6020:	e7f5      	b.n	d600e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d6022:	43d2      	mvns	r2, r2
   d6024:	b2d2      	uxtb	r2, r2
   d6026:	3b01      	subs	r3, #1
   d6028:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d602a:	1c58      	adds	r0, r3, #1
   d602c:	d005      	beq.n	d603a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d602e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6032:	4010      	ands	r0, r2
   d6034:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6038:	e7f5      	b.n	d6026 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d603a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d603c:	2003dc88 	.word	0x2003dc88
   d6040:	2003dc80 	.word	0x2003dc80
   d6044:	2003dc78 	.word	0x2003dc78

000d6048 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6048:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d604a:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d604c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d6050:	2c02      	cmp	r4, #2
   d6052:	d008      	beq.n	d6066 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d6054:	2c03      	cmp	r4, #3
   d6056:	d00f      	beq.n	d6078 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d6058:	2c01      	cmp	r4, #1
   d605a:	d112      	bne.n	d6082 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d605c:	8904      	ldrh	r4, [r0, #8]
   d605e:	1ae4      	subs	r4, r4, r3
   d6060:	1aa2      	subs	r2, r4, r2
   d6062:	b212      	sxth	r2, r2
      break;
   d6064:	e06d      	b.n	d6142 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d6066:	8904      	ldrh	r4, [r0, #8]
   d6068:	3c01      	subs	r4, #1
   d606a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d606c:	8944      	ldrh	r4, [r0, #10]
   d606e:	1ae4      	subs	r4, r4, r3
   d6070:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d6072:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d6074:	b212      	sxth	r2, r2
      break;
   d6076:	e004      	b.n	d6082 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d6078:	8944      	ldrh	r4, [r0, #10]
   d607a:	3c01      	subs	r4, #1
   d607c:	1a61      	subs	r1, r4, r1
   d607e:	b209      	sxth	r1, r1
      break;
   d6080:	e05f      	b.n	d6142 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d6082:	2900      	cmp	r1, #0
   d6084:	db5c      	blt.n	d6140 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d6086:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d608a:	428c      	cmp	r4, r1
   d608c:	f340 8091 	ble.w	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d6090:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d6092:	bfbc      	itt	lt
   d6094:	18d2      	addlt	r2, r2, r3
   d6096:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d6098:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d609c:	bfb8      	it	lt
   d609e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d60a0:	18d4      	adds	r4, r2, r3
   d60a2:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d60a4:	bfc4      	itt	gt
   d60a6:	1a83      	subgt	r3, r0, r2
   d60a8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d60aa:	2b00      	cmp	r3, #0
   d60ac:	f340 8081 	ble.w	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d60b0:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d60b2:	4e40      	ldr	r6, [pc, #256]	; (d61b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d60b4:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d60b6:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d60b8:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60bc:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d60c0:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60c4:	d017      	beq.n	d60f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d60c6:	f1c4 0408 	rsb	r4, r4, #8
   d60ca:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60cc:	4c3a      	ldr	r4, [pc, #232]	; (d61b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d60ce:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60d0:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d60d2:	bf3f      	itttt	cc
   d60d4:	ebc2 0e00 	rsbcc	lr, r2, r0
   d60d8:	24ff      	movcc	r4, #255	; 0xff
   d60da:	fa44 f40e 	asrcc.w	r4, r4, lr
   d60de:	4027      	andcc	r7, r4
   d60e0:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d60e2:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d60e4:	bf0c      	ite	eq
   d60e6:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d60e8:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d60ea:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d60ec:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d60ee:	d360      	bcc.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d60f0:	1a10      	subs	r0, r2, r0
   d60f2:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d60f4:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d60f6:	2a07      	cmp	r2, #7
   d60f8:	d917      	bls.n	d612a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d60fa:	2d01      	cmp	r5, #1
   d60fc:	bf0c      	ite	eq
   d60fe:	24ff      	moveq	r4, #255	; 0xff
   d6100:	2400      	movne	r4, #0
   d6102:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d6106:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d6108:	3908      	subs	r1, #8
   d610a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d610c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d610e:	f800 4c80 	strb.w	r4, [r0, #-128]
   d6112:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d6116:	d8f7      	bhi.n	d6108 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d6118:	f1a2 0108 	sub.w	r1, r2, #8
   d611c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d6120:	3101      	adds	r1, #1
   d6122:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d6126:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d612a:	2a00      	cmp	r2, #0
   d612c:	d041      	beq.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d612e:	4923      	ldr	r1, [pc, #140]	; (d61bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d6130:	5c89      	ldrb	r1, [r1, r2]
   d6132:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d6134:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d6136:	bf0c      	ite	eq
   d6138:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d613a:	438a      	bicne	r2, r1
   d613c:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6140:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d6142:	2900      	cmp	r1, #0
   d6144:	db35      	blt.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d6146:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d614a:	428c      	cmp	r4, r1
   d614c:	dd31      	ble.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d614e:	2a00      	cmp	r2, #0
    w += x;
   d6150:	bfbc      	itt	lt
   d6152:	18d2      	addlt	r2, r2, r3
   d6154:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d6156:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d615a:	bfb8      	it	lt
   d615c:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d615e:	18d6      	adds	r6, r2, r3
   d6160:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d6162:	bfc4      	itt	gt
   d6164:	1aa3      	subgt	r3, r4, r2
   d6166:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d6168:	2b00      	cmp	r3, #0
   d616a:	dd22      	ble.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d616c:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d616e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d6172:	4810      	ldr	r0, [pc, #64]	; (d61b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d6174:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6178:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d617a:	2201      	movs	r2, #1
   d617c:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d6180:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d6182:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d6184:	d109      	bne.n	d619a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d6186:	1e5a      	subs	r2, r3, #1
   d6188:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d618a:	1c5c      	adds	r4, r3, #1
   d618c:	d011      	beq.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d618e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6192:	430a      	orrs	r2, r1
   d6194:	f800 2c01 	strb.w	r2, [r0, #-1]
   d6198:	e7f5      	b.n	d6186 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d619a:	43c9      	mvns	r1, r1
   d619c:	b2c9      	uxtb	r1, r1
   d619e:	1e5a      	subs	r2, r3, #1
   d61a0:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d61a2:	1c5a      	adds	r2, r3, #1
   d61a4:	d005      	beq.n	d61b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d61a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   d61aa:	400a      	ands	r2, r1
   d61ac:	f800 2c01 	strb.w	r2, [r0, #-1]
   d61b0:	e7f5      	b.n	d619e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d61b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61b4:	2003dc88 	.word	0x2003dc88
   d61b8:	2003dc80 	.word	0x2003dc80
   d61bc:	2003dc78 	.word	0x2003dc78

000d61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d61c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d61c2:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d61c4:	4606      	mov	r6, r0
   d61c6:	4614      	mov	r4, r2
   d61c8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d61ca:	db3f      	blt.n	d624c <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61cc:	f000 fbbc 	bl	d6948 <_ZN12Adafruit_GFX5widthEv>
   d61d0:	4285      	cmp	r5, r0
   d61d2:	da3b      	bge.n	d624c <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61d4:	2c00      	cmp	r4, #0
   d61d6:	db39      	blt.n	d624c <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61d8:	4630      	mov	r0, r6
   d61da:	f000 fbb8 	bl	d694e <_ZN12Adafruit_GFX6heightEv>
   d61de:	4284      	cmp	r4, r0
   d61e0:	da34      	bge.n	d624c <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d61e2:	4630      	mov	r0, r6
   d61e4:	f000 fbae 	bl	d6944 <_ZN12Adafruit_GFX11getRotationEv>
   d61e8:	2802      	cmp	r0, #2
   d61ea:	d127      	bne.n	d623c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61ec:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d61ee:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61f0:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d61f2:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61f4:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d61f6:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61f8:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d61fa:	b204      	sxth	r4, r0
   d61fc:	e006      	b.n	d620c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d61fe:	2801      	cmp	r0, #1
   d6200:	d104      	bne.n	d620c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d6202:	8933      	ldrh	r3, [r6, #8]
   d6204:	3b01      	subs	r3, #1
   d6206:	1b1b      	subs	r3, r3, r4
   d6208:	462c      	mov	r4, r5
   d620a:	b21d      	sxth	r5, r3
   d620c:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d620e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d6210:	fb94 f0f0 	sdiv	r0, r4, r0
   d6214:	b200      	sxth	r0, r0
   d6216:	4b0e      	ldr	r3, [pc, #56]	; (d6250 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d6218:	f004 0207 	and.w	r2, r4, #7
   d621c:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d6220:	d104      	bne.n	d622c <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d6222:	4097      	lsls	r7, r2
   d6224:	5c5a      	ldrb	r2, [r3, r1]
   d6226:	4317      	orrs	r7, r2
   d6228:	545f      	strb	r7, [r3, r1]
   d622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d622c:	5c58      	ldrb	r0, [r3, r1]
   d622e:	2701      	movs	r7, #1
   d6230:	fa07 f202 	lsl.w	r2, r7, r2
   d6234:	ea20 0202 	bic.w	r2, r0, r2
   d6238:	545a      	strb	r2, [r3, r1]
   d623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d623c:	2803      	cmp	r0, #3
   d623e:	d1de      	bne.n	d61fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d6240:	8973      	ldrh	r3, [r6, #10]
   d6242:	3b01      	subs	r3, #1
   d6244:	1b5b      	subs	r3, r3, r5
   d6246:	4625      	mov	r5, r4
   d6248:	b21c      	sxth	r4, r3
   d624a:	e7df      	b.n	d620c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d624e:	bf00      	nop
   d6250:	2003dc88 	.word	0x2003dc88

000d6254 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d6254:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d6256:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d6258:	4604      	mov	r4, r0
   d625a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d625c:	2180      	movs	r1, #128	; 0x80
   d625e:	f000 fa87 	bl	d6770 <_ZN12Adafruit_GFXC1Ess>
   d6262:	4b06      	ldr	r3, [pc, #24]	; (d627c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d6264:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d6266:	23ff      	movs	r3, #255	; 0xff
   d6268:	7763      	strb	r3, [r4, #29]
   d626a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d626e:	77e3      	strb	r3, [r4, #31]
   d6270:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d6272:	f884 5020 	strb.w	r5, [r4, #32]
}
   d6276:	4620      	mov	r0, r4
   d6278:	bd38      	pop	{r3, r4, r5, pc}
   d627a:	bf00      	nop
   d627c:	000dc7f0 	.word	0x000dc7f0

000d6280 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d6280:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d6284:	2100      	movs	r1, #0
   d6286:	4801      	ldr	r0, [pc, #4]	; (d628c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d6288:	f005 ba70 	b.w	db76c <memset>
   d628c:	2003dc88 	.word	0x2003dc88

000d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6290:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d6292:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d6296:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6298:	4604      	mov	r4, r0
   d629a:	460d      	mov	r5, r1
  if (sid != -1)
   d629c:	d028      	beq.n	d62f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d629e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d62a2:	2101      	movs	r1, #1
   d62a4:	b280      	uxth	r0, r0
   d62a6:	f002 fdc0 	bl	d8e2a <digitalWrite>
    digitalWrite(dc, LOW);
   d62aa:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d62ae:	2100      	movs	r1, #0
   d62b0:	b280      	uxth	r0, r0
   d62b2:	f002 fdba 	bl	d8e2a <digitalWrite>
    digitalWrite(cs, LOW);
   d62b6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d62ba:	2100      	movs	r1, #0
   d62bc:	b280      	uxth	r0, r0
   d62be:	f002 fdb4 	bl	d8e2a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d62c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d62c6:	b12b      	cbz	r3, d62d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d62c8:	f7fe fcc6 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d62cc:	4629      	mov	r1, r5
   d62ce:	f000 ffdf 	bl	d7290 <_ZN8SPIClass8transferEh>
   d62d2:	e005      	b.n	d62e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d62d4:	462b      	mov	r3, r5
   d62d6:	2201      	movs	r2, #1
   d62d8:	7fa1      	ldrb	r1, [r4, #30]
   d62da:	7f60      	ldrb	r0, [r4, #29]
   d62dc:	f002 fde8 	bl	d8eb0 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d62e0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d62e4:	2101      	movs	r1, #1
   d62e6:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d62e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d62ec:	f002 bd9d 	b.w	d8e2a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d62f0:	f002 fe1e 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d62f4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d62f8:	f002 f8db 	bl	d84b2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d62fc:	f002 fe18 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d6300:	6803      	ldr	r3, [r0, #0]
   d6302:	2100      	movs	r1, #0
   d6304:	689b      	ldr	r3, [r3, #8]
   d6306:	4798      	blx	r3
    Wire.write(c);
   d6308:	f002 fe12 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d630c:	6803      	ldr	r3, [r0, #0]
   d630e:	4629      	mov	r1, r5
   d6310:	689b      	ldr	r3, [r3, #8]
   d6312:	4798      	blx	r3
    Wire.endTransmission();
   d6314:	f002 fe0c 	bl	d8f30 <_Z19__fetch_global_Wirev>
  }
}
   d6318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d631c:	f002 b8d0 	b.w	d84c0 <_ZN7TwoWire15endTransmissionEv>

000d6320 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d6320:	b538      	push	{r3, r4, r5, lr}
   d6322:	4604      	mov	r4, r0
   d6324:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d6326:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d6328:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d632c:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d632e:	3301      	adds	r3, #1
   d6330:	d037      	beq.n	d63a2 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d6332:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d6336:	2101      	movs	r1, #1
   d6338:	b280      	uxth	r0, r0
   d633a:	f002 fd65 	bl	d8e08 <pinMode>
    pinMode(cs, OUTPUT);
   d633e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6342:	2101      	movs	r1, #1
   d6344:	b280      	uxth	r0, r0
   d6346:	f002 fd5f 	bl	d8e08 <pinMode>
    if (!hwSPI){
   d634a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d634e:	b95b      	cbnz	r3, d6368 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d6350:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d6354:	2101      	movs	r1, #1
   d6356:	b280      	uxth	r0, r0
   d6358:	f002 fd56 	bl	d8e08 <pinMode>
    	pinMode(sclk, OUTPUT);
   d635c:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d6360:	2101      	movs	r1, #1
   d6362:	b280      	uxth	r0, r0
   d6364:	f002 fd50 	bl	d8e08 <pinMode>
    	}
    if (hwSPI){
   d6368:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d636c:	b1eb      	cbz	r3, d63aa <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d636e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6372:	2101      	movs	r1, #1
   d6374:	b280      	uxth	r0, r0
   d6376:	f002 fd58 	bl	d8e2a <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d637a:	f7fe fc6d 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d637e:	2101      	movs	r1, #1
   d6380:	f000 fe85 	bl	d708e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d6384:	f7fe fc68 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6388:	2110      	movs	r1, #16
   d638a:	f000 ff5d 	bl	d7248 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d638e:	f7fe fc63 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6392:	2100      	movs	r1, #0
   d6394:	f000 fe8c 	bl	d70b0 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d6398:	f7fe fc5e 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d639c:	f000 fe66 	bl	d706c <_ZN8SPIClass5beginEv>
   d63a0:	e003      	b.n	d63aa <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d63a2:	f002 fdc5 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d63a6:	f002 f849 	bl	d843c <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d63aa:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63ae:	2101      	movs	r1, #1
   d63b0:	b280      	uxth	r0, r0
   d63b2:	f002 fd29 	bl	d8e08 <pinMode>
  digitalWrite(rst, HIGH);
   d63b6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63ba:	2101      	movs	r1, #1
   d63bc:	b280      	uxth	r0, r0
   d63be:	f002 fd34 	bl	d8e2a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d63c2:	2001      	movs	r0, #1
   d63c4:	f001 fada 	bl	d797c <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d63c8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63cc:	2100      	movs	r1, #0
   d63ce:	b280      	uxth	r0, r0
   d63d0:	f002 fd2b 	bl	d8e2a <digitalWrite>
  // wait 10ms
  delay(10);
   d63d4:	200a      	movs	r0, #10
   d63d6:	f001 fad1 	bl	d797c <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d63da:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63de:	2101      	movs	r1, #1
   d63e0:	b280      	uxth	r0, r0
   d63e2:	f002 fd22 	bl	d8e2a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d63e6:	4620      	mov	r0, r4
   d63e8:	21ae      	movs	r1, #174	; 0xae
   d63ea:	f7ff ff51 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d63ee:	4620      	mov	r0, r4
   d63f0:	21d5      	movs	r1, #213	; 0xd5
   d63f2:	f7ff ff4d 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d63f6:	4620      	mov	r0, r4
   d63f8:	2180      	movs	r1, #128	; 0x80
   d63fa:	f7ff ff49 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d63fe:	4620      	mov	r0, r4
   d6400:	21a8      	movs	r1, #168	; 0xa8
   d6402:	f7ff ff45 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d6406:	4620      	mov	r0, r4
   d6408:	213f      	movs	r1, #63	; 0x3f
   d640a:	f7ff ff41 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d640e:	4620      	mov	r0, r4
   d6410:	21d3      	movs	r1, #211	; 0xd3
   d6412:	f7ff ff3d 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d6416:	4620      	mov	r0, r4
   d6418:	2100      	movs	r1, #0
   d641a:	f7ff ff39 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d641e:	4620      	mov	r0, r4
   d6420:	2140      	movs	r1, #64	; 0x40
   d6422:	f7ff ff35 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d6426:	218d      	movs	r1, #141	; 0x8d
   d6428:	4620      	mov	r0, r4
   d642a:	f7ff ff31 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d642e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d6430:	bf0c      	ite	eq
   d6432:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d6434:	2114      	movne	r1, #20
   d6436:	4620      	mov	r0, r4
   d6438:	f7ff ff2a 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d643c:	4620      	mov	r0, r4
   d643e:	2120      	movs	r1, #32
   d6440:	f7ff ff26 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d6444:	4620      	mov	r0, r4
   d6446:	2100      	movs	r1, #0
   d6448:	f7ff ff22 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d644c:	4620      	mov	r0, r4
   d644e:	21a1      	movs	r1, #161	; 0xa1
   d6450:	f7ff ff1e 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d6454:	4620      	mov	r0, r4
   d6456:	21c8      	movs	r1, #200	; 0xc8
   d6458:	f7ff ff1a 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d645c:	4620      	mov	r0, r4
   d645e:	21da      	movs	r1, #218	; 0xda
   d6460:	f7ff ff16 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d6464:	4620      	mov	r0, r4
   d6466:	2112      	movs	r1, #18
   d6468:	f7ff ff12 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d646c:	2181      	movs	r1, #129	; 0x81
   d646e:	4620      	mov	r0, r4
   d6470:	f7ff ff0e 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d6474:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d6476:	bf0c      	ite	eq
   d6478:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d647a:	21cf      	movne	r1, #207	; 0xcf
   d647c:	4620      	mov	r0, r4
   d647e:	f7ff ff07 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d6482:	21d9      	movs	r1, #217	; 0xd9
   d6484:	4620      	mov	r0, r4
   d6486:	f7ff ff03 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d648a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d648c:	bf0c      	ite	eq
   d648e:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d6490:	21f1      	movne	r1, #241	; 0xf1
   d6492:	4620      	mov	r0, r4
   d6494:	f7ff fefc 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d6498:	4620      	mov	r0, r4
   d649a:	21db      	movs	r1, #219	; 0xdb
   d649c:	f7ff fef8 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d64a0:	4620      	mov	r0, r4
   d64a2:	2140      	movs	r1, #64	; 0x40
   d64a4:	f7ff fef4 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d64a8:	4620      	mov	r0, r4
   d64aa:	21a4      	movs	r1, #164	; 0xa4
   d64ac:	f7ff fef0 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d64b0:	4620      	mov	r0, r4
   d64b2:	21a6      	movs	r1, #166	; 0xa6
   d64b4:	f7ff feec 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d64b8:	4620      	mov	r0, r4
   d64ba:	21af      	movs	r1, #175	; 0xaf
}
   d64bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d64c0:	f7ff bee6 	b.w	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d64c4 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d64c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d64c8:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d64ca:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d64cc:	f7ff fee0 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d64d0:	2100      	movs	r1, #0
   d64d2:	4620      	mov	r0, r4
   d64d4:	f7ff fedc 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d64d8:	217f      	movs	r1, #127	; 0x7f
   d64da:	4620      	mov	r0, r4
   d64dc:	f7ff fed8 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d64e0:	2122      	movs	r1, #34	; 0x22
   d64e2:	4620      	mov	r0, r4
   d64e4:	f7ff fed4 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d64e8:	2100      	movs	r1, #0
   d64ea:	4620      	mov	r0, r4
   d64ec:	f7ff fed0 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d64f0:	2107      	movs	r1, #7
   d64f2:	4620      	mov	r0, r4
   d64f4:	f7ff fecc 	bl	d6290 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d64f8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d64fc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d65bc <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d6500:	3301      	adds	r3, #1
   d6502:	d035      	beq.n	d6570 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d6504:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6508:	2101      	movs	r1, #1
   d650a:	b280      	uxth	r0, r0
   d650c:	f002 fc8d 	bl	d8e2a <digitalWrite>
    digitalWrite(dc, HIGH);
   d6510:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d6514:	2101      	movs	r1, #1
   d6516:	b280      	uxth	r0, r0
   d6518:	f002 fc87 	bl	d8e2a <digitalWrite>
    digitalWrite(cs, LOW);
   d651c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6520:	2100      	movs	r1, #0
   d6522:	b280      	uxth	r0, r0
   d6524:	f002 fc81 	bl	d8e2a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6528:	2001      	movs	r0, #1
   d652a:	f000 facd 	bl	d6ac8 <HAL_Delay_Microseconds>
   d652e:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6530:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d6534:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6538:	b12b      	cbz	r3, d6546 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d653a:	f7fe fb8d 	bl	d4c58 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d653e:	4631      	mov	r1, r6
   d6540:	f000 fea6 	bl	d7290 <_ZN8SPIClass8transferEh>
   d6544:	e005      	b.n	d6552 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d6546:	4633      	mov	r3, r6
   d6548:	2201      	movs	r2, #1
   d654a:	7fa1      	ldrb	r1, [r4, #30]
   d654c:	7f60      	ldrb	r0, [r4, #29]
   d654e:	f002 fcaf 	bl	d8eb0 <shiftOut>
   d6552:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d6554:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d6558:	d1ea      	bne.n	d6530 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d655a:	2001      	movs	r0, #1
   d655c:	f000 fab4 	bl	d6ac8 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6560:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6564:	2101      	movs	r1, #1
   d6566:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d6568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d656c:	f002 bc5d 	b.w	d8e2a <digitalWrite>
   d6570:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d6572:	f002 fcdd 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d6576:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d657a:	f001 ff9a 	bl	d84b2 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d657e:	f002 fcd7 	bl	d8f30 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d6582:	6803      	ldr	r3, [r0, #0]
   d6584:	2140      	movs	r1, #64	; 0x40
   d6586:	689b      	ldr	r3, [r3, #8]
   d6588:	4798      	blx	r3
   d658a:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d658c:	f002 fcd0 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d6590:	19af      	adds	r7, r5, r6
   d6592:	6803      	ldr	r3, [r0, #0]
   d6594:	b2bf      	uxth	r7, r7
   d6596:	689b      	ldr	r3, [r3, #8]
   d6598:	f818 1007 	ldrb.w	r1, [r8, r7]
   d659c:	3601      	adds	r6, #1
   d659e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d65a0:	2e10      	cmp	r6, #16
   d65a2:	d1f3      	bne.n	d658c <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d65a4:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d65a6:	f002 fcc3 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d65aa:	b2ad      	uxth	r5, r5
   d65ac:	f001 ff88 	bl	d84c0 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d65b0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d65b4:	d1dd      	bne.n	d6572 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d65b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65ba:	bf00      	nop
   d65bc:	2003dc88 	.word	0x2003dc88

000d65c0 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d65c0:	f000 b9da 	b.w	d6978 <HAL_Pin_Map>

000d65c4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65c8:	b085      	sub	sp, #20
   d65ca:	461e      	mov	r6, r3
   d65cc:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d65d0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d65d4:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d65d6:	1a9a      	subs	r2, r3, r2
   d65d8:	2a00      	cmp	r2, #0
   d65da:	bfb8      	it	lt
   d65dc:	4252      	neglt	r2, r2
   d65de:	9200      	str	r2, [sp, #0]
   d65e0:	1a72      	subs	r2, r6, r1
   d65e2:	2a00      	cmp	r2, #0
   d65e4:	bfb8      	it	lt
   d65e6:	4252      	neglt	r2, r2
   d65e8:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65ea:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65ec:	9a00      	ldr	r2, [sp, #0]
   d65ee:	9901      	ldr	r1, [sp, #4]
   d65f0:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65f2:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65f4:	dd05      	ble.n	d6602 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d65f6:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d65f8:	461e      	mov	r6, r3
   d65fa:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65fc:	4622      	mov	r2, r4
    swap(x0, y0);
   d65fe:	462c      	mov	r4, r5
   d6600:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d6602:	42b4      	cmp	r4, r6
   d6604:	dd05      	ble.n	d6612 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d6606:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d6608:	461d      	mov	r5, r3
   d660a:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d660c:	4622      	mov	r2, r4
   d660e:	4634      	mov	r4, r6
   d6610:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d6612:	1b5a      	subs	r2, r3, r5
   d6614:	2a00      	cmp	r2, #0
   d6616:	bfb8      	it	lt
   d6618:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d661a:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d661e:	429d      	cmp	r5, r3
   d6620:	bfb4      	ite	lt
   d6622:	2301      	movlt	r3, #1
   d6624:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6628:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d662c:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d662e:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d6630:	fa0f f788 	sxth.w	r7, r8
   d6634:	2202      	movs	r2, #2
   d6636:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d663a:	42b4      	cmp	r4, r6
   d663c:	dc1f      	bgt.n	d667e <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d663e:	9a01      	ldr	r2, [sp, #4]
   d6640:	9b00      	ldr	r3, [sp, #0]
   d6642:	4293      	cmp	r3, r2
   d6644:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d6648:	bfc8      	it	gt
   d664a:	4622      	movgt	r2, r4
   d664c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6650:	bfc8      	it	gt
   d6652:	4629      	movgt	r1, r5
   d6654:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d6656:	bfdc      	itt	le
   d6658:	462a      	movle	r2, r5
   d665a:	4621      	movle	r1, r4
   d665c:	4648      	mov	r0, r9
   d665e:	47d8      	blx	fp
    }
    err -= dy;
   d6660:	9b03      	ldr	r3, [sp, #12]
   d6662:	1aff      	subs	r7, r7, r3
   d6664:	b2bb      	uxth	r3, r7
   d6666:	b21f      	sxth	r7, r3
    if (err < 0) {
   d6668:	2f00      	cmp	r7, #0
   d666a:	da05      	bge.n	d6678 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d666c:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d666e:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d6672:	4415      	add	r5, r2
   d6674:	b22d      	sxth	r5, r5
      err += dx;
   d6676:	b23f      	sxth	r7, r7
   d6678:	3401      	adds	r4, #1
   d667a:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d667c:	e7dd      	b.n	d663a <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d667e:	b005      	add	sp, #20
   d6680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6684 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6684:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6688:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d668c:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d668e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d6692:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6694:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d6696:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6698:	4691      	mov	r9, r2
   d669a:	460d      	mov	r5, r1
   d669c:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d669e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d66a0:	6823      	ldr	r3, [r4, #0]
   d66a2:	9600      	str	r6, [sp, #0]
   d66a4:	f10a 32ff 	add.w	r2, sl, #4294967295
   d66a8:	444a      	add	r2, r9
   d66aa:	69df      	ldr	r7, [r3, #28]
   d66ac:	4629      	mov	r1, r5
   d66ae:	4643      	mov	r3, r8
   d66b0:	4620      	mov	r0, r4
   d66b2:	b212      	sxth	r2, r2
   d66b4:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d66b6:	6823      	ldr	r3, [r4, #0]
   d66b8:	9600      	str	r6, [sp, #0]
   d66ba:	699f      	ldr	r7, [r3, #24]
   d66bc:	464a      	mov	r2, r9
   d66be:	4653      	mov	r3, sl
   d66c0:	4629      	mov	r1, r5
   d66c2:	4620      	mov	r0, r4
   d66c4:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d66c6:	6823      	ldr	r3, [r4, #0]
   d66c8:	960a      	str	r6, [sp, #40]	; 0x28
   d66ca:	f108 31ff 	add.w	r1, r8, #4294967295
   d66ce:	4429      	add	r1, r5
   d66d0:	699d      	ldr	r5, [r3, #24]
   d66d2:	464a      	mov	r2, r9
   d66d4:	4653      	mov	r3, sl
   d66d6:	b209      	sxth	r1, r1
   d66d8:	4620      	mov	r0, r4
   d66da:	46ac      	mov	ip, r5
}
   d66dc:	b002      	add	sp, #8
   d66de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d66e2:	4760      	bx	ip

000d66e4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d66e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d66e6:	3b01      	subs	r3, #1
   d66e8:	4413      	add	r3, r2
   d66ea:	6804      	ldr	r4, [r0, #0]
   d66ec:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d66f0:	9501      	str	r5, [sp, #4]
   d66f2:	b21b      	sxth	r3, r3
   d66f4:	9300      	str	r3, [sp, #0]
   d66f6:	6964      	ldr	r4, [r4, #20]
   d66f8:	460b      	mov	r3, r1
   d66fa:	47a0      	blx	r4
}
   d66fc:	b003      	add	sp, #12
   d66fe:	bd30      	pop	{r4, r5, pc}

000d6700 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d6700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d6702:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d6706:	6804      	ldr	r4, [r0, #0]
   d6708:	e88d 0024 	stmia.w	sp, {r2, r5}
   d670c:	3b01      	subs	r3, #1
   d670e:	440b      	add	r3, r1
   d6710:	6964      	ldr	r4, [r4, #20]
   d6712:	b21b      	sxth	r3, r3
   d6714:	47a0      	blx	r4
}
   d6716:	b003      	add	sp, #12
   d6718:	bd30      	pop	{r4, r5, pc}

000d671a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d671a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d671e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d6722:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d6726:	4605      	mov	r5, r0
   d6728:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d672a:	460c      	mov	r4, r1
   d672c:	eb01 0a03 	add.w	sl, r1, r3
   d6730:	4554      	cmp	r4, sl
   d6732:	da0b      	bge.n	d674c <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d6734:	682b      	ldr	r3, [r5, #0]
   d6736:	f8cd 9000 	str.w	r9, [sp]
   d673a:	699e      	ldr	r6, [r3, #24]
   d673c:	4621      	mov	r1, r4
   d673e:	4643      	mov	r3, r8
   d6740:	463a      	mov	r2, r7
   d6742:	4628      	mov	r0, r5
   d6744:	3401      	adds	r4, #1
   d6746:	47b0      	blx	r6
   d6748:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d674a:	e7f1      	b.n	d6730 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d674c:	b002      	add	sp, #8
   d674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6752 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d6752:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d6754:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d6758:	6804      	ldr	r4, [r0, #0]
   d675a:	9101      	str	r1, [sp, #4]
   d675c:	9200      	str	r2, [sp, #0]
   d675e:	2200      	movs	r2, #0
   d6760:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d6764:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d6766:	4611      	mov	r1, r2
   d6768:	47a0      	blx	r4
}
   d676a:	b002      	add	sp, #8
   d676c:	bd10      	pop	{r4, pc}

000d676e <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d676e:	4770      	bx	lr

000d6770 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d6770:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d6772:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6774:	2400      	movs	r4, #0
   d6776:	4d08      	ldr	r5, [pc, #32]	; (d6798 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6778:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d677a:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d677c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d677e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d6782:	2201      	movs	r2, #1
   d6784:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d6786:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d6788:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d678a:	8204      	strh	r4, [r0, #16]
   d678c:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d678e:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d6790:	82c1      	strh	r1, [r0, #22]
   d6792:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d6794:	7682      	strb	r2, [r0, #26]
}
   d6796:	bd30      	pop	{r4, r5, pc}
   d6798:	000dc828 	.word	0x000dc828

000d679c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67a0:	b08f      	sub	sp, #60	; 0x3c
   d67a2:	4605      	mov	r5, r0
   d67a4:	9106      	str	r1, [sp, #24]
   d67a6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d67aa:	9107      	str	r1, [sp, #28]
   d67ac:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d67b0:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d67b2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d67b6:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d67b8:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d67bc:	4281      	cmp	r1, r0
   d67be:	dd7c      	ble.n	d68ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d67c0:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d67c4:	4291      	cmp	r1, r2
   d67c6:	dd78      	ble.n	d68ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d67c8:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d67ca:	fb11 0008 	smlabb	r0, r1, r8, r0
   d67ce:	2800      	cmp	r0, #0
   d67d0:	dd73      	ble.n	d68ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d67d2:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d67d6:	2800      	cmp	r0, #0
   d67d8:	dd6f      	ble.n	d68ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d67de:	b296      	uxth	r6, r2
   d67e0:	930c      	str	r3, [sp, #48]	; 0x30
   d67e2:	f106 0308 	add.w	r3, r6, #8
   d67e6:	b29b      	uxth	r3, r3
   d67e8:	9109      	str	r1, [sp, #36]	; 0x24
   d67ea:	2400      	movs	r4, #0
   d67ec:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d67ee:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67f0:	bf1c      	itt	ne
   d67f2:	4b33      	ldrne	r3, [pc, #204]	; (d68c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d67f4:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d67f6:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67f8:	bf16      	itet	ne
   d67fa:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d67fc:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d6800:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6804:	9604      	str	r6, [sp, #16]
   d6806:	fa1f f388 	uxth.w	r3, r8
   d680a:	9303      	str	r3, [sp, #12]
   d680c:	9a03      	ldr	r2, [sp, #12]
   d680e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d6812:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6816:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d681a:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d681c:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d681e:	920a      	str	r2, [sp, #40]	; 0x28
   d6820:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d6822:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6826:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d6828:	f019 0f01 	tst.w	r9, #1
   d682c:	d011      	beq.n	d6852 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d682e:	f1b8 0f01 	cmp.w	r8, #1
   d6832:	682b      	ldr	r3, [r5, #0]
   d6834:	d103      	bne.n	d683e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d6836:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d683a:	9b07      	ldr	r3, [sp, #28]
   d683c:	e014      	b.n	d6868 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d683e:	9a07      	ldr	r2, [sp, #28]
   d6840:	9201      	str	r2, [sp, #4]
   d6842:	f8cd a000 	str.w	sl, [sp]
   d6846:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d684a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d684e:	4653      	mov	r3, sl
   d6850:	e018      	b.n	d6884 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d6852:	9b07      	ldr	r3, [sp, #28]
   d6854:	9a08      	ldr	r2, [sp, #32]
   d6856:	4293      	cmp	r3, r2
   d6858:	d017      	beq.n	d688a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d685a:	f1b8 0f01 	cmp.w	r8, #1
   d685e:	682b      	ldr	r3, [r5, #0]
   d6860:	d107      	bne.n	d6872 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d6862:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6866:	4613      	mov	r3, r2
   d6868:	b23a      	sxth	r2, r7
   d686a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d686c:	4628      	mov	r0, r5
   d686e:	47d8      	blx	fp
   d6870:	e00b      	b.n	d688a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d6872:	9a08      	ldr	r2, [sp, #32]
   d6874:	9201      	str	r2, [sp, #4]
   d6876:	f8cd a000 	str.w	sl, [sp]
   d687a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d687e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d6882:	4653      	mov	r3, sl
   d6884:	990a      	ldr	r1, [sp, #40]	; 0x28
   d6886:	4628      	mov	r0, r5
   d6888:	47d8      	blx	fp
   d688a:	9b04      	ldr	r3, [sp, #16]
   d688c:	9a03      	ldr	r2, [sp, #12]
   d688e:	4413      	add	r3, r2
   d6890:	b29b      	uxth	r3, r3
   d6892:	9304      	str	r3, [sp, #16]
   d6894:	9b05      	ldr	r3, [sp, #20]
   d6896:	4413      	add	r3, r2
   d6898:	b29b      	uxth	r3, r3
   d689a:	3701      	adds	r7, #1
   d689c:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d689e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d68a0:	b2bf      	uxth	r7, r7
   d68a2:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d68a4:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d68a8:	d1be      	bne.n	d6828 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d68aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d68ac:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d68ae:	3401      	adds	r4, #1
   d68b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d68b4:	b264      	sxtb	r4, r4
   d68b6:	9309      	str	r3, [sp, #36]	; 0x24
   d68b8:	d199      	bne.n	d67ee <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d68ba:	b00f      	add	sp, #60	; 0x3c
   d68bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68c0:	000dc858 	.word	0x000dc858

000d68c4 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d68c4:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d68c6:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d68c8:	b085      	sub	sp, #20
   d68ca:	4604      	mov	r4, r0
   d68cc:	460b      	mov	r3, r1

  if (c == '\n') {
   d68ce:	d104      	bne.n	d68da <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d68d0:	7e02      	ldrb	r2, [r0, #24]
   d68d2:	8a43      	ldrh	r3, [r0, #18]
   d68d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d68d8:	e023      	b.n	d6922 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d68da:	290d      	cmp	r1, #13
   d68dc:	d024      	beq.n	d6928 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d68de:	7e05      	ldrb	r5, [r0, #24]
   d68e0:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d68e4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d68e8:	9502      	str	r5, [sp, #8]
   d68ea:	8ac5      	ldrh	r5, [r0, #22]
   d68ec:	9501      	str	r5, [sp, #4]
   d68ee:	8a85      	ldrh	r5, [r0, #20]
   d68f0:	9500      	str	r5, [sp, #0]
   d68f2:	f7ff ff53 	bl	d679c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d68f6:	7e22      	ldrb	r2, [r4, #24]
   d68f8:	8a23      	ldrh	r3, [r4, #16]
   d68fa:	b291      	uxth	r1, r2
   d68fc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d6900:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6904:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d6906:	b21b      	sxth	r3, r3
   d6908:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d690a:	b168      	cbz	r0, d6928 <_ZN12Adafruit_GFX5writeEh+0x64>
   d690c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d6910:	f06f 0505 	mvn.w	r5, #5
   d6914:	fb05 0202 	mla	r2, r5, r2, r0
   d6918:	4293      	cmp	r3, r2
   d691a:	dd05      	ble.n	d6928 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d691c:	8a63      	ldrh	r3, [r4, #18]
   d691e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d6922:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d6924:	2300      	movs	r3, #0
   d6926:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d6928:	2001      	movs	r0, #1
   d692a:	b005      	add	sp, #20
   d692c:	bd30      	pop	{r4, r5, pc}

000d692e <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d692e:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d6930:	8242      	strh	r2, [r0, #18]
   d6932:	4770      	bx	lr

000d6934 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d6934:	2900      	cmp	r1, #0
   d6936:	bf08      	it	eq
   d6938:	2101      	moveq	r1, #1
   d693a:	7601      	strb	r1, [r0, #24]
   d693c:	4770      	bx	lr

000d693e <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d693e:	82c1      	strh	r1, [r0, #22]
   d6940:	8281      	strh	r1, [r0, #20]
   d6942:	4770      	bx	lr

000d6944 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d6944:	7e40      	ldrb	r0, [r0, #25]
   d6946:	4770      	bx	lr

000d6948 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d6948:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d694c:	4770      	bx	lr

000d694e <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d694e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d6952:	4770      	bx	lr

000d6954 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d6954:	f000 b810 	b.w	d6978 <HAL_Pin_Map>

000d6958 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <netdb_freeaddrinfo+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	689b      	ldr	r3, [r3, #8]
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	00030268 	.word	0x00030268

000d6968 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <netdb_getaddrinfo+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	68db      	ldr	r3, [r3, #12]
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	00030268 	.word	0x00030268

000d6978 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <HAL_Pin_Map+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	681b      	ldr	r3, [r3, #0]
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	0003022c 	.word	0x0003022c

000d6988 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <HAL_Validate_Pin_Function+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	685b      	ldr	r3, [r3, #4]
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	0003022c 	.word	0x0003022c

000d6998 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <HAL_Pin_Mode+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	689b      	ldr	r3, [r3, #8]
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	0003022c 	.word	0x0003022c

000d69a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <HAL_Get_Pin_Mode+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	68db      	ldr	r3, [r3, #12]
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	0003022c 	.word	0x0003022c

000d69b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b02      	ldr	r3, [pc, #8]	; (d69c4 <HAL_GPIO_Write+0xc>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	691b      	ldr	r3, [r3, #16]
   d69c0:	9301      	str	r3, [sp, #4]
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	0003022c 	.word	0x0003022c

000d69c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <HAL_GPIO_Read+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	695b      	ldr	r3, [r3, #20]
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	0003022c 	.word	0x0003022c

000d69d8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <HAL_ADC_Read+0xc>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69e0:	9301      	str	r3, [sp, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	0003022c 	.word	0x0003022c

000d69e8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <HAL_Pulse_In+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	0003022c 	.word	0x0003022c

000d69f8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <HAL_SPI_Begin+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	681b      	ldr	r3, [r3, #0]
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030230 	.word	0x00030230

000d6a08 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <HAL_SPI_Set_Bit_Order+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	689b      	ldr	r3, [r3, #8]
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030230 	.word	0x00030230

000d6a18 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <HAL_SPI_Set_Data_Mode+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	68db      	ldr	r3, [r3, #12]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030230 	.word	0x00030230

000d6a28 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	691b      	ldr	r3, [r3, #16]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030230 	.word	0x00030230

000d6a38 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <HAL_SPI_Send_Receive_Data+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	695b      	ldr	r3, [r3, #20]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030230 	.word	0x00030230

000d6a48 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <HAL_SPI_Init+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	69db      	ldr	r3, [r3, #28]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030230 	.word	0x00030230

000d6a58 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <HAL_SPI_Is_Enabled+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	6a1b      	ldr	r3, [r3, #32]
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030230 	.word	0x00030230

000d6a68 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <HAL_SPI_Info+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030230 	.word	0x00030230

000d6a78 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <HAL_SPI_Set_Settings+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030230 	.word	0x00030230

000d6a88 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <HAL_SPI_Acquire+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030230 	.word	0x00030230

000d6a98 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_SPI_Release+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030230 	.word	0x00030230

000d6aa8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <if_index_to_name+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	695b      	ldr	r3, [r3, #20]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	0003026c 	.word	0x0003026c

000d6ab8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_RNG_GetRandomNumber+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	685b      	ldr	r3, [r3, #4]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	00030218 	.word	0x00030218

000d6ac8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_Delay_Microseconds+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	68db      	ldr	r3, [r3, #12]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	00030218 	.word	0x00030218

000d6ad8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	695b      	ldr	r3, [r3, #20]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	00030218 	.word	0x00030218

000d6ae8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_RTC_Get_UnixTime+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	69db      	ldr	r3, [r3, #28]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	00030218 	.word	0x00030218

000d6af8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <HAL_RTC_Time_Is_Valid+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	00030218 	.word	0x00030218

000d6b08 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <os_thread_is_current+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	689b      	ldr	r3, [r3, #8]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030248 	.word	0x00030248

000d6b18 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <os_thread_join+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	691b      	ldr	r3, [r3, #16]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	00030248 	.word	0x00030248

000d6b28 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <os_thread_cleanup+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	695b      	ldr	r3, [r3, #20]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	00030248 	.word	0x00030248

000d6b38 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <os_mutex_recursive_create+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	00030248 	.word	0x00030248

000d6b48 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <os_mutex_recursive_destroy+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	00030248 	.word	0x00030248

000d6b58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <inet_inet_ntop+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	695b      	ldr	r3, [r3, #20]
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	00030264 	.word	0x00030264

000d6b68 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <inet_htonl+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	6a1b      	ldr	r3, [r3, #32]
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	00030264 	.word	0x00030264

000d6b78 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <inet_htons+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	00030264 	.word	0x00030264

000d6b88 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <HAL_USART_Init+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	681b      	ldr	r3, [r3, #0]
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	0003023c 	.word	0x0003023c

000d6b98 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <HAL_USART_Write_Data+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	68db      	ldr	r3, [r3, #12]
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	0003023c 	.word	0x0003023c

000d6ba8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <HAL_USART_Available_Data+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	691b      	ldr	r3, [r3, #16]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	0003023c 	.word	0x0003023c

000d6bb8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <HAL_USART_Read_Data+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	695b      	ldr	r3, [r3, #20]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	0003023c 	.word	0x0003023c

000d6bc8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <HAL_USART_Peek_Data+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	699b      	ldr	r3, [r3, #24]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	0003023c 	.word	0x0003023c

000d6bd8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <HAL_USART_Flush_Data+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	69db      	ldr	r3, [r3, #28]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	0003023c 	.word	0x0003023c

000d6be8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <HAL_USART_Is_Enabled+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	6a1b      	ldr	r3, [r3, #32]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	0003023c 	.word	0x0003023c

000d6bf8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <HAL_USART_Available_Data_For_Write+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	0003023c 	.word	0x0003023c

000d6c08 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <HAL_I2C_Begin+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	68db      	ldr	r3, [r3, #12]
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030228 	.word	0x00030228

000d6c18 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <HAL_I2C_Begin_Transmission+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	699b      	ldr	r3, [r3, #24]
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030228 	.word	0x00030228

000d6c28 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <HAL_I2C_End_Transmission+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	69db      	ldr	r3, [r3, #28]
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030228 	.word	0x00030228

000d6c38 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <HAL_I2C_Write_Data+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	6a1b      	ldr	r3, [r3, #32]
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030228 	.word	0x00030228

000d6c48 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <HAL_I2C_Available_Data+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	00030228 	.word	0x00030228

000d6c58 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <HAL_I2C_Read_Data+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030228 	.word	0x00030228

000d6c68 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <HAL_I2C_Peek_Data+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030228 	.word	0x00030228

000d6c78 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <HAL_I2C_Flush_Data+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030228 	.word	0x00030228

000d6c88 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <HAL_I2C_Is_Enabled+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030228 	.word	0x00030228

000d6c98 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_I2C_Init+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030228 	.word	0x00030228

000d6ca8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_I2C_Request_Data_Ex+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030228 	.word	0x00030228

000d6cb8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <sock_setsockopt+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	699b      	ldr	r3, [r3, #24]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030238 	.word	0x00030238

000d6cc8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <sock_close+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	69db      	ldr	r3, [r3, #28]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030238 	.word	0x00030238

000d6cd8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <sock_connect+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	6a1b      	ldr	r3, [r3, #32]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	00030238 	.word	0x00030238

000d6ce8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <sock_recv+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	00030238 	.word	0x00030238

000d6cf8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <sock_send+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	00030238 	.word	0x00030238

000d6d08 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <sock_socket+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030238 	.word	0x00030238

000d6d18 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <HAL_USB_USART_Init+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	681b      	ldr	r3, [r3, #0]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003024c 	.word	0x0003024c

000d6d28 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_USB_USART_Begin+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	685b      	ldr	r3, [r3, #4]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003024c 	.word	0x0003024c

000d6d38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_USB_USART_Available_Data+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	691b      	ldr	r3, [r3, #16]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003024c 	.word	0x0003024c

000d6d48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	695b      	ldr	r3, [r3, #20]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003024c 	.word	0x0003024c

000d6d58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_USB_USART_Receive_Data+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	699b      	ldr	r3, [r3, #24]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	0003024c 	.word	0x0003024c

000d6d68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_USB_USART_Send_Data+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	69db      	ldr	r3, [r3, #28]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	0003024c 	.word	0x0003024c

000d6d78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <HAL_USB_USART_Flush_Data+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	6a1b      	ldr	r3, [r3, #32]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	0003024c 	.word	0x0003024c

000d6d88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <panic_+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030260 	.word	0x00030260

000d6d98 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <log_message+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030260 	.word	0x00030260

000d6da8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <system_mode+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	681b      	ldr	r3, [r3, #0]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030220 	.word	0x00030220

000d6db8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <set_system_mode+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	685b      	ldr	r3, [r3, #4]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030220 	.word	0x00030220

000d6dc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <system_delay_ms+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	695b      	ldr	r3, [r3, #20]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030220 	.word	0x00030220

000d6dd8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <application_thread_current+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030220 	.word	0x00030220

000d6de8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <application_thread_invoke+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030220 	.word	0x00030220

000d6df8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <system_thread_get_state+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030220 	.word	0x00030220

000d6e08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b03      	ldr	r3, [pc, #12]	; (d6e18 <system_ctrl_set_app_request_handler+0x10>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e12:	9301      	str	r3, [sp, #4]
   d6e14:	bd08      	pop	{r3, pc}
   d6e16:	0000      	.short	0x0000
   d6e18:	00030220 	.word	0x00030220

000d6e1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b03      	ldr	r3, [pc, #12]	; (d6e2c <system_ctrl_set_result+0x10>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e26:	9301      	str	r3, [sp, #4]
   d6e28:	bd08      	pop	{r3, pc}
   d6e2a:	0000      	.short	0x0000
   d6e2c:	00030220 	.word	0x00030220

000d6e30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e30:	b508      	push	{r3, lr}
   d6e32:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <network_connect+0xc>)
   d6e34:	681b      	ldr	r3, [r3, #0]
   d6e36:	685b      	ldr	r3, [r3, #4]
   d6e38:	9301      	str	r3, [sp, #4]
   d6e3a:	bd08      	pop	{r3, pc}
   d6e3c:	00030240 	.word	0x00030240

000d6e40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <network_connecting+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	689b      	ldr	r3, [r3, #8]
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	00030240 	.word	0x00030240

000d6e50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <network_disconnect+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	68db      	ldr	r3, [r3, #12]
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	00030240 	.word	0x00030240

000d6e60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <network_ready+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	691b      	ldr	r3, [r3, #16]
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	00030240 	.word	0x00030240

000d6e70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <network_on+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	695b      	ldr	r3, [r3, #20]
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	00030240 	.word	0x00030240

000d6e80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <network_off+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	699b      	ldr	r3, [r3, #24]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030240 	.word	0x00030240

000d6e90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <network_listen+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	69db      	ldr	r3, [r3, #28]
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030240 	.word	0x00030240

000d6ea0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <network_listening+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	6a1b      	ldr	r3, [r3, #32]
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030240 	.word	0x00030240

000d6eb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <network_set_listen_timeout+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030240 	.word	0x00030240

000d6ec0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <network_get_listen_timeout+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030240 	.word	0x00030240

000d6ed0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <spark_process+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	689b      	ldr	r3, [r3, #8]
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030244 	.word	0x00030244

000d6ee0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <spark_cloud_flag_connected+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	695b      	ldr	r3, [r3, #20]
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030244 	.word	0x00030244

000d6ef0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <spark_send_event+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	6a1b      	ldr	r3, [r3, #32]
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030244 	.word	0x00030244

000d6f00 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <spark_sync_time+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030244 	.word	0x00030244

000d6f10 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <spark_sync_time_pending+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030244 	.word	0x00030244

000d6f20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030244 	.word	0x00030244

000d6f30 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <malloc+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	681b      	ldr	r3, [r3, #0]
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	0003021c 	.word	0x0003021c

000d6f40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <free+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	685b      	ldr	r3, [r3, #4]
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	0003021c 	.word	0x0003021c

000d6f50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <realloc+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	689b      	ldr	r3, [r3, #8]
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	0003021c 	.word	0x0003021c

000d6f60 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <sprintf+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	68db      	ldr	r3, [r3, #12]
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	0003021c 	.word	0x0003021c

000d6f70 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <siprintf+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	691b      	ldr	r3, [r3, #16]
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	0003021c 	.word	0x0003021c

000d6f80 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <siscanf+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	699b      	ldr	r3, [r3, #24]
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	0003021c 	.word	0x0003021c

000d6f90 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <vsnprintf+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	0003021c 	.word	0x0003021c

000d6fa0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <abort+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	0003021c 	.word	0x0003021c

000d6fb0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <_malloc_r+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	0003021c 	.word	0x0003021c

000d6fc0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <__errno+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	0003021c 	.word	0x0003021c

000d6fd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fd0:	2200      	movs	r2, #0
   d6fd2:	4611      	mov	r1, r2
   d6fd4:	6840      	ldr	r0, [r0, #4]
   d6fd6:	f7ff bf63 	b.w	d6ea0 <network_listening>

000d6fda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fda:	2200      	movs	r2, #0
   d6fdc:	4611      	mov	r1, r2
   d6fde:	6840      	ldr	r0, [r0, #4]
   d6fe0:	f7ff bf6e 	b.w	d6ec0 <network_get_listen_timeout>

000d6fe4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fe4:	2200      	movs	r2, #0
   d6fe6:	6840      	ldr	r0, [r0, #4]
   d6fe8:	f7ff bf62 	b.w	d6eb0 <network_set_listen_timeout>

000d6fec <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6fec:	2200      	movs	r2, #0
   d6fee:	f081 0101 	eor.w	r1, r1, #1
   d6ff2:	6840      	ldr	r0, [r0, #4]
   d6ff4:	f7ff bf4c 	b.w	d6e90 <network_listen>

000d6ff8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6ff8:	2300      	movs	r3, #0
   d6ffa:	461a      	mov	r2, r3
   d6ffc:	4619      	mov	r1, r3
   d6ffe:	6840      	ldr	r0, [r0, #4]
   d7000:	f7ff bf3e 	b.w	d6e80 <network_off>

000d7004 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7004:	2300      	movs	r3, #0
   d7006:	461a      	mov	r2, r3
   d7008:	4619      	mov	r1, r3
   d700a:	6840      	ldr	r0, [r0, #4]
   d700c:	f7ff bf30 	b.w	d6e70 <network_on>

000d7010 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7010:	2200      	movs	r2, #0
   d7012:	4611      	mov	r1, r2
   d7014:	6840      	ldr	r0, [r0, #4]
   d7016:	f7ff bf23 	b.w	d6e60 <network_ready>

000d701a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d701a:	2200      	movs	r2, #0
   d701c:	4611      	mov	r1, r2
   d701e:	6840      	ldr	r0, [r0, #4]
   d7020:	f7ff bf0e 	b.w	d6e40 <network_connecting>

000d7024 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7024:	2200      	movs	r2, #0
   d7026:	2102      	movs	r1, #2
   d7028:	6840      	ldr	r0, [r0, #4]
   d702a:	f7ff bf11 	b.w	d6e50 <network_disconnect>

000d702e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d702e:	2300      	movs	r3, #0
   d7030:	461a      	mov	r2, r3
   d7032:	6840      	ldr	r0, [r0, #4]
   d7034:	f7ff befc 	b.w	d6e30 <network_connect>

000d7038 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7038:	4b02      	ldr	r3, [pc, #8]	; (d7044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d703a:	2203      	movs	r2, #3
   d703c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d703e:	4a02      	ldr	r2, [pc, #8]	; (d7048 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7040:	601a      	str	r2, [r3, #0]
   d7042:	4770      	bx	lr
   d7044:	2003e3b0 	.word	0x2003e3b0
   d7048:	000dcd5c 	.word	0x000dcd5c

000d704c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d704c:	2100      	movs	r1, #0
   d704e:	f7ff bd1b 	b.w	d6a88 <HAL_SPI_Acquire>

000d7052 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7052:	2100      	movs	r1, #0
   d7054:	f7ff bd20 	b.w	d6a98 <HAL_SPI_Release>

000d7058 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7058:	b510      	push	{r4, lr}
   d705a:	4604      	mov	r4, r0
{
    _spi = spi;
   d705c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d705e:	4608      	mov	r0, r1
   d7060:	f7ff fcf2 	bl	d6a48 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7064:	2300      	movs	r3, #0
   d7066:	6063      	str	r3, [r4, #4]
}
   d7068:	4620      	mov	r0, r4
   d706a:	bd10      	pop	{r4, pc}

000d706c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d706c:	b510      	push	{r4, lr}
   d706e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7070:	7800      	ldrb	r0, [r0, #0]
   d7072:	f7ff ffeb 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d7076:	b948      	cbnz	r0, d708c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7078:	7820      	ldrb	r0, [r4, #0]
   d707a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d707e:	f7ff fcbb 	bl	d69f8 <HAL_SPI_Begin>
        unlock();
   d7082:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7088:	f7ff bfe3 	b.w	d7052 <_ZN8SPIClass6unlockEv.isra.1>
   d708c:	bd10      	pop	{r4, pc}

000d708e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d708e:	b538      	push	{r3, r4, r5, lr}
   d7090:	4604      	mov	r4, r0
    if (!lock())
   d7092:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7094:	460d      	mov	r5, r1
    if (!lock())
   d7096:	f7ff ffd9 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d709a:	b940      	cbnz	r0, d70ae <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d709c:	7820      	ldrb	r0, [r4, #0]
   d709e:	4629      	mov	r1, r5
   d70a0:	f7ff fcb2 	bl	d6a08 <HAL_SPI_Set_Bit_Order>
        unlock();
   d70a4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d70a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d70aa:	f7ff bfd2 	b.w	d7052 <_ZN8SPIClass6unlockEv.isra.1>
   d70ae:	bd38      	pop	{r3, r4, r5, pc}

000d70b0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d70b0:	b538      	push	{r3, r4, r5, lr}
   d70b2:	4604      	mov	r4, r0
    if (!lock())
   d70b4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d70b6:	460d      	mov	r5, r1
    if (!lock())
   d70b8:	f7ff ffc8 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d70bc:	b940      	cbnz	r0, d70d0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d70be:	7820      	ldrb	r0, [r4, #0]
   d70c0:	4629      	mov	r1, r5
   d70c2:	f7ff fca9 	bl	d6a18 <HAL_SPI_Set_Data_Mode>
        unlock();
   d70c6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d70c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d70cc:	f7ff bfc1 	b.w	d7052 <_ZN8SPIClass6unlockEv.isra.1>
   d70d0:	bd38      	pop	{r3, r4, r5, pc}

000d70d2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d70d2:	7800      	ldrb	r0, [r0, #0]
   d70d4:	f7ff bfbd 	b.w	d7052 <_ZN8SPIClass6unlockEv.isra.1>

000d70d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70d8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d70da:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70dc:	6018      	str	r0, [r3, #0]
   d70de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d70e0:	6818      	ldr	r0, [r3, #0]
   d70e2:	4288      	cmp	r0, r1
   d70e4:	b2e5      	uxtb	r5, r4
   d70e6:	d906      	bls.n	d70f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d70e8:	3401      	adds	r4, #1
   d70ea:	2c08      	cmp	r4, #8
   d70ec:	d002      	beq.n	d70f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d70ee:	0840      	lsrs	r0, r0, #1
   d70f0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d70f2:	e7f5      	b.n	d70e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d70f4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d70f8:	5d5b      	ldrb	r3, [r3, r5]
   d70fa:	7013      	strb	r3, [r2, #0]
   d70fc:	bd30      	pop	{r4, r5, pc}
   d70fe:	bf00      	nop
   d7100:	000dcd88 	.word	0x000dcd88

000d7104 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7108:	4607      	mov	r7, r0
   d710a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d710c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d710e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7110:	f7ff ff9c 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d7114:	2800      	cmp	r0, #0
   d7116:	db62      	blt.n	d71de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7118:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d711a:	2214      	movs	r2, #20
   d711c:	2100      	movs	r1, #0
   d711e:	a809      	add	r0, sp, #36	; 0x24
   d7120:	f004 fb24 	bl	db76c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7124:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7126:	4620      	mov	r0, r4
   d7128:	2200      	movs	r2, #0
   d712a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d712c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7130:	f7ff fc9a 	bl	d6a68 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7134:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7138:	b154      	cbz	r4, d7150 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d713a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d713e:	b935      	cbnz	r5, d714e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7140:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7144:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7148:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d714c:	e003      	b.n	d7156 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d714e:	2400      	movs	r4, #0
   d7150:	46a1      	mov	r9, r4
   d7152:	46a0      	mov	r8, r4
   d7154:	2501      	movs	r5, #1
   d7156:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7158:	b105      	cbz	r5, d715c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d715a:	b9bb      	cbnz	r3, d718c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d715c:	429d      	cmp	r5, r3
   d715e:	d10b      	bne.n	d7178 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7160:	68b2      	ldr	r2, [r6, #8]
   d7162:	4542      	cmp	r2, r8
   d7164:	d108      	bne.n	d7178 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7166:	f88d 9020 	strb.w	r9, [sp, #32]
   d716a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d716e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7172:	89b2      	ldrh	r2, [r6, #12]
   d7174:	4291      	cmp	r1, r2
   d7176:	d009      	beq.n	d718c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7178:	b153      	cbz	r3, d7190 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d717a:	2400      	movs	r4, #0
   d717c:	7838      	ldrb	r0, [r7, #0]
   d717e:	9401      	str	r4, [sp, #4]
   d7180:	9400      	str	r4, [sp, #0]
   d7182:	4623      	mov	r3, r4
   d7184:	4622      	mov	r2, r4
   d7186:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7188:	f7ff fc76 	bl	d6a78 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d718c:	2000      	movs	r0, #0
   d718e:	e026      	b.n	d71de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7190:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7194:	68b1      	ldr	r1, [r6, #8]
   d7196:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7198:	ab04      	add	r3, sp, #16
   d719a:	f10d 020f 	add.w	r2, sp, #15
   d719e:	f7ff ff9b 	bl	d70d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d71a2:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d71a4:	b105      	cbz	r5, d71a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d71a6:	b9b1      	cbnz	r1, d71d6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d71a8:	42a9      	cmp	r1, r5
   d71aa:	d008      	beq.n	d71be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d71ac:	2400      	movs	r4, #0
   d71ae:	7838      	ldrb	r0, [r7, #0]
   d71b0:	9401      	str	r4, [sp, #4]
   d71b2:	7b74      	ldrb	r4, [r6, #13]
   d71b4:	7b33      	ldrb	r3, [r6, #12]
   d71b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d71ba:	9400      	str	r4, [sp, #0]
   d71bc:	e7e4      	b.n	d7188 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d71be:	68b3      	ldr	r3, [r6, #8]
   d71c0:	4543      	cmp	r3, r8
   d71c2:	d3f3      	bcc.n	d71ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d71c4:	f88d 9020 	strb.w	r9, [sp, #32]
   d71c8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d71cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d71d0:	89b3      	ldrh	r3, [r6, #12]
   d71d2:	429a      	cmp	r2, r3
   d71d4:	d1ea      	bne.n	d71ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d71d6:	9b04      	ldr	r3, [sp, #16]
   d71d8:	4543      	cmp	r3, r8
   d71da:	d1e7      	bne.n	d71ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d71dc:	e7d6      	b.n	d718c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d71de:	b00f      	add	sp, #60	; 0x3c
   d71e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71e4 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71e8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d71ea:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71ec:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d71ee:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d71f0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71f2:	460e      	mov	r6, r1
   d71f4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d71f6:	f7ff ff29 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d71fa:	4605      	mov	r5, r0
   d71fc:	bb00      	cbnz	r0, d7240 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d71fe:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7202:	4601      	mov	r1, r0
   d7204:	2214      	movs	r2, #20
   d7206:	a803      	add	r0, sp, #12
   d7208:	f004 fab0 	bl	db76c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d720c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d720e:	462a      	mov	r2, r5
   d7210:	a903      	add	r1, sp, #12
   d7212:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7214:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7218:	f7ff fc26 	bl	d6a68 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d721c:	ab02      	add	r3, sp, #8
   d721e:	f10d 0207 	add.w	r2, sp, #7
   d7222:	fb07 f106 	mul.w	r1, r7, r6
   d7226:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7228:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d722c:	f7ff ff54 	bl	d70d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7230:	7820      	ldrb	r0, [r4, #0]
   d7232:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7236:	f7ff fbf7 	bl	d6a28 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d723a:	7820      	ldrb	r0, [r4, #0]
   d723c:	f7ff ff09 	bl	d7052 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7240:	9802      	ldr	r0, [sp, #8]
   d7242:	b008      	add	sp, #32
   d7244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7248 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7248:	b538      	push	{r3, r4, r5, lr}
   d724a:	4604      	mov	r4, r0
    if (!lock())
   d724c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d724e:	460d      	mov	r5, r1
    if (!lock())
   d7250:	f7ff fefc 	bl	d704c <_ZN8SPIClass4lockEv.isra.0>
   d7254:	b9c8      	cbnz	r0, d728a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7256:	6861      	ldr	r1, [r4, #4]
   d7258:	b171      	cbz	r1, d7278 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d725a:	4b0c      	ldr	r3, [pc, #48]	; (d728c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d725c:	5cc2      	ldrb	r2, [r0, r3]
   d725e:	42aa      	cmp	r2, r5
   d7260:	d002      	beq.n	d7268 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7262:	3001      	adds	r0, #1
   d7264:	2808      	cmp	r0, #8
   d7266:	d1f9      	bne.n	d725c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7268:	3001      	adds	r0, #1
   d726a:	b2c0      	uxtb	r0, r0
   d726c:	40c1      	lsrs	r1, r0
   d726e:	2201      	movs	r2, #1
   d7270:	4620      	mov	r0, r4
   d7272:	f7ff ffb7 	bl	d71e4 <_ZN8SPIClass13setClockSpeedEjj>
   d7276:	e003      	b.n	d7280 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7278:	4629      	mov	r1, r5
   d727a:	7820      	ldrb	r0, [r4, #0]
   d727c:	f7ff fbd4 	bl	d6a28 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7280:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7286:	f7ff bee4 	b.w	d7052 <_ZN8SPIClass6unlockEv.isra.1>
   d728a:	bd38      	pop	{r3, r4, r5, pc}
   d728c:	000dcd88 	.word	0x000dcd88

000d7290 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7290:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7292:	7800      	ldrb	r0, [r0, #0]
   d7294:	f7ff fbd0 	bl	d6a38 <HAL_SPI_Send_Receive_Data>
}
   d7298:	b2c0      	uxtb	r0, r0
   d729a:	bd08      	pop	{r3, pc}

000d729c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d729c:	7800      	ldrb	r0, [r0, #0]
   d729e:	f7ff bbdb 	b.w	d6a58 <HAL_SPI_Is_Enabled>

000d72a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d72a2:	b510      	push	{r4, lr}
   d72a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d72a6:	6800      	ldr	r0, [r0, #0]
   d72a8:	b118      	cbz	r0, d72b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d72aa:	f7ff fe49 	bl	d6f40 <free>
            wakeupSource_ = nullptr;
   d72ae:	2300      	movs	r3, #0
   d72b0:	6023      	str	r3, [r4, #0]
   d72b2:	bd10      	pop	{r4, pc}

000d72b4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d72b4:	b510      	push	{r4, lr}
   d72b6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d72b8:	f7ff fff3 	bl	d72a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d72bc:	4620      	mov	r0, r4
   d72be:	bd10      	pop	{r4, pc}

000d72c0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d72c0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d72c2:	4c09      	ldr	r4, [pc, #36]	; (d72e8 <_GLOBAL__sub_I_System+0x28>)
   d72c4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d72c6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d72ca:	6020      	str	r0, [r4, #0]
   d72cc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d72ce:	71a0      	strb	r0, [r4, #6]
   d72d0:	8120      	strh	r0, [r4, #8]
   d72d2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d72d4:	f7ff fd70 	bl	d6db8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d72d8:	4620      	mov	r0, r4
   d72da:	4a04      	ldr	r2, [pc, #16]	; (d72ec <_GLOBAL__sub_I_System+0x2c>)
   d72dc:	4904      	ldr	r1, [pc, #16]	; (d72f0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d72de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d72e2:	f001 be4b 	b.w	d8f7c <__aeabi_atexit>
   d72e6:	bf00      	nop
   d72e8:	2003e3b8 	.word	0x2003e3b8
   d72ec:	2003e148 	.word	0x2003e148
   d72f0:	000d72b5 	.word	0x000d72b5

000d72f4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d72f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d72f8:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d72fa:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d72fc:	4615      	mov	r5, r2
   d72fe:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d7300:	bf34      	ite	cc
   d7302:	4615      	movcc	r5, r2
   d7304:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d7306:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d7308:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d730a:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d730c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d7310:	d107      	bne.n	d7322 <ltoa+0x2e>
   d7312:	4298      	cmp	r0, r3
   d7314:	da05      	bge.n	d7322 <ltoa+0x2e>
      {
            *head++ = '-';
   d7316:	232d      	movs	r3, #45	; 0x2d
   d7318:	f101 0801 	add.w	r8, r1, #1
   d731c:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d731e:	4240      	negs	r0, r0
   d7320:	e001      	b.n	d7326 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d7322:	b1b0      	cbz	r0, d7352 <ltoa+0x5e>
   d7324:	46a0      	mov	r8, r4
   d7326:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d732a:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d732c:	462a      	mov	r2, r5
   d732e:	4601      	mov	r1, r0
   d7330:	a801      	add	r0, sp, #4
   d7332:	f004 f9e1 	bl	db6f8 <ldiv>
   d7336:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d7338:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d733a:	2b09      	cmp	r3, #9
   d733c:	bfcc      	ite	gt
   d733e:	2237      	movgt	r2, #55	; 0x37
   d7340:	2230      	movle	r2, #48	; 0x30
   d7342:	fa52 f383 	uxtab	r3, r2, r3
   d7346:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d734a:	3701      	adds	r7, #1
   d734c:	2800      	cmp	r0, #0
   d734e:	d1ed      	bne.n	d732c <ltoa+0x38>
   d7350:	e006      	b.n	d7360 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d7352:	2330      	movs	r3, #48	; 0x30
   d7354:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7358:	46a0      	mov	r8, r4
   d735a:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d735e:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d7360:	463a      	mov	r2, r7
   d7362:	1c71      	adds	r1, r6, #1
   d7364:	4640      	mov	r0, r8
   d7366:	f004 f9db 	bl	db720 <memcpy>
      return str;
}
   d736a:	4620      	mov	r0, r4
   d736c:	b00c      	add	sp, #48	; 0x30
   d736e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7372 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7372:	b510      	push	{r4, lr}
   d7374:	4604      	mov	r4, r0
{
	free(buffer);
   d7376:	6800      	ldr	r0, [r0, #0]
   d7378:	f7ff fde2 	bl	d6f40 <free>
}
   d737c:	4620      	mov	r0, r4
   d737e:	bd10      	pop	{r4, pc}

000d7380 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7380:	b510      	push	{r4, lr}
   d7382:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7384:	6800      	ldr	r0, [r0, #0]
   d7386:	b108      	cbz	r0, d738c <_ZN6String10invalidateEv+0xc>
   d7388:	f7ff fdda 	bl	d6f40 <free>
	buffer = NULL;
   d738c:	2300      	movs	r3, #0
   d738e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7390:	60a3      	str	r3, [r4, #8]
   d7392:	6063      	str	r3, [r4, #4]
   d7394:	bd10      	pop	{r4, pc}

000d7396 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7396:	b538      	push	{r3, r4, r5, lr}
   d7398:	4604      	mov	r4, r0
   d739a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d739c:	6800      	ldr	r0, [r0, #0]
   d739e:	3101      	adds	r1, #1
   d73a0:	f7ff fdd6 	bl	d6f50 <realloc>
	if (newbuffer) {
   d73a4:	b110      	cbz	r0, d73ac <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d73a6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d73aa:	2001      	movs	r0, #1
	}
	return 0;
}
   d73ac:	bd38      	pop	{r3, r4, r5, pc}

000d73ae <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d73ae:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d73b0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d73b2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d73b4:	b113      	cbz	r3, d73bc <_ZN6String7reserveEj+0xe>
   d73b6:	6843      	ldr	r3, [r0, #4]
   d73b8:	428b      	cmp	r3, r1
   d73ba:	d207      	bcs.n	d73cc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d73bc:	4620      	mov	r0, r4
   d73be:	f7ff ffea 	bl	d7396 <_ZN6String12changeBufferEj>
   d73c2:	b120      	cbz	r0, d73ce <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d73c4:	68a3      	ldr	r3, [r4, #8]
   d73c6:	b90b      	cbnz	r3, d73cc <_ZN6String7reserveEj+0x1e>
   d73c8:	6822      	ldr	r2, [r4, #0]
   d73ca:	7013      	strb	r3, [r2, #0]
   d73cc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d73ce:	bd10      	pop	{r4, pc}

000d73d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d73d0:	b570      	push	{r4, r5, r6, lr}
   d73d2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d73d4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d73d6:	4604      	mov	r4, r0
   d73d8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d73da:	f7ff ffe8 	bl	d73ae <_ZN6String7reserveEj>
   d73de:	b918      	cbnz	r0, d73e8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d73e0:	4620      	mov	r0, r4
   d73e2:	f7ff ffcd 	bl	d7380 <_ZN6String10invalidateEv>
		return *this;
   d73e6:	e009      	b.n	d73fc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d73e8:	462a      	mov	r2, r5
   d73ea:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d73ec:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d73ee:	6820      	ldr	r0, [r4, #0]
   d73f0:	f004 f996 	bl	db720 <memcpy>
	buffer[len] = 0;
   d73f4:	6822      	ldr	r2, [r4, #0]
   d73f6:	68a3      	ldr	r3, [r4, #8]
   d73f8:	2100      	movs	r1, #0
   d73fa:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d73fc:	4620      	mov	r0, r4
   d73fe:	bd70      	pop	{r4, r5, r6, pc}

000d7400 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7400:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7402:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7404:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7406:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7408:	6043      	str	r3, [r0, #4]
	len = 0;
   d740a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d740c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d740e:	460d      	mov	r5, r1
   d7410:	b139      	cbz	r1, d7422 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7412:	4608      	mov	r0, r1
   d7414:	f004 fa07 	bl	db826 <strlen>
   d7418:	4629      	mov	r1, r5
   d741a:	4602      	mov	r2, r0
   d741c:	4620      	mov	r0, r4
   d741e:	f7ff ffd7 	bl	d73d0 <_ZN6String4copyEPKcj>
}
   d7422:	4620      	mov	r0, r4
   d7424:	bd38      	pop	{r3, r4, r5, pc}

000d7426 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7426:	b538      	push	{r3, r4, r5, lr}
   d7428:	4605      	mov	r5, r0
	if (buffer) {
   d742a:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d742c:	460c      	mov	r4, r1
	if (buffer) {
   d742e:	b160      	cbz	r0, d744a <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7430:	686a      	ldr	r2, [r5, #4]
   d7432:	688b      	ldr	r3, [r1, #8]
   d7434:	429a      	cmp	r2, r3
   d7436:	d306      	bcc.n	d7446 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7438:	6809      	ldr	r1, [r1, #0]
   d743a:	f004 f9d1 	bl	db7e0 <strcpy>
			len = rhs.len;
   d743e:	68a3      	ldr	r3, [r4, #8]
   d7440:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d7442:	2300      	movs	r3, #0
   d7444:	e00a      	b.n	d745c <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d7446:	f7ff fd7b 	bl	d6f40 <free>
		}
	}
	buffer = rhs.buffer;
   d744a:	6823      	ldr	r3, [r4, #0]
   d744c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d744e:	6863      	ldr	r3, [r4, #4]
   d7450:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7452:	68a3      	ldr	r3, [r4, #8]
   d7454:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7456:	2300      	movs	r3, #0
   d7458:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d745a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d745c:	60a3      	str	r3, [r4, #8]
   d745e:	bd38      	pop	{r3, r4, r5, pc}

000d7460 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7460:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d7462:	b510      	push	{r4, lr}
   d7464:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7466:	d001      	beq.n	d746c <_ZN6StringaSEOS_+0xc>
   d7468:	f7ff ffdd 	bl	d7426 <_ZN6String4moveERS_>
	return *this;
}
   d746c:	4620      	mov	r0, r4
   d746e:	bd10      	pop	{r4, pc}

000d7470 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7470:	b570      	push	{r4, r5, r6, lr}
   d7472:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7474:	b19a      	cbz	r2, d749e <_ZNK6String8getBytesEPhjj+0x2e>
   d7476:	b191      	cbz	r1, d749e <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7478:	6885      	ldr	r5, [r0, #8]
   d747a:	429d      	cmp	r5, r3
   d747c:	d802      	bhi.n	d7484 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d747e:	2300      	movs	r3, #0
   d7480:	700b      	strb	r3, [r1, #0]
		return;
   d7482:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7484:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7486:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7488:	6801      	ldr	r1, [r0, #0]
   d748a:	42ac      	cmp	r4, r5
   d748c:	bf28      	it	cs
   d748e:	462c      	movcs	r4, r5
   d7490:	4419      	add	r1, r3
   d7492:	4622      	mov	r2, r4
   d7494:	4630      	mov	r0, r6
   d7496:	f004 fa08 	bl	db8aa <strncpy>
	buf[n] = 0;
   d749a:	2300      	movs	r3, #0
   d749c:	5533      	strb	r3, [r6, r4]
   d749e:	bd70      	pop	{r4, r5, r6, pc}

000d74a0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d74a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d74a2:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d74a4:	460f      	mov	r7, r1
   d74a6:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d74a8:	490c      	ldr	r1, [pc, #48]	; (d74dc <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d74aa:	bf88      	it	hi
   d74ac:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d74ae:	4614      	mov	r4, r2
   d74b0:	4606      	mov	r6, r0
	if (left > right) {
   d74b2:	bf84      	itt	hi
   d74b4:	462c      	movhi	r4, r5
   d74b6:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d74b8:	f7ff ffa2 	bl	d7400 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d74bc:	68ba      	ldr	r2, [r7, #8]
   d74be:	4294      	cmp	r4, r2
   d74c0:	d80a      	bhi.n	d74d8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d74c2:	6839      	ldr	r1, [r7, #0]
   d74c4:	4295      	cmp	r5, r2
   d74c6:	bf94      	ite	ls
   d74c8:	ebc4 0205 	rsbls	r2, r4, r5
   d74cc:	ebc4 0202 	rsbhi	r2, r4, r2
   d74d0:	4421      	add	r1, r4
   d74d2:	4630      	mov	r0, r6
   d74d4:	f7ff ff7c 	bl	d73d0 <_ZN6String4copyEPKcj>
	return out;
}
   d74d8:	4630      	mov	r0, r6
   d74da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d74dc:	000dc5b1 	.word	0x000dc5b1

000d74e0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d74e0:	b510      	push	{r4, lr}
   d74e2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d74e4:	6800      	ldr	r0, [r0, #0]
   d74e6:	b108      	cbz	r0, d74ec <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d74e8:	f7ff fb2e 	bl	d6b48 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74f0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74f2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74f4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74f6:	689b      	ldr	r3, [r3, #8]
   d74f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74fa:	68a3      	ldr	r3, [r4, #8]
   d74fc:	3b01      	subs	r3, #1
   d74fe:	60a3      	str	r3, [r4, #8]
   d7500:	b92b      	cbnz	r3, d750e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d7502:	6823      	ldr	r3, [r4, #0]
   d7504:	4620      	mov	r0, r4
   d7506:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d750c:	4718      	bx	r3
   d750e:	bd10      	pop	{r4, pc}

000d7510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7510:	680b      	ldr	r3, [r1, #0]
   d7512:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7514:	b113      	cbz	r3, d751c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7516:	685a      	ldr	r2, [r3, #4]
   d7518:	3201      	adds	r2, #1
   d751a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d751c:	4770      	bx	lr

000d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d751e:	b510      	push	{r4, lr}
   d7520:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d7522:	6800      	ldr	r0, [r0, #0]
   d7524:	b128      	cbz	r0, d7532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7526:	6843      	ldr	r3, [r0, #4]
   d7528:	3b01      	subs	r3, #1
   d752a:	6043      	str	r3, [r0, #4]
   d752c:	b90b      	cbnz	r3, d7532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d752e:	f7ff ffdf 	bl	d74f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d7532:	4620      	mov	r0, r4
   d7534:	bd10      	pop	{r4, pc}
	...

000d7538 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7538:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d753a:	4c06      	ldr	r4, [pc, #24]	; (d7554 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d753c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d753e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7540:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7542:	f7ff faf9 	bl	d6b38 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7546:	4620      	mov	r0, r4
   d7548:	4a03      	ldr	r2, [pc, #12]	; (d7558 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d754a:	4904      	ldr	r1, [pc, #16]	; (d755c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7550:	f001 bd14 	b.w	d8f7c <__aeabi_atexit>
   d7554:	2003e3c4 	.word	0x2003e3c4
   d7558:	2003e148 	.word	0x2003e148
   d755c:	000d74e1 	.word	0x000d74e1

000d7560 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7562:	4606      	mov	r6, r0
   d7564:	460d      	mov	r5, r1
   d7566:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7568:	2400      	movs	r4, #0
  while (size--) {
   d756a:	42bd      	cmp	r5, r7
   d756c:	d00c      	beq.n	d7588 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d756e:	6833      	ldr	r3, [r6, #0]
   d7570:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7574:	689b      	ldr	r3, [r3, #8]
   d7576:	4630      	mov	r0, r6
   d7578:	4798      	blx	r3
     if (chunk>=0)
   d757a:	2800      	cmp	r0, #0
   d757c:	db01      	blt.n	d7582 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d757e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7580:	e7f3      	b.n	d756a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7582:	2c00      	cmp	r4, #0
   d7584:	bf08      	it	eq
   d7586:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7588:	4620      	mov	r0, r4
   d758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d758c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d758c:	b570      	push	{r4, r5, r6, lr}
   d758e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7590:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7592:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7594:	b149      	cbz	r1, d75aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7596:	f004 f946 	bl	db826 <strlen>
   d759a:	682b      	ldr	r3, [r5, #0]
   d759c:	4602      	mov	r2, r0
   d759e:	4621      	mov	r1, r4
   d75a0:	4628      	mov	r0, r5
   d75a2:	68db      	ldr	r3, [r3, #12]
    }
   d75a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d75a8:	4718      	bx	r3
    }
   d75aa:	bd70      	pop	{r4, r5, r6, pc}

000d75ac <_ZN5Print5printEPKc>:
   d75ac:	b508      	push	{r3, lr}
   d75ae:	f7ff ffed 	bl	d758c <_ZN5Print5writeEPKc>
   d75b2:	bd08      	pop	{r3, pc}

000d75b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d75b4:	6803      	ldr	r3, [r0, #0]
   d75b6:	689b      	ldr	r3, [r3, #8]
   d75b8:	4718      	bx	r3

000d75ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d75ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d75bc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d75be:	4605      	mov	r5, r0
  size_t n = print('\r');
   d75c0:	f7ff fff8 	bl	d75b4 <_ZN5Print5printEc>
  n += print('\n');
   d75c4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d75c6:	4604      	mov	r4, r0
  n += print('\n');
   d75c8:	4628      	mov	r0, r5
   d75ca:	f7ff fff3 	bl	d75b4 <_ZN5Print5printEc>
  return n;
}
   d75ce:	4420      	add	r0, r4
   d75d0:	bd38      	pop	{r3, r4, r5, pc}

000d75d2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d75d2:	b538      	push	{r3, r4, r5, lr}
   d75d4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d75d6:	f7ff ffd9 	bl	d758c <_ZN5Print5writeEPKc>
   d75da:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d75dc:	4628      	mov	r0, r5
   d75de:	f7ff ffec 	bl	d75ba <_ZN5Print7printlnEv>
  return n;
}
   d75e2:	4420      	add	r0, r4
   d75e4:	bd38      	pop	{r3, r4, r5, pc}

000d75e6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d75e6:	f7ff bff4 	b.w	d75d2 <_ZN5Print7printlnEPKc>

000d75ea <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d75ea:	b530      	push	{r4, r5, lr}
   d75ec:	b08b      	sub	sp, #44	; 0x2c
   d75ee:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d75f0:	2100      	movs	r1, #0
   d75f2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d75f6:	2a01      	cmp	r2, #1
   d75f8:	bf98      	it	ls
   d75fa:	220a      	movls	r2, #10
   d75fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7600:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7604:	fb05 3312 	mls	r3, r5, r2, r3
   d7608:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d760c:	2b09      	cmp	r3, #9
   d760e:	bf94      	ite	ls
   d7610:	3330      	addls	r3, #48	; 0x30
   d7612:	3337      	addhi	r3, #55	; 0x37
   d7614:	b2db      	uxtb	r3, r3
   d7616:	4621      	mov	r1, r4
   d7618:	f804 3901 	strb.w	r3, [r4], #-1
   d761c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d761e:	2d00      	cmp	r5, #0
   d7620:	d1ee      	bne.n	d7600 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7622:	f7ff ffb3 	bl	d758c <_ZN5Print5writeEPKc>
}
   d7626:	b00b      	add	sp, #44	; 0x2c
   d7628:	bd30      	pop	{r4, r5, pc}
	...

000d762c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7630:	ec57 6b10 	vmov	r6, r7, d0
   d7634:	4682      	mov	sl, r0
   d7636:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7638:	ee10 2a10 	vmov	r2, s0
   d763c:	463b      	mov	r3, r7
   d763e:	ee10 0a10 	vmov	r0, s0
   d7642:	4639      	mov	r1, r7
   d7644:	f003 fb92 	bl	dad6c <__aeabi_dcmpun>
   d7648:	b108      	cbz	r0, d764e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d764a:	494e      	ldr	r1, [pc, #312]	; (d7784 <_ZN5Print10printFloatEdh+0x158>)
   d764c:	e012      	b.n	d7674 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d764e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d7652:	f04f 32ff 	mov.w	r2, #4294967295
   d7656:	4b4c      	ldr	r3, [pc, #304]	; (d7788 <_ZN5Print10printFloatEdh+0x15c>)
   d7658:	4630      	mov	r0, r6
   d765a:	4649      	mov	r1, r9
   d765c:	f003 fb86 	bl	dad6c <__aeabi_dcmpun>
   d7660:	b968      	cbnz	r0, d767e <_ZN5Print10printFloatEdh+0x52>
   d7662:	f04f 32ff 	mov.w	r2, #4294967295
   d7666:	4b48      	ldr	r3, [pc, #288]	; (d7788 <_ZN5Print10printFloatEdh+0x15c>)
   d7668:	4630      	mov	r0, r6
   d766a:	4649      	mov	r1, r9
   d766c:	f003 fb60 	bl	dad30 <__aeabi_dcmple>
   d7670:	b928      	cbnz	r0, d767e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7672:	4946      	ldr	r1, [pc, #280]	; (d778c <_ZN5Print10printFloatEdh+0x160>)
   d7674:	4650      	mov	r0, sl
   d7676:	f7ff ff89 	bl	d758c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d767e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7682:	4b43      	ldr	r3, [pc, #268]	; (d7790 <_ZN5Print10printFloatEdh+0x164>)
   d7684:	4630      	mov	r0, r6
   d7686:	4639      	mov	r1, r7
   d7688:	f003 fb66 	bl	dad58 <__aeabi_dcmpgt>
   d768c:	b108      	cbz	r0, d7692 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d768e:	4941      	ldr	r1, [pc, #260]	; (d7794 <_ZN5Print10printFloatEdh+0x168>)
   d7690:	e7f0      	b.n	d7674 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7696:	4b40      	ldr	r3, [pc, #256]	; (d7798 <_ZN5Print10printFloatEdh+0x16c>)
   d7698:	4630      	mov	r0, r6
   d769a:	4639      	mov	r1, r7
   d769c:	f003 fb3e 	bl	dad1c <__aeabi_dcmplt>
   d76a0:	2800      	cmp	r0, #0
   d76a2:	d1f4      	bne.n	d768e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d76a4:	2200      	movs	r2, #0
   d76a6:	2300      	movs	r3, #0
   d76a8:	4630      	mov	r0, r6
   d76aa:	4639      	mov	r1, r7
   d76ac:	f003 fb36 	bl	dad1c <__aeabi_dcmplt>
   d76b0:	b140      	cbz	r0, d76c4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d76b2:	212d      	movs	r1, #45	; 0x2d
   d76b4:	4650      	mov	r0, sl
   d76b6:	f7ff ff7d 	bl	d75b4 <_ZN5Print5printEc>
     number = -number;
   d76ba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d76be:	4604      	mov	r4, r0
     number = -number;
   d76c0:	461f      	mov	r7, r3
   d76c2:	e000      	b.n	d76c6 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d76c4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d76c6:	4935      	ldr	r1, [pc, #212]	; (d779c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d76c8:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d76cc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d76ce:	fa5f f388 	uxtb.w	r3, r8
   d76d2:	429d      	cmp	r5, r3
   d76d4:	d906      	bls.n	d76e4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d76d6:	2200      	movs	r2, #0
   d76d8:	4b31      	ldr	r3, [pc, #196]	; (d77a0 <_ZN5Print10printFloatEdh+0x174>)
   d76da:	f003 f9d7 	bl	daa8c <__aeabi_ddiv>
   d76de:	f108 0801 	add.w	r8, r8, #1
   d76e2:	e7f4      	b.n	d76ce <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d76e4:	4632      	mov	r2, r6
   d76e6:	463b      	mov	r3, r7
   d76e8:	f002 fef4 	bl	da4d4 <__adddf3>
   d76ec:	460f      	mov	r7, r1
   d76ee:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d76f0:	f003 fb7a 	bl	dade8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d76f4:	220a      	movs	r2, #10
   d76f6:	4601      	mov	r1, r0
   d76f8:	4680      	mov	r8, r0
   d76fa:	4650      	mov	r0, sl
   d76fc:	f7ff ff75 	bl	d75ea <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7700:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d7702:	b3e5      	cbz	r5, d777e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d7704:	4640      	mov	r0, r8
   d7706:	f003 f821 	bl	da74c <__aeabi_ui2d>
   d770a:	4602      	mov	r2, r0
   d770c:	460b      	mov	r3, r1
   d770e:	4630      	mov	r0, r6
   d7710:	4639      	mov	r1, r7
   d7712:	f002 fedd 	bl	da4d0 <__aeabi_dsub>
   d7716:	4606      	mov	r6, r0
   d7718:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d771a:	4650      	mov	r0, sl
   d771c:	4921      	ldr	r1, [pc, #132]	; (d77a4 <_ZN5Print10printFloatEdh+0x178>)
   d771e:	f7ff ff35 	bl	d758c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d7722:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d7724:	2200      	movs	r2, #0
   d7726:	4b1e      	ldr	r3, [pc, #120]	; (d77a0 <_ZN5Print10printFloatEdh+0x174>)
   d7728:	4630      	mov	r0, r6
   d772a:	4639      	mov	r1, r7
   d772c:	f003 f884 	bl	da838 <__aeabi_dmul>
   d7730:	4606      	mov	r6, r0
   d7732:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d7734:	f003 fb30 	bl	dad98 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7738:	f1b0 0900 	subs.w	r9, r0, #0
   d773c:	da07      	bge.n	d774e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d773e:	212d      	movs	r1, #45	; 0x2d
   d7740:	4650      	mov	r0, sl
   d7742:	f7ff ff37 	bl	d75b4 <_ZN5Print5printEc>
            val = -n;
   d7746:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d774a:	4680      	mov	r8, r0
   d774c:	e002      	b.n	d7754 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d774e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7750:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7754:	220a      	movs	r2, #10
   d7756:	4650      	mov	r0, sl
   d7758:	f7ff ff47 	bl	d75ea <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d775c:	4440      	add	r0, r8
   d775e:	4404      	add	r4, r0
    remainder -= toPrint;
   d7760:	4648      	mov	r0, r9
   d7762:	f003 f803 	bl	da76c <__aeabi_i2d>
   d7766:	4602      	mov	r2, r0
   d7768:	460b      	mov	r3, r1
   d776a:	4630      	mov	r0, r6
   d776c:	4639      	mov	r1, r7
   d776e:	f002 feaf 	bl	da4d0 <__aeabi_dsub>
   d7772:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7774:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7778:	4606      	mov	r6, r0
   d777a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d777c:	d1d2      	bne.n	d7724 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d777e:	4620      	mov	r0, r4
   d7780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7784:	000dcd90 	.word	0x000dcd90
   d7788:	7fefffff 	.word	0x7fefffff
   d778c:	000dcd98 	.word	0x000dcd98
   d7790:	41efffff 	.word	0x41efffff
   d7794:	000dcd94 	.word	0x000dcd94
   d7798:	c1efffff 	.word	0xc1efffff
   d779c:	3fe00000 	.word	0x3fe00000
   d77a0:	40240000 	.word	0x40240000
   d77a4:	000dc731 	.word	0x000dc731

000d77a8 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d77a8:	b538      	push	{r3, r4, r5, lr}
   d77aa:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d77ac:	ee10 0a10 	vmov	r0, s0
   d77b0:	b2cd      	uxtb	r5, r1
   d77b2:	f002 ffed 	bl	da790 <__aeabi_f2d>
   d77b6:	ec41 0b10 	vmov	d0, r0, r1
   d77ba:	4629      	mov	r1, r5
   d77bc:	4620      	mov	r0, r4
}
   d77be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d77c2:	f7ff bf33 	b.w	d762c <_ZN5Print10printFloatEdh>

000d77c6 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d77c6:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d77c8:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d77ca:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d77cc:	f7ff ff2e 	bl	d762c <_ZN5Print10printFloatEdh>
   d77d0:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d77d2:	4628      	mov	r0, r5
   d77d4:	f7ff fef1 	bl	d75ba <_ZN5Print7printlnEv>
  return n;
}
   d77d8:	4420      	add	r0, r4
   d77da:	bd38      	pop	{r3, r4, r5, pc}

000d77dc <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d77dc:	b538      	push	{r3, r4, r5, lr}
   d77de:	4604      	mov	r4, r0
    return println((double)num, digits);
   d77e0:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d77e4:	460d      	mov	r5, r1
    return println((double)num, digits);
   d77e6:	f002 ffd3 	bl	da790 <__aeabi_f2d>
   d77ea:	ec41 0b10 	vmov	d0, r0, r1
   d77ee:	4629      	mov	r1, r5
   d77f0:	4620      	mov	r0, r4
}
   d77f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d77f6:	f7ff bfe6 	b.w	d77c6 <_ZN5Print7printlnEdi>

000d77fa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d77fa:	b40c      	push	{r2, r3}
   d77fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7800:	b087      	sub	sp, #28
   d7802:	af00      	add	r7, sp, #0
   d7804:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7808:	4605      	mov	r5, r0
   d780a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d780e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7810:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7812:	4623      	mov	r3, r4
   d7814:	464a      	mov	r2, r9
   d7816:	2114      	movs	r1, #20
   d7818:	1d38      	adds	r0, r7, #4
   d781a:	f7ff fbb9 	bl	d6f90 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d781e:	2813      	cmp	r0, #19
   d7820:	d805      	bhi.n	d782e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7822:	1d39      	adds	r1, r7, #4
   d7824:	4628      	mov	r0, r5
   d7826:	f7ff feb1 	bl	d758c <_ZN5Print5writeEPKc>
   d782a:	4604      	mov	r4, r0
   d782c:	e013      	b.n	d7856 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d782e:	f100 0308 	add.w	r3, r0, #8
   d7832:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7836:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7838:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d783c:	1c41      	adds	r1, r0, #1
   d783e:	4623      	mov	r3, r4
   d7840:	464a      	mov	r2, r9
   d7842:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7844:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7846:	f7ff fba3 	bl	d6f90 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d784a:	4669      	mov	r1, sp
   d784c:	4628      	mov	r0, r5
   d784e:	f7ff fe9d 	bl	d758c <_ZN5Print5writeEPKc>
   d7852:	4604      	mov	r4, r0
   d7854:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7856:	b11e      	cbz	r6, d7860 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7858:	4628      	mov	r0, r5
   d785a:	f7ff feae 	bl	d75ba <_ZN5Print7printlnEv>
   d785e:	4404      	add	r4, r0
    return n;
}
   d7860:	4620      	mov	r0, r4
   d7862:	371c      	adds	r7, #28
   d7864:	46bd      	mov	sp, r7
   d7866:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d786a:	b002      	add	sp, #8
   d786c:	4770      	bx	lr
	...

000d7870 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7870:	4b01      	ldr	r3, [pc, #4]	; (d7878 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7872:	4a02      	ldr	r2, [pc, #8]	; (d787c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7874:	601a      	str	r2, [r3, #0]
   d7876:	4770      	bx	lr
   d7878:	2003e3c8 	.word	0x2003e3c8
   d787c:	000dce0f 	.word	0x000dce0f

000d7880 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7880:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7882:	2000      	movs	r0, #0
   d7884:	f7ff fb44 	bl	d6f10 <spark_sync_time_pending>
   d7888:	b128      	cbz	r0, d7896 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d788a:	f7ff fb29 	bl	d6ee0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d788e:	f080 0001 	eor.w	r0, r0, #1
   d7892:	b2c0      	uxtb	r0, r0
   d7894:	bd08      	pop	{r3, pc}
   d7896:	2001      	movs	r0, #1
    }
   d7898:	bd08      	pop	{r3, pc}
	...

000d789c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d789c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d78a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d78a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d78a8:	d40f      	bmi.n	d78ca <_ZN9TimeClass4zoneEf+0x2e>
   d78aa:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d78ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d78b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d78b6:	dc08      	bgt.n	d78ca <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d78b8:	eddf 7a04 	vldr	s15, [pc, #16]	; d78cc <_ZN9TimeClass4zoneEf+0x30>
   d78bc:	4b04      	ldr	r3, [pc, #16]	; (d78d0 <_ZN9TimeClass4zoneEf+0x34>)
   d78be:	ee20 0a27 	vmul.f32	s0, s0, s15
   d78c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d78c6:	ed83 0a00 	vstr	s0, [r3]
   d78ca:	4770      	bx	lr
   d78cc:	45610000 	.word	0x45610000
   d78d0:	2003e3d4 	.word	0x2003e3d4

000d78d4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d78d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d78d6:	4b0e      	ldr	r3, [pc, #56]	; (d7910 <_ZN9TimeClass7timeStrEl+0x3c>)
   d78d8:	681b      	ldr	r3, [r3, #0]
   d78da:	4419      	add	r1, r3
   d78dc:	4b0d      	ldr	r3, [pc, #52]	; (d7914 <_ZN9TimeClass7timeStrEl+0x40>)
   d78de:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d78e0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d78e2:	a802      	add	r0, sp, #8
   d78e4:	4419      	add	r1, r3
   d78e6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d78ea:	f003 fe0d 	bl	db508 <localtime>
        char* ascstr = asctime(calendar_time);
   d78ee:	f003 fdbd 	bl	db46c <asctime>
   d78f2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d78f4:	f003 ff97 	bl	db826 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d78f8:	4428      	add	r0, r5
   d78fa:	2300      	movs	r3, #0
   d78fc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7900:	4629      	mov	r1, r5
   d7902:	4620      	mov	r0, r4
   d7904:	f7ff fd7c 	bl	d7400 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7908:	4620      	mov	r0, r4
   d790a:	b003      	add	sp, #12
   d790c:	bd30      	pop	{r4, r5, pc}
   d790e:	bf00      	nop
   d7910:	2003e3d4 	.word	0x2003e3d4
   d7914:	2003e3d0 	.word	0x2003e3d0

000d7918 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7918:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d791a:	2000      	movs	r0, #0
   d791c:	f7ff f8ec 	bl	d6af8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7920:	4604      	mov	r4, r0
   d7922:	b968      	cbnz	r0, d7940 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7924:	f7ff fa40 	bl	d6da8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7928:	2801      	cmp	r0, #1
   d792a:	d10b      	bne.n	d7944 <_ZN9TimeClass7isValidEv+0x2c>
   d792c:	4620      	mov	r0, r4
   d792e:	f7ff fa63 	bl	d6df8 <system_thread_get_state>
   d7932:	b938      	cbnz	r0, d7944 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7934:	f7ff ffa4 	bl	d7880 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7938:	b930      	cbnz	r0, d7948 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d793a:	f7ff fac9 	bl	d6ed0 <spark_process>
   d793e:	e7f9      	b.n	d7934 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7940:	2001      	movs	r0, #1
   d7942:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7944:	2000      	movs	r0, #0
   d7946:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7948:	f7ff ff9a 	bl	d7880 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d794c:	2000      	movs	r0, #0
   d794e:	f7ff f8d3 	bl	d6af8 <HAL_RTC_Time_Is_Valid>
   d7952:	3000      	adds	r0, #0
   d7954:	bf18      	it	ne
   d7956:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7958:	bd10      	pop	{r4, pc}

000d795a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d795a:	b508      	push	{r3, lr}
    (void)isValid();
   d795c:	f7ff ffdc 	bl	d7918 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7964:	f7ff b8c0 	b.w	d6ae8 <HAL_RTC_Get_UnixTime>

000d7968 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7968:	4b02      	ldr	r3, [pc, #8]	; (d7974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d796a:	681a      	ldr	r2, [r3, #0]
   d796c:	4b02      	ldr	r3, [pc, #8]	; (d7978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d796e:	601a      	str	r2, [r3, #0]
   d7970:	4770      	bx	lr
   d7972:	bf00      	nop
   d7974:	2003e088 	.word	0x2003e088
   d7978:	2003e3cc 	.word	0x2003e3cc

000d797c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d797c:	2100      	movs	r1, #0
   d797e:	f7ff ba23 	b.w	d6dc8 <system_delay_ms>

000d7982 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7982:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7984:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7986:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7988:	b113      	cbz	r3, d7990 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d798a:	2203      	movs	r2, #3
   d798c:	4601      	mov	r1, r0
   d798e:	4798      	blx	r3
    }
   d7990:	4620      	mov	r0, r4
   d7992:	bd10      	pop	{r4, pc}

000d7994 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7994:	b510      	push	{r4, lr}
   d7996:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7998:	f7ff fff3 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
   d799c:	4620      	mov	r0, r4
   d799e:	bd10      	pop	{r4, pc}

000d79a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d79a0:	b513      	push	{r0, r1, r4, lr}
   d79a2:	460b      	mov	r3, r1
   d79a4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d79a6:	c803      	ldmia	r0, {r0, r1}
   d79a8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d79ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d79b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d79b4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d79b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d79bc:	b002      	add	sp, #8
   d79be:	bd10      	pop	{r4, pc}

000d79c0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79c0:	4803      	ldr	r0, [pc, #12]	; (d79d0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d79c2:	4a04      	ldr	r2, [pc, #16]	; (d79d4 <_GLOBAL__sub_I_RGB+0x14>)
   d79c4:	4904      	ldr	r1, [pc, #16]	; (d79d8 <_GLOBAL__sub_I_RGB+0x18>)
   d79c6:	2300      	movs	r3, #0
   d79c8:	6083      	str	r3, [r0, #8]
   d79ca:	f001 bad7 	b.w	d8f7c <__aeabi_atexit>
   d79ce:	bf00      	nop
   d79d0:	2003e3d8 	.word	0x2003e3d8
   d79d4:	2003e148 	.word	0x2003e148
   d79d8:	000d7995 	.word	0x000d7995

000d79dc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d79dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d79de:	4b0c      	ldr	r3, [pc, #48]	; (d7a10 <serialEventRun+0x34>)
   d79e0:	b133      	cbz	r3, d79f0 <serialEventRun+0x14>
   d79e2:	f000 fc31 	bl	d8248 <_Z16_fetch_usbserialv>
   d79e6:	6803      	ldr	r3, [r0, #0]
   d79e8:	691b      	ldr	r3, [r3, #16]
   d79ea:	4798      	blx	r3
   d79ec:	2800      	cmp	r0, #0
   d79ee:	dc09      	bgt.n	d7a04 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d79f0:	4b08      	ldr	r3, [pc, #32]	; (d7a14 <serialEventRun+0x38>)
   d79f2:	b163      	cbz	r3, d7a0e <serialEventRun+0x32>
   d79f4:	f000 fcaa 	bl	d834c <_Z22__fetch_global_Serial1v>
   d79f8:	6803      	ldr	r3, [r0, #0]
   d79fa:	691b      	ldr	r3, [r3, #16]
   d79fc:	4798      	blx	r3
   d79fe:	2800      	cmp	r0, #0
   d7a00:	dc03      	bgt.n	d7a0a <serialEventRun+0x2e>
   d7a02:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7a04:	f3af 8000 	nop.w
   d7a08:	e7f2      	b.n	d79f0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7a0a:	f3af 8000 	nop.w
   d7a0e:	bd08      	pop	{r3, pc}
	...

000d7a18 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7a18:	b508      	push	{r3, lr}
	serialEventRun();
   d7a1a:	f7ff ffdf 	bl	d79dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a1e:	f7ff f85b 	bl	d6ad8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a22:	4b01      	ldr	r3, [pc, #4]	; (d7a28 <_post_loop+0x10>)
   d7a24:	6018      	str	r0, [r3, #0]
   d7a26:	bd08      	pop	{r3, pc}
   d7a28:	2003e70c 	.word	0x2003e70c

000d7a2c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a2c:	4802      	ldr	r0, [pc, #8]	; (d7a38 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a2e:	4a03      	ldr	r2, [pc, #12]	; (d7a3c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a30:	4903      	ldr	r1, [pc, #12]	; (d7a40 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a32:	1a12      	subs	r2, r2, r0
   d7a34:	f003 be74 	b.w	db720 <memcpy>
   d7a38:	2003f400 	.word	0x2003f400
   d7a3c:	2003f404 	.word	0x2003f404
   d7a40:	000dd348 	.word	0x000dd348

000d7a44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a46:	2300      	movs	r3, #0
   d7a48:	9300      	str	r3, [sp, #0]
   d7a4a:	461a      	mov	r2, r3
   d7a4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a50:	f7ff f9e4 	bl	d6e1c <system_ctrl_set_result>
}
   d7a54:	b003      	add	sp, #12
   d7a56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a5c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7a5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a5e:	8843      	ldrh	r3, [r0, #2]
   d7a60:	2b0a      	cmp	r3, #10
   d7a62:	d008      	beq.n	d7a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a64:	2b50      	cmp	r3, #80	; 0x50
   d7a66:	d109      	bne.n	d7a7c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7a68:	4b09      	ldr	r3, [pc, #36]	; (d7a90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7a6a:	681b      	ldr	r3, [r3, #0]
   d7a6c:	b13b      	cbz	r3, d7a7e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7a6e:	b003      	add	sp, #12
   d7a70:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7a74:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7a76:	f7ff ffe5 	bl	d7a44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7a7a:	e006      	b.n	d7a8a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a7c:	2300      	movs	r3, #0
   d7a7e:	9300      	str	r3, [sp, #0]
   d7a80:	461a      	mov	r2, r3
   d7a82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a86:	f7ff f9c9 	bl	d6e1c <system_ctrl_set_result>
        break;
    }
}
   d7a8a:	b003      	add	sp, #12
   d7a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a90:	2003e3e8 	.word	0x2003e3e8

000d7a94 <module_user_init_hook>:

void module_user_init_hook()
{
   d7a94:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7a96:	4c10      	ldr	r4, [pc, #64]	; (d7ad8 <module_user_init_hook+0x44>)
   d7a98:	4d10      	ldr	r5, [pc, #64]	; (d7adc <module_user_init_hook+0x48>)
   d7a9a:	6823      	ldr	r3, [r4, #0]
   d7a9c:	42ab      	cmp	r3, r5
   d7a9e:	4b10      	ldr	r3, [pc, #64]	; (d7ae0 <module_user_init_hook+0x4c>)
   d7aa0:	bf0c      	ite	eq
   d7aa2:	2201      	moveq	r2, #1
   d7aa4:	2200      	movne	r2, #0
   d7aa6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7aa8:	d002      	beq.n	d7ab0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7aaa:	f7ff ffbf 	bl	d7a2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7aae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ab0:	f7ff f802 	bl	d6ab8 <HAL_RNG_GetRandomNumber>
   d7ab4:	4604      	mov	r4, r0
    srand(seed);
   d7ab6:	f003 fe61 	bl	db77c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7aba:	4b0a      	ldr	r3, [pc, #40]	; (d7ae4 <module_user_init_hook+0x50>)
   d7abc:	b113      	cbz	r3, d7ac4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7abe:	4620      	mov	r0, r4
   d7ac0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ac4:	2100      	movs	r1, #0
   d7ac6:	4807      	ldr	r0, [pc, #28]	; (d7ae4 <module_user_init_hook+0x50>)
   d7ac8:	f7ff fa2a 	bl	d6f20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7acc:	2100      	movs	r1, #0
   d7ace:	4806      	ldr	r0, [pc, #24]	; (d7ae8 <module_user_init_hook+0x54>)
}
   d7ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7ad4:	f7ff b998 	b.w	d6e08 <system_ctrl_set_app_request_handler>
   d7ad8:	2003f400 	.word	0x2003f400
   d7adc:	9a271c1e 	.word	0x9a271c1e
   d7ae0:	2003e3ec 	.word	0x2003e3ec
   d7ae4:	00000000 	.word	0x00000000
   d7ae8:	000d7a5d 	.word	0x000d7a5d

000d7aec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7aec:	4770      	bx	lr

000d7aee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7aee:	2000      	movs	r0, #0
   d7af0:	4770      	bx	lr

000d7af2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7af2:	b510      	push	{r4, lr}
   d7af4:	2110      	movs	r1, #16
   d7af6:	4604      	mov	r4, r0
   d7af8:	f001 fa4e 	bl	d8f98 <_ZdlPvj>
   d7afc:	4620      	mov	r0, r4
   d7afe:	bd10      	pop	{r4, pc}

000d7b00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7b00:	b508      	push	{r3, lr}
      { delete this; }
   d7b02:	b108      	cbz	r0, d7b08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7b04:	f7ff fff5 	bl	d7af2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7b08:	bd08      	pop	{r3, pc}

000d7b0a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7b0a:	2200      	movs	r2, #0
   d7b0c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7b0e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7b10:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7b14:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b16:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7b1a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b1c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b1e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b20:	680c      	ldr	r4, [r1, #0]
   d7b22:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b24:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7b26:	bd10      	pop	{r4, pc}

000d7b28 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7b28:	b510      	push	{r4, lr}
   d7b2a:	4604      	mov	r4, r0
    free((void*)msg_);
   d7b2c:	6800      	ldr	r0, [r0, #0]
   d7b2e:	f7ff fa07 	bl	d6f40 <free>
}
   d7b32:	4620      	mov	r0, r4
   d7b34:	bd10      	pop	{r4, pc}

000d7b36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7b36:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7b38:	68c4      	ldr	r4, [r0, #12]
   d7b3a:	b1f4      	cbz	r4, d7b7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7b3c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7b3e:	2b02      	cmp	r3, #2
   d7b40:	d103      	bne.n	d7b4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7b42:	f104 000c 	add.w	r0, r4, #12
   d7b46:	f7ff ffef 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7b4a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7b4c:	b135      	cbz	r5, d7b5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b4e:	4628      	mov	r0, r5
   d7b50:	f7ff ff17 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
   d7b54:	2110      	movs	r1, #16
   d7b56:	4628      	mov	r0, r5
   d7b58:	f001 fa1e 	bl	d8f98 <_ZdlPvj>
   d7b5c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7b5e:	b135      	cbz	r5, d7b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7b60:	4628      	mov	r0, r5
   d7b62:	f7ff ff0e 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
   d7b66:	2110      	movs	r1, #16
   d7b68:	4628      	mov	r0, r5
   d7b6a:	f001 fa15 	bl	d8f98 <_ZdlPvj>
   d7b6e:	4620      	mov	r0, r4
   d7b70:	2114      	movs	r1, #20
   d7b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7b76:	f001 ba0f 	b.w	d8f98 <_ZdlPvj>
   d7b7a:	bd38      	pop	{r3, r4, r5, pc}

000d7b7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7b7c:	b513      	push	{r0, r1, r4, lr}
   d7b7e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7b80:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7b84:	2300      	movs	r3, #0
   d7b86:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7b88:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7b8a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7b8c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b8e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7b90:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7b92:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b94:	f7ff fcc3 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b98:	4620      	mov	r0, r4
   d7b9a:	b002      	add	sp, #8
   d7b9c:	bd10      	pop	{r4, pc}

000d7b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7ba0:	460c      	mov	r4, r1
   d7ba2:	ad02      	add	r5, sp, #8
   d7ba4:	f854 3b04 	ldr.w	r3, [r4], #4
   d7ba8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7bac:	4606      	mov	r6, r0
   d7bae:	460f      	mov	r7, r1
   d7bb0:	a801      	add	r0, sp, #4
   d7bb2:	4621      	mov	r1, r4
   d7bb4:	f7ff fcac 	bl	d7510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7bb8:	4629      	mov	r1, r5
   d7bba:	4630      	mov	r0, r6
   d7bbc:	f7ff ffde 	bl	d7b7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7bc0:	a801      	add	r0, sp, #4
   d7bc2:	f7ff fcac 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7bc6:	4620      	mov	r0, r4
   d7bc8:	f7ff fca9 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7bcc:	4638      	mov	r0, r7
   d7bce:	2108      	movs	r1, #8
   d7bd0:	f001 f9e2 	bl	d8f98 <_ZdlPvj>
        return p;
    }
   d7bd4:	4630      	mov	r0, r6
   d7bd6:	b003      	add	sp, #12
   d7bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7bdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7bdc:	b538      	push	{r3, r4, r5, lr}
   d7bde:	2300      	movs	r3, #0
   d7be0:	4604      	mov	r4, r0
   d7be2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7be4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7be6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7be8:	f7fc fa57 	bl	d409a <_Znwj>
   d7bec:	b128      	cbz	r0, d7bfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7bee:	2301      	movs	r3, #1
   d7bf0:	6043      	str	r3, [r0, #4]
   d7bf2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7bf4:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7bf6:	6003      	str	r3, [r0, #0]
   d7bf8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7bfa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	bd38      	pop	{r3, r4, r5, pc}
   d7c00:	000dcea0 	.word	0x000dcea0

000d7c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c04:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7c06:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c08:	b90a      	cbnz	r2, d7c0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7c0a:	f001 f9d8 	bl	d8fbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c0e:	68c3      	ldr	r3, [r0, #12]
    }
   d7c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c14:	4718      	bx	r3

000d7c16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c16:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7c18:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7c1a:	f100 0110 	add.w	r1, r0, #16
   d7c1e:	f7ff fff1 	bl	d7c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7c22:	bd08      	pop	{r3, pc}

000d7c24 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c24:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7c26:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c28:	b90a      	cbnz	r2, d7c2e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7c2a:	f001 f9c8 	bl	d8fbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c2e:	68c3      	ldr	r3, [r0, #12]
    }
   d7c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c34:	4718      	bx	r3

000d7c36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c36:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7c38:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7c3a:	f100 0110 	add.w	r1, r0, #16
   d7c3e:	f7ff fff1 	bl	d7c24 <_ZNKSt8functionIFvRKbEEclES1_>
   d7c42:	bd08      	pop	{r3, pc}

000d7c44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7c44:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c46:	2300      	movs	r3, #0
   d7c48:	6083      	str	r3, [r0, #8]
   d7c4a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7c4c:	4604      	mov	r4, r0
   d7c4e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7c50:	b12b      	cbz	r3, d7c5e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7c52:	2202      	movs	r2, #2
   d7c54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7c56:	68eb      	ldr	r3, [r5, #12]
   d7c58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7c5a:	68ab      	ldr	r3, [r5, #8]
   d7c5c:	60a3      	str	r3, [r4, #8]
	}
    }
   d7c5e:	4620      	mov	r0, r4
   d7c60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c66:	b089      	sub	sp, #36	; 0x24
   d7c68:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7c6a:	4668      	mov	r0, sp
   d7c6c:	f7ff ff4d 	bl	d7b0a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7c70:	2300      	movs	r3, #0
   d7c72:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7c76:	f04f 0202 	mov.w	r2, #2
   d7c7a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7c7e:	2b00      	cmp	r3, #0
   d7c80:	d103      	bne.n	d7c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7c82:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7c86:	2900      	cmp	r1, #0
   d7c88:	d1f7      	bne.n	d7c7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7c8a:	d002      	beq.n	d7c92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7c8c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7c90:	e063      	b.n	d7d5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7c92:	f114 050c 	adds.w	r5, r4, #12
   d7c96:	d003      	beq.n	d7ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7c98:	4669      	mov	r1, sp
   d7c9a:	4628      	mov	r0, r5
   d7c9c:	f7ff ff35 	bl	d7b0a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7ca0:	f3bf 8f5f 	dmb	sy
   d7ca4:	2301      	movs	r3, #1
   d7ca6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7ca8:	2000      	movs	r0, #0
   d7caa:	f104 0308 	add.w	r3, r4, #8
   d7cae:	f3bf 8f5f 	dmb	sy
   d7cb2:	e853 6f00 	ldrex	r6, [r3]
   d7cb6:	e843 0200 	strex	r2, r0, [r3]
   d7cba:	2a00      	cmp	r2, #0
   d7cbc:	d1f9      	bne.n	d7cb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7cbe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7cc2:	2e00      	cmp	r6, #0
   d7cc4:	d049      	beq.n	d7d5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7cc6:	f7ff f887 	bl	d6dd8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7cca:	b120      	cbz	r0, d7cd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7ccc:	4629      	mov	r1, r5
   d7cce:	4630      	mov	r0, r6
   d7cd0:	f7ff ff98 	bl	d7c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7cd4:	e03a      	b.n	d7d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7cd6:	4631      	mov	r1, r6
   d7cd8:	a802      	add	r0, sp, #8
   d7cda:	f7ff ffb3 	bl	d7c44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7cde:	68e0      	ldr	r0, [r4, #12]
   d7ce0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7ce4:	b108      	cbz	r0, d7cea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7ce6:	f003 fd83 	bl	db7f0 <strdup>
   d7cea:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7cec:	2010      	movs	r0, #16
   d7cee:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7cf2:	f7fc f9d2 	bl	d409a <_Znwj>
   d7cf6:	4605      	mov	r5, r0
   d7cf8:	b1e8      	cbz	r0, d7d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7cfa:	2700      	movs	r7, #0
   d7cfc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7cfe:	2018      	movs	r0, #24
   d7d00:	f7fc f9cb 	bl	d409a <_Znwj>
   d7d04:	4604      	mov	r4, r0
   d7d06:	b188      	cbz	r0, d7d2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7d08:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d0a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7d0c:	a802      	add	r0, sp, #8
   d7d0e:	f7ff fe47 	bl	d79a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d12:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7d14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d18:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7d1a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d1c:	a906      	add	r1, sp, #24
   d7d1e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d20:	60e3      	str	r3, [r4, #12]
   d7d22:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7d26:	9205      	str	r2, [sp, #20]
   d7d28:	f7ff feef 	bl	d7b0a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7d2c:	4b0d      	ldr	r3, [pc, #52]	; (d7d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7d2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7d30:	4b0d      	ldr	r3, [pc, #52]	; (d7d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d32:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7d34:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7d36:	a806      	add	r0, sp, #24
   d7d38:	f7ff fef6 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7d3c:	a802      	add	r0, sp, #8
   d7d3e:	f7ff fe20 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7d42:	2200      	movs	r2, #0
   d7d44:	4629      	mov	r1, r5
   d7d46:	4809      	ldr	r0, [pc, #36]	; (d7d6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7d48:	f7ff f84e 	bl	d6de8 <application_thread_invoke>
   d7d4c:	4630      	mov	r0, r6
   d7d4e:	f7ff fe18 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7d52:	2110      	movs	r1, #16
   d7d54:	4630      	mov	r0, r6
   d7d56:	f001 f91f 	bl	d8f98 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7d5a:	4668      	mov	r0, sp
   d7d5c:	f7ff fee4 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
    }
   d7d60:	b009      	add	sp, #36	; 0x24
   d7d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d64:	000d7c17 	.word	0x000d7c17
   d7d68:	000d7e8d 	.word	0x000d7e8d
   d7d6c:	000d8399 	.word	0x000d8399

000d7d70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d74:	b08b      	sub	sp, #44	; 0x2c
   d7d76:	4606      	mov	r6, r0
   d7d78:	460f      	mov	r7, r1
   d7d7a:	4690      	mov	r8, r2
   d7d7c:	4699      	mov	r9, r3
   d7d7e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d82:	f7ff f8ad 	bl	d6ee0 <spark_cloud_flag_connected>
   d7d86:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7d88:	4683      	mov	fp, r0
   d7d8a:	bb30      	cbnz	r0, d7dda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7d8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7d90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7d92:	a905      	add	r1, sp, #20
   d7d94:	4628      	mov	r0, r5
   d7d96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7d9a:	f7ff feb6 	bl	d7b0a <_ZN8particle5ErrorC1EOS0_>
   d7d9e:	2014      	movs	r0, #20
   d7da0:	f7fc f97b 	bl	d409a <_Znwj>
   d7da4:	4604      	mov	r4, r0
   d7da6:	b158      	cbz	r0, d7dc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7da8:	2302      	movs	r3, #2
   d7daa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7dac:	2301      	movs	r3, #1
   d7dae:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7db0:	f8c0 b004 	str.w	fp, [r0, #4]
   d7db4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7db8:	4629      	mov	r1, r5
   d7dba:	300c      	adds	r0, #12
   d7dbc:	f7ff fea5 	bl	d7b0a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7dc0:	4630      	mov	r0, r6
   d7dc2:	4621      	mov	r1, r4
   d7dc4:	f840 4b04 	str.w	r4, [r0], #4
   d7dc8:	f7ff ff08 	bl	d7bdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7dcc:	4628      	mov	r0, r5
   d7dce:	f7ff feab 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7dd2:	a805      	add	r0, sp, #20
   d7dd4:	f7ff fea8 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
   d7dd8:	e052      	b.n	d7e80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7dda:	2400      	movs	r4, #0
   d7ddc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7dde:	2014      	movs	r0, #20
   d7de0:	606c      	str	r4, [r5, #4]
   d7de2:	60ac      	str	r4, [r5, #8]
   d7de4:	9307      	str	r3, [sp, #28]
   d7de6:	f7fc f958 	bl	d409a <_Znwj>
   d7dea:	4601      	mov	r1, r0
   d7dec:	b118      	cbz	r0, d7df6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7dee:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7df0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7df2:	6044      	str	r4, [r0, #4]
   d7df4:	6084      	str	r4, [r0, #8]
   d7df6:	a804      	add	r0, sp, #16
   d7df8:	9103      	str	r1, [sp, #12]
   d7dfa:	f7ff feef 	bl	d7bdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7dfe:	4b22      	ldr	r3, [pc, #136]	; (d7e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7e00:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7e02:	2008      	movs	r0, #8
   d7e04:	f7fc f949 	bl	d409a <_Znwj>
   d7e08:	4604      	mov	r4, r0
   d7e0a:	b128      	cbz	r0, d7e18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e0c:	9b03      	ldr	r3, [sp, #12]
   d7e0e:	f840 3b04 	str.w	r3, [r0], #4
   d7e12:	a904      	add	r1, sp, #16
   d7e14:	f7ff fb7c 	bl	d7510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e18:	9500      	str	r5, [sp, #0]
   d7e1a:	fa5f f38a 	uxtb.w	r3, sl
   d7e1e:	464a      	mov	r2, r9
   d7e20:	4641      	mov	r1, r8
   d7e22:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7e24:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e26:	f7ff f863 	bl	d6ef0 <spark_send_event>
   d7e2a:	b920      	cbnz	r0, d7e36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7e2c:	9b03      	ldr	r3, [sp, #12]
   d7e2e:	785b      	ldrb	r3, [r3, #1]
   d7e30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7e34:	b183      	cbz	r3, d7e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7e36:	9b03      	ldr	r3, [sp, #12]
   d7e38:	9305      	str	r3, [sp, #20]
   d7e3a:	a904      	add	r1, sp, #16
   d7e3c:	a806      	add	r0, sp, #24
   d7e3e:	f7ff fb67 	bl	d7510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7e42:	a905      	add	r1, sp, #20
   d7e44:	4630      	mov	r0, r6
   d7e46:	f7ff fe99 	bl	d7b7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7e4a:	a806      	add	r0, sp, #24
   d7e4c:	f7ff fb67 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e50:	a804      	add	r0, sp, #16
   d7e52:	f7ff fb64 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e56:	e013      	b.n	d7e80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7e58:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7e5c:	a905      	add	r1, sp, #20
   d7e5e:	a803      	add	r0, sp, #12
   d7e60:	9205      	str	r2, [sp, #20]
   d7e62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7e66:	f7ff fefd 	bl	d7c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7e6a:	a805      	add	r0, sp, #20
   d7e6c:	f7ff fe5c 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7e70:	a805      	add	r0, sp, #20
   d7e72:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7e74:	f7ff fe93 	bl	d7b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7e78:	a806      	add	r0, sp, #24
   d7e7a:	f7ff fb50 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e7e:	e7da      	b.n	d7e36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7e80:	4630      	mov	r0, r6
   d7e82:	b00b      	add	sp, #44	; 0x2c
   d7e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e88:	000d7ffd 	.word	0x000d7ffd

000d7e8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7e8c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e90:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7e92:	d006      	beq.n	d7ea2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7e94:	2a03      	cmp	r2, #3
   d7e96:	d017      	beq.n	d7ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7e98:	2a01      	cmp	r2, #1
   d7e9a:	d122      	bne.n	d7ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7e9c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7e9e:	6003      	str	r3, [r0, #0]
	      break;
   d7ea0:	e01f      	b.n	d7ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7ea2:	2018      	movs	r0, #24
   d7ea4:	680e      	ldr	r6, [r1, #0]
   d7ea6:	f7fc f8f8 	bl	d409a <_Znwj>
   d7eaa:	4605      	mov	r5, r0
   d7eac:	b150      	cbz	r0, d7ec4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7eae:	4631      	mov	r1, r6
   d7eb0:	f7ff fec8 	bl	d7c44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7eb4:	6930      	ldr	r0, [r6, #16]
   d7eb6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7eba:	b108      	cbz	r0, d7ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7ebc:	f003 fc98 	bl	db7f0 <strdup>
   d7ec0:	6128      	str	r0, [r5, #16]
   d7ec2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7ec4:	6025      	str	r5, [r4, #0]
   d7ec6:	e00c      	b.n	d7ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7ec8:	6804      	ldr	r4, [r0, #0]
   d7eca:	b154      	cbz	r4, d7ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7ecc:	f104 0010 	add.w	r0, r4, #16
   d7ed0:	f7ff fe2a 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	f7ff fd54 	bl	d7982 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7eda:	2118      	movs	r1, #24
   d7edc:	4620      	mov	r0, r4
   d7ede:	f001 f85b 	bl	d8f98 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7ee2:	2000      	movs	r0, #0
   d7ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ee6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7ee6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ee8:	2300      	movs	r3, #0
   d7eea:	6083      	str	r3, [r0, #8]
   d7eec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7eee:	4604      	mov	r4, r0
   d7ef0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7ef2:	b12b      	cbz	r3, d7f00 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7ef4:	2202      	movs	r2, #2
   d7ef6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7ef8:	68eb      	ldr	r3, [r5, #12]
   d7efa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7efc:	68ab      	ldr	r3, [r5, #8]
   d7efe:	60a3      	str	r3, [r4, #8]
	}
    }
   d7f00:	4620      	mov	r0, r4
   d7f02:	bd38      	pop	{r3, r4, r5, pc}

000d7f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7f04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7f06:	b570      	push	{r4, r5, r6, lr}
   d7f08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7f0a:	d006      	beq.n	d7f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7f0c:	2a03      	cmp	r2, #3
   d7f0e:	d011      	beq.n	d7f34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7f10:	2a01      	cmp	r2, #1
   d7f12:	d118      	bne.n	d7f46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f16:	6003      	str	r3, [r0, #0]
	      break;
   d7f18:	e015      	b.n	d7f46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7f1a:	2014      	movs	r0, #20
   d7f1c:	680e      	ldr	r6, [r1, #0]
   d7f1e:	f7fc f8bc 	bl	d409a <_Znwj>
   d7f22:	4605      	mov	r5, r0
   d7f24:	b120      	cbz	r0, d7f30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7f26:	4631      	mov	r1, r6
   d7f28:	f7ff ffdd 	bl	d7ee6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7f2c:	7c33      	ldrb	r3, [r6, #16]
   d7f2e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7f30:	6025      	str	r5, [r4, #0]
   d7f32:	e008      	b.n	d7f46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7f34:	6804      	ldr	r4, [r0, #0]
   d7f36:	b134      	cbz	r4, d7f46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7f38:	4620      	mov	r0, r4
   d7f3a:	f7ff fd22 	bl	d7982 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7f3e:	2114      	movs	r1, #20
   d7f40:	4620      	mov	r0, r4
   d7f42:	f001 f829 	bl	d8f98 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7f46:	2000      	movs	r0, #0
   d7f48:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7f4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7f4c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7f4e:	2300      	movs	r3, #0
   d7f50:	b087      	sub	sp, #28
   d7f52:	460c      	mov	r4, r1
   d7f54:	f3bf 8f5f 	dmb	sy
   d7f58:	e850 6f00 	ldrex	r6, [r0]
   d7f5c:	e840 3200 	strex	r2, r3, [r0]
   d7f60:	2a00      	cmp	r2, #0
   d7f62:	d1f9      	bne.n	d7f58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7f64:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7f68:	2e00      	cmp	r6, #0
   d7f6a:	d03f      	beq.n	d7fec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7f6c:	4618      	mov	r0, r3
   d7f6e:	f7fe ff33 	bl	d6dd8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7f72:	4607      	mov	r7, r0
   d7f74:	b120      	cbz	r0, d7f80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7f76:	4621      	mov	r1, r4
   d7f78:	4630      	mov	r0, r6
   d7f7a:	f7ff fe53 	bl	d7c24 <_ZNKSt8functionIFvRKbEEclES1_>
   d7f7e:	e02e      	b.n	d7fde <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7f80:	4631      	mov	r1, r6
   d7f82:	a801      	add	r0, sp, #4
   d7f84:	f7ff ffaf 	bl	d7ee6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7f88:	7823      	ldrb	r3, [r4, #0]
   d7f8a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7f8e:	2010      	movs	r0, #16
   d7f90:	f7fc f883 	bl	d409a <_Znwj>
   d7f94:	4605      	mov	r5, r0
   d7f96:	b1d0      	cbz	r0, d7fce <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7f98:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f9a:	2014      	movs	r0, #20
   d7f9c:	f7fc f87d 	bl	d409a <_Znwj>
   d7fa0:	4604      	mov	r4, r0
   d7fa2:	b178      	cbz	r0, d7fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7fa4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7fa6:	4601      	mov	r1, r0
   d7fa8:	a801      	add	r0, sp, #4
   d7faa:	f7ff fcf9 	bl	d79a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fae:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7fb0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fb2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fb4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7fb6:	9203      	str	r2, [sp, #12]
   d7fb8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fba:	60e3      	str	r3, [r4, #12]
   d7fbc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7fc0:	9204      	str	r2, [sp, #16]
   d7fc2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7fc4:	4b0a      	ldr	r3, [pc, #40]	; (d7ff0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7fc6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7fc8:	4b0a      	ldr	r3, [pc, #40]	; (d7ff4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7fca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7fcc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7fce:	a801      	add	r0, sp, #4
   d7fd0:	f7ff fcd7 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7fd4:	2200      	movs	r2, #0
   d7fd6:	4629      	mov	r1, r5
   d7fd8:	4807      	ldr	r0, [pc, #28]	; (d7ff8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7fda:	f7fe ff05 	bl	d6de8 <application_thread_invoke>
   d7fde:	4630      	mov	r0, r6
   d7fe0:	f7ff fccf 	bl	d7982 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7fe4:	2110      	movs	r1, #16
   d7fe6:	4630      	mov	r0, r6
   d7fe8:	f000 ffd6 	bl	d8f98 <_ZdlPvj>
        }
    }
   d7fec:	b007      	add	sp, #28
   d7fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ff0:	000d7c37 	.word	0x000d7c37
   d7ff4:	000d7f05 	.word	0x000d7f05
   d7ff8:	000d8399 	.word	0x000d8399

000d7ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7ffc:	b530      	push	{r4, r5, lr}
   d7ffe:	b085      	sub	sp, #20
   d8000:	4604      	mov	r4, r0
   d8002:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8004:	4668      	mov	r0, sp
   d8006:	4611      	mov	r1, r2
   d8008:	f7ff fdc9 	bl	d7b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d800c:	b17c      	cbz	r4, d802e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d800e:	b224      	sxth	r4, r4
   d8010:	4628      	mov	r0, r5
   d8012:	b10d      	cbz	r5, d8018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8014:	f003 fbec 	bl	db7f0 <strdup>
   d8018:	9002      	str	r0, [sp, #8]
   d801a:	a902      	add	r1, sp, #8
   d801c:	4668      	mov	r0, sp
   d801e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8022:	f7ff fe1f 	bl	d7c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8026:	a802      	add	r0, sp, #8
   d8028:	f7ff fd7e 	bl	d7b28 <_ZN8particle5ErrorD1Ev>
   d802c:	e01d      	b.n	d806a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d802e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8030:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8034:	f04f 0201 	mov.w	r2, #1
   d8038:	e8d0 3f4f 	ldrexb	r3, [r0]
   d803c:	42a3      	cmp	r3, r4
   d803e:	d103      	bne.n	d8048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8040:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8044:	2900      	cmp	r1, #0
   d8046:	d1f7      	bne.n	d8038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8048:	d002      	beq.n	d8050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d804a:	f88d 3008 	strb.w	r3, [sp, #8]
   d804e:	e00c      	b.n	d806a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8050:	f110 010c 	adds.w	r1, r0, #12
   d8054:	f04f 0301 	mov.w	r3, #1
   d8058:	bf18      	it	ne
   d805a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d805c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8060:	3004      	adds	r0, #4
   d8062:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8066:	f7ff ff71 	bl	d7f4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d806a:	a801      	add	r0, sp, #4
   d806c:	f7ff fa57 	bl	d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8070:	b005      	add	sp, #20
   d8072:	bd30      	pop	{r4, r5, pc}

000d8074 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8074:	4770      	bx	lr

000d8076 <_ZN9IPAddressD0Ev>:
   d8076:	b510      	push	{r4, lr}
   d8078:	2118      	movs	r1, #24
   d807a:	4604      	mov	r4, r0
   d807c:	f000 ff8c 	bl	d8f98 <_ZdlPvj>
   d8080:	4620      	mov	r0, r4
   d8082:	bd10      	pop	{r4, pc}

000d8084 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8084:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8086:	7d03      	ldrb	r3, [r0, #20]
   d8088:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d808a:	b08d      	sub	sp, #52	; 0x34
   d808c:	460e      	mov	r6, r1
   d808e:	f100 0704 	add.w	r7, r0, #4
   d8092:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8096:	d002      	beq.n	d809e <_ZNK9IPAddress7printToER5Print+0x1a>
   d8098:	f100 0508 	add.w	r5, r0, #8
   d809c:	e018      	b.n	d80d0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d809e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d80a0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d80a2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d80a6:	232f      	movs	r3, #47	; 0x2f
   d80a8:	462a      	mov	r2, r5
   d80aa:	200a      	movs	r0, #10
   d80ac:	f7fe fd54 	bl	d6b58 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d80b0:	4628      	mov	r0, r5
   d80b2:	f003 fbb8 	bl	db826 <strlen>
   d80b6:	6833      	ldr	r3, [r6, #0]
   d80b8:	4602      	mov	r2, r0
   d80ba:	68db      	ldr	r3, [r3, #12]
   d80bc:	4629      	mov	r1, r5
   d80be:	4630      	mov	r0, r6
   d80c0:	4798      	blx	r3
   d80c2:	e00f      	b.n	d80e4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d80c4:	b124      	cbz	r4, d80d0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d80c6:	212e      	movs	r1, #46	; 0x2e
   d80c8:	4630      	mov	r0, r6
   d80ca:	f7ff fa73 	bl	d75b4 <_ZN5Print5printEc>
   d80ce:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d80d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d80d4:	220a      	movs	r2, #10
   d80d6:	4630      	mov	r0, r6
   d80d8:	f7ff fa87 	bl	d75ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80dc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80de:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80e0:	d1f0      	bne.n	d80c4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80e2:	4620      	mov	r0, r4
    }
    return n;
}
   d80e4:	b00d      	add	sp, #52	; 0x34
   d80e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d80e8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d80e8:	b510      	push	{r4, lr}
   d80ea:	4b05      	ldr	r3, [pc, #20]	; (d8100 <_ZN9IPAddressC1Ev+0x18>)
   d80ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d80ee:	2211      	movs	r2, #17
   d80f0:	f840 3b04 	str.w	r3, [r0], #4
   d80f4:	2100      	movs	r1, #0
   d80f6:	f003 fb39 	bl	db76c <memset>
{
    clear();
}
   d80fa:	4620      	mov	r0, r4
   d80fc:	bd10      	pop	{r4, pc}
   d80fe:	bf00      	nop
   d8100:	000dcebc 	.word	0x000dcebc

000d8104 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8104:	4603      	mov	r3, r0
   d8106:	4a07      	ldr	r2, [pc, #28]	; (d8124 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8108:	b510      	push	{r4, lr}
   d810a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d810e:	f101 0210 	add.w	r2, r1, #16
   d8112:	f851 4b04 	ldr.w	r4, [r1], #4
   d8116:	f843 4b04 	str.w	r4, [r3], #4
   d811a:	4291      	cmp	r1, r2
   d811c:	d1f9      	bne.n	d8112 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d811e:	780a      	ldrb	r2, [r1, #0]
   d8120:	701a      	strb	r2, [r3, #0]
}
   d8122:	bd10      	pop	{r4, pc}
   d8124:	000dcebc 	.word	0x000dcebc

000d8128 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d8128:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d812a:	2b04      	cmp	r3, #4
   d812c:	d101      	bne.n	d8132 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d812e:	6840      	ldr	r0, [r0, #4]
   d8130:	e008      	b.n	d8144 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d8132:	2b06      	cmp	r3, #6
   d8134:	d10a      	bne.n	d814c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8136:	6843      	ldr	r3, [r0, #4]
   d8138:	b953      	cbnz	r3, d8150 <_ZNK9IPAddresscvbEv+0x28>
   d813a:	6883      	ldr	r3, [r0, #8]
   d813c:	b943      	cbnz	r3, d8150 <_ZNK9IPAddresscvbEv+0x28>
   d813e:	68c3      	ldr	r3, [r0, #12]
   d8140:	b933      	cbnz	r3, d8150 <_ZNK9IPAddresscvbEv+0x28>
   d8142:	6900      	ldr	r0, [r0, #16]
   d8144:	3000      	adds	r0, #0
   d8146:	bf18      	it	ne
   d8148:	2001      	movne	r0, #1
   d814a:	4770      	bx	lr
    } else {
        return false;
   d814c:	2000      	movs	r0, #0
   d814e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8150:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d8152:	4770      	bx	lr

000d8154 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8154:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8156:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d815a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d815e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8162:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8166:	2304      	movs	r3, #4
   d8168:	6041      	str	r1, [r0, #4]
   d816a:	7503      	strb	r3, [r0, #20]
   d816c:	bd10      	pop	{r4, pc}

000d816e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d816e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8170:	780d      	ldrb	r5, [r1, #0]
   d8172:	788b      	ldrb	r3, [r1, #2]
   d8174:	784a      	ldrb	r2, [r1, #1]
   d8176:	78c9      	ldrb	r1, [r1, #3]
   d8178:	9100      	str	r1, [sp, #0]
   d817a:	4629      	mov	r1, r5
   d817c:	f7ff ffea 	bl	d8154 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8180:	b003      	add	sp, #12
   d8182:	bd30      	pop	{r4, r5, pc}

000d8184 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8184:	7441      	strb	r1, [r0, #17]
   d8186:	4770      	bx	lr

000d8188 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8188:	4770      	bx	lr

000d818a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d818a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d818c:	2100      	movs	r1, #0
   d818e:	7c00      	ldrb	r0, [r0, #16]
   d8190:	f7fe fde2 	bl	d6d58 <HAL_USB_USART_Receive_Data>
}
   d8194:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8198:	bf28      	it	cs
   d819a:	f04f 30ff 	movcs.w	r0, #4294967295
   d819e:	bd08      	pop	{r3, pc}

000d81a0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d81a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d81a2:	2101      	movs	r1, #1
   d81a4:	7c00      	ldrb	r0, [r0, #16]
   d81a6:	f7fe fdd7 	bl	d6d58 <HAL_USB_USART_Receive_Data>
}
   d81aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81ae:	bf28      	it	cs
   d81b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d81b4:	bd08      	pop	{r3, pc}

000d81b6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d81b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d81b8:	7c00      	ldrb	r0, [r0, #16]
   d81ba:	f7fe fdc5 	bl	d6d48 <HAL_USB_USART_Available_Data_For_Write>
}
   d81be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81c2:	bd08      	pop	{r3, pc}

000d81c4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d81c4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d81c6:	7c00      	ldrb	r0, [r0, #16]
   d81c8:	f7fe fdb6 	bl	d6d38 <HAL_USB_USART_Available_Data>
}
   d81cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81d0:	bd08      	pop	{r3, pc}

000d81d2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d81d2:	7c00      	ldrb	r0, [r0, #16]
   d81d4:	f7fe bdd0 	b.w	d6d78 <HAL_USB_USART_Flush_Data>

000d81d8 <_ZN9USBSerialD0Ev>:
   d81d8:	b510      	push	{r4, lr}
   d81da:	2114      	movs	r1, #20
   d81dc:	4604      	mov	r4, r0
   d81de:	f000 fedb 	bl	d8f98 <_ZdlPvj>
   d81e2:	4620      	mov	r0, r4
   d81e4:	bd10      	pop	{r4, pc}

000d81e6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d81e6:	b538      	push	{r3, r4, r5, lr}
   d81e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d81ea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d81ec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d81ee:	f7fe fdab 	bl	d6d48 <HAL_USB_USART_Available_Data_For_Write>
   d81f2:	2800      	cmp	r0, #0
   d81f4:	dc01      	bgt.n	d81fa <_ZN9USBSerial5writeEh+0x14>
   d81f6:	7c60      	ldrb	r0, [r4, #17]
   d81f8:	b128      	cbz	r0, d8206 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d81fa:	4629      	mov	r1, r5
   d81fc:	7c20      	ldrb	r0, [r4, #16]
   d81fe:	f7fe fdb3 	bl	d6d68 <HAL_USB_USART_Send_Data>
   d8202:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8206:	bd38      	pop	{r3, r4, r5, pc}

000d8208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8208:	b510      	push	{r4, lr}
   d820a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d820c:	2300      	movs	r3, #0
   d820e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8214:	60a3      	str	r3, [r4, #8]
   d8216:	4b05      	ldr	r3, [pc, #20]	; (d822c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8218:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d821a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d821c:	4608      	mov	r0, r1
{
  _serial = serial;
   d821e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8220:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8222:	4611      	mov	r1, r2
   d8224:	f7fe fd78 	bl	d6d18 <HAL_USB_USART_Init>
}
   d8228:	4620      	mov	r0, r4
   d822a:	bd10      	pop	{r4, pc}
   d822c:	000dced0 	.word	0x000dced0

000d8230 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8230:	2200      	movs	r2, #0
   d8232:	7c00      	ldrb	r0, [r0, #16]
   d8234:	f7fe bd78 	b.w	d6d28 <HAL_USB_USART_Begin>

000d8238 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8238:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d823a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d823c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d823e:	2100      	movs	r1, #0
   d8240:	f003 fa94 	bl	db76c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8244:	4620      	mov	r0, r4
   d8246:	bd10      	pop	{r4, pc}

000d8248 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8248:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d824a:	4d0e      	ldr	r5, [pc, #56]	; (d8284 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d824c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d824e:	a801      	add	r0, sp, #4
   d8250:	f7ff fff2 	bl	d8238 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8254:	6829      	ldr	r1, [r5, #0]
   d8256:	f011 0401 	ands.w	r4, r1, #1
   d825a:	d110      	bne.n	d827e <_Z16_fetch_usbserialv+0x36>
   d825c:	4628      	mov	r0, r5
   d825e:	f7fb ff2d 	bl	d40bc <__cxa_guard_acquire>
   d8262:	b160      	cbz	r0, d827e <_Z16_fetch_usbserialv+0x36>
   d8264:	aa01      	add	r2, sp, #4
   d8266:	4621      	mov	r1, r4
   d8268:	4807      	ldr	r0, [pc, #28]	; (d8288 <_Z16_fetch_usbserialv+0x40>)
   d826a:	f7ff ffcd 	bl	d8208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d826e:	4628      	mov	r0, r5
   d8270:	f7fb ff29 	bl	d40c6 <__cxa_guard_release>
   d8274:	4a05      	ldr	r2, [pc, #20]	; (d828c <_Z16_fetch_usbserialv+0x44>)
   d8276:	4906      	ldr	r1, [pc, #24]	; (d8290 <_Z16_fetch_usbserialv+0x48>)
   d8278:	4803      	ldr	r0, [pc, #12]	; (d8288 <_Z16_fetch_usbserialv+0x40>)
   d827a:	f000 fe7f 	bl	d8f7c <__aeabi_atexit>
	return _usbserial;
}
   d827e:	4802      	ldr	r0, [pc, #8]	; (d8288 <_Z16_fetch_usbserialv+0x40>)
   d8280:	b007      	add	sp, #28
   d8282:	bd30      	pop	{r4, r5, pc}
   d8284:	2003e3f0 	.word	0x2003e3f0
   d8288:	2003e3f4 	.word	0x2003e3f4
   d828c:	2003e148 	.word	0x2003e148
   d8290:	000d8189 	.word	0x000d8189

000d8294 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8294:	4770      	bx	lr

000d8296 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8296:	7441      	strb	r1, [r0, #17]
   d8298:	4770      	bx	lr

000d829a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d829a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d829c:	7c00      	ldrb	r0, [r0, #16]
   d829e:	f7fe fcab 	bl	d6bf8 <HAL_USART_Available_Data_For_Write>
}
   d82a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82a6:	bd08      	pop	{r3, pc}

000d82a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d82a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d82aa:	7c00      	ldrb	r0, [r0, #16]
   d82ac:	f7fe fc7c 	bl	d6ba8 <HAL_USART_Available_Data>
}
   d82b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82b4:	bd08      	pop	{r3, pc}

000d82b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d82b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d82b8:	7c00      	ldrb	r0, [r0, #16]
   d82ba:	f7fe fc85 	bl	d6bc8 <HAL_USART_Peek_Data>
}
   d82be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82c2:	bf28      	it	cs
   d82c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d82c8:	bd08      	pop	{r3, pc}

000d82ca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d82ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d82cc:	7c00      	ldrb	r0, [r0, #16]
   d82ce:	f7fe fc73 	bl	d6bb8 <HAL_USART_Read_Data>
}
   d82d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82d6:	bf28      	it	cs
   d82d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d82dc:	bd08      	pop	{r3, pc}

000d82de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d82de:	7c00      	ldrb	r0, [r0, #16]
   d82e0:	f7fe bc7a 	b.w	d6bd8 <HAL_USART_Flush_Data>

000d82e4 <_ZN11USARTSerialD0Ev>:
   d82e4:	b510      	push	{r4, lr}
   d82e6:	2114      	movs	r1, #20
   d82e8:	4604      	mov	r4, r0
   d82ea:	f000 fe55 	bl	d8f98 <_ZdlPvj>
   d82ee:	4620      	mov	r0, r4
   d82f0:	bd10      	pop	{r4, pc}

000d82f2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d82f2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d82f4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d82f6:	4604      	mov	r4, r0
   d82f8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d82fa:	b925      	cbnz	r5, d8306 <_ZN11USARTSerial5writeEh+0x14>
   d82fc:	7c00      	ldrb	r0, [r0, #16]
   d82fe:	f7fe fc7b 	bl	d6bf8 <HAL_USART_Available_Data_For_Write>
   d8302:	2800      	cmp	r0, #0
   d8304:	dd05      	ble.n	d8312 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8306:	4631      	mov	r1, r6
   d8308:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d830a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d830e:	f7fe bc43 	b.w	d6b98 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8312:	4628      	mov	r0, r5
   d8314:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8318 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8318:	b510      	push	{r4, lr}
   d831a:	4604      	mov	r4, r0
   d831c:	4608      	mov	r0, r1
   d831e:	4611      	mov	r1, r2
   d8320:	2200      	movs	r2, #0
   d8322:	6062      	str	r2, [r4, #4]
   d8324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8328:	60a2      	str	r2, [r4, #8]
   d832a:	4a05      	ldr	r2, [pc, #20]	; (d8340 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d832c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d832e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8330:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8332:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8334:	461a      	mov	r2, r3
   d8336:	f7fe fc27 	bl	d6b88 <HAL_USART_Init>
}
   d833a:	4620      	mov	r0, r4
   d833c:	bd10      	pop	{r4, pc}
   d833e:	bf00      	nop
   d8340:	000dcf00 	.word	0x000dcf00

000d8344 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8344:	7c00      	ldrb	r0, [r0, #16]
   d8346:	f7fe bc4f 	b.w	d6be8 <HAL_USART_Is_Enabled>
	...

000d834c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d834c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d834e:	4d0c      	ldr	r5, [pc, #48]	; (d8380 <_Z22__fetch_global_Serial1v+0x34>)
   d8350:	6829      	ldr	r1, [r5, #0]
   d8352:	f011 0401 	ands.w	r4, r1, #1
   d8356:	d111      	bne.n	d837c <_Z22__fetch_global_Serial1v+0x30>
   d8358:	4628      	mov	r0, r5
   d835a:	f7fb feaf 	bl	d40bc <__cxa_guard_acquire>
   d835e:	b168      	cbz	r0, d837c <_Z22__fetch_global_Serial1v+0x30>
   d8360:	4a08      	ldr	r2, [pc, #32]	; (d8384 <_Z22__fetch_global_Serial1v+0x38>)
   d8362:	4b09      	ldr	r3, [pc, #36]	; (d8388 <_Z22__fetch_global_Serial1v+0x3c>)
   d8364:	4809      	ldr	r0, [pc, #36]	; (d838c <_Z22__fetch_global_Serial1v+0x40>)
   d8366:	4621      	mov	r1, r4
   d8368:	f7ff ffd6 	bl	d8318 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d836c:	4628      	mov	r0, r5
   d836e:	f7fb feaa 	bl	d40c6 <__cxa_guard_release>
   d8372:	4a07      	ldr	r2, [pc, #28]	; (d8390 <_Z22__fetch_global_Serial1v+0x44>)
   d8374:	4907      	ldr	r1, [pc, #28]	; (d8394 <_Z22__fetch_global_Serial1v+0x48>)
   d8376:	4805      	ldr	r0, [pc, #20]	; (d838c <_Z22__fetch_global_Serial1v+0x40>)
   d8378:	f000 fe00 	bl	d8f7c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d837c:	4803      	ldr	r0, [pc, #12]	; (d838c <_Z22__fetch_global_Serial1v+0x40>)
   d837e:	bd38      	pop	{r3, r4, r5, pc}
   d8380:	2003e4a0 	.word	0x2003e4a0
   d8384:	2003e4a4 	.word	0x2003e4a4
   d8388:	2003e41c 	.word	0x2003e41c
   d838c:	2003e408 	.word	0x2003e408
   d8390:	2003e148 	.word	0x2003e148
   d8394:	000d8295 	.word	0x000d8295

000d8398 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8398:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d839a:	6883      	ldr	r3, [r0, #8]
   d839c:	4604      	mov	r4, r0
   d839e:	b90b      	cbnz	r3, d83a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d83a0:	f000 fe0d 	bl	d8fbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83a4:	68c3      	ldr	r3, [r0, #12]
   d83a6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d83a8:	68a3      	ldr	r3, [r4, #8]
   d83aa:	b11b      	cbz	r3, d83b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83ac:	2203      	movs	r2, #3
   d83ae:	4621      	mov	r1, r4
   d83b0:	4620      	mov	r0, r4
   d83b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83b4:	4620      	mov	r0, r4
   d83b6:	2110      	movs	r1, #16
}
   d83b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83bc:	f000 bdec 	b.w	d8f98 <_ZdlPvj>

000d83c0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d83c0:	4770      	bx	lr

000d83c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d83c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d83c4:	4606      	mov	r6, r0
   d83c6:	4615      	mov	r5, r2
   d83c8:	460c      	mov	r4, r1
   d83ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d83cc:	42bc      	cmp	r4, r7
   d83ce:	d006      	beq.n	d83de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d83d0:	6833      	ldr	r3, [r6, #0]
   d83d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d83d6:	689b      	ldr	r3, [r3, #8]
   d83d8:	4630      	mov	r0, r6
   d83da:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d83dc:	e7f6      	b.n	d83cc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d83de:	4628      	mov	r0, r5
   d83e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83e2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d83e2:	2200      	movs	r2, #0
   d83e4:	7c00      	ldrb	r0, [r0, #16]
   d83e6:	f7fe bc27 	b.w	d6c38 <HAL_I2C_Write_Data>

000d83ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d83ea:	2100      	movs	r1, #0
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7fe bc2b 	b.w	d6c48 <HAL_I2C_Available_Data>

000d83f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d83f2:	2100      	movs	r1, #0
   d83f4:	7c00      	ldrb	r0, [r0, #16]
   d83f6:	f7fe bc2f 	b.w	d6c58 <HAL_I2C_Read_Data>

000d83fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d83fa:	2100      	movs	r1, #0
   d83fc:	7c00      	ldrb	r0, [r0, #16]
   d83fe:	f7fe bc33 	b.w	d6c68 <HAL_I2C_Peek_Data>

000d8402 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8402:	2100      	movs	r1, #0
   d8404:	7c00      	ldrb	r0, [r0, #16]
   d8406:	f7fe bc37 	b.w	d6c78 <HAL_I2C_Flush_Data>

000d840a <_ZN7TwoWireD0Ev>:
   d840a:	b510      	push	{r4, lr}
   d840c:	2114      	movs	r1, #20
   d840e:	4604      	mov	r4, r0
   d8410:	f000 fdc2 	bl	d8f98 <_ZdlPvj>
   d8414:	4620      	mov	r0, r4
   d8416:	bd10      	pop	{r4, pc}

000d8418 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8418:	b510      	push	{r4, lr}
   d841a:	4604      	mov	r4, r0
   d841c:	2300      	movs	r3, #0
   d841e:	6063      	str	r3, [r4, #4]
   d8420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8424:	60a3      	str	r3, [r4, #8]
   d8426:	4b04      	ldr	r3, [pc, #16]	; (d8438 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8428:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d842a:	4608      	mov	r0, r1
   d842c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d842e:	4611      	mov	r1, r2
   d8430:	f7fe fc32 	bl	d6c98 <HAL_I2C_Init>
}
   d8434:	4620      	mov	r0, r4
   d8436:	bd10      	pop	{r4, pc}
   d8438:	000dcf30 	.word	0x000dcf30

000d843c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d843c:	2300      	movs	r3, #0
   d843e:	461a      	mov	r2, r3
   d8440:	4619      	mov	r1, r3
   d8442:	7c00      	ldrb	r0, [r0, #16]
   d8444:	f7fe bbe0 	b.w	d6c08 <HAL_I2C_Begin>

000d8448 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8448:	b570      	push	{r4, r5, r6, lr}
   d844a:	460c      	mov	r4, r1
   d844c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d844e:	2514      	movs	r5, #20
   d8450:	4606      	mov	r6, r0
   d8452:	462a      	mov	r2, r5
   d8454:	2100      	movs	r1, #0
   d8456:	a801      	add	r0, sp, #4
   d8458:	f003 f988 	bl	db76c <memset>
   d845c:	7823      	ldrb	r3, [r4, #0]
   d845e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8462:	6863      	ldr	r3, [r4, #4]
   d8464:	9303      	str	r3, [sp, #12]
   d8466:	68e3      	ldr	r3, [r4, #12]
   d8468:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d846a:	2200      	movs	r2, #0
   d846c:	7a23      	ldrb	r3, [r4, #8]
   d846e:	7c30      	ldrb	r0, [r6, #16]
   d8470:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8474:	a901      	add	r1, sp, #4
   d8476:	9305      	str	r3, [sp, #20]
   d8478:	f7fe fc16 	bl	d6ca8 <HAL_I2C_Request_Data_Ex>
}
   d847c:	b006      	add	sp, #24
   d847e:	bd70      	pop	{r4, r5, r6, pc}

000d8480 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8482:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8484:	f88d 1000 	strb.w	r1, [sp]
   d8488:	f04f 0164 	mov.w	r1, #100	; 0x64
   d848c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d848e:	bf18      	it	ne
   d8490:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8492:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8494:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8496:	f88d 3008 	strb.w	r3, [sp, #8]
   d849a:	f7ff ffd5 	bl	d8448 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d849e:	b005      	add	sp, #20
   d84a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d84a4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d84a4:	2301      	movs	r3, #1
   d84a6:	f7ff bfeb 	b.w	d8480 <_ZN7TwoWire11requestFromEhjh>

000d84aa <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d84aa:	2200      	movs	r2, #0
   d84ac:	7c00      	ldrb	r0, [r0, #16]
   d84ae:	f7fe bbb3 	b.w	d6c18 <HAL_I2C_Begin_Transmission>

000d84b2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d84b2:	b2c9      	uxtb	r1, r1
   d84b4:	f7ff bff9 	b.w	d84aa <_ZN7TwoWire17beginTransmissionEh>

000d84b8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d84b8:	2200      	movs	r2, #0
   d84ba:	7c00      	ldrb	r0, [r0, #16]
   d84bc:	f7fe bbb4 	b.w	d6c28 <HAL_I2C_End_Transmission>

000d84c0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d84c0:	2101      	movs	r1, #1
   d84c2:	f7ff bff9 	b.w	d84b8 <_ZN7TwoWire15endTransmissionEh>

000d84c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d84c6:	2100      	movs	r1, #0
   d84c8:	7c00      	ldrb	r0, [r0, #16]
   d84ca:	f7fe bbdd 	b.w	d6c88 <HAL_I2C_Is_Enabled>

000d84ce <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84ce:	2200      	movs	r2, #0
   d84d0:	4611      	mov	r1, r2
   d84d2:	6840      	ldr	r0, [r0, #4]
   d84d4:	f7fe bce4 	b.w	d6ea0 <network_listening>

000d84d8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d84d8:	2200      	movs	r2, #0
   d84da:	4611      	mov	r1, r2
   d84dc:	6840      	ldr	r0, [r0, #4]
   d84de:	f7fe bcef 	b.w	d6ec0 <network_get_listen_timeout>

000d84e2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d84e2:	2200      	movs	r2, #0
   d84e4:	6840      	ldr	r0, [r0, #4]
   d84e6:	f7fe bce3 	b.w	d6eb0 <network_set_listen_timeout>

000d84ea <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d84ea:	2200      	movs	r2, #0
   d84ec:	f081 0101 	eor.w	r1, r1, #1
   d84f0:	6840      	ldr	r0, [r0, #4]
   d84f2:	f7fe bccd 	b.w	d6e90 <network_listen>

000d84f6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d84f6:	2300      	movs	r3, #0
   d84f8:	461a      	mov	r2, r3
   d84fa:	2101      	movs	r1, #1
   d84fc:	6840      	ldr	r0, [r0, #4]
   d84fe:	f7fe bcbf 	b.w	d6e80 <network_off>

000d8502 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8502:	2300      	movs	r3, #0
   d8504:	461a      	mov	r2, r3
   d8506:	4619      	mov	r1, r3
   d8508:	6840      	ldr	r0, [r0, #4]
   d850a:	f7fe bcb1 	b.w	d6e70 <network_on>

000d850e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d850e:	2200      	movs	r2, #0
   d8510:	4611      	mov	r1, r2
   d8512:	6840      	ldr	r0, [r0, #4]
   d8514:	f7fe bca4 	b.w	d6e60 <network_ready>

000d8518 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8518:	2200      	movs	r2, #0
   d851a:	4611      	mov	r1, r2
   d851c:	6840      	ldr	r0, [r0, #4]
   d851e:	f7fe bc8f 	b.w	d6e40 <network_connecting>

000d8522 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8522:	2200      	movs	r2, #0
   d8524:	2102      	movs	r1, #2
   d8526:	6840      	ldr	r0, [r0, #4]
   d8528:	f7fe bc92 	b.w	d6e50 <network_disconnect>

000d852c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d852c:	2300      	movs	r3, #0
   d852e:	461a      	mov	r2, r3
   d8530:	6840      	ldr	r0, [r0, #4]
   d8532:	f7fe bc7d 	b.w	d6e30 <network_connect>

000d8536 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8536:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8538:	4605      	mov	r5, r0
   d853a:	b188      	cbz	r0, d8560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d853c:	6804      	ldr	r4, [r0, #0]
   d853e:	b14c      	cbz	r4, d8554 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8540:	68a3      	ldr	r3, [r4, #8]
   d8542:	b11b      	cbz	r3, d854c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8544:	2203      	movs	r2, #3
   d8546:	4621      	mov	r1, r4
   d8548:	4620      	mov	r0, r4
   d854a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d854c:	2110      	movs	r1, #16
   d854e:	4620      	mov	r0, r4
   d8550:	f000 fd22 	bl	d8f98 <_ZdlPvj>
   d8554:	4628      	mov	r0, r5
   d8556:	2114      	movs	r1, #20
      }
   d8558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d855c:	f000 bd1c 	b.w	d8f98 <_ZdlPvj>
   d8560:	bd38      	pop	{r3, r4, r5, pc}

000d8562 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8562:	b110      	cbz	r0, d856a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8564:	6803      	ldr	r3, [r0, #0]
   d8566:	685b      	ldr	r3, [r3, #4]
   d8568:	4718      	bx	r3
   d856a:	4770      	bx	lr

000d856c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d856c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d856e:	6803      	ldr	r3, [r0, #0]
   d8570:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8572:	b1bb      	cbz	r3, d85a4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8574:	6858      	ldr	r0, [r3, #4]
   d8576:	f7fe fac7 	bl	d6b08 <os_thread_is_current>
   d857a:	b978      	cbnz	r0, d859c <_ZN6ThreadD1Ev+0x30>
   d857c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d857e:	7c5a      	ldrb	r2, [r3, #17]
   d8580:	b912      	cbnz	r2, d8588 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8582:	6858      	ldr	r0, [r3, #4]
   d8584:	f7fe fac8 	bl	d6b18 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8588:	6823      	ldr	r3, [r4, #0]
   d858a:	6858      	ldr	r0, [r3, #4]
   d858c:	f7fe facc 	bl	d6b28 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8590:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8592:	2300      	movs	r3, #0
   d8594:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8596:	b128      	cbz	r0, d85a4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8598:	f7ff ffcd 	bl	d8536 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d859c:	6820      	ldr	r0, [r4, #0]
   d859e:	b108      	cbz	r0, d85a4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d85a0:	f7ff ffc9 	bl	d8536 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d85a4:	4620      	mov	r0, r4
   d85a6:	bd10      	pop	{r4, pc}

000d85a8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d85a8:	b538      	push	{r3, r4, r5, lr}
   d85aa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85ac:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d85b0:	b108      	cbz	r0, d85b6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d85b2:	f7fb fd76 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d85b6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d85ba:	b108      	cbz	r0, d85c0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d85bc:	f7fe fac4 	bl	d6b48 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85c0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d85c4:	b135      	cbz	r5, d85d4 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d85c6:	4628      	mov	r0, r5
   d85c8:	f7ff ffd0 	bl	d856c <_ZN6ThreadD1Ev>
   d85cc:	2104      	movs	r1, #4
   d85ce:	4628      	mov	r0, r5
   d85d0:	f000 fce2 	bl	d8f98 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85d4:	6820      	ldr	r0, [r4, #0]
   d85d6:	b108      	cbz	r0, d85dc <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d85d8:	f7ff ffc3 	bl	d8562 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d85dc:	4620      	mov	r0, r4
   d85de:	bd38      	pop	{r3, r4, r5, pc}

000d85e0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d85e0:	b510      	push	{r4, lr}
   d85e2:	4b04      	ldr	r3, [pc, #16]	; (d85f4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d85e4:	4604      	mov	r4, r0
   d85e6:	f840 3b08 	str.w	r3, [r0], #8
   d85ea:	f7ff ffdd 	bl	d85a8 <_ZN5spark11MeshPublishD1Ev>
   d85ee:	4620      	mov	r0, r4
   d85f0:	bd10      	pop	{r4, pc}
   d85f2:	bf00      	nop
   d85f4:	000dcf58 	.word	0x000dcf58

000d85f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d85f8:	b538      	push	{r3, r4, r5, lr}
   d85fa:	4c0e      	ldr	r4, [pc, #56]	; (d8634 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d85fc:	4b0e      	ldr	r3, [pc, #56]	; (d8638 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d85fe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8600:	2500      	movs	r5, #0
   d8602:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8604:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8608:	6063      	str	r3, [r4, #4]
   d860a:	60a5      	str	r5, [r4, #8]
   d860c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8610:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8614:	f7fe fa90 	bl	d6b38 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8618:	4b08      	ldr	r3, [pc, #32]	; (d863c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d861a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d861e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8622:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8624:	4620      	mov	r0, r4
   d8626:	4a06      	ldr	r2, [pc, #24]	; (d8640 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8628:	4906      	ldr	r1, [pc, #24]	; (d8644 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d862a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d862e:	f000 bca5 	b.w	d8f7c <__aeabi_atexit>
   d8632:	bf00      	nop
   d8634:	2003e528 	.word	0x2003e528
   d8638:	000dd040 	.word	0x000dd040
   d863c:	000dcf58 	.word	0x000dcf58
   d8640:	2003e148 	.word	0x2003e148
   d8644:	000d85e1 	.word	0x000d85e1

000d8648 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d864a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d864c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d864e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8652:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8654:	2201      	movs	r2, #1
   d8656:	f04f 33ff 	mov.w	r3, #4294967295
   d865a:	4621      	mov	r1, r4
   d865c:	47a8      	blx	r5
}
   d865e:	b003      	add	sp, #12
   d8660:	bd30      	pop	{r4, r5, pc}

000d8662 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8662:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8664:	6803      	ldr	r3, [r0, #0]
   d8666:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8668:	f04f 33ff 	mov.w	r3, #4294967295
   d866c:	46a4      	mov	ip, r4
}
   d866e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8672:	4760      	bx	ip

000d8674 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8674:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8676:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d8678:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d867a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d867e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8680:	4621      	mov	r1, r4
   d8682:	4613      	mov	r3, r2
   d8684:	2201      	movs	r2, #1
   d8686:	47a8      	blx	r5
}
   d8688:	b003      	add	sp, #12
   d868a:	bd30      	pop	{r4, r5, pc}

000d868c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d868c:	4770      	bx	lr

000d868e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d868e:	b538      	push	{r3, r4, r5, lr}
   d8690:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8692:	681a      	ldr	r2, [r3, #0]
   d8694:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8696:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8698:	da05      	bge.n	d86a6 <_ZN9TCPClient9connectedEv+0x18>
   d869a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d869e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d86a2:	429a      	cmp	r2, r3
   d86a4:	d001      	beq.n	d86aa <_ZN9TCPClient9connectedEv+0x1c>
   d86a6:	2501      	movs	r5, #1
   d86a8:	e00b      	b.n	d86c2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d86aa:	6803      	ldr	r3, [r0, #0]
   d86ac:	691b      	ldr	r3, [r3, #16]
   d86ae:	4798      	blx	r3
   d86b0:	2800      	cmp	r0, #0
   d86b2:	bf14      	ite	ne
   d86b4:	2501      	movne	r5, #1
   d86b6:	2500      	moveq	r5, #0
        if (!rv) {
   d86b8:	d103      	bne.n	d86c2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d86ba:	6823      	ldr	r3, [r4, #0]
   d86bc:	4620      	mov	r0, r4
   d86be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d86c0:	4798      	blx	r3
        }
    }
    return rv;
}
   d86c2:	4628      	mov	r0, r5
   d86c4:	bd38      	pop	{r3, r4, r5, pc}

000d86c6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d86c6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d86c8:	6818      	ldr	r0, [r3, #0]
}
   d86ca:	43c0      	mvns	r0, r0
   d86cc:	0fc0      	lsrs	r0, r0, #31
   d86ce:	4770      	bx	lr

000d86d0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d86d0:	4770      	bx	lr

000d86d2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d86d2:	2000      	movs	r0, #0
   d86d4:	4770      	bx	lr

000d86d6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d86d6:	b510      	push	{r4, lr}
   d86d8:	2114      	movs	r1, #20
   d86da:	4604      	mov	r4, r0
   d86dc:	f000 fc5c 	bl	d8f98 <_ZdlPvj>
   d86e0:	4620      	mov	r0, r4
   d86e2:	bd10      	pop	{r4, pc}

000d86e4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d86e4:	f7fb bcdb 	b.w	d409e <_ZdlPv>

000d86e8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d86ea:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d86ec:	2200      	movs	r2, #0
   d86ee:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d86f0:	9202      	str	r2, [sp, #8]
   d86f2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86f4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86f6:	4604      	mov	r4, r0
   d86f8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86fa:	d008      	beq.n	d870e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d86fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8700:	fbb3 f1f2 	udiv	r1, r3, r2
   d8704:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8706:	fb02 3111 	mls	r1, r2, r1, r3
   d870a:	434a      	muls	r2, r1
   d870c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d870e:	6960      	ldr	r0, [r4, #20]
   d8710:	2308      	movs	r3, #8
   d8712:	9300      	str	r3, [sp, #0]
   d8714:	f241 0205 	movw	r2, #4101	; 0x1005
   d8718:	446b      	add	r3, sp
   d871a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d871e:	6800      	ldr	r0, [r0, #0]
   d8720:	f7fe faca 	bl	d6cb8 <sock_setsockopt>
    if (ret < 0) {
   d8724:	2800      	cmp	r0, #0
   d8726:	db08      	blt.n	d873a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8728:	6960      	ldr	r0, [r4, #20]
   d872a:	2300      	movs	r3, #0
   d872c:	4632      	mov	r2, r6
   d872e:	4629      	mov	r1, r5
   d8730:	6800      	ldr	r0, [r0, #0]
   d8732:	f7fe fae1 	bl	d6cf8 <sock_send>
    if (ret < 0) {
   d8736:	2800      	cmp	r0, #0
   d8738:	da04      	bge.n	d8744 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d873a:	f7fe fc41 	bl	d6fc0 <__errno>
   d873e:	6803      	ldr	r3, [r0, #0]
   d8740:	6063      	str	r3, [r4, #4]
   d8742:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8744:	b004      	add	sp, #16
   d8746:	bd70      	pop	{r4, r5, r6, pc}

000d8748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8748:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d874a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d874c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d874e:	689b      	ldr	r3, [r3, #8]
   d8750:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8752:	68a3      	ldr	r3, [r4, #8]
   d8754:	3b01      	subs	r3, #1
   d8756:	60a3      	str	r3, [r4, #8]
   d8758:	b92b      	cbnz	r3, d8766 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d875a:	6823      	ldr	r3, [r4, #0]
   d875c:	4620      	mov	r0, r4
   d875e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8764:	4718      	bx	r3
   d8766:	bd10      	pop	{r4, pc}

000d8768 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8768:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d876a:	4604      	mov	r4, r0
   d876c:	694d      	ldr	r5, [r1, #20]
   d876e:	4b05      	ldr	r3, [pc, #20]	; (d8784 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8770:	f844 3b04 	str.w	r3, [r4], #4
   d8774:	358c      	adds	r5, #140	; 0x8c
   d8776:	4606      	mov	r6, r0
   d8778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d877a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d877c:	682b      	ldr	r3, [r5, #0]
   d877e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8780:	4630      	mov	r0, r6
   d8782:	bd70      	pop	{r4, r5, r6, pc}
   d8784:	000dcebc 	.word	0x000dcebc

000d8788 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8788:	b510      	push	{r4, lr}
   d878a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d878c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8790:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8794:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8796:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8798:	d005      	beq.n	d87a6 <_ZN9TCPClient4peekEv+0x1e>
   d879a:	6962      	ldr	r2, [r4, #20]
   d879c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87a0:	4413      	add	r3, r2
   d87a2:	7918      	ldrb	r0, [r3, #4]
   d87a4:	bd10      	pop	{r4, pc}
   d87a6:	6803      	ldr	r3, [r0, #0]
   d87a8:	691b      	ldr	r3, [r3, #16]
   d87aa:	4798      	blx	r3
   d87ac:	2800      	cmp	r0, #0
   d87ae:	d1f4      	bne.n	d879a <_ZN9TCPClient4peekEv+0x12>
   d87b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d87b4:	bd10      	pop	{r4, pc}

000d87b6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d87b6:	b510      	push	{r4, lr}
   d87b8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87c2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d87c4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87c6:	d008      	beq.n	d87da <_ZN9TCPClient4readEv+0x24>
   d87c8:	6962      	ldr	r2, [r4, #20]
   d87ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87ce:	1c59      	adds	r1, r3, #1
   d87d0:	4413      	add	r3, r2
   d87d2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d87d6:	7918      	ldrb	r0, [r3, #4]
   d87d8:	bd10      	pop	{r4, pc}
   d87da:	6803      	ldr	r3, [r0, #0]
   d87dc:	691b      	ldr	r3, [r3, #16]
   d87de:	4798      	blx	r3
   d87e0:	2800      	cmp	r0, #0
   d87e2:	d1f1      	bne.n	d87c8 <_ZN9TCPClient4readEv+0x12>
   d87e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d87e8:	bd10      	pop	{r4, pc}

000d87ea <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87ec:	6943      	ldr	r3, [r0, #20]
   d87ee:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d87f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87f8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87fa:	4605      	mov	r5, r0
   d87fc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d87fe:	d106      	bne.n	d880e <_ZN9TCPClient4readEPhj+0x24>
   d8800:	6803      	ldr	r3, [r0, #0]
   d8802:	691b      	ldr	r3, [r3, #16]
   d8804:	4798      	blx	r3
   d8806:	b910      	cbnz	r0, d880e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8808:	f04f 34ff 	mov.w	r4, #4294967295
   d880c:	e014      	b.n	d8838 <_ZN9TCPClient4readEPhj+0x4e>
   d880e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8810:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8814:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8818:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d881a:	42bc      	cmp	r4, r7
   d881c:	bf28      	it	cs
   d881e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8820:	4419      	add	r1, r3
   d8822:	4622      	mov	r2, r4
   d8824:	3104      	adds	r1, #4
   d8826:	4630      	mov	r0, r6
   d8828:	f002 ff7a 	bl	db720 <memcpy>
   d882c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d882e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8832:	4423      	add	r3, r4
   d8834:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8838:	4620      	mov	r0, r4
   d883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d883c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d883c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8840:	4698      	mov	r8, r3
    stop();
   d8842:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8844:	b093      	sub	sp, #76	; 0x4c
    stop();
   d8846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8848:	460d      	mov	r5, r1
   d884a:	4606      	mov	r6, r0
   d884c:	4617      	mov	r7, r2
    stop();
   d884e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8850:	ab12      	add	r3, sp, #72	; 0x48
   d8852:	2400      	movs	r4, #0
   d8854:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8858:	4622      	mov	r2, r4
   d885a:	4621      	mov	r1, r4
   d885c:	4628      	mov	r0, r5
   d885e:	f7fe f883 	bl	d6968 <netdb_getaddrinfo>
   d8862:	4681      	mov	r9, r0
   d8864:	2800      	cmp	r0, #0
   d8866:	d13d      	bne.n	d88e4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8868:	9b00      	ldr	r3, [sp, #0]
   d886a:	2b00      	cmp	r3, #0
   d886c:	d056      	beq.n	d891c <_ZN9TCPClient7connectEPKctm+0xe0>
   d886e:	695b      	ldr	r3, [r3, #20]
   d8870:	2b00      	cmp	r3, #0
   d8872:	d053      	beq.n	d891c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d8874:	a806      	add	r0, sp, #24
   d8876:	f7ff fc37 	bl	d80e8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d887a:	9b00      	ldr	r3, [sp, #0]
   d887c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d887e:	7863      	ldrb	r3, [r4, #1]
   d8880:	2b02      	cmp	r3, #2
   d8882:	d101      	bne.n	d8888 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8884:	1d21      	adds	r1, r4, #4
   d8886:	e013      	b.n	d88b0 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8888:	2b0a      	cmp	r3, #10
   d888a:	d114      	bne.n	d88b6 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d888c:	2211      	movs	r2, #17
   d888e:	4649      	mov	r1, r9
   d8890:	a801      	add	r0, sp, #4
   d8892:	f002 ff6b 	bl	db76c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8896:	68a3      	ldr	r3, [r4, #8]
   d8898:	bb33      	cbnz	r3, d88e8 <_ZN9TCPClient7connectEPKctm+0xac>
   d889a:	68e3      	ldr	r3, [r4, #12]
   d889c:	bb23      	cbnz	r3, d88e8 <_ZN9TCPClient7connectEPKctm+0xac>
   d889e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d88a2:	6925      	ldr	r5, [r4, #16]
   d88a4:	f7fe f960 	bl	d6b68 <inet_htonl>
   d88a8:	4285      	cmp	r5, r0
   d88aa:	d11d      	bne.n	d88e8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d88ac:	f104 0114 	add.w	r1, r4, #20
   d88b0:	a806      	add	r0, sp, #24
   d88b2:	f7ff fc5c 	bl	d816e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d88b6:	a806      	add	r0, sp, #24
   d88b8:	f7ff fc36 	bl	d8128 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d88bc:	2800      	cmp	r0, #0
   d88be:	d02d      	beq.n	d891c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d88c0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d88c2:	ad07      	add	r5, sp, #28
   d88c4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d88c8:	4b18      	ldr	r3, [pc, #96]	; (d892c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d88ca:	930c      	str	r3, [sp, #48]	; 0x30
   d88cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88ce:	ac0d      	add	r4, sp, #52	; 0x34
   d88d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88d2:	682b      	ldr	r3, [r5, #0]
   d88d4:	7023      	strb	r3, [r4, #0]
   d88d6:	463a      	mov	r2, r7
   d88d8:	4643      	mov	r3, r8
   d88da:	a90c      	add	r1, sp, #48	; 0x30
   d88dc:	4630      	mov	r0, r6
   d88de:	47c8      	blx	r9
   d88e0:	4681      	mov	r9, r0
   d88e2:	e01b      	b.n	d891c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d88e4:	46a1      	mov	r9, r4
   d88e6:	e019      	b.n	d891c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d88e8:	f104 0308 	add.w	r3, r4, #8
   d88ec:	ad01      	add	r5, sp, #4
   d88ee:	3418      	adds	r4, #24
   d88f0:	6818      	ldr	r0, [r3, #0]
   d88f2:	6859      	ldr	r1, [r3, #4]
   d88f4:	462a      	mov	r2, r5
   d88f6:	c203      	stmia	r2!, {r0, r1}
   d88f8:	3308      	adds	r3, #8
   d88fa:	42a3      	cmp	r3, r4
   d88fc:	4615      	mov	r5, r2
   d88fe:	d1f7      	bne.n	d88f0 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d8900:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8902:	a901      	add	r1, sp, #4
   d8904:	a80c      	add	r0, sp, #48	; 0x30
   d8906:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8908:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d890c:	f7ff fbfa 	bl	d8104 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8912:	ac07      	add	r4, sp, #28
   d8914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8916:	682b      	ldr	r3, [r5, #0]
   d8918:	7023      	strb	r3, [r4, #0]
   d891a:	e7cc      	b.n	d88b6 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d891c:	9800      	ldr	r0, [sp, #0]
   d891e:	f7fe f81b 	bl	d6958 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d8922:	4648      	mov	r0, r9
   d8924:	b013      	add	sp, #76	; 0x4c
   d8926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d892a:	bf00      	nop
   d892c:	000dcebc 	.word	0x000dcebc

000d8930 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d8930:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8932:	2300      	movs	r3, #0
   d8934:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8938:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d893a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d893e:	4770      	bx	lr

000d8940 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8944:	461e      	mov	r6, r3
    stop();
   d8946:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8948:	460c      	mov	r4, r1
   d894a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d894e:	4605      	mov	r5, r0
   d8950:	4617      	mov	r7, r2
    stop();
   d8952:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8954:	7d23      	ldrb	r3, [r4, #20]
   d8956:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d895a:	2b04      	cmp	r3, #4
   d895c:	bf0c      	ite	eq
   d895e:	2002      	moveq	r0, #2
   d8960:	200a      	movne	r0, #10
   d8962:	2206      	movs	r2, #6
   d8964:	2101      	movs	r1, #1
   d8966:	f7fe f9cf 	bl	d6d08 <sock_socket>
   d896a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d896e:	696b      	ldr	r3, [r5, #20]
   d8970:	681b      	ldr	r3, [r3, #0]
   d8972:	2b00      	cmp	r3, #0
   d8974:	db18      	blt.n	d89a8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d8976:	4628      	mov	r0, r5
   d8978:	f7ff ffda 	bl	d8930 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d897c:	b1d6      	cbz	r6, d89b4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d897e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8980:	a903      	add	r1, sp, #12
   d8982:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8984:	9303      	str	r3, [sp, #12]
   d8986:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d898a:	f7fe f88d 	bl	d6aa8 <if_index_to_name>
   d898e:	b958      	cbnz	r0, d89a8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8990:	6968      	ldr	r0, [r5, #20]
   d8992:	2306      	movs	r3, #6
   d8994:	9300      	str	r3, [sp, #0]
   d8996:	f241 020b 	movw	r2, #4107	; 0x100b
   d899a:	ab03      	add	r3, sp, #12
   d899c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d89a0:	6800      	ldr	r0, [r0, #0]
   d89a2:	f7fe f989 	bl	d6cb8 <sock_setsockopt>
   d89a6:	b128      	cbz	r0, d89b4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d89a8:	682b      	ldr	r3, [r5, #0]
   d89aa:	4628      	mov	r0, r5
   d89ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d89ae:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d89b0:	4798      	blx	r3
   d89b2:	e03b      	b.n	d8a2c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d89b4:	261c      	movs	r6, #28
   d89b6:	4632      	mov	r2, r6
   d89b8:	2100      	movs	r1, #0
   d89ba:	a803      	add	r0, sp, #12
   d89bc:	f002 fed6 	bl	db76c <memset>
    if (ip.version() == 4) {
   d89c0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d89c2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d89c6:	2b04      	cmp	r3, #4
   d89c8:	d10c      	bne.n	d89e4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d89ca:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d89cc:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d89ce:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d89d2:	f7fe f8d1 	bl	d6b78 <inet_htons>
   d89d6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d89da:	6860      	ldr	r0, [r4, #4]
   d89dc:	f7fe f8c4 	bl	d6b68 <inet_htonl>
   d89e0:	9004      	str	r0, [sp, #16]
   d89e2:	e013      	b.n	d8a0c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89e4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d89e6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89e8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d89ec:	f7fe f8c4 	bl	d6b78 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89f0:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d89f2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89f6:	1d23      	adds	r3, r4, #4
   d89f8:	f104 0714 	add.w	r7, r4, #20
   d89fc:	6818      	ldr	r0, [r3, #0]
   d89fe:	6859      	ldr	r1, [r3, #4]
   d8a00:	4632      	mov	r2, r6
   d8a02:	c203      	stmia	r2!, {r0, r1}
   d8a04:	3308      	adds	r3, #8
   d8a06:	42bb      	cmp	r3, r7
   d8a08:	4616      	mov	r6, r2
   d8a0a:	d1f7      	bne.n	d89fc <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8a0c:	696b      	ldr	r3, [r5, #20]
   d8a0e:	221c      	movs	r2, #28
   d8a10:	a903      	add	r1, sp, #12
   d8a12:	6818      	ldr	r0, [r3, #0]
   d8a14:	f7fe f960 	bl	d6cd8 <sock_connect>
   d8a18:	2800      	cmp	r0, #0
   d8a1a:	d1c5      	bne.n	d89a8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d8a1c:	3404      	adds	r4, #4
   d8a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8a20:	696d      	ldr	r5, [r5, #20]
   d8a22:	358c      	adds	r5, #140	; 0x8c
   d8a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a26:	6823      	ldr	r3, [r4, #0]
   d8a28:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d8a2a:	2401      	movs	r4, #1
}
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	b00a      	add	sp, #40	; 0x28
   d8a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a34 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8a34:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8a36:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8a38:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8a3a:	6818      	ldr	r0, [r3, #0]
   d8a3c:	2800      	cmp	r0, #0
   d8a3e:	db01      	blt.n	d8a44 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8a40:	f7fe f942 	bl	d6cc8 <sock_close>
   d8a44:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8a46:	f04f 32ff 	mov.w	r2, #4294967295
   d8a4a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8a4c:	6960      	ldr	r0, [r4, #20]
   d8a4e:	2211      	movs	r2, #17
   d8a50:	2100      	movs	r1, #0
   d8a52:	308c      	adds	r0, #140	; 0x8c
   d8a54:	f002 fe8a 	bl	db76c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8a58:	4620      	mov	r0, r4
}
   d8a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8a5e:	f7ff bf67 	b.w	d8930 <_ZN9TCPClient12flush_bufferEv>
	...

000d8a64 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a64:	b530      	push	{r4, r5, lr}
   d8a66:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a68:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a6c:	b08b      	sub	sp, #44	; 0x2c
   d8a6e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a70:	b11b      	cbz	r3, d8a7a <_ZN9TCPClient9availableEv+0x16>
   d8a72:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8a76:	429a      	cmp	r2, r3
   d8a78:	d040      	beq.n	d8afc <_ZN9TCPClient9availableEv+0x98>
   d8a7a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8a7c:	6818      	ldr	r0, [r3, #0]
   d8a7e:	2800      	cmp	r0, #0
   d8a80:	db3f      	blt.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8a82:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d8a86:	2d7f      	cmp	r5, #127	; 0x7f
   d8a88:	d83b      	bhi.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8a8a:	1d19      	adds	r1, r3, #4
   d8a8c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8a90:	2308      	movs	r3, #8
   d8a92:	4429      	add	r1, r5
   d8a94:	f7fe f928 	bl	d6ce8 <sock_recv>
            if (ret > 0) {
   d8a98:	2800      	cmp	r0, #0
   d8a9a:	dd0c      	ble.n	d8ab6 <_ZN9TCPClient9availableEv+0x52>
   d8a9c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8aa2:	b90a      	cbnz	r2, d8aa8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8aa4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8aa8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8aaa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8aae:	4418      	add	r0, r3
   d8ab0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8ab4:	e025      	b.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8ab6:	f7fe fa83 	bl	d6fc0 <__errno>
   d8aba:	6803      	ldr	r3, [r0, #0]
   d8abc:	2b0b      	cmp	r3, #11
   d8abe:	d020      	beq.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
   d8ac0:	f7fe fa7e 	bl	d6fc0 <__errno>
   d8ac4:	6803      	ldr	r3, [r0, #0]
   d8ac6:	2b0b      	cmp	r3, #11
   d8ac8:	d01b      	beq.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8aca:	2320      	movs	r3, #32
   d8acc:	2500      	movs	r5, #0
   d8ace:	9302      	str	r3, [sp, #8]
   d8ad0:	9503      	str	r5, [sp, #12]
   d8ad2:	f7fe fa75 	bl	d6fc0 <__errno>
   d8ad6:	6803      	ldr	r3, [r0, #0]
   d8ad8:	9301      	str	r3, [sp, #4]
   d8ada:	4b0e      	ldr	r3, [pc, #56]	; (d8b14 <_ZN9TCPClient9availableEv+0xb0>)
   d8adc:	9300      	str	r3, [sp, #0]
   d8ade:	aa02      	add	r2, sp, #8
   d8ae0:	462b      	mov	r3, r5
   d8ae2:	490d      	ldr	r1, [pc, #52]	; (d8b18 <_ZN9TCPClient9availableEv+0xb4>)
   d8ae4:	2032      	movs	r0, #50	; 0x32
   d8ae6:	f7fe f957 	bl	d6d98 <log_message>
                    sock_close(d_->sock);
   d8aea:	6963      	ldr	r3, [r4, #20]
   d8aec:	6818      	ldr	r0, [r3, #0]
   d8aee:	f7fe f8eb 	bl	d6cc8 <sock_close>
   d8af2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8af4:	f04f 32ff 	mov.w	r2, #4294967295
   d8af8:	601a      	str	r2, [r3, #0]
   d8afa:	e002      	b.n	d8b02 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8afc:	f7ff ff18 	bl	d8930 <_ZN9TCPClient12flush_bufferEv>
   d8b00:	e7bb      	b.n	d8a7a <_ZN9TCPClient9availableEv+0x16>
   d8b02:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8b04:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8b08:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8b0c:	1a18      	subs	r0, r3, r0
}
   d8b0e:	b00b      	add	sp, #44	; 0x2c
   d8b10:	bd30      	pop	{r4, r5, pc}
   d8b12:	bf00      	nop
   d8b14:	000dcff3 	.word	0x000dcff3
   d8b18:	000dcfec 	.word	0x000dcfec

000d8b1c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8b1c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8b1e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8b20:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8b22:	6001      	str	r1, [r0, #0]
   d8b24:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8b28:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8b2c:	3088      	adds	r0, #136	; 0x88
   d8b2e:	f7ff fadb 	bl	d80e8 <_ZN9IPAddressC1Ev>
}
   d8b32:	4620      	mov	r0, r4
   d8b34:	bd10      	pop	{r4, pc}
	...

000d8b38 <_ZN9TCPClientC1Ei>:
   d8b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8b3c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8b3e:	2300      	movs	r3, #0
   d8b40:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8b42:	4a14      	ldr	r2, [pc, #80]	; (d8b94 <_ZN9TCPClientC1Ei+0x5c>)
   d8b44:	6043      	str	r3, [r0, #4]
   d8b46:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8b48:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8b4a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8b4c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b4e:	20a0      	movs	r0, #160	; 0xa0
   d8b50:	460e      	mov	r6, r1
   d8b52:	f7fb faa2 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8b56:	4605      	mov	r5, r0
   d8b58:	b110      	cbz	r0, d8b60 <_ZN9TCPClientC1Ei+0x28>
   d8b5a:	4631      	mov	r1, r6
   d8b5c:	f7ff ffde 	bl	d8b1c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b60:	2014      	movs	r0, #20
   d8b62:	f7fb fa9a 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8b66:	4603      	mov	r3, r0
   d8b68:	b128      	cbz	r0, d8b76 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8b6a:	2201      	movs	r2, #1
   d8b6c:	6042      	str	r2, [r0, #4]
   d8b6e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8b70:	4a09      	ldr	r2, [pc, #36]	; (d8b98 <_ZN9TCPClientC1Ei+0x60>)
   d8b72:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8b74:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8b76:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8b78:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8b7a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8b7c:	b128      	cbz	r0, d8b8a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8b7e:	6843      	ldr	r3, [r0, #4]
   d8b80:	3b01      	subs	r3, #1
   d8b82:	6043      	str	r3, [r0, #4]
   d8b84:	b90b      	cbnz	r3, d8b8a <_ZN9TCPClientC1Ei+0x52>
   d8b86:	f7ff fddf 	bl	d8748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	f7ff fed0 	bl	d8930 <_ZN9TCPClient12flush_bufferEv>
}
   d8b90:	4620      	mov	r0, r4
   d8b92:	bd70      	pop	{r4, r5, r6, pc}
   d8b94:	000dcfa8 	.word	0x000dcfa8
   d8b98:	000dcf8c 	.word	0x000dcf8c

000d8b9c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b9c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8b9e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8ba2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8ba4:	f7ff ffc8 	bl	d8b38 <_ZN9TCPClientC1Ei>
}
   d8ba8:	4620      	mov	r0, r4
   d8baa:	bd10      	pop	{r4, pc}

000d8bac <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8bac:	b510      	push	{r4, lr}
   d8bae:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8bb0:	6800      	ldr	r0, [r0, #0]
   d8bb2:	2800      	cmp	r0, #0
   d8bb4:	db01      	blt.n	d8bba <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8bb6:	f7fe f887 	bl	d6cc8 <sock_close>
    }
}
   d8bba:	4620      	mov	r0, r4
   d8bbc:	bd10      	pop	{r4, pc}

000d8bbe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8bbe:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8bc0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8bc2:	4620      	mov	r0, r4
   d8bc4:	f7ff fff2 	bl	d8bac <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8bc8:	b124      	cbz	r4, d8bd4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8bca:	4620      	mov	r0, r4
   d8bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8bd0:	f7fb ba65 	b.w	d409e <_ZdlPv>
   d8bd4:	bd10      	pop	{r4, pc}

000d8bd6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8bd6:	2200      	movs	r2, #0
   d8bd8:	4611      	mov	r1, r2
   d8bda:	6840      	ldr	r0, [r0, #4]
   d8bdc:	f7fe b940 	b.w	d6e60 <network_ready>

000d8be0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8be0:	2200      	movs	r2, #0
   d8be2:	4611      	mov	r1, r2
   d8be4:	6840      	ldr	r0, [r0, #4]
   d8be6:	f7fe b95b 	b.w	d6ea0 <network_listening>

000d8bea <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8bea:	2200      	movs	r2, #0
   d8bec:	4611      	mov	r1, r2
   d8bee:	6840      	ldr	r0, [r0, #4]
   d8bf0:	f7fe b966 	b.w	d6ec0 <network_get_listen_timeout>

000d8bf4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8bf4:	2200      	movs	r2, #0
   d8bf6:	6840      	ldr	r0, [r0, #4]
   d8bf8:	f7fe b95a 	b.w	d6eb0 <network_set_listen_timeout>

000d8bfc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bfc:	2200      	movs	r2, #0
   d8bfe:	f081 0101 	eor.w	r1, r1, #1
   d8c02:	6840      	ldr	r0, [r0, #4]
   d8c04:	f7fe b944 	b.w	d6e90 <network_listen>

000d8c08 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8c08:	2300      	movs	r3, #0
   d8c0a:	461a      	mov	r2, r3
   d8c0c:	4619      	mov	r1, r3
   d8c0e:	6840      	ldr	r0, [r0, #4]
   d8c10:	f7fe b936 	b.w	d6e80 <network_off>

000d8c14 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8c14:	2300      	movs	r3, #0
   d8c16:	461a      	mov	r2, r3
   d8c18:	4619      	mov	r1, r3
   d8c1a:	6840      	ldr	r0, [r0, #4]
   d8c1c:	f7fe b928 	b.w	d6e70 <network_on>

000d8c20 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8c20:	2200      	movs	r2, #0
   d8c22:	4611      	mov	r1, r2
   d8c24:	6840      	ldr	r0, [r0, #4]
   d8c26:	f7fe b90b 	b.w	d6e40 <network_connecting>

000d8c2a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c2a:	2200      	movs	r2, #0
   d8c2c:	2102      	movs	r1, #2
   d8c2e:	6840      	ldr	r0, [r0, #4]
   d8c30:	f7fe b90e 	b.w	d6e50 <network_disconnect>

000d8c34 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8c34:	2300      	movs	r3, #0
   d8c36:	461a      	mov	r2, r3
   d8c38:	6840      	ldr	r0, [r0, #4]
   d8c3a:	f7fe b8f9 	b.w	d6e30 <network_connect>
	...

000d8c40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8c40:	4b02      	ldr	r3, [pc, #8]	; (d8c4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8c42:	2204      	movs	r2, #4
   d8c44:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8c46:	4a02      	ldr	r2, [pc, #8]	; (d8c50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8c48:	601a      	str	r2, [r3, #0]
   d8c4a:	4770      	bx	lr
   d8c4c:	2003e6fc 	.word	0x2003e6fc
   d8c50:	000dd00c 	.word	0x000dd00c

000d8c54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8c54:	2300      	movs	r3, #0
   d8c56:	461a      	mov	r2, r3
   d8c58:	6840      	ldr	r0, [r0, #4]
   d8c5a:	f7fe b8e9 	b.w	d6e30 <network_connect>

000d8c5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8c5e:	2200      	movs	r2, #0
   d8c60:	2102      	movs	r1, #2
   d8c62:	6840      	ldr	r0, [r0, #4]
   d8c64:	f7fe b8f4 	b.w	d6e50 <network_disconnect>

000d8c68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8c68:	2200      	movs	r2, #0
   d8c6a:	4611      	mov	r1, r2
   d8c6c:	6840      	ldr	r0, [r0, #4]
   d8c6e:	f7fe b8e7 	b.w	d6e40 <network_connecting>

000d8c72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8c72:	2200      	movs	r2, #0
   d8c74:	4611      	mov	r1, r2
   d8c76:	6840      	ldr	r0, [r0, #4]
   d8c78:	f7fe b8f2 	b.w	d6e60 <network_ready>

000d8c7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8c7c:	2300      	movs	r3, #0
   d8c7e:	461a      	mov	r2, r3
   d8c80:	4619      	mov	r1, r3
   d8c82:	6840      	ldr	r0, [r0, #4]
   d8c84:	f7fe b8f4 	b.w	d6e70 <network_on>

000d8c88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8c88:	2300      	movs	r3, #0
   d8c8a:	461a      	mov	r2, r3
   d8c8c:	4619      	mov	r1, r3
   d8c8e:	6840      	ldr	r0, [r0, #4]
   d8c90:	f7fe b8f6 	b.w	d6e80 <network_off>

000d8c94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8c94:	2200      	movs	r2, #0
   d8c96:	f081 0101 	eor.w	r1, r1, #1
   d8c9a:	6840      	ldr	r0, [r0, #4]
   d8c9c:	f7fe b8f8 	b.w	d6e90 <network_listen>

000d8ca0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8ca0:	2200      	movs	r2, #0
   d8ca2:	6840      	ldr	r0, [r0, #4]
   d8ca4:	f7fe b904 	b.w	d6eb0 <network_set_listen_timeout>

000d8ca8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8ca8:	2200      	movs	r2, #0
   d8caa:	4611      	mov	r1, r2
   d8cac:	6840      	ldr	r0, [r0, #4]
   d8cae:	f7fe b907 	b.w	d6ec0 <network_get_listen_timeout>

000d8cb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8cb2:	2200      	movs	r2, #0
   d8cb4:	4611      	mov	r1, r2
   d8cb6:	6840      	ldr	r0, [r0, #4]
   d8cb8:	f7fe b8f2 	b.w	d6ea0 <network_listening>

000d8cbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8cc0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cc2:	b095      	sub	sp, #84	; 0x54
   d8cc4:	4616      	mov	r6, r2
   d8cc6:	460d      	mov	r5, r1
   d8cc8:	4607      	mov	r7, r0
    IPAddress addr;
   d8cca:	f7ff fa0d 	bl	d80e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8cce:	4621      	mov	r1, r4
   d8cd0:	2220      	movs	r2, #32
   d8cd2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8cd4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8cd6:	f002 fd49 	bl	db76c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8cda:	2340      	movs	r3, #64	; 0x40
   d8cdc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8cde:	4621      	mov	r1, r4
   d8ce0:	466b      	mov	r3, sp
   d8ce2:	aa0c      	add	r2, sp, #48	; 0x30
   d8ce4:	4630      	mov	r0, r6
   d8ce6:	f7fd fe3f 	bl	d6968 <netdb_getaddrinfo>
    if (!r) {
   d8cea:	4604      	mov	r4, r0
   d8cec:	2800      	cmp	r0, #0
   d8cee:	d144      	bne.n	d8d7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8cf0:	4602      	mov	r2, r0
   d8cf2:	2101      	movs	r1, #1
   d8cf4:	6868      	ldr	r0, [r5, #4]
   d8cf6:	f7fe f8b3 	bl	d6e60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cfa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8cfc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cfe:	4622      	mov	r2, r4
   d8d00:	6868      	ldr	r0, [r5, #4]
   d8d02:	f7fe f8ad 	bl	d6e60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d06:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d08:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8d0a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d0c:	2e00      	cmp	r6, #0
   d8d0e:	d034      	beq.n	d8d7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8d10:	2900      	cmp	r1, #0
   d8d12:	d132      	bne.n	d8d7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8d14:	6873      	ldr	r3, [r6, #4]
   d8d16:	2b02      	cmp	r3, #2
   d8d18:	d002      	beq.n	d8d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8d1a:	2b0a      	cmp	r3, #10
   d8d1c:	d009      	beq.n	d8d32 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8d1e:	e02a      	b.n	d8d76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8d20:	f1b8 0f00 	cmp.w	r8, #0
   d8d24:	d027      	beq.n	d8d76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8d26:	6971      	ldr	r1, [r6, #20]
   d8d28:	4638      	mov	r0, r7
   d8d2a:	3104      	adds	r1, #4
   d8d2c:	f7ff fa1f 	bl	d816e <_ZN9IPAddressaSEPKh>
   d8d30:	e020      	b.n	d8d74 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8d32:	f1b9 0f00 	cmp.w	r9, #0
   d8d36:	d01e      	beq.n	d8d76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8d38:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8d3a:	2211      	movs	r2, #17
   d8d3c:	a801      	add	r0, sp, #4
   d8d3e:	f002 fd15 	bl	db76c <memset>
                    a.v = 6;
   d8d42:	2306      	movs	r3, #6
   d8d44:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8d48:	ad01      	add	r5, sp, #4
   d8d4a:	f104 0308 	add.w	r3, r4, #8
   d8d4e:	3418      	adds	r4, #24
   d8d50:	6818      	ldr	r0, [r3, #0]
   d8d52:	6859      	ldr	r1, [r3, #4]
   d8d54:	462a      	mov	r2, r5
   d8d56:	c203      	stmia	r2!, {r0, r1}
   d8d58:	3308      	adds	r3, #8
   d8d5a:	42a3      	cmp	r3, r4
   d8d5c:	4615      	mov	r5, r2
   d8d5e:	d1f7      	bne.n	d8d50 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8d60:	a901      	add	r1, sp, #4
   d8d62:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8d64:	ad07      	add	r5, sp, #28
   d8d66:	f7ff f9cd 	bl	d8104 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d6c:	1d3c      	adds	r4, r7, #4
   d8d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d70:	682b      	ldr	r3, [r5, #0]
   d8d72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8d74:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d76:	69f6      	ldr	r6, [r6, #28]
   d8d78:	e7c8      	b.n	d8d0c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8d7a:	9800      	ldr	r0, [sp, #0]
   d8d7c:	f7fd fdec 	bl	d6958 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8d80:	4638      	mov	r0, r7
   d8d82:	b015      	add	sp, #84	; 0x54
   d8d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8d88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8d88:	4b02      	ldr	r3, [pc, #8]	; (d8d94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8d8a:	4a03      	ldr	r2, [pc, #12]	; (d8d98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8d8c:	601a      	str	r2, [r3, #0]
   d8d8e:	2200      	movs	r2, #0
   d8d90:	605a      	str	r2, [r3, #4]
   d8d92:	4770      	bx	lr
   d8d94:	2003e704 	.word	0x2003e704
   d8d98:	000dd040 	.word	0x000dd040

000d8d9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8d9c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8d9e:	4e18      	ldr	r6, [pc, #96]	; (d8e00 <pinAvailable+0x64>)
   d8da0:	6831      	ldr	r1, [r6, #0]
   d8da2:	f011 0501 	ands.w	r5, r1, #1
   d8da6:	4604      	mov	r4, r0
   d8da8:	d10a      	bne.n	d8dc0 <pinAvailable+0x24>
   d8daa:	4630      	mov	r0, r6
   d8dac:	f7fb f986 	bl	d40bc <__cxa_guard_acquire>
   d8db0:	b130      	cbz	r0, d8dc0 <pinAvailable+0x24>
   d8db2:	4629      	mov	r1, r5
   d8db4:	4813      	ldr	r0, [pc, #76]	; (d8e04 <pinAvailable+0x68>)
   d8db6:	f7fe f94f 	bl	d7058 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8dba:	4630      	mov	r0, r6
   d8dbc:	f7fb f983 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8dc0:	4810      	ldr	r0, [pc, #64]	; (d8e04 <pinAvailable+0x68>)
   d8dc2:	f7fe fa6b 	bl	d729c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8dc6:	b128      	cbz	r0, d8dd4 <pinAvailable+0x38>
   d8dc8:	f1a4 030b 	sub.w	r3, r4, #11
   d8dcc:	2b02      	cmp	r3, #2
   d8dce:	d801      	bhi.n	d8dd4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8dd0:	2000      	movs	r0, #0
   d8dd2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8dd4:	f000 f8ac 	bl	d8f30 <_Z19__fetch_global_Wirev>
   d8dd8:	f7ff fb75 	bl	d84c6 <_ZN7TwoWire9isEnabledEv>
   d8ddc:	b108      	cbz	r0, d8de2 <pinAvailable+0x46>
   d8dde:	2c01      	cmp	r4, #1
   d8de0:	d9f6      	bls.n	d8dd0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8de2:	f7ff fab3 	bl	d834c <_Z22__fetch_global_Serial1v>
   d8de6:	f7ff faad 	bl	d8344 <_ZN11USARTSerial9isEnabledEv>
   d8dea:	b118      	cbz	r0, d8df4 <pinAvailable+0x58>
   d8dec:	f1a4 0309 	sub.w	r3, r4, #9
   d8df0:	2b01      	cmp	r3, #1
   d8df2:	d9ed      	bls.n	d8dd0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8df4:	2c23      	cmp	r4, #35	; 0x23
   d8df6:	bf8c      	ite	hi
   d8df8:	2000      	movhi	r0, #0
   d8dfa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8dfc:	bd70      	pop	{r4, r5, r6, pc}
   d8dfe:	bf00      	nop
   d8e00:	2003e3a4 	.word	0x2003e3a4
   d8e04:	2003e3a8 	.word	0x2003e3a8

000d8e08 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e08:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8e0a:	b538      	push	{r3, r4, r5, lr}
   d8e0c:	4604      	mov	r4, r0
   d8e0e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e10:	d80a      	bhi.n	d8e28 <pinMode+0x20>
   d8e12:	29ff      	cmp	r1, #255	; 0xff
   d8e14:	d008      	beq.n	d8e28 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e16:	f7ff ffc1 	bl	d8d9c <pinAvailable>
   d8e1a:	b128      	cbz	r0, d8e28 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8e1c:	4629      	mov	r1, r5
   d8e1e:	4620      	mov	r0, r4
}
   d8e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8e24:	f7fd bdb8 	b.w	d6998 <HAL_Pin_Mode>
   d8e28:	bd38      	pop	{r3, r4, r5, pc}

000d8e2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8e2a:	b538      	push	{r3, r4, r5, lr}
   d8e2c:	4604      	mov	r4, r0
   d8e2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8e30:	f7fd fdba 	bl	d69a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8e34:	28ff      	cmp	r0, #255	; 0xff
   d8e36:	d010      	beq.n	d8e5a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8e38:	2806      	cmp	r0, #6
   d8e3a:	d804      	bhi.n	d8e46 <digitalWrite+0x1c>
   d8e3c:	234d      	movs	r3, #77	; 0x4d
   d8e3e:	fa23 f000 	lsr.w	r0, r3, r0
   d8e42:	07c3      	lsls	r3, r0, #31
   d8e44:	d409      	bmi.n	d8e5a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8e46:	4620      	mov	r0, r4
   d8e48:	f7ff ffa8 	bl	d8d9c <pinAvailable>
   d8e4c:	b128      	cbz	r0, d8e5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8e4e:	4629      	mov	r1, r5
   d8e50:	4620      	mov	r0, r4
}
   d8e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8e56:	f7fd bdaf 	b.w	d69b8 <HAL_GPIO_Write>
   d8e5a:	bd38      	pop	{r3, r4, r5, pc}

000d8e5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8e5c:	b510      	push	{r4, lr}
   d8e5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8e60:	f7fd fda2 	bl	d69a8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8e64:	3804      	subs	r0, #4
   d8e66:	b2c0      	uxtb	r0, r0
   d8e68:	2801      	cmp	r0, #1
   d8e6a:	d908      	bls.n	d8e7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8e6c:	4620      	mov	r0, r4
   d8e6e:	f7ff ff95 	bl	d8d9c <pinAvailable>
   d8e72:	b120      	cbz	r0, d8e7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8e74:	4620      	mov	r0, r4
}
   d8e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8e7a:	f7fd bda5 	b.w	d69c8 <HAL_GPIO_Read>
}
   d8e7e:	2000      	movs	r0, #0
   d8e80:	bd10      	pop	{r4, pc}

000d8e82 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8e82:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8e84:	b510      	push	{r4, lr}
   d8e86:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8e88:	bf9c      	itt	ls
   d8e8a:	340e      	addls	r4, #14
   d8e8c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e8e:	4620      	mov	r0, r4
   d8e90:	f7ff ff84 	bl	d8d9c <pinAvailable>
   d8e94:	b150      	cbz	r0, d8eac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8e96:	2103      	movs	r1, #3
   d8e98:	4620      	mov	r0, r4
   d8e9a:	f7fd fd75 	bl	d6988 <HAL_Validate_Pin_Function>
   d8e9e:	2803      	cmp	r0, #3
   d8ea0:	d104      	bne.n	d8eac <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8ea2:	4620      	mov	r0, r4
}
   d8ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8ea8:	f7fd bd96 	b.w	d69d8 <HAL_ADC_Read>
}
   d8eac:	2000      	movs	r0, #0
   d8eae:	bd10      	pop	{r4, pc}

000d8eb0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d8eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8eb4:	4690      	mov	r8, r2
   d8eb6:	461e      	mov	r6, r3
   d8eb8:	2407      	movs	r4, #7
   d8eba:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d8ebc:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d8ebe:	f1b8 0f00 	cmp.w	r8, #0
   d8ec2:	d104      	bne.n	d8ece <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d8ec4:	f1c4 0107 	rsb	r1, r4, #7
   d8ec8:	fa46 f101 	asr.w	r1, r6, r1
   d8ecc:	e001      	b.n	d8ed2 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d8ece:	fa46 f104 	asr.w	r1, r6, r4
   d8ed2:	f001 0101 	and.w	r1, r1, #1
   d8ed6:	4638      	mov	r0, r7
   d8ed8:	f7ff ffa7 	bl	d8e2a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d8edc:	2101      	movs	r1, #1
   d8ede:	4628      	mov	r0, r5
   d8ee0:	f7ff ffa3 	bl	d8e2a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d8ee4:	2100      	movs	r1, #0
   d8ee6:	4628      	mov	r0, r5
   d8ee8:	f7ff ff9f 	bl	d8e2a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d8eec:	f114 34ff 	adds.w	r4, r4, #4294967295
   d8ef0:	d2e5      	bcs.n	d8ebe <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d8ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8ef6 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d8ef6:	f7fd bd77 	b.w	d69e8 <HAL_Pulse_In>
	...

000d8efc <_Z17acquireWireBufferv>:
   d8efc:	b570      	push	{r4, r5, r6, lr}
   d8efe:	4604      	mov	r4, r0
   d8f00:	2514      	movs	r5, #20
   d8f02:	462a      	mov	r2, r5
   d8f04:	4e09      	ldr	r6, [pc, #36]	; (d8f2c <_Z17acquireWireBufferv+0x30>)
   d8f06:	2100      	movs	r1, #0
   d8f08:	f002 fc30 	bl	db76c <memset>
   d8f0c:	8025      	strh	r5, [r4, #0]
   d8f0e:	2520      	movs	r5, #32
   d8f10:	4631      	mov	r1, r6
   d8f12:	60a5      	str	r5, [r4, #8]
   d8f14:	6125      	str	r5, [r4, #16]
   d8f16:	4628      	mov	r0, r5
   d8f18:	f000 f840 	bl	d8f9c <_ZnajRKSt9nothrow_t>
   d8f1c:	4631      	mov	r1, r6
   d8f1e:	6060      	str	r0, [r4, #4]
   d8f20:	4628      	mov	r0, r5
   d8f22:	f000 f83b 	bl	d8f9c <_ZnajRKSt9nothrow_t>
   d8f26:	60e0      	str	r0, [r4, #12]
   d8f28:	4620      	mov	r0, r4
   d8f2a:	bd70      	pop	{r4, r5, r6, pc}
   d8f2c:	000dd06c 	.word	0x000dd06c

000d8f30 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8f30:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8f32:	4d0e      	ldr	r5, [pc, #56]	; (d8f6c <_Z19__fetch_global_Wirev+0x3c>)
   d8f34:	6829      	ldr	r1, [r5, #0]
   d8f36:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8f3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8f3c:	d113      	bne.n	d8f66 <_Z19__fetch_global_Wirev+0x36>
   d8f3e:	4628      	mov	r0, r5
   d8f40:	f7fb f8bc 	bl	d40bc <__cxa_guard_acquire>
   d8f44:	b178      	cbz	r0, d8f66 <_Z19__fetch_global_Wirev+0x36>
   d8f46:	a801      	add	r0, sp, #4
   d8f48:	f7ff ffd8 	bl	d8efc <_Z17acquireWireBufferv>
   d8f4c:	aa01      	add	r2, sp, #4
   d8f4e:	4621      	mov	r1, r4
   d8f50:	4807      	ldr	r0, [pc, #28]	; (d8f70 <_Z19__fetch_global_Wirev+0x40>)
   d8f52:	f7ff fa61 	bl	d8418 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8f56:	4628      	mov	r0, r5
   d8f58:	f7fb f8b5 	bl	d40c6 <__cxa_guard_release>
   d8f5c:	4a05      	ldr	r2, [pc, #20]	; (d8f74 <_Z19__fetch_global_Wirev+0x44>)
   d8f5e:	4906      	ldr	r1, [pc, #24]	; (d8f78 <_Z19__fetch_global_Wirev+0x48>)
   d8f60:	4803      	ldr	r0, [pc, #12]	; (d8f70 <_Z19__fetch_global_Wirev+0x40>)
   d8f62:	f000 f80b 	bl	d8f7c <__aeabi_atexit>
	return wire;
}
   d8f66:	4802      	ldr	r0, [pc, #8]	; (d8f70 <_Z19__fetch_global_Wirev+0x40>)
   d8f68:	b007      	add	sp, #28
   d8f6a:	bd30      	pop	{r4, r5, pc}
   d8f6c:	2003e710 	.word	0x2003e710
   d8f70:	2003e714 	.word	0x2003e714
   d8f74:	2003e148 	.word	0x2003e148
   d8f78:	000d83c1 	.word	0x000d83c1

000d8f7c <__aeabi_atexit>:
   d8f7c:	460b      	mov	r3, r1
   d8f7e:	4601      	mov	r1, r0
   d8f80:	4618      	mov	r0, r3
   d8f82:	f002 bab3 	b.w	db4ec <__cxa_atexit>
	...

000d8f88 <_ZSt15get_new_handlerv>:
   d8f88:	4b02      	ldr	r3, [pc, #8]	; (d8f94 <_ZSt15get_new_handlerv+0xc>)
   d8f8a:	6818      	ldr	r0, [r3, #0]
   d8f8c:	f3bf 8f5f 	dmb	sy
   d8f90:	4770      	bx	lr
   d8f92:	bf00      	nop
   d8f94:	2003e728 	.word	0x2003e728

000d8f98 <_ZdlPvj>:
   d8f98:	f7fb b881 	b.w	d409e <_ZdlPv>

000d8f9c <_ZnajRKSt9nothrow_t>:
   d8f9c:	f000 b800 	b.w	d8fa0 <_ZnwjRKSt9nothrow_t>

000d8fa0 <_ZnwjRKSt9nothrow_t>:
   d8fa0:	b510      	push	{r4, lr}
   d8fa2:	2800      	cmp	r0, #0
   d8fa4:	bf14      	ite	ne
   d8fa6:	4604      	movne	r4, r0
   d8fa8:	2401      	moveq	r4, #1
   d8faa:	4620      	mov	r0, r4
   d8fac:	f7fd ffc0 	bl	d6f30 <malloc>
   d8fb0:	b920      	cbnz	r0, d8fbc <_ZnwjRKSt9nothrow_t+0x1c>
   d8fb2:	f7ff ffe9 	bl	d8f88 <_ZSt15get_new_handlerv>
   d8fb6:	b108      	cbz	r0, d8fbc <_ZnwjRKSt9nothrow_t+0x1c>
   d8fb8:	4780      	blx	r0
   d8fba:	e7f6      	b.n	d8faa <_ZnwjRKSt9nothrow_t+0xa>
   d8fbc:	bd10      	pop	{r4, pc}

000d8fbe <_ZSt25__throw_bad_function_callv>:
   d8fbe:	b508      	push	{r3, lr}
   d8fc0:	f7fd ffee 	bl	d6fa0 <abort>

000d8fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8fc4:	4b18      	ldr	r3, [pc, #96]	; (d9028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8fc6:	681a      	ldr	r2, [r3, #0]
   d8fc8:	07d1      	lsls	r1, r2, #31
   d8fca:	bf5c      	itt	pl
   d8fcc:	2201      	movpl	r2, #1
   d8fce:	601a      	strpl	r2, [r3, #0]
   d8fd0:	4b16      	ldr	r3, [pc, #88]	; (d902c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8fd2:	681a      	ldr	r2, [r3, #0]
   d8fd4:	07d2      	lsls	r2, r2, #31
   d8fd6:	bf5c      	itt	pl
   d8fd8:	2201      	movpl	r2, #1
   d8fda:	601a      	strpl	r2, [r3, #0]
   d8fdc:	4b14      	ldr	r3, [pc, #80]	; (d9030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8fde:	681a      	ldr	r2, [r3, #0]
   d8fe0:	07d0      	lsls	r0, r2, #31
   d8fe2:	bf5c      	itt	pl
   d8fe4:	2201      	movpl	r2, #1
   d8fe6:	601a      	strpl	r2, [r3, #0]
   d8fe8:	4b12      	ldr	r3, [pc, #72]	; (d9034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8fea:	681a      	ldr	r2, [r3, #0]
   d8fec:	07d1      	lsls	r1, r2, #31
   d8fee:	bf5c      	itt	pl
   d8ff0:	2201      	movpl	r2, #1
   d8ff2:	601a      	strpl	r2, [r3, #0]
   d8ff4:	4b10      	ldr	r3, [pc, #64]	; (d9038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8ff6:	681a      	ldr	r2, [r3, #0]
   d8ff8:	07d2      	lsls	r2, r2, #31
   d8ffa:	bf5c      	itt	pl
   d8ffc:	2201      	movpl	r2, #1
   d8ffe:	601a      	strpl	r2, [r3, #0]
   d9000:	4b0e      	ldr	r3, [pc, #56]	; (d903c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9002:	681a      	ldr	r2, [r3, #0]
   d9004:	07d0      	lsls	r0, r2, #31
   d9006:	bf5c      	itt	pl
   d9008:	2201      	movpl	r2, #1
   d900a:	601a      	strpl	r2, [r3, #0]
   d900c:	4b0c      	ldr	r3, [pc, #48]	; (d9040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d900e:	681a      	ldr	r2, [r3, #0]
   d9010:	07d1      	lsls	r1, r2, #31
   d9012:	bf5c      	itt	pl
   d9014:	2201      	movpl	r2, #1
   d9016:	601a      	strpl	r2, [r3, #0]
   d9018:	4b0a      	ldr	r3, [pc, #40]	; (d9044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d901a:	681a      	ldr	r2, [r3, #0]
   d901c:	07d2      	lsls	r2, r2, #31
   d901e:	bf5c      	itt	pl
   d9020:	2201      	movpl	r2, #1
   d9022:	601a      	strpl	r2, [r3, #0]
   d9024:	4770      	bx	lr
   d9026:	bf00      	nop
   d9028:	2003e748 	.word	0x2003e748
   d902c:	2003e744 	.word	0x2003e744
   d9030:	2003e740 	.word	0x2003e740
   d9034:	2003e73c 	.word	0x2003e73c
   d9038:	2003e738 	.word	0x2003e738
   d903c:	2003e734 	.word	0x2003e734
   d9040:	2003e730 	.word	0x2003e730
   d9044:	2003e72c 	.word	0x2003e72c

000d9048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9048:	4b24      	ldr	r3, [pc, #144]	; (d90dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d904a:	681a      	ldr	r2, [r3, #0]
   d904c:	07d0      	lsls	r0, r2, #31
   d904e:	bf5c      	itt	pl
   d9050:	2201      	movpl	r2, #1
   d9052:	601a      	strpl	r2, [r3, #0]
   d9054:	4b22      	ldr	r3, [pc, #136]	; (d90e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d9056:	681a      	ldr	r2, [r3, #0]
   d9058:	07d1      	lsls	r1, r2, #31
   d905a:	bf5c      	itt	pl
   d905c:	2201      	movpl	r2, #1
   d905e:	601a      	strpl	r2, [r3, #0]
   d9060:	4b20      	ldr	r3, [pc, #128]	; (d90e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9062:	681a      	ldr	r2, [r3, #0]
   d9064:	07d2      	lsls	r2, r2, #31
   d9066:	bf5c      	itt	pl
   d9068:	2201      	movpl	r2, #1
   d906a:	601a      	strpl	r2, [r3, #0]
   d906c:	4b1e      	ldr	r3, [pc, #120]	; (d90e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d906e:	681a      	ldr	r2, [r3, #0]
   d9070:	07d0      	lsls	r0, r2, #31
   d9072:	bf5c      	itt	pl
   d9074:	2201      	movpl	r2, #1
   d9076:	601a      	strpl	r2, [r3, #0]
   d9078:	4b1c      	ldr	r3, [pc, #112]	; (d90ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d907a:	681a      	ldr	r2, [r3, #0]
   d907c:	07d1      	lsls	r1, r2, #31
   d907e:	bf5c      	itt	pl
   d9080:	2201      	movpl	r2, #1
   d9082:	601a      	strpl	r2, [r3, #0]
   d9084:	4b1a      	ldr	r3, [pc, #104]	; (d90f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d9086:	681a      	ldr	r2, [r3, #0]
   d9088:	07d2      	lsls	r2, r2, #31
   d908a:	bf5c      	itt	pl
   d908c:	2201      	movpl	r2, #1
   d908e:	601a      	strpl	r2, [r3, #0]
   d9090:	4b18      	ldr	r3, [pc, #96]	; (d90f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9092:	681a      	ldr	r2, [r3, #0]
   d9094:	07d0      	lsls	r0, r2, #31
   d9096:	bf5c      	itt	pl
   d9098:	2201      	movpl	r2, #1
   d909a:	601a      	strpl	r2, [r3, #0]
   d909c:	4b16      	ldr	r3, [pc, #88]	; (d90f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d909e:	681a      	ldr	r2, [r3, #0]
   d90a0:	07d1      	lsls	r1, r2, #31
   d90a2:	bf5c      	itt	pl
   d90a4:	2201      	movpl	r2, #1
   d90a6:	601a      	strpl	r2, [r3, #0]
   d90a8:	4b14      	ldr	r3, [pc, #80]	; (d90fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d90aa:	681a      	ldr	r2, [r3, #0]
   d90ac:	07d2      	lsls	r2, r2, #31
   d90ae:	bf5c      	itt	pl
   d90b0:	2201      	movpl	r2, #1
   d90b2:	601a      	strpl	r2, [r3, #0]
   d90b4:	4b12      	ldr	r3, [pc, #72]	; (d9100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d90b6:	681a      	ldr	r2, [r3, #0]
   d90b8:	07d0      	lsls	r0, r2, #31
   d90ba:	bf5c      	itt	pl
   d90bc:	2201      	movpl	r2, #1
   d90be:	601a      	strpl	r2, [r3, #0]
   d90c0:	4b10      	ldr	r3, [pc, #64]	; (d9104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d90c2:	681a      	ldr	r2, [r3, #0]
   d90c4:	07d1      	lsls	r1, r2, #31
   d90c6:	bf5c      	itt	pl
   d90c8:	2201      	movpl	r2, #1
   d90ca:	601a      	strpl	r2, [r3, #0]
   d90cc:	4b0e      	ldr	r3, [pc, #56]	; (d9108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d90ce:	681a      	ldr	r2, [r3, #0]
   d90d0:	07d2      	lsls	r2, r2, #31
   d90d2:	bf5c      	itt	pl
   d90d4:	2201      	movpl	r2, #1
   d90d6:	601a      	strpl	r2, [r3, #0]
   d90d8:	4770      	bx	lr
   d90da:	bf00      	nop
   d90dc:	2003e778 	.word	0x2003e778
   d90e0:	2003e774 	.word	0x2003e774
   d90e4:	2003e770 	.word	0x2003e770
   d90e8:	2003e76c 	.word	0x2003e76c
   d90ec:	2003e768 	.word	0x2003e768
   d90f0:	2003e764 	.word	0x2003e764
   d90f4:	2003e760 	.word	0x2003e760
   d90f8:	2003e75c 	.word	0x2003e75c
   d90fc:	2003e758 	.word	0x2003e758
   d9100:	2003e754 	.word	0x2003e754
   d9104:	2003e750 	.word	0x2003e750
   d9108:	2003e74c 	.word	0x2003e74c

000d910c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d910c:	4b24      	ldr	r3, [pc, #144]	; (d91a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d910e:	681a      	ldr	r2, [r3, #0]
   d9110:	07d0      	lsls	r0, r2, #31
   d9112:	bf5c      	itt	pl
   d9114:	2201      	movpl	r2, #1
   d9116:	601a      	strpl	r2, [r3, #0]
   d9118:	4b22      	ldr	r3, [pc, #136]	; (d91a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d911a:	681a      	ldr	r2, [r3, #0]
   d911c:	07d1      	lsls	r1, r2, #31
   d911e:	bf5c      	itt	pl
   d9120:	2201      	movpl	r2, #1
   d9122:	601a      	strpl	r2, [r3, #0]
   d9124:	4b20      	ldr	r3, [pc, #128]	; (d91a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9126:	681a      	ldr	r2, [r3, #0]
   d9128:	07d2      	lsls	r2, r2, #31
   d912a:	bf5c      	itt	pl
   d912c:	2201      	movpl	r2, #1
   d912e:	601a      	strpl	r2, [r3, #0]
   d9130:	4b1e      	ldr	r3, [pc, #120]	; (d91ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9132:	681a      	ldr	r2, [r3, #0]
   d9134:	07d0      	lsls	r0, r2, #31
   d9136:	bf5c      	itt	pl
   d9138:	2201      	movpl	r2, #1
   d913a:	601a      	strpl	r2, [r3, #0]
   d913c:	4b1c      	ldr	r3, [pc, #112]	; (d91b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d913e:	681a      	ldr	r2, [r3, #0]
   d9140:	07d1      	lsls	r1, r2, #31
   d9142:	bf5c      	itt	pl
   d9144:	2201      	movpl	r2, #1
   d9146:	601a      	strpl	r2, [r3, #0]
   d9148:	4b1a      	ldr	r3, [pc, #104]	; (d91b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d914a:	681a      	ldr	r2, [r3, #0]
   d914c:	07d2      	lsls	r2, r2, #31
   d914e:	bf5c      	itt	pl
   d9150:	2201      	movpl	r2, #1
   d9152:	601a      	strpl	r2, [r3, #0]
   d9154:	4b18      	ldr	r3, [pc, #96]	; (d91b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9156:	681a      	ldr	r2, [r3, #0]
   d9158:	07d0      	lsls	r0, r2, #31
   d915a:	bf5c      	itt	pl
   d915c:	2201      	movpl	r2, #1
   d915e:	601a      	strpl	r2, [r3, #0]
   d9160:	4b16      	ldr	r3, [pc, #88]	; (d91bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9162:	681a      	ldr	r2, [r3, #0]
   d9164:	07d1      	lsls	r1, r2, #31
   d9166:	bf5c      	itt	pl
   d9168:	2201      	movpl	r2, #1
   d916a:	601a      	strpl	r2, [r3, #0]
   d916c:	4b14      	ldr	r3, [pc, #80]	; (d91c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d916e:	681a      	ldr	r2, [r3, #0]
   d9170:	07d2      	lsls	r2, r2, #31
   d9172:	bf5c      	itt	pl
   d9174:	2201      	movpl	r2, #1
   d9176:	601a      	strpl	r2, [r3, #0]
   d9178:	4b12      	ldr	r3, [pc, #72]	; (d91c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d917a:	681a      	ldr	r2, [r3, #0]
   d917c:	07d0      	lsls	r0, r2, #31
   d917e:	bf5c      	itt	pl
   d9180:	2201      	movpl	r2, #1
   d9182:	601a      	strpl	r2, [r3, #0]
   d9184:	4b10      	ldr	r3, [pc, #64]	; (d91c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9186:	681a      	ldr	r2, [r3, #0]
   d9188:	07d1      	lsls	r1, r2, #31
   d918a:	bf5c      	itt	pl
   d918c:	2201      	movpl	r2, #1
   d918e:	601a      	strpl	r2, [r3, #0]
   d9190:	4b0e      	ldr	r3, [pc, #56]	; (d91cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9192:	681a      	ldr	r2, [r3, #0]
   d9194:	07d2      	lsls	r2, r2, #31
   d9196:	bf5c      	itt	pl
   d9198:	2201      	movpl	r2, #1
   d919a:	601a      	strpl	r2, [r3, #0]
   d919c:	4770      	bx	lr
   d919e:	bf00      	nop
   d91a0:	2003e7a8 	.word	0x2003e7a8
   d91a4:	2003e7a4 	.word	0x2003e7a4
   d91a8:	2003e7a0 	.word	0x2003e7a0
   d91ac:	2003e79c 	.word	0x2003e79c
   d91b0:	2003e798 	.word	0x2003e798
   d91b4:	2003e794 	.word	0x2003e794
   d91b8:	2003e790 	.word	0x2003e790
   d91bc:	2003e78c 	.word	0x2003e78c
   d91c0:	2003e788 	.word	0x2003e788
   d91c4:	2003e784 	.word	0x2003e784
   d91c8:	2003e780 	.word	0x2003e780
   d91cc:	2003e77c 	.word	0x2003e77c

000d91d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d91d0:	4b18      	ldr	r3, [pc, #96]	; (d9234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d91d2:	681a      	ldr	r2, [r3, #0]
   d91d4:	07d1      	lsls	r1, r2, #31
   d91d6:	bf5c      	itt	pl
   d91d8:	2201      	movpl	r2, #1
   d91da:	601a      	strpl	r2, [r3, #0]
   d91dc:	4b16      	ldr	r3, [pc, #88]	; (d9238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d91de:	681a      	ldr	r2, [r3, #0]
   d91e0:	07d2      	lsls	r2, r2, #31
   d91e2:	bf5c      	itt	pl
   d91e4:	2201      	movpl	r2, #1
   d91e6:	601a      	strpl	r2, [r3, #0]
   d91e8:	4b14      	ldr	r3, [pc, #80]	; (d923c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d91ea:	681a      	ldr	r2, [r3, #0]
   d91ec:	07d0      	lsls	r0, r2, #31
   d91ee:	bf5c      	itt	pl
   d91f0:	2201      	movpl	r2, #1
   d91f2:	601a      	strpl	r2, [r3, #0]
   d91f4:	4b12      	ldr	r3, [pc, #72]	; (d9240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d91f6:	681a      	ldr	r2, [r3, #0]
   d91f8:	07d1      	lsls	r1, r2, #31
   d91fa:	bf5c      	itt	pl
   d91fc:	2201      	movpl	r2, #1
   d91fe:	601a      	strpl	r2, [r3, #0]
   d9200:	4b10      	ldr	r3, [pc, #64]	; (d9244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9202:	681a      	ldr	r2, [r3, #0]
   d9204:	07d2      	lsls	r2, r2, #31
   d9206:	bf5c      	itt	pl
   d9208:	2201      	movpl	r2, #1
   d920a:	601a      	strpl	r2, [r3, #0]
   d920c:	4b0e      	ldr	r3, [pc, #56]	; (d9248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d920e:	681a      	ldr	r2, [r3, #0]
   d9210:	07d0      	lsls	r0, r2, #31
   d9212:	bf5c      	itt	pl
   d9214:	2201      	movpl	r2, #1
   d9216:	601a      	strpl	r2, [r3, #0]
   d9218:	4b0c      	ldr	r3, [pc, #48]	; (d924c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d921a:	681a      	ldr	r2, [r3, #0]
   d921c:	07d1      	lsls	r1, r2, #31
   d921e:	bf5c      	itt	pl
   d9220:	2201      	movpl	r2, #1
   d9222:	601a      	strpl	r2, [r3, #0]
   d9224:	4b0a      	ldr	r3, [pc, #40]	; (d9250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9226:	681a      	ldr	r2, [r3, #0]
   d9228:	07d2      	lsls	r2, r2, #31
   d922a:	bf5c      	itt	pl
   d922c:	2201      	movpl	r2, #1
   d922e:	601a      	strpl	r2, [r3, #0]
   d9230:	4770      	bx	lr
   d9232:	bf00      	nop
   d9234:	2003e7c8 	.word	0x2003e7c8
   d9238:	2003e7c4 	.word	0x2003e7c4
   d923c:	2003e7c0 	.word	0x2003e7c0
   d9240:	2003e7bc 	.word	0x2003e7bc
   d9244:	2003e7b8 	.word	0x2003e7b8
   d9248:	2003e7b4 	.word	0x2003e7b4
   d924c:	2003e7b0 	.word	0x2003e7b0
   d9250:	2003e7ac 	.word	0x2003e7ac
   d9254:	00000000 	.word	0x00000000

000d9258 <pow>:
   d9258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d925c:	ed2d 8b02 	vpush	{d8}
   d9260:	f8df a324 	ldr.w	sl, [pc, #804]	; d9588 <pow+0x330>
   d9264:	b08b      	sub	sp, #44	; 0x2c
   d9266:	ec57 6b10 	vmov	r6, r7, d0
   d926a:	ec55 4b11 	vmov	r4, r5, d1
   d926e:	f000 f98f 	bl	d9590 <__ieee754_pow>
   d9272:	f99a 8000 	ldrsb.w	r8, [sl]
   d9276:	eeb0 8a40 	vmov.f32	s16, s0
   d927a:	eef0 8a60 	vmov.f32	s17, s1
   d927e:	f1b8 3fff 	cmp.w	r8, #4294967295
   d9282:	d048      	beq.n	d9316 <pow+0xbe>
   d9284:	4622      	mov	r2, r4
   d9286:	462b      	mov	r3, r5
   d9288:	4620      	mov	r0, r4
   d928a:	4629      	mov	r1, r5
   d928c:	f001 fd6e 	bl	dad6c <__aeabi_dcmpun>
   d9290:	4683      	mov	fp, r0
   d9292:	2800      	cmp	r0, #0
   d9294:	d13f      	bne.n	d9316 <pow+0xbe>
   d9296:	4632      	mov	r2, r6
   d9298:	463b      	mov	r3, r7
   d929a:	4630      	mov	r0, r6
   d929c:	4639      	mov	r1, r7
   d929e:	f001 fd65 	bl	dad6c <__aeabi_dcmpun>
   d92a2:	4681      	mov	r9, r0
   d92a4:	2800      	cmp	r0, #0
   d92a6:	f040 8090 	bne.w	d93ca <pow+0x172>
   d92aa:	4630      	mov	r0, r6
   d92ac:	4639      	mov	r1, r7
   d92ae:	2200      	movs	r2, #0
   d92b0:	2300      	movs	r3, #0
   d92b2:	f001 fd29 	bl	dad08 <__aeabi_dcmpeq>
   d92b6:	2800      	cmp	r0, #0
   d92b8:	d036      	beq.n	d9328 <pow+0xd0>
   d92ba:	2200      	movs	r2, #0
   d92bc:	2300      	movs	r3, #0
   d92be:	4620      	mov	r0, r4
   d92c0:	4629      	mov	r1, r5
   d92c2:	f001 fd21 	bl	dad08 <__aeabi_dcmpeq>
   d92c6:	4683      	mov	fp, r0
   d92c8:	b1b8      	cbz	r0, d92fa <pow+0xa2>
   d92ca:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d9560 <pow+0x308>
   d92ce:	2201      	movs	r2, #1
   d92d0:	4ba9      	ldr	r3, [pc, #676]	; (d9578 <pow+0x320>)
   d92d2:	f8cd 9020 	str.w	r9, [sp, #32]
   d92d6:	9200      	str	r2, [sp, #0]
   d92d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d92dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d92e0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d92e4:	9301      	str	r3, [sp, #4]
   d92e6:	f1b8 0f00 	cmp.w	r8, #0
   d92ea:	d05b      	beq.n	d93a4 <pow+0x14c>
   d92ec:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d9568 <pow+0x310>
   d92f0:	b00b      	add	sp, #44	; 0x2c
   d92f2:	ecbd 8b02 	vpop	{d8}
   d92f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92fa:	ec45 4b10 	vmov	d0, r4, r5
   d92fe:	f000 ffa7 	bl	da250 <finite>
   d9302:	b140      	cbz	r0, d9316 <pow+0xbe>
   d9304:	2200      	movs	r2, #0
   d9306:	2300      	movs	r3, #0
   d9308:	4620      	mov	r0, r4
   d930a:	4629      	mov	r1, r5
   d930c:	f001 fd06 	bl	dad1c <__aeabi_dcmplt>
   d9310:	2800      	cmp	r0, #0
   d9312:	f040 80c5 	bne.w	d94a0 <pow+0x248>
   d9316:	eeb0 0a48 	vmov.f32	s0, s16
   d931a:	eef0 0a68 	vmov.f32	s1, s17
   d931e:	b00b      	add	sp, #44	; 0x2c
   d9320:	ecbd 8b02 	vpop	{d8}
   d9324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9328:	eeb0 0a48 	vmov.f32	s0, s16
   d932c:	eef0 0a68 	vmov.f32	s1, s17
   d9330:	f000 ff8e 	bl	da250 <finite>
   d9334:	4680      	mov	r8, r0
   d9336:	2800      	cmp	r0, #0
   d9338:	d061      	beq.n	d93fe <pow+0x1a6>
   d933a:	f04f 0800 	mov.w	r8, #0
   d933e:	f04f 0900 	mov.w	r9, #0
   d9342:	ec51 0b18 	vmov	r0, r1, d8
   d9346:	4642      	mov	r2, r8
   d9348:	464b      	mov	r3, r9
   d934a:	f001 fcdd 	bl	dad08 <__aeabi_dcmpeq>
   d934e:	2800      	cmp	r0, #0
   d9350:	d0e1      	beq.n	d9316 <pow+0xbe>
   d9352:	ec47 6b10 	vmov	d0, r6, r7
   d9356:	f000 ff7b 	bl	da250 <finite>
   d935a:	2800      	cmp	r0, #0
   d935c:	d0db      	beq.n	d9316 <pow+0xbe>
   d935e:	ec45 4b10 	vmov	d0, r4, r5
   d9362:	f000 ff75 	bl	da250 <finite>
   d9366:	2800      	cmp	r0, #0
   d9368:	d0d5      	beq.n	d9316 <pow+0xbe>
   d936a:	f99a 3000 	ldrsb.w	r3, [sl]
   d936e:	4a82      	ldr	r2, [pc, #520]	; (d9578 <pow+0x320>)
   d9370:	9201      	str	r2, [sp, #4]
   d9372:	2104      	movs	r1, #4
   d9374:	2200      	movs	r2, #0
   d9376:	2b02      	cmp	r3, #2
   d9378:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d937c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9380:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d9384:	9100      	str	r1, [sp, #0]
   d9386:	9208      	str	r2, [sp, #32]
   d9388:	d003      	beq.n	d9392 <pow+0x13a>
   d938a:	4668      	mov	r0, sp
   d938c:	f000 ff68 	bl	da260 <matherr>
   d9390:	b970      	cbnz	r0, d93b0 <pow+0x158>
   d9392:	f7fd fe15 	bl	d6fc0 <__errno>
   d9396:	2322      	movs	r3, #34	; 0x22
   d9398:	6003      	str	r3, [r0, #0]
   d939a:	e009      	b.n	d93b0 <pow+0x158>
   d939c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d9560 <pow+0x308>
   d93a0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d93a4:	4668      	mov	r0, sp
   d93a6:	f000 ff5b 	bl	da260 <matherr>
   d93aa:	2800      	cmp	r0, #0
   d93ac:	f000 808e 	beq.w	d94cc <pow+0x274>
   d93b0:	9b08      	ldr	r3, [sp, #32]
   d93b2:	b11b      	cbz	r3, d93bc <pow+0x164>
   d93b4:	f7fd fe04 	bl	d6fc0 <__errno>
   d93b8:	9b08      	ldr	r3, [sp, #32]
   d93ba:	6003      	str	r3, [r0, #0]
   d93bc:	ed9d 0b06 	vldr	d0, [sp, #24]
   d93c0:	b00b      	add	sp, #44	; 0x2c
   d93c2:	ecbd 8b02 	vpop	{d8}
   d93c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93ca:	2200      	movs	r2, #0
   d93cc:	2300      	movs	r3, #0
   d93ce:	4620      	mov	r0, r4
   d93d0:	4629      	mov	r1, r5
   d93d2:	f001 fc99 	bl	dad08 <__aeabi_dcmpeq>
   d93d6:	2800      	cmp	r0, #0
   d93d8:	d09d      	beq.n	d9316 <pow+0xbe>
   d93da:	ed9f 0b63 	vldr	d0, [pc, #396]	; d9568 <pow+0x310>
   d93de:	4b66      	ldr	r3, [pc, #408]	; (d9578 <pow+0x320>)
   d93e0:	f8cd b020 	str.w	fp, [sp, #32]
   d93e4:	2201      	movs	r2, #1
   d93e6:	f1b8 0f02 	cmp.w	r8, #2
   d93ea:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d93ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d93f2:	ed8d 0b06 	vstr	d0, [sp, #24]
   d93f6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d93fa:	d1d3      	bne.n	d93a4 <pow+0x14c>
   d93fc:	e78f      	b.n	d931e <pow+0xc6>
   d93fe:	ec47 6b10 	vmov	d0, r6, r7
   d9402:	f000 ff25 	bl	da250 <finite>
   d9406:	2800      	cmp	r0, #0
   d9408:	d097      	beq.n	d933a <pow+0xe2>
   d940a:	ec45 4b10 	vmov	d0, r4, r5
   d940e:	f000 ff1f 	bl	da250 <finite>
   d9412:	2800      	cmp	r0, #0
   d9414:	d091      	beq.n	d933a <pow+0xe2>
   d9416:	ec53 2b18 	vmov	r2, r3, d8
   d941a:	ee18 0a10 	vmov	r0, s16
   d941e:	4619      	mov	r1, r3
   d9420:	f001 fca4 	bl	dad6c <__aeabi_dcmpun>
   d9424:	2800      	cmp	r0, #0
   d9426:	d17c      	bne.n	d9522 <pow+0x2ca>
   d9428:	2303      	movs	r3, #3
   d942a:	f99a 8000 	ldrsb.w	r8, [sl]
   d942e:	9300      	str	r3, [sp, #0]
   d9430:	4b51      	ldr	r3, [pc, #324]	; (d9578 <pow+0x320>)
   d9432:	9008      	str	r0, [sp, #32]
   d9434:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9438:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d943c:	9301      	str	r3, [sp, #4]
   d943e:	f1b8 0f00 	cmp.w	r8, #0
   d9442:	d148      	bne.n	d94d6 <pow+0x27e>
   d9444:	f8df 9144 	ldr.w	r9, [pc, #324]	; d958c <pow+0x334>
   d9448:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d944c:	2200      	movs	r2, #0
   d944e:	2300      	movs	r3, #0
   d9450:	4630      	mov	r0, r6
   d9452:	4639      	mov	r1, r7
   d9454:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d9458:	f001 fc60 	bl	dad1c <__aeabi_dcmplt>
   d945c:	2800      	cmp	r0, #0
   d945e:	d094      	beq.n	d938a <pow+0x132>
   d9460:	2200      	movs	r2, #0
   d9462:	4b46      	ldr	r3, [pc, #280]	; (d957c <pow+0x324>)
   d9464:	4620      	mov	r0, r4
   d9466:	4629      	mov	r1, r5
   d9468:	f001 f9e6 	bl	da838 <__aeabi_dmul>
   d946c:	4604      	mov	r4, r0
   d946e:	460d      	mov	r5, r1
   d9470:	ec45 4b10 	vmov	d0, r4, r5
   d9474:	f000 ff00 	bl	da278 <rint>
   d9478:	4620      	mov	r0, r4
   d947a:	ec53 2b10 	vmov	r2, r3, d0
   d947e:	4629      	mov	r1, r5
   d9480:	f001 fc42 	bl	dad08 <__aeabi_dcmpeq>
   d9484:	2800      	cmp	r0, #0
   d9486:	d149      	bne.n	d951c <pow+0x2c4>
   d9488:	4b3d      	ldr	r3, [pc, #244]	; (d9580 <pow+0x328>)
   d948a:	f99a 8000 	ldrsb.w	r8, [sl]
   d948e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9492:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d9496:	f1b8 0f02 	cmp.w	r8, #2
   d949a:	f47f af76 	bne.w	d938a <pow+0x132>
   d949e:	e778      	b.n	d9392 <pow+0x13a>
   d94a0:	4a35      	ldr	r2, [pc, #212]	; (d9578 <pow+0x320>)
   d94a2:	f99a 3000 	ldrsb.w	r3, [sl]
   d94a6:	f8cd b020 	str.w	fp, [sp, #32]
   d94aa:	2101      	movs	r1, #1
   d94ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d94b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d94b4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d94b8:	2b00      	cmp	r3, #0
   d94ba:	f43f af6f 	beq.w	d939c <pow+0x144>
   d94be:	4931      	ldr	r1, [pc, #196]	; (d9584 <pow+0x32c>)
   d94c0:	2000      	movs	r0, #0
   d94c2:	2b02      	cmp	r3, #2
   d94c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d94c8:	f47f af6c 	bne.w	d93a4 <pow+0x14c>
   d94cc:	f7fd fd78 	bl	d6fc0 <__errno>
   d94d0:	2321      	movs	r3, #33	; 0x21
   d94d2:	6003      	str	r3, [r0, #0]
   d94d4:	e76c      	b.n	d93b0 <pow+0x158>
   d94d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; d9570 <pow+0x318>
   d94da:	2200      	movs	r2, #0
   d94dc:	2300      	movs	r3, #0
   d94de:	4630      	mov	r0, r6
   d94e0:	4639      	mov	r1, r7
   d94e2:	ed8d 7b06 	vstr	d7, [sp, #24]
   d94e6:	f001 fc19 	bl	dad1c <__aeabi_dcmplt>
   d94ea:	2800      	cmp	r0, #0
   d94ec:	d0d3      	beq.n	d9496 <pow+0x23e>
   d94ee:	2200      	movs	r2, #0
   d94f0:	4b22      	ldr	r3, [pc, #136]	; (d957c <pow+0x324>)
   d94f2:	4620      	mov	r0, r4
   d94f4:	4629      	mov	r1, r5
   d94f6:	f001 f99f 	bl	da838 <__aeabi_dmul>
   d94fa:	4604      	mov	r4, r0
   d94fc:	460d      	mov	r5, r1
   d94fe:	ec45 4b10 	vmov	d0, r4, r5
   d9502:	f000 feb9 	bl	da278 <rint>
   d9506:	4620      	mov	r0, r4
   d9508:	ec53 2b10 	vmov	r2, r3, d0
   d950c:	4629      	mov	r1, r5
   d950e:	f001 fbfb 	bl	dad08 <__aeabi_dcmpeq>
   d9512:	b918      	cbnz	r0, d951c <pow+0x2c4>
   d9514:	4b1b      	ldr	r3, [pc, #108]	; (d9584 <pow+0x32c>)
   d9516:	2200      	movs	r2, #0
   d9518:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d951c:	f99a 8000 	ldrsb.w	r8, [sl]
   d9520:	e7b9      	b.n	d9496 <pow+0x23e>
   d9522:	4b15      	ldr	r3, [pc, #84]	; (d9578 <pow+0x320>)
   d9524:	f99a 9000 	ldrsb.w	r9, [sl]
   d9528:	f8cd 8020 	str.w	r8, [sp, #32]
   d952c:	2201      	movs	r2, #1
   d952e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9532:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9536:	e88d 000c 	stmia.w	sp, {r2, r3}
   d953a:	f1b9 0f00 	cmp.w	r9, #0
   d953e:	f43f af2d 	beq.w	d939c <pow+0x144>
   d9542:	2200      	movs	r2, #0
   d9544:	2300      	movs	r3, #0
   d9546:	4610      	mov	r0, r2
   d9548:	4619      	mov	r1, r3
   d954a:	f001 fa9f 	bl	daa8c <__aeabi_ddiv>
   d954e:	f1b9 0f02 	cmp.w	r9, #2
   d9552:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d9556:	d0b9      	beq.n	d94cc <pow+0x274>
   d9558:	e724      	b.n	d93a4 <pow+0x14c>
   d955a:	bf00      	nop
   d955c:	f3af 8000 	nop.w
	...
   d956c:	3ff00000 	.word	0x3ff00000
   d9570:	00000000 	.word	0x00000000
   d9574:	7ff00000 	.word	0x7ff00000
   d9578:	000dd070 	.word	0x000dd070
   d957c:	3fe00000 	.word	0x3fe00000
   d9580:	c7efffff 	.word	0xc7efffff
   d9584:	fff00000 	.word	0xfff00000
   d9588:	2003e08c 	.word	0x2003e08c
   d958c:	47efffff 	.word	0x47efffff

000d9590 <__ieee754_pow>:
   d9590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9594:	ec51 0b11 	vmov	r0, r1, d1
   d9598:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d959c:	ea58 0400 	orrs.w	r4, r8, r0
   d95a0:	b093      	sub	sp, #76	; 0x4c
   d95a2:	d03c      	beq.n	d961e <__ieee754_pow+0x8e>
   d95a4:	ec53 2b10 	vmov	r2, r3, d0
   d95a8:	4e6d      	ldr	r6, [pc, #436]	; (d9760 <__ieee754_pow+0x1d0>)
   d95aa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d95ae:	42b4      	cmp	r4, r6
   d95b0:	ee10 aa10 	vmov	sl, s0
   d95b4:	461d      	mov	r5, r3
   d95b6:	dc2b      	bgt.n	d9610 <__ieee754_pow+0x80>
   d95b8:	4689      	mov	r9, r1
   d95ba:	ee11 ea10 	vmov	lr, s2
   d95be:	d026      	beq.n	d960e <__ieee754_pow+0x7e>
   d95c0:	45b0      	cmp	r8, r6
   d95c2:	dc25      	bgt.n	d9610 <__ieee754_pow+0x80>
   d95c4:	4e66      	ldr	r6, [pc, #408]	; (d9760 <__ieee754_pow+0x1d0>)
   d95c6:	45b0      	cmp	r8, r6
   d95c8:	d077      	beq.n	d96ba <__ieee754_pow+0x12a>
   d95ca:	2d00      	cmp	r5, #0
   d95cc:	4616      	mov	r6, r2
   d95ce:	461f      	mov	r7, r3
   d95d0:	e9cd 0100 	strd	r0, r1, [sp]
   d95d4:	db75      	blt.n	d96c2 <__ieee754_pow+0x132>
   d95d6:	f04f 0b00 	mov.w	fp, #0
   d95da:	f1be 0f00 	cmp.w	lr, #0
   d95de:	d12d      	bne.n	d963c <__ieee754_pow+0xac>
   d95e0:	4b5f      	ldr	r3, [pc, #380]	; (d9760 <__ieee754_pow+0x1d0>)
   d95e2:	4598      	cmp	r8, r3
   d95e4:	f000 8089 	beq.w	d96fa <__ieee754_pow+0x16a>
   d95e8:	4b5e      	ldr	r3, [pc, #376]	; (d9764 <__ieee754_pow+0x1d4>)
   d95ea:	4598      	cmp	r8, r3
   d95ec:	d05e      	beq.n	d96ac <__ieee754_pow+0x11c>
   d95ee:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d95f2:	f000 83de 	beq.w	d9db2 <__ieee754_pow+0x822>
   d95f6:	4b5c      	ldr	r3, [pc, #368]	; (d9768 <__ieee754_pow+0x1d8>)
   d95f8:	4599      	cmp	r9, r3
   d95fa:	d11f      	bne.n	d963c <__ieee754_pow+0xac>
   d95fc:	2d00      	cmp	r5, #0
   d95fe:	db1d      	blt.n	d963c <__ieee754_pow+0xac>
   d9600:	ec47 6b10 	vmov	d0, r6, r7
   d9604:	b013      	add	sp, #76	; 0x4c
   d9606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d960a:	f000 bd49 	b.w	da0a0 <__ieee754_sqrt>
   d960e:	b15a      	cbz	r2, d9628 <__ieee754_pow+0x98>
   d9610:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d9614:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d9618:	ea54 030a 	orrs.w	r3, r4, sl
   d961c:	d106      	bne.n	d962c <__ieee754_pow+0x9c>
   d961e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d9748 <__ieee754_pow+0x1b8>
   d9622:	b013      	add	sp, #76	; 0x4c
   d9624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9628:	45a0      	cmp	r8, r4
   d962a:	ddcb      	ble.n	d95c4 <__ieee754_pow+0x34>
   d962c:	484f      	ldr	r0, [pc, #316]	; (d976c <__ieee754_pow+0x1dc>)
   d962e:	b013      	add	sp, #76	; 0x4c
   d9630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9634:	f000 be18 	b.w	da268 <nan>
   d9638:	f04f 0b00 	mov.w	fp, #0
   d963c:	ec47 6b10 	vmov	d0, r6, r7
   d9640:	f000 fdfe 	bl	da240 <fabs>
   d9644:	ec51 0b10 	vmov	r0, r1, d0
   d9648:	f1ba 0f00 	cmp.w	sl, #0
   d964c:	d01e      	beq.n	d968c <__ieee754_pow+0xfc>
   d964e:	0fed      	lsrs	r5, r5, #31
   d9650:	f105 3aff 	add.w	sl, r5, #4294967295
   d9654:	ea5b 030a 	orrs.w	r3, fp, sl
   d9658:	d063      	beq.n	d9722 <__ieee754_pow+0x192>
   d965a:	4b45      	ldr	r3, [pc, #276]	; (d9770 <__ieee754_pow+0x1e0>)
   d965c:	4598      	cmp	r8, r3
   d965e:	f340 808d 	ble.w	d977c <__ieee754_pow+0x1ec>
   d9662:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d9666:	4598      	cmp	r8, r3
   d9668:	f340 8438 	ble.w	d9edc <__ieee754_pow+0x94c>
   d966c:	4b41      	ldr	r3, [pc, #260]	; (d9774 <__ieee754_pow+0x1e4>)
   d966e:	429c      	cmp	r4, r3
   d9670:	dd62      	ble.n	d9738 <__ieee754_pow+0x1a8>
   d9672:	f1b9 0f00 	cmp.w	r9, #0
   d9676:	dd62      	ble.n	d973e <__ieee754_pow+0x1ae>
   d9678:	a335      	add	r3, pc, #212	; (adr r3, d9750 <__ieee754_pow+0x1c0>)
   d967a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d967e:	4610      	mov	r0, r2
   d9680:	4619      	mov	r1, r3
   d9682:	f001 f8d9 	bl	da838 <__aeabi_dmul>
   d9686:	ec41 0b10 	vmov	d0, r0, r1
   d968a:	e7ca      	b.n	d9622 <__ieee754_pow+0x92>
   d968c:	b124      	cbz	r4, d9698 <__ieee754_pow+0x108>
   d968e:	4b35      	ldr	r3, [pc, #212]	; (d9764 <__ieee754_pow+0x1d4>)
   d9690:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d9694:	429a      	cmp	r2, r3
   d9696:	d1da      	bne.n	d964e <__ieee754_pow+0xbe>
   d9698:	f1b9 0f00 	cmp.w	r9, #0
   d969c:	f2c0 83cb 	blt.w	d9e36 <__ieee754_pow+0x8a6>
   d96a0:	2d00      	cmp	r5, #0
   d96a2:	f2c0 8374 	blt.w	d9d8e <__ieee754_pow+0x7fe>
   d96a6:	ec41 0b10 	vmov	d0, r0, r1
   d96aa:	e7ba      	b.n	d9622 <__ieee754_pow+0x92>
   d96ac:	f1b9 0f00 	cmp.w	r9, #0
   d96b0:	f2c0 847a 	blt.w	d9fa8 <__ieee754_pow+0xa18>
   d96b4:	ec47 6b10 	vmov	d0, r6, r7
   d96b8:	e7b3      	b.n	d9622 <__ieee754_pow+0x92>
   d96ba:	f1be 0f00 	cmp.w	lr, #0
   d96be:	d084      	beq.n	d95ca <__ieee754_pow+0x3a>
   d96c0:	e7a6      	b.n	d9610 <__ieee754_pow+0x80>
   d96c2:	4b2d      	ldr	r3, [pc, #180]	; (d9778 <__ieee754_pow+0x1e8>)
   d96c4:	4598      	cmp	r8, r3
   d96c6:	dc29      	bgt.n	d971c <__ieee754_pow+0x18c>
   d96c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d96cc:	4598      	cmp	r8, r3
   d96ce:	dd82      	ble.n	d95d6 <__ieee754_pow+0x46>
   d96d0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d96d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d96d8:	2b14      	cmp	r3, #20
   d96da:	f340 847f 	ble.w	d9fdc <__ieee754_pow+0xa4c>
   d96de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d96e2:	fa2e f203 	lsr.w	r2, lr, r3
   d96e6:	fa02 f303 	lsl.w	r3, r2, r3
   d96ea:	459e      	cmp	lr, r3
   d96ec:	f47f af73 	bne.w	d95d6 <__ieee754_pow+0x46>
   d96f0:	f002 0201 	and.w	r2, r2, #1
   d96f4:	f1c2 0b02 	rsb	fp, r2, #2
   d96f8:	e76f      	b.n	d95da <__ieee754_pow+0x4a>
   d96fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d96fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d9702:	ea53 030a 	orrs.w	r3, r3, sl
   d9706:	d08a      	beq.n	d961e <__ieee754_pow+0x8e>
   d9708:	4b1a      	ldr	r3, [pc, #104]	; (d9774 <__ieee754_pow+0x1e4>)
   d970a:	429c      	cmp	r4, r3
   d970c:	f340 8385 	ble.w	d9e1a <__ieee754_pow+0x88a>
   d9710:	f1b9 0f00 	cmp.w	r9, #0
   d9714:	db13      	blt.n	d973e <__ieee754_pow+0x1ae>
   d9716:	ed9d 0b00 	vldr	d0, [sp]
   d971a:	e782      	b.n	d9622 <__ieee754_pow+0x92>
   d971c:	f04f 0b02 	mov.w	fp, #2
   d9720:	e75b      	b.n	d95da <__ieee754_pow+0x4a>
   d9722:	4632      	mov	r2, r6
   d9724:	463b      	mov	r3, r7
   d9726:	4610      	mov	r0, r2
   d9728:	4619      	mov	r1, r3
   d972a:	f000 fed1 	bl	da4d0 <__aeabi_dsub>
   d972e:	4602      	mov	r2, r0
   d9730:	460b      	mov	r3, r1
   d9732:	f001 f9ab 	bl	daa8c <__aeabi_ddiv>
   d9736:	e7b6      	b.n	d96a6 <__ieee754_pow+0x116>
   d9738:	f1b9 0f00 	cmp.w	r9, #0
   d973c:	db9c      	blt.n	d9678 <__ieee754_pow+0xe8>
   d973e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d9758 <__ieee754_pow+0x1c8>
   d9742:	e76e      	b.n	d9622 <__ieee754_pow+0x92>
   d9744:	f3af 8000 	nop.w
   d9748:	00000000 	.word	0x00000000
   d974c:	3ff00000 	.word	0x3ff00000
   d9750:	8800759c 	.word	0x8800759c
   d9754:	7e37e43c 	.word	0x7e37e43c
	...
   d9760:	7ff00000 	.word	0x7ff00000
   d9764:	3ff00000 	.word	0x3ff00000
   d9768:	3fe00000 	.word	0x3fe00000
   d976c:	000dd074 	.word	0x000dd074
   d9770:	41e00000 	.word	0x41e00000
   d9774:	3fefffff 	.word	0x3fefffff
   d9778:	433fffff 	.word	0x433fffff
   d977c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d9780:	f04f 0200 	mov.w	r2, #0
   d9784:	da05      	bge.n	d9792 <__ieee754_pow+0x202>
   d9786:	4bd6      	ldr	r3, [pc, #856]	; (d9ae0 <__ieee754_pow+0x550>)
   d9788:	f001 f856 	bl	da838 <__aeabi_dmul>
   d978c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d9790:	460c      	mov	r4, r1
   d9792:	1523      	asrs	r3, r4, #20
   d9794:	4ed3      	ldr	r6, [pc, #844]	; (d9ae4 <__ieee754_pow+0x554>)
   d9796:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d979a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d979e:	4413      	add	r3, r2
   d97a0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d97a4:	42b4      	cmp	r4, r6
   d97a6:	461a      	mov	r2, r3
   d97a8:	930d      	str	r3, [sp, #52]	; 0x34
   d97aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d97ae:	f340 8349 	ble.w	d9e44 <__ieee754_pow+0x8b4>
   d97b2:	4bcd      	ldr	r3, [pc, #820]	; (d9ae8 <__ieee754_pow+0x558>)
   d97b4:	429c      	cmp	r4, r3
   d97b6:	f340 842d 	ble.w	da014 <__ieee754_pow+0xa84>
   d97ba:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d9a88 <__ieee754_pow+0x4f8>
   d97be:	ed8d 7b08 	vstr	d7, [sp, #32]
   d97c2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d97c6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d9a90 <__ieee754_pow+0x500>
   d97ca:	4613      	mov	r3, r2
   d97cc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d97d0:	3301      	adds	r3, #1
   d97d2:	930d      	str	r3, [sp, #52]	; 0x34
   d97d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d97d8:	f04f 0800 	mov.w	r8, #0
   d97dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d97e0:	4629      	mov	r1, r5
   d97e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d97e6:	f000 fe73 	bl	da4d0 <__aeabi_dsub>
   d97ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d97ee:	4606      	mov	r6, r0
   d97f0:	460f      	mov	r7, r1
   d97f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d97f6:	f000 fe6d 	bl	da4d4 <__adddf3>
   d97fa:	4602      	mov	r2, r0
   d97fc:	460b      	mov	r3, r1
   d97fe:	2000      	movs	r0, #0
   d9800:	49ba      	ldr	r1, [pc, #744]	; (d9aec <__ieee754_pow+0x55c>)
   d9802:	f001 f943 	bl	daa8c <__aeabi_ddiv>
   d9806:	4603      	mov	r3, r0
   d9808:	460c      	mov	r4, r1
   d980a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d980e:	4602      	mov	r2, r0
   d9810:	460b      	mov	r3, r1
   d9812:	4630      	mov	r0, r6
   d9814:	4639      	mov	r1, r7
   d9816:	f001 f80f 	bl	da838 <__aeabi_dmul>
   d981a:	106b      	asrs	r3, r5, #1
   d981c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d9820:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d9824:	eb03 0508 	add.w	r5, r3, r8
   d9828:	460a      	mov	r2, r1
   d982a:	2300      	movs	r3, #0
   d982c:	4601      	mov	r1, r0
   d982e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d9832:	9302      	str	r3, [sp, #8]
   d9834:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d9838:	2400      	movs	r4, #0
   d983a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d983e:	462b      	mov	r3, r5
   d9840:	4622      	mov	r2, r4
   d9842:	4640      	mov	r0, r8
   d9844:	4649      	mov	r1, r9
   d9846:	f000 fff7 	bl	da838 <__aeabi_dmul>
   d984a:	4602      	mov	r2, r0
   d984c:	460b      	mov	r3, r1
   d984e:	4630      	mov	r0, r6
   d9850:	4639      	mov	r1, r7
   d9852:	f000 fe3d 	bl	da4d0 <__aeabi_dsub>
   d9856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d985a:	4606      	mov	r6, r0
   d985c:	460f      	mov	r7, r1
   d985e:	4620      	mov	r0, r4
   d9860:	4629      	mov	r1, r5
   d9862:	f000 fe35 	bl	da4d0 <__aeabi_dsub>
   d9866:	4602      	mov	r2, r0
   d9868:	460b      	mov	r3, r1
   d986a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d986e:	f000 fe2f 	bl	da4d0 <__aeabi_dsub>
   d9872:	4642      	mov	r2, r8
   d9874:	464b      	mov	r3, r9
   d9876:	f000 ffdf 	bl	da838 <__aeabi_dmul>
   d987a:	4602      	mov	r2, r0
   d987c:	460b      	mov	r3, r1
   d987e:	4630      	mov	r0, r6
   d9880:	4639      	mov	r1, r7
   d9882:	f000 fe25 	bl	da4d0 <__aeabi_dsub>
   d9886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d988a:	f000 ffd5 	bl	da838 <__aeabi_dmul>
   d988e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d9892:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d9896:	4622      	mov	r2, r4
   d9898:	462b      	mov	r3, r5
   d989a:	4620      	mov	r0, r4
   d989c:	4629      	mov	r1, r5
   d989e:	f000 ffcb 	bl	da838 <__aeabi_dmul>
   d98a2:	a37d      	add	r3, pc, #500	; (adr r3, d9a98 <__ieee754_pow+0x508>)
   d98a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98a8:	4604      	mov	r4, r0
   d98aa:	460d      	mov	r5, r1
   d98ac:	f000 ffc4 	bl	da838 <__aeabi_dmul>
   d98b0:	a37b      	add	r3, pc, #492	; (adr r3, d9aa0 <__ieee754_pow+0x510>)
   d98b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98b6:	f000 fe0d 	bl	da4d4 <__adddf3>
   d98ba:	4622      	mov	r2, r4
   d98bc:	462b      	mov	r3, r5
   d98be:	f000 ffbb 	bl	da838 <__aeabi_dmul>
   d98c2:	a379      	add	r3, pc, #484	; (adr r3, d9aa8 <__ieee754_pow+0x518>)
   d98c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98c8:	f000 fe04 	bl	da4d4 <__adddf3>
   d98cc:	4622      	mov	r2, r4
   d98ce:	462b      	mov	r3, r5
   d98d0:	f000 ffb2 	bl	da838 <__aeabi_dmul>
   d98d4:	a376      	add	r3, pc, #472	; (adr r3, d9ab0 <__ieee754_pow+0x520>)
   d98d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98da:	f000 fdfb 	bl	da4d4 <__adddf3>
   d98de:	4622      	mov	r2, r4
   d98e0:	462b      	mov	r3, r5
   d98e2:	f000 ffa9 	bl	da838 <__aeabi_dmul>
   d98e6:	a374      	add	r3, pc, #464	; (adr r3, d9ab8 <__ieee754_pow+0x528>)
   d98e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98ec:	f000 fdf2 	bl	da4d4 <__adddf3>
   d98f0:	4622      	mov	r2, r4
   d98f2:	462b      	mov	r3, r5
   d98f4:	f000 ffa0 	bl	da838 <__aeabi_dmul>
   d98f8:	a371      	add	r3, pc, #452	; (adr r3, d9ac0 <__ieee754_pow+0x530>)
   d98fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98fe:	f000 fde9 	bl	da4d4 <__adddf3>
   d9902:	4622      	mov	r2, r4
   d9904:	4606      	mov	r6, r0
   d9906:	460f      	mov	r7, r1
   d9908:	462b      	mov	r3, r5
   d990a:	4620      	mov	r0, r4
   d990c:	4629      	mov	r1, r5
   d990e:	f000 ff93 	bl	da838 <__aeabi_dmul>
   d9912:	4602      	mov	r2, r0
   d9914:	460b      	mov	r3, r1
   d9916:	4630      	mov	r0, r6
   d9918:	4639      	mov	r1, r7
   d991a:	f000 ff8d 	bl	da838 <__aeabi_dmul>
   d991e:	4642      	mov	r2, r8
   d9920:	4604      	mov	r4, r0
   d9922:	460d      	mov	r5, r1
   d9924:	464b      	mov	r3, r9
   d9926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d992a:	f000 fdd3 	bl	da4d4 <__adddf3>
   d992e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9932:	f000 ff81 	bl	da838 <__aeabi_dmul>
   d9936:	4622      	mov	r2, r4
   d9938:	462b      	mov	r3, r5
   d993a:	f000 fdcb 	bl	da4d4 <__adddf3>
   d993e:	4642      	mov	r2, r8
   d9940:	4606      	mov	r6, r0
   d9942:	460f      	mov	r7, r1
   d9944:	464b      	mov	r3, r9
   d9946:	4640      	mov	r0, r8
   d9948:	4649      	mov	r1, r9
   d994a:	f000 ff75 	bl	da838 <__aeabi_dmul>
   d994e:	2200      	movs	r2, #0
   d9950:	4b67      	ldr	r3, [pc, #412]	; (d9af0 <__ieee754_pow+0x560>)
   d9952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d9956:	f000 fdbd 	bl	da4d4 <__adddf3>
   d995a:	4632      	mov	r2, r6
   d995c:	463b      	mov	r3, r7
   d995e:	f000 fdb9 	bl	da4d4 <__adddf3>
   d9962:	9802      	ldr	r0, [sp, #8]
   d9964:	460d      	mov	r5, r1
   d9966:	4604      	mov	r4, r0
   d9968:	4622      	mov	r2, r4
   d996a:	462b      	mov	r3, r5
   d996c:	4640      	mov	r0, r8
   d996e:	4649      	mov	r1, r9
   d9970:	f000 ff62 	bl	da838 <__aeabi_dmul>
   d9974:	2200      	movs	r2, #0
   d9976:	4680      	mov	r8, r0
   d9978:	4689      	mov	r9, r1
   d997a:	4b5d      	ldr	r3, [pc, #372]	; (d9af0 <__ieee754_pow+0x560>)
   d997c:	4620      	mov	r0, r4
   d997e:	4629      	mov	r1, r5
   d9980:	f000 fda6 	bl	da4d0 <__aeabi_dsub>
   d9984:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9988:	f000 fda2 	bl	da4d0 <__aeabi_dsub>
   d998c:	4602      	mov	r2, r0
   d998e:	460b      	mov	r3, r1
   d9990:	4630      	mov	r0, r6
   d9992:	4639      	mov	r1, r7
   d9994:	f000 fd9c 	bl	da4d0 <__aeabi_dsub>
   d9998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d999c:	f000 ff4c 	bl	da838 <__aeabi_dmul>
   d99a0:	4622      	mov	r2, r4
   d99a2:	4606      	mov	r6, r0
   d99a4:	460f      	mov	r7, r1
   d99a6:	462b      	mov	r3, r5
   d99a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d99ac:	f000 ff44 	bl	da838 <__aeabi_dmul>
   d99b0:	4602      	mov	r2, r0
   d99b2:	460b      	mov	r3, r1
   d99b4:	4630      	mov	r0, r6
   d99b6:	4639      	mov	r1, r7
   d99b8:	f000 fd8c 	bl	da4d4 <__adddf3>
   d99bc:	4606      	mov	r6, r0
   d99be:	460f      	mov	r7, r1
   d99c0:	4602      	mov	r2, r0
   d99c2:	460b      	mov	r3, r1
   d99c4:	4640      	mov	r0, r8
   d99c6:	4649      	mov	r1, r9
   d99c8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d99cc:	f000 fd82 	bl	da4d4 <__adddf3>
   d99d0:	9802      	ldr	r0, [sp, #8]
   d99d2:	a33d      	add	r3, pc, #244	; (adr r3, d9ac8 <__ieee754_pow+0x538>)
   d99d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99d8:	4604      	mov	r4, r0
   d99da:	460d      	mov	r5, r1
   d99dc:	f000 ff2c 	bl	da838 <__aeabi_dmul>
   d99e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d99e4:	4680      	mov	r8, r0
   d99e6:	4689      	mov	r9, r1
   d99e8:	4620      	mov	r0, r4
   d99ea:	4629      	mov	r1, r5
   d99ec:	f000 fd70 	bl	da4d0 <__aeabi_dsub>
   d99f0:	4602      	mov	r2, r0
   d99f2:	460b      	mov	r3, r1
   d99f4:	4630      	mov	r0, r6
   d99f6:	4639      	mov	r1, r7
   d99f8:	f000 fd6a 	bl	da4d0 <__aeabi_dsub>
   d99fc:	a334      	add	r3, pc, #208	; (adr r3, d9ad0 <__ieee754_pow+0x540>)
   d99fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a02:	f000 ff19 	bl	da838 <__aeabi_dmul>
   d9a06:	a334      	add	r3, pc, #208	; (adr r3, d9ad8 <__ieee754_pow+0x548>)
   d9a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a0c:	4606      	mov	r6, r0
   d9a0e:	460f      	mov	r7, r1
   d9a10:	4620      	mov	r0, r4
   d9a12:	4629      	mov	r1, r5
   d9a14:	f000 ff10 	bl	da838 <__aeabi_dmul>
   d9a18:	4602      	mov	r2, r0
   d9a1a:	460b      	mov	r3, r1
   d9a1c:	4630      	mov	r0, r6
   d9a1e:	4639      	mov	r1, r7
   d9a20:	f000 fd58 	bl	da4d4 <__adddf3>
   d9a24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d9a28:	f000 fd54 	bl	da4d4 <__adddf3>
   d9a2c:	4606      	mov	r6, r0
   d9a2e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d9a30:	460f      	mov	r7, r1
   d9a32:	f000 fe9b 	bl	da76c <__aeabi_i2d>
   d9a36:	4632      	mov	r2, r6
   d9a38:	4604      	mov	r4, r0
   d9a3a:	460d      	mov	r5, r1
   d9a3c:	463b      	mov	r3, r7
   d9a3e:	4640      	mov	r0, r8
   d9a40:	4649      	mov	r1, r9
   d9a42:	f000 fd47 	bl	da4d4 <__adddf3>
   d9a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9a4a:	f000 fd43 	bl	da4d4 <__adddf3>
   d9a4e:	4622      	mov	r2, r4
   d9a50:	462b      	mov	r3, r5
   d9a52:	f000 fd3f 	bl	da4d4 <__adddf3>
   d9a56:	9802      	ldr	r0, [sp, #8]
   d9a58:	4622      	mov	r2, r4
   d9a5a:	462b      	mov	r3, r5
   d9a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9a60:	f000 fd36 	bl	da4d0 <__aeabi_dsub>
   d9a64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9a68:	f000 fd32 	bl	da4d0 <__aeabi_dsub>
   d9a6c:	4642      	mov	r2, r8
   d9a6e:	464b      	mov	r3, r9
   d9a70:	f000 fd2e 	bl	da4d0 <__aeabi_dsub>
   d9a74:	4602      	mov	r2, r0
   d9a76:	460b      	mov	r3, r1
   d9a78:	4630      	mov	r0, r6
   d9a7a:	4639      	mov	r1, r7
   d9a7c:	f000 fd28 	bl	da4d0 <__aeabi_dsub>
   d9a80:	4680      	mov	r8, r0
   d9a82:	4689      	mov	r9, r1
   d9a84:	e036      	b.n	d9af4 <__ieee754_pow+0x564>
   d9a86:	bf00      	nop
	...
   d9a94:	3ff00000 	.word	0x3ff00000
   d9a98:	4a454eef 	.word	0x4a454eef
   d9a9c:	3fca7e28 	.word	0x3fca7e28
   d9aa0:	93c9db65 	.word	0x93c9db65
   d9aa4:	3fcd864a 	.word	0x3fcd864a
   d9aa8:	a91d4101 	.word	0xa91d4101
   d9aac:	3fd17460 	.word	0x3fd17460
   d9ab0:	518f264d 	.word	0x518f264d
   d9ab4:	3fd55555 	.word	0x3fd55555
   d9ab8:	db6fabff 	.word	0xdb6fabff
   d9abc:	3fdb6db6 	.word	0x3fdb6db6
   d9ac0:	33333303 	.word	0x33333303
   d9ac4:	3fe33333 	.word	0x3fe33333
   d9ac8:	e0000000 	.word	0xe0000000
   d9acc:	3feec709 	.word	0x3feec709
   d9ad0:	dc3a03fd 	.word	0xdc3a03fd
   d9ad4:	3feec709 	.word	0x3feec709
   d9ad8:	145b01f5 	.word	0x145b01f5
   d9adc:	be3e2fe0 	.word	0xbe3e2fe0
   d9ae0:	43400000 	.word	0x43400000
   d9ae4:	0003988e 	.word	0x0003988e
   d9ae8:	000bb679 	.word	0x000bb679
   d9aec:	3ff00000 	.word	0x3ff00000
   d9af0:	40080000 	.word	0x40080000
   d9af4:	f10b 33ff 	add.w	r3, fp, #4294967295
   d9af8:	ea53 030a 	orrs.w	r3, r3, sl
   d9afc:	f000 8188 	beq.w	d9e10 <__ieee754_pow+0x880>
   d9b00:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d9e60 <__ieee754_pow+0x8d0>
   d9b04:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9b08:	e9dd ab00 	ldrd	sl, fp, [sp]
   d9b0c:	4653      	mov	r3, sl
   d9b0e:	465c      	mov	r4, fp
   d9b10:	e9cd 3400 	strd	r3, r4, [sp]
   d9b14:	2300      	movs	r3, #0
   d9b16:	9300      	str	r3, [sp, #0]
   d9b18:	e9dd 4500 	ldrd	r4, r5, [sp]
   d9b1c:	4650      	mov	r0, sl
   d9b1e:	4622      	mov	r2, r4
   d9b20:	462b      	mov	r3, r5
   d9b22:	4659      	mov	r1, fp
   d9b24:	f000 fcd4 	bl	da4d0 <__aeabi_dsub>
   d9b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9b2c:	f000 fe84 	bl	da838 <__aeabi_dmul>
   d9b30:	4652      	mov	r2, sl
   d9b32:	4606      	mov	r6, r0
   d9b34:	460f      	mov	r7, r1
   d9b36:	465b      	mov	r3, fp
   d9b38:	4640      	mov	r0, r8
   d9b3a:	4649      	mov	r1, r9
   d9b3c:	f000 fe7c 	bl	da838 <__aeabi_dmul>
   d9b40:	4602      	mov	r2, r0
   d9b42:	460b      	mov	r3, r1
   d9b44:	4630      	mov	r0, r6
   d9b46:	4639      	mov	r1, r7
   d9b48:	f000 fcc4 	bl	da4d4 <__adddf3>
   d9b4c:	4622      	mov	r2, r4
   d9b4e:	4680      	mov	r8, r0
   d9b50:	4689      	mov	r9, r1
   d9b52:	462b      	mov	r3, r5
   d9b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9b58:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d9b5c:	f000 fe6c 	bl	da838 <__aeabi_dmul>
   d9b60:	460b      	mov	r3, r1
   d9b62:	4602      	mov	r2, r0
   d9b64:	4606      	mov	r6, r0
   d9b66:	460f      	mov	r7, r1
   d9b68:	4640      	mov	r0, r8
   d9b6a:	4649      	mov	r1, r9
   d9b6c:	f000 fcb2 	bl	da4d4 <__adddf3>
   d9b70:	4bd5      	ldr	r3, [pc, #852]	; (d9ec8 <__ieee754_pow+0x938>)
   d9b72:	4299      	cmp	r1, r3
   d9b74:	4604      	mov	r4, r0
   d9b76:	460d      	mov	r5, r1
   d9b78:	468a      	mov	sl, r1
   d9b7a:	f340 8123 	ble.w	d9dc4 <__ieee754_pow+0x834>
   d9b7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d9b82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d9b86:	4303      	orrs	r3, r0
   d9b88:	f040 8218 	bne.w	d9fbc <__ieee754_pow+0xa2c>
   d9b8c:	a3b6      	add	r3, pc, #728	; (adr r3, d9e68 <__ieee754_pow+0x8d8>)
   d9b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9b96:	f000 fc9d 	bl	da4d4 <__adddf3>
   d9b9a:	4632      	mov	r2, r6
   d9b9c:	4680      	mov	r8, r0
   d9b9e:	4689      	mov	r9, r1
   d9ba0:	463b      	mov	r3, r7
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	4629      	mov	r1, r5
   d9ba6:	f000 fc93 	bl	da4d0 <__aeabi_dsub>
   d9baa:	4602      	mov	r2, r0
   d9bac:	460b      	mov	r3, r1
   d9bae:	4640      	mov	r0, r8
   d9bb0:	4649      	mov	r1, r9
   d9bb2:	f001 f8d1 	bl	dad58 <__aeabi_dcmpgt>
   d9bb6:	2800      	cmp	r0, #0
   d9bb8:	f040 8200 	bne.w	d9fbc <__ieee754_pow+0xa2c>
   d9bbc:	46a8      	mov	r8, r5
   d9bbe:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d9bc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d9bca:	fa42 f303 	asr.w	r3, r2, r3
   d9bce:	4453      	add	r3, sl
   d9bd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9bd4:	4dbd      	ldr	r5, [pc, #756]	; (d9ecc <__ieee754_pow+0x93c>)
   d9bd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d9bda:	4115      	asrs	r5, r2
   d9bdc:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d9be0:	2000      	movs	r0, #0
   d9be2:	f1c2 0414 	rsb	r4, r2, #20
   d9be6:	ea23 0105 	bic.w	r1, r3, r5
   d9bea:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d9bee:	f1ba 0f00 	cmp.w	sl, #0
   d9bf2:	4602      	mov	r2, r0
   d9bf4:	460b      	mov	r3, r1
   d9bf6:	fa4b fb04 	asr.w	fp, fp, r4
   d9bfa:	4630      	mov	r0, r6
   d9bfc:	4639      	mov	r1, r7
   d9bfe:	bfb8      	it	lt
   d9c00:	f1cb 0b00 	rsblt	fp, fp, #0
   d9c04:	f000 fc64 	bl	da4d0 <__aeabi_dsub>
   d9c08:	4602      	mov	r2, r0
   d9c0a:	460b      	mov	r3, r1
   d9c0c:	4606      	mov	r6, r0
   d9c0e:	460f      	mov	r7, r1
   d9c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9c14:	f000 fc5e 	bl	da4d4 <__adddf3>
   d9c18:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d9c1c:	2400      	movs	r4, #0
   d9c1e:	a394      	add	r3, pc, #592	; (adr r3, d9e70 <__ieee754_pow+0x8e0>)
   d9c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c24:	4620      	mov	r0, r4
   d9c26:	460d      	mov	r5, r1
   d9c28:	f000 fe06 	bl	da838 <__aeabi_dmul>
   d9c2c:	4632      	mov	r2, r6
   d9c2e:	4680      	mov	r8, r0
   d9c30:	4689      	mov	r9, r1
   d9c32:	463b      	mov	r3, r7
   d9c34:	4620      	mov	r0, r4
   d9c36:	4629      	mov	r1, r5
   d9c38:	f000 fc4a 	bl	da4d0 <__aeabi_dsub>
   d9c3c:	4602      	mov	r2, r0
   d9c3e:	460b      	mov	r3, r1
   d9c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9c44:	f000 fc44 	bl	da4d0 <__aeabi_dsub>
   d9c48:	a38b      	add	r3, pc, #556	; (adr r3, d9e78 <__ieee754_pow+0x8e8>)
   d9c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c4e:	f000 fdf3 	bl	da838 <__aeabi_dmul>
   d9c52:	a38b      	add	r3, pc, #556	; (adr r3, d9e80 <__ieee754_pow+0x8f0>)
   d9c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c58:	4606      	mov	r6, r0
   d9c5a:	460f      	mov	r7, r1
   d9c5c:	4620      	mov	r0, r4
   d9c5e:	4629      	mov	r1, r5
   d9c60:	f000 fdea 	bl	da838 <__aeabi_dmul>
   d9c64:	4602      	mov	r2, r0
   d9c66:	460b      	mov	r3, r1
   d9c68:	4630      	mov	r0, r6
   d9c6a:	4639      	mov	r1, r7
   d9c6c:	f000 fc32 	bl	da4d4 <__adddf3>
   d9c70:	4606      	mov	r6, r0
   d9c72:	460f      	mov	r7, r1
   d9c74:	4602      	mov	r2, r0
   d9c76:	460b      	mov	r3, r1
   d9c78:	4640      	mov	r0, r8
   d9c7a:	4649      	mov	r1, r9
   d9c7c:	f000 fc2a 	bl	da4d4 <__adddf3>
   d9c80:	4642      	mov	r2, r8
   d9c82:	464b      	mov	r3, r9
   d9c84:	4604      	mov	r4, r0
   d9c86:	460d      	mov	r5, r1
   d9c88:	f000 fc22 	bl	da4d0 <__aeabi_dsub>
   d9c8c:	4602      	mov	r2, r0
   d9c8e:	460b      	mov	r3, r1
   d9c90:	4630      	mov	r0, r6
   d9c92:	4639      	mov	r1, r7
   d9c94:	f000 fc1c 	bl	da4d0 <__aeabi_dsub>
   d9c98:	4622      	mov	r2, r4
   d9c9a:	4680      	mov	r8, r0
   d9c9c:	4689      	mov	r9, r1
   d9c9e:	462b      	mov	r3, r5
   d9ca0:	4620      	mov	r0, r4
   d9ca2:	4629      	mov	r1, r5
   d9ca4:	f000 fdc8 	bl	da838 <__aeabi_dmul>
   d9ca8:	a377      	add	r3, pc, #476	; (adr r3, d9e88 <__ieee754_pow+0x8f8>)
   d9caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cae:	4606      	mov	r6, r0
   d9cb0:	460f      	mov	r7, r1
   d9cb2:	f000 fdc1 	bl	da838 <__aeabi_dmul>
   d9cb6:	a376      	add	r3, pc, #472	; (adr r3, d9e90 <__ieee754_pow+0x900>)
   d9cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cbc:	f000 fc08 	bl	da4d0 <__aeabi_dsub>
   d9cc0:	4632      	mov	r2, r6
   d9cc2:	463b      	mov	r3, r7
   d9cc4:	f000 fdb8 	bl	da838 <__aeabi_dmul>
   d9cc8:	a373      	add	r3, pc, #460	; (adr r3, d9e98 <__ieee754_pow+0x908>)
   d9cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cce:	f000 fc01 	bl	da4d4 <__adddf3>
   d9cd2:	4632      	mov	r2, r6
   d9cd4:	463b      	mov	r3, r7
   d9cd6:	f000 fdaf 	bl	da838 <__aeabi_dmul>
   d9cda:	a371      	add	r3, pc, #452	; (adr r3, d9ea0 <__ieee754_pow+0x910>)
   d9cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ce0:	f000 fbf6 	bl	da4d0 <__aeabi_dsub>
   d9ce4:	4632      	mov	r2, r6
   d9ce6:	463b      	mov	r3, r7
   d9ce8:	f000 fda6 	bl	da838 <__aeabi_dmul>
   d9cec:	a36e      	add	r3, pc, #440	; (adr r3, d9ea8 <__ieee754_pow+0x918>)
   d9cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cf2:	f000 fbef 	bl	da4d4 <__adddf3>
   d9cf6:	4632      	mov	r2, r6
   d9cf8:	463b      	mov	r3, r7
   d9cfa:	f000 fd9d 	bl	da838 <__aeabi_dmul>
   d9cfe:	4602      	mov	r2, r0
   d9d00:	460b      	mov	r3, r1
   d9d02:	4620      	mov	r0, r4
   d9d04:	4629      	mov	r1, r5
   d9d06:	f000 fbe3 	bl	da4d0 <__aeabi_dsub>
   d9d0a:	4606      	mov	r6, r0
   d9d0c:	460f      	mov	r7, r1
   d9d0e:	4602      	mov	r2, r0
   d9d10:	460b      	mov	r3, r1
   d9d12:	4620      	mov	r0, r4
   d9d14:	4629      	mov	r1, r5
   d9d16:	f000 fd8f 	bl	da838 <__aeabi_dmul>
   d9d1a:	2200      	movs	r2, #0
   d9d1c:	e9cd 0100 	strd	r0, r1, [sp]
   d9d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9d24:	4630      	mov	r0, r6
   d9d26:	4639      	mov	r1, r7
   d9d28:	f000 fbd2 	bl	da4d0 <__aeabi_dsub>
   d9d2c:	4602      	mov	r2, r0
   d9d2e:	460b      	mov	r3, r1
   d9d30:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9d34:	f000 feaa 	bl	daa8c <__aeabi_ddiv>
   d9d38:	4642      	mov	r2, r8
   d9d3a:	4606      	mov	r6, r0
   d9d3c:	460f      	mov	r7, r1
   d9d3e:	464b      	mov	r3, r9
   d9d40:	4620      	mov	r0, r4
   d9d42:	4629      	mov	r1, r5
   d9d44:	f000 fd78 	bl	da838 <__aeabi_dmul>
   d9d48:	4642      	mov	r2, r8
   d9d4a:	464b      	mov	r3, r9
   d9d4c:	f000 fbc2 	bl	da4d4 <__adddf3>
   d9d50:	4602      	mov	r2, r0
   d9d52:	460b      	mov	r3, r1
   d9d54:	4630      	mov	r0, r6
   d9d56:	4639      	mov	r1, r7
   d9d58:	f000 fbba 	bl	da4d0 <__aeabi_dsub>
   d9d5c:	4622      	mov	r2, r4
   d9d5e:	462b      	mov	r3, r5
   d9d60:	f000 fbb6 	bl	da4d0 <__aeabi_dsub>
   d9d64:	4602      	mov	r2, r0
   d9d66:	460b      	mov	r3, r1
   d9d68:	2000      	movs	r0, #0
   d9d6a:	4959      	ldr	r1, [pc, #356]	; (d9ed0 <__ieee754_pow+0x940>)
   d9d6c:	f000 fbb0 	bl	da4d0 <__aeabi_dsub>
   d9d70:	448a      	add	sl, r1
   d9d72:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d9d76:	4602      	mov	r2, r0
   d9d78:	460b      	mov	r3, r1
   d9d7a:	f2c0 815b 	blt.w	da034 <__ieee754_pow+0xaa4>
   d9d7e:	4651      	mov	r1, sl
   d9d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9d84:	f000 fd58 	bl	da838 <__aeabi_dmul>
   d9d88:	ec41 0b10 	vmov	d0, r0, r1
   d9d8c:	e449      	b.n	d9622 <__ieee754_pow+0x92>
   d9d8e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d9d92:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d9d96:	ea54 030b 	orrs.w	r3, r4, fp
   d9d9a:	f000 8137 	beq.w	da00c <__ieee754_pow+0xa7c>
   d9d9e:	f1bb 0f01 	cmp.w	fp, #1
   d9da2:	f47f ac80 	bne.w	d96a6 <__ieee754_pow+0x116>
   d9da6:	4602      	mov	r2, r0
   d9da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9dac:	ec43 2b10 	vmov	d0, r2, r3
   d9db0:	e437      	b.n	d9622 <__ieee754_pow+0x92>
   d9db2:	4632      	mov	r2, r6
   d9db4:	463b      	mov	r3, r7
   d9db6:	4630      	mov	r0, r6
   d9db8:	4639      	mov	r1, r7
   d9dba:	f000 fd3d 	bl	da838 <__aeabi_dmul>
   d9dbe:	ec41 0b10 	vmov	d0, r0, r1
   d9dc2:	e42e      	b.n	d9622 <__ieee754_pow+0x92>
   d9dc4:	4b43      	ldr	r3, [pc, #268]	; (d9ed4 <__ieee754_pow+0x944>)
   d9dc6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d9dca:	4598      	cmp	r8, r3
   d9dcc:	f340 8115 	ble.w	d9ffa <__ieee754_pow+0xa6a>
   d9dd0:	4b41      	ldr	r3, [pc, #260]	; (d9ed8 <__ieee754_pow+0x948>)
   d9dd2:	440b      	add	r3, r1
   d9dd4:	4303      	orrs	r3, r0
   d9dd6:	d10c      	bne.n	d9df2 <__ieee754_pow+0x862>
   d9dd8:	4632      	mov	r2, r6
   d9dda:	463b      	mov	r3, r7
   d9ddc:	f000 fb78 	bl	da4d0 <__aeabi_dsub>
   d9de0:	4602      	mov	r2, r0
   d9de2:	460b      	mov	r3, r1
   d9de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9de8:	f000 ffa2 	bl	dad30 <__aeabi_dcmple>
   d9dec:	2800      	cmp	r0, #0
   d9dee:	f43f aee6 	beq.w	d9bbe <__ieee754_pow+0x62e>
   d9df2:	a32f      	add	r3, pc, #188	; (adr r3, d9eb0 <__ieee754_pow+0x920>)
   d9df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9dfc:	f000 fd1c 	bl	da838 <__aeabi_dmul>
   d9e00:	a32b      	add	r3, pc, #172	; (adr r3, d9eb0 <__ieee754_pow+0x920>)
   d9e02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e06:	f000 fd17 	bl	da838 <__aeabi_dmul>
   d9e0a:	ec41 0b10 	vmov	d0, r0, r1
   d9e0e:	e408      	b.n	d9622 <__ieee754_pow+0x92>
   d9e10:	ed9f 7b29 	vldr	d7, [pc, #164]	; d9eb8 <__ieee754_pow+0x928>
   d9e14:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9e18:	e676      	b.n	d9b08 <__ieee754_pow+0x578>
   d9e1a:	f1b9 0f00 	cmp.w	r9, #0
   d9e1e:	f6bf ac8e 	bge.w	d973e <__ieee754_pow+0x1ae>
   d9e22:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9e26:	ee00 3a10 	vmov	s0, r3
   d9e2a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d9e2e:	ee00 3a90 	vmov	s1, r3
   d9e32:	f7ff bbf6 	b.w	d9622 <__ieee754_pow+0x92>
   d9e36:	4602      	mov	r2, r0
   d9e38:	460b      	mov	r3, r1
   d9e3a:	2000      	movs	r0, #0
   d9e3c:	4924      	ldr	r1, [pc, #144]	; (d9ed0 <__ieee754_pow+0x940>)
   d9e3e:	f000 fe25 	bl	daa8c <__aeabi_ddiv>
   d9e42:	e42d      	b.n	d96a0 <__ieee754_pow+0x110>
   d9e44:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d9ec0 <__ieee754_pow+0x930>
   d9e48:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9e4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9e50:	ed9f 7b03 	vldr	d7, [pc, #12]	; d9e60 <__ieee754_pow+0x8d0>
   d9e54:	f04f 0800 	mov.w	r8, #0
   d9e58:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9e5c:	e4be      	b.n	d97dc <__ieee754_pow+0x24c>
   d9e5e:	bf00      	nop
   d9e60:	00000000 	.word	0x00000000
   d9e64:	3ff00000 	.word	0x3ff00000
   d9e68:	652b82fe 	.word	0x652b82fe
   d9e6c:	3c971547 	.word	0x3c971547
   d9e70:	00000000 	.word	0x00000000
   d9e74:	3fe62e43 	.word	0x3fe62e43
   d9e78:	fefa39ef 	.word	0xfefa39ef
   d9e7c:	3fe62e42 	.word	0x3fe62e42
   d9e80:	0ca86c39 	.word	0x0ca86c39
   d9e84:	be205c61 	.word	0xbe205c61
   d9e88:	72bea4d0 	.word	0x72bea4d0
   d9e8c:	3e663769 	.word	0x3e663769
   d9e90:	c5d26bf1 	.word	0xc5d26bf1
   d9e94:	3ebbbd41 	.word	0x3ebbbd41
   d9e98:	af25de2c 	.word	0xaf25de2c
   d9e9c:	3f11566a 	.word	0x3f11566a
   d9ea0:	16bebd93 	.word	0x16bebd93
   d9ea4:	3f66c16c 	.word	0x3f66c16c
   d9ea8:	5555553e 	.word	0x5555553e
   d9eac:	3fc55555 	.word	0x3fc55555
   d9eb0:	c2f8f359 	.word	0xc2f8f359
   d9eb4:	01a56e1f 	.word	0x01a56e1f
   d9eb8:	00000000 	.word	0x00000000
   d9ebc:	bff00000 	.word	0xbff00000
	...
   d9ec8:	408fffff 	.word	0x408fffff
   d9ecc:	000fffff 	.word	0x000fffff
   d9ed0:	3ff00000 	.word	0x3ff00000
   d9ed4:	4090cbff 	.word	0x4090cbff
   d9ed8:	3f6f3400 	.word	0x3f6f3400
   d9edc:	4b6c      	ldr	r3, [pc, #432]	; (da090 <__ieee754_pow+0xb00>)
   d9ede:	429c      	cmp	r4, r3
   d9ee0:	f77f ac2a 	ble.w	d9738 <__ieee754_pow+0x1a8>
   d9ee4:	4b6b      	ldr	r3, [pc, #428]	; (da094 <__ieee754_pow+0xb04>)
   d9ee6:	429c      	cmp	r4, r3
   d9ee8:	f73f abc3 	bgt.w	d9672 <__ieee754_pow+0xe2>
   d9eec:	2200      	movs	r2, #0
   d9eee:	4b69      	ldr	r3, [pc, #420]	; (da094 <__ieee754_pow+0xb04>)
   d9ef0:	f000 faee 	bl	da4d0 <__aeabi_dsub>
   d9ef4:	a356      	add	r3, pc, #344	; (adr r3, da050 <__ieee754_pow+0xac0>)
   d9ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9efa:	4604      	mov	r4, r0
   d9efc:	460d      	mov	r5, r1
   d9efe:	f000 fc9b 	bl	da838 <__aeabi_dmul>
   d9f02:	a355      	add	r3, pc, #340	; (adr r3, da058 <__ieee754_pow+0xac8>)
   d9f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f08:	4680      	mov	r8, r0
   d9f0a:	4689      	mov	r9, r1
   d9f0c:	4620      	mov	r0, r4
   d9f0e:	4629      	mov	r1, r5
   d9f10:	f000 fc92 	bl	da838 <__aeabi_dmul>
   d9f14:	2200      	movs	r2, #0
   d9f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9f1a:	4b5f      	ldr	r3, [pc, #380]	; (da098 <__ieee754_pow+0xb08>)
   d9f1c:	4620      	mov	r0, r4
   d9f1e:	4629      	mov	r1, r5
   d9f20:	f000 fc8a 	bl	da838 <__aeabi_dmul>
   d9f24:	4602      	mov	r2, r0
   d9f26:	460b      	mov	r3, r1
   d9f28:	a14d      	add	r1, pc, #308	; (adr r1, da060 <__ieee754_pow+0xad0>)
   d9f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9f2e:	f000 facf 	bl	da4d0 <__aeabi_dsub>
   d9f32:	4622      	mov	r2, r4
   d9f34:	462b      	mov	r3, r5
   d9f36:	f000 fc7f 	bl	da838 <__aeabi_dmul>
   d9f3a:	4602      	mov	r2, r0
   d9f3c:	460b      	mov	r3, r1
   d9f3e:	2000      	movs	r0, #0
   d9f40:	4956      	ldr	r1, [pc, #344]	; (da09c <__ieee754_pow+0xb0c>)
   d9f42:	f000 fac5 	bl	da4d0 <__aeabi_dsub>
   d9f46:	4622      	mov	r2, r4
   d9f48:	462b      	mov	r3, r5
   d9f4a:	4606      	mov	r6, r0
   d9f4c:	460f      	mov	r7, r1
   d9f4e:	4620      	mov	r0, r4
   d9f50:	4629      	mov	r1, r5
   d9f52:	f000 fc71 	bl	da838 <__aeabi_dmul>
   d9f56:	4602      	mov	r2, r0
   d9f58:	460b      	mov	r3, r1
   d9f5a:	4630      	mov	r0, r6
   d9f5c:	4639      	mov	r1, r7
   d9f5e:	f000 fc6b 	bl	da838 <__aeabi_dmul>
   d9f62:	a341      	add	r3, pc, #260	; (adr r3, da068 <__ieee754_pow+0xad8>)
   d9f64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f68:	f000 fc66 	bl	da838 <__aeabi_dmul>
   d9f6c:	4602      	mov	r2, r0
   d9f6e:	460b      	mov	r3, r1
   d9f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9f74:	f000 faac 	bl	da4d0 <__aeabi_dsub>
   d9f78:	4602      	mov	r2, r0
   d9f7a:	460b      	mov	r3, r1
   d9f7c:	4604      	mov	r4, r0
   d9f7e:	460d      	mov	r5, r1
   d9f80:	4640      	mov	r0, r8
   d9f82:	4649      	mov	r1, r9
   d9f84:	f000 faa6 	bl	da4d4 <__adddf3>
   d9f88:	4642      	mov	r2, r8
   d9f8a:	464b      	mov	r3, r9
   d9f8c:	2000      	movs	r0, #0
   d9f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9f92:	f000 fa9d 	bl	da4d0 <__aeabi_dsub>
   d9f96:	4602      	mov	r2, r0
   d9f98:	460b      	mov	r3, r1
   d9f9a:	4620      	mov	r0, r4
   d9f9c:	4629      	mov	r1, r5
   d9f9e:	f000 fa97 	bl	da4d0 <__aeabi_dsub>
   d9fa2:	4680      	mov	r8, r0
   d9fa4:	4689      	mov	r9, r1
   d9fa6:	e5a5      	b.n	d9af4 <__ieee754_pow+0x564>
   d9fa8:	4632      	mov	r2, r6
   d9faa:	463b      	mov	r3, r7
   d9fac:	2000      	movs	r0, #0
   d9fae:	4939      	ldr	r1, [pc, #228]	; (da094 <__ieee754_pow+0xb04>)
   d9fb0:	f000 fd6c 	bl	daa8c <__aeabi_ddiv>
   d9fb4:	ec41 0b10 	vmov	d0, r0, r1
   d9fb8:	f7ff bb33 	b.w	d9622 <__ieee754_pow+0x92>
   d9fbc:	a32c      	add	r3, pc, #176	; (adr r3, da070 <__ieee754_pow+0xae0>)
   d9fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9fc6:	f000 fc37 	bl	da838 <__aeabi_dmul>
   d9fca:	a329      	add	r3, pc, #164	; (adr r3, da070 <__ieee754_pow+0xae0>)
   d9fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fd0:	f000 fc32 	bl	da838 <__aeabi_dmul>
   d9fd4:	ec41 0b10 	vmov	d0, r0, r1
   d9fd8:	f7ff bb23 	b.w	d9622 <__ieee754_pow+0x92>
   d9fdc:	f1be 0f00 	cmp.w	lr, #0
   d9fe0:	f47f ab2a 	bne.w	d9638 <__ieee754_pow+0xa8>
   d9fe4:	f1c3 0314 	rsb	r3, r3, #20
   d9fe8:	fa48 f203 	asr.w	r2, r8, r3
   d9fec:	fa02 f303 	lsl.w	r3, r2, r3
   d9ff0:	4598      	cmp	r8, r3
   d9ff2:	d027      	beq.n	da044 <__ieee754_pow+0xab4>
   d9ff4:	46f3      	mov	fp, lr
   d9ff6:	f7ff baf7 	b.w	d95e8 <__ieee754_pow+0x58>
   d9ffa:	4b28      	ldr	r3, [pc, #160]	; (da09c <__ieee754_pow+0xb0c>)
   d9ffc:	4598      	cmp	r8, r3
   d9ffe:	f73f adde 	bgt.w	d9bbe <__ieee754_pow+0x62e>
   da002:	e9dd 3400 	ldrd	r3, r4, [sp]
   da006:	469a      	mov	sl, r3
   da008:	469b      	mov	fp, r3
   da00a:	e607      	b.n	d9c1c <__ieee754_pow+0x68c>
   da00c:	4602      	mov	r2, r0
   da00e:	460b      	mov	r3, r1
   da010:	f7ff bb89 	b.w	d9726 <__ieee754_pow+0x196>
   da014:	ed9f 7b18 	vldr	d7, [pc, #96]	; da078 <__ieee754_pow+0xae8>
   da018:	ed8d 7b08 	vstr	d7, [sp, #32]
   da01c:	ed9f 7b18 	vldr	d7, [pc, #96]	; da080 <__ieee754_pow+0xaf0>
   da020:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   da024:	ed9f 7b18 	vldr	d7, [pc, #96]	; da088 <__ieee754_pow+0xaf8>
   da028:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   da02c:	ed8d 7b06 	vstr	d7, [sp, #24]
   da030:	f7ff bbd4 	b.w	d97dc <__ieee754_pow+0x24c>
   da034:	4658      	mov	r0, fp
   da036:	ec43 2b10 	vmov	d0, r2, r3
   da03a:	f000 f9b1 	bl	da3a0 <scalbn>
   da03e:	ec51 0b10 	vmov	r0, r1, d0
   da042:	e69d      	b.n	d9d80 <__ieee754_pow+0x7f0>
   da044:	f002 0201 	and.w	r2, r2, #1
   da048:	f1c2 0b02 	rsb	fp, r2, #2
   da04c:	f7ff bacc 	b.w	d95e8 <__ieee754_pow+0x58>
   da050:	60000000 	.word	0x60000000
   da054:	3ff71547 	.word	0x3ff71547
   da058:	f85ddf44 	.word	0xf85ddf44
   da05c:	3e54ae0b 	.word	0x3e54ae0b
   da060:	55555555 	.word	0x55555555
   da064:	3fd55555 	.word	0x3fd55555
   da068:	652b82fe 	.word	0x652b82fe
   da06c:	3ff71547 	.word	0x3ff71547
   da070:	8800759c 	.word	0x8800759c
   da074:	7e37e43c 	.word	0x7e37e43c
   da078:	40000000 	.word	0x40000000
   da07c:	3fe2b803 	.word	0x3fe2b803
   da080:	43cfd006 	.word	0x43cfd006
   da084:	3e4cfdeb 	.word	0x3e4cfdeb
   da088:	00000000 	.word	0x00000000
   da08c:	3ff80000 	.word	0x3ff80000
   da090:	3feffffe 	.word	0x3feffffe
   da094:	3ff00000 	.word	0x3ff00000
   da098:	3fd00000 	.word	0x3fd00000
   da09c:	3fe00000 	.word	0x3fe00000

000da0a0 <__ieee754_sqrt>:
   da0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da0a4:	4965      	ldr	r1, [pc, #404]	; (da23c <__ieee754_sqrt+0x19c>)
   da0a6:	ec55 4b10 	vmov	r4, r5, d0
   da0aa:	460e      	mov	r6, r1
   da0ac:	4029      	ands	r1, r5
   da0ae:	42b1      	cmp	r1, r6
   da0b0:	f000 8097 	beq.w	da1e2 <__ieee754_sqrt+0x142>
   da0b4:	2d00      	cmp	r5, #0
   da0b6:	462b      	mov	r3, r5
   da0b8:	ee10 2a10 	vmov	r2, s0
   da0bc:	dd74      	ble.n	da1a8 <__ieee754_sqrt+0x108>
   da0be:	152f      	asrs	r7, r5, #20
   da0c0:	d07f      	beq.n	da1c2 <__ieee754_sqrt+0x122>
   da0c2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   da0c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da0ca:	07f9      	lsls	r1, r7, #31
   da0cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da0d0:	d465      	bmi.n	da19e <__ieee754_sqrt+0xfe>
   da0d2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   da0d6:	2600      	movs	r6, #0
   da0d8:	440b      	add	r3, r1
   da0da:	107f      	asrs	r7, r7, #1
   da0dc:	0052      	lsls	r2, r2, #1
   da0de:	46b6      	mov	lr, r6
   da0e0:	2016      	movs	r0, #22
   da0e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   da0e6:	eb0e 0401 	add.w	r4, lr, r1
   da0ea:	429c      	cmp	r4, r3
   da0ec:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   da0f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da0f4:	dc03      	bgt.n	da0fe <__ieee754_sqrt+0x5e>
   da0f6:	1b1b      	subs	r3, r3, r4
   da0f8:	eb04 0e01 	add.w	lr, r4, r1
   da0fc:	440e      	add	r6, r1
   da0fe:	3801      	subs	r0, #1
   da100:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   da104:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da108:	d1ed      	bne.n	da0e6 <__ieee754_sqrt+0x46>
   da10a:	4684      	mov	ip, r0
   da10c:	2420      	movs	r4, #32
   da10e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   da112:	e009      	b.n	da128 <__ieee754_sqrt+0x88>
   da114:	d020      	beq.n	da158 <__ieee754_sqrt+0xb8>
   da116:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   da11a:	3c01      	subs	r4, #1
   da11c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da120:	442b      	add	r3, r5
   da122:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da126:	d020      	beq.n	da16a <__ieee754_sqrt+0xca>
   da128:	459e      	cmp	lr, r3
   da12a:	eb01 050c 	add.w	r5, r1, ip
   da12e:	daf1      	bge.n	da114 <__ieee754_sqrt+0x74>
   da130:	2d00      	cmp	r5, #0
   da132:	eb05 0c01 	add.w	ip, r5, r1
   da136:	db09      	blt.n	da14c <__ieee754_sqrt+0xac>
   da138:	46f0      	mov	r8, lr
   da13a:	4295      	cmp	r5, r2
   da13c:	ebce 0303 	rsb	r3, lr, r3
   da140:	d900      	bls.n	da144 <__ieee754_sqrt+0xa4>
   da142:	3b01      	subs	r3, #1
   da144:	1b52      	subs	r2, r2, r5
   da146:	4408      	add	r0, r1
   da148:	46c6      	mov	lr, r8
   da14a:	e7e4      	b.n	da116 <__ieee754_sqrt+0x76>
   da14c:	f1bc 0f00 	cmp.w	ip, #0
   da150:	dbf2      	blt.n	da138 <__ieee754_sqrt+0x98>
   da152:	f10e 0801 	add.w	r8, lr, #1
   da156:	e7f0      	b.n	da13a <__ieee754_sqrt+0x9a>
   da158:	4295      	cmp	r5, r2
   da15a:	d81e      	bhi.n	da19a <__ieee754_sqrt+0xfa>
   da15c:	2d00      	cmp	r5, #0
   da15e:	eb05 0c01 	add.w	ip, r5, r1
   da162:	db50      	blt.n	da206 <__ieee754_sqrt+0x166>
   da164:	4698      	mov	r8, r3
   da166:	2300      	movs	r3, #0
   da168:	e7ec      	b.n	da144 <__ieee754_sqrt+0xa4>
   da16a:	4313      	orrs	r3, r2
   da16c:	d004      	beq.n	da178 <__ieee754_sqrt+0xd8>
   da16e:	1c42      	adds	r2, r0, #1
   da170:	d04d      	beq.n	da20e <__ieee754_sqrt+0x16e>
   da172:	f000 0301 	and.w	r3, r0, #1
   da176:	4418      	add	r0, r3
   da178:	0840      	lsrs	r0, r0, #1
   da17a:	1071      	asrs	r1, r6, #1
   da17c:	07f3      	lsls	r3, r6, #31
   da17e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da182:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da186:	bf48      	it	mi
   da188:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   da18c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   da190:	4602      	mov	r2, r0
   da192:	ec43 2b10 	vmov	d0, r2, r3
   da196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da19a:	4673      	mov	r3, lr
   da19c:	e7bb      	b.n	da116 <__ieee754_sqrt+0x76>
   da19e:	005b      	lsls	r3, r3, #1
   da1a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   da1a4:	0052      	lsls	r2, r2, #1
   da1a6:	e794      	b.n	da0d2 <__ieee754_sqrt+0x32>
   da1a8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   da1ac:	4321      	orrs	r1, r4
   da1ae:	d028      	beq.n	da202 <__ieee754_sqrt+0x162>
   da1b0:	bbad      	cbnz	r5, da21e <__ieee754_sqrt+0x17e>
   da1b2:	462f      	mov	r7, r5
   da1b4:	0ad3      	lsrs	r3, r2, #11
   da1b6:	3f15      	subs	r7, #21
   da1b8:	0552      	lsls	r2, r2, #21
   da1ba:	2b00      	cmp	r3, #0
   da1bc:	d0fa      	beq.n	da1b4 <__ieee754_sqrt+0x114>
   da1be:	02dd      	lsls	r5, r3, #11
   da1c0:	d428      	bmi.n	da214 <__ieee754_sqrt+0x174>
   da1c2:	2100      	movs	r1, #0
   da1c4:	e000      	b.n	da1c8 <__ieee754_sqrt+0x128>
   da1c6:	4601      	mov	r1, r0
   da1c8:	005b      	lsls	r3, r3, #1
   da1ca:	02dc      	lsls	r4, r3, #11
   da1cc:	f101 0001 	add.w	r0, r1, #1
   da1d0:	d5f9      	bpl.n	da1c6 <__ieee754_sqrt+0x126>
   da1d2:	f1c0 0420 	rsb	r4, r0, #32
   da1d6:	fa22 f404 	lsr.w	r4, r2, r4
   da1da:	4323      	orrs	r3, r4
   da1dc:	1a7f      	subs	r7, r7, r1
   da1de:	4082      	lsls	r2, r0
   da1e0:	e76f      	b.n	da0c2 <__ieee754_sqrt+0x22>
   da1e2:	ee10 2a10 	vmov	r2, s0
   da1e6:	462b      	mov	r3, r5
   da1e8:	ee10 0a10 	vmov	r0, s0
   da1ec:	4629      	mov	r1, r5
   da1ee:	f000 fb23 	bl	da838 <__aeabi_dmul>
   da1f2:	4622      	mov	r2, r4
   da1f4:	462b      	mov	r3, r5
   da1f6:	f000 f96d 	bl	da4d4 <__adddf3>
   da1fa:	ec41 0b10 	vmov	d0, r0, r1
   da1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da206:	f1bc 0f00 	cmp.w	ip, #0
   da20a:	daa2      	bge.n	da152 <__ieee754_sqrt+0xb2>
   da20c:	e7aa      	b.n	da164 <__ieee754_sqrt+0xc4>
   da20e:	3601      	adds	r6, #1
   da210:	4620      	mov	r0, r4
   da212:	e7b2      	b.n	da17a <__ieee754_sqrt+0xda>
   da214:	2420      	movs	r4, #32
   da216:	f04f 31ff 	mov.w	r1, #4294967295
   da21a:	2000      	movs	r0, #0
   da21c:	e7db      	b.n	da1d6 <__ieee754_sqrt+0x136>
   da21e:	ee10 2a10 	vmov	r2, s0
   da222:	462b      	mov	r3, r5
   da224:	4620      	mov	r0, r4
   da226:	4629      	mov	r1, r5
   da228:	f000 f952 	bl	da4d0 <__aeabi_dsub>
   da22c:	4602      	mov	r2, r0
   da22e:	460b      	mov	r3, r1
   da230:	f000 fc2c 	bl	daa8c <__aeabi_ddiv>
   da234:	ec41 0b10 	vmov	d0, r0, r1
   da238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da23c:	7ff00000 	.word	0x7ff00000

000da240 <fabs>:
   da240:	ec53 2b10 	vmov	r2, r3, d0
   da244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   da248:	ec43 2b10 	vmov	d0, r2, r3
   da24c:	4770      	bx	lr
   da24e:	bf00      	nop

000da250 <finite>:
   da250:	ee10 3a90 	vmov	r3, s1
   da254:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   da258:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   da25c:	0fc0      	lsrs	r0, r0, #31
   da25e:	4770      	bx	lr

000da260 <matherr>:
   da260:	2000      	movs	r0, #0
   da262:	4770      	bx	lr
   da264:	0000      	movs	r0, r0
	...

000da268 <nan>:
   da268:	ed9f 0b01 	vldr	d0, [pc, #4]	; da270 <nan+0x8>
   da26c:	4770      	bx	lr
   da26e:	bf00      	nop
   da270:	00000000 	.word	0x00000000
   da274:	7ff80000 	.word	0x7ff80000

000da278 <rint>:
   da278:	b5f0      	push	{r4, r5, r6, r7, lr}
   da27a:	ec53 2b10 	vmov	r2, r3, d0
   da27e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   da282:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   da286:	2813      	cmp	r0, #19
   da288:	b083      	sub	sp, #12
   da28a:	4619      	mov	r1, r3
   da28c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   da290:	ee10 5a10 	vmov	r5, s0
   da294:	dc2f      	bgt.n	da2f6 <rint+0x7e>
   da296:	2800      	cmp	r0, #0
   da298:	db49      	blt.n	da32e <rint+0xb6>
   da29a:	4e3f      	ldr	r6, [pc, #252]	; (da398 <rint+0x120>)
   da29c:	4106      	asrs	r6, r0
   da29e:	ea03 0706 	and.w	r7, r3, r6
   da2a2:	4317      	orrs	r7, r2
   da2a4:	d02c      	beq.n	da300 <rint+0x88>
   da2a6:	0876      	lsrs	r6, r6, #1
   da2a8:	4033      	ands	r3, r6
   da2aa:	431d      	orrs	r5, r3
   da2ac:	d00c      	beq.n	da2c8 <rint+0x50>
   da2ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   da2b2:	2813      	cmp	r0, #19
   da2b4:	ea21 0606 	bic.w	r6, r1, r6
   da2b8:	fa43 f100 	asr.w	r1, r3, r0
   da2bc:	ea41 0106 	orr.w	r1, r1, r6
   da2c0:	bf0c      	ite	eq
   da2c2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   da2c6:	2500      	movne	r5, #0
   da2c8:	4834      	ldr	r0, [pc, #208]	; (da39c <rint+0x124>)
   da2ca:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   da2ce:	462a      	mov	r2, r5
   da2d0:	e9d4 4500 	ldrd	r4, r5, [r4]
   da2d4:	4610      	mov	r0, r2
   da2d6:	462b      	mov	r3, r5
   da2d8:	4622      	mov	r2, r4
   da2da:	f000 f8fb 	bl	da4d4 <__adddf3>
   da2de:	e9cd 0100 	strd	r0, r1, [sp]
   da2e2:	4622      	mov	r2, r4
   da2e4:	462b      	mov	r3, r5
   da2e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   da2ea:	f000 f8f1 	bl	da4d0 <__aeabi_dsub>
   da2ee:	ec41 0b10 	vmov	d0, r0, r1
   da2f2:	b003      	add	sp, #12
   da2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da2f6:	2833      	cmp	r0, #51	; 0x33
   da2f8:	dd06      	ble.n	da308 <rint+0x90>
   da2fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   da2fe:	d042      	beq.n	da386 <rint+0x10e>
   da300:	ec43 2b10 	vmov	d0, r2, r3
   da304:	b003      	add	sp, #12
   da306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da308:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   da30c:	f04f 30ff 	mov.w	r0, #4294967295
   da310:	40f0      	lsrs	r0, r6
   da312:	4202      	tst	r2, r0
   da314:	d0f4      	beq.n	da300 <rint+0x88>
   da316:	0840      	lsrs	r0, r0, #1
   da318:	4202      	tst	r2, r0
   da31a:	d0d5      	beq.n	da2c8 <rint+0x50>
   da31c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da320:	ea25 0000 	bic.w	r0, r5, r0
   da324:	fa43 f606 	asr.w	r6, r3, r6
   da328:	ea46 0500 	orr.w	r5, r6, r0
   da32c:	e7cc      	b.n	da2c8 <rint+0x50>
   da32e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   da332:	4310      	orrs	r0, r2
   da334:	ee10 7a10 	vmov	r7, s0
   da338:	d0e2      	beq.n	da300 <rint+0x88>
   da33a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   da33e:	4307      	orrs	r7, r0
   da340:	4278      	negs	r0, r7
   da342:	4307      	orrs	r7, r0
   da344:	4815      	ldr	r0, [pc, #84]	; (da39c <rint+0x124>)
   da346:	0c59      	lsrs	r1, r3, #17
   da348:	0b3f      	lsrs	r7, r7, #12
   da34a:	0449      	lsls	r1, r1, #17
   da34c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   da350:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   da354:	ea47 0301 	orr.w	r3, r7, r1
   da358:	e9d0 6700 	ldrd	r6, r7, [r0]
   da35c:	4619      	mov	r1, r3
   da35e:	4610      	mov	r0, r2
   da360:	463b      	mov	r3, r7
   da362:	4632      	mov	r2, r6
   da364:	f000 f8b6 	bl	da4d4 <__adddf3>
   da368:	e9cd 0100 	strd	r0, r1, [sp]
   da36c:	463b      	mov	r3, r7
   da36e:	4632      	mov	r2, r6
   da370:	e9dd 0100 	ldrd	r0, r1, [sp]
   da374:	f000 f8ac 	bl	da4d0 <__aeabi_dsub>
   da378:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da37c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   da380:	ec41 0b10 	vmov	d0, r0, r1
   da384:	e7be      	b.n	da304 <rint+0x8c>
   da386:	ee10 0a10 	vmov	r0, s0
   da38a:	4619      	mov	r1, r3
   da38c:	f000 f8a2 	bl	da4d4 <__adddf3>
   da390:	ec41 0b10 	vmov	d0, r0, r1
   da394:	e7b6      	b.n	da304 <rint+0x8c>
   da396:	bf00      	nop
   da398:	000fffff 	.word	0x000fffff
   da39c:	000dd078 	.word	0x000dd078

000da3a0 <scalbn>:
   da3a0:	ec53 2b10 	vmov	r2, r3, d0
   da3a4:	b570      	push	{r4, r5, r6, lr}
   da3a6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   da3aa:	4619      	mov	r1, r3
   da3ac:	4605      	mov	r5, r0
   da3ae:	bb14      	cbnz	r4, da3f6 <scalbn+0x56>
   da3b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da3b4:	4311      	orrs	r1, r2
   da3b6:	d02a      	beq.n	da40e <scalbn+0x6e>
   da3b8:	4619      	mov	r1, r3
   da3ba:	2200      	movs	r2, #0
   da3bc:	4b38      	ldr	r3, [pc, #224]	; (da4a0 <scalbn+0x100>)
   da3be:	4e39      	ldr	r6, [pc, #228]	; (da4a4 <scalbn+0x104>)
   da3c0:	ee10 0a10 	vmov	r0, s0
   da3c4:	f000 fa38 	bl	da838 <__aeabi_dmul>
   da3c8:	42b5      	cmp	r5, r6
   da3ca:	4602      	mov	r2, r0
   da3cc:	460b      	mov	r3, r1
   da3ce:	db1f      	blt.n	da410 <scalbn+0x70>
   da3d0:	f3c1 540a 	ubfx	r4, r1, #20, #11
   da3d4:	3c36      	subs	r4, #54	; 0x36
   da3d6:	442c      	add	r4, r5
   da3d8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   da3dc:	4284      	cmp	r4, r0
   da3de:	dc1f      	bgt.n	da420 <scalbn+0x80>
   da3e0:	2c00      	cmp	r4, #0
   da3e2:	dd2d      	ble.n	da440 <scalbn+0xa0>
   da3e4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da3e8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da3ec:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da3f0:	ec43 2b10 	vmov	d0, r2, r3
   da3f4:	bd70      	pop	{r4, r5, r6, pc}
   da3f6:	f240 70ff 	movw	r0, #2047	; 0x7ff
   da3fa:	4284      	cmp	r4, r0
   da3fc:	d1eb      	bne.n	da3d6 <scalbn+0x36>
   da3fe:	ee10 0a10 	vmov	r0, s0
   da402:	4619      	mov	r1, r3
   da404:	f000 f866 	bl	da4d4 <__adddf3>
   da408:	ec41 0b10 	vmov	d0, r0, r1
   da40c:	bd70      	pop	{r4, r5, r6, pc}
   da40e:	bd70      	pop	{r4, r5, r6, pc}
   da410:	a31f      	add	r3, pc, #124	; (adr r3, da490 <scalbn+0xf0>)
   da412:	e9d3 2300 	ldrd	r2, r3, [r3]
   da416:	f000 fa0f 	bl	da838 <__aeabi_dmul>
   da41a:	ec41 0b10 	vmov	d0, r0, r1
   da41e:	bd70      	pop	{r4, r5, r6, pc}
   da420:	ec43 2b11 	vmov	d1, r2, r3
   da424:	ed9f 0b1c 	vldr	d0, [pc, #112]	; da498 <scalbn+0xf8>
   da428:	f000 f840 	bl	da4ac <copysign>
   da42c:	a31a      	add	r3, pc, #104	; (adr r3, da498 <scalbn+0xf8>)
   da42e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da432:	ec51 0b10 	vmov	r0, r1, d0
   da436:	f000 f9ff 	bl	da838 <__aeabi_dmul>
   da43a:	ec41 0b10 	vmov	d0, r0, r1
   da43e:	bd70      	pop	{r4, r5, r6, pc}
   da440:	f114 0f35 	cmn.w	r4, #53	; 0x35
   da444:	da13      	bge.n	da46e <scalbn+0xce>
   da446:	f24c 3150 	movw	r1, #50000	; 0xc350
   da44a:	428d      	cmp	r5, r1
   da44c:	ec43 2b11 	vmov	d1, r2, r3
   da450:	dce8      	bgt.n	da424 <scalbn+0x84>
   da452:	ed9f 0b0f 	vldr	d0, [pc, #60]	; da490 <scalbn+0xf0>
   da456:	f000 f829 	bl	da4ac <copysign>
   da45a:	a30d      	add	r3, pc, #52	; (adr r3, da490 <scalbn+0xf0>)
   da45c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da460:	ec51 0b10 	vmov	r0, r1, d0
   da464:	f000 f9e8 	bl	da838 <__aeabi_dmul>
   da468:	ec41 0b10 	vmov	d0, r0, r1
   da46c:	bd70      	pop	{r4, r5, r6, pc}
   da46e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da472:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da476:	3436      	adds	r4, #54	; 0x36
   da478:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da47c:	4610      	mov	r0, r2
   da47e:	4619      	mov	r1, r3
   da480:	2200      	movs	r2, #0
   da482:	4b09      	ldr	r3, [pc, #36]	; (da4a8 <scalbn+0x108>)
   da484:	f000 f9d8 	bl	da838 <__aeabi_dmul>
   da488:	ec41 0b10 	vmov	d0, r0, r1
   da48c:	bd70      	pop	{r4, r5, r6, pc}
   da48e:	bf00      	nop
   da490:	c2f8f359 	.word	0xc2f8f359
   da494:	01a56e1f 	.word	0x01a56e1f
   da498:	8800759c 	.word	0x8800759c
   da49c:	7e37e43c 	.word	0x7e37e43c
   da4a0:	43500000 	.word	0x43500000
   da4a4:	ffff3cb0 	.word	0xffff3cb0
   da4a8:	3c900000 	.word	0x3c900000

000da4ac <copysign>:
   da4ac:	ec53 2b10 	vmov	r2, r3, d0
   da4b0:	ee11 0a90 	vmov	r0, s3
   da4b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da4b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   da4bc:	ea41 0300 	orr.w	r3, r1, r0
   da4c0:	ec43 2b10 	vmov	d0, r2, r3
   da4c4:	4770      	bx	lr
   da4c6:	bf00      	nop

000da4c8 <__aeabi_drsub>:
   da4c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da4cc:	e002      	b.n	da4d4 <__adddf3>
   da4ce:	bf00      	nop

000da4d0 <__aeabi_dsub>:
   da4d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da4d4 <__adddf3>:
   da4d4:	b530      	push	{r4, r5, lr}
   da4d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da4da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da4de:	ea94 0f05 	teq	r4, r5
   da4e2:	bf08      	it	eq
   da4e4:	ea90 0f02 	teqeq	r0, r2
   da4e8:	bf1f      	itttt	ne
   da4ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   da4ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   da4f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da4f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da4fa:	f000 80e2 	beq.w	da6c2 <__adddf3+0x1ee>
   da4fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da502:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da506:	bfb8      	it	lt
   da508:	426d      	neglt	r5, r5
   da50a:	dd0c      	ble.n	da526 <__adddf3+0x52>
   da50c:	442c      	add	r4, r5
   da50e:	ea80 0202 	eor.w	r2, r0, r2
   da512:	ea81 0303 	eor.w	r3, r1, r3
   da516:	ea82 0000 	eor.w	r0, r2, r0
   da51a:	ea83 0101 	eor.w	r1, r3, r1
   da51e:	ea80 0202 	eor.w	r2, r0, r2
   da522:	ea81 0303 	eor.w	r3, r1, r3
   da526:	2d36      	cmp	r5, #54	; 0x36
   da528:	bf88      	it	hi
   da52a:	bd30      	pophi	{r4, r5, pc}
   da52c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da530:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da534:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da538:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da53c:	d002      	beq.n	da544 <__adddf3+0x70>
   da53e:	4240      	negs	r0, r0
   da540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da544:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da548:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da54c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da550:	d002      	beq.n	da558 <__adddf3+0x84>
   da552:	4252      	negs	r2, r2
   da554:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da558:	ea94 0f05 	teq	r4, r5
   da55c:	f000 80a7 	beq.w	da6ae <__adddf3+0x1da>
   da560:	f1a4 0401 	sub.w	r4, r4, #1
   da564:	f1d5 0e20 	rsbs	lr, r5, #32
   da568:	db0d      	blt.n	da586 <__adddf3+0xb2>
   da56a:	fa02 fc0e 	lsl.w	ip, r2, lr
   da56e:	fa22 f205 	lsr.w	r2, r2, r5
   da572:	1880      	adds	r0, r0, r2
   da574:	f141 0100 	adc.w	r1, r1, #0
   da578:	fa03 f20e 	lsl.w	r2, r3, lr
   da57c:	1880      	adds	r0, r0, r2
   da57e:	fa43 f305 	asr.w	r3, r3, r5
   da582:	4159      	adcs	r1, r3
   da584:	e00e      	b.n	da5a4 <__adddf3+0xd0>
   da586:	f1a5 0520 	sub.w	r5, r5, #32
   da58a:	f10e 0e20 	add.w	lr, lr, #32
   da58e:	2a01      	cmp	r2, #1
   da590:	fa03 fc0e 	lsl.w	ip, r3, lr
   da594:	bf28      	it	cs
   da596:	f04c 0c02 	orrcs.w	ip, ip, #2
   da59a:	fa43 f305 	asr.w	r3, r3, r5
   da59e:	18c0      	adds	r0, r0, r3
   da5a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da5a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da5a8:	d507      	bpl.n	da5ba <__adddf3+0xe6>
   da5aa:	f04f 0e00 	mov.w	lr, #0
   da5ae:	f1dc 0c00 	rsbs	ip, ip, #0
   da5b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   da5b6:	eb6e 0101 	sbc.w	r1, lr, r1
   da5ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da5be:	d31b      	bcc.n	da5f8 <__adddf3+0x124>
   da5c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da5c4:	d30c      	bcc.n	da5e0 <__adddf3+0x10c>
   da5c6:	0849      	lsrs	r1, r1, #1
   da5c8:	ea5f 0030 	movs.w	r0, r0, rrx
   da5cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da5d0:	f104 0401 	add.w	r4, r4, #1
   da5d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da5d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da5dc:	f080 809a 	bcs.w	da714 <__adddf3+0x240>
   da5e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da5e4:	bf08      	it	eq
   da5e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da5ea:	f150 0000 	adcs.w	r0, r0, #0
   da5ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da5f2:	ea41 0105 	orr.w	r1, r1, r5
   da5f6:	bd30      	pop	{r4, r5, pc}
   da5f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da5fc:	4140      	adcs	r0, r0
   da5fe:	eb41 0101 	adc.w	r1, r1, r1
   da602:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da606:	f1a4 0401 	sub.w	r4, r4, #1
   da60a:	d1e9      	bne.n	da5e0 <__adddf3+0x10c>
   da60c:	f091 0f00 	teq	r1, #0
   da610:	bf04      	itt	eq
   da612:	4601      	moveq	r1, r0
   da614:	2000      	moveq	r0, #0
   da616:	fab1 f381 	clz	r3, r1
   da61a:	bf08      	it	eq
   da61c:	3320      	addeq	r3, #32
   da61e:	f1a3 030b 	sub.w	r3, r3, #11
   da622:	f1b3 0220 	subs.w	r2, r3, #32
   da626:	da0c      	bge.n	da642 <__adddf3+0x16e>
   da628:	320c      	adds	r2, #12
   da62a:	dd08      	ble.n	da63e <__adddf3+0x16a>
   da62c:	f102 0c14 	add.w	ip, r2, #20
   da630:	f1c2 020c 	rsb	r2, r2, #12
   da634:	fa01 f00c 	lsl.w	r0, r1, ip
   da638:	fa21 f102 	lsr.w	r1, r1, r2
   da63c:	e00c      	b.n	da658 <__adddf3+0x184>
   da63e:	f102 0214 	add.w	r2, r2, #20
   da642:	bfd8      	it	le
   da644:	f1c2 0c20 	rsble	ip, r2, #32
   da648:	fa01 f102 	lsl.w	r1, r1, r2
   da64c:	fa20 fc0c 	lsr.w	ip, r0, ip
   da650:	bfdc      	itt	le
   da652:	ea41 010c 	orrle.w	r1, r1, ip
   da656:	4090      	lslle	r0, r2
   da658:	1ae4      	subs	r4, r4, r3
   da65a:	bfa2      	ittt	ge
   da65c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da660:	4329      	orrge	r1, r5
   da662:	bd30      	popge	{r4, r5, pc}
   da664:	ea6f 0404 	mvn.w	r4, r4
   da668:	3c1f      	subs	r4, #31
   da66a:	da1c      	bge.n	da6a6 <__adddf3+0x1d2>
   da66c:	340c      	adds	r4, #12
   da66e:	dc0e      	bgt.n	da68e <__adddf3+0x1ba>
   da670:	f104 0414 	add.w	r4, r4, #20
   da674:	f1c4 0220 	rsb	r2, r4, #32
   da678:	fa20 f004 	lsr.w	r0, r0, r4
   da67c:	fa01 f302 	lsl.w	r3, r1, r2
   da680:	ea40 0003 	orr.w	r0, r0, r3
   da684:	fa21 f304 	lsr.w	r3, r1, r4
   da688:	ea45 0103 	orr.w	r1, r5, r3
   da68c:	bd30      	pop	{r4, r5, pc}
   da68e:	f1c4 040c 	rsb	r4, r4, #12
   da692:	f1c4 0220 	rsb	r2, r4, #32
   da696:	fa20 f002 	lsr.w	r0, r0, r2
   da69a:	fa01 f304 	lsl.w	r3, r1, r4
   da69e:	ea40 0003 	orr.w	r0, r0, r3
   da6a2:	4629      	mov	r1, r5
   da6a4:	bd30      	pop	{r4, r5, pc}
   da6a6:	fa21 f004 	lsr.w	r0, r1, r4
   da6aa:	4629      	mov	r1, r5
   da6ac:	bd30      	pop	{r4, r5, pc}
   da6ae:	f094 0f00 	teq	r4, #0
   da6b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da6b6:	bf06      	itte	eq
   da6b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da6bc:	3401      	addeq	r4, #1
   da6be:	3d01      	subne	r5, #1
   da6c0:	e74e      	b.n	da560 <__adddf3+0x8c>
   da6c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6c6:	bf18      	it	ne
   da6c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da6cc:	d029      	beq.n	da722 <__adddf3+0x24e>
   da6ce:	ea94 0f05 	teq	r4, r5
   da6d2:	bf08      	it	eq
   da6d4:	ea90 0f02 	teqeq	r0, r2
   da6d8:	d005      	beq.n	da6e6 <__adddf3+0x212>
   da6da:	ea54 0c00 	orrs.w	ip, r4, r0
   da6de:	bf04      	itt	eq
   da6e0:	4619      	moveq	r1, r3
   da6e2:	4610      	moveq	r0, r2
   da6e4:	bd30      	pop	{r4, r5, pc}
   da6e6:	ea91 0f03 	teq	r1, r3
   da6ea:	bf1e      	ittt	ne
   da6ec:	2100      	movne	r1, #0
   da6ee:	2000      	movne	r0, #0
   da6f0:	bd30      	popne	{r4, r5, pc}
   da6f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da6f6:	d105      	bne.n	da704 <__adddf3+0x230>
   da6f8:	0040      	lsls	r0, r0, #1
   da6fa:	4149      	adcs	r1, r1
   da6fc:	bf28      	it	cs
   da6fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da702:	bd30      	pop	{r4, r5, pc}
   da704:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da708:	bf3c      	itt	cc
   da70a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da70e:	bd30      	popcc	{r4, r5, pc}
   da710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da714:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da71c:	f04f 0000 	mov.w	r0, #0
   da720:	bd30      	pop	{r4, r5, pc}
   da722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da726:	bf1a      	itte	ne
   da728:	4619      	movne	r1, r3
   da72a:	4610      	movne	r0, r2
   da72c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da730:	bf1c      	itt	ne
   da732:	460b      	movne	r3, r1
   da734:	4602      	movne	r2, r0
   da736:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da73a:	bf06      	itte	eq
   da73c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da740:	ea91 0f03 	teqeq	r1, r3
   da744:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da748:	bd30      	pop	{r4, r5, pc}
   da74a:	bf00      	nop

000da74c <__aeabi_ui2d>:
   da74c:	f090 0f00 	teq	r0, #0
   da750:	bf04      	itt	eq
   da752:	2100      	moveq	r1, #0
   da754:	4770      	bxeq	lr
   da756:	b530      	push	{r4, r5, lr}
   da758:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da75c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da760:	f04f 0500 	mov.w	r5, #0
   da764:	f04f 0100 	mov.w	r1, #0
   da768:	e750      	b.n	da60c <__adddf3+0x138>
   da76a:	bf00      	nop

000da76c <__aeabi_i2d>:
   da76c:	f090 0f00 	teq	r0, #0
   da770:	bf04      	itt	eq
   da772:	2100      	moveq	r1, #0
   da774:	4770      	bxeq	lr
   da776:	b530      	push	{r4, r5, lr}
   da778:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da77c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da780:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da784:	bf48      	it	mi
   da786:	4240      	negmi	r0, r0
   da788:	f04f 0100 	mov.w	r1, #0
   da78c:	e73e      	b.n	da60c <__adddf3+0x138>
   da78e:	bf00      	nop

000da790 <__aeabi_f2d>:
   da790:	0042      	lsls	r2, r0, #1
   da792:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da796:	ea4f 0131 	mov.w	r1, r1, rrx
   da79a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da79e:	bf1f      	itttt	ne
   da7a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da7a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da7ac:	4770      	bxne	lr
   da7ae:	f092 0f00 	teq	r2, #0
   da7b2:	bf14      	ite	ne
   da7b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7b8:	4770      	bxeq	lr
   da7ba:	b530      	push	{r4, r5, lr}
   da7bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   da7c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da7c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da7c8:	e720      	b.n	da60c <__adddf3+0x138>
   da7ca:	bf00      	nop

000da7cc <__aeabi_ul2d>:
   da7cc:	ea50 0201 	orrs.w	r2, r0, r1
   da7d0:	bf08      	it	eq
   da7d2:	4770      	bxeq	lr
   da7d4:	b530      	push	{r4, r5, lr}
   da7d6:	f04f 0500 	mov.w	r5, #0
   da7da:	e00a      	b.n	da7f2 <__aeabi_l2d+0x16>

000da7dc <__aeabi_l2d>:
   da7dc:	ea50 0201 	orrs.w	r2, r0, r1
   da7e0:	bf08      	it	eq
   da7e2:	4770      	bxeq	lr
   da7e4:	b530      	push	{r4, r5, lr}
   da7e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da7ea:	d502      	bpl.n	da7f2 <__aeabi_l2d+0x16>
   da7ec:	4240      	negs	r0, r0
   da7ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da7fe:	f43f aedc 	beq.w	da5ba <__adddf3+0xe6>
   da802:	f04f 0203 	mov.w	r2, #3
   da806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da80a:	bf18      	it	ne
   da80c:	3203      	addne	r2, #3
   da80e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da812:	bf18      	it	ne
   da814:	3203      	addne	r2, #3
   da816:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da81a:	f1c2 0320 	rsb	r3, r2, #32
   da81e:	fa00 fc03 	lsl.w	ip, r0, r3
   da822:	fa20 f002 	lsr.w	r0, r0, r2
   da826:	fa01 fe03 	lsl.w	lr, r1, r3
   da82a:	ea40 000e 	orr.w	r0, r0, lr
   da82e:	fa21 f102 	lsr.w	r1, r1, r2
   da832:	4414      	add	r4, r2
   da834:	e6c1      	b.n	da5ba <__adddf3+0xe6>
   da836:	bf00      	nop

000da838 <__aeabi_dmul>:
   da838:	b570      	push	{r4, r5, r6, lr}
   da83a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da83e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da842:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da846:	bf1d      	ittte	ne
   da848:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da84c:	ea94 0f0c 	teqne	r4, ip
   da850:	ea95 0f0c 	teqne	r5, ip
   da854:	f000 f8de 	bleq	daa14 <__aeabi_dmul+0x1dc>
   da858:	442c      	add	r4, r5
   da85a:	ea81 0603 	eor.w	r6, r1, r3
   da85e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da862:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da866:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da86a:	bf18      	it	ne
   da86c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da878:	d038      	beq.n	da8ec <__aeabi_dmul+0xb4>
   da87a:	fba0 ce02 	umull	ip, lr, r0, r2
   da87e:	f04f 0500 	mov.w	r5, #0
   da882:	fbe1 e502 	umlal	lr, r5, r1, r2
   da886:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da88a:	fbe0 e503 	umlal	lr, r5, r0, r3
   da88e:	f04f 0600 	mov.w	r6, #0
   da892:	fbe1 5603 	umlal	r5, r6, r1, r3
   da896:	f09c 0f00 	teq	ip, #0
   da89a:	bf18      	it	ne
   da89c:	f04e 0e01 	orrne.w	lr, lr, #1
   da8a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da8a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da8a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da8ac:	d204      	bcs.n	da8b8 <__aeabi_dmul+0x80>
   da8ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da8b2:	416d      	adcs	r5, r5
   da8b4:	eb46 0606 	adc.w	r6, r6, r6
   da8b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da8bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da8c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da8c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da8c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da8cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da8d0:	bf88      	it	hi
   da8d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da8d6:	d81e      	bhi.n	da916 <__aeabi_dmul+0xde>
   da8d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da8dc:	bf08      	it	eq
   da8de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da8e2:	f150 0000 	adcs.w	r0, r0, #0
   da8e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da8ea:	bd70      	pop	{r4, r5, r6, pc}
   da8ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da8f0:	ea46 0101 	orr.w	r1, r6, r1
   da8f4:	ea40 0002 	orr.w	r0, r0, r2
   da8f8:	ea81 0103 	eor.w	r1, r1, r3
   da8fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da900:	bfc2      	ittt	gt
   da902:	ebd4 050c 	rsbsgt	r5, r4, ip
   da906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da90a:	bd70      	popgt	{r4, r5, r6, pc}
   da90c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da910:	f04f 0e00 	mov.w	lr, #0
   da914:	3c01      	subs	r4, #1
   da916:	f300 80ab 	bgt.w	daa70 <__aeabi_dmul+0x238>
   da91a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da91e:	bfde      	ittt	le
   da920:	2000      	movle	r0, #0
   da922:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da926:	bd70      	pople	{r4, r5, r6, pc}
   da928:	f1c4 0400 	rsb	r4, r4, #0
   da92c:	3c20      	subs	r4, #32
   da92e:	da35      	bge.n	da99c <__aeabi_dmul+0x164>
   da930:	340c      	adds	r4, #12
   da932:	dc1b      	bgt.n	da96c <__aeabi_dmul+0x134>
   da934:	f104 0414 	add.w	r4, r4, #20
   da938:	f1c4 0520 	rsb	r5, r4, #32
   da93c:	fa00 f305 	lsl.w	r3, r0, r5
   da940:	fa20 f004 	lsr.w	r0, r0, r4
   da944:	fa01 f205 	lsl.w	r2, r1, r5
   da948:	ea40 0002 	orr.w	r0, r0, r2
   da94c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da954:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da958:	fa21 f604 	lsr.w	r6, r1, r4
   da95c:	eb42 0106 	adc.w	r1, r2, r6
   da960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da964:	bf08      	it	eq
   da966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da96a:	bd70      	pop	{r4, r5, r6, pc}
   da96c:	f1c4 040c 	rsb	r4, r4, #12
   da970:	f1c4 0520 	rsb	r5, r4, #32
   da974:	fa00 f304 	lsl.w	r3, r0, r4
   da978:	fa20 f005 	lsr.w	r0, r0, r5
   da97c:	fa01 f204 	lsl.w	r2, r1, r4
   da980:	ea40 0002 	orr.w	r0, r0, r2
   da984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da988:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da98c:	f141 0100 	adc.w	r1, r1, #0
   da990:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da994:	bf08      	it	eq
   da996:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da99a:	bd70      	pop	{r4, r5, r6, pc}
   da99c:	f1c4 0520 	rsb	r5, r4, #32
   da9a0:	fa00 f205 	lsl.w	r2, r0, r5
   da9a4:	ea4e 0e02 	orr.w	lr, lr, r2
   da9a8:	fa20 f304 	lsr.w	r3, r0, r4
   da9ac:	fa01 f205 	lsl.w	r2, r1, r5
   da9b0:	ea43 0302 	orr.w	r3, r3, r2
   da9b4:	fa21 f004 	lsr.w	r0, r1, r4
   da9b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9bc:	fa21 f204 	lsr.w	r2, r1, r4
   da9c0:	ea20 0002 	bic.w	r0, r0, r2
   da9c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da9c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da9cc:	bf08      	it	eq
   da9ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da9d2:	bd70      	pop	{r4, r5, r6, pc}
   da9d4:	f094 0f00 	teq	r4, #0
   da9d8:	d10f      	bne.n	da9fa <__aeabi_dmul+0x1c2>
   da9da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da9de:	0040      	lsls	r0, r0, #1
   da9e0:	eb41 0101 	adc.w	r1, r1, r1
   da9e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da9e8:	bf08      	it	eq
   da9ea:	3c01      	subeq	r4, #1
   da9ec:	d0f7      	beq.n	da9de <__aeabi_dmul+0x1a6>
   da9ee:	ea41 0106 	orr.w	r1, r1, r6
   da9f2:	f095 0f00 	teq	r5, #0
   da9f6:	bf18      	it	ne
   da9f8:	4770      	bxne	lr
   da9fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da9fe:	0052      	lsls	r2, r2, #1
   daa00:	eb43 0303 	adc.w	r3, r3, r3
   daa04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   daa08:	bf08      	it	eq
   daa0a:	3d01      	subeq	r5, #1
   daa0c:	d0f7      	beq.n	da9fe <__aeabi_dmul+0x1c6>
   daa0e:	ea43 0306 	orr.w	r3, r3, r6
   daa12:	4770      	bx	lr
   daa14:	ea94 0f0c 	teq	r4, ip
   daa18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daa1c:	bf18      	it	ne
   daa1e:	ea95 0f0c 	teqne	r5, ip
   daa22:	d00c      	beq.n	daa3e <__aeabi_dmul+0x206>
   daa24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa28:	bf18      	it	ne
   daa2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa2e:	d1d1      	bne.n	da9d4 <__aeabi_dmul+0x19c>
   daa30:	ea81 0103 	eor.w	r1, r1, r3
   daa34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa38:	f04f 0000 	mov.w	r0, #0
   daa3c:	bd70      	pop	{r4, r5, r6, pc}
   daa3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa42:	bf06      	itte	eq
   daa44:	4610      	moveq	r0, r2
   daa46:	4619      	moveq	r1, r3
   daa48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa4c:	d019      	beq.n	daa82 <__aeabi_dmul+0x24a>
   daa4e:	ea94 0f0c 	teq	r4, ip
   daa52:	d102      	bne.n	daa5a <__aeabi_dmul+0x222>
   daa54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa58:	d113      	bne.n	daa82 <__aeabi_dmul+0x24a>
   daa5a:	ea95 0f0c 	teq	r5, ip
   daa5e:	d105      	bne.n	daa6c <__aeabi_dmul+0x234>
   daa60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa64:	bf1c      	itt	ne
   daa66:	4610      	movne	r0, r2
   daa68:	4619      	movne	r1, r3
   daa6a:	d10a      	bne.n	daa82 <__aeabi_dmul+0x24a>
   daa6c:	ea81 0103 	eor.w	r1, r1, r3
   daa70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa7c:	f04f 0000 	mov.w	r0, #0
   daa80:	bd70      	pop	{r4, r5, r6, pc}
   daa82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daa8a:	bd70      	pop	{r4, r5, r6, pc}

000daa8c <__aeabi_ddiv>:
   daa8c:	b570      	push	{r4, r5, r6, lr}
   daa8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa9a:	bf1d      	ittte	ne
   daa9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daaa0:	ea94 0f0c 	teqne	r4, ip
   daaa4:	ea95 0f0c 	teqne	r5, ip
   daaa8:	f000 f8a7 	bleq	dabfa <__aeabi_ddiv+0x16e>
   daaac:	eba4 0405 	sub.w	r4, r4, r5
   daab0:	ea81 0e03 	eor.w	lr, r1, r3
   daab4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daabc:	f000 8088 	beq.w	dabd0 <__aeabi_ddiv+0x144>
   daac0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daac4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daac8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daacc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daad0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daad4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daad8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daadc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daae0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daae4:	429d      	cmp	r5, r3
   daae6:	bf08      	it	eq
   daae8:	4296      	cmpeq	r6, r2
   daaea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daaee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daaf2:	d202      	bcs.n	daafa <__aeabi_ddiv+0x6e>
   daaf4:	085b      	lsrs	r3, r3, #1
   daaf6:	ea4f 0232 	mov.w	r2, r2, rrx
   daafa:	1ab6      	subs	r6, r6, r2
   daafc:	eb65 0503 	sbc.w	r5, r5, r3
   dab00:	085b      	lsrs	r3, r3, #1
   dab02:	ea4f 0232 	mov.w	r2, r2, rrx
   dab06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dab0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dab0e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab12:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab16:	bf22      	ittt	cs
   dab18:	1ab6      	subcs	r6, r6, r2
   dab1a:	4675      	movcs	r5, lr
   dab1c:	ea40 000c 	orrcs.w	r0, r0, ip
   dab20:	085b      	lsrs	r3, r3, #1
   dab22:	ea4f 0232 	mov.w	r2, r2, rrx
   dab26:	ebb6 0e02 	subs.w	lr, r6, r2
   dab2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab2e:	bf22      	ittt	cs
   dab30:	1ab6      	subcs	r6, r6, r2
   dab32:	4675      	movcs	r5, lr
   dab34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dab38:	085b      	lsrs	r3, r3, #1
   dab3a:	ea4f 0232 	mov.w	r2, r2, rrx
   dab3e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab42:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab46:	bf22      	ittt	cs
   dab48:	1ab6      	subcs	r6, r6, r2
   dab4a:	4675      	movcs	r5, lr
   dab4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab50:	085b      	lsrs	r3, r3, #1
   dab52:	ea4f 0232 	mov.w	r2, r2, rrx
   dab56:	ebb6 0e02 	subs.w	lr, r6, r2
   dab5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab5e:	bf22      	ittt	cs
   dab60:	1ab6      	subcs	r6, r6, r2
   dab62:	4675      	movcs	r5, lr
   dab64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab68:	ea55 0e06 	orrs.w	lr, r5, r6
   dab6c:	d018      	beq.n	daba0 <__aeabi_ddiv+0x114>
   dab6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab76:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dab82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dab86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dab8a:	d1c0      	bne.n	dab0e <__aeabi_ddiv+0x82>
   dab8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab90:	d10b      	bne.n	dabaa <__aeabi_ddiv+0x11e>
   dab92:	ea41 0100 	orr.w	r1, r1, r0
   dab96:	f04f 0000 	mov.w	r0, #0
   dab9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab9e:	e7b6      	b.n	dab0e <__aeabi_ddiv+0x82>
   daba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daba4:	bf04      	itt	eq
   daba6:	4301      	orreq	r1, r0
   daba8:	2000      	moveq	r0, #0
   dabaa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dabae:	bf88      	it	hi
   dabb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dabb4:	f63f aeaf 	bhi.w	da916 <__aeabi_dmul+0xde>
   dabb8:	ebb5 0c03 	subs.w	ip, r5, r3
   dabbc:	bf04      	itt	eq
   dabbe:	ebb6 0c02 	subseq.w	ip, r6, r2
   dabc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dabc6:	f150 0000 	adcs.w	r0, r0, #0
   dabca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dabce:	bd70      	pop	{r4, r5, r6, pc}
   dabd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dabd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dabd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dabdc:	bfc2      	ittt	gt
   dabde:	ebd4 050c 	rsbsgt	r5, r4, ip
   dabe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dabe6:	bd70      	popgt	{r4, r5, r6, pc}
   dabe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabec:	f04f 0e00 	mov.w	lr, #0
   dabf0:	3c01      	subs	r4, #1
   dabf2:	e690      	b.n	da916 <__aeabi_dmul+0xde>
   dabf4:	ea45 0e06 	orr.w	lr, r5, r6
   dabf8:	e68d      	b.n	da916 <__aeabi_dmul+0xde>
   dabfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dabfe:	ea94 0f0c 	teq	r4, ip
   dac02:	bf08      	it	eq
   dac04:	ea95 0f0c 	teqeq	r5, ip
   dac08:	f43f af3b 	beq.w	daa82 <__aeabi_dmul+0x24a>
   dac0c:	ea94 0f0c 	teq	r4, ip
   dac10:	d10a      	bne.n	dac28 <__aeabi_ddiv+0x19c>
   dac12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dac16:	f47f af34 	bne.w	daa82 <__aeabi_dmul+0x24a>
   dac1a:	ea95 0f0c 	teq	r5, ip
   dac1e:	f47f af25 	bne.w	daa6c <__aeabi_dmul+0x234>
   dac22:	4610      	mov	r0, r2
   dac24:	4619      	mov	r1, r3
   dac26:	e72c      	b.n	daa82 <__aeabi_dmul+0x24a>
   dac28:	ea95 0f0c 	teq	r5, ip
   dac2c:	d106      	bne.n	dac3c <__aeabi_ddiv+0x1b0>
   dac2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dac32:	f43f aefd 	beq.w	daa30 <__aeabi_dmul+0x1f8>
   dac36:	4610      	mov	r0, r2
   dac38:	4619      	mov	r1, r3
   dac3a:	e722      	b.n	daa82 <__aeabi_dmul+0x24a>
   dac3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac40:	bf18      	it	ne
   dac42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac46:	f47f aec5 	bne.w	da9d4 <__aeabi_dmul+0x19c>
   dac4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dac4e:	f47f af0d 	bne.w	daa6c <__aeabi_dmul+0x234>
   dac52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac56:	f47f aeeb 	bne.w	daa30 <__aeabi_dmul+0x1f8>
   dac5a:	e712      	b.n	daa82 <__aeabi_dmul+0x24a>

000dac5c <__gedf2>:
   dac5c:	f04f 3cff 	mov.w	ip, #4294967295
   dac60:	e006      	b.n	dac70 <__cmpdf2+0x4>
   dac62:	bf00      	nop

000dac64 <__ledf2>:
   dac64:	f04f 0c01 	mov.w	ip, #1
   dac68:	e002      	b.n	dac70 <__cmpdf2+0x4>
   dac6a:	bf00      	nop

000dac6c <__cmpdf2>:
   dac6c:	f04f 0c01 	mov.w	ip, #1
   dac70:	f84d cd04 	str.w	ip, [sp, #-4]!
   dac74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dac80:	bf18      	it	ne
   dac82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dac86:	d01b      	beq.n	dacc0 <__cmpdf2+0x54>
   dac88:	b001      	add	sp, #4
   dac8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dac8e:	bf0c      	ite	eq
   dac90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dac94:	ea91 0f03 	teqne	r1, r3
   dac98:	bf02      	ittt	eq
   dac9a:	ea90 0f02 	teqeq	r0, r2
   dac9e:	2000      	moveq	r0, #0
   daca0:	4770      	bxeq	lr
   daca2:	f110 0f00 	cmn.w	r0, #0
   daca6:	ea91 0f03 	teq	r1, r3
   dacaa:	bf58      	it	pl
   dacac:	4299      	cmppl	r1, r3
   dacae:	bf08      	it	eq
   dacb0:	4290      	cmpeq	r0, r2
   dacb2:	bf2c      	ite	cs
   dacb4:	17d8      	asrcs	r0, r3, #31
   dacb6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dacba:	f040 0001 	orr.w	r0, r0, #1
   dacbe:	4770      	bx	lr
   dacc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dacc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacc8:	d102      	bne.n	dacd0 <__cmpdf2+0x64>
   dacca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dacce:	d107      	bne.n	dace0 <__cmpdf2+0x74>
   dacd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dacd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacd8:	d1d6      	bne.n	dac88 <__cmpdf2+0x1c>
   dacda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dacde:	d0d3      	beq.n	dac88 <__cmpdf2+0x1c>
   dace0:	f85d 0b04 	ldr.w	r0, [sp], #4
   dace4:	4770      	bx	lr
   dace6:	bf00      	nop

000dace8 <__aeabi_cdrcmple>:
   dace8:	4684      	mov	ip, r0
   dacea:	4610      	mov	r0, r2
   dacec:	4662      	mov	r2, ip
   dacee:	468c      	mov	ip, r1
   dacf0:	4619      	mov	r1, r3
   dacf2:	4663      	mov	r3, ip
   dacf4:	e000      	b.n	dacf8 <__aeabi_cdcmpeq>
   dacf6:	bf00      	nop

000dacf8 <__aeabi_cdcmpeq>:
   dacf8:	b501      	push	{r0, lr}
   dacfa:	f7ff ffb7 	bl	dac6c <__cmpdf2>
   dacfe:	2800      	cmp	r0, #0
   dad00:	bf48      	it	mi
   dad02:	f110 0f00 	cmnmi.w	r0, #0
   dad06:	bd01      	pop	{r0, pc}

000dad08 <__aeabi_dcmpeq>:
   dad08:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad0c:	f7ff fff4 	bl	dacf8 <__aeabi_cdcmpeq>
   dad10:	bf0c      	ite	eq
   dad12:	2001      	moveq	r0, #1
   dad14:	2000      	movne	r0, #0
   dad16:	f85d fb08 	ldr.w	pc, [sp], #8
   dad1a:	bf00      	nop

000dad1c <__aeabi_dcmplt>:
   dad1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad20:	f7ff ffea 	bl	dacf8 <__aeabi_cdcmpeq>
   dad24:	bf34      	ite	cc
   dad26:	2001      	movcc	r0, #1
   dad28:	2000      	movcs	r0, #0
   dad2a:	f85d fb08 	ldr.w	pc, [sp], #8
   dad2e:	bf00      	nop

000dad30 <__aeabi_dcmple>:
   dad30:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad34:	f7ff ffe0 	bl	dacf8 <__aeabi_cdcmpeq>
   dad38:	bf94      	ite	ls
   dad3a:	2001      	movls	r0, #1
   dad3c:	2000      	movhi	r0, #0
   dad3e:	f85d fb08 	ldr.w	pc, [sp], #8
   dad42:	bf00      	nop

000dad44 <__aeabi_dcmpge>:
   dad44:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad48:	f7ff ffce 	bl	dace8 <__aeabi_cdrcmple>
   dad4c:	bf94      	ite	ls
   dad4e:	2001      	movls	r0, #1
   dad50:	2000      	movhi	r0, #0
   dad52:	f85d fb08 	ldr.w	pc, [sp], #8
   dad56:	bf00      	nop

000dad58 <__aeabi_dcmpgt>:
   dad58:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad5c:	f7ff ffc4 	bl	dace8 <__aeabi_cdrcmple>
   dad60:	bf34      	ite	cc
   dad62:	2001      	movcc	r0, #1
   dad64:	2000      	movcs	r0, #0
   dad66:	f85d fb08 	ldr.w	pc, [sp], #8
   dad6a:	bf00      	nop

000dad6c <__aeabi_dcmpun>:
   dad6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad74:	d102      	bne.n	dad7c <__aeabi_dcmpun+0x10>
   dad76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dad7a:	d10a      	bne.n	dad92 <__aeabi_dcmpun+0x26>
   dad7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dad80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad84:	d102      	bne.n	dad8c <__aeabi_dcmpun+0x20>
   dad86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dad8a:	d102      	bne.n	dad92 <__aeabi_dcmpun+0x26>
   dad8c:	f04f 0000 	mov.w	r0, #0
   dad90:	4770      	bx	lr
   dad92:	f04f 0001 	mov.w	r0, #1
   dad96:	4770      	bx	lr

000dad98 <__aeabi_d2iz>:
   dad98:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dad9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dada0:	d215      	bcs.n	dadce <__aeabi_d2iz+0x36>
   dada2:	d511      	bpl.n	dadc8 <__aeabi_d2iz+0x30>
   dada4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dada8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dadac:	d912      	bls.n	dadd4 <__aeabi_d2iz+0x3c>
   dadae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dadb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dadba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dadbe:	fa23 f002 	lsr.w	r0, r3, r2
   dadc2:	bf18      	it	ne
   dadc4:	4240      	negne	r0, r0
   dadc6:	4770      	bx	lr
   dadc8:	f04f 0000 	mov.w	r0, #0
   dadcc:	4770      	bx	lr
   dadce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dadd2:	d105      	bne.n	dade0 <__aeabi_d2iz+0x48>
   dadd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dadd8:	bf08      	it	eq
   dadda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dadde:	4770      	bx	lr
   dade0:	f04f 0000 	mov.w	r0, #0
   dade4:	4770      	bx	lr
   dade6:	bf00      	nop

000dade8 <__aeabi_d2uiz>:
   dade8:	004a      	lsls	r2, r1, #1
   dadea:	d211      	bcs.n	dae10 <__aeabi_d2uiz+0x28>
   dadec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dadf0:	d211      	bcs.n	dae16 <__aeabi_d2uiz+0x2e>
   dadf2:	d50d      	bpl.n	dae10 <__aeabi_d2uiz+0x28>
   dadf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dadf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dadfc:	d40e      	bmi.n	dae1c <__aeabi_d2uiz+0x34>
   dadfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dae06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dae0a:	fa23 f002 	lsr.w	r0, r3, r2
   dae0e:	4770      	bx	lr
   dae10:	f04f 0000 	mov.w	r0, #0
   dae14:	4770      	bx	lr
   dae16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dae1a:	d102      	bne.n	dae22 <__aeabi_d2uiz+0x3a>
   dae1c:	f04f 30ff 	mov.w	r0, #4294967295
   dae20:	4770      	bx	lr
   dae22:	f04f 0000 	mov.w	r0, #0
   dae26:	4770      	bx	lr

000dae28 <__aeabi_d2f>:
   dae28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dae2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dae30:	bf24      	itt	cs
   dae32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dae36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dae3a:	d90d      	bls.n	dae58 <__aeabi_d2f+0x30>
   dae3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dae40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dae44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dae48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dae4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dae50:	bf08      	it	eq
   dae52:	f020 0001 	biceq.w	r0, r0, #1
   dae56:	4770      	bx	lr
   dae58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dae5c:	d121      	bne.n	daea2 <__aeabi_d2f+0x7a>
   dae5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dae62:	bfbc      	itt	lt
   dae64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dae68:	4770      	bxlt	lr
   dae6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dae72:	f1c2 0218 	rsb	r2, r2, #24
   dae76:	f1c2 0c20 	rsb	ip, r2, #32
   dae7a:	fa10 f30c 	lsls.w	r3, r0, ip
   dae7e:	fa20 f002 	lsr.w	r0, r0, r2
   dae82:	bf18      	it	ne
   dae84:	f040 0001 	orrne.w	r0, r0, #1
   dae88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dae90:	fa03 fc0c 	lsl.w	ip, r3, ip
   dae94:	ea40 000c 	orr.w	r0, r0, ip
   dae98:	fa23 f302 	lsr.w	r3, r3, r2
   dae9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   daea0:	e7cc      	b.n	dae3c <__aeabi_d2f+0x14>
   daea2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   daea6:	d107      	bne.n	daeb8 <__aeabi_d2f+0x90>
   daea8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   daeac:	bf1e      	ittt	ne
   daeae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   daeb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   daeb6:	4770      	bxne	lr
   daeb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   daebc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   daec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daec4:	4770      	bx	lr
   daec6:	bf00      	nop

000daec8 <__aeabi_frsub>:
   daec8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   daecc:	e002      	b.n	daed4 <__addsf3>
   daece:	bf00      	nop

000daed0 <__aeabi_fsub>:
   daed0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000daed4 <__addsf3>:
   daed4:	0042      	lsls	r2, r0, #1
   daed6:	bf1f      	itttt	ne
   daed8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   daedc:	ea92 0f03 	teqne	r2, r3
   daee0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   daee4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   daee8:	d06a      	beq.n	dafc0 <__addsf3+0xec>
   daeea:	ea4f 6212 	mov.w	r2, r2, lsr #24
   daeee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   daef2:	bfc1      	itttt	gt
   daef4:	18d2      	addgt	r2, r2, r3
   daef6:	4041      	eorgt	r1, r0
   daef8:	4048      	eorgt	r0, r1
   daefa:	4041      	eorgt	r1, r0
   daefc:	bfb8      	it	lt
   daefe:	425b      	neglt	r3, r3
   daf00:	2b19      	cmp	r3, #25
   daf02:	bf88      	it	hi
   daf04:	4770      	bxhi	lr
   daf06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   daf0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daf0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   daf12:	bf18      	it	ne
   daf14:	4240      	negne	r0, r0
   daf16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daf1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   daf1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   daf22:	bf18      	it	ne
   daf24:	4249      	negne	r1, r1
   daf26:	ea92 0f03 	teq	r2, r3
   daf2a:	d03f      	beq.n	dafac <__addsf3+0xd8>
   daf2c:	f1a2 0201 	sub.w	r2, r2, #1
   daf30:	fa41 fc03 	asr.w	ip, r1, r3
   daf34:	eb10 000c 	adds.w	r0, r0, ip
   daf38:	f1c3 0320 	rsb	r3, r3, #32
   daf3c:	fa01 f103 	lsl.w	r1, r1, r3
   daf40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   daf44:	d502      	bpl.n	daf4c <__addsf3+0x78>
   daf46:	4249      	negs	r1, r1
   daf48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   daf4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   daf50:	d313      	bcc.n	daf7a <__addsf3+0xa6>
   daf52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   daf56:	d306      	bcc.n	daf66 <__addsf3+0x92>
   daf58:	0840      	lsrs	r0, r0, #1
   daf5a:	ea4f 0131 	mov.w	r1, r1, rrx
   daf5e:	f102 0201 	add.w	r2, r2, #1
   daf62:	2afe      	cmp	r2, #254	; 0xfe
   daf64:	d251      	bcs.n	db00a <__addsf3+0x136>
   daf66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   daf6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   daf6e:	bf08      	it	eq
   daf70:	f020 0001 	biceq.w	r0, r0, #1
   daf74:	ea40 0003 	orr.w	r0, r0, r3
   daf78:	4770      	bx	lr
   daf7a:	0049      	lsls	r1, r1, #1
   daf7c:	eb40 0000 	adc.w	r0, r0, r0
   daf80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   daf84:	f1a2 0201 	sub.w	r2, r2, #1
   daf88:	d1ed      	bne.n	daf66 <__addsf3+0x92>
   daf8a:	fab0 fc80 	clz	ip, r0
   daf8e:	f1ac 0c08 	sub.w	ip, ip, #8
   daf92:	ebb2 020c 	subs.w	r2, r2, ip
   daf96:	fa00 f00c 	lsl.w	r0, r0, ip
   daf9a:	bfaa      	itet	ge
   daf9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   dafa0:	4252      	neglt	r2, r2
   dafa2:	4318      	orrge	r0, r3
   dafa4:	bfbc      	itt	lt
   dafa6:	40d0      	lsrlt	r0, r2
   dafa8:	4318      	orrlt	r0, r3
   dafaa:	4770      	bx	lr
   dafac:	f092 0f00 	teq	r2, #0
   dafb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dafb4:	bf06      	itte	eq
   dafb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dafba:	3201      	addeq	r2, #1
   dafbc:	3b01      	subne	r3, #1
   dafbe:	e7b5      	b.n	daf2c <__addsf3+0x58>
   dafc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dafc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dafc8:	bf18      	it	ne
   dafca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dafce:	d021      	beq.n	db014 <__addsf3+0x140>
   dafd0:	ea92 0f03 	teq	r2, r3
   dafd4:	d004      	beq.n	dafe0 <__addsf3+0x10c>
   dafd6:	f092 0f00 	teq	r2, #0
   dafda:	bf08      	it	eq
   dafdc:	4608      	moveq	r0, r1
   dafde:	4770      	bx	lr
   dafe0:	ea90 0f01 	teq	r0, r1
   dafe4:	bf1c      	itt	ne
   dafe6:	2000      	movne	r0, #0
   dafe8:	4770      	bxne	lr
   dafea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dafee:	d104      	bne.n	daffa <__addsf3+0x126>
   daff0:	0040      	lsls	r0, r0, #1
   daff2:	bf28      	it	cs
   daff4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   daff8:	4770      	bx	lr
   daffa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   daffe:	bf3c      	itt	cc
   db000:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   db004:	4770      	bxcc	lr
   db006:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   db00a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   db00e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db012:	4770      	bx	lr
   db014:	ea7f 6222 	mvns.w	r2, r2, asr #24
   db018:	bf16      	itet	ne
   db01a:	4608      	movne	r0, r1
   db01c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   db020:	4601      	movne	r1, r0
   db022:	0242      	lsls	r2, r0, #9
   db024:	bf06      	itte	eq
   db026:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   db02a:	ea90 0f01 	teqeq	r0, r1
   db02e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   db032:	4770      	bx	lr

000db034 <__aeabi_ui2f>:
   db034:	f04f 0300 	mov.w	r3, #0
   db038:	e004      	b.n	db044 <__aeabi_i2f+0x8>
   db03a:	bf00      	nop

000db03c <__aeabi_i2f>:
   db03c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   db040:	bf48      	it	mi
   db042:	4240      	negmi	r0, r0
   db044:	ea5f 0c00 	movs.w	ip, r0
   db048:	bf08      	it	eq
   db04a:	4770      	bxeq	lr
   db04c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   db050:	4601      	mov	r1, r0
   db052:	f04f 0000 	mov.w	r0, #0
   db056:	e01c      	b.n	db092 <__aeabi_l2f+0x2a>

000db058 <__aeabi_ul2f>:
   db058:	ea50 0201 	orrs.w	r2, r0, r1
   db05c:	bf08      	it	eq
   db05e:	4770      	bxeq	lr
   db060:	f04f 0300 	mov.w	r3, #0
   db064:	e00a      	b.n	db07c <__aeabi_l2f+0x14>
   db066:	bf00      	nop

000db068 <__aeabi_l2f>:
   db068:	ea50 0201 	orrs.w	r2, r0, r1
   db06c:	bf08      	it	eq
   db06e:	4770      	bxeq	lr
   db070:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   db074:	d502      	bpl.n	db07c <__aeabi_l2f+0x14>
   db076:	4240      	negs	r0, r0
   db078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db07c:	ea5f 0c01 	movs.w	ip, r1
   db080:	bf02      	ittt	eq
   db082:	4684      	moveq	ip, r0
   db084:	4601      	moveq	r1, r0
   db086:	2000      	moveq	r0, #0
   db088:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   db08c:	bf08      	it	eq
   db08e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   db092:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   db096:	fabc f28c 	clz	r2, ip
   db09a:	3a08      	subs	r2, #8
   db09c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   db0a0:	db10      	blt.n	db0c4 <__aeabi_l2f+0x5c>
   db0a2:	fa01 fc02 	lsl.w	ip, r1, r2
   db0a6:	4463      	add	r3, ip
   db0a8:	fa00 fc02 	lsl.w	ip, r0, r2
   db0ac:	f1c2 0220 	rsb	r2, r2, #32
   db0b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db0b4:	fa20 f202 	lsr.w	r2, r0, r2
   db0b8:	eb43 0002 	adc.w	r0, r3, r2
   db0bc:	bf08      	it	eq
   db0be:	f020 0001 	biceq.w	r0, r0, #1
   db0c2:	4770      	bx	lr
   db0c4:	f102 0220 	add.w	r2, r2, #32
   db0c8:	fa01 fc02 	lsl.w	ip, r1, r2
   db0cc:	f1c2 0220 	rsb	r2, r2, #32
   db0d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   db0d4:	fa21 f202 	lsr.w	r2, r1, r2
   db0d8:	eb43 0002 	adc.w	r0, r3, r2
   db0dc:	bf08      	it	eq
   db0de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   db0e2:	4770      	bx	lr

000db0e4 <__aeabi_ldivmod>:
   db0e4:	b97b      	cbnz	r3, db106 <__aeabi_ldivmod+0x22>
   db0e6:	b972      	cbnz	r2, db106 <__aeabi_ldivmod+0x22>
   db0e8:	2900      	cmp	r1, #0
   db0ea:	bfbe      	ittt	lt
   db0ec:	2000      	movlt	r0, #0
   db0ee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   db0f2:	e006      	blt.n	db102 <__aeabi_ldivmod+0x1e>
   db0f4:	bf08      	it	eq
   db0f6:	2800      	cmpeq	r0, #0
   db0f8:	bf1c      	itt	ne
   db0fa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   db0fe:	f04f 30ff 	movne.w	r0, #4294967295
   db102:	f000 b9b1 	b.w	db468 <__aeabi_idiv0>
   db106:	f1ad 0c08 	sub.w	ip, sp, #8
   db10a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   db10e:	2900      	cmp	r1, #0
   db110:	db09      	blt.n	db126 <__aeabi_ldivmod+0x42>
   db112:	2b00      	cmp	r3, #0
   db114:	db1a      	blt.n	db14c <__aeabi_ldivmod+0x68>
   db116:	f000 f835 	bl	db184 <__udivmoddi4>
   db11a:	f8dd e004 	ldr.w	lr, [sp, #4]
   db11e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db122:	b004      	add	sp, #16
   db124:	4770      	bx	lr
   db126:	4240      	negs	r0, r0
   db128:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db12c:	2b00      	cmp	r3, #0
   db12e:	db1b      	blt.n	db168 <__aeabi_ldivmod+0x84>
   db130:	f000 f828 	bl	db184 <__udivmoddi4>
   db134:	f8dd e004 	ldr.w	lr, [sp, #4]
   db138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db13c:	b004      	add	sp, #16
   db13e:	4240      	negs	r0, r0
   db140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db144:	4252      	negs	r2, r2
   db146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db14a:	4770      	bx	lr
   db14c:	4252      	negs	r2, r2
   db14e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db152:	f000 f817 	bl	db184 <__udivmoddi4>
   db156:	f8dd e004 	ldr.w	lr, [sp, #4]
   db15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db15e:	b004      	add	sp, #16
   db160:	4240      	negs	r0, r0
   db162:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db166:	4770      	bx	lr
   db168:	4252      	negs	r2, r2
   db16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db16e:	f000 f809 	bl	db184 <__udivmoddi4>
   db172:	f8dd e004 	ldr.w	lr, [sp, #4]
   db176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db17a:	b004      	add	sp, #16
   db17c:	4252      	negs	r2, r2
   db17e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db182:	4770      	bx	lr

000db184 <__udivmoddi4>:
   db184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db188:	468c      	mov	ip, r1
   db18a:	460e      	mov	r6, r1
   db18c:	4604      	mov	r4, r0
   db18e:	9d08      	ldr	r5, [sp, #32]
   db190:	2b00      	cmp	r3, #0
   db192:	d150      	bne.n	db236 <__udivmoddi4+0xb2>
   db194:	428a      	cmp	r2, r1
   db196:	4617      	mov	r7, r2
   db198:	d96c      	bls.n	db274 <__udivmoddi4+0xf0>
   db19a:	fab2 fe82 	clz	lr, r2
   db19e:	f1be 0f00 	cmp.w	lr, #0
   db1a2:	d00b      	beq.n	db1bc <__udivmoddi4+0x38>
   db1a4:	f1ce 0420 	rsb	r4, lr, #32
   db1a8:	fa20 f404 	lsr.w	r4, r0, r4
   db1ac:	fa01 f60e 	lsl.w	r6, r1, lr
   db1b0:	ea44 0c06 	orr.w	ip, r4, r6
   db1b4:	fa02 f70e 	lsl.w	r7, r2, lr
   db1b8:	fa00 f40e 	lsl.w	r4, r0, lr
   db1bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
   db1c0:	0c22      	lsrs	r2, r4, #16
   db1c2:	fbbc f0f9 	udiv	r0, ip, r9
   db1c6:	fa1f f887 	uxth.w	r8, r7
   db1ca:	fb09 c610 	mls	r6, r9, r0, ip
   db1ce:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db1d2:	fb00 f308 	mul.w	r3, r0, r8
   db1d6:	42b3      	cmp	r3, r6
   db1d8:	d909      	bls.n	db1ee <__udivmoddi4+0x6a>
   db1da:	19f6      	adds	r6, r6, r7
   db1dc:	f100 32ff 	add.w	r2, r0, #4294967295
   db1e0:	f080 8122 	bcs.w	db428 <__udivmoddi4+0x2a4>
   db1e4:	42b3      	cmp	r3, r6
   db1e6:	f240 811f 	bls.w	db428 <__udivmoddi4+0x2a4>
   db1ea:	3802      	subs	r0, #2
   db1ec:	443e      	add	r6, r7
   db1ee:	1af6      	subs	r6, r6, r3
   db1f0:	b2a2      	uxth	r2, r4
   db1f2:	fbb6 f3f9 	udiv	r3, r6, r9
   db1f6:	fb09 6613 	mls	r6, r9, r3, r6
   db1fa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db1fe:	fb03 f808 	mul.w	r8, r3, r8
   db202:	45a0      	cmp	r8, r4
   db204:	d909      	bls.n	db21a <__udivmoddi4+0x96>
   db206:	19e4      	adds	r4, r4, r7
   db208:	f103 32ff 	add.w	r2, r3, #4294967295
   db20c:	f080 810a 	bcs.w	db424 <__udivmoddi4+0x2a0>
   db210:	45a0      	cmp	r8, r4
   db212:	f240 8107 	bls.w	db424 <__udivmoddi4+0x2a0>
   db216:	3b02      	subs	r3, #2
   db218:	443c      	add	r4, r7
   db21a:	ebc8 0404 	rsb	r4, r8, r4
   db21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db222:	2100      	movs	r1, #0
   db224:	2d00      	cmp	r5, #0
   db226:	d062      	beq.n	db2ee <__udivmoddi4+0x16a>
   db228:	fa24 f40e 	lsr.w	r4, r4, lr
   db22c:	2300      	movs	r3, #0
   db22e:	602c      	str	r4, [r5, #0]
   db230:	606b      	str	r3, [r5, #4]
   db232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db236:	428b      	cmp	r3, r1
   db238:	d907      	bls.n	db24a <__udivmoddi4+0xc6>
   db23a:	2d00      	cmp	r5, #0
   db23c:	d055      	beq.n	db2ea <__udivmoddi4+0x166>
   db23e:	2100      	movs	r1, #0
   db240:	e885 0041 	stmia.w	r5, {r0, r6}
   db244:	4608      	mov	r0, r1
   db246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db24a:	fab3 f183 	clz	r1, r3
   db24e:	2900      	cmp	r1, #0
   db250:	f040 8090 	bne.w	db374 <__udivmoddi4+0x1f0>
   db254:	42b3      	cmp	r3, r6
   db256:	d302      	bcc.n	db25e <__udivmoddi4+0xda>
   db258:	4282      	cmp	r2, r0
   db25a:	f200 80f8 	bhi.w	db44e <__udivmoddi4+0x2ca>
   db25e:	1a84      	subs	r4, r0, r2
   db260:	eb66 0603 	sbc.w	r6, r6, r3
   db264:	2001      	movs	r0, #1
   db266:	46b4      	mov	ip, r6
   db268:	2d00      	cmp	r5, #0
   db26a:	d040      	beq.n	db2ee <__udivmoddi4+0x16a>
   db26c:	e885 1010 	stmia.w	r5, {r4, ip}
   db270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db274:	b912      	cbnz	r2, db27c <__udivmoddi4+0xf8>
   db276:	2701      	movs	r7, #1
   db278:	fbb7 f7f2 	udiv	r7, r7, r2
   db27c:	fab7 fe87 	clz	lr, r7
   db280:	f1be 0f00 	cmp.w	lr, #0
   db284:	d135      	bne.n	db2f2 <__udivmoddi4+0x16e>
   db286:	1bf3      	subs	r3, r6, r7
   db288:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db28c:	fa1f fc87 	uxth.w	ip, r7
   db290:	2101      	movs	r1, #1
   db292:	fbb3 f0f8 	udiv	r0, r3, r8
   db296:	0c22      	lsrs	r2, r4, #16
   db298:	fb08 3610 	mls	r6, r8, r0, r3
   db29c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db2a0:	fb0c f300 	mul.w	r3, ip, r0
   db2a4:	42b3      	cmp	r3, r6
   db2a6:	d907      	bls.n	db2b8 <__udivmoddi4+0x134>
   db2a8:	19f6      	adds	r6, r6, r7
   db2aa:	f100 32ff 	add.w	r2, r0, #4294967295
   db2ae:	d202      	bcs.n	db2b6 <__udivmoddi4+0x132>
   db2b0:	42b3      	cmp	r3, r6
   db2b2:	f200 80ce 	bhi.w	db452 <__udivmoddi4+0x2ce>
   db2b6:	4610      	mov	r0, r2
   db2b8:	1af6      	subs	r6, r6, r3
   db2ba:	b2a2      	uxth	r2, r4
   db2bc:	fbb6 f3f8 	udiv	r3, r6, r8
   db2c0:	fb08 6613 	mls	r6, r8, r3, r6
   db2c4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db2c8:	fb0c fc03 	mul.w	ip, ip, r3
   db2cc:	45a4      	cmp	ip, r4
   db2ce:	d907      	bls.n	db2e0 <__udivmoddi4+0x15c>
   db2d0:	19e4      	adds	r4, r4, r7
   db2d2:	f103 32ff 	add.w	r2, r3, #4294967295
   db2d6:	d202      	bcs.n	db2de <__udivmoddi4+0x15a>
   db2d8:	45a4      	cmp	ip, r4
   db2da:	f200 80b5 	bhi.w	db448 <__udivmoddi4+0x2c4>
   db2de:	4613      	mov	r3, r2
   db2e0:	ebcc 0404 	rsb	r4, ip, r4
   db2e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db2e8:	e79c      	b.n	db224 <__udivmoddi4+0xa0>
   db2ea:	4629      	mov	r1, r5
   db2ec:	4628      	mov	r0, r5
   db2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db2f2:	f1ce 0120 	rsb	r1, lr, #32
   db2f6:	fa06 f30e 	lsl.w	r3, r6, lr
   db2fa:	fa07 f70e 	lsl.w	r7, r7, lr
   db2fe:	fa20 f901 	lsr.w	r9, r0, r1
   db302:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db306:	40ce      	lsrs	r6, r1
   db308:	ea49 0903 	orr.w	r9, r9, r3
   db30c:	fbb6 faf8 	udiv	sl, r6, r8
   db310:	ea4f 4419 	mov.w	r4, r9, lsr #16
   db314:	fb08 661a 	mls	r6, r8, sl, r6
   db318:	fa1f fc87 	uxth.w	ip, r7
   db31c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   db320:	fb0a f20c 	mul.w	r2, sl, ip
   db324:	429a      	cmp	r2, r3
   db326:	fa00 f40e 	lsl.w	r4, r0, lr
   db32a:	d90a      	bls.n	db342 <__udivmoddi4+0x1be>
   db32c:	19db      	adds	r3, r3, r7
   db32e:	f10a 31ff 	add.w	r1, sl, #4294967295
   db332:	f080 8087 	bcs.w	db444 <__udivmoddi4+0x2c0>
   db336:	429a      	cmp	r2, r3
   db338:	f240 8084 	bls.w	db444 <__udivmoddi4+0x2c0>
   db33c:	f1aa 0a02 	sub.w	sl, sl, #2
   db340:	443b      	add	r3, r7
   db342:	1a9b      	subs	r3, r3, r2
   db344:	fa1f f989 	uxth.w	r9, r9
   db348:	fbb3 f1f8 	udiv	r1, r3, r8
   db34c:	fb08 3311 	mls	r3, r8, r1, r3
   db350:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   db354:	fb01 f60c 	mul.w	r6, r1, ip
   db358:	429e      	cmp	r6, r3
   db35a:	d907      	bls.n	db36c <__udivmoddi4+0x1e8>
   db35c:	19db      	adds	r3, r3, r7
   db35e:	f101 32ff 	add.w	r2, r1, #4294967295
   db362:	d26b      	bcs.n	db43c <__udivmoddi4+0x2b8>
   db364:	429e      	cmp	r6, r3
   db366:	d969      	bls.n	db43c <__udivmoddi4+0x2b8>
   db368:	3902      	subs	r1, #2
   db36a:	443b      	add	r3, r7
   db36c:	1b9b      	subs	r3, r3, r6
   db36e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   db372:	e78e      	b.n	db292 <__udivmoddi4+0x10e>
   db374:	f1c1 0e20 	rsb	lr, r1, #32
   db378:	fa22 f40e 	lsr.w	r4, r2, lr
   db37c:	408b      	lsls	r3, r1
   db37e:	4323      	orrs	r3, r4
   db380:	fa20 f70e 	lsr.w	r7, r0, lr
   db384:	fa06 f401 	lsl.w	r4, r6, r1
   db388:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   db38c:	fa26 f60e 	lsr.w	r6, r6, lr
   db390:	433c      	orrs	r4, r7
   db392:	fbb6 f9fc 	udiv	r9, r6, ip
   db396:	0c27      	lsrs	r7, r4, #16
   db398:	fb0c 6619 	mls	r6, ip, r9, r6
   db39c:	fa1f f883 	uxth.w	r8, r3
   db3a0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   db3a4:	fb09 f708 	mul.w	r7, r9, r8
   db3a8:	42b7      	cmp	r7, r6
   db3aa:	fa02 f201 	lsl.w	r2, r2, r1
   db3ae:	fa00 fa01 	lsl.w	sl, r0, r1
   db3b2:	d908      	bls.n	db3c6 <__udivmoddi4+0x242>
   db3b4:	18f6      	adds	r6, r6, r3
   db3b6:	f109 30ff 	add.w	r0, r9, #4294967295
   db3ba:	d241      	bcs.n	db440 <__udivmoddi4+0x2bc>
   db3bc:	42b7      	cmp	r7, r6
   db3be:	d93f      	bls.n	db440 <__udivmoddi4+0x2bc>
   db3c0:	f1a9 0902 	sub.w	r9, r9, #2
   db3c4:	441e      	add	r6, r3
   db3c6:	1bf6      	subs	r6, r6, r7
   db3c8:	b2a0      	uxth	r0, r4
   db3ca:	fbb6 f4fc 	udiv	r4, r6, ip
   db3ce:	fb0c 6614 	mls	r6, ip, r4, r6
   db3d2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   db3d6:	fb04 f808 	mul.w	r8, r4, r8
   db3da:	45b8      	cmp	r8, r7
   db3dc:	d907      	bls.n	db3ee <__udivmoddi4+0x26a>
   db3de:	18ff      	adds	r7, r7, r3
   db3e0:	f104 30ff 	add.w	r0, r4, #4294967295
   db3e4:	d228      	bcs.n	db438 <__udivmoddi4+0x2b4>
   db3e6:	45b8      	cmp	r8, r7
   db3e8:	d926      	bls.n	db438 <__udivmoddi4+0x2b4>
   db3ea:	3c02      	subs	r4, #2
   db3ec:	441f      	add	r7, r3
   db3ee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   db3f2:	ebc8 0707 	rsb	r7, r8, r7
   db3f6:	fba0 8902 	umull	r8, r9, r0, r2
   db3fa:	454f      	cmp	r7, r9
   db3fc:	4644      	mov	r4, r8
   db3fe:	464e      	mov	r6, r9
   db400:	d314      	bcc.n	db42c <__udivmoddi4+0x2a8>
   db402:	d029      	beq.n	db458 <__udivmoddi4+0x2d4>
   db404:	b365      	cbz	r5, db460 <__udivmoddi4+0x2dc>
   db406:	ebba 0304 	subs.w	r3, sl, r4
   db40a:	eb67 0706 	sbc.w	r7, r7, r6
   db40e:	fa07 fe0e 	lsl.w	lr, r7, lr
   db412:	40cb      	lsrs	r3, r1
   db414:	40cf      	lsrs	r7, r1
   db416:	ea4e 0303 	orr.w	r3, lr, r3
   db41a:	e885 0088 	stmia.w	r5, {r3, r7}
   db41e:	2100      	movs	r1, #0
   db420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db424:	4613      	mov	r3, r2
   db426:	e6f8      	b.n	db21a <__udivmoddi4+0x96>
   db428:	4610      	mov	r0, r2
   db42a:	e6e0      	b.n	db1ee <__udivmoddi4+0x6a>
   db42c:	ebb8 0402 	subs.w	r4, r8, r2
   db430:	eb69 0603 	sbc.w	r6, r9, r3
   db434:	3801      	subs	r0, #1
   db436:	e7e5      	b.n	db404 <__udivmoddi4+0x280>
   db438:	4604      	mov	r4, r0
   db43a:	e7d8      	b.n	db3ee <__udivmoddi4+0x26a>
   db43c:	4611      	mov	r1, r2
   db43e:	e795      	b.n	db36c <__udivmoddi4+0x1e8>
   db440:	4681      	mov	r9, r0
   db442:	e7c0      	b.n	db3c6 <__udivmoddi4+0x242>
   db444:	468a      	mov	sl, r1
   db446:	e77c      	b.n	db342 <__udivmoddi4+0x1be>
   db448:	3b02      	subs	r3, #2
   db44a:	443c      	add	r4, r7
   db44c:	e748      	b.n	db2e0 <__udivmoddi4+0x15c>
   db44e:	4608      	mov	r0, r1
   db450:	e70a      	b.n	db268 <__udivmoddi4+0xe4>
   db452:	3802      	subs	r0, #2
   db454:	443e      	add	r6, r7
   db456:	e72f      	b.n	db2b8 <__udivmoddi4+0x134>
   db458:	45c2      	cmp	sl, r8
   db45a:	d3e7      	bcc.n	db42c <__udivmoddi4+0x2a8>
   db45c:	463e      	mov	r6, r7
   db45e:	e7d1      	b.n	db404 <__udivmoddi4+0x280>
   db460:	4629      	mov	r1, r5
   db462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db466:	bf00      	nop

000db468 <__aeabi_idiv0>:
   db468:	4770      	bx	lr
   db46a:	bf00      	nop

000db46c <asctime>:
   db46c:	4b09      	ldr	r3, [pc, #36]	; (db494 <asctime+0x28>)
   db46e:	b570      	push	{r4, r5, r6, lr}
   db470:	681c      	ldr	r4, [r3, #0]
   db472:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db474:	4606      	mov	r6, r0
   db476:	b93d      	cbnz	r5, db488 <asctime+0x1c>
   db478:	201a      	movs	r0, #26
   db47a:	f7fb fd59 	bl	d6f30 <malloc>
   db47e:	221a      	movs	r2, #26
   db480:	6420      	str	r0, [r4, #64]	; 0x40
   db482:	4629      	mov	r1, r5
   db484:	f000 f972 	bl	db76c <memset>
   db488:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db48a:	4630      	mov	r0, r6
   db48c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db490:	f000 b802 	b.w	db498 <asctime_r>
   db494:	2003e0f4 	.word	0x2003e0f4

000db498 <asctime_r>:
   db498:	b510      	push	{r4, lr}
   db49a:	460c      	mov	r4, r1
   db49c:	6941      	ldr	r1, [r0, #20]
   db49e:	6903      	ldr	r3, [r0, #16]
   db4a0:	6982      	ldr	r2, [r0, #24]
   db4a2:	b086      	sub	sp, #24
   db4a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db4a8:	9104      	str	r1, [sp, #16]
   db4aa:	6801      	ldr	r1, [r0, #0]
   db4ac:	9103      	str	r1, [sp, #12]
   db4ae:	6841      	ldr	r1, [r0, #4]
   db4b0:	9102      	str	r1, [sp, #8]
   db4b2:	6881      	ldr	r1, [r0, #8]
   db4b4:	9101      	str	r1, [sp, #4]
   db4b6:	68c1      	ldr	r1, [r0, #12]
   db4b8:	9100      	str	r1, [sp, #0]
   db4ba:	4907      	ldr	r1, [pc, #28]	; (db4d8 <asctime_r+0x40>)
   db4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db4c0:	440b      	add	r3, r1
   db4c2:	4906      	ldr	r1, [pc, #24]	; (db4dc <asctime_r+0x44>)
   db4c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db4c8:	440a      	add	r2, r1
   db4ca:	4620      	mov	r0, r4
   db4cc:	4904      	ldr	r1, [pc, #16]	; (db4e0 <asctime_r+0x48>)
   db4ce:	f7fb fd4f 	bl	d6f70 <siprintf>
   db4d2:	4620      	mov	r0, r4
   db4d4:	b006      	add	sp, #24
   db4d6:	bd10      	pop	{r4, pc}
   db4d8:	000dd09d 	.word	0x000dd09d
   db4dc:	000dd088 	.word	0x000dd088
   db4e0:	000dd0c1 	.word	0x000dd0c1

000db4e4 <atoi>:
   db4e4:	220a      	movs	r2, #10
   db4e6:	2100      	movs	r1, #0
   db4e8:	f000 ba78 	b.w	db9dc <strtol>

000db4ec <__cxa_atexit>:
   db4ec:	b510      	push	{r4, lr}
   db4ee:	4c05      	ldr	r4, [pc, #20]	; (db504 <__cxa_atexit+0x18>)
   db4f0:	4613      	mov	r3, r2
   db4f2:	b12c      	cbz	r4, db500 <__cxa_atexit+0x14>
   db4f4:	460a      	mov	r2, r1
   db4f6:	4601      	mov	r1, r0
   db4f8:	2002      	movs	r0, #2
   db4fa:	f3af 8000 	nop.w
   db4fe:	bd10      	pop	{r4, pc}
   db500:	4620      	mov	r0, r4
   db502:	bd10      	pop	{r4, pc}
   db504:	00000000 	.word	0x00000000

000db508 <localtime>:
   db508:	b538      	push	{r3, r4, r5, lr}
   db50a:	4b07      	ldr	r3, [pc, #28]	; (db528 <localtime+0x20>)
   db50c:	681c      	ldr	r4, [r3, #0]
   db50e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db510:	4605      	mov	r5, r0
   db512:	b91b      	cbnz	r3, db51c <localtime+0x14>
   db514:	2024      	movs	r0, #36	; 0x24
   db516:	f7fb fd0b 	bl	d6f30 <malloc>
   db51a:	63e0      	str	r0, [r4, #60]	; 0x3c
   db51c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db51e:	4628      	mov	r0, r5
   db520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db524:	f000 b802 	b.w	db52c <localtime_r>
   db528:	2003e0f4 	.word	0x2003e0f4

000db52c <localtime_r>:
   db52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db530:	460c      	mov	r4, r1
   db532:	4680      	mov	r8, r0
   db534:	f000 fd58 	bl	dbfe8 <__gettzinfo>
   db538:	4621      	mov	r1, r4
   db53a:	4607      	mov	r7, r0
   db53c:	4640      	mov	r0, r8
   db53e:	f000 fd57 	bl	dbff0 <gmtime_r>
   db542:	6946      	ldr	r6, [r0, #20]
   db544:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db548:	07b3      	lsls	r3, r6, #30
   db54a:	4604      	mov	r4, r0
   db54c:	d105      	bne.n	db55a <localtime_r+0x2e>
   db54e:	2264      	movs	r2, #100	; 0x64
   db550:	fb96 f3f2 	sdiv	r3, r6, r2
   db554:	fb02 6313 	mls	r3, r2, r3, r6
   db558:	b94b      	cbnz	r3, db56e <localtime_r+0x42>
   db55a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db55e:	fb96 f3f5 	sdiv	r3, r6, r5
   db562:	fb05 6513 	mls	r5, r5, r3, r6
   db566:	fab5 f385 	clz	r3, r5
   db56a:	095b      	lsrs	r3, r3, #5
   db56c:	e000      	b.n	db570 <localtime_r+0x44>
   db56e:	2301      	movs	r3, #1
   db570:	4a5f      	ldr	r2, [pc, #380]	; (db6f0 <localtime_r+0x1c4>)
   db572:	2530      	movs	r5, #48	; 0x30
   db574:	fb05 2503 	mla	r5, r5, r3, r2
   db578:	f000 fb6a 	bl	dbc50 <__tz_lock>
   db57c:	f000 fb6a 	bl	dbc54 <_tzset_unlocked>
   db580:	4b5c      	ldr	r3, [pc, #368]	; (db6f4 <localtime_r+0x1c8>)
   db582:	681b      	ldr	r3, [r3, #0]
   db584:	b1f3      	cbz	r3, db5c4 <localtime_r+0x98>
   db586:	687b      	ldr	r3, [r7, #4]
   db588:	429e      	cmp	r6, r3
   db58a:	d105      	bne.n	db598 <localtime_r+0x6c>
   db58c:	6839      	ldr	r1, [r7, #0]
   db58e:	f8d8 3000 	ldr.w	r3, [r8]
   db592:	69fa      	ldr	r2, [r7, #28]
   db594:	b941      	cbnz	r1, db5a8 <localtime_r+0x7c>
   db596:	e00a      	b.n	db5ae <localtime_r+0x82>
   db598:	4630      	mov	r0, r6
   db59a:	f000 fab1 	bl	dbb00 <__tzcalc_limits>
   db59e:	2800      	cmp	r0, #0
   db5a0:	d1f4      	bne.n	db58c <localtime_r+0x60>
   db5a2:	f04f 33ff 	mov.w	r3, #4294967295
   db5a6:	e00d      	b.n	db5c4 <localtime_r+0x98>
   db5a8:	4293      	cmp	r3, r2
   db5aa:	db08      	blt.n	db5be <localtime_r+0x92>
   db5ac:	e001      	b.n	db5b2 <localtime_r+0x86>
   db5ae:	4293      	cmp	r3, r2
   db5b0:	da07      	bge.n	db5c2 <localtime_r+0x96>
   db5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db5b4:	4293      	cmp	r3, r2
   db5b6:	bfac      	ite	ge
   db5b8:	2300      	movge	r3, #0
   db5ba:	2301      	movlt	r3, #1
   db5bc:	e002      	b.n	db5c4 <localtime_r+0x98>
   db5be:	2300      	movs	r3, #0
   db5c0:	e000      	b.n	db5c4 <localtime_r+0x98>
   db5c2:	2301      	movs	r3, #1
   db5c4:	6223      	str	r3, [r4, #32]
   db5c6:	6a23      	ldr	r3, [r4, #32]
   db5c8:	2b01      	cmp	r3, #1
   db5ca:	bf0c      	ite	eq
   db5cc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db5ce:	6a39      	ldrne	r1, [r7, #32]
   db5d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db5d4:	203c      	movs	r0, #60	; 0x3c
   db5d6:	fb91 f6f3 	sdiv	r6, r1, r3
   db5da:	fb03 1316 	mls	r3, r3, r6, r1
   db5de:	6861      	ldr	r1, [r4, #4]
   db5e0:	fb93 f2f0 	sdiv	r2, r3, r0
   db5e4:	fb00 3012 	mls	r0, r0, r2, r3
   db5e8:	6823      	ldr	r3, [r4, #0]
   db5ea:	1a89      	subs	r1, r1, r2
   db5ec:	68a2      	ldr	r2, [r4, #8]
   db5ee:	6061      	str	r1, [r4, #4]
   db5f0:	1a1b      	subs	r3, r3, r0
   db5f2:	1b92      	subs	r2, r2, r6
   db5f4:	2b3b      	cmp	r3, #59	; 0x3b
   db5f6:	6023      	str	r3, [r4, #0]
   db5f8:	60a2      	str	r2, [r4, #8]
   db5fa:	dd03      	ble.n	db604 <localtime_r+0xd8>
   db5fc:	3101      	adds	r1, #1
   db5fe:	6061      	str	r1, [r4, #4]
   db600:	3b3c      	subs	r3, #60	; 0x3c
   db602:	e004      	b.n	db60e <localtime_r+0xe2>
   db604:	2b00      	cmp	r3, #0
   db606:	da03      	bge.n	db610 <localtime_r+0xe4>
   db608:	3901      	subs	r1, #1
   db60a:	6061      	str	r1, [r4, #4]
   db60c:	333c      	adds	r3, #60	; 0x3c
   db60e:	6023      	str	r3, [r4, #0]
   db610:	6863      	ldr	r3, [r4, #4]
   db612:	2b3b      	cmp	r3, #59	; 0x3b
   db614:	dd03      	ble.n	db61e <localtime_r+0xf2>
   db616:	3201      	adds	r2, #1
   db618:	60a2      	str	r2, [r4, #8]
   db61a:	3b3c      	subs	r3, #60	; 0x3c
   db61c:	e004      	b.n	db628 <localtime_r+0xfc>
   db61e:	2b00      	cmp	r3, #0
   db620:	da03      	bge.n	db62a <localtime_r+0xfe>
   db622:	3a01      	subs	r2, #1
   db624:	60a2      	str	r2, [r4, #8]
   db626:	333c      	adds	r3, #60	; 0x3c
   db628:	6063      	str	r3, [r4, #4]
   db62a:	68a3      	ldr	r3, [r4, #8]
   db62c:	2b17      	cmp	r3, #23
   db62e:	dd22      	ble.n	db676 <localtime_r+0x14a>
   db630:	69e2      	ldr	r2, [r4, #28]
   db632:	3201      	adds	r2, #1
   db634:	61e2      	str	r2, [r4, #28]
   db636:	69a2      	ldr	r2, [r4, #24]
   db638:	3201      	adds	r2, #1
   db63a:	2a06      	cmp	r2, #6
   db63c:	bfc8      	it	gt
   db63e:	2200      	movgt	r2, #0
   db640:	61a2      	str	r2, [r4, #24]
   db642:	68e2      	ldr	r2, [r4, #12]
   db644:	3b18      	subs	r3, #24
   db646:	3201      	adds	r2, #1
   db648:	60a3      	str	r3, [r4, #8]
   db64a:	6923      	ldr	r3, [r4, #16]
   db64c:	60e2      	str	r2, [r4, #12]
   db64e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db652:	428a      	cmp	r2, r1
   db654:	dd46      	ble.n	db6e4 <localtime_r+0x1b8>
   db656:	3301      	adds	r3, #1
   db658:	2b0c      	cmp	r3, #12
   db65a:	bf0c      	ite	eq
   db65c:	6963      	ldreq	r3, [r4, #20]
   db65e:	6123      	strne	r3, [r4, #16]
   db660:	eba2 0201 	sub.w	r2, r2, r1
   db664:	60e2      	str	r2, [r4, #12]
   db666:	bf01      	itttt	eq
   db668:	3301      	addeq	r3, #1
   db66a:	2200      	moveq	r2, #0
   db66c:	6122      	streq	r2, [r4, #16]
   db66e:	6163      	streq	r3, [r4, #20]
   db670:	bf08      	it	eq
   db672:	61e2      	streq	r2, [r4, #28]
   db674:	e036      	b.n	db6e4 <localtime_r+0x1b8>
   db676:	2b00      	cmp	r3, #0
   db678:	da34      	bge.n	db6e4 <localtime_r+0x1b8>
   db67a:	69e2      	ldr	r2, [r4, #28]
   db67c:	3a01      	subs	r2, #1
   db67e:	61e2      	str	r2, [r4, #28]
   db680:	69a2      	ldr	r2, [r4, #24]
   db682:	3a01      	subs	r2, #1
   db684:	bf48      	it	mi
   db686:	2206      	movmi	r2, #6
   db688:	61a2      	str	r2, [r4, #24]
   db68a:	68e2      	ldr	r2, [r4, #12]
   db68c:	3318      	adds	r3, #24
   db68e:	3a01      	subs	r2, #1
   db690:	60e2      	str	r2, [r4, #12]
   db692:	60a3      	str	r3, [r4, #8]
   db694:	bb32      	cbnz	r2, db6e4 <localtime_r+0x1b8>
   db696:	6923      	ldr	r3, [r4, #16]
   db698:	3b01      	subs	r3, #1
   db69a:	d401      	bmi.n	db6a0 <localtime_r+0x174>
   db69c:	6123      	str	r3, [r4, #16]
   db69e:	e01d      	b.n	db6dc <localtime_r+0x1b0>
   db6a0:	230b      	movs	r3, #11
   db6a2:	6123      	str	r3, [r4, #16]
   db6a4:	6963      	ldr	r3, [r4, #20]
   db6a6:	1e5a      	subs	r2, r3, #1
   db6a8:	f012 0f03 	tst.w	r2, #3
   db6ac:	6162      	str	r2, [r4, #20]
   db6ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db6b2:	d105      	bne.n	db6c0 <localtime_r+0x194>
   db6b4:	2164      	movs	r1, #100	; 0x64
   db6b6:	fb93 f2f1 	sdiv	r2, r3, r1
   db6ba:	fb01 3212 	mls	r2, r1, r2, r3
   db6be:	b94a      	cbnz	r2, db6d4 <localtime_r+0x1a8>
   db6c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db6c4:	fb93 f2f1 	sdiv	r2, r3, r1
   db6c8:	fb01 3312 	mls	r3, r1, r2, r3
   db6cc:	fab3 f383 	clz	r3, r3
   db6d0:	095b      	lsrs	r3, r3, #5
   db6d2:	e000      	b.n	db6d6 <localtime_r+0x1aa>
   db6d4:	2301      	movs	r3, #1
   db6d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db6da:	61e3      	str	r3, [r4, #28]
   db6dc:	6923      	ldr	r3, [r4, #16]
   db6de:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db6e2:	60e3      	str	r3, [r4, #12]
   db6e4:	f000 fab5 	bl	dbc52 <__tz_unlock>
   db6e8:	4620      	mov	r0, r4
   db6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db6ee:	bf00      	nop
   db6f0:	000dd248 	.word	0x000dd248
   db6f4:	2003e7e8 	.word	0x2003e7e8

000db6f8 <ldiv>:
   db6f8:	2900      	cmp	r1, #0
   db6fa:	b510      	push	{r4, lr}
   db6fc:	fb91 f4f2 	sdiv	r4, r1, r2
   db700:	fb02 1314 	mls	r3, r2, r4, r1
   db704:	db04      	blt.n	db710 <ldiv+0x18>
   db706:	2b00      	cmp	r3, #0
   db708:	da07      	bge.n	db71a <ldiv+0x22>
   db70a:	3401      	adds	r4, #1
   db70c:	1a9b      	subs	r3, r3, r2
   db70e:	e004      	b.n	db71a <ldiv+0x22>
   db710:	2b00      	cmp	r3, #0
   db712:	bfc4      	itt	gt
   db714:	f104 34ff 	addgt.w	r4, r4, #4294967295
   db718:	189b      	addgt	r3, r3, r2
   db71a:	6004      	str	r4, [r0, #0]
   db71c:	6043      	str	r3, [r0, #4]
   db71e:	bd10      	pop	{r4, pc}

000db720 <memcpy>:
   db720:	b510      	push	{r4, lr}
   db722:	1e43      	subs	r3, r0, #1
   db724:	440a      	add	r2, r1
   db726:	4291      	cmp	r1, r2
   db728:	d004      	beq.n	db734 <memcpy+0x14>
   db72a:	f811 4b01 	ldrb.w	r4, [r1], #1
   db72e:	f803 4f01 	strb.w	r4, [r3, #1]!
   db732:	e7f8      	b.n	db726 <memcpy+0x6>
   db734:	bd10      	pop	{r4, pc}

000db736 <memmove>:
   db736:	4288      	cmp	r0, r1
   db738:	b510      	push	{r4, lr}
   db73a:	eb01 0302 	add.w	r3, r1, r2
   db73e:	d801      	bhi.n	db744 <memmove+0xe>
   db740:	1e42      	subs	r2, r0, #1
   db742:	e00b      	b.n	db75c <memmove+0x26>
   db744:	4298      	cmp	r0, r3
   db746:	d2fb      	bcs.n	db740 <memmove+0xa>
   db748:	1881      	adds	r1, r0, r2
   db74a:	1ad2      	subs	r2, r2, r3
   db74c:	42d3      	cmn	r3, r2
   db74e:	d004      	beq.n	db75a <memmove+0x24>
   db750:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db754:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db758:	e7f8      	b.n	db74c <memmove+0x16>
   db75a:	bd10      	pop	{r4, pc}
   db75c:	4299      	cmp	r1, r3
   db75e:	d004      	beq.n	db76a <memmove+0x34>
   db760:	f811 4b01 	ldrb.w	r4, [r1], #1
   db764:	f802 4f01 	strb.w	r4, [r2, #1]!
   db768:	e7f8      	b.n	db75c <memmove+0x26>
   db76a:	bd10      	pop	{r4, pc}

000db76c <memset>:
   db76c:	4402      	add	r2, r0
   db76e:	4603      	mov	r3, r0
   db770:	4293      	cmp	r3, r2
   db772:	d002      	beq.n	db77a <memset+0xe>
   db774:	f803 1b01 	strb.w	r1, [r3], #1
   db778:	e7fa      	b.n	db770 <memset+0x4>
   db77a:	4770      	bx	lr

000db77c <srand>:
   db77c:	b538      	push	{r3, r4, r5, lr}
   db77e:	4b12      	ldr	r3, [pc, #72]	; (db7c8 <srand+0x4c>)
   db780:	681c      	ldr	r4, [r3, #0]
   db782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db784:	4605      	mov	r5, r0
   db786:	b9d3      	cbnz	r3, db7be <srand+0x42>
   db788:	2018      	movs	r0, #24
   db78a:	f7fb fbd1 	bl	d6f30 <malloc>
   db78e:	f243 330e 	movw	r3, #13070	; 0x330e
   db792:	63a0      	str	r0, [r4, #56]	; 0x38
   db794:	8003      	strh	r3, [r0, #0]
   db796:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db79a:	8043      	strh	r3, [r0, #2]
   db79c:	f241 2334 	movw	r3, #4660	; 0x1234
   db7a0:	8083      	strh	r3, [r0, #4]
   db7a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db7a6:	80c3      	strh	r3, [r0, #6]
   db7a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db7ac:	8103      	strh	r3, [r0, #8]
   db7ae:	2305      	movs	r3, #5
   db7b0:	8143      	strh	r3, [r0, #10]
   db7b2:	230b      	movs	r3, #11
   db7b4:	8183      	strh	r3, [r0, #12]
   db7b6:	2201      	movs	r2, #1
   db7b8:	2300      	movs	r3, #0
   db7ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db7be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db7c0:	2200      	movs	r2, #0
   db7c2:	611d      	str	r5, [r3, #16]
   db7c4:	615a      	str	r2, [r3, #20]
   db7c6:	bd38      	pop	{r3, r4, r5, pc}
   db7c8:	2003e0f4 	.word	0x2003e0f4

000db7cc <strcmp>:
   db7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   db7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   db7d4:	2a01      	cmp	r2, #1
   db7d6:	bf28      	it	cs
   db7d8:	429a      	cmpcs	r2, r3
   db7da:	d0f7      	beq.n	db7cc <strcmp>
   db7dc:	1ad0      	subs	r0, r2, r3
   db7de:	4770      	bx	lr

000db7e0 <strcpy>:
   db7e0:	4603      	mov	r3, r0
   db7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   db7e6:	f803 2b01 	strb.w	r2, [r3], #1
   db7ea:	2a00      	cmp	r2, #0
   db7ec:	d1f9      	bne.n	db7e2 <strcpy+0x2>
   db7ee:	4770      	bx	lr

000db7f0 <strdup>:
   db7f0:	4b02      	ldr	r3, [pc, #8]	; (db7fc <strdup+0xc>)
   db7f2:	4601      	mov	r1, r0
   db7f4:	6818      	ldr	r0, [r3, #0]
   db7f6:	f000 b803 	b.w	db800 <_strdup_r>
   db7fa:	bf00      	nop
   db7fc:	2003e0f4 	.word	0x2003e0f4

000db800 <_strdup_r>:
   db800:	b570      	push	{r4, r5, r6, lr}
   db802:	4606      	mov	r6, r0
   db804:	4608      	mov	r0, r1
   db806:	460c      	mov	r4, r1
   db808:	f000 f80d 	bl	db826 <strlen>
   db80c:	1c45      	adds	r5, r0, #1
   db80e:	4629      	mov	r1, r5
   db810:	4630      	mov	r0, r6
   db812:	f7fb fbcd 	bl	d6fb0 <_malloc_r>
   db816:	4606      	mov	r6, r0
   db818:	b118      	cbz	r0, db822 <_strdup_r+0x22>
   db81a:	462a      	mov	r2, r5
   db81c:	4621      	mov	r1, r4
   db81e:	f7ff ff7f 	bl	db720 <memcpy>
   db822:	4630      	mov	r0, r6
   db824:	bd70      	pop	{r4, r5, r6, pc}

000db826 <strlen>:
   db826:	4603      	mov	r3, r0
   db828:	f813 2b01 	ldrb.w	r2, [r3], #1
   db82c:	2a00      	cmp	r2, #0
   db82e:	d1fb      	bne.n	db828 <strlen+0x2>
   db830:	1a18      	subs	r0, r3, r0
   db832:	3801      	subs	r0, #1
   db834:	4770      	bx	lr
	...

000db838 <strncasecmp>:
   db838:	4b10      	ldr	r3, [pc, #64]	; (db87c <strncasecmp+0x44>)
   db83a:	b570      	push	{r4, r5, r6, lr}
   db83c:	681e      	ldr	r6, [r3, #0]
   db83e:	440a      	add	r2, r1
   db840:	4291      	cmp	r1, r2
   db842:	d017      	beq.n	db874 <strncasecmp+0x3c>
   db844:	f810 3b01 	ldrb.w	r3, [r0], #1
   db848:	18f4      	adds	r4, r6, r3
   db84a:	7864      	ldrb	r4, [r4, #1]
   db84c:	f004 0403 	and.w	r4, r4, #3
   db850:	2c01      	cmp	r4, #1
   db852:	f811 4b01 	ldrb.w	r4, [r1], #1
   db856:	eb06 0504 	add.w	r5, r6, r4
   db85a:	bf08      	it	eq
   db85c:	3320      	addeq	r3, #32
   db85e:	786d      	ldrb	r5, [r5, #1]
   db860:	f005 0503 	and.w	r5, r5, #3
   db864:	2d01      	cmp	r5, #1
   db866:	bf08      	it	eq
   db868:	3420      	addeq	r4, #32
   db86a:	1b1b      	subs	r3, r3, r4
   db86c:	d103      	bne.n	db876 <strncasecmp+0x3e>
   db86e:	2c00      	cmp	r4, #0
   db870:	d1e6      	bne.n	db840 <strncasecmp+0x8>
   db872:	e000      	b.n	db876 <strncasecmp+0x3e>
   db874:	2300      	movs	r3, #0
   db876:	4618      	mov	r0, r3
   db878:	bd70      	pop	{r4, r5, r6, pc}
   db87a:	bf00      	nop
   db87c:	2003e090 	.word	0x2003e090

000db880 <strncmp>:
   db880:	b530      	push	{r4, r5, lr}
   db882:	b182      	cbz	r2, db8a6 <strncmp+0x26>
   db884:	1e45      	subs	r5, r0, #1
   db886:	3901      	subs	r1, #1
   db888:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db88c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db890:	42a3      	cmp	r3, r4
   db892:	d106      	bne.n	db8a2 <strncmp+0x22>
   db894:	43ec      	mvns	r4, r5
   db896:	4414      	add	r4, r2
   db898:	42e0      	cmn	r0, r4
   db89a:	d001      	beq.n	db8a0 <strncmp+0x20>
   db89c:	2b00      	cmp	r3, #0
   db89e:	d1f3      	bne.n	db888 <strncmp+0x8>
   db8a0:	461c      	mov	r4, r3
   db8a2:	1b18      	subs	r0, r3, r4
   db8a4:	bd30      	pop	{r4, r5, pc}
   db8a6:	4610      	mov	r0, r2
   db8a8:	bd30      	pop	{r4, r5, pc}

000db8aa <strncpy>:
   db8aa:	b510      	push	{r4, lr}
   db8ac:	4603      	mov	r3, r0
   db8ae:	b142      	cbz	r2, db8c2 <strncpy+0x18>
   db8b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   db8b4:	f803 4b01 	strb.w	r4, [r3], #1
   db8b8:	3a01      	subs	r2, #1
   db8ba:	2c00      	cmp	r4, #0
   db8bc:	d1f7      	bne.n	db8ae <strncpy+0x4>
   db8be:	441a      	add	r2, r3
   db8c0:	e000      	b.n	db8c4 <strncpy+0x1a>
   db8c2:	bd10      	pop	{r4, pc}
   db8c4:	4293      	cmp	r3, r2
   db8c6:	d002      	beq.n	db8ce <strncpy+0x24>
   db8c8:	f803 4b01 	strb.w	r4, [r3], #1
   db8cc:	e7fa      	b.n	db8c4 <strncpy+0x1a>
   db8ce:	bd10      	pop	{r4, pc}

000db8d0 <_strtol_r>:
   db8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db8d4:	4680      	mov	r8, r0
   db8d6:	4840      	ldr	r0, [pc, #256]	; (db9d8 <_strtol_r+0x108>)
   db8d8:	f8d0 9000 	ldr.w	r9, [r0]
   db8dc:	460f      	mov	r7, r1
   db8de:	463d      	mov	r5, r7
   db8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   db8e4:	eb09 0004 	add.w	r0, r9, r4
   db8e8:	7840      	ldrb	r0, [r0, #1]
   db8ea:	f000 0008 	and.w	r0, r0, #8
   db8ee:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db8f2:	b108      	cbz	r0, db8f8 <_strtol_r+0x28>
   db8f4:	462f      	mov	r7, r5
   db8f6:	e7f2      	b.n	db8de <_strtol_r+0xe>
   db8f8:	2c2d      	cmp	r4, #45	; 0x2d
   db8fa:	d103      	bne.n	db904 <_strtol_r+0x34>
   db8fc:	1cbd      	adds	r5, r7, #2
   db8fe:	787c      	ldrb	r4, [r7, #1]
   db900:	2601      	movs	r6, #1
   db902:	e003      	b.n	db90c <_strtol_r+0x3c>
   db904:	2c2b      	cmp	r4, #43	; 0x2b
   db906:	bf04      	itt	eq
   db908:	787c      	ldrbeq	r4, [r7, #1]
   db90a:	1cbd      	addeq	r5, r7, #2
   db90c:	b113      	cbz	r3, db914 <_strtol_r+0x44>
   db90e:	2b10      	cmp	r3, #16
   db910:	d10a      	bne.n	db928 <_strtol_r+0x58>
   db912:	e05b      	b.n	db9cc <_strtol_r+0xfc>
   db914:	2c30      	cmp	r4, #48	; 0x30
   db916:	d157      	bne.n	db9c8 <_strtol_r+0xf8>
   db918:	7828      	ldrb	r0, [r5, #0]
   db91a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db91e:	2858      	cmp	r0, #88	; 0x58
   db920:	d14d      	bne.n	db9be <_strtol_r+0xee>
   db922:	786c      	ldrb	r4, [r5, #1]
   db924:	2310      	movs	r3, #16
   db926:	3502      	adds	r5, #2
   db928:	2e00      	cmp	r6, #0
   db92a:	bf14      	ite	ne
   db92c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db930:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db934:	2700      	movs	r7, #0
   db936:	fbbc faf3 	udiv	sl, ip, r3
   db93a:	4638      	mov	r0, r7
   db93c:	fb03 cc1a 	mls	ip, r3, sl, ip
   db940:	eb09 0e04 	add.w	lr, r9, r4
   db944:	f89e e001 	ldrb.w	lr, [lr, #1]
   db948:	f01e 0f04 	tst.w	lr, #4
   db94c:	d001      	beq.n	db952 <_strtol_r+0x82>
   db94e:	3c30      	subs	r4, #48	; 0x30
   db950:	e00b      	b.n	db96a <_strtol_r+0x9a>
   db952:	f01e 0e03 	ands.w	lr, lr, #3
   db956:	d01b      	beq.n	db990 <_strtol_r+0xc0>
   db958:	f1be 0f01 	cmp.w	lr, #1
   db95c:	bf0c      	ite	eq
   db95e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db962:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db966:	ebce 0404 	rsb	r4, lr, r4
   db96a:	42a3      	cmp	r3, r4
   db96c:	dd10      	ble.n	db990 <_strtol_r+0xc0>
   db96e:	f1b7 3fff 	cmp.w	r7, #4294967295
   db972:	d00a      	beq.n	db98a <_strtol_r+0xba>
   db974:	4550      	cmp	r0, sl
   db976:	d806      	bhi.n	db986 <_strtol_r+0xb6>
   db978:	d101      	bne.n	db97e <_strtol_r+0xae>
   db97a:	4564      	cmp	r4, ip
   db97c:	dc03      	bgt.n	db986 <_strtol_r+0xb6>
   db97e:	fb03 4000 	mla	r0, r3, r0, r4
   db982:	2701      	movs	r7, #1
   db984:	e001      	b.n	db98a <_strtol_r+0xba>
   db986:	f04f 37ff 	mov.w	r7, #4294967295
   db98a:	f815 4b01 	ldrb.w	r4, [r5], #1
   db98e:	e7d7      	b.n	db940 <_strtol_r+0x70>
   db990:	1c7b      	adds	r3, r7, #1
   db992:	d10c      	bne.n	db9ae <_strtol_r+0xde>
   db994:	2e00      	cmp	r6, #0
   db996:	f04f 0322 	mov.w	r3, #34	; 0x22
   db99a:	bf14      	ite	ne
   db99c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db9a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db9a4:	f8c8 3000 	str.w	r3, [r8]
   db9a8:	b92a      	cbnz	r2, db9b6 <_strtol_r+0xe6>
   db9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9ae:	b106      	cbz	r6, db9b2 <_strtol_r+0xe2>
   db9b0:	4240      	negs	r0, r0
   db9b2:	b172      	cbz	r2, db9d2 <_strtol_r+0x102>
   db9b4:	b107      	cbz	r7, db9b8 <_strtol_r+0xe8>
   db9b6:	1e69      	subs	r1, r5, #1
   db9b8:	6011      	str	r1, [r2, #0]
   db9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9be:	2430      	movs	r4, #48	; 0x30
   db9c0:	2b00      	cmp	r3, #0
   db9c2:	d1b1      	bne.n	db928 <_strtol_r+0x58>
   db9c4:	2308      	movs	r3, #8
   db9c6:	e7af      	b.n	db928 <_strtol_r+0x58>
   db9c8:	230a      	movs	r3, #10
   db9ca:	e7ad      	b.n	db928 <_strtol_r+0x58>
   db9cc:	2c30      	cmp	r4, #48	; 0x30
   db9ce:	d0a3      	beq.n	db918 <_strtol_r+0x48>
   db9d0:	e7aa      	b.n	db928 <_strtol_r+0x58>
   db9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9d6:	bf00      	nop
   db9d8:	2003e090 	.word	0x2003e090

000db9dc <strtol>:
   db9dc:	4613      	mov	r3, r2
   db9de:	460a      	mov	r2, r1
   db9e0:	4601      	mov	r1, r0
   db9e2:	4802      	ldr	r0, [pc, #8]	; (db9ec <strtol+0x10>)
   db9e4:	6800      	ldr	r0, [r0, #0]
   db9e6:	f7ff bf73 	b.w	db8d0 <_strtol_r>
   db9ea:	bf00      	nop
   db9ec:	2003e0f4 	.word	0x2003e0f4

000db9f0 <_strtoul_r>:
   db9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db9f4:	4680      	mov	r8, r0
   db9f6:	483c      	ldr	r0, [pc, #240]	; (dbae8 <_strtoul_r+0xf8>)
   db9f8:	f8d0 9000 	ldr.w	r9, [r0]
   db9fc:	460e      	mov	r6, r1
   db9fe:	4635      	mov	r5, r6
   dba00:	f815 4b01 	ldrb.w	r4, [r5], #1
   dba04:	eb09 0004 	add.w	r0, r9, r4
   dba08:	7840      	ldrb	r0, [r0, #1]
   dba0a:	f000 0008 	and.w	r0, r0, #8
   dba0e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dba12:	b108      	cbz	r0, dba18 <_strtoul_r+0x28>
   dba14:	462e      	mov	r6, r5
   dba16:	e7f2      	b.n	db9fe <_strtoul_r+0xe>
   dba18:	2c2d      	cmp	r4, #45	; 0x2d
   dba1a:	d103      	bne.n	dba24 <_strtoul_r+0x34>
   dba1c:	1cb5      	adds	r5, r6, #2
   dba1e:	7874      	ldrb	r4, [r6, #1]
   dba20:	2701      	movs	r7, #1
   dba22:	e003      	b.n	dba2c <_strtoul_r+0x3c>
   dba24:	2c2b      	cmp	r4, #43	; 0x2b
   dba26:	bf04      	itt	eq
   dba28:	7874      	ldrbeq	r4, [r6, #1]
   dba2a:	1cb5      	addeq	r5, r6, #2
   dba2c:	b113      	cbz	r3, dba34 <_strtoul_r+0x44>
   dba2e:	2b10      	cmp	r3, #16
   dba30:	d10a      	bne.n	dba48 <_strtoul_r+0x58>
   dba32:	e053      	b.n	dbadc <_strtoul_r+0xec>
   dba34:	2c30      	cmp	r4, #48	; 0x30
   dba36:	d14f      	bne.n	dbad8 <_strtoul_r+0xe8>
   dba38:	7828      	ldrb	r0, [r5, #0]
   dba3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dba3e:	2858      	cmp	r0, #88	; 0x58
   dba40:	d145      	bne.n	dbace <_strtoul_r+0xde>
   dba42:	786c      	ldrb	r4, [r5, #1]
   dba44:	2310      	movs	r3, #16
   dba46:	3502      	adds	r5, #2
   dba48:	f04f 3cff 	mov.w	ip, #4294967295
   dba4c:	2600      	movs	r6, #0
   dba4e:	fbbc fcf3 	udiv	ip, ip, r3
   dba52:	fb03 fa0c 	mul.w	sl, r3, ip
   dba56:	ea6f 0a0a 	mvn.w	sl, sl
   dba5a:	4630      	mov	r0, r6
   dba5c:	eb09 0e04 	add.w	lr, r9, r4
   dba60:	f89e e001 	ldrb.w	lr, [lr, #1]
   dba64:	f01e 0f04 	tst.w	lr, #4
   dba68:	d001      	beq.n	dba6e <_strtoul_r+0x7e>
   dba6a:	3c30      	subs	r4, #48	; 0x30
   dba6c:	e00b      	b.n	dba86 <_strtoul_r+0x96>
   dba6e:	f01e 0e03 	ands.w	lr, lr, #3
   dba72:	d01a      	beq.n	dbaaa <_strtoul_r+0xba>
   dba74:	f1be 0f01 	cmp.w	lr, #1
   dba78:	bf0c      	ite	eq
   dba7a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dba7e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dba82:	ebce 0404 	rsb	r4, lr, r4
   dba86:	42a3      	cmp	r3, r4
   dba88:	dd0f      	ble.n	dbaaa <_strtoul_r+0xba>
   dba8a:	2e00      	cmp	r6, #0
   dba8c:	db08      	blt.n	dbaa0 <_strtoul_r+0xb0>
   dba8e:	4560      	cmp	r0, ip
   dba90:	d806      	bhi.n	dbaa0 <_strtoul_r+0xb0>
   dba92:	d101      	bne.n	dba98 <_strtoul_r+0xa8>
   dba94:	4554      	cmp	r4, sl
   dba96:	dc03      	bgt.n	dbaa0 <_strtoul_r+0xb0>
   dba98:	fb03 4000 	mla	r0, r3, r0, r4
   dba9c:	2601      	movs	r6, #1
   dba9e:	e001      	b.n	dbaa4 <_strtoul_r+0xb4>
   dbaa0:	f04f 36ff 	mov.w	r6, #4294967295
   dbaa4:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbaa8:	e7d8      	b.n	dba5c <_strtoul_r+0x6c>
   dbaaa:	2e00      	cmp	r6, #0
   dbaac:	da07      	bge.n	dbabe <_strtoul_r+0xce>
   dbaae:	2322      	movs	r3, #34	; 0x22
   dbab0:	f8c8 3000 	str.w	r3, [r8]
   dbab4:	f04f 30ff 	mov.w	r0, #4294967295
   dbab8:	b92a      	cbnz	r2, dbac6 <_strtoul_r+0xd6>
   dbaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbabe:	b107      	cbz	r7, dbac2 <_strtoul_r+0xd2>
   dbac0:	4240      	negs	r0, r0
   dbac2:	b172      	cbz	r2, dbae2 <_strtoul_r+0xf2>
   dbac4:	b106      	cbz	r6, dbac8 <_strtoul_r+0xd8>
   dbac6:	1e69      	subs	r1, r5, #1
   dbac8:	6011      	str	r1, [r2, #0]
   dbaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbace:	2430      	movs	r4, #48	; 0x30
   dbad0:	2b00      	cmp	r3, #0
   dbad2:	d1b9      	bne.n	dba48 <_strtoul_r+0x58>
   dbad4:	2308      	movs	r3, #8
   dbad6:	e7b7      	b.n	dba48 <_strtoul_r+0x58>
   dbad8:	230a      	movs	r3, #10
   dbada:	e7b5      	b.n	dba48 <_strtoul_r+0x58>
   dbadc:	2c30      	cmp	r4, #48	; 0x30
   dbade:	d0ab      	beq.n	dba38 <_strtoul_r+0x48>
   dbae0:	e7b2      	b.n	dba48 <_strtoul_r+0x58>
   dbae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbae6:	bf00      	nop
   dbae8:	2003e090 	.word	0x2003e090

000dbaec <strtoul>:
   dbaec:	4613      	mov	r3, r2
   dbaee:	460a      	mov	r2, r1
   dbaf0:	4601      	mov	r1, r0
   dbaf2:	4802      	ldr	r0, [pc, #8]	; (dbafc <strtoul+0x10>)
   dbaf4:	6800      	ldr	r0, [r0, #0]
   dbaf6:	f7ff bf7b 	b.w	db9f0 <_strtoul_r>
   dbafa:	bf00      	nop
   dbafc:	2003e0f4 	.word	0x2003e0f4

000dbb00 <__tzcalc_limits>:
   dbb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb04:	4604      	mov	r4, r0
   dbb06:	f000 fa6f 	bl	dbfe8 <__gettzinfo>
   dbb0a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbb0e:	429c      	cmp	r4, r3
   dbb10:	f340 8096 	ble.w	dbc40 <__tzcalc_limits+0x140>
   dbb14:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbb18:	18e3      	adds	r3, r4, r3
   dbb1a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbb1e:	109b      	asrs	r3, r3, #2
   dbb20:	f240 156d 	movw	r5, #365	; 0x16d
   dbb24:	fb05 3502 	mla	r5, r5, r2, r3
   dbb28:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbb2c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbb30:	fb92 f3f3 	sdiv	r3, r2, r3
   dbb34:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbb38:	442b      	add	r3, r5
   dbb3a:	18a5      	adds	r5, r4, r2
   dbb3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbb40:	fb95 f5f2 	sdiv	r5, r5, r2
   dbb44:	441d      	add	r5, r3
   dbb46:	2364      	movs	r3, #100	; 0x64
   dbb48:	fb94 f7f2 	sdiv	r7, r4, r2
   dbb4c:	fb94 f6f3 	sdiv	r6, r4, r3
   dbb50:	fb02 4717 	mls	r7, r2, r7, r4
   dbb54:	fb03 4616 	mls	r6, r3, r6, r4
   dbb58:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbb5c:	fab7 fe87 	clz	lr, r7
   dbb60:	9301      	str	r3, [sp, #4]
   dbb62:	f004 0303 	and.w	r3, r4, #3
   dbb66:	6044      	str	r4, [r0, #4]
   dbb68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbb6c:	4601      	mov	r1, r0
   dbb6e:	9300      	str	r3, [sp, #0]
   dbb70:	f04f 0c07 	mov.w	ip, #7
   dbb74:	7a0b      	ldrb	r3, [r1, #8]
   dbb76:	2b4a      	cmp	r3, #74	; 0x4a
   dbb78:	d10e      	bne.n	dbb98 <__tzcalc_limits+0x98>
   dbb7a:	694b      	ldr	r3, [r1, #20]
   dbb7c:	9a00      	ldr	r2, [sp, #0]
   dbb7e:	18ec      	adds	r4, r5, r3
   dbb80:	b902      	cbnz	r2, dbb84 <__tzcalc_limits+0x84>
   dbb82:	b906      	cbnz	r6, dbb86 <__tzcalc_limits+0x86>
   dbb84:	b927      	cbnz	r7, dbb90 <__tzcalc_limits+0x90>
   dbb86:	2b3b      	cmp	r3, #59	; 0x3b
   dbb88:	bfd4      	ite	le
   dbb8a:	2300      	movle	r3, #0
   dbb8c:	2301      	movgt	r3, #1
   dbb8e:	e000      	b.n	dbb92 <__tzcalc_limits+0x92>
   dbb90:	2300      	movs	r3, #0
   dbb92:	4423      	add	r3, r4
   dbb94:	3b01      	subs	r3, #1
   dbb96:	e03f      	b.n	dbc18 <__tzcalc_limits+0x118>
   dbb98:	2b44      	cmp	r3, #68	; 0x44
   dbb9a:	d102      	bne.n	dbba2 <__tzcalc_limits+0xa2>
   dbb9c:	694b      	ldr	r3, [r1, #20]
   dbb9e:	442b      	add	r3, r5
   dbba0:	e03a      	b.n	dbc18 <__tzcalc_limits+0x118>
   dbba2:	9b00      	ldr	r3, [sp, #0]
   dbba4:	b92b      	cbnz	r3, dbbb2 <__tzcalc_limits+0xb2>
   dbba6:	2e00      	cmp	r6, #0
   dbba8:	bf0c      	ite	eq
   dbbaa:	46f0      	moveq	r8, lr
   dbbac:	f04f 0801 	movne.w	r8, #1
   dbbb0:	e000      	b.n	dbbb4 <__tzcalc_limits+0xb4>
   dbbb2:	46f0      	mov	r8, lr
   dbbb4:	4b24      	ldr	r3, [pc, #144]	; (dbc48 <__tzcalc_limits+0x148>)
   dbbb6:	68cc      	ldr	r4, [r1, #12]
   dbbb8:	2230      	movs	r2, #48	; 0x30
   dbbba:	fb02 3808 	mla	r8, r2, r8, r3
   dbbbe:	f1a8 0a04 	sub.w	sl, r8, #4
   dbbc2:	46a9      	mov	r9, r5
   dbbc4:	2301      	movs	r3, #1
   dbbc6:	42a3      	cmp	r3, r4
   dbbc8:	da04      	bge.n	dbbd4 <__tzcalc_limits+0xd4>
   dbbca:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbbce:	3301      	adds	r3, #1
   dbbd0:	44d9      	add	r9, fp
   dbbd2:	e7f8      	b.n	dbbc6 <__tzcalc_limits+0xc6>
   dbbd4:	f109 0304 	add.w	r3, r9, #4
   dbbd8:	fb93 fbfc 	sdiv	fp, r3, ip
   dbbdc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbbe0:	2c01      	cmp	r4, #1
   dbbe2:	ebca 0a03 	rsb	sl, sl, r3
   dbbe6:	694b      	ldr	r3, [r1, #20]
   dbbe8:	bfb8      	it	lt
   dbbea:	2401      	movlt	r4, #1
   dbbec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbbf0:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbbf4:	690b      	ldr	r3, [r1, #16]
   dbbf6:	f104 34ff 	add.w	r4, r4, #4294967295
   dbbfa:	f103 33ff 	add.w	r3, r3, #4294967295
   dbbfe:	bf48      	it	mi
   dbc00:	f10a 0a07 	addmi.w	sl, sl, #7
   dbc04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbc08:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbc0c:	4453      	add	r3, sl
   dbc0e:	42a3      	cmp	r3, r4
   dbc10:	db01      	blt.n	dbc16 <__tzcalc_limits+0x116>
   dbc12:	3b07      	subs	r3, #7
   dbc14:	e7fb      	b.n	dbc0e <__tzcalc_limits+0x10e>
   dbc16:	444b      	add	r3, r9
   dbc18:	698c      	ldr	r4, [r1, #24]
   dbc1a:	4a0c      	ldr	r2, [pc, #48]	; (dbc4c <__tzcalc_limits+0x14c>)
   dbc1c:	fb02 4303 	mla	r3, r2, r3, r4
   dbc20:	6a0c      	ldr	r4, [r1, #32]
   dbc22:	4423      	add	r3, r4
   dbc24:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbc28:	9b01      	ldr	r3, [sp, #4]
   dbc2a:	4299      	cmp	r1, r3
   dbc2c:	d1a2      	bne.n	dbb74 <__tzcalc_limits+0x74>
   dbc2e:	69c3      	ldr	r3, [r0, #28]
   dbc30:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbc32:	4293      	cmp	r3, r2
   dbc34:	bfac      	ite	ge
   dbc36:	2300      	movge	r3, #0
   dbc38:	2301      	movlt	r3, #1
   dbc3a:	6003      	str	r3, [r0, #0]
   dbc3c:	2001      	movs	r0, #1
   dbc3e:	e000      	b.n	dbc42 <__tzcalc_limits+0x142>
   dbc40:	2000      	movs	r0, #0
   dbc42:	b003      	add	sp, #12
   dbc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc48:	000dd248 	.word	0x000dd248
   dbc4c:	00015180 	.word	0x00015180

000dbc50 <__tz_lock>:
   dbc50:	4770      	bx	lr

000dbc52 <__tz_unlock>:
   dbc52:	4770      	bx	lr

000dbc54 <_tzset_unlocked>:
   dbc54:	4b01      	ldr	r3, [pc, #4]	; (dbc5c <_tzset_unlocked+0x8>)
   dbc56:	6818      	ldr	r0, [r3, #0]
   dbc58:	f000 b802 	b.w	dbc60 <_tzset_unlocked_r>
   dbc5c:	2003e0f4 	.word	0x2003e0f4

000dbc60 <_tzset_unlocked_r>:
   dbc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc64:	b08d      	sub	sp, #52	; 0x34
   dbc66:	4607      	mov	r7, r0
   dbc68:	f000 f9be 	bl	dbfe8 <__gettzinfo>
   dbc6c:	49b0      	ldr	r1, [pc, #704]	; (dbf30 <_tzset_unlocked_r+0x2d0>)
   dbc6e:	4eb1      	ldr	r6, [pc, #708]	; (dbf34 <_tzset_unlocked_r+0x2d4>)
   dbc70:	4604      	mov	r4, r0
   dbc72:	4638      	mov	r0, r7
   dbc74:	f000 f9b0 	bl	dbfd8 <_getenv_r>
   dbc78:	4605      	mov	r5, r0
   dbc7a:	b960      	cbnz	r0, dbc96 <_tzset_unlocked_r+0x36>
   dbc7c:	4bae      	ldr	r3, [pc, #696]	; (dbf38 <_tzset_unlocked_r+0x2d8>)
   dbc7e:	4aaf      	ldr	r2, [pc, #700]	; (dbf3c <_tzset_unlocked_r+0x2dc>)
   dbc80:	6018      	str	r0, [r3, #0]
   dbc82:	4baf      	ldr	r3, [pc, #700]	; (dbf40 <_tzset_unlocked_r+0x2e0>)
   dbc84:	6018      	str	r0, [r3, #0]
   dbc86:	4baf      	ldr	r3, [pc, #700]	; (dbf44 <_tzset_unlocked_r+0x2e4>)
   dbc88:	6830      	ldr	r0, [r6, #0]
   dbc8a:	601a      	str	r2, [r3, #0]
   dbc8c:	605a      	str	r2, [r3, #4]
   dbc8e:	f7fb f957 	bl	d6f40 <free>
   dbc92:	6035      	str	r5, [r6, #0]
   dbc94:	e148      	b.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbc96:	6831      	ldr	r1, [r6, #0]
   dbc98:	b979      	cbnz	r1, dbcba <_tzset_unlocked_r+0x5a>
   dbc9a:	6830      	ldr	r0, [r6, #0]
   dbc9c:	f7fb f950 	bl	d6f40 <free>
   dbca0:	4628      	mov	r0, r5
   dbca2:	f7ff fdc0 	bl	db826 <strlen>
   dbca6:	1c41      	adds	r1, r0, #1
   dbca8:	4638      	mov	r0, r7
   dbcaa:	f7fb f981 	bl	d6fb0 <_malloc_r>
   dbcae:	6030      	str	r0, [r6, #0]
   dbcb0:	b148      	cbz	r0, dbcc6 <_tzset_unlocked_r+0x66>
   dbcb2:	4629      	mov	r1, r5
   dbcb4:	f7ff fd94 	bl	db7e0 <strcpy>
   dbcb8:	e005      	b.n	dbcc6 <_tzset_unlocked_r+0x66>
   dbcba:	f7ff fd87 	bl	db7cc <strcmp>
   dbcbe:	2800      	cmp	r0, #0
   dbcc0:	f000 8132 	beq.w	dbf28 <_tzset_unlocked_r+0x2c8>
   dbcc4:	e7e9      	b.n	dbc9a <_tzset_unlocked_r+0x3a>
   dbcc6:	782b      	ldrb	r3, [r5, #0]
   dbcc8:	4a9f      	ldr	r2, [pc, #636]	; (dbf48 <_tzset_unlocked_r+0x2e8>)
   dbcca:	49a0      	ldr	r1, [pc, #640]	; (dbf4c <_tzset_unlocked_r+0x2ec>)
   dbccc:	2b3a      	cmp	r3, #58	; 0x3a
   dbcce:	bf08      	it	eq
   dbcd0:	3501      	addeq	r5, #1
   dbcd2:	ae0a      	add	r6, sp, #40	; 0x28
   dbcd4:	4633      	mov	r3, r6
   dbcd6:	4628      	mov	r0, r5
   dbcd8:	f7fb f952 	bl	d6f80 <siscanf>
   dbcdc:	2800      	cmp	r0, #0
   dbcde:	f340 8123 	ble.w	dbf28 <_tzset_unlocked_r+0x2c8>
   dbce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbce4:	18ef      	adds	r7, r5, r3
   dbce6:	5ceb      	ldrb	r3, [r5, r3]
   dbce8:	2b2d      	cmp	r3, #45	; 0x2d
   dbcea:	d103      	bne.n	dbcf4 <_tzset_unlocked_r+0x94>
   dbcec:	3701      	adds	r7, #1
   dbcee:	f04f 35ff 	mov.w	r5, #4294967295
   dbcf2:	e003      	b.n	dbcfc <_tzset_unlocked_r+0x9c>
   dbcf4:	2b2b      	cmp	r3, #43	; 0x2b
   dbcf6:	bf08      	it	eq
   dbcf8:	3701      	addeq	r7, #1
   dbcfa:	2501      	movs	r5, #1
   dbcfc:	f10d 0a20 	add.w	sl, sp, #32
   dbd00:	f10d 0b1e 	add.w	fp, sp, #30
   dbd04:	f04f 0800 	mov.w	r8, #0
   dbd08:	9603      	str	r6, [sp, #12]
   dbd0a:	f8cd a008 	str.w	sl, [sp, #8]
   dbd0e:	9601      	str	r6, [sp, #4]
   dbd10:	f8cd b000 	str.w	fp, [sp]
   dbd14:	4633      	mov	r3, r6
   dbd16:	aa07      	add	r2, sp, #28
   dbd18:	498d      	ldr	r1, [pc, #564]	; (dbf50 <_tzset_unlocked_r+0x2f0>)
   dbd1a:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbd1e:	4638      	mov	r0, r7
   dbd20:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbd24:	f7fb f92c 	bl	d6f80 <siscanf>
   dbd28:	4540      	cmp	r0, r8
   dbd2a:	f340 80fd 	ble.w	dbf28 <_tzset_unlocked_r+0x2c8>
   dbd2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbd32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbd36:	f8df 9224 	ldr.w	r9, [pc, #548]	; dbf5c <_tzset_unlocked_r+0x2fc>
   dbd3a:	213c      	movs	r1, #60	; 0x3c
   dbd3c:	fb01 3302 	mla	r3, r1, r2, r3
   dbd40:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbd44:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbd48:	fb01 3302 	mla	r3, r1, r2, r3
   dbd4c:	435d      	muls	r5, r3
   dbd4e:	6225      	str	r5, [r4, #32]
   dbd50:	4d7c      	ldr	r5, [pc, #496]	; (dbf44 <_tzset_unlocked_r+0x2e4>)
   dbd52:	4b7d      	ldr	r3, [pc, #500]	; (dbf48 <_tzset_unlocked_r+0x2e8>)
   dbd54:	602b      	str	r3, [r5, #0]
   dbd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd58:	497c      	ldr	r1, [pc, #496]	; (dbf4c <_tzset_unlocked_r+0x2ec>)
   dbd5a:	441f      	add	r7, r3
   dbd5c:	464a      	mov	r2, r9
   dbd5e:	4633      	mov	r3, r6
   dbd60:	4638      	mov	r0, r7
   dbd62:	f7fb f90d 	bl	d6f80 <siscanf>
   dbd66:	4540      	cmp	r0, r8
   dbd68:	dc08      	bgt.n	dbd7c <_tzset_unlocked_r+0x11c>
   dbd6a:	682b      	ldr	r3, [r5, #0]
   dbd6c:	606b      	str	r3, [r5, #4]
   dbd6e:	4b72      	ldr	r3, [pc, #456]	; (dbf38 <_tzset_unlocked_r+0x2d8>)
   dbd70:	6a22      	ldr	r2, [r4, #32]
   dbd72:	601a      	str	r2, [r3, #0]
   dbd74:	4b72      	ldr	r3, [pc, #456]	; (dbf40 <_tzset_unlocked_r+0x2e0>)
   dbd76:	f8c3 8000 	str.w	r8, [r3]
   dbd7a:	e0d5      	b.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbd7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd7e:	f8c5 9004 	str.w	r9, [r5, #4]
   dbd82:	18fd      	adds	r5, r7, r3
   dbd84:	5cfb      	ldrb	r3, [r7, r3]
   dbd86:	2b2d      	cmp	r3, #45	; 0x2d
   dbd88:	d103      	bne.n	dbd92 <_tzset_unlocked_r+0x132>
   dbd8a:	3501      	adds	r5, #1
   dbd8c:	f04f 37ff 	mov.w	r7, #4294967295
   dbd90:	e003      	b.n	dbd9a <_tzset_unlocked_r+0x13a>
   dbd92:	2b2b      	cmp	r3, #43	; 0x2b
   dbd94:	bf08      	it	eq
   dbd96:	3501      	addeq	r5, #1
   dbd98:	2701      	movs	r7, #1
   dbd9a:	2300      	movs	r3, #0
   dbd9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbda0:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbda4:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbda8:	930a      	str	r3, [sp, #40]	; 0x28
   dbdaa:	9603      	str	r6, [sp, #12]
   dbdac:	f8cd a008 	str.w	sl, [sp, #8]
   dbdb0:	9601      	str	r6, [sp, #4]
   dbdb2:	f8cd b000 	str.w	fp, [sp]
   dbdb6:	4633      	mov	r3, r6
   dbdb8:	aa07      	add	r2, sp, #28
   dbdba:	4965      	ldr	r1, [pc, #404]	; (dbf50 <_tzset_unlocked_r+0x2f0>)
   dbdbc:	4628      	mov	r0, r5
   dbdbe:	f7fb f8df 	bl	d6f80 <siscanf>
   dbdc2:	2800      	cmp	r0, #0
   dbdc4:	dc04      	bgt.n	dbdd0 <_tzset_unlocked_r+0x170>
   dbdc6:	6a23      	ldr	r3, [r4, #32]
   dbdc8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbdcc:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbdce:	e00e      	b.n	dbdee <_tzset_unlocked_r+0x18e>
   dbdd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbdd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbdd8:	213c      	movs	r1, #60	; 0x3c
   dbdda:	fb01 3302 	mla	r3, r1, r2, r3
   dbdde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbde2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbde6:	fb01 3302 	mla	r3, r1, r2, r3
   dbdea:	435f      	muls	r7, r3
   dbdec:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbdf0:	4627      	mov	r7, r4
   dbdf2:	441d      	add	r5, r3
   dbdf4:	f04f 0900 	mov.w	r9, #0
   dbdf8:	782b      	ldrb	r3, [r5, #0]
   dbdfa:	2b2c      	cmp	r3, #44	; 0x2c
   dbdfc:	bf08      	it	eq
   dbdfe:	3501      	addeq	r5, #1
   dbe00:	f895 8000 	ldrb.w	r8, [r5]
   dbe04:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbe08:	d126      	bne.n	dbe58 <_tzset_unlocked_r+0x1f8>
   dbe0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbe0e:	9302      	str	r3, [sp, #8]
   dbe10:	ab09      	add	r3, sp, #36	; 0x24
   dbe12:	9300      	str	r3, [sp, #0]
   dbe14:	9603      	str	r6, [sp, #12]
   dbe16:	9601      	str	r6, [sp, #4]
   dbe18:	4633      	mov	r3, r6
   dbe1a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbe1e:	494d      	ldr	r1, [pc, #308]	; (dbf54 <_tzset_unlocked_r+0x2f4>)
   dbe20:	4628      	mov	r0, r5
   dbe22:	f7fb f8ad 	bl	d6f80 <siscanf>
   dbe26:	2803      	cmp	r0, #3
   dbe28:	d17e      	bne.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbe2a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbe2e:	1e4b      	subs	r3, r1, #1
   dbe30:	2b0b      	cmp	r3, #11
   dbe32:	d879      	bhi.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbe34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbe38:	1e53      	subs	r3, r2, #1
   dbe3a:	2b04      	cmp	r3, #4
   dbe3c:	d874      	bhi.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbe3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbe42:	2b06      	cmp	r3, #6
   dbe44:	d870      	bhi.n	dbf28 <_tzset_unlocked_r+0x2c8>
   dbe46:	f887 8008 	strb.w	r8, [r7, #8]
   dbe4a:	60f9      	str	r1, [r7, #12]
   dbe4c:	613a      	str	r2, [r7, #16]
   dbe4e:	617b      	str	r3, [r7, #20]
   dbe50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe52:	eb05 0803 	add.w	r8, r5, r3
   dbe56:	e02a      	b.n	dbeae <_tzset_unlocked_r+0x24e>
   dbe58:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dbe5c:	bf06      	itte	eq
   dbe5e:	3501      	addeq	r5, #1
   dbe60:	4643      	moveq	r3, r8
   dbe62:	2344      	movne	r3, #68	; 0x44
   dbe64:	220a      	movs	r2, #10
   dbe66:	a90b      	add	r1, sp, #44	; 0x2c
   dbe68:	4628      	mov	r0, r5
   dbe6a:	9305      	str	r3, [sp, #20]
   dbe6c:	f7ff fe3e 	bl	dbaec <strtoul>
   dbe70:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dbe74:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dbe78:	4545      	cmp	r5, r8
   dbe7a:	9b05      	ldr	r3, [sp, #20]
   dbe7c:	d114      	bne.n	dbea8 <_tzset_unlocked_r+0x248>
   dbe7e:	234d      	movs	r3, #77	; 0x4d
   dbe80:	f1b9 0f00 	cmp.w	r9, #0
   dbe84:	d107      	bne.n	dbe96 <_tzset_unlocked_r+0x236>
   dbe86:	7223      	strb	r3, [r4, #8]
   dbe88:	2303      	movs	r3, #3
   dbe8a:	60e3      	str	r3, [r4, #12]
   dbe8c:	2302      	movs	r3, #2
   dbe8e:	6123      	str	r3, [r4, #16]
   dbe90:	f8c4 9014 	str.w	r9, [r4, #20]
   dbe94:	e00b      	b.n	dbeae <_tzset_unlocked_r+0x24e>
   dbe96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dbe9a:	230b      	movs	r3, #11
   dbe9c:	62a3      	str	r3, [r4, #40]	; 0x28
   dbe9e:	2301      	movs	r3, #1
   dbea0:	62e3      	str	r3, [r4, #44]	; 0x2c
   dbea2:	2300      	movs	r3, #0
   dbea4:	6323      	str	r3, [r4, #48]	; 0x30
   dbea6:	e002      	b.n	dbeae <_tzset_unlocked_r+0x24e>
   dbea8:	b280      	uxth	r0, r0
   dbeaa:	723b      	strb	r3, [r7, #8]
   dbeac:	6178      	str	r0, [r7, #20]
   dbeae:	2302      	movs	r3, #2
   dbeb0:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbeb4:	2300      	movs	r3, #0
   dbeb6:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbeba:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbebe:	930a      	str	r3, [sp, #40]	; 0x28
   dbec0:	f898 3000 	ldrb.w	r3, [r8]
   dbec4:	2b2f      	cmp	r3, #47	; 0x2f
   dbec6:	d10b      	bne.n	dbee0 <_tzset_unlocked_r+0x280>
   dbec8:	9603      	str	r6, [sp, #12]
   dbeca:	f8cd a008 	str.w	sl, [sp, #8]
   dbece:	9601      	str	r6, [sp, #4]
   dbed0:	f8cd b000 	str.w	fp, [sp]
   dbed4:	4633      	mov	r3, r6
   dbed6:	aa07      	add	r2, sp, #28
   dbed8:	491f      	ldr	r1, [pc, #124]	; (dbf58 <_tzset_unlocked_r+0x2f8>)
   dbeda:	4640      	mov	r0, r8
   dbedc:	f7fb f850 	bl	d6f80 <siscanf>
   dbee0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbee4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbee8:	213c      	movs	r1, #60	; 0x3c
   dbeea:	fb01 3302 	mla	r3, r1, r2, r3
   dbeee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbef2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbef6:	fb01 3302 	mla	r3, r1, r2, r3
   dbefa:	61bb      	str	r3, [r7, #24]
   dbefc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dbefe:	f109 0901 	add.w	r9, r9, #1
   dbf02:	f1b9 0f02 	cmp.w	r9, #2
   dbf06:	4445      	add	r5, r8
   dbf08:	f107 071c 	add.w	r7, r7, #28
   dbf0c:	f47f af74 	bne.w	dbdf8 <_tzset_unlocked_r+0x198>
   dbf10:	6860      	ldr	r0, [r4, #4]
   dbf12:	f7ff fdf5 	bl	dbb00 <__tzcalc_limits>
   dbf16:	4b08      	ldr	r3, [pc, #32]	; (dbf38 <_tzset_unlocked_r+0x2d8>)
   dbf18:	6a22      	ldr	r2, [r4, #32]
   dbf1a:	601a      	str	r2, [r3, #0]
   dbf1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dbf1e:	1a9b      	subs	r3, r3, r2
   dbf20:	4a07      	ldr	r2, [pc, #28]	; (dbf40 <_tzset_unlocked_r+0x2e0>)
   dbf22:	bf18      	it	ne
   dbf24:	2301      	movne	r3, #1
   dbf26:	6013      	str	r3, [r2, #0]
   dbf28:	b00d      	add	sp, #52	; 0x34
   dbf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf2e:	bf00      	nop
   dbf30:	000dd2a8 	.word	0x000dd2a8
   dbf34:	2003e7e4 	.word	0x2003e7e4
   dbf38:	2003e7ec 	.word	0x2003e7ec
   dbf3c:	000dd2ab 	.word	0x000dd2ab
   dbf40:	2003e7e8 	.word	0x2003e7e8
   dbf44:	2003e0f8 	.word	0x2003e0f8
   dbf48:	2003e7d7 	.word	0x2003e7d7
   dbf4c:	000dd2af 	.word	0x000dd2af
   dbf50:	000dd2d2 	.word	0x000dd2d2
   dbf54:	000dd2be 	.word	0x000dd2be
   dbf58:	000dd2d1 	.word	0x000dd2d1
   dbf5c:	2003e7cc 	.word	0x2003e7cc

000dbf60 <_findenv_r>:
   dbf60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf64:	4607      	mov	r7, r0
   dbf66:	468b      	mov	fp, r1
   dbf68:	4690      	mov	r8, r2
   dbf6a:	f000 f8d9 	bl	dc120 <__env_lock>
   dbf6e:	4b19      	ldr	r3, [pc, #100]	; (dbfd4 <_findenv_r+0x74>)
   dbf70:	681d      	ldr	r5, [r3, #0]
   dbf72:	469a      	mov	sl, r3
   dbf74:	b13d      	cbz	r5, dbf86 <_findenv_r+0x26>
   dbf76:	465c      	mov	r4, fp
   dbf78:	4623      	mov	r3, r4
   dbf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbf7e:	b142      	cbz	r2, dbf92 <_findenv_r+0x32>
   dbf80:	2a3d      	cmp	r2, #61	; 0x3d
   dbf82:	461c      	mov	r4, r3
   dbf84:	d1f8      	bne.n	dbf78 <_findenv_r+0x18>
   dbf86:	4638      	mov	r0, r7
   dbf88:	f000 f8cb 	bl	dc122 <__env_unlock>
   dbf8c:	2000      	movs	r0, #0
   dbf8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf92:	ebcb 0404 	rsb	r4, fp, r4
   dbf96:	46a9      	mov	r9, r5
   dbf98:	f859 0b04 	ldr.w	r0, [r9], #4
   dbf9c:	2800      	cmp	r0, #0
   dbf9e:	d0f2      	beq.n	dbf86 <_findenv_r+0x26>
   dbfa0:	4622      	mov	r2, r4
   dbfa2:	4659      	mov	r1, fp
   dbfa4:	f7ff fc6c 	bl	db880 <strncmp>
   dbfa8:	b988      	cbnz	r0, dbfce <_findenv_r+0x6e>
   dbfaa:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dbfae:	191e      	adds	r6, r3, r4
   dbfb0:	5d1b      	ldrb	r3, [r3, r4]
   dbfb2:	2b3d      	cmp	r3, #61	; 0x3d
   dbfb4:	d10b      	bne.n	dbfce <_findenv_r+0x6e>
   dbfb6:	f8da 3000 	ldr.w	r3, [sl]
   dbfba:	1aed      	subs	r5, r5, r3
   dbfbc:	10ad      	asrs	r5, r5, #2
   dbfbe:	4638      	mov	r0, r7
   dbfc0:	f8c8 5000 	str.w	r5, [r8]
   dbfc4:	f000 f8ad 	bl	dc122 <__env_unlock>
   dbfc8:	1c70      	adds	r0, r6, #1
   dbfca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfce:	464d      	mov	r5, r9
   dbfd0:	e7e1      	b.n	dbf96 <_findenv_r+0x36>
   dbfd2:	bf00      	nop
   dbfd4:	2003e140 	.word	0x2003e140

000dbfd8 <_getenv_r>:
   dbfd8:	b507      	push	{r0, r1, r2, lr}
   dbfda:	aa01      	add	r2, sp, #4
   dbfdc:	f7ff ffc0 	bl	dbf60 <_findenv_r>
   dbfe0:	b003      	add	sp, #12
   dbfe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbfe8 <__gettzinfo>:
   dbfe8:	4800      	ldr	r0, [pc, #0]	; (dbfec <__gettzinfo+0x4>)
   dbfea:	4770      	bx	lr
   dbfec:	2003e100 	.word	0x2003e100

000dbff0 <gmtime_r>:
   dbff0:	6802      	ldr	r2, [r0, #0]
   dbff2:	4b47      	ldr	r3, [pc, #284]	; (dc110 <gmtime_r+0x120>)
   dbff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbff6:	fb92 f4f3 	sdiv	r4, r2, r3
   dbffa:	fb03 2214 	mls	r2, r3, r4, r2
   dbffe:	2a00      	cmp	r2, #0
   dc000:	bfbc      	itt	lt
   dc002:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dc006:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc00a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc00e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc012:	fb92 f3f0 	sdiv	r3, r2, r0
   dc016:	fb00 2213 	mls	r2, r0, r3, r2
   dc01a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc01e:	bfac      	ite	ge
   dc020:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc024:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc028:	608b      	str	r3, [r1, #8]
   dc02a:	fb92 f3f0 	sdiv	r3, r2, r0
   dc02e:	fb00 2213 	mls	r2, r0, r3, r2
   dc032:	604b      	str	r3, [r1, #4]
   dc034:	600a      	str	r2, [r1, #0]
   dc036:	2307      	movs	r3, #7
   dc038:	1ce2      	adds	r2, r4, #3
   dc03a:	fb92 f3f3 	sdiv	r3, r2, r3
   dc03e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc042:	1ad3      	subs	r3, r2, r3
   dc044:	618b      	str	r3, [r1, #24]
   dc046:	4b33      	ldr	r3, [pc, #204]	; (dc114 <gmtime_r+0x124>)
   dc048:	4d33      	ldr	r5, [pc, #204]	; (dc118 <gmtime_r+0x128>)
   dc04a:	fb94 f5f5 	sdiv	r5, r4, r5
   dc04e:	fb03 4405 	mla	r4, r3, r5, r4
   dc052:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc056:	fbb4 f2f2 	udiv	r2, r4, r2
   dc05a:	4422      	add	r2, r4
   dc05c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc060:	fbb4 f3f7 	udiv	r3, r4, r7
   dc064:	1ad2      	subs	r2, r2, r3
   dc066:	482d      	ldr	r0, [pc, #180]	; (dc11c <gmtime_r+0x12c>)
   dc068:	fbb4 f0f0 	udiv	r0, r4, r0
   dc06c:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc070:	1a13      	subs	r3, r2, r0
   dc072:	fbb3 f6f6 	udiv	r6, r3, r6
   dc076:	4434      	add	r4, r6
   dc078:	f240 126d 	movw	r2, #365	; 0x16d
   dc07c:	fbb3 f0f2 	udiv	r0, r3, r2
   dc080:	fbb3 f3f7 	udiv	r3, r3, r7
   dc084:	1ae3      	subs	r3, r4, r3
   dc086:	fb02 3310 	mls	r3, r2, r0, r3
   dc08a:	2499      	movs	r4, #153	; 0x99
   dc08c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc090:	3202      	adds	r2, #2
   dc092:	fbb2 f2f4 	udiv	r2, r2, r4
   dc096:	2a0a      	cmp	r2, #10
   dc098:	fb04 f402 	mul.w	r4, r4, r2
   dc09c:	f104 0602 	add.w	r6, r4, #2
   dc0a0:	f04f 0405 	mov.w	r4, #5
   dc0a4:	fbb6 f4f4 	udiv	r4, r6, r4
   dc0a8:	bf34      	ite	cc
   dc0aa:	2602      	movcc	r6, #2
   dc0ac:	f06f 0609 	mvncs.w	r6, #9
   dc0b0:	4416      	add	r6, r2
   dc0b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc0b6:	fb02 0505 	mla	r5, r2, r5, r0
   dc0ba:	1c5f      	adds	r7, r3, #1
   dc0bc:	2e01      	cmp	r6, #1
   dc0be:	bf98      	it	ls
   dc0c0:	3501      	addls	r5, #1
   dc0c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc0c6:	eba7 0704 	sub.w	r7, r7, r4
   dc0ca:	d302      	bcc.n	dc0d2 <gmtime_r+0xe2>
   dc0cc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc0d0:	e014      	b.n	dc0fc <gmtime_r+0x10c>
   dc0d2:	0782      	lsls	r2, r0, #30
   dc0d4:	d105      	bne.n	dc0e2 <gmtime_r+0xf2>
   dc0d6:	2464      	movs	r4, #100	; 0x64
   dc0d8:	fbb0 f2f4 	udiv	r2, r0, r4
   dc0dc:	fb04 0212 	mls	r2, r4, r2, r0
   dc0e0:	b94a      	cbnz	r2, dc0f6 <gmtime_r+0x106>
   dc0e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc0e6:	fbb0 f4f2 	udiv	r4, r0, r2
   dc0ea:	fb02 0014 	mls	r0, r2, r4, r0
   dc0ee:	fab0 f280 	clz	r2, r0
   dc0f2:	0952      	lsrs	r2, r2, #5
   dc0f4:	e000      	b.n	dc0f8 <gmtime_r+0x108>
   dc0f6:	2201      	movs	r2, #1
   dc0f8:	333b      	adds	r3, #59	; 0x3b
   dc0fa:	441a      	add	r2, r3
   dc0fc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc100:	2300      	movs	r3, #0
   dc102:	61ca      	str	r2, [r1, #28]
   dc104:	614d      	str	r5, [r1, #20]
   dc106:	610e      	str	r6, [r1, #16]
   dc108:	60cf      	str	r7, [r1, #12]
   dc10a:	620b      	str	r3, [r1, #32]
   dc10c:	4608      	mov	r0, r1
   dc10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc110:	00015180 	.word	0x00015180
   dc114:	fffdc54f 	.word	0xfffdc54f
   dc118:	00023ab1 	.word	0x00023ab1
   dc11c:	00023ab0 	.word	0x00023ab0

000dc120 <__env_lock>:
   dc120:	4770      	bx	lr

000dc122 <__env_unlock>:
   dc122:	4770      	bx	lr

000dc124 <dynalib_user>:
   dc124:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dc134:	0000 0000                                   ....

000dc138 <_ZTV16JsonWriterStaticILj256EE>:
	...
   dc140:	40d1 000d 40e5 000d 6854 2065 6925 3e20     .@...@..The %i >
   dc150:	2520 2c69 7420 7275 696e 676e 6f20 206e      %i, turning on 
   dc160:	7570 706d 0a00 0a20 5420 6568 2520 2069     pump.. . The %i 
   dc170:	203c 6925 6e20 206f 6177 6574 2072 656e     < %i no water ne
   dc180:	6465 6465 4100 2074 7325 7420 6568 6d20     eded.At %s the m
   dc190:	696f 7473 7275 2065 6572 6461 6e69 2067     oisture reading 
   dc1a0:	7369 2520 2069 000a 6854 2065 6974 656d     is %i ..The time
   dc1b0:	6920 2073 7325 0a20 2c00 4800 6c65 6f6c      is %s ..,.Hello
   dc1c0:	202c 6f77 6c72 2164 4200 454d 3832 2030     , world!.BME280 
   dc1d0:	6574 7473 4300 756f 646c 6e20 746f 6620     test.Could not f
   dc1e0:	6e69 2064 2061 6176 696c 2064 4d42 3245     ind a valid BME2
   dc1f0:	3038 7320 6e65 6f73 2c72 6320 6568 6b63     80 sensor, check
   dc200:	7720 7269 6e69 2c67 6120 6464 6572 7373      wiring, address
   dc210:	202c 6573 736e 726f 4920 2144 5300 6e65     , sensor ID!.Sen
   dc220:	6f73 4972 2044 6177 3a73 3020 0078 2020     sorID was: 0x.  
   dc230:	2020 2020 2020 4449 6f20 2066 7830 4646           ID of 0xFF
   dc240:	7020 6f72 6162 6c62 2079 656d 6e61 2073      probably means 
   dc250:	2061 6162 2064 6461 7264 7365 2c73 6120     a bad address, a
   dc260:	4220 504d 3120 3038 6f20 2072 4d42 2050      BMP 180 or BMP 
   dc270:	3830 0a35 2000 2020 4449 6f20 2066 7830     085..   ID of 0x
   dc280:	3635 302d 3578 2038 6572 7270 7365 6e65     56-0x58 represen
   dc290:	7374 6120 4220 504d 3220 3038 0a2c 2000     ts a BMP 280,.. 
   dc2a0:	2020 2020 2020 4920 2044 666f 3020 3678            ID of 0x6
   dc2b0:	2030 6572 7270 7365 6e65 7374 6120 4220     0 represents a B
   dc2c0:	454d 3220 3038 0a2e 2000 2020 2020 2020     ME 280...       
   dc2d0:	4920 2044 666f 3020 3678 2031 6572 7270      ID of 0x61 repr
   dc2e0:	7365 6e65 7374 6120 4220 454d 3620 3038     esents a BME 680
   dc2f0:	0a2e 5000 616c 746e 5720 7461 7265 6465     ...Plant Watered
   dc300:	6500 766e 762d 6c61 0073 6554 706d 7265     .env-vals.Temper
   dc310:	7461 7275 2065 6156 756c 2065 203d 3025     ature Value = %0
   dc320:	322e 2066 000a 7250 7365 7573 6572 5620     .2f ..Pressure V
   dc330:	6c61 6575 3d20 2520 2e30 6632 0a20 4800     alue = %0.2f ..H
   dc340:	6d75 6469 7469 2079 6156 756c 2065 203d     umidity Value = 
   dc350:	3025 322e 2066 000a 6f53 6c69 4d20 696f     %0.2f ..Soil Moi
   dc360:	7473 7275 2065 6156 756c 2065 203d 6425     sture Value = %d
   dc370:	0a20 4400 7375 2074 6156 756c 2065 203d      ..Dust Value = 
   dc380:	3025 322e 2066 000a 6e45 6976 6f72 6d6e     %0.2f ..Environm
   dc390:	6e65 6174 206c 6552 6461 6e69 0067 6554     ental Reading.Te
   dc3a0:	706d 7265 7461 7275 2865 2946 2520 2e30     mperature(F) %0.
   dc3b0:	6632 000a 7250 7365 7573 6572 2820 5068     2f..Pressure (hP
   dc3c0:	2961 2520 2e30 6632 000a 7548 696d 6964     a) %0.2f..Humidi
   dc3d0:	7974 2820 7225 2948 2020 3025 322e 0a66     ty (%rH)  %0.2f.
   dc3e0:	4400 7375 2074 654c 6576 3a6c 2520 2e30     .Dust Level: %0.
   dc3f0:	6632 0a20 4d00 696f 7473 7275 3a65 2520     2f ..Moisture: %
   dc400:	2064 000a 2578 2069 4200 7475 6f74 206e     d ..x%i .Button 
   dc410:	7453 7461 2065 7369 2520 2069 000a 6172     State is %i ..ra
   dc420:	6873 7061 6900 2e6f 6461 6661 7572 7469     shap.io.adafruit
   dc430:	632e 6d6f 3500 3839 3631 6639 3361 6162     .com.598169fa3ba
   dc440:	3439 3336 3936 3134 3361 3033 3739 6536     94636941a330976e
   dc450:	3234 3265 0063 6172 6873 7061 662f 6565     42e2c.rashap/fee
   dc460:	7364 482f 6d6f 5f65 6554 706d 7265 7461     ds/Home_Temperat
   dc470:	7275 0065 6172 6873 7061 662f 6565 7364     ure.rashap/feeds
   dc480:	482f 6d6f 5f65 6f4d 7369 7574 6572 7200     /Home_Moisture.r
   dc490:	7361 6168 2f70 6566 6465 2f73 6f48 656d     ashap/feeds/Home
   dc4a0:	575f 7461 7265 7200 7361 6168 2f70 6566     _Water.rashap/fe
   dc4b0:	6465 2f73 6f48 656d 505f 6572 7373 7275     eds/Home_Pressur
   dc4c0:	0065 6172 6873 7061 662f 6565 7364 482f     e.rashap/feeds/H
   dc4d0:	6d6f 5f65 7548 696d 6964 7974 7200 7361     ome_Humidity.ras
   dc4e0:	6168 2f70 6566 6465 2f73 6f48 656d 445f     hap/feeds/Home_D
   dc4f0:	7375 0074 6172 6873 7061 662f 6565 7364     ust.rashap/feeds
   dc500:	4c2f 4445 4f5f 006e                         /LED_On.

000dc508 <_ZTVN8particle13__SPISettingsE>:
	...
   dc510:	4bf1 000d 6564 6166 6c75 2074 4d00 4253     .K..default .MSB
   dc520:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dc530:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dc540:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dc550:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dc55c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dc564:	40cf 000d 4a7f 000d 54ff 000d 55ab 000d     .@...J...T...U..
   dc574:	55dd 000d 5513 000d 5553 000d               .U...U..SU..

000dc580 <_ZTV13Adafruit_MQTT>:
	...
   dc590:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dc5a0:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   dc5b0:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   dc5c0:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   dc5d0:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   dc5e0:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   dc5f0:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   dc600:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   dc610:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   dc620:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   dc630:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   dc640:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   dc650:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   dc660:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   dc670:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   dc680:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   dc690:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   dc6a0:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   dc6b0:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dc6c0:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dc6d0:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dc6e0:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dc6f0:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dc700:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dc710:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dc720:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dc730:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dc740:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dc750:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dc760:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dc770:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dc780:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dc790:	7465 6961 736c 002e                         etails..

000dc798 <_ZTV10JsonBuffer>:
	...
   dc7a0:	5c05 000d 5c21 000d                         .\..!\..

000dc7a8 <_ZTV10JsonWriter>:
	...
   dc7b0:	5c35 000d 5c49 000d 6c25 0075 3025 7834     5\..I\..%lu.%04x
   dc7c0:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dc7d0:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dc7e0:	2500 666c 0000 0000                         .%lf....

000dc7e8 <_ZTV16Adafruit_SSD1306>:
	...
   dc7f0:	40cd 000d 4a71 000d 68c5 000d 7561 000d     .@..qJ...h..au..
   dc800:	61c1 000d 65c5 000d 6049 000d 5ed5 000d     .a...e..I`...^..
   dc810:	6685 000d 671b 000d 6753 000d 676f 000d     .f...g..Sg..og..

000dc820 <_ZTV12Adafruit_GFX>:
	...
   dc830:	68c5 000d 7561 000d 40a9 000d 65c5 000d     .h..au...@...e..
   dc840:	66e5 000d 6701 000d 6685 000d 671b 000d     .f...g...f...g..
   dc850:	6753 000d 676f 000d                         Sg..og..

000dc858 <_ZL4font>:
   dc858:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dc868:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dc878:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dc888:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dc898:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dc8a8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dc8b8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dc8c8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dc8d8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dc8e8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dc8f8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dc908:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dc918:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dc928:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dc938:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dc948:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dc958:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dc968:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dc978:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dc988:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dc998:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dc9a8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dc9b8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dc9c8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dc9d8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dc9e8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dc9f8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dca08:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dca18:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dca28:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dca38:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dca48:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dca58:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dca68:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dca78:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dca88:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dca98:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dcaa8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dcab8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dcac8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dcad8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dcae8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dcaf8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dcb08:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dcb18:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dcb28:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dcb38:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dcb48:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dcb58:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dcb68:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dcb78:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dcb88:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dcb98:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dcba8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dcbb8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dcbc8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dcbd8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dcbe8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dcbf8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dcc08:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dcc18:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dcc28:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dcc38:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dcc48:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dcc58:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dcc68:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dcc78:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dcc88:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dcc98:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dcca8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dccb8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dccc8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dccd8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dcce8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dccf8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   dcd08:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dcd18:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dcd28:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dcd38:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dcd48:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dcd54 <_ZTVN5spark13EthernetClassE>:
	...
   dcd5c:	702f 000d 7025 000d 701b 000d 7011 000d     /p..%p...p...p..
   dcd6c:	7005 000d 6ff9 000d 6fed 000d 6fe5 000d     .p...o...o...o..
   dcd7c:	6fdb 000d 6fd1 000d 8cbd 000d               .o...o......

000dcd88 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dcd88:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dcd98:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dcda8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dcdb8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dcdc8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dcdd8:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dcde8:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dcdf8:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dce08:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dce18:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dce28:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dce38:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dce48:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dce58:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dce68:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dce78:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dce88:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dce98 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcea0:	7aed 000d 7af3 000d 7b37 000d 7b01 000d     .z...z..7{...{..
   dceb0:	7aef 000d                                   .z..

000dceb4 <_ZTV9IPAddress>:
	...
   dcebc:	8085 000d 8075 000d 8077 000d               ....u...w...

000dcec8 <_ZTV9USBSerial>:
	...
   dced0:	8189 000d 81d9 000d 81e7 000d 7561 000d     ............au..
   dcee0:	81c5 000d 818b 000d 81a1 000d 81d3 000d     ................
   dcef0:	81b7 000d 8185 000d                         ........

000dcef8 <_ZTV11USARTSerial>:
	...
   dcf00:	8295 000d 82e5 000d 82f3 000d 7561 000d     ............au..
   dcf10:	82a9 000d 82cb 000d 82b7 000d 82df 000d     ................
   dcf20:	8297 000d 829b 000d                         ........

000dcf28 <_ZTV7TwoWire>:
	...
   dcf30:	83c1 000d 840b 000d 83e3 000d 83c3 000d     ................
   dcf40:	83eb 000d 83f3 000d 83fb 000d 8403 000d     ................

000dcf50 <_ZTVN5spark9MeshClassE>:
	...
   dcf58:	852d 000d 8523 000d 8519 000d 850f 000d     -...#...........
   dcf68:	8503 000d 84f7 000d 84eb 000d 84e3 000d     ................
   dcf78:	84d9 000d 84cf 000d 8cbd 000d               ............

000dcf84 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dcf8c:	86d1 000d 86d7 000d 8bbf 000d 86e5 000d     ................
   dcf9c:	86d3 000d                                   ....

000dcfa0 <_ZTV9TCPClient>:
	...
   dcfa8:	411d 000d 413d 000d 8649 000d 8663 000d     .A..=A..I...c...
   dcfb8:	8a65 000d 87b7 000d 8789 000d 868d 000d     e...............
   dcfc8:	8941 000d 883d 000d 87eb 000d 8a35 000d     A...=.......5...
   dcfd8:	868f 000d 86c7 000d 8675 000d 86e9 000d     ........u.......
   dcfe8:	8769 000d 6977 6972 676e 7200 6365 2076     i...wiring.recv 
   dcff8:	7265 6f72 2072 203d 6425 0000               error = %d..

000dd004 <_ZTVN5spark9WiFiClassE>:
	...
   dd00c:	8c35 000d 8c2b 000d 8c21 000d 8bd7 000d     5...+...!.......
   dd01c:	8c15 000d 8c09 000d 8bfd 000d 8bf5 000d     ................
   dd02c:	8beb 000d 8be1 000d 8cbd 000d               ............

000dd038 <_ZTVN5spark12NetworkClassE>:
	...
   dd040:	8c55 000d 8c5f 000d 8c69 000d 8c73 000d     U..._...i...s...
   dd050:	8c7d 000d 8c89 000d 8c95 000d 8ca1 000d     }...............
   dd060:	8ca9 000d 8cb3 000d 8cbd 000d               ............

000dd06c <_ZSt7nothrow>:
   dd06c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dd078 <TWO52>:
   dd078:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dd088 <day_name.4725>:
   dd088:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd098:	6972 6153 4a74                                   riSat

000dd09d <mon_name.4726>:
   dd09d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd0ad:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd0bd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd0cd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd0dd:	6425 000a                                   %d..

000dd0e1 <_ctype_>:
   dd0e1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd0f1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd101:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd111:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd121:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd131:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd141:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd151:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd161:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd1e4 <__sf_fake_stdin>:
	...

000dd204 <__sf_fake_stdout>:
	...

000dd224 <__sf_fake_stderr>:
	...
   dd244:	0043 0000                                   C...

000dd248 <__month_lengths>:
   dd248:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd258:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd268:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd278:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd288:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd298:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd2a8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dd2b8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dd2c8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dd2d8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dd2e4 <link_const_variable_data_end>:
   dd2e4:	000d4a8d 	.word	0x000d4a8d
   dd2e8:	000d54fb 	.word	0x000d54fb
   dd2ec:	000d563d 	.word	0x000d563d
   dd2f0:	000d5bff 	.word	0x000d5bff
   dd2f4:	000d5ed1 	.word	0x000d5ed1
   dd2f8:	000d65c1 	.word	0x000d65c1
   dd2fc:	000d6955 	.word	0x000d6955
   dd300:	000d7039 	.word	0x000d7039
   dd304:	000d72c1 	.word	0x000d72c1
   dd308:	000d7539 	.word	0x000d7539
   dd30c:	000d7871 	.word	0x000d7871
   dd310:	000d7969 	.word	0x000d7969
   dd314:	000d79c1 	.word	0x000d79c1
   dd318:	000d85f9 	.word	0x000d85f9
   dd31c:	000d8c41 	.word	0x000d8c41
   dd320:	000d8d89 	.word	0x000d8d89
   dd324:	000d8fc5 	.word	0x000d8fc5
   dd328:	000d9049 	.word	0x000d9049
   dd32c:	000d910d 	.word	0x000d910d
   dd330:	000d91d1 	.word	0x000d91d1

000dd334 <link_constructors_end>:
	...
