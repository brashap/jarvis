
c:/Users/IoTPa/Documents/jarvis/PlantWater/target/1.5.2/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009310  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd330  000dd330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd338  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004dc  2003dc68  000dd33c  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006ac  2003e148  2003e148  0002e148  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dd818  000dd818  0002d818  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dd840  000dd840  0002d840  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00121add  00000000  00000000  0002d844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00017153  00000000  00000000  0014f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a7f1  00000000  00000000  00166474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000031a8  00000000  00000000  00190c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005c80  00000000  00000000  00193e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003ee7d  00000000  00000000  00199a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00039a8d  00000000  00000000  001d890a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00111db0  00000000  00000000  00212397  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fb74  00000000  00000000  00324148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fb71 	bl	db718 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fb91 	bl	db764 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc68 	.word	0x2003dc68
   d404c:	000dd33c 	.word	0x000dd33c
   d4050:	2003e144 	.word	0x2003e144
   d4054:	2003e148 	.word	0x2003e148
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd15 	bl	d7a8c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dd32c 	.word	0x000dd32c
   d4084:	000dd2dc 	.word	0x000dd2dc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9ce 	b.w	d4428 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbbf 	bl	d4810 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bcbb 	b.w	d7a10 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bf45 	b.w	d6f28 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bf4b 	b.w	d6f38 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bf49 	b.w	d6f38 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fe66 	bl	d6d80 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6ac1 	.word	0x000d6ac1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f001 fda8 	bl	d5c2c <_ZN10JsonWriterD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000dc138 	.word	0x000dc138

000d40e4 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f2:	f004 ff4d 	bl	d8f90 <_ZdlPvj>
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}

000d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40fa:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40fc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40fe:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4100:	689b      	ldr	r3, [r3, #8]
   d4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4104:	68a3      	ldr	r3, [r4, #8]
   d4106:	3b01      	subs	r3, #1
   d4108:	60a3      	str	r3, [r4, #8]
   d410a:	b92b      	cbnz	r3, d4118 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13+0x1e>
            _M_destroy();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4116:	4718      	bx	r3
   d4118:	bd10      	pop	{r4, pc}
	...

000d411c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d411c:	b510      	push	{r4, lr}
   d411e:	4b06      	ldr	r3, [pc, #24]	; (d4138 <_ZN9TCPClientD1Ev+0x1c>)
   d4120:	6003      	str	r3, [r0, #0]
   d4122:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4124:	6980      	ldr	r0, [r0, #24]
   d4126:	b128      	cbz	r0, d4134 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4128:	6843      	ldr	r3, [r0, #4]
   d412a:	3b01      	subs	r3, #1
   d412c:	6043      	str	r3, [r0, #4]
   d412e:	b90b      	cbnz	r3, d4134 <_ZN9TCPClientD1Ev+0x18>
   d4130:	f7ff ffe3 	bl	d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>
   d4134:	4620      	mov	r0, r4
   d4136:	bd10      	pop	{r4, pc}
   d4138:	000dcfa0 	.word	0x000dcfa0

000d413c <_ZN9TCPClientD0Ev>:
   d413c:	b510      	push	{r4, lr}
   d413e:	4604      	mov	r4, r0
   d4140:	f7ff ffec 	bl	d411c <_ZN9TCPClientD1Ev>
   d4144:	4620      	mov	r0, r4
   d4146:	211c      	movs	r1, #28
   d4148:	f004 ff22 	bl	d8f90 <_ZdlPvj>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_Z10waterPlantii>:
    }
  }    
}

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
   d4150:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(moistVal > threshold) {
   d4152:	4c16      	ldr	r4, [pc, #88]	; (d41ac <_Z10waterPlantii+0x5c>)
   d4154:	4d16      	ldr	r5, [pc, #88]	; (d41b0 <_Z10waterPlantii+0x60>)
   d4156:	6823      	ldr	r3, [r4, #0]
   d4158:	4283      	cmp	r3, r0
    }
  }    
}

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
   d415a:	460e      	mov	r6, r1
  if(moistVal > threshold) {
   d415c:	da1a      	bge.n	d4194 <_Z10waterPlantii+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d415e:	f004 f86f 	bl	d8240 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4162:	6823      	ldr	r3, [r4, #0]
   d4164:	4a13      	ldr	r2, [pc, #76]	; (d41b4 <_Z10waterPlantii+0x64>)
   d4166:	9300      	str	r3, [sp, #0]
   d4168:	2101      	movs	r1, #1
   d416a:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d416c:	4c12      	ldr	r4, [pc, #72]	; (d41b8 <_Z10waterPlantii+0x68>)
   d416e:	f003 fb40 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>

// Check moistVal and water plan for timeWater (ms) if necessary
int waterPlant(int moistVal, int timeWater) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d4172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4176:	f003 fbfd 	bl	d7974 <delay>
    digitalWrite(pumpPin,HIGH);
   d417a:	2101      	movs	r1, #1
   d417c:	8820      	ldrh	r0, [r4, #0]
   d417e:	f004 fe50 	bl	d8e22 <digitalWrite>
    delay(timeWater);
   d4182:	4630      	mov	r0, r6
   d4184:	f003 fbf6 	bl	d7974 <delay>
    digitalWrite(pumpPin,LOW);
   d4188:	8820      	ldrh	r0, [r4, #0]
   d418a:	2100      	movs	r1, #0
   d418c:	f004 fe49 	bl	d8e22 <digitalWrite>
   d4190:	2001      	movs	r0, #1
   d4192:	e009      	b.n	d41a8 <_Z10waterPlantii+0x58>
    return 1;
  }
  else
  {
    Serial.printlnf("\n \n The %i < %i no water needed", moist, threshold);
   d4194:	f004 f854 	bl	d8240 <_Z16_fetch_usbserialv>
   d4198:	6823      	ldr	r3, [r4, #0]
   d419a:	9300      	str	r3, [sp, #0]
   d419c:	4a07      	ldr	r2, [pc, #28]	; (d41bc <_Z10waterPlantii+0x6c>)
   d419e:	682b      	ldr	r3, [r5, #0]
   d41a0:	2101      	movs	r1, #1
   d41a2:	f003 fb26 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
    return 0;
   d41a6:	2000      	movs	r0, #0
  }
    
}
   d41a8:	b002      	add	sp, #8
   d41aa:	bd70      	pop	{r4, r5, r6, pc}
   d41ac:	2003dc68 	.word	0x2003dc68
   d41b0:	2003e370 	.word	0x2003e370
   d41b4:	000dc140 	.word	0x000dc140
   d41b8:	2003dc74 	.word	0x2003dc74
   d41bc:	000dc15d 	.word	0x000dc15d

000d41c0 <_Z10printMoisti>:


void printMoist(int moistVal) {
   d41c0:	b570      	push	{r4, r5, r6, lr}
   d41c2:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d41c4:	f003 fbc5 	bl	d7952 <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d41c8:	4c1f      	ldr	r4, [pc, #124]	; (d4248 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41ca:	4e20      	ldr	r6, [pc, #128]	; (d424c <_Z10printMoisti+0x8c>)
   d41cc:	4d20      	ldr	r5, [pc, #128]	; (d4250 <_Z10printMoisti+0x90>)
   d41ce:	4601      	mov	r1, r0
   d41d0:	a802      	add	r0, sp, #8
   d41d2:	f003 fb7b 	bl	d78cc <_ZN9TimeClass7timeStrEl>
   d41d6:	a902      	add	r1, sp, #8
   d41d8:	4620      	mov	r0, r4
   d41da:	f003 f93d 	bl	d7458 <_ZN6StringaSEOS_>
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f003 f8c3 	bl	d736a <_ZN6StringD1Ev>
   d41e4:	4631      	mov	r1, r6
   d41e6:	4620      	mov	r0, r4
   d41e8:	2300      	movs	r3, #0
   d41ea:	2219      	movs	r2, #25
   d41ec:	f003 f93c 	bl	d7468 <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d41f0:	4621      	mov	r1, r4
   d41f2:	4c18      	ldr	r4, [pc, #96]	; (d4254 <_Z10printMoisti+0x94>)
   d41f4:	2313      	movs	r3, #19
   d41f6:	220b      	movs	r2, #11
   d41f8:	a802      	add	r0, sp, #8
   d41fa:	f003 f94d 	bl	d7498 <_ZNK6String9substringEjj>
   d41fe:	a902      	add	r1, sp, #8
   d4200:	4620      	mov	r0, r4
   d4202:	f003 f929 	bl	d7458 <_ZN6StringaSEOS_>
   d4206:	a802      	add	r0, sp, #8
   d4208:	f003 f8af 	bl	d736a <_ZN6StringD1Ev>
   d420c:	2300      	movs	r3, #0
   d420e:	2209      	movs	r2, #9
   d4210:	4629      	mov	r1, r5
   d4212:	4620      	mov	r0, r4
   d4214:	f003 f928 	bl	d7468 <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d4218:	f004 f812 	bl	d8240 <_Z16_fetch_usbserialv>
   d421c:	6821      	ldr	r1, [r4, #0]
   d421e:	f003 f9d4 	bl	d75ca <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d4222:	f004 f80d 	bl	d8240 <_Z16_fetch_usbserialv>
   d4226:	4b0c      	ldr	r3, [pc, #48]	; (d4258 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4228:	4a0c      	ldr	r2, [pc, #48]	; (d425c <_Z10printMoisti+0x9c>)
   d422a:	681b      	ldr	r3, [r3, #0]
   d422c:	9300      	str	r3, [sp, #0]
   d422e:	2100      	movs	r1, #0
   d4230:	4633      	mov	r3, r6
   d4232:	f003 fade 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d4236:	f004 f803 	bl	d8240 <_Z16_fetch_usbserialv>
   d423a:	462b      	mov	r3, r5
   d423c:	4a08      	ldr	r2, [pc, #32]	; (d4260 <_Z10printMoisti+0xa0>)
   d423e:	2100      	movs	r1, #0
   d4240:	f003 fad7 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
}
   d4244:	b006      	add	sp, #24
   d4246:	bd70      	pop	{r4, r5, r6, pc}
   d4248:	2003e318 	.word	0x2003e318
   d424c:	2003e388 	.word	0x2003e388
   d4250:	2003e14c 	.word	0x2003e14c
   d4254:	2003e198 	.word	0x2003e198
   d4258:	2003e370 	.word	0x2003e370
   d425c:	000dc17d 	.word	0x000dc17d
   d4260:	000dc1a0 	.word	0x000dc1a0
   d4264:	00000000 	.word	0x00000000

000d4268 <_Z7getDustv>:
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d4268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d426c:	2100      	movs	r1, #0
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d426e:	ed2d 8b02 	vpush	{d8}
  unsigned long sampletime_ms = 30000;//sampe 30s ;
  unsigned long lowpulseoccupancy = 0;
  float ratio = 0;
  float concentration = -1;

  pinMode(pinDust,INPUT);
   d4272:	2008      	movs	r0, #8
   d4274:	f004 fdc4 	bl	d8e00 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4278:	f002 fc2a 	bl	d6ad0 <HAL_Timer_Get_Milli_Seconds>
   d427c:	4605      	mov	r5, r0
  Serial.printf("Humidity Value = %0.2f \n",hum);
  Serial.printf("Soil Moisture Value = %d \n",moist);
  Serial.printf("Dust Value = %0.2f \n",dust);
}

float getDust() {
   d427e:	2400      	movs	r4, #0

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4280:	f247 5630 	movw	r6, #30000	; 0x7530

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
    duration = pulseIn(pinDust, LOW);
   d4284:	2100      	movs	r1, #0
   d4286:	2008      	movs	r0, #8
   d4288:	f004 fe31 	bl	d8eee <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   d428c:	4404      	add	r4, r0
   d428e:	f002 fc1f 	bl	d6ad0 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4292:	1b40      	subs	r0, r0, r5
   d4294:	42b0      	cmp	r0, r6
   d4296:	d9f5      	bls.n	d4284 <_Z7getDustv+0x1c>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4298:	4620      	mov	r0, r4
   d429a:	f006 fa53 	bl	da744 <__aeabi_ui2d>
   d429e:	a340      	add	r3, pc, #256	; (adr r3, d43a0 <_Z7getDustv+0x138>)
   d42a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a4:	f006 fbee 	bl	daa84 <__aeabi_ddiv>
   d42a8:	f006 fdba 	bl	dae20 <__aeabi_d2f>
   d42ac:	ee08 0a90 	vmov	s17, r0
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d42b0:	f006 fa6a 	bl	da788 <__aeabi_f2d>
   d42b4:	4606      	mov	r6, r0
   d42b6:	460f      	mov	r7, r1
   d42b8:	ed9f 1b33 	vldr	d1, [pc, #204]	; d4388 <_Z7getDustv+0x120>
   d42bc:	ec47 6b10 	vmov	d0, r6, r7
   d42c0:	f004 ffc6 	bl	d9250 <pow>
   d42c4:	a338      	add	r3, pc, #224	; (adr r3, d43a8 <_Z7getDustv+0x140>)
   d42c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ca:	ec51 0b10 	vmov	r0, r1, d0
   d42ce:	f006 faaf 	bl	da830 <__aeabi_dmul>
   d42d2:	4632      	mov	r2, r6
   d42d4:	463b      	mov	r3, r7
   d42d6:	4680      	mov	r8, r0
   d42d8:	4689      	mov	r9, r1
   d42da:	4630      	mov	r0, r6
   d42dc:	4639      	mov	r1, r7
   d42de:	f006 faa7 	bl	da830 <__aeabi_dmul>
   d42e2:	a333      	add	r3, pc, #204	; (adr r3, d43b0 <_Z7getDustv+0x148>)
   d42e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e8:	f006 faa2 	bl	da830 <__aeabi_dmul>
   d42ec:	4602      	mov	r2, r0
   d42ee:	460b      	mov	r3, r1
   d42f0:	4640      	mov	r0, r8
   d42f2:	4649      	mov	r1, r9
   d42f4:	f006 f8e8 	bl	da4c8 <__aeabi_dsub>
   d42f8:	eddf 7a27 	vldr	s15, [pc, #156]	; d4398 <_Z7getDustv+0x130>
   d42fc:	ee68 7aa7 	vmul.f32	s15, s17, s15
   d4300:	4606      	mov	r6, r0
   d4302:	ee17 0a90 	vmov	r0, s15
   d4306:	460f      	mov	r7, r1
   d4308:	f006 fa3e 	bl	da788 <__aeabi_f2d>
   d430c:	4602      	mov	r2, r0
   d430e:	460b      	mov	r3, r1
   d4310:	4630      	mov	r0, r6
   d4312:	4639      	mov	r1, r7
   d4314:	f006 f8da 	bl	da4cc <__adddf3>
   d4318:	a31d      	add	r3, pc, #116	; (adr r3, d4390 <_Z7getDustv+0x128>)
   d431a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d431e:	f006 f8d5 	bl	da4cc <__adddf3>
   d4322:	f006 fd7d 	bl	dae20 <__aeabi_d2f>
   d4326:	ee08 0a10 	vmov	s16, r0
        Serial.print(lowpulseoccupancy);
   d432a:	f003 ff89 	bl	d8240 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d432e:	220a      	movs	r2, #10
   d4330:	4621      	mov	r1, r4
   d4332:	f003 f956 	bl	d75e2 <_ZN5Print11printNumberEmh>
        Serial.print(",");
   d4336:	f003 ff83 	bl	d8240 <_Z16_fetch_usbserialv>
   d433a:	4918      	ldr	r1, [pc, #96]	; (d439c <_Z7getDustv+0x134>)
   d433c:	f003 f932 	bl	d75a4 <_ZN5Print5printEPKc>
        Serial.print(ratio);
   d4340:	f003 ff7e 	bl	d8240 <_Z16_fetch_usbserialv>
   d4344:	eeb0 0a68 	vmov.f32	s0, s17
   d4348:	2102      	movs	r1, #2
   d434a:	f003 fa29 	bl	d77a0 <_ZN5Print5printEfi>
        Serial.print(",");
   d434e:	f003 ff77 	bl	d8240 <_Z16_fetch_usbserialv>
   d4352:	4912      	ldr	r1, [pc, #72]	; (d439c <_Z7getDustv+0x134>)
   d4354:	f003 f926 	bl	d75a4 <_ZN5Print5printEPKc>
        Serial.println(concentration);
   d4358:	f003 ff72 	bl	d8240 <_Z16_fetch_usbserialv>
   d435c:	2102      	movs	r1, #2
   d435e:	eeb0 0a48 	vmov.f32	s0, s16
   d4362:	f003 fa37 	bl	d77d4 <_ZN5Print7printlnEfi>
   d4366:	f002 fbb3 	bl	d6ad0 <HAL_Timer_Get_Milli_Seconds>
  float concentration = -1;

  pinMode(pinDust,INPUT);
  starttime = millis();//get the current time;

  while(concentration == -1) {
   d436a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d436e:	eeb4 8a67 	vcmp.f32	s16, s15
   d4372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4376:	4605      	mov	r5, r0
   d4378:	d081      	beq.n	d427e <_Z7getDustv+0x16>
        lowpulseoccupancy = 0;
        starttime = millis();
    }
  }
return concentration;
}
   d437a:	eeb0 0a48 	vmov.f32	s0, s16
   d437e:	ecbd 8b02 	vpop	{d8}
   d4382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4386:	bf00      	nop
   d4388:	00000000 	.word	0x00000000
   d438c:	40080000 	.word	0x40080000
   d4390:	3d70a3d7 	.word	0x3d70a3d7
   d4394:	3fe3d70a 	.word	0x3fe3d70a
   d4398:	44020000 	.word	0x44020000
   d439c:	000dc1b1 	.word	0x000dc1b1
   d43a0:	00000000 	.word	0x00000000
   d43a4:	41124f80 	.word	0x41124f80
   d43a8:	9999999a 	.word	0x9999999a
   d43ac:	3ff19999 	.word	0x3ff19999
   d43b0:	66666666 	.word	0x66666666
   d43b4:	400e6666 	.word	0x400e6666

000d43b8 <_Z10printhellov>:
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
}

void printhello() {
   d43b8:	b510      	push	{r4, lr}
  display.clearDisplay();
   d43ba:	4c19      	ldr	r4, [pc, #100]	; (d4420 <_Z10printhellov+0x68>)
   d43bc:	4620      	mov	r0, r4
   d43be:	f001 ff5b 	bl	d6278 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d43c2:	2200      	movs	r2, #0
   d43c4:	4611      	mov	r1, r2
   d43c6:	4620      	mov	r0, r4
   d43c8:	2301      	movs	r3, #1
   d43ca:	f001 fef5 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d43ce:	4620      	mov	r0, r4
   d43d0:	2301      	movs	r3, #1
   d43d2:	2200      	movs	r2, #0
   d43d4:	217f      	movs	r1, #127	; 0x7f
   d43d6:	f001 feef 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d43da:	4620      	mov	r0, r4
   d43dc:	2301      	movs	r3, #1
   d43de:	223f      	movs	r2, #63	; 0x3f
   d43e0:	2100      	movs	r1, #0
   d43e2:	f001 fee9 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d43e6:	2301      	movs	r3, #1
   d43e8:	223f      	movs	r2, #63	; 0x3f
   d43ea:	4620      	mov	r0, r4
   d43ec:	217f      	movs	r1, #127	; 0x7f
   d43ee:	f001 fee3 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  // display a line of text
  display.setTextSize(1);
   d43f2:	4620      	mov	r0, r4
   d43f4:	2101      	movs	r1, #1
   d43f6:	f002 fa99 	bl	d692c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d43fa:	4620      	mov	r0, r4
   d43fc:	2101      	movs	r1, #1
   d43fe:	f002 fa9a 	bl	d6936 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d4402:	4620      	mov	r0, r4
   d4404:	221e      	movs	r2, #30
   d4406:	211b      	movs	r1, #27
   d4408:	f002 fa8d 	bl	d6926 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d440c:	4620      	mov	r0, r4
   d440e:	4905      	ldr	r1, [pc, #20]	; (d4424 <_Z10printhellov+0x6c>)
   d4410:	f003 f8c8 	bl	d75a4 <_ZN5Print5printEPKc>
  display.display();
   d4414:	4620      	mov	r0, r4
   d4416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d441a:	f002 b84f 	b.w	d64bc <_ZN16Adafruit_SSD13067displayEv>
   d441e:	bf00      	nop
   d4420:	2003e2c8 	.word	0x2003e2c8
   d4424:	000dc1b3 	.word	0x000dc1b3

000d4428 <setup>:
int button;
int i;

int delayStart;

void setup() {
   d4428:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d442a:	f003 ff09 	bl	d8240 <_Z16_fetch_usbserialv>
   d442e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4432:	f003 fef9 	bl	d8228 <_ZN9USBSerial5beginEl>

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4436:	223c      	movs	r2, #60	; 0x3c
   d4438:	2102      	movs	r1, #2
   d443a:	4832      	ldr	r0, [pc, #200]	; (d4504 <setup+0xdc>)
  display.clearDisplay();
  display.display();
  printhello();
  
  pinMode(soilPin,INPUT);
  pinMode(pumpPin,OUTPUT);
   d443c:	4c32      	ldr	r4, [pc, #200]	; (d4508 <setup+0xe0>)

void setup() {
  Serial.begin(9600);

  // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d443e:	f001 ff6b 	bl	d6318 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d4442:	4830      	ldr	r0, [pc, #192]	; (d4504 <setup+0xdc>)
   d4444:	f001 ff18 	bl	d6278 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4448:	482e      	ldr	r0, [pc, #184]	; (d4504 <setup+0xdc>)
   d444a:	f002 f837 	bl	d64bc <_ZN16Adafruit_SSD13067displayEv>
  printhello();
   d444e:	f7ff ffb3 	bl	d43b8 <_Z10printhellov>
  
  pinMode(soilPin,INPUT);
   d4452:	4b2e      	ldr	r3, [pc, #184]	; (d450c <setup+0xe4>)
   d4454:	2100      	movs	r1, #0
   d4456:	8818      	ldrh	r0, [r3, #0]
   d4458:	f004 fcd2 	bl	d8e00 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d445c:	2101      	movs	r1, #1
   d445e:	8820      	ldrh	r0, [r4, #0]
   d4460:	f004 fcce 	bl	d8e00 <pinMode>
  pinMode(D7,OUTPUT);
   d4464:	2101      	movs	r1, #1
   d4466:	2007      	movs	r0, #7
   d4468:	f004 fcca 	bl	d8e00 <pinMode>
  digitalWrite(pumpPin,LOW);
   d446c:	2100      	movs	r1, #0
   d446e:	8820      	ldrh	r0, [r4, #0]
   d4470:	f004 fcd7 	bl	d8e22 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d4474:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4478:	f003 fa0c 	bl	d7894 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d447c:	f002 fd2c 	bl	d6ed8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4480:	b110      	cbz	r0, d4488 <setup+0x60>
            return false;
        }
        return spark_sync_time(NULL);
   d4482:	2000      	movs	r0, #0
   d4484:	f002 fd38 	bl	d6ef8 <spark_sync_time>
  Particle.syncTime(); 

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4488:	4921      	ldr	r1, [pc, #132]	; (d4510 <setup+0xe8>)
   d448a:	4822      	ldr	r0, [pc, #136]	; (d4514 <setup+0xec>)
   d448c:	f001 f980 	bl	d5790 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

  // Initialize BME280
  Serial.println(F("BME280 test"));
   d4490:	f003 fed6 	bl	d8240 <_Z16_fetch_usbserialv>
   d4494:	4920      	ldr	r1, [pc, #128]	; (d4518 <setup+0xf0>)
   d4496:	f003 f8a2 	bl	d75de <_ZN5Print7printlnEPK19__FlashStringHelper>
  status = bme.begin(0x76);
   d449a:	2176      	movs	r1, #118	; 0x76
   d449c:	481f      	ldr	r0, [pc, #124]	; (d451c <setup+0xf4>)
   d449e:	f001 f81d 	bl	d54dc <_ZN15Adafruit_BME2805beginEh>
   d44a2:	4b1f      	ldr	r3, [pc, #124]	; (d4520 <setup+0xf8>)
   d44a4:	6018      	str	r0, [r3, #0]
  if (!status)
   d44a6:	bb60      	cbnz	r0, d4502 <setup+0xda>
  {
    Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d44a8:	f003 feca 	bl	d8240 <_Z16_fetch_usbserialv>
   d44ac:	491d      	ldr	r1, [pc, #116]	; (d4524 <setup+0xfc>)
   d44ae:	f003 f88c 	bl	d75ca <_ZN5Print7printlnEPKc>
    Serial.print("SensorID was: 0x");
   d44b2:	f003 fec5 	bl	d8240 <_Z16_fetch_usbserialv>
   d44b6:	491c      	ldr	r1, [pc, #112]	; (d4528 <setup+0x100>)
   d44b8:	f003 f874 	bl	d75a4 <_ZN5Print5printEPKc>
    Serial.println(bme.sensorID(), 16);
   d44bc:	f003 fec0 	bl	d8240 <_Z16_fetch_usbserialv>
   d44c0:	4604      	mov	r4, r0
   d44c2:	4816      	ldr	r0, [pc, #88]	; (d451c <setup+0xf4>)
   d44c4:	f000 fbc2 	bl	d4c4c <_ZN15Adafruit_BME2808sensorIDEv>
   d44c8:	2210      	movs	r2, #16
   d44ca:	4601      	mov	r1, r0
   d44cc:	4620      	mov	r0, r4
   d44ce:	f003 f888 	bl	d75e2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d44d2:	4620      	mov	r0, r4
   d44d4:	f003 f86d 	bl	d75b2 <_ZN5Print7printlnEv>
    Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d44d8:	f003 feb2 	bl	d8240 <_Z16_fetch_usbserialv>
   d44dc:	4913      	ldr	r1, [pc, #76]	; (d452c <setup+0x104>)
   d44de:	f003 f861 	bl	d75a4 <_ZN5Print5printEPKc>
    Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d44e2:	f003 fead 	bl	d8240 <_Z16_fetch_usbserialv>
   d44e6:	4912      	ldr	r1, [pc, #72]	; (d4530 <setup+0x108>)
   d44e8:	f003 f85c 	bl	d75a4 <_ZN5Print5printEPKc>
    Serial.print("        ID of 0x60 represents a BME 280.\n");
   d44ec:	f003 fea8 	bl	d8240 <_Z16_fetch_usbserialv>
   d44f0:	4910      	ldr	r1, [pc, #64]	; (d4534 <setup+0x10c>)
   d44f2:	f003 f857 	bl	d75a4 <_ZN5Print5printEPKc>
    Serial.print("        ID of 0x61 represents a BME 680.\n");
   d44f6:	f003 fea3 	bl	d8240 <_Z16_fetch_usbserialv>
   d44fa:	490f      	ldr	r1, [pc, #60]	; (d4538 <setup+0x110>)
   d44fc:	f003 f852 	bl	d75a4 <_ZN5Print5printEPKc>
   d4500:	e7fe      	b.n	d4500 <setup+0xd8>
   d4502:	bd10      	pop	{r4, pc}
   d4504:	2003e2c8 	.word	0x2003e2c8
   d4508:	2003dc74 	.word	0x2003dc74
   d450c:	2003dc6c 	.word	0x2003dc6c
   d4510:	2003e290 	.word	0x2003e290
   d4514:	2003e1a8 	.word	0x2003e1a8
   d4518:	000dc1c1 	.word	0x000dc1c1
   d451c:	2003e32c 	.word	0x2003e32c
   d4520:	2003e2f0 	.word	0x2003e2f0
   d4524:	000dc1cd 	.word	0x000dc1cd
   d4528:	000dc215 	.word	0x000dc215
   d452c:	000dc226 	.word	0x000dc226
   d4530:	000dc26d 	.word	0x000dc26d
   d4534:	000dc297 	.word	0x000dc297
   d4538:	000dc2c1 	.word	0x000dc2c1

000d453c <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d453c:	4613      	mov	r3, r2
   d453e:	460a      	mov	r2, r1
   d4540:	2100      	movs	r1, #0
   d4542:	f003 b956 	b.w	d77f2 <_ZN5Print11printf_implEbPKcz>
	...

000d4548 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4548:	b570      	push	{r4, r5, r6, lr}
   d454a:	4604      	mov	r4, r0
   d454c:	460e      	mov	r6, r1
   d454e:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4550:	f001 fc74 	bl	d5e3c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4554:	2201      	movs	r2, #1
   d4556:	4631      	mov	r1, r6
   d4558:	4620      	mov	r0, r4
   d455a:	f001 fbe3 	bl	d5d24 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d455e:	4620      	mov	r0, r4
   d4560:	213a      	movs	r1, #58	; 0x3a
   d4562:	f001 fb93 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4566:	462a      	mov	r2, r5
   d4568:	4620      	mov	r0, r4
   d456a:	4902      	ldr	r1, [pc, #8]	; (d4574 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d456c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4570:	f001 bbcb 	b.w	d5d0a <_ZN10JsonWriter13insertsprintfEPKcz>
   d4574:	000dcff8 	.word	0x000dcff8

000d4578 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4578:	b538      	push	{r3, r4, r5, lr}
   d457a:	4604      	mov	r4, r0
   d457c:	ed2d 8b02 	vpush	{d8}
   d4580:	460d      	mov	r5, r1
   d4582:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4586:	f001 fc59 	bl	d5e3c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d458a:	4629      	mov	r1, r5
   d458c:	4620      	mov	r0, r4
   d458e:	2201      	movs	r2, #1
   d4590:	f001 fbc8 	bl	d5d24 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4594:	4620      	mov	r0, r4
   d4596:	213a      	movs	r1, #58	; 0x3a
   d4598:	f001 fb78 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d459c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d45a0:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d45a4:	4620      	mov	r0, r4
	}
   d45a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d45aa:	f001 bc6b 	b.w	d5e84 <_ZN10JsonWriter11insertValueEf>
	...

000d45b0 <_Z18createEventPayLoadifffi>:
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
   d45b0:	b530      	push	{r4, r5, lr}
   d45b2:	ed2d 8b04 	vpush	{d8-d9}
   d45b6:	b0d3      	sub	sp, #332	; 0x14c
   d45b8:	4605      	mov	r5, r0
   d45ba:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d45bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   d45c0:	a912      	add	r1, sp, #72	; 0x48
   d45c2:	a806      	add	r0, sp, #24
   d45c4:	eef0 8a60 	vmov.f32	s17, s1
   d45c8:	eeb0 8a41 	vmov.f32	s16, s2
   d45cc:	eeb0 9a40 	vmov.f32	s18, s0
   d45d0:	f001 fb4a 	bl	d5c68 <_ZN10JsonWriterC1EPcj>
   d45d4:	4b20      	ldr	r3, [pc, #128]	; (d4658 <_Z18createEventPayLoadifffi+0xa8>)
   d45d6:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d45d8:	227d      	movs	r2, #125	; 0x7d
   d45da:	217b      	movs	r1, #123	; 0x7b
   d45dc:	a806      	add	r0, sp, #24
   d45de:	f001 fc38 	bl	d5e52 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d45e2:	462a      	mov	r2, r5
   d45e4:	491d      	ldr	r1, [pc, #116]	; (d465c <_Z18createEventPayLoadifffi+0xac>)
   d45e6:	a806      	add	r0, sp, #24
   d45e8:	f7ff ffae 	bl	d4548 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d45ec:	eeb0 0a49 	vmov.f32	s0, s18
   d45f0:	491b      	ldr	r1, [pc, #108]	; (d4660 <_Z18createEventPayLoadifffi+0xb0>)
   d45f2:	a806      	add	r0, sp, #24
   d45f4:	f7ff ffc0 	bl	d4578 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Pressure", presValue);
   d45f8:	eeb0 0a68 	vmov.f32	s0, s17
   d45fc:	4919      	ldr	r1, [pc, #100]	; (d4664 <_Z18createEventPayLoadifffi+0xb4>)
   d45fe:	a806      	add	r0, sp, #24
   d4600:	f7ff ffba 	bl	d4578 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Humidity", humValue);
   d4604:	eeb0 0a48 	vmov.f32	s0, s16
   d4608:	4917      	ldr	r1, [pc, #92]	; (d4668 <_Z18createEventPayLoadifffi+0xb8>)
   d460a:	a806      	add	r0, sp, #24
   d460c:	f7ff ffb4 	bl	d4578 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("Plant Watered", waterED);
   d4610:	4622      	mov	r2, r4
   d4612:	4916      	ldr	r1, [pc, #88]	; (d466c <_Z18createEventPayLoadifffi+0xbc>)
   d4614:	a806      	add	r0, sp, #24
   d4616:	f7ff ff97 	bl	d4548 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d461a:	a806      	add	r0, sp, #24
   d461c:	f001 fb44 	bl	d5ca8 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4620:	9b07      	ldr	r3, [sp, #28]
   d4622:	9303      	str	r3, [sp, #12]
   d4624:	4b12      	ldr	r3, [pc, #72]	; (d4670 <_Z18createEventPayLoadifffi+0xc0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4626:	9a03      	ldr	r2, [sp, #12]
   d4628:	781b      	ldrb	r3, [r3, #0]
   d462a:	f88d 3000 	strb.w	r3, [sp]
   d462e:	a804      	add	r0, sp, #16
   d4630:	233c      	movs	r3, #60	; 0x3c
   d4632:	4910      	ldr	r1, [pc, #64]	; (d4674 <_Z18createEventPayLoadifffi+0xc4>)
   d4634:	f003 fb98 	bl	d7d68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4638:	9805      	ldr	r0, [sp, #20]
   d463a:	b128      	cbz	r0, d4648 <_Z18createEventPayLoadifffi+0x98>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d463c:	6843      	ldr	r3, [r0, #4]
   d463e:	3b01      	subs	r3, #1
   d4640:	6043      	str	r3, [r0, #4]
   d4642:	b90b      	cbnz	r3, d4648 <_Z18createEventPayLoadifffi+0x98>
   d4644:	f7ff fd59 	bl	d40fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.13>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, float tempValue, float presValue, float humValue, int waterED) {
  JsonWriterStatic<256> jw;
   d4648:	a806      	add	r0, sp, #24
   d464a:	f7ff fd41 	bl	d40d0 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Pressure", presValue);
    jw.insertKeyValue("Humidity", humValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
}
   d464e:	b053      	add	sp, #332	; 0x14c
   d4650:	ecbd 8b04 	vpop	{d8-d9}
   d4654:	bd30      	pop	{r4, r5, pc}
   d4656:	bf00      	nop
   d4658:	000dc138 	.word	0x000dc138
   d465c:	000dc47e 	.word	0x000dc47e
   d4660:	000dc460 	.word	0x000dc460
   d4664:	000dc4b1 	.word	0x000dc4b1
   d4668:	000dc4cc 	.word	0x000dc4cc
   d466c:	000dc2eb 	.word	0x000dc2eb
   d4670:	2003e2ec 	.word	0x2003e2ec
   d4674:	000dc2f9 	.word	0x000dc2f9

000d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4678:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d467a:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d467c:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4680:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d4682:	f006 f881 	bl	da788 <__aeabi_f2d>
   d4686:	462a      	mov	r2, r5
   d4688:	e9cd 0100 	strd	r0, r1, [sp]
   d468c:	2100      	movs	r1, #0
   d468e:	4620      	mov	r0, r4
   d4690:	f003 f8af 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
    }
   d4694:	b003      	add	sp, #12
   d4696:	bd30      	pop	{r4, r5, pc}

000d4698 <_Z11printValuesv>:

void printValues()
{
   d4698:	b507      	push	{r0, r1, r2, lr}
  Serial.printf("Temperature Value = %0.2f \n",temp);
   d469a:	f003 fdd1 	bl	d8240 <_Z16_fetch_usbserialv>
   d469e:	4b18      	ldr	r3, [pc, #96]	; (d4700 <_Z11printValuesv+0x68>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d46a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46a4:	2100      	movs	r1, #0
   d46a6:	e9cd 2300 	strd	r2, r3, [sp]
   d46aa:	4a16      	ldr	r2, [pc, #88]	; (d4704 <_Z11printValuesv+0x6c>)
   d46ac:	f003 f8a1 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Pressure Value = %0.2f \n",pres);
   d46b0:	f003 fdc6 	bl	d8240 <_Z16_fetch_usbserialv>
   d46b4:	4b14      	ldr	r3, [pc, #80]	; (d4708 <_Z11printValuesv+0x70>)
   d46b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ba:	2100      	movs	r1, #0
   d46bc:	e9cd 2300 	strd	r2, r3, [sp]
   d46c0:	4a12      	ldr	r2, [pc, #72]	; (d470c <_Z11printValuesv+0x74>)
   d46c2:	f003 f896 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Humidity Value = %0.2f \n",hum);
   d46c6:	f003 fdbb 	bl	d8240 <_Z16_fetch_usbserialv>
   d46ca:	4b11      	ldr	r3, [pc, #68]	; (d4710 <_Z11printValuesv+0x78>)
   d46cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d0:	2100      	movs	r1, #0
   d46d2:	e9cd 2300 	strd	r2, r3, [sp]
   d46d6:	4a0f      	ldr	r2, [pc, #60]	; (d4714 <_Z11printValuesv+0x7c>)
   d46d8:	f003 f88b 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Soil Moisture Value = %d \n",moist);
   d46dc:	f003 fdb0 	bl	d8240 <_Z16_fetch_usbserialv>
   d46e0:	4b0d      	ldr	r3, [pc, #52]	; (d4718 <_Z11printValuesv+0x80>)
   d46e2:	490e      	ldr	r1, [pc, #56]	; (d471c <_Z11printValuesv+0x84>)
   d46e4:	681a      	ldr	r2, [r3, #0]
   d46e6:	f7ff ff29 	bl	d453c <_ZN5Print6printfIIiEEEjPKcDpT_>
  Serial.printf("Dust Value = %0.2f \n",dust);
   d46ea:	f003 fda9 	bl	d8240 <_Z16_fetch_usbserialv>
   d46ee:	4b0c      	ldr	r3, [pc, #48]	; (d4720 <_Z11printValuesv+0x88>)
   d46f0:	490c      	ldr	r1, [pc, #48]	; (d4724 <_Z11printValuesv+0x8c>)
   d46f2:	ed93 0a00 	vldr	s0, [r3]
   d46f6:	f7ff ffbf 	bl	d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>
}
   d46fa:	b003      	add	sp, #12
   d46fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4700:	2003e190 	.word	0x2003e190
   d4704:	000dc302 	.word	0x000dc302
   d4708:	2003e380 	.word	0x2003e380
   d470c:	000dc31e 	.word	0x000dc31e
   d4710:	2003e288 	.word	0x2003e288
   d4714:	000dc337 	.word	0x000dc337
   d4718:	2003e370 	.word	0x2003e370
   d471c:	000dc350 	.word	0x000dc350
   d4720:	2003e304 	.word	0x2003e304
   d4724:	000dc36b 	.word	0x000dc36b

000d4728 <_Z9oledprintffffi>:
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4728:	b538      	push	{r3, r4, r5, lr}

   // initialize and clear display
  display.clearDisplay();
   d472a:	4c32      	ldr	r4, [pc, #200]	; (d47f4 <_Z9oledprintffffi+0xcc>)
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d472c:	ed2d 8b04 	vpush	{d8-d9}
   d4730:	4605      	mov	r5, r0

   // initialize and clear display
  display.clearDisplay();
   d4732:	4620      	mov	r0, r4
    }
  }
return concentration;
}

void oledprint(float Otemp, float Opres, float Ohum, float Odust, int Omoist) {
   d4734:	eeb0 9a60 	vmov.f32	s18, s1
   d4738:	eef0 8a41 	vmov.f32	s17, s2
   d473c:	eeb0 8a61 	vmov.f32	s16, s3
   d4740:	eef0 9a40 	vmov.f32	s19, s0

   // initialize and clear display
  display.clearDisplay();
   d4744:	f001 fd98 	bl	d6278 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4748:	4620      	mov	r0, r4
   d474a:	f001 feb7 	bl	d64bc <_ZN16Adafruit_SSD13067displayEv>

  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d474e:	2200      	movs	r2, #0
   d4750:	4611      	mov	r1, r2
   d4752:	4620      	mov	r0, r4
   d4754:	2301      	movs	r3, #1
   d4756:	f001 fd2f 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d475a:	4620      	mov	r0, r4
   d475c:	2301      	movs	r3, #1
   d475e:	2200      	movs	r2, #0
   d4760:	217f      	movs	r1, #127	; 0x7f
   d4762:	f001 fd29 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d4766:	4620      	mov	r0, r4
   d4768:	2301      	movs	r3, #1
   d476a:	223f      	movs	r2, #63	; 0x3f
   d476c:	2100      	movs	r1, #0
   d476e:	f001 fd23 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d4772:	2301      	movs	r3, #1
   d4774:	223f      	movs	r2, #63	; 0x3f
   d4776:	4620      	mov	r0, r4
   d4778:	217f      	movs	r1, #127	; 0x7f
   d477a:	f001 fd1d 	bl	d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>

  // display a line of text
  display.setTextSize(1);
   d477e:	4620      	mov	r0, r4
   d4780:	2101      	movs	r1, #1
   d4782:	f002 f8d3 	bl	d692c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4786:	4620      	mov	r0, r4
   d4788:	2101      	movs	r1, #1
   d478a:	f002 f8d4 	bl	d6936 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,5);
   d478e:	4620      	mov	r0, r4
   d4790:	2205      	movs	r2, #5
   d4792:	2100      	movs	r1, #0
   d4794:	f002 f8c7 	bl	d6926 <_ZN12Adafruit_GFX9setCursorEss>
   d4798:	4a17      	ldr	r2, [pc, #92]	; (d47f8 <_Z9oledprintffffi+0xd0>)
   d479a:	2100      	movs	r1, #0
   d479c:	4620      	mov	r0, r4
   d479e:	f003 f828 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  display.printf("Environmental Reading");
  display.setCursor(0,18);
   d47a2:	2212      	movs	r2, #18
   d47a4:	4620      	mov	r0, r4
   d47a6:	2100      	movs	r1, #0
   d47a8:	f002 f8bd 	bl	d6926 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Temperature(F) %0.2f\n",Otemp);
   d47ac:	eeb0 0a69 	vmov.f32	s0, s19
   d47b0:	4912      	ldr	r1, [pc, #72]	; (d47fc <_Z9oledprintffffi+0xd4>)
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ff60 	bl	d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Pressure (hPa) %0.2f\n",Opres);
   d47b8:	eeb0 0a49 	vmov.f32	s0, s18
   d47bc:	4910      	ldr	r1, [pc, #64]	; (d4800 <_Z9oledprintffffi+0xd8>)
   d47be:	4620      	mov	r0, r4
   d47c0:	f7ff ff5a 	bl	d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
   d47c4:	eeb0 0a68 	vmov.f32	s0, s17
   d47c8:	490e      	ldr	r1, [pc, #56]	; (d4804 <_Z9oledprintffffi+0xdc>)
   d47ca:	4620      	mov	r0, r4
   d47cc:	f7ff ff54 	bl	d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Dust Level: %0.2f \n",Odust);
   d47d0:	eeb0 0a48 	vmov.f32	s0, s16
   d47d4:	490c      	ldr	r1, [pc, #48]	; (d4808 <_Z9oledprintffffi+0xe0>)
   d47d6:	4620      	mov	r0, r4
   d47d8:	f7ff ff4e 	bl	d4678 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.printf("Moisture: %d \n",Omoist);
   d47dc:	462a      	mov	r2, r5
   d47de:	4620      	mov	r0, r4
   d47e0:	490a      	ldr	r1, [pc, #40]	; (d480c <_Z9oledprintffffi+0xe4>)
   d47e2:	f7ff feab 	bl	d453c <_ZN5Print6printfIIiEEEjPKcDpT_>
  display.display();
}
   d47e6:	ecbd 8b04 	vpop	{d8-d9}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d47ea:	4620      	mov	r0, r4
}
   d47ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.printf("Temperature(F) %0.2f\n",Otemp);
  display.printf("Pressure (hPa) %0.2f\n",Opres);
  display.printf("Humidity (%rH)  %0.2f\n",Ohum);
  display.printf("Dust Level: %0.2f \n",Odust);
  display.printf("Moisture: %d \n",Omoist);
  display.display();
   d47f0:	f001 be64 	b.w	d64bc <_ZN16Adafruit_SSD13067displayEv>
   d47f4:	2003e2c8 	.word	0x2003e2c8
   d47f8:	000dc380 	.word	0x000dc380
   d47fc:	000dc396 	.word	0x000dc396
   d4800:	000dc3ac 	.word	0x000dc3ac
   d4804:	000dc3c2 	.word	0x000dc3c2
   d4808:	000dc3d9 	.word	0x000dc3d9
   d480c:	000dc3ed 	.word	0x000dc3ed

000d4810 <loop>:
    while (1);
  }

}

void loop() {
   d4810:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  moist = analogRead(soilPin);
   d4814:	4b7c      	ldr	r3, [pc, #496]	; (d4a08 <loop+0x1f8>)
  watered = waterPlant(moist,waterTime);
   d4816:	f8df 9240 	ldr.w	r9, [pc, #576]	; d4a58 <loop+0x248>
  }

}

void loop() {
  moist = analogRead(soilPin);
   d481a:	8818      	ldrh	r0, [r3, #0]
   d481c:	4c7b      	ldr	r4, [pc, #492]	; (d4a0c <loop+0x1fc>)
  watered = waterPlant(moist,waterTime);
   d481e:	4e7c      	ldr	r6, [pc, #496]	; (d4a10 <loop+0x200>)
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d4820:	4d7c      	ldr	r5, [pc, #496]	; (d4a14 <loop+0x204>)
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4822:	4f7d      	ldr	r7, [pc, #500]	; (d4a18 <loop+0x208>)
  hum = bme.readHumidity();
   d4824:	f8df a234 	ldr.w	sl, [pc, #564]	; d4a5c <loop+0x24c>
  dust = getDust();
   d4828:	f8df 8234 	ldr.w	r8, [pc, #564]	; d4a60 <loop+0x250>
  }

}

void loop() {
  moist = analogRead(soilPin);
   d482c:	f004 fb25 	bl	d8e7a <analogRead>
  watered = waterPlant(moist,waterTime);
   d4830:	f8d9 1000 	ldr.w	r1, [r9]
  }

}

void loop() {
  moist = analogRead(soilPin);
   d4834:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist,waterTime);
   d4836:	f7ff fc8b 	bl	d4150 <_Z10waterPlantii>
   d483a:	6030      	str	r0, [r6, #0]
  temp = (bme.readTemperature()*(9.0/5.0))+32;
   d483c:	4877      	ldr	r0, [pc, #476]	; (d4a1c <loop+0x20c>)
   d483e:	f000 fad3 	bl	d4de8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4842:	ee10 0a10 	vmov	r0, s0
   d4846:	f005 ff9f 	bl	da788 <__aeabi_f2d>
   d484a:	a36b      	add	r3, pc, #428	; (adr r3, d49f8 <loop+0x1e8>)
   d484c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4850:	f005 ffee 	bl	da830 <__aeabi_dmul>
   d4854:	2200      	movs	r2, #0
   d4856:	4b72      	ldr	r3, [pc, #456]	; (d4a20 <loop+0x210>)
   d4858:	f005 fe38 	bl	da4cc <__adddf3>
   d485c:	e9c5 0100 	strd	r0, r1, [r5]
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
   d4860:	486e      	ldr	r0, [pc, #440]	; (d4a1c <loop+0x20c>)
   d4862:	f000 faef 	bl	d4e44 <_ZN15Adafruit_BME28012readPressureEv>
   d4866:	eddf 7a6f 	vldr	s15, [pc, #444]	; d4a24 <loop+0x214>
   d486a:	ee80 7a27 	vdiv.f32	s14, s0, s15
   d486e:	ee17 0a10 	vmov	r0, s14
   d4872:	f005 ff89 	bl	da788 <__aeabi_f2d>
   d4876:	a362      	add	r3, pc, #392	; (adr r3, d4a00 <loop+0x1f0>)
   d4878:	e9d3 2300 	ldrd	r2, r3, [r3]
   d487c:	f005 ffd8 	bl	da830 <__aeabi_dmul>
   d4880:	2200      	movs	r2, #0
   d4882:	4b69      	ldr	r3, [pc, #420]	; (d4a28 <loop+0x218>)
   d4884:	f005 fe22 	bl	da4cc <__adddf3>
   d4888:	e9c7 0100 	strd	r0, r1, [r7]
  hum = bme.readHumidity();
   d488c:	4863      	ldr	r0, [pc, #396]	; (d4a1c <loop+0x20c>)
   d488e:	f000 fc21 	bl	d50d4 <_ZN15Adafruit_BME28012readHumidityEv>
   d4892:	ee10 0a10 	vmov	r0, s0
   d4896:	f005 ff77 	bl	da788 <__aeabi_f2d>
   d489a:	e9ca 0100 	strd	r0, r1, [sl]
  dust = getDust();
   d489e:	f7ff fce3 	bl	d4268 <_Z7getDustv>
  printMoist(moist);
   d48a2:	6820      	ldr	r0, [r4, #0]
  moist = analogRead(soilPin);
  watered = waterPlant(moist,waterTime);
  temp = (bme.readTemperature()*(9.0/5.0))+32;
  pres = (bme.readPressure() / 100.0F * 0.02953)+5;
  hum = bme.readHumidity();
  dust = getDust();
   d48a4:	ed88 0a00 	vstr	s0, [r8]
  printMoist(moist);
   d48a8:	f7ff fc8a 	bl	d41c0 <_Z10printMoisti>
  printValues();
   d48ac:	f7ff fef4 	bl	d4698 <_Z11printValuesv>

  //Publish to Adafruit.io
  if(mqtt.Update()) {
   d48b0:	485e      	ldr	r0, [pc, #376]	; (d4a2c <loop+0x21c>)
   d48b2:	f000 fe9e 	bl	d55f2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d48b6:	b318      	cbz	r0, d4900 <loop+0xf0>
    Htemp.publish(temp); 
   d48b8:	2102      	movs	r1, #2
   d48ba:	ed95 0b00 	vldr	d0, [r5]
   d48be:	485c      	ldr	r0, [pc, #368]	; (d4a30 <loop+0x220>)
   d48c0:	f001 f96e 	bl	d5ba0 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hpres.publish(pres);
   d48c4:	2102      	movs	r1, #2
   d48c6:	ed97 0b00 	vldr	d0, [r7]
   d48ca:	485a      	ldr	r0, [pc, #360]	; (d4a34 <loop+0x224>)
   d48cc:	f001 f968 	bl	d5ba0 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hhum.publish(hum);
   d48d0:	ed9a 0b00 	vldr	d0, [sl]
   d48d4:	2102      	movs	r1, #2
   d48d6:	4858      	ldr	r0, [pc, #352]	; (d4a38 <loop+0x228>)
   d48d8:	f001 f962 	bl	d5ba0 <_ZN21Adafruit_MQTT_Publish7publishEdh>
    Hmoist.publish(moist);
   d48dc:	6821      	ldr	r1, [r4, #0]
   d48de:	4857      	ldr	r0, [pc, #348]	; (d4a3c <loop+0x22c>)
   d48e0:	f001 f95c 	bl	d5b9c <_ZN21Adafruit_MQTT_Publish7publishEi>
    Hwater.publish(watered);
   d48e4:	6831      	ldr	r1, [r6, #0]
   d48e6:	4856      	ldr	r0, [pc, #344]	; (d4a40 <loop+0x230>)
   d48e8:	f001 f958 	bl	d5b9c <_ZN21Adafruit_MQTT_Publish7publishEi>
    Hdust.publish(dust);
   d48ec:	f8d8 0000 	ldr.w	r0, [r8]
   d48f0:	f005 ff4a 	bl	da788 <__aeabi_f2d>
   d48f4:	ec41 0b10 	vmov	d0, r0, r1
   d48f8:	2102      	movs	r1, #2
   d48fa:	4852      	ldr	r0, [pc, #328]	; (d4a44 <loop+0x234>)
   d48fc:	f001 f950 	bl	d5ba0 <_ZN21Adafruit_MQTT_Publish7publishEdh>
  } 

  oledprint(temp, pres, hum, dust, moist);
   d4900:	e9da 0100 	ldrd	r0, r1, [sl]
   d4904:	f006 fa8c 	bl	dae20 <__aeabi_d2f>
   d4908:	9001      	str	r0, [sp, #4]
   d490a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d490e:	f006 fa87 	bl	dae20 <__aeabi_d2f>
   d4912:	9000      	str	r0, [sp, #0]
   d4914:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4918:	f006 fa82 	bl	dae20 <__aeabi_d2f>
   d491c:	edd8 1a00 	vldr	s3, [r8]
   d4920:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4924:	eddd 0a00 	vldr	s1, [sp]
  // Look for manual water, 
  for(i=0;i<60;i++) {
    Adafruit_MQTT_Subscribe *subscription;
    Serial.printf("x%i ",i);
    while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
      if (subscription == &onoffbutton) {
   d4928:	f8df 8138 	ldr.w	r8, [pc, #312]	; d4a64 <loop+0x254>
    Hmoist.publish(moist);
    Hwater.publish(watered);
    Hdust.publish(dust);
  } 

  oledprint(temp, pres, hum, dust, moist);
   d492c:	ee00 0a10 	vmov	s0, r0
   d4930:	6820      	ldr	r0, [r4, #0]
   d4932:	f7ff fef9 	bl	d4728 <_Z9oledprintffffi>
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4936:	e9da 0100 	ldrd	r0, r1, [sl]
   d493a:	f006 fa71 	bl	dae20 <__aeabi_d2f>
   d493e:	9001      	str	r0, [sp, #4]
   d4940:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4944:	f006 fa6c 	bl	dae20 <__aeabi_d2f>
   d4948:	9000      	str	r0, [sp, #0]
   d494a:	e9d5 0100 	ldrd	r0, r1, [r5]
   d494e:	f006 fa67 	bl	dae20 <__aeabi_d2f>

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d4952:	4d3d      	ldr	r5, [pc, #244]	; (d4a48 <loop+0x238>)
  } 

  oledprint(temp, pres, hum, dust, moist);
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);
   d4954:	6831      	ldr	r1, [r6, #0]
   d4956:	ed9d 1a01 	vldr	s2, [sp, #4]
   d495a:	eddd 0a00 	vldr	s1, [sp]
   d495e:	ee00 0a10 	vmov	s0, r0
   d4962:	6820      	ldr	r0, [r4, #0]
   d4964:	f7ff fe24 	bl	d45b0 <_Z18createEventPayLoadifffi>

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d4968:	2300      	movs	r3, #0
   d496a:	602b      	str	r3, [r5, #0]
   d496c:	682b      	ldr	r3, [r5, #0]
   d496e:	2b3b      	cmp	r3, #59	; 0x3b
   d4970:	dc3d      	bgt.n	d49ee <loop+0x1de>
    Adafruit_MQTT_Subscribe *subscription;
    Serial.printf("x%i ",i);
   d4972:	f003 fc65 	bl	d8240 <_Z16_fetch_usbserialv>
   d4976:	4b34      	ldr	r3, [pc, #208]	; (d4a48 <loop+0x238>)
   d4978:	4934      	ldr	r1, [pc, #208]	; (d4a4c <loop+0x23c>)
   d497a:	681a      	ldr	r2, [r3, #0]
   d497c:	f7ff fdde 	bl	d453c <_ZN5Print6printfIIiEEEjPKcDpT_>
    while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d4980:	f242 7110 	movw	r1, #10000	; 0x2710
   d4984:	4829      	ldr	r0, [pc, #164]	; (d4a2c <loop+0x21c>)
   d4986:	f000 ff1f 	bl	d57c8 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d498a:	b360      	cbz	r0, d49e6 <loop+0x1d6>
      if (subscription == &onoffbutton) {
   d498c:	4540      	cmp	r0, r8
   d498e:	d1f7      	bne.n	d4980 <loop+0x170>
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d4990:	f108 0005 	add.w	r0, r8, #5
   d4994:	f006 fda2 	bl	db4dc <atoi>
   d4998:	4f2d      	ldr	r7, [pc, #180]	; (d4a50 <loop+0x240>)
   d499a:	6038      	str	r0, [r7, #0]
        Serial.printf("Button State is %i \n",button);
   d499c:	f003 fc50 	bl	d8240 <_Z16_fetch_usbserialv>
   d49a0:	492c      	ldr	r1, [pc, #176]	; (d4a54 <loop+0x244>)
   d49a2:	683a      	ldr	r2, [r7, #0]
   d49a4:	f7ff fdca 	bl	d453c <_ZN5Print6printfIIiEEEjPKcDpT_>
        if(button==1) {
   d49a8:	6839      	ldr	r1, [r7, #0]
   d49aa:	2901      	cmp	r1, #1
   d49ac:	d1e8      	bne.n	d4980 <loop+0x170>
          digitalWrite(D7,1);
   d49ae:	2007      	movs	r0, #7
   d49b0:	f004 fa37 	bl	d8e22 <digitalWrite>
          watered = waterPlant(3000,waterTime);
   d49b4:	f8d9 1000 	ldr.w	r1, [r9]
   d49b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d49bc:	f7ff fbc8 	bl	d4150 <_Z10waterPlantii>
   d49c0:	6030      	str	r0, [r6, #0]
          if(mqtt.Update()) {
   d49c2:	481a      	ldr	r0, [pc, #104]	; (d4a2c <loop+0x21c>)
   d49c4:	f000 fe15 	bl	d55f2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d49c8:	b140      	cbz	r0, d49dc <loop+0x1cc>
            Hmoist.publish(moist);
   d49ca:	6821      	ldr	r1, [r4, #0]
   d49cc:	481b      	ldr	r0, [pc, #108]	; (d4a3c <loop+0x22c>)
   d49ce:	f001 f8e5 	bl	d5b9c <_ZN21Adafruit_MQTT_Publish7publishEi>
            Hwater.publish(watered);  
   d49d2:	4b0f      	ldr	r3, [pc, #60]	; (d4a10 <loop+0x200>)
   d49d4:	481a      	ldr	r0, [pc, #104]	; (d4a40 <loop+0x230>)
   d49d6:	6819      	ldr	r1, [r3, #0]
   d49d8:	f001 f8e0 	bl	d5b9c <_ZN21Adafruit_MQTT_Publish7publishEi>
          } 
          digitalWrite(D7,0);
   d49dc:	2100      	movs	r1, #0
   d49de:	2007      	movs	r0, #7
   d49e0:	f004 fa1f 	bl	d8e22 <digitalWrite>
   d49e4:	e7cc      	b.n	d4980 <loop+0x170>
  
  //Publish to Particle Cloud in JSON
  createEventPayLoad(moist,temp,pres,hum,watered);

  // Look for manual water, 
  for(i=0;i<60;i++) {
   d49e6:	682b      	ldr	r3, [r5, #0]
   d49e8:	3301      	adds	r3, #1
   d49ea:	602b      	str	r3, [r5, #0]
   d49ec:	e7be      	b.n	d496c <loop+0x15c>
          digitalWrite(D7,0);
        }
      }
    }
  }    
}
   d49ee:	b002      	add	sp, #8
   d49f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d49f4:	f3af 8000 	nop.w
   d49f8:	cccccccd 	.word	0xcccccccd
   d49fc:	3ffccccc 	.word	0x3ffccccc
   d4a00:	c100e6b0 	.word	0xc100e6b0
   d4a04:	3f9e3d1c 	.word	0x3f9e3d1c
   d4a08:	2003dc6c 	.word	0x2003dc6c
   d4a0c:	2003e370 	.word	0x2003e370
   d4a10:	2003e328 	.word	0x2003e328
   d4a14:	2003e190 	.word	0x2003e190
   d4a18:	2003e380 	.word	0x2003e380
   d4a1c:	2003e32c 	.word	0x2003e32c
   d4a20:	40400000 	.word	0x40400000
   d4a24:	42c80000 	.word	0x42c80000
   d4a28:	40140000 	.word	0x40140000
   d4a2c:	2003e1a8 	.word	0x2003e1a8
   d4a30:	2003e308 	.word	0x2003e308
   d4a34:	2003e27c 	.word	0x2003e27c
   d4a38:	2003e2f8 	.word	0x2003e2f8
   d4a3c:	2003e180 	.word	0x2003e180
   d4a40:	2003e158 	.word	0x2003e158
   d4a44:	2003e374 	.word	0x2003e374
   d4a48:	2003e2f4 	.word	0x2003e2f4
   d4a4c:	000dc3fc 	.word	0x000dc3fc
   d4a50:	2003e314 	.word	0x2003e314
   d4a54:	000dc401 	.word	0x000dc401
   d4a58:	2003dc70 	.word	0x2003dc70
   d4a5c:	2003e288 	.word	0x2003e288
   d4a60:	2003e304 	.word	0x2003e304
   d4a64:	2003e290 	.word	0x2003e290

000d4a68 <_ZN16Adafruit_SSD1306D0Ev>:
   d4a68:	b510      	push	{r4, lr}
   d4a6a:	2124      	movs	r1, #36	; 0x24
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	f004 fa8f 	bl	d8f90 <_ZdlPvj>
   d4a72:	4620      	mov	r0, r4
   d4a74:	bd10      	pop	{r4, pc}

000d4a76 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4a76:	b510      	push	{r4, lr}
   d4a78:	21d4      	movs	r1, #212	; 0xd4
   d4a7a:	4604      	mov	r4, r0
   d4a7c:	f004 fa88 	bl	d8f90 <_ZdlPvj>
   d4a80:	4620      	mov	r0, r4
   d4a82:	bd10      	pop	{r4, pc}

000d4a84 <_GLOBAL__sub_I_display>:
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a86:	4b39      	ldr	r3, [pc, #228]	; (d4b6c <_GLOBAL__sub_I_display+0xe8>)
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d4a88:	4c39      	ldr	r4, [pc, #228]	; (d4b70 <_GLOBAL__sub_I_display+0xec>)
   d4a8a:	4d3a      	ldr	r5, [pc, #232]	; (d4b74 <_GLOBAL__sub_I_display+0xf0>)




/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4a8c:	4e3a      	ldr	r6, [pc, #232]	; (d4b78 <_GLOBAL__sub_I_display+0xf4>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4a8e:	4f3b      	ldr	r7, [pc, #236]	; (d4b7c <_GLOBAL__sub_I_display+0xf8>)
   d4a90:	2201      	movs	r2, #1
   d4a92:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4a94:	f001 ff6c 	bl	d6970 <HAL_Pin_Map>
#include "Adafruit_SSD1306.h"

// Setup SSD_1306 Display
#define OLED_ADDR   0x3C
#define SSD1306_128_64
Adafruit_SSD1306 display(-1);
   d4a98:	f04f 31ff 	mov.w	r1, #4294967295
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f001 fbd5 	bl	d624c <_ZN16Adafruit_SSD1306C1Ea>
   d4aa2:	462a      	mov	r2, r5
   d4aa4:	4936      	ldr	r1, [pc, #216]	; (d4b80 <_GLOBAL__sub_I_display+0xfc>)
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f004 fa64 	bl	d8f74 <__aeabi_atexit>




/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4aac:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4aae:	4c35      	ldr	r4, [pc, #212]	; (d4b84 <_GLOBAL__sub_I_display+0x100>)
   d4ab0:	f004 f870 	bl	d8b94 <_ZN9TCPClientC1Ev>
   d4ab4:	462a      	mov	r2, r5
   d4ab6:	4934      	ldr	r1, [pc, #208]	; (d4b88 <_GLOBAL__sub_I_display+0x104>)
   d4ab8:	4630      	mov	r0, r6
   d4aba:	f004 fa5b 	bl	d8f74 <__aeabi_atexit>
   d4abe:	4b33      	ldr	r3, [pc, #204]	; (d4b8c <_GLOBAL__sub_I_display+0x108>)
   d4ac0:	9300      	str	r3, [sp, #0]
   d4ac2:	f240 725b 	movw	r2, #1883	; 0x75b
   d4ac6:	4b32      	ldr	r3, [pc, #200]	; (d4b90 <_GLOBAL__sub_I_display+0x10c>)
   d4ac8:	4932      	ldr	r1, [pc, #200]	; (d4b94 <_GLOBAL__sub_I_display+0x110>)
   d4aca:	4620      	mov	r0, r4
   d4acc:	f000 fdc6 	bl	d565c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4ad0:	4b31      	ldr	r3, [pc, #196]	; (d4b98 <_GLOBAL__sub_I_display+0x114>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4ad2:	4932      	ldr	r1, [pc, #200]	; (d4b9c <_GLOBAL__sub_I_display+0x118>)
   d4ad4:	6023      	str	r3, [r4, #0]
   d4ad6:	462a      	mov	r2, r5
   d4ad8:	4620      	mov	r0, r4
   d4ada:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4ade:	f004 fa49 	bl	d8f74 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4ae2:	4621      	mov	r1, r4
   d4ae4:	2300      	movs	r3, #0
   d4ae6:	4a2e      	ldr	r2, [pc, #184]	; (d4ba0 <_GLOBAL__sub_I_display+0x11c>)
   d4ae8:	482e      	ldr	r0, [pc, #184]	; (d4ba4 <_GLOBAL__sub_I_display+0x120>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4aea:	4e2f      	ldr	r6, [pc, #188]	; (d4ba8 <_GLOBAL__sub_I_display+0x124>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d4aec:	f001 f842 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d4af0:	4621      	mov	r1, r4
   d4af2:	2300      	movs	r3, #0
   d4af4:	4a2d      	ldr	r2, [pc, #180]	; (d4bac <_GLOBAL__sub_I_display+0x128>)
   d4af6:	482e      	ldr	r0, [pc, #184]	; (d4bb0 <_GLOBAL__sub_I_display+0x12c>)
   d4af8:	f001 f83c 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d4afc:	4621      	mov	r1, r4
   d4afe:	2300      	movs	r3, #0
   d4b00:	4a2c      	ldr	r2, [pc, #176]	; (d4bb4 <_GLOBAL__sub_I_display+0x130>)
   d4b02:	482d      	ldr	r0, [pc, #180]	; (d4bb8 <_GLOBAL__sub_I_display+0x134>)
   d4b04:	f001 f836 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
   d4b08:	4621      	mov	r1, r4
   d4b0a:	2300      	movs	r3, #0
   d4b0c:	4a2b      	ldr	r2, [pc, #172]	; (d4bbc <_GLOBAL__sub_I_display+0x138>)
   d4b0e:	482c      	ldr	r0, [pc, #176]	; (d4bc0 <_GLOBAL__sub_I_display+0x13c>)
   d4b10:	f001 f830 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
   d4b14:	4621      	mov	r1, r4
   d4b16:	2300      	movs	r3, #0
   d4b18:	4a2a      	ldr	r2, [pc, #168]	; (d4bc4 <_GLOBAL__sub_I_display+0x140>)
   d4b1a:	482b      	ldr	r0, [pc, #172]	; (d4bc8 <_GLOBAL__sub_I_display+0x144>)
   d4b1c:	f001 f82a 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 
   d4b20:	4621      	mov	r1, r4
   d4b22:	2300      	movs	r3, #0
   d4b24:	4a29      	ldr	r2, [pc, #164]	; (d4bcc <_GLOBAL__sub_I_display+0x148>)
   d4b26:	482a      	ldr	r0, [pc, #168]	; (d4bd0 <_GLOBAL__sub_I_display+0x14c>)
   d4b28:	f001 f824 	bl	d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4b2c:	2300      	movs	r3, #0
   d4b2e:	4a29      	ldr	r2, [pc, #164]	; (d4bd4 <_GLOBAL__sub_I_display+0x150>)
   d4b30:	4829      	ldr	r0, [pc, #164]	; (d4bd8 <_GLOBAL__sub_I_display+0x154>)
   d4b32:	4621      	mov	r1, r4

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b34:	4c29      	ldr	r4, [pc, #164]	; (d4bdc <_GLOBAL__sub_I_display+0x158>)
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
Adafruit_MQTT_Publish Hpres = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Pressure"); 
Adafruit_MQTT_Publish Hhum = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Humidity"); 
Adafruit_MQTT_Publish Hdust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Dust"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4b36:	f001 f851 	bl	d5bdc <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C
   d4b3a:	4829      	ldr	r0, [pc, #164]	; (d4be0 <_GLOBAL__sub_I_display+0x15c>)
   d4b3c:	f000 f880 	bl	d4c40 <_ZN15Adafruit_BME280C1Ev>

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b40:	4639      	mov	r1, r7
   d4b42:	4620      	mov	r0, r4
   d4b44:	f002 fc58 	bl	d73f8 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b48:	4620      	mov	r0, r4
String t2;
   d4b4a:	4c26      	ldr	r4, [pc, #152]	; (d4be4 <_GLOBAL__sub_I_display+0x160>)

unsigned status;

char currentTime[25];
char current[9];
String t;
   d4b4c:	462a      	mov	r2, r5
   d4b4e:	4631      	mov	r1, r6
   d4b50:	f004 fa10 	bl	d8f74 <__aeabi_atexit>
String t2;
   d4b54:	4639      	mov	r1, r7
   d4b56:	4620      	mov	r0, r4
   d4b58:	f002 fc4e 	bl	d73f8 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b5c:	462a      	mov	r2, r5
   d4b5e:	4631      	mov	r1, r6
   d4b60:	4620      	mov	r0, r4
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");
  display.display();
   d4b62:	b003      	add	sp, #12
   d4b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
unsigned status;

char currentTime[25];
char current[9];
String t;
String t2;
   d4b68:	f004 ba04 	b.w	d8f74 <__aeabi_atexit>
   d4b6c:	2003e2ec 	.word	0x2003e2ec
   d4b70:	2003e2c8 	.word	0x2003e2c8
   d4b74:	2003e148 	.word	0x2003e148
   d4b78:	2003e164 	.word	0x2003e164
   d4b7c:	000dc5a9 	.word	0x000dc5a9
   d4b80:	000d40cd 	.word	0x000d40cd
   d4b84:	2003e1a8 	.word	0x2003e1a8
   d4b88:	000d411d 	.word	0x000d411d
   d4b8c:	000dc42d 	.word	0x000dc42d
   d4b90:	000dc416 	.word	0x000dc416
   d4b94:	000dc41d 	.word	0x000dc41d
   d4b98:	000dc55c 	.word	0x000dc55c
   d4b9c:	000d40cf 	.word	0x000d40cf
   d4ba0:	000dc44e 	.word	0x000dc44e
   d4ba4:	2003e308 	.word	0x2003e308
   d4ba8:	000d736b 	.word	0x000d736b
   d4bac:	000dc46c 	.word	0x000dc46c
   d4bb0:	2003e180 	.word	0x2003e180
   d4bb4:	000dc487 	.word	0x000dc487
   d4bb8:	2003e158 	.word	0x2003e158
   d4bbc:	000dc49f 	.word	0x000dc49f
   d4bc0:	2003e27c 	.word	0x2003e27c
   d4bc4:	000dc4ba 	.word	0x000dc4ba
   d4bc8:	2003e2f8 	.word	0x2003e2f8
   d4bcc:	000dc4d5 	.word	0x000dc4d5
   d4bd0:	2003e374 	.word	0x2003e374
   d4bd4:	000dc4ec 	.word	0x000dc4ec
   d4bd8:	2003e290 	.word	0x2003e290
   d4bdc:	2003e318 	.word	0x2003e318
   d4be0:	2003e32c 	.word	0x2003e32c
   d4be4:	2003e198 	.word	0x2003e198

000d4be8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4bea:	4602      	mov	r2, r0
   d4bec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4bee:	7913      	ldrb	r3, [r2, #4]
   d4bf0:	6895      	ldr	r5, [r2, #8]
   d4bf2:	b133      	cbz	r3, d4c02 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4bf4:	b93d      	cbnz	r5, d4c06 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4bf6:	490c      	ldr	r1, [pc, #48]	; (d4c28 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4bf8:	b004      	add	sp, #16
   d4bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4bfe:	f002 bcd1 	b.w	d75a4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4c02:	4b0a      	ldr	r3, [pc, #40]	; (d4c2c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4c04:	e000      	b.n	d4c08 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4c06:	4b0a      	ldr	r3, [pc, #40]	; (d4c30 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4c08:	7b16      	ldrb	r6, [r2, #12]
   d4c0a:	4c0a      	ldr	r4, [pc, #40]	; (d4c34 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4c0c:	490a      	ldr	r1, [pc, #40]	; (d4c38 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4c0e:	7b52      	ldrb	r2, [r2, #13]
   d4c10:	9202      	str	r2, [sp, #8]
   d4c12:	2e01      	cmp	r6, #1
   d4c14:	bf08      	it	eq
   d4c16:	4621      	moveq	r1, r4
   d4c18:	9101      	str	r1, [sp, #4]
   d4c1a:	9500      	str	r5, [sp, #0]
   d4c1c:	4a07      	ldr	r2, [pc, #28]	; (d4c3c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4c1e:	2100      	movs	r1, #0
   d4c20:	f002 fde7 	bl	d77f2 <_ZN5Print11printf_implEbPKcz>
  }
   d4c24:	b004      	add	sp, #16
   d4c26:	bd70      	pop	{r4, r5, r6, pc}
   d4c28:	000dc51d 	.word	0x000dc51d
   d4c2c:	000dc5a9 	.word	0x000dc5a9
   d4c30:	000dc50c 	.word	0x000dc50c
   d4c34:	000dc515 	.word	0x000dc515
   d4c38:	000dc519 	.word	0x000dc519
   d4c3c:	000dc533 	.word	0x000dc533

000d4c40 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4c40:	22ff      	movs	r2, #255	; 0xff
   d4c42:	7402      	strb	r2, [r0, #16]
   d4c44:	7442      	strb	r2, [r0, #17]
   d4c46:	7482      	strb	r2, [r0, #18]
   d4c48:	74c2      	strb	r2, [r0, #19]
{ }
   d4c4a:	4770      	bx	lr

000d4c4c <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4c4c:	6880      	ldr	r0, [r0, #8]
   d4c4e:	4770      	bx	lr

000d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4c50:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4c52:	4d09      	ldr	r5, [pc, #36]	; (d4c78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4c54:	6829      	ldr	r1, [r5, #0]
   d4c56:	f011 0401 	ands.w	r4, r1, #1
   d4c5a:	d10a      	bne.n	d4c72 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	f7ff fa2d 	bl	d40bc <__cxa_guard_acquire>
   d4c62:	b130      	cbz	r0, d4c72 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4c64:	4621      	mov	r1, r4
   d4c66:	4805      	ldr	r0, [pc, #20]	; (d4c7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4c68:	f002 f9f2 	bl	d7050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4c6c:	4628      	mov	r0, r5
   d4c6e:	f7ff fa2a 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4c72:	4802      	ldr	r0, [pc, #8]	; (d4c7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4c74:	bd38      	pop	{r3, r4, r5, pc}
   d4c76:	bf00      	nop
   d4c78:	2003e3a4 	.word	0x2003e3a4
   d4c7c:	2003e3a8 	.word	0x2003e3a8

000d4c80 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4c84:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c88:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c8a:	4605      	mov	r5, r0
   d4c8c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4c8e:	d106      	bne.n	d4c9e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4c90:	f7ff ffde 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c94:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4c9a:	f002 baf5 	b.w	d7288 <_ZN8SPIClass8transferEh>
   d4c9e:	2607      	movs	r6, #7
   d4ca0:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4ca2:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4ca6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4caa:	2100      	movs	r1, #0
   d4cac:	b280      	uxth	r0, r0
   d4cae:	f004 f8b8 	bl	d8e22 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4cb2:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4cb6:	fa08 f106 	lsl.w	r1, r8, r6
   d4cba:	4039      	ands	r1, r7
   d4cbc:	b280      	uxth	r0, r0
   d4cbe:	f004 f8b0 	bl	d8e22 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4cc2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	b280      	uxth	r0, r0
   d4cca:	f004 f8aa 	bl	d8e22 <digitalWrite>
        if (digitalRead(_miso))
   d4cce:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cd2:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4cd4:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4cd6:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4cd8:	f004 f8bc 	bl	d8e54 <digitalRead>
   d4cdc:	b108      	cbz	r0, d4ce2 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4cde:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4ce2:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4ce6:	d2de      	bcs.n	d4ca6 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4ce8:	4620      	mov	r0, r4
   d4cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4cee:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4cf0:	f7ff ffae 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4cf8:	f002 b9e7 	b.w	d70ca <_ZN8SPIClass14endTransactionEv>

000d4cfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4cfc:	b510      	push	{r4, lr}
   d4cfe:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4d00:	f7ff ffa6 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4d04:	4621      	mov	r1, r4
    }
   d4d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4d0a:	f002 b9f7 	b.w	d70fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4d10 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4d10:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4d12:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d16:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4d18:	b085      	sub	sp, #20
   d4d1a:	4604      	mov	r4, r0
   d4d1c:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4d1e:	d121      	bne.n	d4d64 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d20:	7901      	ldrb	r1, [r0, #4]
   d4d22:	6800      	ldr	r0, [r0, #0]
   d4d24:	f003 fbbd 	bl	d84a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d28:	6820      	ldr	r0, [r4, #0]
   d4d2a:	6803      	ldr	r3, [r0, #0]
   d4d2c:	4629      	mov	r1, r5
   d4d2e:	689b      	ldr	r3, [r3, #8]
   d4d30:	4798      	blx	r3
        _wire -> endTransmission();
   d4d32:	6820      	ldr	r0, [r4, #0]
   d4d34:	f003 fbc0 	bl	d84b8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4d38:	2203      	movs	r2, #3
   d4d3a:	7921      	ldrb	r1, [r4, #4]
   d4d3c:	6820      	ldr	r0, [r4, #0]
   d4d3e:	f003 fbad 	bl	d849c <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4d42:	6820      	ldr	r0, [r4, #0]
   d4d44:	6803      	ldr	r3, [r0, #0]
   d4d46:	695b      	ldr	r3, [r3, #20]
   d4d48:	4798      	blx	r3
        value <<= 8;
   d4d4a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d4c:	6820      	ldr	r0, [r4, #0]
   d4d4e:	6803      	ldr	r3, [r0, #0]
   d4d50:	695b      	ldr	r3, [r3, #20]
   d4d52:	4798      	blx	r3
   d4d54:	4328      	orrs	r0, r5
        value <<= 8;
   d4d56:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d58:	6820      	ldr	r0, [r4, #0]
   d4d5a:	6803      	ldr	r3, [r0, #0]
   d4d5c:	695b      	ldr	r3, [r3, #20]
   d4d5e:	4798      	blx	r3
   d4d60:	4305      	orrs	r5, r0
   d4d62:	e039      	b.n	d4dd8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4d64:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d68:	3301      	adds	r3, #1
   d4d6a:	d10e      	bne.n	d4d8a <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4d6c:	4b1c      	ldr	r3, [pc, #112]	; (d4de0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4d6e:	4a1d      	ldr	r2, [pc, #116]	; (d4de4 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4d70:	9300      	str	r3, [sp, #0]
   d4d72:	9202      	str	r2, [sp, #8]
   d4d74:	2300      	movs	r3, #0
   d4d76:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d78:	4668      	mov	r0, sp
   d4d7a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d7e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4d82:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d86:	f7ff ffb9 	bl	d4cfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4d8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d8e:	2100      	movs	r1, #0
   d4d90:	b280      	uxth	r0, r0
   d4d92:	f004 f846 	bl	d8e22 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4d96:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	f7ff ff70 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4da0:	2100      	movs	r1, #0
   d4da2:	4620      	mov	r0, r4
   d4da4:	f7ff ff6c 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4da8:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4daa:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4dac:	4620      	mov	r0, r4
   d4dae:	f7ff ff67 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
   d4db2:	4328      	orrs	r0, r5
        value <<= 8;
   d4db4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4db6:	2100      	movs	r1, #0
   d4db8:	4620      	mov	r0, r4
   d4dba:	f7ff ff61 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
   d4dbe:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4dc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dc4:	2101      	movs	r1, #1
   d4dc6:	b280      	uxth	r0, r0
   d4dc8:	f004 f82b 	bl	d8e22 <digitalWrite>
        if (_sck == -1)
   d4dcc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4dd0:	3301      	adds	r3, #1
   d4dd2:	d101      	bne.n	d4dd8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4dd4:	f7ff ff8b 	bl	d4cee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4dd8:	4628      	mov	r0, r5
   d4dda:	b005      	add	sp, #20
   d4ddc:	bd30      	pop	{r4, r5, pc}
   d4dde:	bf00      	nop
   d4de0:	000dc508 	.word	0x000dc508
   d4de4:	0007a120 	.word	0x0007a120

000d4de8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4de8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4dea:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4dec:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4dee:	f7ff ff8f 	bl	d4d10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4df2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4df6:	d01e      	beq.n	d4e36 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4df8:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4dfa:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4e3c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4dfe:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4e02:	0052      	lsls	r2, r2, #1
   d4e04:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4e08:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4e0c:	435b      	muls	r3, r3
   d4e0e:	4350      	muls	r0, r2
   d4e10:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4e14:	131b      	asrs	r3, r3, #12
   d4e16:	4353      	muls	r3, r2
   d4e18:	139b      	asrs	r3, r3, #14
   d4e1a:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4e1e:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4e24:	3080      	adds	r0, #128	; 0x80
   d4e26:	1200      	asrs	r0, r0, #8
   d4e28:	ee07 0a90 	vmov	s15, r0
   d4e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e30:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4e34:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4e36:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e40 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4e3a:	bd10      	pop	{r4, pc}
   d4e3c:	42c80000 	.word	0x42c80000
   d4e40:	7fc00000 	.word	0x7fc00000

000d4e44 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e48:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4e4a:	f7ff ffcd 	bl	d4de8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e4e:	21f7      	movs	r1, #247	; 0xf7
   d4e50:	4630      	mov	r0, r6
   d4e52:	f7ff ff5d 	bl	d4d10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e5a:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e5c:	f000 80c1 	beq.w	d4fe2 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4e60:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e62:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4e66:	17e5      	asrs	r5, r4, #31
   d4e68:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4e6c:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4e70:	fba4 8904 	umull	r8, r9, r4, r4
   d4e74:	fb04 f305 	mul.w	r3, r4, r5
   d4e78:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e7c:	fb02 f105 	mul.w	r1, r2, r5
   d4e80:	17d3      	asrs	r3, r2, #31
   d4e82:	fb04 1103 	mla	r1, r4, r3, r1
   d4e86:	fba2 2304 	umull	r2, r3, r2, r4
   d4e8a:	440b      	add	r3, r1
   d4e8c:	0319      	lsls	r1, r3, #12
   d4e8e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4e92:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4e94:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4e98:	17d3      	asrs	r3, r2, #31
   d4e9a:	fb02 fe09 	mul.w	lr, r2, r9
   d4e9e:	fb08 ee03 	mla	lr, r8, r3, lr
   d4ea2:	fba2 2308 	umull	r2, r3, r2, r8
   d4ea6:	4473      	add	r3, lr
   d4ea8:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4eac:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4eb0:	eb1a 0a00 	adds.w	sl, sl, r0
   d4eb4:	8b72      	ldrh	r2, [r6, #26]
   d4eb6:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4eba:	eb4b 0b01 	adc.w	fp, fp, r1
   d4ebe:	f11a 0000 	adds.w	r0, sl, #0
   d4ec2:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4ec6:	fba0 ab02 	umull	sl, fp, r0, r2
   d4eca:	fb02 bb01 	mla	fp, r2, r1, fp
   d4ece:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4ed2:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4ed6:	ea52 0103 	orrs.w	r1, r2, r3
   d4eda:	f000 8086 	beq.w	d4fea <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4ede:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4ee2:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4ee6:	fb0a f109 	mul.w	r1, sl, r9
   d4eea:	fb08 110b 	mla	r1, r8, fp, r1
   d4eee:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ef2:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4ef6:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ef8:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4efc:	fb0a f105 	mul.w	r1, sl, r5
   d4f00:	fb04 110b 	mla	r1, r4, fp, r1
   d4f04:	fbaa 4504 	umull	r4, r5, sl, r4
   d4f08:	440d      	add	r5, r1
   d4f0a:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4f0e:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f12:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4f14:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f18:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4f1c:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4f20:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4f24:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4f28:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4f2c:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4f30:	07c4      	lsls	r4, r0, #31
   d4f32:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4f36:	f04f 0800 	mov.w	r8, #0
   d4f3a:	eb18 080a 	adds.w	r8, r8, sl
   d4f3e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4f42:	eb49 090b 	adc.w	r9, r9, fp
   d4f46:	f640 4735 	movw	r7, #3125	; 0xc35
   d4f4a:	ebb4 0408 	subs.w	r4, r4, r8
   d4f4e:	eb65 0509 	sbc.w	r5, r5, r9
   d4f52:	fba4 0107 	umull	r0, r1, r4, r7
   d4f56:	fb07 1105 	mla	r1, r7, r5, r1
   d4f5a:	f006 f8bf 	bl	db0dc <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f5e:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4f62:	134c      	asrs	r4, r1, #13
   d4f64:	0b45      	lsrs	r5, r0, #13
   d4f66:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f6a:	fb02 f704 	mul.w	r7, r2, r4
   d4f6e:	17d3      	asrs	r3, r2, #31
   d4f70:	fb05 7703 	mla	r7, r5, r3, r7
   d4f74:	fba2 2305 	umull	r2, r3, r2, r5
   d4f78:	443b      	add	r3, r7
   d4f7a:	4354      	muls	r4, r2
   d4f7c:	fb05 4403 	mla	r4, r5, r3, r4
   d4f80:	fba2 2305 	umull	r2, r3, r2, r5
   d4f84:	4423      	add	r3, r4
   d4f86:	0e54      	lsrs	r4, r2, #25
   d4f88:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4f8c:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4f90:	1824      	adds	r4, r4, r0
   d4f92:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4f96:	414d      	adcs	r5, r1
   d4f98:	17d3      	asrs	r3, r2, #31
   d4f9a:	4351      	muls	r1, r2
   d4f9c:	fb00 1303 	mla	r3, r0, r3, r1
   d4fa0:	fba2 0100 	umull	r0, r1, r2, r0
   d4fa4:	4419      	add	r1, r3
   d4fa6:	0cc2      	lsrs	r2, r0, #19
   d4fa8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4fac:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4fae:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4fb2:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4fb6:	416b      	adcs	r3, r5
   d4fb8:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4fba:	17e5      	asrs	r5, r4, #31
   d4fbc:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4fbe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4fc2:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4fc4:	012b      	lsls	r3, r5, #4
   d4fc6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4fca:	1880      	adds	r0, r0, r2
   d4fcc:	4159      	adcs	r1, r3
   d4fce:	f006 f847 	bl	db060 <__aeabi_l2f>
   d4fd2:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4ff4 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4fd6:	ee07 0a90 	vmov	s15, r0
   d4fda:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4fe2:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4ff8 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4fea:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4ffc <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ff2:	bf00      	nop
   d4ff4:	3b800000 	.word	0x3b800000
   d4ff8:	7fc00000 	.word	0x7fc00000
   d4ffc:	00000000 	.word	0x00000000

000d5000 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5000:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d5002:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5006:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5008:	b085      	sub	sp, #20
   d500a:	4604      	mov	r4, r0
   d500c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d500e:	d11d      	bne.n	d504c <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5010:	7901      	ldrb	r1, [r0, #4]
   d5012:	6800      	ldr	r0, [r0, #0]
   d5014:	f003 fa45 	bl	d84a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5018:	6820      	ldr	r0, [r4, #0]
   d501a:	6803      	ldr	r3, [r0, #0]
   d501c:	4629      	mov	r1, r5
   d501e:	689b      	ldr	r3, [r3, #8]
   d5020:	4798      	blx	r3
        _wire -> endTransmission();
   d5022:	6820      	ldr	r0, [r4, #0]
   d5024:	f003 fa48 	bl	d84b8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5028:	2202      	movs	r2, #2
   d502a:	7921      	ldrb	r1, [r4, #4]
   d502c:	6820      	ldr	r0, [r4, #0]
   d502e:	f003 fa35 	bl	d849c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5032:	6820      	ldr	r0, [r4, #0]
   d5034:	6803      	ldr	r3, [r0, #0]
   d5036:	695b      	ldr	r3, [r3, #20]
   d5038:	4798      	blx	r3
   d503a:	4605      	mov	r5, r0
   d503c:	6820      	ldr	r0, [r4, #0]
   d503e:	6803      	ldr	r3, [r0, #0]
   d5040:	695b      	ldr	r3, [r3, #20]
   d5042:	4798      	blx	r3
   d5044:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5048:	b285      	uxth	r5, r0
   d504a:	e035      	b.n	d50b8 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d504c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5050:	3301      	adds	r3, #1
   d5052:	d10e      	bne.n	d5072 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5054:	4b1a      	ldr	r3, [pc, #104]	; (d50c0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5056:	4a1b      	ldr	r2, [pc, #108]	; (d50c4 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d5058:	9300      	str	r3, [sp, #0]
   d505a:	9202      	str	r2, [sp, #8]
   d505c:	2300      	movs	r3, #0
   d505e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5060:	4668      	mov	r0, sp
   d5062:	f88d 3004 	strb.w	r3, [sp, #4]
   d5066:	f88d 200c 	strb.w	r2, [sp, #12]
   d506a:	f88d 300d 	strb.w	r3, [sp, #13]
   d506e:	f7ff fe45 	bl	d4cfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d5072:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5076:	2100      	movs	r1, #0
   d5078:	b280      	uxth	r0, r0
   d507a:	f003 fed2 	bl	d8e22 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d507e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5082:	4620      	mov	r0, r4
   d5084:	f7ff fdfc 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5088:	2100      	movs	r1, #0
   d508a:	4620      	mov	r0, r4
   d508c:	f7ff fdf8 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
   d5090:	2100      	movs	r1, #0
   d5092:	4605      	mov	r5, r0
   d5094:	4620      	mov	r0, r4
   d5096:	f7ff fdf3 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
   d509a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d509e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d50a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d50a4:	2101      	movs	r1, #1
   d50a6:	b280      	uxth	r0, r0
   d50a8:	f003 febb 	bl	d8e22 <digitalWrite>
        if (_sck == -1)
   d50ac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d50b0:	3301      	adds	r3, #1
   d50b2:	d101      	bne.n	d50b8 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d50b4:	f7ff fe1b 	bl	d4cee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d50b8:	4628      	mov	r0, r5
   d50ba:	b005      	add	sp, #20
   d50bc:	bd30      	pop	{r4, r5, pc}
   d50be:	bf00      	nop
   d50c0:	000dc508 	.word	0x000dc508
   d50c4:	0007a120 	.word	0x0007a120

000d50c8 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d50c8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d50ca:	f7ff ff99 	bl	d5000 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d50ce:	ba40      	rev16	r0, r0
}
   d50d0:	b280      	uxth	r0, r0
   d50d2:	bd08      	pop	{r3, pc}

000d50d4 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d50d8:	f7ff fe86 	bl	d4de8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d50dc:	21fd      	movs	r1, #253	; 0xfd
   d50de:	4620      	mov	r0, r4
   d50e0:	f7ff ff8e 	bl	d5000 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d50e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d50e8:	d038      	beq.n	d515c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50ea:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50ee:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50f0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d50f4:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50f6:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50fa:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d50fe:	fb02 3311 	mls	r3, r2, r1, r3
   d5102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5106:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5108:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d510c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5110:	4353      	muls	r3, r2
   d5112:	12db      	asrs	r3, r3, #11
   d5114:	4342      	muls	r2, r0
   d5116:	1292      	asrs	r2, r2, #10
   d5118:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d511c:	4353      	muls	r3, r2
   d511e:	129b      	asrs	r3, r3, #10
   d5120:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d5124:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d5128:	4353      	muls	r3, r2
   d512a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d512e:	139b      	asrs	r3, r3, #14
   d5130:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5132:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5134:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d5138:	4352      	muls	r2, r2
   d513a:	11d2      	asrs	r2, r2, #7
   d513c:	434a      	muls	r2, r1
   d513e:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5142:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d5146:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d514a:	bfa8      	it	ge
   d514c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d5150:	131b      	asrs	r3, r3, #12
   d5152:	ee00 3a10 	vmov	s0, r3
   d5156:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d515a:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d515c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5164 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d5160:	bd10      	pop	{r4, pc}
   d5162:	bf00      	nop
   d5164:	7fc00000 	.word	0x7fc00000

000d5168 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5168:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d516a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d516e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d5170:	b085      	sub	sp, #20
   d5172:	4604      	mov	r4, r0
   d5174:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d5176:	d116      	bne.n	d51a6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5178:	7901      	ldrb	r1, [r0, #4]
   d517a:	6800      	ldr	r0, [r0, #0]
   d517c:	f003 f991 	bl	d84a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5180:	6820      	ldr	r0, [r4, #0]
   d5182:	6803      	ldr	r3, [r0, #0]
   d5184:	4629      	mov	r1, r5
   d5186:	689b      	ldr	r3, [r3, #8]
   d5188:	4798      	blx	r3
        _wire -> endTransmission();
   d518a:	6820      	ldr	r0, [r4, #0]
   d518c:	f003 f994 	bl	d84b8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5190:	2201      	movs	r2, #1
   d5192:	7921      	ldrb	r1, [r4, #4]
   d5194:	6820      	ldr	r0, [r4, #0]
   d5196:	f003 f981 	bl	d849c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d519a:	6820      	ldr	r0, [r4, #0]
   d519c:	6803      	ldr	r3, [r0, #0]
   d519e:	695b      	ldr	r3, [r3, #20]
   d51a0:	4798      	blx	r3
   d51a2:	b2c5      	uxtb	r5, r0
   d51a4:	e02e      	b.n	d5204 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d51a6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d51aa:	3301      	adds	r3, #1
   d51ac:	d10e      	bne.n	d51cc <_ZN15Adafruit_BME2805read8Eh+0x64>
   d51ae:	4b17      	ldr	r3, [pc, #92]	; (d520c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d51b0:	4a17      	ldr	r2, [pc, #92]	; (d5210 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d51b2:	9300      	str	r3, [sp, #0]
   d51b4:	9202      	str	r2, [sp, #8]
   d51b6:	2300      	movs	r3, #0
   d51b8:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d51ba:	4668      	mov	r0, sp
   d51bc:	f88d 3004 	strb.w	r3, [sp, #4]
   d51c0:	f88d 200c 	strb.w	r2, [sp, #12]
   d51c4:	f88d 300d 	strb.w	r3, [sp, #13]
   d51c8:	f7ff fd98 	bl	d4cfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d51cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51d0:	2100      	movs	r1, #0
   d51d2:	b280      	uxth	r0, r0
   d51d4:	f003 fe25 	bl	d8e22 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d51d8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d51dc:	4620      	mov	r0, r4
   d51de:	f7ff fd4f 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d51e2:	2100      	movs	r1, #0
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff fd4b 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
   d51ea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d51ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51f0:	2101      	movs	r1, #1
   d51f2:	b280      	uxth	r0, r0
   d51f4:	f003 fe15 	bl	d8e22 <digitalWrite>
        if (_sck == -1)
   d51f8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d51fc:	3301      	adds	r3, #1
   d51fe:	d101      	bne.n	d5204 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d5200:	f7ff fd75 	bl	d4cee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d5204:	4628      	mov	r0, r5
   d5206:	b005      	add	sp, #20
   d5208:	bd30      	pop	{r4, r5, pc}
   d520a:	bf00      	nop
   d520c:	000dc508 	.word	0x000dc508
   d5210:	0007a120 	.word	0x0007a120

000d5214 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d5214:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5216:	21f3      	movs	r1, #243	; 0xf3
   d5218:	f7ff ffa6 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d521c:	f000 0001 	and.w	r0, r0, #1
   d5220:	bd08      	pop	{r3, pc}

000d5222 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5222:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5224:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5226:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5228:	f7ff ff4e 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d522c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d522e:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff ff49 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5236:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5238:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff44 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5240:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5242:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5244:	4620      	mov	r0, r4
   d5246:	f7ff ff3f 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d524a:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d524c:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff ff3a 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5254:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5256:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5258:	4620      	mov	r0, r4
   d525a:	f7ff ff35 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d525e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5260:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5262:	4620      	mov	r0, r4
   d5264:	f7ff ff30 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5268:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d526a:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff ff2b 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5272:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5274:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5276:	4620      	mov	r0, r4
   d5278:	f7ff ff26 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d527c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d527e:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5280:	4620      	mov	r0, r4
   d5282:	f7ff ff21 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5286:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5288:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ff1c 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
   d5290:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5292:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff ff17 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d529a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d529c:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff ff62 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52a4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52a6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d52aa:	4620      	mov	r0, r4
   d52ac:	f7ff ff0c 	bl	d50c8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52b0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d52b2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52b4:	4620      	mov	r0, r4
   d52b6:	f7ff ff57 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52ba:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52bc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52c0:	4620      	mov	r0, r4
   d52c2:	f7ff ff51 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
   d52c6:	21e5      	movs	r1, #229	; 0xe5
   d52c8:	4605      	mov	r5, r0
   d52ca:	4620      	mov	r0, r4
   d52cc:	f7ff ff4c 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
   d52d0:	f000 000f 	and.w	r0, r0, #15
   d52d4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52d8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d52da:	21e6      	movs	r1, #230	; 0xe6
   d52dc:	4620      	mov	r0, r4
   d52de:	f7ff ff43 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
   d52e2:	21e5      	movs	r1, #229	; 0xe5
   d52e4:	4605      	mov	r5, r0
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff ff3e 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
   d52ec:	1100      	asrs	r0, r0, #4
   d52ee:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d52f2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d52f4:	21e7      	movs	r1, #231	; 0xe7
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7ff ff36 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
   d52fc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d5300:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5304 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d5304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d5306:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d530a:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d530c:	4604      	mov	r4, r0
   d530e:	460e      	mov	r6, r1
   d5310:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5312:	d111      	bne.n	d5338 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5314:	7901      	ldrb	r1, [r0, #4]
   d5316:	6800      	ldr	r0, [r0, #0]
   d5318:	f003 f8c3 	bl	d84a2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d531c:	6820      	ldr	r0, [r4, #0]
   d531e:	6803      	ldr	r3, [r0, #0]
   d5320:	4631      	mov	r1, r6
   d5322:	689b      	ldr	r3, [r3, #8]
   d5324:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d5326:	6820      	ldr	r0, [r4, #0]
   d5328:	6803      	ldr	r3, [r0, #0]
   d532a:	4629      	mov	r1, r5
   d532c:	689b      	ldr	r3, [r3, #8]
   d532e:	4798      	blx	r3
        _wire -> endTransmission();
   d5330:	6820      	ldr	r0, [r4, #0]
   d5332:	f003 f8c1 	bl	d84b8 <_ZN7TwoWire15endTransmissionEv>
   d5336:	e02d      	b.n	d5394 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d5338:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d533c:	3301      	adds	r3, #1
   d533e:	d10e      	bne.n	d535e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d5340:	4b15      	ldr	r3, [pc, #84]	; (d5398 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5342:	4a16      	ldr	r2, [pc, #88]	; (d539c <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d5344:	9300      	str	r3, [sp, #0]
   d5346:	9202      	str	r2, [sp, #8]
   d5348:	2300      	movs	r3, #0
   d534a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d534c:	4668      	mov	r0, sp
   d534e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5352:	f88d 200c 	strb.w	r2, [sp, #12]
   d5356:	f88d 300d 	strb.w	r3, [sp, #13]
   d535a:	f7ff fccf 	bl	d4cfc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d535e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5362:	2100      	movs	r1, #0
   d5364:	b280      	uxth	r0, r0
   d5366:	f003 fd5c 	bl	d8e22 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d536a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d536e:	4620      	mov	r0, r4
   d5370:	f7ff fc86 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5374:	4629      	mov	r1, r5
   d5376:	4620      	mov	r0, r4
   d5378:	f7ff fc82 	bl	d4c80 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d537c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5380:	2101      	movs	r1, #1
   d5382:	b280      	uxth	r0, r0
   d5384:	f003 fd4d 	bl	d8e22 <digitalWrite>
    if (_sck == -1)
   d5388:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d538c:	3301      	adds	r3, #1
   d538e:	d101      	bne.n	d5394 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d5390:	f7ff fcad 	bl	d4cee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d5394:	b004      	add	sp, #16
   d5396:	bd70      	pop	{r4, r5, r6, pc}
   d5398:	000dc508 	.word	0x000dc508
   d539c:	0007a120 	.word	0x0007a120

000d53a0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d53a2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53a6:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d53aa:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d53ae:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d53b2:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d53b6:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d53ba:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d53be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d53c2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d53c6:	f366 1347 	bfi	r3, r6, #5, #3
   d53ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d53ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d53d2:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d53d6:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d53d8:	f367 0302 	bfi	r3, r7, #0, #3
   d53dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d53e0:	f006 0207 	and.w	r2, r6, #7
   d53e4:	21f2      	movs	r1, #242	; 0xf2
   d53e6:	f7ff ff8d 	bl	d5304 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d53ea:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d53ee:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d53f2:	f002 0107 	and.w	r1, r2, #7
   d53f6:	009b      	lsls	r3, r3, #2
   d53f8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d53fc:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5400:	4620      	mov	r0, r4
   d5402:	21f5      	movs	r1, #245	; 0xf5
   d5404:	f7ff ff7e 	bl	d5304 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5408:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d540c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5410:	f002 0107 	and.w	r1, r2, #7
   d5414:	009b      	lsls	r3, r3, #2
   d5416:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d541a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d541e:	4620      	mov	r0, r4
   d5420:	21f4      	movs	r1, #244	; 0xf4
}
   d5422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5426:	f7ff bf6d 	b.w	d5304 <_ZN15Adafruit_BME2806write8Ehh>

000d542a <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d542a:	b530      	push	{r4, r5, lr}
   d542c:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d542e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5432:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d5434:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5436:	d103      	bne.n	d5440 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d5438:	6820      	ldr	r0, [r4, #0]
   d543a:	f002 fffb 	bl	d8434 <_ZN7TwoWire5beginEv>
   d543e:	e022      	b.n	d5486 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d5440:	2101      	movs	r1, #1
   d5442:	b280      	uxth	r0, r0
   d5444:	f003 fced 	bl	d8e22 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5448:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d544c:	2101      	movs	r1, #1
   d544e:	b280      	uxth	r0, r0
   d5450:	f003 fcd6 	bl	d8e00 <pinMode>
        if (_sck == -1) {
   d5454:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5458:	1c43      	adds	r3, r0, #1
   d545a:	d104      	bne.n	d5466 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d545c:	f7ff fbf8 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5460:	f001 fe00 	bl	d7064 <_ZN8SPIClass5beginEv>
   d5464:	e00f      	b.n	d5486 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d5466:	2101      	movs	r1, #1
   d5468:	b280      	uxth	r0, r0
   d546a:	f003 fcc9 	bl	d8e00 <pinMode>
            pinMode(_mosi, OUTPUT);
   d546e:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5472:	2101      	movs	r1, #1
   d5474:	b280      	uxth	r0, r0
   d5476:	f003 fcc3 	bl	d8e00 <pinMode>
            pinMode(_miso, INPUT);
   d547a:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d547e:	2100      	movs	r1, #0
   d5480:	b280      	uxth	r0, r0
   d5482:	f003 fcbd 	bl	d8e00 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5486:	21d0      	movs	r1, #208	; 0xd0
   d5488:	4620      	mov	r0, r4
   d548a:	f7ff fe6d 	bl	d5168 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d548e:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5490:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5492:	d120      	bne.n	d54d6 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5494:	4620      	mov	r0, r4
   d5496:	22b6      	movs	r2, #182	; 0xb6
   d5498:	21e0      	movs	r1, #224	; 0xe0
   d549a:	f7ff ff33 	bl	d5304 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d549e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d54a2:	f002 fa67 	bl	d7974 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff feb4 	bl	d5214 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d54ac:	4605      	mov	r5, r0
   d54ae:	b108      	cbz	r0, d54b4 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d54b0:	2064      	movs	r0, #100	; 0x64
   d54b2:	e7f6      	b.n	d54a2 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d54b4:	4620      	mov	r0, r4
   d54b6:	f7ff feb4 	bl	d5222 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d54ba:	2305      	movs	r3, #5
   d54bc:	9300      	str	r3, [sp, #0]
   d54be:	461a      	mov	r2, r3
   d54c0:	2103      	movs	r1, #3
   d54c2:	4620      	mov	r0, r4
   d54c4:	9502      	str	r5, [sp, #8]
   d54c6:	9501      	str	r5, [sp, #4]
   d54c8:	f7ff ff6a 	bl	d53a0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d54cc:	2064      	movs	r0, #100	; 0x64
   d54ce:	f002 fa51 	bl	d7974 <delay>
   d54d2:	2001      	movs	r0, #1
   d54d4:	e000      	b.n	d54d8 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d54d6:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d54d8:	b005      	add	sp, #20
   d54da:	bd30      	pop	{r4, r5, pc}

000d54dc <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d54dc:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d54de:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d54e0:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d54e2:	f003 fd21 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d54e6:	6020      	str	r0, [r4, #0]
	return init();
   d54e8:	4620      	mov	r0, r4
}
   d54ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d54ee:	f7ff bf9c 	b.w	d542a <_ZN15Adafruit_BME2804initEv>

000d54f2 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d54f2:	f001 ba3d 	b.w	d6970 <HAL_Pin_Map>

000d54f6 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d54f6:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d54f8:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d54fc:	6803      	ldr	r3, [r0, #0]
   d54fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5500:	4798      	blx	r3
}
   d5502:	3000      	adds	r0, #0
   d5504:	bf18      	it	ne
   d5506:	2001      	movne	r0, #1
   d5508:	bd08      	pop	{r3, pc}

000d550a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d550a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d550c:	4606      	mov	r6, r0
   d550e:	460f      	mov	r7, r1
   d5510:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5512:	b1c4      	cbz	r4, d5546 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5514:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5518:	6803      	ldr	r3, [r0, #0]
   d551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d551c:	4798      	blx	r3
   d551e:	b908      	cbnz	r0, d5524 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5520:	2000      	movs	r0, #0
   d5522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5524:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5528:	2cfa      	cmp	r4, #250	; 0xfa
   d552a:	6803      	ldr	r3, [r0, #0]
   d552c:	4625      	mov	r5, r4
   d552e:	bfa8      	it	ge
   d5530:	25fa      	movge	r5, #250	; 0xfa
   d5532:	68db      	ldr	r3, [r3, #12]
   d5534:	462a      	mov	r2, r5
   d5536:	4639      	mov	r1, r7
   d5538:	4798      	blx	r3
   d553a:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d553c:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d553e:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5540:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5542:	d0e6      	beq.n	d5512 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5544:	e7ec      	b.n	d5520 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5546:	2001      	movs	r0, #1
}
   d5548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d554a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d554a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d554e:	4606      	mov	r6, r0
   d5550:	4688      	mov	r8, r1
   d5552:	4691      	mov	r9, r2
   d5554:	461f      	mov	r7, r3
   d5556:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5558:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d555a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d555e:	6803      	ldr	r3, [r0, #0]
   d5560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5562:	4798      	blx	r3
   d5564:	b1d0      	cbz	r0, d559c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5566:	2d00      	cmp	r5, #0
   d5568:	db18      	blt.n	d559c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d556a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d556e:	6803      	ldr	r3, [r0, #0]
   d5570:	691b      	ldr	r3, [r3, #16]
   d5572:	4798      	blx	r3
   d5574:	b160      	cbz	r0, d5590 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5576:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d557a:	6803      	ldr	r3, [r0, #0]
   d557c:	695b      	ldr	r3, [r3, #20]
   d557e:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5580:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5584:	3401      	adds	r4, #1
   d5586:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5588:	454c      	cmp	r4, r9
   d558a:	d007      	beq.n	d559c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d558c:	463d      	mov	r5, r7
   d558e:	e7ec      	b.n	d556a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5590:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5592:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5594:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5596:	f002 f9ed 	bl	d7974 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d559a:	e7de      	b.n	d555a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d559c:	4620      	mov	r0, r4
   d559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d55a2 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d55a2:	b570      	push	{r4, r5, r6, lr}
   d55a4:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d55a6:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d55aa:	2296      	movs	r2, #150	; 0x96
   d55ac:	2100      	movs	r1, #0
   d55ae:	4628      	mov	r0, r5
   d55b0:	f006 f8d8 	bl	db764 <memset>
  strcpy((char *)buffer, servername);
   d55b4:	6861      	ldr	r1, [r4, #4]
   d55b6:	4628      	mov	r0, r5
   d55b8:	f006 f90e 	bl	db7d8 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d55bc:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55c0:	8922      	ldrh	r2, [r4, #8]
   d55c2:	6803      	ldr	r3, [r0, #0]
   d55c4:	4629      	mov	r1, r5
   d55c6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d55c8:	2300      	movs	r3, #0
   d55ca:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d55cc:	3000      	adds	r0, #0
   d55ce:	bf18      	it	ne
   d55d0:	2001      	movne	r0, #1
   d55d2:	bd70      	pop	{r4, r5, r6, pc}

000d55d4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d55d4:	b510      	push	{r4, lr}
   d55d6:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d55d8:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d55dc:	6803      	ldr	r3, [r0, #0]
   d55de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55e0:	4798      	blx	r3
   d55e2:	b120      	cbz	r0, d55ee <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d55e4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55e8:	6803      	ldr	r3, [r0, #0]
   d55ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55ec:	4798      	blx	r3
  }
  return true;
}
   d55ee:	2001      	movs	r0, #1
   d55f0:	bd10      	pop	{r4, pc}

000d55f2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d55f2:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d55f4:	6803      	ldr	r3, [r0, #0]
   d55f6:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d55f8:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d55fa:	4798      	blx	r3
   d55fc:	b9c8      	cbnz	r0, d5632 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d55fe:	4620      	mov	r0, r4
   d5600:	f000 fa5f 	bl	d5ac2 <_ZN13Adafruit_MQTT7connectEv>
   d5604:	2504      	movs	r5, #4
   d5606:	b170      	cbz	r0, d5626 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5608:	3d01      	subs	r5, #1
   d560a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d560e:	d00a      	beq.n	d5626 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5610:	4620      	mov	r0, r4
   d5612:	f000 f8a9 	bl	d5768 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5616:	f241 3088 	movw	r0, #5000	; 0x1388
   d561a:	f002 f9ab 	bl	d7974 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d561e:	4620      	mov	r0, r4
   d5620:	f000 fa4f 	bl	d5ac2 <_ZN13Adafruit_MQTT7connectEv>
   d5624:	e7ef      	b.n	d5606 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5626:	6823      	ldr	r3, [r4, #0]
   d5628:	4620      	mov	r0, r4
   d562a:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d562c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5630:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5632:	bd70      	pop	{r4, r5, r6, pc}

000d5634 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5634:	f001 b99c 	b.w	d6970 <HAL_Pin_Map>

000d5638 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5638:	b570      	push	{r4, r5, r6, lr}
   d563a:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d563c:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d563e:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5640:	f006 f8ed 	bl	db81e <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5644:	1203      	asrs	r3, r0, #8
   d5646:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5648:	7060      	strb	r0, [r4, #1]
   d564a:	b285      	uxth	r5, r0
   d564c:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d564e:	462a      	mov	r2, r5
   d5650:	4631      	mov	r1, r6
   d5652:	4620      	mov	r0, r4
   d5654:	f006 f925 	bl	db8a2 <strncpy>
  return p+len;
}
   d5658:	1960      	adds	r0, r4, r5
   d565a:	bd70      	pop	{r4, r5, r6, pc}

000d565c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d565c:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d565e:	6103      	str	r3, [r0, #16]
  password = pass;
   d5660:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5662:	4d0d      	ldr	r5, [pc, #52]	; (d5698 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5664:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5666:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5668:	4a0c      	ldr	r2, [pc, #48]	; (d569c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d566a:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d566c:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d566e:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5670:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5672:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5676:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d567a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d567e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5682:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5686:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5688:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d568a:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d568e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5692:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5696:	bd30      	pop	{r4, r5, pc}
   d5698:	000dc580 	.word	0x000dc580
   d569c:	000dc5a9 	.word	0x000dc5a9

000d56a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56a4:	fa0f fa83 	sxth.w	sl, r3
   d56a8:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56aa:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56ac:	699d      	ldr	r5, [r3, #24]
   d56ae:	2201      	movs	r2, #1
   d56b0:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d56b2:	4606      	mov	r6, r0
   d56b4:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d56b6:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d56b8:	b2c0      	uxtb	r0, r0
   d56ba:	2801      	cmp	r0, #1
   d56bc:	d001      	beq.n	d56c2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d56be:	2000      	movs	r0, #0
   d56c0:	e034      	b.n	d572c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d56c2:	1c65      	adds	r5, r4, #1
   d56c4:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d56c8:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d56ca:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d56ce:	6833      	ldr	r3, [r6, #0]
   d56d0:	699b      	ldr	r3, [r3, #24]
   d56d2:	2201      	movs	r2, #1
   d56d4:	461f      	mov	r7, r3
   d56d6:	4629      	mov	r1, r5
   d56d8:	4653      	mov	r3, sl
   d56da:	4630      	mov	r0, r6
   d56dc:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d56de:	b2c0      	uxtb	r0, r0
   d56e0:	2801      	cmp	r0, #1
   d56e2:	d1ec      	bne.n	d56be <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d56e4:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d56e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d56ec:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d56ee:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d56f2:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d56f6:	d0e2      	beq.n	d56be <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d56f8:	061b      	lsls	r3, r3, #24
   d56fa:	d4e8      	bmi.n	d56ce <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d56fc:	9b01      	ldr	r3, [sp, #4]
   d56fe:	1b2c      	subs	r4, r5, r4
   d5700:	1b1b      	subs	r3, r3, r4
   d5702:	3b01      	subs	r3, #1
   d5704:	4599      	cmp	r9, r3
   d5706:	6833      	ldr	r3, [r6, #0]
   d5708:	d906      	bls.n	d5718 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d570a:	9a01      	ldr	r2, [sp, #4]
   d570c:	699f      	ldr	r7, [r3, #24]
   d570e:	3a01      	subs	r2, #1
   d5710:	1b12      	subs	r2, r2, r4
   d5712:	4653      	mov	r3, sl
   d5714:	b292      	uxth	r2, r2
   d5716:	e003      	b.n	d5720 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5718:	699f      	ldr	r7, [r3, #24]
   d571a:	fa1f f289 	uxth.w	r2, r9
   d571e:	4653      	mov	r3, sl
   d5720:	4629      	mov	r1, r5
   d5722:	4630      	mov	r0, r6
   d5724:	47b8      	blx	r7
   d5726:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5728:	4420      	add	r0, r4
   d572a:	b280      	uxth	r0, r0
}
   d572c:	b003      	add	sp, #12
   d572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5734 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5736:	4605      	mov	r5, r0
   d5738:	460c      	mov	r4, r1
   d573a:	4616      	mov	r6, r2
   d573c:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d573e:	463b      	mov	r3, r7
   d5740:	2296      	movs	r2, #150	; 0x96
   d5742:	4621      	mov	r1, r4
   d5744:	4628      	mov	r0, r5
   d5746:	f7ff ffab 	bl	d56a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d574a:	b148      	cbz	r0, d5760 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d574c:	7823      	ldrb	r3, [r4, #0]
   d574e:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5752:	d005      	beq.n	d5760 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5754:	f002 fd74 	bl	d8240 <_Z16_fetch_usbserialv>
   d5758:	4902      	ldr	r1, [pc, #8]	; (d5764 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d575a:	f001 ff36 	bl	d75ca <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d575e:	e7ee      	b.n	d573e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5762:	bf00      	nop
   d5764:	000dc5aa 	.word	0x000dc5aa

000d5768 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5768:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d576a:	23e0      	movs	r3, #224	; 0xe0
   d576c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5770:	2300      	movs	r3, #0
   d5772:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5776:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5778:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d577a:	695b      	ldr	r3, [r3, #20]
   d577c:	2202      	movs	r2, #2
   d577e:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d5782:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5784:	6823      	ldr	r3, [r4, #0]
   d5786:	4620      	mov	r0, r4
   d5788:	691b      	ldr	r3, [r3, #16]

}
   d578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d578e:	4718      	bx	r3

000d5790 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5790:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d5794:	b530      	push	{r4, r5, lr}
   d5796:	4613      	mov	r3, r2
   d5798:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d579c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d57a0:	428d      	cmp	r5, r1
   d57a2:	d00f      	beq.n	d57c4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57a4:	42a3      	cmp	r3, r4
   d57a6:	d1f9      	bne.n	d579c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d57a8:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d57aa:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d57ae:	b924      	cbnz	r4, d57ba <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d57b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d57b4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d57b8:	e004      	b.n	d57c4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d57ba:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57bc:	2b05      	cmp	r3, #5
   d57be:	d1f4      	bne.n	d57aa <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d57c0:	2000      	movs	r0, #0
   d57c2:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d57c4:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d57c6:	bd30      	pop	{r4, r5, pc}

000d57c8 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57cc:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d57d0:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57d2:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57d4:	2296      	movs	r2, #150	; 0x96
   d57d6:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57d8:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57da:	f7ff ff61 	bl	d56a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d57de:	4606      	mov	r6, r0
   d57e0:	b310      	cbz	r0, d5828 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d57e2:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d57e6:	b2bb      	uxth	r3, r7
   d57e8:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d57ea:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d57ee:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d57f2:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d57f4:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d57f6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d57fa:	f1bb 0f00 	cmp.w	fp, #0
   d57fe:	d00e      	beq.n	d581e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5800:	f8db 1000 	ldr.w	r1, [fp]
   d5804:	9103      	str	r1, [sp, #12]
   d5806:	4608      	mov	r0, r1
   d5808:	f006 f809 	bl	db81e <strlen>
   d580c:	42b8      	cmp	r0, r7
   d580e:	4680      	mov	r8, r0
   d5810:	9903      	ldr	r1, [sp, #12]
   d5812:	d104      	bne.n	d581e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5814:	463a      	mov	r2, r7
   d5816:	9802      	ldr	r0, [sp, #8]
   d5818:	f006 f80a 	bl	db830 <strncasecmp>
   d581c:	b128      	cbz	r0, d582a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d581e:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5820:	2d05      	cmp	r5, #5
   d5822:	d1e8      	bne.n	d57f6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5824:	2000      	movs	r0, #0
   d5826:	e04a      	b.n	d58be <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5828:	e049      	b.n	d58be <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d582a:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d582e:	f00a 0a06 	and.w	sl, sl, #6
   d5832:	f1ba 0f02 	cmp.w	sl, #2
   d5836:	d13f      	bne.n	d58b8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5838:	19e2      	adds	r2, r4, r7
   d583a:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d583e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d5842:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d5846:	2214      	movs	r2, #20
   d5848:	2100      	movs	r1, #0
   d584a:	f10b 0005 	add.w	r0, fp, #5
   d584e:	f005 ff89 	bl	db764 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d5852:	9b01      	ldr	r3, [sp, #4]
   d5854:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5858:	30fc      	adds	r0, #252	; 0xfc
   d585a:	4406      	add	r6, r0
   d585c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5860:	ebca 0606 	rsb	r6, sl, r6
   d5864:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5866:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5868:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d586c:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5870:	bf28      	it	cs
   d5872:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5874:	4451      	add	r1, sl
   d5876:	4632      	mov	r2, r6
   d5878:	4449      	add	r1, r9
   d587a:	3005      	adds	r0, #5
   d587c:	f005 ff57 	bl	db72e <memmove>
  subscriptions[i]->datalen = datalen;
   d5880:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5884:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5886:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d588a:	f003 0306 	and.w	r3, r3, #6
   d588e:	2b02      	cmp	r3, #2
   d5890:	d10f      	bne.n	d58b2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5892:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5896:	123b      	asrs	r3, r7, #8
   d5898:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d589c:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d589e:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d58a2:	2240      	movs	r2, #64	; 0x40
   d58a4:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d58a8:	695b      	ldr	r3, [r3, #20]
   d58aa:	2204      	movs	r2, #4
   d58ac:	a905      	add	r1, sp, #20
   d58ae:	4620      	mov	r0, r4
   d58b0:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d58b2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d58b6:	e002      	b.n	d58be <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d58b8:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d58ba:	4682      	mov	sl, r0
   d58bc:	e7c3      	b.n	d5846 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d58be:	b007      	add	sp, #28
   d58c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d58c4 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d58c4:	b538      	push	{r3, r4, r5, lr}
   d58c6:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d58c8:	4608      	mov	r0, r1
   d58ca:	2310      	movs	r3, #16
   d58cc:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d58d0:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d58d2:	4929      	ldr	r1, [pc, #164]	; (d5978 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d58d4:	f7ff feb0 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d58d8:	2304      	movs	r3, #4
   d58da:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d58dc:	2302      	movs	r3, #2
   d58de:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d58e0:	69a3      	ldr	r3, [r4, #24]
   d58e2:	b1ab      	cbz	r3, d5910 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d58e4:	781b      	ldrb	r3, [r3, #0]
   d58e6:	b19b      	cbz	r3, d5910 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d58e8:	2306      	movs	r3, #6
   d58ea:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d58ec:	f894 3020 	ldrb.w	r3, [r4, #32]
   d58f0:	2b01      	cmp	r3, #1
   d58f2:	d101      	bne.n	d58f8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d58f4:	230e      	movs	r3, #14
   d58f6:	e002      	b.n	d58fe <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d58f8:	2b02      	cmp	r3, #2
   d58fa:	d101      	bne.n	d5900 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d58fc:	231e      	movs	r3, #30
   d58fe:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5900:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5904:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5906:	bf02      	ittt	eq
   d5908:	7843      	ldrbeq	r3, [r0, #1]
   d590a:	f043 0320 	orreq.w	r3, r3, #32
   d590e:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5910:	6923      	ldr	r3, [r4, #16]
   d5912:	781b      	ldrb	r3, [r3, #0]
   d5914:	b11b      	cbz	r3, d591e <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5916:	7843      	ldrb	r3, [r0, #1]
   d5918:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d591c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d591e:	6963      	ldr	r3, [r4, #20]
   d5920:	781b      	ldrb	r3, [r3, #0]
   d5922:	b11b      	cbz	r3, d592c <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5924:	7843      	ldrb	r3, [r0, #1]
   d5926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d592a:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d592c:	2301      	movs	r3, #1
   d592e:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5930:	232c      	movs	r3, #44	; 0x2c
   d5932:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5934:	68e1      	ldr	r1, [r4, #12]
   d5936:	780b      	ldrb	r3, [r1, #0]
   d5938:	b11b      	cbz	r3, d5942 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d593a:	3004      	adds	r0, #4
   d593c:	f7ff fe7c 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
   d5940:	e002      	b.n	d5948 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5942:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5944:	7143      	strb	r3, [r0, #5]
      p++;
   d5946:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5948:	69a1      	ldr	r1, [r4, #24]
   d594a:	b131      	cbz	r1, d595a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d594c:	780b      	ldrb	r3, [r1, #0]
   d594e:	b123      	cbz	r3, d595a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5950:	f7ff fe72 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5954:	69e1      	ldr	r1, [r4, #28]
   d5956:	f7ff fe6f 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d595a:	6921      	ldr	r1, [r4, #16]
   d595c:	780b      	ldrb	r3, [r1, #0]
   d595e:	b10b      	cbz	r3, d5964 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5960:	f7ff fe6a 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5964:	6961      	ldr	r1, [r4, #20]
   d5966:	780b      	ldrb	r3, [r1, #0]
   d5968:	b10b      	cbz	r3, d596e <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d596a:	f7ff fe65 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d596e:	1b40      	subs	r0, r0, r5
   d5970:	b2c0      	uxtb	r0, r0
   d5972:	1e83      	subs	r3, r0, #2
   d5974:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5976:	bd38      	pop	{r3, r4, r5, pc}
   d5978:	000dc5c9 	.word	0x000dc5c9

000d597c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5980:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5982:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5984:	460e      	mov	r6, r1
   d5986:	4691      	mov	r9, r2
   d5988:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d598a:	f005 ff48 	bl	db81e <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d598e:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5992:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5996:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5998:	f1b8 0f00 	cmp.w	r8, #0
   d599c:	d101      	bne.n	d59a2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d599e:	1c83      	adds	r3, r0, #2
   d59a0:	e000      	b.n	d59a4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d59a2:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59a4:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d59a8:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d59aa:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59ac:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d59b0:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59b2:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d59b6:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d59b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d59bc:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d59be:	bf18      	it	ne
   d59c0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d59c4:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d59c8:	2b00      	cmp	r3, #0
   d59ca:	d1f5      	bne.n	d59b8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d59cc:	4649      	mov	r1, r9
   d59ce:	f7ff fe33 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>
   d59d2:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d59d4:	f1b8 0f00 	cmp.w	r8, #0
   d59d8:	d00c      	beq.n	d59f4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d59da:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59de:	0a12      	lsrs	r2, r2, #8
   d59e0:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d59e2:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59e6:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d59e8:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d59ec:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d59ee:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d59f0:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d59f4:	4622      	mov	r2, r4
   d59f6:	4639      	mov	r1, r7
   d59f8:	4618      	mov	r0, r3
   d59fa:	f005 fe98 	bl	db72e <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d59fe:	4420      	add	r0, r4
   d5a00:	1b80      	subs	r0, r0, r6
}
   d5a02:	b280      	uxth	r0, r0
   d5a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a08 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a0a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a0e:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a12:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a14:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5a18:	4613      	mov	r3, r2
   d5a1a:	460a      	mov	r2, r1
   d5a1c:	4629      	mov	r1, r5
   d5a1e:	f7ff ffad 	bl	d597c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5a22:	6823      	ldr	r3, [r4, #0]
   d5a24:	4602      	mov	r2, r0
   d5a26:	695b      	ldr	r3, [r3, #20]
   d5a28:	4629      	mov	r1, r5
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	4798      	blx	r3
   d5a2e:	b908      	cbnz	r0, d5a34 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5a30:	2000      	movs	r0, #0
   d5a32:	e017      	b.n	d5a64 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5a34:	b1b6      	cbz	r6, d5a64 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5a36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5a3a:	2296      	movs	r2, #150	; 0x96
   d5a3c:	4629      	mov	r1, r5
   d5a3e:	4620      	mov	r0, r4
   d5a40:	f7ff fe2e 	bl	d56a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5a44:	2804      	cmp	r0, #4
   d5a46:	d1f3      	bne.n	d5a30 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5a48:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5a4c:	111b      	asrs	r3, r3, #4
   d5a4e:	2b04      	cmp	r3, #4
   d5a50:	d1ee      	bne.n	d5a30 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5a52:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5a54:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5a58:	ba5b      	rev16	r3, r3
   d5a5a:	3301      	adds	r3, #1
   d5a5c:	b29b      	uxth	r3, r3
   d5a5e:	1ac3      	subs	r3, r0, r3
   d5a60:	4258      	negs	r0, r3
   d5a62:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5a64:	b002      	add	sp, #8
   d5a66:	bd70      	pop	{r4, r5, r6, pc}

000d5a68 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a6a:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5a6c:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5a6e:	461f      	mov	r7, r3
   d5a70:	460e      	mov	r6, r1
   d5a72:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5a74:	f005 fed3 	bl	db81e <strlen>
   d5a78:	9700      	str	r7, [sp, #0]
   d5a7a:	b283      	uxth	r3, r0
   d5a7c:	4622      	mov	r2, r4
   d5a7e:	4631      	mov	r1, r6
   d5a80:	4628      	mov	r0, r5
   d5a82:	f7ff ffc1 	bl	d5a08 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5a86:	b003      	add	sp, #12
   d5a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a8a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5a8a:	b538      	push	{r3, r4, r5, lr}
   d5a8c:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5a8e:	2382      	movs	r3, #130	; 0x82
   d5a90:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5a92:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5a94:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5a98:	0a09      	lsrs	r1, r1, #8
   d5a9a:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5a9c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5aa0:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5aa2:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5aa6:	3101      	adds	r1, #1
   d5aa8:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5aac:	4611      	mov	r1, r2
   d5aae:	1d20      	adds	r0, r4, #4
   d5ab0:	f7ff fdc2 	bl	d5638 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5ab4:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5ab8:	1b00      	subs	r0, r0, r4
   d5aba:	b2c0      	uxtb	r0, r0
   d5abc:	1e83      	subs	r3, r0, #2
   d5abe:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5ac0:	bd38      	pop	{r3, r4, r5, pc}

000d5ac2 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5aca:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5acc:	4798      	blx	r3
   d5ace:	b918      	cbnz	r0, d5ad8 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5ad0:	f04f 30ff 	mov.w	r0, #4294967295
   d5ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5ad8:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5adc:	4629      	mov	r1, r5
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff fef0 	bl	d58c4 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5ae4:	6823      	ldr	r3, [r4, #0]
   d5ae6:	b282      	uxth	r2, r0
   d5ae8:	695b      	ldr	r3, [r3, #20]
   d5aea:	4629      	mov	r1, r5
   d5aec:	4620      	mov	r0, r4
   d5aee:	4798      	blx	r3
   d5af0:	2800      	cmp	r0, #0
   d5af2:	d0ed      	beq.n	d5ad0 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5af4:	f241 7370 	movw	r3, #6000	; 0x1770
   d5af8:	2296      	movs	r2, #150	; 0x96
   d5afa:	4629      	mov	r1, r5
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff fdcf 	bl	d56a0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5b02:	b2c0      	uxtb	r0, r0
   d5b04:	2804      	cmp	r0, #4
   d5b06:	d1e3      	bne.n	d5ad0 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5b08:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5b0a:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5b0e:	d1df      	bne.n	d5ad0 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5b10:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5b14:	b110      	cbz	r0, d5b1c <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d5b16:	b240      	sxtb	r0, r0
   d5b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b1c:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5b20:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d5b24:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5b28:	b1fb      	cbz	r3, d5b6a <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5b2a:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5b2c:	683a      	ldr	r2, [r7, #0]
   d5b2e:	4629      	mov	r1, r5
   d5b30:	7913      	ldrb	r3, [r2, #4]
   d5b32:	6812      	ldr	r2, [r2, #0]
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff ffa8 	bl	d5a8a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5b3a:	6823      	ldr	r3, [r4, #0]
   d5b3c:	b282      	uxth	r2, r0
   d5b3e:	695b      	ldr	r3, [r3, #20]
   d5b40:	4629      	mov	r1, r5
   d5b42:	4620      	mov	r0, r4
   d5b44:	4798      	blx	r3
   d5b46:	2800      	cmp	r0, #0
   d5b48:	d0c2      	beq.n	d5ad0 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5b4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5b4e:	2209      	movs	r2, #9
   d5b50:	4629      	mov	r1, r5
   d5b52:	4620      	mov	r0, r4
   d5b54:	f7ff fdee 	bl	d5734 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5b58:	b938      	cbnz	r0, d5b6a <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5b5a:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5b5c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5b60:	d1e4      	bne.n	d5b2c <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5b62:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5b6a:	4547      	cmp	r7, r8
   d5b6c:	d1da      	bne.n	d5b24 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d5b6e:	2000      	movs	r0, #0
   d5b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b74 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5b74:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5b76:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5b7a:	7203      	strb	r3, [r0, #8]
}
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5b7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b80:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5b82:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5b84:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5b86:	a901      	add	r1, sp, #4
   d5b88:	f001 fbb0 	bl	d72ec <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5b8c:	7a23      	ldrb	r3, [r4, #8]
   d5b8e:	aa01      	add	r2, sp, #4
   d5b90:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b94:	f7ff ff68 	bl	d5a68 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5b98:	b004      	add	sp, #16
   d5b9a:	bd10      	pop	{r4, pc}

000d5b9c <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d5b9c:	f7ff bfef 	b.w	d5b7e <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5ba0 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	b092      	sub	sp, #72	; 0x48
   d5ba4:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5ba6:	460b      	mov	r3, r1
   d5ba8:	2200      	movs	r2, #0
   d5baa:	490b      	ldr	r1, [pc, #44]	; (d5bd8 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d5bac:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5bae:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d5bb2:	f001 f9d1 	bl	d6f58 <sprintf>
  sprintf(sout, fmt, val);
   d5bb6:	ed9d 0b00 	vldr	d0, [sp]
   d5bba:	a902      	add	r1, sp, #8
   d5bbc:	ec53 2b10 	vmov	r2, r3, d0
   d5bc0:	a807      	add	r0, sp, #28
   d5bc2:	f001 f9c9 	bl	d6f58 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5bc6:	7a23      	ldrb	r3, [r4, #8]
   d5bc8:	aa07      	add	r2, sp, #28
   d5bca:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5bce:	f7ff ff4b 	bl	d5a68 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5bd2:	b012      	add	sp, #72	; 0x48
   d5bd4:	bd10      	pop	{r4, pc}
   d5bd6:	bf00      	nop
   d5bd8:	000dc5ce 	.word	0x000dc5ce

000d5bdc <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5bdc:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5bde:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5be0:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5be2:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5be4:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5be6:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5be8:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5bea:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5bec:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5bee:	6283      	str	r3, [r0, #40]	; 0x28
   d5bf0:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5bf2:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5bf4:	bd10      	pop	{r4, pc}

000d5bf6 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5bf6:	f000 bebb 	b.w	d6970 <HAL_Pin_Map>
	...

000d5bfc <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5bfc:	b510      	push	{r4, lr}
   d5bfe:	4b05      	ldr	r3, [pc, #20]	; (d5c14 <_ZN10JsonBufferD1Ev+0x18>)
   d5c00:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5c02:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5c04:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5c06:	b91b      	cbnz	r3, d5c10 <_ZN10JsonBufferD1Ev+0x14>
   d5c08:	6840      	ldr	r0, [r0, #4]
   d5c0a:	b108      	cbz	r0, d5c10 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5c0c:	f001 f994 	bl	d6f38 <free>
	}
}
   d5c10:	4620      	mov	r0, r4
   d5c12:	bd10      	pop	{r4, pc}
   d5c14:	000dc798 	.word	0x000dc798

000d5c18 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5c1c:	f7ff ffee 	bl	d5bfc <_ZN10JsonBufferD1Ev>
   d5c20:	4620      	mov	r0, r4
   d5c22:	2114      	movs	r1, #20
   d5c24:	f003 f9b4 	bl	d8f90 <_ZdlPvj>
   d5c28:	4620      	mov	r0, r4
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5c2c:	b510      	push	{r4, lr}
   d5c2e:	4b03      	ldr	r3, [pc, #12]	; (d5c3c <_ZN10JsonWriterD1Ev+0x10>)
   d5c30:	6003      	str	r3, [r0, #0]
   d5c32:	4604      	mov	r4, r0
   d5c34:	f7ff ffe2 	bl	d5bfc <_ZN10JsonBufferD1Ev>

}
   d5c38:	4620      	mov	r0, r4
   d5c3a:	bd10      	pop	{r4, pc}
   d5c3c:	000dc7a8 	.word	0x000dc7a8

000d5c40 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5c40:	b510      	push	{r4, lr}
   d5c42:	4604      	mov	r4, r0

}
   d5c44:	f7ff fff2 	bl	d5c2c <_ZN10JsonWriterD1Ev>
   d5c48:	4620      	mov	r0, r4
   d5c4a:	2130      	movs	r1, #48	; 0x30
   d5c4c:	f003 f9a0 	bl	d8f90 <_ZdlPvj>
   d5c50:	4620      	mov	r0, r4
   d5c52:	bd10      	pop	{r4, pc}

000d5c54 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5c54:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5c56:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5c58:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5c5a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5c5c:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5c5e:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5c60:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5c64:	4770      	bx	lr
	...

000d5c68 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c68:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c6a:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c6c:	60c3      	str	r3, [r0, #12]
   d5c6e:	2301      	movs	r3, #1
   d5c70:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c72:	4b05      	ldr	r3, [pc, #20]	; (d5c88 <_ZN10JsonWriterC1EPcj+0x20>)
   d5c74:	6003      	str	r3, [r0, #0]
   d5c76:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5c7a:	6041      	str	r1, [r0, #4]
   d5c7c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5c7e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5c80:	f7ff ffe8 	bl	d5c54 <_ZN10JsonWriter4initEv>
}
   d5c84:	bd10      	pop	{r4, pc}
   d5c86:	bf00      	nop
   d5c88:	000dc7a8 	.word	0x000dc7a8

000d5c8c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5c8c:	68c3      	ldr	r3, [r0, #12]
   d5c8e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5c90:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d5c92:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5c94:	bf3f      	itttt	cc
   d5c96:	6842      	ldrcc	r2, [r0, #4]
   d5c98:	1c5c      	addcc	r4, r3, #1
   d5c9a:	60c4      	strcc	r4, [r0, #12]
   d5c9c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5c9e:	bf24      	itt	cs
   d5ca0:	2301      	movcs	r3, #1
   d5ca2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5ca6:	bd10      	pop	{r4, pc}

000d5ca8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5ca8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5caa:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5cac:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5cae:	b143      	cbz	r3, d5cc2 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5cb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5cb4:	7e59      	ldrb	r1, [r3, #25]
   d5cb6:	b109      	cbz	r1, d5cbc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5cb8:	f7ff ffe8 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5cbc:	6963      	ldr	r3, [r4, #20]
   d5cbe:	3b01      	subs	r3, #1
   d5cc0:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d5cc2:	68a3      	ldr	r3, [r4, #8]
   d5cc4:	68e0      	ldr	r0, [r4, #12]
   d5cc6:	6861      	ldr	r1, [r4, #4]
   d5cc8:	4298      	cmp	r0, r3
   d5cca:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5cce:	bf2a      	itet	cs
   d5cd0:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d5cd2:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5cd4:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5cd8:	bd10      	pop	{r4, pc}

000d5cda <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5cda:	b570      	push	{r4, r5, r6, lr}
   d5cdc:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5cde:	68c0      	ldr	r0, [r0, #12]
   d5ce0:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5ce2:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5ce4:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5ce6:	4613      	mov	r3, r2
   d5ce8:	4430      	add	r0, r6
   d5cea:	460a      	mov	r2, r1
   d5cec:	4629      	mov	r1, r5
   d5cee:	f001 f94b 	bl	d6f88 <vsnprintf>
	if (count <= spaceAvailable) {
   d5cf2:	4285      	cmp	r5, r0
		offset += count;
   d5cf4:	bf2d      	iteet	cs
   d5cf6:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5cf8:	68a3      	ldrcc	r3, [r4, #8]
   d5cfa:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5cfc:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5cfe:	bf36      	itet	cc
   d5d00:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5d02:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5d04:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5d08:	bd70      	pop	{r4, r5, r6, pc}

000d5d0a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5d0a:	b40e      	push	{r1, r2, r3}
   d5d0c:	b503      	push	{r0, r1, lr}
   d5d0e:	aa03      	add	r2, sp, #12
   d5d10:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5d14:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5d16:	f7ff ffe0 	bl	d5cda <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5d1a:	b002      	add	sp, #8
   d5d1c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5d20:	b003      	add	sp, #12
   d5d22:	4770      	bx	lr

000d5d24 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d28:	4604      	mov	r4, r0
   d5d2a:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5d2c:	4617      	mov	r7, r2
   d5d2e:	b112      	cbz	r2, d5d36 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5d30:	2122      	movs	r1, #34	; 0x22
   d5d32:	f7ff ffab 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5d36:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5d38:	5d71      	ldrb	r1, [r6, r5]
   d5d3a:	eb06 0805 	add.w	r8, r6, r5
   d5d3e:	2900      	cmp	r1, #0
   d5d40:	d071      	beq.n	d5e26 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5d42:	68e2      	ldr	r2, [r4, #12]
   d5d44:	68a3      	ldr	r3, [r4, #8]
   d5d46:	429a      	cmp	r2, r3
   d5d48:	d26d      	bcs.n	d5e26 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5d4a:	060b      	lsls	r3, r1, #24
   d5d4c:	d533      	bpl.n	d5db6 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5d4e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5d52:	2be0      	cmp	r3, #224	; 0xe0
   d5d54:	d117      	bne.n	d5d86 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5d56:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5d5a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5d5e:	2a80      	cmp	r2, #128	; 0x80
   d5d60:	d111      	bne.n	d5d86 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5d62:	f105 0802 	add.w	r8, r5, #2
   d5d66:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5d6a:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5d6e:	2880      	cmp	r0, #128	; 0x80
   d5d70:	d109      	bne.n	d5d86 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5d72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5d76:	019b      	lsls	r3, r3, #6
   d5d78:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5d7c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5d80:	431a      	orrs	r2, r3
   d5d82:	b292      	uxth	r2, r2
   d5d84:	e011      	b.n	d5daa <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5d86:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5d8a:	2bc0      	cmp	r3, #192	; 0xc0
   d5d8c:	d146      	bne.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d5d8e:	f105 0801 	add.w	r8, r5, #1
   d5d92:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5d96:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5d9a:	2a80      	cmp	r2, #128	; 0x80
   d5d9c:	d13e      	bne.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5d9e:	0189      	lsls	r1, r1, #6
   d5da0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5da8:	431a      	orrs	r2, r3
   d5daa:	4923      	ldr	r1, [pc, #140]	; (d5e38 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5dac:	4620      	mov	r0, r4
   d5dae:	f7ff ffac 	bl	d5d0a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5db2:	4645      	mov	r5, r8
   d5db4:	e035      	b.n	d5e22 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5db6:	290c      	cmp	r1, #12
   d5db8:	d018      	beq.n	d5dec <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5dba:	d80b      	bhi.n	d5dd4 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5dbc:	2909      	cmp	r1, #9
   d5dbe:	d021      	beq.n	d5e04 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5dc0:	290a      	cmp	r1, #10
   d5dc2:	d019      	beq.n	d5df8 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5dc4:	2908      	cmp	r1, #8
   d5dc6:	d129      	bne.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5dc8:	215c      	movs	r1, #92	; 0x5c
   d5dca:	4620      	mov	r0, r4
   d5dcc:	f7ff ff5e 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5dd0:	2162      	movs	r1, #98	; 0x62
   d5dd2:	e023      	b.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5dd4:	2922      	cmp	r1, #34	; 0x22
   d5dd6:	d01b      	beq.n	d5e10 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5dd8:	295c      	cmp	r1, #92	; 0x5c
   d5dda:	d019      	beq.n	d5e10 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5ddc:	290d      	cmp	r1, #13
   d5dde:	d11d      	bne.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5de0:	215c      	movs	r1, #92	; 0x5c
   d5de2:	4620      	mov	r0, r4
   d5de4:	f7ff ff52 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5de8:	2172      	movs	r1, #114	; 0x72
   d5dea:	e017      	b.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5dec:	215c      	movs	r1, #92	; 0x5c
   d5dee:	4620      	mov	r0, r4
   d5df0:	f7ff ff4c 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5df4:	2166      	movs	r1, #102	; 0x66
   d5df6:	e011      	b.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5df8:	215c      	movs	r1, #92	; 0x5c
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	f7ff ff46 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5e00:	216e      	movs	r1, #110	; 0x6e
   d5e02:	e00b      	b.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5e04:	215c      	movs	r1, #92	; 0x5c
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff ff40 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5e0c:	2174      	movs	r1, #116	; 0x74
   d5e0e:	e005      	b.n	d5e1c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5e10:	215c      	movs	r1, #92	; 0x5c
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7ff ff3a 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5e18:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f7ff ff35 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5e22:	3501      	adds	r5, #1
   d5e24:	e788      	b.n	d5d38 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5e26:	b12f      	cbz	r7, d5e34 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5e28:	4620      	mov	r0, r4
   d5e2a:	2122      	movs	r1, #34	; 0x22
	}

}
   d5e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5e30:	f7ff bf2c 	b.w	d5c8c <_ZN10JsonWriter10insertCharEc>
   d5e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e38:	000dc7b9 	.word	0x000dc7b9

000d5e3c <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5e3c:	6942      	ldr	r2, [r0, #20]
   d5e3e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5e42:	7e1a      	ldrb	r2, [r3, #24]
   d5e44:	b112      	cbz	r2, d5e4c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5e46:	2200      	movs	r2, #0
   d5e48:	761a      	strb	r2, [r3, #24]
   d5e4a:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5e4c:	212c      	movs	r1, #44	; 0x2c
   d5e4e:	f7ff bf1d 	b.w	d5c8c <_ZN10JsonWriter10insertCharEc>

000d5e52 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5e54:	6943      	ldr	r3, [r0, #20]
   d5e56:	3301      	adds	r3, #1
   d5e58:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5e5a:	460e      	mov	r6, r1
   d5e5c:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5e5e:	d80e      	bhi.n	d5e7e <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5e60:	f7ff ffec 	bl	d5e3c <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5e64:	6943      	ldr	r3, [r0, #20]
   d5e66:	1c5a      	adds	r2, r3, #1
   d5e68:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d5e6c:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d5e6e:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5e70:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5e72:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5e74:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d5e76:	f7ff ff09 	bl	d5c8c <_ZN10JsonWriter10insertCharEc>
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d5e7e:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5e84 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d5e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e86:	4604      	mov	r4, r0
   d5e88:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d5e8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d5e8e:	2d00      	cmp	r5, #0
   d5e90:	db0a      	blt.n	d5ea8 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d5e92:	f004 fc79 	bl	da788 <__aeabi_f2d>
   d5e96:	462a      	mov	r2, r5
   d5e98:	e9cd 0100 	strd	r0, r1, [sp]
   d5e9c:	4908      	ldr	r1, [pc, #32]	; (d5ec0 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7ff ff33 	bl	d5d0a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d5ea4:	b003      	add	sp, #12
   d5ea6:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5ea8:	f004 fc6e 	bl	da788 <__aeabi_f2d>
   d5eac:	460b      	mov	r3, r1
   d5eae:	4905      	ldr	r1, [pc, #20]	; (d5ec4 <_ZN10JsonWriter11insertValueEf+0x40>)
   d5eb0:	4602      	mov	r2, r0
   d5eb2:	4620      	mov	r0, r4
	}
}
   d5eb4:	b003      	add	sp, #12
   d5eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5eba:	f7ff bf26 	b.w	d5d0a <_ZN10JsonWriter13insertsprintfEPKcz>
   d5ebe:	bf00      	nop
   d5ec0:	000dc7cb 	.word	0x000dc7cb
   d5ec4:	000dc7d0 	.word	0x000dc7d0

000d5ec8 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5ec8:	f000 bd52 	b.w	d6970 <HAL_Pin_Map>

000d5ecc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d5ece:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5ed0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d5ed4:	2c02      	cmp	r4, #2
   d5ed6:	d008      	beq.n	d5eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d5ed8:	2c03      	cmp	r4, #3
   d5eda:	d00f      	beq.n	d5efc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d5edc:	2c01      	cmp	r4, #1
   d5ede:	d170      	bne.n	d5fc2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d5ee0:	8904      	ldrh	r4, [r0, #8]
   d5ee2:	3c01      	subs	r4, #1
   d5ee4:	1aa2      	subs	r2, r4, r2
   d5ee6:	b212      	sxth	r2, r2
      break;
   d5ee8:	e00c      	b.n	d5f04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5eea:	8944      	ldrh	r4, [r0, #10]
   d5eec:	3c01      	subs	r4, #1
   d5eee:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d5ef0:	8904      	ldrh	r4, [r0, #8]
   d5ef2:	1ae4      	subs	r4, r4, r3
   d5ef4:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5ef6:	b212      	sxth	r2, r2
      x -= (w-1);
   d5ef8:	b209      	sxth	r1, r1
      break;
   d5efa:	e062      	b.n	d5fc2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d5efc:	8944      	ldrh	r4, [r0, #10]
   d5efe:	1ae4      	subs	r4, r4, r3
   d5f00:	1a61      	subs	r1, r4, r1
   d5f02:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5f04:	2a00      	cmp	r2, #0
   d5f06:	db5b      	blt.n	d5fc0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d5f08:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5f0c:	4294      	cmp	r4, r2
   d5f0e:	f340 8090 	ble.w	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5f12:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5f14:	bfbe      	ittt	lt
   d5f16:	185b      	addlt	r3, r3, r1
   d5f18:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5f1a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5f1c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d5f20:	18cc      	adds	r4, r1, r3
   d5f22:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5f24:	bfc4      	itt	gt
   d5f26:	1a43      	subgt	r3, r0, r1
   d5f28:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5f2a:	2b00      	cmp	r3, #0
   d5f2c:	f340 8081 	ble.w	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5f30:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5f32:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d5f34:	4f3f      	ldr	r7, [pc, #252]	; (d6034 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d5f36:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5f3a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5f3e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5f40:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5f44:	d017      	beq.n	d5f76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5f46:	f1c1 0108 	rsb	r1, r1, #8
   d5f4a:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5f4c:	493a      	ldr	r1, [pc, #232]	; (d6038 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5f4e:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5f50:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5f52:	bf3f      	itttt	cc
   d5f54:	ebc3 0e00 	rsbcc	lr, r3, r0
   d5f58:	21ff      	movcc	r1, #255	; 0xff
   d5f5a:	fa41 f10e 	asrcc.w	r1, r1, lr
   d5f5e:	400e      	andcc	r6, r1
   d5f60:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d5f62:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5f64:	bf0c      	ite	eq
   d5f66:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d5f68:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5f6a:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5f6c:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5f6e:	d360      	bcc.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d5f70:	1a18      	subs	r0, r3, r0
   d5f72:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d5f74:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5f76:	2b07      	cmp	r3, #7
   d5f78:	d917      	bls.n	d5faa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5f7a:	2d01      	cmp	r5, #1
   d5f7c:	bf0c      	ite	eq
   d5f7e:	20ff      	moveq	r0, #255	; 0xff
   d5f80:	2000      	movne	r0, #0
   d5f82:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5f86:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5f88:	3a08      	subs	r2, #8
   d5f8a:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5f8c:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5f8e:	f801 0c80 	strb.w	r0, [r1, #-128]
   d5f92:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5f96:	d8f7      	bhi.n	d5f88 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5f98:	f1a3 0208 	sub.w	r2, r3, #8
   d5f9c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d5fa0:	3201      	adds	r2, #1
   d5fa2:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5fa6:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5faa:	2b00      	cmp	r3, #0
   d5fac:	d041      	beq.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5fae:	4a23      	ldr	r2, [pc, #140]	; (d603c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5fb0:	5cd2      	ldrb	r2, [r2, r3]
   d5fb2:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5fb4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5fb6:	bf0c      	ite	eq
   d5fb8:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5fba:	4393      	bicne	r3, r2
   d5fbc:	7023      	strb	r3, [r4, #0]
   d5fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5fc2:	2a00      	cmp	r2, #0
   d5fc4:	db35      	blt.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5fc6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5fca:	4294      	cmp	r4, r2
   d5fcc:	dd31      	ble.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5fce:	2900      	cmp	r1, #0
    w += x;
   d5fd0:	bfbc      	itt	lt
   d5fd2:	18c9      	addlt	r1, r1, r3
   d5fd4:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5fd6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5fda:	bfb8      	it	lt
   d5fdc:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5fde:	18ce      	adds	r6, r1, r3
   d5fe0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5fe2:	bfc4      	itt	gt
   d5fe4:	1a63      	subgt	r3, r4, r1
   d5fe6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5fe8:	2b00      	cmp	r3, #0
   d5fea:	dd22      	ble.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5fec:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d5fee:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d5ff2:	4810      	ldr	r0, [pc, #64]	; (d6034 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5ff4:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5ff8:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d5ffa:	2001      	movs	r0, #1
   d5ffc:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d6000:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d6002:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d6004:	d109      	bne.n	d601a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d6006:	3b01      	subs	r3, #1
   d6008:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d600a:	1c5c      	adds	r4, r3, #1
   d600c:	d011      	beq.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d600e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6012:	4310      	orrs	r0, r2
   d6014:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6018:	e7f5      	b.n	d6006 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d601a:	43d2      	mvns	r2, r2
   d601c:	b2d2      	uxtb	r2, r2
   d601e:	3b01      	subs	r3, #1
   d6020:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d6022:	1c58      	adds	r0, r3, #1
   d6024:	d005      	beq.n	d6032 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d6026:	f811 0b01 	ldrb.w	r0, [r1], #1
   d602a:	4010      	ands	r0, r2
   d602c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6030:	e7f5      	b.n	d601e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6034:	2003dc88 	.word	0x2003dc88
   d6038:	2003dc80 	.word	0x2003dc80
   d603c:	2003dc78 	.word	0x2003dc78

000d6040 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6040:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d6042:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6044:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d6048:	2c02      	cmp	r4, #2
   d604a:	d008      	beq.n	d605e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d604c:	2c03      	cmp	r4, #3
   d604e:	d00f      	beq.n	d6070 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d6050:	2c01      	cmp	r4, #1
   d6052:	d112      	bne.n	d607a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d6054:	8904      	ldrh	r4, [r0, #8]
   d6056:	1ae4      	subs	r4, r4, r3
   d6058:	1aa2      	subs	r2, r4, r2
   d605a:	b212      	sxth	r2, r2
      break;
   d605c:	e06d      	b.n	d613a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d605e:	8904      	ldrh	r4, [r0, #8]
   d6060:	3c01      	subs	r4, #1
   d6062:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d6064:	8944      	ldrh	r4, [r0, #10]
   d6066:	1ae4      	subs	r4, r4, r3
   d6068:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d606a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d606c:	b212      	sxth	r2, r2
      break;
   d606e:	e004      	b.n	d607a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d6070:	8944      	ldrh	r4, [r0, #10]
   d6072:	3c01      	subs	r4, #1
   d6074:	1a61      	subs	r1, r4, r1
   d6076:	b209      	sxth	r1, r1
      break;
   d6078:	e05f      	b.n	d613a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d607a:	2900      	cmp	r1, #0
   d607c:	db5c      	blt.n	d6138 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d607e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d6082:	428c      	cmp	r4, r1
   d6084:	f340 8091 	ble.w	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d6088:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d608a:	bfbc      	itt	lt
   d608c:	18d2      	addlt	r2, r2, r3
   d608e:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d6090:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d6094:	bfb8      	it	lt
   d6096:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d6098:	18d4      	adds	r4, r2, r3
   d609a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d609c:	bfc4      	itt	gt
   d609e:	1a83      	subgt	r3, r0, r2
   d60a0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d60a2:	2b00      	cmp	r3, #0
   d60a4:	f340 8081 	ble.w	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d60a8:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d60aa:	4e40      	ldr	r6, [pc, #256]	; (d61ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d60ac:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d60ae:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d60b0:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60b4:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d60b8:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d60bc:	d017      	beq.n	d60ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d60be:	f1c4 0408 	rsb	r4, r4, #8
   d60c2:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60c4:	4c3a      	ldr	r4, [pc, #232]	; (d61b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d60c6:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d60c8:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d60ca:	bf3f      	itttt	cc
   d60cc:	ebc2 0e00 	rsbcc	lr, r2, r0
   d60d0:	24ff      	movcc	r4, #255	; 0xff
   d60d2:	fa44 f40e 	asrcc.w	r4, r4, lr
   d60d6:	4027      	andcc	r7, r4
   d60d8:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d60da:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d60dc:	bf0c      	ite	eq
   d60de:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d60e0:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d60e2:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d60e4:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d60e6:	d360      	bcc.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d60e8:	1a10      	subs	r0, r2, r0
   d60ea:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d60ec:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d60ee:	2a07      	cmp	r2, #7
   d60f0:	d917      	bls.n	d6122 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d60f2:	2d01      	cmp	r5, #1
   d60f4:	bf0c      	ite	eq
   d60f6:	24ff      	moveq	r4, #255	; 0xff
   d60f8:	2400      	movne	r4, #0
   d60fa:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d60fe:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d6100:	3908      	subs	r1, #8
   d6102:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d6104:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d6106:	f800 4c80 	strb.w	r4, [r0, #-128]
   d610a:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d610e:	d8f7      	bhi.n	d6100 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d6110:	f1a2 0108 	sub.w	r1, r2, #8
   d6114:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d6118:	3101      	adds	r1, #1
   d611a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d611e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d6122:	2a00      	cmp	r2, #0
   d6124:	d041      	beq.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d6126:	4923      	ldr	r1, [pc, #140]	; (d61b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d6128:	5c89      	ldrb	r1, [r1, r2]
   d612a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d612c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d612e:	bf0c      	ite	eq
   d6130:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d6132:	438a      	bicne	r2, r1
   d6134:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d6136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d613a:	2900      	cmp	r1, #0
   d613c:	db35      	blt.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d613e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d6142:	428c      	cmp	r4, r1
   d6144:	dd31      	ble.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d6146:	2a00      	cmp	r2, #0
    w += x;
   d6148:	bfbc      	itt	lt
   d614a:	18d2      	addlt	r2, r2, r3
   d614c:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d614e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d6152:	bfb8      	it	lt
   d6154:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d6156:	18d6      	adds	r6, r2, r3
   d6158:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d615a:	bfc4      	itt	gt
   d615c:	1aa3      	subgt	r3, r4, r2
   d615e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d6160:	2b00      	cmp	r3, #0
   d6162:	dd22      	ble.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d6164:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d6166:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d616a:	4810      	ldr	r0, [pc, #64]	; (d61ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d616c:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d6170:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d6172:	2201      	movs	r2, #1
   d6174:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d6178:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d617a:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d617c:	d109      	bne.n	d6192 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d617e:	1e5a      	subs	r2, r3, #1
   d6180:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d6182:	1c5c      	adds	r4, r3, #1
   d6184:	d011      	beq.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d6186:	f810 2b01 	ldrb.w	r2, [r0], #1
   d618a:	430a      	orrs	r2, r1
   d618c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d6190:	e7f5      	b.n	d617e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d6192:	43c9      	mvns	r1, r1
   d6194:	b2c9      	uxtb	r1, r1
   d6196:	1e5a      	subs	r2, r3, #1
   d6198:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d619a:	1c5a      	adds	r2, r3, #1
   d619c:	d005      	beq.n	d61aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d619e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d61a2:	400a      	ands	r2, r1
   d61a4:	f800 2c01 	strb.w	r2, [r0, #-1]
   d61a8:	e7f5      	b.n	d6196 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61ac:	2003dc88 	.word	0x2003dc88
   d61b0:	2003dc80 	.word	0x2003dc80
   d61b4:	2003dc78 	.word	0x2003dc78

000d61b8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d61b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d61ba:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d61bc:	4606      	mov	r6, r0
   d61be:	4614      	mov	r4, r2
   d61c0:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d61c2:	db3f      	blt.n	d6244 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61c4:	f000 fbbc 	bl	d6940 <_ZN12Adafruit_GFX5widthEv>
   d61c8:	4285      	cmp	r5, r0
   d61ca:	da3b      	bge.n	d6244 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61cc:	2c00      	cmp	r4, #0
   d61ce:	db39      	blt.n	d6244 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d61d0:	4630      	mov	r0, r6
   d61d2:	f000 fbb8 	bl	d6946 <_ZN12Adafruit_GFX6heightEv>
   d61d6:	4284      	cmp	r4, r0
   d61d8:	da34      	bge.n	d6244 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d61da:	4630      	mov	r0, r6
   d61dc:	f000 fbae 	bl	d693c <_ZN12Adafruit_GFX11getRotationEv>
   d61e0:	2802      	cmp	r0, #2
   d61e2:	d127      	bne.n	d6234 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61e4:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d61e6:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61e8:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d61ea:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61ec:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d61ee:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d61f0:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d61f2:	b204      	sxth	r4, r0
   d61f4:	e006      	b.n	d6204 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d61f6:	2801      	cmp	r0, #1
   d61f8:	d104      	bne.n	d6204 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d61fa:	8933      	ldrh	r3, [r6, #8]
   d61fc:	3b01      	subs	r3, #1
   d61fe:	1b1b      	subs	r3, r3, r4
   d6200:	462c      	mov	r4, r5
   d6202:	b21d      	sxth	r5, r3
   d6204:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d6206:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d6208:	fb94 f0f0 	sdiv	r0, r4, r0
   d620c:	b200      	sxth	r0, r0
   d620e:	4b0e      	ldr	r3, [pc, #56]	; (d6248 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d6210:	f004 0207 	and.w	r2, r4, #7
   d6214:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d6218:	d104      	bne.n	d6224 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d621a:	4097      	lsls	r7, r2
   d621c:	5c5a      	ldrb	r2, [r3, r1]
   d621e:	4317      	orrs	r7, r2
   d6220:	545f      	strb	r7, [r3, r1]
   d6222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d6224:	5c58      	ldrb	r0, [r3, r1]
   d6226:	2701      	movs	r7, #1
   d6228:	fa07 f202 	lsl.w	r2, r7, r2
   d622c:	ea20 0202 	bic.w	r2, r0, r2
   d6230:	545a      	strb	r2, [r3, r1]
   d6232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d6234:	2803      	cmp	r0, #3
   d6236:	d1de      	bne.n	d61f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d6238:	8973      	ldrh	r3, [r6, #10]
   d623a:	3b01      	subs	r3, #1
   d623c:	1b5b      	subs	r3, r3, r5
   d623e:	4625      	mov	r5, r4
   d6240:	b21c      	sxth	r4, r3
   d6242:	e7df      	b.n	d6204 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d6244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6246:	bf00      	nop
   d6248:	2003dc88 	.word	0x2003dc88

000d624c <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d624c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d624e:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d6250:	4604      	mov	r4, r0
   d6252:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d6254:	2180      	movs	r1, #128	; 0x80
   d6256:	f000 fa87 	bl	d6768 <_ZN12Adafruit_GFXC1Ess>
   d625a:	4b06      	ldr	r3, [pc, #24]	; (d6274 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d625c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d625e:	23ff      	movs	r3, #255	; 0xff
   d6260:	7763      	strb	r3, [r4, #29]
   d6262:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d6266:	77e3      	strb	r3, [r4, #31]
   d6268:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d626a:	f884 5020 	strb.w	r5, [r4, #32]
}
   d626e:	4620      	mov	r0, r4
   d6270:	bd38      	pop	{r3, r4, r5, pc}
   d6272:	bf00      	nop
   d6274:	000dc7e8 	.word	0x000dc7e8

000d6278 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d6278:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d627c:	2100      	movs	r1, #0
   d627e:	4801      	ldr	r0, [pc, #4]	; (d6284 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d6280:	f005 ba70 	b.w	db764 <memset>
   d6284:	2003dc88 	.word	0x2003dc88

000d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6288:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d628a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d628e:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d6290:	4604      	mov	r4, r0
   d6292:	460d      	mov	r5, r1
  if (sid != -1)
   d6294:	d028      	beq.n	d62e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d6296:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d629a:	2101      	movs	r1, #1
   d629c:	b280      	uxth	r0, r0
   d629e:	f002 fdc0 	bl	d8e22 <digitalWrite>
    digitalWrite(dc, LOW);
   d62a2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d62a6:	2100      	movs	r1, #0
   d62a8:	b280      	uxth	r0, r0
   d62aa:	f002 fdba 	bl	d8e22 <digitalWrite>
    digitalWrite(cs, LOW);
   d62ae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d62b2:	2100      	movs	r1, #0
   d62b4:	b280      	uxth	r0, r0
   d62b6:	f002 fdb4 	bl	d8e22 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d62ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d62be:	b12b      	cbz	r3, d62cc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d62c0:	f7fe fcc6 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d62c4:	4629      	mov	r1, r5
   d62c6:	f000 ffdf 	bl	d7288 <_ZN8SPIClass8transferEh>
   d62ca:	e005      	b.n	d62d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d62cc:	462b      	mov	r3, r5
   d62ce:	2201      	movs	r2, #1
   d62d0:	7fa1      	ldrb	r1, [r4, #30]
   d62d2:	7f60      	ldrb	r0, [r4, #29]
   d62d4:	f002 fde8 	bl	d8ea8 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d62d8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d62dc:	2101      	movs	r1, #1
   d62de:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d62e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d62e4:	f002 bd9d 	b.w	d8e22 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d62e8:	f002 fe1e 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d62ec:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d62f0:	f002 f8db 	bl	d84aa <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d62f4:	f002 fe18 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d62f8:	6803      	ldr	r3, [r0, #0]
   d62fa:	2100      	movs	r1, #0
   d62fc:	689b      	ldr	r3, [r3, #8]
   d62fe:	4798      	blx	r3
    Wire.write(c);
   d6300:	f002 fe12 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d6304:	6803      	ldr	r3, [r0, #0]
   d6306:	4629      	mov	r1, r5
   d6308:	689b      	ldr	r3, [r3, #8]
   d630a:	4798      	blx	r3
    Wire.endTransmission();
   d630c:	f002 fe0c 	bl	d8f28 <_Z19__fetch_global_Wirev>
  }
}
   d6310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d6314:	f002 b8d0 	b.w	d84b8 <_ZN7TwoWire15endTransmissionEv>

000d6318 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d6318:	b538      	push	{r3, r4, r5, lr}
   d631a:	4604      	mov	r4, r0
   d631c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d631e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d6320:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d6324:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d6326:	3301      	adds	r3, #1
   d6328:	d037      	beq.n	d639a <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d632a:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d632e:	2101      	movs	r1, #1
   d6330:	b280      	uxth	r0, r0
   d6332:	f002 fd65 	bl	d8e00 <pinMode>
    pinMode(cs, OUTPUT);
   d6336:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d633a:	2101      	movs	r1, #1
   d633c:	b280      	uxth	r0, r0
   d633e:	f002 fd5f 	bl	d8e00 <pinMode>
    if (!hwSPI){
   d6342:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6346:	b95b      	cbnz	r3, d6360 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d6348:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d634c:	2101      	movs	r1, #1
   d634e:	b280      	uxth	r0, r0
   d6350:	f002 fd56 	bl	d8e00 <pinMode>
    	pinMode(sclk, OUTPUT);
   d6354:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d6358:	2101      	movs	r1, #1
   d635a:	b280      	uxth	r0, r0
   d635c:	f002 fd50 	bl	d8e00 <pinMode>
    	}
    if (hwSPI){
   d6360:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6364:	b1eb      	cbz	r3, d63a2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d6366:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d636a:	2101      	movs	r1, #1
   d636c:	b280      	uxth	r0, r0
   d636e:	f002 fd58 	bl	d8e22 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d6372:	f7fe fc6d 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6376:	2101      	movs	r1, #1
   d6378:	f000 fe85 	bl	d7086 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d637c:	f7fe fc68 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6380:	2110      	movs	r1, #16
   d6382:	f000 ff5d 	bl	d7240 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d6386:	f7fe fc63 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d638a:	2100      	movs	r1, #0
   d638c:	f000 fe8c 	bl	d70a8 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d6390:	f7fe fc5e 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6394:	f000 fe66 	bl	d7064 <_ZN8SPIClass5beginEv>
   d6398:	e003      	b.n	d63a2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d639a:	f002 fdc5 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d639e:	f002 f849 	bl	d8434 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d63a2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63a6:	2101      	movs	r1, #1
   d63a8:	b280      	uxth	r0, r0
   d63aa:	f002 fd29 	bl	d8e00 <pinMode>
  digitalWrite(rst, HIGH);
   d63ae:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63b2:	2101      	movs	r1, #1
   d63b4:	b280      	uxth	r0, r0
   d63b6:	f002 fd34 	bl	d8e22 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d63ba:	2001      	movs	r0, #1
   d63bc:	f001 fada 	bl	d7974 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d63c0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63c4:	2100      	movs	r1, #0
   d63c6:	b280      	uxth	r0, r0
   d63c8:	f002 fd2b 	bl	d8e22 <digitalWrite>
  // wait 10ms
  delay(10);
   d63cc:	200a      	movs	r0, #10
   d63ce:	f001 fad1 	bl	d7974 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d63d2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d63d6:	2101      	movs	r1, #1
   d63d8:	b280      	uxth	r0, r0
   d63da:	f002 fd22 	bl	d8e22 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d63de:	4620      	mov	r0, r4
   d63e0:	21ae      	movs	r1, #174	; 0xae
   d63e2:	f7ff ff51 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d63e6:	4620      	mov	r0, r4
   d63e8:	21d5      	movs	r1, #213	; 0xd5
   d63ea:	f7ff ff4d 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d63ee:	4620      	mov	r0, r4
   d63f0:	2180      	movs	r1, #128	; 0x80
   d63f2:	f7ff ff49 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d63f6:	4620      	mov	r0, r4
   d63f8:	21a8      	movs	r1, #168	; 0xa8
   d63fa:	f7ff ff45 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d63fe:	4620      	mov	r0, r4
   d6400:	213f      	movs	r1, #63	; 0x3f
   d6402:	f7ff ff41 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d6406:	4620      	mov	r0, r4
   d6408:	21d3      	movs	r1, #211	; 0xd3
   d640a:	f7ff ff3d 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d640e:	4620      	mov	r0, r4
   d6410:	2100      	movs	r1, #0
   d6412:	f7ff ff39 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d6416:	4620      	mov	r0, r4
   d6418:	2140      	movs	r1, #64	; 0x40
   d641a:	f7ff ff35 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d641e:	218d      	movs	r1, #141	; 0x8d
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff ff31 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d6426:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d6428:	bf0c      	ite	eq
   d642a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d642c:	2114      	movne	r1, #20
   d642e:	4620      	mov	r0, r4
   d6430:	f7ff ff2a 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d6434:	4620      	mov	r0, r4
   d6436:	2120      	movs	r1, #32
   d6438:	f7ff ff26 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d643c:	4620      	mov	r0, r4
   d643e:	2100      	movs	r1, #0
   d6440:	f7ff ff22 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d6444:	4620      	mov	r0, r4
   d6446:	21a1      	movs	r1, #161	; 0xa1
   d6448:	f7ff ff1e 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d644c:	4620      	mov	r0, r4
   d644e:	21c8      	movs	r1, #200	; 0xc8
   d6450:	f7ff ff1a 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d6454:	4620      	mov	r0, r4
   d6456:	21da      	movs	r1, #218	; 0xda
   d6458:	f7ff ff16 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d645c:	4620      	mov	r0, r4
   d645e:	2112      	movs	r1, #18
   d6460:	f7ff ff12 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d6464:	2181      	movs	r1, #129	; 0x81
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff ff0e 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d646c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d646e:	bf0c      	ite	eq
   d6470:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d6472:	21cf      	movne	r1, #207	; 0xcf
   d6474:	4620      	mov	r0, r4
   d6476:	f7ff ff07 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d647a:	21d9      	movs	r1, #217	; 0xd9
   d647c:	4620      	mov	r0, r4
   d647e:	f7ff ff03 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d6482:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d6484:	bf0c      	ite	eq
   d6486:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d6488:	21f1      	movne	r1, #241	; 0xf1
   d648a:	4620      	mov	r0, r4
   d648c:	f7ff fefc 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d6490:	4620      	mov	r0, r4
   d6492:	21db      	movs	r1, #219	; 0xdb
   d6494:	f7ff fef8 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d6498:	4620      	mov	r0, r4
   d649a:	2140      	movs	r1, #64	; 0x40
   d649c:	f7ff fef4 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d64a0:	4620      	mov	r0, r4
   d64a2:	21a4      	movs	r1, #164	; 0xa4
   d64a4:	f7ff fef0 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d64a8:	4620      	mov	r0, r4
   d64aa:	21a6      	movs	r1, #166	; 0xa6
   d64ac:	f7ff feec 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d64b0:	4620      	mov	r0, r4
   d64b2:	21af      	movs	r1, #175	; 0xaf
}
   d64b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d64b8:	f7ff bee6 	b.w	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d64bc <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d64bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d64c0:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d64c2:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d64c4:	f7ff fee0 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d64c8:	2100      	movs	r1, #0
   d64ca:	4620      	mov	r0, r4
   d64cc:	f7ff fedc 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d64d0:	217f      	movs	r1, #127	; 0x7f
   d64d2:	4620      	mov	r0, r4
   d64d4:	f7ff fed8 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d64d8:	2122      	movs	r1, #34	; 0x22
   d64da:	4620      	mov	r0, r4
   d64dc:	f7ff fed4 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d64e0:	2100      	movs	r1, #0
   d64e2:	4620      	mov	r0, r4
   d64e4:	f7ff fed0 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d64e8:	2107      	movs	r1, #7
   d64ea:	4620      	mov	r0, r4
   d64ec:	f7ff fecc 	bl	d6288 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d64f0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d64f4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d65b4 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d64f8:	3301      	adds	r3, #1
   d64fa:	d035      	beq.n	d6568 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d64fc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6500:	2101      	movs	r1, #1
   d6502:	b280      	uxth	r0, r0
   d6504:	f002 fc8d 	bl	d8e22 <digitalWrite>
    digitalWrite(dc, HIGH);
   d6508:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d650c:	2101      	movs	r1, #1
   d650e:	b280      	uxth	r0, r0
   d6510:	f002 fc87 	bl	d8e22 <digitalWrite>
    digitalWrite(cs, LOW);
   d6514:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d6518:	2100      	movs	r1, #0
   d651a:	b280      	uxth	r0, r0
   d651c:	f002 fc81 	bl	d8e22 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6520:	2001      	movs	r0, #1
   d6522:	f000 facd 	bl	d6ac0 <HAL_Delay_Microseconds>
   d6526:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6528:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d652c:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d6530:	b12b      	cbz	r3, d653e <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d6532:	f7fe fb8d 	bl	d4c50 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6536:	4631      	mov	r1, r6
   d6538:	f000 fea6 	bl	d7288 <_ZN8SPIClass8transferEh>
   d653c:	e005      	b.n	d654a <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d653e:	4633      	mov	r3, r6
   d6540:	2201      	movs	r2, #1
   d6542:	7fa1      	ldrb	r1, [r4, #30]
   d6544:	7f60      	ldrb	r0, [r4, #29]
   d6546:	f002 fcaf 	bl	d8ea8 <shiftOut>
   d654a:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d654c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d6550:	d1ea      	bne.n	d6528 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d6552:	2001      	movs	r0, #1
   d6554:	f000 fab4 	bl	d6ac0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6558:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d655c:	2101      	movs	r1, #1
   d655e:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d6560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d6564:	f002 bc5d 	b.w	d8e22 <digitalWrite>
   d6568:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d656a:	f002 fcdd 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d656e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d6572:	f001 ff9a 	bl	d84aa <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d6576:	f002 fcd7 	bl	d8f28 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d657a:	6803      	ldr	r3, [r0, #0]
   d657c:	2140      	movs	r1, #64	; 0x40
   d657e:	689b      	ldr	r3, [r3, #8]
   d6580:	4798      	blx	r3
   d6582:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d6584:	f002 fcd0 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d6588:	19af      	adds	r7, r5, r6
   d658a:	6803      	ldr	r3, [r0, #0]
   d658c:	b2bf      	uxth	r7, r7
   d658e:	689b      	ldr	r3, [r3, #8]
   d6590:	f818 1007 	ldrb.w	r1, [r8, r7]
   d6594:	3601      	adds	r6, #1
   d6596:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d6598:	2e10      	cmp	r6, #16
   d659a:	d1f3      	bne.n	d6584 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d659c:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d659e:	f002 fcc3 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d65a2:	b2ad      	uxth	r5, r5
   d65a4:	f001 ff88 	bl	d84b8 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d65a8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d65ac:	d1dd      	bne.n	d656a <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d65ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65b2:	bf00      	nop
   d65b4:	2003dc88 	.word	0x2003dc88

000d65b8 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d65b8:	f000 b9da 	b.w	d6970 <HAL_Pin_Map>

000d65bc <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65c0:	b085      	sub	sp, #20
   d65c2:	461e      	mov	r6, r3
   d65c4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d65c8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d65cc:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d65ce:	1a9a      	subs	r2, r3, r2
   d65d0:	2a00      	cmp	r2, #0
   d65d2:	bfb8      	it	lt
   d65d4:	4252      	neglt	r2, r2
   d65d6:	9200      	str	r2, [sp, #0]
   d65d8:	1a72      	subs	r2, r6, r1
   d65da:	2a00      	cmp	r2, #0
   d65dc:	bfb8      	it	lt
   d65de:	4252      	neglt	r2, r2
   d65e0:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65e2:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65e4:	9a00      	ldr	r2, [sp, #0]
   d65e6:	9901      	ldr	r1, [sp, #4]
   d65e8:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d65ea:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65ec:	dd05      	ble.n	d65fa <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d65ee:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d65f0:	461e      	mov	r6, r3
   d65f2:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d65f4:	4622      	mov	r2, r4
    swap(x0, y0);
   d65f6:	462c      	mov	r4, r5
   d65f8:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d65fa:	42b4      	cmp	r4, r6
   d65fc:	dd05      	ble.n	d660a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d65fe:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d6600:	461d      	mov	r5, r3
   d6602:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d6604:	4622      	mov	r2, r4
   d6606:	4634      	mov	r4, r6
   d6608:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d660a:	1b5a      	subs	r2, r3, r5
   d660c:	2a00      	cmp	r2, #0
   d660e:	bfb8      	it	lt
   d6610:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6612:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6616:	429d      	cmp	r5, r3
   d6618:	bfb4      	ite	lt
   d661a:	2301      	movlt	r3, #1
   d661c:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6620:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6624:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d6626:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d6628:	fa0f f788 	sxth.w	r7, r8
   d662c:	2202      	movs	r2, #2
   d662e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6632:	42b4      	cmp	r4, r6
   d6634:	dc1f      	bgt.n	d6676 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d6636:	9a01      	ldr	r2, [sp, #4]
   d6638:	9b00      	ldr	r3, [sp, #0]
   d663a:	4293      	cmp	r3, r2
   d663c:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d6640:	bfc8      	it	gt
   d6642:	4622      	movgt	r2, r4
   d6644:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6648:	bfc8      	it	gt
   d664a:	4629      	movgt	r1, r5
   d664c:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d664e:	bfdc      	itt	le
   d6650:	462a      	movle	r2, r5
   d6652:	4621      	movle	r1, r4
   d6654:	4648      	mov	r0, r9
   d6656:	47d8      	blx	fp
    }
    err -= dy;
   d6658:	9b03      	ldr	r3, [sp, #12]
   d665a:	1aff      	subs	r7, r7, r3
   d665c:	b2bb      	uxth	r3, r7
   d665e:	b21f      	sxth	r7, r3
    if (err < 0) {
   d6660:	2f00      	cmp	r7, #0
   d6662:	da05      	bge.n	d6670 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d6664:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d6666:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d666a:	4415      	add	r5, r2
   d666c:	b22d      	sxth	r5, r5
      err += dx;
   d666e:	b23f      	sxth	r7, r7
   d6670:	3401      	adds	r4, #1
   d6672:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6674:	e7dd      	b.n	d6632 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d6676:	b005      	add	sp, #20
   d6678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d667c <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d667c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6680:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d6684:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6686:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d668a:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d668c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d668e:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d6690:	4691      	mov	r9, r2
   d6692:	460d      	mov	r5, r1
   d6694:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d6696:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d6698:	6823      	ldr	r3, [r4, #0]
   d669a:	9600      	str	r6, [sp, #0]
   d669c:	f10a 32ff 	add.w	r2, sl, #4294967295
   d66a0:	444a      	add	r2, r9
   d66a2:	69df      	ldr	r7, [r3, #28]
   d66a4:	4629      	mov	r1, r5
   d66a6:	4643      	mov	r3, r8
   d66a8:	4620      	mov	r0, r4
   d66aa:	b212      	sxth	r2, r2
   d66ac:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d66ae:	6823      	ldr	r3, [r4, #0]
   d66b0:	9600      	str	r6, [sp, #0]
   d66b2:	699f      	ldr	r7, [r3, #24]
   d66b4:	464a      	mov	r2, r9
   d66b6:	4653      	mov	r3, sl
   d66b8:	4629      	mov	r1, r5
   d66ba:	4620      	mov	r0, r4
   d66bc:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d66be:	6823      	ldr	r3, [r4, #0]
   d66c0:	960a      	str	r6, [sp, #40]	; 0x28
   d66c2:	f108 31ff 	add.w	r1, r8, #4294967295
   d66c6:	4429      	add	r1, r5
   d66c8:	699d      	ldr	r5, [r3, #24]
   d66ca:	464a      	mov	r2, r9
   d66cc:	4653      	mov	r3, sl
   d66ce:	b209      	sxth	r1, r1
   d66d0:	4620      	mov	r0, r4
   d66d2:	46ac      	mov	ip, r5
}
   d66d4:	b002      	add	sp, #8
   d66d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d66da:	4760      	bx	ip

000d66dc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d66dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d66de:	3b01      	subs	r3, #1
   d66e0:	4413      	add	r3, r2
   d66e2:	6804      	ldr	r4, [r0, #0]
   d66e4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d66e8:	9501      	str	r5, [sp, #4]
   d66ea:	b21b      	sxth	r3, r3
   d66ec:	9300      	str	r3, [sp, #0]
   d66ee:	6964      	ldr	r4, [r4, #20]
   d66f0:	460b      	mov	r3, r1
   d66f2:	47a0      	blx	r4
}
   d66f4:	b003      	add	sp, #12
   d66f6:	bd30      	pop	{r4, r5, pc}

000d66f8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d66f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d66fa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d66fe:	6804      	ldr	r4, [r0, #0]
   d6700:	e88d 0024 	stmia.w	sp, {r2, r5}
   d6704:	3b01      	subs	r3, #1
   d6706:	440b      	add	r3, r1
   d6708:	6964      	ldr	r4, [r4, #20]
   d670a:	b21b      	sxth	r3, r3
   d670c:	47a0      	blx	r4
}
   d670e:	b003      	add	sp, #12
   d6710:	bd30      	pop	{r4, r5, pc}

000d6712 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d6712:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6716:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d671a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d671e:	4605      	mov	r5, r0
   d6720:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6722:	460c      	mov	r4, r1
   d6724:	eb01 0a03 	add.w	sl, r1, r3
   d6728:	4554      	cmp	r4, sl
   d672a:	da0b      	bge.n	d6744 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d672c:	682b      	ldr	r3, [r5, #0]
   d672e:	f8cd 9000 	str.w	r9, [sp]
   d6732:	699e      	ldr	r6, [r3, #24]
   d6734:	4621      	mov	r1, r4
   d6736:	4643      	mov	r3, r8
   d6738:	463a      	mov	r2, r7
   d673a:	4628      	mov	r0, r5
   d673c:	3401      	adds	r4, #1
   d673e:	47b0      	blx	r6
   d6740:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6742:	e7f1      	b.n	d6728 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d6744:	b002      	add	sp, #8
   d6746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d674a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d674a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d674c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d6750:	6804      	ldr	r4, [r0, #0]
   d6752:	9101      	str	r1, [sp, #4]
   d6754:	9200      	str	r2, [sp, #0]
   d6756:	2200      	movs	r2, #0
   d6758:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d675c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d675e:	4611      	mov	r1, r2
   d6760:	47a0      	blx	r4
}
   d6762:	b002      	add	sp, #8
   d6764:	bd10      	pop	{r4, pc}

000d6766 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d6766:	4770      	bx	lr

000d6768 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d6768:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d676a:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d676c:	2400      	movs	r4, #0
   d676e:	4d08      	ldr	r5, [pc, #32]	; (d6790 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6770:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d6772:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d6774:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d6776:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d677a:	2201      	movs	r2, #1
   d677c:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d677e:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d6780:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d6782:	8204      	strh	r4, [r0, #16]
   d6784:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d6786:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d6788:	82c1      	strh	r1, [r0, #22]
   d678a:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d678c:	7682      	strb	r2, [r0, #26]
}
   d678e:	bd30      	pop	{r4, r5, pc}
   d6790:	000dc820 	.word	0x000dc820

000d6794 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d6794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6798:	b08f      	sub	sp, #60	; 0x3c
   d679a:	4605      	mov	r5, r0
   d679c:	9106      	str	r1, [sp, #24]
   d679e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d67a2:	9107      	str	r1, [sp, #28]
   d67a4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d67a8:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d67aa:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d67ae:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d67b0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d67b4:	4281      	cmp	r1, r0
   d67b6:	dd7c      	ble.n	d68b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d67b8:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d67bc:	4291      	cmp	r1, r2
   d67be:	dd78      	ble.n	d68b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d67c0:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d67c2:	fb11 0008 	smlabb	r0, r1, r8, r0
   d67c6:	2800      	cmp	r0, #0
   d67c8:	dd73      	ble.n	d68b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d67ca:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d67ce:	2800      	cmp	r0, #0
   d67d0:	dd6f      	ble.n	d68b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d67d6:	b296      	uxth	r6, r2
   d67d8:	930c      	str	r3, [sp, #48]	; 0x30
   d67da:	f106 0308 	add.w	r3, r6, #8
   d67de:	b29b      	uxth	r3, r3
   d67e0:	9109      	str	r1, [sp, #36]	; 0x24
   d67e2:	2400      	movs	r4, #0
   d67e4:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d67e6:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67e8:	bf1c      	itt	ne
   d67ea:	4b33      	ldrne	r3, [pc, #204]	; (d68b8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d67ec:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d67ee:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67f0:	bf16      	itet	ne
   d67f2:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d67f4:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d67f8:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d67fc:	9604      	str	r6, [sp, #16]
   d67fe:	fa1f f388 	uxth.w	r3, r8
   d6802:	9303      	str	r3, [sp, #12]
   d6804:	9a03      	ldr	r2, [sp, #12]
   d6806:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d680a:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d680e:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6812:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6814:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6816:	920a      	str	r2, [sp, #40]	; 0x28
   d6818:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d681a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d681e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d6820:	f019 0f01 	tst.w	r9, #1
   d6824:	d011      	beq.n	d684a <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d6826:	f1b8 0f01 	cmp.w	r8, #1
   d682a:	682b      	ldr	r3, [r5, #0]
   d682c:	d103      	bne.n	d6836 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d682e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6832:	9b07      	ldr	r3, [sp, #28]
   d6834:	e014      	b.n	d6860 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6836:	9a07      	ldr	r2, [sp, #28]
   d6838:	9201      	str	r2, [sp, #4]
   d683a:	f8cd a000 	str.w	sl, [sp]
   d683e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d6842:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d6846:	4653      	mov	r3, sl
   d6848:	e018      	b.n	d687c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d684a:	9b07      	ldr	r3, [sp, #28]
   d684c:	9a08      	ldr	r2, [sp, #32]
   d684e:	4293      	cmp	r3, r2
   d6850:	d017      	beq.n	d6882 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d6852:	f1b8 0f01 	cmp.w	r8, #1
   d6856:	682b      	ldr	r3, [r5, #0]
   d6858:	d107      	bne.n	d686a <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d685a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d685e:	4613      	mov	r3, r2
   d6860:	b23a      	sxth	r2, r7
   d6862:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d6864:	4628      	mov	r0, r5
   d6866:	47d8      	blx	fp
   d6868:	e00b      	b.n	d6882 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d686a:	9a08      	ldr	r2, [sp, #32]
   d686c:	9201      	str	r2, [sp, #4]
   d686e:	f8cd a000 	str.w	sl, [sp]
   d6872:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d6876:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d687a:	4653      	mov	r3, sl
   d687c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d687e:	4628      	mov	r0, r5
   d6880:	47d8      	blx	fp
   d6882:	9b04      	ldr	r3, [sp, #16]
   d6884:	9a03      	ldr	r2, [sp, #12]
   d6886:	4413      	add	r3, r2
   d6888:	b29b      	uxth	r3, r3
   d688a:	9304      	str	r3, [sp, #16]
   d688c:	9b05      	ldr	r3, [sp, #20]
   d688e:	4413      	add	r3, r2
   d6890:	b29b      	uxth	r3, r3
   d6892:	3701      	adds	r7, #1
   d6894:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d6896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6898:	b2bf      	uxth	r7, r7
   d689a:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d689c:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d68a0:	d1be      	bne.n	d6820 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d68a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d68a4:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d68a6:	3401      	adds	r4, #1
   d68a8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d68ac:	b264      	sxtb	r4, r4
   d68ae:	9309      	str	r3, [sp, #36]	; 0x24
   d68b0:	d199      	bne.n	d67e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d68b2:	b00f      	add	sp, #60	; 0x3c
   d68b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68b8:	000dc850 	.word	0x000dc850

000d68bc <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d68bc:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d68be:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d68c0:	b085      	sub	sp, #20
   d68c2:	4604      	mov	r4, r0
   d68c4:	460b      	mov	r3, r1

  if (c == '\n') {
   d68c6:	d104      	bne.n	d68d2 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d68c8:	7e02      	ldrb	r2, [r0, #24]
   d68ca:	8a43      	ldrh	r3, [r0, #18]
   d68cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d68d0:	e023      	b.n	d691a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d68d2:	290d      	cmp	r1, #13
   d68d4:	d024      	beq.n	d6920 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d68d6:	7e05      	ldrb	r5, [r0, #24]
   d68d8:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d68dc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d68e0:	9502      	str	r5, [sp, #8]
   d68e2:	8ac5      	ldrh	r5, [r0, #22]
   d68e4:	9501      	str	r5, [sp, #4]
   d68e6:	8a85      	ldrh	r5, [r0, #20]
   d68e8:	9500      	str	r5, [sp, #0]
   d68ea:	f7ff ff53 	bl	d6794 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d68ee:	7e22      	ldrb	r2, [r4, #24]
   d68f0:	8a23      	ldrh	r3, [r4, #16]
   d68f2:	b291      	uxth	r1, r2
   d68f4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d68f8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d68fc:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d68fe:	b21b      	sxth	r3, r3
   d6900:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6902:	b168      	cbz	r0, d6920 <_ZN12Adafruit_GFX5writeEh+0x64>
   d6904:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d6908:	f06f 0505 	mvn.w	r5, #5
   d690c:	fb05 0202 	mla	r2, r5, r2, r0
   d6910:	4293      	cmp	r3, r2
   d6912:	dd05      	ble.n	d6920 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d6914:	8a63      	ldrh	r3, [r4, #18]
   d6916:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d691a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d691c:	2300      	movs	r3, #0
   d691e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d6920:	2001      	movs	r0, #1
   d6922:	b005      	add	sp, #20
   d6924:	bd30      	pop	{r4, r5, pc}

000d6926 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d6926:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d6928:	8242      	strh	r2, [r0, #18]
   d692a:	4770      	bx	lr

000d692c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d692c:	2900      	cmp	r1, #0
   d692e:	bf08      	it	eq
   d6930:	2101      	moveq	r1, #1
   d6932:	7601      	strb	r1, [r0, #24]
   d6934:	4770      	bx	lr

000d6936 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d6936:	82c1      	strh	r1, [r0, #22]
   d6938:	8281      	strh	r1, [r0, #20]
   d693a:	4770      	bx	lr

000d693c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d693c:	7e40      	ldrb	r0, [r0, #25]
   d693e:	4770      	bx	lr

000d6940 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d6940:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d6944:	4770      	bx	lr

000d6946 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d6946:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d694a:	4770      	bx	lr

000d694c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d694c:	f000 b810 	b.w	d6970 <HAL_Pin_Map>

000d6950 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <netdb_freeaddrinfo+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	689b      	ldr	r3, [r3, #8]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	00030268 	.word	0x00030268

000d6960 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <netdb_getaddrinfo+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	68db      	ldr	r3, [r3, #12]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	00030268 	.word	0x00030268

000d6970 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <HAL_Pin_Map+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	681b      	ldr	r3, [r3, #0]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003022c 	.word	0x0003022c

000d6980 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <HAL_Validate_Pin_Function+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	685b      	ldr	r3, [r3, #4]
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	0003022c 	.word	0x0003022c

000d6990 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <HAL_Pin_Mode+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	689b      	ldr	r3, [r3, #8]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	0003022c 	.word	0x0003022c

000d69a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <HAL_Get_Pin_Mode+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	68db      	ldr	r3, [r3, #12]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	0003022c 	.word	0x0003022c

000d69b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <HAL_GPIO_Write+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	691b      	ldr	r3, [r3, #16]
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	0003022c 	.word	0x0003022c

000d69c0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <HAL_GPIO_Read+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	695b      	ldr	r3, [r3, #20]
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	0003022c 	.word	0x0003022c

000d69d0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <HAL_ADC_Read+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	0003022c 	.word	0x0003022c

000d69e0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <HAL_Pulse_In+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	0003022c 	.word	0x0003022c

000d69f0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <HAL_SPI_Begin+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	681b      	ldr	r3, [r3, #0]
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030230 	.word	0x00030230

000d6a00 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <HAL_SPI_Set_Bit_Order+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030230 	.word	0x00030230

000d6a10 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <HAL_SPI_Set_Data_Mode+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	68db      	ldr	r3, [r3, #12]
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030230 	.word	0x00030230

000d6a20 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <HAL_SPI_Set_Clock_Divider+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	691b      	ldr	r3, [r3, #16]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030230 	.word	0x00030230

000d6a30 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <HAL_SPI_Send_Receive_Data+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	695b      	ldr	r3, [r3, #20]
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030230 	.word	0x00030230

000d6a40 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <HAL_SPI_Init+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	69db      	ldr	r3, [r3, #28]
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030230 	.word	0x00030230

000d6a50 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <HAL_SPI_Is_Enabled+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6a1b      	ldr	r3, [r3, #32]
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030230 	.word	0x00030230

000d6a60 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <HAL_SPI_Info+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030230 	.word	0x00030230

000d6a70 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <HAL_SPI_Set_Settings+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030230 	.word	0x00030230

000d6a80 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <HAL_SPI_Acquire+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030230 	.word	0x00030230

000d6a90 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <HAL_SPI_Release+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030230 	.word	0x00030230

000d6aa0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <if_index_to_name+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	695b      	ldr	r3, [r3, #20]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	0003026c 	.word	0x0003026c

000d6ab0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <HAL_RNG_GetRandomNumber+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	685b      	ldr	r3, [r3, #4]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030218 	.word	0x00030218

000d6ac0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <HAL_Delay_Microseconds+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	68db      	ldr	r3, [r3, #12]
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030218 	.word	0x00030218

000d6ad0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	695b      	ldr	r3, [r3, #20]
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030218 	.word	0x00030218

000d6ae0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <HAL_RTC_Get_UnixTime+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	69db      	ldr	r3, [r3, #28]
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030218 	.word	0x00030218

000d6af0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <HAL_RTC_Time_Is_Valid+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030218 	.word	0x00030218

000d6b00 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <os_thread_is_current+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	689b      	ldr	r3, [r3, #8]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030248 	.word	0x00030248

000d6b10 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <os_thread_join+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	691b      	ldr	r3, [r3, #16]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030248 	.word	0x00030248

000d6b20 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <os_thread_cleanup+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	695b      	ldr	r3, [r3, #20]
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030248 	.word	0x00030248

000d6b30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <os_mutex_recursive_create+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	00030248 	.word	0x00030248

000d6b40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <os_mutex_recursive_destroy+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	00030248 	.word	0x00030248

000d6b50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <inet_inet_ntop+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	695b      	ldr	r3, [r3, #20]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	00030264 	.word	0x00030264

000d6b60 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <inet_htonl+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	6a1b      	ldr	r3, [r3, #32]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	00030264 	.word	0x00030264

000d6b70 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <inet_htons+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030264 	.word	0x00030264

000d6b80 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_USART_Init+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	681b      	ldr	r3, [r3, #0]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	0003023c 	.word	0x0003023c

000d6b90 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <HAL_USART_Write_Data+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	68db      	ldr	r3, [r3, #12]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	0003023c 	.word	0x0003023c

000d6ba0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <HAL_USART_Available_Data+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	691b      	ldr	r3, [r3, #16]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	0003023c 	.word	0x0003023c

000d6bb0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <HAL_USART_Read_Data+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	695b      	ldr	r3, [r3, #20]
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	0003023c 	.word	0x0003023c

000d6bc0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <HAL_USART_Peek_Data+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	699b      	ldr	r3, [r3, #24]
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	0003023c 	.word	0x0003023c

000d6bd0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <HAL_USART_Flush_Data+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	69db      	ldr	r3, [r3, #28]
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	0003023c 	.word	0x0003023c

000d6be0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <HAL_USART_Is_Enabled+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6a1b      	ldr	r3, [r3, #32]
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	0003023c 	.word	0x0003023c

000d6bf0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_USART_Available_Data_For_Write+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	0003023c 	.word	0x0003023c

000d6c00 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_I2C_Begin+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	68db      	ldr	r3, [r3, #12]
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_I2C_Begin_Transmission+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	699b      	ldr	r3, [r3, #24]
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030228 	.word	0x00030228

000d6c20 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_I2C_End_Transmission+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	69db      	ldr	r3, [r3, #28]
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030228 	.word	0x00030228

000d6c30 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <HAL_I2C_Write_Data+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6a1b      	ldr	r3, [r3, #32]
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030228 	.word	0x00030228

000d6c40 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <HAL_I2C_Available_Data+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030228 	.word	0x00030228

000d6c50 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <HAL_I2C_Read_Data+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030228 	.word	0x00030228

000d6c60 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <HAL_I2C_Peek_Data+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030228 	.word	0x00030228

000d6c70 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <HAL_I2C_Flush_Data+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030228 	.word	0x00030228

000d6c80 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <HAL_I2C_Is_Enabled+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030228 	.word	0x00030228

000d6c90 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <HAL_I2C_Init+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030228 	.word	0x00030228

000d6ca0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <HAL_I2C_Request_Data_Ex+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030228 	.word	0x00030228

000d6cb0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <sock_setsockopt+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	699b      	ldr	r3, [r3, #24]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030238 	.word	0x00030238

000d6cc0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <sock_close+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	69db      	ldr	r3, [r3, #28]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	00030238 	.word	0x00030238

000d6cd0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <sock_connect+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	6a1b      	ldr	r3, [r3, #32]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030238 	.word	0x00030238

000d6ce0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <sock_recv+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030238 	.word	0x00030238

000d6cf0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <sock_send+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	00030238 	.word	0x00030238

000d6d00 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <sock_socket+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	00030238 	.word	0x00030238

000d6d10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USB_USART_Init+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	681b      	ldr	r3, [r3, #0]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003024c 	.word	0x0003024c

000d6d20 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <HAL_USB_USART_Begin+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	685b      	ldr	r3, [r3, #4]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	0003024c 	.word	0x0003024c

000d6d30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <HAL_USB_USART_Available_Data+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	691b      	ldr	r3, [r3, #16]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	0003024c 	.word	0x0003024c

000d6d40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	695b      	ldr	r3, [r3, #20]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	0003024c 	.word	0x0003024c

000d6d50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <HAL_USB_USART_Receive_Data+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	699b      	ldr	r3, [r3, #24]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	0003024c 	.word	0x0003024c

000d6d60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <HAL_USB_USART_Send_Data+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	69db      	ldr	r3, [r3, #28]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	0003024c 	.word	0x0003024c

000d6d70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <HAL_USB_USART_Flush_Data+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	6a1b      	ldr	r3, [r3, #32]
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	0003024c 	.word	0x0003024c

000d6d80 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <panic_+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	00030260 	.word	0x00030260

000d6d90 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <log_message+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	00030260 	.word	0x00030260

000d6da0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <system_mode+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	681b      	ldr	r3, [r3, #0]
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	00030220 	.word	0x00030220

000d6db0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b02      	ldr	r3, [pc, #8]	; (d6dbc <set_system_mode+0xc>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	685b      	ldr	r3, [r3, #4]
   d6db8:	9301      	str	r3, [sp, #4]
   d6dba:	bd08      	pop	{r3, pc}
   d6dbc:	00030220 	.word	0x00030220

000d6dc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <system_delay_ms+0xc>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	695b      	ldr	r3, [r3, #20]
   d6dc8:	9301      	str	r3, [sp, #4]
   d6dca:	bd08      	pop	{r3, pc}
   d6dcc:	00030220 	.word	0x00030220

000d6dd0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b02      	ldr	r3, [pc, #8]	; (d6ddc <application_thread_current+0xc>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6dd8:	9301      	str	r3, [sp, #4]
   d6dda:	bd08      	pop	{r3, pc}
   d6ddc:	00030220 	.word	0x00030220

000d6de0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6de0:	b508      	push	{r3, lr}
   d6de2:	4b02      	ldr	r3, [pc, #8]	; (d6dec <application_thread_invoke+0xc>)
   d6de4:	681b      	ldr	r3, [r3, #0]
   d6de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	bd08      	pop	{r3, pc}
   d6dec:	00030220 	.word	0x00030220

000d6df0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6df0:	b508      	push	{r3, lr}
   d6df2:	4b02      	ldr	r3, [pc, #8]	; (d6dfc <system_thread_get_state+0xc>)
   d6df4:	681b      	ldr	r3, [r3, #0]
   d6df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6df8:	9301      	str	r3, [sp, #4]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	00030220 	.word	0x00030220

000d6e00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e00:	b508      	push	{r3, lr}
   d6e02:	4b03      	ldr	r3, [pc, #12]	; (d6e10 <system_ctrl_set_app_request_handler+0x10>)
   d6e04:	681b      	ldr	r3, [r3, #0]
   d6e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e0a:	9301      	str	r3, [sp, #4]
   d6e0c:	bd08      	pop	{r3, pc}
   d6e0e:	0000      	.short	0x0000
   d6e10:	00030220 	.word	0x00030220

000d6e14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e14:	b508      	push	{r3, lr}
   d6e16:	4b03      	ldr	r3, [pc, #12]	; (d6e24 <system_ctrl_set_result+0x10>)
   d6e18:	681b      	ldr	r3, [r3, #0]
   d6e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e1e:	9301      	str	r3, [sp, #4]
   d6e20:	bd08      	pop	{r3, pc}
   d6e22:	0000      	.short	0x0000
   d6e24:	00030220 	.word	0x00030220

000d6e28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <network_connect+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	685b      	ldr	r3, [r3, #4]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030240 	.word	0x00030240

000d6e38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <network_connecting+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	689b      	ldr	r3, [r3, #8]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030240 	.word	0x00030240

000d6e48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <network_disconnect+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	68db      	ldr	r3, [r3, #12]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030240 	.word	0x00030240

000d6e58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <network_ready+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	691b      	ldr	r3, [r3, #16]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030240 	.word	0x00030240

000d6e68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <network_on+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	695b      	ldr	r3, [r3, #20]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030240 	.word	0x00030240

000d6e78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <network_off+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	699b      	ldr	r3, [r3, #24]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030240 	.word	0x00030240

000d6e88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <network_listen+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	69db      	ldr	r3, [r3, #28]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030240 	.word	0x00030240

000d6e98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <network_listening+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6a1b      	ldr	r3, [r3, #32]
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030240 	.word	0x00030240

000d6ea8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <network_set_listen_timeout+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030240 	.word	0x00030240

000d6eb8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <network_get_listen_timeout+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030240 	.word	0x00030240

000d6ec8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <spark_process+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	689b      	ldr	r3, [r3, #8]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	00030244 	.word	0x00030244

000d6ed8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <spark_cloud_flag_connected+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	695b      	ldr	r3, [r3, #20]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	00030244 	.word	0x00030244

000d6ee8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <spark_send_event+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	6a1b      	ldr	r3, [r3, #32]
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	00030244 	.word	0x00030244

000d6ef8 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <spark_sync_time+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	00030244 	.word	0x00030244

000d6f08 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <spark_sync_time_pending+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	00030244 	.word	0x00030244

000d6f18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	00030244 	.word	0x00030244

000d6f28 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <malloc+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	681b      	ldr	r3, [r3, #0]
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	0003021c 	.word	0x0003021c

000d6f38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	4b02      	ldr	r3, [pc, #8]	; (d6f44 <free+0xc>)
   d6f3c:	681b      	ldr	r3, [r3, #0]
   d6f3e:	685b      	ldr	r3, [r3, #4]
   d6f40:	9301      	str	r3, [sp, #4]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	0003021c 	.word	0x0003021c

000d6f48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6f48:	b508      	push	{r3, lr}
   d6f4a:	4b02      	ldr	r3, [pc, #8]	; (d6f54 <realloc+0xc>)
   d6f4c:	681b      	ldr	r3, [r3, #0]
   d6f4e:	689b      	ldr	r3, [r3, #8]
   d6f50:	9301      	str	r3, [sp, #4]
   d6f52:	bd08      	pop	{r3, pc}
   d6f54:	0003021c 	.word	0x0003021c

000d6f58 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <sprintf+0xc>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	68db      	ldr	r3, [r3, #12]
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	bd08      	pop	{r3, pc}
   d6f64:	0003021c 	.word	0x0003021c

000d6f68 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6f68:	b508      	push	{r3, lr}
   d6f6a:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <siprintf+0xc>)
   d6f6c:	681b      	ldr	r3, [r3, #0]
   d6f6e:	691b      	ldr	r3, [r3, #16]
   d6f70:	9301      	str	r3, [sp, #4]
   d6f72:	bd08      	pop	{r3, pc}
   d6f74:	0003021c 	.word	0x0003021c

000d6f78 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6f78:	b508      	push	{r3, lr}
   d6f7a:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <siscanf+0xc>)
   d6f7c:	681b      	ldr	r3, [r3, #0]
   d6f7e:	699b      	ldr	r3, [r3, #24]
   d6f80:	9301      	str	r3, [sp, #4]
   d6f82:	bd08      	pop	{r3, pc}
   d6f84:	0003021c 	.word	0x0003021c

000d6f88 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6f88:	b508      	push	{r3, lr}
   d6f8a:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <vsnprintf+0xc>)
   d6f8c:	681b      	ldr	r3, [r3, #0]
   d6f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f90:	9301      	str	r3, [sp, #4]
   d6f92:	bd08      	pop	{r3, pc}
   d6f94:	0003021c 	.word	0x0003021c

000d6f98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6f98:	b508      	push	{r3, lr}
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <abort+0xc>)
   d6f9c:	681b      	ldr	r3, [r3, #0]
   d6f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	bd08      	pop	{r3, pc}
   d6fa4:	0003021c 	.word	0x0003021c

000d6fa8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6fa8:	b508      	push	{r3, lr}
   d6faa:	4b02      	ldr	r3, [pc, #8]	; (d6fb4 <_malloc_r+0xc>)
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb0:	9301      	str	r3, [sp, #4]
   d6fb2:	bd08      	pop	{r3, pc}
   d6fb4:	0003021c 	.word	0x0003021c

000d6fb8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6fb8:	b508      	push	{r3, lr}
   d6fba:	4b02      	ldr	r3, [pc, #8]	; (d6fc4 <__errno+0xc>)
   d6fbc:	681b      	ldr	r3, [r3, #0]
   d6fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fc0:	9301      	str	r3, [sp, #4]
   d6fc2:	bd08      	pop	{r3, pc}
   d6fc4:	0003021c 	.word	0x0003021c

000d6fc8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fc8:	2200      	movs	r2, #0
   d6fca:	4611      	mov	r1, r2
   d6fcc:	6840      	ldr	r0, [r0, #4]
   d6fce:	f7ff bf63 	b.w	d6e98 <network_listening>

000d6fd2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fd2:	2200      	movs	r2, #0
   d6fd4:	4611      	mov	r1, r2
   d6fd6:	6840      	ldr	r0, [r0, #4]
   d6fd8:	f7ff bf6e 	b.w	d6eb8 <network_get_listen_timeout>

000d6fdc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fdc:	2200      	movs	r2, #0
   d6fde:	6840      	ldr	r0, [r0, #4]
   d6fe0:	f7ff bf62 	b.w	d6ea8 <network_set_listen_timeout>

000d6fe4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6fe4:	2200      	movs	r2, #0
   d6fe6:	f081 0101 	eor.w	r1, r1, #1
   d6fea:	6840      	ldr	r0, [r0, #4]
   d6fec:	f7ff bf4c 	b.w	d6e88 <network_listen>

000d6ff0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6ff0:	2300      	movs	r3, #0
   d6ff2:	461a      	mov	r2, r3
   d6ff4:	4619      	mov	r1, r3
   d6ff6:	6840      	ldr	r0, [r0, #4]
   d6ff8:	f7ff bf3e 	b.w	d6e78 <network_off>

000d6ffc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ffc:	2300      	movs	r3, #0
   d6ffe:	461a      	mov	r2, r3
   d7000:	4619      	mov	r1, r3
   d7002:	6840      	ldr	r0, [r0, #4]
   d7004:	f7ff bf30 	b.w	d6e68 <network_on>

000d7008 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7008:	2200      	movs	r2, #0
   d700a:	4611      	mov	r1, r2
   d700c:	6840      	ldr	r0, [r0, #4]
   d700e:	f7ff bf23 	b.w	d6e58 <network_ready>

000d7012 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7012:	2200      	movs	r2, #0
   d7014:	4611      	mov	r1, r2
   d7016:	6840      	ldr	r0, [r0, #4]
   d7018:	f7ff bf0e 	b.w	d6e38 <network_connecting>

000d701c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d701c:	2200      	movs	r2, #0
   d701e:	2102      	movs	r1, #2
   d7020:	6840      	ldr	r0, [r0, #4]
   d7022:	f7ff bf11 	b.w	d6e48 <network_disconnect>

000d7026 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7026:	2300      	movs	r3, #0
   d7028:	461a      	mov	r2, r3
   d702a:	6840      	ldr	r0, [r0, #4]
   d702c:	f7ff befc 	b.w	d6e28 <network_connect>

000d7030 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7030:	4b02      	ldr	r3, [pc, #8]	; (d703c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7032:	2203      	movs	r2, #3
   d7034:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7036:	4a02      	ldr	r2, [pc, #8]	; (d7040 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7038:	601a      	str	r2, [r3, #0]
   d703a:	4770      	bx	lr
   d703c:	2003e3b0 	.word	0x2003e3b0
   d7040:	000dcd54 	.word	0x000dcd54

000d7044 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7044:	2100      	movs	r1, #0
   d7046:	f7ff bd1b 	b.w	d6a80 <HAL_SPI_Acquire>

000d704a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d704a:	2100      	movs	r1, #0
   d704c:	f7ff bd20 	b.w	d6a90 <HAL_SPI_Release>

000d7050 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7050:	b510      	push	{r4, lr}
   d7052:	4604      	mov	r4, r0
{
    _spi = spi;
   d7054:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7056:	4608      	mov	r0, r1
   d7058:	f7ff fcf2 	bl	d6a40 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d705c:	2300      	movs	r3, #0
   d705e:	6063      	str	r3, [r4, #4]
}
   d7060:	4620      	mov	r0, r4
   d7062:	bd10      	pop	{r4, pc}

000d7064 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7064:	b510      	push	{r4, lr}
   d7066:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7068:	7800      	ldrb	r0, [r0, #0]
   d706a:	f7ff ffeb 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d706e:	b948      	cbnz	r0, d7084 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7070:	7820      	ldrb	r0, [r4, #0]
   d7072:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7076:	f7ff fcbb 	bl	d69f0 <HAL_SPI_Begin>
        unlock();
   d707a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d707c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7080:	f7ff bfe3 	b.w	d704a <_ZN8SPIClass6unlockEv.isra.1>
   d7084:	bd10      	pop	{r4, pc}

000d7086 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7086:	b538      	push	{r3, r4, r5, lr}
   d7088:	4604      	mov	r4, r0
    if (!lock())
   d708a:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d708c:	460d      	mov	r5, r1
    if (!lock())
   d708e:	f7ff ffd9 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d7092:	b940      	cbnz	r0, d70a6 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d7094:	7820      	ldrb	r0, [r4, #0]
   d7096:	4629      	mov	r1, r5
   d7098:	f7ff fcb2 	bl	d6a00 <HAL_SPI_Set_Bit_Order>
        unlock();
   d709c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d709e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d70a2:	f7ff bfd2 	b.w	d704a <_ZN8SPIClass6unlockEv.isra.1>
   d70a6:	bd38      	pop	{r3, r4, r5, pc}

000d70a8 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d70a8:	b538      	push	{r3, r4, r5, lr}
   d70aa:	4604      	mov	r4, r0
    if (!lock())
   d70ac:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d70ae:	460d      	mov	r5, r1
    if (!lock())
   d70b0:	f7ff ffc8 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d70b4:	b940      	cbnz	r0, d70c8 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d70b6:	7820      	ldrb	r0, [r4, #0]
   d70b8:	4629      	mov	r1, r5
   d70ba:	f7ff fca9 	bl	d6a10 <HAL_SPI_Set_Data_Mode>
        unlock();
   d70be:	7820      	ldrb	r0, [r4, #0]
    }
}
   d70c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d70c4:	f7ff bfc1 	b.w	d704a <_ZN8SPIClass6unlockEv.isra.1>
   d70c8:	bd38      	pop	{r3, r4, r5, pc}

000d70ca <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d70ca:	7800      	ldrb	r0, [r0, #0]
   d70cc:	f7ff bfbd 	b.w	d704a <_ZN8SPIClass6unlockEv.isra.1>

000d70d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70d0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d70d2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70d4:	6018      	str	r0, [r3, #0]
   d70d6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d70d8:	6818      	ldr	r0, [r3, #0]
   d70da:	4288      	cmp	r0, r1
   d70dc:	b2e5      	uxtb	r5, r4
   d70de:	d906      	bls.n	d70ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d70e0:	3401      	adds	r4, #1
   d70e2:	2c08      	cmp	r4, #8
   d70e4:	d002      	beq.n	d70ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d70e6:	0840      	lsrs	r0, r0, #1
   d70e8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d70ea:	e7f5      	b.n	d70d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d70ec:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d70f0:	5d5b      	ldrb	r3, [r3, r5]
   d70f2:	7013      	strb	r3, [r2, #0]
   d70f4:	bd30      	pop	{r4, r5, pc}
   d70f6:	bf00      	nop
   d70f8:	000dcd80 	.word	0x000dcd80

000d70fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d70fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7100:	4607      	mov	r7, r0
   d7102:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7104:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7106:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7108:	f7ff ff9c 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d710c:	2800      	cmp	r0, #0
   d710e:	db62      	blt.n	d71d6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7110:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7112:	2214      	movs	r2, #20
   d7114:	2100      	movs	r1, #0
   d7116:	a809      	add	r0, sp, #36	; 0x24
   d7118:	f004 fb24 	bl	db764 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d711c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d711e:	4620      	mov	r0, r4
   d7120:	2200      	movs	r2, #0
   d7122:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7124:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7128:	f7ff fc9a 	bl	d6a60 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d712c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7130:	b154      	cbz	r4, d7148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7132:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7136:	b935      	cbnz	r5, d7146 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7138:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d713c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7140:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7144:	e003      	b.n	d714e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7146:	2400      	movs	r4, #0
   d7148:	46a1      	mov	r9, r4
   d714a:	46a0      	mov	r8, r4
   d714c:	2501      	movs	r5, #1
   d714e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7150:	b105      	cbz	r5, d7154 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7152:	b9bb      	cbnz	r3, d7184 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7154:	429d      	cmp	r5, r3
   d7156:	d10b      	bne.n	d7170 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7158:	68b2      	ldr	r2, [r6, #8]
   d715a:	4542      	cmp	r2, r8
   d715c:	d108      	bne.n	d7170 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d715e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7162:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7166:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d716a:	89b2      	ldrh	r2, [r6, #12]
   d716c:	4291      	cmp	r1, r2
   d716e:	d009      	beq.n	d7184 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7170:	b153      	cbz	r3, d7188 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7172:	2400      	movs	r4, #0
   d7174:	7838      	ldrb	r0, [r7, #0]
   d7176:	9401      	str	r4, [sp, #4]
   d7178:	9400      	str	r4, [sp, #0]
   d717a:	4623      	mov	r3, r4
   d717c:	4622      	mov	r2, r4
   d717e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7180:	f7ff fc76 	bl	d6a70 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7184:	2000      	movs	r0, #0
   d7186:	e026      	b.n	d71d6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7188:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d718c:	68b1      	ldr	r1, [r6, #8]
   d718e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7190:	ab04      	add	r3, sp, #16
   d7192:	f10d 020f 	add.w	r2, sp, #15
   d7196:	f7ff ff9b 	bl	d70d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d719a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d719c:	b105      	cbz	r5, d71a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d719e:	b9b1      	cbnz	r1, d71ce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d71a0:	42a9      	cmp	r1, r5
   d71a2:	d008      	beq.n	d71b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d71a4:	2400      	movs	r4, #0
   d71a6:	7838      	ldrb	r0, [r7, #0]
   d71a8:	9401      	str	r4, [sp, #4]
   d71aa:	7b74      	ldrb	r4, [r6, #13]
   d71ac:	7b33      	ldrb	r3, [r6, #12]
   d71ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d71b2:	9400      	str	r4, [sp, #0]
   d71b4:	e7e4      	b.n	d7180 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d71b6:	68b3      	ldr	r3, [r6, #8]
   d71b8:	4543      	cmp	r3, r8
   d71ba:	d3f3      	bcc.n	d71a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d71bc:	f88d 9020 	strb.w	r9, [sp, #32]
   d71c0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d71c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d71c8:	89b3      	ldrh	r3, [r6, #12]
   d71ca:	429a      	cmp	r2, r3
   d71cc:	d1ea      	bne.n	d71a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d71ce:	9b04      	ldr	r3, [sp, #16]
   d71d0:	4543      	cmp	r3, r8
   d71d2:	d1e7      	bne.n	d71a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d71d4:	e7d6      	b.n	d7184 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d71d6:	b00f      	add	sp, #60	; 0x3c
   d71d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71dc <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71e0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d71e2:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71e4:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d71e6:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d71e8:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d71ea:	460e      	mov	r6, r1
   d71ec:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d71ee:	f7ff ff29 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d71f2:	4605      	mov	r5, r0
   d71f4:	bb00      	cbnz	r0, d7238 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d71f6:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d71fa:	4601      	mov	r1, r0
   d71fc:	2214      	movs	r2, #20
   d71fe:	a803      	add	r0, sp, #12
   d7200:	f004 fab0 	bl	db764 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7204:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7206:	462a      	mov	r2, r5
   d7208:	a903      	add	r1, sp, #12
   d720a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d720c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7210:	f7ff fc26 	bl	d6a60 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7214:	ab02      	add	r3, sp, #8
   d7216:	f10d 0207 	add.w	r2, sp, #7
   d721a:	fb07 f106 	mul.w	r1, r7, r6
   d721e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7220:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7224:	f7ff ff54 	bl	d70d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7228:	7820      	ldrb	r0, [r4, #0]
   d722a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d722e:	f7ff fbf7 	bl	d6a20 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7232:	7820      	ldrb	r0, [r4, #0]
   d7234:	f7ff ff09 	bl	d704a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7238:	9802      	ldr	r0, [sp, #8]
   d723a:	b008      	add	sp, #32
   d723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7240 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7240:	b538      	push	{r3, r4, r5, lr}
   d7242:	4604      	mov	r4, r0
    if (!lock())
   d7244:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7246:	460d      	mov	r5, r1
    if (!lock())
   d7248:	f7ff fefc 	bl	d7044 <_ZN8SPIClass4lockEv.isra.0>
   d724c:	b9c8      	cbnz	r0, d7282 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d724e:	6861      	ldr	r1, [r4, #4]
   d7250:	b171      	cbz	r1, d7270 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7252:	4b0c      	ldr	r3, [pc, #48]	; (d7284 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7254:	5cc2      	ldrb	r2, [r0, r3]
   d7256:	42aa      	cmp	r2, r5
   d7258:	d002      	beq.n	d7260 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d725a:	3001      	adds	r0, #1
   d725c:	2808      	cmp	r0, #8
   d725e:	d1f9      	bne.n	d7254 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7260:	3001      	adds	r0, #1
   d7262:	b2c0      	uxtb	r0, r0
   d7264:	40c1      	lsrs	r1, r0
   d7266:	2201      	movs	r2, #1
   d7268:	4620      	mov	r0, r4
   d726a:	f7ff ffb7 	bl	d71dc <_ZN8SPIClass13setClockSpeedEjj>
   d726e:	e003      	b.n	d7278 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7270:	4629      	mov	r1, r5
   d7272:	7820      	ldrb	r0, [r4, #0]
   d7274:	f7ff fbd4 	bl	d6a20 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7278:	7820      	ldrb	r0, [r4, #0]
    }
}
   d727a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d727e:	f7ff bee4 	b.w	d704a <_ZN8SPIClass6unlockEv.isra.1>
   d7282:	bd38      	pop	{r3, r4, r5, pc}
   d7284:	000dcd80 	.word	0x000dcd80

000d7288 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7288:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d728a:	7800      	ldrb	r0, [r0, #0]
   d728c:	f7ff fbd0 	bl	d6a30 <HAL_SPI_Send_Receive_Data>
}
   d7290:	b2c0      	uxtb	r0, r0
   d7292:	bd08      	pop	{r3, pc}

000d7294 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7294:	7800      	ldrb	r0, [r0, #0]
   d7296:	f7ff bbdb 	b.w	d6a50 <HAL_SPI_Is_Enabled>

000d729a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d729a:	b510      	push	{r4, lr}
   d729c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d729e:	6800      	ldr	r0, [r0, #0]
   d72a0:	b118      	cbz	r0, d72aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d72a2:	f7ff fe49 	bl	d6f38 <free>
            wakeupSource_ = nullptr;
   d72a6:	2300      	movs	r3, #0
   d72a8:	6023      	str	r3, [r4, #0]
   d72aa:	bd10      	pop	{r4, pc}

000d72ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d72ac:	b510      	push	{r4, lr}
   d72ae:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d72b0:	f7ff fff3 	bl	d729a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d72b4:	4620      	mov	r0, r4
   d72b6:	bd10      	pop	{r4, pc}

000d72b8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d72b8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d72ba:	4c09      	ldr	r4, [pc, #36]	; (d72e0 <_GLOBAL__sub_I_System+0x28>)
   d72bc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d72be:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d72c2:	6020      	str	r0, [r4, #0]
   d72c4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d72c6:	71a0      	strb	r0, [r4, #6]
   d72c8:	8120      	strh	r0, [r4, #8]
   d72ca:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d72cc:	f7ff fd70 	bl	d6db0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d72d0:	4620      	mov	r0, r4
   d72d2:	4a04      	ldr	r2, [pc, #16]	; (d72e4 <_GLOBAL__sub_I_System+0x2c>)
   d72d4:	4904      	ldr	r1, [pc, #16]	; (d72e8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d72d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d72da:	f001 be4b 	b.w	d8f74 <__aeabi_atexit>
   d72de:	bf00      	nop
   d72e0:	2003e3b8 	.word	0x2003e3b8
   d72e4:	2003e148 	.word	0x2003e148
   d72e8:	000d72ad 	.word	0x000d72ad

000d72ec <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d72ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d72f0:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d72f2:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d72f4:	4615      	mov	r5, r2
   d72f6:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d72f8:	bf34      	ite	cc
   d72fa:	4615      	movcc	r5, r2
   d72fc:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d72fe:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d7300:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d7302:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d7304:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d7308:	d107      	bne.n	d731a <ltoa+0x2e>
   d730a:	4298      	cmp	r0, r3
   d730c:	da05      	bge.n	d731a <ltoa+0x2e>
      {
            *head++ = '-';
   d730e:	232d      	movs	r3, #45	; 0x2d
   d7310:	f101 0801 	add.w	r8, r1, #1
   d7314:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d7316:	4240      	negs	r0, r0
   d7318:	e001      	b.n	d731e <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d731a:	b1b0      	cbz	r0, d734a <ltoa+0x5e>
   d731c:	46a0      	mov	r8, r4
   d731e:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d7322:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d7324:	462a      	mov	r2, r5
   d7326:	4601      	mov	r1, r0
   d7328:	a801      	add	r0, sp, #4
   d732a:	f004 f9e1 	bl	db6f0 <ldiv>
   d732e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d7330:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d7332:	2b09      	cmp	r3, #9
   d7334:	bfcc      	ite	gt
   d7336:	2237      	movgt	r2, #55	; 0x37
   d7338:	2230      	movle	r2, #48	; 0x30
   d733a:	fa52 f383 	uxtab	r3, r2, r3
   d733e:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d7342:	3701      	adds	r7, #1
   d7344:	2800      	cmp	r0, #0
   d7346:	d1ed      	bne.n	d7324 <ltoa+0x38>
   d7348:	e006      	b.n	d7358 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d734a:	2330      	movs	r3, #48	; 0x30
   d734c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7350:	46a0      	mov	r8, r4
   d7352:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d7356:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d7358:	463a      	mov	r2, r7
   d735a:	1c71      	adds	r1, r6, #1
   d735c:	4640      	mov	r0, r8
   d735e:	f004 f9db 	bl	db718 <memcpy>
      return str;
}
   d7362:	4620      	mov	r0, r4
   d7364:	b00c      	add	sp, #48	; 0x30
   d7366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d736a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d736a:	b510      	push	{r4, lr}
   d736c:	4604      	mov	r4, r0
{
	free(buffer);
   d736e:	6800      	ldr	r0, [r0, #0]
   d7370:	f7ff fde2 	bl	d6f38 <free>
}
   d7374:	4620      	mov	r0, r4
   d7376:	bd10      	pop	{r4, pc}

000d7378 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7378:	b510      	push	{r4, lr}
   d737a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d737c:	6800      	ldr	r0, [r0, #0]
   d737e:	b108      	cbz	r0, d7384 <_ZN6String10invalidateEv+0xc>
   d7380:	f7ff fdda 	bl	d6f38 <free>
	buffer = NULL;
   d7384:	2300      	movs	r3, #0
   d7386:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7388:	60a3      	str	r3, [r4, #8]
   d738a:	6063      	str	r3, [r4, #4]
   d738c:	bd10      	pop	{r4, pc}

000d738e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d738e:	b538      	push	{r3, r4, r5, lr}
   d7390:	4604      	mov	r4, r0
   d7392:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7394:	6800      	ldr	r0, [r0, #0]
   d7396:	3101      	adds	r1, #1
   d7398:	f7ff fdd6 	bl	d6f48 <realloc>
	if (newbuffer) {
   d739c:	b110      	cbz	r0, d73a4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d739e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d73a2:	2001      	movs	r0, #1
	}
	return 0;
}
   d73a4:	bd38      	pop	{r3, r4, r5, pc}

000d73a6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d73a6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d73a8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d73aa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d73ac:	b113      	cbz	r3, d73b4 <_ZN6String7reserveEj+0xe>
   d73ae:	6843      	ldr	r3, [r0, #4]
   d73b0:	428b      	cmp	r3, r1
   d73b2:	d207      	bcs.n	d73c4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d73b4:	4620      	mov	r0, r4
   d73b6:	f7ff ffea 	bl	d738e <_ZN6String12changeBufferEj>
   d73ba:	b120      	cbz	r0, d73c6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d73bc:	68a3      	ldr	r3, [r4, #8]
   d73be:	b90b      	cbnz	r3, d73c4 <_ZN6String7reserveEj+0x1e>
   d73c0:	6822      	ldr	r2, [r4, #0]
   d73c2:	7013      	strb	r3, [r2, #0]
   d73c4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d73c6:	bd10      	pop	{r4, pc}

000d73c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d73c8:	b570      	push	{r4, r5, r6, lr}
   d73ca:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d73cc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d73ce:	4604      	mov	r4, r0
   d73d0:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d73d2:	f7ff ffe8 	bl	d73a6 <_ZN6String7reserveEj>
   d73d6:	b918      	cbnz	r0, d73e0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d73d8:	4620      	mov	r0, r4
   d73da:	f7ff ffcd 	bl	d7378 <_ZN6String10invalidateEv>
		return *this;
   d73de:	e009      	b.n	d73f4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d73e0:	462a      	mov	r2, r5
   d73e2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d73e4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d73e6:	6820      	ldr	r0, [r4, #0]
   d73e8:	f004 f996 	bl	db718 <memcpy>
	buffer[len] = 0;
   d73ec:	6822      	ldr	r2, [r4, #0]
   d73ee:	68a3      	ldr	r3, [r4, #8]
   d73f0:	2100      	movs	r1, #0
   d73f2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d73f4:	4620      	mov	r0, r4
   d73f6:	bd70      	pop	{r4, r5, r6, pc}

000d73f8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d73f8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73fa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d73fc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d73fe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7400:	6043      	str	r3, [r0, #4]
	len = 0;
   d7402:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7404:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7406:	460d      	mov	r5, r1
   d7408:	b139      	cbz	r1, d741a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d740a:	4608      	mov	r0, r1
   d740c:	f004 fa07 	bl	db81e <strlen>
   d7410:	4629      	mov	r1, r5
   d7412:	4602      	mov	r2, r0
   d7414:	4620      	mov	r0, r4
   d7416:	f7ff ffd7 	bl	d73c8 <_ZN6String4copyEPKcj>
}
   d741a:	4620      	mov	r0, r4
   d741c:	bd38      	pop	{r3, r4, r5, pc}

000d741e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d741e:	b538      	push	{r3, r4, r5, lr}
   d7420:	4605      	mov	r5, r0
	if (buffer) {
   d7422:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7424:	460c      	mov	r4, r1
	if (buffer) {
   d7426:	b160      	cbz	r0, d7442 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7428:	686a      	ldr	r2, [r5, #4]
   d742a:	688b      	ldr	r3, [r1, #8]
   d742c:	429a      	cmp	r2, r3
   d742e:	d306      	bcc.n	d743e <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7430:	6809      	ldr	r1, [r1, #0]
   d7432:	f004 f9d1 	bl	db7d8 <strcpy>
			len = rhs.len;
   d7436:	68a3      	ldr	r3, [r4, #8]
   d7438:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d743a:	2300      	movs	r3, #0
   d743c:	e00a      	b.n	d7454 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d743e:	f7ff fd7b 	bl	d6f38 <free>
		}
	}
	buffer = rhs.buffer;
   d7442:	6823      	ldr	r3, [r4, #0]
   d7444:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7446:	6863      	ldr	r3, [r4, #4]
   d7448:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d744a:	68a3      	ldr	r3, [r4, #8]
   d744c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d744e:	2300      	movs	r3, #0
   d7450:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d7452:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d7454:	60a3      	str	r3, [r4, #8]
   d7456:	bd38      	pop	{r3, r4, r5, pc}

000d7458 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7458:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d745a:	b510      	push	{r4, lr}
   d745c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d745e:	d001      	beq.n	d7464 <_ZN6StringaSEOS_+0xc>
   d7460:	f7ff ffdd 	bl	d741e <_ZN6String4moveERS_>
	return *this;
}
   d7464:	4620      	mov	r0, r4
   d7466:	bd10      	pop	{r4, pc}

000d7468 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7468:	b570      	push	{r4, r5, r6, lr}
   d746a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d746c:	b19a      	cbz	r2, d7496 <_ZNK6String8getBytesEPhjj+0x2e>
   d746e:	b191      	cbz	r1, d7496 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7470:	6885      	ldr	r5, [r0, #8]
   d7472:	429d      	cmp	r5, r3
   d7474:	d802      	bhi.n	d747c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7476:	2300      	movs	r3, #0
   d7478:	700b      	strb	r3, [r1, #0]
		return;
   d747a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d747c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d747e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7480:	6801      	ldr	r1, [r0, #0]
   d7482:	42ac      	cmp	r4, r5
   d7484:	bf28      	it	cs
   d7486:	462c      	movcs	r4, r5
   d7488:	4419      	add	r1, r3
   d748a:	4622      	mov	r2, r4
   d748c:	4630      	mov	r0, r6
   d748e:	f004 fa08 	bl	db8a2 <strncpy>
	buf[n] = 0;
   d7492:	2300      	movs	r3, #0
   d7494:	5533      	strb	r3, [r6, r4]
   d7496:	bd70      	pop	{r4, r5, r6, pc}

000d7498 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d749a:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d749c:	460f      	mov	r7, r1
   d749e:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d74a0:	490c      	ldr	r1, [pc, #48]	; (d74d4 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d74a2:	bf88      	it	hi
   d74a4:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d74a6:	4614      	mov	r4, r2
   d74a8:	4606      	mov	r6, r0
	if (left > right) {
   d74aa:	bf84      	itt	hi
   d74ac:	462c      	movhi	r4, r5
   d74ae:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d74b0:	f7ff ffa2 	bl	d73f8 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d74b4:	68ba      	ldr	r2, [r7, #8]
   d74b6:	4294      	cmp	r4, r2
   d74b8:	d80a      	bhi.n	d74d0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d74ba:	6839      	ldr	r1, [r7, #0]
   d74bc:	4295      	cmp	r5, r2
   d74be:	bf94      	ite	ls
   d74c0:	ebc4 0205 	rsbls	r2, r4, r5
   d74c4:	ebc4 0202 	rsbhi	r2, r4, r2
   d74c8:	4421      	add	r1, r4
   d74ca:	4630      	mov	r0, r6
   d74cc:	f7ff ff7c 	bl	d73c8 <_ZN6String4copyEPKcj>
	return out;
}
   d74d0:	4630      	mov	r0, r6
   d74d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d74d4:	000dc5a9 	.word	0x000dc5a9

000d74d8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d74d8:	b510      	push	{r4, lr}
   d74da:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d74dc:	6800      	ldr	r0, [r0, #0]
   d74de:	b108      	cbz	r0, d74e4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d74e0:	f7ff fb2e 	bl	d6b40 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d74e4:	4620      	mov	r0, r4
   d74e6:	bd10      	pop	{r4, pc}

000d74e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74e8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74ea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74ec:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74ee:	689b      	ldr	r3, [r3, #8]
   d74f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74f2:	68a3      	ldr	r3, [r4, #8]
   d74f4:	3b01      	subs	r3, #1
   d74f6:	60a3      	str	r3, [r4, #8]
   d74f8:	b92b      	cbnz	r3, d7506 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d74fa:	6823      	ldr	r3, [r4, #0]
   d74fc:	4620      	mov	r0, r4
   d74fe:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7504:	4718      	bx	r3
   d7506:	bd10      	pop	{r4, pc}

000d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7508:	680b      	ldr	r3, [r1, #0]
   d750a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d750c:	b113      	cbz	r3, d7514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d750e:	685a      	ldr	r2, [r3, #4]
   d7510:	3201      	adds	r2, #1
   d7512:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7514:	4770      	bx	lr

000d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d7516:	b510      	push	{r4, lr}
   d7518:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d751a:	6800      	ldr	r0, [r0, #0]
   d751c:	b128      	cbz	r0, d752a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d751e:	6843      	ldr	r3, [r0, #4]
   d7520:	3b01      	subs	r3, #1
   d7522:	6043      	str	r3, [r0, #4]
   d7524:	b90b      	cbnz	r3, d752a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7526:	f7ff ffdf 	bl	d74e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d752a:	4620      	mov	r0, r4
   d752c:	bd10      	pop	{r4, pc}
	...

000d7530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7530:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7532:	4c06      	ldr	r4, [pc, #24]	; (d754c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7534:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7536:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7538:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d753a:	f7ff faf9 	bl	d6b30 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d753e:	4620      	mov	r0, r4
   d7540:	4a03      	ldr	r2, [pc, #12]	; (d7550 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7542:	4904      	ldr	r1, [pc, #16]	; (d7554 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7548:	f001 bd14 	b.w	d8f74 <__aeabi_atexit>
   d754c:	2003e3c4 	.word	0x2003e3c4
   d7550:	2003e148 	.word	0x2003e148
   d7554:	000d74d9 	.word	0x000d74d9

000d7558 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d755a:	4606      	mov	r6, r0
   d755c:	460d      	mov	r5, r1
   d755e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7560:	2400      	movs	r4, #0
  while (size--) {
   d7562:	42bd      	cmp	r5, r7
   d7564:	d00c      	beq.n	d7580 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7566:	6833      	ldr	r3, [r6, #0]
   d7568:	f815 1b01 	ldrb.w	r1, [r5], #1
   d756c:	689b      	ldr	r3, [r3, #8]
   d756e:	4630      	mov	r0, r6
   d7570:	4798      	blx	r3
     if (chunk>=0)
   d7572:	2800      	cmp	r0, #0
   d7574:	db01      	blt.n	d757a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7576:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7578:	e7f3      	b.n	d7562 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d757a:	2c00      	cmp	r4, #0
   d757c:	bf08      	it	eq
   d757e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7580:	4620      	mov	r0, r4
   d7582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7584 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7584:	b570      	push	{r4, r5, r6, lr}
   d7586:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7588:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d758a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d758c:	b149      	cbz	r1, d75a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d758e:	f004 f946 	bl	db81e <strlen>
   d7592:	682b      	ldr	r3, [r5, #0]
   d7594:	4602      	mov	r2, r0
   d7596:	4621      	mov	r1, r4
   d7598:	4628      	mov	r0, r5
   d759a:	68db      	ldr	r3, [r3, #12]
    }
   d759c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d75a0:	4718      	bx	r3
    }
   d75a2:	bd70      	pop	{r4, r5, r6, pc}

000d75a4 <_ZN5Print5printEPKc>:
   d75a4:	b508      	push	{r3, lr}
   d75a6:	f7ff ffed 	bl	d7584 <_ZN5Print5writeEPKc>
   d75aa:	bd08      	pop	{r3, pc}

000d75ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d75ac:	6803      	ldr	r3, [r0, #0]
   d75ae:	689b      	ldr	r3, [r3, #8]
   d75b0:	4718      	bx	r3

000d75b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d75b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d75b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d75b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d75b8:	f7ff fff8 	bl	d75ac <_ZN5Print5printEc>
  n += print('\n');
   d75bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d75be:	4604      	mov	r4, r0
  n += print('\n');
   d75c0:	4628      	mov	r0, r5
   d75c2:	f7ff fff3 	bl	d75ac <_ZN5Print5printEc>
  return n;
}
   d75c6:	4420      	add	r0, r4
   d75c8:	bd38      	pop	{r3, r4, r5, pc}

000d75ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d75ca:	b538      	push	{r3, r4, r5, lr}
   d75cc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d75ce:	f7ff ffd9 	bl	d7584 <_ZN5Print5writeEPKc>
   d75d2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d75d4:	4628      	mov	r0, r5
   d75d6:	f7ff ffec 	bl	d75b2 <_ZN5Print7printlnEv>
  return n;
}
   d75da:	4420      	add	r0, r4
   d75dc:	bd38      	pop	{r3, r4, r5, pc}

000d75de <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d75de:	f7ff bff4 	b.w	d75ca <_ZN5Print7printlnEPKc>

000d75e2 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d75e2:	b530      	push	{r4, r5, lr}
   d75e4:	b08b      	sub	sp, #44	; 0x2c
   d75e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d75e8:	2100      	movs	r1, #0
   d75ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d75ee:	2a01      	cmp	r2, #1
   d75f0:	bf98      	it	ls
   d75f2:	220a      	movls	r2, #10
   d75f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d75f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d75fc:	fb05 3312 	mls	r3, r5, r2, r3
   d7600:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7604:	2b09      	cmp	r3, #9
   d7606:	bf94      	ite	ls
   d7608:	3330      	addls	r3, #48	; 0x30
   d760a:	3337      	addhi	r3, #55	; 0x37
   d760c:	b2db      	uxtb	r3, r3
   d760e:	4621      	mov	r1, r4
   d7610:	f804 3901 	strb.w	r3, [r4], #-1
   d7614:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7616:	2d00      	cmp	r5, #0
   d7618:	d1ee      	bne.n	d75f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d761a:	f7ff ffb3 	bl	d7584 <_ZN5Print5writeEPKc>
}
   d761e:	b00b      	add	sp, #44	; 0x2c
   d7620:	bd30      	pop	{r4, r5, pc}
	...

000d7624 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7628:	ec57 6b10 	vmov	r6, r7, d0
   d762c:	4682      	mov	sl, r0
   d762e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7630:	ee10 2a10 	vmov	r2, s0
   d7634:	463b      	mov	r3, r7
   d7636:	ee10 0a10 	vmov	r0, s0
   d763a:	4639      	mov	r1, r7
   d763c:	f003 fb92 	bl	dad64 <__aeabi_dcmpun>
   d7640:	b108      	cbz	r0, d7646 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7642:	494e      	ldr	r1, [pc, #312]	; (d777c <_ZN5Print10printFloatEdh+0x158>)
   d7644:	e012      	b.n	d766c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7646:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d764a:	f04f 32ff 	mov.w	r2, #4294967295
   d764e:	4b4c      	ldr	r3, [pc, #304]	; (d7780 <_ZN5Print10printFloatEdh+0x15c>)
   d7650:	4630      	mov	r0, r6
   d7652:	4649      	mov	r1, r9
   d7654:	f003 fb86 	bl	dad64 <__aeabi_dcmpun>
   d7658:	b968      	cbnz	r0, d7676 <_ZN5Print10printFloatEdh+0x52>
   d765a:	f04f 32ff 	mov.w	r2, #4294967295
   d765e:	4b48      	ldr	r3, [pc, #288]	; (d7780 <_ZN5Print10printFloatEdh+0x15c>)
   d7660:	4630      	mov	r0, r6
   d7662:	4649      	mov	r1, r9
   d7664:	f003 fb60 	bl	dad28 <__aeabi_dcmple>
   d7668:	b928      	cbnz	r0, d7676 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d766a:	4946      	ldr	r1, [pc, #280]	; (d7784 <_ZN5Print10printFloatEdh+0x160>)
   d766c:	4650      	mov	r0, sl
   d766e:	f7ff ff89 	bl	d7584 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7676:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d767a:	4b43      	ldr	r3, [pc, #268]	; (d7788 <_ZN5Print10printFloatEdh+0x164>)
   d767c:	4630      	mov	r0, r6
   d767e:	4639      	mov	r1, r7
   d7680:	f003 fb66 	bl	dad50 <__aeabi_dcmpgt>
   d7684:	b108      	cbz	r0, d768a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7686:	4941      	ldr	r1, [pc, #260]	; (d778c <_ZN5Print10printFloatEdh+0x168>)
   d7688:	e7f0      	b.n	d766c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d768a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d768e:	4b40      	ldr	r3, [pc, #256]	; (d7790 <_ZN5Print10printFloatEdh+0x16c>)
   d7690:	4630      	mov	r0, r6
   d7692:	4639      	mov	r1, r7
   d7694:	f003 fb3e 	bl	dad14 <__aeabi_dcmplt>
   d7698:	2800      	cmp	r0, #0
   d769a:	d1f4      	bne.n	d7686 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d769c:	2200      	movs	r2, #0
   d769e:	2300      	movs	r3, #0
   d76a0:	4630      	mov	r0, r6
   d76a2:	4639      	mov	r1, r7
   d76a4:	f003 fb36 	bl	dad14 <__aeabi_dcmplt>
   d76a8:	b140      	cbz	r0, d76bc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d76aa:	212d      	movs	r1, #45	; 0x2d
   d76ac:	4650      	mov	r0, sl
   d76ae:	f7ff ff7d 	bl	d75ac <_ZN5Print5printEc>
     number = -number;
   d76b2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d76b6:	4604      	mov	r4, r0
     number = -number;
   d76b8:	461f      	mov	r7, r3
   d76ba:	e000      	b.n	d76be <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d76bc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d76be:	4935      	ldr	r1, [pc, #212]	; (d7794 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d76c0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d76c4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d76c6:	fa5f f388 	uxtb.w	r3, r8
   d76ca:	429d      	cmp	r5, r3
   d76cc:	d906      	bls.n	d76dc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d76ce:	2200      	movs	r2, #0
   d76d0:	4b31      	ldr	r3, [pc, #196]	; (d7798 <_ZN5Print10printFloatEdh+0x174>)
   d76d2:	f003 f9d7 	bl	daa84 <__aeabi_ddiv>
   d76d6:	f108 0801 	add.w	r8, r8, #1
   d76da:	e7f4      	b.n	d76c6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d76dc:	4632      	mov	r2, r6
   d76de:	463b      	mov	r3, r7
   d76e0:	f002 fef4 	bl	da4cc <__adddf3>
   d76e4:	460f      	mov	r7, r1
   d76e6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d76e8:	f003 fb7a 	bl	dade0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d76ec:	220a      	movs	r2, #10
   d76ee:	4601      	mov	r1, r0
   d76f0:	4680      	mov	r8, r0
   d76f2:	4650      	mov	r0, sl
   d76f4:	f7ff ff75 	bl	d75e2 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d76f8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d76fa:	b3e5      	cbz	r5, d7776 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d76fc:	4640      	mov	r0, r8
   d76fe:	f003 f821 	bl	da744 <__aeabi_ui2d>
   d7702:	4602      	mov	r2, r0
   d7704:	460b      	mov	r3, r1
   d7706:	4630      	mov	r0, r6
   d7708:	4639      	mov	r1, r7
   d770a:	f002 fedd 	bl	da4c8 <__aeabi_dsub>
   d770e:	4606      	mov	r6, r0
   d7710:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7712:	4650      	mov	r0, sl
   d7714:	4921      	ldr	r1, [pc, #132]	; (d779c <_ZN5Print10printFloatEdh+0x178>)
   d7716:	f7ff ff35 	bl	d7584 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d771a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d771c:	2200      	movs	r2, #0
   d771e:	4b1e      	ldr	r3, [pc, #120]	; (d7798 <_ZN5Print10printFloatEdh+0x174>)
   d7720:	4630      	mov	r0, r6
   d7722:	4639      	mov	r1, r7
   d7724:	f003 f884 	bl	da830 <__aeabi_dmul>
   d7728:	4606      	mov	r6, r0
   d772a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d772c:	f003 fb30 	bl	dad90 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7730:	f1b0 0900 	subs.w	r9, r0, #0
   d7734:	da07      	bge.n	d7746 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d7736:	212d      	movs	r1, #45	; 0x2d
   d7738:	4650      	mov	r0, sl
   d773a:	f7ff ff37 	bl	d75ac <_ZN5Print5printEc>
            val = -n;
   d773e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7742:	4680      	mov	r8, r0
   d7744:	e002      	b.n	d774c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d7746:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7748:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d774c:	220a      	movs	r2, #10
   d774e:	4650      	mov	r0, sl
   d7750:	f7ff ff47 	bl	d75e2 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d7754:	4440      	add	r0, r8
   d7756:	4404      	add	r4, r0
    remainder -= toPrint;
   d7758:	4648      	mov	r0, r9
   d775a:	f003 f803 	bl	da764 <__aeabi_i2d>
   d775e:	4602      	mov	r2, r0
   d7760:	460b      	mov	r3, r1
   d7762:	4630      	mov	r0, r6
   d7764:	4639      	mov	r1, r7
   d7766:	f002 feaf 	bl	da4c8 <__aeabi_dsub>
   d776a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d776c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7770:	4606      	mov	r6, r0
   d7772:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7774:	d1d2      	bne.n	d771c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7776:	4620      	mov	r0, r4
   d7778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d777c:	000dcd88 	.word	0x000dcd88
   d7780:	7fefffff 	.word	0x7fefffff
   d7784:	000dcd90 	.word	0x000dcd90
   d7788:	41efffff 	.word	0x41efffff
   d778c:	000dcd8c 	.word	0x000dcd8c
   d7790:	c1efffff 	.word	0xc1efffff
   d7794:	3fe00000 	.word	0x3fe00000
   d7798:	40240000 	.word	0x40240000
   d779c:	000dc729 	.word	0x000dc729

000d77a0 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d77a0:	b538      	push	{r3, r4, r5, lr}
   d77a2:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d77a4:	ee10 0a10 	vmov	r0, s0
   d77a8:	b2cd      	uxtb	r5, r1
   d77aa:	f002 ffed 	bl	da788 <__aeabi_f2d>
   d77ae:	ec41 0b10 	vmov	d0, r0, r1
   d77b2:	4629      	mov	r1, r5
   d77b4:	4620      	mov	r0, r4
}
   d77b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d77ba:	f7ff bf33 	b.w	d7624 <_ZN5Print10printFloatEdh>

000d77be <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d77be:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d77c0:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d77c2:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d77c4:	f7ff ff2e 	bl	d7624 <_ZN5Print10printFloatEdh>
   d77c8:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d77ca:	4628      	mov	r0, r5
   d77cc:	f7ff fef1 	bl	d75b2 <_ZN5Print7printlnEv>
  return n;
}
   d77d0:	4420      	add	r0, r4
   d77d2:	bd38      	pop	{r3, r4, r5, pc}

000d77d4 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d77d4:	b538      	push	{r3, r4, r5, lr}
   d77d6:	4604      	mov	r4, r0
    return println((double)num, digits);
   d77d8:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d77dc:	460d      	mov	r5, r1
    return println((double)num, digits);
   d77de:	f002 ffd3 	bl	da788 <__aeabi_f2d>
   d77e2:	ec41 0b10 	vmov	d0, r0, r1
   d77e6:	4629      	mov	r1, r5
   d77e8:	4620      	mov	r0, r4
}
   d77ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d77ee:	f7ff bfe6 	b.w	d77be <_ZN5Print7printlnEdi>

000d77f2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d77f2:	b40c      	push	{r2, r3}
   d77f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77f8:	b087      	sub	sp, #28
   d77fa:	af00      	add	r7, sp, #0
   d77fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7800:	4605      	mov	r5, r0
   d7802:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7806:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7808:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d780a:	4623      	mov	r3, r4
   d780c:	464a      	mov	r2, r9
   d780e:	2114      	movs	r1, #20
   d7810:	1d38      	adds	r0, r7, #4
   d7812:	f7ff fbb9 	bl	d6f88 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7816:	2813      	cmp	r0, #19
   d7818:	d805      	bhi.n	d7826 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d781a:	1d39      	adds	r1, r7, #4
   d781c:	4628      	mov	r0, r5
   d781e:	f7ff feb1 	bl	d7584 <_ZN5Print5writeEPKc>
   d7822:	4604      	mov	r4, r0
   d7824:	e013      	b.n	d784e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7826:	f100 0308 	add.w	r3, r0, #8
   d782a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d782e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7830:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7834:	1c41      	adds	r1, r0, #1
   d7836:	4623      	mov	r3, r4
   d7838:	464a      	mov	r2, r9
   d783a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d783c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d783e:	f7ff fba3 	bl	d6f88 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7842:	4669      	mov	r1, sp
   d7844:	4628      	mov	r0, r5
   d7846:	f7ff fe9d 	bl	d7584 <_ZN5Print5writeEPKc>
   d784a:	4604      	mov	r4, r0
   d784c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d784e:	b11e      	cbz	r6, d7858 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7850:	4628      	mov	r0, r5
   d7852:	f7ff feae 	bl	d75b2 <_ZN5Print7printlnEv>
   d7856:	4404      	add	r4, r0
    return n;
}
   d7858:	4620      	mov	r0, r4
   d785a:	371c      	adds	r7, #28
   d785c:	46bd      	mov	sp, r7
   d785e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7862:	b002      	add	sp, #8
   d7864:	4770      	bx	lr
	...

000d7868 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7868:	4b01      	ldr	r3, [pc, #4]	; (d7870 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d786a:	4a02      	ldr	r2, [pc, #8]	; (d7874 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d786c:	601a      	str	r2, [r3, #0]
   d786e:	4770      	bx	lr
   d7870:	2003e3c8 	.word	0x2003e3c8
   d7874:	000dce07 	.word	0x000dce07

000d7878 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7878:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d787a:	2000      	movs	r0, #0
   d787c:	f7ff fb44 	bl	d6f08 <spark_sync_time_pending>
   d7880:	b128      	cbz	r0, d788e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7882:	f7ff fb29 	bl	d6ed8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7886:	f080 0001 	eor.w	r0, r0, #1
   d788a:	b2c0      	uxtb	r0, r0
   d788c:	bd08      	pop	{r3, pc}
   d788e:	2001      	movs	r0, #1
    }
   d7890:	bd08      	pop	{r3, pc}
	...

000d7894 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7894:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7898:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d78a0:	d40f      	bmi.n	d78c2 <_ZN9TimeClass4zoneEf+0x2e>
   d78a2:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d78a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d78aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d78ae:	dc08      	bgt.n	d78c2 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d78b0:	eddf 7a04 	vldr	s15, [pc, #16]	; d78c4 <_ZN9TimeClass4zoneEf+0x30>
   d78b4:	4b04      	ldr	r3, [pc, #16]	; (d78c8 <_ZN9TimeClass4zoneEf+0x34>)
   d78b6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d78ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d78be:	ed83 0a00 	vstr	s0, [r3]
   d78c2:	4770      	bx	lr
   d78c4:	45610000 	.word	0x45610000
   d78c8:	2003e3d4 	.word	0x2003e3d4

000d78cc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d78cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d78ce:	4b0e      	ldr	r3, [pc, #56]	; (d7908 <_ZN9TimeClass7timeStrEl+0x3c>)
   d78d0:	681b      	ldr	r3, [r3, #0]
   d78d2:	4419      	add	r1, r3
   d78d4:	4b0d      	ldr	r3, [pc, #52]	; (d790c <_ZN9TimeClass7timeStrEl+0x40>)
   d78d6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d78d8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d78da:	a802      	add	r0, sp, #8
   d78dc:	4419      	add	r1, r3
   d78de:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d78e2:	f003 fe0d 	bl	db500 <localtime>
        char* ascstr = asctime(calendar_time);
   d78e6:	f003 fdbd 	bl	db464 <asctime>
   d78ea:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d78ec:	f003 ff97 	bl	db81e <strlen>
        ascstr[len-1] = 0; // remove final newline
   d78f0:	4428      	add	r0, r5
   d78f2:	2300      	movs	r3, #0
   d78f4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d78f8:	4629      	mov	r1, r5
   d78fa:	4620      	mov	r0, r4
   d78fc:	f7ff fd7c 	bl	d73f8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7900:	4620      	mov	r0, r4
   d7902:	b003      	add	sp, #12
   d7904:	bd30      	pop	{r4, r5, pc}
   d7906:	bf00      	nop
   d7908:	2003e3d4 	.word	0x2003e3d4
   d790c:	2003e3d0 	.word	0x2003e3d0

000d7910 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7910:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7912:	2000      	movs	r0, #0
   d7914:	f7ff f8ec 	bl	d6af0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7918:	4604      	mov	r4, r0
   d791a:	b968      	cbnz	r0, d7938 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d791c:	f7ff fa40 	bl	d6da0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7920:	2801      	cmp	r0, #1
   d7922:	d10b      	bne.n	d793c <_ZN9TimeClass7isValidEv+0x2c>
   d7924:	4620      	mov	r0, r4
   d7926:	f7ff fa63 	bl	d6df0 <system_thread_get_state>
   d792a:	b938      	cbnz	r0, d793c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d792c:	f7ff ffa4 	bl	d7878 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7930:	b930      	cbnz	r0, d7940 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7932:	f7ff fac9 	bl	d6ec8 <spark_process>
   d7936:	e7f9      	b.n	d792c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7938:	2001      	movs	r0, #1
   d793a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d793c:	2000      	movs	r0, #0
   d793e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7940:	f7ff ff9a 	bl	d7878 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7944:	2000      	movs	r0, #0
   d7946:	f7ff f8d3 	bl	d6af0 <HAL_RTC_Time_Is_Valid>
   d794a:	3000      	adds	r0, #0
   d794c:	bf18      	it	ne
   d794e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7952:	b508      	push	{r3, lr}
    (void)isValid();
   d7954:	f7ff ffdc 	bl	d7910 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d795c:	f7ff b8c0 	b.w	d6ae0 <HAL_RTC_Get_UnixTime>

000d7960 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7960:	4b02      	ldr	r3, [pc, #8]	; (d796c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7962:	681a      	ldr	r2, [r3, #0]
   d7964:	4b02      	ldr	r3, [pc, #8]	; (d7970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7966:	601a      	str	r2, [r3, #0]
   d7968:	4770      	bx	lr
   d796a:	bf00      	nop
   d796c:	2003e088 	.word	0x2003e088
   d7970:	2003e3cc 	.word	0x2003e3cc

000d7974 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7974:	2100      	movs	r1, #0
   d7976:	f7ff ba23 	b.w	d6dc0 <system_delay_ms>

000d797a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d797a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d797c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d797e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7980:	b113      	cbz	r3, d7988 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7982:	2203      	movs	r2, #3
   d7984:	4601      	mov	r1, r0
   d7986:	4798      	blx	r3
    }
   d7988:	4620      	mov	r0, r4
   d798a:	bd10      	pop	{r4, pc}

000d798c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d798c:	b510      	push	{r4, lr}
   d798e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7990:	f7ff fff3 	bl	d797a <_ZNSt14_Function_baseD1Ev>
   d7994:	4620      	mov	r0, r4
   d7996:	bd10      	pop	{r4, pc}

000d7998 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7998:	b513      	push	{r0, r1, r4, lr}
   d799a:	460b      	mov	r3, r1
   d799c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d799e:	c803      	ldmia	r0, {r0, r1}
   d79a0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d79a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d79a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d79ac:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d79b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d79b4:	b002      	add	sp, #8
   d79b6:	bd10      	pop	{r4, pc}

000d79b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79b8:	4803      	ldr	r0, [pc, #12]	; (d79c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d79ba:	4a04      	ldr	r2, [pc, #16]	; (d79cc <_GLOBAL__sub_I_RGB+0x14>)
   d79bc:	4904      	ldr	r1, [pc, #16]	; (d79d0 <_GLOBAL__sub_I_RGB+0x18>)
   d79be:	2300      	movs	r3, #0
   d79c0:	6083      	str	r3, [r0, #8]
   d79c2:	f001 bad7 	b.w	d8f74 <__aeabi_atexit>
   d79c6:	bf00      	nop
   d79c8:	2003e3d8 	.word	0x2003e3d8
   d79cc:	2003e148 	.word	0x2003e148
   d79d0:	000d798d 	.word	0x000d798d

000d79d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d79d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d79d6:	4b0c      	ldr	r3, [pc, #48]	; (d7a08 <serialEventRun+0x34>)
   d79d8:	b133      	cbz	r3, d79e8 <serialEventRun+0x14>
   d79da:	f000 fc31 	bl	d8240 <_Z16_fetch_usbserialv>
   d79de:	6803      	ldr	r3, [r0, #0]
   d79e0:	691b      	ldr	r3, [r3, #16]
   d79e2:	4798      	blx	r3
   d79e4:	2800      	cmp	r0, #0
   d79e6:	dc09      	bgt.n	d79fc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d79e8:	4b08      	ldr	r3, [pc, #32]	; (d7a0c <serialEventRun+0x38>)
   d79ea:	b163      	cbz	r3, d7a06 <serialEventRun+0x32>
   d79ec:	f000 fcaa 	bl	d8344 <_Z22__fetch_global_Serial1v>
   d79f0:	6803      	ldr	r3, [r0, #0]
   d79f2:	691b      	ldr	r3, [r3, #16]
   d79f4:	4798      	blx	r3
   d79f6:	2800      	cmp	r0, #0
   d79f8:	dc03      	bgt.n	d7a02 <serialEventRun+0x2e>
   d79fa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d79fc:	f3af 8000 	nop.w
   d7a00:	e7f2      	b.n	d79e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7a02:	f3af 8000 	nop.w
   d7a06:	bd08      	pop	{r3, pc}
	...

000d7a10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7a10:	b508      	push	{r3, lr}
	serialEventRun();
   d7a12:	f7ff ffdf 	bl	d79d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a16:	f7ff f85b 	bl	d6ad0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a1a:	4b01      	ldr	r3, [pc, #4]	; (d7a20 <_post_loop+0x10>)
   d7a1c:	6018      	str	r0, [r3, #0]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	2003e70c 	.word	0x2003e70c

000d7a24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a24:	4802      	ldr	r0, [pc, #8]	; (d7a30 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a26:	4a03      	ldr	r2, [pc, #12]	; (d7a34 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a28:	4903      	ldr	r1, [pc, #12]	; (d7a38 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a2a:	1a12      	subs	r2, r2, r0
   d7a2c:	f003 be74 	b.w	db718 <memcpy>
   d7a30:	2003f400 	.word	0x2003f400
   d7a34:	2003f404 	.word	0x2003f404
   d7a38:	000dd338 	.word	0x000dd338

000d7a3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a3e:	2300      	movs	r3, #0
   d7a40:	9300      	str	r3, [sp, #0]
   d7a42:	461a      	mov	r2, r3
   d7a44:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a48:	f7ff f9e4 	bl	d6e14 <system_ctrl_set_result>
}
   d7a4c:	b003      	add	sp, #12
   d7a4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7a54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a56:	8843      	ldrh	r3, [r0, #2]
   d7a58:	2b0a      	cmp	r3, #10
   d7a5a:	d008      	beq.n	d7a6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a5c:	2b50      	cmp	r3, #80	; 0x50
   d7a5e:	d109      	bne.n	d7a74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7a60:	4b09      	ldr	r3, [pc, #36]	; (d7a88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7a62:	681b      	ldr	r3, [r3, #0]
   d7a64:	b13b      	cbz	r3, d7a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7a66:	b003      	add	sp, #12
   d7a68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7a6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7a6e:	f7ff ffe5 	bl	d7a3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7a72:	e006      	b.n	d7a82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a74:	2300      	movs	r3, #0
   d7a76:	9300      	str	r3, [sp, #0]
   d7a78:	461a      	mov	r2, r3
   d7a7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a7e:	f7ff f9c9 	bl	d6e14 <system_ctrl_set_result>
        break;
    }
}
   d7a82:	b003      	add	sp, #12
   d7a84:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a88:	2003e3e8 	.word	0x2003e3e8

000d7a8c <module_user_init_hook>:

void module_user_init_hook()
{
   d7a8c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7a8e:	4c10      	ldr	r4, [pc, #64]	; (d7ad0 <module_user_init_hook+0x44>)
   d7a90:	4d10      	ldr	r5, [pc, #64]	; (d7ad4 <module_user_init_hook+0x48>)
   d7a92:	6823      	ldr	r3, [r4, #0]
   d7a94:	42ab      	cmp	r3, r5
   d7a96:	4b10      	ldr	r3, [pc, #64]	; (d7ad8 <module_user_init_hook+0x4c>)
   d7a98:	bf0c      	ite	eq
   d7a9a:	2201      	moveq	r2, #1
   d7a9c:	2200      	movne	r2, #0
   d7a9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7aa0:	d002      	beq.n	d7aa8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7aa2:	f7ff ffbf 	bl	d7a24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7aa6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7aa8:	f7ff f802 	bl	d6ab0 <HAL_RNG_GetRandomNumber>
   d7aac:	4604      	mov	r4, r0
    srand(seed);
   d7aae:	f003 fe61 	bl	db774 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7ab2:	4b0a      	ldr	r3, [pc, #40]	; (d7adc <module_user_init_hook+0x50>)
   d7ab4:	b113      	cbz	r3, d7abc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7ab6:	4620      	mov	r0, r4
   d7ab8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7abc:	2100      	movs	r1, #0
   d7abe:	4807      	ldr	r0, [pc, #28]	; (d7adc <module_user_init_hook+0x50>)
   d7ac0:	f7ff fa2a 	bl	d6f18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7ac4:	2100      	movs	r1, #0
   d7ac6:	4806      	ldr	r0, [pc, #24]	; (d7ae0 <module_user_init_hook+0x54>)
}
   d7ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7acc:	f7ff b998 	b.w	d6e00 <system_ctrl_set_app_request_handler>
   d7ad0:	2003f400 	.word	0x2003f400
   d7ad4:	9a271c1e 	.word	0x9a271c1e
   d7ad8:	2003e3ec 	.word	0x2003e3ec
   d7adc:	00000000 	.word	0x00000000
   d7ae0:	000d7a55 	.word	0x000d7a55

000d7ae4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7ae4:	4770      	bx	lr

000d7ae6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7ae6:	2000      	movs	r0, #0
   d7ae8:	4770      	bx	lr

000d7aea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7aea:	b510      	push	{r4, lr}
   d7aec:	2110      	movs	r1, #16
   d7aee:	4604      	mov	r4, r0
   d7af0:	f001 fa4e 	bl	d8f90 <_ZdlPvj>
   d7af4:	4620      	mov	r0, r4
   d7af6:	bd10      	pop	{r4, pc}

000d7af8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7af8:	b508      	push	{r3, lr}
      { delete this; }
   d7afa:	b108      	cbz	r0, d7b00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7afc:	f7ff fff5 	bl	d7aea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7b00:	bd08      	pop	{r3, pc}

000d7b02 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7b02:	2200      	movs	r2, #0
   d7b04:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7b06:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7b08:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7b0c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b0e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7b12:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b14:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b16:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b18:	680c      	ldr	r4, [r1, #0]
   d7b1a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b1c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7b1e:	bd10      	pop	{r4, pc}

000d7b20 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7b20:	b510      	push	{r4, lr}
   d7b22:	4604      	mov	r4, r0
    free((void*)msg_);
   d7b24:	6800      	ldr	r0, [r0, #0]
   d7b26:	f7ff fa07 	bl	d6f38 <free>
}
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	bd10      	pop	{r4, pc}

000d7b2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7b2e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7b30:	68c4      	ldr	r4, [r0, #12]
   d7b32:	b1f4      	cbz	r4, d7b72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7b34:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7b36:	2b02      	cmp	r3, #2
   d7b38:	d103      	bne.n	d7b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7b3a:	f104 000c 	add.w	r0, r4, #12
   d7b3e:	f7ff ffef 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7b42:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7b44:	b135      	cbz	r5, d7b54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b46:	4628      	mov	r0, r5
   d7b48:	f7ff ff17 	bl	d797a <_ZNSt14_Function_baseD1Ev>
   d7b4c:	2110      	movs	r1, #16
   d7b4e:	4628      	mov	r0, r5
   d7b50:	f001 fa1e 	bl	d8f90 <_ZdlPvj>
   d7b54:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7b56:	b135      	cbz	r5, d7b66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7b58:	4628      	mov	r0, r5
   d7b5a:	f7ff ff0e 	bl	d797a <_ZNSt14_Function_baseD1Ev>
   d7b5e:	2110      	movs	r1, #16
   d7b60:	4628      	mov	r0, r5
   d7b62:	f001 fa15 	bl	d8f90 <_ZdlPvj>
   d7b66:	4620      	mov	r0, r4
   d7b68:	2114      	movs	r1, #20
   d7b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7b6e:	f001 ba0f 	b.w	d8f90 <_ZdlPvj>
   d7b72:	bd38      	pop	{r3, r4, r5, pc}

000d7b74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7b74:	b513      	push	{r0, r1, r4, lr}
   d7b76:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7b78:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7b7c:	2300      	movs	r3, #0
   d7b7e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7b80:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7b82:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7b84:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b86:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7b88:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7b8a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b8c:	f7ff fcc3 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b90:	4620      	mov	r0, r4
   d7b92:	b002      	add	sp, #8
   d7b94:	bd10      	pop	{r4, pc}

000d7b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b98:	460c      	mov	r4, r1
   d7b9a:	ad02      	add	r5, sp, #8
   d7b9c:	f854 3b04 	ldr.w	r3, [r4], #4
   d7ba0:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7ba4:	4606      	mov	r6, r0
   d7ba6:	460f      	mov	r7, r1
   d7ba8:	a801      	add	r0, sp, #4
   d7baa:	4621      	mov	r1, r4
   d7bac:	f7ff fcac 	bl	d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7bb0:	4629      	mov	r1, r5
   d7bb2:	4630      	mov	r0, r6
   d7bb4:	f7ff ffde 	bl	d7b74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7bb8:	a801      	add	r0, sp, #4
   d7bba:	f7ff fcac 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	f7ff fca9 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7bc4:	4638      	mov	r0, r7
   d7bc6:	2108      	movs	r1, #8
   d7bc8:	f001 f9e2 	bl	d8f90 <_ZdlPvj>
        return p;
    }
   d7bcc:	4630      	mov	r0, r6
   d7bce:	b003      	add	sp, #12
   d7bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7bd4:	b538      	push	{r3, r4, r5, lr}
   d7bd6:	2300      	movs	r3, #0
   d7bd8:	4604      	mov	r4, r0
   d7bda:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7bdc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7bde:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7be0:	f7fc fa5b 	bl	d409a <_Znwj>
   d7be4:	b128      	cbz	r0, d7bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7be6:	2301      	movs	r3, #1
   d7be8:	6043      	str	r3, [r0, #4]
   d7bea:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7bec:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7bee:	6003      	str	r3, [r0, #0]
   d7bf0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7bf2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	bd38      	pop	{r3, r4, r5, pc}
   d7bf8:	000dce98 	.word	0x000dce98

000d7bfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7bfc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7bfe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c00:	b90a      	cbnz	r2, d7c06 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7c02:	f001 f9d8 	bl	d8fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c06:	68c3      	ldr	r3, [r0, #12]
    }
   d7c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c0c:	4718      	bx	r3

000d7c0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c0e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7c10:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7c12:	f100 0110 	add.w	r1, r0, #16
   d7c16:	f7ff fff1 	bl	d7bfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7c1a:	bd08      	pop	{r3, pc}

000d7c1c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7c1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c20:	b90a      	cbnz	r2, d7c26 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7c22:	f001 f9c8 	bl	d8fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c26:	68c3      	ldr	r3, [r0, #12]
    }
   d7c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c2c:	4718      	bx	r3

000d7c2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7c30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7c32:	f100 0110 	add.w	r1, r0, #16
   d7c36:	f7ff fff1 	bl	d7c1c <_ZNKSt8functionIFvRKbEEclES1_>
   d7c3a:	bd08      	pop	{r3, pc}

000d7c3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7c3c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c3e:	2300      	movs	r3, #0
   d7c40:	6083      	str	r3, [r0, #8]
   d7c42:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7c44:	4604      	mov	r4, r0
   d7c46:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7c48:	b12b      	cbz	r3, d7c56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7c4a:	2202      	movs	r2, #2
   d7c4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7c4e:	68eb      	ldr	r3, [r5, #12]
   d7c50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7c52:	68ab      	ldr	r3, [r5, #8]
   d7c54:	60a3      	str	r3, [r4, #8]
	}
    }
   d7c56:	4620      	mov	r0, r4
   d7c58:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c5e:	b089      	sub	sp, #36	; 0x24
   d7c60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7c62:	4668      	mov	r0, sp
   d7c64:	f7ff ff4d 	bl	d7b02 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7c68:	2300      	movs	r3, #0
   d7c6a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7c6e:	f04f 0202 	mov.w	r2, #2
   d7c72:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7c76:	2b00      	cmp	r3, #0
   d7c78:	d103      	bne.n	d7c82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7c7a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7c7e:	2900      	cmp	r1, #0
   d7c80:	d1f7      	bne.n	d7c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7c82:	d002      	beq.n	d7c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7c84:	f88d 3008 	strb.w	r3, [sp, #8]
   d7c88:	e063      	b.n	d7d52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7c8a:	f114 050c 	adds.w	r5, r4, #12
   d7c8e:	d003      	beq.n	d7c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7c90:	4669      	mov	r1, sp
   d7c92:	4628      	mov	r0, r5
   d7c94:	f7ff ff35 	bl	d7b02 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7c98:	f3bf 8f5f 	dmb	sy
   d7c9c:	2301      	movs	r3, #1
   d7c9e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7ca0:	2000      	movs	r0, #0
   d7ca2:	f104 0308 	add.w	r3, r4, #8
   d7ca6:	f3bf 8f5f 	dmb	sy
   d7caa:	e853 6f00 	ldrex	r6, [r3]
   d7cae:	e843 0200 	strex	r2, r0, [r3]
   d7cb2:	2a00      	cmp	r2, #0
   d7cb4:	d1f9      	bne.n	d7caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7cb6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7cba:	2e00      	cmp	r6, #0
   d7cbc:	d049      	beq.n	d7d52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7cbe:	f7ff f887 	bl	d6dd0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7cc2:	b120      	cbz	r0, d7cce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7cc4:	4629      	mov	r1, r5
   d7cc6:	4630      	mov	r0, r6
   d7cc8:	f7ff ff98 	bl	d7bfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7ccc:	e03a      	b.n	d7d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7cce:	4631      	mov	r1, r6
   d7cd0:	a802      	add	r0, sp, #8
   d7cd2:	f7ff ffb3 	bl	d7c3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7cd6:	68e0      	ldr	r0, [r4, #12]
   d7cd8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7cdc:	b108      	cbz	r0, d7ce2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7cde:	f003 fd83 	bl	db7e8 <strdup>
   d7ce2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7ce4:	2010      	movs	r0, #16
   d7ce6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7cea:	f7fc f9d6 	bl	d409a <_Znwj>
   d7cee:	4605      	mov	r5, r0
   d7cf0:	b1e8      	cbz	r0, d7d2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7cf2:	2700      	movs	r7, #0
   d7cf4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7cf6:	2018      	movs	r0, #24
   d7cf8:	f7fc f9cf 	bl	d409a <_Znwj>
   d7cfc:	4604      	mov	r4, r0
   d7cfe:	b188      	cbz	r0, d7d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7d00:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d02:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7d04:	a802      	add	r0, sp, #8
   d7d06:	f7ff fe47 	bl	d7998 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d0a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7d0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d0e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d10:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7d12:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d14:	a906      	add	r1, sp, #24
   d7d16:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d18:	60e3      	str	r3, [r4, #12]
   d7d1a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7d1e:	9205      	str	r2, [sp, #20]
   d7d20:	f7ff feef 	bl	d7b02 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7d24:	4b0d      	ldr	r3, [pc, #52]	; (d7d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7d26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7d28:	4b0d      	ldr	r3, [pc, #52]	; (d7d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d2a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7d2c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7d2e:	a806      	add	r0, sp, #24
   d7d30:	f7ff fef6 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7d34:	a802      	add	r0, sp, #8
   d7d36:	f7ff fe20 	bl	d797a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7d3a:	2200      	movs	r2, #0
   d7d3c:	4629      	mov	r1, r5
   d7d3e:	4809      	ldr	r0, [pc, #36]	; (d7d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7d40:	f7ff f84e 	bl	d6de0 <application_thread_invoke>
   d7d44:	4630      	mov	r0, r6
   d7d46:	f7ff fe18 	bl	d797a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7d4a:	2110      	movs	r1, #16
   d7d4c:	4630      	mov	r0, r6
   d7d4e:	f001 f91f 	bl	d8f90 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7d52:	4668      	mov	r0, sp
   d7d54:	f7ff fee4 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
    }
   d7d58:	b009      	add	sp, #36	; 0x24
   d7d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d5c:	000d7c0f 	.word	0x000d7c0f
   d7d60:	000d7e85 	.word	0x000d7e85
   d7d64:	000d8391 	.word	0x000d8391

000d7d68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d6c:	b08b      	sub	sp, #44	; 0x2c
   d7d6e:	4606      	mov	r6, r0
   d7d70:	460f      	mov	r7, r1
   d7d72:	4690      	mov	r8, r2
   d7d74:	4699      	mov	r9, r3
   d7d76:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d7a:	f7ff f8ad 	bl	d6ed8 <spark_cloud_flag_connected>
   d7d7e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7d80:	4683      	mov	fp, r0
   d7d82:	bb30      	cbnz	r0, d7dd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7d84:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7d88:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7d8a:	a905      	add	r1, sp, #20
   d7d8c:	4628      	mov	r0, r5
   d7d8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7d92:	f7ff feb6 	bl	d7b02 <_ZN8particle5ErrorC1EOS0_>
   d7d96:	2014      	movs	r0, #20
   d7d98:	f7fc f97f 	bl	d409a <_Znwj>
   d7d9c:	4604      	mov	r4, r0
   d7d9e:	b158      	cbz	r0, d7db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7da0:	2302      	movs	r3, #2
   d7da2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7da4:	2301      	movs	r3, #1
   d7da6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7da8:	f8c0 b004 	str.w	fp, [r0, #4]
   d7dac:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7db0:	4629      	mov	r1, r5
   d7db2:	300c      	adds	r0, #12
   d7db4:	f7ff fea5 	bl	d7b02 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7db8:	4630      	mov	r0, r6
   d7dba:	4621      	mov	r1, r4
   d7dbc:	f840 4b04 	str.w	r4, [r0], #4
   d7dc0:	f7ff ff08 	bl	d7bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7dc4:	4628      	mov	r0, r5
   d7dc6:	f7ff feab 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7dca:	a805      	add	r0, sp, #20
   d7dcc:	f7ff fea8 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
   d7dd0:	e052      	b.n	d7e78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7dd2:	2400      	movs	r4, #0
   d7dd4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7dd6:	2014      	movs	r0, #20
   d7dd8:	606c      	str	r4, [r5, #4]
   d7dda:	60ac      	str	r4, [r5, #8]
   d7ddc:	9307      	str	r3, [sp, #28]
   d7dde:	f7fc f95c 	bl	d409a <_Znwj>
   d7de2:	4601      	mov	r1, r0
   d7de4:	b118      	cbz	r0, d7dee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7de6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7de8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7dea:	6044      	str	r4, [r0, #4]
   d7dec:	6084      	str	r4, [r0, #8]
   d7dee:	a804      	add	r0, sp, #16
   d7df0:	9103      	str	r1, [sp, #12]
   d7df2:	f7ff feef 	bl	d7bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7df6:	4b22      	ldr	r3, [pc, #136]	; (d7e80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7df8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7dfa:	2008      	movs	r0, #8
   d7dfc:	f7fc f94d 	bl	d409a <_Znwj>
   d7e00:	4604      	mov	r4, r0
   d7e02:	b128      	cbz	r0, d7e10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e04:	9b03      	ldr	r3, [sp, #12]
   d7e06:	f840 3b04 	str.w	r3, [r0], #4
   d7e0a:	a904      	add	r1, sp, #16
   d7e0c:	f7ff fb7c 	bl	d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e10:	9500      	str	r5, [sp, #0]
   d7e12:	fa5f f38a 	uxtb.w	r3, sl
   d7e16:	464a      	mov	r2, r9
   d7e18:	4641      	mov	r1, r8
   d7e1a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7e1c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e1e:	f7ff f863 	bl	d6ee8 <spark_send_event>
   d7e22:	b920      	cbnz	r0, d7e2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7e24:	9b03      	ldr	r3, [sp, #12]
   d7e26:	785b      	ldrb	r3, [r3, #1]
   d7e28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7e2c:	b183      	cbz	r3, d7e50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7e2e:	9b03      	ldr	r3, [sp, #12]
   d7e30:	9305      	str	r3, [sp, #20]
   d7e32:	a904      	add	r1, sp, #16
   d7e34:	a806      	add	r0, sp, #24
   d7e36:	f7ff fb67 	bl	d7508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7e3a:	a905      	add	r1, sp, #20
   d7e3c:	4630      	mov	r0, r6
   d7e3e:	f7ff fe99 	bl	d7b74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7e42:	a806      	add	r0, sp, #24
   d7e44:	f7ff fb67 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e48:	a804      	add	r0, sp, #16
   d7e4a:	f7ff fb64 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e4e:	e013      	b.n	d7e78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7e50:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7e54:	a905      	add	r1, sp, #20
   d7e56:	a803      	add	r0, sp, #12
   d7e58:	9205      	str	r2, [sp, #20]
   d7e5a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7e5e:	f7ff fefd 	bl	d7c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7e62:	a805      	add	r0, sp, #20
   d7e64:	f7ff fe5c 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7e68:	a805      	add	r0, sp, #20
   d7e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7e6c:	f7ff fe93 	bl	d7b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7e70:	a806      	add	r0, sp, #24
   d7e72:	f7ff fb50 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e76:	e7da      	b.n	d7e2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7e78:	4630      	mov	r0, r6
   d7e7a:	b00b      	add	sp, #44	; 0x2c
   d7e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e80:	000d7ff5 	.word	0x000d7ff5

000d7e84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7e84:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e88:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7e8a:	d006      	beq.n	d7e9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7e8c:	2a03      	cmp	r2, #3
   d7e8e:	d017      	beq.n	d7ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7e90:	2a01      	cmp	r2, #1
   d7e92:	d122      	bne.n	d7eda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7e94:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7e96:	6003      	str	r3, [r0, #0]
	      break;
   d7e98:	e01f      	b.n	d7eda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7e9a:	2018      	movs	r0, #24
   d7e9c:	680e      	ldr	r6, [r1, #0]
   d7e9e:	f7fc f8fc 	bl	d409a <_Znwj>
   d7ea2:	4605      	mov	r5, r0
   d7ea4:	b150      	cbz	r0, d7ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7ea6:	4631      	mov	r1, r6
   d7ea8:	f7ff fec8 	bl	d7c3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7eac:	6930      	ldr	r0, [r6, #16]
   d7eae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7eb2:	b108      	cbz	r0, d7eb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7eb4:	f003 fc98 	bl	db7e8 <strdup>
   d7eb8:	6128      	str	r0, [r5, #16]
   d7eba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7ebc:	6025      	str	r5, [r4, #0]
   d7ebe:	e00c      	b.n	d7eda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7ec0:	6804      	ldr	r4, [r0, #0]
   d7ec2:	b154      	cbz	r4, d7eda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7ec4:	f104 0010 	add.w	r0, r4, #16
   d7ec8:	f7ff fe2a 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ecc:	4620      	mov	r0, r4
   d7ece:	f7ff fd54 	bl	d797a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7ed2:	2118      	movs	r1, #24
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	f001 f85b 	bl	d8f90 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7eda:	2000      	movs	r0, #0
   d7edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ede <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7ede:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ee0:	2300      	movs	r3, #0
   d7ee2:	6083      	str	r3, [r0, #8]
   d7ee4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7ee6:	4604      	mov	r4, r0
   d7ee8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7eea:	b12b      	cbz	r3, d7ef8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7eec:	2202      	movs	r2, #2
   d7eee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7ef0:	68eb      	ldr	r3, [r5, #12]
   d7ef2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7ef4:	68ab      	ldr	r3, [r5, #8]
   d7ef6:	60a3      	str	r3, [r4, #8]
	}
    }
   d7ef8:	4620      	mov	r0, r4
   d7efa:	bd38      	pop	{r3, r4, r5, pc}

000d7efc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7efc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7efe:	b570      	push	{r4, r5, r6, lr}
   d7f00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7f02:	d006      	beq.n	d7f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7f04:	2a03      	cmp	r2, #3
   d7f06:	d011      	beq.n	d7f2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7f08:	2a01      	cmp	r2, #1
   d7f0a:	d118      	bne.n	d7f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f0e:	6003      	str	r3, [r0, #0]
	      break;
   d7f10:	e015      	b.n	d7f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7f12:	2014      	movs	r0, #20
   d7f14:	680e      	ldr	r6, [r1, #0]
   d7f16:	f7fc f8c0 	bl	d409a <_Znwj>
   d7f1a:	4605      	mov	r5, r0
   d7f1c:	b120      	cbz	r0, d7f28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7f1e:	4631      	mov	r1, r6
   d7f20:	f7ff ffdd 	bl	d7ede <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7f24:	7c33      	ldrb	r3, [r6, #16]
   d7f26:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7f28:	6025      	str	r5, [r4, #0]
   d7f2a:	e008      	b.n	d7f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7f2c:	6804      	ldr	r4, [r0, #0]
   d7f2e:	b134      	cbz	r4, d7f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7f30:	4620      	mov	r0, r4
   d7f32:	f7ff fd22 	bl	d797a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7f36:	2114      	movs	r1, #20
   d7f38:	4620      	mov	r0, r4
   d7f3a:	f001 f829 	bl	d8f90 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7f3e:	2000      	movs	r0, #0
   d7f40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7f44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7f44:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7f46:	2300      	movs	r3, #0
   d7f48:	b087      	sub	sp, #28
   d7f4a:	460c      	mov	r4, r1
   d7f4c:	f3bf 8f5f 	dmb	sy
   d7f50:	e850 6f00 	ldrex	r6, [r0]
   d7f54:	e840 3200 	strex	r2, r3, [r0]
   d7f58:	2a00      	cmp	r2, #0
   d7f5a:	d1f9      	bne.n	d7f50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7f5c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7f60:	2e00      	cmp	r6, #0
   d7f62:	d03f      	beq.n	d7fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7f64:	4618      	mov	r0, r3
   d7f66:	f7fe ff33 	bl	d6dd0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7f6a:	4607      	mov	r7, r0
   d7f6c:	b120      	cbz	r0, d7f78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7f6e:	4621      	mov	r1, r4
   d7f70:	4630      	mov	r0, r6
   d7f72:	f7ff fe53 	bl	d7c1c <_ZNKSt8functionIFvRKbEEclES1_>
   d7f76:	e02e      	b.n	d7fd6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7f78:	4631      	mov	r1, r6
   d7f7a:	a801      	add	r0, sp, #4
   d7f7c:	f7ff ffaf 	bl	d7ede <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7f80:	7823      	ldrb	r3, [r4, #0]
   d7f82:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7f86:	2010      	movs	r0, #16
   d7f88:	f7fc f887 	bl	d409a <_Znwj>
   d7f8c:	4605      	mov	r5, r0
   d7f8e:	b1d0      	cbz	r0, d7fc6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7f90:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f92:	2014      	movs	r0, #20
   d7f94:	f7fc f881 	bl	d409a <_Znwj>
   d7f98:	4604      	mov	r4, r0
   d7f9a:	b178      	cbz	r0, d7fbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7f9c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7f9e:	4601      	mov	r1, r0
   d7fa0:	a801      	add	r0, sp, #4
   d7fa2:	f7ff fcf9 	bl	d7998 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fa6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7fa8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7faa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7fae:	9203      	str	r2, [sp, #12]
   d7fb0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fb2:	60e3      	str	r3, [r4, #12]
   d7fb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7fb8:	9204      	str	r2, [sp, #16]
   d7fba:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7fbc:	4b0a      	ldr	r3, [pc, #40]	; (d7fe8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7fbe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7fc0:	4b0a      	ldr	r3, [pc, #40]	; (d7fec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7fc2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7fc4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7fc6:	a801      	add	r0, sp, #4
   d7fc8:	f7ff fcd7 	bl	d797a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7fcc:	2200      	movs	r2, #0
   d7fce:	4629      	mov	r1, r5
   d7fd0:	4807      	ldr	r0, [pc, #28]	; (d7ff0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7fd2:	f7fe ff05 	bl	d6de0 <application_thread_invoke>
   d7fd6:	4630      	mov	r0, r6
   d7fd8:	f7ff fccf 	bl	d797a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7fdc:	2110      	movs	r1, #16
   d7fde:	4630      	mov	r0, r6
   d7fe0:	f000 ffd6 	bl	d8f90 <_ZdlPvj>
        }
    }
   d7fe4:	b007      	add	sp, #28
   d7fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7fe8:	000d7c2f 	.word	0x000d7c2f
   d7fec:	000d7efd 	.word	0x000d7efd
   d7ff0:	000d8391 	.word	0x000d8391

000d7ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7ff4:	b530      	push	{r4, r5, lr}
   d7ff6:	b085      	sub	sp, #20
   d7ff8:	4604      	mov	r4, r0
   d7ffa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7ffc:	4668      	mov	r0, sp
   d7ffe:	4611      	mov	r1, r2
   d8000:	f7ff fdc9 	bl	d7b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8004:	b17c      	cbz	r4, d8026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8006:	b224      	sxth	r4, r4
   d8008:	4628      	mov	r0, r5
   d800a:	b10d      	cbz	r5, d8010 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d800c:	f003 fbec 	bl	db7e8 <strdup>
   d8010:	9002      	str	r0, [sp, #8]
   d8012:	a902      	add	r1, sp, #8
   d8014:	4668      	mov	r0, sp
   d8016:	f8ad 400c 	strh.w	r4, [sp, #12]
   d801a:	f7ff fe1f 	bl	d7c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d801e:	a802      	add	r0, sp, #8
   d8020:	f7ff fd7e 	bl	d7b20 <_ZN8particle5ErrorD1Ev>
   d8024:	e01d      	b.n	d8062 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8026:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8028:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d802c:	f04f 0201 	mov.w	r2, #1
   d8030:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8034:	42a3      	cmp	r3, r4
   d8036:	d103      	bne.n	d8040 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8038:	e8c0 2f41 	strexb	r1, r2, [r0]
   d803c:	2900      	cmp	r1, #0
   d803e:	d1f7      	bne.n	d8030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8040:	d002      	beq.n	d8048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8042:	f88d 3008 	strb.w	r3, [sp, #8]
   d8046:	e00c      	b.n	d8062 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8048:	f110 010c 	adds.w	r1, r0, #12
   d804c:	f04f 0301 	mov.w	r3, #1
   d8050:	bf18      	it	ne
   d8052:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8054:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8058:	3004      	adds	r0, #4
   d805a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d805e:	f7ff ff71 	bl	d7f44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8062:	a801      	add	r0, sp, #4
   d8064:	f7ff fa57 	bl	d7516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8068:	b005      	add	sp, #20
   d806a:	bd30      	pop	{r4, r5, pc}

000d806c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d806c:	4770      	bx	lr

000d806e <_ZN9IPAddressD0Ev>:
   d806e:	b510      	push	{r4, lr}
   d8070:	2118      	movs	r1, #24
   d8072:	4604      	mov	r4, r0
   d8074:	f000 ff8c 	bl	d8f90 <_ZdlPvj>
   d8078:	4620      	mov	r0, r4
   d807a:	bd10      	pop	{r4, pc}

000d807c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d807c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d807e:	7d03      	ldrb	r3, [r0, #20]
   d8080:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8082:	b08d      	sub	sp, #52	; 0x34
   d8084:	460e      	mov	r6, r1
   d8086:	f100 0704 	add.w	r7, r0, #4
   d808a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d808e:	d002      	beq.n	d8096 <_ZNK9IPAddress7printToER5Print+0x1a>
   d8090:	f100 0508 	add.w	r5, r0, #8
   d8094:	e018      	b.n	d80c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8096:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8098:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d809a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d809e:	232f      	movs	r3, #47	; 0x2f
   d80a0:	462a      	mov	r2, r5
   d80a2:	200a      	movs	r0, #10
   d80a4:	f7fe fd54 	bl	d6b50 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d80a8:	4628      	mov	r0, r5
   d80aa:	f003 fbb8 	bl	db81e <strlen>
   d80ae:	6833      	ldr	r3, [r6, #0]
   d80b0:	4602      	mov	r2, r0
   d80b2:	68db      	ldr	r3, [r3, #12]
   d80b4:	4629      	mov	r1, r5
   d80b6:	4630      	mov	r0, r6
   d80b8:	4798      	blx	r3
   d80ba:	e00f      	b.n	d80dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d80bc:	b124      	cbz	r4, d80c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d80be:	212e      	movs	r1, #46	; 0x2e
   d80c0:	4630      	mov	r0, r6
   d80c2:	f7ff fa73 	bl	d75ac <_ZN5Print5printEc>
   d80c6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d80c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d80cc:	220a      	movs	r2, #10
   d80ce:	4630      	mov	r0, r6
   d80d0:	f7ff fa87 	bl	d75e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80d8:	d1f0      	bne.n	d80bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80da:	4620      	mov	r0, r4
    }
    return n;
}
   d80dc:	b00d      	add	sp, #52	; 0x34
   d80de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d80e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d80e0:	b510      	push	{r4, lr}
   d80e2:	4b05      	ldr	r3, [pc, #20]	; (d80f8 <_ZN9IPAddressC1Ev+0x18>)
   d80e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d80e6:	2211      	movs	r2, #17
   d80e8:	f840 3b04 	str.w	r3, [r0], #4
   d80ec:	2100      	movs	r1, #0
   d80ee:	f003 fb39 	bl	db764 <memset>
{
    clear();
}
   d80f2:	4620      	mov	r0, r4
   d80f4:	bd10      	pop	{r4, pc}
   d80f6:	bf00      	nop
   d80f8:	000dceb4 	.word	0x000dceb4

000d80fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d80fc:	4603      	mov	r3, r0
   d80fe:	4a07      	ldr	r2, [pc, #28]	; (d811c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8100:	b510      	push	{r4, lr}
   d8102:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8106:	f101 0210 	add.w	r2, r1, #16
   d810a:	f851 4b04 	ldr.w	r4, [r1], #4
   d810e:	f843 4b04 	str.w	r4, [r3], #4
   d8112:	4291      	cmp	r1, r2
   d8114:	d1f9      	bne.n	d810a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8116:	780a      	ldrb	r2, [r1, #0]
   d8118:	701a      	strb	r2, [r3, #0]
}
   d811a:	bd10      	pop	{r4, pc}
   d811c:	000dceb4 	.word	0x000dceb4

000d8120 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d8120:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d8122:	2b04      	cmp	r3, #4
   d8124:	d101      	bne.n	d812a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d8126:	6840      	ldr	r0, [r0, #4]
   d8128:	e008      	b.n	d813c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d812a:	2b06      	cmp	r3, #6
   d812c:	d10a      	bne.n	d8144 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d812e:	6843      	ldr	r3, [r0, #4]
   d8130:	b953      	cbnz	r3, d8148 <_ZNK9IPAddresscvbEv+0x28>
   d8132:	6883      	ldr	r3, [r0, #8]
   d8134:	b943      	cbnz	r3, d8148 <_ZNK9IPAddresscvbEv+0x28>
   d8136:	68c3      	ldr	r3, [r0, #12]
   d8138:	b933      	cbnz	r3, d8148 <_ZNK9IPAddresscvbEv+0x28>
   d813a:	6900      	ldr	r0, [r0, #16]
   d813c:	3000      	adds	r0, #0
   d813e:	bf18      	it	ne
   d8140:	2001      	movne	r0, #1
   d8142:	4770      	bx	lr
    } else {
        return false;
   d8144:	2000      	movs	r0, #0
   d8146:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8148:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d814a:	4770      	bx	lr

000d814c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d814c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d814e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8152:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8156:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d815a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d815e:	2304      	movs	r3, #4
   d8160:	6041      	str	r1, [r0, #4]
   d8162:	7503      	strb	r3, [r0, #20]
   d8164:	bd10      	pop	{r4, pc}

000d8166 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8166:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8168:	780d      	ldrb	r5, [r1, #0]
   d816a:	788b      	ldrb	r3, [r1, #2]
   d816c:	784a      	ldrb	r2, [r1, #1]
   d816e:	78c9      	ldrb	r1, [r1, #3]
   d8170:	9100      	str	r1, [sp, #0]
   d8172:	4629      	mov	r1, r5
   d8174:	f7ff ffea 	bl	d814c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8178:	b003      	add	sp, #12
   d817a:	bd30      	pop	{r4, r5, pc}

000d817c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d817c:	7441      	strb	r1, [r0, #17]
   d817e:	4770      	bx	lr

000d8180 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8180:	4770      	bx	lr

000d8182 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8182:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8184:	2100      	movs	r1, #0
   d8186:	7c00      	ldrb	r0, [r0, #16]
   d8188:	f7fe fde2 	bl	d6d50 <HAL_USB_USART_Receive_Data>
}
   d818c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8190:	bf28      	it	cs
   d8192:	f04f 30ff 	movcs.w	r0, #4294967295
   d8196:	bd08      	pop	{r3, pc}

000d8198 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8198:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d819a:	2101      	movs	r1, #1
   d819c:	7c00      	ldrb	r0, [r0, #16]
   d819e:	f7fe fdd7 	bl	d6d50 <HAL_USB_USART_Receive_Data>
}
   d81a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81a6:	bf28      	it	cs
   d81a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d81ac:	bd08      	pop	{r3, pc}

000d81ae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d81ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d81b0:	7c00      	ldrb	r0, [r0, #16]
   d81b2:	f7fe fdc5 	bl	d6d40 <HAL_USB_USART_Available_Data_For_Write>
}
   d81b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81ba:	bd08      	pop	{r3, pc}

000d81bc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d81bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d81be:	7c00      	ldrb	r0, [r0, #16]
   d81c0:	f7fe fdb6 	bl	d6d30 <HAL_USB_USART_Available_Data>
}
   d81c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81c8:	bd08      	pop	{r3, pc}

000d81ca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d81ca:	7c00      	ldrb	r0, [r0, #16]
   d81cc:	f7fe bdd0 	b.w	d6d70 <HAL_USB_USART_Flush_Data>

000d81d0 <_ZN9USBSerialD0Ev>:
   d81d0:	b510      	push	{r4, lr}
   d81d2:	2114      	movs	r1, #20
   d81d4:	4604      	mov	r4, r0
   d81d6:	f000 fedb 	bl	d8f90 <_ZdlPvj>
   d81da:	4620      	mov	r0, r4
   d81dc:	bd10      	pop	{r4, pc}

000d81de <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d81de:	b538      	push	{r3, r4, r5, lr}
   d81e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d81e2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d81e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d81e6:	f7fe fdab 	bl	d6d40 <HAL_USB_USART_Available_Data_For_Write>
   d81ea:	2800      	cmp	r0, #0
   d81ec:	dc01      	bgt.n	d81f2 <_ZN9USBSerial5writeEh+0x14>
   d81ee:	7c60      	ldrb	r0, [r4, #17]
   d81f0:	b128      	cbz	r0, d81fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d81f2:	4629      	mov	r1, r5
   d81f4:	7c20      	ldrb	r0, [r4, #16]
   d81f6:	f7fe fdb3 	bl	d6d60 <HAL_USB_USART_Send_Data>
   d81fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d81fe:	bd38      	pop	{r3, r4, r5, pc}

000d8200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8200:	b510      	push	{r4, lr}
   d8202:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8204:	2300      	movs	r3, #0
   d8206:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d820c:	60a3      	str	r3, [r4, #8]
   d820e:	4b05      	ldr	r3, [pc, #20]	; (d8224 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8210:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8212:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8214:	4608      	mov	r0, r1
{
  _serial = serial;
   d8216:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8218:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d821a:	4611      	mov	r1, r2
   d821c:	f7fe fd78 	bl	d6d10 <HAL_USB_USART_Init>
}
   d8220:	4620      	mov	r0, r4
   d8222:	bd10      	pop	{r4, pc}
   d8224:	000dcec8 	.word	0x000dcec8

000d8228 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8228:	2200      	movs	r2, #0
   d822a:	7c00      	ldrb	r0, [r0, #16]
   d822c:	f7fe bd78 	b.w	d6d20 <HAL_USB_USART_Begin>

000d8230 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8230:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8232:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8234:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8236:	2100      	movs	r1, #0
   d8238:	f003 fa94 	bl	db764 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d823c:	4620      	mov	r0, r4
   d823e:	bd10      	pop	{r4, pc}

000d8240 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8240:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8242:	4d0e      	ldr	r5, [pc, #56]	; (d827c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8244:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8246:	a801      	add	r0, sp, #4
   d8248:	f7ff fff2 	bl	d8230 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d824c:	6829      	ldr	r1, [r5, #0]
   d824e:	f011 0401 	ands.w	r4, r1, #1
   d8252:	d110      	bne.n	d8276 <_Z16_fetch_usbserialv+0x36>
   d8254:	4628      	mov	r0, r5
   d8256:	f7fb ff31 	bl	d40bc <__cxa_guard_acquire>
   d825a:	b160      	cbz	r0, d8276 <_Z16_fetch_usbserialv+0x36>
   d825c:	aa01      	add	r2, sp, #4
   d825e:	4621      	mov	r1, r4
   d8260:	4807      	ldr	r0, [pc, #28]	; (d8280 <_Z16_fetch_usbserialv+0x40>)
   d8262:	f7ff ffcd 	bl	d8200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8266:	4628      	mov	r0, r5
   d8268:	f7fb ff2d 	bl	d40c6 <__cxa_guard_release>
   d826c:	4a05      	ldr	r2, [pc, #20]	; (d8284 <_Z16_fetch_usbserialv+0x44>)
   d826e:	4906      	ldr	r1, [pc, #24]	; (d8288 <_Z16_fetch_usbserialv+0x48>)
   d8270:	4803      	ldr	r0, [pc, #12]	; (d8280 <_Z16_fetch_usbserialv+0x40>)
   d8272:	f000 fe7f 	bl	d8f74 <__aeabi_atexit>
	return _usbserial;
}
   d8276:	4802      	ldr	r0, [pc, #8]	; (d8280 <_Z16_fetch_usbserialv+0x40>)
   d8278:	b007      	add	sp, #28
   d827a:	bd30      	pop	{r4, r5, pc}
   d827c:	2003e3f0 	.word	0x2003e3f0
   d8280:	2003e3f4 	.word	0x2003e3f4
   d8284:	2003e148 	.word	0x2003e148
   d8288:	000d8181 	.word	0x000d8181

000d828c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d828c:	4770      	bx	lr

000d828e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d828e:	7441      	strb	r1, [r0, #17]
   d8290:	4770      	bx	lr

000d8292 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8292:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8294:	7c00      	ldrb	r0, [r0, #16]
   d8296:	f7fe fcab 	bl	d6bf0 <HAL_USART_Available_Data_For_Write>
}
   d829a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d829e:	bd08      	pop	{r3, pc}

000d82a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d82a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d82a2:	7c00      	ldrb	r0, [r0, #16]
   d82a4:	f7fe fc7c 	bl	d6ba0 <HAL_USART_Available_Data>
}
   d82a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82ac:	bd08      	pop	{r3, pc}

000d82ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d82ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d82b0:	7c00      	ldrb	r0, [r0, #16]
   d82b2:	f7fe fc85 	bl	d6bc0 <HAL_USART_Peek_Data>
}
   d82b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82ba:	bf28      	it	cs
   d82bc:	f04f 30ff 	movcs.w	r0, #4294967295
   d82c0:	bd08      	pop	{r3, pc}

000d82c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d82c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d82c4:	7c00      	ldrb	r0, [r0, #16]
   d82c6:	f7fe fc73 	bl	d6bb0 <HAL_USART_Read_Data>
}
   d82ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82ce:	bf28      	it	cs
   d82d0:	f04f 30ff 	movcs.w	r0, #4294967295
   d82d4:	bd08      	pop	{r3, pc}

000d82d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d82d6:	7c00      	ldrb	r0, [r0, #16]
   d82d8:	f7fe bc7a 	b.w	d6bd0 <HAL_USART_Flush_Data>

000d82dc <_ZN11USARTSerialD0Ev>:
   d82dc:	b510      	push	{r4, lr}
   d82de:	2114      	movs	r1, #20
   d82e0:	4604      	mov	r4, r0
   d82e2:	f000 fe55 	bl	d8f90 <_ZdlPvj>
   d82e6:	4620      	mov	r0, r4
   d82e8:	bd10      	pop	{r4, pc}

000d82ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d82ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d82ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d82ee:	4604      	mov	r4, r0
   d82f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d82f2:	b925      	cbnz	r5, d82fe <_ZN11USARTSerial5writeEh+0x14>
   d82f4:	7c00      	ldrb	r0, [r0, #16]
   d82f6:	f7fe fc7b 	bl	d6bf0 <HAL_USART_Available_Data_For_Write>
   d82fa:	2800      	cmp	r0, #0
   d82fc:	dd05      	ble.n	d830a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d82fe:	4631      	mov	r1, r6
   d8300:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8306:	f7fe bc43 	b.w	d6b90 <HAL_USART_Write_Data>
  }
  return 0;
}
   d830a:	4628      	mov	r0, r5
   d830c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8310:	b510      	push	{r4, lr}
   d8312:	4604      	mov	r4, r0
   d8314:	4608      	mov	r0, r1
   d8316:	4611      	mov	r1, r2
   d8318:	2200      	movs	r2, #0
   d831a:	6062      	str	r2, [r4, #4]
   d831c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8320:	60a2      	str	r2, [r4, #8]
   d8322:	4a05      	ldr	r2, [pc, #20]	; (d8338 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8324:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8326:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8328:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d832a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d832c:	461a      	mov	r2, r3
   d832e:	f7fe fc27 	bl	d6b80 <HAL_USART_Init>
}
   d8332:	4620      	mov	r0, r4
   d8334:	bd10      	pop	{r4, pc}
   d8336:	bf00      	nop
   d8338:	000dcef8 	.word	0x000dcef8

000d833c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d833c:	7c00      	ldrb	r0, [r0, #16]
   d833e:	f7fe bc4f 	b.w	d6be0 <HAL_USART_Is_Enabled>
	...

000d8344 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8344:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8346:	4d0c      	ldr	r5, [pc, #48]	; (d8378 <_Z22__fetch_global_Serial1v+0x34>)
   d8348:	6829      	ldr	r1, [r5, #0]
   d834a:	f011 0401 	ands.w	r4, r1, #1
   d834e:	d111      	bne.n	d8374 <_Z22__fetch_global_Serial1v+0x30>
   d8350:	4628      	mov	r0, r5
   d8352:	f7fb feb3 	bl	d40bc <__cxa_guard_acquire>
   d8356:	b168      	cbz	r0, d8374 <_Z22__fetch_global_Serial1v+0x30>
   d8358:	4a08      	ldr	r2, [pc, #32]	; (d837c <_Z22__fetch_global_Serial1v+0x38>)
   d835a:	4b09      	ldr	r3, [pc, #36]	; (d8380 <_Z22__fetch_global_Serial1v+0x3c>)
   d835c:	4809      	ldr	r0, [pc, #36]	; (d8384 <_Z22__fetch_global_Serial1v+0x40>)
   d835e:	4621      	mov	r1, r4
   d8360:	f7ff ffd6 	bl	d8310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8364:	4628      	mov	r0, r5
   d8366:	f7fb feae 	bl	d40c6 <__cxa_guard_release>
   d836a:	4a07      	ldr	r2, [pc, #28]	; (d8388 <_Z22__fetch_global_Serial1v+0x44>)
   d836c:	4907      	ldr	r1, [pc, #28]	; (d838c <_Z22__fetch_global_Serial1v+0x48>)
   d836e:	4805      	ldr	r0, [pc, #20]	; (d8384 <_Z22__fetch_global_Serial1v+0x40>)
   d8370:	f000 fe00 	bl	d8f74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8374:	4803      	ldr	r0, [pc, #12]	; (d8384 <_Z22__fetch_global_Serial1v+0x40>)
   d8376:	bd38      	pop	{r3, r4, r5, pc}
   d8378:	2003e4a0 	.word	0x2003e4a0
   d837c:	2003e4a4 	.word	0x2003e4a4
   d8380:	2003e41c 	.word	0x2003e41c
   d8384:	2003e408 	.word	0x2003e408
   d8388:	2003e148 	.word	0x2003e148
   d838c:	000d828d 	.word	0x000d828d

000d8390 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8390:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8392:	6883      	ldr	r3, [r0, #8]
   d8394:	4604      	mov	r4, r0
   d8396:	b90b      	cbnz	r3, d839c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8398:	f000 fe0d 	bl	d8fb6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d839c:	68c3      	ldr	r3, [r0, #12]
   d839e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d83a0:	68a3      	ldr	r3, [r4, #8]
   d83a2:	b11b      	cbz	r3, d83ac <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83a4:	2203      	movs	r2, #3
   d83a6:	4621      	mov	r1, r4
   d83a8:	4620      	mov	r0, r4
   d83aa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83ac:	4620      	mov	r0, r4
   d83ae:	2110      	movs	r1, #16
}
   d83b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83b4:	f000 bdec 	b.w	d8f90 <_ZdlPvj>

000d83b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d83b8:	4770      	bx	lr

000d83ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d83ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d83bc:	4606      	mov	r6, r0
   d83be:	4615      	mov	r5, r2
   d83c0:	460c      	mov	r4, r1
   d83c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d83c4:	42bc      	cmp	r4, r7
   d83c6:	d006      	beq.n	d83d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d83c8:	6833      	ldr	r3, [r6, #0]
   d83ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d83ce:	689b      	ldr	r3, [r3, #8]
   d83d0:	4630      	mov	r0, r6
   d83d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d83d4:	e7f6      	b.n	d83c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d83d6:	4628      	mov	r0, r5
   d83d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d83da:	2200      	movs	r2, #0
   d83dc:	7c00      	ldrb	r0, [r0, #16]
   d83de:	f7fe bc27 	b.w	d6c30 <HAL_I2C_Write_Data>

000d83e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d83e2:	2100      	movs	r1, #0
   d83e4:	7c00      	ldrb	r0, [r0, #16]
   d83e6:	f7fe bc2b 	b.w	d6c40 <HAL_I2C_Available_Data>

000d83ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d83ea:	2100      	movs	r1, #0
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7fe bc2f 	b.w	d6c50 <HAL_I2C_Read_Data>

000d83f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d83f2:	2100      	movs	r1, #0
   d83f4:	7c00      	ldrb	r0, [r0, #16]
   d83f6:	f7fe bc33 	b.w	d6c60 <HAL_I2C_Peek_Data>

000d83fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d83fa:	2100      	movs	r1, #0
   d83fc:	7c00      	ldrb	r0, [r0, #16]
   d83fe:	f7fe bc37 	b.w	d6c70 <HAL_I2C_Flush_Data>

000d8402 <_ZN7TwoWireD0Ev>:
   d8402:	b510      	push	{r4, lr}
   d8404:	2114      	movs	r1, #20
   d8406:	4604      	mov	r4, r0
   d8408:	f000 fdc2 	bl	d8f90 <_ZdlPvj>
   d840c:	4620      	mov	r0, r4
   d840e:	bd10      	pop	{r4, pc}

000d8410 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8410:	b510      	push	{r4, lr}
   d8412:	4604      	mov	r4, r0
   d8414:	2300      	movs	r3, #0
   d8416:	6063      	str	r3, [r4, #4]
   d8418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d841c:	60a3      	str	r3, [r4, #8]
   d841e:	4b04      	ldr	r3, [pc, #16]	; (d8430 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8420:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8422:	4608      	mov	r0, r1
   d8424:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8426:	4611      	mov	r1, r2
   d8428:	f7fe fc32 	bl	d6c90 <HAL_I2C_Init>
}
   d842c:	4620      	mov	r0, r4
   d842e:	bd10      	pop	{r4, pc}
   d8430:	000dcf28 	.word	0x000dcf28

000d8434 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8434:	2300      	movs	r3, #0
   d8436:	461a      	mov	r2, r3
   d8438:	4619      	mov	r1, r3
   d843a:	7c00      	ldrb	r0, [r0, #16]
   d843c:	f7fe bbe0 	b.w	d6c00 <HAL_I2C_Begin>

000d8440 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8440:	b570      	push	{r4, r5, r6, lr}
   d8442:	460c      	mov	r4, r1
   d8444:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8446:	2514      	movs	r5, #20
   d8448:	4606      	mov	r6, r0
   d844a:	462a      	mov	r2, r5
   d844c:	2100      	movs	r1, #0
   d844e:	a801      	add	r0, sp, #4
   d8450:	f003 f988 	bl	db764 <memset>
   d8454:	7823      	ldrb	r3, [r4, #0]
   d8456:	f88d 3008 	strb.w	r3, [sp, #8]
   d845a:	6863      	ldr	r3, [r4, #4]
   d845c:	9303      	str	r3, [sp, #12]
   d845e:	68e3      	ldr	r3, [r4, #12]
   d8460:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8462:	2200      	movs	r2, #0
   d8464:	7a23      	ldrb	r3, [r4, #8]
   d8466:	7c30      	ldrb	r0, [r6, #16]
   d8468:	f8ad 5004 	strh.w	r5, [sp, #4]
   d846c:	a901      	add	r1, sp, #4
   d846e:	9305      	str	r3, [sp, #20]
   d8470:	f7fe fc16 	bl	d6ca0 <HAL_I2C_Request_Data_Ex>
}
   d8474:	b006      	add	sp, #24
   d8476:	bd70      	pop	{r4, r5, r6, pc}

000d8478 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d847a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d847c:	f88d 1000 	strb.w	r1, [sp]
   d8480:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8484:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8486:	bf18      	it	ne
   d8488:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d848a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d848c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d848e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8492:	f7ff ffd5 	bl	d8440 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8496:	b005      	add	sp, #20
   d8498:	f85d fb04 	ldr.w	pc, [sp], #4

000d849c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d849c:	2301      	movs	r3, #1
   d849e:	f7ff bfeb 	b.w	d8478 <_ZN7TwoWire11requestFromEhjh>

000d84a2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d84a2:	2200      	movs	r2, #0
   d84a4:	7c00      	ldrb	r0, [r0, #16]
   d84a6:	f7fe bbb3 	b.w	d6c10 <HAL_I2C_Begin_Transmission>

000d84aa <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d84aa:	b2c9      	uxtb	r1, r1
   d84ac:	f7ff bff9 	b.w	d84a2 <_ZN7TwoWire17beginTransmissionEh>

000d84b0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d84b0:	2200      	movs	r2, #0
   d84b2:	7c00      	ldrb	r0, [r0, #16]
   d84b4:	f7fe bbb4 	b.w	d6c20 <HAL_I2C_End_Transmission>

000d84b8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d84b8:	2101      	movs	r1, #1
   d84ba:	f7ff bff9 	b.w	d84b0 <_ZN7TwoWire15endTransmissionEh>

000d84be <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d84be:	2100      	movs	r1, #0
   d84c0:	7c00      	ldrb	r0, [r0, #16]
   d84c2:	f7fe bbdd 	b.w	d6c80 <HAL_I2C_Is_Enabled>

000d84c6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84c6:	2200      	movs	r2, #0
   d84c8:	4611      	mov	r1, r2
   d84ca:	6840      	ldr	r0, [r0, #4]
   d84cc:	f7fe bce4 	b.w	d6e98 <network_listening>

000d84d0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d84d0:	2200      	movs	r2, #0
   d84d2:	4611      	mov	r1, r2
   d84d4:	6840      	ldr	r0, [r0, #4]
   d84d6:	f7fe bcef 	b.w	d6eb8 <network_get_listen_timeout>

000d84da <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d84da:	2200      	movs	r2, #0
   d84dc:	6840      	ldr	r0, [r0, #4]
   d84de:	f7fe bce3 	b.w	d6ea8 <network_set_listen_timeout>

000d84e2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d84e2:	2200      	movs	r2, #0
   d84e4:	f081 0101 	eor.w	r1, r1, #1
   d84e8:	6840      	ldr	r0, [r0, #4]
   d84ea:	f7fe bccd 	b.w	d6e88 <network_listen>

000d84ee <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d84ee:	2300      	movs	r3, #0
   d84f0:	461a      	mov	r2, r3
   d84f2:	2101      	movs	r1, #1
   d84f4:	6840      	ldr	r0, [r0, #4]
   d84f6:	f7fe bcbf 	b.w	d6e78 <network_off>

000d84fa <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d84fa:	2300      	movs	r3, #0
   d84fc:	461a      	mov	r2, r3
   d84fe:	4619      	mov	r1, r3
   d8500:	6840      	ldr	r0, [r0, #4]
   d8502:	f7fe bcb1 	b.w	d6e68 <network_on>

000d8506 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8506:	2200      	movs	r2, #0
   d8508:	4611      	mov	r1, r2
   d850a:	6840      	ldr	r0, [r0, #4]
   d850c:	f7fe bca4 	b.w	d6e58 <network_ready>

000d8510 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8510:	2200      	movs	r2, #0
   d8512:	4611      	mov	r1, r2
   d8514:	6840      	ldr	r0, [r0, #4]
   d8516:	f7fe bc8f 	b.w	d6e38 <network_connecting>

000d851a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d851a:	2200      	movs	r2, #0
   d851c:	2102      	movs	r1, #2
   d851e:	6840      	ldr	r0, [r0, #4]
   d8520:	f7fe bc92 	b.w	d6e48 <network_disconnect>

000d8524 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8524:	2300      	movs	r3, #0
   d8526:	461a      	mov	r2, r3
   d8528:	6840      	ldr	r0, [r0, #4]
   d852a:	f7fe bc7d 	b.w	d6e28 <network_connect>

000d852e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d852e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8530:	4605      	mov	r5, r0
   d8532:	b188      	cbz	r0, d8558 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8534:	6804      	ldr	r4, [r0, #0]
   d8536:	b14c      	cbz	r4, d854c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8538:	68a3      	ldr	r3, [r4, #8]
   d853a:	b11b      	cbz	r3, d8544 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d853c:	2203      	movs	r2, #3
   d853e:	4621      	mov	r1, r4
   d8540:	4620      	mov	r0, r4
   d8542:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8544:	2110      	movs	r1, #16
   d8546:	4620      	mov	r0, r4
   d8548:	f000 fd22 	bl	d8f90 <_ZdlPvj>
   d854c:	4628      	mov	r0, r5
   d854e:	2114      	movs	r1, #20
      }
   d8550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8554:	f000 bd1c 	b.w	d8f90 <_ZdlPvj>
   d8558:	bd38      	pop	{r3, r4, r5, pc}

000d855a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d855a:	b110      	cbz	r0, d8562 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d855c:	6803      	ldr	r3, [r0, #0]
   d855e:	685b      	ldr	r3, [r3, #4]
   d8560:	4718      	bx	r3
   d8562:	4770      	bx	lr

000d8564 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8564:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8566:	6803      	ldr	r3, [r0, #0]
   d8568:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d856a:	b1bb      	cbz	r3, d859c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d856c:	6858      	ldr	r0, [r3, #4]
   d856e:	f7fe fac7 	bl	d6b00 <os_thread_is_current>
   d8572:	b978      	cbnz	r0, d8594 <_ZN6ThreadD1Ev+0x30>
   d8574:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8576:	7c5a      	ldrb	r2, [r3, #17]
   d8578:	b912      	cbnz	r2, d8580 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d857a:	6858      	ldr	r0, [r3, #4]
   d857c:	f7fe fac8 	bl	d6b10 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8580:	6823      	ldr	r3, [r4, #0]
   d8582:	6858      	ldr	r0, [r3, #4]
   d8584:	f7fe facc 	bl	d6b20 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8588:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d858a:	2300      	movs	r3, #0
   d858c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d858e:	b128      	cbz	r0, d859c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8590:	f7ff ffcd 	bl	d852e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8594:	6820      	ldr	r0, [r4, #0]
   d8596:	b108      	cbz	r0, d859c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8598:	f7ff ffc9 	bl	d852e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d859c:	4620      	mov	r0, r4
   d859e:	bd10      	pop	{r4, pc}

000d85a0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d85a0:	b538      	push	{r3, r4, r5, lr}
   d85a2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85a4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d85a8:	b108      	cbz	r0, d85ae <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d85aa:	f7fb fd7a 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d85ae:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d85b2:	b108      	cbz	r0, d85b8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d85b4:	f7fe fac4 	bl	d6b40 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85b8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d85bc:	b135      	cbz	r5, d85cc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d85be:	4628      	mov	r0, r5
   d85c0:	f7ff ffd0 	bl	d8564 <_ZN6ThreadD1Ev>
   d85c4:	2104      	movs	r1, #4
   d85c6:	4628      	mov	r0, r5
   d85c8:	f000 fce2 	bl	d8f90 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d85cc:	6820      	ldr	r0, [r4, #0]
   d85ce:	b108      	cbz	r0, d85d4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d85d0:	f7ff ffc3 	bl	d855a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d85d4:	4620      	mov	r0, r4
   d85d6:	bd38      	pop	{r3, r4, r5, pc}

000d85d8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d85d8:	b510      	push	{r4, lr}
   d85da:	4b04      	ldr	r3, [pc, #16]	; (d85ec <_ZN5spark9MeshClassD1Ev+0x14>)
   d85dc:	4604      	mov	r4, r0
   d85de:	f840 3b08 	str.w	r3, [r0], #8
   d85e2:	f7ff ffdd 	bl	d85a0 <_ZN5spark11MeshPublishD1Ev>
   d85e6:	4620      	mov	r0, r4
   d85e8:	bd10      	pop	{r4, pc}
   d85ea:	bf00      	nop
   d85ec:	000dcf50 	.word	0x000dcf50

000d85f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d85f0:	b538      	push	{r3, r4, r5, lr}
   d85f2:	4c0e      	ldr	r4, [pc, #56]	; (d862c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d85f4:	4b0e      	ldr	r3, [pc, #56]	; (d8630 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d85f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d85f8:	2500      	movs	r5, #0
   d85fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d85fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8600:	6063      	str	r3, [r4, #4]
   d8602:	60a5      	str	r5, [r4, #8]
   d8604:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8608:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d860c:	f7fe fa90 	bl	d6b30 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8610:	4b08      	ldr	r3, [pc, #32]	; (d8634 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8612:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8616:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d861a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d861c:	4620      	mov	r0, r4
   d861e:	4a06      	ldr	r2, [pc, #24]	; (d8638 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8620:	4906      	ldr	r1, [pc, #24]	; (d863c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8626:	f000 bca5 	b.w	d8f74 <__aeabi_atexit>
   d862a:	bf00      	nop
   d862c:	2003e528 	.word	0x2003e528
   d8630:	000dd038 	.word	0x000dd038
   d8634:	000dcf50 	.word	0x000dcf50
   d8638:	2003e148 	.word	0x2003e148
   d863c:	000d85d9 	.word	0x000d85d9

000d8640 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8642:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8644:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8646:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d864a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d864c:	2201      	movs	r2, #1
   d864e:	f04f 33ff 	mov.w	r3, #4294967295
   d8652:	4621      	mov	r1, r4
   d8654:	47a8      	blx	r5
}
   d8656:	b003      	add	sp, #12
   d8658:	bd30      	pop	{r4, r5, pc}

000d865a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d865a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d865c:	6803      	ldr	r3, [r0, #0]
   d865e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8660:	f04f 33ff 	mov.w	r3, #4294967295
   d8664:	46a4      	mov	ip, r4
}
   d8666:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d866a:	4760      	bx	ip

000d866c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d866c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d866e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d8670:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8672:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d8676:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8678:	4621      	mov	r1, r4
   d867a:	4613      	mov	r3, r2
   d867c:	2201      	movs	r2, #1
   d867e:	47a8      	blx	r5
}
   d8680:	b003      	add	sp, #12
   d8682:	bd30      	pop	{r4, r5, pc}

000d8684 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8684:	4770      	bx	lr

000d8686 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8686:	b538      	push	{r3, r4, r5, lr}
   d8688:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d868a:	681a      	ldr	r2, [r3, #0]
   d868c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d868e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8690:	da05      	bge.n	d869e <_ZN9TCPClient9connectedEv+0x18>
   d8692:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8696:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d869a:	429a      	cmp	r2, r3
   d869c:	d001      	beq.n	d86a2 <_ZN9TCPClient9connectedEv+0x1c>
   d869e:	2501      	movs	r5, #1
   d86a0:	e00b      	b.n	d86ba <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d86a2:	6803      	ldr	r3, [r0, #0]
   d86a4:	691b      	ldr	r3, [r3, #16]
   d86a6:	4798      	blx	r3
   d86a8:	2800      	cmp	r0, #0
   d86aa:	bf14      	ite	ne
   d86ac:	2501      	movne	r5, #1
   d86ae:	2500      	moveq	r5, #0
        if (!rv) {
   d86b0:	d103      	bne.n	d86ba <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d86b2:	6823      	ldr	r3, [r4, #0]
   d86b4:	4620      	mov	r0, r4
   d86b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d86b8:	4798      	blx	r3
        }
    }
    return rv;
}
   d86ba:	4628      	mov	r0, r5
   d86bc:	bd38      	pop	{r3, r4, r5, pc}

000d86be <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d86be:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d86c0:	6818      	ldr	r0, [r3, #0]
}
   d86c2:	43c0      	mvns	r0, r0
   d86c4:	0fc0      	lsrs	r0, r0, #31
   d86c6:	4770      	bx	lr

000d86c8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d86c8:	4770      	bx	lr

000d86ca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d86ca:	2000      	movs	r0, #0
   d86cc:	4770      	bx	lr

000d86ce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d86ce:	b510      	push	{r4, lr}
   d86d0:	2114      	movs	r1, #20
   d86d2:	4604      	mov	r4, r0
   d86d4:	f000 fc5c 	bl	d8f90 <_ZdlPvj>
   d86d8:	4620      	mov	r0, r4
   d86da:	bd10      	pop	{r4, pc}

000d86dc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d86dc:	f7fb bcdf 	b.w	d409e <_ZdlPv>

000d86e0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d86e2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d86e4:	2200      	movs	r2, #0
   d86e6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d86e8:	9202      	str	r2, [sp, #8]
   d86ea:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86ec:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86ee:	4604      	mov	r4, r0
   d86f0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86f2:	d008      	beq.n	d8706 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d86f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86f8:	fbb3 f1f2 	udiv	r1, r3, r2
   d86fc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d86fe:	fb02 3111 	mls	r1, r2, r1, r3
   d8702:	434a      	muls	r2, r1
   d8704:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8706:	6960      	ldr	r0, [r4, #20]
   d8708:	2308      	movs	r3, #8
   d870a:	9300      	str	r3, [sp, #0]
   d870c:	f241 0205 	movw	r2, #4101	; 0x1005
   d8710:	446b      	add	r3, sp
   d8712:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8716:	6800      	ldr	r0, [r0, #0]
   d8718:	f7fe faca 	bl	d6cb0 <sock_setsockopt>
    if (ret < 0) {
   d871c:	2800      	cmp	r0, #0
   d871e:	db08      	blt.n	d8732 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8720:	6960      	ldr	r0, [r4, #20]
   d8722:	2300      	movs	r3, #0
   d8724:	4632      	mov	r2, r6
   d8726:	4629      	mov	r1, r5
   d8728:	6800      	ldr	r0, [r0, #0]
   d872a:	f7fe fae1 	bl	d6cf0 <sock_send>
    if (ret < 0) {
   d872e:	2800      	cmp	r0, #0
   d8730:	da04      	bge.n	d873c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d8732:	f7fe fc41 	bl	d6fb8 <__errno>
   d8736:	6803      	ldr	r3, [r0, #0]
   d8738:	6063      	str	r3, [r4, #4]
   d873a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d873c:	b004      	add	sp, #16
   d873e:	bd70      	pop	{r4, r5, r6, pc}

000d8740 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8740:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8742:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8744:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8746:	689b      	ldr	r3, [r3, #8]
   d8748:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d874a:	68a3      	ldr	r3, [r4, #8]
   d874c:	3b01      	subs	r3, #1
   d874e:	60a3      	str	r3, [r4, #8]
   d8750:	b92b      	cbnz	r3, d875e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d8752:	6823      	ldr	r3, [r4, #0]
   d8754:	4620      	mov	r0, r4
   d8756:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d875c:	4718      	bx	r3
   d875e:	bd10      	pop	{r4, pc}

000d8760 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8760:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8762:	4604      	mov	r4, r0
   d8764:	694d      	ldr	r5, [r1, #20]
   d8766:	4b05      	ldr	r3, [pc, #20]	; (d877c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8768:	f844 3b04 	str.w	r3, [r4], #4
   d876c:	358c      	adds	r5, #140	; 0x8c
   d876e:	4606      	mov	r6, r0
   d8770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8774:	682b      	ldr	r3, [r5, #0]
   d8776:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8778:	4630      	mov	r0, r6
   d877a:	bd70      	pop	{r4, r5, r6, pc}
   d877c:	000dceb4 	.word	0x000dceb4

000d8780 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8780:	b510      	push	{r4, lr}
   d8782:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8784:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8788:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d878c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d878e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8790:	d005      	beq.n	d879e <_ZN9TCPClient4peekEv+0x1e>
   d8792:	6962      	ldr	r2, [r4, #20]
   d8794:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8798:	4413      	add	r3, r2
   d879a:	7918      	ldrb	r0, [r3, #4]
   d879c:	bd10      	pop	{r4, pc}
   d879e:	6803      	ldr	r3, [r0, #0]
   d87a0:	691b      	ldr	r3, [r3, #16]
   d87a2:	4798      	blx	r3
   d87a4:	2800      	cmp	r0, #0
   d87a6:	d1f4      	bne.n	d8792 <_ZN9TCPClient4peekEv+0x12>
   d87a8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d87ac:	bd10      	pop	{r4, pc}

000d87ae <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d87ae:	b510      	push	{r4, lr}
   d87b0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87ba:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d87bc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87be:	d008      	beq.n	d87d2 <_ZN9TCPClient4readEv+0x24>
   d87c0:	6962      	ldr	r2, [r4, #20]
   d87c2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87c6:	1c59      	adds	r1, r3, #1
   d87c8:	4413      	add	r3, r2
   d87ca:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d87ce:	7918      	ldrb	r0, [r3, #4]
   d87d0:	bd10      	pop	{r4, pc}
   d87d2:	6803      	ldr	r3, [r0, #0]
   d87d4:	691b      	ldr	r3, [r3, #16]
   d87d6:	4798      	blx	r3
   d87d8:	2800      	cmp	r0, #0
   d87da:	d1f1      	bne.n	d87c0 <_ZN9TCPClient4readEv+0x12>
   d87dc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d87e0:	bd10      	pop	{r4, pc}

000d87e2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87e4:	6943      	ldr	r3, [r0, #20]
   d87e6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d87e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87f0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87f2:	4605      	mov	r5, r0
   d87f4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d87f6:	d106      	bne.n	d8806 <_ZN9TCPClient4readEPhj+0x24>
   d87f8:	6803      	ldr	r3, [r0, #0]
   d87fa:	691b      	ldr	r3, [r3, #16]
   d87fc:	4798      	blx	r3
   d87fe:	b910      	cbnz	r0, d8806 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8800:	f04f 34ff 	mov.w	r4, #4294967295
   d8804:	e014      	b.n	d8830 <_ZN9TCPClient4readEPhj+0x4e>
   d8806:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8808:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d880c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8810:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8812:	42bc      	cmp	r4, r7
   d8814:	bf28      	it	cs
   d8816:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8818:	4419      	add	r1, r3
   d881a:	4622      	mov	r2, r4
   d881c:	3104      	adds	r1, #4
   d881e:	4630      	mov	r0, r6
   d8820:	f002 ff7a 	bl	db718 <memcpy>
   d8824:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8826:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d882a:	4423      	add	r3, r4
   d882c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8830:	4620      	mov	r0, r4
   d8832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8834 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8838:	4698      	mov	r8, r3
    stop();
   d883a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d883c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8840:	460d      	mov	r5, r1
   d8842:	4606      	mov	r6, r0
   d8844:	4617      	mov	r7, r2
    stop();
   d8846:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8848:	ab12      	add	r3, sp, #72	; 0x48
   d884a:	2400      	movs	r4, #0
   d884c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8850:	4622      	mov	r2, r4
   d8852:	4621      	mov	r1, r4
   d8854:	4628      	mov	r0, r5
   d8856:	f7fe f883 	bl	d6960 <netdb_getaddrinfo>
   d885a:	4681      	mov	r9, r0
   d885c:	2800      	cmp	r0, #0
   d885e:	d13d      	bne.n	d88dc <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8860:	9b00      	ldr	r3, [sp, #0]
   d8862:	2b00      	cmp	r3, #0
   d8864:	d056      	beq.n	d8914 <_ZN9TCPClient7connectEPKctm+0xe0>
   d8866:	695b      	ldr	r3, [r3, #20]
   d8868:	2b00      	cmp	r3, #0
   d886a:	d053      	beq.n	d8914 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d886c:	a806      	add	r0, sp, #24
   d886e:	f7ff fc37 	bl	d80e0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8872:	9b00      	ldr	r3, [sp, #0]
   d8874:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8876:	7863      	ldrb	r3, [r4, #1]
   d8878:	2b02      	cmp	r3, #2
   d887a:	d101      	bne.n	d8880 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d887c:	1d21      	adds	r1, r4, #4
   d887e:	e013      	b.n	d88a8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8880:	2b0a      	cmp	r3, #10
   d8882:	d114      	bne.n	d88ae <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8884:	2211      	movs	r2, #17
   d8886:	4649      	mov	r1, r9
   d8888:	a801      	add	r0, sp, #4
   d888a:	f002 ff6b 	bl	db764 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d888e:	68a3      	ldr	r3, [r4, #8]
   d8890:	bb33      	cbnz	r3, d88e0 <_ZN9TCPClient7connectEPKctm+0xac>
   d8892:	68e3      	ldr	r3, [r4, #12]
   d8894:	bb23      	cbnz	r3, d88e0 <_ZN9TCPClient7connectEPKctm+0xac>
   d8896:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d889a:	6925      	ldr	r5, [r4, #16]
   d889c:	f7fe f960 	bl	d6b60 <inet_htonl>
   d88a0:	4285      	cmp	r5, r0
   d88a2:	d11d      	bne.n	d88e0 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d88a4:	f104 0114 	add.w	r1, r4, #20
   d88a8:	a806      	add	r0, sp, #24
   d88aa:	f7ff fc5c 	bl	d8166 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d88ae:	a806      	add	r0, sp, #24
   d88b0:	f7ff fc36 	bl	d8120 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d88b4:	2800      	cmp	r0, #0
   d88b6:	d02d      	beq.n	d8914 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d88b8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d88ba:	ad07      	add	r5, sp, #28
   d88bc:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d88c0:	4b18      	ldr	r3, [pc, #96]	; (d8924 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d88c2:	930c      	str	r3, [sp, #48]	; 0x30
   d88c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88c6:	ac0d      	add	r4, sp, #52	; 0x34
   d88c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88ca:	682b      	ldr	r3, [r5, #0]
   d88cc:	7023      	strb	r3, [r4, #0]
   d88ce:	463a      	mov	r2, r7
   d88d0:	4643      	mov	r3, r8
   d88d2:	a90c      	add	r1, sp, #48	; 0x30
   d88d4:	4630      	mov	r0, r6
   d88d6:	47c8      	blx	r9
   d88d8:	4681      	mov	r9, r0
   d88da:	e01b      	b.n	d8914 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d88dc:	46a1      	mov	r9, r4
   d88de:	e019      	b.n	d8914 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d88e0:	f104 0308 	add.w	r3, r4, #8
   d88e4:	ad01      	add	r5, sp, #4
   d88e6:	3418      	adds	r4, #24
   d88e8:	6818      	ldr	r0, [r3, #0]
   d88ea:	6859      	ldr	r1, [r3, #4]
   d88ec:	462a      	mov	r2, r5
   d88ee:	c203      	stmia	r2!, {r0, r1}
   d88f0:	3308      	adds	r3, #8
   d88f2:	42a3      	cmp	r3, r4
   d88f4:	4615      	mov	r5, r2
   d88f6:	d1f7      	bne.n	d88e8 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d88f8:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d88fa:	a901      	add	r1, sp, #4
   d88fc:	a80c      	add	r0, sp, #48	; 0x30
   d88fe:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8900:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8904:	f7ff fbfa 	bl	d80fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d890a:	ac07      	add	r4, sp, #28
   d890c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d890e:	682b      	ldr	r3, [r5, #0]
   d8910:	7023      	strb	r3, [r4, #0]
   d8912:	e7cc      	b.n	d88ae <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8914:	9800      	ldr	r0, [sp, #0]
   d8916:	f7fe f81b 	bl	d6950 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d891a:	4648      	mov	r0, r9
   d891c:	b013      	add	sp, #76	; 0x4c
   d891e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8922:	bf00      	nop
   d8924:	000dceb4 	.word	0x000dceb4

000d8928 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d8928:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d892a:	2300      	movs	r3, #0
   d892c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8930:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8932:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d8936:	4770      	bx	lr

000d8938 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d893c:	461e      	mov	r6, r3
    stop();
   d893e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8940:	460c      	mov	r4, r1
   d8942:	b08a      	sub	sp, #40	; 0x28
    stop();
   d8944:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8946:	4605      	mov	r5, r0
   d8948:	4617      	mov	r7, r2
    stop();
   d894a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d894c:	7d23      	ldrb	r3, [r4, #20]
   d894e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8952:	2b04      	cmp	r3, #4
   d8954:	bf0c      	ite	eq
   d8956:	2002      	moveq	r0, #2
   d8958:	200a      	movne	r0, #10
   d895a:	2206      	movs	r2, #6
   d895c:	2101      	movs	r1, #1
   d895e:	f7fe f9cf 	bl	d6d00 <sock_socket>
   d8962:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8966:	696b      	ldr	r3, [r5, #20]
   d8968:	681b      	ldr	r3, [r3, #0]
   d896a:	2b00      	cmp	r3, #0
   d896c:	db18      	blt.n	d89a0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d896e:	4628      	mov	r0, r5
   d8970:	f7ff ffda 	bl	d8928 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d8974:	b1d6      	cbz	r6, d89ac <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d8976:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8978:	a903      	add	r1, sp, #12
   d897a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d897c:	9303      	str	r3, [sp, #12]
   d897e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8982:	f7fe f88d 	bl	d6aa0 <if_index_to_name>
   d8986:	b958      	cbnz	r0, d89a0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8988:	6968      	ldr	r0, [r5, #20]
   d898a:	2306      	movs	r3, #6
   d898c:	9300      	str	r3, [sp, #0]
   d898e:	f241 020b 	movw	r2, #4107	; 0x100b
   d8992:	ab03      	add	r3, sp, #12
   d8994:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8998:	6800      	ldr	r0, [r0, #0]
   d899a:	f7fe f989 	bl	d6cb0 <sock_setsockopt>
   d899e:	b128      	cbz	r0, d89ac <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d89a0:	682b      	ldr	r3, [r5, #0]
   d89a2:	4628      	mov	r0, r5
   d89a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d89a6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d89a8:	4798      	blx	r3
   d89aa:	e03b      	b.n	d8a24 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d89ac:	261c      	movs	r6, #28
   d89ae:	4632      	mov	r2, r6
   d89b0:	2100      	movs	r1, #0
   d89b2:	a803      	add	r0, sp, #12
   d89b4:	f002 fed6 	bl	db764 <memset>
    if (ip.version() == 4) {
   d89b8:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d89ba:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d89be:	2b04      	cmp	r3, #4
   d89c0:	d10c      	bne.n	d89dc <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d89c2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d89c4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d89c6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d89ca:	f7fe f8d1 	bl	d6b70 <inet_htons>
   d89ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d89d2:	6860      	ldr	r0, [r4, #4]
   d89d4:	f7fe f8c4 	bl	d6b60 <inet_htonl>
   d89d8:	9004      	str	r0, [sp, #16]
   d89da:	e013      	b.n	d8a04 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89dc:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d89de:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89e0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d89e4:	f7fe f8c4 	bl	d6b70 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89e8:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d89ea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89ee:	1d23      	adds	r3, r4, #4
   d89f0:	f104 0714 	add.w	r7, r4, #20
   d89f4:	6818      	ldr	r0, [r3, #0]
   d89f6:	6859      	ldr	r1, [r3, #4]
   d89f8:	4632      	mov	r2, r6
   d89fa:	c203      	stmia	r2!, {r0, r1}
   d89fc:	3308      	adds	r3, #8
   d89fe:	42bb      	cmp	r3, r7
   d8a00:	4616      	mov	r6, r2
   d8a02:	d1f7      	bne.n	d89f4 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8a04:	696b      	ldr	r3, [r5, #20]
   d8a06:	221c      	movs	r2, #28
   d8a08:	a903      	add	r1, sp, #12
   d8a0a:	6818      	ldr	r0, [r3, #0]
   d8a0c:	f7fe f960 	bl	d6cd0 <sock_connect>
   d8a10:	2800      	cmp	r0, #0
   d8a12:	d1c5      	bne.n	d89a0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d8a14:	3404      	adds	r4, #4
   d8a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8a18:	696d      	ldr	r5, [r5, #20]
   d8a1a:	358c      	adds	r5, #140	; 0x8c
   d8a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a1e:	6823      	ldr	r3, [r4, #0]
   d8a20:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d8a22:	2401      	movs	r4, #1
}
   d8a24:	4620      	mov	r0, r4
   d8a26:	b00a      	add	sp, #40	; 0x28
   d8a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a2c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8a2c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8a2e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8a30:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8a32:	6818      	ldr	r0, [r3, #0]
   d8a34:	2800      	cmp	r0, #0
   d8a36:	db01      	blt.n	d8a3c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8a38:	f7fe f942 	bl	d6cc0 <sock_close>
   d8a3c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8a3e:	f04f 32ff 	mov.w	r2, #4294967295
   d8a42:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8a44:	6960      	ldr	r0, [r4, #20]
   d8a46:	2211      	movs	r2, #17
   d8a48:	2100      	movs	r1, #0
   d8a4a:	308c      	adds	r0, #140	; 0x8c
   d8a4c:	f002 fe8a 	bl	db764 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8a50:	4620      	mov	r0, r4
}
   d8a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8a56:	f7ff bf67 	b.w	d8928 <_ZN9TCPClient12flush_bufferEv>
	...

000d8a5c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a5c:	b530      	push	{r4, r5, lr}
   d8a5e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a64:	b08b      	sub	sp, #44	; 0x2c
   d8a66:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a68:	b11b      	cbz	r3, d8a72 <_ZN9TCPClient9availableEv+0x16>
   d8a6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8a6e:	429a      	cmp	r2, r3
   d8a70:	d040      	beq.n	d8af4 <_ZN9TCPClient9availableEv+0x98>
   d8a72:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8a74:	6818      	ldr	r0, [r3, #0]
   d8a76:	2800      	cmp	r0, #0
   d8a78:	db3f      	blt.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8a7a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d8a7e:	2d7f      	cmp	r5, #127	; 0x7f
   d8a80:	d83b      	bhi.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8a82:	1d19      	adds	r1, r3, #4
   d8a84:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8a88:	2308      	movs	r3, #8
   d8a8a:	4429      	add	r1, r5
   d8a8c:	f7fe f928 	bl	d6ce0 <sock_recv>
            if (ret > 0) {
   d8a90:	2800      	cmp	r0, #0
   d8a92:	dd0c      	ble.n	d8aae <_ZN9TCPClient9availableEv+0x52>
   d8a94:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8a96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a9a:	b90a      	cbnz	r2, d8aa0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8a9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8aa0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8aa2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8aa6:	4418      	add	r0, r3
   d8aa8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8aac:	e025      	b.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8aae:	f7fe fa83 	bl	d6fb8 <__errno>
   d8ab2:	6803      	ldr	r3, [r0, #0]
   d8ab4:	2b0b      	cmp	r3, #11
   d8ab6:	d020      	beq.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
   d8ab8:	f7fe fa7e 	bl	d6fb8 <__errno>
   d8abc:	6803      	ldr	r3, [r0, #0]
   d8abe:	2b0b      	cmp	r3, #11
   d8ac0:	d01b      	beq.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8ac2:	2320      	movs	r3, #32
   d8ac4:	2500      	movs	r5, #0
   d8ac6:	9302      	str	r3, [sp, #8]
   d8ac8:	9503      	str	r5, [sp, #12]
   d8aca:	f7fe fa75 	bl	d6fb8 <__errno>
   d8ace:	6803      	ldr	r3, [r0, #0]
   d8ad0:	9301      	str	r3, [sp, #4]
   d8ad2:	4b0e      	ldr	r3, [pc, #56]	; (d8b0c <_ZN9TCPClient9availableEv+0xb0>)
   d8ad4:	9300      	str	r3, [sp, #0]
   d8ad6:	aa02      	add	r2, sp, #8
   d8ad8:	462b      	mov	r3, r5
   d8ada:	490d      	ldr	r1, [pc, #52]	; (d8b10 <_ZN9TCPClient9availableEv+0xb4>)
   d8adc:	2032      	movs	r0, #50	; 0x32
   d8ade:	f7fe f957 	bl	d6d90 <log_message>
                    sock_close(d_->sock);
   d8ae2:	6963      	ldr	r3, [r4, #20]
   d8ae4:	6818      	ldr	r0, [r3, #0]
   d8ae6:	f7fe f8eb 	bl	d6cc0 <sock_close>
   d8aea:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8aec:	f04f 32ff 	mov.w	r2, #4294967295
   d8af0:	601a      	str	r2, [r3, #0]
   d8af2:	e002      	b.n	d8afa <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8af4:	f7ff ff18 	bl	d8928 <_ZN9TCPClient12flush_bufferEv>
   d8af8:	e7bb      	b.n	d8a72 <_ZN9TCPClient9availableEv+0x16>
   d8afa:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8afc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8b00:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8b04:	1a18      	subs	r0, r3, r0
}
   d8b06:	b00b      	add	sp, #44	; 0x2c
   d8b08:	bd30      	pop	{r4, r5, pc}
   d8b0a:	bf00      	nop
   d8b0c:	000dcfeb 	.word	0x000dcfeb
   d8b10:	000dcfe4 	.word	0x000dcfe4

000d8b14 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8b14:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8b16:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8b18:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8b1a:	6001      	str	r1, [r0, #0]
   d8b1c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8b20:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8b24:	3088      	adds	r0, #136	; 0x88
   d8b26:	f7ff fadb 	bl	d80e0 <_ZN9IPAddressC1Ev>
}
   d8b2a:	4620      	mov	r0, r4
   d8b2c:	bd10      	pop	{r4, pc}
	...

000d8b30 <_ZN9TCPClientC1Ei>:
   d8b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8b34:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8b36:	2300      	movs	r3, #0
   d8b38:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8b3a:	4a14      	ldr	r2, [pc, #80]	; (d8b8c <_ZN9TCPClientC1Ei+0x5c>)
   d8b3c:	6043      	str	r3, [r0, #4]
   d8b3e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8b40:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8b42:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8b44:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b46:	20a0      	movs	r0, #160	; 0xa0
   d8b48:	460e      	mov	r6, r1
   d8b4a:	f7fb faa6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8b4e:	4605      	mov	r5, r0
   d8b50:	b110      	cbz	r0, d8b58 <_ZN9TCPClientC1Ei+0x28>
   d8b52:	4631      	mov	r1, r6
   d8b54:	f7ff ffde 	bl	d8b14 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b58:	2014      	movs	r0, #20
   d8b5a:	f7fb fa9e 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8b5e:	4603      	mov	r3, r0
   d8b60:	b128      	cbz	r0, d8b6e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8b62:	2201      	movs	r2, #1
   d8b64:	6042      	str	r2, [r0, #4]
   d8b66:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8b68:	4a09      	ldr	r2, [pc, #36]	; (d8b90 <_ZN9TCPClientC1Ei+0x60>)
   d8b6a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8b6c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8b6e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8b70:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8b72:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8b74:	b128      	cbz	r0, d8b82 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8b76:	6843      	ldr	r3, [r0, #4]
   d8b78:	3b01      	subs	r3, #1
   d8b7a:	6043      	str	r3, [r0, #4]
   d8b7c:	b90b      	cbnz	r3, d8b82 <_ZN9TCPClientC1Ei+0x52>
   d8b7e:	f7ff fddf 	bl	d8740 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8b82:	4620      	mov	r0, r4
   d8b84:	f7ff fed0 	bl	d8928 <_ZN9TCPClient12flush_bufferEv>
}
   d8b88:	4620      	mov	r0, r4
   d8b8a:	bd70      	pop	{r4, r5, r6, pc}
   d8b8c:	000dcfa0 	.word	0x000dcfa0
   d8b90:	000dcf84 	.word	0x000dcf84

000d8b94 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b94:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8b96:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b9a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8b9c:	f7ff ffc8 	bl	d8b30 <_ZN9TCPClientC1Ei>
}
   d8ba0:	4620      	mov	r0, r4
   d8ba2:	bd10      	pop	{r4, pc}

000d8ba4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8ba4:	b510      	push	{r4, lr}
   d8ba6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8ba8:	6800      	ldr	r0, [r0, #0]
   d8baa:	2800      	cmp	r0, #0
   d8bac:	db01      	blt.n	d8bb2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8bae:	f7fe f887 	bl	d6cc0 <sock_close>
    }
}
   d8bb2:	4620      	mov	r0, r4
   d8bb4:	bd10      	pop	{r4, pc}

000d8bb6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8bb6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8bb8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8bba:	4620      	mov	r0, r4
   d8bbc:	f7ff fff2 	bl	d8ba4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8bc0:	b124      	cbz	r4, d8bcc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8bc2:	4620      	mov	r0, r4
   d8bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8bc8:	f7fb ba69 	b.w	d409e <_ZdlPv>
   d8bcc:	bd10      	pop	{r4, pc}

000d8bce <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8bce:	2200      	movs	r2, #0
   d8bd0:	4611      	mov	r1, r2
   d8bd2:	6840      	ldr	r0, [r0, #4]
   d8bd4:	f7fe b940 	b.w	d6e58 <network_ready>

000d8bd8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8bd8:	2200      	movs	r2, #0
   d8bda:	4611      	mov	r1, r2
   d8bdc:	6840      	ldr	r0, [r0, #4]
   d8bde:	f7fe b95b 	b.w	d6e98 <network_listening>

000d8be2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8be2:	2200      	movs	r2, #0
   d8be4:	4611      	mov	r1, r2
   d8be6:	6840      	ldr	r0, [r0, #4]
   d8be8:	f7fe b966 	b.w	d6eb8 <network_get_listen_timeout>

000d8bec <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8bec:	2200      	movs	r2, #0
   d8bee:	6840      	ldr	r0, [r0, #4]
   d8bf0:	f7fe b95a 	b.w	d6ea8 <network_set_listen_timeout>

000d8bf4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bf4:	2200      	movs	r2, #0
   d8bf6:	f081 0101 	eor.w	r1, r1, #1
   d8bfa:	6840      	ldr	r0, [r0, #4]
   d8bfc:	f7fe b944 	b.w	d6e88 <network_listen>

000d8c00 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8c00:	2300      	movs	r3, #0
   d8c02:	461a      	mov	r2, r3
   d8c04:	4619      	mov	r1, r3
   d8c06:	6840      	ldr	r0, [r0, #4]
   d8c08:	f7fe b936 	b.w	d6e78 <network_off>

000d8c0c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8c0c:	2300      	movs	r3, #0
   d8c0e:	461a      	mov	r2, r3
   d8c10:	4619      	mov	r1, r3
   d8c12:	6840      	ldr	r0, [r0, #4]
   d8c14:	f7fe b928 	b.w	d6e68 <network_on>

000d8c18 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8c18:	2200      	movs	r2, #0
   d8c1a:	4611      	mov	r1, r2
   d8c1c:	6840      	ldr	r0, [r0, #4]
   d8c1e:	f7fe b90b 	b.w	d6e38 <network_connecting>

000d8c22 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c22:	2200      	movs	r2, #0
   d8c24:	2102      	movs	r1, #2
   d8c26:	6840      	ldr	r0, [r0, #4]
   d8c28:	f7fe b90e 	b.w	d6e48 <network_disconnect>

000d8c2c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8c2c:	2300      	movs	r3, #0
   d8c2e:	461a      	mov	r2, r3
   d8c30:	6840      	ldr	r0, [r0, #4]
   d8c32:	f7fe b8f9 	b.w	d6e28 <network_connect>
	...

000d8c38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8c38:	4b02      	ldr	r3, [pc, #8]	; (d8c44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8c3a:	2204      	movs	r2, #4
   d8c3c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8c3e:	4a02      	ldr	r2, [pc, #8]	; (d8c48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8c40:	601a      	str	r2, [r3, #0]
   d8c42:	4770      	bx	lr
   d8c44:	2003e6fc 	.word	0x2003e6fc
   d8c48:	000dd004 	.word	0x000dd004

000d8c4c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8c4c:	2300      	movs	r3, #0
   d8c4e:	461a      	mov	r2, r3
   d8c50:	6840      	ldr	r0, [r0, #4]
   d8c52:	f7fe b8e9 	b.w	d6e28 <network_connect>

000d8c56 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8c56:	2200      	movs	r2, #0
   d8c58:	2102      	movs	r1, #2
   d8c5a:	6840      	ldr	r0, [r0, #4]
   d8c5c:	f7fe b8f4 	b.w	d6e48 <network_disconnect>

000d8c60 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8c60:	2200      	movs	r2, #0
   d8c62:	4611      	mov	r1, r2
   d8c64:	6840      	ldr	r0, [r0, #4]
   d8c66:	f7fe b8e7 	b.w	d6e38 <network_connecting>

000d8c6a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8c6a:	2200      	movs	r2, #0
   d8c6c:	4611      	mov	r1, r2
   d8c6e:	6840      	ldr	r0, [r0, #4]
   d8c70:	f7fe b8f2 	b.w	d6e58 <network_ready>

000d8c74 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8c74:	2300      	movs	r3, #0
   d8c76:	461a      	mov	r2, r3
   d8c78:	4619      	mov	r1, r3
   d8c7a:	6840      	ldr	r0, [r0, #4]
   d8c7c:	f7fe b8f4 	b.w	d6e68 <network_on>

000d8c80 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8c80:	2300      	movs	r3, #0
   d8c82:	461a      	mov	r2, r3
   d8c84:	4619      	mov	r1, r3
   d8c86:	6840      	ldr	r0, [r0, #4]
   d8c88:	f7fe b8f6 	b.w	d6e78 <network_off>

000d8c8c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8c8c:	2200      	movs	r2, #0
   d8c8e:	f081 0101 	eor.w	r1, r1, #1
   d8c92:	6840      	ldr	r0, [r0, #4]
   d8c94:	f7fe b8f8 	b.w	d6e88 <network_listen>

000d8c98 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8c98:	2200      	movs	r2, #0
   d8c9a:	6840      	ldr	r0, [r0, #4]
   d8c9c:	f7fe b904 	b.w	d6ea8 <network_set_listen_timeout>

000d8ca0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8ca0:	2200      	movs	r2, #0
   d8ca2:	4611      	mov	r1, r2
   d8ca4:	6840      	ldr	r0, [r0, #4]
   d8ca6:	f7fe b907 	b.w	d6eb8 <network_get_listen_timeout>

000d8caa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8caa:	2200      	movs	r2, #0
   d8cac:	4611      	mov	r1, r2
   d8cae:	6840      	ldr	r0, [r0, #4]
   d8cb0:	f7fe b8f2 	b.w	d6e98 <network_listening>

000d8cb4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8cb8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cba:	b095      	sub	sp, #84	; 0x54
   d8cbc:	4616      	mov	r6, r2
   d8cbe:	460d      	mov	r5, r1
   d8cc0:	4607      	mov	r7, r0
    IPAddress addr;
   d8cc2:	f7ff fa0d 	bl	d80e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8cc6:	4621      	mov	r1, r4
   d8cc8:	2220      	movs	r2, #32
   d8cca:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8ccc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8cce:	f002 fd49 	bl	db764 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8cd2:	2340      	movs	r3, #64	; 0x40
   d8cd4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8cd6:	4621      	mov	r1, r4
   d8cd8:	466b      	mov	r3, sp
   d8cda:	aa0c      	add	r2, sp, #48	; 0x30
   d8cdc:	4630      	mov	r0, r6
   d8cde:	f7fd fe3f 	bl	d6960 <netdb_getaddrinfo>
    if (!r) {
   d8ce2:	4604      	mov	r4, r0
   d8ce4:	2800      	cmp	r0, #0
   d8ce6:	d144      	bne.n	d8d72 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8ce8:	4602      	mov	r2, r0
   d8cea:	2101      	movs	r1, #1
   d8cec:	6868      	ldr	r0, [r5, #4]
   d8cee:	f7fe f8b3 	bl	d6e58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cf2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8cf4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cf6:	4622      	mov	r2, r4
   d8cf8:	6868      	ldr	r0, [r5, #4]
   d8cfa:	f7fe f8ad 	bl	d6e58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8cfe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d00:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8d02:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d04:	2e00      	cmp	r6, #0
   d8d06:	d034      	beq.n	d8d72 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8d08:	2900      	cmp	r1, #0
   d8d0a:	d132      	bne.n	d8d72 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8d0c:	6873      	ldr	r3, [r6, #4]
   d8d0e:	2b02      	cmp	r3, #2
   d8d10:	d002      	beq.n	d8d18 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8d12:	2b0a      	cmp	r3, #10
   d8d14:	d009      	beq.n	d8d2a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8d16:	e02a      	b.n	d8d6e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8d18:	f1b8 0f00 	cmp.w	r8, #0
   d8d1c:	d027      	beq.n	d8d6e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8d1e:	6971      	ldr	r1, [r6, #20]
   d8d20:	4638      	mov	r0, r7
   d8d22:	3104      	adds	r1, #4
   d8d24:	f7ff fa1f 	bl	d8166 <_ZN9IPAddressaSEPKh>
   d8d28:	e020      	b.n	d8d6c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8d2a:	f1b9 0f00 	cmp.w	r9, #0
   d8d2e:	d01e      	beq.n	d8d6e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8d30:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8d32:	2211      	movs	r2, #17
   d8d34:	a801      	add	r0, sp, #4
   d8d36:	f002 fd15 	bl	db764 <memset>
                    a.v = 6;
   d8d3a:	2306      	movs	r3, #6
   d8d3c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8d40:	ad01      	add	r5, sp, #4
   d8d42:	f104 0308 	add.w	r3, r4, #8
   d8d46:	3418      	adds	r4, #24
   d8d48:	6818      	ldr	r0, [r3, #0]
   d8d4a:	6859      	ldr	r1, [r3, #4]
   d8d4c:	462a      	mov	r2, r5
   d8d4e:	c203      	stmia	r2!, {r0, r1}
   d8d50:	3308      	adds	r3, #8
   d8d52:	42a3      	cmp	r3, r4
   d8d54:	4615      	mov	r5, r2
   d8d56:	d1f7      	bne.n	d8d48 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8d58:	a901      	add	r1, sp, #4
   d8d5a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8d5c:	ad07      	add	r5, sp, #28
   d8d5e:	f7ff f9cd 	bl	d80fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d64:	1d3c      	adds	r4, r7, #4
   d8d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d68:	682b      	ldr	r3, [r5, #0]
   d8d6a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8d6c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d6e:	69f6      	ldr	r6, [r6, #28]
   d8d70:	e7c8      	b.n	d8d04 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8d72:	9800      	ldr	r0, [sp, #0]
   d8d74:	f7fd fdec 	bl	d6950 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8d78:	4638      	mov	r0, r7
   d8d7a:	b015      	add	sp, #84	; 0x54
   d8d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8d80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8d80:	4b02      	ldr	r3, [pc, #8]	; (d8d8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8d82:	4a03      	ldr	r2, [pc, #12]	; (d8d90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8d84:	601a      	str	r2, [r3, #0]
   d8d86:	2200      	movs	r2, #0
   d8d88:	605a      	str	r2, [r3, #4]
   d8d8a:	4770      	bx	lr
   d8d8c:	2003e704 	.word	0x2003e704
   d8d90:	000dd038 	.word	0x000dd038

000d8d94 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8d94:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8d96:	4e18      	ldr	r6, [pc, #96]	; (d8df8 <pinAvailable+0x64>)
   d8d98:	6831      	ldr	r1, [r6, #0]
   d8d9a:	f011 0501 	ands.w	r5, r1, #1
   d8d9e:	4604      	mov	r4, r0
   d8da0:	d10a      	bne.n	d8db8 <pinAvailable+0x24>
   d8da2:	4630      	mov	r0, r6
   d8da4:	f7fb f98a 	bl	d40bc <__cxa_guard_acquire>
   d8da8:	b130      	cbz	r0, d8db8 <pinAvailable+0x24>
   d8daa:	4629      	mov	r1, r5
   d8dac:	4813      	ldr	r0, [pc, #76]	; (d8dfc <pinAvailable+0x68>)
   d8dae:	f7fe f94f 	bl	d7050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8db2:	4630      	mov	r0, r6
   d8db4:	f7fb f987 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8db8:	4810      	ldr	r0, [pc, #64]	; (d8dfc <pinAvailable+0x68>)
   d8dba:	f7fe fa6b 	bl	d7294 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8dbe:	b128      	cbz	r0, d8dcc <pinAvailable+0x38>
   d8dc0:	f1a4 030b 	sub.w	r3, r4, #11
   d8dc4:	2b02      	cmp	r3, #2
   d8dc6:	d801      	bhi.n	d8dcc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8dc8:	2000      	movs	r0, #0
   d8dca:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8dcc:	f000 f8ac 	bl	d8f28 <_Z19__fetch_global_Wirev>
   d8dd0:	f7ff fb75 	bl	d84be <_ZN7TwoWire9isEnabledEv>
   d8dd4:	b108      	cbz	r0, d8dda <pinAvailable+0x46>
   d8dd6:	2c01      	cmp	r4, #1
   d8dd8:	d9f6      	bls.n	d8dc8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8dda:	f7ff fab3 	bl	d8344 <_Z22__fetch_global_Serial1v>
   d8dde:	f7ff faad 	bl	d833c <_ZN11USARTSerial9isEnabledEv>
   d8de2:	b118      	cbz	r0, d8dec <pinAvailable+0x58>
   d8de4:	f1a4 0309 	sub.w	r3, r4, #9
   d8de8:	2b01      	cmp	r3, #1
   d8dea:	d9ed      	bls.n	d8dc8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8dec:	2c23      	cmp	r4, #35	; 0x23
   d8dee:	bf8c      	ite	hi
   d8df0:	2000      	movhi	r0, #0
   d8df2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8df4:	bd70      	pop	{r4, r5, r6, pc}
   d8df6:	bf00      	nop
   d8df8:	2003e3a4 	.word	0x2003e3a4
   d8dfc:	2003e3a8 	.word	0x2003e3a8

000d8e00 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e00:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8e02:	b538      	push	{r3, r4, r5, lr}
   d8e04:	4604      	mov	r4, r0
   d8e06:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8e08:	d80a      	bhi.n	d8e20 <pinMode+0x20>
   d8e0a:	29ff      	cmp	r1, #255	; 0xff
   d8e0c:	d008      	beq.n	d8e20 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e0e:	f7ff ffc1 	bl	d8d94 <pinAvailable>
   d8e12:	b128      	cbz	r0, d8e20 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8e14:	4629      	mov	r1, r5
   d8e16:	4620      	mov	r0, r4
}
   d8e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8e1c:	f7fd bdb8 	b.w	d6990 <HAL_Pin_Mode>
   d8e20:	bd38      	pop	{r3, r4, r5, pc}

000d8e22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8e22:	b538      	push	{r3, r4, r5, lr}
   d8e24:	4604      	mov	r4, r0
   d8e26:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8e28:	f7fd fdba 	bl	d69a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8e2c:	28ff      	cmp	r0, #255	; 0xff
   d8e2e:	d010      	beq.n	d8e52 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8e30:	2806      	cmp	r0, #6
   d8e32:	d804      	bhi.n	d8e3e <digitalWrite+0x1c>
   d8e34:	234d      	movs	r3, #77	; 0x4d
   d8e36:	fa23 f000 	lsr.w	r0, r3, r0
   d8e3a:	07c3      	lsls	r3, r0, #31
   d8e3c:	d409      	bmi.n	d8e52 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8e3e:	4620      	mov	r0, r4
   d8e40:	f7ff ffa8 	bl	d8d94 <pinAvailable>
   d8e44:	b128      	cbz	r0, d8e52 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8e46:	4629      	mov	r1, r5
   d8e48:	4620      	mov	r0, r4
}
   d8e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8e4e:	f7fd bdaf 	b.w	d69b0 <HAL_GPIO_Write>
   d8e52:	bd38      	pop	{r3, r4, r5, pc}

000d8e54 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8e54:	b510      	push	{r4, lr}
   d8e56:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8e58:	f7fd fda2 	bl	d69a0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8e5c:	3804      	subs	r0, #4
   d8e5e:	b2c0      	uxtb	r0, r0
   d8e60:	2801      	cmp	r0, #1
   d8e62:	d908      	bls.n	d8e76 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8e64:	4620      	mov	r0, r4
   d8e66:	f7ff ff95 	bl	d8d94 <pinAvailable>
   d8e6a:	b120      	cbz	r0, d8e76 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8e6c:	4620      	mov	r0, r4
}
   d8e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8e72:	f7fd bda5 	b.w	d69c0 <HAL_GPIO_Read>
}
   d8e76:	2000      	movs	r0, #0
   d8e78:	bd10      	pop	{r4, pc}

000d8e7a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8e7a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8e7c:	b510      	push	{r4, lr}
   d8e7e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8e80:	bf9c      	itt	ls
   d8e82:	340e      	addls	r4, #14
   d8e84:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e86:	4620      	mov	r0, r4
   d8e88:	f7ff ff84 	bl	d8d94 <pinAvailable>
   d8e8c:	b150      	cbz	r0, d8ea4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8e8e:	2103      	movs	r1, #3
   d8e90:	4620      	mov	r0, r4
   d8e92:	f7fd fd75 	bl	d6980 <HAL_Validate_Pin_Function>
   d8e96:	2803      	cmp	r0, #3
   d8e98:	d104      	bne.n	d8ea4 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8e9a:	4620      	mov	r0, r4
}
   d8e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8ea0:	f7fd bd96 	b.w	d69d0 <HAL_ADC_Read>
}
   d8ea4:	2000      	movs	r0, #0
   d8ea6:	bd10      	pop	{r4, pc}

000d8ea8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d8ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8eac:	4690      	mov	r8, r2
   d8eae:	461e      	mov	r6, r3
   d8eb0:	2407      	movs	r4, #7
   d8eb2:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d8eb4:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d8eb6:	f1b8 0f00 	cmp.w	r8, #0
   d8eba:	d104      	bne.n	d8ec6 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d8ebc:	f1c4 0107 	rsb	r1, r4, #7
   d8ec0:	fa46 f101 	asr.w	r1, r6, r1
   d8ec4:	e001      	b.n	d8eca <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d8ec6:	fa46 f104 	asr.w	r1, r6, r4
   d8eca:	f001 0101 	and.w	r1, r1, #1
   d8ece:	4638      	mov	r0, r7
   d8ed0:	f7ff ffa7 	bl	d8e22 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d8ed4:	2101      	movs	r1, #1
   d8ed6:	4628      	mov	r0, r5
   d8ed8:	f7ff ffa3 	bl	d8e22 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d8edc:	2100      	movs	r1, #0
   d8ede:	4628      	mov	r0, r5
   d8ee0:	f7ff ff9f 	bl	d8e22 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d8ee4:	f114 34ff 	adds.w	r4, r4, #4294967295
   d8ee8:	d2e5      	bcs.n	d8eb6 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d8eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8eee <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d8eee:	f7fd bd77 	b.w	d69e0 <HAL_Pulse_In>
	...

000d8ef4 <_Z17acquireWireBufferv>:
   d8ef4:	b570      	push	{r4, r5, r6, lr}
   d8ef6:	4604      	mov	r4, r0
   d8ef8:	2514      	movs	r5, #20
   d8efa:	462a      	mov	r2, r5
   d8efc:	4e09      	ldr	r6, [pc, #36]	; (d8f24 <_Z17acquireWireBufferv+0x30>)
   d8efe:	2100      	movs	r1, #0
   d8f00:	f002 fc30 	bl	db764 <memset>
   d8f04:	8025      	strh	r5, [r4, #0]
   d8f06:	2520      	movs	r5, #32
   d8f08:	4631      	mov	r1, r6
   d8f0a:	60a5      	str	r5, [r4, #8]
   d8f0c:	6125      	str	r5, [r4, #16]
   d8f0e:	4628      	mov	r0, r5
   d8f10:	f000 f840 	bl	d8f94 <_ZnajRKSt9nothrow_t>
   d8f14:	4631      	mov	r1, r6
   d8f16:	6060      	str	r0, [r4, #4]
   d8f18:	4628      	mov	r0, r5
   d8f1a:	f000 f83b 	bl	d8f94 <_ZnajRKSt9nothrow_t>
   d8f1e:	60e0      	str	r0, [r4, #12]
   d8f20:	4620      	mov	r0, r4
   d8f22:	bd70      	pop	{r4, r5, r6, pc}
   d8f24:	000dd064 	.word	0x000dd064

000d8f28 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8f28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8f2a:	4d0e      	ldr	r5, [pc, #56]	; (d8f64 <_Z19__fetch_global_Wirev+0x3c>)
   d8f2c:	6829      	ldr	r1, [r5, #0]
   d8f2e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8f32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8f34:	d113      	bne.n	d8f5e <_Z19__fetch_global_Wirev+0x36>
   d8f36:	4628      	mov	r0, r5
   d8f38:	f7fb f8c0 	bl	d40bc <__cxa_guard_acquire>
   d8f3c:	b178      	cbz	r0, d8f5e <_Z19__fetch_global_Wirev+0x36>
   d8f3e:	a801      	add	r0, sp, #4
   d8f40:	f7ff ffd8 	bl	d8ef4 <_Z17acquireWireBufferv>
   d8f44:	aa01      	add	r2, sp, #4
   d8f46:	4621      	mov	r1, r4
   d8f48:	4807      	ldr	r0, [pc, #28]	; (d8f68 <_Z19__fetch_global_Wirev+0x40>)
   d8f4a:	f7ff fa61 	bl	d8410 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8f4e:	4628      	mov	r0, r5
   d8f50:	f7fb f8b9 	bl	d40c6 <__cxa_guard_release>
   d8f54:	4a05      	ldr	r2, [pc, #20]	; (d8f6c <_Z19__fetch_global_Wirev+0x44>)
   d8f56:	4906      	ldr	r1, [pc, #24]	; (d8f70 <_Z19__fetch_global_Wirev+0x48>)
   d8f58:	4803      	ldr	r0, [pc, #12]	; (d8f68 <_Z19__fetch_global_Wirev+0x40>)
   d8f5a:	f000 f80b 	bl	d8f74 <__aeabi_atexit>
	return wire;
}
   d8f5e:	4802      	ldr	r0, [pc, #8]	; (d8f68 <_Z19__fetch_global_Wirev+0x40>)
   d8f60:	b007      	add	sp, #28
   d8f62:	bd30      	pop	{r4, r5, pc}
   d8f64:	2003e710 	.word	0x2003e710
   d8f68:	2003e714 	.word	0x2003e714
   d8f6c:	2003e148 	.word	0x2003e148
   d8f70:	000d83b9 	.word	0x000d83b9

000d8f74 <__aeabi_atexit>:
   d8f74:	460b      	mov	r3, r1
   d8f76:	4601      	mov	r1, r0
   d8f78:	4618      	mov	r0, r3
   d8f7a:	f002 bab3 	b.w	db4e4 <__cxa_atexit>
	...

000d8f80 <_ZSt15get_new_handlerv>:
   d8f80:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <_ZSt15get_new_handlerv+0xc>)
   d8f82:	6818      	ldr	r0, [r3, #0]
   d8f84:	f3bf 8f5f 	dmb	sy
   d8f88:	4770      	bx	lr
   d8f8a:	bf00      	nop
   d8f8c:	2003e728 	.word	0x2003e728

000d8f90 <_ZdlPvj>:
   d8f90:	f7fb b885 	b.w	d409e <_ZdlPv>

000d8f94 <_ZnajRKSt9nothrow_t>:
   d8f94:	f000 b800 	b.w	d8f98 <_ZnwjRKSt9nothrow_t>

000d8f98 <_ZnwjRKSt9nothrow_t>:
   d8f98:	b510      	push	{r4, lr}
   d8f9a:	2800      	cmp	r0, #0
   d8f9c:	bf14      	ite	ne
   d8f9e:	4604      	movne	r4, r0
   d8fa0:	2401      	moveq	r4, #1
   d8fa2:	4620      	mov	r0, r4
   d8fa4:	f7fd ffc0 	bl	d6f28 <malloc>
   d8fa8:	b920      	cbnz	r0, d8fb4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8faa:	f7ff ffe9 	bl	d8f80 <_ZSt15get_new_handlerv>
   d8fae:	b108      	cbz	r0, d8fb4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8fb0:	4780      	blx	r0
   d8fb2:	e7f6      	b.n	d8fa2 <_ZnwjRKSt9nothrow_t+0xa>
   d8fb4:	bd10      	pop	{r4, pc}

000d8fb6 <_ZSt25__throw_bad_function_callv>:
   d8fb6:	b508      	push	{r3, lr}
   d8fb8:	f7fd ffee 	bl	d6f98 <abort>

000d8fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8fbc:	4b18      	ldr	r3, [pc, #96]	; (d9020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8fbe:	681a      	ldr	r2, [r3, #0]
   d8fc0:	07d1      	lsls	r1, r2, #31
   d8fc2:	bf5c      	itt	pl
   d8fc4:	2201      	movpl	r2, #1
   d8fc6:	601a      	strpl	r2, [r3, #0]
   d8fc8:	4b16      	ldr	r3, [pc, #88]	; (d9024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8fca:	681a      	ldr	r2, [r3, #0]
   d8fcc:	07d2      	lsls	r2, r2, #31
   d8fce:	bf5c      	itt	pl
   d8fd0:	2201      	movpl	r2, #1
   d8fd2:	601a      	strpl	r2, [r3, #0]
   d8fd4:	4b14      	ldr	r3, [pc, #80]	; (d9028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8fd6:	681a      	ldr	r2, [r3, #0]
   d8fd8:	07d0      	lsls	r0, r2, #31
   d8fda:	bf5c      	itt	pl
   d8fdc:	2201      	movpl	r2, #1
   d8fde:	601a      	strpl	r2, [r3, #0]
   d8fe0:	4b12      	ldr	r3, [pc, #72]	; (d902c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8fe2:	681a      	ldr	r2, [r3, #0]
   d8fe4:	07d1      	lsls	r1, r2, #31
   d8fe6:	bf5c      	itt	pl
   d8fe8:	2201      	movpl	r2, #1
   d8fea:	601a      	strpl	r2, [r3, #0]
   d8fec:	4b10      	ldr	r3, [pc, #64]	; (d9030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8fee:	681a      	ldr	r2, [r3, #0]
   d8ff0:	07d2      	lsls	r2, r2, #31
   d8ff2:	bf5c      	itt	pl
   d8ff4:	2201      	movpl	r2, #1
   d8ff6:	601a      	strpl	r2, [r3, #0]
   d8ff8:	4b0e      	ldr	r3, [pc, #56]	; (d9034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8ffa:	681a      	ldr	r2, [r3, #0]
   d8ffc:	07d0      	lsls	r0, r2, #31
   d8ffe:	bf5c      	itt	pl
   d9000:	2201      	movpl	r2, #1
   d9002:	601a      	strpl	r2, [r3, #0]
   d9004:	4b0c      	ldr	r3, [pc, #48]	; (d9038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9006:	681a      	ldr	r2, [r3, #0]
   d9008:	07d1      	lsls	r1, r2, #31
   d900a:	bf5c      	itt	pl
   d900c:	2201      	movpl	r2, #1
   d900e:	601a      	strpl	r2, [r3, #0]
   d9010:	4b0a      	ldr	r3, [pc, #40]	; (d903c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9012:	681a      	ldr	r2, [r3, #0]
   d9014:	07d2      	lsls	r2, r2, #31
   d9016:	bf5c      	itt	pl
   d9018:	2201      	movpl	r2, #1
   d901a:	601a      	strpl	r2, [r3, #0]
   d901c:	4770      	bx	lr
   d901e:	bf00      	nop
   d9020:	2003e748 	.word	0x2003e748
   d9024:	2003e744 	.word	0x2003e744
   d9028:	2003e740 	.word	0x2003e740
   d902c:	2003e73c 	.word	0x2003e73c
   d9030:	2003e738 	.word	0x2003e738
   d9034:	2003e734 	.word	0x2003e734
   d9038:	2003e730 	.word	0x2003e730
   d903c:	2003e72c 	.word	0x2003e72c

000d9040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9040:	4b24      	ldr	r3, [pc, #144]	; (d90d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d9042:	681a      	ldr	r2, [r3, #0]
   d9044:	07d0      	lsls	r0, r2, #31
   d9046:	bf5c      	itt	pl
   d9048:	2201      	movpl	r2, #1
   d904a:	601a      	strpl	r2, [r3, #0]
   d904c:	4b22      	ldr	r3, [pc, #136]	; (d90d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d904e:	681a      	ldr	r2, [r3, #0]
   d9050:	07d1      	lsls	r1, r2, #31
   d9052:	bf5c      	itt	pl
   d9054:	2201      	movpl	r2, #1
   d9056:	601a      	strpl	r2, [r3, #0]
   d9058:	4b20      	ldr	r3, [pc, #128]	; (d90dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d905a:	681a      	ldr	r2, [r3, #0]
   d905c:	07d2      	lsls	r2, r2, #31
   d905e:	bf5c      	itt	pl
   d9060:	2201      	movpl	r2, #1
   d9062:	601a      	strpl	r2, [r3, #0]
   d9064:	4b1e      	ldr	r3, [pc, #120]	; (d90e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d9066:	681a      	ldr	r2, [r3, #0]
   d9068:	07d0      	lsls	r0, r2, #31
   d906a:	bf5c      	itt	pl
   d906c:	2201      	movpl	r2, #1
   d906e:	601a      	strpl	r2, [r3, #0]
   d9070:	4b1c      	ldr	r3, [pc, #112]	; (d90e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d9072:	681a      	ldr	r2, [r3, #0]
   d9074:	07d1      	lsls	r1, r2, #31
   d9076:	bf5c      	itt	pl
   d9078:	2201      	movpl	r2, #1
   d907a:	601a      	strpl	r2, [r3, #0]
   d907c:	4b1a      	ldr	r3, [pc, #104]	; (d90e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d907e:	681a      	ldr	r2, [r3, #0]
   d9080:	07d2      	lsls	r2, r2, #31
   d9082:	bf5c      	itt	pl
   d9084:	2201      	movpl	r2, #1
   d9086:	601a      	strpl	r2, [r3, #0]
   d9088:	4b18      	ldr	r3, [pc, #96]	; (d90ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d908a:	681a      	ldr	r2, [r3, #0]
   d908c:	07d0      	lsls	r0, r2, #31
   d908e:	bf5c      	itt	pl
   d9090:	2201      	movpl	r2, #1
   d9092:	601a      	strpl	r2, [r3, #0]
   d9094:	4b16      	ldr	r3, [pc, #88]	; (d90f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d9096:	681a      	ldr	r2, [r3, #0]
   d9098:	07d1      	lsls	r1, r2, #31
   d909a:	bf5c      	itt	pl
   d909c:	2201      	movpl	r2, #1
   d909e:	601a      	strpl	r2, [r3, #0]
   d90a0:	4b14      	ldr	r3, [pc, #80]	; (d90f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d90a2:	681a      	ldr	r2, [r3, #0]
   d90a4:	07d2      	lsls	r2, r2, #31
   d90a6:	bf5c      	itt	pl
   d90a8:	2201      	movpl	r2, #1
   d90aa:	601a      	strpl	r2, [r3, #0]
   d90ac:	4b12      	ldr	r3, [pc, #72]	; (d90f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d90ae:	681a      	ldr	r2, [r3, #0]
   d90b0:	07d0      	lsls	r0, r2, #31
   d90b2:	bf5c      	itt	pl
   d90b4:	2201      	movpl	r2, #1
   d90b6:	601a      	strpl	r2, [r3, #0]
   d90b8:	4b10      	ldr	r3, [pc, #64]	; (d90fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d90ba:	681a      	ldr	r2, [r3, #0]
   d90bc:	07d1      	lsls	r1, r2, #31
   d90be:	bf5c      	itt	pl
   d90c0:	2201      	movpl	r2, #1
   d90c2:	601a      	strpl	r2, [r3, #0]
   d90c4:	4b0e      	ldr	r3, [pc, #56]	; (d9100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d90c6:	681a      	ldr	r2, [r3, #0]
   d90c8:	07d2      	lsls	r2, r2, #31
   d90ca:	bf5c      	itt	pl
   d90cc:	2201      	movpl	r2, #1
   d90ce:	601a      	strpl	r2, [r3, #0]
   d90d0:	4770      	bx	lr
   d90d2:	bf00      	nop
   d90d4:	2003e778 	.word	0x2003e778
   d90d8:	2003e774 	.word	0x2003e774
   d90dc:	2003e770 	.word	0x2003e770
   d90e0:	2003e76c 	.word	0x2003e76c
   d90e4:	2003e768 	.word	0x2003e768
   d90e8:	2003e764 	.word	0x2003e764
   d90ec:	2003e760 	.word	0x2003e760
   d90f0:	2003e75c 	.word	0x2003e75c
   d90f4:	2003e758 	.word	0x2003e758
   d90f8:	2003e754 	.word	0x2003e754
   d90fc:	2003e750 	.word	0x2003e750
   d9100:	2003e74c 	.word	0x2003e74c

000d9104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9104:	4b24      	ldr	r3, [pc, #144]	; (d9198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9106:	681a      	ldr	r2, [r3, #0]
   d9108:	07d0      	lsls	r0, r2, #31
   d910a:	bf5c      	itt	pl
   d910c:	2201      	movpl	r2, #1
   d910e:	601a      	strpl	r2, [r3, #0]
   d9110:	4b22      	ldr	r3, [pc, #136]	; (d919c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9112:	681a      	ldr	r2, [r3, #0]
   d9114:	07d1      	lsls	r1, r2, #31
   d9116:	bf5c      	itt	pl
   d9118:	2201      	movpl	r2, #1
   d911a:	601a      	strpl	r2, [r3, #0]
   d911c:	4b20      	ldr	r3, [pc, #128]	; (d91a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d911e:	681a      	ldr	r2, [r3, #0]
   d9120:	07d2      	lsls	r2, r2, #31
   d9122:	bf5c      	itt	pl
   d9124:	2201      	movpl	r2, #1
   d9126:	601a      	strpl	r2, [r3, #0]
   d9128:	4b1e      	ldr	r3, [pc, #120]	; (d91a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d912a:	681a      	ldr	r2, [r3, #0]
   d912c:	07d0      	lsls	r0, r2, #31
   d912e:	bf5c      	itt	pl
   d9130:	2201      	movpl	r2, #1
   d9132:	601a      	strpl	r2, [r3, #0]
   d9134:	4b1c      	ldr	r3, [pc, #112]	; (d91a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9136:	681a      	ldr	r2, [r3, #0]
   d9138:	07d1      	lsls	r1, r2, #31
   d913a:	bf5c      	itt	pl
   d913c:	2201      	movpl	r2, #1
   d913e:	601a      	strpl	r2, [r3, #0]
   d9140:	4b1a      	ldr	r3, [pc, #104]	; (d91ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9142:	681a      	ldr	r2, [r3, #0]
   d9144:	07d2      	lsls	r2, r2, #31
   d9146:	bf5c      	itt	pl
   d9148:	2201      	movpl	r2, #1
   d914a:	601a      	strpl	r2, [r3, #0]
   d914c:	4b18      	ldr	r3, [pc, #96]	; (d91b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d914e:	681a      	ldr	r2, [r3, #0]
   d9150:	07d0      	lsls	r0, r2, #31
   d9152:	bf5c      	itt	pl
   d9154:	2201      	movpl	r2, #1
   d9156:	601a      	strpl	r2, [r3, #0]
   d9158:	4b16      	ldr	r3, [pc, #88]	; (d91b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d915a:	681a      	ldr	r2, [r3, #0]
   d915c:	07d1      	lsls	r1, r2, #31
   d915e:	bf5c      	itt	pl
   d9160:	2201      	movpl	r2, #1
   d9162:	601a      	strpl	r2, [r3, #0]
   d9164:	4b14      	ldr	r3, [pc, #80]	; (d91b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d9166:	681a      	ldr	r2, [r3, #0]
   d9168:	07d2      	lsls	r2, r2, #31
   d916a:	bf5c      	itt	pl
   d916c:	2201      	movpl	r2, #1
   d916e:	601a      	strpl	r2, [r3, #0]
   d9170:	4b12      	ldr	r3, [pc, #72]	; (d91bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9172:	681a      	ldr	r2, [r3, #0]
   d9174:	07d0      	lsls	r0, r2, #31
   d9176:	bf5c      	itt	pl
   d9178:	2201      	movpl	r2, #1
   d917a:	601a      	strpl	r2, [r3, #0]
   d917c:	4b10      	ldr	r3, [pc, #64]	; (d91c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d917e:	681a      	ldr	r2, [r3, #0]
   d9180:	07d1      	lsls	r1, r2, #31
   d9182:	bf5c      	itt	pl
   d9184:	2201      	movpl	r2, #1
   d9186:	601a      	strpl	r2, [r3, #0]
   d9188:	4b0e      	ldr	r3, [pc, #56]	; (d91c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d918a:	681a      	ldr	r2, [r3, #0]
   d918c:	07d2      	lsls	r2, r2, #31
   d918e:	bf5c      	itt	pl
   d9190:	2201      	movpl	r2, #1
   d9192:	601a      	strpl	r2, [r3, #0]
   d9194:	4770      	bx	lr
   d9196:	bf00      	nop
   d9198:	2003e7a8 	.word	0x2003e7a8
   d919c:	2003e7a4 	.word	0x2003e7a4
   d91a0:	2003e7a0 	.word	0x2003e7a0
   d91a4:	2003e79c 	.word	0x2003e79c
   d91a8:	2003e798 	.word	0x2003e798
   d91ac:	2003e794 	.word	0x2003e794
   d91b0:	2003e790 	.word	0x2003e790
   d91b4:	2003e78c 	.word	0x2003e78c
   d91b8:	2003e788 	.word	0x2003e788
   d91bc:	2003e784 	.word	0x2003e784
   d91c0:	2003e780 	.word	0x2003e780
   d91c4:	2003e77c 	.word	0x2003e77c

000d91c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d91c8:	4b18      	ldr	r3, [pc, #96]	; (d922c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d91ca:	681a      	ldr	r2, [r3, #0]
   d91cc:	07d1      	lsls	r1, r2, #31
   d91ce:	bf5c      	itt	pl
   d91d0:	2201      	movpl	r2, #1
   d91d2:	601a      	strpl	r2, [r3, #0]
   d91d4:	4b16      	ldr	r3, [pc, #88]	; (d9230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d91d6:	681a      	ldr	r2, [r3, #0]
   d91d8:	07d2      	lsls	r2, r2, #31
   d91da:	bf5c      	itt	pl
   d91dc:	2201      	movpl	r2, #1
   d91de:	601a      	strpl	r2, [r3, #0]
   d91e0:	4b14      	ldr	r3, [pc, #80]	; (d9234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d91e2:	681a      	ldr	r2, [r3, #0]
   d91e4:	07d0      	lsls	r0, r2, #31
   d91e6:	bf5c      	itt	pl
   d91e8:	2201      	movpl	r2, #1
   d91ea:	601a      	strpl	r2, [r3, #0]
   d91ec:	4b12      	ldr	r3, [pc, #72]	; (d9238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d91ee:	681a      	ldr	r2, [r3, #0]
   d91f0:	07d1      	lsls	r1, r2, #31
   d91f2:	bf5c      	itt	pl
   d91f4:	2201      	movpl	r2, #1
   d91f6:	601a      	strpl	r2, [r3, #0]
   d91f8:	4b10      	ldr	r3, [pc, #64]	; (d923c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d91fa:	681a      	ldr	r2, [r3, #0]
   d91fc:	07d2      	lsls	r2, r2, #31
   d91fe:	bf5c      	itt	pl
   d9200:	2201      	movpl	r2, #1
   d9202:	601a      	strpl	r2, [r3, #0]
   d9204:	4b0e      	ldr	r3, [pc, #56]	; (d9240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9206:	681a      	ldr	r2, [r3, #0]
   d9208:	07d0      	lsls	r0, r2, #31
   d920a:	bf5c      	itt	pl
   d920c:	2201      	movpl	r2, #1
   d920e:	601a      	strpl	r2, [r3, #0]
   d9210:	4b0c      	ldr	r3, [pc, #48]	; (d9244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9212:	681a      	ldr	r2, [r3, #0]
   d9214:	07d1      	lsls	r1, r2, #31
   d9216:	bf5c      	itt	pl
   d9218:	2201      	movpl	r2, #1
   d921a:	601a      	strpl	r2, [r3, #0]
   d921c:	4b0a      	ldr	r3, [pc, #40]	; (d9248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d921e:	681a      	ldr	r2, [r3, #0]
   d9220:	07d2      	lsls	r2, r2, #31
   d9222:	bf5c      	itt	pl
   d9224:	2201      	movpl	r2, #1
   d9226:	601a      	strpl	r2, [r3, #0]
   d9228:	4770      	bx	lr
   d922a:	bf00      	nop
   d922c:	2003e7c8 	.word	0x2003e7c8
   d9230:	2003e7c4 	.word	0x2003e7c4
   d9234:	2003e7c0 	.word	0x2003e7c0
   d9238:	2003e7bc 	.word	0x2003e7bc
   d923c:	2003e7b8 	.word	0x2003e7b8
   d9240:	2003e7b4 	.word	0x2003e7b4
   d9244:	2003e7b0 	.word	0x2003e7b0
   d9248:	2003e7ac 	.word	0x2003e7ac
   d924c:	00000000 	.word	0x00000000

000d9250 <pow>:
   d9250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9254:	ed2d 8b02 	vpush	{d8}
   d9258:	f8df a324 	ldr.w	sl, [pc, #804]	; d9580 <pow+0x330>
   d925c:	b08b      	sub	sp, #44	; 0x2c
   d925e:	ec57 6b10 	vmov	r6, r7, d0
   d9262:	ec55 4b11 	vmov	r4, r5, d1
   d9266:	f000 f98f 	bl	d9588 <__ieee754_pow>
   d926a:	f99a 8000 	ldrsb.w	r8, [sl]
   d926e:	eeb0 8a40 	vmov.f32	s16, s0
   d9272:	eef0 8a60 	vmov.f32	s17, s1
   d9276:	f1b8 3fff 	cmp.w	r8, #4294967295
   d927a:	d048      	beq.n	d930e <pow+0xbe>
   d927c:	4622      	mov	r2, r4
   d927e:	462b      	mov	r3, r5
   d9280:	4620      	mov	r0, r4
   d9282:	4629      	mov	r1, r5
   d9284:	f001 fd6e 	bl	dad64 <__aeabi_dcmpun>
   d9288:	4683      	mov	fp, r0
   d928a:	2800      	cmp	r0, #0
   d928c:	d13f      	bne.n	d930e <pow+0xbe>
   d928e:	4632      	mov	r2, r6
   d9290:	463b      	mov	r3, r7
   d9292:	4630      	mov	r0, r6
   d9294:	4639      	mov	r1, r7
   d9296:	f001 fd65 	bl	dad64 <__aeabi_dcmpun>
   d929a:	4681      	mov	r9, r0
   d929c:	2800      	cmp	r0, #0
   d929e:	f040 8090 	bne.w	d93c2 <pow+0x172>
   d92a2:	4630      	mov	r0, r6
   d92a4:	4639      	mov	r1, r7
   d92a6:	2200      	movs	r2, #0
   d92a8:	2300      	movs	r3, #0
   d92aa:	f001 fd29 	bl	dad00 <__aeabi_dcmpeq>
   d92ae:	2800      	cmp	r0, #0
   d92b0:	d036      	beq.n	d9320 <pow+0xd0>
   d92b2:	2200      	movs	r2, #0
   d92b4:	2300      	movs	r3, #0
   d92b6:	4620      	mov	r0, r4
   d92b8:	4629      	mov	r1, r5
   d92ba:	f001 fd21 	bl	dad00 <__aeabi_dcmpeq>
   d92be:	4683      	mov	fp, r0
   d92c0:	b1b8      	cbz	r0, d92f2 <pow+0xa2>
   d92c2:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d9558 <pow+0x308>
   d92c6:	2201      	movs	r2, #1
   d92c8:	4ba9      	ldr	r3, [pc, #676]	; (d9570 <pow+0x320>)
   d92ca:	f8cd 9020 	str.w	r9, [sp, #32]
   d92ce:	9200      	str	r2, [sp, #0]
   d92d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d92d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d92d8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d92dc:	9301      	str	r3, [sp, #4]
   d92de:	f1b8 0f00 	cmp.w	r8, #0
   d92e2:	d05b      	beq.n	d939c <pow+0x14c>
   d92e4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d9560 <pow+0x310>
   d92e8:	b00b      	add	sp, #44	; 0x2c
   d92ea:	ecbd 8b02 	vpop	{d8}
   d92ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92f2:	ec45 4b10 	vmov	d0, r4, r5
   d92f6:	f000 ffa7 	bl	da248 <finite>
   d92fa:	b140      	cbz	r0, d930e <pow+0xbe>
   d92fc:	2200      	movs	r2, #0
   d92fe:	2300      	movs	r3, #0
   d9300:	4620      	mov	r0, r4
   d9302:	4629      	mov	r1, r5
   d9304:	f001 fd06 	bl	dad14 <__aeabi_dcmplt>
   d9308:	2800      	cmp	r0, #0
   d930a:	f040 80c5 	bne.w	d9498 <pow+0x248>
   d930e:	eeb0 0a48 	vmov.f32	s0, s16
   d9312:	eef0 0a68 	vmov.f32	s1, s17
   d9316:	b00b      	add	sp, #44	; 0x2c
   d9318:	ecbd 8b02 	vpop	{d8}
   d931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9320:	eeb0 0a48 	vmov.f32	s0, s16
   d9324:	eef0 0a68 	vmov.f32	s1, s17
   d9328:	f000 ff8e 	bl	da248 <finite>
   d932c:	4680      	mov	r8, r0
   d932e:	2800      	cmp	r0, #0
   d9330:	d061      	beq.n	d93f6 <pow+0x1a6>
   d9332:	f04f 0800 	mov.w	r8, #0
   d9336:	f04f 0900 	mov.w	r9, #0
   d933a:	ec51 0b18 	vmov	r0, r1, d8
   d933e:	4642      	mov	r2, r8
   d9340:	464b      	mov	r3, r9
   d9342:	f001 fcdd 	bl	dad00 <__aeabi_dcmpeq>
   d9346:	2800      	cmp	r0, #0
   d9348:	d0e1      	beq.n	d930e <pow+0xbe>
   d934a:	ec47 6b10 	vmov	d0, r6, r7
   d934e:	f000 ff7b 	bl	da248 <finite>
   d9352:	2800      	cmp	r0, #0
   d9354:	d0db      	beq.n	d930e <pow+0xbe>
   d9356:	ec45 4b10 	vmov	d0, r4, r5
   d935a:	f000 ff75 	bl	da248 <finite>
   d935e:	2800      	cmp	r0, #0
   d9360:	d0d5      	beq.n	d930e <pow+0xbe>
   d9362:	f99a 3000 	ldrsb.w	r3, [sl]
   d9366:	4a82      	ldr	r2, [pc, #520]	; (d9570 <pow+0x320>)
   d9368:	9201      	str	r2, [sp, #4]
   d936a:	2104      	movs	r1, #4
   d936c:	2200      	movs	r2, #0
   d936e:	2b02      	cmp	r3, #2
   d9370:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9374:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9378:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d937c:	9100      	str	r1, [sp, #0]
   d937e:	9208      	str	r2, [sp, #32]
   d9380:	d003      	beq.n	d938a <pow+0x13a>
   d9382:	4668      	mov	r0, sp
   d9384:	f000 ff68 	bl	da258 <matherr>
   d9388:	b970      	cbnz	r0, d93a8 <pow+0x158>
   d938a:	f7fd fe15 	bl	d6fb8 <__errno>
   d938e:	2322      	movs	r3, #34	; 0x22
   d9390:	6003      	str	r3, [r0, #0]
   d9392:	e009      	b.n	d93a8 <pow+0x158>
   d9394:	ed9f 7b70 	vldr	d7, [pc, #448]	; d9558 <pow+0x308>
   d9398:	ed8d 7b06 	vstr	d7, [sp, #24]
   d939c:	4668      	mov	r0, sp
   d939e:	f000 ff5b 	bl	da258 <matherr>
   d93a2:	2800      	cmp	r0, #0
   d93a4:	f000 808e 	beq.w	d94c4 <pow+0x274>
   d93a8:	9b08      	ldr	r3, [sp, #32]
   d93aa:	b11b      	cbz	r3, d93b4 <pow+0x164>
   d93ac:	f7fd fe04 	bl	d6fb8 <__errno>
   d93b0:	9b08      	ldr	r3, [sp, #32]
   d93b2:	6003      	str	r3, [r0, #0]
   d93b4:	ed9d 0b06 	vldr	d0, [sp, #24]
   d93b8:	b00b      	add	sp, #44	; 0x2c
   d93ba:	ecbd 8b02 	vpop	{d8}
   d93be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93c2:	2200      	movs	r2, #0
   d93c4:	2300      	movs	r3, #0
   d93c6:	4620      	mov	r0, r4
   d93c8:	4629      	mov	r1, r5
   d93ca:	f001 fc99 	bl	dad00 <__aeabi_dcmpeq>
   d93ce:	2800      	cmp	r0, #0
   d93d0:	d09d      	beq.n	d930e <pow+0xbe>
   d93d2:	ed9f 0b63 	vldr	d0, [pc, #396]	; d9560 <pow+0x310>
   d93d6:	4b66      	ldr	r3, [pc, #408]	; (d9570 <pow+0x320>)
   d93d8:	f8cd b020 	str.w	fp, [sp, #32]
   d93dc:	2201      	movs	r2, #1
   d93de:	f1b8 0f02 	cmp.w	r8, #2
   d93e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d93e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d93ea:	ed8d 0b06 	vstr	d0, [sp, #24]
   d93ee:	e88d 000c 	stmia.w	sp, {r2, r3}
   d93f2:	d1d3      	bne.n	d939c <pow+0x14c>
   d93f4:	e78f      	b.n	d9316 <pow+0xc6>
   d93f6:	ec47 6b10 	vmov	d0, r6, r7
   d93fa:	f000 ff25 	bl	da248 <finite>
   d93fe:	2800      	cmp	r0, #0
   d9400:	d097      	beq.n	d9332 <pow+0xe2>
   d9402:	ec45 4b10 	vmov	d0, r4, r5
   d9406:	f000 ff1f 	bl	da248 <finite>
   d940a:	2800      	cmp	r0, #0
   d940c:	d091      	beq.n	d9332 <pow+0xe2>
   d940e:	ec53 2b18 	vmov	r2, r3, d8
   d9412:	ee18 0a10 	vmov	r0, s16
   d9416:	4619      	mov	r1, r3
   d9418:	f001 fca4 	bl	dad64 <__aeabi_dcmpun>
   d941c:	2800      	cmp	r0, #0
   d941e:	d17c      	bne.n	d951a <pow+0x2ca>
   d9420:	2303      	movs	r3, #3
   d9422:	f99a 8000 	ldrsb.w	r8, [sl]
   d9426:	9300      	str	r3, [sp, #0]
   d9428:	4b51      	ldr	r3, [pc, #324]	; (d9570 <pow+0x320>)
   d942a:	9008      	str	r0, [sp, #32]
   d942c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d9430:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d9434:	9301      	str	r3, [sp, #4]
   d9436:	f1b8 0f00 	cmp.w	r8, #0
   d943a:	d148      	bne.n	d94ce <pow+0x27e>
   d943c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d9584 <pow+0x334>
   d9440:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d9444:	2200      	movs	r2, #0
   d9446:	2300      	movs	r3, #0
   d9448:	4630      	mov	r0, r6
   d944a:	4639      	mov	r1, r7
   d944c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d9450:	f001 fc60 	bl	dad14 <__aeabi_dcmplt>
   d9454:	2800      	cmp	r0, #0
   d9456:	d094      	beq.n	d9382 <pow+0x132>
   d9458:	2200      	movs	r2, #0
   d945a:	4b46      	ldr	r3, [pc, #280]	; (d9574 <pow+0x324>)
   d945c:	4620      	mov	r0, r4
   d945e:	4629      	mov	r1, r5
   d9460:	f001 f9e6 	bl	da830 <__aeabi_dmul>
   d9464:	4604      	mov	r4, r0
   d9466:	460d      	mov	r5, r1
   d9468:	ec45 4b10 	vmov	d0, r4, r5
   d946c:	f000 ff00 	bl	da270 <rint>
   d9470:	4620      	mov	r0, r4
   d9472:	ec53 2b10 	vmov	r2, r3, d0
   d9476:	4629      	mov	r1, r5
   d9478:	f001 fc42 	bl	dad00 <__aeabi_dcmpeq>
   d947c:	2800      	cmp	r0, #0
   d947e:	d149      	bne.n	d9514 <pow+0x2c4>
   d9480:	4b3d      	ldr	r3, [pc, #244]	; (d9578 <pow+0x328>)
   d9482:	f99a 8000 	ldrsb.w	r8, [sl]
   d9486:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d948a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d948e:	f1b8 0f02 	cmp.w	r8, #2
   d9492:	f47f af76 	bne.w	d9382 <pow+0x132>
   d9496:	e778      	b.n	d938a <pow+0x13a>
   d9498:	4a35      	ldr	r2, [pc, #212]	; (d9570 <pow+0x320>)
   d949a:	f99a 3000 	ldrsb.w	r3, [sl]
   d949e:	f8cd b020 	str.w	fp, [sp, #32]
   d94a2:	2101      	movs	r1, #1
   d94a4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d94a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d94ac:	e88d 0006 	stmia.w	sp, {r1, r2}
   d94b0:	2b00      	cmp	r3, #0
   d94b2:	f43f af6f 	beq.w	d9394 <pow+0x144>
   d94b6:	4931      	ldr	r1, [pc, #196]	; (d957c <pow+0x32c>)
   d94b8:	2000      	movs	r0, #0
   d94ba:	2b02      	cmp	r3, #2
   d94bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d94c0:	f47f af6c 	bne.w	d939c <pow+0x14c>
   d94c4:	f7fd fd78 	bl	d6fb8 <__errno>
   d94c8:	2321      	movs	r3, #33	; 0x21
   d94ca:	6003      	str	r3, [r0, #0]
   d94cc:	e76c      	b.n	d93a8 <pow+0x158>
   d94ce:	ed9f 7b26 	vldr	d7, [pc, #152]	; d9568 <pow+0x318>
   d94d2:	2200      	movs	r2, #0
   d94d4:	2300      	movs	r3, #0
   d94d6:	4630      	mov	r0, r6
   d94d8:	4639      	mov	r1, r7
   d94da:	ed8d 7b06 	vstr	d7, [sp, #24]
   d94de:	f001 fc19 	bl	dad14 <__aeabi_dcmplt>
   d94e2:	2800      	cmp	r0, #0
   d94e4:	d0d3      	beq.n	d948e <pow+0x23e>
   d94e6:	2200      	movs	r2, #0
   d94e8:	4b22      	ldr	r3, [pc, #136]	; (d9574 <pow+0x324>)
   d94ea:	4620      	mov	r0, r4
   d94ec:	4629      	mov	r1, r5
   d94ee:	f001 f99f 	bl	da830 <__aeabi_dmul>
   d94f2:	4604      	mov	r4, r0
   d94f4:	460d      	mov	r5, r1
   d94f6:	ec45 4b10 	vmov	d0, r4, r5
   d94fa:	f000 feb9 	bl	da270 <rint>
   d94fe:	4620      	mov	r0, r4
   d9500:	ec53 2b10 	vmov	r2, r3, d0
   d9504:	4629      	mov	r1, r5
   d9506:	f001 fbfb 	bl	dad00 <__aeabi_dcmpeq>
   d950a:	b918      	cbnz	r0, d9514 <pow+0x2c4>
   d950c:	4b1b      	ldr	r3, [pc, #108]	; (d957c <pow+0x32c>)
   d950e:	2200      	movs	r2, #0
   d9510:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d9514:	f99a 8000 	ldrsb.w	r8, [sl]
   d9518:	e7b9      	b.n	d948e <pow+0x23e>
   d951a:	4b15      	ldr	r3, [pc, #84]	; (d9570 <pow+0x320>)
   d951c:	f99a 9000 	ldrsb.w	r9, [sl]
   d9520:	f8cd 8020 	str.w	r8, [sp, #32]
   d9524:	2201      	movs	r2, #1
   d9526:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d952a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d952e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d9532:	f1b9 0f00 	cmp.w	r9, #0
   d9536:	f43f af2d 	beq.w	d9394 <pow+0x144>
   d953a:	2200      	movs	r2, #0
   d953c:	2300      	movs	r3, #0
   d953e:	4610      	mov	r0, r2
   d9540:	4619      	mov	r1, r3
   d9542:	f001 fa9f 	bl	daa84 <__aeabi_ddiv>
   d9546:	f1b9 0f02 	cmp.w	r9, #2
   d954a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d954e:	d0b9      	beq.n	d94c4 <pow+0x274>
   d9550:	e724      	b.n	d939c <pow+0x14c>
   d9552:	bf00      	nop
   d9554:	f3af 8000 	nop.w
	...
   d9564:	3ff00000 	.word	0x3ff00000
   d9568:	00000000 	.word	0x00000000
   d956c:	7ff00000 	.word	0x7ff00000
   d9570:	000dd068 	.word	0x000dd068
   d9574:	3fe00000 	.word	0x3fe00000
   d9578:	c7efffff 	.word	0xc7efffff
   d957c:	fff00000 	.word	0xfff00000
   d9580:	2003e08c 	.word	0x2003e08c
   d9584:	47efffff 	.word	0x47efffff

000d9588 <__ieee754_pow>:
   d9588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d958c:	ec51 0b11 	vmov	r0, r1, d1
   d9590:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d9594:	ea58 0400 	orrs.w	r4, r8, r0
   d9598:	b093      	sub	sp, #76	; 0x4c
   d959a:	d03c      	beq.n	d9616 <__ieee754_pow+0x8e>
   d959c:	ec53 2b10 	vmov	r2, r3, d0
   d95a0:	4e6d      	ldr	r6, [pc, #436]	; (d9758 <__ieee754_pow+0x1d0>)
   d95a2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d95a6:	42b4      	cmp	r4, r6
   d95a8:	ee10 aa10 	vmov	sl, s0
   d95ac:	461d      	mov	r5, r3
   d95ae:	dc2b      	bgt.n	d9608 <__ieee754_pow+0x80>
   d95b0:	4689      	mov	r9, r1
   d95b2:	ee11 ea10 	vmov	lr, s2
   d95b6:	d026      	beq.n	d9606 <__ieee754_pow+0x7e>
   d95b8:	45b0      	cmp	r8, r6
   d95ba:	dc25      	bgt.n	d9608 <__ieee754_pow+0x80>
   d95bc:	4e66      	ldr	r6, [pc, #408]	; (d9758 <__ieee754_pow+0x1d0>)
   d95be:	45b0      	cmp	r8, r6
   d95c0:	d077      	beq.n	d96b2 <__ieee754_pow+0x12a>
   d95c2:	2d00      	cmp	r5, #0
   d95c4:	4616      	mov	r6, r2
   d95c6:	461f      	mov	r7, r3
   d95c8:	e9cd 0100 	strd	r0, r1, [sp]
   d95cc:	db75      	blt.n	d96ba <__ieee754_pow+0x132>
   d95ce:	f04f 0b00 	mov.w	fp, #0
   d95d2:	f1be 0f00 	cmp.w	lr, #0
   d95d6:	d12d      	bne.n	d9634 <__ieee754_pow+0xac>
   d95d8:	4b5f      	ldr	r3, [pc, #380]	; (d9758 <__ieee754_pow+0x1d0>)
   d95da:	4598      	cmp	r8, r3
   d95dc:	f000 8089 	beq.w	d96f2 <__ieee754_pow+0x16a>
   d95e0:	4b5e      	ldr	r3, [pc, #376]	; (d975c <__ieee754_pow+0x1d4>)
   d95e2:	4598      	cmp	r8, r3
   d95e4:	d05e      	beq.n	d96a4 <__ieee754_pow+0x11c>
   d95e6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d95ea:	f000 83de 	beq.w	d9daa <__ieee754_pow+0x822>
   d95ee:	4b5c      	ldr	r3, [pc, #368]	; (d9760 <__ieee754_pow+0x1d8>)
   d95f0:	4599      	cmp	r9, r3
   d95f2:	d11f      	bne.n	d9634 <__ieee754_pow+0xac>
   d95f4:	2d00      	cmp	r5, #0
   d95f6:	db1d      	blt.n	d9634 <__ieee754_pow+0xac>
   d95f8:	ec47 6b10 	vmov	d0, r6, r7
   d95fc:	b013      	add	sp, #76	; 0x4c
   d95fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9602:	f000 bd49 	b.w	da098 <__ieee754_sqrt>
   d9606:	b15a      	cbz	r2, d9620 <__ieee754_pow+0x98>
   d9608:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d960c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d9610:	ea54 030a 	orrs.w	r3, r4, sl
   d9614:	d106      	bne.n	d9624 <__ieee754_pow+0x9c>
   d9616:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d9740 <__ieee754_pow+0x1b8>
   d961a:	b013      	add	sp, #76	; 0x4c
   d961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9620:	45a0      	cmp	r8, r4
   d9622:	ddcb      	ble.n	d95bc <__ieee754_pow+0x34>
   d9624:	484f      	ldr	r0, [pc, #316]	; (d9764 <__ieee754_pow+0x1dc>)
   d9626:	b013      	add	sp, #76	; 0x4c
   d9628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d962c:	f000 be18 	b.w	da260 <nan>
   d9630:	f04f 0b00 	mov.w	fp, #0
   d9634:	ec47 6b10 	vmov	d0, r6, r7
   d9638:	f000 fdfe 	bl	da238 <fabs>
   d963c:	ec51 0b10 	vmov	r0, r1, d0
   d9640:	f1ba 0f00 	cmp.w	sl, #0
   d9644:	d01e      	beq.n	d9684 <__ieee754_pow+0xfc>
   d9646:	0fed      	lsrs	r5, r5, #31
   d9648:	f105 3aff 	add.w	sl, r5, #4294967295
   d964c:	ea5b 030a 	orrs.w	r3, fp, sl
   d9650:	d063      	beq.n	d971a <__ieee754_pow+0x192>
   d9652:	4b45      	ldr	r3, [pc, #276]	; (d9768 <__ieee754_pow+0x1e0>)
   d9654:	4598      	cmp	r8, r3
   d9656:	f340 808d 	ble.w	d9774 <__ieee754_pow+0x1ec>
   d965a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d965e:	4598      	cmp	r8, r3
   d9660:	f340 8438 	ble.w	d9ed4 <__ieee754_pow+0x94c>
   d9664:	4b41      	ldr	r3, [pc, #260]	; (d976c <__ieee754_pow+0x1e4>)
   d9666:	429c      	cmp	r4, r3
   d9668:	dd62      	ble.n	d9730 <__ieee754_pow+0x1a8>
   d966a:	f1b9 0f00 	cmp.w	r9, #0
   d966e:	dd62      	ble.n	d9736 <__ieee754_pow+0x1ae>
   d9670:	a335      	add	r3, pc, #212	; (adr r3, d9748 <__ieee754_pow+0x1c0>)
   d9672:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9676:	4610      	mov	r0, r2
   d9678:	4619      	mov	r1, r3
   d967a:	f001 f8d9 	bl	da830 <__aeabi_dmul>
   d967e:	ec41 0b10 	vmov	d0, r0, r1
   d9682:	e7ca      	b.n	d961a <__ieee754_pow+0x92>
   d9684:	b124      	cbz	r4, d9690 <__ieee754_pow+0x108>
   d9686:	4b35      	ldr	r3, [pc, #212]	; (d975c <__ieee754_pow+0x1d4>)
   d9688:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d968c:	429a      	cmp	r2, r3
   d968e:	d1da      	bne.n	d9646 <__ieee754_pow+0xbe>
   d9690:	f1b9 0f00 	cmp.w	r9, #0
   d9694:	f2c0 83cb 	blt.w	d9e2e <__ieee754_pow+0x8a6>
   d9698:	2d00      	cmp	r5, #0
   d969a:	f2c0 8374 	blt.w	d9d86 <__ieee754_pow+0x7fe>
   d969e:	ec41 0b10 	vmov	d0, r0, r1
   d96a2:	e7ba      	b.n	d961a <__ieee754_pow+0x92>
   d96a4:	f1b9 0f00 	cmp.w	r9, #0
   d96a8:	f2c0 847a 	blt.w	d9fa0 <__ieee754_pow+0xa18>
   d96ac:	ec47 6b10 	vmov	d0, r6, r7
   d96b0:	e7b3      	b.n	d961a <__ieee754_pow+0x92>
   d96b2:	f1be 0f00 	cmp.w	lr, #0
   d96b6:	d084      	beq.n	d95c2 <__ieee754_pow+0x3a>
   d96b8:	e7a6      	b.n	d9608 <__ieee754_pow+0x80>
   d96ba:	4b2d      	ldr	r3, [pc, #180]	; (d9770 <__ieee754_pow+0x1e8>)
   d96bc:	4598      	cmp	r8, r3
   d96be:	dc29      	bgt.n	d9714 <__ieee754_pow+0x18c>
   d96c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d96c4:	4598      	cmp	r8, r3
   d96c6:	dd82      	ble.n	d95ce <__ieee754_pow+0x46>
   d96c8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d96cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d96d0:	2b14      	cmp	r3, #20
   d96d2:	f340 847f 	ble.w	d9fd4 <__ieee754_pow+0xa4c>
   d96d6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d96da:	fa2e f203 	lsr.w	r2, lr, r3
   d96de:	fa02 f303 	lsl.w	r3, r2, r3
   d96e2:	459e      	cmp	lr, r3
   d96e4:	f47f af73 	bne.w	d95ce <__ieee754_pow+0x46>
   d96e8:	f002 0201 	and.w	r2, r2, #1
   d96ec:	f1c2 0b02 	rsb	fp, r2, #2
   d96f0:	e76f      	b.n	d95d2 <__ieee754_pow+0x4a>
   d96f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d96f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d96fa:	ea53 030a 	orrs.w	r3, r3, sl
   d96fe:	d08a      	beq.n	d9616 <__ieee754_pow+0x8e>
   d9700:	4b1a      	ldr	r3, [pc, #104]	; (d976c <__ieee754_pow+0x1e4>)
   d9702:	429c      	cmp	r4, r3
   d9704:	f340 8385 	ble.w	d9e12 <__ieee754_pow+0x88a>
   d9708:	f1b9 0f00 	cmp.w	r9, #0
   d970c:	db13      	blt.n	d9736 <__ieee754_pow+0x1ae>
   d970e:	ed9d 0b00 	vldr	d0, [sp]
   d9712:	e782      	b.n	d961a <__ieee754_pow+0x92>
   d9714:	f04f 0b02 	mov.w	fp, #2
   d9718:	e75b      	b.n	d95d2 <__ieee754_pow+0x4a>
   d971a:	4632      	mov	r2, r6
   d971c:	463b      	mov	r3, r7
   d971e:	4610      	mov	r0, r2
   d9720:	4619      	mov	r1, r3
   d9722:	f000 fed1 	bl	da4c8 <__aeabi_dsub>
   d9726:	4602      	mov	r2, r0
   d9728:	460b      	mov	r3, r1
   d972a:	f001 f9ab 	bl	daa84 <__aeabi_ddiv>
   d972e:	e7b6      	b.n	d969e <__ieee754_pow+0x116>
   d9730:	f1b9 0f00 	cmp.w	r9, #0
   d9734:	db9c      	blt.n	d9670 <__ieee754_pow+0xe8>
   d9736:	ed9f 0b06 	vldr	d0, [pc, #24]	; d9750 <__ieee754_pow+0x1c8>
   d973a:	e76e      	b.n	d961a <__ieee754_pow+0x92>
   d973c:	f3af 8000 	nop.w
   d9740:	00000000 	.word	0x00000000
   d9744:	3ff00000 	.word	0x3ff00000
   d9748:	8800759c 	.word	0x8800759c
   d974c:	7e37e43c 	.word	0x7e37e43c
	...
   d9758:	7ff00000 	.word	0x7ff00000
   d975c:	3ff00000 	.word	0x3ff00000
   d9760:	3fe00000 	.word	0x3fe00000
   d9764:	000dd06c 	.word	0x000dd06c
   d9768:	41e00000 	.word	0x41e00000
   d976c:	3fefffff 	.word	0x3fefffff
   d9770:	433fffff 	.word	0x433fffff
   d9774:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d9778:	f04f 0200 	mov.w	r2, #0
   d977c:	da05      	bge.n	d978a <__ieee754_pow+0x202>
   d977e:	4bd6      	ldr	r3, [pc, #856]	; (d9ad8 <__ieee754_pow+0x550>)
   d9780:	f001 f856 	bl	da830 <__aeabi_dmul>
   d9784:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d9788:	460c      	mov	r4, r1
   d978a:	1523      	asrs	r3, r4, #20
   d978c:	4ed3      	ldr	r6, [pc, #844]	; (d9adc <__ieee754_pow+0x554>)
   d978e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d9792:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d9796:	4413      	add	r3, r2
   d9798:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d979c:	42b4      	cmp	r4, r6
   d979e:	461a      	mov	r2, r3
   d97a0:	930d      	str	r3, [sp, #52]	; 0x34
   d97a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d97a6:	f340 8349 	ble.w	d9e3c <__ieee754_pow+0x8b4>
   d97aa:	4bcd      	ldr	r3, [pc, #820]	; (d9ae0 <__ieee754_pow+0x558>)
   d97ac:	429c      	cmp	r4, r3
   d97ae:	f340 842d 	ble.w	da00c <__ieee754_pow+0xa84>
   d97b2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d9a80 <__ieee754_pow+0x4f8>
   d97b6:	ed8d 7b08 	vstr	d7, [sp, #32]
   d97ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d97be:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d9a88 <__ieee754_pow+0x500>
   d97c2:	4613      	mov	r3, r2
   d97c4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d97c8:	3301      	adds	r3, #1
   d97ca:	930d      	str	r3, [sp, #52]	; 0x34
   d97cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d97d0:	f04f 0800 	mov.w	r8, #0
   d97d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d97d8:	4629      	mov	r1, r5
   d97da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d97de:	f000 fe73 	bl	da4c8 <__aeabi_dsub>
   d97e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d97e6:	4606      	mov	r6, r0
   d97e8:	460f      	mov	r7, r1
   d97ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d97ee:	f000 fe6d 	bl	da4cc <__adddf3>
   d97f2:	4602      	mov	r2, r0
   d97f4:	460b      	mov	r3, r1
   d97f6:	2000      	movs	r0, #0
   d97f8:	49ba      	ldr	r1, [pc, #744]	; (d9ae4 <__ieee754_pow+0x55c>)
   d97fa:	f001 f943 	bl	daa84 <__aeabi_ddiv>
   d97fe:	4603      	mov	r3, r0
   d9800:	460c      	mov	r4, r1
   d9802:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d9806:	4602      	mov	r2, r0
   d9808:	460b      	mov	r3, r1
   d980a:	4630      	mov	r0, r6
   d980c:	4639      	mov	r1, r7
   d980e:	f001 f80f 	bl	da830 <__aeabi_dmul>
   d9812:	106b      	asrs	r3, r5, #1
   d9814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d9818:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d981c:	eb03 0508 	add.w	r5, r3, r8
   d9820:	460a      	mov	r2, r1
   d9822:	2300      	movs	r3, #0
   d9824:	4601      	mov	r1, r0
   d9826:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d982a:	9302      	str	r3, [sp, #8]
   d982c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d9830:	2400      	movs	r4, #0
   d9832:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d9836:	462b      	mov	r3, r5
   d9838:	4622      	mov	r2, r4
   d983a:	4640      	mov	r0, r8
   d983c:	4649      	mov	r1, r9
   d983e:	f000 fff7 	bl	da830 <__aeabi_dmul>
   d9842:	4602      	mov	r2, r0
   d9844:	460b      	mov	r3, r1
   d9846:	4630      	mov	r0, r6
   d9848:	4639      	mov	r1, r7
   d984a:	f000 fe3d 	bl	da4c8 <__aeabi_dsub>
   d984e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9852:	4606      	mov	r6, r0
   d9854:	460f      	mov	r7, r1
   d9856:	4620      	mov	r0, r4
   d9858:	4629      	mov	r1, r5
   d985a:	f000 fe35 	bl	da4c8 <__aeabi_dsub>
   d985e:	4602      	mov	r2, r0
   d9860:	460b      	mov	r3, r1
   d9862:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9866:	f000 fe2f 	bl	da4c8 <__aeabi_dsub>
   d986a:	4642      	mov	r2, r8
   d986c:	464b      	mov	r3, r9
   d986e:	f000 ffdf 	bl	da830 <__aeabi_dmul>
   d9872:	4602      	mov	r2, r0
   d9874:	460b      	mov	r3, r1
   d9876:	4630      	mov	r0, r6
   d9878:	4639      	mov	r1, r7
   d987a:	f000 fe25 	bl	da4c8 <__aeabi_dsub>
   d987e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d9882:	f000 ffd5 	bl	da830 <__aeabi_dmul>
   d9886:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d988a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d988e:	4622      	mov	r2, r4
   d9890:	462b      	mov	r3, r5
   d9892:	4620      	mov	r0, r4
   d9894:	4629      	mov	r1, r5
   d9896:	f000 ffcb 	bl	da830 <__aeabi_dmul>
   d989a:	a37d      	add	r3, pc, #500	; (adr r3, d9a90 <__ieee754_pow+0x508>)
   d989c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98a0:	4604      	mov	r4, r0
   d98a2:	460d      	mov	r5, r1
   d98a4:	f000 ffc4 	bl	da830 <__aeabi_dmul>
   d98a8:	a37b      	add	r3, pc, #492	; (adr r3, d9a98 <__ieee754_pow+0x510>)
   d98aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98ae:	f000 fe0d 	bl	da4cc <__adddf3>
   d98b2:	4622      	mov	r2, r4
   d98b4:	462b      	mov	r3, r5
   d98b6:	f000 ffbb 	bl	da830 <__aeabi_dmul>
   d98ba:	a379      	add	r3, pc, #484	; (adr r3, d9aa0 <__ieee754_pow+0x518>)
   d98bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98c0:	f000 fe04 	bl	da4cc <__adddf3>
   d98c4:	4622      	mov	r2, r4
   d98c6:	462b      	mov	r3, r5
   d98c8:	f000 ffb2 	bl	da830 <__aeabi_dmul>
   d98cc:	a376      	add	r3, pc, #472	; (adr r3, d9aa8 <__ieee754_pow+0x520>)
   d98ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98d2:	f000 fdfb 	bl	da4cc <__adddf3>
   d98d6:	4622      	mov	r2, r4
   d98d8:	462b      	mov	r3, r5
   d98da:	f000 ffa9 	bl	da830 <__aeabi_dmul>
   d98de:	a374      	add	r3, pc, #464	; (adr r3, d9ab0 <__ieee754_pow+0x528>)
   d98e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98e4:	f000 fdf2 	bl	da4cc <__adddf3>
   d98e8:	4622      	mov	r2, r4
   d98ea:	462b      	mov	r3, r5
   d98ec:	f000 ffa0 	bl	da830 <__aeabi_dmul>
   d98f0:	a371      	add	r3, pc, #452	; (adr r3, d9ab8 <__ieee754_pow+0x530>)
   d98f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98f6:	f000 fde9 	bl	da4cc <__adddf3>
   d98fa:	4622      	mov	r2, r4
   d98fc:	4606      	mov	r6, r0
   d98fe:	460f      	mov	r7, r1
   d9900:	462b      	mov	r3, r5
   d9902:	4620      	mov	r0, r4
   d9904:	4629      	mov	r1, r5
   d9906:	f000 ff93 	bl	da830 <__aeabi_dmul>
   d990a:	4602      	mov	r2, r0
   d990c:	460b      	mov	r3, r1
   d990e:	4630      	mov	r0, r6
   d9910:	4639      	mov	r1, r7
   d9912:	f000 ff8d 	bl	da830 <__aeabi_dmul>
   d9916:	4642      	mov	r2, r8
   d9918:	4604      	mov	r4, r0
   d991a:	460d      	mov	r5, r1
   d991c:	464b      	mov	r3, r9
   d991e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9922:	f000 fdd3 	bl	da4cc <__adddf3>
   d9926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d992a:	f000 ff81 	bl	da830 <__aeabi_dmul>
   d992e:	4622      	mov	r2, r4
   d9930:	462b      	mov	r3, r5
   d9932:	f000 fdcb 	bl	da4cc <__adddf3>
   d9936:	4642      	mov	r2, r8
   d9938:	4606      	mov	r6, r0
   d993a:	460f      	mov	r7, r1
   d993c:	464b      	mov	r3, r9
   d993e:	4640      	mov	r0, r8
   d9940:	4649      	mov	r1, r9
   d9942:	f000 ff75 	bl	da830 <__aeabi_dmul>
   d9946:	2200      	movs	r2, #0
   d9948:	4b67      	ldr	r3, [pc, #412]	; (d9ae8 <__ieee754_pow+0x560>)
   d994a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d994e:	f000 fdbd 	bl	da4cc <__adddf3>
   d9952:	4632      	mov	r2, r6
   d9954:	463b      	mov	r3, r7
   d9956:	f000 fdb9 	bl	da4cc <__adddf3>
   d995a:	9802      	ldr	r0, [sp, #8]
   d995c:	460d      	mov	r5, r1
   d995e:	4604      	mov	r4, r0
   d9960:	4622      	mov	r2, r4
   d9962:	462b      	mov	r3, r5
   d9964:	4640      	mov	r0, r8
   d9966:	4649      	mov	r1, r9
   d9968:	f000 ff62 	bl	da830 <__aeabi_dmul>
   d996c:	2200      	movs	r2, #0
   d996e:	4680      	mov	r8, r0
   d9970:	4689      	mov	r9, r1
   d9972:	4b5d      	ldr	r3, [pc, #372]	; (d9ae8 <__ieee754_pow+0x560>)
   d9974:	4620      	mov	r0, r4
   d9976:	4629      	mov	r1, r5
   d9978:	f000 fda6 	bl	da4c8 <__aeabi_dsub>
   d997c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9980:	f000 fda2 	bl	da4c8 <__aeabi_dsub>
   d9984:	4602      	mov	r2, r0
   d9986:	460b      	mov	r3, r1
   d9988:	4630      	mov	r0, r6
   d998a:	4639      	mov	r1, r7
   d998c:	f000 fd9c 	bl	da4c8 <__aeabi_dsub>
   d9990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9994:	f000 ff4c 	bl	da830 <__aeabi_dmul>
   d9998:	4622      	mov	r2, r4
   d999a:	4606      	mov	r6, r0
   d999c:	460f      	mov	r7, r1
   d999e:	462b      	mov	r3, r5
   d99a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d99a4:	f000 ff44 	bl	da830 <__aeabi_dmul>
   d99a8:	4602      	mov	r2, r0
   d99aa:	460b      	mov	r3, r1
   d99ac:	4630      	mov	r0, r6
   d99ae:	4639      	mov	r1, r7
   d99b0:	f000 fd8c 	bl	da4cc <__adddf3>
   d99b4:	4606      	mov	r6, r0
   d99b6:	460f      	mov	r7, r1
   d99b8:	4602      	mov	r2, r0
   d99ba:	460b      	mov	r3, r1
   d99bc:	4640      	mov	r0, r8
   d99be:	4649      	mov	r1, r9
   d99c0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d99c4:	f000 fd82 	bl	da4cc <__adddf3>
   d99c8:	9802      	ldr	r0, [sp, #8]
   d99ca:	a33d      	add	r3, pc, #244	; (adr r3, d9ac0 <__ieee754_pow+0x538>)
   d99cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99d0:	4604      	mov	r4, r0
   d99d2:	460d      	mov	r5, r1
   d99d4:	f000 ff2c 	bl	da830 <__aeabi_dmul>
   d99d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d99dc:	4680      	mov	r8, r0
   d99de:	4689      	mov	r9, r1
   d99e0:	4620      	mov	r0, r4
   d99e2:	4629      	mov	r1, r5
   d99e4:	f000 fd70 	bl	da4c8 <__aeabi_dsub>
   d99e8:	4602      	mov	r2, r0
   d99ea:	460b      	mov	r3, r1
   d99ec:	4630      	mov	r0, r6
   d99ee:	4639      	mov	r1, r7
   d99f0:	f000 fd6a 	bl	da4c8 <__aeabi_dsub>
   d99f4:	a334      	add	r3, pc, #208	; (adr r3, d9ac8 <__ieee754_pow+0x540>)
   d99f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99fa:	f000 ff19 	bl	da830 <__aeabi_dmul>
   d99fe:	a334      	add	r3, pc, #208	; (adr r3, d9ad0 <__ieee754_pow+0x548>)
   d9a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a04:	4606      	mov	r6, r0
   d9a06:	460f      	mov	r7, r1
   d9a08:	4620      	mov	r0, r4
   d9a0a:	4629      	mov	r1, r5
   d9a0c:	f000 ff10 	bl	da830 <__aeabi_dmul>
   d9a10:	4602      	mov	r2, r0
   d9a12:	460b      	mov	r3, r1
   d9a14:	4630      	mov	r0, r6
   d9a16:	4639      	mov	r1, r7
   d9a18:	f000 fd58 	bl	da4cc <__adddf3>
   d9a1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d9a20:	f000 fd54 	bl	da4cc <__adddf3>
   d9a24:	4606      	mov	r6, r0
   d9a26:	980d      	ldr	r0, [sp, #52]	; 0x34
   d9a28:	460f      	mov	r7, r1
   d9a2a:	f000 fe9b 	bl	da764 <__aeabi_i2d>
   d9a2e:	4632      	mov	r2, r6
   d9a30:	4604      	mov	r4, r0
   d9a32:	460d      	mov	r5, r1
   d9a34:	463b      	mov	r3, r7
   d9a36:	4640      	mov	r0, r8
   d9a38:	4649      	mov	r1, r9
   d9a3a:	f000 fd47 	bl	da4cc <__adddf3>
   d9a3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9a42:	f000 fd43 	bl	da4cc <__adddf3>
   d9a46:	4622      	mov	r2, r4
   d9a48:	462b      	mov	r3, r5
   d9a4a:	f000 fd3f 	bl	da4cc <__adddf3>
   d9a4e:	9802      	ldr	r0, [sp, #8]
   d9a50:	4622      	mov	r2, r4
   d9a52:	462b      	mov	r3, r5
   d9a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9a58:	f000 fd36 	bl	da4c8 <__aeabi_dsub>
   d9a5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9a60:	f000 fd32 	bl	da4c8 <__aeabi_dsub>
   d9a64:	4642      	mov	r2, r8
   d9a66:	464b      	mov	r3, r9
   d9a68:	f000 fd2e 	bl	da4c8 <__aeabi_dsub>
   d9a6c:	4602      	mov	r2, r0
   d9a6e:	460b      	mov	r3, r1
   d9a70:	4630      	mov	r0, r6
   d9a72:	4639      	mov	r1, r7
   d9a74:	f000 fd28 	bl	da4c8 <__aeabi_dsub>
   d9a78:	4680      	mov	r8, r0
   d9a7a:	4689      	mov	r9, r1
   d9a7c:	e036      	b.n	d9aec <__ieee754_pow+0x564>
   d9a7e:	bf00      	nop
	...
   d9a8c:	3ff00000 	.word	0x3ff00000
   d9a90:	4a454eef 	.word	0x4a454eef
   d9a94:	3fca7e28 	.word	0x3fca7e28
   d9a98:	93c9db65 	.word	0x93c9db65
   d9a9c:	3fcd864a 	.word	0x3fcd864a
   d9aa0:	a91d4101 	.word	0xa91d4101
   d9aa4:	3fd17460 	.word	0x3fd17460
   d9aa8:	518f264d 	.word	0x518f264d
   d9aac:	3fd55555 	.word	0x3fd55555
   d9ab0:	db6fabff 	.word	0xdb6fabff
   d9ab4:	3fdb6db6 	.word	0x3fdb6db6
   d9ab8:	33333303 	.word	0x33333303
   d9abc:	3fe33333 	.word	0x3fe33333
   d9ac0:	e0000000 	.word	0xe0000000
   d9ac4:	3feec709 	.word	0x3feec709
   d9ac8:	dc3a03fd 	.word	0xdc3a03fd
   d9acc:	3feec709 	.word	0x3feec709
   d9ad0:	145b01f5 	.word	0x145b01f5
   d9ad4:	be3e2fe0 	.word	0xbe3e2fe0
   d9ad8:	43400000 	.word	0x43400000
   d9adc:	0003988e 	.word	0x0003988e
   d9ae0:	000bb679 	.word	0x000bb679
   d9ae4:	3ff00000 	.word	0x3ff00000
   d9ae8:	40080000 	.word	0x40080000
   d9aec:	f10b 33ff 	add.w	r3, fp, #4294967295
   d9af0:	ea53 030a 	orrs.w	r3, r3, sl
   d9af4:	f000 8188 	beq.w	d9e08 <__ieee754_pow+0x880>
   d9af8:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d9e58 <__ieee754_pow+0x8d0>
   d9afc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9b00:	e9dd ab00 	ldrd	sl, fp, [sp]
   d9b04:	4653      	mov	r3, sl
   d9b06:	465c      	mov	r4, fp
   d9b08:	e9cd 3400 	strd	r3, r4, [sp]
   d9b0c:	2300      	movs	r3, #0
   d9b0e:	9300      	str	r3, [sp, #0]
   d9b10:	e9dd 4500 	ldrd	r4, r5, [sp]
   d9b14:	4650      	mov	r0, sl
   d9b16:	4622      	mov	r2, r4
   d9b18:	462b      	mov	r3, r5
   d9b1a:	4659      	mov	r1, fp
   d9b1c:	f000 fcd4 	bl	da4c8 <__aeabi_dsub>
   d9b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9b24:	f000 fe84 	bl	da830 <__aeabi_dmul>
   d9b28:	4652      	mov	r2, sl
   d9b2a:	4606      	mov	r6, r0
   d9b2c:	460f      	mov	r7, r1
   d9b2e:	465b      	mov	r3, fp
   d9b30:	4640      	mov	r0, r8
   d9b32:	4649      	mov	r1, r9
   d9b34:	f000 fe7c 	bl	da830 <__aeabi_dmul>
   d9b38:	4602      	mov	r2, r0
   d9b3a:	460b      	mov	r3, r1
   d9b3c:	4630      	mov	r0, r6
   d9b3e:	4639      	mov	r1, r7
   d9b40:	f000 fcc4 	bl	da4cc <__adddf3>
   d9b44:	4622      	mov	r2, r4
   d9b46:	4680      	mov	r8, r0
   d9b48:	4689      	mov	r9, r1
   d9b4a:	462b      	mov	r3, r5
   d9b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9b50:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d9b54:	f000 fe6c 	bl	da830 <__aeabi_dmul>
   d9b58:	460b      	mov	r3, r1
   d9b5a:	4602      	mov	r2, r0
   d9b5c:	4606      	mov	r6, r0
   d9b5e:	460f      	mov	r7, r1
   d9b60:	4640      	mov	r0, r8
   d9b62:	4649      	mov	r1, r9
   d9b64:	f000 fcb2 	bl	da4cc <__adddf3>
   d9b68:	4bd5      	ldr	r3, [pc, #852]	; (d9ec0 <__ieee754_pow+0x938>)
   d9b6a:	4299      	cmp	r1, r3
   d9b6c:	4604      	mov	r4, r0
   d9b6e:	460d      	mov	r5, r1
   d9b70:	468a      	mov	sl, r1
   d9b72:	f340 8123 	ble.w	d9dbc <__ieee754_pow+0x834>
   d9b76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d9b7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d9b7e:	4303      	orrs	r3, r0
   d9b80:	f040 8218 	bne.w	d9fb4 <__ieee754_pow+0xa2c>
   d9b84:	a3b6      	add	r3, pc, #728	; (adr r3, d9e60 <__ieee754_pow+0x8d8>)
   d9b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9b8e:	f000 fc9d 	bl	da4cc <__adddf3>
   d9b92:	4632      	mov	r2, r6
   d9b94:	4680      	mov	r8, r0
   d9b96:	4689      	mov	r9, r1
   d9b98:	463b      	mov	r3, r7
   d9b9a:	4620      	mov	r0, r4
   d9b9c:	4629      	mov	r1, r5
   d9b9e:	f000 fc93 	bl	da4c8 <__aeabi_dsub>
   d9ba2:	4602      	mov	r2, r0
   d9ba4:	460b      	mov	r3, r1
   d9ba6:	4640      	mov	r0, r8
   d9ba8:	4649      	mov	r1, r9
   d9baa:	f001 f8d1 	bl	dad50 <__aeabi_dcmpgt>
   d9bae:	2800      	cmp	r0, #0
   d9bb0:	f040 8200 	bne.w	d9fb4 <__ieee754_pow+0xa2c>
   d9bb4:	46a8      	mov	r8, r5
   d9bb6:	ea4f 5328 	mov.w	r3, r8, asr #20
   d9bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d9bbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d9bc2:	fa42 f303 	asr.w	r3, r2, r3
   d9bc6:	4453      	add	r3, sl
   d9bc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d9bcc:	4dbd      	ldr	r5, [pc, #756]	; (d9ec4 <__ieee754_pow+0x93c>)
   d9bce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d9bd2:	4115      	asrs	r5, r2
   d9bd4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d9bd8:	2000      	movs	r0, #0
   d9bda:	f1c2 0414 	rsb	r4, r2, #20
   d9bde:	ea23 0105 	bic.w	r1, r3, r5
   d9be2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d9be6:	f1ba 0f00 	cmp.w	sl, #0
   d9bea:	4602      	mov	r2, r0
   d9bec:	460b      	mov	r3, r1
   d9bee:	fa4b fb04 	asr.w	fp, fp, r4
   d9bf2:	4630      	mov	r0, r6
   d9bf4:	4639      	mov	r1, r7
   d9bf6:	bfb8      	it	lt
   d9bf8:	f1cb 0b00 	rsblt	fp, fp, #0
   d9bfc:	f000 fc64 	bl	da4c8 <__aeabi_dsub>
   d9c00:	4602      	mov	r2, r0
   d9c02:	460b      	mov	r3, r1
   d9c04:	4606      	mov	r6, r0
   d9c06:	460f      	mov	r7, r1
   d9c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9c0c:	f000 fc5e 	bl	da4cc <__adddf3>
   d9c10:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d9c14:	2400      	movs	r4, #0
   d9c16:	a394      	add	r3, pc, #592	; (adr r3, d9e68 <__ieee754_pow+0x8e0>)
   d9c18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c1c:	4620      	mov	r0, r4
   d9c1e:	460d      	mov	r5, r1
   d9c20:	f000 fe06 	bl	da830 <__aeabi_dmul>
   d9c24:	4632      	mov	r2, r6
   d9c26:	4680      	mov	r8, r0
   d9c28:	4689      	mov	r9, r1
   d9c2a:	463b      	mov	r3, r7
   d9c2c:	4620      	mov	r0, r4
   d9c2e:	4629      	mov	r1, r5
   d9c30:	f000 fc4a 	bl	da4c8 <__aeabi_dsub>
   d9c34:	4602      	mov	r2, r0
   d9c36:	460b      	mov	r3, r1
   d9c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9c3c:	f000 fc44 	bl	da4c8 <__aeabi_dsub>
   d9c40:	a38b      	add	r3, pc, #556	; (adr r3, d9e70 <__ieee754_pow+0x8e8>)
   d9c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c46:	f000 fdf3 	bl	da830 <__aeabi_dmul>
   d9c4a:	a38b      	add	r3, pc, #556	; (adr r3, d9e78 <__ieee754_pow+0x8f0>)
   d9c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c50:	4606      	mov	r6, r0
   d9c52:	460f      	mov	r7, r1
   d9c54:	4620      	mov	r0, r4
   d9c56:	4629      	mov	r1, r5
   d9c58:	f000 fdea 	bl	da830 <__aeabi_dmul>
   d9c5c:	4602      	mov	r2, r0
   d9c5e:	460b      	mov	r3, r1
   d9c60:	4630      	mov	r0, r6
   d9c62:	4639      	mov	r1, r7
   d9c64:	f000 fc32 	bl	da4cc <__adddf3>
   d9c68:	4606      	mov	r6, r0
   d9c6a:	460f      	mov	r7, r1
   d9c6c:	4602      	mov	r2, r0
   d9c6e:	460b      	mov	r3, r1
   d9c70:	4640      	mov	r0, r8
   d9c72:	4649      	mov	r1, r9
   d9c74:	f000 fc2a 	bl	da4cc <__adddf3>
   d9c78:	4642      	mov	r2, r8
   d9c7a:	464b      	mov	r3, r9
   d9c7c:	4604      	mov	r4, r0
   d9c7e:	460d      	mov	r5, r1
   d9c80:	f000 fc22 	bl	da4c8 <__aeabi_dsub>
   d9c84:	4602      	mov	r2, r0
   d9c86:	460b      	mov	r3, r1
   d9c88:	4630      	mov	r0, r6
   d9c8a:	4639      	mov	r1, r7
   d9c8c:	f000 fc1c 	bl	da4c8 <__aeabi_dsub>
   d9c90:	4622      	mov	r2, r4
   d9c92:	4680      	mov	r8, r0
   d9c94:	4689      	mov	r9, r1
   d9c96:	462b      	mov	r3, r5
   d9c98:	4620      	mov	r0, r4
   d9c9a:	4629      	mov	r1, r5
   d9c9c:	f000 fdc8 	bl	da830 <__aeabi_dmul>
   d9ca0:	a377      	add	r3, pc, #476	; (adr r3, d9e80 <__ieee754_pow+0x8f8>)
   d9ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ca6:	4606      	mov	r6, r0
   d9ca8:	460f      	mov	r7, r1
   d9caa:	f000 fdc1 	bl	da830 <__aeabi_dmul>
   d9cae:	a376      	add	r3, pc, #472	; (adr r3, d9e88 <__ieee754_pow+0x900>)
   d9cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cb4:	f000 fc08 	bl	da4c8 <__aeabi_dsub>
   d9cb8:	4632      	mov	r2, r6
   d9cba:	463b      	mov	r3, r7
   d9cbc:	f000 fdb8 	bl	da830 <__aeabi_dmul>
   d9cc0:	a373      	add	r3, pc, #460	; (adr r3, d9e90 <__ieee754_pow+0x908>)
   d9cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cc6:	f000 fc01 	bl	da4cc <__adddf3>
   d9cca:	4632      	mov	r2, r6
   d9ccc:	463b      	mov	r3, r7
   d9cce:	f000 fdaf 	bl	da830 <__aeabi_dmul>
   d9cd2:	a371      	add	r3, pc, #452	; (adr r3, d9e98 <__ieee754_pow+0x910>)
   d9cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cd8:	f000 fbf6 	bl	da4c8 <__aeabi_dsub>
   d9cdc:	4632      	mov	r2, r6
   d9cde:	463b      	mov	r3, r7
   d9ce0:	f000 fda6 	bl	da830 <__aeabi_dmul>
   d9ce4:	a36e      	add	r3, pc, #440	; (adr r3, d9ea0 <__ieee754_pow+0x918>)
   d9ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cea:	f000 fbef 	bl	da4cc <__adddf3>
   d9cee:	4632      	mov	r2, r6
   d9cf0:	463b      	mov	r3, r7
   d9cf2:	f000 fd9d 	bl	da830 <__aeabi_dmul>
   d9cf6:	4602      	mov	r2, r0
   d9cf8:	460b      	mov	r3, r1
   d9cfa:	4620      	mov	r0, r4
   d9cfc:	4629      	mov	r1, r5
   d9cfe:	f000 fbe3 	bl	da4c8 <__aeabi_dsub>
   d9d02:	4606      	mov	r6, r0
   d9d04:	460f      	mov	r7, r1
   d9d06:	4602      	mov	r2, r0
   d9d08:	460b      	mov	r3, r1
   d9d0a:	4620      	mov	r0, r4
   d9d0c:	4629      	mov	r1, r5
   d9d0e:	f000 fd8f 	bl	da830 <__aeabi_dmul>
   d9d12:	2200      	movs	r2, #0
   d9d14:	e9cd 0100 	strd	r0, r1, [sp]
   d9d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9d1c:	4630      	mov	r0, r6
   d9d1e:	4639      	mov	r1, r7
   d9d20:	f000 fbd2 	bl	da4c8 <__aeabi_dsub>
   d9d24:	4602      	mov	r2, r0
   d9d26:	460b      	mov	r3, r1
   d9d28:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9d2c:	f000 feaa 	bl	daa84 <__aeabi_ddiv>
   d9d30:	4642      	mov	r2, r8
   d9d32:	4606      	mov	r6, r0
   d9d34:	460f      	mov	r7, r1
   d9d36:	464b      	mov	r3, r9
   d9d38:	4620      	mov	r0, r4
   d9d3a:	4629      	mov	r1, r5
   d9d3c:	f000 fd78 	bl	da830 <__aeabi_dmul>
   d9d40:	4642      	mov	r2, r8
   d9d42:	464b      	mov	r3, r9
   d9d44:	f000 fbc2 	bl	da4cc <__adddf3>
   d9d48:	4602      	mov	r2, r0
   d9d4a:	460b      	mov	r3, r1
   d9d4c:	4630      	mov	r0, r6
   d9d4e:	4639      	mov	r1, r7
   d9d50:	f000 fbba 	bl	da4c8 <__aeabi_dsub>
   d9d54:	4622      	mov	r2, r4
   d9d56:	462b      	mov	r3, r5
   d9d58:	f000 fbb6 	bl	da4c8 <__aeabi_dsub>
   d9d5c:	4602      	mov	r2, r0
   d9d5e:	460b      	mov	r3, r1
   d9d60:	2000      	movs	r0, #0
   d9d62:	4959      	ldr	r1, [pc, #356]	; (d9ec8 <__ieee754_pow+0x940>)
   d9d64:	f000 fbb0 	bl	da4c8 <__aeabi_dsub>
   d9d68:	448a      	add	sl, r1
   d9d6a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d9d6e:	4602      	mov	r2, r0
   d9d70:	460b      	mov	r3, r1
   d9d72:	f2c0 815b 	blt.w	da02c <__ieee754_pow+0xaa4>
   d9d76:	4651      	mov	r1, sl
   d9d78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d9d7c:	f000 fd58 	bl	da830 <__aeabi_dmul>
   d9d80:	ec41 0b10 	vmov	d0, r0, r1
   d9d84:	e449      	b.n	d961a <__ieee754_pow+0x92>
   d9d86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d9d8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d9d8e:	ea54 030b 	orrs.w	r3, r4, fp
   d9d92:	f000 8137 	beq.w	da004 <__ieee754_pow+0xa7c>
   d9d96:	f1bb 0f01 	cmp.w	fp, #1
   d9d9a:	f47f ac80 	bne.w	d969e <__ieee754_pow+0x116>
   d9d9e:	4602      	mov	r2, r0
   d9da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9da4:	ec43 2b10 	vmov	d0, r2, r3
   d9da8:	e437      	b.n	d961a <__ieee754_pow+0x92>
   d9daa:	4632      	mov	r2, r6
   d9dac:	463b      	mov	r3, r7
   d9dae:	4630      	mov	r0, r6
   d9db0:	4639      	mov	r1, r7
   d9db2:	f000 fd3d 	bl	da830 <__aeabi_dmul>
   d9db6:	ec41 0b10 	vmov	d0, r0, r1
   d9dba:	e42e      	b.n	d961a <__ieee754_pow+0x92>
   d9dbc:	4b43      	ldr	r3, [pc, #268]	; (d9ecc <__ieee754_pow+0x944>)
   d9dbe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d9dc2:	4598      	cmp	r8, r3
   d9dc4:	f340 8115 	ble.w	d9ff2 <__ieee754_pow+0xa6a>
   d9dc8:	4b41      	ldr	r3, [pc, #260]	; (d9ed0 <__ieee754_pow+0x948>)
   d9dca:	440b      	add	r3, r1
   d9dcc:	4303      	orrs	r3, r0
   d9dce:	d10c      	bne.n	d9dea <__ieee754_pow+0x862>
   d9dd0:	4632      	mov	r2, r6
   d9dd2:	463b      	mov	r3, r7
   d9dd4:	f000 fb78 	bl	da4c8 <__aeabi_dsub>
   d9dd8:	4602      	mov	r2, r0
   d9dda:	460b      	mov	r3, r1
   d9ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d9de0:	f000 ffa2 	bl	dad28 <__aeabi_dcmple>
   d9de4:	2800      	cmp	r0, #0
   d9de6:	f43f aee6 	beq.w	d9bb6 <__ieee754_pow+0x62e>
   d9dea:	a32f      	add	r3, pc, #188	; (adr r3, d9ea8 <__ieee754_pow+0x920>)
   d9dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9df4:	f000 fd1c 	bl	da830 <__aeabi_dmul>
   d9df8:	a32b      	add	r3, pc, #172	; (adr r3, d9ea8 <__ieee754_pow+0x920>)
   d9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9dfe:	f000 fd17 	bl	da830 <__aeabi_dmul>
   d9e02:	ec41 0b10 	vmov	d0, r0, r1
   d9e06:	e408      	b.n	d961a <__ieee754_pow+0x92>
   d9e08:	ed9f 7b29 	vldr	d7, [pc, #164]	; d9eb0 <__ieee754_pow+0x928>
   d9e0c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9e10:	e676      	b.n	d9b00 <__ieee754_pow+0x578>
   d9e12:	f1b9 0f00 	cmp.w	r9, #0
   d9e16:	f6bf ac8e 	bge.w	d9736 <__ieee754_pow+0x1ae>
   d9e1a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9e1e:	ee00 3a10 	vmov	s0, r3
   d9e22:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d9e26:	ee00 3a90 	vmov	s1, r3
   d9e2a:	f7ff bbf6 	b.w	d961a <__ieee754_pow+0x92>
   d9e2e:	4602      	mov	r2, r0
   d9e30:	460b      	mov	r3, r1
   d9e32:	2000      	movs	r0, #0
   d9e34:	4924      	ldr	r1, [pc, #144]	; (d9ec8 <__ieee754_pow+0x940>)
   d9e36:	f000 fe25 	bl	daa84 <__aeabi_ddiv>
   d9e3a:	e42d      	b.n	d9698 <__ieee754_pow+0x110>
   d9e3c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d9eb8 <__ieee754_pow+0x930>
   d9e40:	ed8d 7b08 	vstr	d7, [sp, #32]
   d9e44:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d9e48:	ed9f 7b03 	vldr	d7, [pc, #12]	; d9e58 <__ieee754_pow+0x8d0>
   d9e4c:	f04f 0800 	mov.w	r8, #0
   d9e50:	ed8d 7b06 	vstr	d7, [sp, #24]
   d9e54:	e4be      	b.n	d97d4 <__ieee754_pow+0x24c>
   d9e56:	bf00      	nop
   d9e58:	00000000 	.word	0x00000000
   d9e5c:	3ff00000 	.word	0x3ff00000
   d9e60:	652b82fe 	.word	0x652b82fe
   d9e64:	3c971547 	.word	0x3c971547
   d9e68:	00000000 	.word	0x00000000
   d9e6c:	3fe62e43 	.word	0x3fe62e43
   d9e70:	fefa39ef 	.word	0xfefa39ef
   d9e74:	3fe62e42 	.word	0x3fe62e42
   d9e78:	0ca86c39 	.word	0x0ca86c39
   d9e7c:	be205c61 	.word	0xbe205c61
   d9e80:	72bea4d0 	.word	0x72bea4d0
   d9e84:	3e663769 	.word	0x3e663769
   d9e88:	c5d26bf1 	.word	0xc5d26bf1
   d9e8c:	3ebbbd41 	.word	0x3ebbbd41
   d9e90:	af25de2c 	.word	0xaf25de2c
   d9e94:	3f11566a 	.word	0x3f11566a
   d9e98:	16bebd93 	.word	0x16bebd93
   d9e9c:	3f66c16c 	.word	0x3f66c16c
   d9ea0:	5555553e 	.word	0x5555553e
   d9ea4:	3fc55555 	.word	0x3fc55555
   d9ea8:	c2f8f359 	.word	0xc2f8f359
   d9eac:	01a56e1f 	.word	0x01a56e1f
   d9eb0:	00000000 	.word	0x00000000
   d9eb4:	bff00000 	.word	0xbff00000
	...
   d9ec0:	408fffff 	.word	0x408fffff
   d9ec4:	000fffff 	.word	0x000fffff
   d9ec8:	3ff00000 	.word	0x3ff00000
   d9ecc:	4090cbff 	.word	0x4090cbff
   d9ed0:	3f6f3400 	.word	0x3f6f3400
   d9ed4:	4b6c      	ldr	r3, [pc, #432]	; (da088 <__ieee754_pow+0xb00>)
   d9ed6:	429c      	cmp	r4, r3
   d9ed8:	f77f ac2a 	ble.w	d9730 <__ieee754_pow+0x1a8>
   d9edc:	4b6b      	ldr	r3, [pc, #428]	; (da08c <__ieee754_pow+0xb04>)
   d9ede:	429c      	cmp	r4, r3
   d9ee0:	f73f abc3 	bgt.w	d966a <__ieee754_pow+0xe2>
   d9ee4:	2200      	movs	r2, #0
   d9ee6:	4b69      	ldr	r3, [pc, #420]	; (da08c <__ieee754_pow+0xb04>)
   d9ee8:	f000 faee 	bl	da4c8 <__aeabi_dsub>
   d9eec:	a356      	add	r3, pc, #344	; (adr r3, da048 <__ieee754_pow+0xac0>)
   d9eee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ef2:	4604      	mov	r4, r0
   d9ef4:	460d      	mov	r5, r1
   d9ef6:	f000 fc9b 	bl	da830 <__aeabi_dmul>
   d9efa:	a355      	add	r3, pc, #340	; (adr r3, da050 <__ieee754_pow+0xac8>)
   d9efc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f00:	4680      	mov	r8, r0
   d9f02:	4689      	mov	r9, r1
   d9f04:	4620      	mov	r0, r4
   d9f06:	4629      	mov	r1, r5
   d9f08:	f000 fc92 	bl	da830 <__aeabi_dmul>
   d9f0c:	2200      	movs	r2, #0
   d9f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9f12:	4b5f      	ldr	r3, [pc, #380]	; (da090 <__ieee754_pow+0xb08>)
   d9f14:	4620      	mov	r0, r4
   d9f16:	4629      	mov	r1, r5
   d9f18:	f000 fc8a 	bl	da830 <__aeabi_dmul>
   d9f1c:	4602      	mov	r2, r0
   d9f1e:	460b      	mov	r3, r1
   d9f20:	a14d      	add	r1, pc, #308	; (adr r1, da058 <__ieee754_pow+0xad0>)
   d9f22:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9f26:	f000 facf 	bl	da4c8 <__aeabi_dsub>
   d9f2a:	4622      	mov	r2, r4
   d9f2c:	462b      	mov	r3, r5
   d9f2e:	f000 fc7f 	bl	da830 <__aeabi_dmul>
   d9f32:	4602      	mov	r2, r0
   d9f34:	460b      	mov	r3, r1
   d9f36:	2000      	movs	r0, #0
   d9f38:	4956      	ldr	r1, [pc, #344]	; (da094 <__ieee754_pow+0xb0c>)
   d9f3a:	f000 fac5 	bl	da4c8 <__aeabi_dsub>
   d9f3e:	4622      	mov	r2, r4
   d9f40:	462b      	mov	r3, r5
   d9f42:	4606      	mov	r6, r0
   d9f44:	460f      	mov	r7, r1
   d9f46:	4620      	mov	r0, r4
   d9f48:	4629      	mov	r1, r5
   d9f4a:	f000 fc71 	bl	da830 <__aeabi_dmul>
   d9f4e:	4602      	mov	r2, r0
   d9f50:	460b      	mov	r3, r1
   d9f52:	4630      	mov	r0, r6
   d9f54:	4639      	mov	r1, r7
   d9f56:	f000 fc6b 	bl	da830 <__aeabi_dmul>
   d9f5a:	a341      	add	r3, pc, #260	; (adr r3, da060 <__ieee754_pow+0xad8>)
   d9f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f60:	f000 fc66 	bl	da830 <__aeabi_dmul>
   d9f64:	4602      	mov	r2, r0
   d9f66:	460b      	mov	r3, r1
   d9f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d9f6c:	f000 faac 	bl	da4c8 <__aeabi_dsub>
   d9f70:	4602      	mov	r2, r0
   d9f72:	460b      	mov	r3, r1
   d9f74:	4604      	mov	r4, r0
   d9f76:	460d      	mov	r5, r1
   d9f78:	4640      	mov	r0, r8
   d9f7a:	4649      	mov	r1, r9
   d9f7c:	f000 faa6 	bl	da4cc <__adddf3>
   d9f80:	4642      	mov	r2, r8
   d9f82:	464b      	mov	r3, r9
   d9f84:	2000      	movs	r0, #0
   d9f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d9f8a:	f000 fa9d 	bl	da4c8 <__aeabi_dsub>
   d9f8e:	4602      	mov	r2, r0
   d9f90:	460b      	mov	r3, r1
   d9f92:	4620      	mov	r0, r4
   d9f94:	4629      	mov	r1, r5
   d9f96:	f000 fa97 	bl	da4c8 <__aeabi_dsub>
   d9f9a:	4680      	mov	r8, r0
   d9f9c:	4689      	mov	r9, r1
   d9f9e:	e5a5      	b.n	d9aec <__ieee754_pow+0x564>
   d9fa0:	4632      	mov	r2, r6
   d9fa2:	463b      	mov	r3, r7
   d9fa4:	2000      	movs	r0, #0
   d9fa6:	4939      	ldr	r1, [pc, #228]	; (da08c <__ieee754_pow+0xb04>)
   d9fa8:	f000 fd6c 	bl	daa84 <__aeabi_ddiv>
   d9fac:	ec41 0b10 	vmov	d0, r0, r1
   d9fb0:	f7ff bb33 	b.w	d961a <__ieee754_pow+0x92>
   d9fb4:	a32c      	add	r3, pc, #176	; (adr r3, da068 <__ieee754_pow+0xae0>)
   d9fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d9fbe:	f000 fc37 	bl	da830 <__aeabi_dmul>
   d9fc2:	a329      	add	r3, pc, #164	; (adr r3, da068 <__ieee754_pow+0xae0>)
   d9fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fc8:	f000 fc32 	bl	da830 <__aeabi_dmul>
   d9fcc:	ec41 0b10 	vmov	d0, r0, r1
   d9fd0:	f7ff bb23 	b.w	d961a <__ieee754_pow+0x92>
   d9fd4:	f1be 0f00 	cmp.w	lr, #0
   d9fd8:	f47f ab2a 	bne.w	d9630 <__ieee754_pow+0xa8>
   d9fdc:	f1c3 0314 	rsb	r3, r3, #20
   d9fe0:	fa48 f203 	asr.w	r2, r8, r3
   d9fe4:	fa02 f303 	lsl.w	r3, r2, r3
   d9fe8:	4598      	cmp	r8, r3
   d9fea:	d027      	beq.n	da03c <__ieee754_pow+0xab4>
   d9fec:	46f3      	mov	fp, lr
   d9fee:	f7ff baf7 	b.w	d95e0 <__ieee754_pow+0x58>
   d9ff2:	4b28      	ldr	r3, [pc, #160]	; (da094 <__ieee754_pow+0xb0c>)
   d9ff4:	4598      	cmp	r8, r3
   d9ff6:	f73f adde 	bgt.w	d9bb6 <__ieee754_pow+0x62e>
   d9ffa:	e9dd 3400 	ldrd	r3, r4, [sp]
   d9ffe:	469a      	mov	sl, r3
   da000:	469b      	mov	fp, r3
   da002:	e607      	b.n	d9c14 <__ieee754_pow+0x68c>
   da004:	4602      	mov	r2, r0
   da006:	460b      	mov	r3, r1
   da008:	f7ff bb89 	b.w	d971e <__ieee754_pow+0x196>
   da00c:	ed9f 7b18 	vldr	d7, [pc, #96]	; da070 <__ieee754_pow+0xae8>
   da010:	ed8d 7b08 	vstr	d7, [sp, #32]
   da014:	ed9f 7b18 	vldr	d7, [pc, #96]	; da078 <__ieee754_pow+0xaf0>
   da018:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   da01c:	ed9f 7b18 	vldr	d7, [pc, #96]	; da080 <__ieee754_pow+0xaf8>
   da020:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   da024:	ed8d 7b06 	vstr	d7, [sp, #24]
   da028:	f7ff bbd4 	b.w	d97d4 <__ieee754_pow+0x24c>
   da02c:	4658      	mov	r0, fp
   da02e:	ec43 2b10 	vmov	d0, r2, r3
   da032:	f000 f9b1 	bl	da398 <scalbn>
   da036:	ec51 0b10 	vmov	r0, r1, d0
   da03a:	e69d      	b.n	d9d78 <__ieee754_pow+0x7f0>
   da03c:	f002 0201 	and.w	r2, r2, #1
   da040:	f1c2 0b02 	rsb	fp, r2, #2
   da044:	f7ff bacc 	b.w	d95e0 <__ieee754_pow+0x58>
   da048:	60000000 	.word	0x60000000
   da04c:	3ff71547 	.word	0x3ff71547
   da050:	f85ddf44 	.word	0xf85ddf44
   da054:	3e54ae0b 	.word	0x3e54ae0b
   da058:	55555555 	.word	0x55555555
   da05c:	3fd55555 	.word	0x3fd55555
   da060:	652b82fe 	.word	0x652b82fe
   da064:	3ff71547 	.word	0x3ff71547
   da068:	8800759c 	.word	0x8800759c
   da06c:	7e37e43c 	.word	0x7e37e43c
   da070:	40000000 	.word	0x40000000
   da074:	3fe2b803 	.word	0x3fe2b803
   da078:	43cfd006 	.word	0x43cfd006
   da07c:	3e4cfdeb 	.word	0x3e4cfdeb
   da080:	00000000 	.word	0x00000000
   da084:	3ff80000 	.word	0x3ff80000
   da088:	3feffffe 	.word	0x3feffffe
   da08c:	3ff00000 	.word	0x3ff00000
   da090:	3fd00000 	.word	0x3fd00000
   da094:	3fe00000 	.word	0x3fe00000

000da098 <__ieee754_sqrt>:
   da098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da09c:	4965      	ldr	r1, [pc, #404]	; (da234 <__ieee754_sqrt+0x19c>)
   da09e:	ec55 4b10 	vmov	r4, r5, d0
   da0a2:	460e      	mov	r6, r1
   da0a4:	4029      	ands	r1, r5
   da0a6:	42b1      	cmp	r1, r6
   da0a8:	f000 8097 	beq.w	da1da <__ieee754_sqrt+0x142>
   da0ac:	2d00      	cmp	r5, #0
   da0ae:	462b      	mov	r3, r5
   da0b0:	ee10 2a10 	vmov	r2, s0
   da0b4:	dd74      	ble.n	da1a0 <__ieee754_sqrt+0x108>
   da0b6:	152f      	asrs	r7, r5, #20
   da0b8:	d07f      	beq.n	da1ba <__ieee754_sqrt+0x122>
   da0ba:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   da0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da0c2:	07f9      	lsls	r1, r7, #31
   da0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da0c8:	d465      	bmi.n	da196 <__ieee754_sqrt+0xfe>
   da0ca:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   da0ce:	2600      	movs	r6, #0
   da0d0:	440b      	add	r3, r1
   da0d2:	107f      	asrs	r7, r7, #1
   da0d4:	0052      	lsls	r2, r2, #1
   da0d6:	46b6      	mov	lr, r6
   da0d8:	2016      	movs	r0, #22
   da0da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   da0de:	eb0e 0401 	add.w	r4, lr, r1
   da0e2:	429c      	cmp	r4, r3
   da0e4:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   da0e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da0ec:	dc03      	bgt.n	da0f6 <__ieee754_sqrt+0x5e>
   da0ee:	1b1b      	subs	r3, r3, r4
   da0f0:	eb04 0e01 	add.w	lr, r4, r1
   da0f4:	440e      	add	r6, r1
   da0f6:	3801      	subs	r0, #1
   da0f8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   da0fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da100:	d1ed      	bne.n	da0de <__ieee754_sqrt+0x46>
   da102:	4684      	mov	ip, r0
   da104:	2420      	movs	r4, #32
   da106:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   da10a:	e009      	b.n	da120 <__ieee754_sqrt+0x88>
   da10c:	d020      	beq.n	da150 <__ieee754_sqrt+0xb8>
   da10e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   da112:	3c01      	subs	r4, #1
   da114:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da118:	442b      	add	r3, r5
   da11a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da11e:	d020      	beq.n	da162 <__ieee754_sqrt+0xca>
   da120:	459e      	cmp	lr, r3
   da122:	eb01 050c 	add.w	r5, r1, ip
   da126:	daf1      	bge.n	da10c <__ieee754_sqrt+0x74>
   da128:	2d00      	cmp	r5, #0
   da12a:	eb05 0c01 	add.w	ip, r5, r1
   da12e:	db09      	blt.n	da144 <__ieee754_sqrt+0xac>
   da130:	46f0      	mov	r8, lr
   da132:	4295      	cmp	r5, r2
   da134:	ebce 0303 	rsb	r3, lr, r3
   da138:	d900      	bls.n	da13c <__ieee754_sqrt+0xa4>
   da13a:	3b01      	subs	r3, #1
   da13c:	1b52      	subs	r2, r2, r5
   da13e:	4408      	add	r0, r1
   da140:	46c6      	mov	lr, r8
   da142:	e7e4      	b.n	da10e <__ieee754_sqrt+0x76>
   da144:	f1bc 0f00 	cmp.w	ip, #0
   da148:	dbf2      	blt.n	da130 <__ieee754_sqrt+0x98>
   da14a:	f10e 0801 	add.w	r8, lr, #1
   da14e:	e7f0      	b.n	da132 <__ieee754_sqrt+0x9a>
   da150:	4295      	cmp	r5, r2
   da152:	d81e      	bhi.n	da192 <__ieee754_sqrt+0xfa>
   da154:	2d00      	cmp	r5, #0
   da156:	eb05 0c01 	add.w	ip, r5, r1
   da15a:	db50      	blt.n	da1fe <__ieee754_sqrt+0x166>
   da15c:	4698      	mov	r8, r3
   da15e:	2300      	movs	r3, #0
   da160:	e7ec      	b.n	da13c <__ieee754_sqrt+0xa4>
   da162:	4313      	orrs	r3, r2
   da164:	d004      	beq.n	da170 <__ieee754_sqrt+0xd8>
   da166:	1c42      	adds	r2, r0, #1
   da168:	d04d      	beq.n	da206 <__ieee754_sqrt+0x16e>
   da16a:	f000 0301 	and.w	r3, r0, #1
   da16e:	4418      	add	r0, r3
   da170:	0840      	lsrs	r0, r0, #1
   da172:	1071      	asrs	r1, r6, #1
   da174:	07f3      	lsls	r3, r6, #31
   da176:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da17a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da17e:	bf48      	it	mi
   da180:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   da184:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   da188:	4602      	mov	r2, r0
   da18a:	ec43 2b10 	vmov	d0, r2, r3
   da18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da192:	4673      	mov	r3, lr
   da194:	e7bb      	b.n	da10e <__ieee754_sqrt+0x76>
   da196:	005b      	lsls	r3, r3, #1
   da198:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   da19c:	0052      	lsls	r2, r2, #1
   da19e:	e794      	b.n	da0ca <__ieee754_sqrt+0x32>
   da1a0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   da1a4:	4321      	orrs	r1, r4
   da1a6:	d028      	beq.n	da1fa <__ieee754_sqrt+0x162>
   da1a8:	bbad      	cbnz	r5, da216 <__ieee754_sqrt+0x17e>
   da1aa:	462f      	mov	r7, r5
   da1ac:	0ad3      	lsrs	r3, r2, #11
   da1ae:	3f15      	subs	r7, #21
   da1b0:	0552      	lsls	r2, r2, #21
   da1b2:	2b00      	cmp	r3, #0
   da1b4:	d0fa      	beq.n	da1ac <__ieee754_sqrt+0x114>
   da1b6:	02dd      	lsls	r5, r3, #11
   da1b8:	d428      	bmi.n	da20c <__ieee754_sqrt+0x174>
   da1ba:	2100      	movs	r1, #0
   da1bc:	e000      	b.n	da1c0 <__ieee754_sqrt+0x128>
   da1be:	4601      	mov	r1, r0
   da1c0:	005b      	lsls	r3, r3, #1
   da1c2:	02dc      	lsls	r4, r3, #11
   da1c4:	f101 0001 	add.w	r0, r1, #1
   da1c8:	d5f9      	bpl.n	da1be <__ieee754_sqrt+0x126>
   da1ca:	f1c0 0420 	rsb	r4, r0, #32
   da1ce:	fa22 f404 	lsr.w	r4, r2, r4
   da1d2:	4323      	orrs	r3, r4
   da1d4:	1a7f      	subs	r7, r7, r1
   da1d6:	4082      	lsls	r2, r0
   da1d8:	e76f      	b.n	da0ba <__ieee754_sqrt+0x22>
   da1da:	ee10 2a10 	vmov	r2, s0
   da1de:	462b      	mov	r3, r5
   da1e0:	ee10 0a10 	vmov	r0, s0
   da1e4:	4629      	mov	r1, r5
   da1e6:	f000 fb23 	bl	da830 <__aeabi_dmul>
   da1ea:	4622      	mov	r2, r4
   da1ec:	462b      	mov	r3, r5
   da1ee:	f000 f96d 	bl	da4cc <__adddf3>
   da1f2:	ec41 0b10 	vmov	d0, r0, r1
   da1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1fe:	f1bc 0f00 	cmp.w	ip, #0
   da202:	daa2      	bge.n	da14a <__ieee754_sqrt+0xb2>
   da204:	e7aa      	b.n	da15c <__ieee754_sqrt+0xc4>
   da206:	3601      	adds	r6, #1
   da208:	4620      	mov	r0, r4
   da20a:	e7b2      	b.n	da172 <__ieee754_sqrt+0xda>
   da20c:	2420      	movs	r4, #32
   da20e:	f04f 31ff 	mov.w	r1, #4294967295
   da212:	2000      	movs	r0, #0
   da214:	e7db      	b.n	da1ce <__ieee754_sqrt+0x136>
   da216:	ee10 2a10 	vmov	r2, s0
   da21a:	462b      	mov	r3, r5
   da21c:	4620      	mov	r0, r4
   da21e:	4629      	mov	r1, r5
   da220:	f000 f952 	bl	da4c8 <__aeabi_dsub>
   da224:	4602      	mov	r2, r0
   da226:	460b      	mov	r3, r1
   da228:	f000 fc2c 	bl	daa84 <__aeabi_ddiv>
   da22c:	ec41 0b10 	vmov	d0, r0, r1
   da230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da234:	7ff00000 	.word	0x7ff00000

000da238 <fabs>:
   da238:	ec53 2b10 	vmov	r2, r3, d0
   da23c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   da240:	ec43 2b10 	vmov	d0, r2, r3
   da244:	4770      	bx	lr
   da246:	bf00      	nop

000da248 <finite>:
   da248:	ee10 3a90 	vmov	r3, s1
   da24c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   da250:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   da254:	0fc0      	lsrs	r0, r0, #31
   da256:	4770      	bx	lr

000da258 <matherr>:
   da258:	2000      	movs	r0, #0
   da25a:	4770      	bx	lr
   da25c:	0000      	movs	r0, r0
	...

000da260 <nan>:
   da260:	ed9f 0b01 	vldr	d0, [pc, #4]	; da268 <nan+0x8>
   da264:	4770      	bx	lr
   da266:	bf00      	nop
   da268:	00000000 	.word	0x00000000
   da26c:	7ff80000 	.word	0x7ff80000

000da270 <rint>:
   da270:	b5f0      	push	{r4, r5, r6, r7, lr}
   da272:	ec53 2b10 	vmov	r2, r3, d0
   da276:	f3c3 560a 	ubfx	r6, r3, #20, #11
   da27a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   da27e:	2813      	cmp	r0, #19
   da280:	b083      	sub	sp, #12
   da282:	4619      	mov	r1, r3
   da284:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   da288:	ee10 5a10 	vmov	r5, s0
   da28c:	dc2f      	bgt.n	da2ee <rint+0x7e>
   da28e:	2800      	cmp	r0, #0
   da290:	db49      	blt.n	da326 <rint+0xb6>
   da292:	4e3f      	ldr	r6, [pc, #252]	; (da390 <rint+0x120>)
   da294:	4106      	asrs	r6, r0
   da296:	ea03 0706 	and.w	r7, r3, r6
   da29a:	4317      	orrs	r7, r2
   da29c:	d02c      	beq.n	da2f8 <rint+0x88>
   da29e:	0876      	lsrs	r6, r6, #1
   da2a0:	4033      	ands	r3, r6
   da2a2:	431d      	orrs	r5, r3
   da2a4:	d00c      	beq.n	da2c0 <rint+0x50>
   da2a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   da2aa:	2813      	cmp	r0, #19
   da2ac:	ea21 0606 	bic.w	r6, r1, r6
   da2b0:	fa43 f100 	asr.w	r1, r3, r0
   da2b4:	ea41 0106 	orr.w	r1, r1, r6
   da2b8:	bf0c      	ite	eq
   da2ba:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   da2be:	2500      	movne	r5, #0
   da2c0:	4834      	ldr	r0, [pc, #208]	; (da394 <rint+0x124>)
   da2c2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   da2c6:	462a      	mov	r2, r5
   da2c8:	e9d4 4500 	ldrd	r4, r5, [r4]
   da2cc:	4610      	mov	r0, r2
   da2ce:	462b      	mov	r3, r5
   da2d0:	4622      	mov	r2, r4
   da2d2:	f000 f8fb 	bl	da4cc <__adddf3>
   da2d6:	e9cd 0100 	strd	r0, r1, [sp]
   da2da:	4622      	mov	r2, r4
   da2dc:	462b      	mov	r3, r5
   da2de:	e9dd 0100 	ldrd	r0, r1, [sp]
   da2e2:	f000 f8f1 	bl	da4c8 <__aeabi_dsub>
   da2e6:	ec41 0b10 	vmov	d0, r0, r1
   da2ea:	b003      	add	sp, #12
   da2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da2ee:	2833      	cmp	r0, #51	; 0x33
   da2f0:	dd06      	ble.n	da300 <rint+0x90>
   da2f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   da2f6:	d042      	beq.n	da37e <rint+0x10e>
   da2f8:	ec43 2b10 	vmov	d0, r2, r3
   da2fc:	b003      	add	sp, #12
   da2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da300:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   da304:	f04f 30ff 	mov.w	r0, #4294967295
   da308:	40f0      	lsrs	r0, r6
   da30a:	4202      	tst	r2, r0
   da30c:	d0f4      	beq.n	da2f8 <rint+0x88>
   da30e:	0840      	lsrs	r0, r0, #1
   da310:	4202      	tst	r2, r0
   da312:	d0d5      	beq.n	da2c0 <rint+0x50>
   da314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da318:	ea25 0000 	bic.w	r0, r5, r0
   da31c:	fa43 f606 	asr.w	r6, r3, r6
   da320:	ea46 0500 	orr.w	r5, r6, r0
   da324:	e7cc      	b.n	da2c0 <rint+0x50>
   da326:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   da32a:	4310      	orrs	r0, r2
   da32c:	ee10 7a10 	vmov	r7, s0
   da330:	d0e2      	beq.n	da2f8 <rint+0x88>
   da332:	f3c3 0013 	ubfx	r0, r3, #0, #20
   da336:	4307      	orrs	r7, r0
   da338:	4278      	negs	r0, r7
   da33a:	4307      	orrs	r7, r0
   da33c:	4815      	ldr	r0, [pc, #84]	; (da394 <rint+0x124>)
   da33e:	0c59      	lsrs	r1, r3, #17
   da340:	0b3f      	lsrs	r7, r7, #12
   da342:	0449      	lsls	r1, r1, #17
   da344:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   da348:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   da34c:	ea47 0301 	orr.w	r3, r7, r1
   da350:	e9d0 6700 	ldrd	r6, r7, [r0]
   da354:	4619      	mov	r1, r3
   da356:	4610      	mov	r0, r2
   da358:	463b      	mov	r3, r7
   da35a:	4632      	mov	r2, r6
   da35c:	f000 f8b6 	bl	da4cc <__adddf3>
   da360:	e9cd 0100 	strd	r0, r1, [sp]
   da364:	463b      	mov	r3, r7
   da366:	4632      	mov	r2, r6
   da368:	e9dd 0100 	ldrd	r0, r1, [sp]
   da36c:	f000 f8ac 	bl	da4c8 <__aeabi_dsub>
   da370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da374:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   da378:	ec41 0b10 	vmov	d0, r0, r1
   da37c:	e7be      	b.n	da2fc <rint+0x8c>
   da37e:	ee10 0a10 	vmov	r0, s0
   da382:	4619      	mov	r1, r3
   da384:	f000 f8a2 	bl	da4cc <__adddf3>
   da388:	ec41 0b10 	vmov	d0, r0, r1
   da38c:	e7b6      	b.n	da2fc <rint+0x8c>
   da38e:	bf00      	nop
   da390:	000fffff 	.word	0x000fffff
   da394:	000dd070 	.word	0x000dd070

000da398 <scalbn>:
   da398:	ec53 2b10 	vmov	r2, r3, d0
   da39c:	b570      	push	{r4, r5, r6, lr}
   da39e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   da3a2:	4619      	mov	r1, r3
   da3a4:	4605      	mov	r5, r0
   da3a6:	bb14      	cbnz	r4, da3ee <scalbn+0x56>
   da3a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da3ac:	4311      	orrs	r1, r2
   da3ae:	d02a      	beq.n	da406 <scalbn+0x6e>
   da3b0:	4619      	mov	r1, r3
   da3b2:	2200      	movs	r2, #0
   da3b4:	4b38      	ldr	r3, [pc, #224]	; (da498 <scalbn+0x100>)
   da3b6:	4e39      	ldr	r6, [pc, #228]	; (da49c <scalbn+0x104>)
   da3b8:	ee10 0a10 	vmov	r0, s0
   da3bc:	f000 fa38 	bl	da830 <__aeabi_dmul>
   da3c0:	42b5      	cmp	r5, r6
   da3c2:	4602      	mov	r2, r0
   da3c4:	460b      	mov	r3, r1
   da3c6:	db1f      	blt.n	da408 <scalbn+0x70>
   da3c8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   da3cc:	3c36      	subs	r4, #54	; 0x36
   da3ce:	442c      	add	r4, r5
   da3d0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   da3d4:	4284      	cmp	r4, r0
   da3d6:	dc1f      	bgt.n	da418 <scalbn+0x80>
   da3d8:	2c00      	cmp	r4, #0
   da3da:	dd2d      	ble.n	da438 <scalbn+0xa0>
   da3dc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da3e0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da3e4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da3e8:	ec43 2b10 	vmov	d0, r2, r3
   da3ec:	bd70      	pop	{r4, r5, r6, pc}
   da3ee:	f240 70ff 	movw	r0, #2047	; 0x7ff
   da3f2:	4284      	cmp	r4, r0
   da3f4:	d1eb      	bne.n	da3ce <scalbn+0x36>
   da3f6:	ee10 0a10 	vmov	r0, s0
   da3fa:	4619      	mov	r1, r3
   da3fc:	f000 f866 	bl	da4cc <__adddf3>
   da400:	ec41 0b10 	vmov	d0, r0, r1
   da404:	bd70      	pop	{r4, r5, r6, pc}
   da406:	bd70      	pop	{r4, r5, r6, pc}
   da408:	a31f      	add	r3, pc, #124	; (adr r3, da488 <scalbn+0xf0>)
   da40a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da40e:	f000 fa0f 	bl	da830 <__aeabi_dmul>
   da412:	ec41 0b10 	vmov	d0, r0, r1
   da416:	bd70      	pop	{r4, r5, r6, pc}
   da418:	ec43 2b11 	vmov	d1, r2, r3
   da41c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; da490 <scalbn+0xf8>
   da420:	f000 f840 	bl	da4a4 <copysign>
   da424:	a31a      	add	r3, pc, #104	; (adr r3, da490 <scalbn+0xf8>)
   da426:	e9d3 2300 	ldrd	r2, r3, [r3]
   da42a:	ec51 0b10 	vmov	r0, r1, d0
   da42e:	f000 f9ff 	bl	da830 <__aeabi_dmul>
   da432:	ec41 0b10 	vmov	d0, r0, r1
   da436:	bd70      	pop	{r4, r5, r6, pc}
   da438:	f114 0f35 	cmn.w	r4, #53	; 0x35
   da43c:	da13      	bge.n	da466 <scalbn+0xce>
   da43e:	f24c 3150 	movw	r1, #50000	; 0xc350
   da442:	428d      	cmp	r5, r1
   da444:	ec43 2b11 	vmov	d1, r2, r3
   da448:	dce8      	bgt.n	da41c <scalbn+0x84>
   da44a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; da488 <scalbn+0xf0>
   da44e:	f000 f829 	bl	da4a4 <copysign>
   da452:	a30d      	add	r3, pc, #52	; (adr r3, da488 <scalbn+0xf0>)
   da454:	e9d3 2300 	ldrd	r2, r3, [r3]
   da458:	ec51 0b10 	vmov	r0, r1, d0
   da45c:	f000 f9e8 	bl	da830 <__aeabi_dmul>
   da460:	ec41 0b10 	vmov	d0, r0, r1
   da464:	bd70      	pop	{r4, r5, r6, pc}
   da466:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   da46a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   da46e:	3436      	adds	r4, #54	; 0x36
   da470:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   da474:	4610      	mov	r0, r2
   da476:	4619      	mov	r1, r3
   da478:	2200      	movs	r2, #0
   da47a:	4b09      	ldr	r3, [pc, #36]	; (da4a0 <scalbn+0x108>)
   da47c:	f000 f9d8 	bl	da830 <__aeabi_dmul>
   da480:	ec41 0b10 	vmov	d0, r0, r1
   da484:	bd70      	pop	{r4, r5, r6, pc}
   da486:	bf00      	nop
   da488:	c2f8f359 	.word	0xc2f8f359
   da48c:	01a56e1f 	.word	0x01a56e1f
   da490:	8800759c 	.word	0x8800759c
   da494:	7e37e43c 	.word	0x7e37e43c
   da498:	43500000 	.word	0x43500000
   da49c:	ffff3cb0 	.word	0xffff3cb0
   da4a0:	3c900000 	.word	0x3c900000

000da4a4 <copysign>:
   da4a4:	ec53 2b10 	vmov	r2, r3, d0
   da4a8:	ee11 0a90 	vmov	r0, s3
   da4ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   da4b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   da4b4:	ea41 0300 	orr.w	r3, r1, r0
   da4b8:	ec43 2b10 	vmov	d0, r2, r3
   da4bc:	4770      	bx	lr
   da4be:	bf00      	nop

000da4c0 <__aeabi_drsub>:
   da4c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da4c4:	e002      	b.n	da4cc <__adddf3>
   da4c6:	bf00      	nop

000da4c8 <__aeabi_dsub>:
   da4c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da4cc <__adddf3>:
   da4cc:	b530      	push	{r4, r5, lr}
   da4ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da4d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da4d6:	ea94 0f05 	teq	r4, r5
   da4da:	bf08      	it	eq
   da4dc:	ea90 0f02 	teqeq	r0, r2
   da4e0:	bf1f      	itttt	ne
   da4e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   da4e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   da4ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da4ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da4f2:	f000 80e2 	beq.w	da6ba <__adddf3+0x1ee>
   da4f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da4fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da4fe:	bfb8      	it	lt
   da500:	426d      	neglt	r5, r5
   da502:	dd0c      	ble.n	da51e <__adddf3+0x52>
   da504:	442c      	add	r4, r5
   da506:	ea80 0202 	eor.w	r2, r0, r2
   da50a:	ea81 0303 	eor.w	r3, r1, r3
   da50e:	ea82 0000 	eor.w	r0, r2, r0
   da512:	ea83 0101 	eor.w	r1, r3, r1
   da516:	ea80 0202 	eor.w	r2, r0, r2
   da51a:	ea81 0303 	eor.w	r3, r1, r3
   da51e:	2d36      	cmp	r5, #54	; 0x36
   da520:	bf88      	it	hi
   da522:	bd30      	pophi	{r4, r5, pc}
   da524:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da528:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da52c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da530:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da534:	d002      	beq.n	da53c <__adddf3+0x70>
   da536:	4240      	negs	r0, r0
   da538:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da53c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da540:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da544:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da548:	d002      	beq.n	da550 <__adddf3+0x84>
   da54a:	4252      	negs	r2, r2
   da54c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da550:	ea94 0f05 	teq	r4, r5
   da554:	f000 80a7 	beq.w	da6a6 <__adddf3+0x1da>
   da558:	f1a4 0401 	sub.w	r4, r4, #1
   da55c:	f1d5 0e20 	rsbs	lr, r5, #32
   da560:	db0d      	blt.n	da57e <__adddf3+0xb2>
   da562:	fa02 fc0e 	lsl.w	ip, r2, lr
   da566:	fa22 f205 	lsr.w	r2, r2, r5
   da56a:	1880      	adds	r0, r0, r2
   da56c:	f141 0100 	adc.w	r1, r1, #0
   da570:	fa03 f20e 	lsl.w	r2, r3, lr
   da574:	1880      	adds	r0, r0, r2
   da576:	fa43 f305 	asr.w	r3, r3, r5
   da57a:	4159      	adcs	r1, r3
   da57c:	e00e      	b.n	da59c <__adddf3+0xd0>
   da57e:	f1a5 0520 	sub.w	r5, r5, #32
   da582:	f10e 0e20 	add.w	lr, lr, #32
   da586:	2a01      	cmp	r2, #1
   da588:	fa03 fc0e 	lsl.w	ip, r3, lr
   da58c:	bf28      	it	cs
   da58e:	f04c 0c02 	orrcs.w	ip, ip, #2
   da592:	fa43 f305 	asr.w	r3, r3, r5
   da596:	18c0      	adds	r0, r0, r3
   da598:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da59c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da5a0:	d507      	bpl.n	da5b2 <__adddf3+0xe6>
   da5a2:	f04f 0e00 	mov.w	lr, #0
   da5a6:	f1dc 0c00 	rsbs	ip, ip, #0
   da5aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   da5ae:	eb6e 0101 	sbc.w	r1, lr, r1
   da5b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da5b6:	d31b      	bcc.n	da5f0 <__adddf3+0x124>
   da5b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da5bc:	d30c      	bcc.n	da5d8 <__adddf3+0x10c>
   da5be:	0849      	lsrs	r1, r1, #1
   da5c0:	ea5f 0030 	movs.w	r0, r0, rrx
   da5c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da5c8:	f104 0401 	add.w	r4, r4, #1
   da5cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da5d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da5d4:	f080 809a 	bcs.w	da70c <__adddf3+0x240>
   da5d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da5dc:	bf08      	it	eq
   da5de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da5e2:	f150 0000 	adcs.w	r0, r0, #0
   da5e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da5ea:	ea41 0105 	orr.w	r1, r1, r5
   da5ee:	bd30      	pop	{r4, r5, pc}
   da5f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da5f4:	4140      	adcs	r0, r0
   da5f6:	eb41 0101 	adc.w	r1, r1, r1
   da5fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da5fe:	f1a4 0401 	sub.w	r4, r4, #1
   da602:	d1e9      	bne.n	da5d8 <__adddf3+0x10c>
   da604:	f091 0f00 	teq	r1, #0
   da608:	bf04      	itt	eq
   da60a:	4601      	moveq	r1, r0
   da60c:	2000      	moveq	r0, #0
   da60e:	fab1 f381 	clz	r3, r1
   da612:	bf08      	it	eq
   da614:	3320      	addeq	r3, #32
   da616:	f1a3 030b 	sub.w	r3, r3, #11
   da61a:	f1b3 0220 	subs.w	r2, r3, #32
   da61e:	da0c      	bge.n	da63a <__adddf3+0x16e>
   da620:	320c      	adds	r2, #12
   da622:	dd08      	ble.n	da636 <__adddf3+0x16a>
   da624:	f102 0c14 	add.w	ip, r2, #20
   da628:	f1c2 020c 	rsb	r2, r2, #12
   da62c:	fa01 f00c 	lsl.w	r0, r1, ip
   da630:	fa21 f102 	lsr.w	r1, r1, r2
   da634:	e00c      	b.n	da650 <__adddf3+0x184>
   da636:	f102 0214 	add.w	r2, r2, #20
   da63a:	bfd8      	it	le
   da63c:	f1c2 0c20 	rsble	ip, r2, #32
   da640:	fa01 f102 	lsl.w	r1, r1, r2
   da644:	fa20 fc0c 	lsr.w	ip, r0, ip
   da648:	bfdc      	itt	le
   da64a:	ea41 010c 	orrle.w	r1, r1, ip
   da64e:	4090      	lslle	r0, r2
   da650:	1ae4      	subs	r4, r4, r3
   da652:	bfa2      	ittt	ge
   da654:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da658:	4329      	orrge	r1, r5
   da65a:	bd30      	popge	{r4, r5, pc}
   da65c:	ea6f 0404 	mvn.w	r4, r4
   da660:	3c1f      	subs	r4, #31
   da662:	da1c      	bge.n	da69e <__adddf3+0x1d2>
   da664:	340c      	adds	r4, #12
   da666:	dc0e      	bgt.n	da686 <__adddf3+0x1ba>
   da668:	f104 0414 	add.w	r4, r4, #20
   da66c:	f1c4 0220 	rsb	r2, r4, #32
   da670:	fa20 f004 	lsr.w	r0, r0, r4
   da674:	fa01 f302 	lsl.w	r3, r1, r2
   da678:	ea40 0003 	orr.w	r0, r0, r3
   da67c:	fa21 f304 	lsr.w	r3, r1, r4
   da680:	ea45 0103 	orr.w	r1, r5, r3
   da684:	bd30      	pop	{r4, r5, pc}
   da686:	f1c4 040c 	rsb	r4, r4, #12
   da68a:	f1c4 0220 	rsb	r2, r4, #32
   da68e:	fa20 f002 	lsr.w	r0, r0, r2
   da692:	fa01 f304 	lsl.w	r3, r1, r4
   da696:	ea40 0003 	orr.w	r0, r0, r3
   da69a:	4629      	mov	r1, r5
   da69c:	bd30      	pop	{r4, r5, pc}
   da69e:	fa21 f004 	lsr.w	r0, r1, r4
   da6a2:	4629      	mov	r1, r5
   da6a4:	bd30      	pop	{r4, r5, pc}
   da6a6:	f094 0f00 	teq	r4, #0
   da6aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da6ae:	bf06      	itte	eq
   da6b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da6b4:	3401      	addeq	r4, #1
   da6b6:	3d01      	subne	r5, #1
   da6b8:	e74e      	b.n	da558 <__adddf3+0x8c>
   da6ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6be:	bf18      	it	ne
   da6c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da6c4:	d029      	beq.n	da71a <__adddf3+0x24e>
   da6c6:	ea94 0f05 	teq	r4, r5
   da6ca:	bf08      	it	eq
   da6cc:	ea90 0f02 	teqeq	r0, r2
   da6d0:	d005      	beq.n	da6de <__adddf3+0x212>
   da6d2:	ea54 0c00 	orrs.w	ip, r4, r0
   da6d6:	bf04      	itt	eq
   da6d8:	4619      	moveq	r1, r3
   da6da:	4610      	moveq	r0, r2
   da6dc:	bd30      	pop	{r4, r5, pc}
   da6de:	ea91 0f03 	teq	r1, r3
   da6e2:	bf1e      	ittt	ne
   da6e4:	2100      	movne	r1, #0
   da6e6:	2000      	movne	r0, #0
   da6e8:	bd30      	popne	{r4, r5, pc}
   da6ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da6ee:	d105      	bne.n	da6fc <__adddf3+0x230>
   da6f0:	0040      	lsls	r0, r0, #1
   da6f2:	4149      	adcs	r1, r1
   da6f4:	bf28      	it	cs
   da6f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da6fa:	bd30      	pop	{r4, r5, pc}
   da6fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da700:	bf3c      	itt	cc
   da702:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da706:	bd30      	popcc	{r4, r5, pc}
   da708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da70c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da714:	f04f 0000 	mov.w	r0, #0
   da718:	bd30      	pop	{r4, r5, pc}
   da71a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da71e:	bf1a      	itte	ne
   da720:	4619      	movne	r1, r3
   da722:	4610      	movne	r0, r2
   da724:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da728:	bf1c      	itt	ne
   da72a:	460b      	movne	r3, r1
   da72c:	4602      	movne	r2, r0
   da72e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da732:	bf06      	itte	eq
   da734:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da738:	ea91 0f03 	teqeq	r1, r3
   da73c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da740:	bd30      	pop	{r4, r5, pc}
   da742:	bf00      	nop

000da744 <__aeabi_ui2d>:
   da744:	f090 0f00 	teq	r0, #0
   da748:	bf04      	itt	eq
   da74a:	2100      	moveq	r1, #0
   da74c:	4770      	bxeq	lr
   da74e:	b530      	push	{r4, r5, lr}
   da750:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da754:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da758:	f04f 0500 	mov.w	r5, #0
   da75c:	f04f 0100 	mov.w	r1, #0
   da760:	e750      	b.n	da604 <__adddf3+0x138>
   da762:	bf00      	nop

000da764 <__aeabi_i2d>:
   da764:	f090 0f00 	teq	r0, #0
   da768:	bf04      	itt	eq
   da76a:	2100      	moveq	r1, #0
   da76c:	4770      	bxeq	lr
   da76e:	b530      	push	{r4, r5, lr}
   da770:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da774:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da778:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da77c:	bf48      	it	mi
   da77e:	4240      	negmi	r0, r0
   da780:	f04f 0100 	mov.w	r1, #0
   da784:	e73e      	b.n	da604 <__adddf3+0x138>
   da786:	bf00      	nop

000da788 <__aeabi_f2d>:
   da788:	0042      	lsls	r2, r0, #1
   da78a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da78e:	ea4f 0131 	mov.w	r1, r1, rrx
   da792:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da796:	bf1f      	itttt	ne
   da798:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da79c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da7a4:	4770      	bxne	lr
   da7a6:	f092 0f00 	teq	r2, #0
   da7aa:	bf14      	ite	ne
   da7ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7b0:	4770      	bxeq	lr
   da7b2:	b530      	push	{r4, r5, lr}
   da7b4:	f44f 7460 	mov.w	r4, #896	; 0x380
   da7b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da7bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da7c0:	e720      	b.n	da604 <__adddf3+0x138>
   da7c2:	bf00      	nop

000da7c4 <__aeabi_ul2d>:
   da7c4:	ea50 0201 	orrs.w	r2, r0, r1
   da7c8:	bf08      	it	eq
   da7ca:	4770      	bxeq	lr
   da7cc:	b530      	push	{r4, r5, lr}
   da7ce:	f04f 0500 	mov.w	r5, #0
   da7d2:	e00a      	b.n	da7ea <__aeabi_l2d+0x16>

000da7d4 <__aeabi_l2d>:
   da7d4:	ea50 0201 	orrs.w	r2, r0, r1
   da7d8:	bf08      	it	eq
   da7da:	4770      	bxeq	lr
   da7dc:	b530      	push	{r4, r5, lr}
   da7de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da7e2:	d502      	bpl.n	da7ea <__aeabi_l2d+0x16>
   da7e4:	4240      	negs	r0, r0
   da7e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da7f6:	f43f aedc 	beq.w	da5b2 <__adddf3+0xe6>
   da7fa:	f04f 0203 	mov.w	r2, #3
   da7fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da802:	bf18      	it	ne
   da804:	3203      	addne	r2, #3
   da806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da80a:	bf18      	it	ne
   da80c:	3203      	addne	r2, #3
   da80e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da812:	f1c2 0320 	rsb	r3, r2, #32
   da816:	fa00 fc03 	lsl.w	ip, r0, r3
   da81a:	fa20 f002 	lsr.w	r0, r0, r2
   da81e:	fa01 fe03 	lsl.w	lr, r1, r3
   da822:	ea40 000e 	orr.w	r0, r0, lr
   da826:	fa21 f102 	lsr.w	r1, r1, r2
   da82a:	4414      	add	r4, r2
   da82c:	e6c1      	b.n	da5b2 <__adddf3+0xe6>
   da82e:	bf00      	nop

000da830 <__aeabi_dmul>:
   da830:	b570      	push	{r4, r5, r6, lr}
   da832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da83a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da83e:	bf1d      	ittte	ne
   da840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da844:	ea94 0f0c 	teqne	r4, ip
   da848:	ea95 0f0c 	teqne	r5, ip
   da84c:	f000 f8de 	bleq	daa0c <__aeabi_dmul+0x1dc>
   da850:	442c      	add	r4, r5
   da852:	ea81 0603 	eor.w	r6, r1, r3
   da856:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da85a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da85e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da862:	bf18      	it	ne
   da864:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da870:	d038      	beq.n	da8e4 <__aeabi_dmul+0xb4>
   da872:	fba0 ce02 	umull	ip, lr, r0, r2
   da876:	f04f 0500 	mov.w	r5, #0
   da87a:	fbe1 e502 	umlal	lr, r5, r1, r2
   da87e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da882:	fbe0 e503 	umlal	lr, r5, r0, r3
   da886:	f04f 0600 	mov.w	r6, #0
   da88a:	fbe1 5603 	umlal	r5, r6, r1, r3
   da88e:	f09c 0f00 	teq	ip, #0
   da892:	bf18      	it	ne
   da894:	f04e 0e01 	orrne.w	lr, lr, #1
   da898:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da89c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da8a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da8a4:	d204      	bcs.n	da8b0 <__aeabi_dmul+0x80>
   da8a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da8aa:	416d      	adcs	r5, r5
   da8ac:	eb46 0606 	adc.w	r6, r6, r6
   da8b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da8b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da8b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da8bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da8c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da8c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da8c8:	bf88      	it	hi
   da8ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da8ce:	d81e      	bhi.n	da90e <__aeabi_dmul+0xde>
   da8d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da8d4:	bf08      	it	eq
   da8d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da8da:	f150 0000 	adcs.w	r0, r0, #0
   da8de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da8e2:	bd70      	pop	{r4, r5, r6, pc}
   da8e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da8e8:	ea46 0101 	orr.w	r1, r6, r1
   da8ec:	ea40 0002 	orr.w	r0, r0, r2
   da8f0:	ea81 0103 	eor.w	r1, r1, r3
   da8f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da8f8:	bfc2      	ittt	gt
   da8fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   da8fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da902:	bd70      	popgt	{r4, r5, r6, pc}
   da904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da908:	f04f 0e00 	mov.w	lr, #0
   da90c:	3c01      	subs	r4, #1
   da90e:	f300 80ab 	bgt.w	daa68 <__aeabi_dmul+0x238>
   da912:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da916:	bfde      	ittt	le
   da918:	2000      	movle	r0, #0
   da91a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da91e:	bd70      	pople	{r4, r5, r6, pc}
   da920:	f1c4 0400 	rsb	r4, r4, #0
   da924:	3c20      	subs	r4, #32
   da926:	da35      	bge.n	da994 <__aeabi_dmul+0x164>
   da928:	340c      	adds	r4, #12
   da92a:	dc1b      	bgt.n	da964 <__aeabi_dmul+0x134>
   da92c:	f104 0414 	add.w	r4, r4, #20
   da930:	f1c4 0520 	rsb	r5, r4, #32
   da934:	fa00 f305 	lsl.w	r3, r0, r5
   da938:	fa20 f004 	lsr.w	r0, r0, r4
   da93c:	fa01 f205 	lsl.w	r2, r1, r5
   da940:	ea40 0002 	orr.w	r0, r0, r2
   da944:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da948:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da94c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da950:	fa21 f604 	lsr.w	r6, r1, r4
   da954:	eb42 0106 	adc.w	r1, r2, r6
   da958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da95c:	bf08      	it	eq
   da95e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da962:	bd70      	pop	{r4, r5, r6, pc}
   da964:	f1c4 040c 	rsb	r4, r4, #12
   da968:	f1c4 0520 	rsb	r5, r4, #32
   da96c:	fa00 f304 	lsl.w	r3, r0, r4
   da970:	fa20 f005 	lsr.w	r0, r0, r5
   da974:	fa01 f204 	lsl.w	r2, r1, r4
   da978:	ea40 0002 	orr.w	r0, r0, r2
   da97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da984:	f141 0100 	adc.w	r1, r1, #0
   da988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da98c:	bf08      	it	eq
   da98e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da992:	bd70      	pop	{r4, r5, r6, pc}
   da994:	f1c4 0520 	rsb	r5, r4, #32
   da998:	fa00 f205 	lsl.w	r2, r0, r5
   da99c:	ea4e 0e02 	orr.w	lr, lr, r2
   da9a0:	fa20 f304 	lsr.w	r3, r0, r4
   da9a4:	fa01 f205 	lsl.w	r2, r1, r5
   da9a8:	ea43 0302 	orr.w	r3, r3, r2
   da9ac:	fa21 f004 	lsr.w	r0, r1, r4
   da9b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9b4:	fa21 f204 	lsr.w	r2, r1, r4
   da9b8:	ea20 0002 	bic.w	r0, r0, r2
   da9bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da9c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da9c4:	bf08      	it	eq
   da9c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da9ca:	bd70      	pop	{r4, r5, r6, pc}
   da9cc:	f094 0f00 	teq	r4, #0
   da9d0:	d10f      	bne.n	da9f2 <__aeabi_dmul+0x1c2>
   da9d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da9d6:	0040      	lsls	r0, r0, #1
   da9d8:	eb41 0101 	adc.w	r1, r1, r1
   da9dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da9e0:	bf08      	it	eq
   da9e2:	3c01      	subeq	r4, #1
   da9e4:	d0f7      	beq.n	da9d6 <__aeabi_dmul+0x1a6>
   da9e6:	ea41 0106 	orr.w	r1, r1, r6
   da9ea:	f095 0f00 	teq	r5, #0
   da9ee:	bf18      	it	ne
   da9f0:	4770      	bxne	lr
   da9f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da9f6:	0052      	lsls	r2, r2, #1
   da9f8:	eb43 0303 	adc.w	r3, r3, r3
   da9fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   daa00:	bf08      	it	eq
   daa02:	3d01      	subeq	r5, #1
   daa04:	d0f7      	beq.n	da9f6 <__aeabi_dmul+0x1c6>
   daa06:	ea43 0306 	orr.w	r3, r3, r6
   daa0a:	4770      	bx	lr
   daa0c:	ea94 0f0c 	teq	r4, ip
   daa10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daa14:	bf18      	it	ne
   daa16:	ea95 0f0c 	teqne	r5, ip
   daa1a:	d00c      	beq.n	daa36 <__aeabi_dmul+0x206>
   daa1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa20:	bf18      	it	ne
   daa22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa26:	d1d1      	bne.n	da9cc <__aeabi_dmul+0x19c>
   daa28:	ea81 0103 	eor.w	r1, r1, r3
   daa2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa30:	f04f 0000 	mov.w	r0, #0
   daa34:	bd70      	pop	{r4, r5, r6, pc}
   daa36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa3a:	bf06      	itte	eq
   daa3c:	4610      	moveq	r0, r2
   daa3e:	4619      	moveq	r1, r3
   daa40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa44:	d019      	beq.n	daa7a <__aeabi_dmul+0x24a>
   daa46:	ea94 0f0c 	teq	r4, ip
   daa4a:	d102      	bne.n	daa52 <__aeabi_dmul+0x222>
   daa4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa50:	d113      	bne.n	daa7a <__aeabi_dmul+0x24a>
   daa52:	ea95 0f0c 	teq	r5, ip
   daa56:	d105      	bne.n	daa64 <__aeabi_dmul+0x234>
   daa58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa5c:	bf1c      	itt	ne
   daa5e:	4610      	movne	r0, r2
   daa60:	4619      	movne	r1, r3
   daa62:	d10a      	bne.n	daa7a <__aeabi_dmul+0x24a>
   daa64:	ea81 0103 	eor.w	r1, r1, r3
   daa68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa74:	f04f 0000 	mov.w	r0, #0
   daa78:	bd70      	pop	{r4, r5, r6, pc}
   daa7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daa82:	bd70      	pop	{r4, r5, r6, pc}

000daa84 <__aeabi_ddiv>:
   daa84:	b570      	push	{r4, r5, r6, lr}
   daa86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa92:	bf1d      	ittte	ne
   daa94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa98:	ea94 0f0c 	teqne	r4, ip
   daa9c:	ea95 0f0c 	teqne	r5, ip
   daaa0:	f000 f8a7 	bleq	dabf2 <__aeabi_ddiv+0x16e>
   daaa4:	eba4 0405 	sub.w	r4, r4, r5
   daaa8:	ea81 0e03 	eor.w	lr, r1, r3
   daaac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daab4:	f000 8088 	beq.w	dabc8 <__aeabi_ddiv+0x144>
   daab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daabc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daac0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daac8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daacc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daad0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daad4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daad8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daadc:	429d      	cmp	r5, r3
   daade:	bf08      	it	eq
   daae0:	4296      	cmpeq	r6, r2
   daae2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daae6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daaea:	d202      	bcs.n	daaf2 <__aeabi_ddiv+0x6e>
   daaec:	085b      	lsrs	r3, r3, #1
   daaee:	ea4f 0232 	mov.w	r2, r2, rrx
   daaf2:	1ab6      	subs	r6, r6, r2
   daaf4:	eb65 0503 	sbc.w	r5, r5, r3
   daaf8:	085b      	lsrs	r3, r3, #1
   daafa:	ea4f 0232 	mov.w	r2, r2, rrx
   daafe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dab02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dab06:	ebb6 0e02 	subs.w	lr, r6, r2
   dab0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab0e:	bf22      	ittt	cs
   dab10:	1ab6      	subcs	r6, r6, r2
   dab12:	4675      	movcs	r5, lr
   dab14:	ea40 000c 	orrcs.w	r0, r0, ip
   dab18:	085b      	lsrs	r3, r3, #1
   dab1a:	ea4f 0232 	mov.w	r2, r2, rrx
   dab1e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab22:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab26:	bf22      	ittt	cs
   dab28:	1ab6      	subcs	r6, r6, r2
   dab2a:	4675      	movcs	r5, lr
   dab2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dab30:	085b      	lsrs	r3, r3, #1
   dab32:	ea4f 0232 	mov.w	r2, r2, rrx
   dab36:	ebb6 0e02 	subs.w	lr, r6, r2
   dab3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab3e:	bf22      	ittt	cs
   dab40:	1ab6      	subcs	r6, r6, r2
   dab42:	4675      	movcs	r5, lr
   dab44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab48:	085b      	lsrs	r3, r3, #1
   dab4a:	ea4f 0232 	mov.w	r2, r2, rrx
   dab4e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab52:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab56:	bf22      	ittt	cs
   dab58:	1ab6      	subcs	r6, r6, r2
   dab5a:	4675      	movcs	r5, lr
   dab5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab60:	ea55 0e06 	orrs.w	lr, r5, r6
   dab64:	d018      	beq.n	dab98 <__aeabi_ddiv+0x114>
   dab66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dab7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dab7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dab82:	d1c0      	bne.n	dab06 <__aeabi_ddiv+0x82>
   dab84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab88:	d10b      	bne.n	daba2 <__aeabi_ddiv+0x11e>
   dab8a:	ea41 0100 	orr.w	r1, r1, r0
   dab8e:	f04f 0000 	mov.w	r0, #0
   dab92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab96:	e7b6      	b.n	dab06 <__aeabi_ddiv+0x82>
   dab98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab9c:	bf04      	itt	eq
   dab9e:	4301      	orreq	r1, r0
   daba0:	2000      	moveq	r0, #0
   daba2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daba6:	bf88      	it	hi
   daba8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dabac:	f63f aeaf 	bhi.w	da90e <__aeabi_dmul+0xde>
   dabb0:	ebb5 0c03 	subs.w	ip, r5, r3
   dabb4:	bf04      	itt	eq
   dabb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   dabba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dabbe:	f150 0000 	adcs.w	r0, r0, #0
   dabc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dabc6:	bd70      	pop	{r4, r5, r6, pc}
   dabc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dabcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dabd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dabd4:	bfc2      	ittt	gt
   dabd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   dabda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dabde:	bd70      	popgt	{r4, r5, r6, pc}
   dabe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabe4:	f04f 0e00 	mov.w	lr, #0
   dabe8:	3c01      	subs	r4, #1
   dabea:	e690      	b.n	da90e <__aeabi_dmul+0xde>
   dabec:	ea45 0e06 	orr.w	lr, r5, r6
   dabf0:	e68d      	b.n	da90e <__aeabi_dmul+0xde>
   dabf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dabf6:	ea94 0f0c 	teq	r4, ip
   dabfa:	bf08      	it	eq
   dabfc:	ea95 0f0c 	teqeq	r5, ip
   dac00:	f43f af3b 	beq.w	daa7a <__aeabi_dmul+0x24a>
   dac04:	ea94 0f0c 	teq	r4, ip
   dac08:	d10a      	bne.n	dac20 <__aeabi_ddiv+0x19c>
   dac0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dac0e:	f47f af34 	bne.w	daa7a <__aeabi_dmul+0x24a>
   dac12:	ea95 0f0c 	teq	r5, ip
   dac16:	f47f af25 	bne.w	daa64 <__aeabi_dmul+0x234>
   dac1a:	4610      	mov	r0, r2
   dac1c:	4619      	mov	r1, r3
   dac1e:	e72c      	b.n	daa7a <__aeabi_dmul+0x24a>
   dac20:	ea95 0f0c 	teq	r5, ip
   dac24:	d106      	bne.n	dac34 <__aeabi_ddiv+0x1b0>
   dac26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dac2a:	f43f aefd 	beq.w	daa28 <__aeabi_dmul+0x1f8>
   dac2e:	4610      	mov	r0, r2
   dac30:	4619      	mov	r1, r3
   dac32:	e722      	b.n	daa7a <__aeabi_dmul+0x24a>
   dac34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac38:	bf18      	it	ne
   dac3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac3e:	f47f aec5 	bne.w	da9cc <__aeabi_dmul+0x19c>
   dac42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dac46:	f47f af0d 	bne.w	daa64 <__aeabi_dmul+0x234>
   dac4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac4e:	f47f aeeb 	bne.w	daa28 <__aeabi_dmul+0x1f8>
   dac52:	e712      	b.n	daa7a <__aeabi_dmul+0x24a>

000dac54 <__gedf2>:
   dac54:	f04f 3cff 	mov.w	ip, #4294967295
   dac58:	e006      	b.n	dac68 <__cmpdf2+0x4>
   dac5a:	bf00      	nop

000dac5c <__ledf2>:
   dac5c:	f04f 0c01 	mov.w	ip, #1
   dac60:	e002      	b.n	dac68 <__cmpdf2+0x4>
   dac62:	bf00      	nop

000dac64 <__cmpdf2>:
   dac64:	f04f 0c01 	mov.w	ip, #1
   dac68:	f84d cd04 	str.w	ip, [sp, #-4]!
   dac6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dac78:	bf18      	it	ne
   dac7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dac7e:	d01b      	beq.n	dacb8 <__cmpdf2+0x54>
   dac80:	b001      	add	sp, #4
   dac82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dac86:	bf0c      	ite	eq
   dac88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dac8c:	ea91 0f03 	teqne	r1, r3
   dac90:	bf02      	ittt	eq
   dac92:	ea90 0f02 	teqeq	r0, r2
   dac96:	2000      	moveq	r0, #0
   dac98:	4770      	bxeq	lr
   dac9a:	f110 0f00 	cmn.w	r0, #0
   dac9e:	ea91 0f03 	teq	r1, r3
   daca2:	bf58      	it	pl
   daca4:	4299      	cmppl	r1, r3
   daca6:	bf08      	it	eq
   daca8:	4290      	cmpeq	r0, r2
   dacaa:	bf2c      	ite	cs
   dacac:	17d8      	asrcs	r0, r3, #31
   dacae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dacb2:	f040 0001 	orr.w	r0, r0, #1
   dacb6:	4770      	bx	lr
   dacb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dacbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacc0:	d102      	bne.n	dacc8 <__cmpdf2+0x64>
   dacc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dacc6:	d107      	bne.n	dacd8 <__cmpdf2+0x74>
   dacc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacd0:	d1d6      	bne.n	dac80 <__cmpdf2+0x1c>
   dacd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dacd6:	d0d3      	beq.n	dac80 <__cmpdf2+0x1c>
   dacd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   dacdc:	4770      	bx	lr
   dacde:	bf00      	nop

000dace0 <__aeabi_cdrcmple>:
   dace0:	4684      	mov	ip, r0
   dace2:	4610      	mov	r0, r2
   dace4:	4662      	mov	r2, ip
   dace6:	468c      	mov	ip, r1
   dace8:	4619      	mov	r1, r3
   dacea:	4663      	mov	r3, ip
   dacec:	e000      	b.n	dacf0 <__aeabi_cdcmpeq>
   dacee:	bf00      	nop

000dacf0 <__aeabi_cdcmpeq>:
   dacf0:	b501      	push	{r0, lr}
   dacf2:	f7ff ffb7 	bl	dac64 <__cmpdf2>
   dacf6:	2800      	cmp	r0, #0
   dacf8:	bf48      	it	mi
   dacfa:	f110 0f00 	cmnmi.w	r0, #0
   dacfe:	bd01      	pop	{r0, pc}

000dad00 <__aeabi_dcmpeq>:
   dad00:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad04:	f7ff fff4 	bl	dacf0 <__aeabi_cdcmpeq>
   dad08:	bf0c      	ite	eq
   dad0a:	2001      	moveq	r0, #1
   dad0c:	2000      	movne	r0, #0
   dad0e:	f85d fb08 	ldr.w	pc, [sp], #8
   dad12:	bf00      	nop

000dad14 <__aeabi_dcmplt>:
   dad14:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad18:	f7ff ffea 	bl	dacf0 <__aeabi_cdcmpeq>
   dad1c:	bf34      	ite	cc
   dad1e:	2001      	movcc	r0, #1
   dad20:	2000      	movcs	r0, #0
   dad22:	f85d fb08 	ldr.w	pc, [sp], #8
   dad26:	bf00      	nop

000dad28 <__aeabi_dcmple>:
   dad28:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad2c:	f7ff ffe0 	bl	dacf0 <__aeabi_cdcmpeq>
   dad30:	bf94      	ite	ls
   dad32:	2001      	movls	r0, #1
   dad34:	2000      	movhi	r0, #0
   dad36:	f85d fb08 	ldr.w	pc, [sp], #8
   dad3a:	bf00      	nop

000dad3c <__aeabi_dcmpge>:
   dad3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad40:	f7ff ffce 	bl	dace0 <__aeabi_cdrcmple>
   dad44:	bf94      	ite	ls
   dad46:	2001      	movls	r0, #1
   dad48:	2000      	movhi	r0, #0
   dad4a:	f85d fb08 	ldr.w	pc, [sp], #8
   dad4e:	bf00      	nop

000dad50 <__aeabi_dcmpgt>:
   dad50:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad54:	f7ff ffc4 	bl	dace0 <__aeabi_cdrcmple>
   dad58:	bf34      	ite	cc
   dad5a:	2001      	movcc	r0, #1
   dad5c:	2000      	movcs	r0, #0
   dad5e:	f85d fb08 	ldr.w	pc, [sp], #8
   dad62:	bf00      	nop

000dad64 <__aeabi_dcmpun>:
   dad64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad6c:	d102      	bne.n	dad74 <__aeabi_dcmpun+0x10>
   dad6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dad72:	d10a      	bne.n	dad8a <__aeabi_dcmpun+0x26>
   dad74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dad78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad7c:	d102      	bne.n	dad84 <__aeabi_dcmpun+0x20>
   dad7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dad82:	d102      	bne.n	dad8a <__aeabi_dcmpun+0x26>
   dad84:	f04f 0000 	mov.w	r0, #0
   dad88:	4770      	bx	lr
   dad8a:	f04f 0001 	mov.w	r0, #1
   dad8e:	4770      	bx	lr

000dad90 <__aeabi_d2iz>:
   dad90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dad94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dad98:	d215      	bcs.n	dadc6 <__aeabi_d2iz+0x36>
   dad9a:	d511      	bpl.n	dadc0 <__aeabi_d2iz+0x30>
   dad9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dada0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dada4:	d912      	bls.n	dadcc <__aeabi_d2iz+0x3c>
   dada6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dadae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dadb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dadb6:	fa23 f002 	lsr.w	r0, r3, r2
   dadba:	bf18      	it	ne
   dadbc:	4240      	negne	r0, r0
   dadbe:	4770      	bx	lr
   dadc0:	f04f 0000 	mov.w	r0, #0
   dadc4:	4770      	bx	lr
   dadc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dadca:	d105      	bne.n	dadd8 <__aeabi_d2iz+0x48>
   dadcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dadd0:	bf08      	it	eq
   dadd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dadd6:	4770      	bx	lr
   dadd8:	f04f 0000 	mov.w	r0, #0
   daddc:	4770      	bx	lr
   dadde:	bf00      	nop

000dade0 <__aeabi_d2uiz>:
   dade0:	004a      	lsls	r2, r1, #1
   dade2:	d211      	bcs.n	dae08 <__aeabi_d2uiz+0x28>
   dade4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dade8:	d211      	bcs.n	dae0e <__aeabi_d2uiz+0x2e>
   dadea:	d50d      	bpl.n	dae08 <__aeabi_d2uiz+0x28>
   dadec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dadf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dadf4:	d40e      	bmi.n	dae14 <__aeabi_d2uiz+0x34>
   dadf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dadfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dae02:	fa23 f002 	lsr.w	r0, r3, r2
   dae06:	4770      	bx	lr
   dae08:	f04f 0000 	mov.w	r0, #0
   dae0c:	4770      	bx	lr
   dae0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dae12:	d102      	bne.n	dae1a <__aeabi_d2uiz+0x3a>
   dae14:	f04f 30ff 	mov.w	r0, #4294967295
   dae18:	4770      	bx	lr
   dae1a:	f04f 0000 	mov.w	r0, #0
   dae1e:	4770      	bx	lr

000dae20 <__aeabi_d2f>:
   dae20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dae24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dae28:	bf24      	itt	cs
   dae2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dae2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dae32:	d90d      	bls.n	dae50 <__aeabi_d2f+0x30>
   dae34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dae38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dae3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dae40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dae44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dae48:	bf08      	it	eq
   dae4a:	f020 0001 	biceq.w	r0, r0, #1
   dae4e:	4770      	bx	lr
   dae50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dae54:	d121      	bne.n	dae9a <__aeabi_d2f+0x7a>
   dae56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dae5a:	bfbc      	itt	lt
   dae5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dae60:	4770      	bxlt	lr
   dae62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae66:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dae6a:	f1c2 0218 	rsb	r2, r2, #24
   dae6e:	f1c2 0c20 	rsb	ip, r2, #32
   dae72:	fa10 f30c 	lsls.w	r3, r0, ip
   dae76:	fa20 f002 	lsr.w	r0, r0, r2
   dae7a:	bf18      	it	ne
   dae7c:	f040 0001 	orrne.w	r0, r0, #1
   dae80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dae88:	fa03 fc0c 	lsl.w	ip, r3, ip
   dae8c:	ea40 000c 	orr.w	r0, r0, ip
   dae90:	fa23 f302 	lsr.w	r3, r3, r2
   dae94:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dae98:	e7cc      	b.n	dae34 <__aeabi_d2f+0x14>
   dae9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dae9e:	d107      	bne.n	daeb0 <__aeabi_d2f+0x90>
   daea0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   daea4:	bf1e      	ittt	ne
   daea6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   daeaa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   daeae:	4770      	bxne	lr
   daeb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   daeb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   daeb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daebc:	4770      	bx	lr
   daebe:	bf00      	nop

000daec0 <__aeabi_frsub>:
   daec0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   daec4:	e002      	b.n	daecc <__addsf3>
   daec6:	bf00      	nop

000daec8 <__aeabi_fsub>:
   daec8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000daecc <__addsf3>:
   daecc:	0042      	lsls	r2, r0, #1
   daece:	bf1f      	itttt	ne
   daed0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   daed4:	ea92 0f03 	teqne	r2, r3
   daed8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   daedc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   daee0:	d06a      	beq.n	dafb8 <__addsf3+0xec>
   daee2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   daee6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   daeea:	bfc1      	itttt	gt
   daeec:	18d2      	addgt	r2, r2, r3
   daeee:	4041      	eorgt	r1, r0
   daef0:	4048      	eorgt	r0, r1
   daef2:	4041      	eorgt	r1, r0
   daef4:	bfb8      	it	lt
   daef6:	425b      	neglt	r3, r3
   daef8:	2b19      	cmp	r3, #25
   daefa:	bf88      	it	hi
   daefc:	4770      	bxhi	lr
   daefe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   daf02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daf06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   daf0a:	bf18      	it	ne
   daf0c:	4240      	negne	r0, r0
   daf0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daf12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   daf16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   daf1a:	bf18      	it	ne
   daf1c:	4249      	negne	r1, r1
   daf1e:	ea92 0f03 	teq	r2, r3
   daf22:	d03f      	beq.n	dafa4 <__addsf3+0xd8>
   daf24:	f1a2 0201 	sub.w	r2, r2, #1
   daf28:	fa41 fc03 	asr.w	ip, r1, r3
   daf2c:	eb10 000c 	adds.w	r0, r0, ip
   daf30:	f1c3 0320 	rsb	r3, r3, #32
   daf34:	fa01 f103 	lsl.w	r1, r1, r3
   daf38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   daf3c:	d502      	bpl.n	daf44 <__addsf3+0x78>
   daf3e:	4249      	negs	r1, r1
   daf40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   daf44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   daf48:	d313      	bcc.n	daf72 <__addsf3+0xa6>
   daf4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   daf4e:	d306      	bcc.n	daf5e <__addsf3+0x92>
   daf50:	0840      	lsrs	r0, r0, #1
   daf52:	ea4f 0131 	mov.w	r1, r1, rrx
   daf56:	f102 0201 	add.w	r2, r2, #1
   daf5a:	2afe      	cmp	r2, #254	; 0xfe
   daf5c:	d251      	bcs.n	db002 <__addsf3+0x136>
   daf5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   daf62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   daf66:	bf08      	it	eq
   daf68:	f020 0001 	biceq.w	r0, r0, #1
   daf6c:	ea40 0003 	orr.w	r0, r0, r3
   daf70:	4770      	bx	lr
   daf72:	0049      	lsls	r1, r1, #1
   daf74:	eb40 0000 	adc.w	r0, r0, r0
   daf78:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   daf7c:	f1a2 0201 	sub.w	r2, r2, #1
   daf80:	d1ed      	bne.n	daf5e <__addsf3+0x92>
   daf82:	fab0 fc80 	clz	ip, r0
   daf86:	f1ac 0c08 	sub.w	ip, ip, #8
   daf8a:	ebb2 020c 	subs.w	r2, r2, ip
   daf8e:	fa00 f00c 	lsl.w	r0, r0, ip
   daf92:	bfaa      	itet	ge
   daf94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   daf98:	4252      	neglt	r2, r2
   daf9a:	4318      	orrge	r0, r3
   daf9c:	bfbc      	itt	lt
   daf9e:	40d0      	lsrlt	r0, r2
   dafa0:	4318      	orrlt	r0, r3
   dafa2:	4770      	bx	lr
   dafa4:	f092 0f00 	teq	r2, #0
   dafa8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   dafac:	bf06      	itte	eq
   dafae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   dafb2:	3201      	addeq	r2, #1
   dafb4:	3b01      	subne	r3, #1
   dafb6:	e7b5      	b.n	daf24 <__addsf3+0x58>
   dafb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   dafbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   dafc0:	bf18      	it	ne
   dafc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   dafc6:	d021      	beq.n	db00c <__addsf3+0x140>
   dafc8:	ea92 0f03 	teq	r2, r3
   dafcc:	d004      	beq.n	dafd8 <__addsf3+0x10c>
   dafce:	f092 0f00 	teq	r2, #0
   dafd2:	bf08      	it	eq
   dafd4:	4608      	moveq	r0, r1
   dafd6:	4770      	bx	lr
   dafd8:	ea90 0f01 	teq	r0, r1
   dafdc:	bf1c      	itt	ne
   dafde:	2000      	movne	r0, #0
   dafe0:	4770      	bxne	lr
   dafe2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   dafe6:	d104      	bne.n	daff2 <__addsf3+0x126>
   dafe8:	0040      	lsls	r0, r0, #1
   dafea:	bf28      	it	cs
   dafec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   daff0:	4770      	bx	lr
   daff2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   daff6:	bf3c      	itt	cc
   daff8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   daffc:	4770      	bxcc	lr
   daffe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   db002:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   db006:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db00a:	4770      	bx	lr
   db00c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   db010:	bf16      	itet	ne
   db012:	4608      	movne	r0, r1
   db014:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   db018:	4601      	movne	r1, r0
   db01a:	0242      	lsls	r2, r0, #9
   db01c:	bf06      	itte	eq
   db01e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   db022:	ea90 0f01 	teqeq	r0, r1
   db026:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   db02a:	4770      	bx	lr

000db02c <__aeabi_ui2f>:
   db02c:	f04f 0300 	mov.w	r3, #0
   db030:	e004      	b.n	db03c <__aeabi_i2f+0x8>
   db032:	bf00      	nop

000db034 <__aeabi_i2f>:
   db034:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   db038:	bf48      	it	mi
   db03a:	4240      	negmi	r0, r0
   db03c:	ea5f 0c00 	movs.w	ip, r0
   db040:	bf08      	it	eq
   db042:	4770      	bxeq	lr
   db044:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   db048:	4601      	mov	r1, r0
   db04a:	f04f 0000 	mov.w	r0, #0
   db04e:	e01c      	b.n	db08a <__aeabi_l2f+0x2a>

000db050 <__aeabi_ul2f>:
   db050:	ea50 0201 	orrs.w	r2, r0, r1
   db054:	bf08      	it	eq
   db056:	4770      	bxeq	lr
   db058:	f04f 0300 	mov.w	r3, #0
   db05c:	e00a      	b.n	db074 <__aeabi_l2f+0x14>
   db05e:	bf00      	nop

000db060 <__aeabi_l2f>:
   db060:	ea50 0201 	orrs.w	r2, r0, r1
   db064:	bf08      	it	eq
   db066:	4770      	bxeq	lr
   db068:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   db06c:	d502      	bpl.n	db074 <__aeabi_l2f+0x14>
   db06e:	4240      	negs	r0, r0
   db070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db074:	ea5f 0c01 	movs.w	ip, r1
   db078:	bf02      	ittt	eq
   db07a:	4684      	moveq	ip, r0
   db07c:	4601      	moveq	r1, r0
   db07e:	2000      	moveq	r0, #0
   db080:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   db084:	bf08      	it	eq
   db086:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   db08a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   db08e:	fabc f28c 	clz	r2, ip
   db092:	3a08      	subs	r2, #8
   db094:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   db098:	db10      	blt.n	db0bc <__aeabi_l2f+0x5c>
   db09a:	fa01 fc02 	lsl.w	ip, r1, r2
   db09e:	4463      	add	r3, ip
   db0a0:	fa00 fc02 	lsl.w	ip, r0, r2
   db0a4:	f1c2 0220 	rsb	r2, r2, #32
   db0a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db0ac:	fa20 f202 	lsr.w	r2, r0, r2
   db0b0:	eb43 0002 	adc.w	r0, r3, r2
   db0b4:	bf08      	it	eq
   db0b6:	f020 0001 	biceq.w	r0, r0, #1
   db0ba:	4770      	bx	lr
   db0bc:	f102 0220 	add.w	r2, r2, #32
   db0c0:	fa01 fc02 	lsl.w	ip, r1, r2
   db0c4:	f1c2 0220 	rsb	r2, r2, #32
   db0c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   db0cc:	fa21 f202 	lsr.w	r2, r1, r2
   db0d0:	eb43 0002 	adc.w	r0, r3, r2
   db0d4:	bf08      	it	eq
   db0d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   db0da:	4770      	bx	lr

000db0dc <__aeabi_ldivmod>:
   db0dc:	b97b      	cbnz	r3, db0fe <__aeabi_ldivmod+0x22>
   db0de:	b972      	cbnz	r2, db0fe <__aeabi_ldivmod+0x22>
   db0e0:	2900      	cmp	r1, #0
   db0e2:	bfbe      	ittt	lt
   db0e4:	2000      	movlt	r0, #0
   db0e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   db0ea:	e006      	blt.n	db0fa <__aeabi_ldivmod+0x1e>
   db0ec:	bf08      	it	eq
   db0ee:	2800      	cmpeq	r0, #0
   db0f0:	bf1c      	itt	ne
   db0f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   db0f6:	f04f 30ff 	movne.w	r0, #4294967295
   db0fa:	f000 b9b1 	b.w	db460 <__aeabi_idiv0>
   db0fe:	f1ad 0c08 	sub.w	ip, sp, #8
   db102:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   db106:	2900      	cmp	r1, #0
   db108:	db09      	blt.n	db11e <__aeabi_ldivmod+0x42>
   db10a:	2b00      	cmp	r3, #0
   db10c:	db1a      	blt.n	db144 <__aeabi_ldivmod+0x68>
   db10e:	f000 f835 	bl	db17c <__udivmoddi4>
   db112:	f8dd e004 	ldr.w	lr, [sp, #4]
   db116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db11a:	b004      	add	sp, #16
   db11c:	4770      	bx	lr
   db11e:	4240      	negs	r0, r0
   db120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db124:	2b00      	cmp	r3, #0
   db126:	db1b      	blt.n	db160 <__aeabi_ldivmod+0x84>
   db128:	f000 f828 	bl	db17c <__udivmoddi4>
   db12c:	f8dd e004 	ldr.w	lr, [sp, #4]
   db130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db134:	b004      	add	sp, #16
   db136:	4240      	negs	r0, r0
   db138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db13c:	4252      	negs	r2, r2
   db13e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db142:	4770      	bx	lr
   db144:	4252      	negs	r2, r2
   db146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db14a:	f000 f817 	bl	db17c <__udivmoddi4>
   db14e:	f8dd e004 	ldr.w	lr, [sp, #4]
   db152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db156:	b004      	add	sp, #16
   db158:	4240      	negs	r0, r0
   db15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db15e:	4770      	bx	lr
   db160:	4252      	negs	r2, r2
   db162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db166:	f000 f809 	bl	db17c <__udivmoddi4>
   db16a:	f8dd e004 	ldr.w	lr, [sp, #4]
   db16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   db172:	b004      	add	sp, #16
   db174:	4252      	negs	r2, r2
   db176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db17a:	4770      	bx	lr

000db17c <__udivmoddi4>:
   db17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db180:	468c      	mov	ip, r1
   db182:	460e      	mov	r6, r1
   db184:	4604      	mov	r4, r0
   db186:	9d08      	ldr	r5, [sp, #32]
   db188:	2b00      	cmp	r3, #0
   db18a:	d150      	bne.n	db22e <__udivmoddi4+0xb2>
   db18c:	428a      	cmp	r2, r1
   db18e:	4617      	mov	r7, r2
   db190:	d96c      	bls.n	db26c <__udivmoddi4+0xf0>
   db192:	fab2 fe82 	clz	lr, r2
   db196:	f1be 0f00 	cmp.w	lr, #0
   db19a:	d00b      	beq.n	db1b4 <__udivmoddi4+0x38>
   db19c:	f1ce 0420 	rsb	r4, lr, #32
   db1a0:	fa20 f404 	lsr.w	r4, r0, r4
   db1a4:	fa01 f60e 	lsl.w	r6, r1, lr
   db1a8:	ea44 0c06 	orr.w	ip, r4, r6
   db1ac:	fa02 f70e 	lsl.w	r7, r2, lr
   db1b0:	fa00 f40e 	lsl.w	r4, r0, lr
   db1b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
   db1b8:	0c22      	lsrs	r2, r4, #16
   db1ba:	fbbc f0f9 	udiv	r0, ip, r9
   db1be:	fa1f f887 	uxth.w	r8, r7
   db1c2:	fb09 c610 	mls	r6, r9, r0, ip
   db1c6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db1ca:	fb00 f308 	mul.w	r3, r0, r8
   db1ce:	42b3      	cmp	r3, r6
   db1d0:	d909      	bls.n	db1e6 <__udivmoddi4+0x6a>
   db1d2:	19f6      	adds	r6, r6, r7
   db1d4:	f100 32ff 	add.w	r2, r0, #4294967295
   db1d8:	f080 8122 	bcs.w	db420 <__udivmoddi4+0x2a4>
   db1dc:	42b3      	cmp	r3, r6
   db1de:	f240 811f 	bls.w	db420 <__udivmoddi4+0x2a4>
   db1e2:	3802      	subs	r0, #2
   db1e4:	443e      	add	r6, r7
   db1e6:	1af6      	subs	r6, r6, r3
   db1e8:	b2a2      	uxth	r2, r4
   db1ea:	fbb6 f3f9 	udiv	r3, r6, r9
   db1ee:	fb09 6613 	mls	r6, r9, r3, r6
   db1f2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db1f6:	fb03 f808 	mul.w	r8, r3, r8
   db1fa:	45a0      	cmp	r8, r4
   db1fc:	d909      	bls.n	db212 <__udivmoddi4+0x96>
   db1fe:	19e4      	adds	r4, r4, r7
   db200:	f103 32ff 	add.w	r2, r3, #4294967295
   db204:	f080 810a 	bcs.w	db41c <__udivmoddi4+0x2a0>
   db208:	45a0      	cmp	r8, r4
   db20a:	f240 8107 	bls.w	db41c <__udivmoddi4+0x2a0>
   db20e:	3b02      	subs	r3, #2
   db210:	443c      	add	r4, r7
   db212:	ebc8 0404 	rsb	r4, r8, r4
   db216:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db21a:	2100      	movs	r1, #0
   db21c:	2d00      	cmp	r5, #0
   db21e:	d062      	beq.n	db2e6 <__udivmoddi4+0x16a>
   db220:	fa24 f40e 	lsr.w	r4, r4, lr
   db224:	2300      	movs	r3, #0
   db226:	602c      	str	r4, [r5, #0]
   db228:	606b      	str	r3, [r5, #4]
   db22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db22e:	428b      	cmp	r3, r1
   db230:	d907      	bls.n	db242 <__udivmoddi4+0xc6>
   db232:	2d00      	cmp	r5, #0
   db234:	d055      	beq.n	db2e2 <__udivmoddi4+0x166>
   db236:	2100      	movs	r1, #0
   db238:	e885 0041 	stmia.w	r5, {r0, r6}
   db23c:	4608      	mov	r0, r1
   db23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db242:	fab3 f183 	clz	r1, r3
   db246:	2900      	cmp	r1, #0
   db248:	f040 8090 	bne.w	db36c <__udivmoddi4+0x1f0>
   db24c:	42b3      	cmp	r3, r6
   db24e:	d302      	bcc.n	db256 <__udivmoddi4+0xda>
   db250:	4282      	cmp	r2, r0
   db252:	f200 80f8 	bhi.w	db446 <__udivmoddi4+0x2ca>
   db256:	1a84      	subs	r4, r0, r2
   db258:	eb66 0603 	sbc.w	r6, r6, r3
   db25c:	2001      	movs	r0, #1
   db25e:	46b4      	mov	ip, r6
   db260:	2d00      	cmp	r5, #0
   db262:	d040      	beq.n	db2e6 <__udivmoddi4+0x16a>
   db264:	e885 1010 	stmia.w	r5, {r4, ip}
   db268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db26c:	b912      	cbnz	r2, db274 <__udivmoddi4+0xf8>
   db26e:	2701      	movs	r7, #1
   db270:	fbb7 f7f2 	udiv	r7, r7, r2
   db274:	fab7 fe87 	clz	lr, r7
   db278:	f1be 0f00 	cmp.w	lr, #0
   db27c:	d135      	bne.n	db2ea <__udivmoddi4+0x16e>
   db27e:	1bf3      	subs	r3, r6, r7
   db280:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db284:	fa1f fc87 	uxth.w	ip, r7
   db288:	2101      	movs	r1, #1
   db28a:	fbb3 f0f8 	udiv	r0, r3, r8
   db28e:	0c22      	lsrs	r2, r4, #16
   db290:	fb08 3610 	mls	r6, r8, r0, r3
   db294:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   db298:	fb0c f300 	mul.w	r3, ip, r0
   db29c:	42b3      	cmp	r3, r6
   db29e:	d907      	bls.n	db2b0 <__udivmoddi4+0x134>
   db2a0:	19f6      	adds	r6, r6, r7
   db2a2:	f100 32ff 	add.w	r2, r0, #4294967295
   db2a6:	d202      	bcs.n	db2ae <__udivmoddi4+0x132>
   db2a8:	42b3      	cmp	r3, r6
   db2aa:	f200 80ce 	bhi.w	db44a <__udivmoddi4+0x2ce>
   db2ae:	4610      	mov	r0, r2
   db2b0:	1af6      	subs	r6, r6, r3
   db2b2:	b2a2      	uxth	r2, r4
   db2b4:	fbb6 f3f8 	udiv	r3, r6, r8
   db2b8:	fb08 6613 	mls	r6, r8, r3, r6
   db2bc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   db2c0:	fb0c fc03 	mul.w	ip, ip, r3
   db2c4:	45a4      	cmp	ip, r4
   db2c6:	d907      	bls.n	db2d8 <__udivmoddi4+0x15c>
   db2c8:	19e4      	adds	r4, r4, r7
   db2ca:	f103 32ff 	add.w	r2, r3, #4294967295
   db2ce:	d202      	bcs.n	db2d6 <__udivmoddi4+0x15a>
   db2d0:	45a4      	cmp	ip, r4
   db2d2:	f200 80b5 	bhi.w	db440 <__udivmoddi4+0x2c4>
   db2d6:	4613      	mov	r3, r2
   db2d8:	ebcc 0404 	rsb	r4, ip, r4
   db2dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   db2e0:	e79c      	b.n	db21c <__udivmoddi4+0xa0>
   db2e2:	4629      	mov	r1, r5
   db2e4:	4628      	mov	r0, r5
   db2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db2ea:	f1ce 0120 	rsb	r1, lr, #32
   db2ee:	fa06 f30e 	lsl.w	r3, r6, lr
   db2f2:	fa07 f70e 	lsl.w	r7, r7, lr
   db2f6:	fa20 f901 	lsr.w	r9, r0, r1
   db2fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
   db2fe:	40ce      	lsrs	r6, r1
   db300:	ea49 0903 	orr.w	r9, r9, r3
   db304:	fbb6 faf8 	udiv	sl, r6, r8
   db308:	ea4f 4419 	mov.w	r4, r9, lsr #16
   db30c:	fb08 661a 	mls	r6, r8, sl, r6
   db310:	fa1f fc87 	uxth.w	ip, r7
   db314:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   db318:	fb0a f20c 	mul.w	r2, sl, ip
   db31c:	429a      	cmp	r2, r3
   db31e:	fa00 f40e 	lsl.w	r4, r0, lr
   db322:	d90a      	bls.n	db33a <__udivmoddi4+0x1be>
   db324:	19db      	adds	r3, r3, r7
   db326:	f10a 31ff 	add.w	r1, sl, #4294967295
   db32a:	f080 8087 	bcs.w	db43c <__udivmoddi4+0x2c0>
   db32e:	429a      	cmp	r2, r3
   db330:	f240 8084 	bls.w	db43c <__udivmoddi4+0x2c0>
   db334:	f1aa 0a02 	sub.w	sl, sl, #2
   db338:	443b      	add	r3, r7
   db33a:	1a9b      	subs	r3, r3, r2
   db33c:	fa1f f989 	uxth.w	r9, r9
   db340:	fbb3 f1f8 	udiv	r1, r3, r8
   db344:	fb08 3311 	mls	r3, r8, r1, r3
   db348:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   db34c:	fb01 f60c 	mul.w	r6, r1, ip
   db350:	429e      	cmp	r6, r3
   db352:	d907      	bls.n	db364 <__udivmoddi4+0x1e8>
   db354:	19db      	adds	r3, r3, r7
   db356:	f101 32ff 	add.w	r2, r1, #4294967295
   db35a:	d26b      	bcs.n	db434 <__udivmoddi4+0x2b8>
   db35c:	429e      	cmp	r6, r3
   db35e:	d969      	bls.n	db434 <__udivmoddi4+0x2b8>
   db360:	3902      	subs	r1, #2
   db362:	443b      	add	r3, r7
   db364:	1b9b      	subs	r3, r3, r6
   db366:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   db36a:	e78e      	b.n	db28a <__udivmoddi4+0x10e>
   db36c:	f1c1 0e20 	rsb	lr, r1, #32
   db370:	fa22 f40e 	lsr.w	r4, r2, lr
   db374:	408b      	lsls	r3, r1
   db376:	4323      	orrs	r3, r4
   db378:	fa20 f70e 	lsr.w	r7, r0, lr
   db37c:	fa06 f401 	lsl.w	r4, r6, r1
   db380:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   db384:	fa26 f60e 	lsr.w	r6, r6, lr
   db388:	433c      	orrs	r4, r7
   db38a:	fbb6 f9fc 	udiv	r9, r6, ip
   db38e:	0c27      	lsrs	r7, r4, #16
   db390:	fb0c 6619 	mls	r6, ip, r9, r6
   db394:	fa1f f883 	uxth.w	r8, r3
   db398:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   db39c:	fb09 f708 	mul.w	r7, r9, r8
   db3a0:	42b7      	cmp	r7, r6
   db3a2:	fa02 f201 	lsl.w	r2, r2, r1
   db3a6:	fa00 fa01 	lsl.w	sl, r0, r1
   db3aa:	d908      	bls.n	db3be <__udivmoddi4+0x242>
   db3ac:	18f6      	adds	r6, r6, r3
   db3ae:	f109 30ff 	add.w	r0, r9, #4294967295
   db3b2:	d241      	bcs.n	db438 <__udivmoddi4+0x2bc>
   db3b4:	42b7      	cmp	r7, r6
   db3b6:	d93f      	bls.n	db438 <__udivmoddi4+0x2bc>
   db3b8:	f1a9 0902 	sub.w	r9, r9, #2
   db3bc:	441e      	add	r6, r3
   db3be:	1bf6      	subs	r6, r6, r7
   db3c0:	b2a0      	uxth	r0, r4
   db3c2:	fbb6 f4fc 	udiv	r4, r6, ip
   db3c6:	fb0c 6614 	mls	r6, ip, r4, r6
   db3ca:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   db3ce:	fb04 f808 	mul.w	r8, r4, r8
   db3d2:	45b8      	cmp	r8, r7
   db3d4:	d907      	bls.n	db3e6 <__udivmoddi4+0x26a>
   db3d6:	18ff      	adds	r7, r7, r3
   db3d8:	f104 30ff 	add.w	r0, r4, #4294967295
   db3dc:	d228      	bcs.n	db430 <__udivmoddi4+0x2b4>
   db3de:	45b8      	cmp	r8, r7
   db3e0:	d926      	bls.n	db430 <__udivmoddi4+0x2b4>
   db3e2:	3c02      	subs	r4, #2
   db3e4:	441f      	add	r7, r3
   db3e6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   db3ea:	ebc8 0707 	rsb	r7, r8, r7
   db3ee:	fba0 8902 	umull	r8, r9, r0, r2
   db3f2:	454f      	cmp	r7, r9
   db3f4:	4644      	mov	r4, r8
   db3f6:	464e      	mov	r6, r9
   db3f8:	d314      	bcc.n	db424 <__udivmoddi4+0x2a8>
   db3fa:	d029      	beq.n	db450 <__udivmoddi4+0x2d4>
   db3fc:	b365      	cbz	r5, db458 <__udivmoddi4+0x2dc>
   db3fe:	ebba 0304 	subs.w	r3, sl, r4
   db402:	eb67 0706 	sbc.w	r7, r7, r6
   db406:	fa07 fe0e 	lsl.w	lr, r7, lr
   db40a:	40cb      	lsrs	r3, r1
   db40c:	40cf      	lsrs	r7, r1
   db40e:	ea4e 0303 	orr.w	r3, lr, r3
   db412:	e885 0088 	stmia.w	r5, {r3, r7}
   db416:	2100      	movs	r1, #0
   db418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db41c:	4613      	mov	r3, r2
   db41e:	e6f8      	b.n	db212 <__udivmoddi4+0x96>
   db420:	4610      	mov	r0, r2
   db422:	e6e0      	b.n	db1e6 <__udivmoddi4+0x6a>
   db424:	ebb8 0402 	subs.w	r4, r8, r2
   db428:	eb69 0603 	sbc.w	r6, r9, r3
   db42c:	3801      	subs	r0, #1
   db42e:	e7e5      	b.n	db3fc <__udivmoddi4+0x280>
   db430:	4604      	mov	r4, r0
   db432:	e7d8      	b.n	db3e6 <__udivmoddi4+0x26a>
   db434:	4611      	mov	r1, r2
   db436:	e795      	b.n	db364 <__udivmoddi4+0x1e8>
   db438:	4681      	mov	r9, r0
   db43a:	e7c0      	b.n	db3be <__udivmoddi4+0x242>
   db43c:	468a      	mov	sl, r1
   db43e:	e77c      	b.n	db33a <__udivmoddi4+0x1be>
   db440:	3b02      	subs	r3, #2
   db442:	443c      	add	r4, r7
   db444:	e748      	b.n	db2d8 <__udivmoddi4+0x15c>
   db446:	4608      	mov	r0, r1
   db448:	e70a      	b.n	db260 <__udivmoddi4+0xe4>
   db44a:	3802      	subs	r0, #2
   db44c:	443e      	add	r6, r7
   db44e:	e72f      	b.n	db2b0 <__udivmoddi4+0x134>
   db450:	45c2      	cmp	sl, r8
   db452:	d3e7      	bcc.n	db424 <__udivmoddi4+0x2a8>
   db454:	463e      	mov	r6, r7
   db456:	e7d1      	b.n	db3fc <__udivmoddi4+0x280>
   db458:	4629      	mov	r1, r5
   db45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db45e:	bf00      	nop

000db460 <__aeabi_idiv0>:
   db460:	4770      	bx	lr
   db462:	bf00      	nop

000db464 <asctime>:
   db464:	4b09      	ldr	r3, [pc, #36]	; (db48c <asctime+0x28>)
   db466:	b570      	push	{r4, r5, r6, lr}
   db468:	681c      	ldr	r4, [r3, #0]
   db46a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db46c:	4606      	mov	r6, r0
   db46e:	b93d      	cbnz	r5, db480 <asctime+0x1c>
   db470:	201a      	movs	r0, #26
   db472:	f7fb fd59 	bl	d6f28 <malloc>
   db476:	221a      	movs	r2, #26
   db478:	6420      	str	r0, [r4, #64]	; 0x40
   db47a:	4629      	mov	r1, r5
   db47c:	f000 f972 	bl	db764 <memset>
   db480:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db482:	4630      	mov	r0, r6
   db484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db488:	f000 b802 	b.w	db490 <asctime_r>
   db48c:	2003e0f4 	.word	0x2003e0f4

000db490 <asctime_r>:
   db490:	b510      	push	{r4, lr}
   db492:	460c      	mov	r4, r1
   db494:	6941      	ldr	r1, [r0, #20]
   db496:	6903      	ldr	r3, [r0, #16]
   db498:	6982      	ldr	r2, [r0, #24]
   db49a:	b086      	sub	sp, #24
   db49c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db4a0:	9104      	str	r1, [sp, #16]
   db4a2:	6801      	ldr	r1, [r0, #0]
   db4a4:	9103      	str	r1, [sp, #12]
   db4a6:	6841      	ldr	r1, [r0, #4]
   db4a8:	9102      	str	r1, [sp, #8]
   db4aa:	6881      	ldr	r1, [r0, #8]
   db4ac:	9101      	str	r1, [sp, #4]
   db4ae:	68c1      	ldr	r1, [r0, #12]
   db4b0:	9100      	str	r1, [sp, #0]
   db4b2:	4907      	ldr	r1, [pc, #28]	; (db4d0 <asctime_r+0x40>)
   db4b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db4b8:	440b      	add	r3, r1
   db4ba:	4906      	ldr	r1, [pc, #24]	; (db4d4 <asctime_r+0x44>)
   db4bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db4c0:	440a      	add	r2, r1
   db4c2:	4620      	mov	r0, r4
   db4c4:	4904      	ldr	r1, [pc, #16]	; (db4d8 <asctime_r+0x48>)
   db4c6:	f7fb fd4f 	bl	d6f68 <siprintf>
   db4ca:	4620      	mov	r0, r4
   db4cc:	b006      	add	sp, #24
   db4ce:	bd10      	pop	{r4, pc}
   db4d0:	000dd095 	.word	0x000dd095
   db4d4:	000dd080 	.word	0x000dd080
   db4d8:	000dd0b9 	.word	0x000dd0b9

000db4dc <atoi>:
   db4dc:	220a      	movs	r2, #10
   db4de:	2100      	movs	r1, #0
   db4e0:	f000 ba78 	b.w	db9d4 <strtol>

000db4e4 <__cxa_atexit>:
   db4e4:	b510      	push	{r4, lr}
   db4e6:	4c05      	ldr	r4, [pc, #20]	; (db4fc <__cxa_atexit+0x18>)
   db4e8:	4613      	mov	r3, r2
   db4ea:	b12c      	cbz	r4, db4f8 <__cxa_atexit+0x14>
   db4ec:	460a      	mov	r2, r1
   db4ee:	4601      	mov	r1, r0
   db4f0:	2002      	movs	r0, #2
   db4f2:	f3af 8000 	nop.w
   db4f6:	bd10      	pop	{r4, pc}
   db4f8:	4620      	mov	r0, r4
   db4fa:	bd10      	pop	{r4, pc}
   db4fc:	00000000 	.word	0x00000000

000db500 <localtime>:
   db500:	b538      	push	{r3, r4, r5, lr}
   db502:	4b07      	ldr	r3, [pc, #28]	; (db520 <localtime+0x20>)
   db504:	681c      	ldr	r4, [r3, #0]
   db506:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db508:	4605      	mov	r5, r0
   db50a:	b91b      	cbnz	r3, db514 <localtime+0x14>
   db50c:	2024      	movs	r0, #36	; 0x24
   db50e:	f7fb fd0b 	bl	d6f28 <malloc>
   db512:	63e0      	str	r0, [r4, #60]	; 0x3c
   db514:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db516:	4628      	mov	r0, r5
   db518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db51c:	f000 b802 	b.w	db524 <localtime_r>
   db520:	2003e0f4 	.word	0x2003e0f4

000db524 <localtime_r>:
   db524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db528:	460c      	mov	r4, r1
   db52a:	4680      	mov	r8, r0
   db52c:	f000 fd58 	bl	dbfe0 <__gettzinfo>
   db530:	4621      	mov	r1, r4
   db532:	4607      	mov	r7, r0
   db534:	4640      	mov	r0, r8
   db536:	f000 fd57 	bl	dbfe8 <gmtime_r>
   db53a:	6946      	ldr	r6, [r0, #20]
   db53c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db540:	07b3      	lsls	r3, r6, #30
   db542:	4604      	mov	r4, r0
   db544:	d105      	bne.n	db552 <localtime_r+0x2e>
   db546:	2264      	movs	r2, #100	; 0x64
   db548:	fb96 f3f2 	sdiv	r3, r6, r2
   db54c:	fb02 6313 	mls	r3, r2, r3, r6
   db550:	b94b      	cbnz	r3, db566 <localtime_r+0x42>
   db552:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db556:	fb96 f3f5 	sdiv	r3, r6, r5
   db55a:	fb05 6513 	mls	r5, r5, r3, r6
   db55e:	fab5 f385 	clz	r3, r5
   db562:	095b      	lsrs	r3, r3, #5
   db564:	e000      	b.n	db568 <localtime_r+0x44>
   db566:	2301      	movs	r3, #1
   db568:	4a5f      	ldr	r2, [pc, #380]	; (db6e8 <localtime_r+0x1c4>)
   db56a:	2530      	movs	r5, #48	; 0x30
   db56c:	fb05 2503 	mla	r5, r5, r3, r2
   db570:	f000 fb6a 	bl	dbc48 <__tz_lock>
   db574:	f000 fb6a 	bl	dbc4c <_tzset_unlocked>
   db578:	4b5c      	ldr	r3, [pc, #368]	; (db6ec <localtime_r+0x1c8>)
   db57a:	681b      	ldr	r3, [r3, #0]
   db57c:	b1f3      	cbz	r3, db5bc <localtime_r+0x98>
   db57e:	687b      	ldr	r3, [r7, #4]
   db580:	429e      	cmp	r6, r3
   db582:	d105      	bne.n	db590 <localtime_r+0x6c>
   db584:	6839      	ldr	r1, [r7, #0]
   db586:	f8d8 3000 	ldr.w	r3, [r8]
   db58a:	69fa      	ldr	r2, [r7, #28]
   db58c:	b941      	cbnz	r1, db5a0 <localtime_r+0x7c>
   db58e:	e00a      	b.n	db5a6 <localtime_r+0x82>
   db590:	4630      	mov	r0, r6
   db592:	f000 fab1 	bl	dbaf8 <__tzcalc_limits>
   db596:	2800      	cmp	r0, #0
   db598:	d1f4      	bne.n	db584 <localtime_r+0x60>
   db59a:	f04f 33ff 	mov.w	r3, #4294967295
   db59e:	e00d      	b.n	db5bc <localtime_r+0x98>
   db5a0:	4293      	cmp	r3, r2
   db5a2:	db08      	blt.n	db5b6 <localtime_r+0x92>
   db5a4:	e001      	b.n	db5aa <localtime_r+0x86>
   db5a6:	4293      	cmp	r3, r2
   db5a8:	da07      	bge.n	db5ba <localtime_r+0x96>
   db5aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db5ac:	4293      	cmp	r3, r2
   db5ae:	bfac      	ite	ge
   db5b0:	2300      	movge	r3, #0
   db5b2:	2301      	movlt	r3, #1
   db5b4:	e002      	b.n	db5bc <localtime_r+0x98>
   db5b6:	2300      	movs	r3, #0
   db5b8:	e000      	b.n	db5bc <localtime_r+0x98>
   db5ba:	2301      	movs	r3, #1
   db5bc:	6223      	str	r3, [r4, #32]
   db5be:	6a23      	ldr	r3, [r4, #32]
   db5c0:	2b01      	cmp	r3, #1
   db5c2:	bf0c      	ite	eq
   db5c4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db5c6:	6a39      	ldrne	r1, [r7, #32]
   db5c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db5cc:	203c      	movs	r0, #60	; 0x3c
   db5ce:	fb91 f6f3 	sdiv	r6, r1, r3
   db5d2:	fb03 1316 	mls	r3, r3, r6, r1
   db5d6:	6861      	ldr	r1, [r4, #4]
   db5d8:	fb93 f2f0 	sdiv	r2, r3, r0
   db5dc:	fb00 3012 	mls	r0, r0, r2, r3
   db5e0:	6823      	ldr	r3, [r4, #0]
   db5e2:	1a89      	subs	r1, r1, r2
   db5e4:	68a2      	ldr	r2, [r4, #8]
   db5e6:	6061      	str	r1, [r4, #4]
   db5e8:	1a1b      	subs	r3, r3, r0
   db5ea:	1b92      	subs	r2, r2, r6
   db5ec:	2b3b      	cmp	r3, #59	; 0x3b
   db5ee:	6023      	str	r3, [r4, #0]
   db5f0:	60a2      	str	r2, [r4, #8]
   db5f2:	dd03      	ble.n	db5fc <localtime_r+0xd8>
   db5f4:	3101      	adds	r1, #1
   db5f6:	6061      	str	r1, [r4, #4]
   db5f8:	3b3c      	subs	r3, #60	; 0x3c
   db5fa:	e004      	b.n	db606 <localtime_r+0xe2>
   db5fc:	2b00      	cmp	r3, #0
   db5fe:	da03      	bge.n	db608 <localtime_r+0xe4>
   db600:	3901      	subs	r1, #1
   db602:	6061      	str	r1, [r4, #4]
   db604:	333c      	adds	r3, #60	; 0x3c
   db606:	6023      	str	r3, [r4, #0]
   db608:	6863      	ldr	r3, [r4, #4]
   db60a:	2b3b      	cmp	r3, #59	; 0x3b
   db60c:	dd03      	ble.n	db616 <localtime_r+0xf2>
   db60e:	3201      	adds	r2, #1
   db610:	60a2      	str	r2, [r4, #8]
   db612:	3b3c      	subs	r3, #60	; 0x3c
   db614:	e004      	b.n	db620 <localtime_r+0xfc>
   db616:	2b00      	cmp	r3, #0
   db618:	da03      	bge.n	db622 <localtime_r+0xfe>
   db61a:	3a01      	subs	r2, #1
   db61c:	60a2      	str	r2, [r4, #8]
   db61e:	333c      	adds	r3, #60	; 0x3c
   db620:	6063      	str	r3, [r4, #4]
   db622:	68a3      	ldr	r3, [r4, #8]
   db624:	2b17      	cmp	r3, #23
   db626:	dd22      	ble.n	db66e <localtime_r+0x14a>
   db628:	69e2      	ldr	r2, [r4, #28]
   db62a:	3201      	adds	r2, #1
   db62c:	61e2      	str	r2, [r4, #28]
   db62e:	69a2      	ldr	r2, [r4, #24]
   db630:	3201      	adds	r2, #1
   db632:	2a06      	cmp	r2, #6
   db634:	bfc8      	it	gt
   db636:	2200      	movgt	r2, #0
   db638:	61a2      	str	r2, [r4, #24]
   db63a:	68e2      	ldr	r2, [r4, #12]
   db63c:	3b18      	subs	r3, #24
   db63e:	3201      	adds	r2, #1
   db640:	60a3      	str	r3, [r4, #8]
   db642:	6923      	ldr	r3, [r4, #16]
   db644:	60e2      	str	r2, [r4, #12]
   db646:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db64a:	428a      	cmp	r2, r1
   db64c:	dd46      	ble.n	db6dc <localtime_r+0x1b8>
   db64e:	3301      	adds	r3, #1
   db650:	2b0c      	cmp	r3, #12
   db652:	bf0c      	ite	eq
   db654:	6963      	ldreq	r3, [r4, #20]
   db656:	6123      	strne	r3, [r4, #16]
   db658:	eba2 0201 	sub.w	r2, r2, r1
   db65c:	60e2      	str	r2, [r4, #12]
   db65e:	bf01      	itttt	eq
   db660:	3301      	addeq	r3, #1
   db662:	2200      	moveq	r2, #0
   db664:	6122      	streq	r2, [r4, #16]
   db666:	6163      	streq	r3, [r4, #20]
   db668:	bf08      	it	eq
   db66a:	61e2      	streq	r2, [r4, #28]
   db66c:	e036      	b.n	db6dc <localtime_r+0x1b8>
   db66e:	2b00      	cmp	r3, #0
   db670:	da34      	bge.n	db6dc <localtime_r+0x1b8>
   db672:	69e2      	ldr	r2, [r4, #28]
   db674:	3a01      	subs	r2, #1
   db676:	61e2      	str	r2, [r4, #28]
   db678:	69a2      	ldr	r2, [r4, #24]
   db67a:	3a01      	subs	r2, #1
   db67c:	bf48      	it	mi
   db67e:	2206      	movmi	r2, #6
   db680:	61a2      	str	r2, [r4, #24]
   db682:	68e2      	ldr	r2, [r4, #12]
   db684:	3318      	adds	r3, #24
   db686:	3a01      	subs	r2, #1
   db688:	60e2      	str	r2, [r4, #12]
   db68a:	60a3      	str	r3, [r4, #8]
   db68c:	bb32      	cbnz	r2, db6dc <localtime_r+0x1b8>
   db68e:	6923      	ldr	r3, [r4, #16]
   db690:	3b01      	subs	r3, #1
   db692:	d401      	bmi.n	db698 <localtime_r+0x174>
   db694:	6123      	str	r3, [r4, #16]
   db696:	e01d      	b.n	db6d4 <localtime_r+0x1b0>
   db698:	230b      	movs	r3, #11
   db69a:	6123      	str	r3, [r4, #16]
   db69c:	6963      	ldr	r3, [r4, #20]
   db69e:	1e5a      	subs	r2, r3, #1
   db6a0:	f012 0f03 	tst.w	r2, #3
   db6a4:	6162      	str	r2, [r4, #20]
   db6a6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db6aa:	d105      	bne.n	db6b8 <localtime_r+0x194>
   db6ac:	2164      	movs	r1, #100	; 0x64
   db6ae:	fb93 f2f1 	sdiv	r2, r3, r1
   db6b2:	fb01 3212 	mls	r2, r1, r2, r3
   db6b6:	b94a      	cbnz	r2, db6cc <localtime_r+0x1a8>
   db6b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db6bc:	fb93 f2f1 	sdiv	r2, r3, r1
   db6c0:	fb01 3312 	mls	r3, r1, r2, r3
   db6c4:	fab3 f383 	clz	r3, r3
   db6c8:	095b      	lsrs	r3, r3, #5
   db6ca:	e000      	b.n	db6ce <localtime_r+0x1aa>
   db6cc:	2301      	movs	r3, #1
   db6ce:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db6d2:	61e3      	str	r3, [r4, #28]
   db6d4:	6923      	ldr	r3, [r4, #16]
   db6d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db6da:	60e3      	str	r3, [r4, #12]
   db6dc:	f000 fab5 	bl	dbc4a <__tz_unlock>
   db6e0:	4620      	mov	r0, r4
   db6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db6e6:	bf00      	nop
   db6e8:	000dd240 	.word	0x000dd240
   db6ec:	2003e7e8 	.word	0x2003e7e8

000db6f0 <ldiv>:
   db6f0:	2900      	cmp	r1, #0
   db6f2:	b510      	push	{r4, lr}
   db6f4:	fb91 f4f2 	sdiv	r4, r1, r2
   db6f8:	fb02 1314 	mls	r3, r2, r4, r1
   db6fc:	db04      	blt.n	db708 <ldiv+0x18>
   db6fe:	2b00      	cmp	r3, #0
   db700:	da07      	bge.n	db712 <ldiv+0x22>
   db702:	3401      	adds	r4, #1
   db704:	1a9b      	subs	r3, r3, r2
   db706:	e004      	b.n	db712 <ldiv+0x22>
   db708:	2b00      	cmp	r3, #0
   db70a:	bfc4      	itt	gt
   db70c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   db710:	189b      	addgt	r3, r3, r2
   db712:	6004      	str	r4, [r0, #0]
   db714:	6043      	str	r3, [r0, #4]
   db716:	bd10      	pop	{r4, pc}

000db718 <memcpy>:
   db718:	b510      	push	{r4, lr}
   db71a:	1e43      	subs	r3, r0, #1
   db71c:	440a      	add	r2, r1
   db71e:	4291      	cmp	r1, r2
   db720:	d004      	beq.n	db72c <memcpy+0x14>
   db722:	f811 4b01 	ldrb.w	r4, [r1], #1
   db726:	f803 4f01 	strb.w	r4, [r3, #1]!
   db72a:	e7f8      	b.n	db71e <memcpy+0x6>
   db72c:	bd10      	pop	{r4, pc}

000db72e <memmove>:
   db72e:	4288      	cmp	r0, r1
   db730:	b510      	push	{r4, lr}
   db732:	eb01 0302 	add.w	r3, r1, r2
   db736:	d801      	bhi.n	db73c <memmove+0xe>
   db738:	1e42      	subs	r2, r0, #1
   db73a:	e00b      	b.n	db754 <memmove+0x26>
   db73c:	4298      	cmp	r0, r3
   db73e:	d2fb      	bcs.n	db738 <memmove+0xa>
   db740:	1881      	adds	r1, r0, r2
   db742:	1ad2      	subs	r2, r2, r3
   db744:	42d3      	cmn	r3, r2
   db746:	d004      	beq.n	db752 <memmove+0x24>
   db748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db74c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db750:	e7f8      	b.n	db744 <memmove+0x16>
   db752:	bd10      	pop	{r4, pc}
   db754:	4299      	cmp	r1, r3
   db756:	d004      	beq.n	db762 <memmove+0x34>
   db758:	f811 4b01 	ldrb.w	r4, [r1], #1
   db75c:	f802 4f01 	strb.w	r4, [r2, #1]!
   db760:	e7f8      	b.n	db754 <memmove+0x26>
   db762:	bd10      	pop	{r4, pc}

000db764 <memset>:
   db764:	4402      	add	r2, r0
   db766:	4603      	mov	r3, r0
   db768:	4293      	cmp	r3, r2
   db76a:	d002      	beq.n	db772 <memset+0xe>
   db76c:	f803 1b01 	strb.w	r1, [r3], #1
   db770:	e7fa      	b.n	db768 <memset+0x4>
   db772:	4770      	bx	lr

000db774 <srand>:
   db774:	b538      	push	{r3, r4, r5, lr}
   db776:	4b12      	ldr	r3, [pc, #72]	; (db7c0 <srand+0x4c>)
   db778:	681c      	ldr	r4, [r3, #0]
   db77a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db77c:	4605      	mov	r5, r0
   db77e:	b9d3      	cbnz	r3, db7b6 <srand+0x42>
   db780:	2018      	movs	r0, #24
   db782:	f7fb fbd1 	bl	d6f28 <malloc>
   db786:	f243 330e 	movw	r3, #13070	; 0x330e
   db78a:	63a0      	str	r0, [r4, #56]	; 0x38
   db78c:	8003      	strh	r3, [r0, #0]
   db78e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db792:	8043      	strh	r3, [r0, #2]
   db794:	f241 2334 	movw	r3, #4660	; 0x1234
   db798:	8083      	strh	r3, [r0, #4]
   db79a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db79e:	80c3      	strh	r3, [r0, #6]
   db7a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db7a4:	8103      	strh	r3, [r0, #8]
   db7a6:	2305      	movs	r3, #5
   db7a8:	8143      	strh	r3, [r0, #10]
   db7aa:	230b      	movs	r3, #11
   db7ac:	8183      	strh	r3, [r0, #12]
   db7ae:	2201      	movs	r2, #1
   db7b0:	2300      	movs	r3, #0
   db7b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db7b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db7b8:	2200      	movs	r2, #0
   db7ba:	611d      	str	r5, [r3, #16]
   db7bc:	615a      	str	r2, [r3, #20]
   db7be:	bd38      	pop	{r3, r4, r5, pc}
   db7c0:	2003e0f4 	.word	0x2003e0f4

000db7c4 <strcmp>:
   db7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
   db7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
   db7cc:	2a01      	cmp	r2, #1
   db7ce:	bf28      	it	cs
   db7d0:	429a      	cmpcs	r2, r3
   db7d2:	d0f7      	beq.n	db7c4 <strcmp>
   db7d4:	1ad0      	subs	r0, r2, r3
   db7d6:	4770      	bx	lr

000db7d8 <strcpy>:
   db7d8:	4603      	mov	r3, r0
   db7da:	f811 2b01 	ldrb.w	r2, [r1], #1
   db7de:	f803 2b01 	strb.w	r2, [r3], #1
   db7e2:	2a00      	cmp	r2, #0
   db7e4:	d1f9      	bne.n	db7da <strcpy+0x2>
   db7e6:	4770      	bx	lr

000db7e8 <strdup>:
   db7e8:	4b02      	ldr	r3, [pc, #8]	; (db7f4 <strdup+0xc>)
   db7ea:	4601      	mov	r1, r0
   db7ec:	6818      	ldr	r0, [r3, #0]
   db7ee:	f000 b803 	b.w	db7f8 <_strdup_r>
   db7f2:	bf00      	nop
   db7f4:	2003e0f4 	.word	0x2003e0f4

000db7f8 <_strdup_r>:
   db7f8:	b570      	push	{r4, r5, r6, lr}
   db7fa:	4606      	mov	r6, r0
   db7fc:	4608      	mov	r0, r1
   db7fe:	460c      	mov	r4, r1
   db800:	f000 f80d 	bl	db81e <strlen>
   db804:	1c45      	adds	r5, r0, #1
   db806:	4629      	mov	r1, r5
   db808:	4630      	mov	r0, r6
   db80a:	f7fb fbcd 	bl	d6fa8 <_malloc_r>
   db80e:	4606      	mov	r6, r0
   db810:	b118      	cbz	r0, db81a <_strdup_r+0x22>
   db812:	462a      	mov	r2, r5
   db814:	4621      	mov	r1, r4
   db816:	f7ff ff7f 	bl	db718 <memcpy>
   db81a:	4630      	mov	r0, r6
   db81c:	bd70      	pop	{r4, r5, r6, pc}

000db81e <strlen>:
   db81e:	4603      	mov	r3, r0
   db820:	f813 2b01 	ldrb.w	r2, [r3], #1
   db824:	2a00      	cmp	r2, #0
   db826:	d1fb      	bne.n	db820 <strlen+0x2>
   db828:	1a18      	subs	r0, r3, r0
   db82a:	3801      	subs	r0, #1
   db82c:	4770      	bx	lr
	...

000db830 <strncasecmp>:
   db830:	4b10      	ldr	r3, [pc, #64]	; (db874 <strncasecmp+0x44>)
   db832:	b570      	push	{r4, r5, r6, lr}
   db834:	681e      	ldr	r6, [r3, #0]
   db836:	440a      	add	r2, r1
   db838:	4291      	cmp	r1, r2
   db83a:	d017      	beq.n	db86c <strncasecmp+0x3c>
   db83c:	f810 3b01 	ldrb.w	r3, [r0], #1
   db840:	18f4      	adds	r4, r6, r3
   db842:	7864      	ldrb	r4, [r4, #1]
   db844:	f004 0403 	and.w	r4, r4, #3
   db848:	2c01      	cmp	r4, #1
   db84a:	f811 4b01 	ldrb.w	r4, [r1], #1
   db84e:	eb06 0504 	add.w	r5, r6, r4
   db852:	bf08      	it	eq
   db854:	3320      	addeq	r3, #32
   db856:	786d      	ldrb	r5, [r5, #1]
   db858:	f005 0503 	and.w	r5, r5, #3
   db85c:	2d01      	cmp	r5, #1
   db85e:	bf08      	it	eq
   db860:	3420      	addeq	r4, #32
   db862:	1b1b      	subs	r3, r3, r4
   db864:	d103      	bne.n	db86e <strncasecmp+0x3e>
   db866:	2c00      	cmp	r4, #0
   db868:	d1e6      	bne.n	db838 <strncasecmp+0x8>
   db86a:	e000      	b.n	db86e <strncasecmp+0x3e>
   db86c:	2300      	movs	r3, #0
   db86e:	4618      	mov	r0, r3
   db870:	bd70      	pop	{r4, r5, r6, pc}
   db872:	bf00      	nop
   db874:	2003e090 	.word	0x2003e090

000db878 <strncmp>:
   db878:	b530      	push	{r4, r5, lr}
   db87a:	b182      	cbz	r2, db89e <strncmp+0x26>
   db87c:	1e45      	subs	r5, r0, #1
   db87e:	3901      	subs	r1, #1
   db880:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db884:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db888:	42a3      	cmp	r3, r4
   db88a:	d106      	bne.n	db89a <strncmp+0x22>
   db88c:	43ec      	mvns	r4, r5
   db88e:	4414      	add	r4, r2
   db890:	42e0      	cmn	r0, r4
   db892:	d001      	beq.n	db898 <strncmp+0x20>
   db894:	2b00      	cmp	r3, #0
   db896:	d1f3      	bne.n	db880 <strncmp+0x8>
   db898:	461c      	mov	r4, r3
   db89a:	1b18      	subs	r0, r3, r4
   db89c:	bd30      	pop	{r4, r5, pc}
   db89e:	4610      	mov	r0, r2
   db8a0:	bd30      	pop	{r4, r5, pc}

000db8a2 <strncpy>:
   db8a2:	b510      	push	{r4, lr}
   db8a4:	4603      	mov	r3, r0
   db8a6:	b142      	cbz	r2, db8ba <strncpy+0x18>
   db8a8:	f811 4b01 	ldrb.w	r4, [r1], #1
   db8ac:	f803 4b01 	strb.w	r4, [r3], #1
   db8b0:	3a01      	subs	r2, #1
   db8b2:	2c00      	cmp	r4, #0
   db8b4:	d1f7      	bne.n	db8a6 <strncpy+0x4>
   db8b6:	441a      	add	r2, r3
   db8b8:	e000      	b.n	db8bc <strncpy+0x1a>
   db8ba:	bd10      	pop	{r4, pc}
   db8bc:	4293      	cmp	r3, r2
   db8be:	d002      	beq.n	db8c6 <strncpy+0x24>
   db8c0:	f803 4b01 	strb.w	r4, [r3], #1
   db8c4:	e7fa      	b.n	db8bc <strncpy+0x1a>
   db8c6:	bd10      	pop	{r4, pc}

000db8c8 <_strtol_r>:
   db8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db8cc:	4680      	mov	r8, r0
   db8ce:	4840      	ldr	r0, [pc, #256]	; (db9d0 <_strtol_r+0x108>)
   db8d0:	f8d0 9000 	ldr.w	r9, [r0]
   db8d4:	460f      	mov	r7, r1
   db8d6:	463d      	mov	r5, r7
   db8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   db8dc:	eb09 0004 	add.w	r0, r9, r4
   db8e0:	7840      	ldrb	r0, [r0, #1]
   db8e2:	f000 0008 	and.w	r0, r0, #8
   db8e6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db8ea:	b108      	cbz	r0, db8f0 <_strtol_r+0x28>
   db8ec:	462f      	mov	r7, r5
   db8ee:	e7f2      	b.n	db8d6 <_strtol_r+0xe>
   db8f0:	2c2d      	cmp	r4, #45	; 0x2d
   db8f2:	d103      	bne.n	db8fc <_strtol_r+0x34>
   db8f4:	1cbd      	adds	r5, r7, #2
   db8f6:	787c      	ldrb	r4, [r7, #1]
   db8f8:	2601      	movs	r6, #1
   db8fa:	e003      	b.n	db904 <_strtol_r+0x3c>
   db8fc:	2c2b      	cmp	r4, #43	; 0x2b
   db8fe:	bf04      	itt	eq
   db900:	787c      	ldrbeq	r4, [r7, #1]
   db902:	1cbd      	addeq	r5, r7, #2
   db904:	b113      	cbz	r3, db90c <_strtol_r+0x44>
   db906:	2b10      	cmp	r3, #16
   db908:	d10a      	bne.n	db920 <_strtol_r+0x58>
   db90a:	e05b      	b.n	db9c4 <_strtol_r+0xfc>
   db90c:	2c30      	cmp	r4, #48	; 0x30
   db90e:	d157      	bne.n	db9c0 <_strtol_r+0xf8>
   db910:	7828      	ldrb	r0, [r5, #0]
   db912:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db916:	2858      	cmp	r0, #88	; 0x58
   db918:	d14d      	bne.n	db9b6 <_strtol_r+0xee>
   db91a:	786c      	ldrb	r4, [r5, #1]
   db91c:	2310      	movs	r3, #16
   db91e:	3502      	adds	r5, #2
   db920:	2e00      	cmp	r6, #0
   db922:	bf14      	ite	ne
   db924:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db928:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db92c:	2700      	movs	r7, #0
   db92e:	fbbc faf3 	udiv	sl, ip, r3
   db932:	4638      	mov	r0, r7
   db934:	fb03 cc1a 	mls	ip, r3, sl, ip
   db938:	eb09 0e04 	add.w	lr, r9, r4
   db93c:	f89e e001 	ldrb.w	lr, [lr, #1]
   db940:	f01e 0f04 	tst.w	lr, #4
   db944:	d001      	beq.n	db94a <_strtol_r+0x82>
   db946:	3c30      	subs	r4, #48	; 0x30
   db948:	e00b      	b.n	db962 <_strtol_r+0x9a>
   db94a:	f01e 0e03 	ands.w	lr, lr, #3
   db94e:	d01b      	beq.n	db988 <_strtol_r+0xc0>
   db950:	f1be 0f01 	cmp.w	lr, #1
   db954:	bf0c      	ite	eq
   db956:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db95a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db95e:	ebce 0404 	rsb	r4, lr, r4
   db962:	42a3      	cmp	r3, r4
   db964:	dd10      	ble.n	db988 <_strtol_r+0xc0>
   db966:	f1b7 3fff 	cmp.w	r7, #4294967295
   db96a:	d00a      	beq.n	db982 <_strtol_r+0xba>
   db96c:	4550      	cmp	r0, sl
   db96e:	d806      	bhi.n	db97e <_strtol_r+0xb6>
   db970:	d101      	bne.n	db976 <_strtol_r+0xae>
   db972:	4564      	cmp	r4, ip
   db974:	dc03      	bgt.n	db97e <_strtol_r+0xb6>
   db976:	fb03 4000 	mla	r0, r3, r0, r4
   db97a:	2701      	movs	r7, #1
   db97c:	e001      	b.n	db982 <_strtol_r+0xba>
   db97e:	f04f 37ff 	mov.w	r7, #4294967295
   db982:	f815 4b01 	ldrb.w	r4, [r5], #1
   db986:	e7d7      	b.n	db938 <_strtol_r+0x70>
   db988:	1c7b      	adds	r3, r7, #1
   db98a:	d10c      	bne.n	db9a6 <_strtol_r+0xde>
   db98c:	2e00      	cmp	r6, #0
   db98e:	f04f 0322 	mov.w	r3, #34	; 0x22
   db992:	bf14      	ite	ne
   db994:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db998:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db99c:	f8c8 3000 	str.w	r3, [r8]
   db9a0:	b92a      	cbnz	r2, db9ae <_strtol_r+0xe6>
   db9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9a6:	b106      	cbz	r6, db9aa <_strtol_r+0xe2>
   db9a8:	4240      	negs	r0, r0
   db9aa:	b172      	cbz	r2, db9ca <_strtol_r+0x102>
   db9ac:	b107      	cbz	r7, db9b0 <_strtol_r+0xe8>
   db9ae:	1e69      	subs	r1, r5, #1
   db9b0:	6011      	str	r1, [r2, #0]
   db9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9b6:	2430      	movs	r4, #48	; 0x30
   db9b8:	2b00      	cmp	r3, #0
   db9ba:	d1b1      	bne.n	db920 <_strtol_r+0x58>
   db9bc:	2308      	movs	r3, #8
   db9be:	e7af      	b.n	db920 <_strtol_r+0x58>
   db9c0:	230a      	movs	r3, #10
   db9c2:	e7ad      	b.n	db920 <_strtol_r+0x58>
   db9c4:	2c30      	cmp	r4, #48	; 0x30
   db9c6:	d0a3      	beq.n	db910 <_strtol_r+0x48>
   db9c8:	e7aa      	b.n	db920 <_strtol_r+0x58>
   db9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db9ce:	bf00      	nop
   db9d0:	2003e090 	.word	0x2003e090

000db9d4 <strtol>:
   db9d4:	4613      	mov	r3, r2
   db9d6:	460a      	mov	r2, r1
   db9d8:	4601      	mov	r1, r0
   db9da:	4802      	ldr	r0, [pc, #8]	; (db9e4 <strtol+0x10>)
   db9dc:	6800      	ldr	r0, [r0, #0]
   db9de:	f7ff bf73 	b.w	db8c8 <_strtol_r>
   db9e2:	bf00      	nop
   db9e4:	2003e0f4 	.word	0x2003e0f4

000db9e8 <_strtoul_r>:
   db9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db9ec:	4680      	mov	r8, r0
   db9ee:	483c      	ldr	r0, [pc, #240]	; (dbae0 <_strtoul_r+0xf8>)
   db9f0:	f8d0 9000 	ldr.w	r9, [r0]
   db9f4:	460e      	mov	r6, r1
   db9f6:	4635      	mov	r5, r6
   db9f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   db9fc:	eb09 0004 	add.w	r0, r9, r4
   dba00:	7840      	ldrb	r0, [r0, #1]
   dba02:	f000 0008 	and.w	r0, r0, #8
   dba06:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dba0a:	b108      	cbz	r0, dba10 <_strtoul_r+0x28>
   dba0c:	462e      	mov	r6, r5
   dba0e:	e7f2      	b.n	db9f6 <_strtoul_r+0xe>
   dba10:	2c2d      	cmp	r4, #45	; 0x2d
   dba12:	d103      	bne.n	dba1c <_strtoul_r+0x34>
   dba14:	1cb5      	adds	r5, r6, #2
   dba16:	7874      	ldrb	r4, [r6, #1]
   dba18:	2701      	movs	r7, #1
   dba1a:	e003      	b.n	dba24 <_strtoul_r+0x3c>
   dba1c:	2c2b      	cmp	r4, #43	; 0x2b
   dba1e:	bf04      	itt	eq
   dba20:	7874      	ldrbeq	r4, [r6, #1]
   dba22:	1cb5      	addeq	r5, r6, #2
   dba24:	b113      	cbz	r3, dba2c <_strtoul_r+0x44>
   dba26:	2b10      	cmp	r3, #16
   dba28:	d10a      	bne.n	dba40 <_strtoul_r+0x58>
   dba2a:	e053      	b.n	dbad4 <_strtoul_r+0xec>
   dba2c:	2c30      	cmp	r4, #48	; 0x30
   dba2e:	d14f      	bne.n	dbad0 <_strtoul_r+0xe8>
   dba30:	7828      	ldrb	r0, [r5, #0]
   dba32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dba36:	2858      	cmp	r0, #88	; 0x58
   dba38:	d145      	bne.n	dbac6 <_strtoul_r+0xde>
   dba3a:	786c      	ldrb	r4, [r5, #1]
   dba3c:	2310      	movs	r3, #16
   dba3e:	3502      	adds	r5, #2
   dba40:	f04f 3cff 	mov.w	ip, #4294967295
   dba44:	2600      	movs	r6, #0
   dba46:	fbbc fcf3 	udiv	ip, ip, r3
   dba4a:	fb03 fa0c 	mul.w	sl, r3, ip
   dba4e:	ea6f 0a0a 	mvn.w	sl, sl
   dba52:	4630      	mov	r0, r6
   dba54:	eb09 0e04 	add.w	lr, r9, r4
   dba58:	f89e e001 	ldrb.w	lr, [lr, #1]
   dba5c:	f01e 0f04 	tst.w	lr, #4
   dba60:	d001      	beq.n	dba66 <_strtoul_r+0x7e>
   dba62:	3c30      	subs	r4, #48	; 0x30
   dba64:	e00b      	b.n	dba7e <_strtoul_r+0x96>
   dba66:	f01e 0e03 	ands.w	lr, lr, #3
   dba6a:	d01a      	beq.n	dbaa2 <_strtoul_r+0xba>
   dba6c:	f1be 0f01 	cmp.w	lr, #1
   dba70:	bf0c      	ite	eq
   dba72:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dba76:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dba7a:	ebce 0404 	rsb	r4, lr, r4
   dba7e:	42a3      	cmp	r3, r4
   dba80:	dd0f      	ble.n	dbaa2 <_strtoul_r+0xba>
   dba82:	2e00      	cmp	r6, #0
   dba84:	db08      	blt.n	dba98 <_strtoul_r+0xb0>
   dba86:	4560      	cmp	r0, ip
   dba88:	d806      	bhi.n	dba98 <_strtoul_r+0xb0>
   dba8a:	d101      	bne.n	dba90 <_strtoul_r+0xa8>
   dba8c:	4554      	cmp	r4, sl
   dba8e:	dc03      	bgt.n	dba98 <_strtoul_r+0xb0>
   dba90:	fb03 4000 	mla	r0, r3, r0, r4
   dba94:	2601      	movs	r6, #1
   dba96:	e001      	b.n	dba9c <_strtoul_r+0xb4>
   dba98:	f04f 36ff 	mov.w	r6, #4294967295
   dba9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbaa0:	e7d8      	b.n	dba54 <_strtoul_r+0x6c>
   dbaa2:	2e00      	cmp	r6, #0
   dbaa4:	da07      	bge.n	dbab6 <_strtoul_r+0xce>
   dbaa6:	2322      	movs	r3, #34	; 0x22
   dbaa8:	f8c8 3000 	str.w	r3, [r8]
   dbaac:	f04f 30ff 	mov.w	r0, #4294967295
   dbab0:	b92a      	cbnz	r2, dbabe <_strtoul_r+0xd6>
   dbab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbab6:	b107      	cbz	r7, dbaba <_strtoul_r+0xd2>
   dbab8:	4240      	negs	r0, r0
   dbaba:	b172      	cbz	r2, dbada <_strtoul_r+0xf2>
   dbabc:	b106      	cbz	r6, dbac0 <_strtoul_r+0xd8>
   dbabe:	1e69      	subs	r1, r5, #1
   dbac0:	6011      	str	r1, [r2, #0]
   dbac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbac6:	2430      	movs	r4, #48	; 0x30
   dbac8:	2b00      	cmp	r3, #0
   dbaca:	d1b9      	bne.n	dba40 <_strtoul_r+0x58>
   dbacc:	2308      	movs	r3, #8
   dbace:	e7b7      	b.n	dba40 <_strtoul_r+0x58>
   dbad0:	230a      	movs	r3, #10
   dbad2:	e7b5      	b.n	dba40 <_strtoul_r+0x58>
   dbad4:	2c30      	cmp	r4, #48	; 0x30
   dbad6:	d0ab      	beq.n	dba30 <_strtoul_r+0x48>
   dbad8:	e7b2      	b.n	dba40 <_strtoul_r+0x58>
   dbada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbade:	bf00      	nop
   dbae0:	2003e090 	.word	0x2003e090

000dbae4 <strtoul>:
   dbae4:	4613      	mov	r3, r2
   dbae6:	460a      	mov	r2, r1
   dbae8:	4601      	mov	r1, r0
   dbaea:	4802      	ldr	r0, [pc, #8]	; (dbaf4 <strtoul+0x10>)
   dbaec:	6800      	ldr	r0, [r0, #0]
   dbaee:	f7ff bf7b 	b.w	db9e8 <_strtoul_r>
   dbaf2:	bf00      	nop
   dbaf4:	2003e0f4 	.word	0x2003e0f4

000dbaf8 <__tzcalc_limits>:
   dbaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbafc:	4604      	mov	r4, r0
   dbafe:	f000 fa6f 	bl	dbfe0 <__gettzinfo>
   dbb02:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbb06:	429c      	cmp	r4, r3
   dbb08:	f340 8096 	ble.w	dbc38 <__tzcalc_limits+0x140>
   dbb0c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbb10:	18e3      	adds	r3, r4, r3
   dbb12:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbb16:	109b      	asrs	r3, r3, #2
   dbb18:	f240 156d 	movw	r5, #365	; 0x16d
   dbb1c:	fb05 3502 	mla	r5, r5, r2, r3
   dbb20:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbb24:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbb28:	fb92 f3f3 	sdiv	r3, r2, r3
   dbb2c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbb30:	442b      	add	r3, r5
   dbb32:	18a5      	adds	r5, r4, r2
   dbb34:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbb38:	fb95 f5f2 	sdiv	r5, r5, r2
   dbb3c:	441d      	add	r5, r3
   dbb3e:	2364      	movs	r3, #100	; 0x64
   dbb40:	fb94 f7f2 	sdiv	r7, r4, r2
   dbb44:	fb94 f6f3 	sdiv	r6, r4, r3
   dbb48:	fb02 4717 	mls	r7, r2, r7, r4
   dbb4c:	fb03 4616 	mls	r6, r3, r6, r4
   dbb50:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbb54:	fab7 fe87 	clz	lr, r7
   dbb58:	9301      	str	r3, [sp, #4]
   dbb5a:	f004 0303 	and.w	r3, r4, #3
   dbb5e:	6044      	str	r4, [r0, #4]
   dbb60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbb64:	4601      	mov	r1, r0
   dbb66:	9300      	str	r3, [sp, #0]
   dbb68:	f04f 0c07 	mov.w	ip, #7
   dbb6c:	7a0b      	ldrb	r3, [r1, #8]
   dbb6e:	2b4a      	cmp	r3, #74	; 0x4a
   dbb70:	d10e      	bne.n	dbb90 <__tzcalc_limits+0x98>
   dbb72:	694b      	ldr	r3, [r1, #20]
   dbb74:	9a00      	ldr	r2, [sp, #0]
   dbb76:	18ec      	adds	r4, r5, r3
   dbb78:	b902      	cbnz	r2, dbb7c <__tzcalc_limits+0x84>
   dbb7a:	b906      	cbnz	r6, dbb7e <__tzcalc_limits+0x86>
   dbb7c:	b927      	cbnz	r7, dbb88 <__tzcalc_limits+0x90>
   dbb7e:	2b3b      	cmp	r3, #59	; 0x3b
   dbb80:	bfd4      	ite	le
   dbb82:	2300      	movle	r3, #0
   dbb84:	2301      	movgt	r3, #1
   dbb86:	e000      	b.n	dbb8a <__tzcalc_limits+0x92>
   dbb88:	2300      	movs	r3, #0
   dbb8a:	4423      	add	r3, r4
   dbb8c:	3b01      	subs	r3, #1
   dbb8e:	e03f      	b.n	dbc10 <__tzcalc_limits+0x118>
   dbb90:	2b44      	cmp	r3, #68	; 0x44
   dbb92:	d102      	bne.n	dbb9a <__tzcalc_limits+0xa2>
   dbb94:	694b      	ldr	r3, [r1, #20]
   dbb96:	442b      	add	r3, r5
   dbb98:	e03a      	b.n	dbc10 <__tzcalc_limits+0x118>
   dbb9a:	9b00      	ldr	r3, [sp, #0]
   dbb9c:	b92b      	cbnz	r3, dbbaa <__tzcalc_limits+0xb2>
   dbb9e:	2e00      	cmp	r6, #0
   dbba0:	bf0c      	ite	eq
   dbba2:	46f0      	moveq	r8, lr
   dbba4:	f04f 0801 	movne.w	r8, #1
   dbba8:	e000      	b.n	dbbac <__tzcalc_limits+0xb4>
   dbbaa:	46f0      	mov	r8, lr
   dbbac:	4b24      	ldr	r3, [pc, #144]	; (dbc40 <__tzcalc_limits+0x148>)
   dbbae:	68cc      	ldr	r4, [r1, #12]
   dbbb0:	2230      	movs	r2, #48	; 0x30
   dbbb2:	fb02 3808 	mla	r8, r2, r8, r3
   dbbb6:	f1a8 0a04 	sub.w	sl, r8, #4
   dbbba:	46a9      	mov	r9, r5
   dbbbc:	2301      	movs	r3, #1
   dbbbe:	42a3      	cmp	r3, r4
   dbbc0:	da04      	bge.n	dbbcc <__tzcalc_limits+0xd4>
   dbbc2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbbc6:	3301      	adds	r3, #1
   dbbc8:	44d9      	add	r9, fp
   dbbca:	e7f8      	b.n	dbbbe <__tzcalc_limits+0xc6>
   dbbcc:	f109 0304 	add.w	r3, r9, #4
   dbbd0:	fb93 fbfc 	sdiv	fp, r3, ip
   dbbd4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbbd8:	2c01      	cmp	r4, #1
   dbbda:	ebca 0a03 	rsb	sl, sl, r3
   dbbde:	694b      	ldr	r3, [r1, #20]
   dbbe0:	bfb8      	it	lt
   dbbe2:	2401      	movlt	r4, #1
   dbbe4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbbe8:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbbec:	690b      	ldr	r3, [r1, #16]
   dbbee:	f104 34ff 	add.w	r4, r4, #4294967295
   dbbf2:	f103 33ff 	add.w	r3, r3, #4294967295
   dbbf6:	bf48      	it	mi
   dbbf8:	f10a 0a07 	addmi.w	sl, sl, #7
   dbbfc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbc00:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbc04:	4453      	add	r3, sl
   dbc06:	42a3      	cmp	r3, r4
   dbc08:	db01      	blt.n	dbc0e <__tzcalc_limits+0x116>
   dbc0a:	3b07      	subs	r3, #7
   dbc0c:	e7fb      	b.n	dbc06 <__tzcalc_limits+0x10e>
   dbc0e:	444b      	add	r3, r9
   dbc10:	698c      	ldr	r4, [r1, #24]
   dbc12:	4a0c      	ldr	r2, [pc, #48]	; (dbc44 <__tzcalc_limits+0x14c>)
   dbc14:	fb02 4303 	mla	r3, r2, r3, r4
   dbc18:	6a0c      	ldr	r4, [r1, #32]
   dbc1a:	4423      	add	r3, r4
   dbc1c:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbc20:	9b01      	ldr	r3, [sp, #4]
   dbc22:	4299      	cmp	r1, r3
   dbc24:	d1a2      	bne.n	dbb6c <__tzcalc_limits+0x74>
   dbc26:	69c3      	ldr	r3, [r0, #28]
   dbc28:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbc2a:	4293      	cmp	r3, r2
   dbc2c:	bfac      	ite	ge
   dbc2e:	2300      	movge	r3, #0
   dbc30:	2301      	movlt	r3, #1
   dbc32:	6003      	str	r3, [r0, #0]
   dbc34:	2001      	movs	r0, #1
   dbc36:	e000      	b.n	dbc3a <__tzcalc_limits+0x142>
   dbc38:	2000      	movs	r0, #0
   dbc3a:	b003      	add	sp, #12
   dbc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc40:	000dd240 	.word	0x000dd240
   dbc44:	00015180 	.word	0x00015180

000dbc48 <__tz_lock>:
   dbc48:	4770      	bx	lr

000dbc4a <__tz_unlock>:
   dbc4a:	4770      	bx	lr

000dbc4c <_tzset_unlocked>:
   dbc4c:	4b01      	ldr	r3, [pc, #4]	; (dbc54 <_tzset_unlocked+0x8>)
   dbc4e:	6818      	ldr	r0, [r3, #0]
   dbc50:	f000 b802 	b.w	dbc58 <_tzset_unlocked_r>
   dbc54:	2003e0f4 	.word	0x2003e0f4

000dbc58 <_tzset_unlocked_r>:
   dbc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc5c:	b08d      	sub	sp, #52	; 0x34
   dbc5e:	4607      	mov	r7, r0
   dbc60:	f000 f9be 	bl	dbfe0 <__gettzinfo>
   dbc64:	49b0      	ldr	r1, [pc, #704]	; (dbf28 <_tzset_unlocked_r+0x2d0>)
   dbc66:	4eb1      	ldr	r6, [pc, #708]	; (dbf2c <_tzset_unlocked_r+0x2d4>)
   dbc68:	4604      	mov	r4, r0
   dbc6a:	4638      	mov	r0, r7
   dbc6c:	f000 f9b0 	bl	dbfd0 <_getenv_r>
   dbc70:	4605      	mov	r5, r0
   dbc72:	b960      	cbnz	r0, dbc8e <_tzset_unlocked_r+0x36>
   dbc74:	4bae      	ldr	r3, [pc, #696]	; (dbf30 <_tzset_unlocked_r+0x2d8>)
   dbc76:	4aaf      	ldr	r2, [pc, #700]	; (dbf34 <_tzset_unlocked_r+0x2dc>)
   dbc78:	6018      	str	r0, [r3, #0]
   dbc7a:	4baf      	ldr	r3, [pc, #700]	; (dbf38 <_tzset_unlocked_r+0x2e0>)
   dbc7c:	6018      	str	r0, [r3, #0]
   dbc7e:	4baf      	ldr	r3, [pc, #700]	; (dbf3c <_tzset_unlocked_r+0x2e4>)
   dbc80:	6830      	ldr	r0, [r6, #0]
   dbc82:	601a      	str	r2, [r3, #0]
   dbc84:	605a      	str	r2, [r3, #4]
   dbc86:	f7fb f957 	bl	d6f38 <free>
   dbc8a:	6035      	str	r5, [r6, #0]
   dbc8c:	e148      	b.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbc8e:	6831      	ldr	r1, [r6, #0]
   dbc90:	b979      	cbnz	r1, dbcb2 <_tzset_unlocked_r+0x5a>
   dbc92:	6830      	ldr	r0, [r6, #0]
   dbc94:	f7fb f950 	bl	d6f38 <free>
   dbc98:	4628      	mov	r0, r5
   dbc9a:	f7ff fdc0 	bl	db81e <strlen>
   dbc9e:	1c41      	adds	r1, r0, #1
   dbca0:	4638      	mov	r0, r7
   dbca2:	f7fb f981 	bl	d6fa8 <_malloc_r>
   dbca6:	6030      	str	r0, [r6, #0]
   dbca8:	b148      	cbz	r0, dbcbe <_tzset_unlocked_r+0x66>
   dbcaa:	4629      	mov	r1, r5
   dbcac:	f7ff fd94 	bl	db7d8 <strcpy>
   dbcb0:	e005      	b.n	dbcbe <_tzset_unlocked_r+0x66>
   dbcb2:	f7ff fd87 	bl	db7c4 <strcmp>
   dbcb6:	2800      	cmp	r0, #0
   dbcb8:	f000 8132 	beq.w	dbf20 <_tzset_unlocked_r+0x2c8>
   dbcbc:	e7e9      	b.n	dbc92 <_tzset_unlocked_r+0x3a>
   dbcbe:	782b      	ldrb	r3, [r5, #0]
   dbcc0:	4a9f      	ldr	r2, [pc, #636]	; (dbf40 <_tzset_unlocked_r+0x2e8>)
   dbcc2:	49a0      	ldr	r1, [pc, #640]	; (dbf44 <_tzset_unlocked_r+0x2ec>)
   dbcc4:	2b3a      	cmp	r3, #58	; 0x3a
   dbcc6:	bf08      	it	eq
   dbcc8:	3501      	addeq	r5, #1
   dbcca:	ae0a      	add	r6, sp, #40	; 0x28
   dbccc:	4633      	mov	r3, r6
   dbcce:	4628      	mov	r0, r5
   dbcd0:	f7fb f952 	bl	d6f78 <siscanf>
   dbcd4:	2800      	cmp	r0, #0
   dbcd6:	f340 8123 	ble.w	dbf20 <_tzset_unlocked_r+0x2c8>
   dbcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbcdc:	18ef      	adds	r7, r5, r3
   dbcde:	5ceb      	ldrb	r3, [r5, r3]
   dbce0:	2b2d      	cmp	r3, #45	; 0x2d
   dbce2:	d103      	bne.n	dbcec <_tzset_unlocked_r+0x94>
   dbce4:	3701      	adds	r7, #1
   dbce6:	f04f 35ff 	mov.w	r5, #4294967295
   dbcea:	e003      	b.n	dbcf4 <_tzset_unlocked_r+0x9c>
   dbcec:	2b2b      	cmp	r3, #43	; 0x2b
   dbcee:	bf08      	it	eq
   dbcf0:	3701      	addeq	r7, #1
   dbcf2:	2501      	movs	r5, #1
   dbcf4:	f10d 0a20 	add.w	sl, sp, #32
   dbcf8:	f10d 0b1e 	add.w	fp, sp, #30
   dbcfc:	f04f 0800 	mov.w	r8, #0
   dbd00:	9603      	str	r6, [sp, #12]
   dbd02:	f8cd a008 	str.w	sl, [sp, #8]
   dbd06:	9601      	str	r6, [sp, #4]
   dbd08:	f8cd b000 	str.w	fp, [sp]
   dbd0c:	4633      	mov	r3, r6
   dbd0e:	aa07      	add	r2, sp, #28
   dbd10:	498d      	ldr	r1, [pc, #564]	; (dbf48 <_tzset_unlocked_r+0x2f0>)
   dbd12:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbd16:	4638      	mov	r0, r7
   dbd18:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbd1c:	f7fb f92c 	bl	d6f78 <siscanf>
   dbd20:	4540      	cmp	r0, r8
   dbd22:	f340 80fd 	ble.w	dbf20 <_tzset_unlocked_r+0x2c8>
   dbd26:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbd2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbd2e:	f8df 9224 	ldr.w	r9, [pc, #548]	; dbf54 <_tzset_unlocked_r+0x2fc>
   dbd32:	213c      	movs	r1, #60	; 0x3c
   dbd34:	fb01 3302 	mla	r3, r1, r2, r3
   dbd38:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbd3c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbd40:	fb01 3302 	mla	r3, r1, r2, r3
   dbd44:	435d      	muls	r5, r3
   dbd46:	6225      	str	r5, [r4, #32]
   dbd48:	4d7c      	ldr	r5, [pc, #496]	; (dbf3c <_tzset_unlocked_r+0x2e4>)
   dbd4a:	4b7d      	ldr	r3, [pc, #500]	; (dbf40 <_tzset_unlocked_r+0x2e8>)
   dbd4c:	602b      	str	r3, [r5, #0]
   dbd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd50:	497c      	ldr	r1, [pc, #496]	; (dbf44 <_tzset_unlocked_r+0x2ec>)
   dbd52:	441f      	add	r7, r3
   dbd54:	464a      	mov	r2, r9
   dbd56:	4633      	mov	r3, r6
   dbd58:	4638      	mov	r0, r7
   dbd5a:	f7fb f90d 	bl	d6f78 <siscanf>
   dbd5e:	4540      	cmp	r0, r8
   dbd60:	dc08      	bgt.n	dbd74 <_tzset_unlocked_r+0x11c>
   dbd62:	682b      	ldr	r3, [r5, #0]
   dbd64:	606b      	str	r3, [r5, #4]
   dbd66:	4b72      	ldr	r3, [pc, #456]	; (dbf30 <_tzset_unlocked_r+0x2d8>)
   dbd68:	6a22      	ldr	r2, [r4, #32]
   dbd6a:	601a      	str	r2, [r3, #0]
   dbd6c:	4b72      	ldr	r3, [pc, #456]	; (dbf38 <_tzset_unlocked_r+0x2e0>)
   dbd6e:	f8c3 8000 	str.w	r8, [r3]
   dbd72:	e0d5      	b.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd76:	f8c5 9004 	str.w	r9, [r5, #4]
   dbd7a:	18fd      	adds	r5, r7, r3
   dbd7c:	5cfb      	ldrb	r3, [r7, r3]
   dbd7e:	2b2d      	cmp	r3, #45	; 0x2d
   dbd80:	d103      	bne.n	dbd8a <_tzset_unlocked_r+0x132>
   dbd82:	3501      	adds	r5, #1
   dbd84:	f04f 37ff 	mov.w	r7, #4294967295
   dbd88:	e003      	b.n	dbd92 <_tzset_unlocked_r+0x13a>
   dbd8a:	2b2b      	cmp	r3, #43	; 0x2b
   dbd8c:	bf08      	it	eq
   dbd8e:	3501      	addeq	r5, #1
   dbd90:	2701      	movs	r7, #1
   dbd92:	2300      	movs	r3, #0
   dbd94:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbd98:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbd9c:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbda0:	930a      	str	r3, [sp, #40]	; 0x28
   dbda2:	9603      	str	r6, [sp, #12]
   dbda4:	f8cd a008 	str.w	sl, [sp, #8]
   dbda8:	9601      	str	r6, [sp, #4]
   dbdaa:	f8cd b000 	str.w	fp, [sp]
   dbdae:	4633      	mov	r3, r6
   dbdb0:	aa07      	add	r2, sp, #28
   dbdb2:	4965      	ldr	r1, [pc, #404]	; (dbf48 <_tzset_unlocked_r+0x2f0>)
   dbdb4:	4628      	mov	r0, r5
   dbdb6:	f7fb f8df 	bl	d6f78 <siscanf>
   dbdba:	2800      	cmp	r0, #0
   dbdbc:	dc04      	bgt.n	dbdc8 <_tzset_unlocked_r+0x170>
   dbdbe:	6a23      	ldr	r3, [r4, #32]
   dbdc0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbdc4:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbdc6:	e00e      	b.n	dbde6 <_tzset_unlocked_r+0x18e>
   dbdc8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbdcc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbdd0:	213c      	movs	r1, #60	; 0x3c
   dbdd2:	fb01 3302 	mla	r3, r1, r2, r3
   dbdd6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbdda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbdde:	fb01 3302 	mla	r3, r1, r2, r3
   dbde2:	435f      	muls	r7, r3
   dbde4:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbde8:	4627      	mov	r7, r4
   dbdea:	441d      	add	r5, r3
   dbdec:	f04f 0900 	mov.w	r9, #0
   dbdf0:	782b      	ldrb	r3, [r5, #0]
   dbdf2:	2b2c      	cmp	r3, #44	; 0x2c
   dbdf4:	bf08      	it	eq
   dbdf6:	3501      	addeq	r5, #1
   dbdf8:	f895 8000 	ldrb.w	r8, [r5]
   dbdfc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbe00:	d126      	bne.n	dbe50 <_tzset_unlocked_r+0x1f8>
   dbe02:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbe06:	9302      	str	r3, [sp, #8]
   dbe08:	ab09      	add	r3, sp, #36	; 0x24
   dbe0a:	9300      	str	r3, [sp, #0]
   dbe0c:	9603      	str	r6, [sp, #12]
   dbe0e:	9601      	str	r6, [sp, #4]
   dbe10:	4633      	mov	r3, r6
   dbe12:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbe16:	494d      	ldr	r1, [pc, #308]	; (dbf4c <_tzset_unlocked_r+0x2f4>)
   dbe18:	4628      	mov	r0, r5
   dbe1a:	f7fb f8ad 	bl	d6f78 <siscanf>
   dbe1e:	2803      	cmp	r0, #3
   dbe20:	d17e      	bne.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbe22:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbe26:	1e4b      	subs	r3, r1, #1
   dbe28:	2b0b      	cmp	r3, #11
   dbe2a:	d879      	bhi.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbe2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbe30:	1e53      	subs	r3, r2, #1
   dbe32:	2b04      	cmp	r3, #4
   dbe34:	d874      	bhi.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbe36:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbe3a:	2b06      	cmp	r3, #6
   dbe3c:	d870      	bhi.n	dbf20 <_tzset_unlocked_r+0x2c8>
   dbe3e:	f887 8008 	strb.w	r8, [r7, #8]
   dbe42:	60f9      	str	r1, [r7, #12]
   dbe44:	613a      	str	r2, [r7, #16]
   dbe46:	617b      	str	r3, [r7, #20]
   dbe48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe4a:	eb05 0803 	add.w	r8, r5, r3
   dbe4e:	e02a      	b.n	dbea6 <_tzset_unlocked_r+0x24e>
   dbe50:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dbe54:	bf06      	itte	eq
   dbe56:	3501      	addeq	r5, #1
   dbe58:	4643      	moveq	r3, r8
   dbe5a:	2344      	movne	r3, #68	; 0x44
   dbe5c:	220a      	movs	r2, #10
   dbe5e:	a90b      	add	r1, sp, #44	; 0x2c
   dbe60:	4628      	mov	r0, r5
   dbe62:	9305      	str	r3, [sp, #20]
   dbe64:	f7ff fe3e 	bl	dbae4 <strtoul>
   dbe68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dbe6c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dbe70:	4545      	cmp	r5, r8
   dbe72:	9b05      	ldr	r3, [sp, #20]
   dbe74:	d114      	bne.n	dbea0 <_tzset_unlocked_r+0x248>
   dbe76:	234d      	movs	r3, #77	; 0x4d
   dbe78:	f1b9 0f00 	cmp.w	r9, #0
   dbe7c:	d107      	bne.n	dbe8e <_tzset_unlocked_r+0x236>
   dbe7e:	7223      	strb	r3, [r4, #8]
   dbe80:	2303      	movs	r3, #3
   dbe82:	60e3      	str	r3, [r4, #12]
   dbe84:	2302      	movs	r3, #2
   dbe86:	6123      	str	r3, [r4, #16]
   dbe88:	f8c4 9014 	str.w	r9, [r4, #20]
   dbe8c:	e00b      	b.n	dbea6 <_tzset_unlocked_r+0x24e>
   dbe8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dbe92:	230b      	movs	r3, #11
   dbe94:	62a3      	str	r3, [r4, #40]	; 0x28
   dbe96:	2301      	movs	r3, #1
   dbe98:	62e3      	str	r3, [r4, #44]	; 0x2c
   dbe9a:	2300      	movs	r3, #0
   dbe9c:	6323      	str	r3, [r4, #48]	; 0x30
   dbe9e:	e002      	b.n	dbea6 <_tzset_unlocked_r+0x24e>
   dbea0:	b280      	uxth	r0, r0
   dbea2:	723b      	strb	r3, [r7, #8]
   dbea4:	6178      	str	r0, [r7, #20]
   dbea6:	2302      	movs	r3, #2
   dbea8:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbeac:	2300      	movs	r3, #0
   dbeae:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbeb2:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbeb6:	930a      	str	r3, [sp, #40]	; 0x28
   dbeb8:	f898 3000 	ldrb.w	r3, [r8]
   dbebc:	2b2f      	cmp	r3, #47	; 0x2f
   dbebe:	d10b      	bne.n	dbed8 <_tzset_unlocked_r+0x280>
   dbec0:	9603      	str	r6, [sp, #12]
   dbec2:	f8cd a008 	str.w	sl, [sp, #8]
   dbec6:	9601      	str	r6, [sp, #4]
   dbec8:	f8cd b000 	str.w	fp, [sp]
   dbecc:	4633      	mov	r3, r6
   dbece:	aa07      	add	r2, sp, #28
   dbed0:	491f      	ldr	r1, [pc, #124]	; (dbf50 <_tzset_unlocked_r+0x2f8>)
   dbed2:	4640      	mov	r0, r8
   dbed4:	f7fb f850 	bl	d6f78 <siscanf>
   dbed8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbedc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbee0:	213c      	movs	r1, #60	; 0x3c
   dbee2:	fb01 3302 	mla	r3, r1, r2, r3
   dbee6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbeea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbeee:	fb01 3302 	mla	r3, r1, r2, r3
   dbef2:	61bb      	str	r3, [r7, #24]
   dbef4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dbef6:	f109 0901 	add.w	r9, r9, #1
   dbefa:	f1b9 0f02 	cmp.w	r9, #2
   dbefe:	4445      	add	r5, r8
   dbf00:	f107 071c 	add.w	r7, r7, #28
   dbf04:	f47f af74 	bne.w	dbdf0 <_tzset_unlocked_r+0x198>
   dbf08:	6860      	ldr	r0, [r4, #4]
   dbf0a:	f7ff fdf5 	bl	dbaf8 <__tzcalc_limits>
   dbf0e:	4b08      	ldr	r3, [pc, #32]	; (dbf30 <_tzset_unlocked_r+0x2d8>)
   dbf10:	6a22      	ldr	r2, [r4, #32]
   dbf12:	601a      	str	r2, [r3, #0]
   dbf14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dbf16:	1a9b      	subs	r3, r3, r2
   dbf18:	4a07      	ldr	r2, [pc, #28]	; (dbf38 <_tzset_unlocked_r+0x2e0>)
   dbf1a:	bf18      	it	ne
   dbf1c:	2301      	movne	r3, #1
   dbf1e:	6013      	str	r3, [r2, #0]
   dbf20:	b00d      	add	sp, #52	; 0x34
   dbf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf26:	bf00      	nop
   dbf28:	000dd2a0 	.word	0x000dd2a0
   dbf2c:	2003e7e4 	.word	0x2003e7e4
   dbf30:	2003e7ec 	.word	0x2003e7ec
   dbf34:	000dd2a3 	.word	0x000dd2a3
   dbf38:	2003e7e8 	.word	0x2003e7e8
   dbf3c:	2003e0f8 	.word	0x2003e0f8
   dbf40:	2003e7d7 	.word	0x2003e7d7
   dbf44:	000dd2a7 	.word	0x000dd2a7
   dbf48:	000dd2ca 	.word	0x000dd2ca
   dbf4c:	000dd2b6 	.word	0x000dd2b6
   dbf50:	000dd2c9 	.word	0x000dd2c9
   dbf54:	2003e7cc 	.word	0x2003e7cc

000dbf58 <_findenv_r>:
   dbf58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf5c:	4607      	mov	r7, r0
   dbf5e:	468b      	mov	fp, r1
   dbf60:	4690      	mov	r8, r2
   dbf62:	f000 f8d9 	bl	dc118 <__env_lock>
   dbf66:	4b19      	ldr	r3, [pc, #100]	; (dbfcc <_findenv_r+0x74>)
   dbf68:	681d      	ldr	r5, [r3, #0]
   dbf6a:	469a      	mov	sl, r3
   dbf6c:	b13d      	cbz	r5, dbf7e <_findenv_r+0x26>
   dbf6e:	465c      	mov	r4, fp
   dbf70:	4623      	mov	r3, r4
   dbf72:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbf76:	b142      	cbz	r2, dbf8a <_findenv_r+0x32>
   dbf78:	2a3d      	cmp	r2, #61	; 0x3d
   dbf7a:	461c      	mov	r4, r3
   dbf7c:	d1f8      	bne.n	dbf70 <_findenv_r+0x18>
   dbf7e:	4638      	mov	r0, r7
   dbf80:	f000 f8cb 	bl	dc11a <__env_unlock>
   dbf84:	2000      	movs	r0, #0
   dbf86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf8a:	ebcb 0404 	rsb	r4, fp, r4
   dbf8e:	46a9      	mov	r9, r5
   dbf90:	f859 0b04 	ldr.w	r0, [r9], #4
   dbf94:	2800      	cmp	r0, #0
   dbf96:	d0f2      	beq.n	dbf7e <_findenv_r+0x26>
   dbf98:	4622      	mov	r2, r4
   dbf9a:	4659      	mov	r1, fp
   dbf9c:	f7ff fc6c 	bl	db878 <strncmp>
   dbfa0:	b988      	cbnz	r0, dbfc6 <_findenv_r+0x6e>
   dbfa2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dbfa6:	191e      	adds	r6, r3, r4
   dbfa8:	5d1b      	ldrb	r3, [r3, r4]
   dbfaa:	2b3d      	cmp	r3, #61	; 0x3d
   dbfac:	d10b      	bne.n	dbfc6 <_findenv_r+0x6e>
   dbfae:	f8da 3000 	ldr.w	r3, [sl]
   dbfb2:	1aed      	subs	r5, r5, r3
   dbfb4:	10ad      	asrs	r5, r5, #2
   dbfb6:	4638      	mov	r0, r7
   dbfb8:	f8c8 5000 	str.w	r5, [r8]
   dbfbc:	f000 f8ad 	bl	dc11a <__env_unlock>
   dbfc0:	1c70      	adds	r0, r6, #1
   dbfc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfc6:	464d      	mov	r5, r9
   dbfc8:	e7e1      	b.n	dbf8e <_findenv_r+0x36>
   dbfca:	bf00      	nop
   dbfcc:	2003e140 	.word	0x2003e140

000dbfd0 <_getenv_r>:
   dbfd0:	b507      	push	{r0, r1, r2, lr}
   dbfd2:	aa01      	add	r2, sp, #4
   dbfd4:	f7ff ffc0 	bl	dbf58 <_findenv_r>
   dbfd8:	b003      	add	sp, #12
   dbfda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbfe0 <__gettzinfo>:
   dbfe0:	4800      	ldr	r0, [pc, #0]	; (dbfe4 <__gettzinfo+0x4>)
   dbfe2:	4770      	bx	lr
   dbfe4:	2003e100 	.word	0x2003e100

000dbfe8 <gmtime_r>:
   dbfe8:	6802      	ldr	r2, [r0, #0]
   dbfea:	4b47      	ldr	r3, [pc, #284]	; (dc108 <gmtime_r+0x120>)
   dbfec:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbfee:	fb92 f4f3 	sdiv	r4, r2, r3
   dbff2:	fb03 2214 	mls	r2, r3, r4, r2
   dbff6:	2a00      	cmp	r2, #0
   dbff8:	bfbc      	itt	lt
   dbffa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dbffe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc002:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc006:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc00a:	fb92 f3f0 	sdiv	r3, r2, r0
   dc00e:	fb00 2213 	mls	r2, r0, r3, r2
   dc012:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc016:	bfac      	ite	ge
   dc018:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc01c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc020:	608b      	str	r3, [r1, #8]
   dc022:	fb92 f3f0 	sdiv	r3, r2, r0
   dc026:	fb00 2213 	mls	r2, r0, r3, r2
   dc02a:	604b      	str	r3, [r1, #4]
   dc02c:	600a      	str	r2, [r1, #0]
   dc02e:	2307      	movs	r3, #7
   dc030:	1ce2      	adds	r2, r4, #3
   dc032:	fb92 f3f3 	sdiv	r3, r2, r3
   dc036:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc03a:	1ad3      	subs	r3, r2, r3
   dc03c:	618b      	str	r3, [r1, #24]
   dc03e:	4b33      	ldr	r3, [pc, #204]	; (dc10c <gmtime_r+0x124>)
   dc040:	4d33      	ldr	r5, [pc, #204]	; (dc110 <gmtime_r+0x128>)
   dc042:	fb94 f5f5 	sdiv	r5, r4, r5
   dc046:	fb03 4405 	mla	r4, r3, r5, r4
   dc04a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc04e:	fbb4 f2f2 	udiv	r2, r4, r2
   dc052:	4422      	add	r2, r4
   dc054:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc058:	fbb4 f3f7 	udiv	r3, r4, r7
   dc05c:	1ad2      	subs	r2, r2, r3
   dc05e:	482d      	ldr	r0, [pc, #180]	; (dc114 <gmtime_r+0x12c>)
   dc060:	fbb4 f0f0 	udiv	r0, r4, r0
   dc064:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc068:	1a13      	subs	r3, r2, r0
   dc06a:	fbb3 f6f6 	udiv	r6, r3, r6
   dc06e:	4434      	add	r4, r6
   dc070:	f240 126d 	movw	r2, #365	; 0x16d
   dc074:	fbb3 f0f2 	udiv	r0, r3, r2
   dc078:	fbb3 f3f7 	udiv	r3, r3, r7
   dc07c:	1ae3      	subs	r3, r4, r3
   dc07e:	fb02 3310 	mls	r3, r2, r0, r3
   dc082:	2499      	movs	r4, #153	; 0x99
   dc084:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc088:	3202      	adds	r2, #2
   dc08a:	fbb2 f2f4 	udiv	r2, r2, r4
   dc08e:	2a0a      	cmp	r2, #10
   dc090:	fb04 f402 	mul.w	r4, r4, r2
   dc094:	f104 0602 	add.w	r6, r4, #2
   dc098:	f04f 0405 	mov.w	r4, #5
   dc09c:	fbb6 f4f4 	udiv	r4, r6, r4
   dc0a0:	bf34      	ite	cc
   dc0a2:	2602      	movcc	r6, #2
   dc0a4:	f06f 0609 	mvncs.w	r6, #9
   dc0a8:	4416      	add	r6, r2
   dc0aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc0ae:	fb02 0505 	mla	r5, r2, r5, r0
   dc0b2:	1c5f      	adds	r7, r3, #1
   dc0b4:	2e01      	cmp	r6, #1
   dc0b6:	bf98      	it	ls
   dc0b8:	3501      	addls	r5, #1
   dc0ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc0be:	eba7 0704 	sub.w	r7, r7, r4
   dc0c2:	d302      	bcc.n	dc0ca <gmtime_r+0xe2>
   dc0c4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc0c8:	e014      	b.n	dc0f4 <gmtime_r+0x10c>
   dc0ca:	0782      	lsls	r2, r0, #30
   dc0cc:	d105      	bne.n	dc0da <gmtime_r+0xf2>
   dc0ce:	2464      	movs	r4, #100	; 0x64
   dc0d0:	fbb0 f2f4 	udiv	r2, r0, r4
   dc0d4:	fb04 0212 	mls	r2, r4, r2, r0
   dc0d8:	b94a      	cbnz	r2, dc0ee <gmtime_r+0x106>
   dc0da:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc0de:	fbb0 f4f2 	udiv	r4, r0, r2
   dc0e2:	fb02 0014 	mls	r0, r2, r4, r0
   dc0e6:	fab0 f280 	clz	r2, r0
   dc0ea:	0952      	lsrs	r2, r2, #5
   dc0ec:	e000      	b.n	dc0f0 <gmtime_r+0x108>
   dc0ee:	2201      	movs	r2, #1
   dc0f0:	333b      	adds	r3, #59	; 0x3b
   dc0f2:	441a      	add	r2, r3
   dc0f4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc0f8:	2300      	movs	r3, #0
   dc0fa:	61ca      	str	r2, [r1, #28]
   dc0fc:	614d      	str	r5, [r1, #20]
   dc0fe:	610e      	str	r6, [r1, #16]
   dc100:	60cf      	str	r7, [r1, #12]
   dc102:	620b      	str	r3, [r1, #32]
   dc104:	4608      	mov	r0, r1
   dc106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc108:	00015180 	.word	0x00015180
   dc10c:	fffdc54f 	.word	0xfffdc54f
   dc110:	00023ab1 	.word	0x00023ab1
   dc114:	00023ab0 	.word	0x00023ab0

000dc118 <__env_lock>:
   dc118:	4770      	bx	lr

000dc11a <__env_unlock>:
   dc11a:	4770      	bx	lr

000dc11c <dynalib_user>:
   dc11c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dc12c:	0000 0000                                   ....

000dc130 <_ZTV16JsonWriterStaticILj256EE>:
	...
   dc138:	40d1 000d 40e5 000d 6854 2065 6925 3e20     .@...@..The %i >
   dc148:	2520 2c69 7420 7275 696e 676e 6f20 206e      %i, turning on 
   dc158:	7570 706d 0a00 0a20 5420 6568 2520 2069     pump.. . The %i 
   dc168:	203c 6925 6e20 206f 6177 6574 2072 656e     < %i no water ne
   dc178:	6465 6465 4100 2074 7325 7420 6568 6d20     eded.At %s the m
   dc188:	696f 7473 7275 2065 6572 6461 6e69 2067     oisture reading 
   dc198:	7369 2520 2069 000a 6854 2065 6974 656d     is %i ..The time
   dc1a8:	6920 2073 7325 0a20 2c00 4800 6c65 6f6c      is %s ..,.Hello
   dc1b8:	202c 6f77 6c72 2164 4200 454d 3832 2030     , world!.BME280 
   dc1c8:	6574 7473 4300 756f 646c 6e20 746f 6620     test.Could not f
   dc1d8:	6e69 2064 2061 6176 696c 2064 4d42 3245     ind a valid BME2
   dc1e8:	3038 7320 6e65 6f73 2c72 6320 6568 6b63     80 sensor, check
   dc1f8:	7720 7269 6e69 2c67 6120 6464 6572 7373      wiring, address
   dc208:	202c 6573 736e 726f 4920 2144 5300 6e65     , sensor ID!.Sen
   dc218:	6f73 4972 2044 6177 3a73 3020 0078 2020     sorID was: 0x.  
   dc228:	2020 2020 2020 4449 6f20 2066 7830 4646           ID of 0xFF
   dc238:	7020 6f72 6162 6c62 2079 656d 6e61 2073      probably means 
   dc248:	2061 6162 2064 6461 7264 7365 2c73 6120     a bad address, a
   dc258:	4220 504d 3120 3038 6f20 2072 4d42 2050      BMP 180 or BMP 
   dc268:	3830 0a35 2000 2020 4449 6f20 2066 7830     085..   ID of 0x
   dc278:	3635 302d 3578 2038 6572 7270 7365 6e65     56-0x58 represen
   dc288:	7374 6120 4220 504d 3220 3038 0a2c 2000     ts a BMP 280,.. 
   dc298:	2020 2020 2020 4920 2044 666f 3020 3678            ID of 0x6
   dc2a8:	2030 6572 7270 7365 6e65 7374 6120 4220     0 represents a B
   dc2b8:	454d 3220 3038 0a2e 2000 2020 2020 2020     ME 280...       
   dc2c8:	4920 2044 666f 3020 3678 2031 6572 7270      ID of 0x61 repr
   dc2d8:	7365 6e65 7374 6120 4220 454d 3620 3038     esents a BME 680
   dc2e8:	0a2e 5000 616c 746e 5720 7461 7265 6465     ...Plant Watered
   dc2f8:	6500 766e 762d 6c61 0073 6554 706d 7265     .env-vals.Temper
   dc308:	7461 7275 2065 6156 756c 2065 203d 3025     ature Value = %0
   dc318:	322e 2066 000a 7250 7365 7573 6572 5620     .2f ..Pressure V
   dc328:	6c61 6575 3d20 2520 2e30 6632 0a20 4800     alue = %0.2f ..H
   dc338:	6d75 6469 7469 2079 6156 756c 2065 203d     umidity Value = 
   dc348:	3025 322e 2066 000a 6f53 6c69 4d20 696f     %0.2f ..Soil Moi
   dc358:	7473 7275 2065 6156 756c 2065 203d 6425     sture Value = %d
   dc368:	0a20 4400 7375 2074 6156 756c 2065 203d      ..Dust Value = 
   dc378:	3025 322e 2066 000a 6e45 6976 6f72 6d6e     %0.2f ..Environm
   dc388:	6e65 6174 206c 6552 6461 6e69 0067 6554     ental Reading.Te
   dc398:	706d 7265 7461 7275 2865 2946 2520 2e30     mperature(F) %0.
   dc3a8:	6632 000a 7250 7365 7573 6572 2820 5068     2f..Pressure (hP
   dc3b8:	2961 2520 2e30 6632 000a 7548 696d 6964     a) %0.2f..Humidi
   dc3c8:	7974 2820 7225 2948 2020 3025 322e 0a66     ty (%rH)  %0.2f.
   dc3d8:	4400 7375 2074 654c 6576 3a6c 2520 2e30     .Dust Level: %0.
   dc3e8:	6632 0a20 4d00 696f 7473 7275 3a65 2520     2f ..Moisture: %
   dc3f8:	2064 000a 2578 2069 4200 7475 6f74 206e     d ..x%i .Button 
   dc408:	7453 7461 2065 7369 2520 2069 000a 6172     State is %i ..ra
   dc418:	6873 7061 6900 2e6f 6461 6661 7572 7469     shap.io.adafruit
   dc428:	632e 6d6f 3500 3839 3631 6639 3361 6162     .com.598169fa3ba
   dc438:	3439 3336 3936 3134 3361 3033 3739 6536     94636941a330976e
   dc448:	3234 3265 0063 6172 6873 7061 662f 6565     42e2c.rashap/fee
   dc458:	7364 482f 6d6f 5f65 6554 706d 7265 7461     ds/Home_Temperat
   dc468:	7275 0065 6172 6873 7061 662f 6565 7364     ure.rashap/feeds
   dc478:	482f 6d6f 5f65 6f4d 7369 7574 6572 7200     /Home_Moisture.r
   dc488:	7361 6168 2f70 6566 6465 2f73 6f48 656d     ashap/feeds/Home
   dc498:	575f 7461 7265 7200 7361 6168 2f70 6566     _Water.rashap/fe
   dc4a8:	6465 2f73 6f48 656d 505f 6572 7373 7275     eds/Home_Pressur
   dc4b8:	0065 6172 6873 7061 662f 6565 7364 482f     e.rashap/feeds/H
   dc4c8:	6d6f 5f65 7548 696d 6964 7974 7200 7361     ome_Humidity.ras
   dc4d8:	6168 2f70 6566 6465 2f73 6f48 656d 445f     hap/feeds/Home_D
   dc4e8:	7375 0074 6172 6873 7061 662f 6565 7364     ust.rashap/feeds
   dc4f8:	4c2f 4445 4f5f 006e                         /LED_On.

000dc500 <_ZTVN8particle13__SPISettingsE>:
	...
   dc508:	4be9 000d 6564 6166 6c75 2074 4d00 4253     .K..default .MSB
   dc518:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dc528:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dc538:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dc548:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dc554 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dc55c:	40cf 000d 4a77 000d 54f7 000d 55a3 000d     .@..wJ...T...U..
   dc56c:	55d5 000d 550b 000d 554b 000d               .U...U..KU..

000dc578 <_ZTV13Adafruit_MQTT>:
	...
   dc588:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dc598:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   dc5a8:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   dc5b8:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   dc5c8:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   dc5d8:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   dc5e8:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   dc5f8:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   dc608:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   dc618:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   dc628:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   dc638:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   dc648:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   dc658:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   dc668:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   dc678:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   dc688:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   dc698:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   dc6a8:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   dc6b8:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   dc6c8:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   dc6d8:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   dc6e8:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   dc6f8:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   dc708:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   dc718:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   dc728:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dc738:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dc748:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dc758:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dc768:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dc778:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dc788:	7465 6961 736c 002e                         etails..

000dc790 <_ZTV10JsonBuffer>:
	...
   dc798:	5bfd 000d 5c19 000d                         .[...\..

000dc7a0 <_ZTV10JsonWriter>:
	...
   dc7a8:	5c2d 000d 5c41 000d 6c25 0075 3025 7834     -\..A\..%lu.%04x
   dc7b8:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dc7c8:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dc7d8:	2500 666c 0000 0000                         .%lf....

000dc7e0 <_ZTV16Adafruit_SSD1306>:
	...
   dc7e8:	40cd 000d 4a69 000d 68bd 000d 7559 000d     .@..iJ...h..Yu..
   dc7f8:	61b9 000d 65bd 000d 6041 000d 5ecd 000d     .a...e..A`...^..
   dc808:	667d 000d 6713 000d 674b 000d 6767 000d     }f...g..Kg..gg..

000dc818 <_ZTV12Adafruit_GFX>:
	...
   dc828:	68bd 000d 7559 000d 40a9 000d 65bd 000d     .h..Yu...@...e..
   dc838:	66dd 000d 66f9 000d 667d 000d 6713 000d     .f...f..}f...g..
   dc848:	674b 000d 6767 000d                         Kg..gg..

000dc850 <_ZL4font>:
   dc850:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dc860:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dc870:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dc880:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dc890:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dc8a0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dc8b0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dc8c0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dc8d0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dc8e0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dc8f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dc900:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dc910:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dc920:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dc930:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dc940:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dc950:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dc960:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dc970:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dc980:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dc990:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dc9a0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dc9b0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dc9c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dc9d0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dc9e0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dc9f0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dca00:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dca10:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dca20:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dca30:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dca40:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dca50:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dca60:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dca70:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dca80:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dca90:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dcaa0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dcab0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dcac0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dcad0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dcae0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dcaf0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dcb00:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dcb10:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dcb20:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dcb30:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dcb40:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dcb50:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dcb60:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dcb70:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dcb80:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dcb90:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dcba0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dcbb0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dcbc0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dcbd0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dcbe0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dcbf0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dcc00:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dcc10:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dcc20:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dcc30:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dcc40:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dcc50:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dcc60:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dcc70:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dcc80:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dcc90:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dcca0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dccb0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dccc0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dccd0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dcce0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dccf0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   dcd00:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dcd10:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dcd20:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dcd30:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dcd40:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dcd4c <_ZTVN5spark13EthernetClassE>:
	...
   dcd54:	7027 000d 701d 000d 7013 000d 7009 000d     'p...p...p...p..
   dcd64:	6ffd 000d 6ff1 000d 6fe5 000d 6fdd 000d     .o...o...o...o..
   dcd74:	6fd3 000d 6fc9 000d 8cb5 000d               .o...o......

000dcd80 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dcd80:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dcd90:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   dcda0:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dcdb0:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dcdc0:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dcdd0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dcde0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dcdf0:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dce00:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dce10:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   dce20:	2065 203d 2500 0069 6564 6174 6c69 2073     e = .%i.details 
   dce30:	203d 0d00 000a 6e6c 6600 006e 6f63 6564     = ....ln.fn.code
   dce40:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dce50:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   dce60:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   dce70:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   dce80:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000dce90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dce98:	7ae5 000d 7aeb 000d 7b2f 000d 7af9 000d     .z...z../{...z..
   dcea8:	7ae7 000d                                   .z..

000dceac <_ZTV9IPAddress>:
	...
   dceb4:	807d 000d 806d 000d 806f 000d               }...m...o...

000dcec0 <_ZTV9USBSerial>:
	...
   dcec8:	8181 000d 81d1 000d 81df 000d 7559 000d     ............Yu..
   dced8:	81bd 000d 8183 000d 8199 000d 81cb 000d     ................
   dcee8:	81af 000d 817d 000d                         ....}...

000dcef0 <_ZTV11USARTSerial>:
	...
   dcef8:	828d 000d 82dd 000d 82eb 000d 7559 000d     ............Yu..
   dcf08:	82a1 000d 82c3 000d 82af 000d 82d7 000d     ................
   dcf18:	828f 000d 8293 000d                         ........

000dcf20 <_ZTV7TwoWire>:
	...
   dcf28:	83b9 000d 8403 000d 83db 000d 83bb 000d     ................
   dcf38:	83e3 000d 83eb 000d 83f3 000d 83fb 000d     ................

000dcf48 <_ZTVN5spark9MeshClassE>:
	...
   dcf50:	8525 000d 851b 000d 8511 000d 8507 000d     %...............
   dcf60:	84fb 000d 84ef 000d 84e3 000d 84db 000d     ................
   dcf70:	84d1 000d 84c7 000d 8cb5 000d               ............

000dcf7c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dcf84:	86c9 000d 86cf 000d 8bb7 000d 86dd 000d     ................
   dcf94:	86cb 000d                                   ....

000dcf98 <_ZTV9TCPClient>:
	...
   dcfa0:	411d 000d 413d 000d 8641 000d 865b 000d     .A..=A..A...[...
   dcfb0:	8a5d 000d 87af 000d 8781 000d 8685 000d     ]...............
   dcfc0:	8939 000d 8835 000d 87e3 000d 8a2d 000d     9...5.......-...
   dcfd0:	8687 000d 86bf 000d 866d 000d 86e1 000d     ........m.......
   dcfe0:	8761 000d 6977 6972 676e 7200 6365 2076     a...wiring.recv 
   dcff0:	7265 6f72 2072 203d 6425 0000               error = %d..

000dcffc <_ZTVN5spark9WiFiClassE>:
	...
   dd004:	8c2d 000d 8c23 000d 8c19 000d 8bcf 000d     -...#...........
   dd014:	8c0d 000d 8c01 000d 8bf5 000d 8bed 000d     ................
   dd024:	8be3 000d 8bd9 000d 8cb5 000d               ............

000dd030 <_ZTVN5spark12NetworkClassE>:
	...
   dd038:	8c4d 000d 8c57 000d 8c61 000d 8c6b 000d     M...W...a...k...
   dd048:	8c75 000d 8c81 000d 8c8d 000d 8c99 000d     u...............
   dd058:	8ca1 000d 8cab 000d 8cb5 000d               ............

000dd064 <_ZSt7nothrow>:
   dd064:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dd070 <TWO52>:
   dd070:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dd080 <day_name.4725>:
   dd080:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd090:	6972 6153 4a74                                   riSat

000dd095 <mon_name.4726>:
   dd095:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd0a5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd0b5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd0c5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd0d5:	6425 000a                                   %d..

000dd0d9 <_ctype_>:
   dd0d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd0e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd0f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd109:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd119:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd129:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd139:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd149:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd159:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd1dc <__sf_fake_stdin>:
	...

000dd1fc <__sf_fake_stdout>:
	...

000dd21c <__sf_fake_stderr>:
	...
   dd23c:	0043 0000                                   C...

000dd240 <__month_lengths>:
   dd240:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd250:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd260:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd270:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd280:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd290:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd2a0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dd2b0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dd2c0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dd2d0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dd2dc <link_const_variable_data_end>:
   dd2dc:	000d4a85 	.word	0x000d4a85
   dd2e0:	000d54f3 	.word	0x000d54f3
   dd2e4:	000d5635 	.word	0x000d5635
   dd2e8:	000d5bf7 	.word	0x000d5bf7
   dd2ec:	000d5ec9 	.word	0x000d5ec9
   dd2f0:	000d65b9 	.word	0x000d65b9
   dd2f4:	000d694d 	.word	0x000d694d
   dd2f8:	000d7031 	.word	0x000d7031
   dd2fc:	000d72b9 	.word	0x000d72b9
   dd300:	000d7531 	.word	0x000d7531
   dd304:	000d7869 	.word	0x000d7869
   dd308:	000d7961 	.word	0x000d7961
   dd30c:	000d79b9 	.word	0x000d79b9
   dd310:	000d85f1 	.word	0x000d85f1
   dd314:	000d8c39 	.word	0x000d8c39
   dd318:	000d8d81 	.word	0x000d8d81
   dd31c:	000d8fbd 	.word	0x000d8fbd
   dd320:	000d9041 	.word	0x000d9041
   dd324:	000d9105 	.word	0x000d9105
   dd328:	000d91c9 	.word	0x000d91c9

000dd32c <link_constructors_end>:
   dd32c:	00000000 	.word	0x00000000
