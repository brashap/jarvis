
c:/Users/iotpa/Documents/jarvis/PlantWater/target/1.5.0/argon/PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004a14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8a30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000cc  2003e120  000d8a34  0001e120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000604  2003e1ec  2003e1ec  0002e1ec  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8b00  000d8b00  00028b00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8b28  000d8b28  00028b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010c3bb  00000000  00000000  00028b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000151e2  00000000  00000000  00134ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025dac  00000000  00000000  0014a0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ed8  00000000  00000000  0016fe75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005740  00000000  00000000  00172d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003aaee  00000000  00000000  0017848d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000338fe  00000000  00000000  001b2f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010ca54  00000000  00000000  001e6879  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ee78  00000000  00000000  002f32d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fb2f 	bl	d7690 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fb4f 	bl	d76dc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e120 	.word	0x2003e120
   d4048:	000d8a34 	.word	0x000d8a34
   d404c:	2003e1ec 	.word	0x2003e1ec
   d4050:	2003e1ec 	.word	0x2003e1ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe4f 	bl	d5cfc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8a30 	.word	0x000d8a30
   d4080:	000d89ec 	.word	0x000d89ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b838 	b.w	d40f8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9a5 	bl	d43d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bdf5 	b.w	d5c80 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 ba2f 	b.w	d54f8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 ba35 	b.w	d5508 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 ba33 	b.w	d5508 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 f948 	bl	d5340 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d50c1 	.word	0x000d50c1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c8:	4770      	bx	lr
	...

000d40cc <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4b03      	ldr	r3, [pc, #12]	; (d40dc <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d0:	6003      	str	r3, [r0, #0]
   d40d2:	4604      	mov	r4, r0
   d40d4:	f000 faf4 	bl	d46c0 <_ZN10JsonWriterD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}
   d40dc:	000d80b0 	.word	0x000d80b0

000d40e0 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e0:	b510      	push	{r4, lr}
   d40e2:	4604      	mov	r4, r0
   d40e4:	f7ff fff2 	bl	d40cc <_ZN16JsonWriterStaticILj256EED1Ev>
   d40e8:	4620      	mov	r0, r4
   d40ea:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40ee:	f003 f817 	bl	d7120 <_ZdlPvj>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}
	...

000d40f8 <setup>:
int button;
int i;

int delayStart;

void setup() {
   d40f8:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40fa:	f002 f9d9 	bl	d64b0 <_Z16_fetch_usbserialv>
   d40fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4102:	f002 f9c9 	bl	d6498 <_ZN9USBSerial5beginEl>
  pinMode(soilPin,INPUT);
   d4106:	4b1a      	ldr	r3, [pc, #104]	; (d4170 <setup+0x78>)
  pinMode(pumpPin,OUTPUT);
   d4108:	4c1a      	ldr	r4, [pc, #104]	; (d4174 <setup+0x7c>)

int delayStart;

void setup() {
  Serial.begin(9600);
  pinMode(soilPin,INPUT);
   d410a:	8818      	ldrh	r0, [r3, #0]
   d410c:	2100      	movs	r1, #0
   d410e:	f002 ff57 	bl	d6fc0 <pinMode>
  pinMode(pumpPin,OUTPUT);
   d4112:	2101      	movs	r1, #1
   d4114:	8820      	ldrh	r0, [r4, #0]
   d4116:	f002 ff53 	bl	d6fc0 <pinMode>
  pinMode(D7,OUTPUT);
   d411a:	2101      	movs	r1, #1
   d411c:	2007      	movs	r0, #7
   d411e:	f002 ff4f 	bl	d6fc0 <pinMode>
  digitalWrite(pumpPin,LOW);
   d4122:	2100      	movs	r1, #0
   d4124:	8820      	ldrh	r0, [r4, #0]
   d4126:	f002 ff5c 	bl	d6fe2 <digitalWrite>
  Time.zone(-6); // set timezone to MDT
   d412a:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d412e:	f001 fce9 	bl	d5b04 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4132:	f001 f9b9 	bl	d54a8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4136:	b110      	cbz	r0, d413e <setup+0x46>
            return false;
        }
        return spark_sync_time(NULL);
   d4138:	2000      	movs	r0, #0
   d413a:	f001 f9c5 	bl	d54c8 <spark_sync_time>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d413e:	2300      	movs	r3, #0
   d4140:	2202      	movs	r2, #2
   d4142:	490d      	ldr	r1, [pc, #52]	; (d4178 <setup+0x80>)
   d4144:	480d      	ldr	r0, [pc, #52]	; (d417c <setup+0x84>)
   d4146:	f001 f99f 	bl	d5488 <spark_variable>
   d414a:	2300      	movs	r3, #0
   d414c:	2202      	movs	r2, #2
   d414e:	490c      	ldr	r1, [pc, #48]	; (d4180 <setup+0x88>)
   d4150:	480c      	ldr	r0, [pc, #48]	; (d4184 <setup+0x8c>)
   d4152:	f001 f999 	bl	d5488 <spark_variable>
   d4156:	490c      	ldr	r1, [pc, #48]	; (d4188 <setup+0x90>)
   d4158:	480c      	ldr	r0, [pc, #48]	; (d418c <setup+0x94>)
   d415a:	2300      	movs	r3, #0
   d415c:	2201      	movs	r2, #1
   d415e:	f001 f993 	bl	d5488 <spark_variable>
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <setup+0x98>)
   d4164:	480b      	ldr	r0, [pc, #44]	; (d4194 <setup+0x9c>)
}
   d4166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Particle.variable("Moisture", moist);
  Particle.variable("Temperature", temp);
  Particle.variable("Plant Watered", watered);

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
   d416a:	f000 bd31 	b.w	d4bd0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d416e:	bf00      	nop
   d4170:	2003e124 	.word	0x2003e124
   d4174:	2003e12c 	.word	0x2003e12c
   d4178:	2003e37c 	.word	0x2003e37c
   d417c:	000d81b9 	.word	0x000d81b9
   d4180:	2003e214 	.word	0x2003e214
   d4184:	000d819b 	.word	0x000d819b
   d4188:	2003e378 	.word	0x2003e378
   d418c:	000d80b8 	.word	0x000d80b8
   d4190:	2003e2fc 	.word	0x2003e2fc
   d4194:	2003e228 	.word	0x2003e228

000d4198 <_Z10waterPlanti>:
          }
        }
    }    
}

bool waterPlant(int moistVal) {
   d4198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(moistVal > threshold) {
   d419a:	4c16      	ldr	r4, [pc, #88]	; (d41f4 <_Z10waterPlanti+0x5c>)
   d419c:	4d16      	ldr	r5, [pc, #88]	; (d41f8 <_Z10waterPlanti+0x60>)
   d419e:	6823      	ldr	r3, [r4, #0]
   d41a0:	4283      	cmp	r3, r0
   d41a2:	da1b      	bge.n	d41dc <_Z10waterPlanti+0x44>
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
   d41a4:	f002 f984 	bl	d64b0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41a8:	6823      	ldr	r3, [r4, #0]
   d41aa:	4a14      	ldr	r2, [pc, #80]	; (d41fc <_Z10waterPlanti+0x64>)
   d41ac:	9300      	str	r3, [sp, #0]
   d41ae:	2101      	movs	r1, #1
   d41b0:	682b      	ldr	r3, [r5, #0]
    delay(1000);
    digitalWrite(pumpPin,HIGH);
   d41b2:	4c13      	ldr	r4, [pc, #76]	; (d4200 <_Z10waterPlanti+0x68>)
   d41b4:	f001 fc55 	bl	d5a62 <_ZN5Print11printf_implEbPKcz>
}

bool waterPlant(int moistVal) {
  if(moistVal > threshold) {
    Serial.printlnf("The %i > %i, turning on pump", moist, threshold);
    delay(1000);
   d41b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41bc:	f001 fd12 	bl	d5be4 <delay>
    digitalWrite(pumpPin,HIGH);
   d41c0:	2101      	movs	r1, #1
   d41c2:	8820      	ldrh	r0, [r4, #0]
   d41c4:	f002 ff0d 	bl	d6fe2 <digitalWrite>
    delay(waterTime);
   d41c8:	4b0e      	ldr	r3, [pc, #56]	; (d4204 <_Z10waterPlanti+0x6c>)
   d41ca:	6818      	ldr	r0, [r3, #0]
   d41cc:	f001 fd0a 	bl	d5be4 <delay>
    digitalWrite(pumpPin,LOW);
   d41d0:	8820      	ldrh	r0, [r4, #0]
   d41d2:	2100      	movs	r1, #0
   d41d4:	f002 ff05 	bl	d6fe2 <digitalWrite>
   d41d8:	2001      	movs	r0, #1
   d41da:	e009      	b.n	d41f0 <_Z10waterPlanti+0x58>
    return true;
  }
  else
  {
    Serial.printlnf("The %i < %i no water needed", moist, threshold);
   d41dc:	f002 f968 	bl	d64b0 <_Z16_fetch_usbserialv>
   d41e0:	6823      	ldr	r3, [r4, #0]
   d41e2:	9300      	str	r3, [sp, #0]
   d41e4:	4a08      	ldr	r2, [pc, #32]	; (d4208 <_Z10waterPlanti+0x70>)
   d41e6:	682b      	ldr	r3, [r5, #0]
   d41e8:	2101      	movs	r1, #1
   d41ea:	f001 fc3a 	bl	d5a62 <_ZN5Print11printf_implEbPKcz>
    return false;
   d41ee:	2000      	movs	r0, #0
  }
    
}
   d41f0:	b003      	add	sp, #12
   d41f2:	bd30      	pop	{r4, r5, pc}
   d41f4:	2003e120 	.word	0x2003e120
   d41f8:	2003e37c 	.word	0x2003e37c
   d41fc:	000d80c6 	.word	0x000d80c6
   d4200:	2003e12c 	.word	0x2003e12c
   d4204:	2003e130 	.word	0x2003e130
   d4208:	000d80e3 	.word	0x000d80e3

000d420c <_Z10printMoisti>:


void printMoist(int moistVal) {
   d420c:	b570      	push	{r4, r5, r6, lr}
   d420e:	b086      	sub	sp, #24
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4210:	f001 fcd7 	bl	d5bc2 <_ZN9TimeClass3nowEv>
  t = Time.timeStr(); 
   d4214:	4c1f      	ldr	r4, [pc, #124]	; (d4294 <_Z10printMoisti+0x88>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4216:	4e20      	ldr	r6, [pc, #128]	; (d4298 <_Z10printMoisti+0x8c>)
   d4218:	4d20      	ldr	r5, [pc, #128]	; (d429c <_Z10printMoisti+0x90>)
   d421a:	4601      	mov	r1, r0
   d421c:	a802      	add	r0, sp, #8
   d421e:	f001 fc8d 	bl	d5b3c <_ZN9TimeClass7timeStrEl>
   d4222:	a902      	add	r1, sp, #8
   d4224:	4620      	mov	r0, r4
   d4226:	f001 fb34 	bl	d5892 <_ZN6StringaSEOS_>
   d422a:	a802      	add	r0, sp, #8
   d422c:	f001 faba 	bl	d57a4 <_ZN6StringD1Ev>
   d4230:	4631      	mov	r1, r6
   d4232:	4620      	mov	r0, r4
   d4234:	2300      	movs	r3, #0
   d4236:	2219      	movs	r2, #25
   d4238:	f001 fb57 	bl	d58ea <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2 = t.substring(11,19);
   d423c:	4621      	mov	r1, r4
   d423e:	4c18      	ldr	r4, [pc, #96]	; (d42a0 <_Z10printMoisti+0x94>)
   d4240:	2313      	movs	r3, #19
   d4242:	220b      	movs	r2, #11
   d4244:	a802      	add	r0, sp, #8
   d4246:	f001 fb69 	bl	d591c <_ZNK6String9substringEjj>
   d424a:	a902      	add	r1, sp, #8
   d424c:	4620      	mov	r0, r4
   d424e:	f001 fb20 	bl	d5892 <_ZN6StringaSEOS_>
   d4252:	a802      	add	r0, sp, #8
   d4254:	f001 faa6 	bl	d57a4 <_ZN6StringD1Ev>
   d4258:	2300      	movs	r3, #0
   d425a:	2209      	movs	r2, #9
   d425c:	4629      	mov	r1, r5
   d425e:	4620      	mov	r0, r4
   d4260:	f001 fb43 	bl	d58ea <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
  Serial.println(t2);
   d4264:	f002 f924 	bl	d64b0 <_Z16_fetch_usbserialv>
   d4268:	6821      	ldr	r1, [r4, #0]
   d426a:	f001 fbd0 	bl	d5a0e <_ZN5Print7printlnEPKc>
  Serial.printf("At %s the moisture reading is %i \n",currentTime,moist);
   d426e:	f002 f91f 	bl	d64b0 <_Z16_fetch_usbserialv>
   d4272:	4b0c      	ldr	r3, [pc, #48]	; (d42a4 <_Z10printMoisti+0x98>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4274:	4a0c      	ldr	r2, [pc, #48]	; (d42a8 <_Z10printMoisti+0x9c>)
   d4276:	681b      	ldr	r3, [r3, #0]
   d4278:	9300      	str	r3, [sp, #0]
   d427a:	2100      	movs	r1, #0
   d427c:	4633      	mov	r3, r6
   d427e:	f001 fbf0 	bl	d5a62 <_ZN5Print11printf_implEbPKcz>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
   d4282:	f002 f915 	bl	d64b0 <_Z16_fetch_usbserialv>
   d4286:	462b      	mov	r3, r5
   d4288:	4a08      	ldr	r2, [pc, #32]	; (d42ac <_Z10printMoisti+0xa0>)
   d428a:	2100      	movs	r1, #0
   d428c:	f001 fbe9 	bl	d5a62 <_ZN5Print11printf_implEbPKcz>
}
   d4290:	b006      	add	sp, #24
   d4292:	bd70      	pop	{r4, r5, r6, pc}
   d4294:	2003e368 	.word	0x2003e368
   d4298:	2003e380 	.word	0x2003e380
   d429c:	2003e1f0 	.word	0x2003e1f0
   d42a0:	2003e218 	.word	0x2003e218
   d42a4:	2003e37c 	.word	0x2003e37c
   d42a8:	000d80ff 	.word	0x000d80ff
   d42ac:	000d8122 	.word	0x000d8122

000d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42b2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42b6:	b17c      	cbz	r4, d42d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42b8:	6863      	ldr	r3, [r4, #4]
   d42ba:	3b01      	subs	r3, #1
   d42bc:	6063      	str	r3, [r4, #4]
   d42be:	b95b      	cbnz	r3, d42d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42c0:	6823      	ldr	r3, [r4, #0]
   d42c2:	4620      	mov	r0, r4
   d42c4:	689b      	ldr	r3, [r3, #8]
   d42c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42c8:	68a3      	ldr	r3, [r4, #8]
   d42ca:	3b01      	subs	r3, #1
   d42cc:	60a3      	str	r3, [r4, #8]
   d42ce:	b91b      	cbnz	r3, d42d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42d0:	6823      	ldr	r3, [r4, #0]
   d42d2:	4620      	mov	r0, r4
   d42d4:	68db      	ldr	r3, [r3, #12]
   d42d6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42d8:	4628      	mov	r0, r5
   d42da:	bd38      	pop	{r3, r4, r5, pc}

000d42dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d42dc:	b510      	push	{r4, lr}
   d42de:	4b04      	ldr	r3, [pc, #16]	; (d42f0 <_ZN9TCPClientD1Ev+0x14>)
   d42e0:	4604      	mov	r4, r0
   d42e2:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42e6:	f7ff ffe3 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ea:	4620      	mov	r0, r4
   d42ec:	bd10      	pop	{r4, pc}
   d42ee:	bf00      	nop
   d42f0:	000d86cc 	.word	0x000d86cc

000d42f4 <_ZN9TCPClientD0Ev>:
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	f7ff fff0 	bl	d42dc <_ZN9TCPClientD1Ev>
   d42fc:	4620      	mov	r0, r4
   d42fe:	211c      	movs	r1, #28
   d4300:	f002 ff0e 	bl	d7120 <_ZdlPvj>
   d4304:	4620      	mov	r0, r4
   d4306:	bd10      	pop	{r4, pc}

000d4308 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4308:	b570      	push	{r4, r5, r6, lr}
   d430a:	4604      	mov	r4, r0
   d430c:	460e      	mov	r6, r1
   d430e:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4310:	f000 fade 	bl	d48d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4314:	2201      	movs	r2, #1
   d4316:	4631      	mov	r1, r6
   d4318:	4620      	mov	r0, r4
   d431a:	f000 fa4d 	bl	d47b8 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d431e:	4620      	mov	r0, r4
   d4320:	213a      	movs	r1, #58	; 0x3a
   d4322:	f000 f9fd 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4326:	462a      	mov	r2, r5
   d4328:	4620      	mov	r0, r4
   d432a:	4902      	ldr	r1, [pc, #8]	; (d4334 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d432c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4330:	f000 ba35 	b.w	d479e <_ZN10JsonWriter13insertsprintfEPKcz>
   d4334:	000d8724 	.word	0x000d8724

000d4338 <_Z18createEventPayLoadiib>:

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
   d4338:	b570      	push	{r4, r5, r6, lr}
   d433a:	b0d2      	sub	sp, #328	; 0x148
   d433c:	4606      	mov	r6, r0
   d433e:	460d      	mov	r5, r1
   d4340:	4614      	mov	r4, r2
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4342:	a912      	add	r1, sp, #72	; 0x48
   d4344:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4348:	a806      	add	r0, sp, #24
   d434a:	f000 f9d7 	bl	d46fc <_ZN10JsonWriterC1EPcj>
   d434e:	4b1c      	ldr	r3, [pc, #112]	; (d43c0 <_Z18createEventPayLoadiib+0x88>)
   d4350:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4352:	227d      	movs	r2, #125	; 0x7d
   d4354:	217b      	movs	r1, #123	; 0x7b
   d4356:	a806      	add	r0, sp, #24
   d4358:	f000 fac5 	bl	d48e6 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Moisture", moistValue);
   d435c:	4632      	mov	r2, r6
   d435e:	a806      	add	r0, sp, #24
   d4360:	4918      	ldr	r1, [pc, #96]	; (d43c4 <_Z18createEventPayLoadiib+0x8c>)
   d4362:	f7ff ffd1 	bl	d4308 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Temperature", tempValue);
   d4366:	462a      	mov	r2, r5
   d4368:	4917      	ldr	r1, [pc, #92]	; (d43c8 <_Z18createEventPayLoadiib+0x90>)
   d436a:	a806      	add	r0, sp, #24
   d436c:	f7ff ffcc 	bl	d4308 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4370:	a806      	add	r0, sp, #24
   d4372:	f000 faad 	bl	d48d0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4376:	2201      	movs	r2, #1
   d4378:	a806      	add	r0, sp, #24
   d437a:	4914      	ldr	r1, [pc, #80]	; (d43cc <_Z18createEventPayLoadiib+0x94>)
   d437c:	f000 fa1c 	bl	d47b8 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4380:	a806      	add	r0, sp, #24
   d4382:	213a      	movs	r1, #58	; 0x3a
   d4384:	f000 f9cc 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4388:	4621      	mov	r1, r4
   d438a:	a806      	add	r0, sp, #24
   d438c:	f000 fac4 	bl	d4918 <_ZN10JsonWriter11insertValueEb>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4390:	a806      	add	r0, sp, #24
   d4392:	f000 f9d3 	bl	d473c <_ZN10JsonWriter19finishObjectOrArrayEv>
   d4396:	9b07      	ldr	r3, [sp, #28]
   d4398:	9303      	str	r3, [sp, #12]
   d439a:	4b0d      	ldr	r3, [pc, #52]	; (d43d0 <_Z18createEventPayLoadiib+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d439c:	9a03      	ldr	r2, [sp, #12]
   d439e:	781b      	ldrb	r3, [r3, #0]
   d43a0:	490c      	ldr	r1, [pc, #48]	; (d43d4 <_Z18createEventPayLoadiib+0x9c>)
   d43a2:	f88d 3000 	strb.w	r3, [sp]
   d43a6:	a804      	add	r0, sp, #16
   d43a8:	233c      	movs	r3, #60	; 0x3c
   d43aa:	f001 fe15 	bl	d5fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43ae:	a805      	add	r0, sp, #20
   d43b0:	f7ff ff7e 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  //Serial.printf("At %s the moisture reading is %i \n",Time.timeStr().c_str(),moist);
  Serial.printf("The time is %s \n",current);
}

void createEventPayLoad(int moistValue, int tempValue, bool waterED) {
  JsonWriterStatic<256> jw;
   d43b4:	a806      	add	r0, sp, #24
   d43b6:	f7ff fe89 	bl	d40cc <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d43ba:	b052      	add	sp, #328	; 0x148
   d43bc:	bd70      	pop	{r4, r5, r6, pc}
   d43be:	bf00      	nop
   d43c0:	000d80b0 	.word	0x000d80b0
   d43c4:	000d81b9 	.word	0x000d81b9
   d43c8:	000d819b 	.word	0x000d819b
   d43cc:	000d80b8 	.word	0x000d80b8
   d43d0:	2003e334 	.word	0x2003e334
   d43d4:	000d8133 	.word	0x000d8133

000d43d8 <loop>:

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
}

void loop() {
   d43d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  moist = analogRead(soilPin);
   d43dc:	4b57      	ldr	r3, [pc, #348]	; (d453c <loop+0x164>)
   d43de:	4c58      	ldr	r4, [pc, #352]	; (d4540 <loop+0x168>)
   d43e0:	8818      	ldrh	r0, [r3, #0]
  watered = waterPlant(moist);
   d43e2:	4d58      	ldr	r5, [pc, #352]	; (d4544 <loop+0x16c>)

  temp = analogRead(tempPin);
   d43e4:	4e58      	ldr	r6, [pc, #352]	; (d4548 <loop+0x170>)

    // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&onoffbutton);
}

void loop() {
   d43e6:	b089      	sub	sp, #36	; 0x24
  moist = analogRead(soilPin);
   d43e8:	f002 fe14 	bl	d7014 <analogRead>
   d43ec:	6020      	str	r0, [r4, #0]
  watered = waterPlant(moist);
   d43ee:	f7ff fed3 	bl	d4198 <_Z10waterPlanti>

  temp = analogRead(tempPin);
   d43f2:	4b56      	ldr	r3, [pc, #344]	; (d454c <loop+0x174>)
  mqtt.subscribe(&onoffbutton);
}

void loop() {
  moist = analogRead(soilPin);
  watered = waterPlant(moist);
   d43f4:	7028      	strb	r0, [r5, #0]

  temp = analogRead(tempPin);
   d43f6:	8818      	ldrh	r0, [r3, #0]
   d43f8:	f002 fe0c 	bl	d7014 <analogRead>
   d43fc:	6030      	str	r0, [r6, #0]
  printMoist(moist);
   d43fe:	6820      	ldr	r0, [r4, #0]
   d4400:	f7ff ff04 	bl	d420c <_Z10printMoisti>

    if(mqtt.Update()) {
   d4404:	4852      	ldr	r0, [pc, #328]	; (d4550 <loop+0x178>)
   d4406:	f000 fb13 	bl	d4a30 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d440a:	b158      	cbz	r0, d4424 <loop+0x4c>
       Htemp.publish(temp); 
   d440c:	6831      	ldr	r1, [r6, #0]
   d440e:	4851      	ldr	r0, [pc, #324]	; (d4554 <loop+0x17c>)
   d4410:	f000 fde4 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hmoist.publish(moist);
   d4414:	6821      	ldr	r1, [r4, #0]
   d4416:	4850      	ldr	r0, [pc, #320]	; (d4558 <loop+0x180>)
   d4418:	f000 fde0 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
       Hwater.publish(watered);
   d441c:	7829      	ldrb	r1, [r5, #0]
   d441e:	484f      	ldr	r0, [pc, #316]	; (d455c <loop+0x184>)
   d4420:	f000 fddc 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
   d4424:	4f4e      	ldr	r7, [pc, #312]	; (d4560 <loop+0x188>)
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d4426:	6821      	ldr	r1, [r4, #0]
  
  createEventPayLoad(moist,temp,watered);
    for(i=0;i<10;i++) {
      Adafruit_MQTT_Subscribe *subscription;
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
          if (subscription == &onoffbutton) {
   d4428:	f8df 914c 	ldr.w	r9, [pc, #332]	; d4578 <loop+0x1a0>
       Htemp.publish(temp); 
       Hmoist.publish(moist);
       Hwater.publish(watered);
    } 

  Particle.publish("Moisture", String(moist),PRIVATE);
   d442c:	220a      	movs	r2, #10
   d442e:	a804      	add	r0, sp, #16
   d4430:	f001 fa48 	bl	d58c4 <_ZN6StringC1Eih>
   d4434:	783b      	ldrb	r3, [r7, #0]
   d4436:	9a04      	ldr	r2, [sp, #16]
   d4438:	494a      	ldr	r1, [pc, #296]	; (d4564 <loop+0x18c>)
   d443a:	f88d 3000 	strb.w	r3, [sp]
   d443e:	a802      	add	r0, sp, #8
   d4440:	233c      	movs	r3, #60	; 0x3c
   d4442:	f001 fdc9 	bl	d5fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4446:	a803      	add	r0, sp, #12
   d4448:	f7ff ff32 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d444c:	a804      	add	r0, sp, #16
   d444e:	f001 f9a9 	bl	d57a4 <_ZN6StringD1Ev>
  Particle.publish("Temperature", String(temp),PRIVATE);
   d4452:	220a      	movs	r2, #10
   d4454:	6831      	ldr	r1, [r6, #0]
   d4456:	a804      	add	r0, sp, #16
   d4458:	f001 fa34 	bl	d58c4 <_ZN6StringC1Eih>
   d445c:	783b      	ldrb	r3, [r7, #0]
   d445e:	9a04      	ldr	r2, [sp, #16]
   d4460:	4941      	ldr	r1, [pc, #260]	; (d4568 <loop+0x190>)
   d4462:	f88d 3000 	strb.w	r3, [sp]
   d4466:	a802      	add	r0, sp, #8
   d4468:	233c      	movs	r3, #60	; 0x3c
   d446a:	f001 fdb5 	bl	d5fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d446e:	a803      	add	r0, sp, #12
   d4470:	f7ff ff1e 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4474:	a804      	add	r0, sp, #16
   d4476:	f001 f995 	bl	d57a4 <_ZN6StringD1Ev>
  Particle.publish("Plant Watered", String(watered),PRIVATE);
   d447a:	220a      	movs	r2, #10
   d447c:	7829      	ldrb	r1, [r5, #0]
   d447e:	a804      	add	r0, sp, #16
   d4480:	f001 fa20 	bl	d58c4 <_ZN6StringC1Eih>
   d4484:	783b      	ldrb	r3, [r7, #0]
   d4486:	9a04      	ldr	r2, [sp, #16]
   d4488:	4938      	ldr	r1, [pc, #224]	; (d456c <loop+0x194>)
   d448a:	f88d 3000 	strb.w	r3, [sp]
   d448e:	a802      	add	r0, sp, #8
   d4490:	233c      	movs	r3, #60	; 0x3c
   d4492:	f001 fda1 	bl	d5fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4496:	a803      	add	r0, sp, #12
   d4498:	f7ff ff0a 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d449c:	a804      	add	r0, sp, #16
   d449e:	f001 f981 	bl	d57a4 <_ZN6StringD1Ev>
  
  createEventPayLoad(moist,temp,watered);
    for(i=0;i<10;i++) {
   d44a2:	4f33      	ldr	r7, [pc, #204]	; (d4570 <loop+0x198>)

  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,watered);
   d44a4:	782a      	ldrb	r2, [r5, #0]
   d44a6:	6831      	ldr	r1, [r6, #0]
   d44a8:	6820      	ldr	r0, [r4, #0]
   d44aa:	f7ff ff45 	bl	d4338 <_Z18createEventPayLoadiib>
    for(i=0;i<10;i++) {
   d44ae:	2300      	movs	r3, #0
   d44b0:	603b      	str	r3, [r7, #0]
   d44b2:	683b      	ldr	r3, [r7, #0]
   d44b4:	2b09      	cmp	r3, #9
   d44b6:	dc3d      	bgt.n	d4534 <loop+0x15c>
      Adafruit_MQTT_Subscribe *subscription;
        while ((subscription = mqtt.readSubscription(10000))) {  // do this loop for 10 seconds
   d44b8:	f242 7110 	movw	r1, #10000	; 0x2710
   d44bc:	4824      	ldr	r0, [pc, #144]	; (d4550 <loop+0x178>)
   d44be:	f000 fba3 	bl	d4c08 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d44c2:	b398      	cbz	r0, d452c <loop+0x154>
          if (subscription == &onoffbutton) {
   d44c4:	4548      	cmp	r0, r9
   d44c6:	d1f7      	bne.n	d44b8 <loop+0xe0>
            button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d44c8:	f109 0005 	add.w	r0, r9, #5
   d44cc:	f002 ffc2 	bl	d7454 <atoi>
   d44d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d457c <loop+0x1a4>
   d44d4:	f8c8 0000 	str.w	r0, [r8]
            Serial.printf("Button State is %i \n",button);
   d44d8:	f001 ffea 	bl	d64b0 <_Z16_fetch_usbserialv>
   d44dc:	2100      	movs	r1, #0
   d44de:	f8d8 3000 	ldr.w	r3, [r8]
   d44e2:	4a24      	ldr	r2, [pc, #144]	; (d4574 <loop+0x19c>)
   d44e4:	f001 fabd 	bl	d5a62 <_ZN5Print11printf_implEbPKcz>
            if(button==1) {
   d44e8:	f8d8 1000 	ldr.w	r1, [r8]
   d44ec:	2901      	cmp	r1, #1
   d44ee:	d1e3      	bne.n	d44b8 <loop+0xe0>
              digitalWrite(D7,1);
   d44f0:	2007      	movs	r0, #7
   d44f2:	f002 fd76 	bl	d6fe2 <digitalWrite>
              watered = waterPlant(3000);
   d44f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d44fa:	f7ff fe4d 	bl	d4198 <_Z10waterPlanti>
   d44fe:	7028      	strb	r0, [r5, #0]
                  if(mqtt.Update()) {
   d4500:	4813      	ldr	r0, [pc, #76]	; (d4550 <loop+0x178>)
   d4502:	f000 fa95 	bl	d4a30 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d4506:	b160      	cbz	r0, d4522 <loop+0x14a>
                    Htemp.publish(temp); 
   d4508:	6831      	ldr	r1, [r6, #0]
   d450a:	4812      	ldr	r0, [pc, #72]	; (d4554 <loop+0x17c>)
   d450c:	f000 fd66 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hmoist.publish(moist);
   d4510:	6821      	ldr	r1, [r4, #0]
   d4512:	4811      	ldr	r0, [pc, #68]	; (d4558 <loop+0x180>)
   d4514:	f000 fd62 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
                    Hwater.publish(watered);
   d4518:	4b0a      	ldr	r3, [pc, #40]	; (d4544 <loop+0x16c>)
   d451a:	4810      	ldr	r0, [pc, #64]	; (d455c <loop+0x184>)
   d451c:	7819      	ldrb	r1, [r3, #0]
   d451e:	f000 fd5d 	bl	d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>
                  } 
              digitalWrite(D7,0);
   d4522:	2100      	movs	r1, #0
   d4524:	2007      	movs	r0, #7
   d4526:	f002 fd5c 	bl	d6fe2 <digitalWrite>
   d452a:	e7c5      	b.n	d44b8 <loop+0xe0>
  Particle.publish("Moisture", String(moist),PRIVATE);
  Particle.publish("Temperature", String(temp),PRIVATE);
  Particle.publish("Plant Watered", String(watered),PRIVATE);
  
  createEventPayLoad(moist,temp,watered);
    for(i=0;i<10;i++) {
   d452c:	683b      	ldr	r3, [r7, #0]
   d452e:	3301      	adds	r3, #1
   d4530:	603b      	str	r3, [r7, #0]
   d4532:	e7be      	b.n	d44b2 <loop+0xda>
              digitalWrite(D7,0);
            }
          }
        }
    }    
}
   d4534:	b009      	add	sp, #36	; 0x24
   d4536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d453a:	bf00      	nop
   d453c:	2003e124 	.word	0x2003e124
   d4540:	2003e37c 	.word	0x2003e37c
   d4544:	2003e378 	.word	0x2003e378
   d4548:	2003e214 	.word	0x2003e214
   d454c:	2003e128 	.word	0x2003e128
   d4550:	2003e228 	.word	0x2003e228
   d4554:	2003e358 	.word	0x2003e358
   d4558:	2003e208 	.word	0x2003e208
   d455c:	2003e1fc 	.word	0x2003e1fc
   d4560:	2003e334 	.word	0x2003e334
   d4564:	000d81b9 	.word	0x000d81b9
   d4568:	000d819b 	.word	0x000d819b
   d456c:	000d80b8 	.word	0x000d80b8
   d4570:	2003e338 	.word	0x2003e338
   d4574:	000d813c 	.word	0x000d813c
   d4578:	2003e2fc 	.word	0x2003e2fc
   d457c:	2003e364 	.word	0x2003e364

000d4580 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4580:	b510      	push	{r4, lr}
   d4582:	21d4      	movs	r1, #212	; 0xd4
   d4584:	4604      	mov	r4, r0
   d4586:	f002 fdcb 	bl	d7120 <_ZdlPvj>
   d458a:	4620      	mov	r0, r4
   d458c:	bd10      	pop	{r4, pc}
	...

000d4590 <_GLOBAL__sub_I_TheClient>:
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d4590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4592:	4b29      	ldr	r3, [pc, #164]	; (d4638 <_GLOBAL__sub_I_TheClient+0xa8>)
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d4594:	4e29      	ldr	r6, [pc, #164]	; (d463c <_GLOBAL__sub_I_TheClient+0xac>)
   d4596:	4d2a      	ldr	r5, [pc, #168]	; (d4640 <_GLOBAL__sub_I_TheClient+0xb0>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4598:	4c2a      	ldr	r4, [pc, #168]	; (d4644 <_GLOBAL__sub_I_TheClient+0xb4>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d459a:	4f2b      	ldr	r7, [pc, #172]	; (d4648 <_GLOBAL__sub_I_TheClient+0xb8>)
   d459c:	2201      	movs	r2, #1
   d459e:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45a0:	f000 fd3e 	bl	d5020 <HAL_Pin_Map>
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d45a4:	4630      	mov	r0, r6
   d45a6:	f002 fbe9 	bl	d6d7c <_ZN9TCPClientC1Ev>
   d45aa:	462a      	mov	r2, r5
   d45ac:	4927      	ldr	r1, [pc, #156]	; (d464c <_GLOBAL__sub_I_TheClient+0xbc>)
   d45ae:	4630      	mov	r0, r6
   d45b0:	f002 fda8 	bl	d7104 <__aeabi_atexit>
   d45b4:	4b26      	ldr	r3, [pc, #152]	; (d4650 <_GLOBAL__sub_I_TheClient+0xc0>)
   d45b6:	9300      	str	r3, [sp, #0]
   d45b8:	f240 725b 	movw	r2, #1883	; 0x75b
   d45bc:	4b25      	ldr	r3, [pc, #148]	; (d4654 <_GLOBAL__sub_I_TheClient+0xc4>)
   d45be:	4926      	ldr	r1, [pc, #152]	; (d4658 <_GLOBAL__sub_I_TheClient+0xc8>)
   d45c0:	4620      	mov	r0, r4
   d45c2:	f000 fa6b 	bl	d4a9c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d45c6:	4b25      	ldr	r3, [pc, #148]	; (d465c <_GLOBAL__sub_I_TheClient+0xcc>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d45c8:	4925      	ldr	r1, [pc, #148]	; (d4660 <_GLOBAL__sub_I_TheClient+0xd0>)
   d45ca:	6023      	str	r3, [r4, #0]
   d45cc:	462a      	mov	r2, r5
   d45ce:	4620      	mov	r0, r4
   d45d0:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d45d4:	f002 fd96 	bl	d7104 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d45d8:	4621      	mov	r1, r4
   d45da:	2300      	movs	r3, #0
   d45dc:	4a21      	ldr	r2, [pc, #132]	; (d4664 <_GLOBAL__sub_I_TheClient+0xd4>)
   d45de:	4822      	ldr	r0, [pc, #136]	; (d4668 <_GLOBAL__sub_I_TheClient+0xd8>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d45e0:	4e22      	ldr	r6, [pc, #136]	; (d466c <_GLOBAL__sub_I_TheClient+0xdc>)

/****************************** Feeds ***************************************/ 
// Setup a feed called 'voltage' for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
   d45e2:	f000 fce7 	bl	d4fb4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
   d45e6:	4621      	mov	r1, r4
   d45e8:	2300      	movs	r3, #0
   d45ea:	4a21      	ldr	r2, [pc, #132]	; (d4670 <_GLOBAL__sub_I_TheClient+0xe0>)
   d45ec:	4821      	ldr	r0, [pc, #132]	; (d4674 <_GLOBAL__sub_I_TheClient+0xe4>)
   d45ee:	f000 fce1 	bl	d4fb4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 
   d45f2:	4621      	mov	r1, r4
   d45f4:	2300      	movs	r3, #0
   d45f6:	4a20      	ldr	r2, [pc, #128]	; (d4678 <_GLOBAL__sub_I_TheClient+0xe8>)
   d45f8:	4820      	ldr	r0, [pc, #128]	; (d467c <_GLOBAL__sub_I_TheClient+0xec>)
   d45fa:	f000 fcdb 	bl	d4fb4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d45fe:	4621      	mov	r1, r4
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d4600:	4c1f      	ldr	r4, [pc, #124]	; (d4680 <_GLOBAL__sub_I_TheClient+0xf0>)

Adafruit_MQTT_Publish Htemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Temperature");
Adafruit_MQTT_Publish Hmoist = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Moisture");
Adafruit_MQTT_Publish Hwater = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Home_Water"); 

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On"); 
   d4602:	4a20      	ldr	r2, [pc, #128]	; (d4684 <_GLOBAL__sub_I_TheClient+0xf4>)
   d4604:	4820      	ldr	r0, [pc, #128]	; (d4688 <_GLOBAL__sub_I_TheClient+0xf8>)
   d4606:	2300      	movs	r3, #0
   d4608:	f000 fcea 	bl	d4fe0 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d460c:	4639      	mov	r1, r7
   d460e:	4620      	mov	r0, r4
   d4610:	f001 f90f 	bl	d5832 <_ZN6StringC1EPK19__FlashStringHelper>
   d4614:	4620      	mov	r0, r4
String t2;
   d4616:	4c1d      	ldr	r4, [pc, #116]	; (d468c <_GLOBAL__sub_I_TheClient+0xfc>)
int tempPin = A3;
int temp;

char currentTime[25];
char current[9];
String t;
   d4618:	462a      	mov	r2, r5
   d461a:	4631      	mov	r1, r6
   d461c:	f002 fd72 	bl	d7104 <__aeabi_atexit>
String t2;
   d4620:	4639      	mov	r1, r7
   d4622:	4620      	mov	r0, r4
   d4624:	f001 f905 	bl	d5832 <_ZN6StringC1EPK19__FlashStringHelper>
   d4628:	462a      	mov	r2, r5
   d462a:	4631      	mov	r1, r6
   d462c:	4620      	mov	r0, r4
    jw.insertKeyValue("Moisture", moistValue);
    jw.insertKeyValue("Temperature", tempValue);
    jw.insertKeyValue("Plant Watered", waterED);
  }
  Particle.publish("env-vals",jw.getBuffer(), PRIVATE);
   d462e:	b003      	add	sp, #12
   d4630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
int temp;

char currentTime[25];
char current[9];
String t;
String t2;
   d4634:	f002 bd66 	b.w	d7104 <__aeabi_atexit>
   d4638:	2003e334 	.word	0x2003e334
   d463c:	2003e33c 	.word	0x2003e33c
   d4640:	2003e1ec 	.word	0x2003e1ec
   d4644:	2003e228 	.word	0x2003e228
   d4648:	000d8295 	.word	0x000d8295
   d464c:	000d42dd 	.word	0x000d42dd
   d4650:	000d8168 	.word	0x000d8168
   d4654:	000d8151 	.word	0x000d8151
   d4658:	000d8158 	.word	0x000d8158
   d465c:	000d8248 	.word	0x000d8248
   d4660:	000d40c9 	.word	0x000d40c9
   d4664:	000d8189 	.word	0x000d8189
   d4668:	2003e358 	.word	0x2003e358
   d466c:	000d57a5 	.word	0x000d57a5
   d4670:	000d81a7 	.word	0x000d81a7
   d4674:	2003e208 	.word	0x2003e208
   d4678:	000d81c2 	.word	0x000d81c2
   d467c:	2003e1fc 	.word	0x2003e1fc
   d4680:	2003e368 	.word	0x2003e368
   d4684:	000d81da 	.word	0x000d81da
   d4688:	2003e2fc 	.word	0x2003e2fc
   d468c:	2003e218 	.word	0x2003e218

000d4690 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4690:	b510      	push	{r4, lr}
   d4692:	4b05      	ldr	r3, [pc, #20]	; (d46a8 <_ZN10JsonBufferD1Ev+0x18>)
   d4694:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4696:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4698:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d469a:	b91b      	cbnz	r3, d46a4 <_ZN10JsonBufferD1Ev+0x14>
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	b108      	cbz	r0, d46a4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d46a0:	f000 ff32 	bl	d5508 <free>
	}
}
   d46a4:	4620      	mov	r0, r4
   d46a6:	bd10      	pop	{r4, pc}
   d46a8:	000d81f8 	.word	0x000d81f8

000d46ac <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d46ac:	b510      	push	{r4, lr}
   d46ae:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d46b0:	f7ff ffee 	bl	d4690 <_ZN10JsonBufferD1Ev>
   d46b4:	4620      	mov	r0, r4
   d46b6:	2114      	movs	r1, #20
   d46b8:	f002 fd32 	bl	d7120 <_ZdlPvj>
   d46bc:	4620      	mov	r0, r4
   d46be:	bd10      	pop	{r4, pc}

000d46c0 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d46c0:	b510      	push	{r4, lr}
   d46c2:	4b03      	ldr	r3, [pc, #12]	; (d46d0 <_ZN10JsonWriterD1Ev+0x10>)
   d46c4:	6003      	str	r3, [r0, #0]
   d46c6:	4604      	mov	r4, r0
   d46c8:	f7ff ffe2 	bl	d4690 <_ZN10JsonBufferD1Ev>

}
   d46cc:	4620      	mov	r0, r4
   d46ce:	bd10      	pop	{r4, pc}
   d46d0:	000d8208 	.word	0x000d8208

000d46d4 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d46d4:	b510      	push	{r4, lr}
   d46d6:	4604      	mov	r4, r0

}
   d46d8:	f7ff fff2 	bl	d46c0 <_ZN10JsonWriterD1Ev>
   d46dc:	4620      	mov	r0, r4
   d46de:	2130      	movs	r1, #48	; 0x30
   d46e0:	f002 fd1e 	bl	d7120 <_ZdlPvj>
   d46e4:	4620      	mov	r0, r4
   d46e6:	bd10      	pop	{r4, pc}

000d46e8 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d46e8:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d46ea:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d46ec:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d46ee:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d46f0:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d46f2:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d46f4:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d46f8:	4770      	bx	lr
	...

000d46fc <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d46fc:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d46fe:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4700:	60c3      	str	r3, [r0, #12]
   d4702:	2301      	movs	r3, #1
   d4704:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4706:	4b05      	ldr	r3, [pc, #20]	; (d471c <_ZN10JsonWriterC1EPcj+0x20>)
   d4708:	6003      	str	r3, [r0, #0]
   d470a:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d470e:	6041      	str	r1, [r0, #4]
   d4710:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d4712:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d4714:	f7ff ffe8 	bl	d46e8 <_ZN10JsonWriter4initEv>
}
   d4718:	bd10      	pop	{r4, pc}
   d471a:	bf00      	nop
   d471c:	000d8208 	.word	0x000d8208

000d4720 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d4720:	68c3      	ldr	r3, [r0, #12]
   d4722:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d4724:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d4726:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d4728:	bf3f      	itttt	cc
   d472a:	6842      	ldrcc	r2, [r0, #4]
   d472c:	1c5c      	addcc	r4, r3, #1
   d472e:	60c4      	strcc	r4, [r0, #12]
   d4730:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d4732:	bf24      	itt	cs
   d4734:	2301      	movcs	r3, #1
   d4736:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d473a:	bd10      	pop	{r4, pc}

000d473c <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d473c:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d473e:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d4740:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d4742:	b143      	cbz	r3, d4756 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d4744:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d4748:	7e59      	ldrb	r1, [r3, #25]
   d474a:	b109      	cbz	r1, d4750 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d474c:	f7ff ffe8 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d4750:	6963      	ldr	r3, [r4, #20]
   d4752:	3b01      	subs	r3, #1
   d4754:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d4756:	68a3      	ldr	r3, [r4, #8]
   d4758:	68e0      	ldr	r0, [r4, #12]
   d475a:	6861      	ldr	r1, [r4, #4]
   d475c:	4298      	cmp	r0, r3
   d475e:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4762:	bf2a      	itet	cs
   d4764:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d4766:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d4768:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d476c:	bd10      	pop	{r4, pc}

000d476e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d476e:	b570      	push	{r4, r5, r6, lr}
   d4770:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d4772:	68c0      	ldr	r0, [r0, #12]
   d4774:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d4776:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d4778:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d477a:	4613      	mov	r3, r2
   d477c:	4430      	add	r0, r6
   d477e:	460a      	mov	r2, r1
   d4780:	4629      	mov	r1, r5
   d4782:	f000 fee1 	bl	d5548 <vsnprintf>
	if (count <= spaceAvailable) {
   d4786:	4285      	cmp	r5, r0
		offset += count;
   d4788:	bf2d      	iteet	cs
   d478a:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d478c:	68a3      	ldrcc	r3, [r4, #8]
   d478e:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4790:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4792:	bf36      	itet	cc
   d4794:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d4796:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d4798:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d479c:	bd70      	pop	{r4, r5, r6, pc}

000d479e <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d479e:	b40e      	push	{r1, r2, r3}
   d47a0:	b503      	push	{r0, r1, lr}
   d47a2:	aa03      	add	r2, sp, #12
   d47a4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d47a8:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d47aa:	f7ff ffe0 	bl	d476e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d47ae:	b002      	add	sp, #8
   d47b0:	f85d eb04 	ldr.w	lr, [sp], #4
   d47b4:	b003      	add	sp, #12
   d47b6:	4770      	bx	lr

000d47b8 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d47b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47bc:	4604      	mov	r4, r0
   d47be:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d47c0:	4617      	mov	r7, r2
   d47c2:	b112      	cbz	r2, d47ca <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d47c4:	2122      	movs	r1, #34	; 0x22
   d47c6:	f7ff ffab 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d47ca:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d47cc:	5d71      	ldrb	r1, [r6, r5]
   d47ce:	eb06 0805 	add.w	r8, r6, r5
   d47d2:	2900      	cmp	r1, #0
   d47d4:	d071      	beq.n	d48ba <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d47d6:	68e2      	ldr	r2, [r4, #12]
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	429a      	cmp	r2, r3
   d47dc:	d26d      	bcs.n	d48ba <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d47de:	060b      	lsls	r3, r1, #24
   d47e0:	d533      	bpl.n	d484a <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d47e2:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d47e6:	2be0      	cmp	r3, #224	; 0xe0
   d47e8:	d117      	bne.n	d481a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d47ea:	f898 3001 	ldrb.w	r3, [r8, #1]
   d47ee:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d47f2:	2a80      	cmp	r2, #128	; 0x80
   d47f4:	d111      	bne.n	d481a <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d47f6:	f105 0802 	add.w	r8, r5, #2
   d47fa:	f816 2008 	ldrb.w	r2, [r6, r8]
   d47fe:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d4802:	2880      	cmp	r0, #128	; 0x80
   d4804:	d109      	bne.n	d481a <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4806:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d480a:	019b      	lsls	r3, r3, #6
   d480c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d4810:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d4814:	431a      	orrs	r2, r3
   d4816:	b292      	uxth	r2, r2
   d4818:	e011      	b.n	d483e <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d481a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d481e:	2bc0      	cmp	r3, #192	; 0xc0
   d4820:	d146      	bne.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d4822:	f105 0801 	add.w	r8, r5, #1
   d4826:	f816 3008 	ldrb.w	r3, [r6, r8]
   d482a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d482e:	2a80      	cmp	r2, #128	; 0x80
   d4830:	d13e      	bne.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d4832:	0189      	lsls	r1, r1, #6
   d4834:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d4838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d483c:	431a      	orrs	r2, r3
   d483e:	4923      	ldr	r1, [pc, #140]	; (d48cc <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d4840:	4620      	mov	r0, r4
   d4842:	f7ff ffac 	bl	d479e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d4846:	4645      	mov	r5, r8
   d4848:	e035      	b.n	d48b6 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d484a:	290c      	cmp	r1, #12
   d484c:	d018      	beq.n	d4880 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d484e:	d80b      	bhi.n	d4868 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d4850:	2909      	cmp	r1, #9
   d4852:	d021      	beq.n	d4898 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d4854:	290a      	cmp	r1, #10
   d4856:	d019      	beq.n	d488c <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d4858:	2908      	cmp	r1, #8
   d485a:	d129      	bne.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d485c:	215c      	movs	r1, #92	; 0x5c
   d485e:	4620      	mov	r0, r4
   d4860:	f7ff ff5e 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d4864:	2162      	movs	r1, #98	; 0x62
   d4866:	e023      	b.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d4868:	2922      	cmp	r1, #34	; 0x22
   d486a:	d01b      	beq.n	d48a4 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d486c:	295c      	cmp	r1, #92	; 0x5c
   d486e:	d019      	beq.n	d48a4 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d4870:	290d      	cmp	r1, #13
   d4872:	d11d      	bne.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d4874:	215c      	movs	r1, #92	; 0x5c
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ff52 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d487c:	2172      	movs	r1, #114	; 0x72
   d487e:	e017      	b.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d4880:	215c      	movs	r1, #92	; 0x5c
   d4882:	4620      	mov	r0, r4
   d4884:	f7ff ff4c 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d4888:	2166      	movs	r1, #102	; 0x66
   d488a:	e011      	b.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d488c:	215c      	movs	r1, #92	; 0x5c
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ff46 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d4894:	216e      	movs	r1, #110	; 0x6e
   d4896:	e00b      	b.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d4898:	215c      	movs	r1, #92	; 0x5c
   d489a:	4620      	mov	r0, r4
   d489c:	f7ff ff40 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d48a0:	2174      	movs	r1, #116	; 0x74
   d48a2:	e005      	b.n	d48b0 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d48a4:	215c      	movs	r1, #92	; 0x5c
   d48a6:	4620      	mov	r0, r4
   d48a8:	f7ff ff3a 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d48ac:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d48b0:	4620      	mov	r0, r4
   d48b2:	f7ff ff35 	bl	d4720 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d48b6:	3501      	adds	r5, #1
   d48b8:	e788      	b.n	d47cc <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d48ba:	b12f      	cbz	r7, d48c8 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d48bc:	4620      	mov	r0, r4
   d48be:	2122      	movs	r1, #34	; 0x22
	}

}
   d48c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d48c4:	f7ff bf2c 	b.w	d4720 <_ZN10JsonWriter10insertCharEc>
   d48c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48cc:	000d8219 	.word	0x000d8219

000d48d0 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d48d0:	6942      	ldr	r2, [r0, #20]
   d48d2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d48d6:	7e1a      	ldrb	r2, [r3, #24]
   d48d8:	b112      	cbz	r2, d48e0 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d48da:	2200      	movs	r2, #0
   d48dc:	761a      	strb	r2, [r3, #24]
   d48de:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d48e0:	212c      	movs	r1, #44	; 0x2c
   d48e2:	f7ff bf1d 	b.w	d4720 <_ZN10JsonWriter10insertCharEc>

000d48e6 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d48e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d48e8:	6943      	ldr	r3, [r0, #20]
   d48ea:	3301      	adds	r3, #1
   d48ec:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d48ee:	460e      	mov	r6, r1
   d48f0:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d48f2:	d80e      	bhi.n	d4912 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d48f4:	f7ff ffec 	bl	d48d0 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d48f8:	6943      	ldr	r3, [r0, #20]
   d48fa:	1c5a      	adds	r2, r3, #1
   d48fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d4900:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d4902:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d4904:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d4906:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d4908:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d490a:	f7ff ff09 	bl	d4720 <_ZN10JsonWriter10insertCharEc>
   d490e:	4620      	mov	r0, r4
   d4910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d4912:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d4914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4918 <_ZN10JsonWriter11insertValueEb>:
		insertChar(',');
	}
}

void JsonWriter::insertValue(bool value) {
	if (value) {
   d4918:	460a      	mov	r2, r1
   d491a:	b111      	cbz	r1, d4922 <_ZN10JsonWriter11insertValueEb+0xa>
		insertString("true");
   d491c:	2200      	movs	r2, #0
   d491e:	4902      	ldr	r1, [pc, #8]	; (d4928 <_ZN10JsonWriter11insertValueEb+0x10>)
   d4920:	e000      	b.n	d4924 <_ZN10JsonWriter11insertValueEb+0xc>
	}
	else {
		insertString("false");
   d4922:	4902      	ldr	r1, [pc, #8]	; (d492c <_ZN10JsonWriter11insertValueEb+0x14>)
   d4924:	f7ff bf48 	b.w	d47b8 <_ZN10JsonWriter12insertStringEPKcb>
   d4928:	000d8220 	.word	0x000d8220
   d492c:	000d8225 	.word	0x000d8225

000d4930 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4930:	f000 bb76 	b.w	d5020 <HAL_Pin_Map>

000d4934 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4934:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4936:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d493a:	6803      	ldr	r3, [r0, #0]
   d493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d493e:	4798      	blx	r3
}
   d4940:	3000      	adds	r0, #0
   d4942:	bf18      	it	ne
   d4944:	2001      	movne	r0, #1
   d4946:	bd08      	pop	{r3, pc}

000d4948 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d494a:	4606      	mov	r6, r0
   d494c:	460f      	mov	r7, r1
   d494e:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4950:	b1c4      	cbz	r4, d4984 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4952:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4956:	6803      	ldr	r3, [r0, #0]
   d4958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d495a:	4798      	blx	r3
   d495c:	b908      	cbnz	r0, d4962 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d495e:	2000      	movs	r0, #0
   d4960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4962:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4966:	2cfa      	cmp	r4, #250	; 0xfa
   d4968:	6803      	ldr	r3, [r0, #0]
   d496a:	4625      	mov	r5, r4
   d496c:	bfa8      	it	ge
   d496e:	25fa      	movge	r5, #250	; 0xfa
   d4970:	68db      	ldr	r3, [r3, #12]
   d4972:	462a      	mov	r2, r5
   d4974:	4639      	mov	r1, r7
   d4976:	4798      	blx	r3
   d4978:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d497a:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d497c:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d497e:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4980:	d0e6      	beq.n	d4950 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4982:	e7ec      	b.n	d495e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4984:	2001      	movs	r0, #1
}
   d4986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4988 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d498c:	4606      	mov	r6, r0
   d498e:	4688      	mov	r8, r1
   d4990:	4691      	mov	r9, r2
   d4992:	461f      	mov	r7, r3
   d4994:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4996:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4998:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d499c:	6803      	ldr	r3, [r0, #0]
   d499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49a0:	4798      	blx	r3
   d49a2:	b1d0      	cbz	r0, d49da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d49a4:	2d00      	cmp	r5, #0
   d49a6:	db18      	blt.n	d49da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d49a8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d49ac:	6803      	ldr	r3, [r0, #0]
   d49ae:	691b      	ldr	r3, [r3, #16]
   d49b0:	4798      	blx	r3
   d49b2:	b160      	cbz	r0, d49ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d49b4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d49b8:	6803      	ldr	r3, [r0, #0]
   d49ba:	695b      	ldr	r3, [r3, #20]
   d49bc:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d49be:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d49c2:	3401      	adds	r4, #1
   d49c4:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d49c6:	454c      	cmp	r4, r9
   d49c8:	d007      	beq.n	d49da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d49ca:	463d      	mov	r5, r7
   d49cc:	e7ec      	b.n	d49a8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d49ce:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d49d0:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d49d2:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d49d4:	f001 f906 	bl	d5be4 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d49d8:	e7de      	b.n	d4998 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d49da:	4620      	mov	r0, r4
   d49dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d49e0 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d49e0:	b570      	push	{r4, r5, r6, lr}
   d49e2:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d49e4:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d49e8:	2296      	movs	r2, #150	; 0x96
   d49ea:	2100      	movs	r1, #0
   d49ec:	4628      	mov	r0, r5
   d49ee:	f002 fe75 	bl	d76dc <memset>
  strcpy((char *)buffer, servername);
   d49f2:	6861      	ldr	r1, [r4, #4]
   d49f4:	4628      	mov	r0, r5
   d49f6:	f002 feab 	bl	d7750 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d49fa:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d49fe:	8922      	ldrh	r2, [r4, #8]
   d4a00:	6803      	ldr	r3, [r0, #0]
   d4a02:	4629      	mov	r1, r5
   d4a04:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4a06:	2300      	movs	r3, #0
   d4a08:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4a0a:	3000      	adds	r0, #0
   d4a0c:	bf18      	it	ne
   d4a0e:	2001      	movne	r0, #1
   d4a10:	bd70      	pop	{r4, r5, r6, pc}

000d4a12 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4a12:	b510      	push	{r4, lr}
   d4a14:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4a16:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4a1a:	6803      	ldr	r3, [r0, #0]
   d4a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1e:	4798      	blx	r3
   d4a20:	b120      	cbz	r0, d4a2c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4a22:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4a26:	6803      	ldr	r3, [r0, #0]
   d4a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a2a:	4798      	blx	r3
  }
  return true;
}
   d4a2c:	2001      	movs	r0, #1
   d4a2e:	bd10      	pop	{r4, pc}

000d4a30 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4a30:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d4a32:	6803      	ldr	r3, [r0, #0]
   d4a34:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4a36:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d4a38:	4798      	blx	r3
   d4a3a:	b9c8      	cbnz	r0, d4a70 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	f000 fa60 	bl	d4f02 <_ZN13Adafruit_MQTT7connectEv>
   d4a42:	2504      	movs	r5, #4
   d4a44:	b170      	cbz	r0, d4a64 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d4a46:	3d01      	subs	r5, #1
   d4a48:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4a4c:	d00a      	beq.n	d4a64 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d4a4e:	4620      	mov	r0, r4
   d4a50:	f000 f8aa 	bl	d4ba8 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4a54:	f241 3088 	movw	r0, #5000	; 0x1388
   d4a58:	f001 f8c4 	bl	d5be4 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f000 fa50 	bl	d4f02 <_ZN13Adafruit_MQTT7connectEv>
   d4a62:	e7ef      	b.n	d4a44 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4a64:	6823      	ldr	r3, [r4, #0]
   d4a66:	4620      	mov	r0, r4
   d4a68:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4a6e:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4a70:	bd70      	pop	{r4, r5, r6, pc}

000d4a72 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4a72:	f000 bad5 	b.w	d5020 <HAL_Pin_Map>

000d4a76 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4a76:	b570      	push	{r4, r5, r6, lr}
   d4a78:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4a7a:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4a7c:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4a7e:	f002 fe8a 	bl	d7796 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d4a82:	1203      	asrs	r3, r0, #8
   d4a84:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4a86:	7060      	strb	r0, [r4, #1]
   d4a88:	b285      	uxth	r5, r0
   d4a8a:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d4a8c:	462a      	mov	r2, r5
   d4a8e:	4631      	mov	r1, r6
   d4a90:	4620      	mov	r0, r4
   d4a92:	f002 fec2 	bl	d781a <strncpy>
  return p+len;
}
   d4a96:	1960      	adds	r0, r4, r5
   d4a98:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4a9c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d4a9c:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d4a9e:	6103      	str	r3, [r0, #16]
  password = pass;
   d4aa0:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4aa2:	4d0d      	ldr	r5, [pc, #52]	; (d4ad8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d4aa4:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d4aa6:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d4aa8:	4a0c      	ldr	r2, [pc, #48]	; (d4adc <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4aaa:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4aac:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d4aae:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d4ab0:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4ab2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d4ab6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d4aba:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d4abe:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d4ac2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d4ac6:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d4ac8:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d4aca:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d4ace:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d4ad2:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d4ad6:	bd30      	pop	{r4, r5, pc}
   d4ad8:	000d826c 	.word	0x000d826c
   d4adc:	000d8295 	.word	0x000d8295

000d4ae0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4ae4:	fa0f fa83 	sxth.w	sl, r3
   d4ae8:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4aea:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4aec:	699d      	ldr	r5, [r3, #24]
   d4aee:	2201      	movs	r2, #1
   d4af0:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4af2:	4606      	mov	r6, r0
   d4af4:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4af6:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4af8:	b2c0      	uxtb	r0, r0
   d4afa:	2801      	cmp	r0, #1
   d4afc:	d001      	beq.n	d4b02 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d4afe:	2000      	movs	r0, #0
   d4b00:	e034      	b.n	d4b6c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d4b02:	1c65      	adds	r5, r4, #1
   d4b04:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4b08:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d4b0a:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d4b0e:	6833      	ldr	r3, [r6, #0]
   d4b10:	699b      	ldr	r3, [r3, #24]
   d4b12:	2201      	movs	r2, #1
   d4b14:	461f      	mov	r7, r3
   d4b16:	4629      	mov	r1, r5
   d4b18:	4653      	mov	r3, sl
   d4b1a:	4630      	mov	r0, r6
   d4b1c:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d4b1e:	b2c0      	uxtb	r0, r0
   d4b20:	2801      	cmp	r0, #1
   d4b22:	d1ec      	bne.n	d4afe <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4b24:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d4b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d4b2c:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d4b2e:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d4b32:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d4b36:	d0e2      	beq.n	d4afe <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d4b38:	061b      	lsls	r3, r3, #24
   d4b3a:	d4e8      	bmi.n	d4b0e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4b3c:	9b01      	ldr	r3, [sp, #4]
   d4b3e:	1b2c      	subs	r4, r5, r4
   d4b40:	1b1b      	subs	r3, r3, r4
   d4b42:	3b01      	subs	r3, #1
   d4b44:	4599      	cmp	r9, r3
   d4b46:	6833      	ldr	r3, [r6, #0]
   d4b48:	d906      	bls.n	d4b58 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4b4a:	9a01      	ldr	r2, [sp, #4]
   d4b4c:	699f      	ldr	r7, [r3, #24]
   d4b4e:	3a01      	subs	r2, #1
   d4b50:	1b12      	subs	r2, r2, r4
   d4b52:	4653      	mov	r3, sl
   d4b54:	b292      	uxth	r2, r2
   d4b56:	e003      	b.n	d4b60 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d4b58:	699f      	ldr	r7, [r3, #24]
   d4b5a:	fa1f f289 	uxth.w	r2, r9
   d4b5e:	4653      	mov	r3, sl
   d4b60:	4629      	mov	r1, r5
   d4b62:	4630      	mov	r0, r6
   d4b64:	47b8      	blx	r7
   d4b66:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d4b68:	4420      	add	r0, r4
   d4b6a:	b280      	uxth	r0, r0
}
   d4b6c:	b003      	add	sp, #12
   d4b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d4b74 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b76:	4605      	mov	r5, r0
   d4b78:	460c      	mov	r4, r1
   d4b7a:	4616      	mov	r6, r2
   d4b7c:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4b7e:	463b      	mov	r3, r7
   d4b80:	2296      	movs	r2, #150	; 0x96
   d4b82:	4621      	mov	r1, r4
   d4b84:	4628      	mov	r0, r5
   d4b86:	f7ff ffab 	bl	d4ae0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4b8a:	b148      	cbz	r0, d4ba0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d4b8c:	7823      	ldrb	r3, [r4, #0]
   d4b8e:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d4b92:	d005      	beq.n	d4ba0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d4b94:	f001 fc8c 	bl	d64b0 <_Z16_fetch_usbserialv>
   d4b98:	4902      	ldr	r1, [pc, #8]	; (d4ba4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d4b9a:	f000 ff38 	bl	d5a0e <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4b9e:	e7ee      	b.n	d4b7e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d4ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ba2:	bf00      	nop
   d4ba4:	000d8296 	.word	0x000d8296

000d4ba8 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d4ba8:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d4baa:	23e0      	movs	r3, #224	; 0xe0
   d4bac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d4bb0:	2300      	movs	r3, #0
   d4bb2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4bb6:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d4bb8:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4bba:	695b      	ldr	r3, [r3, #20]
   d4bbc:	2202      	movs	r2, #2
   d4bbe:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d4bc2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4bc4:	6823      	ldr	r3, [r4, #0]
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	691b      	ldr	r3, [r3, #16]

}
   d4bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4bce:	4718      	bx	r3

000d4bd0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d4bd0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d4bd4:	b530      	push	{r4, r5, lr}
   d4bd6:	4613      	mov	r3, r2
   d4bd8:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d4bdc:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d4be0:	428d      	cmp	r5, r1
   d4be2:	d00f      	beq.n	d4c04 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4be4:	42a3      	cmp	r3, r4
   d4be6:	d1f9      	bne.n	d4bdc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d4be8:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d4bea:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d4bee:	b924      	cbnz	r4, d4bfa <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d4bf0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d4bf4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d4bf8:	e004      	b.n	d4c04 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d4bfa:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4bfc:	2b05      	cmp	r3, #5
   d4bfe:	d1f4      	bne.n	d4bea <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d4c00:	2000      	movs	r0, #0
   d4c02:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d4c04:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d4c06:	bd30      	pop	{r4, r5, pc}

000d4c08 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4c0c:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d4c10:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4c12:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4c14:	2296      	movs	r2, #150	; 0x96
   d4c16:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4c18:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4c1a:	f7ff ff61 	bl	d4ae0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d4c1e:	4606      	mov	r6, r0
   d4c20:	b310      	cbz	r0, d4c68 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d4c22:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d4c26:	b2bb      	uxth	r3, r7
   d4c28:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4c2a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d4c2e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d4c32:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4c34:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d4c36:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d4c3a:	f1bb 0f00 	cmp.w	fp, #0
   d4c3e:	d00e      	beq.n	d4c5e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d4c40:	f8db 1000 	ldr.w	r1, [fp]
   d4c44:	9103      	str	r1, [sp, #12]
   d4c46:	4608      	mov	r0, r1
   d4c48:	f002 fda5 	bl	d7796 <strlen>
   d4c4c:	42b8      	cmp	r0, r7
   d4c4e:	4680      	mov	r8, r0
   d4c50:	9903      	ldr	r1, [sp, #12]
   d4c52:	d104      	bne.n	d4c5e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4c54:	463a      	mov	r2, r7
   d4c56:	9802      	ldr	r0, [sp, #8]
   d4c58:	f002 fda6 	bl	d77a8 <strncasecmp>
   d4c5c:	b128      	cbz	r0, d4c6a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d4c5e:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4c60:	2d05      	cmp	r5, #5
   d4c62:	d1e8      	bne.n	d4c36 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d4c64:	2000      	movs	r0, #0
   d4c66:	e04a      	b.n	d4cfe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d4c68:	e049      	b.n	d4cfe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d4c6a:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d4c6e:	f00a 0a06 	and.w	sl, sl, #6
   d4c72:	f1ba 0f02 	cmp.w	sl, #2
   d4c76:	d13f      	bne.n	d4cf8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d4c78:	19e2      	adds	r2, r4, r7
   d4c7a:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d4c7e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d4c82:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d4c86:	2214      	movs	r2, #20
   d4c88:	2100      	movs	r1, #0
   d4c8a:	f10b 0005 	add.w	r0, fp, #5
   d4c8e:	f002 fd25 	bl	d76dc <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d4c92:	9b01      	ldr	r3, [sp, #4]
   d4c94:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d4c98:	30fc      	adds	r0, #252	; 0xfc
   d4c9a:	4406      	add	r6, r0
   d4c9c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d4ca0:	ebca 0606 	rsb	r6, sl, r6
   d4ca4:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d4ca6:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d4ca8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d4cac:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d4cb0:	bf28      	it	cs
   d4cb2:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d4cb4:	4451      	add	r1, sl
   d4cb6:	4632      	mov	r2, r6
   d4cb8:	4449      	add	r1, r9
   d4cba:	3005      	adds	r0, #5
   d4cbc:	f002 fcf3 	bl	d76a6 <memmove>
  subscriptions[i]->datalen = datalen;
   d4cc0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d4cc4:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d4cc6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4cca:	f003 0306 	and.w	r3, r3, #6
   d4cce:	2b02      	cmp	r3, #2
   d4cd0:	d10f      	bne.n	d4cf2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d4cd2:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d4cd6:	123b      	asrs	r3, r7, #8
   d4cd8:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4cdc:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d4cde:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d4ce2:	2240      	movs	r2, #64	; 0x40
   d4ce4:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d4ce8:	695b      	ldr	r3, [r3, #20]
   d4cea:	2204      	movs	r2, #4
   d4cec:	a905      	add	r1, sp, #20
   d4cee:	4620      	mov	r0, r4
   d4cf0:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d4cf2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d4cf6:	e002      	b.n	d4cfe <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d4cf8:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d4cfa:	4682      	mov	sl, r0
   d4cfc:	e7c3      	b.n	d4c86 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d4cfe:	b007      	add	sp, #28
   d4d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d04 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4d04:	b538      	push	{r3, r4, r5, lr}
   d4d06:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4d08:	4608      	mov	r0, r1
   d4d0a:	2310      	movs	r3, #16
   d4d0c:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4d10:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d4d12:	4929      	ldr	r1, [pc, #164]	; (d4db8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4d14:	f7ff feaf 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d4d18:	2304      	movs	r3, #4
   d4d1a:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d4d1c:	2302      	movs	r3, #2
   d4d1e:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4d20:	69a3      	ldr	r3, [r4, #24]
   d4d22:	b1ab      	cbz	r3, d4d50 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d4d24:	781b      	ldrb	r3, [r3, #0]
   d4d26:	b19b      	cbz	r3, d4d50 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4d28:	2306      	movs	r3, #6
   d4d2a:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4d2c:	f894 3020 	ldrb.w	r3, [r4, #32]
   d4d30:	2b01      	cmp	r3, #1
   d4d32:	d101      	bne.n	d4d38 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4d34:	230e      	movs	r3, #14
   d4d36:	e002      	b.n	d4d3e <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4d38:	2b02      	cmp	r3, #2
   d4d3a:	d101      	bne.n	d4d40 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4d3c:	231e      	movs	r3, #30
   d4d3e:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d4d40:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d4d44:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d4d46:	bf02      	ittt	eq
   d4d48:	7843      	ldrbeq	r3, [r0, #1]
   d4d4a:	f043 0320 	orreq.w	r3, r3, #32
   d4d4e:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d4d50:	6923      	ldr	r3, [r4, #16]
   d4d52:	781b      	ldrb	r3, [r3, #0]
   d4d54:	b11b      	cbz	r3, d4d5e <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d4d56:	7843      	ldrb	r3, [r0, #1]
   d4d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4d5c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d4d5e:	6963      	ldr	r3, [r4, #20]
   d4d60:	781b      	ldrb	r3, [r3, #0]
   d4d62:	b11b      	cbz	r3, d4d6c <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d4d64:	7843      	ldrb	r3, [r0, #1]
   d4d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4d6a:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d4d6c:	2301      	movs	r3, #1
   d4d6e:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d4d70:	232c      	movs	r3, #44	; 0x2c
   d4d72:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d4d74:	68e1      	ldr	r1, [r4, #12]
   d4d76:	780b      	ldrb	r3, [r1, #0]
   d4d78:	b11b      	cbz	r3, d4d82 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d4d7a:	3004      	adds	r0, #4
   d4d7c:	f7ff fe7b 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
   d4d80:	e002      	b.n	d4d88 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d4d82:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d4d84:	7143      	strb	r3, [r0, #5]
      p++;
   d4d86:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4d88:	69a1      	ldr	r1, [r4, #24]
   d4d8a:	b131      	cbz	r1, d4d9a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d4d8c:	780b      	ldrb	r3, [r1, #0]
   d4d8e:	b123      	cbz	r3, d4d9a <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d4d90:	f7ff fe71 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d4d94:	69e1      	ldr	r1, [r4, #28]
   d4d96:	f7ff fe6e 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d4d9a:	6921      	ldr	r1, [r4, #16]
   d4d9c:	780b      	ldrb	r3, [r1, #0]
   d4d9e:	b10b      	cbz	r3, d4da4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d4da0:	f7ff fe69 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d4da4:	6961      	ldr	r1, [r4, #20]
   d4da6:	780b      	ldrb	r3, [r1, #0]
   d4da8:	b10b      	cbz	r3, d4dae <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d4daa:	f7ff fe64 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d4dae:	1b40      	subs	r0, r0, r5
   d4db0:	b2c0      	uxtb	r0, r0
   d4db2:	1e83      	subs	r3, r0, #2
   d4db4:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d4db6:	bd38      	pop	{r3, r4, r5, pc}
   d4db8:	000d82b5 	.word	0x000d82b5

000d4dbc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4dc0:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4dc2:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4dc4:	460e      	mov	r6, r1
   d4dc6:	4691      	mov	r9, r2
   d4dc8:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4dca:	f002 fce4 	bl	d7796 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4dce:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d4dd2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4dd6:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d4dd8:	f1b8 0f00 	cmp.w	r8, #0
   d4ddc:	d101      	bne.n	d4de2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4dde:	1c83      	adds	r3, r0, #2
   d4de0:	e000      	b.n	d4de4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d4de2:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4de4:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d4de8:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d4dea:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4dec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d4df0:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4df2:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d4df6:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d4df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d4dfc:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d4dfe:	bf18      	it	ne
   d4e00:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d4e04:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d4e08:	2b00      	cmp	r3, #0
   d4e0a:	d1f5      	bne.n	d4df8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d4e0c:	4649      	mov	r1, r9
   d4e0e:	f7ff fe32 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>
   d4e12:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d4e14:	f1b8 0f00 	cmp.w	r8, #0
   d4e18:	d00c      	beq.n	d4e34 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d4e1a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4e1e:	0a12      	lsrs	r2, r2, #8
   d4e20:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d4e22:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4e26:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d4e28:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4e2c:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d4e2e:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d4e30:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d4e34:	4622      	mov	r2, r4
   d4e36:	4639      	mov	r1, r7
   d4e38:	4618      	mov	r0, r3
   d4e3a:	f002 fc34 	bl	d76a6 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d4e3e:	4420      	add	r0, r4
   d4e40:	1b80      	subs	r0, r0, r6
}
   d4e42:	b280      	uxth	r0, r0
   d4e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e48 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4e4a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4e4e:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4e52:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4e54:	e88d 0048 	stmia.w	sp, {r3, r6}
   d4e58:	4613      	mov	r3, r2
   d4e5a:	460a      	mov	r2, r1
   d4e5c:	4629      	mov	r1, r5
   d4e5e:	f7ff ffad 	bl	d4dbc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d4e62:	6823      	ldr	r3, [r4, #0]
   d4e64:	4602      	mov	r2, r0
   d4e66:	695b      	ldr	r3, [r3, #20]
   d4e68:	4629      	mov	r1, r5
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	4798      	blx	r3
   d4e6e:	b908      	cbnz	r0, d4e74 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d4e70:	2000      	movs	r0, #0
   d4e72:	e017      	b.n	d4ea4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d4e74:	b1b6      	cbz	r6, d4ea4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d4e76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4e7a:	2296      	movs	r2, #150	; 0x96
   d4e7c:	4629      	mov	r1, r5
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f7ff fe2e 	bl	d4ae0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d4e84:	2804      	cmp	r0, #4
   d4e86:	d1f3      	bne.n	d4e70 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d4e88:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4e8c:	111b      	asrs	r3, r3, #4
   d4e8e:	2b04      	cmp	r3, #4
   d4e90:	d1ee      	bne.n	d4e70 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d4e92:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d4e94:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d4e98:	ba5b      	rev16	r3, r3
   d4e9a:	3301      	adds	r3, #1
   d4e9c:	b29b      	uxth	r3, r3
   d4e9e:	1ac3      	subs	r3, r0, r3
   d4ea0:	4258      	negs	r0, r3
   d4ea2:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d4ea4:	b002      	add	sp, #8
   d4ea6:	bd70      	pop	{r4, r5, r6, pc}

000d4ea8 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4eaa:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d4eac:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4eae:	461f      	mov	r7, r3
   d4eb0:	460e      	mov	r6, r1
   d4eb2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d4eb4:	f002 fc6f 	bl	d7796 <strlen>
   d4eb8:	9700      	str	r7, [sp, #0]
   d4eba:	b283      	uxth	r3, r0
   d4ebc:	4622      	mov	r2, r4
   d4ebe:	4631      	mov	r1, r6
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	f7ff ffc1 	bl	d4e48 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d4ec6:	b003      	add	sp, #12
   d4ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4eca <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d4eca:	b538      	push	{r3, r4, r5, lr}
   d4ecc:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d4ece:	2382      	movs	r3, #130	; 0x82
   d4ed0:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d4ed2:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d4ed4:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d4ed8:	0a09      	lsrs	r1, r1, #8
   d4eda:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d4edc:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4ee0:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d4ee2:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d4ee6:	3101      	adds	r1, #1
   d4ee8:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d4eec:	4611      	mov	r1, r2
   d4eee:	1d20      	adds	r0, r4, #4
   d4ef0:	f7ff fdc1 	bl	d4a76 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d4ef4:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d4ef8:	1b00      	subs	r0, r0, r4
   d4efa:	b2c0      	uxtb	r0, r0
   d4efc:	1e83      	subs	r3, r0, #2
   d4efe:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d4f00:	bd38      	pop	{r3, r4, r5, pc}

000d4f02 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d4f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d4f06:	6803      	ldr	r3, [r0, #0]
   d4f08:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d4f0a:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d4f0c:	4798      	blx	r3
   d4f0e:	b918      	cbnz	r0, d4f18 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d4f10:	f04f 30ff 	mov.w	r0, #4294967295
   d4f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d4f18:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d4f1c:	4629      	mov	r1, r5
   d4f1e:	4620      	mov	r0, r4
   d4f20:	f7ff fef0 	bl	d4d04 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d4f24:	6823      	ldr	r3, [r4, #0]
   d4f26:	b282      	uxth	r2, r0
   d4f28:	695b      	ldr	r3, [r3, #20]
   d4f2a:	4629      	mov	r1, r5
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	4798      	blx	r3
   d4f30:	2800      	cmp	r0, #0
   d4f32:	d0ed      	beq.n	d4f10 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d4f34:	f241 7370 	movw	r3, #6000	; 0x1770
   d4f38:	2296      	movs	r2, #150	; 0x96
   d4f3a:	4629      	mov	r1, r5
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	f7ff fdcf 	bl	d4ae0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d4f42:	b2c0      	uxtb	r0, r0
   d4f44:	2804      	cmp	r0, #4
   d4f46:	d1e3      	bne.n	d4f10 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4f48:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4f4a:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d4f4e:	d1df      	bne.n	d4f10 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d4f50:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d4f54:	b110      	cbz	r0, d4f5c <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d4f56:	b240      	sxtb	r0, r0
   d4f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f5c:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d4f60:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d4f64:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d4f68:	b1fb      	cbz	r3, d4faa <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4f6a:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d4f6c:	683a      	ldr	r2, [r7, #0]
   d4f6e:	4629      	mov	r1, r5
   d4f70:	7913      	ldrb	r3, [r2, #4]
   d4f72:	6812      	ldr	r2, [r2, #0]
   d4f74:	4620      	mov	r0, r4
   d4f76:	f7ff ffa8 	bl	d4eca <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4f7a:	6823      	ldr	r3, [r4, #0]
   d4f7c:	b282      	uxth	r2, r0
   d4f7e:	695b      	ldr	r3, [r3, #20]
   d4f80:	4629      	mov	r1, r5
   d4f82:	4620      	mov	r0, r4
   d4f84:	4798      	blx	r3
   d4f86:	2800      	cmp	r0, #0
   d4f88:	d0c2      	beq.n	d4f10 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4f8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4f8e:	2209      	movs	r2, #9
   d4f90:	4629      	mov	r1, r5
   d4f92:	4620      	mov	r0, r4
   d4f94:	f7ff fdee 	bl	d4b74 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4f98:	b938      	cbnz	r0, d4faa <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4f9a:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d4f9c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4fa0:	d1e4      	bne.n	d4f6c <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d4fa2:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d4fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4faa:	4547      	cmp	r7, r8
   d4fac:	d1da      	bne.n	d4f64 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d4fae:	2000      	movs	r0, #0
   d4fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4fb4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d4fb4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d4fb6:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d4fba:	7203      	strb	r3, [r0, #8]
}
   d4fbc:	bd10      	pop	{r4, pc}

000d4fbe <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d4fbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fc0:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d4fc2:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d4fc4:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d4fc6:	a901      	add	r1, sp, #4
   d4fc8:	f000 fb6f 	bl	d56aa <ltoa>
  return mqtt->publish(topic, payload, qos);
   d4fcc:	7a23      	ldrb	r3, [r4, #8]
   d4fce:	aa01      	add	r2, sp, #4
   d4fd0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4fd4:	f7ff ff68 	bl	d4ea8 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d4fd8:	b004      	add	sp, #16
   d4fda:	bd10      	pop	{r4, pc}

000d4fdc <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d4fdc:	f7ff bfef 	b.w	d4fbe <_ZN21Adafruit_MQTT_Publish7publishEl>

000d4fe0 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d4fe0:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d4fe2:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d4fe4:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d4fe6:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d4fe8:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d4fea:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d4fec:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d4fee:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d4ff0:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d4ff2:	6283      	str	r3, [r0, #40]	; 0x28
   d4ff4:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d4ff6:	6303      	str	r3, [r0, #48]	; 0x30
}
   d4ff8:	bd10      	pop	{r4, pc}

000d4ffa <_GLOBAL__sub_I__Z11printBufferPht>:
   d4ffa:	f000 b811 	b.w	d5020 <HAL_Pin_Map>
	...

000d5000 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <netdb_freeaddrinfo+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030268 	.word	0x00030268

000d5010 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <netdb_getaddrinfo+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	68db      	ldr	r3, [r3, #12]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030268 	.word	0x00030268

000d5020 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <HAL_Pin_Map+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	681b      	ldr	r3, [r3, #0]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	0003022c 	.word	0x0003022c

000d5030 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <HAL_Validate_Pin_Function+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	685b      	ldr	r3, [r3, #4]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	0003022c 	.word	0x0003022c

000d5040 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <HAL_Pin_Mode+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	689b      	ldr	r3, [r3, #8]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003022c 	.word	0x0003022c

000d5050 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <HAL_Get_Pin_Mode+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	68db      	ldr	r3, [r3, #12]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	0003022c 	.word	0x0003022c

000d5060 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_GPIO_Write+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	691b      	ldr	r3, [r3, #16]
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	0003022c 	.word	0x0003022c

000d5070 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_ADC_Read+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	0003022c 	.word	0x0003022c

000d5080 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_SPI_Init+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	69db      	ldr	r3, [r3, #28]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030230 	.word	0x00030230

000d5090 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_SPI_Is_Enabled+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	6a1b      	ldr	r3, [r3, #32]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	00030230 	.word	0x00030230

000d50a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <if_index_to_name+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	695b      	ldr	r3, [r3, #20]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003026c 	.word	0x0003026c

000d50b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_RNG_GetRandomNumber+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	685b      	ldr	r3, [r3, #4]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	00030218 	.word	0x00030218

000d50c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_Delay_Microseconds+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	68db      	ldr	r3, [r3, #12]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	00030218 	.word	0x00030218

000d50d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	695b      	ldr	r3, [r3, #20]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030218 	.word	0x00030218

000d50e0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_RTC_Get_UnixTime+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	69db      	ldr	r3, [r3, #28]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030218 	.word	0x00030218

000d50f0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_RTC_Time_Is_Valid+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030218 	.word	0x00030218

000d5100 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <os_thread_is_current+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	689b      	ldr	r3, [r3, #8]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030248 	.word	0x00030248

000d5110 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <os_thread_join+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	691b      	ldr	r3, [r3, #16]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030248 	.word	0x00030248

000d5120 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <os_thread_cleanup+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	695b      	ldr	r3, [r3, #20]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030248 	.word	0x00030248

000d5130 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <os_mutex_recursive_create+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030248 	.word	0x00030248

000d5140 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <os_mutex_recursive_destroy+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030248 	.word	0x00030248

000d5150 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <inet_inet_ntop+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	695b      	ldr	r3, [r3, #20]
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030264 	.word	0x00030264

000d5160 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <inet_htonl+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6a1b      	ldr	r3, [r3, #32]
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030264 	.word	0x00030264

000d5170 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <inet_htons+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030264 	.word	0x00030264

000d5180 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <HAL_USART_Init+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	681b      	ldr	r3, [r3, #0]
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	0003023c 	.word	0x0003023c

000d5190 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <HAL_USART_Write_Data+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	68db      	ldr	r3, [r3, #12]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	0003023c 	.word	0x0003023c

000d51a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <HAL_USART_Available_Data+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	691b      	ldr	r3, [r3, #16]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003023c 	.word	0x0003023c

000d51b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <HAL_USART_Read_Data+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	695b      	ldr	r3, [r3, #20]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003023c 	.word	0x0003023c

000d51c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <HAL_USART_Peek_Data+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	699b      	ldr	r3, [r3, #24]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003023c 	.word	0x0003023c

000d51d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <HAL_USART_Flush_Data+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	69db      	ldr	r3, [r3, #28]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	0003023c 	.word	0x0003023c

000d51e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <HAL_USART_Is_Enabled+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	6a1b      	ldr	r3, [r3, #32]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	0003023c 	.word	0x0003023c

000d51f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <HAL_USART_Available_Data_For_Write+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	0003023c 	.word	0x0003023c

000d5200 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <HAL_I2C_Write_Data+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	6a1b      	ldr	r3, [r3, #32]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030228 	.word	0x00030228

000d5210 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <HAL_I2C_Available_Data+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030228 	.word	0x00030228

000d5220 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <HAL_I2C_Read_Data+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030228 	.word	0x00030228

000d5230 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <HAL_I2C_Peek_Data+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030228 	.word	0x00030228

000d5240 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <HAL_I2C_Flush_Data+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030228 	.word	0x00030228

000d5250 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_I2C_Is_Enabled+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030228 	.word	0x00030228

000d5260 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <HAL_I2C_Init+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030228 	.word	0x00030228

000d5270 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <sock_setsockopt+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	699b      	ldr	r3, [r3, #24]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030238 	.word	0x00030238

000d5280 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <sock_close+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	69db      	ldr	r3, [r3, #28]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030238 	.word	0x00030238

000d5290 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <sock_connect+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	6a1b      	ldr	r3, [r3, #32]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	00030238 	.word	0x00030238

000d52a0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <sock_recv+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	00030238 	.word	0x00030238

000d52b0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <sock_send+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	00030238 	.word	0x00030238

000d52c0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <sock_socket+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	00030238 	.word	0x00030238

000d52d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_USB_USART_Init+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	681b      	ldr	r3, [r3, #0]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003024c 	.word	0x0003024c

000d52e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_USB_USART_Begin+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	685b      	ldr	r3, [r3, #4]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003024c 	.word	0x0003024c

000d52f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_USB_USART_Available_Data+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	691b      	ldr	r3, [r3, #16]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	0003024c 	.word	0x0003024c

000d5300 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	695b      	ldr	r3, [r3, #20]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	0003024c 	.word	0x0003024c

000d5310 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_USB_USART_Receive_Data+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	699b      	ldr	r3, [r3, #24]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	0003024c 	.word	0x0003024c

000d5320 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_USB_USART_Send_Data+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	69db      	ldr	r3, [r3, #28]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	0003024c 	.word	0x0003024c

000d5330 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_USB_USART_Flush_Data+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	6a1b      	ldr	r3, [r3, #32]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	0003024c 	.word	0x0003024c

000d5340 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <panic_+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030260 	.word	0x00030260

000d5350 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <log_message+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030260 	.word	0x00030260

000d5360 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <system_mode+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	681b      	ldr	r3, [r3, #0]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030220 	.word	0x00030220

000d5370 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <set_system_mode+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	685b      	ldr	r3, [r3, #4]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030220 	.word	0x00030220

000d5380 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <system_delay_ms+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	695b      	ldr	r3, [r3, #20]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030220 	.word	0x00030220

000d5390 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <application_thread_current+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030220 	.word	0x00030220

000d53a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <application_thread_invoke+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030220 	.word	0x00030220

000d53b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <system_thread_get_state+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030220 	.word	0x00030220

000d53c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b03      	ldr	r3, [pc, #12]	; (d53d0 <system_ctrl_set_app_request_handler+0x10>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d53ca:	9301      	str	r3, [sp, #4]
   d53cc:	bd08      	pop	{r3, pc}
   d53ce:	0000      	.short	0x0000
   d53d0:	00030220 	.word	0x00030220

000d53d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b03      	ldr	r3, [pc, #12]	; (d53e4 <system_ctrl_set_result+0x10>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d53de:	9301      	str	r3, [sp, #4]
   d53e0:	bd08      	pop	{r3, pc}
   d53e2:	0000      	.short	0x0000
   d53e4:	00030220 	.word	0x00030220

000d53e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <network_connect+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	685b      	ldr	r3, [r3, #4]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030240 	.word	0x00030240

000d53f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <network_connecting+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030240 	.word	0x00030240

000d5408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <network_disconnect+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	68db      	ldr	r3, [r3, #12]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030240 	.word	0x00030240

000d5418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <network_ready+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030240 	.word	0x00030240

000d5428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <network_on+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030240 	.word	0x00030240

000d5438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <network_off+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030240 	.word	0x00030240

000d5448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <network_listen+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030240 	.word	0x00030240

000d5458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <network_listening+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a1b      	ldr	r3, [r3, #32]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030240 	.word	0x00030240

000d5468 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <network_set_listen_timeout+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030240 	.word	0x00030240

000d5478 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <network_get_listen_timeout+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030240 	.word	0x00030240

000d5488 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <spark_variable+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	681b      	ldr	r3, [r3, #0]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030244 	.word	0x00030244

000d5498 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <spark_process+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	689b      	ldr	r3, [r3, #8]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030244 	.word	0x00030244

000d54a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <spark_cloud_flag_connected+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	695b      	ldr	r3, [r3, #20]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030244 	.word	0x00030244

000d54b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <spark_send_event+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6a1b      	ldr	r3, [r3, #32]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030244 	.word	0x00030244

000d54c8 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <spark_sync_time+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030244 	.word	0x00030244

000d54d8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <spark_sync_time_pending+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030244 	.word	0x00030244

000d54e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030244 	.word	0x00030244

000d54f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <malloc+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	681b      	ldr	r3, [r3, #0]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	0003021c 	.word	0x0003021c

000d5508 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <free+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	685b      	ldr	r3, [r3, #4]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	0003021c 	.word	0x0003021c

000d5518 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <realloc+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	689b      	ldr	r3, [r3, #8]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	0003021c 	.word	0x0003021c

000d5528 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <siprintf+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	691b      	ldr	r3, [r3, #16]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	0003021c 	.word	0x0003021c

000d5538 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <siscanf+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	699b      	ldr	r3, [r3, #24]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003021c 	.word	0x0003021c

000d5548 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <vsnprintf+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003021c 	.word	0x0003021c

000d5558 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <abort+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003021c 	.word	0x0003021c

000d5568 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <_malloc_r+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003021c 	.word	0x0003021c

000d5578 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <__errno+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003021c 	.word	0x0003021c

000d5588 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5588:	2200      	movs	r2, #0
   d558a:	4611      	mov	r1, r2
   d558c:	6840      	ldr	r0, [r0, #4]
   d558e:	f7ff bf63 	b.w	d5458 <network_listening>

000d5592 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5592:	2200      	movs	r2, #0
   d5594:	4611      	mov	r1, r2
   d5596:	6840      	ldr	r0, [r0, #4]
   d5598:	f7ff bf6e 	b.w	d5478 <network_get_listen_timeout>

000d559c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d559c:	2200      	movs	r2, #0
   d559e:	6840      	ldr	r0, [r0, #4]
   d55a0:	f7ff bf62 	b.w	d5468 <network_set_listen_timeout>

000d55a4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55a4:	2200      	movs	r2, #0
   d55a6:	f081 0101 	eor.w	r1, r1, #1
   d55aa:	6840      	ldr	r0, [r0, #4]
   d55ac:	f7ff bf4c 	b.w	d5448 <network_listen>

000d55b0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55b0:	2300      	movs	r3, #0
   d55b2:	461a      	mov	r2, r3
   d55b4:	4619      	mov	r1, r3
   d55b6:	6840      	ldr	r0, [r0, #4]
   d55b8:	f7ff bf3e 	b.w	d5438 <network_off>

000d55bc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55bc:	2300      	movs	r3, #0
   d55be:	461a      	mov	r2, r3
   d55c0:	4619      	mov	r1, r3
   d55c2:	6840      	ldr	r0, [r0, #4]
   d55c4:	f7ff bf30 	b.w	d5428 <network_on>

000d55c8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55c8:	2200      	movs	r2, #0
   d55ca:	4611      	mov	r1, r2
   d55cc:	6840      	ldr	r0, [r0, #4]
   d55ce:	f7ff bf23 	b.w	d5418 <network_ready>

000d55d2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55d2:	2200      	movs	r2, #0
   d55d4:	4611      	mov	r1, r2
   d55d6:	6840      	ldr	r0, [r0, #4]
   d55d8:	f7ff bf0e 	b.w	d53f8 <network_connecting>

000d55dc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55dc:	2200      	movs	r2, #0
   d55de:	2102      	movs	r1, #2
   d55e0:	6840      	ldr	r0, [r0, #4]
   d55e2:	f7ff bf11 	b.w	d5408 <network_disconnect>

000d55e6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55e6:	2300      	movs	r3, #0
   d55e8:	461a      	mov	r2, r3
   d55ea:	6840      	ldr	r0, [r0, #4]
   d55ec:	f7ff befc 	b.w	d53e8 <network_connect>

000d55f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d55f0:	4b02      	ldr	r3, [pc, #8]	; (d55fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d55f2:	2203      	movs	r2, #3
   d55f4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d55f6:	4a02      	ldr	r2, [pc, #8]	; (d5600 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d55f8:	601a      	str	r2, [r3, #0]
   d55fa:	4770      	bx	lr
   d55fc:	2003e39c 	.word	0x2003e39c
   d5600:	000d8484 	.word	0x000d8484

000d5604 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5604:	4770      	bx	lr

000d5606 <_ZN8SPIClassD0Ev>:
   d5606:	b510      	push	{r4, lr}
   d5608:	210c      	movs	r1, #12
   d560a:	4604      	mov	r4, r0
   d560c:	f001 fd88 	bl	d7120 <_ZdlPvj>
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5614:	b510      	push	{r4, lr}
   d5616:	4b05      	ldr	r3, [pc, #20]	; (d562c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5618:	6003      	str	r3, [r0, #0]
   d561a:	4604      	mov	r4, r0
{
    _spi = spi;
   d561c:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d561e:	4608      	mov	r0, r1
   d5620:	f7ff fd2e 	bl	d5080 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5624:	2300      	movs	r3, #0
   d5626:	60a3      	str	r3, [r4, #8]
}
   d5628:	4620      	mov	r0, r4
   d562a:	bd10      	pop	{r4, pc}
   d562c:	000d84b8 	.word	0x000d84b8

000d5630 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5630:	7900      	ldrb	r0, [r0, #4]
   d5632:	f7ff bd2d 	b.w	d5090 <HAL_SPI_Is_Enabled>

000d5636 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5636:	b510      	push	{r4, lr}
   d5638:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d563a:	6800      	ldr	r0, [r0, #0]
   d563c:	b118      	cbz	r0, d5646 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d563e:	f7ff ff63 	bl	d5508 <free>
            wakeupSource_ = nullptr;
   d5642:	2300      	movs	r3, #0
   d5644:	6023      	str	r3, [r4, #0]
   d5646:	bd10      	pop	{r4, pc}

000d5648 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5648:	b510      	push	{r4, lr}
   d564a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d564c:	f7ff fff3 	bl	d5636 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5650:	4620      	mov	r0, r4
   d5652:	bd10      	pop	{r4, pc}

000d5654 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5654:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5656:	4c09      	ldr	r4, [pc, #36]	; (d567c <_GLOBAL__sub_I_System+0x28>)
   d5658:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d565a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d565e:	6020      	str	r0, [r4, #0]
   d5660:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5662:	71a0      	strb	r0, [r4, #6]
   d5664:	8120      	strh	r0, [r4, #8]
   d5666:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5668:	f7ff fe82 	bl	d5370 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d566c:	4620      	mov	r0, r4
   d566e:	4a04      	ldr	r2, [pc, #16]	; (d5680 <_GLOBAL__sub_I_System+0x2c>)
   d5670:	4904      	ldr	r1, [pc, #16]	; (d5684 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5676:	f001 bd45 	b.w	d7104 <__aeabi_atexit>
   d567a:	bf00      	nop
   d567c:	2003e3a4 	.word	0x2003e3a4
   d5680:	2003e1ec 	.word	0x2003e1ec
   d5684:	000d5649 	.word	0x000d5649

000d5688 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5688:	b510      	push	{r4, lr}
   d568a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d568c:	f002 f883 	bl	d7796 <strlen>
   d5690:	3801      	subs	r0, #1
   d5692:	1823      	adds	r3, r4, r0
   d5694:	4620      	mov	r0, r4
	while(i<j){
   d5696:	4298      	cmp	r0, r3
   d5698:	d206      	bcs.n	d56a8 <_Z11str_reversePc+0x20>
		c = *i;
   d569a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d569c:	7819      	ldrb	r1, [r3, #0]
   d569e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d56a2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d56a6:	e7f6      	b.n	d5696 <_Z11str_reversePc+0xe>
   d56a8:	bd10      	pop	{r4, pc}

000d56aa <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d56aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d56ae:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d56b0:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d56b2:	4615      	mov	r5, r2
   d56b4:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d56b6:	bf34      	ite	cc
   d56b8:	4615      	movcc	r5, r2
   d56ba:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d56bc:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d56be:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d56c0:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d56c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d56c6:	d107      	bne.n	d56d8 <ltoa+0x2e>
   d56c8:	4298      	cmp	r0, r3
   d56ca:	da05      	bge.n	d56d8 <ltoa+0x2e>
      {
            *head++ = '-';
   d56cc:	232d      	movs	r3, #45	; 0x2d
   d56ce:	f101 0801 	add.w	r8, r1, #1
   d56d2:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d56d4:	4240      	negs	r0, r0
   d56d6:	e001      	b.n	d56dc <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d56d8:	b1b0      	cbz	r0, d5708 <ltoa+0x5e>
   d56da:	46a0      	mov	r8, r4
   d56dc:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d56e0:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d56e2:	462a      	mov	r2, r5
   d56e4:	4601      	mov	r1, r0
   d56e6:	a801      	add	r0, sp, #4
   d56e8:	f001 ffbe 	bl	d7668 <ldiv>
   d56ec:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d56ee:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d56f0:	2b09      	cmp	r3, #9
   d56f2:	bfcc      	ite	gt
   d56f4:	2237      	movgt	r2, #55	; 0x37
   d56f6:	2230      	movle	r2, #48	; 0x30
   d56f8:	fa52 f383 	uxtab	r3, r2, r3
   d56fc:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5700:	3701      	adds	r7, #1
   d5702:	2800      	cmp	r0, #0
   d5704:	d1ed      	bne.n	d56e2 <ltoa+0x38>
   d5706:	e006      	b.n	d5716 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5708:	2330      	movs	r3, #48	; 0x30
   d570a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d570e:	46a0      	mov	r8, r4
   d5710:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5714:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5716:	463a      	mov	r2, r7
   d5718:	1c71      	adds	r1, r6, #1
   d571a:	4640      	mov	r0, r8
   d571c:	f001 ffb8 	bl	d7690 <memcpy>
      return str;
}
   d5720:	4620      	mov	r0, r4
   d5722:	b00c      	add	sp, #48	; 0x30
   d5724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5728 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5728:	b570      	push	{r4, r5, r6, lr}
   d572a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d572c:	1e91      	subs	r1, r2, #2
   d572e:	2922      	cmp	r1, #34	; 0x22
   d5730:	d820      	bhi.n	d5774 <ultoa+0x4c>
   d5732:	4625      	mov	r5, r4
   d5734:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5736:	b910      	cbnz	r0, d573e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5738:	4423      	add	r3, r4
            *ptr++ = '0';
   d573a:	2230      	movs	r2, #48	; 0x30
   d573c:	e00e      	b.n	d575c <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d573e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5742:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5746:	b2c1      	uxtb	r1, r0
   d5748:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d574c:	2809      	cmp	r0, #9
                *ptr += '0';
   d574e:	bf94      	ite	ls
   d5750:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5752:	3157      	addhi	r1, #87	; 0x57
   d5754:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5758:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d575a:	e7eb      	b.n	d5734 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d575c:	4299      	cmp	r1, r3
   d575e:	d202      	bcs.n	d5766 <ultoa+0x3e>
            *ptr++ = '0';
   d5760:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5764:	e7fa      	b.n	d575c <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5766:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5768:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d576a:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d576c:	f7ff ff8c 	bl	d5688 <_Z11str_reversePc>
	return buffer;
   d5770:	4620      	mov	r0, r4
   d5772:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5774:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5776:	bd70      	pop	{r4, r5, r6, pc}

000d5778 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5778:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d577a:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d577c:	460c      	mov	r4, r1
   d577e:	4615      	mov	r5, r2
	if(a<0){
   d5780:	da0b      	bge.n	d579a <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5786:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d578a:	bf14      	ite	ne
   d578c:	4258      	negne	r0, r3
   d578e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5790:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5792:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5794:	462a      	mov	r2, r5
   d5796:	4419      	add	r1, r3
   d5798:	e000      	b.n	d579c <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d579a:	2301      	movs	r3, #1
   d579c:	f7ff ffc4 	bl	d5728 <ultoa>
	}
	return buffer;
}
   d57a0:	4620      	mov	r0, r4
   d57a2:	bd38      	pop	{r3, r4, r5, pc}

000d57a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d57a4:	b510      	push	{r4, lr}
   d57a6:	4604      	mov	r4, r0
{
	free(buffer);
   d57a8:	6800      	ldr	r0, [r0, #0]
   d57aa:	f7ff fead 	bl	d5508 <free>
}
   d57ae:	4620      	mov	r0, r4
   d57b0:	bd10      	pop	{r4, pc}

000d57b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d57b2:	b510      	push	{r4, lr}
   d57b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d57b6:	6800      	ldr	r0, [r0, #0]
   d57b8:	b108      	cbz	r0, d57be <_ZN6String10invalidateEv+0xc>
   d57ba:	f7ff fea5 	bl	d5508 <free>
	buffer = NULL;
   d57be:	2300      	movs	r3, #0
   d57c0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d57c2:	60a3      	str	r3, [r4, #8]
   d57c4:	6063      	str	r3, [r4, #4]
   d57c6:	bd10      	pop	{r4, pc}

000d57c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d57c8:	b538      	push	{r3, r4, r5, lr}
   d57ca:	4604      	mov	r4, r0
   d57cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d57ce:	6800      	ldr	r0, [r0, #0]
   d57d0:	3101      	adds	r1, #1
   d57d2:	f7ff fea1 	bl	d5518 <realloc>
	if (newbuffer) {
   d57d6:	b110      	cbz	r0, d57de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d57d8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d57dc:	2001      	movs	r0, #1
	}
	return 0;
}
   d57de:	bd38      	pop	{r3, r4, r5, pc}

000d57e0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d57e2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d57e6:	b113      	cbz	r3, d57ee <_ZN6String7reserveEj+0xe>
   d57e8:	6843      	ldr	r3, [r0, #4]
   d57ea:	428b      	cmp	r3, r1
   d57ec:	d207      	bcs.n	d57fe <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d57ee:	4620      	mov	r0, r4
   d57f0:	f7ff ffea 	bl	d57c8 <_ZN6String12changeBufferEj>
   d57f4:	b120      	cbz	r0, d5800 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d57f6:	68a3      	ldr	r3, [r4, #8]
   d57f8:	b90b      	cbnz	r3, d57fe <_ZN6String7reserveEj+0x1e>
   d57fa:	6822      	ldr	r2, [r4, #0]
   d57fc:	7013      	strb	r3, [r2, #0]
   d57fe:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5800:	bd10      	pop	{r4, pc}

000d5802 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5802:	b570      	push	{r4, r5, r6, lr}
   d5804:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5806:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5808:	4604      	mov	r4, r0
   d580a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d580c:	f7ff ffe8 	bl	d57e0 <_ZN6String7reserveEj>
   d5810:	b918      	cbnz	r0, d581a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5812:	4620      	mov	r0, r4
   d5814:	f7ff ffcd 	bl	d57b2 <_ZN6String10invalidateEv>
		return *this;
   d5818:	e009      	b.n	d582e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d581a:	462a      	mov	r2, r5
   d581c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d581e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5820:	6820      	ldr	r0, [r4, #0]
   d5822:	f001 ff35 	bl	d7690 <memcpy>
	buffer[len] = 0;
   d5826:	6822      	ldr	r2, [r4, #0]
   d5828:	68a3      	ldr	r3, [r4, #8]
   d582a:	2100      	movs	r1, #0
   d582c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d582e:	4620      	mov	r0, r4
   d5830:	bd70      	pop	{r4, r5, r6, pc}

000d5832 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5832:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5834:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5836:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5838:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d583a:	6043      	str	r3, [r0, #4]
	len = 0;
   d583c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d583e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5840:	460d      	mov	r5, r1
   d5842:	b139      	cbz	r1, d5854 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5844:	4608      	mov	r0, r1
   d5846:	f001 ffa6 	bl	d7796 <strlen>
   d584a:	4629      	mov	r1, r5
   d584c:	4602      	mov	r2, r0
   d584e:	4620      	mov	r0, r4
   d5850:	f7ff ffd7 	bl	d5802 <_ZN6String4copyEPKcj>
}
   d5854:	4620      	mov	r0, r4
   d5856:	bd38      	pop	{r3, r4, r5, pc}

000d5858 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5858:	b538      	push	{r3, r4, r5, lr}
   d585a:	4605      	mov	r5, r0
	if (buffer) {
   d585c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d585e:	460c      	mov	r4, r1
	if (buffer) {
   d5860:	b160      	cbz	r0, d587c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5862:	686a      	ldr	r2, [r5, #4]
   d5864:	688b      	ldr	r3, [r1, #8]
   d5866:	429a      	cmp	r2, r3
   d5868:	d306      	bcc.n	d5878 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d586a:	6809      	ldr	r1, [r1, #0]
   d586c:	f001 ff70 	bl	d7750 <strcpy>
			len = rhs.len;
   d5870:	68a3      	ldr	r3, [r4, #8]
   d5872:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5874:	2300      	movs	r3, #0
   d5876:	e00a      	b.n	d588e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5878:	f7ff fe46 	bl	d5508 <free>
		}
	}
	buffer = rhs.buffer;
   d587c:	6823      	ldr	r3, [r4, #0]
   d587e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5880:	6863      	ldr	r3, [r4, #4]
   d5882:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5884:	68a3      	ldr	r3, [r4, #8]
   d5886:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5888:	2300      	movs	r3, #0
   d588a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d588c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d588e:	60a3      	str	r3, [r4, #8]
   d5890:	bd38      	pop	{r3, r4, r5, pc}

000d5892 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5892:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5894:	b510      	push	{r4, lr}
   d5896:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5898:	d001      	beq.n	d589e <_ZN6StringaSEOS_+0xc>
   d589a:	f7ff ffdd 	bl	d5858 <_ZN6String4moveERS_>
	return *this;
}
   d589e:	4620      	mov	r0, r4
   d58a0:	bd10      	pop	{r4, pc}

000d58a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d58a2:	b538      	push	{r3, r4, r5, lr}
   d58a4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d58a6:	460c      	mov	r4, r1
   d58a8:	b141      	cbz	r1, d58bc <_ZN6StringaSEPKc+0x1a>
   d58aa:	4608      	mov	r0, r1
   d58ac:	f001 ff73 	bl	d7796 <strlen>
   d58b0:	4621      	mov	r1, r4
   d58b2:	4602      	mov	r2, r0
   d58b4:	4628      	mov	r0, r5
   d58b6:	f7ff ffa4 	bl	d5802 <_ZN6String4copyEPKcj>
   d58ba:	e001      	b.n	d58c0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d58bc:	f7ff ff79 	bl	d57b2 <_ZN6String10invalidateEv>

	return *this;
}
   d58c0:	4628      	mov	r0, r5
   d58c2:	bd38      	pop	{r3, r4, r5, pc}

000d58c4 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d58c4:	b510      	push	{r4, lr}
   d58c6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d58c8:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d58ca:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d58cc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d58ce:	6063      	str	r3, [r4, #4]
	len = 0;
   d58d0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d58d2:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d58d4:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d58d6:	a901      	add	r1, sp, #4
   d58d8:	f7ff ff4e 	bl	d5778 <itoa>
	*this = buf;
   d58dc:	a901      	add	r1, sp, #4
   d58de:	4620      	mov	r0, r4
   d58e0:	f7ff ffdf 	bl	d58a2 <_ZN6StringaSEPKc>
}
   d58e4:	4620      	mov	r0, r4
   d58e6:	b00a      	add	sp, #40	; 0x28
   d58e8:	bd10      	pop	{r4, pc}

000d58ea <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d58ea:	b570      	push	{r4, r5, r6, lr}
   d58ec:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d58ee:	b19a      	cbz	r2, d5918 <_ZNK6String8getBytesEPhjj+0x2e>
   d58f0:	b191      	cbz	r1, d5918 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d58f2:	6885      	ldr	r5, [r0, #8]
   d58f4:	429d      	cmp	r5, r3
   d58f6:	d802      	bhi.n	d58fe <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d58f8:	2300      	movs	r3, #0
   d58fa:	700b      	strb	r3, [r1, #0]
		return;
   d58fc:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d58fe:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d5900:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d5902:	6801      	ldr	r1, [r0, #0]
   d5904:	42ac      	cmp	r4, r5
   d5906:	bf28      	it	cs
   d5908:	462c      	movcs	r4, r5
   d590a:	4419      	add	r1, r3
   d590c:	4622      	mov	r2, r4
   d590e:	4630      	mov	r0, r6
   d5910:	f001 ff83 	bl	d781a <strncpy>
	buf[n] = 0;
   d5914:	2300      	movs	r3, #0
   d5916:	5533      	strb	r3, [r6, r4]
   d5918:	bd70      	pop	{r4, r5, r6, pc}
	...

000d591c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d591e:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5920:	460f      	mov	r7, r1
   d5922:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5924:	490c      	ldr	r1, [pc, #48]	; (d5958 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d5926:	bf88      	it	hi
   d5928:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d592a:	4614      	mov	r4, r2
   d592c:	4606      	mov	r6, r0
	if (left > right) {
   d592e:	bf84      	itt	hi
   d5930:	462c      	movhi	r4, r5
   d5932:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5934:	f7ff ff7d 	bl	d5832 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5938:	68ba      	ldr	r2, [r7, #8]
   d593a:	4294      	cmp	r4, r2
   d593c:	d80a      	bhi.n	d5954 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d593e:	6839      	ldr	r1, [r7, #0]
   d5940:	4295      	cmp	r5, r2
   d5942:	bf94      	ite	ls
   d5944:	ebc4 0205 	rsbls	r2, r4, r5
   d5948:	ebc4 0202 	rsbhi	r2, r4, r2
   d594c:	4421      	add	r1, r4
   d594e:	4630      	mov	r0, r6
   d5950:	f7ff ff57 	bl	d5802 <_ZN6String4copyEPKcj>
	return out;
}
   d5954:	4630      	mov	r0, r6
   d5956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5958:	000d8295 	.word	0x000d8295

000d595c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d595c:	b510      	push	{r4, lr}
   d595e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5960:	6800      	ldr	r0, [r0, #0]
   d5962:	b108      	cbz	r0, d5968 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5964:	f7ff fbec 	bl	d5140 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5968:	4620      	mov	r0, r4
   d596a:	bd10      	pop	{r4, pc}

000d596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d596c:	680b      	ldr	r3, [r1, #0]
   d596e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5970:	b113      	cbz	r3, d5978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5972:	685a      	ldr	r2, [r3, #4]
   d5974:	3201      	adds	r2, #1
   d5976:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5978:	4770      	bx	lr
	...

000d597c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d597c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d597e:	4c06      	ldr	r4, [pc, #24]	; (d5998 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5980:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5982:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5984:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5986:	f7ff fbd3 	bl	d5130 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d598a:	4620      	mov	r0, r4
   d598c:	4a03      	ldr	r2, [pc, #12]	; (d599c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d598e:	4904      	ldr	r1, [pc, #16]	; (d59a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5994:	f001 bbb6 	b.w	d7104 <__aeabi_atexit>
   d5998:	2003e3b0 	.word	0x2003e3b0
   d599c:	2003e1ec 	.word	0x2003e1ec
   d59a0:	000d595d 	.word	0x000d595d

000d59a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d59a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59a6:	4606      	mov	r6, r0
   d59a8:	460d      	mov	r5, r1
   d59aa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d59ac:	2400      	movs	r4, #0
  while (size--) {
   d59ae:	42bd      	cmp	r5, r7
   d59b0:	d00c      	beq.n	d59cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d59b2:	6833      	ldr	r3, [r6, #0]
   d59b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d59b8:	689b      	ldr	r3, [r3, #8]
   d59ba:	4630      	mov	r0, r6
   d59bc:	4798      	blx	r3
     if (chunk>=0)
   d59be:	2800      	cmp	r0, #0
   d59c0:	db01      	blt.n	d59c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59c2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d59c4:	e7f3      	b.n	d59ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59c6:	2c00      	cmp	r4, #0
   d59c8:	bf08      	it	eq
   d59ca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d59cc:	4620      	mov	r0, r4
   d59ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d59d0:	b570      	push	{r4, r5, r6, lr}
   d59d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d59d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d59d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d59d8:	b149      	cbz	r1, d59ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d59da:	f001 fedc 	bl	d7796 <strlen>
   d59de:	682b      	ldr	r3, [r5, #0]
   d59e0:	4602      	mov	r2, r0
   d59e2:	4621      	mov	r1, r4
   d59e4:	4628      	mov	r0, r5
   d59e6:	68db      	ldr	r3, [r3, #12]
    }
   d59e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59ec:	4718      	bx	r3
    }
   d59ee:	bd70      	pop	{r4, r5, r6, pc}

000d59f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d59f0:	6803      	ldr	r3, [r0, #0]
   d59f2:	689b      	ldr	r3, [r3, #8]
   d59f4:	4718      	bx	r3

000d59f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d59f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d59fc:	f7ff fff8 	bl	d59f0 <_ZN5Print5printEc>
  n += print('\n');
   d5a00:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5a02:	4604      	mov	r4, r0
  n += print('\n');
   d5a04:	4628      	mov	r0, r5
   d5a06:	f7ff fff3 	bl	d59f0 <_ZN5Print5printEc>
  return n;
}
   d5a0a:	4420      	add	r0, r4
   d5a0c:	bd38      	pop	{r3, r4, r5, pc}

000d5a0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5a0e:	b538      	push	{r3, r4, r5, lr}
   d5a10:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a12:	f7ff ffdd 	bl	d59d0 <_ZN5Print5writeEPKc>
   d5a16:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5a18:	4628      	mov	r0, r5
   d5a1a:	f7ff ffec 	bl	d59f6 <_ZN5Print7printlnEv>
  return n;
}
   d5a1e:	4420      	add	r0, r4
   d5a20:	bd38      	pop	{r3, r4, r5, pc}

000d5a22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a22:	b530      	push	{r4, r5, lr}
   d5a24:	b08b      	sub	sp, #44	; 0x2c
   d5a26:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a28:	2100      	movs	r1, #0
   d5a2a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a2e:	2a01      	cmp	r2, #1
   d5a30:	bf98      	it	ls
   d5a32:	220a      	movls	r2, #10
   d5a34:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5a38:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5a3c:	fb05 3312 	mls	r3, r5, r2, r3
   d5a40:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a44:	2b09      	cmp	r3, #9
   d5a46:	bf94      	ite	ls
   d5a48:	3330      	addls	r3, #48	; 0x30
   d5a4a:	3337      	addhi	r3, #55	; 0x37
   d5a4c:	b2db      	uxtb	r3, r3
   d5a4e:	4621      	mov	r1, r4
   d5a50:	f804 3901 	strb.w	r3, [r4], #-1
   d5a54:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a56:	2d00      	cmp	r5, #0
   d5a58:	d1ee      	bne.n	d5a38 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a5a:	f7ff ffb9 	bl	d59d0 <_ZN5Print5writeEPKc>
}
   d5a5e:	b00b      	add	sp, #44	; 0x2c
   d5a60:	bd30      	pop	{r4, r5, pc}

000d5a62 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5a62:	b40c      	push	{r2, r3}
   d5a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a68:	b087      	sub	sp, #28
   d5a6a:	af00      	add	r7, sp, #0
   d5a6c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5a70:	4605      	mov	r5, r0
   d5a72:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5a76:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5a78:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5a7a:	4623      	mov	r3, r4
   d5a7c:	464a      	mov	r2, r9
   d5a7e:	2114      	movs	r1, #20
   d5a80:	1d38      	adds	r0, r7, #4
   d5a82:	f7ff fd61 	bl	d5548 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5a86:	2813      	cmp	r0, #19
   d5a88:	d805      	bhi.n	d5a96 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a8a:	1d39      	adds	r1, r7, #4
   d5a8c:	4628      	mov	r0, r5
   d5a8e:	f7ff ff9f 	bl	d59d0 <_ZN5Print5writeEPKc>
   d5a92:	4604      	mov	r4, r0
   d5a94:	e013      	b.n	d5abe <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5a96:	f100 0308 	add.w	r3, r0, #8
   d5a9a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5a9e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5aa0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5aa4:	1c41      	adds	r1, r0, #1
   d5aa6:	4623      	mov	r3, r4
   d5aa8:	464a      	mov	r2, r9
   d5aaa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5aac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5aae:	f7ff fd4b 	bl	d5548 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ab2:	4669      	mov	r1, sp
   d5ab4:	4628      	mov	r0, r5
   d5ab6:	f7ff ff8b 	bl	d59d0 <_ZN5Print5writeEPKc>
   d5aba:	4604      	mov	r4, r0
   d5abc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5abe:	b11e      	cbz	r6, d5ac8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5ac0:	4628      	mov	r0, r5
   d5ac2:	f7ff ff98 	bl	d59f6 <_ZN5Print7printlnEv>
   d5ac6:	4404      	add	r4, r0
    return n;
}
   d5ac8:	4620      	mov	r0, r4
   d5aca:	371c      	adds	r7, #28
   d5acc:	46bd      	mov	sp, r7
   d5ace:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ad2:	b002      	add	sp, #8
   d5ad4:	4770      	bx	lr
	...

000d5ad8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ad8:	4b01      	ldr	r3, [pc, #4]	; (d5ae0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ada:	4a02      	ldr	r2, [pc, #8]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5adc:	601a      	str	r2, [r3, #0]
   d5ade:	4770      	bx	lr
   d5ae0:	2003e3b4 	.word	0x2003e3b4
   d5ae4:	000d8533 	.word	0x000d8533

000d5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5ae8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5aea:	2000      	movs	r0, #0
   d5aec:	f7ff fcf4 	bl	d54d8 <spark_sync_time_pending>
   d5af0:	b128      	cbz	r0, d5afe <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5af2:	f7ff fcd9 	bl	d54a8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5af6:	f080 0001 	eor.w	r0, r0, #1
   d5afa:	b2c0      	uxtb	r0, r0
   d5afc:	bd08      	pop	{r3, pc}
   d5afe:	2001      	movs	r0, #1
    }
   d5b00:	bd08      	pop	{r3, pc}
	...

000d5b04 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5b04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5b08:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b10:	d40f      	bmi.n	d5b32 <_ZN9TimeClass4zoneEf+0x2e>
   d5b12:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5b16:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b1e:	dc08      	bgt.n	d5b32 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5b20:	eddf 7a04 	vldr	s15, [pc, #16]	; d5b34 <_ZN9TimeClass4zoneEf+0x30>
   d5b24:	4b04      	ldr	r3, [pc, #16]	; (d5b38 <_ZN9TimeClass4zoneEf+0x34>)
   d5b26:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5b2a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5b2e:	ed83 0a00 	vstr	s0, [r3]
   d5b32:	4770      	bx	lr
   d5b34:	45610000 	.word	0x45610000
   d5b38:	2003e3c0 	.word	0x2003e3c0

000d5b3c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d5b3e:	4b0e      	ldr	r3, [pc, #56]	; (d5b78 <_ZN9TimeClass7timeStrEl+0x3c>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	4419      	add	r1, r3
   d5b44:	4b0d      	ldr	r3, [pc, #52]	; (d5b7c <_ZN9TimeClass7timeStrEl+0x40>)
   d5b46:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5b48:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d5b4a:	a802      	add	r0, sp, #8
   d5b4c:	4419      	add	r1, r3
   d5b4e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d5b52:	f001 fc91 	bl	d7478 <localtime>
        char* ascstr = asctime(calendar_time);
   d5b56:	f001 fc41 	bl	d73dc <asctime>
   d5b5a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d5b5c:	f001 fe1b 	bl	d7796 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d5b60:	4428      	add	r0, r5
   d5b62:	2300      	movs	r3, #0
   d5b64:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5b68:	4629      	mov	r1, r5
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	f7ff fe61 	bl	d5832 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5b70:	4620      	mov	r0, r4
   d5b72:	b003      	add	sp, #12
   d5b74:	bd30      	pop	{r4, r5, pc}
   d5b76:	bf00      	nop
   d5b78:	2003e3c0 	.word	0x2003e3c0
   d5b7c:	2003e3bc 	.word	0x2003e3bc

000d5b80 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5b80:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5b82:	2000      	movs	r0, #0
   d5b84:	f7ff fab4 	bl	d50f0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5b88:	4604      	mov	r4, r0
   d5b8a:	b968      	cbnz	r0, d5ba8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5b8c:	f7ff fbe8 	bl	d5360 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5b90:	2801      	cmp	r0, #1
   d5b92:	d10b      	bne.n	d5bac <_ZN9TimeClass7isValidEv+0x2c>
   d5b94:	4620      	mov	r0, r4
   d5b96:	f7ff fc0b 	bl	d53b0 <system_thread_get_state>
   d5b9a:	b938      	cbnz	r0, d5bac <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5b9c:	f7ff ffa4 	bl	d5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5ba0:	b930      	cbnz	r0, d5bb0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5ba2:	f7ff fc79 	bl	d5498 <spark_process>
   d5ba6:	e7f9      	b.n	d5b9c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5ba8:	2001      	movs	r0, #1
   d5baa:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5bac:	2000      	movs	r0, #0
   d5bae:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5bb0:	f7ff ff9a 	bl	d5ae8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5bb4:	2000      	movs	r0, #0
   d5bb6:	f7ff fa9b 	bl	d50f0 <HAL_RTC_Time_Is_Valid>
   d5bba:	3000      	adds	r0, #0
   d5bbc:	bf18      	it	ne
   d5bbe:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5bc0:	bd10      	pop	{r4, pc}

000d5bc2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5bc2:	b508      	push	{r3, lr}
    (void)isValid();
   d5bc4:	f7ff ffdc 	bl	d5b80 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5bcc:	f7ff ba88 	b.w	d50e0 <HAL_RTC_Get_UnixTime>

000d5bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bd0:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bd6:	601a      	str	r2, [r3, #0]
   d5bd8:	4770      	bx	lr
   d5bda:	bf00      	nop
   d5bdc:	2003e134 	.word	0x2003e134
   d5be0:	2003e3b8 	.word	0x2003e3b8

000d5be4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5be4:	2100      	movs	r1, #0
   d5be6:	f7ff bbcb 	b.w	d5380 <system_delay_ms>

000d5bea <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bea:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5bec:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bee:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5bf0:	b113      	cbz	r3, d5bf8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bf2:	2203      	movs	r2, #3
   d5bf4:	4601      	mov	r1, r0
   d5bf6:	4798      	blx	r3
    }
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}

000d5bfc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5bfc:	b510      	push	{r4, lr}
   d5bfe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c00:	f7ff fff3 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd10      	pop	{r4, pc}

000d5c08 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5c08:	b513      	push	{r0, r1, r4, lr}
   d5c0a:	460b      	mov	r3, r1
   d5c0c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c0e:	c803      	ldmia	r0, {r0, r1}
   d5c10:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5c14:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5c18:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5c1c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5c20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5c24:	b002      	add	sp, #8
   d5c26:	bd10      	pop	{r4, pc}

000d5c28 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c28:	4803      	ldr	r0, [pc, #12]	; (d5c38 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5c2a:	4a04      	ldr	r2, [pc, #16]	; (d5c3c <_GLOBAL__sub_I_RGB+0x14>)
   d5c2c:	4904      	ldr	r1, [pc, #16]	; (d5c40 <_GLOBAL__sub_I_RGB+0x18>)
   d5c2e:	2300      	movs	r3, #0
   d5c30:	6083      	str	r3, [r0, #8]
   d5c32:	f001 ba67 	b.w	d7104 <__aeabi_atexit>
   d5c36:	bf00      	nop
   d5c38:	2003e3c4 	.word	0x2003e3c4
   d5c3c:	2003e1ec 	.word	0x2003e1ec
   d5c40:	000d5bfd 	.word	0x000d5bfd

000d5c44 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5c44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c46:	4b0c      	ldr	r3, [pc, #48]	; (d5c78 <serialEventRun+0x34>)
   d5c48:	b133      	cbz	r3, d5c58 <serialEventRun+0x14>
   d5c4a:	f000 fc31 	bl	d64b0 <_Z16_fetch_usbserialv>
   d5c4e:	6803      	ldr	r3, [r0, #0]
   d5c50:	691b      	ldr	r3, [r3, #16]
   d5c52:	4798      	blx	r3
   d5c54:	2800      	cmp	r0, #0
   d5c56:	dc09      	bgt.n	d5c6c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5c58:	4b08      	ldr	r3, [pc, #32]	; (d5c7c <serialEventRun+0x38>)
   d5c5a:	b163      	cbz	r3, d5c76 <serialEventRun+0x32>
   d5c5c:	f000 fcaa 	bl	d65b4 <_Z22__fetch_global_Serial1v>
   d5c60:	6803      	ldr	r3, [r0, #0]
   d5c62:	691b      	ldr	r3, [r3, #16]
   d5c64:	4798      	blx	r3
   d5c66:	2800      	cmp	r0, #0
   d5c68:	dc03      	bgt.n	d5c72 <serialEventRun+0x2e>
   d5c6a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5c6c:	f3af 8000 	nop.w
   d5c70:	e7f2      	b.n	d5c58 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5c72:	f3af 8000 	nop.w
   d5c76:	bd08      	pop	{r3, pc}
	...

000d5c80 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5c80:	b508      	push	{r3, lr}
	serialEventRun();
   d5c82:	f7ff ffdf 	bl	d5c44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c86:	f7ff fa23 	bl	d50d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c8a:	4b01      	ldr	r3, [pc, #4]	; (d5c90 <_post_loop+0x10>)
   d5c8c:	6018      	str	r0, [r3, #0]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	2003e708 	.word	0x2003e708

000d5c94 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5c94:	4802      	ldr	r0, [pc, #8]	; (d5ca0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5c96:	4a03      	ldr	r2, [pc, #12]	; (d5ca4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5c98:	4903      	ldr	r1, [pc, #12]	; (d5ca8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5c9a:	1a12      	subs	r2, r2, r0
   d5c9c:	f001 bcf8 	b.w	d7690 <memcpy>
   d5ca0:	2003f400 	.word	0x2003f400
   d5ca4:	2003f404 	.word	0x2003f404
   d5ca8:	000d8a30 	.word	0x000d8a30

000d5cac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5cac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cae:	2300      	movs	r3, #0
   d5cb0:	9300      	str	r3, [sp, #0]
   d5cb2:	461a      	mov	r2, r3
   d5cb4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cb8:	f7ff fb8c 	bl	d53d4 <system_ctrl_set_result>
}
   d5cbc:	b003      	add	sp, #12
   d5cbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5cc4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5cc4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5cc6:	8843      	ldrh	r3, [r0, #2]
   d5cc8:	2b0a      	cmp	r3, #10
   d5cca:	d008      	beq.n	d5cde <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ccc:	2b50      	cmp	r3, #80	; 0x50
   d5cce:	d109      	bne.n	d5ce4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5cd0:	4b09      	ldr	r3, [pc, #36]	; (d5cf8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5cd2:	681b      	ldr	r3, [r3, #0]
   d5cd4:	b13b      	cbz	r3, d5ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5cd6:	b003      	add	sp, #12
   d5cd8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5cdc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5cde:	f7ff ffe5 	bl	d5cac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5ce2:	e006      	b.n	d5cf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ce4:	2300      	movs	r3, #0
   d5ce6:	9300      	str	r3, [sp, #0]
   d5ce8:	461a      	mov	r2, r3
   d5cea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cee:	f7ff fb71 	bl	d53d4 <system_ctrl_set_result>
        break;
    }
}
   d5cf2:	b003      	add	sp, #12
   d5cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   d5cf8:	2003e3d4 	.word	0x2003e3d4

000d5cfc <module_user_init_hook>:

void module_user_init_hook()
{
   d5cfc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cfe:	4c10      	ldr	r4, [pc, #64]	; (d5d40 <module_user_init_hook+0x44>)
   d5d00:	4d10      	ldr	r5, [pc, #64]	; (d5d44 <module_user_init_hook+0x48>)
   d5d02:	6823      	ldr	r3, [r4, #0]
   d5d04:	42ab      	cmp	r3, r5
   d5d06:	4b10      	ldr	r3, [pc, #64]	; (d5d48 <module_user_init_hook+0x4c>)
   d5d08:	bf0c      	ite	eq
   d5d0a:	2201      	moveq	r2, #1
   d5d0c:	2200      	movne	r2, #0
   d5d0e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5d10:	d002      	beq.n	d5d18 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5d12:	f7ff ffbf 	bl	d5c94 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5d16:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d18:	f7ff f9ca 	bl	d50b0 <HAL_RNG_GetRandomNumber>
   d5d1c:	4604      	mov	r4, r0
    srand(seed);
   d5d1e:	f001 fce5 	bl	d76ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d22:	4b0a      	ldr	r3, [pc, #40]	; (d5d4c <module_user_init_hook+0x50>)
   d5d24:	b113      	cbz	r3, d5d2c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5d26:	4620      	mov	r0, r4
   d5d28:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d2c:	2100      	movs	r1, #0
   d5d2e:	4807      	ldr	r0, [pc, #28]	; (d5d4c <module_user_init_hook+0x50>)
   d5d30:	f7ff fbda 	bl	d54e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d34:	2100      	movs	r1, #0
   d5d36:	4806      	ldr	r0, [pc, #24]	; (d5d50 <module_user_init_hook+0x54>)
}
   d5d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d3c:	f7ff bb40 	b.w	d53c0 <system_ctrl_set_app_request_handler>
   d5d40:	2003f400 	.word	0x2003f400
   d5d44:	9a271c1e 	.word	0x9a271c1e
   d5d48:	2003e3d8 	.word	0x2003e3d8
   d5d4c:	00000000 	.word	0x00000000
   d5d50:	000d5cc5 	.word	0x000d5cc5

000d5d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d54:	4770      	bx	lr

000d5d56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5d56:	2000      	movs	r0, #0
   d5d58:	4770      	bx	lr

000d5d5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d5a:	b510      	push	{r4, lr}
   d5d5c:	2110      	movs	r1, #16
   d5d5e:	4604      	mov	r4, r0
   d5d60:	f001 f9de 	bl	d7120 <_ZdlPvj>
   d5d64:	4620      	mov	r0, r4
   d5d66:	bd10      	pop	{r4, pc}

000d5d68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5d68:	b508      	push	{r3, lr}
      { delete this; }
   d5d6a:	b108      	cbz	r0, d5d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5d6c:	f7ff fff5 	bl	d5d5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d70:	bd08      	pop	{r3, pc}

000d5d72 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d72:	2200      	movs	r2, #0
   d5d74:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d76:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d78:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5d7c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d7e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5d82:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d84:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d86:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d88:	680c      	ldr	r4, [r1, #0]
   d5d8a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d8c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5d8e:	bd10      	pop	{r4, pc}

000d5d90 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d90:	b510      	push	{r4, lr}
   d5d92:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d94:	6800      	ldr	r0, [r0, #0]
   d5d96:	f7ff fbb7 	bl	d5508 <free>
}
   d5d9a:	4620      	mov	r0, r4
   d5d9c:	bd10      	pop	{r4, pc}

000d5d9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d9e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5da0:	68c4      	ldr	r4, [r0, #12]
   d5da2:	b1f4      	cbz	r4, d5de2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5da4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5da6:	2b02      	cmp	r3, #2
   d5da8:	d103      	bne.n	d5db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5daa:	f104 000c 	add.w	r0, r4, #12
   d5dae:	f7ff ffef 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5db2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5db4:	b135      	cbz	r5, d5dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5db6:	4628      	mov	r0, r5
   d5db8:	f7ff ff17 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
   d5dbc:	2110      	movs	r1, #16
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	f001 f9ae 	bl	d7120 <_ZdlPvj>
   d5dc4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5dc6:	b135      	cbz	r5, d5dd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5dc8:	4628      	mov	r0, r5
   d5dca:	f7ff ff0e 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
   d5dce:	2110      	movs	r1, #16
   d5dd0:	4628      	mov	r0, r5
   d5dd2:	f001 f9a5 	bl	d7120 <_ZdlPvj>
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	2114      	movs	r1, #20
   d5dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5dde:	f001 b99f 	b.w	d7120 <_ZdlPvj>
   d5de2:	bd38      	pop	{r3, r4, r5, pc}

000d5de4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5de4:	b513      	push	{r0, r1, r4, lr}
   d5de6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5de8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5dec:	2300      	movs	r3, #0
   d5dee:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5df0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5df2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5df4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5df6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5df8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dfa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dfc:	f7fe fa58 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e00:	4620      	mov	r0, r4
   d5e02:	b002      	add	sp, #8
   d5e04:	bd10      	pop	{r4, pc}

000d5e06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e08:	460c      	mov	r4, r1
   d5e0a:	ad02      	add	r5, sp, #8
   d5e0c:	f854 3b04 	ldr.w	r3, [r4], #4
   d5e10:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5e14:	4606      	mov	r6, r0
   d5e16:	460f      	mov	r7, r1
   d5e18:	a801      	add	r0, sp, #4
   d5e1a:	4621      	mov	r1, r4
   d5e1c:	f7ff fda6 	bl	d596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5e20:	4629      	mov	r1, r5
   d5e22:	4630      	mov	r0, r6
   d5e24:	f7ff ffde 	bl	d5de4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e28:	a801      	add	r0, sp, #4
   d5e2a:	f7fe fa41 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e2e:	4620      	mov	r0, r4
   d5e30:	f7fe fa3e 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5e34:	4638      	mov	r0, r7
   d5e36:	2108      	movs	r1, #8
   d5e38:	f001 f972 	bl	d7120 <_ZdlPvj>
        return p;
    }
   d5e3c:	4630      	mov	r0, r6
   d5e3e:	b003      	add	sp, #12
   d5e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e44:	b538      	push	{r3, r4, r5, lr}
   d5e46:	2300      	movs	r3, #0
   d5e48:	4604      	mov	r4, r0
   d5e4a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e4c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e4e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e50:	f7fe f921 	bl	d4096 <_Znwj>
   d5e54:	b128      	cbz	r0, d5e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e56:	2301      	movs	r3, #1
   d5e58:	6043      	str	r3, [r0, #4]
   d5e5a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5e5c:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5e5e:	6003      	str	r3, [r0, #0]
   d5e60:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e62:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5e64:	4620      	mov	r0, r4
   d5e66:	bd38      	pop	{r3, r4, r5, pc}
   d5e68:	000d85c4 	.word	0x000d85c4

000d5e6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e6c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e6e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e70:	b90a      	cbnz	r2, d5e76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e72:	f001 f968 	bl	d7146 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e76:	68c3      	ldr	r3, [r0, #12]
    }
   d5e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e7c:	4718      	bx	r3

000d5e7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e7e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e80:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e82:	f100 0110 	add.w	r1, r0, #16
   d5e86:	f7ff fff1 	bl	d5e6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e8a:	bd08      	pop	{r3, pc}

000d5e8c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e8c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e8e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e90:	b90a      	cbnz	r2, d5e96 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e92:	f001 f958 	bl	d7146 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e96:	68c3      	ldr	r3, [r0, #12]
    }
   d5e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e9c:	4718      	bx	r3

000d5e9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e9e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ea0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5ea2:	f100 0110 	add.w	r1, r0, #16
   d5ea6:	f7ff fff1 	bl	d5e8c <_ZNKSt8functionIFvRKbEEclES1_>
   d5eaa:	bd08      	pop	{r3, pc}

000d5eac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5eac:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5eae:	2300      	movs	r3, #0
   d5eb0:	6083      	str	r3, [r0, #8]
   d5eb2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5eb4:	4604      	mov	r4, r0
   d5eb6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5eb8:	b12b      	cbz	r3, d5ec6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5eba:	2202      	movs	r2, #2
   d5ebc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ebe:	68eb      	ldr	r3, [r5, #12]
   d5ec0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ec2:	68ab      	ldr	r3, [r5, #8]
   d5ec4:	60a3      	str	r3, [r4, #8]
	}
    }
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ece:	b089      	sub	sp, #36	; 0x24
   d5ed0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5ed2:	4668      	mov	r0, sp
   d5ed4:	f7ff ff4d 	bl	d5d72 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5ed8:	2300      	movs	r3, #0
   d5eda:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5ede:	f04f 0202 	mov.w	r2, #2
   d5ee2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5ee6:	2b00      	cmp	r3, #0
   d5ee8:	d103      	bne.n	d5ef2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5eea:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5eee:	2900      	cmp	r1, #0
   d5ef0:	d1f7      	bne.n	d5ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5ef2:	d002      	beq.n	d5efa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5ef4:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ef8:	e063      	b.n	d5fc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5efa:	f114 050c 	adds.w	r5, r4, #12
   d5efe:	d003      	beq.n	d5f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5f00:	4669      	mov	r1, sp
   d5f02:	4628      	mov	r0, r5
   d5f04:	f7ff ff35 	bl	d5d72 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5f08:	f3bf 8f5f 	dmb	sy
   d5f0c:	2301      	movs	r3, #1
   d5f0e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5f10:	2000      	movs	r0, #0
   d5f12:	f104 0308 	add.w	r3, r4, #8
   d5f16:	f3bf 8f5f 	dmb	sy
   d5f1a:	e853 6f00 	ldrex	r6, [r3]
   d5f1e:	e843 0200 	strex	r2, r0, [r3]
   d5f22:	2a00      	cmp	r2, #0
   d5f24:	d1f9      	bne.n	d5f1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5f26:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5f2a:	2e00      	cmp	r6, #0
   d5f2c:	d049      	beq.n	d5fc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5f2e:	f7ff fa2f 	bl	d5390 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5f32:	b120      	cbz	r0, d5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f34:	4629      	mov	r1, r5
   d5f36:	4630      	mov	r0, r6
   d5f38:	f7ff ff98 	bl	d5e6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5f3c:	e03a      	b.n	d5fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f3e:	4631      	mov	r1, r6
   d5f40:	a802      	add	r0, sp, #8
   d5f42:	f7ff ffb3 	bl	d5eac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5f46:	68e0      	ldr	r0, [r4, #12]
   d5f48:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5f4c:	b108      	cbz	r0, d5f52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5f4e:	f001 fc07 	bl	d7760 <strdup>
   d5f52:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f54:	2010      	movs	r0, #16
   d5f56:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5f5a:	f7fe f89c 	bl	d4096 <_Znwj>
   d5f5e:	4605      	mov	r5, r0
   d5f60:	b1e8      	cbz	r0, d5f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f62:	2700      	movs	r7, #0
   d5f64:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f66:	2018      	movs	r0, #24
   d5f68:	f7fe f895 	bl	d4096 <_Znwj>
   d5f6c:	4604      	mov	r4, r0
   d5f6e:	b188      	cbz	r0, d5f94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f70:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f72:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f74:	a802      	add	r0, sp, #8
   d5f76:	f7ff fe47 	bl	d5c08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f7a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f7e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f80:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f82:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f84:	a906      	add	r1, sp, #24
   d5f86:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f88:	60e3      	str	r3, [r4, #12]
   d5f8a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f8e:	9205      	str	r2, [sp, #20]
   d5f90:	f7ff feef 	bl	d5d72 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f94:	4b0d      	ldr	r3, [pc, #52]	; (d5fcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5f96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f98:	4b0d      	ldr	r3, [pc, #52]	; (d5fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f9a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f9c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5f9e:	a806      	add	r0, sp, #24
   d5fa0:	f7ff fef6 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fa4:	a802      	add	r0, sp, #8
   d5fa6:	f7ff fe20 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5faa:	2200      	movs	r2, #0
   d5fac:	4629      	mov	r1, r5
   d5fae:	4809      	ldr	r0, [pc, #36]	; (d5fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5fb0:	f7ff f9f6 	bl	d53a0 <application_thread_invoke>
   d5fb4:	4630      	mov	r0, r6
   d5fb6:	f7ff fe18 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5fba:	2110      	movs	r1, #16
   d5fbc:	4630      	mov	r0, r6
   d5fbe:	f001 f8af 	bl	d7120 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5fc2:	4668      	mov	r0, sp
   d5fc4:	f7ff fee4 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
    }
   d5fc8:	b009      	add	sp, #36	; 0x24
   d5fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fcc:	000d5e7f 	.word	0x000d5e7f
   d5fd0:	000d60f5 	.word	0x000d60f5
   d5fd4:	000d6601 	.word	0x000d6601

000d5fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fdc:	b08b      	sub	sp, #44	; 0x2c
   d5fde:	4606      	mov	r6, r0
   d5fe0:	460f      	mov	r7, r1
   d5fe2:	4690      	mov	r8, r2
   d5fe4:	4699      	mov	r9, r3
   d5fe6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5fea:	f7ff fa5d 	bl	d54a8 <spark_cloud_flag_connected>
   d5fee:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5ff0:	4683      	mov	fp, r0
   d5ff2:	bb30      	cbnz	r0, d6042 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5ff4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5ff8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ffa:	a905      	add	r1, sp, #20
   d5ffc:	4628      	mov	r0, r5
   d5ffe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6002:	f7ff feb6 	bl	d5d72 <_ZN8particle5ErrorC1EOS0_>
   d6006:	2014      	movs	r0, #20
   d6008:	f7fe f845 	bl	d4096 <_Znwj>
   d600c:	4604      	mov	r4, r0
   d600e:	b158      	cbz	r0, d6028 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6010:	2302      	movs	r3, #2
   d6012:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6014:	2301      	movs	r3, #1
   d6016:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6018:	f8c0 b004 	str.w	fp, [r0, #4]
   d601c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6020:	4629      	mov	r1, r5
   d6022:	300c      	adds	r0, #12
   d6024:	f7ff fea5 	bl	d5d72 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6028:	4630      	mov	r0, r6
   d602a:	4621      	mov	r1, r4
   d602c:	f840 4b04 	str.w	r4, [r0], #4
   d6030:	f7ff ff08 	bl	d5e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6034:	4628      	mov	r0, r5
   d6036:	f7ff feab 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d603a:	a805      	add	r0, sp, #20
   d603c:	f7ff fea8 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
   d6040:	e052      	b.n	d60e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6042:	2400      	movs	r4, #0
   d6044:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6046:	2014      	movs	r0, #20
   d6048:	606c      	str	r4, [r5, #4]
   d604a:	60ac      	str	r4, [r5, #8]
   d604c:	9307      	str	r3, [sp, #28]
   d604e:	f7fe f822 	bl	d4096 <_Znwj>
   d6052:	4601      	mov	r1, r0
   d6054:	b118      	cbz	r0, d605e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6056:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6058:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d605a:	6044      	str	r4, [r0, #4]
   d605c:	6084      	str	r4, [r0, #8]
   d605e:	a804      	add	r0, sp, #16
   d6060:	9103      	str	r1, [sp, #12]
   d6062:	f7ff feef 	bl	d5e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6066:	4b22      	ldr	r3, [pc, #136]	; (d60f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6068:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d606a:	2008      	movs	r0, #8
   d606c:	f7fe f813 	bl	d4096 <_Znwj>
   d6070:	4604      	mov	r4, r0
   d6072:	b128      	cbz	r0, d6080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6074:	9b03      	ldr	r3, [sp, #12]
   d6076:	f840 3b04 	str.w	r3, [r0], #4
   d607a:	a904      	add	r1, sp, #16
   d607c:	f7ff fc76 	bl	d596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6080:	9500      	str	r5, [sp, #0]
   d6082:	fa5f f38a 	uxtb.w	r3, sl
   d6086:	464a      	mov	r2, r9
   d6088:	4641      	mov	r1, r8
   d608a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d608c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d608e:	f7ff fa13 	bl	d54b8 <spark_send_event>
   d6092:	b920      	cbnz	r0, d609e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6094:	9b03      	ldr	r3, [sp, #12]
   d6096:	785b      	ldrb	r3, [r3, #1]
   d6098:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d609c:	b183      	cbz	r3, d60c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d609e:	9b03      	ldr	r3, [sp, #12]
   d60a0:	9305      	str	r3, [sp, #20]
   d60a2:	a904      	add	r1, sp, #16
   d60a4:	a806      	add	r0, sp, #24
   d60a6:	f7ff fc61 	bl	d596c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d60aa:	a905      	add	r1, sp, #20
   d60ac:	4630      	mov	r0, r6
   d60ae:	f7ff fe99 	bl	d5de4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60b2:	a806      	add	r0, sp, #24
   d60b4:	f7fe f8fc 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60b8:	a804      	add	r0, sp, #16
   d60ba:	f7fe f8f9 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60be:	e013      	b.n	d60e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d60c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d60c4:	a905      	add	r1, sp, #20
   d60c6:	a803      	add	r0, sp, #12
   d60c8:	9205      	str	r2, [sp, #20]
   d60ca:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60ce:	f7ff fefd 	bl	d5ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d60d2:	a805      	add	r0, sp, #20
   d60d4:	f7ff fe5c 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d60d8:	a805      	add	r0, sp, #20
   d60da:	9909      	ldr	r1, [sp, #36]	; 0x24
   d60dc:	f7ff fe93 	bl	d5e06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d60e0:	a806      	add	r0, sp, #24
   d60e2:	f7fe f8e5 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60e6:	e7da      	b.n	d609e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d60e8:	4630      	mov	r0, r6
   d60ea:	b00b      	add	sp, #44	; 0x2c
   d60ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60f0:	000d6265 	.word	0x000d6265

000d60f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d60f4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60f8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d60fa:	d006      	beq.n	d610a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d60fc:	2a03      	cmp	r2, #3
   d60fe:	d017      	beq.n	d6130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6100:	2a01      	cmp	r2, #1
   d6102:	d122      	bne.n	d614a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6104:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6106:	6003      	str	r3, [r0, #0]
	      break;
   d6108:	e01f      	b.n	d614a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d610a:	2018      	movs	r0, #24
   d610c:	680e      	ldr	r6, [r1, #0]
   d610e:	f7fd ffc2 	bl	d4096 <_Znwj>
   d6112:	4605      	mov	r5, r0
   d6114:	b150      	cbz	r0, d612c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6116:	4631      	mov	r1, r6
   d6118:	f7ff fec8 	bl	d5eac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d611c:	6930      	ldr	r0, [r6, #16]
   d611e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6122:	b108      	cbz	r0, d6128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6124:	f001 fb1c 	bl	d7760 <strdup>
   d6128:	6128      	str	r0, [r5, #16]
   d612a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d612c:	6025      	str	r5, [r4, #0]
   d612e:	e00c      	b.n	d614a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6130:	6804      	ldr	r4, [r0, #0]
   d6132:	b154      	cbz	r4, d614a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6134:	f104 0010 	add.w	r0, r4, #16
   d6138:	f7ff fe2a 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d613c:	4620      	mov	r0, r4
   d613e:	f7ff fd54 	bl	d5bea <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6142:	2118      	movs	r1, #24
   d6144:	4620      	mov	r0, r4
   d6146:	f000 ffeb 	bl	d7120 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d614a:	2000      	movs	r0, #0
   d614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d614e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d614e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6150:	2300      	movs	r3, #0
   d6152:	6083      	str	r3, [r0, #8]
   d6154:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6156:	4604      	mov	r4, r0
   d6158:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d615a:	b12b      	cbz	r3, d6168 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d615c:	2202      	movs	r2, #2
   d615e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6160:	68eb      	ldr	r3, [r5, #12]
   d6162:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6164:	68ab      	ldr	r3, [r5, #8]
   d6166:	60a3      	str	r3, [r4, #8]
	}
    }
   d6168:	4620      	mov	r0, r4
   d616a:	bd38      	pop	{r3, r4, r5, pc}

000d616c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d616c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d616e:	b570      	push	{r4, r5, r6, lr}
   d6170:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6172:	d006      	beq.n	d6182 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6174:	2a03      	cmp	r2, #3
   d6176:	d011      	beq.n	d619c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6178:	2a01      	cmp	r2, #1
   d617a:	d118      	bne.n	d61ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d617c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d617e:	6003      	str	r3, [r0, #0]
	      break;
   d6180:	e015      	b.n	d61ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6182:	2014      	movs	r0, #20
   d6184:	680e      	ldr	r6, [r1, #0]
   d6186:	f7fd ff86 	bl	d4096 <_Znwj>
   d618a:	4605      	mov	r5, r0
   d618c:	b120      	cbz	r0, d6198 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d618e:	4631      	mov	r1, r6
   d6190:	f7ff ffdd 	bl	d614e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6194:	7c33      	ldrb	r3, [r6, #16]
   d6196:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6198:	6025      	str	r5, [r4, #0]
   d619a:	e008      	b.n	d61ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d619c:	6804      	ldr	r4, [r0, #0]
   d619e:	b134      	cbz	r4, d61ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61a0:	4620      	mov	r0, r4
   d61a2:	f7ff fd22 	bl	d5bea <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d61a6:	2114      	movs	r1, #20
   d61a8:	4620      	mov	r0, r4
   d61aa:	f000 ffb9 	bl	d7120 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d61ae:	2000      	movs	r0, #0
   d61b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d61b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d61b4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d61b6:	2300      	movs	r3, #0
   d61b8:	b087      	sub	sp, #28
   d61ba:	460c      	mov	r4, r1
   d61bc:	f3bf 8f5f 	dmb	sy
   d61c0:	e850 6f00 	ldrex	r6, [r0]
   d61c4:	e840 3200 	strex	r2, r3, [r0]
   d61c8:	2a00      	cmp	r2, #0
   d61ca:	d1f9      	bne.n	d61c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d61cc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d61d0:	2e00      	cmp	r6, #0
   d61d2:	d03f      	beq.n	d6254 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d61d4:	4618      	mov	r0, r3
   d61d6:	f7ff f8db 	bl	d5390 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d61da:	4607      	mov	r7, r0
   d61dc:	b120      	cbz	r0, d61e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d61de:	4621      	mov	r1, r4
   d61e0:	4630      	mov	r0, r6
   d61e2:	f7ff fe53 	bl	d5e8c <_ZNKSt8functionIFvRKbEEclES1_>
   d61e6:	e02e      	b.n	d6246 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d61e8:	4631      	mov	r1, r6
   d61ea:	a801      	add	r0, sp, #4
   d61ec:	f7ff ffaf 	bl	d614e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61f0:	7823      	ldrb	r3, [r4, #0]
   d61f2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d61f6:	2010      	movs	r0, #16
   d61f8:	f7fd ff4d 	bl	d4096 <_Znwj>
   d61fc:	4605      	mov	r5, r0
   d61fe:	b1d0      	cbz	r0, d6236 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6200:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6202:	2014      	movs	r0, #20
   d6204:	f7fd ff47 	bl	d4096 <_Znwj>
   d6208:	4604      	mov	r4, r0
   d620a:	b178      	cbz	r0, d622c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d620c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d620e:	4601      	mov	r1, r0
   d6210:	a801      	add	r0, sp, #4
   d6212:	f7ff fcf9 	bl	d5c08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6216:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6218:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d621a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d621c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d621e:	9203      	str	r2, [sp, #12]
   d6220:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6222:	60e3      	str	r3, [r4, #12]
   d6224:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6228:	9204      	str	r2, [sp, #16]
   d622a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d622c:	4b0a      	ldr	r3, [pc, #40]	; (d6258 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d622e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6230:	4b0a      	ldr	r3, [pc, #40]	; (d625c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6232:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6234:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6236:	a801      	add	r0, sp, #4
   d6238:	f7ff fcd7 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d623c:	2200      	movs	r2, #0
   d623e:	4629      	mov	r1, r5
   d6240:	4807      	ldr	r0, [pc, #28]	; (d6260 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6242:	f7ff f8ad 	bl	d53a0 <application_thread_invoke>
   d6246:	4630      	mov	r0, r6
   d6248:	f7ff fccf 	bl	d5bea <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d624c:	2110      	movs	r1, #16
   d624e:	4630      	mov	r0, r6
   d6250:	f000 ff66 	bl	d7120 <_ZdlPvj>
        }
    }
   d6254:	b007      	add	sp, #28
   d6256:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6258:	000d5e9f 	.word	0x000d5e9f
   d625c:	000d616d 	.word	0x000d616d
   d6260:	000d6601 	.word	0x000d6601

000d6264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6264:	b530      	push	{r4, r5, lr}
   d6266:	b085      	sub	sp, #20
   d6268:	4604      	mov	r4, r0
   d626a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d626c:	4668      	mov	r0, sp
   d626e:	4611      	mov	r1, r2
   d6270:	f7ff fdc9 	bl	d5e06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6274:	b17c      	cbz	r4, d6296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6276:	b224      	sxth	r4, r4
   d6278:	4628      	mov	r0, r5
   d627a:	b10d      	cbz	r5, d6280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d627c:	f001 fa70 	bl	d7760 <strdup>
   d6280:	9002      	str	r0, [sp, #8]
   d6282:	a902      	add	r1, sp, #8
   d6284:	4668      	mov	r0, sp
   d6286:	f8ad 400c 	strh.w	r4, [sp, #12]
   d628a:	f7ff fe1f 	bl	d5ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d628e:	a802      	add	r0, sp, #8
   d6290:	f7ff fd7e 	bl	d5d90 <_ZN8particle5ErrorD1Ev>
   d6294:	e01d      	b.n	d62d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6296:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6298:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d629c:	f04f 0201 	mov.w	r2, #1
   d62a0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d62a4:	42a3      	cmp	r3, r4
   d62a6:	d103      	bne.n	d62b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d62a8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d62ac:	2900      	cmp	r1, #0
   d62ae:	d1f7      	bne.n	d62a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d62b0:	d002      	beq.n	d62b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d62b2:	f88d 3008 	strb.w	r3, [sp, #8]
   d62b6:	e00c      	b.n	d62d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d62b8:	f110 010c 	adds.w	r1, r0, #12
   d62bc:	f04f 0301 	mov.w	r3, #1
   d62c0:	bf18      	it	ne
   d62c2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d62c4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d62c8:	3004      	adds	r0, #4
   d62ca:	f800 3c03 	strb.w	r3, [r0, #-3]
   d62ce:	f7ff ff71 	bl	d61b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d62d2:	a801      	add	r0, sp, #4
   d62d4:	f7fd ffec 	bl	d42b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d62d8:	b005      	add	sp, #20
   d62da:	bd30      	pop	{r4, r5, pc}

000d62dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d62dc:	4770      	bx	lr

000d62de <_ZN9IPAddressD0Ev>:
   d62de:	b510      	push	{r4, lr}
   d62e0:	2118      	movs	r1, #24
   d62e2:	4604      	mov	r4, r0
   d62e4:	f000 ff1c 	bl	d7120 <_ZdlPvj>
   d62e8:	4620      	mov	r0, r4
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d62ee:	7d03      	ldrb	r3, [r0, #20]
   d62f0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d62f2:	b08d      	sub	sp, #52	; 0x34
   d62f4:	460e      	mov	r6, r1
   d62f6:	f100 0704 	add.w	r7, r0, #4
   d62fa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d62fe:	d002      	beq.n	d6306 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6300:	f100 0508 	add.w	r5, r0, #8
   d6304:	e018      	b.n	d6338 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6306:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6308:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d630a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d630e:	232f      	movs	r3, #47	; 0x2f
   d6310:	462a      	mov	r2, r5
   d6312:	200a      	movs	r0, #10
   d6314:	f7fe ff1c 	bl	d5150 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6318:	4628      	mov	r0, r5
   d631a:	f001 fa3c 	bl	d7796 <strlen>
   d631e:	6833      	ldr	r3, [r6, #0]
   d6320:	4602      	mov	r2, r0
   d6322:	68db      	ldr	r3, [r3, #12]
   d6324:	4629      	mov	r1, r5
   d6326:	4630      	mov	r0, r6
   d6328:	4798      	blx	r3
   d632a:	e00f      	b.n	d634c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d632c:	b124      	cbz	r4, d6338 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d632e:	212e      	movs	r1, #46	; 0x2e
   d6330:	4630      	mov	r0, r6
   d6332:	f7ff fb5d 	bl	d59f0 <_ZN5Print5printEc>
   d6336:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6338:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d633c:	220a      	movs	r2, #10
   d633e:	4630      	mov	r0, r6
   d6340:	f7ff fb6f 	bl	d5a22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6344:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6346:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6348:	d1f0      	bne.n	d632c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d634a:	4620      	mov	r0, r4
    }
    return n;
}
   d634c:	b00d      	add	sp, #52	; 0x34
   d634e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6350 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6350:	b510      	push	{r4, lr}
   d6352:	4b05      	ldr	r3, [pc, #20]	; (d6368 <_ZN9IPAddressC1Ev+0x18>)
   d6354:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6356:	2211      	movs	r2, #17
   d6358:	f840 3b04 	str.w	r3, [r0], #4
   d635c:	2100      	movs	r1, #0
   d635e:	f001 f9bd 	bl	d76dc <memset>
{
    clear();
}
   d6362:	4620      	mov	r0, r4
   d6364:	bd10      	pop	{r4, pc}
   d6366:	bf00      	nop
   d6368:	000d85e0 	.word	0x000d85e0

000d636c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d636c:	4603      	mov	r3, r0
   d636e:	4a07      	ldr	r2, [pc, #28]	; (d638c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6370:	b510      	push	{r4, lr}
   d6372:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6376:	f101 0210 	add.w	r2, r1, #16
   d637a:	f851 4b04 	ldr.w	r4, [r1], #4
   d637e:	f843 4b04 	str.w	r4, [r3], #4
   d6382:	4291      	cmp	r1, r2
   d6384:	d1f9      	bne.n	d637a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6386:	780a      	ldrb	r2, [r1, #0]
   d6388:	701a      	strb	r2, [r3, #0]
}
   d638a:	bd10      	pop	{r4, pc}
   d638c:	000d85e0 	.word	0x000d85e0

000d6390 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6390:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6392:	2b04      	cmp	r3, #4
   d6394:	d101      	bne.n	d639a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6396:	6840      	ldr	r0, [r0, #4]
   d6398:	e008      	b.n	d63ac <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d639a:	2b06      	cmp	r3, #6
   d639c:	d10a      	bne.n	d63b4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d639e:	6843      	ldr	r3, [r0, #4]
   d63a0:	b953      	cbnz	r3, d63b8 <_ZNK9IPAddresscvbEv+0x28>
   d63a2:	6883      	ldr	r3, [r0, #8]
   d63a4:	b943      	cbnz	r3, d63b8 <_ZNK9IPAddresscvbEv+0x28>
   d63a6:	68c3      	ldr	r3, [r0, #12]
   d63a8:	b933      	cbnz	r3, d63b8 <_ZNK9IPAddresscvbEv+0x28>
   d63aa:	6900      	ldr	r0, [r0, #16]
   d63ac:	3000      	adds	r0, #0
   d63ae:	bf18      	it	ne
   d63b0:	2001      	movne	r0, #1
   d63b2:	4770      	bx	lr
    } else {
        return false;
   d63b4:	2000      	movs	r0, #0
   d63b6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d63b8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d63ba:	4770      	bx	lr

000d63bc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d63bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d63be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d63c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d63c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d63ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d63ce:	2304      	movs	r3, #4
   d63d0:	6041      	str	r1, [r0, #4]
   d63d2:	7503      	strb	r3, [r0, #20]
   d63d4:	bd10      	pop	{r4, pc}

000d63d6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d63d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d63d8:	780d      	ldrb	r5, [r1, #0]
   d63da:	788b      	ldrb	r3, [r1, #2]
   d63dc:	784a      	ldrb	r2, [r1, #1]
   d63de:	78c9      	ldrb	r1, [r1, #3]
   d63e0:	9100      	str	r1, [sp, #0]
   d63e2:	4629      	mov	r1, r5
   d63e4:	f7ff ffea 	bl	d63bc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d63e8:	b003      	add	sp, #12
   d63ea:	bd30      	pop	{r4, r5, pc}

000d63ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63ec:	7441      	strb	r1, [r0, #17]
   d63ee:	4770      	bx	lr

000d63f0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d63f0:	4770      	bx	lr

000d63f2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d63f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d63f4:	2100      	movs	r1, #0
   d63f6:	7c00      	ldrb	r0, [r0, #16]
   d63f8:	f7fe ff8a 	bl	d5310 <HAL_USB_USART_Receive_Data>
}
   d63fc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6400:	bf28      	it	cs
   d6402:	f04f 30ff 	movcs.w	r0, #4294967295
   d6406:	bd08      	pop	{r3, pc}

000d6408 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6408:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d640a:	2101      	movs	r1, #1
   d640c:	7c00      	ldrb	r0, [r0, #16]
   d640e:	f7fe ff7f 	bl	d5310 <HAL_USB_USART_Receive_Data>
}
   d6412:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6416:	bf28      	it	cs
   d6418:	f04f 30ff 	movcs.w	r0, #4294967295
   d641c:	bd08      	pop	{r3, pc}

000d641e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d641e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6420:	7c00      	ldrb	r0, [r0, #16]
   d6422:	f7fe ff6d 	bl	d5300 <HAL_USB_USART_Available_Data_For_Write>
}
   d6426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d642a:	bd08      	pop	{r3, pc}

000d642c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d642c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d642e:	7c00      	ldrb	r0, [r0, #16]
   d6430:	f7fe ff5e 	bl	d52f0 <HAL_USB_USART_Available_Data>
}
   d6434:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6438:	bd08      	pop	{r3, pc}

000d643a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d643a:	7c00      	ldrb	r0, [r0, #16]
   d643c:	f7fe bf78 	b.w	d5330 <HAL_USB_USART_Flush_Data>

000d6440 <_ZN9USBSerialD0Ev>:
   d6440:	b510      	push	{r4, lr}
   d6442:	2114      	movs	r1, #20
   d6444:	4604      	mov	r4, r0
   d6446:	f000 fe6b 	bl	d7120 <_ZdlPvj>
   d644a:	4620      	mov	r0, r4
   d644c:	bd10      	pop	{r4, pc}

000d644e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d644e:	b538      	push	{r3, r4, r5, lr}
   d6450:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6452:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6454:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6456:	f7fe ff53 	bl	d5300 <HAL_USB_USART_Available_Data_For_Write>
   d645a:	2800      	cmp	r0, #0
   d645c:	dc01      	bgt.n	d6462 <_ZN9USBSerial5writeEh+0x14>
   d645e:	7c60      	ldrb	r0, [r4, #17]
   d6460:	b128      	cbz	r0, d646e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6462:	4629      	mov	r1, r5
   d6464:	7c20      	ldrb	r0, [r4, #16]
   d6466:	f7fe ff5b 	bl	d5320 <HAL_USB_USART_Send_Data>
   d646a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d646e:	bd38      	pop	{r3, r4, r5, pc}

000d6470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6470:	b510      	push	{r4, lr}
   d6472:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6474:	2300      	movs	r3, #0
   d6476:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d647c:	60a3      	str	r3, [r4, #8]
   d647e:	4b05      	ldr	r3, [pc, #20]	; (d6494 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6480:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6482:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6484:	4608      	mov	r0, r1
{
  _serial = serial;
   d6486:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6488:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d648a:	4611      	mov	r1, r2
   d648c:	f7fe ff20 	bl	d52d0 <HAL_USB_USART_Init>
}
   d6490:	4620      	mov	r0, r4
   d6492:	bd10      	pop	{r4, pc}
   d6494:	000d85f4 	.word	0x000d85f4

000d6498 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6498:	2200      	movs	r2, #0
   d649a:	7c00      	ldrb	r0, [r0, #16]
   d649c:	f7fe bf20 	b.w	d52e0 <HAL_USB_USART_Begin>

000d64a0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d64a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d64a2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d64a4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d64a6:	2100      	movs	r1, #0
   d64a8:	f001 f918 	bl	d76dc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d64ac:	4620      	mov	r0, r4
   d64ae:	bd10      	pop	{r4, pc}

000d64b0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d64b0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64b2:	4d0e      	ldr	r5, [pc, #56]	; (d64ec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d64b4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d64b6:	a801      	add	r0, sp, #4
   d64b8:	f7ff fff2 	bl	d64a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64bc:	6829      	ldr	r1, [r5, #0]
   d64be:	f011 0401 	ands.w	r4, r1, #1
   d64c2:	d110      	bne.n	d64e6 <_Z16_fetch_usbserialv+0x36>
   d64c4:	4628      	mov	r0, r5
   d64c6:	f7fd fdf7 	bl	d40b8 <__cxa_guard_acquire>
   d64ca:	b160      	cbz	r0, d64e6 <_Z16_fetch_usbserialv+0x36>
   d64cc:	aa01      	add	r2, sp, #4
   d64ce:	4621      	mov	r1, r4
   d64d0:	4807      	ldr	r0, [pc, #28]	; (d64f0 <_Z16_fetch_usbserialv+0x40>)
   d64d2:	f7ff ffcd 	bl	d6470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d64d6:	4628      	mov	r0, r5
   d64d8:	f7fd fdf3 	bl	d40c2 <__cxa_guard_release>
   d64dc:	4a05      	ldr	r2, [pc, #20]	; (d64f4 <_Z16_fetch_usbserialv+0x44>)
   d64de:	4906      	ldr	r1, [pc, #24]	; (d64f8 <_Z16_fetch_usbserialv+0x48>)
   d64e0:	4803      	ldr	r0, [pc, #12]	; (d64f0 <_Z16_fetch_usbserialv+0x40>)
   d64e2:	f000 fe0f 	bl	d7104 <__aeabi_atexit>
	return _usbserial;
}
   d64e6:	4802      	ldr	r0, [pc, #8]	; (d64f0 <_Z16_fetch_usbserialv+0x40>)
   d64e8:	b007      	add	sp, #28
   d64ea:	bd30      	pop	{r4, r5, pc}
   d64ec:	2003e3dc 	.word	0x2003e3dc
   d64f0:	2003e3e0 	.word	0x2003e3e0
   d64f4:	2003e1ec 	.word	0x2003e1ec
   d64f8:	000d63f1 	.word	0x000d63f1

000d64fc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d64fc:	4770      	bx	lr

000d64fe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64fe:	7441      	strb	r1, [r0, #17]
   d6500:	4770      	bx	lr

000d6502 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6502:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6504:	7c00      	ldrb	r0, [r0, #16]
   d6506:	f7fe fe73 	bl	d51f0 <HAL_USART_Available_Data_For_Write>
}
   d650a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650e:	bd08      	pop	{r3, pc}

000d6510 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6510:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6512:	7c00      	ldrb	r0, [r0, #16]
   d6514:	f7fe fe44 	bl	d51a0 <HAL_USART_Available_Data>
}
   d6518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d651c:	bd08      	pop	{r3, pc}

000d651e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d651e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6520:	7c00      	ldrb	r0, [r0, #16]
   d6522:	f7fe fe4d 	bl	d51c0 <HAL_USART_Peek_Data>
}
   d6526:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d652a:	bf28      	it	cs
   d652c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6530:	bd08      	pop	{r3, pc}

000d6532 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6532:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6534:	7c00      	ldrb	r0, [r0, #16]
   d6536:	f7fe fe3b 	bl	d51b0 <HAL_USART_Read_Data>
}
   d653a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d653e:	bf28      	it	cs
   d6540:	f04f 30ff 	movcs.w	r0, #4294967295
   d6544:	bd08      	pop	{r3, pc}

000d6546 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6546:	7c00      	ldrb	r0, [r0, #16]
   d6548:	f7fe be42 	b.w	d51d0 <HAL_USART_Flush_Data>

000d654c <_ZN11USARTSerialD0Ev>:
   d654c:	b510      	push	{r4, lr}
   d654e:	2114      	movs	r1, #20
   d6550:	4604      	mov	r4, r0
   d6552:	f000 fde5 	bl	d7120 <_ZdlPvj>
   d6556:	4620      	mov	r0, r4
   d6558:	bd10      	pop	{r4, pc}

000d655a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d655a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d655c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d655e:	4604      	mov	r4, r0
   d6560:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6562:	b925      	cbnz	r5, d656e <_ZN11USARTSerial5writeEh+0x14>
   d6564:	7c00      	ldrb	r0, [r0, #16]
   d6566:	f7fe fe43 	bl	d51f0 <HAL_USART_Available_Data_For_Write>
   d656a:	2800      	cmp	r0, #0
   d656c:	dd05      	ble.n	d657a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d656e:	4631      	mov	r1, r6
   d6570:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6576:	f7fe be0b 	b.w	d5190 <HAL_USART_Write_Data>
  }
  return 0;
}
   d657a:	4628      	mov	r0, r5
   d657c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6580 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6580:	b510      	push	{r4, lr}
   d6582:	4604      	mov	r4, r0
   d6584:	4608      	mov	r0, r1
   d6586:	4611      	mov	r1, r2
   d6588:	2200      	movs	r2, #0
   d658a:	6062      	str	r2, [r4, #4]
   d658c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6590:	60a2      	str	r2, [r4, #8]
   d6592:	4a05      	ldr	r2, [pc, #20]	; (d65a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6594:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6596:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6598:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d659a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d659c:	461a      	mov	r2, r3
   d659e:	f7fe fdef 	bl	d5180 <HAL_USART_Init>
}
   d65a2:	4620      	mov	r0, r4
   d65a4:	bd10      	pop	{r4, pc}
   d65a6:	bf00      	nop
   d65a8:	000d8624 	.word	0x000d8624

000d65ac <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d65ac:	7c00      	ldrb	r0, [r0, #16]
   d65ae:	f7fe be17 	b.w	d51e0 <HAL_USART_Is_Enabled>
	...

000d65b4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d65b4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d65b6:	4d0c      	ldr	r5, [pc, #48]	; (d65e8 <_Z22__fetch_global_Serial1v+0x34>)
   d65b8:	6829      	ldr	r1, [r5, #0]
   d65ba:	f011 0401 	ands.w	r4, r1, #1
   d65be:	d111      	bne.n	d65e4 <_Z22__fetch_global_Serial1v+0x30>
   d65c0:	4628      	mov	r0, r5
   d65c2:	f7fd fd79 	bl	d40b8 <__cxa_guard_acquire>
   d65c6:	b168      	cbz	r0, d65e4 <_Z22__fetch_global_Serial1v+0x30>
   d65c8:	4a08      	ldr	r2, [pc, #32]	; (d65ec <_Z22__fetch_global_Serial1v+0x38>)
   d65ca:	4b09      	ldr	r3, [pc, #36]	; (d65f0 <_Z22__fetch_global_Serial1v+0x3c>)
   d65cc:	4809      	ldr	r0, [pc, #36]	; (d65f4 <_Z22__fetch_global_Serial1v+0x40>)
   d65ce:	4621      	mov	r1, r4
   d65d0:	f7ff ffd6 	bl	d6580 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d65d4:	4628      	mov	r0, r5
   d65d6:	f7fd fd74 	bl	d40c2 <__cxa_guard_release>
   d65da:	4a07      	ldr	r2, [pc, #28]	; (d65f8 <_Z22__fetch_global_Serial1v+0x44>)
   d65dc:	4907      	ldr	r1, [pc, #28]	; (d65fc <_Z22__fetch_global_Serial1v+0x48>)
   d65de:	4805      	ldr	r0, [pc, #20]	; (d65f4 <_Z22__fetch_global_Serial1v+0x40>)
   d65e0:	f000 fd90 	bl	d7104 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65e4:	4803      	ldr	r0, [pc, #12]	; (d65f4 <_Z22__fetch_global_Serial1v+0x40>)
   d65e6:	bd38      	pop	{r3, r4, r5, pc}
   d65e8:	2003e48c 	.word	0x2003e48c
   d65ec:	2003e490 	.word	0x2003e490
   d65f0:	2003e408 	.word	0x2003e408
   d65f4:	2003e3f4 	.word	0x2003e3f4
   d65f8:	2003e1ec 	.word	0x2003e1ec
   d65fc:	000d64fd 	.word	0x000d64fd

000d6600 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6600:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6602:	6883      	ldr	r3, [r0, #8]
   d6604:	4604      	mov	r4, r0
   d6606:	b90b      	cbnz	r3, d660c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6608:	f000 fd9d 	bl	d7146 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d660c:	68c3      	ldr	r3, [r0, #12]
   d660e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6610:	68a3      	ldr	r3, [r4, #8]
   d6612:	b11b      	cbz	r3, d661c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6614:	2203      	movs	r2, #3
   d6616:	4621      	mov	r1, r4
   d6618:	4620      	mov	r0, r4
   d661a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d661c:	4620      	mov	r0, r4
   d661e:	2110      	movs	r1, #16
}
   d6620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6624:	f000 bd7c 	b.w	d7120 <_ZdlPvj>

000d6628 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6628:	4770      	bx	lr

000d662a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d662c:	4606      	mov	r6, r0
   d662e:	4615      	mov	r5, r2
   d6630:	460c      	mov	r4, r1
   d6632:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6634:	42bc      	cmp	r4, r7
   d6636:	d006      	beq.n	d6646 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6638:	6833      	ldr	r3, [r6, #0]
   d663a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d663e:	689b      	ldr	r3, [r3, #8]
   d6640:	4630      	mov	r0, r6
   d6642:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6644:	e7f6      	b.n	d6634 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6646:	4628      	mov	r0, r5
   d6648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d664a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d664a:	2200      	movs	r2, #0
   d664c:	7c00      	ldrb	r0, [r0, #16]
   d664e:	f7fe bdd7 	b.w	d5200 <HAL_I2C_Write_Data>

000d6652 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6652:	2100      	movs	r1, #0
   d6654:	7c00      	ldrb	r0, [r0, #16]
   d6656:	f7fe bddb 	b.w	d5210 <HAL_I2C_Available_Data>

000d665a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d665a:	2100      	movs	r1, #0
   d665c:	7c00      	ldrb	r0, [r0, #16]
   d665e:	f7fe bddf 	b.w	d5220 <HAL_I2C_Read_Data>

000d6662 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6662:	2100      	movs	r1, #0
   d6664:	7c00      	ldrb	r0, [r0, #16]
   d6666:	f7fe bde3 	b.w	d5230 <HAL_I2C_Peek_Data>

000d666a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d666a:	2100      	movs	r1, #0
   d666c:	7c00      	ldrb	r0, [r0, #16]
   d666e:	f7fe bde7 	b.w	d5240 <HAL_I2C_Flush_Data>

000d6672 <_ZN7TwoWireD0Ev>:
   d6672:	b510      	push	{r4, lr}
   d6674:	2114      	movs	r1, #20
   d6676:	4604      	mov	r4, r0
   d6678:	f000 fd52 	bl	d7120 <_ZdlPvj>
   d667c:	4620      	mov	r0, r4
   d667e:	bd10      	pop	{r4, pc}

000d6680 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6680:	b510      	push	{r4, lr}
   d6682:	4604      	mov	r4, r0
   d6684:	2300      	movs	r3, #0
   d6686:	6063      	str	r3, [r4, #4]
   d6688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d668c:	60a3      	str	r3, [r4, #8]
   d668e:	4b04      	ldr	r3, [pc, #16]	; (d66a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6690:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6692:	4608      	mov	r0, r1
   d6694:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6696:	4611      	mov	r1, r2
   d6698:	f7fe fde2 	bl	d5260 <HAL_I2C_Init>
}
   d669c:	4620      	mov	r0, r4
   d669e:	bd10      	pop	{r4, pc}
   d66a0:	000d8654 	.word	0x000d8654

000d66a4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d66a4:	2100      	movs	r1, #0
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7fe bdd2 	b.w	d5250 <HAL_I2C_Is_Enabled>

000d66ac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d66ac:	2200      	movs	r2, #0
   d66ae:	4611      	mov	r1, r2
   d66b0:	6840      	ldr	r0, [r0, #4]
   d66b2:	f7fe bed1 	b.w	d5458 <network_listening>

000d66b6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d66b6:	2200      	movs	r2, #0
   d66b8:	4611      	mov	r1, r2
   d66ba:	6840      	ldr	r0, [r0, #4]
   d66bc:	f7fe bedc 	b.w	d5478 <network_get_listen_timeout>

000d66c0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d66c0:	2200      	movs	r2, #0
   d66c2:	6840      	ldr	r0, [r0, #4]
   d66c4:	f7fe bed0 	b.w	d5468 <network_set_listen_timeout>

000d66c8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d66c8:	2200      	movs	r2, #0
   d66ca:	f081 0101 	eor.w	r1, r1, #1
   d66ce:	6840      	ldr	r0, [r0, #4]
   d66d0:	f7fe beba 	b.w	d5448 <network_listen>

000d66d4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d66d4:	2300      	movs	r3, #0
   d66d6:	461a      	mov	r2, r3
   d66d8:	2101      	movs	r1, #1
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	f7fe beac 	b.w	d5438 <network_off>

000d66e0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d66e0:	2300      	movs	r3, #0
   d66e2:	461a      	mov	r2, r3
   d66e4:	4619      	mov	r1, r3
   d66e6:	6840      	ldr	r0, [r0, #4]
   d66e8:	f7fe be9e 	b.w	d5428 <network_on>

000d66ec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d66ec:	2200      	movs	r2, #0
   d66ee:	4611      	mov	r1, r2
   d66f0:	6840      	ldr	r0, [r0, #4]
   d66f2:	f7fe be91 	b.w	d5418 <network_ready>

000d66f6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d66f6:	2200      	movs	r2, #0
   d66f8:	4611      	mov	r1, r2
   d66fa:	6840      	ldr	r0, [r0, #4]
   d66fc:	f7fe be7c 	b.w	d53f8 <network_connecting>

000d6700 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6700:	2200      	movs	r2, #0
   d6702:	2102      	movs	r1, #2
   d6704:	6840      	ldr	r0, [r0, #4]
   d6706:	f7fe be7f 	b.w	d5408 <network_disconnect>

000d670a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d670a:	2300      	movs	r3, #0
   d670c:	461a      	mov	r2, r3
   d670e:	6840      	ldr	r0, [r0, #4]
   d6710:	f7fe be6a 	b.w	d53e8 <network_connect>

000d6714 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6714:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6716:	4605      	mov	r5, r0
   d6718:	b188      	cbz	r0, d673e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d671a:	6804      	ldr	r4, [r0, #0]
   d671c:	b14c      	cbz	r4, d6732 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d671e:	68a3      	ldr	r3, [r4, #8]
   d6720:	b11b      	cbz	r3, d672a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6722:	2203      	movs	r2, #3
   d6724:	4621      	mov	r1, r4
   d6726:	4620      	mov	r0, r4
   d6728:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d672a:	2110      	movs	r1, #16
   d672c:	4620      	mov	r0, r4
   d672e:	f000 fcf7 	bl	d7120 <_ZdlPvj>
   d6732:	4628      	mov	r0, r5
   d6734:	2114      	movs	r1, #20
      }
   d6736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d673a:	f000 bcf1 	b.w	d7120 <_ZdlPvj>
   d673e:	bd38      	pop	{r3, r4, r5, pc}

000d6740 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6740:	b110      	cbz	r0, d6748 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6742:	6803      	ldr	r3, [r0, #0]
   d6744:	685b      	ldr	r3, [r3, #4]
   d6746:	4718      	bx	r3
   d6748:	4770      	bx	lr

000d674a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d674a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d674c:	6803      	ldr	r3, [r0, #0]
   d674e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6750:	b1bb      	cbz	r3, d6782 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6752:	6858      	ldr	r0, [r3, #4]
   d6754:	f7fe fcd4 	bl	d5100 <os_thread_is_current>
   d6758:	b978      	cbnz	r0, d677a <_ZN6ThreadD1Ev+0x30>
   d675a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d675c:	7c5a      	ldrb	r2, [r3, #17]
   d675e:	b912      	cbnz	r2, d6766 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6760:	6858      	ldr	r0, [r3, #4]
   d6762:	f7fe fcd5 	bl	d5110 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6766:	6823      	ldr	r3, [r4, #0]
   d6768:	6858      	ldr	r0, [r3, #4]
   d676a:	f7fe fcd9 	bl	d5120 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d676e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6770:	2300      	movs	r3, #0
   d6772:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6774:	b128      	cbz	r0, d6782 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6776:	f7ff ffcd 	bl	d6714 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d677a:	6820      	ldr	r0, [r4, #0]
   d677c:	b108      	cbz	r0, d6782 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d677e:	f7ff ffc9 	bl	d6714 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6782:	4620      	mov	r0, r4
   d6784:	bd10      	pop	{r4, pc}

000d6786 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6786:	b538      	push	{r3, r4, r5, lr}
   d6788:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d678a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d678e:	b108      	cbz	r0, d6794 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6790:	f7fd fc85 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6794:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6798:	b108      	cbz	r0, d679e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d679a:	f7fe fcd1 	bl	d5140 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d679e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d67a2:	b135      	cbz	r5, d67b2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d67a4:	4628      	mov	r0, r5
   d67a6:	f7ff ffd0 	bl	d674a <_ZN6ThreadD1Ev>
   d67aa:	2104      	movs	r1, #4
   d67ac:	4628      	mov	r0, r5
   d67ae:	f000 fcb7 	bl	d7120 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d67b2:	6820      	ldr	r0, [r4, #0]
   d67b4:	b108      	cbz	r0, d67ba <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d67b6:	f7ff ffc3 	bl	d6740 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d67ba:	4620      	mov	r0, r4
   d67bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d67c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d67c0:	b510      	push	{r4, lr}
   d67c2:	4b04      	ldr	r3, [pc, #16]	; (d67d4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d67c4:	4604      	mov	r4, r0
   d67c6:	f840 3b08 	str.w	r3, [r0], #8
   d67ca:	f7ff ffdc 	bl	d6786 <_ZN5spark11MeshPublishD1Ev>
   d67ce:	4620      	mov	r0, r4
   d67d0:	bd10      	pop	{r4, pc}
   d67d2:	bf00      	nop
   d67d4:	000d867c 	.word	0x000d867c

000d67d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d67d8:	b538      	push	{r3, r4, r5, lr}
   d67da:	4c0e      	ldr	r4, [pc, #56]	; (d6814 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d67dc:	4b0e      	ldr	r3, [pc, #56]	; (d6818 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d67de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d67e0:	2500      	movs	r5, #0
   d67e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d67e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d67e8:	6063      	str	r3, [r4, #4]
   d67ea:	60a5      	str	r5, [r4, #8]
   d67ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d67f4:	f7fe fc9c 	bl	d5130 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d67f8:	4b08      	ldr	r3, [pc, #32]	; (d681c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d67fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d67fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6802:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6804:	4620      	mov	r0, r4
   d6806:	4a06      	ldr	r2, [pc, #24]	; (d6820 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6808:	4906      	ldr	r1, [pc, #24]	; (d6824 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d680a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d680e:	f000 bc79 	b.w	d7104 <__aeabi_atexit>
   d6812:	bf00      	nop
   d6814:	2003e514 	.word	0x2003e514
   d6818:	000d8764 	.word	0x000d8764
   d681c:	000d867c 	.word	0x000d867c
   d6820:	2003e1ec 	.word	0x2003e1ec
   d6824:	000d67c1 	.word	0x000d67c1

000d6828 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6828:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d682a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d682c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d682e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6832:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6834:	2201      	movs	r2, #1
   d6836:	f04f 33ff 	mov.w	r3, #4294967295
   d683a:	4621      	mov	r1, r4
   d683c:	47a8      	blx	r5
}
   d683e:	b003      	add	sp, #12
   d6840:	bd30      	pop	{r4, r5, pc}

000d6842 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6842:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6844:	6803      	ldr	r3, [r0, #0]
   d6846:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6848:	f04f 33ff 	mov.w	r3, #4294967295
   d684c:	46a4      	mov	ip, r4
}
   d684e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6852:	4760      	bx	ip

000d6854 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6856:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6858:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d685a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d685e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6860:	4621      	mov	r1, r4
   d6862:	4613      	mov	r3, r2
   d6864:	2201      	movs	r2, #1
   d6866:	47a8      	blx	r5
}
   d6868:	b003      	add	sp, #12
   d686a:	bd30      	pop	{r4, r5, pc}

000d686c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d686c:	4770      	bx	lr

000d686e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d686e:	b538      	push	{r3, r4, r5, lr}
   d6870:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6872:	681a      	ldr	r2, [r3, #0]
   d6874:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6876:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6878:	da05      	bge.n	d6886 <_ZN9TCPClient9connectedEv+0x18>
   d687a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d687e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6882:	429a      	cmp	r2, r3
   d6884:	d001      	beq.n	d688a <_ZN9TCPClient9connectedEv+0x1c>
   d6886:	2501      	movs	r5, #1
   d6888:	e00b      	b.n	d68a2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d688a:	6803      	ldr	r3, [r0, #0]
   d688c:	691b      	ldr	r3, [r3, #16]
   d688e:	4798      	blx	r3
   d6890:	2800      	cmp	r0, #0
   d6892:	bf14      	ite	ne
   d6894:	2501      	movne	r5, #1
   d6896:	2500      	moveq	r5, #0
        if (!rv) {
   d6898:	d103      	bne.n	d68a2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d689a:	6823      	ldr	r3, [r4, #0]
   d689c:	4620      	mov	r0, r4
   d689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d68a0:	4798      	blx	r3
        }
    }
    return rv;
}
   d68a2:	4628      	mov	r0, r5
   d68a4:	bd38      	pop	{r3, r4, r5, pc}

000d68a6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d68a6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d68a8:	6818      	ldr	r0, [r3, #0]
}
   d68aa:	43c0      	mvns	r0, r0
   d68ac:	0fc0      	lsrs	r0, r0, #31
   d68ae:	4770      	bx	lr

000d68b0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d68b0:	4770      	bx	lr

000d68b2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d68b2:	2000      	movs	r0, #0
   d68b4:	4770      	bx	lr

000d68b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d68b6:	b510      	push	{r4, lr}
   d68b8:	2114      	movs	r1, #20
   d68ba:	4604      	mov	r4, r0
   d68bc:	f000 fc30 	bl	d7120 <_ZdlPvj>
   d68c0:	4620      	mov	r0, r4
   d68c2:	bd10      	pop	{r4, pc}

000d68c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d68c4:	f7fd bbe9 	b.w	d409a <_ZdlPv>

000d68c8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d68c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d68ca:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d68cc:	2200      	movs	r2, #0
   d68ce:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d68d0:	9202      	str	r2, [sp, #8]
   d68d2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d68d4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d68d6:	4604      	mov	r4, r0
   d68d8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d68da:	d008      	beq.n	d68ee <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d68dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d68e0:	fbb3 f1f2 	udiv	r1, r3, r2
   d68e4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d68e6:	fb02 3111 	mls	r1, r2, r1, r3
   d68ea:	434a      	muls	r2, r1
   d68ec:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d68ee:	6960      	ldr	r0, [r4, #20]
   d68f0:	2308      	movs	r3, #8
   d68f2:	9300      	str	r3, [sp, #0]
   d68f4:	f241 0205 	movw	r2, #4101	; 0x1005
   d68f8:	446b      	add	r3, sp
   d68fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d68fe:	6800      	ldr	r0, [r0, #0]
   d6900:	f7fe fcb6 	bl	d5270 <sock_setsockopt>
    if (ret < 0) {
   d6904:	2800      	cmp	r0, #0
   d6906:	db08      	blt.n	d691a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6908:	6960      	ldr	r0, [r4, #20]
   d690a:	2300      	movs	r3, #0
   d690c:	4632      	mov	r2, r6
   d690e:	4629      	mov	r1, r5
   d6910:	6800      	ldr	r0, [r0, #0]
   d6912:	f7fe fccd 	bl	d52b0 <sock_send>
    if (ret < 0) {
   d6916:	2800      	cmp	r0, #0
   d6918:	da04      	bge.n	d6924 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d691a:	f7fe fe2d 	bl	d5578 <__errno>
   d691e:	6803      	ldr	r3, [r0, #0]
   d6920:	6063      	str	r3, [r4, #4]
   d6922:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6924:	b004      	add	sp, #16
   d6926:	bd70      	pop	{r4, r5, r6, pc}

000d6928 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6928:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d692a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d692c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d692e:	689b      	ldr	r3, [r3, #8]
   d6930:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6932:	68a3      	ldr	r3, [r4, #8]
   d6934:	3b01      	subs	r3, #1
   d6936:	60a3      	str	r3, [r4, #8]
   d6938:	b92b      	cbnz	r3, d6946 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d693a:	6823      	ldr	r3, [r4, #0]
   d693c:	4620      	mov	r0, r4
   d693e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6944:	4718      	bx	r3
   d6946:	bd10      	pop	{r4, pc}

000d6948 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6948:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d694a:	4604      	mov	r4, r0
   d694c:	694d      	ldr	r5, [r1, #20]
   d694e:	4b05      	ldr	r3, [pc, #20]	; (d6964 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6950:	f844 3b04 	str.w	r3, [r4], #4
   d6954:	358c      	adds	r5, #140	; 0x8c
   d6956:	4606      	mov	r6, r0
   d6958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d695c:	682b      	ldr	r3, [r5, #0]
   d695e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6960:	4630      	mov	r0, r6
   d6962:	bd70      	pop	{r4, r5, r6, pc}
   d6964:	000d85e0 	.word	0x000d85e0

000d6968 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6968:	b510      	push	{r4, lr}
   d696a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d696c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6970:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6974:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6976:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6978:	d005      	beq.n	d6986 <_ZN9TCPClient4peekEv+0x1e>
   d697a:	6962      	ldr	r2, [r4, #20]
   d697c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6980:	4413      	add	r3, r2
   d6982:	7918      	ldrb	r0, [r3, #4]
   d6984:	bd10      	pop	{r4, pc}
   d6986:	6803      	ldr	r3, [r0, #0]
   d6988:	691b      	ldr	r3, [r3, #16]
   d698a:	4798      	blx	r3
   d698c:	2800      	cmp	r0, #0
   d698e:	d1f4      	bne.n	d697a <_ZN9TCPClient4peekEv+0x12>
   d6990:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6994:	bd10      	pop	{r4, pc}

000d6996 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6996:	b510      	push	{r4, lr}
   d6998:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d699a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d699e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d69a2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d69a4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d69a6:	d008      	beq.n	d69ba <_ZN9TCPClient4readEv+0x24>
   d69a8:	6962      	ldr	r2, [r4, #20]
   d69aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d69ae:	1c59      	adds	r1, r3, #1
   d69b0:	4413      	add	r3, r2
   d69b2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d69b6:	7918      	ldrb	r0, [r3, #4]
   d69b8:	bd10      	pop	{r4, pc}
   d69ba:	6803      	ldr	r3, [r0, #0]
   d69bc:	691b      	ldr	r3, [r3, #16]
   d69be:	4798      	blx	r3
   d69c0:	2800      	cmp	r0, #0
   d69c2:	d1f1      	bne.n	d69a8 <_ZN9TCPClient4readEv+0x12>
   d69c4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d69c8:	bd10      	pop	{r4, pc}

000d69ca <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d69ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69cc:	6943      	ldr	r3, [r0, #20]
   d69ce:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d69d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d69d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d69d8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d69da:	4605      	mov	r5, r0
   d69dc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d69de:	d106      	bne.n	d69ee <_ZN9TCPClient4readEPhj+0x24>
   d69e0:	6803      	ldr	r3, [r0, #0]
   d69e2:	691b      	ldr	r3, [r3, #16]
   d69e4:	4798      	blx	r3
   d69e6:	b910      	cbnz	r0, d69ee <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d69e8:	f04f 34ff 	mov.w	r4, #4294967295
   d69ec:	e014      	b.n	d6a18 <_ZN9TCPClient4readEPhj+0x4e>
   d69ee:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d69f0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d69f4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d69f8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d69fa:	42bc      	cmp	r4, r7
   d69fc:	bf28      	it	cs
   d69fe:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6a00:	4419      	add	r1, r3
   d6a02:	4622      	mov	r2, r4
   d6a04:	3104      	adds	r1, #4
   d6a06:	4630      	mov	r0, r6
   d6a08:	f000 fe42 	bl	d7690 <memcpy>
   d6a0c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6a0e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6a12:	4423      	add	r3, r4
   d6a14:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a1c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6a20:	4698      	mov	r8, r3
    stop();
   d6a22:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a24:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6a28:	460d      	mov	r5, r1
   d6a2a:	4606      	mov	r6, r0
   d6a2c:	4617      	mov	r7, r2
    stop();
   d6a2e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6a30:	ab12      	add	r3, sp, #72	; 0x48
   d6a32:	2400      	movs	r4, #0
   d6a34:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6a38:	4622      	mov	r2, r4
   d6a3a:	4621      	mov	r1, r4
   d6a3c:	4628      	mov	r0, r5
   d6a3e:	f7fe fae7 	bl	d5010 <netdb_getaddrinfo>
   d6a42:	4681      	mov	r9, r0
   d6a44:	2800      	cmp	r0, #0
   d6a46:	d13d      	bne.n	d6ac4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6a48:	9b00      	ldr	r3, [sp, #0]
   d6a4a:	2b00      	cmp	r3, #0
   d6a4c:	d056      	beq.n	d6afc <_ZN9TCPClient7connectEPKctm+0xe0>
   d6a4e:	695b      	ldr	r3, [r3, #20]
   d6a50:	2b00      	cmp	r3, #0
   d6a52:	d053      	beq.n	d6afc <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6a54:	a806      	add	r0, sp, #24
   d6a56:	f7ff fc7b 	bl	d6350 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6a5a:	9b00      	ldr	r3, [sp, #0]
   d6a5c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6a5e:	7863      	ldrb	r3, [r4, #1]
   d6a60:	2b02      	cmp	r3, #2
   d6a62:	d101      	bne.n	d6a68 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a64:	1d21      	adds	r1, r4, #4
   d6a66:	e013      	b.n	d6a90 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6a68:	2b0a      	cmp	r3, #10
   d6a6a:	d114      	bne.n	d6a96 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6a6c:	2211      	movs	r2, #17
   d6a6e:	4649      	mov	r1, r9
   d6a70:	a801      	add	r0, sp, #4
   d6a72:	f000 fe33 	bl	d76dc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a76:	68a3      	ldr	r3, [r4, #8]
   d6a78:	bb33      	cbnz	r3, d6ac8 <_ZN9TCPClient7connectEPKctm+0xac>
   d6a7a:	68e3      	ldr	r3, [r4, #12]
   d6a7c:	bb23      	cbnz	r3, d6ac8 <_ZN9TCPClient7connectEPKctm+0xac>
   d6a7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6a82:	6925      	ldr	r5, [r4, #16]
   d6a84:	f7fe fb6c 	bl	d5160 <inet_htonl>
   d6a88:	4285      	cmp	r5, r0
   d6a8a:	d11d      	bne.n	d6ac8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6a8c:	f104 0114 	add.w	r1, r4, #20
   d6a90:	a806      	add	r0, sp, #24
   d6a92:	f7ff fca0 	bl	d63d6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6a96:	a806      	add	r0, sp, #24
   d6a98:	f7ff fc7a 	bl	d6390 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6a9c:	2800      	cmp	r0, #0
   d6a9e:	d02d      	beq.n	d6afc <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6aa0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6aa2:	ad07      	add	r5, sp, #28
   d6aa4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6aa8:	4b18      	ldr	r3, [pc, #96]	; (d6b0c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6aaa:	930c      	str	r3, [sp, #48]	; 0x30
   d6aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aae:	ac0d      	add	r4, sp, #52	; 0x34
   d6ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ab2:	682b      	ldr	r3, [r5, #0]
   d6ab4:	7023      	strb	r3, [r4, #0]
   d6ab6:	463a      	mov	r2, r7
   d6ab8:	4643      	mov	r3, r8
   d6aba:	a90c      	add	r1, sp, #48	; 0x30
   d6abc:	4630      	mov	r0, r6
   d6abe:	47c8      	blx	r9
   d6ac0:	4681      	mov	r9, r0
   d6ac2:	e01b      	b.n	d6afc <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6ac4:	46a1      	mov	r9, r4
   d6ac6:	e019      	b.n	d6afc <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ac8:	f104 0308 	add.w	r3, r4, #8
   d6acc:	ad01      	add	r5, sp, #4
   d6ace:	3418      	adds	r4, #24
   d6ad0:	6818      	ldr	r0, [r3, #0]
   d6ad2:	6859      	ldr	r1, [r3, #4]
   d6ad4:	462a      	mov	r2, r5
   d6ad6:	c203      	stmia	r2!, {r0, r1}
   d6ad8:	3308      	adds	r3, #8
   d6ada:	42a3      	cmp	r3, r4
   d6adc:	4615      	mov	r5, r2
   d6ade:	d1f7      	bne.n	d6ad0 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6ae0:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6ae2:	a901      	add	r1, sp, #4
   d6ae4:	a80c      	add	r0, sp, #48	; 0x30
   d6ae6:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6ae8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6aec:	f7ff fc3e 	bl	d636c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6af2:	ac07      	add	r4, sp, #28
   d6af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6af6:	682b      	ldr	r3, [r5, #0]
   d6af8:	7023      	strb	r3, [r4, #0]
   d6afa:	e7cc      	b.n	d6a96 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6afc:	9800      	ldr	r0, [sp, #0]
   d6afe:	f7fe fa7f 	bl	d5000 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6b02:	4648      	mov	r0, r9
   d6b04:	b013      	add	sp, #76	; 0x4c
   d6b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6b0a:	bf00      	nop
   d6b0c:	000d85e0 	.word	0x000d85e0

000d6b10 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6b10:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6b12:	2300      	movs	r3, #0
   d6b14:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6b18:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6b1a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6b1e:	4770      	bx	lr

000d6b20 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b24:	461e      	mov	r6, r3
    stop();
   d6b26:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6b28:	460c      	mov	r4, r1
   d6b2a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6b2e:	4605      	mov	r5, r0
   d6b30:	4617      	mov	r7, r2
    stop();
   d6b32:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6b34:	7d23      	ldrb	r3, [r4, #20]
   d6b36:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6b3a:	2b04      	cmp	r3, #4
   d6b3c:	bf0c      	ite	eq
   d6b3e:	2002      	moveq	r0, #2
   d6b40:	200a      	movne	r0, #10
   d6b42:	2206      	movs	r2, #6
   d6b44:	2101      	movs	r1, #1
   d6b46:	f7fe fbbb 	bl	d52c0 <sock_socket>
   d6b4a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6b4e:	696b      	ldr	r3, [r5, #20]
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	2b00      	cmp	r3, #0
   d6b54:	db18      	blt.n	d6b88 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6b56:	4628      	mov	r0, r5
   d6b58:	f7ff ffda 	bl	d6b10 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6b5c:	b1d6      	cbz	r6, d6b94 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6b5e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b60:	a903      	add	r1, sp, #12
   d6b62:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6b64:	9303      	str	r3, [sp, #12]
   d6b66:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b6a:	f7fe fa99 	bl	d50a0 <if_index_to_name>
   d6b6e:	b958      	cbnz	r0, d6b88 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6b70:	6968      	ldr	r0, [r5, #20]
   d6b72:	2306      	movs	r3, #6
   d6b74:	9300      	str	r3, [sp, #0]
   d6b76:	f241 020b 	movw	r2, #4107	; 0x100b
   d6b7a:	ab03      	add	r3, sp, #12
   d6b7c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b80:	6800      	ldr	r0, [r0, #0]
   d6b82:	f7fe fb75 	bl	d5270 <sock_setsockopt>
   d6b86:	b128      	cbz	r0, d6b94 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6b88:	682b      	ldr	r3, [r5, #0]
   d6b8a:	4628      	mov	r0, r5
   d6b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6b8e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6b90:	4798      	blx	r3
   d6b92:	e03b      	b.n	d6c0c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6b94:	261c      	movs	r6, #28
   d6b96:	4632      	mov	r2, r6
   d6b98:	2100      	movs	r1, #0
   d6b9a:	a803      	add	r0, sp, #12
   d6b9c:	f000 fd9e 	bl	d76dc <memset>
    if (ip.version() == 4) {
   d6ba0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6ba2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6ba6:	2b04      	cmp	r3, #4
   d6ba8:	d10c      	bne.n	d6bc4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6baa:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6bac:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6bae:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6bb2:	f7fe fadd 	bl	d5170 <inet_htons>
   d6bb6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6bba:	6860      	ldr	r0, [r4, #4]
   d6bbc:	f7fe fad0 	bl	d5160 <inet_htonl>
   d6bc0:	9004      	str	r0, [sp, #16]
   d6bc2:	e013      	b.n	d6bec <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6bc4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6bc6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6bc8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6bcc:	f7fe fad0 	bl	d5170 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6bd0:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6bd2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6bd6:	1d23      	adds	r3, r4, #4
   d6bd8:	f104 0714 	add.w	r7, r4, #20
   d6bdc:	6818      	ldr	r0, [r3, #0]
   d6bde:	6859      	ldr	r1, [r3, #4]
   d6be0:	4632      	mov	r2, r6
   d6be2:	c203      	stmia	r2!, {r0, r1}
   d6be4:	3308      	adds	r3, #8
   d6be6:	42bb      	cmp	r3, r7
   d6be8:	4616      	mov	r6, r2
   d6bea:	d1f7      	bne.n	d6bdc <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6bec:	696b      	ldr	r3, [r5, #20]
   d6bee:	221c      	movs	r2, #28
   d6bf0:	a903      	add	r1, sp, #12
   d6bf2:	6818      	ldr	r0, [r3, #0]
   d6bf4:	f7fe fb4c 	bl	d5290 <sock_connect>
   d6bf8:	2800      	cmp	r0, #0
   d6bfa:	d1c5      	bne.n	d6b88 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6bfc:	3404      	adds	r4, #4
   d6bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6c00:	696d      	ldr	r5, [r5, #20]
   d6c02:	358c      	adds	r5, #140	; 0x8c
   d6c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6c06:	6823      	ldr	r3, [r4, #0]
   d6c08:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6c0a:	2401      	movs	r4, #1
}
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	b00a      	add	sp, #40	; 0x28
   d6c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6c14 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6c14:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6c16:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6c18:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6c1a:	6818      	ldr	r0, [r3, #0]
   d6c1c:	2800      	cmp	r0, #0
   d6c1e:	db01      	blt.n	d6c24 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6c20:	f7fe fb2e 	bl	d5280 <sock_close>
   d6c24:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6c26:	f04f 32ff 	mov.w	r2, #4294967295
   d6c2a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6c2c:	6960      	ldr	r0, [r4, #20]
   d6c2e:	2211      	movs	r2, #17
   d6c30:	2100      	movs	r1, #0
   d6c32:	308c      	adds	r0, #140	; 0x8c
   d6c34:	f000 fd52 	bl	d76dc <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6c38:	4620      	mov	r0, r4
}
   d6c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6c3e:	f7ff bf67 	b.w	d6b10 <_ZN9TCPClient12flush_bufferEv>
	...

000d6c44 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6c44:	b530      	push	{r4, r5, lr}
   d6c46:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6c48:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6c4c:	b08b      	sub	sp, #44	; 0x2c
   d6c4e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6c50:	b11b      	cbz	r3, d6c5a <_ZN9TCPClient9availableEv+0x16>
   d6c52:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6c56:	429a      	cmp	r2, r3
   d6c58:	d040      	beq.n	d6cdc <_ZN9TCPClient9availableEv+0x98>
   d6c5a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6c5c:	6818      	ldr	r0, [r3, #0]
   d6c5e:	2800      	cmp	r0, #0
   d6c60:	db3f      	blt.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6c62:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6c66:	2d7f      	cmp	r5, #127	; 0x7f
   d6c68:	d83b      	bhi.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6c6a:	1d19      	adds	r1, r3, #4
   d6c6c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6c70:	2308      	movs	r3, #8
   d6c72:	4429      	add	r1, r5
   d6c74:	f7fe fb14 	bl	d52a0 <sock_recv>
            if (ret > 0) {
   d6c78:	2800      	cmp	r0, #0
   d6c7a:	dd0c      	ble.n	d6c96 <_ZN9TCPClient9availableEv+0x52>
   d6c7c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6c7e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6c82:	b90a      	cbnz	r2, d6c88 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6c84:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6c88:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6c8a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6c8e:	4418      	add	r0, r3
   d6c90:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6c94:	e025      	b.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6c96:	f7fe fc6f 	bl	d5578 <__errno>
   d6c9a:	6803      	ldr	r3, [r0, #0]
   d6c9c:	2b0b      	cmp	r3, #11
   d6c9e:	d020      	beq.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
   d6ca0:	f7fe fc6a 	bl	d5578 <__errno>
   d6ca4:	6803      	ldr	r3, [r0, #0]
   d6ca6:	2b0b      	cmp	r3, #11
   d6ca8:	d01b      	beq.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6caa:	2320      	movs	r3, #32
   d6cac:	2500      	movs	r5, #0
   d6cae:	9302      	str	r3, [sp, #8]
   d6cb0:	9503      	str	r5, [sp, #12]
   d6cb2:	f7fe fc61 	bl	d5578 <__errno>
   d6cb6:	6803      	ldr	r3, [r0, #0]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	4b0e      	ldr	r3, [pc, #56]	; (d6cf4 <_ZN9TCPClient9availableEv+0xb0>)
   d6cbc:	9300      	str	r3, [sp, #0]
   d6cbe:	aa02      	add	r2, sp, #8
   d6cc0:	462b      	mov	r3, r5
   d6cc2:	490d      	ldr	r1, [pc, #52]	; (d6cf8 <_ZN9TCPClient9availableEv+0xb4>)
   d6cc4:	2032      	movs	r0, #50	; 0x32
   d6cc6:	f7fe fb43 	bl	d5350 <log_message>
                    sock_close(d_->sock);
   d6cca:	6963      	ldr	r3, [r4, #20]
   d6ccc:	6818      	ldr	r0, [r3, #0]
   d6cce:	f7fe fad7 	bl	d5280 <sock_close>
   d6cd2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6cd4:	f04f 32ff 	mov.w	r2, #4294967295
   d6cd8:	601a      	str	r2, [r3, #0]
   d6cda:	e002      	b.n	d6ce2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6cdc:	f7ff ff18 	bl	d6b10 <_ZN9TCPClient12flush_bufferEv>
   d6ce0:	e7bb      	b.n	d6c5a <_ZN9TCPClient9availableEv+0x16>
   d6ce2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6ce4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6ce8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6cec:	1a18      	subs	r0, r3, r0
}
   d6cee:	b00b      	add	sp, #44	; 0x2c
   d6cf0:	bd30      	pop	{r4, r5, pc}
   d6cf2:	bf00      	nop
   d6cf4:	000d8717 	.word	0x000d8717
   d6cf8:	000d8710 	.word	0x000d8710

000d6cfc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6cfc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6cfe:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6d00:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6d02:	6001      	str	r1, [r0, #0]
   d6d04:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6d08:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6d0c:	3088      	adds	r0, #136	; 0x88
   d6d0e:	f7ff fb1f 	bl	d6350 <_ZN9IPAddressC1Ev>
}
   d6d12:	4620      	mov	r0, r4
   d6d14:	bd10      	pop	{r4, pc}
	...

000d6d18 <_ZN9TCPClientC1Ei>:
   d6d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6d1c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d1e:	2300      	movs	r3, #0
   d6d20:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6d22:	4a14      	ldr	r2, [pc, #80]	; (d6d74 <_ZN9TCPClientC1Ei+0x5c>)
   d6d24:	6043      	str	r3, [r0, #4]
   d6d26:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6d28:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d2a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6d2c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6d2e:	20a0      	movs	r0, #160	; 0xa0
   d6d30:	460e      	mov	r6, r1
   d6d32:	f7fd f9b0 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6d36:	4605      	mov	r5, r0
   d6d38:	b110      	cbz	r0, d6d40 <_ZN9TCPClientC1Ei+0x28>
   d6d3a:	4631      	mov	r1, r6
   d6d3c:	f7ff ffde 	bl	d6cfc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6d40:	2014      	movs	r0, #20
   d6d42:	f7fd f9a8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6d46:	4603      	mov	r3, r0
   d6d48:	b128      	cbz	r0, d6d56 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6d4a:	2201      	movs	r2, #1
   d6d4c:	6042      	str	r2, [r0, #4]
   d6d4e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6d50:	4a09      	ldr	r2, [pc, #36]	; (d6d78 <_ZN9TCPClientC1Ei+0x60>)
   d6d52:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6d54:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6d56:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6d58:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6d5a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6d5c:	b128      	cbz	r0, d6d6a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6d5e:	6843      	ldr	r3, [r0, #4]
   d6d60:	3b01      	subs	r3, #1
   d6d62:	6043      	str	r3, [r0, #4]
   d6d64:	b90b      	cbnz	r3, d6d6a <_ZN9TCPClientC1Ei+0x52>
   d6d66:	f7ff fddf 	bl	d6928 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6d6a:	4620      	mov	r0, r4
   d6d6c:	f7ff fed0 	bl	d6b10 <_ZN9TCPClient12flush_bufferEv>
}
   d6d70:	4620      	mov	r0, r4
   d6d72:	bd70      	pop	{r4, r5, r6, pc}
   d6d74:	000d86cc 	.word	0x000d86cc
   d6d78:	000d86b0 	.word	0x000d86b0

000d6d7c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6d7c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6d7e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6d82:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6d84:	f7ff ffc8 	bl	d6d18 <_ZN9TCPClientC1Ei>
}
   d6d88:	4620      	mov	r0, r4
   d6d8a:	bd10      	pop	{r4, pc}

000d6d8c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6d8c:	b510      	push	{r4, lr}
   d6d8e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6d90:	6800      	ldr	r0, [r0, #0]
   d6d92:	2800      	cmp	r0, #0
   d6d94:	db01      	blt.n	d6d9a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6d96:	f7fe fa73 	bl	d5280 <sock_close>
    }
}
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	bd10      	pop	{r4, pc}

000d6d9e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6d9e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6da0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6da2:	4620      	mov	r0, r4
   d6da4:	f7ff fff2 	bl	d6d8c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6da8:	b124      	cbz	r4, d6db4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6daa:	4620      	mov	r0, r4
   d6dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6db0:	f7fd b973 	b.w	d409a <_ZdlPv>
   d6db4:	bd10      	pop	{r4, pc}

000d6db6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6db6:	2200      	movs	r2, #0
   d6db8:	4611      	mov	r1, r2
   d6dba:	6840      	ldr	r0, [r0, #4]
   d6dbc:	f7fe bb2c 	b.w	d5418 <network_ready>

000d6dc0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dc0:	2200      	movs	r2, #0
   d6dc2:	4611      	mov	r1, r2
   d6dc4:	6840      	ldr	r0, [r0, #4]
   d6dc6:	f7fe bb47 	b.w	d5458 <network_listening>

000d6dca <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6dca:	2200      	movs	r2, #0
   d6dcc:	4611      	mov	r1, r2
   d6dce:	6840      	ldr	r0, [r0, #4]
   d6dd0:	f7fe bb52 	b.w	d5478 <network_get_listen_timeout>

000d6dd4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	6840      	ldr	r0, [r0, #4]
   d6dd8:	f7fe bb46 	b.w	d5468 <network_set_listen_timeout>

000d6ddc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ddc:	2200      	movs	r2, #0
   d6dde:	f081 0101 	eor.w	r1, r1, #1
   d6de2:	6840      	ldr	r0, [r0, #4]
   d6de4:	f7fe bb30 	b.w	d5448 <network_listen>

000d6de8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6de8:	2300      	movs	r3, #0
   d6dea:	461a      	mov	r2, r3
   d6dec:	4619      	mov	r1, r3
   d6dee:	6840      	ldr	r0, [r0, #4]
   d6df0:	f7fe bb22 	b.w	d5438 <network_off>

000d6df4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6df4:	2300      	movs	r3, #0
   d6df6:	461a      	mov	r2, r3
   d6df8:	4619      	mov	r1, r3
   d6dfa:	6840      	ldr	r0, [r0, #4]
   d6dfc:	f7fe bb14 	b.w	d5428 <network_on>

000d6e00 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e00:	2200      	movs	r2, #0
   d6e02:	4611      	mov	r1, r2
   d6e04:	6840      	ldr	r0, [r0, #4]
   d6e06:	f7fe baf7 	b.w	d53f8 <network_connecting>

000d6e0a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	2102      	movs	r1, #2
   d6e0e:	6840      	ldr	r0, [r0, #4]
   d6e10:	f7fe bafa 	b.w	d5408 <network_disconnect>

000d6e14 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e14:	2300      	movs	r3, #0
   d6e16:	461a      	mov	r2, r3
   d6e18:	6840      	ldr	r0, [r0, #4]
   d6e1a:	f7fe bae5 	b.w	d53e8 <network_connect>
	...

000d6e20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e20:	4b02      	ldr	r3, [pc, #8]	; (d6e2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e22:	2204      	movs	r2, #4
   d6e24:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e26:	4a02      	ldr	r2, [pc, #8]	; (d6e30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e28:	601a      	str	r2, [r3, #0]
   d6e2a:	4770      	bx	lr
   d6e2c:	2003e6e8 	.word	0x2003e6e8
   d6e30:	000d8730 	.word	0x000d8730

000d6e34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6e34:	2300      	movs	r3, #0
   d6e36:	461a      	mov	r2, r3
   d6e38:	6840      	ldr	r0, [r0, #4]
   d6e3a:	f7fe bad5 	b.w	d53e8 <network_connect>

000d6e3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e3e:	2200      	movs	r2, #0
   d6e40:	2102      	movs	r1, #2
   d6e42:	6840      	ldr	r0, [r0, #4]
   d6e44:	f7fe bae0 	b.w	d5408 <network_disconnect>

000d6e48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e48:	2200      	movs	r2, #0
   d6e4a:	4611      	mov	r1, r2
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	f7fe bad3 	b.w	d53f8 <network_connecting>

000d6e52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e52:	2200      	movs	r2, #0
   d6e54:	4611      	mov	r1, r2
   d6e56:	6840      	ldr	r0, [r0, #4]
   d6e58:	f7fe bade 	b.w	d5418 <network_ready>

000d6e5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e5c:	2300      	movs	r3, #0
   d6e5e:	461a      	mov	r2, r3
   d6e60:	4619      	mov	r1, r3
   d6e62:	6840      	ldr	r0, [r0, #4]
   d6e64:	f7fe bae0 	b.w	d5428 <network_on>

000d6e68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e68:	2300      	movs	r3, #0
   d6e6a:	461a      	mov	r2, r3
   d6e6c:	4619      	mov	r1, r3
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7fe bae2 	b.w	d5438 <network_off>

000d6e74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e74:	2200      	movs	r2, #0
   d6e76:	f081 0101 	eor.w	r1, r1, #1
   d6e7a:	6840      	ldr	r0, [r0, #4]
   d6e7c:	f7fe bae4 	b.w	d5448 <network_listen>

000d6e80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e80:	2200      	movs	r2, #0
   d6e82:	6840      	ldr	r0, [r0, #4]
   d6e84:	f7fe baf0 	b.w	d5468 <network_set_listen_timeout>

000d6e88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e88:	2200      	movs	r2, #0
   d6e8a:	4611      	mov	r1, r2
   d6e8c:	6840      	ldr	r0, [r0, #4]
   d6e8e:	f7fe baf3 	b.w	d5478 <network_get_listen_timeout>

000d6e92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e92:	2200      	movs	r2, #0
   d6e94:	4611      	mov	r1, r2
   d6e96:	6840      	ldr	r0, [r0, #4]
   d6e98:	f7fe bade 	b.w	d5458 <network_listening>

000d6e9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ea0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ea2:	b095      	sub	sp, #84	; 0x54
   d6ea4:	4616      	mov	r6, r2
   d6ea6:	460d      	mov	r5, r1
   d6ea8:	4607      	mov	r7, r0
    IPAddress addr;
   d6eaa:	f7ff fa51 	bl	d6350 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6eae:	4621      	mov	r1, r4
   d6eb0:	2220      	movs	r2, #32
   d6eb2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6eb4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6eb6:	f000 fc11 	bl	d76dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6eba:	2340      	movs	r3, #64	; 0x40
   d6ebc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6ebe:	4621      	mov	r1, r4
   d6ec0:	466b      	mov	r3, sp
   d6ec2:	aa0c      	add	r2, sp, #48	; 0x30
   d6ec4:	4630      	mov	r0, r6
   d6ec6:	f7fe f8a3 	bl	d5010 <netdb_getaddrinfo>
    if (!r) {
   d6eca:	4604      	mov	r4, r0
   d6ecc:	2800      	cmp	r0, #0
   d6ece:	d144      	bne.n	d6f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ed0:	4602      	mov	r2, r0
   d6ed2:	2101      	movs	r1, #1
   d6ed4:	6868      	ldr	r0, [r5, #4]
   d6ed6:	f7fe fa9f 	bl	d5418 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6eda:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6edc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ede:	4622      	mov	r2, r4
   d6ee0:	6868      	ldr	r0, [r5, #4]
   d6ee2:	f7fe fa99 	bl	d5418 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ee6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ee8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6eea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eec:	2e00      	cmp	r6, #0
   d6eee:	d034      	beq.n	d6f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6ef0:	2900      	cmp	r1, #0
   d6ef2:	d132      	bne.n	d6f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6ef4:	6873      	ldr	r3, [r6, #4]
   d6ef6:	2b02      	cmp	r3, #2
   d6ef8:	d002      	beq.n	d6f00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6efa:	2b0a      	cmp	r3, #10
   d6efc:	d009      	beq.n	d6f12 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6efe:	e02a      	b.n	d6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6f00:	f1b8 0f00 	cmp.w	r8, #0
   d6f04:	d027      	beq.n	d6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6f06:	6971      	ldr	r1, [r6, #20]
   d6f08:	4638      	mov	r0, r7
   d6f0a:	3104      	adds	r1, #4
   d6f0c:	f7ff fa63 	bl	d63d6 <_ZN9IPAddressaSEPKh>
   d6f10:	e020      	b.n	d6f54 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6f12:	f1b9 0f00 	cmp.w	r9, #0
   d6f16:	d01e      	beq.n	d6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6f18:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6f1a:	2211      	movs	r2, #17
   d6f1c:	a801      	add	r0, sp, #4
   d6f1e:	f000 fbdd 	bl	d76dc <memset>
                    a.v = 6;
   d6f22:	2306      	movs	r3, #6
   d6f24:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f28:	ad01      	add	r5, sp, #4
   d6f2a:	f104 0308 	add.w	r3, r4, #8
   d6f2e:	3418      	adds	r4, #24
   d6f30:	6818      	ldr	r0, [r3, #0]
   d6f32:	6859      	ldr	r1, [r3, #4]
   d6f34:	462a      	mov	r2, r5
   d6f36:	c203      	stmia	r2!, {r0, r1}
   d6f38:	3308      	adds	r3, #8
   d6f3a:	42a3      	cmp	r3, r4
   d6f3c:	4615      	mov	r5, r2
   d6f3e:	d1f7      	bne.n	d6f30 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6f40:	a901      	add	r1, sp, #4
   d6f42:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f44:	ad07      	add	r5, sp, #28
   d6f46:	f7ff fa11 	bl	d636c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f4c:	1d3c      	adds	r4, r7, #4
   d6f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f50:	682b      	ldr	r3, [r5, #0]
   d6f52:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6f54:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f56:	69f6      	ldr	r6, [r6, #28]
   d6f58:	e7c8      	b.n	d6eec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6f5a:	9800      	ldr	r0, [sp, #0]
   d6f5c:	f7fe f850 	bl	d5000 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f60:	4638      	mov	r0, r7
   d6f62:	b015      	add	sp, #84	; 0x54
   d6f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f68:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f6a:	4a03      	ldr	r2, [pc, #12]	; (d6f78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f6c:	601a      	str	r2, [r3, #0]
   d6f6e:	2200      	movs	r2, #0
   d6f70:	605a      	str	r2, [r3, #4]
   d6f72:	4770      	bx	lr
   d6f74:	2003e6f0 	.word	0x2003e6f0
   d6f78:	000d8764 	.word	0x000d8764

000d6f7c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6f7c:	b510      	push	{r4, lr}
   d6f7e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6f80:	f000 f860 	bl	d7044 <_ZN8particle7globals11instanceSpiEv>
   d6f84:	f7fe fb54 	bl	d5630 <_ZN8SPIClass9isEnabledEv>
   d6f88:	b128      	cbz	r0, d6f96 <pinAvailable+0x1a>
   d6f8a:	f1a4 030b 	sub.w	r3, r4, #11
   d6f8e:	2b02      	cmp	r3, #2
   d6f90:	d801      	bhi.n	d6f96 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d6f92:	2000      	movs	r0, #0
   d6f94:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6f96:	f000 f88f 	bl	d70b8 <_Z19__fetch_global_Wirev>
   d6f9a:	f7ff fb83 	bl	d66a4 <_ZN7TwoWire9isEnabledEv>
   d6f9e:	b108      	cbz	r0, d6fa4 <pinAvailable+0x28>
   d6fa0:	2c01      	cmp	r4, #1
   d6fa2:	d9f6      	bls.n	d6f92 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6fa4:	f7ff fb06 	bl	d65b4 <_Z22__fetch_global_Serial1v>
   d6fa8:	f7ff fb00 	bl	d65ac <_ZN11USARTSerial9isEnabledEv>
   d6fac:	b118      	cbz	r0, d6fb6 <pinAvailable+0x3a>
   d6fae:	f1a4 0309 	sub.w	r3, r4, #9
   d6fb2:	2b01      	cmp	r3, #1
   d6fb4:	d9ed      	bls.n	d6f92 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6fb6:	2c23      	cmp	r4, #35	; 0x23
   d6fb8:	bf8c      	ite	hi
   d6fba:	2000      	movhi	r0, #0
   d6fbc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6fbe:	bd10      	pop	{r4, pc}

000d6fc0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fc0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6fc2:	b538      	push	{r3, r4, r5, lr}
   d6fc4:	4604      	mov	r4, r0
   d6fc6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fc8:	d80a      	bhi.n	d6fe0 <pinMode+0x20>
   d6fca:	29ff      	cmp	r1, #255	; 0xff
   d6fcc:	d008      	beq.n	d6fe0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fce:	f7ff ffd5 	bl	d6f7c <pinAvailable>
   d6fd2:	b128      	cbz	r0, d6fe0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fd4:	4629      	mov	r1, r5
   d6fd6:	4620      	mov	r0, r4
}
   d6fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fdc:	f7fe b830 	b.w	d5040 <HAL_Pin_Mode>
   d6fe0:	bd38      	pop	{r3, r4, r5, pc}

000d6fe2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6fe2:	b538      	push	{r3, r4, r5, lr}
   d6fe4:	4604      	mov	r4, r0
   d6fe6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6fe8:	f7fe f832 	bl	d5050 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6fec:	28ff      	cmp	r0, #255	; 0xff
   d6fee:	d010      	beq.n	d7012 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6ff0:	2806      	cmp	r0, #6
   d6ff2:	d804      	bhi.n	d6ffe <digitalWrite+0x1c>
   d6ff4:	234d      	movs	r3, #77	; 0x4d
   d6ff6:	fa23 f000 	lsr.w	r0, r3, r0
   d6ffa:	07c3      	lsls	r3, r0, #31
   d6ffc:	d409      	bmi.n	d7012 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ffe:	4620      	mov	r0, r4
   d7000:	f7ff ffbc 	bl	d6f7c <pinAvailable>
   d7004:	b128      	cbz	r0, d7012 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7006:	4629      	mov	r1, r5
   d7008:	4620      	mov	r0, r4
}
   d700a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d700e:	f7fe b827 	b.w	d5060 <HAL_GPIO_Write>
   d7012:	bd38      	pop	{r3, r4, r5, pc}

000d7014 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7014:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7016:	b510      	push	{r4, lr}
   d7018:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d701a:	bf9c      	itt	ls
   d701c:	340e      	addls	r4, #14
   d701e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7020:	4620      	mov	r0, r4
   d7022:	f7ff ffab 	bl	d6f7c <pinAvailable>
   d7026:	b150      	cbz	r0, d703e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7028:	2103      	movs	r1, #3
   d702a:	4620      	mov	r0, r4
   d702c:	f7fe f800 	bl	d5030 <HAL_Validate_Pin_Function>
   d7030:	2803      	cmp	r0, #3
   d7032:	d104      	bne.n	d703e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7034:	4620      	mov	r0, r4
}
   d7036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d703a:	f7fe b819 	b.w	d5070 <HAL_ADC_Read>
}
   d703e:	2000      	movs	r0, #0
   d7040:	bd10      	pop	{r4, pc}
	...

000d7044 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d7044:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d7046:	4d0b      	ldr	r5, [pc, #44]	; (d7074 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7048:	6829      	ldr	r1, [r5, #0]
   d704a:	f011 0401 	ands.w	r4, r1, #1
   d704e:	d10f      	bne.n	d7070 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7050:	4628      	mov	r0, r5
   d7052:	f7fd f831 	bl	d40b8 <__cxa_guard_acquire>
   d7056:	b158      	cbz	r0, d7070 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7058:	4621      	mov	r1, r4
   d705a:	4807      	ldr	r0, [pc, #28]	; (d7078 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d705c:	f7fe fada 	bl	d5614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7060:	4628      	mov	r0, r5
   d7062:	f7fd f82e 	bl	d40c2 <__cxa_guard_release>
   d7066:	4a05      	ldr	r2, [pc, #20]	; (d707c <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7068:	4905      	ldr	r1, [pc, #20]	; (d7080 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d706a:	4803      	ldr	r0, [pc, #12]	; (d7078 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d706c:	f000 f84a 	bl	d7104 <__aeabi_atexit>
    return instance;
}
   d7070:	4801      	ldr	r0, [pc, #4]	; (d7078 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7072:	bd38      	pop	{r3, r4, r5, pc}
   d7074:	2003e704 	.word	0x2003e704
   d7078:	2003e6f8 	.word	0x2003e6f8
   d707c:	2003e1ec 	.word	0x2003e1ec
   d7080:	000d5605 	.word	0x000d5605

000d7084 <_Z17acquireWireBufferv>:
   d7084:	b570      	push	{r4, r5, r6, lr}
   d7086:	4604      	mov	r4, r0
   d7088:	2514      	movs	r5, #20
   d708a:	462a      	mov	r2, r5
   d708c:	4e09      	ldr	r6, [pc, #36]	; (d70b4 <_Z17acquireWireBufferv+0x30>)
   d708e:	2100      	movs	r1, #0
   d7090:	f000 fb24 	bl	d76dc <memset>
   d7094:	8025      	strh	r5, [r4, #0]
   d7096:	2520      	movs	r5, #32
   d7098:	4631      	mov	r1, r6
   d709a:	60a5      	str	r5, [r4, #8]
   d709c:	6125      	str	r5, [r4, #16]
   d709e:	4628      	mov	r0, r5
   d70a0:	f000 f840 	bl	d7124 <_ZnajRKSt9nothrow_t>
   d70a4:	4631      	mov	r1, r6
   d70a6:	6060      	str	r0, [r4, #4]
   d70a8:	4628      	mov	r0, r5
   d70aa:	f000 f83b 	bl	d7124 <_ZnajRKSt9nothrow_t>
   d70ae:	60e0      	str	r0, [r4, #12]
   d70b0:	4620      	mov	r0, r4
   d70b2:	bd70      	pop	{r4, r5, r6, pc}
   d70b4:	000d8790 	.word	0x000d8790

000d70b8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d70b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d70ba:	4d0e      	ldr	r5, [pc, #56]	; (d70f4 <_Z19__fetch_global_Wirev+0x3c>)
   d70bc:	6829      	ldr	r1, [r5, #0]
   d70be:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d70c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d70c4:	d113      	bne.n	d70ee <_Z19__fetch_global_Wirev+0x36>
   d70c6:	4628      	mov	r0, r5
   d70c8:	f7fc fff6 	bl	d40b8 <__cxa_guard_acquire>
   d70cc:	b178      	cbz	r0, d70ee <_Z19__fetch_global_Wirev+0x36>
   d70ce:	a801      	add	r0, sp, #4
   d70d0:	f7ff ffd8 	bl	d7084 <_Z17acquireWireBufferv>
   d70d4:	aa01      	add	r2, sp, #4
   d70d6:	4621      	mov	r1, r4
   d70d8:	4807      	ldr	r0, [pc, #28]	; (d70f8 <_Z19__fetch_global_Wirev+0x40>)
   d70da:	f7ff fad1 	bl	d6680 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d70de:	4628      	mov	r0, r5
   d70e0:	f7fc ffef 	bl	d40c2 <__cxa_guard_release>
   d70e4:	4a05      	ldr	r2, [pc, #20]	; (d70fc <_Z19__fetch_global_Wirev+0x44>)
   d70e6:	4906      	ldr	r1, [pc, #24]	; (d7100 <_Z19__fetch_global_Wirev+0x48>)
   d70e8:	4803      	ldr	r0, [pc, #12]	; (d70f8 <_Z19__fetch_global_Wirev+0x40>)
   d70ea:	f000 f80b 	bl	d7104 <__aeabi_atexit>
	return wire;
}
   d70ee:	4802      	ldr	r0, [pc, #8]	; (d70f8 <_Z19__fetch_global_Wirev+0x40>)
   d70f0:	b007      	add	sp, #28
   d70f2:	bd30      	pop	{r4, r5, pc}
   d70f4:	2003e70c 	.word	0x2003e70c
   d70f8:	2003e710 	.word	0x2003e710
   d70fc:	2003e1ec 	.word	0x2003e1ec
   d7100:	000d6629 	.word	0x000d6629

000d7104 <__aeabi_atexit>:
   d7104:	460b      	mov	r3, r1
   d7106:	4601      	mov	r1, r0
   d7108:	4618      	mov	r0, r3
   d710a:	f000 b9a7 	b.w	d745c <__cxa_atexit>
	...

000d7110 <_ZSt15get_new_handlerv>:
   d7110:	4b02      	ldr	r3, [pc, #8]	; (d711c <_ZSt15get_new_handlerv+0xc>)
   d7112:	6818      	ldr	r0, [r3, #0]
   d7114:	f3bf 8f5f 	dmb	sy
   d7118:	4770      	bx	lr
   d711a:	bf00      	nop
   d711c:	2003e724 	.word	0x2003e724

000d7120 <_ZdlPvj>:
   d7120:	f7fc bfbb 	b.w	d409a <_ZdlPv>

000d7124 <_ZnajRKSt9nothrow_t>:
   d7124:	f000 b800 	b.w	d7128 <_ZnwjRKSt9nothrow_t>

000d7128 <_ZnwjRKSt9nothrow_t>:
   d7128:	b510      	push	{r4, lr}
   d712a:	2800      	cmp	r0, #0
   d712c:	bf14      	ite	ne
   d712e:	4604      	movne	r4, r0
   d7130:	2401      	moveq	r4, #1
   d7132:	4620      	mov	r0, r4
   d7134:	f7fe f9e0 	bl	d54f8 <malloc>
   d7138:	b920      	cbnz	r0, d7144 <_ZnwjRKSt9nothrow_t+0x1c>
   d713a:	f7ff ffe9 	bl	d7110 <_ZSt15get_new_handlerv>
   d713e:	b108      	cbz	r0, d7144 <_ZnwjRKSt9nothrow_t+0x1c>
   d7140:	4780      	blx	r0
   d7142:	e7f6      	b.n	d7132 <_ZnwjRKSt9nothrow_t+0xa>
   d7144:	bd10      	pop	{r4, pc}

000d7146 <_ZSt25__throw_bad_function_callv>:
   d7146:	b508      	push	{r3, lr}
   d7148:	f7fe fa06 	bl	d5558 <abort>

000d714c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d714c:	4b18      	ldr	r3, [pc, #96]	; (d71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d714e:	681a      	ldr	r2, [r3, #0]
   d7150:	07d1      	lsls	r1, r2, #31
   d7152:	bf5c      	itt	pl
   d7154:	2201      	movpl	r2, #1
   d7156:	601a      	strpl	r2, [r3, #0]
   d7158:	4b16      	ldr	r3, [pc, #88]	; (d71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d715a:	681a      	ldr	r2, [r3, #0]
   d715c:	07d2      	lsls	r2, r2, #31
   d715e:	bf5c      	itt	pl
   d7160:	2201      	movpl	r2, #1
   d7162:	601a      	strpl	r2, [r3, #0]
   d7164:	4b14      	ldr	r3, [pc, #80]	; (d71b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7166:	681a      	ldr	r2, [r3, #0]
   d7168:	07d0      	lsls	r0, r2, #31
   d716a:	bf5c      	itt	pl
   d716c:	2201      	movpl	r2, #1
   d716e:	601a      	strpl	r2, [r3, #0]
   d7170:	4b12      	ldr	r3, [pc, #72]	; (d71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7172:	681a      	ldr	r2, [r3, #0]
   d7174:	07d1      	lsls	r1, r2, #31
   d7176:	bf5c      	itt	pl
   d7178:	2201      	movpl	r2, #1
   d717a:	601a      	strpl	r2, [r3, #0]
   d717c:	4b10      	ldr	r3, [pc, #64]	; (d71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d717e:	681a      	ldr	r2, [r3, #0]
   d7180:	07d2      	lsls	r2, r2, #31
   d7182:	bf5c      	itt	pl
   d7184:	2201      	movpl	r2, #1
   d7186:	601a      	strpl	r2, [r3, #0]
   d7188:	4b0e      	ldr	r3, [pc, #56]	; (d71c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d718a:	681a      	ldr	r2, [r3, #0]
   d718c:	07d0      	lsls	r0, r2, #31
   d718e:	bf5c      	itt	pl
   d7190:	2201      	movpl	r2, #1
   d7192:	601a      	strpl	r2, [r3, #0]
   d7194:	4b0c      	ldr	r3, [pc, #48]	; (d71c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7196:	681a      	ldr	r2, [r3, #0]
   d7198:	07d1      	lsls	r1, r2, #31
   d719a:	bf5c      	itt	pl
   d719c:	2201      	movpl	r2, #1
   d719e:	601a      	strpl	r2, [r3, #0]
   d71a0:	4b0a      	ldr	r3, [pc, #40]	; (d71cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71a2:	681a      	ldr	r2, [r3, #0]
   d71a4:	07d2      	lsls	r2, r2, #31
   d71a6:	bf5c      	itt	pl
   d71a8:	2201      	movpl	r2, #1
   d71aa:	601a      	strpl	r2, [r3, #0]
   d71ac:	4770      	bx	lr
   d71ae:	bf00      	nop
   d71b0:	2003e744 	.word	0x2003e744
   d71b4:	2003e740 	.word	0x2003e740
   d71b8:	2003e73c 	.word	0x2003e73c
   d71bc:	2003e738 	.word	0x2003e738
   d71c0:	2003e734 	.word	0x2003e734
   d71c4:	2003e730 	.word	0x2003e730
   d71c8:	2003e72c 	.word	0x2003e72c
   d71cc:	2003e728 	.word	0x2003e728

000d71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71d0:	4b24      	ldr	r3, [pc, #144]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71d2:	681a      	ldr	r2, [r3, #0]
   d71d4:	07d0      	lsls	r0, r2, #31
   d71d6:	bf5c      	itt	pl
   d71d8:	2201      	movpl	r2, #1
   d71da:	601a      	strpl	r2, [r3, #0]
   d71dc:	4b22      	ldr	r3, [pc, #136]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71de:	681a      	ldr	r2, [r3, #0]
   d71e0:	07d1      	lsls	r1, r2, #31
   d71e2:	bf5c      	itt	pl
   d71e4:	2201      	movpl	r2, #1
   d71e6:	601a      	strpl	r2, [r3, #0]
   d71e8:	4b20      	ldr	r3, [pc, #128]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71ea:	681a      	ldr	r2, [r3, #0]
   d71ec:	07d2      	lsls	r2, r2, #31
   d71ee:	bf5c      	itt	pl
   d71f0:	2201      	movpl	r2, #1
   d71f2:	601a      	strpl	r2, [r3, #0]
   d71f4:	4b1e      	ldr	r3, [pc, #120]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71f6:	681a      	ldr	r2, [r3, #0]
   d71f8:	07d0      	lsls	r0, r2, #31
   d71fa:	bf5c      	itt	pl
   d71fc:	2201      	movpl	r2, #1
   d71fe:	601a      	strpl	r2, [r3, #0]
   d7200:	4b1c      	ldr	r3, [pc, #112]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	07d1      	lsls	r1, r2, #31
   d7206:	bf5c      	itt	pl
   d7208:	2201      	movpl	r2, #1
   d720a:	601a      	strpl	r2, [r3, #0]
   d720c:	4b1a      	ldr	r3, [pc, #104]	; (d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d720e:	681a      	ldr	r2, [r3, #0]
   d7210:	07d2      	lsls	r2, r2, #31
   d7212:	bf5c      	itt	pl
   d7214:	2201      	movpl	r2, #1
   d7216:	601a      	strpl	r2, [r3, #0]
   d7218:	4b18      	ldr	r3, [pc, #96]	; (d727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d721a:	681a      	ldr	r2, [r3, #0]
   d721c:	07d0      	lsls	r0, r2, #31
   d721e:	bf5c      	itt	pl
   d7220:	2201      	movpl	r2, #1
   d7222:	601a      	strpl	r2, [r3, #0]
   d7224:	4b16      	ldr	r3, [pc, #88]	; (d7280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7226:	681a      	ldr	r2, [r3, #0]
   d7228:	07d1      	lsls	r1, r2, #31
   d722a:	bf5c      	itt	pl
   d722c:	2201      	movpl	r2, #1
   d722e:	601a      	strpl	r2, [r3, #0]
   d7230:	4b14      	ldr	r3, [pc, #80]	; (d7284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7232:	681a      	ldr	r2, [r3, #0]
   d7234:	07d2      	lsls	r2, r2, #31
   d7236:	bf5c      	itt	pl
   d7238:	2201      	movpl	r2, #1
   d723a:	601a      	strpl	r2, [r3, #0]
   d723c:	4b12      	ldr	r3, [pc, #72]	; (d7288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d723e:	681a      	ldr	r2, [r3, #0]
   d7240:	07d0      	lsls	r0, r2, #31
   d7242:	bf5c      	itt	pl
   d7244:	2201      	movpl	r2, #1
   d7246:	601a      	strpl	r2, [r3, #0]
   d7248:	4b10      	ldr	r3, [pc, #64]	; (d728c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d724a:	681a      	ldr	r2, [r3, #0]
   d724c:	07d1      	lsls	r1, r2, #31
   d724e:	bf5c      	itt	pl
   d7250:	2201      	movpl	r2, #1
   d7252:	601a      	strpl	r2, [r3, #0]
   d7254:	4b0e      	ldr	r3, [pc, #56]	; (d7290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7256:	681a      	ldr	r2, [r3, #0]
   d7258:	07d2      	lsls	r2, r2, #31
   d725a:	bf5c      	itt	pl
   d725c:	2201      	movpl	r2, #1
   d725e:	601a      	strpl	r2, [r3, #0]
   d7260:	4770      	bx	lr
   d7262:	bf00      	nop
   d7264:	2003e774 	.word	0x2003e774
   d7268:	2003e770 	.word	0x2003e770
   d726c:	2003e76c 	.word	0x2003e76c
   d7270:	2003e768 	.word	0x2003e768
   d7274:	2003e764 	.word	0x2003e764
   d7278:	2003e760 	.word	0x2003e760
   d727c:	2003e75c 	.word	0x2003e75c
   d7280:	2003e758 	.word	0x2003e758
   d7284:	2003e754 	.word	0x2003e754
   d7288:	2003e750 	.word	0x2003e750
   d728c:	2003e74c 	.word	0x2003e74c
   d7290:	2003e748 	.word	0x2003e748

000d7294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7294:	4b24      	ldr	r3, [pc, #144]	; (d7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7296:	681a      	ldr	r2, [r3, #0]
   d7298:	07d0      	lsls	r0, r2, #31
   d729a:	bf5c      	itt	pl
   d729c:	2201      	movpl	r2, #1
   d729e:	601a      	strpl	r2, [r3, #0]
   d72a0:	4b22      	ldr	r3, [pc, #136]	; (d732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	07d1      	lsls	r1, r2, #31
   d72a6:	bf5c      	itt	pl
   d72a8:	2201      	movpl	r2, #1
   d72aa:	601a      	strpl	r2, [r3, #0]
   d72ac:	4b20      	ldr	r3, [pc, #128]	; (d7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d72ae:	681a      	ldr	r2, [r3, #0]
   d72b0:	07d2      	lsls	r2, r2, #31
   d72b2:	bf5c      	itt	pl
   d72b4:	2201      	movpl	r2, #1
   d72b6:	601a      	strpl	r2, [r3, #0]
   d72b8:	4b1e      	ldr	r3, [pc, #120]	; (d7334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d72ba:	681a      	ldr	r2, [r3, #0]
   d72bc:	07d0      	lsls	r0, r2, #31
   d72be:	bf5c      	itt	pl
   d72c0:	2201      	movpl	r2, #1
   d72c2:	601a      	strpl	r2, [r3, #0]
   d72c4:	4b1c      	ldr	r3, [pc, #112]	; (d7338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	07d1      	lsls	r1, r2, #31
   d72ca:	bf5c      	itt	pl
   d72cc:	2201      	movpl	r2, #1
   d72ce:	601a      	strpl	r2, [r3, #0]
   d72d0:	4b1a      	ldr	r3, [pc, #104]	; (d733c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	07d2      	lsls	r2, r2, #31
   d72d6:	bf5c      	itt	pl
   d72d8:	2201      	movpl	r2, #1
   d72da:	601a      	strpl	r2, [r3, #0]
   d72dc:	4b18      	ldr	r3, [pc, #96]	; (d7340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d72de:	681a      	ldr	r2, [r3, #0]
   d72e0:	07d0      	lsls	r0, r2, #31
   d72e2:	bf5c      	itt	pl
   d72e4:	2201      	movpl	r2, #1
   d72e6:	601a      	strpl	r2, [r3, #0]
   d72e8:	4b16      	ldr	r3, [pc, #88]	; (d7344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d72ea:	681a      	ldr	r2, [r3, #0]
   d72ec:	07d1      	lsls	r1, r2, #31
   d72ee:	bf5c      	itt	pl
   d72f0:	2201      	movpl	r2, #1
   d72f2:	601a      	strpl	r2, [r3, #0]
   d72f4:	4b14      	ldr	r3, [pc, #80]	; (d7348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d72f6:	681a      	ldr	r2, [r3, #0]
   d72f8:	07d2      	lsls	r2, r2, #31
   d72fa:	bf5c      	itt	pl
   d72fc:	2201      	movpl	r2, #1
   d72fe:	601a      	strpl	r2, [r3, #0]
   d7300:	4b12      	ldr	r3, [pc, #72]	; (d734c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7302:	681a      	ldr	r2, [r3, #0]
   d7304:	07d0      	lsls	r0, r2, #31
   d7306:	bf5c      	itt	pl
   d7308:	2201      	movpl	r2, #1
   d730a:	601a      	strpl	r2, [r3, #0]
   d730c:	4b10      	ldr	r3, [pc, #64]	; (d7350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d730e:	681a      	ldr	r2, [r3, #0]
   d7310:	07d1      	lsls	r1, r2, #31
   d7312:	bf5c      	itt	pl
   d7314:	2201      	movpl	r2, #1
   d7316:	601a      	strpl	r2, [r3, #0]
   d7318:	4b0e      	ldr	r3, [pc, #56]	; (d7354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d731a:	681a      	ldr	r2, [r3, #0]
   d731c:	07d2      	lsls	r2, r2, #31
   d731e:	bf5c      	itt	pl
   d7320:	2201      	movpl	r2, #1
   d7322:	601a      	strpl	r2, [r3, #0]
   d7324:	4770      	bx	lr
   d7326:	bf00      	nop
   d7328:	2003e7a4 	.word	0x2003e7a4
   d732c:	2003e7a0 	.word	0x2003e7a0
   d7330:	2003e79c 	.word	0x2003e79c
   d7334:	2003e798 	.word	0x2003e798
   d7338:	2003e794 	.word	0x2003e794
   d733c:	2003e790 	.word	0x2003e790
   d7340:	2003e78c 	.word	0x2003e78c
   d7344:	2003e788 	.word	0x2003e788
   d7348:	2003e784 	.word	0x2003e784
   d734c:	2003e780 	.word	0x2003e780
   d7350:	2003e77c 	.word	0x2003e77c
   d7354:	2003e778 	.word	0x2003e778

000d7358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7358:	4b18      	ldr	r3, [pc, #96]	; (d73bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d735a:	681a      	ldr	r2, [r3, #0]
   d735c:	07d1      	lsls	r1, r2, #31
   d735e:	bf5c      	itt	pl
   d7360:	2201      	movpl	r2, #1
   d7362:	601a      	strpl	r2, [r3, #0]
   d7364:	4b16      	ldr	r3, [pc, #88]	; (d73c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7366:	681a      	ldr	r2, [r3, #0]
   d7368:	07d2      	lsls	r2, r2, #31
   d736a:	bf5c      	itt	pl
   d736c:	2201      	movpl	r2, #1
   d736e:	601a      	strpl	r2, [r3, #0]
   d7370:	4b14      	ldr	r3, [pc, #80]	; (d73c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7372:	681a      	ldr	r2, [r3, #0]
   d7374:	07d0      	lsls	r0, r2, #31
   d7376:	bf5c      	itt	pl
   d7378:	2201      	movpl	r2, #1
   d737a:	601a      	strpl	r2, [r3, #0]
   d737c:	4b12      	ldr	r3, [pc, #72]	; (d73c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d737e:	681a      	ldr	r2, [r3, #0]
   d7380:	07d1      	lsls	r1, r2, #31
   d7382:	bf5c      	itt	pl
   d7384:	2201      	movpl	r2, #1
   d7386:	601a      	strpl	r2, [r3, #0]
   d7388:	4b10      	ldr	r3, [pc, #64]	; (d73cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d738a:	681a      	ldr	r2, [r3, #0]
   d738c:	07d2      	lsls	r2, r2, #31
   d738e:	bf5c      	itt	pl
   d7390:	2201      	movpl	r2, #1
   d7392:	601a      	strpl	r2, [r3, #0]
   d7394:	4b0e      	ldr	r3, [pc, #56]	; (d73d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7396:	681a      	ldr	r2, [r3, #0]
   d7398:	07d0      	lsls	r0, r2, #31
   d739a:	bf5c      	itt	pl
   d739c:	2201      	movpl	r2, #1
   d739e:	601a      	strpl	r2, [r3, #0]
   d73a0:	4b0c      	ldr	r3, [pc, #48]	; (d73d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73a2:	681a      	ldr	r2, [r3, #0]
   d73a4:	07d1      	lsls	r1, r2, #31
   d73a6:	bf5c      	itt	pl
   d73a8:	2201      	movpl	r2, #1
   d73aa:	601a      	strpl	r2, [r3, #0]
   d73ac:	4b0a      	ldr	r3, [pc, #40]	; (d73d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73ae:	681a      	ldr	r2, [r3, #0]
   d73b0:	07d2      	lsls	r2, r2, #31
   d73b2:	bf5c      	itt	pl
   d73b4:	2201      	movpl	r2, #1
   d73b6:	601a      	strpl	r2, [r3, #0]
   d73b8:	4770      	bx	lr
   d73ba:	bf00      	nop
   d73bc:	2003e7c4 	.word	0x2003e7c4
   d73c0:	2003e7c0 	.word	0x2003e7c0
   d73c4:	2003e7bc 	.word	0x2003e7bc
   d73c8:	2003e7b8 	.word	0x2003e7b8
   d73cc:	2003e7b4 	.word	0x2003e7b4
   d73d0:	2003e7b0 	.word	0x2003e7b0
   d73d4:	2003e7ac 	.word	0x2003e7ac
   d73d8:	2003e7a8 	.word	0x2003e7a8

000d73dc <asctime>:
   d73dc:	4b09      	ldr	r3, [pc, #36]	; (d7404 <asctime+0x28>)
   d73de:	b570      	push	{r4, r5, r6, lr}
   d73e0:	681c      	ldr	r4, [r3, #0]
   d73e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d73e4:	4606      	mov	r6, r0
   d73e6:	b93d      	cbnz	r5, d73f8 <asctime+0x1c>
   d73e8:	201a      	movs	r0, #26
   d73ea:	f7fe f885 	bl	d54f8 <malloc>
   d73ee:	221a      	movs	r2, #26
   d73f0:	6420      	str	r0, [r4, #64]	; 0x40
   d73f2:	4629      	mov	r1, r5
   d73f4:	f000 f972 	bl	d76dc <memset>
   d73f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d73fa:	4630      	mov	r0, r6
   d73fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7400:	f000 b802 	b.w	d7408 <asctime_r>
   d7404:	2003e19c 	.word	0x2003e19c

000d7408 <asctime_r>:
   d7408:	b510      	push	{r4, lr}
   d740a:	460c      	mov	r4, r1
   d740c:	6941      	ldr	r1, [r0, #20]
   d740e:	6903      	ldr	r3, [r0, #16]
   d7410:	6982      	ldr	r2, [r0, #24]
   d7412:	b086      	sub	sp, #24
   d7414:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7418:	9104      	str	r1, [sp, #16]
   d741a:	6801      	ldr	r1, [r0, #0]
   d741c:	9103      	str	r1, [sp, #12]
   d741e:	6841      	ldr	r1, [r0, #4]
   d7420:	9102      	str	r1, [sp, #8]
   d7422:	6881      	ldr	r1, [r0, #8]
   d7424:	9101      	str	r1, [sp, #4]
   d7426:	68c1      	ldr	r1, [r0, #12]
   d7428:	9100      	str	r1, [sp, #0]
   d742a:	4907      	ldr	r1, [pc, #28]	; (d7448 <asctime_r+0x40>)
   d742c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7430:	440b      	add	r3, r1
   d7432:	4906      	ldr	r1, [pc, #24]	; (d744c <asctime_r+0x44>)
   d7434:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7438:	440a      	add	r2, r1
   d743a:	4620      	mov	r0, r4
   d743c:	4904      	ldr	r1, [pc, #16]	; (d7450 <asctime_r+0x48>)
   d743e:	f7fe f873 	bl	d5528 <siprintf>
   d7442:	4620      	mov	r0, r4
   d7444:	b006      	add	sp, #24
   d7446:	bd10      	pop	{r4, pc}
   d7448:	000d87a6 	.word	0x000d87a6
   d744c:	000d8791 	.word	0x000d8791
   d7450:	000d87ca 	.word	0x000d87ca

000d7454 <atoi>:
   d7454:	220a      	movs	r2, #10
   d7456:	2100      	movs	r1, #0
   d7458:	f000 ba78 	b.w	d794c <strtol>

000d745c <__cxa_atexit>:
   d745c:	b510      	push	{r4, lr}
   d745e:	4c05      	ldr	r4, [pc, #20]	; (d7474 <__cxa_atexit+0x18>)
   d7460:	4613      	mov	r3, r2
   d7462:	b12c      	cbz	r4, d7470 <__cxa_atexit+0x14>
   d7464:	460a      	mov	r2, r1
   d7466:	4601      	mov	r1, r0
   d7468:	2002      	movs	r0, #2
   d746a:	f3af 8000 	nop.w
   d746e:	bd10      	pop	{r4, pc}
   d7470:	4620      	mov	r0, r4
   d7472:	bd10      	pop	{r4, pc}
   d7474:	00000000 	.word	0x00000000

000d7478 <localtime>:
   d7478:	b538      	push	{r3, r4, r5, lr}
   d747a:	4b07      	ldr	r3, [pc, #28]	; (d7498 <localtime+0x20>)
   d747c:	681c      	ldr	r4, [r3, #0]
   d747e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7480:	4605      	mov	r5, r0
   d7482:	b91b      	cbnz	r3, d748c <localtime+0x14>
   d7484:	2024      	movs	r0, #36	; 0x24
   d7486:	f7fe f837 	bl	d54f8 <malloc>
   d748a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d748c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d748e:	4628      	mov	r0, r5
   d7490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7494:	f000 b802 	b.w	d749c <localtime_r>
   d7498:	2003e19c 	.word	0x2003e19c

000d749c <localtime_r>:
   d749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74a0:	460c      	mov	r4, r1
   d74a2:	4680      	mov	r8, r0
   d74a4:	f000 fd58 	bl	d7f58 <__gettzinfo>
   d74a8:	4621      	mov	r1, r4
   d74aa:	4607      	mov	r7, r0
   d74ac:	4640      	mov	r0, r8
   d74ae:	f000 fd57 	bl	d7f60 <gmtime_r>
   d74b2:	6946      	ldr	r6, [r0, #20]
   d74b4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d74b8:	07b3      	lsls	r3, r6, #30
   d74ba:	4604      	mov	r4, r0
   d74bc:	d105      	bne.n	d74ca <localtime_r+0x2e>
   d74be:	2264      	movs	r2, #100	; 0x64
   d74c0:	fb96 f3f2 	sdiv	r3, r6, r2
   d74c4:	fb02 6313 	mls	r3, r2, r3, r6
   d74c8:	b94b      	cbnz	r3, d74de <localtime_r+0x42>
   d74ca:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d74ce:	fb96 f3f5 	sdiv	r3, r6, r5
   d74d2:	fb05 6513 	mls	r5, r5, r3, r6
   d74d6:	fab5 f385 	clz	r3, r5
   d74da:	095b      	lsrs	r3, r3, #5
   d74dc:	e000      	b.n	d74e0 <localtime_r+0x44>
   d74de:	2301      	movs	r3, #1
   d74e0:	4a5f      	ldr	r2, [pc, #380]	; (d7660 <localtime_r+0x1c4>)
   d74e2:	2530      	movs	r5, #48	; 0x30
   d74e4:	fb05 2503 	mla	r5, r5, r3, r2
   d74e8:	f000 fb6a 	bl	d7bc0 <__tz_lock>
   d74ec:	f000 fb6a 	bl	d7bc4 <_tzset_unlocked>
   d74f0:	4b5c      	ldr	r3, [pc, #368]	; (d7664 <localtime_r+0x1c8>)
   d74f2:	681b      	ldr	r3, [r3, #0]
   d74f4:	b1f3      	cbz	r3, d7534 <localtime_r+0x98>
   d74f6:	687b      	ldr	r3, [r7, #4]
   d74f8:	429e      	cmp	r6, r3
   d74fa:	d105      	bne.n	d7508 <localtime_r+0x6c>
   d74fc:	6839      	ldr	r1, [r7, #0]
   d74fe:	f8d8 3000 	ldr.w	r3, [r8]
   d7502:	69fa      	ldr	r2, [r7, #28]
   d7504:	b941      	cbnz	r1, d7518 <localtime_r+0x7c>
   d7506:	e00a      	b.n	d751e <localtime_r+0x82>
   d7508:	4630      	mov	r0, r6
   d750a:	f000 fab1 	bl	d7a70 <__tzcalc_limits>
   d750e:	2800      	cmp	r0, #0
   d7510:	d1f4      	bne.n	d74fc <localtime_r+0x60>
   d7512:	f04f 33ff 	mov.w	r3, #4294967295
   d7516:	e00d      	b.n	d7534 <localtime_r+0x98>
   d7518:	4293      	cmp	r3, r2
   d751a:	db08      	blt.n	d752e <localtime_r+0x92>
   d751c:	e001      	b.n	d7522 <localtime_r+0x86>
   d751e:	4293      	cmp	r3, r2
   d7520:	da07      	bge.n	d7532 <localtime_r+0x96>
   d7522:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7524:	4293      	cmp	r3, r2
   d7526:	bfac      	ite	ge
   d7528:	2300      	movge	r3, #0
   d752a:	2301      	movlt	r3, #1
   d752c:	e002      	b.n	d7534 <localtime_r+0x98>
   d752e:	2300      	movs	r3, #0
   d7530:	e000      	b.n	d7534 <localtime_r+0x98>
   d7532:	2301      	movs	r3, #1
   d7534:	6223      	str	r3, [r4, #32]
   d7536:	6a23      	ldr	r3, [r4, #32]
   d7538:	2b01      	cmp	r3, #1
   d753a:	bf0c      	ite	eq
   d753c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d753e:	6a39      	ldrne	r1, [r7, #32]
   d7540:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7544:	203c      	movs	r0, #60	; 0x3c
   d7546:	fb91 f6f3 	sdiv	r6, r1, r3
   d754a:	fb03 1316 	mls	r3, r3, r6, r1
   d754e:	6861      	ldr	r1, [r4, #4]
   d7550:	fb93 f2f0 	sdiv	r2, r3, r0
   d7554:	fb00 3012 	mls	r0, r0, r2, r3
   d7558:	6823      	ldr	r3, [r4, #0]
   d755a:	1a89      	subs	r1, r1, r2
   d755c:	68a2      	ldr	r2, [r4, #8]
   d755e:	6061      	str	r1, [r4, #4]
   d7560:	1a1b      	subs	r3, r3, r0
   d7562:	1b92      	subs	r2, r2, r6
   d7564:	2b3b      	cmp	r3, #59	; 0x3b
   d7566:	6023      	str	r3, [r4, #0]
   d7568:	60a2      	str	r2, [r4, #8]
   d756a:	dd03      	ble.n	d7574 <localtime_r+0xd8>
   d756c:	3101      	adds	r1, #1
   d756e:	6061      	str	r1, [r4, #4]
   d7570:	3b3c      	subs	r3, #60	; 0x3c
   d7572:	e004      	b.n	d757e <localtime_r+0xe2>
   d7574:	2b00      	cmp	r3, #0
   d7576:	da03      	bge.n	d7580 <localtime_r+0xe4>
   d7578:	3901      	subs	r1, #1
   d757a:	6061      	str	r1, [r4, #4]
   d757c:	333c      	adds	r3, #60	; 0x3c
   d757e:	6023      	str	r3, [r4, #0]
   d7580:	6863      	ldr	r3, [r4, #4]
   d7582:	2b3b      	cmp	r3, #59	; 0x3b
   d7584:	dd03      	ble.n	d758e <localtime_r+0xf2>
   d7586:	3201      	adds	r2, #1
   d7588:	60a2      	str	r2, [r4, #8]
   d758a:	3b3c      	subs	r3, #60	; 0x3c
   d758c:	e004      	b.n	d7598 <localtime_r+0xfc>
   d758e:	2b00      	cmp	r3, #0
   d7590:	da03      	bge.n	d759a <localtime_r+0xfe>
   d7592:	3a01      	subs	r2, #1
   d7594:	60a2      	str	r2, [r4, #8]
   d7596:	333c      	adds	r3, #60	; 0x3c
   d7598:	6063      	str	r3, [r4, #4]
   d759a:	68a3      	ldr	r3, [r4, #8]
   d759c:	2b17      	cmp	r3, #23
   d759e:	dd22      	ble.n	d75e6 <localtime_r+0x14a>
   d75a0:	69e2      	ldr	r2, [r4, #28]
   d75a2:	3201      	adds	r2, #1
   d75a4:	61e2      	str	r2, [r4, #28]
   d75a6:	69a2      	ldr	r2, [r4, #24]
   d75a8:	3201      	adds	r2, #1
   d75aa:	2a06      	cmp	r2, #6
   d75ac:	bfc8      	it	gt
   d75ae:	2200      	movgt	r2, #0
   d75b0:	61a2      	str	r2, [r4, #24]
   d75b2:	68e2      	ldr	r2, [r4, #12]
   d75b4:	3b18      	subs	r3, #24
   d75b6:	3201      	adds	r2, #1
   d75b8:	60a3      	str	r3, [r4, #8]
   d75ba:	6923      	ldr	r3, [r4, #16]
   d75bc:	60e2      	str	r2, [r4, #12]
   d75be:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d75c2:	428a      	cmp	r2, r1
   d75c4:	dd46      	ble.n	d7654 <localtime_r+0x1b8>
   d75c6:	3301      	adds	r3, #1
   d75c8:	2b0c      	cmp	r3, #12
   d75ca:	bf0c      	ite	eq
   d75cc:	6963      	ldreq	r3, [r4, #20]
   d75ce:	6123      	strne	r3, [r4, #16]
   d75d0:	eba2 0201 	sub.w	r2, r2, r1
   d75d4:	60e2      	str	r2, [r4, #12]
   d75d6:	bf01      	itttt	eq
   d75d8:	3301      	addeq	r3, #1
   d75da:	2200      	moveq	r2, #0
   d75dc:	6122      	streq	r2, [r4, #16]
   d75de:	6163      	streq	r3, [r4, #20]
   d75e0:	bf08      	it	eq
   d75e2:	61e2      	streq	r2, [r4, #28]
   d75e4:	e036      	b.n	d7654 <localtime_r+0x1b8>
   d75e6:	2b00      	cmp	r3, #0
   d75e8:	da34      	bge.n	d7654 <localtime_r+0x1b8>
   d75ea:	69e2      	ldr	r2, [r4, #28]
   d75ec:	3a01      	subs	r2, #1
   d75ee:	61e2      	str	r2, [r4, #28]
   d75f0:	69a2      	ldr	r2, [r4, #24]
   d75f2:	3a01      	subs	r2, #1
   d75f4:	bf48      	it	mi
   d75f6:	2206      	movmi	r2, #6
   d75f8:	61a2      	str	r2, [r4, #24]
   d75fa:	68e2      	ldr	r2, [r4, #12]
   d75fc:	3318      	adds	r3, #24
   d75fe:	3a01      	subs	r2, #1
   d7600:	60e2      	str	r2, [r4, #12]
   d7602:	60a3      	str	r3, [r4, #8]
   d7604:	bb32      	cbnz	r2, d7654 <localtime_r+0x1b8>
   d7606:	6923      	ldr	r3, [r4, #16]
   d7608:	3b01      	subs	r3, #1
   d760a:	d401      	bmi.n	d7610 <localtime_r+0x174>
   d760c:	6123      	str	r3, [r4, #16]
   d760e:	e01d      	b.n	d764c <localtime_r+0x1b0>
   d7610:	230b      	movs	r3, #11
   d7612:	6123      	str	r3, [r4, #16]
   d7614:	6963      	ldr	r3, [r4, #20]
   d7616:	1e5a      	subs	r2, r3, #1
   d7618:	f012 0f03 	tst.w	r2, #3
   d761c:	6162      	str	r2, [r4, #20]
   d761e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7622:	d105      	bne.n	d7630 <localtime_r+0x194>
   d7624:	2164      	movs	r1, #100	; 0x64
   d7626:	fb93 f2f1 	sdiv	r2, r3, r1
   d762a:	fb01 3212 	mls	r2, r1, r2, r3
   d762e:	b94a      	cbnz	r2, d7644 <localtime_r+0x1a8>
   d7630:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7634:	fb93 f2f1 	sdiv	r2, r3, r1
   d7638:	fb01 3312 	mls	r3, r1, r2, r3
   d763c:	fab3 f383 	clz	r3, r3
   d7640:	095b      	lsrs	r3, r3, #5
   d7642:	e000      	b.n	d7646 <localtime_r+0x1aa>
   d7644:	2301      	movs	r3, #1
   d7646:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d764a:	61e3      	str	r3, [r4, #28]
   d764c:	6923      	ldr	r3, [r4, #16]
   d764e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7652:	60e3      	str	r3, [r4, #12]
   d7654:	f000 fab5 	bl	d7bc2 <__tz_unlock>
   d7658:	4620      	mov	r0, r4
   d765a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d765e:	bf00      	nop
   d7660:	000d8950 	.word	0x000d8950
   d7664:	2003e7e4 	.word	0x2003e7e4

000d7668 <ldiv>:
   d7668:	2900      	cmp	r1, #0
   d766a:	b510      	push	{r4, lr}
   d766c:	fb91 f4f2 	sdiv	r4, r1, r2
   d7670:	fb02 1314 	mls	r3, r2, r4, r1
   d7674:	db04      	blt.n	d7680 <ldiv+0x18>
   d7676:	2b00      	cmp	r3, #0
   d7678:	da07      	bge.n	d768a <ldiv+0x22>
   d767a:	3401      	adds	r4, #1
   d767c:	1a9b      	subs	r3, r3, r2
   d767e:	e004      	b.n	d768a <ldiv+0x22>
   d7680:	2b00      	cmp	r3, #0
   d7682:	bfc4      	itt	gt
   d7684:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d7688:	189b      	addgt	r3, r3, r2
   d768a:	6004      	str	r4, [r0, #0]
   d768c:	6043      	str	r3, [r0, #4]
   d768e:	bd10      	pop	{r4, pc}

000d7690 <memcpy>:
   d7690:	b510      	push	{r4, lr}
   d7692:	1e43      	subs	r3, r0, #1
   d7694:	440a      	add	r2, r1
   d7696:	4291      	cmp	r1, r2
   d7698:	d004      	beq.n	d76a4 <memcpy+0x14>
   d769a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d769e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d76a2:	e7f8      	b.n	d7696 <memcpy+0x6>
   d76a4:	bd10      	pop	{r4, pc}

000d76a6 <memmove>:
   d76a6:	4288      	cmp	r0, r1
   d76a8:	b510      	push	{r4, lr}
   d76aa:	eb01 0302 	add.w	r3, r1, r2
   d76ae:	d801      	bhi.n	d76b4 <memmove+0xe>
   d76b0:	1e42      	subs	r2, r0, #1
   d76b2:	e00b      	b.n	d76cc <memmove+0x26>
   d76b4:	4298      	cmp	r0, r3
   d76b6:	d2fb      	bcs.n	d76b0 <memmove+0xa>
   d76b8:	1881      	adds	r1, r0, r2
   d76ba:	1ad2      	subs	r2, r2, r3
   d76bc:	42d3      	cmn	r3, r2
   d76be:	d004      	beq.n	d76ca <memmove+0x24>
   d76c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d76c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d76c8:	e7f8      	b.n	d76bc <memmove+0x16>
   d76ca:	bd10      	pop	{r4, pc}
   d76cc:	4299      	cmp	r1, r3
   d76ce:	d004      	beq.n	d76da <memmove+0x34>
   d76d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d76d4:	f802 4f01 	strb.w	r4, [r2, #1]!
   d76d8:	e7f8      	b.n	d76cc <memmove+0x26>
   d76da:	bd10      	pop	{r4, pc}

000d76dc <memset>:
   d76dc:	4402      	add	r2, r0
   d76de:	4603      	mov	r3, r0
   d76e0:	4293      	cmp	r3, r2
   d76e2:	d002      	beq.n	d76ea <memset+0xe>
   d76e4:	f803 1b01 	strb.w	r1, [r3], #1
   d76e8:	e7fa      	b.n	d76e0 <memset+0x4>
   d76ea:	4770      	bx	lr

000d76ec <srand>:
   d76ec:	b538      	push	{r3, r4, r5, lr}
   d76ee:	4b12      	ldr	r3, [pc, #72]	; (d7738 <srand+0x4c>)
   d76f0:	681c      	ldr	r4, [r3, #0]
   d76f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d76f4:	4605      	mov	r5, r0
   d76f6:	b9d3      	cbnz	r3, d772e <srand+0x42>
   d76f8:	2018      	movs	r0, #24
   d76fa:	f7fd fefd 	bl	d54f8 <malloc>
   d76fe:	f243 330e 	movw	r3, #13070	; 0x330e
   d7702:	63a0      	str	r0, [r4, #56]	; 0x38
   d7704:	8003      	strh	r3, [r0, #0]
   d7706:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d770a:	8043      	strh	r3, [r0, #2]
   d770c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7710:	8083      	strh	r3, [r0, #4]
   d7712:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7716:	80c3      	strh	r3, [r0, #6]
   d7718:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d771c:	8103      	strh	r3, [r0, #8]
   d771e:	2305      	movs	r3, #5
   d7720:	8143      	strh	r3, [r0, #10]
   d7722:	230b      	movs	r3, #11
   d7724:	8183      	strh	r3, [r0, #12]
   d7726:	2201      	movs	r2, #1
   d7728:	2300      	movs	r3, #0
   d772a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d772e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7730:	2200      	movs	r2, #0
   d7732:	611d      	str	r5, [r3, #16]
   d7734:	615a      	str	r2, [r3, #20]
   d7736:	bd38      	pop	{r3, r4, r5, pc}
   d7738:	2003e19c 	.word	0x2003e19c

000d773c <strcmp>:
   d773c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7740:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7744:	2a01      	cmp	r2, #1
   d7746:	bf28      	it	cs
   d7748:	429a      	cmpcs	r2, r3
   d774a:	d0f7      	beq.n	d773c <strcmp>
   d774c:	1ad0      	subs	r0, r2, r3
   d774e:	4770      	bx	lr

000d7750 <strcpy>:
   d7750:	4603      	mov	r3, r0
   d7752:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7756:	f803 2b01 	strb.w	r2, [r3], #1
   d775a:	2a00      	cmp	r2, #0
   d775c:	d1f9      	bne.n	d7752 <strcpy+0x2>
   d775e:	4770      	bx	lr

000d7760 <strdup>:
   d7760:	4b02      	ldr	r3, [pc, #8]	; (d776c <strdup+0xc>)
   d7762:	4601      	mov	r1, r0
   d7764:	6818      	ldr	r0, [r3, #0]
   d7766:	f000 b803 	b.w	d7770 <_strdup_r>
   d776a:	bf00      	nop
   d776c:	2003e19c 	.word	0x2003e19c

000d7770 <_strdup_r>:
   d7770:	b570      	push	{r4, r5, r6, lr}
   d7772:	4606      	mov	r6, r0
   d7774:	4608      	mov	r0, r1
   d7776:	460c      	mov	r4, r1
   d7778:	f000 f80d 	bl	d7796 <strlen>
   d777c:	1c45      	adds	r5, r0, #1
   d777e:	4629      	mov	r1, r5
   d7780:	4630      	mov	r0, r6
   d7782:	f7fd fef1 	bl	d5568 <_malloc_r>
   d7786:	4606      	mov	r6, r0
   d7788:	b118      	cbz	r0, d7792 <_strdup_r+0x22>
   d778a:	462a      	mov	r2, r5
   d778c:	4621      	mov	r1, r4
   d778e:	f7ff ff7f 	bl	d7690 <memcpy>
   d7792:	4630      	mov	r0, r6
   d7794:	bd70      	pop	{r4, r5, r6, pc}

000d7796 <strlen>:
   d7796:	4603      	mov	r3, r0
   d7798:	f813 2b01 	ldrb.w	r2, [r3], #1
   d779c:	2a00      	cmp	r2, #0
   d779e:	d1fb      	bne.n	d7798 <strlen+0x2>
   d77a0:	1a18      	subs	r0, r3, r0
   d77a2:	3801      	subs	r0, #1
   d77a4:	4770      	bx	lr
	...

000d77a8 <strncasecmp>:
   d77a8:	4b10      	ldr	r3, [pc, #64]	; (d77ec <strncasecmp+0x44>)
   d77aa:	b570      	push	{r4, r5, r6, lr}
   d77ac:	681e      	ldr	r6, [r3, #0]
   d77ae:	440a      	add	r2, r1
   d77b0:	4291      	cmp	r1, r2
   d77b2:	d017      	beq.n	d77e4 <strncasecmp+0x3c>
   d77b4:	f810 3b01 	ldrb.w	r3, [r0], #1
   d77b8:	18f4      	adds	r4, r6, r3
   d77ba:	7864      	ldrb	r4, [r4, #1]
   d77bc:	f004 0403 	and.w	r4, r4, #3
   d77c0:	2c01      	cmp	r4, #1
   d77c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77c6:	eb06 0504 	add.w	r5, r6, r4
   d77ca:	bf08      	it	eq
   d77cc:	3320      	addeq	r3, #32
   d77ce:	786d      	ldrb	r5, [r5, #1]
   d77d0:	f005 0503 	and.w	r5, r5, #3
   d77d4:	2d01      	cmp	r5, #1
   d77d6:	bf08      	it	eq
   d77d8:	3420      	addeq	r4, #32
   d77da:	1b1b      	subs	r3, r3, r4
   d77dc:	d103      	bne.n	d77e6 <strncasecmp+0x3e>
   d77de:	2c00      	cmp	r4, #0
   d77e0:	d1e6      	bne.n	d77b0 <strncasecmp+0x8>
   d77e2:	e000      	b.n	d77e6 <strncasecmp+0x3e>
   d77e4:	2300      	movs	r3, #0
   d77e6:	4618      	mov	r0, r3
   d77e8:	bd70      	pop	{r4, r5, r6, pc}
   d77ea:	bf00      	nop
   d77ec:	2003e138 	.word	0x2003e138

000d77f0 <strncmp>:
   d77f0:	b530      	push	{r4, r5, lr}
   d77f2:	b182      	cbz	r2, d7816 <strncmp+0x26>
   d77f4:	1e45      	subs	r5, r0, #1
   d77f6:	3901      	subs	r1, #1
   d77f8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d77fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7800:	42a3      	cmp	r3, r4
   d7802:	d106      	bne.n	d7812 <strncmp+0x22>
   d7804:	43ec      	mvns	r4, r5
   d7806:	4414      	add	r4, r2
   d7808:	42e0      	cmn	r0, r4
   d780a:	d001      	beq.n	d7810 <strncmp+0x20>
   d780c:	2b00      	cmp	r3, #0
   d780e:	d1f3      	bne.n	d77f8 <strncmp+0x8>
   d7810:	461c      	mov	r4, r3
   d7812:	1b18      	subs	r0, r3, r4
   d7814:	bd30      	pop	{r4, r5, pc}
   d7816:	4610      	mov	r0, r2
   d7818:	bd30      	pop	{r4, r5, pc}

000d781a <strncpy>:
   d781a:	b510      	push	{r4, lr}
   d781c:	4603      	mov	r3, r0
   d781e:	b142      	cbz	r2, d7832 <strncpy+0x18>
   d7820:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7824:	f803 4b01 	strb.w	r4, [r3], #1
   d7828:	3a01      	subs	r2, #1
   d782a:	2c00      	cmp	r4, #0
   d782c:	d1f7      	bne.n	d781e <strncpy+0x4>
   d782e:	441a      	add	r2, r3
   d7830:	e000      	b.n	d7834 <strncpy+0x1a>
   d7832:	bd10      	pop	{r4, pc}
   d7834:	4293      	cmp	r3, r2
   d7836:	d002      	beq.n	d783e <strncpy+0x24>
   d7838:	f803 4b01 	strb.w	r4, [r3], #1
   d783c:	e7fa      	b.n	d7834 <strncpy+0x1a>
   d783e:	bd10      	pop	{r4, pc}

000d7840 <_strtol_r>:
   d7840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7844:	4680      	mov	r8, r0
   d7846:	4840      	ldr	r0, [pc, #256]	; (d7948 <_strtol_r+0x108>)
   d7848:	f8d0 9000 	ldr.w	r9, [r0]
   d784c:	460f      	mov	r7, r1
   d784e:	463d      	mov	r5, r7
   d7850:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7854:	eb09 0004 	add.w	r0, r9, r4
   d7858:	7840      	ldrb	r0, [r0, #1]
   d785a:	f000 0008 	and.w	r0, r0, #8
   d785e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7862:	b108      	cbz	r0, d7868 <_strtol_r+0x28>
   d7864:	462f      	mov	r7, r5
   d7866:	e7f2      	b.n	d784e <_strtol_r+0xe>
   d7868:	2c2d      	cmp	r4, #45	; 0x2d
   d786a:	d103      	bne.n	d7874 <_strtol_r+0x34>
   d786c:	1cbd      	adds	r5, r7, #2
   d786e:	787c      	ldrb	r4, [r7, #1]
   d7870:	2601      	movs	r6, #1
   d7872:	e003      	b.n	d787c <_strtol_r+0x3c>
   d7874:	2c2b      	cmp	r4, #43	; 0x2b
   d7876:	bf04      	itt	eq
   d7878:	787c      	ldrbeq	r4, [r7, #1]
   d787a:	1cbd      	addeq	r5, r7, #2
   d787c:	b113      	cbz	r3, d7884 <_strtol_r+0x44>
   d787e:	2b10      	cmp	r3, #16
   d7880:	d10a      	bne.n	d7898 <_strtol_r+0x58>
   d7882:	e05b      	b.n	d793c <_strtol_r+0xfc>
   d7884:	2c30      	cmp	r4, #48	; 0x30
   d7886:	d157      	bne.n	d7938 <_strtol_r+0xf8>
   d7888:	7828      	ldrb	r0, [r5, #0]
   d788a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d788e:	2858      	cmp	r0, #88	; 0x58
   d7890:	d14d      	bne.n	d792e <_strtol_r+0xee>
   d7892:	786c      	ldrb	r4, [r5, #1]
   d7894:	2310      	movs	r3, #16
   d7896:	3502      	adds	r5, #2
   d7898:	2e00      	cmp	r6, #0
   d789a:	bf14      	ite	ne
   d789c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d78a0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d78a4:	2700      	movs	r7, #0
   d78a6:	fbbc faf3 	udiv	sl, ip, r3
   d78aa:	4638      	mov	r0, r7
   d78ac:	fb03 cc1a 	mls	ip, r3, sl, ip
   d78b0:	eb09 0e04 	add.w	lr, r9, r4
   d78b4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d78b8:	f01e 0f04 	tst.w	lr, #4
   d78bc:	d001      	beq.n	d78c2 <_strtol_r+0x82>
   d78be:	3c30      	subs	r4, #48	; 0x30
   d78c0:	e00b      	b.n	d78da <_strtol_r+0x9a>
   d78c2:	f01e 0e03 	ands.w	lr, lr, #3
   d78c6:	d01b      	beq.n	d7900 <_strtol_r+0xc0>
   d78c8:	f1be 0f01 	cmp.w	lr, #1
   d78cc:	bf0c      	ite	eq
   d78ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d78d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d78d6:	ebce 0404 	rsb	r4, lr, r4
   d78da:	42a3      	cmp	r3, r4
   d78dc:	dd10      	ble.n	d7900 <_strtol_r+0xc0>
   d78de:	f1b7 3fff 	cmp.w	r7, #4294967295
   d78e2:	d00a      	beq.n	d78fa <_strtol_r+0xba>
   d78e4:	4550      	cmp	r0, sl
   d78e6:	d806      	bhi.n	d78f6 <_strtol_r+0xb6>
   d78e8:	d101      	bne.n	d78ee <_strtol_r+0xae>
   d78ea:	4564      	cmp	r4, ip
   d78ec:	dc03      	bgt.n	d78f6 <_strtol_r+0xb6>
   d78ee:	fb03 4000 	mla	r0, r3, r0, r4
   d78f2:	2701      	movs	r7, #1
   d78f4:	e001      	b.n	d78fa <_strtol_r+0xba>
   d78f6:	f04f 37ff 	mov.w	r7, #4294967295
   d78fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   d78fe:	e7d7      	b.n	d78b0 <_strtol_r+0x70>
   d7900:	1c7b      	adds	r3, r7, #1
   d7902:	d10c      	bne.n	d791e <_strtol_r+0xde>
   d7904:	2e00      	cmp	r6, #0
   d7906:	f04f 0322 	mov.w	r3, #34	; 0x22
   d790a:	bf14      	ite	ne
   d790c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7910:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7914:	f8c8 3000 	str.w	r3, [r8]
   d7918:	b92a      	cbnz	r2, d7926 <_strtol_r+0xe6>
   d791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d791e:	b106      	cbz	r6, d7922 <_strtol_r+0xe2>
   d7920:	4240      	negs	r0, r0
   d7922:	b172      	cbz	r2, d7942 <_strtol_r+0x102>
   d7924:	b107      	cbz	r7, d7928 <_strtol_r+0xe8>
   d7926:	1e69      	subs	r1, r5, #1
   d7928:	6011      	str	r1, [r2, #0]
   d792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d792e:	2430      	movs	r4, #48	; 0x30
   d7930:	2b00      	cmp	r3, #0
   d7932:	d1b1      	bne.n	d7898 <_strtol_r+0x58>
   d7934:	2308      	movs	r3, #8
   d7936:	e7af      	b.n	d7898 <_strtol_r+0x58>
   d7938:	230a      	movs	r3, #10
   d793a:	e7ad      	b.n	d7898 <_strtol_r+0x58>
   d793c:	2c30      	cmp	r4, #48	; 0x30
   d793e:	d0a3      	beq.n	d7888 <_strtol_r+0x48>
   d7940:	e7aa      	b.n	d7898 <_strtol_r+0x58>
   d7942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7946:	bf00      	nop
   d7948:	2003e138 	.word	0x2003e138

000d794c <strtol>:
   d794c:	4613      	mov	r3, r2
   d794e:	460a      	mov	r2, r1
   d7950:	4601      	mov	r1, r0
   d7952:	4802      	ldr	r0, [pc, #8]	; (d795c <strtol+0x10>)
   d7954:	6800      	ldr	r0, [r0, #0]
   d7956:	f7ff bf73 	b.w	d7840 <_strtol_r>
   d795a:	bf00      	nop
   d795c:	2003e19c 	.word	0x2003e19c

000d7960 <_strtoul_r>:
   d7960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7964:	4680      	mov	r8, r0
   d7966:	483c      	ldr	r0, [pc, #240]	; (d7a58 <_strtoul_r+0xf8>)
   d7968:	f8d0 9000 	ldr.w	r9, [r0]
   d796c:	460e      	mov	r6, r1
   d796e:	4635      	mov	r5, r6
   d7970:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7974:	eb09 0004 	add.w	r0, r9, r4
   d7978:	7840      	ldrb	r0, [r0, #1]
   d797a:	f000 0008 	and.w	r0, r0, #8
   d797e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7982:	b108      	cbz	r0, d7988 <_strtoul_r+0x28>
   d7984:	462e      	mov	r6, r5
   d7986:	e7f2      	b.n	d796e <_strtoul_r+0xe>
   d7988:	2c2d      	cmp	r4, #45	; 0x2d
   d798a:	d103      	bne.n	d7994 <_strtoul_r+0x34>
   d798c:	1cb5      	adds	r5, r6, #2
   d798e:	7874      	ldrb	r4, [r6, #1]
   d7990:	2701      	movs	r7, #1
   d7992:	e003      	b.n	d799c <_strtoul_r+0x3c>
   d7994:	2c2b      	cmp	r4, #43	; 0x2b
   d7996:	bf04      	itt	eq
   d7998:	7874      	ldrbeq	r4, [r6, #1]
   d799a:	1cb5      	addeq	r5, r6, #2
   d799c:	b113      	cbz	r3, d79a4 <_strtoul_r+0x44>
   d799e:	2b10      	cmp	r3, #16
   d79a0:	d10a      	bne.n	d79b8 <_strtoul_r+0x58>
   d79a2:	e053      	b.n	d7a4c <_strtoul_r+0xec>
   d79a4:	2c30      	cmp	r4, #48	; 0x30
   d79a6:	d14f      	bne.n	d7a48 <_strtoul_r+0xe8>
   d79a8:	7828      	ldrb	r0, [r5, #0]
   d79aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d79ae:	2858      	cmp	r0, #88	; 0x58
   d79b0:	d145      	bne.n	d7a3e <_strtoul_r+0xde>
   d79b2:	786c      	ldrb	r4, [r5, #1]
   d79b4:	2310      	movs	r3, #16
   d79b6:	3502      	adds	r5, #2
   d79b8:	f04f 3cff 	mov.w	ip, #4294967295
   d79bc:	2600      	movs	r6, #0
   d79be:	fbbc fcf3 	udiv	ip, ip, r3
   d79c2:	fb03 fa0c 	mul.w	sl, r3, ip
   d79c6:	ea6f 0a0a 	mvn.w	sl, sl
   d79ca:	4630      	mov	r0, r6
   d79cc:	eb09 0e04 	add.w	lr, r9, r4
   d79d0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d79d4:	f01e 0f04 	tst.w	lr, #4
   d79d8:	d001      	beq.n	d79de <_strtoul_r+0x7e>
   d79da:	3c30      	subs	r4, #48	; 0x30
   d79dc:	e00b      	b.n	d79f6 <_strtoul_r+0x96>
   d79de:	f01e 0e03 	ands.w	lr, lr, #3
   d79e2:	d01a      	beq.n	d7a1a <_strtoul_r+0xba>
   d79e4:	f1be 0f01 	cmp.w	lr, #1
   d79e8:	bf0c      	ite	eq
   d79ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d79ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d79f2:	ebce 0404 	rsb	r4, lr, r4
   d79f6:	42a3      	cmp	r3, r4
   d79f8:	dd0f      	ble.n	d7a1a <_strtoul_r+0xba>
   d79fa:	2e00      	cmp	r6, #0
   d79fc:	db08      	blt.n	d7a10 <_strtoul_r+0xb0>
   d79fe:	4560      	cmp	r0, ip
   d7a00:	d806      	bhi.n	d7a10 <_strtoul_r+0xb0>
   d7a02:	d101      	bne.n	d7a08 <_strtoul_r+0xa8>
   d7a04:	4554      	cmp	r4, sl
   d7a06:	dc03      	bgt.n	d7a10 <_strtoul_r+0xb0>
   d7a08:	fb03 4000 	mla	r0, r3, r0, r4
   d7a0c:	2601      	movs	r6, #1
   d7a0e:	e001      	b.n	d7a14 <_strtoul_r+0xb4>
   d7a10:	f04f 36ff 	mov.w	r6, #4294967295
   d7a14:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a18:	e7d8      	b.n	d79cc <_strtoul_r+0x6c>
   d7a1a:	2e00      	cmp	r6, #0
   d7a1c:	da07      	bge.n	d7a2e <_strtoul_r+0xce>
   d7a1e:	2322      	movs	r3, #34	; 0x22
   d7a20:	f8c8 3000 	str.w	r3, [r8]
   d7a24:	f04f 30ff 	mov.w	r0, #4294967295
   d7a28:	b92a      	cbnz	r2, d7a36 <_strtoul_r+0xd6>
   d7a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a2e:	b107      	cbz	r7, d7a32 <_strtoul_r+0xd2>
   d7a30:	4240      	negs	r0, r0
   d7a32:	b172      	cbz	r2, d7a52 <_strtoul_r+0xf2>
   d7a34:	b106      	cbz	r6, d7a38 <_strtoul_r+0xd8>
   d7a36:	1e69      	subs	r1, r5, #1
   d7a38:	6011      	str	r1, [r2, #0]
   d7a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a3e:	2430      	movs	r4, #48	; 0x30
   d7a40:	2b00      	cmp	r3, #0
   d7a42:	d1b9      	bne.n	d79b8 <_strtoul_r+0x58>
   d7a44:	2308      	movs	r3, #8
   d7a46:	e7b7      	b.n	d79b8 <_strtoul_r+0x58>
   d7a48:	230a      	movs	r3, #10
   d7a4a:	e7b5      	b.n	d79b8 <_strtoul_r+0x58>
   d7a4c:	2c30      	cmp	r4, #48	; 0x30
   d7a4e:	d0ab      	beq.n	d79a8 <_strtoul_r+0x48>
   d7a50:	e7b2      	b.n	d79b8 <_strtoul_r+0x58>
   d7a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a56:	bf00      	nop
   d7a58:	2003e138 	.word	0x2003e138

000d7a5c <strtoul>:
   d7a5c:	4613      	mov	r3, r2
   d7a5e:	460a      	mov	r2, r1
   d7a60:	4601      	mov	r1, r0
   d7a62:	4802      	ldr	r0, [pc, #8]	; (d7a6c <strtoul+0x10>)
   d7a64:	6800      	ldr	r0, [r0, #0]
   d7a66:	f7ff bf7b 	b.w	d7960 <_strtoul_r>
   d7a6a:	bf00      	nop
   d7a6c:	2003e19c 	.word	0x2003e19c

000d7a70 <__tzcalc_limits>:
   d7a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a74:	4604      	mov	r4, r0
   d7a76:	f000 fa6f 	bl	d7f58 <__gettzinfo>
   d7a7a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7a7e:	429c      	cmp	r4, r3
   d7a80:	f340 8096 	ble.w	d7bb0 <__tzcalc_limits+0x140>
   d7a84:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7a88:	18e3      	adds	r3, r4, r3
   d7a8a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7a8e:	109b      	asrs	r3, r3, #2
   d7a90:	f240 156d 	movw	r5, #365	; 0x16d
   d7a94:	fb05 3502 	mla	r5, r5, r2, r3
   d7a98:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7a9c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7aa0:	fb92 f3f3 	sdiv	r3, r2, r3
   d7aa4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7aa8:	442b      	add	r3, r5
   d7aaa:	18a5      	adds	r5, r4, r2
   d7aac:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7ab0:	fb95 f5f2 	sdiv	r5, r5, r2
   d7ab4:	441d      	add	r5, r3
   d7ab6:	2364      	movs	r3, #100	; 0x64
   d7ab8:	fb94 f7f2 	sdiv	r7, r4, r2
   d7abc:	fb94 f6f3 	sdiv	r6, r4, r3
   d7ac0:	fb02 4717 	mls	r7, r2, r7, r4
   d7ac4:	fb03 4616 	mls	r6, r3, r6, r4
   d7ac8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7acc:	fab7 fe87 	clz	lr, r7
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	f004 0303 	and.w	r3, r4, #3
   d7ad6:	6044      	str	r4, [r0, #4]
   d7ad8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7adc:	4601      	mov	r1, r0
   d7ade:	9300      	str	r3, [sp, #0]
   d7ae0:	f04f 0c07 	mov.w	ip, #7
   d7ae4:	7a0b      	ldrb	r3, [r1, #8]
   d7ae6:	2b4a      	cmp	r3, #74	; 0x4a
   d7ae8:	d10e      	bne.n	d7b08 <__tzcalc_limits+0x98>
   d7aea:	694b      	ldr	r3, [r1, #20]
   d7aec:	9a00      	ldr	r2, [sp, #0]
   d7aee:	18ec      	adds	r4, r5, r3
   d7af0:	b902      	cbnz	r2, d7af4 <__tzcalc_limits+0x84>
   d7af2:	b906      	cbnz	r6, d7af6 <__tzcalc_limits+0x86>
   d7af4:	b927      	cbnz	r7, d7b00 <__tzcalc_limits+0x90>
   d7af6:	2b3b      	cmp	r3, #59	; 0x3b
   d7af8:	bfd4      	ite	le
   d7afa:	2300      	movle	r3, #0
   d7afc:	2301      	movgt	r3, #1
   d7afe:	e000      	b.n	d7b02 <__tzcalc_limits+0x92>
   d7b00:	2300      	movs	r3, #0
   d7b02:	4423      	add	r3, r4
   d7b04:	3b01      	subs	r3, #1
   d7b06:	e03f      	b.n	d7b88 <__tzcalc_limits+0x118>
   d7b08:	2b44      	cmp	r3, #68	; 0x44
   d7b0a:	d102      	bne.n	d7b12 <__tzcalc_limits+0xa2>
   d7b0c:	694b      	ldr	r3, [r1, #20]
   d7b0e:	442b      	add	r3, r5
   d7b10:	e03a      	b.n	d7b88 <__tzcalc_limits+0x118>
   d7b12:	9b00      	ldr	r3, [sp, #0]
   d7b14:	b92b      	cbnz	r3, d7b22 <__tzcalc_limits+0xb2>
   d7b16:	2e00      	cmp	r6, #0
   d7b18:	bf0c      	ite	eq
   d7b1a:	46f0      	moveq	r8, lr
   d7b1c:	f04f 0801 	movne.w	r8, #1
   d7b20:	e000      	b.n	d7b24 <__tzcalc_limits+0xb4>
   d7b22:	46f0      	mov	r8, lr
   d7b24:	4b24      	ldr	r3, [pc, #144]	; (d7bb8 <__tzcalc_limits+0x148>)
   d7b26:	68cc      	ldr	r4, [r1, #12]
   d7b28:	2230      	movs	r2, #48	; 0x30
   d7b2a:	fb02 3808 	mla	r8, r2, r8, r3
   d7b2e:	f1a8 0a04 	sub.w	sl, r8, #4
   d7b32:	46a9      	mov	r9, r5
   d7b34:	2301      	movs	r3, #1
   d7b36:	42a3      	cmp	r3, r4
   d7b38:	da04      	bge.n	d7b44 <__tzcalc_limits+0xd4>
   d7b3a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7b3e:	3301      	adds	r3, #1
   d7b40:	44d9      	add	r9, fp
   d7b42:	e7f8      	b.n	d7b36 <__tzcalc_limits+0xc6>
   d7b44:	f109 0304 	add.w	r3, r9, #4
   d7b48:	fb93 fbfc 	sdiv	fp, r3, ip
   d7b4c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7b50:	2c01      	cmp	r4, #1
   d7b52:	ebca 0a03 	rsb	sl, sl, r3
   d7b56:	694b      	ldr	r3, [r1, #20]
   d7b58:	bfb8      	it	lt
   d7b5a:	2401      	movlt	r4, #1
   d7b5c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7b60:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7b64:	690b      	ldr	r3, [r1, #16]
   d7b66:	f104 34ff 	add.w	r4, r4, #4294967295
   d7b6a:	f103 33ff 	add.w	r3, r3, #4294967295
   d7b6e:	bf48      	it	mi
   d7b70:	f10a 0a07 	addmi.w	sl, sl, #7
   d7b74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7b78:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7b7c:	4453      	add	r3, sl
   d7b7e:	42a3      	cmp	r3, r4
   d7b80:	db01      	blt.n	d7b86 <__tzcalc_limits+0x116>
   d7b82:	3b07      	subs	r3, #7
   d7b84:	e7fb      	b.n	d7b7e <__tzcalc_limits+0x10e>
   d7b86:	444b      	add	r3, r9
   d7b88:	698c      	ldr	r4, [r1, #24]
   d7b8a:	4a0c      	ldr	r2, [pc, #48]	; (d7bbc <__tzcalc_limits+0x14c>)
   d7b8c:	fb02 4303 	mla	r3, r2, r3, r4
   d7b90:	6a0c      	ldr	r4, [r1, #32]
   d7b92:	4423      	add	r3, r4
   d7b94:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7b98:	9b01      	ldr	r3, [sp, #4]
   d7b9a:	4299      	cmp	r1, r3
   d7b9c:	d1a2      	bne.n	d7ae4 <__tzcalc_limits+0x74>
   d7b9e:	69c3      	ldr	r3, [r0, #28]
   d7ba0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7ba2:	4293      	cmp	r3, r2
   d7ba4:	bfac      	ite	ge
   d7ba6:	2300      	movge	r3, #0
   d7ba8:	2301      	movlt	r3, #1
   d7baa:	6003      	str	r3, [r0, #0]
   d7bac:	2001      	movs	r0, #1
   d7bae:	e000      	b.n	d7bb2 <__tzcalc_limits+0x142>
   d7bb0:	2000      	movs	r0, #0
   d7bb2:	b003      	add	sp, #12
   d7bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7bb8:	000d8950 	.word	0x000d8950
   d7bbc:	00015180 	.word	0x00015180

000d7bc0 <__tz_lock>:
   d7bc0:	4770      	bx	lr

000d7bc2 <__tz_unlock>:
   d7bc2:	4770      	bx	lr

000d7bc4 <_tzset_unlocked>:
   d7bc4:	4b01      	ldr	r3, [pc, #4]	; (d7bcc <_tzset_unlocked+0x8>)
   d7bc6:	6818      	ldr	r0, [r3, #0]
   d7bc8:	f000 b802 	b.w	d7bd0 <_tzset_unlocked_r>
   d7bcc:	2003e19c 	.word	0x2003e19c

000d7bd0 <_tzset_unlocked_r>:
   d7bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bd4:	b08d      	sub	sp, #52	; 0x34
   d7bd6:	4607      	mov	r7, r0
   d7bd8:	f000 f9be 	bl	d7f58 <__gettzinfo>
   d7bdc:	49b0      	ldr	r1, [pc, #704]	; (d7ea0 <_tzset_unlocked_r+0x2d0>)
   d7bde:	4eb1      	ldr	r6, [pc, #708]	; (d7ea4 <_tzset_unlocked_r+0x2d4>)
   d7be0:	4604      	mov	r4, r0
   d7be2:	4638      	mov	r0, r7
   d7be4:	f000 f9b0 	bl	d7f48 <_getenv_r>
   d7be8:	4605      	mov	r5, r0
   d7bea:	b960      	cbnz	r0, d7c06 <_tzset_unlocked_r+0x36>
   d7bec:	4bae      	ldr	r3, [pc, #696]	; (d7ea8 <_tzset_unlocked_r+0x2d8>)
   d7bee:	4aaf      	ldr	r2, [pc, #700]	; (d7eac <_tzset_unlocked_r+0x2dc>)
   d7bf0:	6018      	str	r0, [r3, #0]
   d7bf2:	4baf      	ldr	r3, [pc, #700]	; (d7eb0 <_tzset_unlocked_r+0x2e0>)
   d7bf4:	6018      	str	r0, [r3, #0]
   d7bf6:	4baf      	ldr	r3, [pc, #700]	; (d7eb4 <_tzset_unlocked_r+0x2e4>)
   d7bf8:	6830      	ldr	r0, [r6, #0]
   d7bfa:	601a      	str	r2, [r3, #0]
   d7bfc:	605a      	str	r2, [r3, #4]
   d7bfe:	f7fd fc83 	bl	d5508 <free>
   d7c02:	6035      	str	r5, [r6, #0]
   d7c04:	e148      	b.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7c06:	6831      	ldr	r1, [r6, #0]
   d7c08:	b979      	cbnz	r1, d7c2a <_tzset_unlocked_r+0x5a>
   d7c0a:	6830      	ldr	r0, [r6, #0]
   d7c0c:	f7fd fc7c 	bl	d5508 <free>
   d7c10:	4628      	mov	r0, r5
   d7c12:	f7ff fdc0 	bl	d7796 <strlen>
   d7c16:	1c41      	adds	r1, r0, #1
   d7c18:	4638      	mov	r0, r7
   d7c1a:	f7fd fca5 	bl	d5568 <_malloc_r>
   d7c1e:	6030      	str	r0, [r6, #0]
   d7c20:	b148      	cbz	r0, d7c36 <_tzset_unlocked_r+0x66>
   d7c22:	4629      	mov	r1, r5
   d7c24:	f7ff fd94 	bl	d7750 <strcpy>
   d7c28:	e005      	b.n	d7c36 <_tzset_unlocked_r+0x66>
   d7c2a:	f7ff fd87 	bl	d773c <strcmp>
   d7c2e:	2800      	cmp	r0, #0
   d7c30:	f000 8132 	beq.w	d7e98 <_tzset_unlocked_r+0x2c8>
   d7c34:	e7e9      	b.n	d7c0a <_tzset_unlocked_r+0x3a>
   d7c36:	782b      	ldrb	r3, [r5, #0]
   d7c38:	4a9f      	ldr	r2, [pc, #636]	; (d7eb8 <_tzset_unlocked_r+0x2e8>)
   d7c3a:	49a0      	ldr	r1, [pc, #640]	; (d7ebc <_tzset_unlocked_r+0x2ec>)
   d7c3c:	2b3a      	cmp	r3, #58	; 0x3a
   d7c3e:	bf08      	it	eq
   d7c40:	3501      	addeq	r5, #1
   d7c42:	ae0a      	add	r6, sp, #40	; 0x28
   d7c44:	4633      	mov	r3, r6
   d7c46:	4628      	mov	r0, r5
   d7c48:	f7fd fc76 	bl	d5538 <siscanf>
   d7c4c:	2800      	cmp	r0, #0
   d7c4e:	f340 8123 	ble.w	d7e98 <_tzset_unlocked_r+0x2c8>
   d7c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c54:	18ef      	adds	r7, r5, r3
   d7c56:	5ceb      	ldrb	r3, [r5, r3]
   d7c58:	2b2d      	cmp	r3, #45	; 0x2d
   d7c5a:	d103      	bne.n	d7c64 <_tzset_unlocked_r+0x94>
   d7c5c:	3701      	adds	r7, #1
   d7c5e:	f04f 35ff 	mov.w	r5, #4294967295
   d7c62:	e003      	b.n	d7c6c <_tzset_unlocked_r+0x9c>
   d7c64:	2b2b      	cmp	r3, #43	; 0x2b
   d7c66:	bf08      	it	eq
   d7c68:	3701      	addeq	r7, #1
   d7c6a:	2501      	movs	r5, #1
   d7c6c:	f10d 0a20 	add.w	sl, sp, #32
   d7c70:	f10d 0b1e 	add.w	fp, sp, #30
   d7c74:	f04f 0800 	mov.w	r8, #0
   d7c78:	9603      	str	r6, [sp, #12]
   d7c7a:	f8cd a008 	str.w	sl, [sp, #8]
   d7c7e:	9601      	str	r6, [sp, #4]
   d7c80:	f8cd b000 	str.w	fp, [sp]
   d7c84:	4633      	mov	r3, r6
   d7c86:	aa07      	add	r2, sp, #28
   d7c88:	498d      	ldr	r1, [pc, #564]	; (d7ec0 <_tzset_unlocked_r+0x2f0>)
   d7c8a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7c8e:	4638      	mov	r0, r7
   d7c90:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7c94:	f7fd fc50 	bl	d5538 <siscanf>
   d7c98:	4540      	cmp	r0, r8
   d7c9a:	f340 80fd 	ble.w	d7e98 <_tzset_unlocked_r+0x2c8>
   d7c9e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7ca2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7ca6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7ecc <_tzset_unlocked_r+0x2fc>
   d7caa:	213c      	movs	r1, #60	; 0x3c
   d7cac:	fb01 3302 	mla	r3, r1, r2, r3
   d7cb0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7cb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7cb8:	fb01 3302 	mla	r3, r1, r2, r3
   d7cbc:	435d      	muls	r5, r3
   d7cbe:	6225      	str	r5, [r4, #32]
   d7cc0:	4d7c      	ldr	r5, [pc, #496]	; (d7eb4 <_tzset_unlocked_r+0x2e4>)
   d7cc2:	4b7d      	ldr	r3, [pc, #500]	; (d7eb8 <_tzset_unlocked_r+0x2e8>)
   d7cc4:	602b      	str	r3, [r5, #0]
   d7cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cc8:	497c      	ldr	r1, [pc, #496]	; (d7ebc <_tzset_unlocked_r+0x2ec>)
   d7cca:	441f      	add	r7, r3
   d7ccc:	464a      	mov	r2, r9
   d7cce:	4633      	mov	r3, r6
   d7cd0:	4638      	mov	r0, r7
   d7cd2:	f7fd fc31 	bl	d5538 <siscanf>
   d7cd6:	4540      	cmp	r0, r8
   d7cd8:	dc08      	bgt.n	d7cec <_tzset_unlocked_r+0x11c>
   d7cda:	682b      	ldr	r3, [r5, #0]
   d7cdc:	606b      	str	r3, [r5, #4]
   d7cde:	4b72      	ldr	r3, [pc, #456]	; (d7ea8 <_tzset_unlocked_r+0x2d8>)
   d7ce0:	6a22      	ldr	r2, [r4, #32]
   d7ce2:	601a      	str	r2, [r3, #0]
   d7ce4:	4b72      	ldr	r3, [pc, #456]	; (d7eb0 <_tzset_unlocked_r+0x2e0>)
   d7ce6:	f8c3 8000 	str.w	r8, [r3]
   d7cea:	e0d5      	b.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cee:	f8c5 9004 	str.w	r9, [r5, #4]
   d7cf2:	18fd      	adds	r5, r7, r3
   d7cf4:	5cfb      	ldrb	r3, [r7, r3]
   d7cf6:	2b2d      	cmp	r3, #45	; 0x2d
   d7cf8:	d103      	bne.n	d7d02 <_tzset_unlocked_r+0x132>
   d7cfa:	3501      	adds	r5, #1
   d7cfc:	f04f 37ff 	mov.w	r7, #4294967295
   d7d00:	e003      	b.n	d7d0a <_tzset_unlocked_r+0x13a>
   d7d02:	2b2b      	cmp	r3, #43	; 0x2b
   d7d04:	bf08      	it	eq
   d7d06:	3501      	addeq	r5, #1
   d7d08:	2701      	movs	r7, #1
   d7d0a:	2300      	movs	r3, #0
   d7d0c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7d10:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7d14:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7d18:	930a      	str	r3, [sp, #40]	; 0x28
   d7d1a:	9603      	str	r6, [sp, #12]
   d7d1c:	f8cd a008 	str.w	sl, [sp, #8]
   d7d20:	9601      	str	r6, [sp, #4]
   d7d22:	f8cd b000 	str.w	fp, [sp]
   d7d26:	4633      	mov	r3, r6
   d7d28:	aa07      	add	r2, sp, #28
   d7d2a:	4965      	ldr	r1, [pc, #404]	; (d7ec0 <_tzset_unlocked_r+0x2f0>)
   d7d2c:	4628      	mov	r0, r5
   d7d2e:	f7fd fc03 	bl	d5538 <siscanf>
   d7d32:	2800      	cmp	r0, #0
   d7d34:	dc04      	bgt.n	d7d40 <_tzset_unlocked_r+0x170>
   d7d36:	6a23      	ldr	r3, [r4, #32]
   d7d38:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7d3c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7d3e:	e00e      	b.n	d7d5e <_tzset_unlocked_r+0x18e>
   d7d40:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7d44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7d48:	213c      	movs	r1, #60	; 0x3c
   d7d4a:	fb01 3302 	mla	r3, r1, r2, r3
   d7d4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7d52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7d56:	fb01 3302 	mla	r3, r1, r2, r3
   d7d5a:	435f      	muls	r7, r3
   d7d5c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d60:	4627      	mov	r7, r4
   d7d62:	441d      	add	r5, r3
   d7d64:	f04f 0900 	mov.w	r9, #0
   d7d68:	782b      	ldrb	r3, [r5, #0]
   d7d6a:	2b2c      	cmp	r3, #44	; 0x2c
   d7d6c:	bf08      	it	eq
   d7d6e:	3501      	addeq	r5, #1
   d7d70:	f895 8000 	ldrb.w	r8, [r5]
   d7d74:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7d78:	d126      	bne.n	d7dc8 <_tzset_unlocked_r+0x1f8>
   d7d7a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7d7e:	9302      	str	r3, [sp, #8]
   d7d80:	ab09      	add	r3, sp, #36	; 0x24
   d7d82:	9300      	str	r3, [sp, #0]
   d7d84:	9603      	str	r6, [sp, #12]
   d7d86:	9601      	str	r6, [sp, #4]
   d7d88:	4633      	mov	r3, r6
   d7d8a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7d8e:	494d      	ldr	r1, [pc, #308]	; (d7ec4 <_tzset_unlocked_r+0x2f4>)
   d7d90:	4628      	mov	r0, r5
   d7d92:	f7fd fbd1 	bl	d5538 <siscanf>
   d7d96:	2803      	cmp	r0, #3
   d7d98:	d17e      	bne.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7d9a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7d9e:	1e4b      	subs	r3, r1, #1
   d7da0:	2b0b      	cmp	r3, #11
   d7da2:	d879      	bhi.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7da4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7da8:	1e53      	subs	r3, r2, #1
   d7daa:	2b04      	cmp	r3, #4
   d7dac:	d874      	bhi.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7dae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7db2:	2b06      	cmp	r3, #6
   d7db4:	d870      	bhi.n	d7e98 <_tzset_unlocked_r+0x2c8>
   d7db6:	f887 8008 	strb.w	r8, [r7, #8]
   d7dba:	60f9      	str	r1, [r7, #12]
   d7dbc:	613a      	str	r2, [r7, #16]
   d7dbe:	617b      	str	r3, [r7, #20]
   d7dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7dc2:	eb05 0803 	add.w	r8, r5, r3
   d7dc6:	e02a      	b.n	d7e1e <_tzset_unlocked_r+0x24e>
   d7dc8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7dcc:	bf06      	itte	eq
   d7dce:	3501      	addeq	r5, #1
   d7dd0:	4643      	moveq	r3, r8
   d7dd2:	2344      	movne	r3, #68	; 0x44
   d7dd4:	220a      	movs	r2, #10
   d7dd6:	a90b      	add	r1, sp, #44	; 0x2c
   d7dd8:	4628      	mov	r0, r5
   d7dda:	9305      	str	r3, [sp, #20]
   d7ddc:	f7ff fe3e 	bl	d7a5c <strtoul>
   d7de0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7de4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7de8:	4545      	cmp	r5, r8
   d7dea:	9b05      	ldr	r3, [sp, #20]
   d7dec:	d114      	bne.n	d7e18 <_tzset_unlocked_r+0x248>
   d7dee:	234d      	movs	r3, #77	; 0x4d
   d7df0:	f1b9 0f00 	cmp.w	r9, #0
   d7df4:	d107      	bne.n	d7e06 <_tzset_unlocked_r+0x236>
   d7df6:	7223      	strb	r3, [r4, #8]
   d7df8:	2303      	movs	r3, #3
   d7dfa:	60e3      	str	r3, [r4, #12]
   d7dfc:	2302      	movs	r3, #2
   d7dfe:	6123      	str	r3, [r4, #16]
   d7e00:	f8c4 9014 	str.w	r9, [r4, #20]
   d7e04:	e00b      	b.n	d7e1e <_tzset_unlocked_r+0x24e>
   d7e06:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7e0a:	230b      	movs	r3, #11
   d7e0c:	62a3      	str	r3, [r4, #40]	; 0x28
   d7e0e:	2301      	movs	r3, #1
   d7e10:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7e12:	2300      	movs	r3, #0
   d7e14:	6323      	str	r3, [r4, #48]	; 0x30
   d7e16:	e002      	b.n	d7e1e <_tzset_unlocked_r+0x24e>
   d7e18:	b280      	uxth	r0, r0
   d7e1a:	723b      	strb	r3, [r7, #8]
   d7e1c:	6178      	str	r0, [r7, #20]
   d7e1e:	2302      	movs	r3, #2
   d7e20:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7e24:	2300      	movs	r3, #0
   d7e26:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7e2a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7e2e:	930a      	str	r3, [sp, #40]	; 0x28
   d7e30:	f898 3000 	ldrb.w	r3, [r8]
   d7e34:	2b2f      	cmp	r3, #47	; 0x2f
   d7e36:	d10b      	bne.n	d7e50 <_tzset_unlocked_r+0x280>
   d7e38:	9603      	str	r6, [sp, #12]
   d7e3a:	f8cd a008 	str.w	sl, [sp, #8]
   d7e3e:	9601      	str	r6, [sp, #4]
   d7e40:	f8cd b000 	str.w	fp, [sp]
   d7e44:	4633      	mov	r3, r6
   d7e46:	aa07      	add	r2, sp, #28
   d7e48:	491f      	ldr	r1, [pc, #124]	; (d7ec8 <_tzset_unlocked_r+0x2f8>)
   d7e4a:	4640      	mov	r0, r8
   d7e4c:	f7fd fb74 	bl	d5538 <siscanf>
   d7e50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7e54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7e58:	213c      	movs	r1, #60	; 0x3c
   d7e5a:	fb01 3302 	mla	r3, r1, r2, r3
   d7e5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7e62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7e66:	fb01 3302 	mla	r3, r1, r2, r3
   d7e6a:	61bb      	str	r3, [r7, #24]
   d7e6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7e6e:	f109 0901 	add.w	r9, r9, #1
   d7e72:	f1b9 0f02 	cmp.w	r9, #2
   d7e76:	4445      	add	r5, r8
   d7e78:	f107 071c 	add.w	r7, r7, #28
   d7e7c:	f47f af74 	bne.w	d7d68 <_tzset_unlocked_r+0x198>
   d7e80:	6860      	ldr	r0, [r4, #4]
   d7e82:	f7ff fdf5 	bl	d7a70 <__tzcalc_limits>
   d7e86:	4b08      	ldr	r3, [pc, #32]	; (d7ea8 <_tzset_unlocked_r+0x2d8>)
   d7e88:	6a22      	ldr	r2, [r4, #32]
   d7e8a:	601a      	str	r2, [r3, #0]
   d7e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7e8e:	1a9b      	subs	r3, r3, r2
   d7e90:	4a07      	ldr	r2, [pc, #28]	; (d7eb0 <_tzset_unlocked_r+0x2e0>)
   d7e92:	bf18      	it	ne
   d7e94:	2301      	movne	r3, #1
   d7e96:	6013      	str	r3, [r2, #0]
   d7e98:	b00d      	add	sp, #52	; 0x34
   d7e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e9e:	bf00      	nop
   d7ea0:	000d89b0 	.word	0x000d89b0
   d7ea4:	2003e7e0 	.word	0x2003e7e0
   d7ea8:	2003e7e8 	.word	0x2003e7e8
   d7eac:	000d89b3 	.word	0x000d89b3
   d7eb0:	2003e7e4 	.word	0x2003e7e4
   d7eb4:	2003e1a0 	.word	0x2003e1a0
   d7eb8:	2003e7d3 	.word	0x2003e7d3
   d7ebc:	000d89b7 	.word	0x000d89b7
   d7ec0:	000d89da 	.word	0x000d89da
   d7ec4:	000d89c6 	.word	0x000d89c6
   d7ec8:	000d89d9 	.word	0x000d89d9
   d7ecc:	2003e7c8 	.word	0x2003e7c8

000d7ed0 <_findenv_r>:
   d7ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ed4:	4607      	mov	r7, r0
   d7ed6:	468b      	mov	fp, r1
   d7ed8:	4690      	mov	r8, r2
   d7eda:	f000 f8d9 	bl	d8090 <__env_lock>
   d7ede:	4b19      	ldr	r3, [pc, #100]	; (d7f44 <_findenv_r+0x74>)
   d7ee0:	681d      	ldr	r5, [r3, #0]
   d7ee2:	469a      	mov	sl, r3
   d7ee4:	b13d      	cbz	r5, d7ef6 <_findenv_r+0x26>
   d7ee6:	465c      	mov	r4, fp
   d7ee8:	4623      	mov	r3, r4
   d7eea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7eee:	b142      	cbz	r2, d7f02 <_findenv_r+0x32>
   d7ef0:	2a3d      	cmp	r2, #61	; 0x3d
   d7ef2:	461c      	mov	r4, r3
   d7ef4:	d1f8      	bne.n	d7ee8 <_findenv_r+0x18>
   d7ef6:	4638      	mov	r0, r7
   d7ef8:	f000 f8cb 	bl	d8092 <__env_unlock>
   d7efc:	2000      	movs	r0, #0
   d7efe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f02:	ebcb 0404 	rsb	r4, fp, r4
   d7f06:	46a9      	mov	r9, r5
   d7f08:	f859 0b04 	ldr.w	r0, [r9], #4
   d7f0c:	2800      	cmp	r0, #0
   d7f0e:	d0f2      	beq.n	d7ef6 <_findenv_r+0x26>
   d7f10:	4622      	mov	r2, r4
   d7f12:	4659      	mov	r1, fp
   d7f14:	f7ff fc6c 	bl	d77f0 <strncmp>
   d7f18:	b988      	cbnz	r0, d7f3e <_findenv_r+0x6e>
   d7f1a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7f1e:	191e      	adds	r6, r3, r4
   d7f20:	5d1b      	ldrb	r3, [r3, r4]
   d7f22:	2b3d      	cmp	r3, #61	; 0x3d
   d7f24:	d10b      	bne.n	d7f3e <_findenv_r+0x6e>
   d7f26:	f8da 3000 	ldr.w	r3, [sl]
   d7f2a:	1aed      	subs	r5, r5, r3
   d7f2c:	10ad      	asrs	r5, r5, #2
   d7f2e:	4638      	mov	r0, r7
   d7f30:	f8c8 5000 	str.w	r5, [r8]
   d7f34:	f000 f8ad 	bl	d8092 <__env_unlock>
   d7f38:	1c70      	adds	r0, r6, #1
   d7f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f3e:	464d      	mov	r5, r9
   d7f40:	e7e1      	b.n	d7f06 <_findenv_r+0x36>
   d7f42:	bf00      	nop
   d7f44:	2003e1e8 	.word	0x2003e1e8

000d7f48 <_getenv_r>:
   d7f48:	b507      	push	{r0, r1, r2, lr}
   d7f4a:	aa01      	add	r2, sp, #4
   d7f4c:	f7ff ffc0 	bl	d7ed0 <_findenv_r>
   d7f50:	b003      	add	sp, #12
   d7f52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7f58 <__gettzinfo>:
   d7f58:	4800      	ldr	r0, [pc, #0]	; (d7f5c <__gettzinfo+0x4>)
   d7f5a:	4770      	bx	lr
   d7f5c:	2003e1a8 	.word	0x2003e1a8

000d7f60 <gmtime_r>:
   d7f60:	6802      	ldr	r2, [r0, #0]
   d7f62:	4b47      	ldr	r3, [pc, #284]	; (d8080 <gmtime_r+0x120>)
   d7f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f66:	fb92 f4f3 	sdiv	r4, r2, r3
   d7f6a:	fb03 2214 	mls	r2, r3, r4, r2
   d7f6e:	2a00      	cmp	r2, #0
   d7f70:	bfbc      	itt	lt
   d7f72:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7f76:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7f7a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7f7e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7f82:	fb92 f3f0 	sdiv	r3, r2, r0
   d7f86:	fb00 2213 	mls	r2, r0, r3, r2
   d7f8a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7f8e:	bfac      	ite	ge
   d7f90:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7f94:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7f98:	608b      	str	r3, [r1, #8]
   d7f9a:	fb92 f3f0 	sdiv	r3, r2, r0
   d7f9e:	fb00 2213 	mls	r2, r0, r3, r2
   d7fa2:	604b      	str	r3, [r1, #4]
   d7fa4:	600a      	str	r2, [r1, #0]
   d7fa6:	2307      	movs	r3, #7
   d7fa8:	1ce2      	adds	r2, r4, #3
   d7faa:	fb92 f3f3 	sdiv	r3, r2, r3
   d7fae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7fb2:	1ad3      	subs	r3, r2, r3
   d7fb4:	618b      	str	r3, [r1, #24]
   d7fb6:	4b33      	ldr	r3, [pc, #204]	; (d8084 <gmtime_r+0x124>)
   d7fb8:	4d33      	ldr	r5, [pc, #204]	; (d8088 <gmtime_r+0x128>)
   d7fba:	fb94 f5f5 	sdiv	r5, r4, r5
   d7fbe:	fb03 4405 	mla	r4, r3, r5, r4
   d7fc2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7fc6:	fbb4 f2f2 	udiv	r2, r4, r2
   d7fca:	4422      	add	r2, r4
   d7fcc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7fd0:	fbb4 f3f7 	udiv	r3, r4, r7
   d7fd4:	1ad2      	subs	r2, r2, r3
   d7fd6:	482d      	ldr	r0, [pc, #180]	; (d808c <gmtime_r+0x12c>)
   d7fd8:	fbb4 f0f0 	udiv	r0, r4, r0
   d7fdc:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7fe0:	1a13      	subs	r3, r2, r0
   d7fe2:	fbb3 f6f6 	udiv	r6, r3, r6
   d7fe6:	4434      	add	r4, r6
   d7fe8:	f240 126d 	movw	r2, #365	; 0x16d
   d7fec:	fbb3 f0f2 	udiv	r0, r3, r2
   d7ff0:	fbb3 f3f7 	udiv	r3, r3, r7
   d7ff4:	1ae3      	subs	r3, r4, r3
   d7ff6:	fb02 3310 	mls	r3, r2, r0, r3
   d7ffa:	2499      	movs	r4, #153	; 0x99
   d7ffc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8000:	3202      	adds	r2, #2
   d8002:	fbb2 f2f4 	udiv	r2, r2, r4
   d8006:	2a0a      	cmp	r2, #10
   d8008:	fb04 f402 	mul.w	r4, r4, r2
   d800c:	f104 0602 	add.w	r6, r4, #2
   d8010:	f04f 0405 	mov.w	r4, #5
   d8014:	fbb6 f4f4 	udiv	r4, r6, r4
   d8018:	bf34      	ite	cc
   d801a:	2602      	movcc	r6, #2
   d801c:	f06f 0609 	mvncs.w	r6, #9
   d8020:	4416      	add	r6, r2
   d8022:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8026:	fb02 0505 	mla	r5, r2, r5, r0
   d802a:	1c5f      	adds	r7, r3, #1
   d802c:	2e01      	cmp	r6, #1
   d802e:	bf98      	it	ls
   d8030:	3501      	addls	r5, #1
   d8032:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8036:	eba7 0704 	sub.w	r7, r7, r4
   d803a:	d302      	bcc.n	d8042 <gmtime_r+0xe2>
   d803c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8040:	e014      	b.n	d806c <gmtime_r+0x10c>
   d8042:	0782      	lsls	r2, r0, #30
   d8044:	d105      	bne.n	d8052 <gmtime_r+0xf2>
   d8046:	2464      	movs	r4, #100	; 0x64
   d8048:	fbb0 f2f4 	udiv	r2, r0, r4
   d804c:	fb04 0212 	mls	r2, r4, r2, r0
   d8050:	b94a      	cbnz	r2, d8066 <gmtime_r+0x106>
   d8052:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8056:	fbb0 f4f2 	udiv	r4, r0, r2
   d805a:	fb02 0014 	mls	r0, r2, r4, r0
   d805e:	fab0 f280 	clz	r2, r0
   d8062:	0952      	lsrs	r2, r2, #5
   d8064:	e000      	b.n	d8068 <gmtime_r+0x108>
   d8066:	2201      	movs	r2, #1
   d8068:	333b      	adds	r3, #59	; 0x3b
   d806a:	441a      	add	r2, r3
   d806c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8070:	2300      	movs	r3, #0
   d8072:	61ca      	str	r2, [r1, #28]
   d8074:	614d      	str	r5, [r1, #20]
   d8076:	610e      	str	r6, [r1, #16]
   d8078:	60cf      	str	r7, [r1, #12]
   d807a:	620b      	str	r3, [r1, #32]
   d807c:	4608      	mov	r0, r1
   d807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8080:	00015180 	.word	0x00015180
   d8084:	fffdc54f 	.word	0xfffdc54f
   d8088:	00023ab1 	.word	0x00023ab1
   d808c:	00023ab0 	.word	0x00023ab0

000d8090 <__env_lock>:
   d8090:	4770      	bx	lr

000d8092 <__env_unlock>:
   d8092:	4770      	bx	lr

000d8094 <dynalib_user>:
   d8094:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d80a4:	0000 0000                                   ....

000d80a8 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d80b0:	40cd 000d 40e1 000d 6c50 6e61 2074 6157     .@...@..Plant Wa
   d80c0:	6574 6572 0064 6854 2065 6925 3e20 2520     tered.The %i > %
   d80d0:	2c69 7420 7275 696e 676e 6f20 206e 7570     i, turning on pu
   d80e0:	706d 5400 6568 2520 2069 203c 6925 6e20     mp.The %i < %i n
   d80f0:	206f 6177 6574 2072 656e 6465 6465 4100     o water needed.A
   d8100:	2074 7325 7420 6568 6d20 696f 7473 7275     t %s the moistur
   d8110:	2065 6572 6461 6e69 2067 7369 2520 2069     e reading is %i 
   d8120:	000a 6854 2065 6974 656d 6920 2073 7325     ..The time is %s
   d8130:	0a20 6500 766e 762d 6c61 0073 7542 7474      ..env-vals.Butt
   d8140:	6e6f 5320 6174 6574 6920 2073 6925 0a20     on State is %i .
   d8150:	7200 7361 6168 0070 6f69 612e 6164 7266     .rashap.io.adafr
   d8160:	6975 2e74 6f63 006d 3935 3138 3936 6166     uit.com.598169fa
   d8170:	6233 3961 3634 3633 3439 6131 3333 3930     3ba94636941a3309
   d8180:	3637 3465 6532 6332 7200 7361 6168 2f70     76e42e2c.rashap/
   d8190:	6566 6465 2f73 6f48 656d 545f 6d65 6570     feeds/Home_Tempe
   d81a0:	6172 7574 6572 7200 7361 6168 2f70 6566     rature.rashap/fe
   d81b0:	6465 2f73 6f48 656d 4d5f 696f 7473 7275     eds/Home_Moistur
   d81c0:	0065 6172 6873 7061 662f 6565 7364 482f     e.rashap/feeds/H
   d81d0:	6d6f 5f65 6157 6574 0072 6172 6873 7061     ome_Water.rashap
   d81e0:	662f 6565 7364 4c2f 4445 4f5f 006e 0000     /feeds/LED_On...

000d81f0 <_ZTV10JsonBuffer>:
	...
   d81f8:	4691 000d 46ad 000d                         .F...F..

000d8200 <_ZTV10JsonWriter>:
	...
   d8208:	46c1 000d 46d5 000d 6c25 0075 3025 7834     .F...F..%lu.%04x
   d8218:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d8228:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d8238:	2500 666c 0000 0000                         .%lf....

000d8240 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8248:	40c9 000d 4581 000d 4935 000d 49e1 000d     .@...E..5I...I..
   d8258:	4a13 000d 4949 000d 4989 000d               .J..II...I..

000d8264 <_ZTV13Adafruit_MQTT>:
	...
   d8274:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d8284:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d8294:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d82a4:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d82b4:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d82c4:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d82d4:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d82e4:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d82f4:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d8304:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d8314:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d8324:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d8334:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d8344:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d8354:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d8364:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d8374:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d8384:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d8394:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d83a4:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d83b4:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d83c4:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d83d4:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d83e4:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d83f4:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d8404:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d8414:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d8424:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d8434:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d8444:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d8454:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d8464:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d8474:	7465 6961 736c 002e                         etails..

000d847c <_ZTVN5spark13EthernetClassE>:
	...
   d8484:	55e7 000d 55dd 000d 55d3 000d 55c9 000d     .U...U...U...U..
   d8494:	55bd 000d 55b1 000d 55a5 000d 559d 000d     .U...U...U...U..
   d84a4:	5593 000d 5589 000d 6e9d 000d               .U...U...n..

000d84b0 <_ZTV8SPIClass>:
	...
   d84b8:	5605 000d 5607 000d 6162 6475 5300 7265     .V...V..baud.Ser
   d84c8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d84d8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d84e8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d84f8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8508:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8518:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8528:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8538:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d8548:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d8558:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d8568:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d8578:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d8588:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   d8598:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d85a8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d85b8:	0065 0000                                   e...

000d85bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d85c4:	5d55 000d 5d5b 000d 5d9f 000d 5d69 000d     U]..[]...]..i]..
   d85d4:	5d57 000d                                   W]..

000d85d8 <_ZTV9IPAddress>:
	...
   d85e0:	62ed 000d 62dd 000d 62df 000d               .b...b...b..

000d85ec <_ZTV9USBSerial>:
	...
   d85f4:	63f1 000d 6441 000d 644f 000d 59a5 000d     .c..Ad..Od...Y..
   d8604:	642d 000d 63f3 000d 6409 000d 643b 000d     -d...c...d..;d..
   d8614:	641f 000d 63ed 000d                         .d...c..

000d861c <_ZTV11USARTSerial>:
	...
   d8624:	64fd 000d 654d 000d 655b 000d 59a5 000d     .d..Me..[e...Y..
   d8634:	6511 000d 6533 000d 651f 000d 6547 000d     .e..3e...e..Ge..
   d8644:	64ff 000d 6503 000d                         .d...e..

000d864c <_ZTV7TwoWire>:
	...
   d8654:	6629 000d 6673 000d 664b 000d 662b 000d     )f..sf..Kf..+f..
   d8664:	6653 000d 665b 000d 6663 000d 666b 000d     Sf..[f..cf..kf..

000d8674 <_ZTVN5spark9MeshClassE>:
	...
   d867c:	670b 000d 6701 000d 66f7 000d 66ed 000d     .g...g...f...f..
   d868c:	66e1 000d 66d5 000d 66c9 000d 66c1 000d     .f...f...f...f..
   d869c:	66b7 000d 66ad 000d 6e9d 000d               .f...f...n..

000d86a8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d86b0:	68b1 000d 68b7 000d 6d9f 000d 68c5 000d     .h...h...m...h..
   d86c0:	68b3 000d                                   .h..

000d86c4 <_ZTV9TCPClient>:
	...
   d86cc:	42dd 000d 42f5 000d 6829 000d 6843 000d     .B...B..)h..Ch..
   d86dc:	6c45 000d 6997 000d 6969 000d 686d 000d     El...i..ii..mh..
   d86ec:	6b21 000d 6a1d 000d 69cb 000d 6c15 000d     !k...j...i...l..
   d86fc:	686f 000d 68a7 000d 6855 000d 68c9 000d     oh...h..Uh...h..
   d870c:	6949 000d 6977 6972 676e 7200 6365 2076     Ii..wiring.recv 
   d871c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d8728 <_ZTVN5spark9WiFiClassE>:
	...
   d8730:	6e15 000d 6e0b 000d 6e01 000d 6db7 000d     .n...n...n...m..
   d8740:	6df5 000d 6de9 000d 6ddd 000d 6dd5 000d     .m...m...m...m..
   d8750:	6dcb 000d 6dc1 000d 6e9d 000d               .m...m...n..

000d875c <_ZTVN5spark12NetworkClassE>:
	...
   d8764:	6e35 000d 6e3f 000d 6e49 000d 6e53 000d     5n..?n..In..Sn..
   d8774:	6e5d 000d 6e69 000d 6e75 000d 6e81 000d     ]n..in..un...n..
   d8784:	6e89 000d 6e93 000d 6e9d 000d               .n...n...n..

000d8790 <_ZSt7nothrow>:
	...

000d8791 <day_name.4725>:
   d8791:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d87a1:	6972 6153 4a74                                   riSat

000d87a6 <mon_name.4726>:
   d87a6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d87b6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d87c6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d87d6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d87e6:	6425 000a                                   %d..

000d87ea <_ctype_>:
   d87ea:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d87fa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d880a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d881a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d882a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d883a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d884a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d885a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d886a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d88ec <__sf_fake_stdin>:
	...

000d890c <__sf_fake_stdout>:
	...

000d892c <__sf_fake_stderr>:
	...
   d894c:	0043 0000                                   C...

000d8950 <__month_lengths>:
   d8950:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8960:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8970:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8980:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8990:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d89a0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d89b0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d89c0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d89d0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d89e0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d89ec <link_const_variable_data_end>:
   d89ec:	000d4591 	.word	0x000d4591
   d89f0:	000d4931 	.word	0x000d4931
   d89f4:	000d4a73 	.word	0x000d4a73
   d89f8:	000d4ffb 	.word	0x000d4ffb
   d89fc:	000d55f1 	.word	0x000d55f1
   d8a00:	000d5655 	.word	0x000d5655
   d8a04:	000d597d 	.word	0x000d597d
   d8a08:	000d5ad9 	.word	0x000d5ad9
   d8a0c:	000d5bd1 	.word	0x000d5bd1
   d8a10:	000d5c29 	.word	0x000d5c29
   d8a14:	000d67d9 	.word	0x000d67d9
   d8a18:	000d6e21 	.word	0x000d6e21
   d8a1c:	000d6f69 	.word	0x000d6f69
   d8a20:	000d714d 	.word	0x000d714d
   d8a24:	000d71d1 	.word	0x000d71d1
   d8a28:	000d7295 	.word	0x000d7295
   d8a2c:	000d7359 	.word	0x000d7359
